
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  000082de  00008372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000082de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000369  0080021c  0080021c  0000838e  2**0
                  ALLOC
  3 .stab         00003714  00000000  00000000  00008390  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eb9  00000000  00000000  0000baa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000218  00000000  00000000  0000c95d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001914  00000000  00000000  0000cb75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000049cd  00000000  00000000  0000e489  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010ab  00000000  00000000  00012e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005e2c  00000000  00000000  00013f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007d0  00000000  00000000  00019d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001252  00000000  00000000  0001a500  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022bd  00000000  00000000  0001b752  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000278  00000000  00000000  0001da0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  0001dc87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 16 10 	jmp	0x202c	; 0x202c <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 fb 1b 	jmp	0x37f6	; 0x37f6 <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 a5 32 	jmp	0x654a	; 0x654a <__vector_32>
      84:	0c 94 bb 32 	jmp	0x6576	; 0x6576 <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 18 32 	jmp	0x6430	; 0x6430 <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 ec 31 	jmp	0x63d8	; 0x63d8 <__vector_42>
      ac:	0c 94 02 32 	jmp	0x6404	; 0x6404 <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 55 31 	jmp	0x62aa	; 0x62aa <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	27 13       	cpse	r18, r23
      e6:	0b 13       	cpse	r16, r27
      e8:	d9 12       	cpse	r13, r25
      ea:	c4 12       	cpse	r12, r20
      ec:	9b 12       	cpse	r9, r27
      ee:	89 12       	cpse	r8, r25
      f0:	60 12       	cpse	r6, r16
      f2:	44 12       	cpse	r4, r20
      f4:	0b 12       	cpse	r0, r27
      f6:	f3 11       	cpse	r31, r3
      f8:	8c 11       	cpse	r24, r12
      fa:	8c 11       	cpse	r24, r12
      fc:	8c 11       	cpse	r24, r12
      fe:	8c 11       	cpse	r24, r12
     100:	8c 11       	cpse	r24, r12
     102:	8c 11       	cpse	r24, r12
     104:	38 12       	cpse	r3, r24
     106:	e8 11       	cpse	r30, r8
     108:	8c 11       	cpse	r24, r12
     10a:	8c 11       	cpse	r24, r12
     10c:	8c 11       	cpse	r24, r12
     10e:	8c 11       	cpse	r24, r12
     110:	8c 11       	cpse	r24, r12
     112:	8c 11       	cpse	r24, r12
     114:	8c 11       	cpse	r24, r12
     116:	8c 11       	cpse	r24, r12
     118:	8c 11       	cpse	r24, r12
     11a:	8c 11       	cpse	r24, r12
     11c:	8c 11       	cpse	r24, r12
     11e:	8c 11       	cpse	r24, r12
     120:	0b 12       	cpse	r0, r27
     122:	d9 12       	cpse	r13, r25
     124:	c0 11       	cpse	r28, r0
     126:	b3 11       	cpse	r27, r3
     128:	8c 11       	cpse	r24, r12
     12a:	8c 11       	cpse	r24, r12
     12c:	8c 11       	cpse	r24, r12
     12e:	8c 11       	cpse	r24, r12
     130:	8c 11       	cpse	r24, r12
     132:	8c 11       	cpse	r24, r12
     134:	8c 11       	cpse	r24, r12
     136:	8c 11       	cpse	r24, r12
     138:	8c 11       	cpse	r24, r12
     13a:	8c 11       	cpse	r24, r12
     13c:	8c 11       	cpse	r24, r12
     13e:	8c 11       	cpse	r24, r12
     140:	9b 12       	cpse	r9, r27
     142:	60 12       	cpse	r6, r16
     144:	8c 11       	cpse	r24, r12
     146:	8c 11       	cpse	r24, r12
     148:	27 13       	cpse	r18, r23
     14a:	89 12       	cpse	r8, r25
     14c:	cc 11       	cpse	r28, r12
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	ee ed       	ldi	r30, 0xDE	; 222
     1b2:	f2 e8       	ldi	r31, 0x82	; 130
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ac 31       	cpi	r26, 0x1C	; 28
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	15 e0       	ldi	r17, 0x05	; 5
     1c2:	ac e1       	ldi	r26, 0x1C	; 28
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a5 38       	cpi	r26, 0x85	; 133
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 6e 41 	jmp	0x82dc	; 0x82dc <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <main+0x26>
     202:	0f 92       	push	r0
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     208:	0e 94 9a 1b 	call	0x3734	; 0x3734 <initPeripherals>

	calibrateSensors();
     20c:	0e 94 1d 38 	call	0x703a	; 0x703a <calibrateSensors>

	initBehaviors();
     210:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <initBehaviors>

	startTime = getTime100MicroSec();
     214:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     21c:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
     220:	9b 01       	movw	r18, r22
     222:	ac 01       	movw	r20, r24
     224:	60 93 58 04 	sts	0x0458, r22
     228:	30 93 59 04 	sts	0x0459, r19
     22c:	40 93 5a 04 	sts	0x045A, r20
     230:	50 93 5b 04 	sts	0x045B, r21
     234:	10 92 5c 04 	sts	0x045C, r1
     238:	10 92 5d 04 	sts	0x045D, r1
     23c:	10 92 5e 04 	sts	0x045E, r1
     240:	10 92 5f 04 	sts	0x045F, r1
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     244:	aa 24       	eor	r10, r10
     246:	bb 24       	eor	r11, r11


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
     24e:	1b 82       	std	Y+3, r1	; 0x03
     250:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     252:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     254:	22 24       	eor	r2, r2
     256:	23 94       	inc	r2
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     258:	0e 94 75 1b 	call	0x36ea	; 0x36ea <getSelector>
     25c:	80 93 48 04 	sts	0x0448, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     260:	0e 94 5d 37 	call	0x6eba	; 0x6eba <readAccelXYZ>

		computeAngle();
     264:	0e 94 99 3c 	call	0x7932	; 0x7932 <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     268:	80 91 48 04 	lds	r24, 0x0448
     26c:	87 30       	cpi	r24, 0x07	; 7
     26e:	09 f4       	brne	.+2      	; 0x272 <main+0x96>
     270:	b3 c1       	rjmp	.+870    	; 0x5d8 <main+0x3fc>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     272:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     276:	6c 19       	sub	r22, r12
     278:	7d 09       	sbc	r23, r13
     27a:	8e 09       	sbc	r24, r14
     27c:	9f 09       	sbc	r25, r15
     27e:	6e 31       	cpi	r22, 0x1E	; 30
     280:	4b e4       	ldi	r20, 0x4B	; 75
     282:	74 07       	cpc	r23, r20
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	84 07       	cpc	r24, r20
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	94 07       	cpc	r25, r20
     28c:	08 f0       	brcs	.+2      	; 0x290 <main+0xb4>
     28e:	90 c1       	rjmp	.+800    	; 0x5b0 <main+0x3d4>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     290:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     294:	0e 94 2b 0c 	call	0x1856	; 0x1856 <handleRFCommands>
		//}


		if(calibrateOdomFlag==0) {
     298:	80 91 c0 04 	lds	r24, 0x04C0
     29c:	88 23       	and	r24, r24
     29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0xc6>
     2a0:	72 c0       	rjmp	.+228    	; 0x386 <main+0x1aa>
				}

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
     2a2:	80 91 48 04 	lds	r24, 0x0448
     2a6:	86 30       	cpi	r24, 0x06	; 6
     2a8:	09 f4       	brne	.+2      	; 0x2ac <main+0xd0>
     2aa:	5c c1       	rjmp	.+696    	; 0x564 <main+0x388>
     2ac:	8f 30       	cpi	r24, 0x0F	; 15
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <main+0xd6>
     2b0:	4a c0       	rjmp	.+148    	; 0x346 <main+0x16a>
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
     2b2:	0e 94 a3 2c 	call	0x5946	; 0x5946 <handleMotorsWithSpeedController>
     2b6:	80 91 48 04 	lds	r24, 0x0448
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     2ba:	08 17       	cp	r16, r24
     2bc:	69 f2       	breq	.-102    	; 0x258 <main+0x7c>
			disableObstacleAvoidance();
     2be:	0e 94 de 34 	call	0x69bc	; 0x69bc <disableObstacleAvoidance>
			disableCliffAvoidance();
     2c2:	0e 94 e5 34 	call	0x69ca	; 0x69ca <disableCliffAvoidance>
			GREEN_LED0_OFF;
     2c6:	80 91 0b 01 	lds	r24, 0x010B
     2ca:	81 60       	ori	r24, 0x01	; 1
     2cc:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     2d0:	80 91 0b 01 	lds	r24, 0x010B
     2d4:	82 60       	ori	r24, 0x02	; 2
     2d6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     2da:	80 91 0b 01 	lds	r24, 0x010B
     2de:	84 60       	ori	r24, 0x04	; 4
     2e0:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     2e4:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     2e6:	80 91 0b 01 	lds	r24, 0x010B
     2ea:	80 61       	ori	r24, 0x10	; 16
     2ec:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     2f0:	80 91 0b 01 	lds	r24, 0x010B
     2f4:	80 62       	ori	r24, 0x20	; 32
     2f6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     2fa:	80 91 0b 01 	lds	r24, 0x010B
     2fe:	80 64       	ori	r24, 0x40	; 64
     300:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     304:	80 91 0b 01 	lds	r24, 0x010B
     308:	80 68       	ori	r24, 0x80	; 128
     30a:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     30e:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     312:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     316:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <updateRedLed>
			updateGreenLed(pwm_green);
     320:	80 91 0d 02 	lds	r24, 0x020D
     324:	0e 94 39 35 	call	0x6a72	; 0x6a72 <updateGreenLed>
			updateBlueLed(pwm_blue);
     328:	80 91 0e 02 	lds	r24, 0x020E
     32c:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <updateBlueLed>
			setRightSpeed(0);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
			setLeftSpeed(0);
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
			rgbState = 0;
     33c:	10 92 18 03 	sts	0x0318, r1
     340:	00 91 48 04 	lds	r16, 0x0448
     344:	89 cf       	rjmp	.-238    	; 0x258 <main+0x7c>

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
		}

		switch(currentSelector) {
     34c:	90 91 48 04 	lds	r25, 0x0448
     350:	89 2f       	mov	r24, r25
     352:	96 30       	cpi	r25, 0x06	; 6
     354:	09 f4       	brne	.+2      	; 0x358 <main+0x17c>
     356:	06 c1       	rjmp	.+524    	; 0x564 <main+0x388>
     358:	97 30       	cpi	r25, 0x07	; 7
     35a:	08 f0       	brcs	.+2      	; 0x35e <main+0x182>
     35c:	5e c1       	rjmp	.+700    	; 0x61a <main+0x43e>
     35e:	92 30       	cpi	r25, 0x02	; 2
     360:	09 f4       	brne	.+2      	; 0x364 <main+0x188>
     362:	56 c1       	rjmp	.+684    	; 0x610 <main+0x434>
     364:	93 30       	cpi	r25, 0x03	; 3
     366:	08 f0       	brcs	.+2      	; 0x36a <main+0x18e>
     368:	63 c2       	rjmp	.+1222   	; 0x830 <main+0x654>
     36a:	99 23       	and	r25, r25
     36c:	09 f4       	brne	.+2      	; 0x370 <main+0x194>
     36e:	9b c1       	rjmp	.+822    	; 0x6a6 <main+0x4ca>
     370:	91 30       	cpi	r25, 0x01	; 1
     372:	21 f4       	brne	.+8      	; 0x37c <main+0x1a0>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     374:	0e 94 da 34 	call	0x69b4	; 0x69b4 <enableObstacleAvoidance>
     378:	90 91 48 04 	lds	r25, 0x0448
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     37c:	99 23       	and	r25, r25
     37e:	09 f0       	breq	.+2      	; 0x382 <main+0x1a6>
     380:	98 cf       	rjmp	.-208    	; 0x2b2 <main+0xd6>
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	9a cf       	rjmp	.-204    	; 0x2ba <main+0xde>
			handleRFCommands();
		//}


		if(calibrateOdomFlag==0) {
			if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     386:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
     38a:	9b 01       	movw	r18, r22
     38c:	ac 01       	movw	r20, r24
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	cb 01       	movw	r24, r22
     394:	f0 91 58 04 	lds	r31, 0x0458
     398:	e0 91 59 04 	lds	r30, 0x0459
     39c:	80 90 5a 04 	lds	r8, 0x045A
     3a0:	40 90 5b 04 	lds	r4, 0x045B
     3a4:	30 90 5c 04 	lds	r3, 0x045C
     3a8:	50 90 5d 04 	lds	r5, 0x045D
     3ac:	60 90 5e 04 	lds	r6, 0x045E
     3b0:	70 90 5f 04 	lds	r7, 0x045F
     3b4:	b2 2f       	mov	r27, r18
     3b6:	bf 1b       	sub	r27, r31
     3b8:	a1 e0       	ldi	r26, 0x01	; 1
     3ba:	2b 17       	cp	r18, r27
     3bc:	08 f0       	brcs	.+2      	; 0x3c0 <main+0x1e4>
     3be:	a0 e0       	ldi	r26, 0x00	; 0
     3c0:	f3 2f       	mov	r31, r19
     3c2:	fe 1b       	sub	r31, r30
     3c4:	ef 2f       	mov	r30, r31
     3c6:	f1 e0       	ldi	r31, 0x01	; 1
     3c8:	3e 17       	cp	r19, r30
     3ca:	08 f0       	brcs	.+2      	; 0x3ce <main+0x1f2>
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	9e 2e       	mov	r9, r30
     3d0:	9a 1a       	sub	r9, r26
     3d2:	a9 2d       	mov	r26, r9
     3d4:	99 24       	eor	r9, r9
     3d6:	93 94       	inc	r9
     3d8:	ea 17       	cp	r30, r26
     3da:	08 f0       	brcs	.+2      	; 0x3de <main+0x202>
     3dc:	99 24       	eor	r9, r9
     3de:	f9 29       	or	r31, r9
     3e0:	e4 2f       	mov	r30, r20
     3e2:	e8 19       	sub	r30, r8
     3e4:	8e 2e       	mov	r8, r30
     3e6:	e1 e0       	ldi	r30, 0x01	; 1
     3e8:	48 15       	cp	r20, r8
     3ea:	08 f0       	brcs	.+2      	; 0x3ee <main+0x212>
     3ec:	e0 e0       	ldi	r30, 0x00	; 0
     3ee:	98 2c       	mov	r9, r8
     3f0:	9f 1a       	sub	r9, r31
     3f2:	f1 e0       	ldi	r31, 0x01	; 1
     3f4:	89 14       	cp	r8, r9
     3f6:	08 f0       	brcs	.+2      	; 0x3fa <main+0x21e>
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	ef 2b       	or	r30, r31
     3fc:	f5 2f       	mov	r31, r21
     3fe:	f4 19       	sub	r31, r4
     400:	4f 2e       	mov	r4, r31
     402:	f1 e0       	ldi	r31, 0x01	; 1
     404:	54 15       	cp	r21, r4
     406:	08 f0       	brcs	.+2      	; 0x40a <main+0x22e>
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	84 2c       	mov	r8, r4
     40c:	8e 1a       	sub	r8, r30
     40e:	e1 e0       	ldi	r30, 0x01	; 1
     410:	48 14       	cp	r4, r8
     412:	08 f0       	brcs	.+2      	; 0x416 <main+0x23a>
     414:	e0 e0       	ldi	r30, 0x00	; 0
     416:	fe 2b       	or	r31, r30
     418:	31 94       	neg	r3
     41a:	e1 e0       	ldi	r30, 0x01	; 1
     41c:	63 15       	cp	r22, r3
     41e:	08 f0       	brcs	.+2      	; 0x422 <main+0x246>
     420:	e0 e0       	ldi	r30, 0x00	; 0
     422:	43 2c       	mov	r4, r3
     424:	4f 1a       	sub	r4, r31
     426:	f1 e0       	ldi	r31, 0x01	; 1
     428:	34 14       	cp	r3, r4
     42a:	08 f0       	brcs	.+2      	; 0x42e <main+0x252>
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	ef 2b       	or	r30, r31
     430:	51 94       	neg	r5
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	75 15       	cp	r23, r5
     436:	08 f0       	brcs	.+2      	; 0x43a <main+0x25e>
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	35 2c       	mov	r3, r5
     43c:	3e 1a       	sub	r3, r30
     43e:	e1 e0       	ldi	r30, 0x01	; 1
     440:	53 14       	cp	r5, r3
     442:	08 f0       	brcs	.+2      	; 0x446 <main+0x26a>
     444:	e0 e0       	ldi	r30, 0x00	; 0
     446:	fe 2b       	or	r31, r30
     448:	61 94       	neg	r6
     44a:	e1 e0       	ldi	r30, 0x01	; 1
     44c:	86 15       	cp	r24, r6
     44e:	08 f0       	brcs	.+2      	; 0x452 <main+0x276>
     450:	e0 e0       	ldi	r30, 0x00	; 0
     452:	96 2d       	mov	r25, r6
     454:	9f 1b       	sub	r25, r31
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	69 16       	cp	r6, r25
     45a:	08 f0       	brcs	.+2      	; 0x45e <main+0x282>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	e8 2b       	or	r30, r24
     460:	71 94       	neg	r7
     462:	7e 16       	cp	r7, r30
     464:	91 f4       	brne	.+36     	; 0x48a <main+0x2ae>
     466:	99 23       	and	r25, r25
     468:	81 f4       	brne	.+32     	; 0x48a <main+0x2ae>
     46a:	33 20       	and	r3, r3
     46c:	71 f4       	brne	.+28     	; 0x48a <main+0x2ae>
     46e:	44 20       	and	r4, r4
     470:	61 f4       	brne	.+24     	; 0x48a <main+0x2ae>
     472:	88 20       	and	r8, r8
     474:	51 f4       	brne	.+20     	; 0x48a <main+0x2ae>
     476:	99 20       	and	r9, r9
     478:	41 f4       	brne	.+16     	; 0x48a <main+0x2ae>
     47a:	a2 30       	cpi	r26, 0x02	; 2
     47c:	30 f4       	brcc	.+12     	; 0x48a <main+0x2ae>
     47e:	a1 30       	cpi	r26, 0x01	; 1
     480:	09 f0       	breq	.+2      	; 0x484 <main+0x2a8>
     482:	0f cf       	rjmp	.-482    	; 0x2a2 <main+0xc6>
     484:	b0 39       	cpi	r27, 0x90	; 144
     486:	08 f4       	brcc	.+2      	; 0x48a <main+0x2ae>
     488:	0c cf       	rjmp	.-488    	; 0x2a2 <main+0xc6>
				speedStepCounter = getTime100MicroSec();
     48a:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
     48e:	9b 01       	movw	r18, r22
     490:	ac 01       	movw	r20, r24
     492:	60 93 58 04 	sts	0x0458, r22
     496:	30 93 59 04 	sts	0x0459, r19
     49a:	40 93 5a 04 	sts	0x045A, r20
     49e:	50 93 5b 04 	sts	0x045B, r21
     4a2:	10 92 5c 04 	sts	0x045C, r1
     4a6:	10 92 5d 04 	sts	0x045D, r1
     4aa:	10 92 5e 04 	sts	0x045E, r1
     4ae:	10 92 5f 04 	sts	0x045F, r1

				if(softAccEnabled) {
     4b2:	80 91 60 04 	lds	r24, 0x0460
     4b6:	88 23       	and	r24, r24
     4b8:	09 f4       	brne	.+2      	; 0x4bc <main+0x2e0>
     4ba:	fb c1       	rjmp	.+1014   	; 0x8b2 <main+0x6d6>
					if(pwm_right_desired == 0) {
     4bc:	80 91 f7 02 	lds	r24, 0x02F7
     4c0:	90 91 f8 02 	lds	r25, 0x02F8
     4c4:	00 97       	sbiw	r24, 0x00	; 0
     4c6:	09 f4       	brne	.+2      	; 0x4ca <main+0x2ee>
     4c8:	8c c2       	rjmp	.+1304   	; 0x9e2 <main+0x806>
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     4ca:	20 91 fb 02 	lds	r18, 0x02FB
     4ce:	30 91 fc 02 	lds	r19, 0x02FC
     4d2:	28 9f       	mul	r18, r24
     4d4:	a0 01       	movw	r20, r0
     4d6:	29 9f       	mul	r18, r25
     4d8:	50 0d       	add	r21, r0
     4da:	38 9f       	mul	r19, r24
     4dc:	50 0d       	add	r21, r0
     4de:	11 24       	eor	r1, r1
     4e0:	57 fd       	sbrc	r21, 7
     4e2:	7f c2       	rjmp	.+1278   	; 0x9e2 <main+0x806>
						pwm_intermediate_right_desired = 0;
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     4e4:	28 17       	cp	r18, r24
     4e6:	39 07       	cpc	r19, r25
     4e8:	0c f0       	brlt	.+2      	; 0x4ec <main+0x310>
     4ea:	e6 c6       	rjmp	.+3532   	; 0x12b8 <main+0x10dc>
						pwm_intermediate_right_desired += speedStep;
     4ec:	40 91 17 02 	lds	r20, 0x0217
     4f0:	24 0f       	add	r18, r20
     4f2:	31 1d       	adc	r19, r1
     4f4:	30 93 fc 02 	sts	0x02FC, r19
     4f8:	20 93 fb 02 	sts	0x02FB, r18
						if(pwm_intermediate_right_desired > pwm_right_desired) {
     4fc:	82 17       	cp	r24, r18
     4fe:	93 07       	cpc	r25, r19
     500:	24 f4       	brge	.+8      	; 0x50a <main+0x32e>
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired -= speedStep;
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
     502:	90 93 fc 02 	sts	0x02FC, r25
     506:	80 93 fb 02 	sts	0x02FB, r24
						}					
					}
	
					if(pwm_left_desired == 0) {
     50a:	80 91 f9 02 	lds	r24, 0x02F9
     50e:	90 91 fa 02 	lds	r25, 0x02FA
     512:	00 97       	sbiw	r24, 0x00	; 0
     514:	09 f4       	brne	.+2      	; 0x518 <main+0x33c>
     516:	60 c2       	rjmp	.+1216   	; 0x9d8 <main+0x7fc>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     518:	20 91 fd 02 	lds	r18, 0x02FD
     51c:	30 91 fe 02 	lds	r19, 0x02FE
     520:	28 9f       	mul	r18, r24
     522:	a0 01       	movw	r20, r0
     524:	29 9f       	mul	r18, r25
     526:	50 0d       	add	r21, r0
     528:	38 9f       	mul	r19, r24
     52a:	50 0d       	add	r21, r0
     52c:	11 24       	eor	r1, r1
     52e:	57 fd       	sbrc	r21, 7
     530:	53 c2       	rjmp	.+1190   	; 0x9d8 <main+0x7fc>
						pwm_intermediate_left_desired = 0;
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     532:	28 17       	cp	r18, r24
     534:	39 07       	cpc	r19, r25
     536:	0c f0       	brlt	.+2      	; 0x53a <main+0x35e>
     538:	d0 c6       	rjmp	.+3488   	; 0x12da <main+0x10fe>
						pwm_intermediate_left_desired += speedStep;
     53a:	40 91 17 02 	lds	r20, 0x0217
     53e:	24 0f       	add	r18, r20
     540:	31 1d       	adc	r19, r1
     542:	30 93 fe 02 	sts	0x02FE, r19
     546:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_left_desired > pwm_left_desired) {
     54a:	82 17       	cp	r24, r18
     54c:	93 07       	cpc	r25, r19
     54e:	0c f0       	brlt	.+2      	; 0x552 <main+0x376>
     550:	a8 ce       	rjmp	.-688    	; 0x2a2 <main+0xc6>
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
					pwm_intermediate_left_desired = pwm_left_desired;
     552:	90 93 fe 02 	sts	0x02FE, r25
     556:	80 93 fd 02 	sts	0x02FD, r24
				}

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
     55a:	80 91 48 04 	lds	r24, 0x0448
     55e:	86 30       	cpi	r24, 0x06	; 6
     560:	09 f0       	breq	.+2      	; 0x564 <main+0x388>
     562:	a4 ce       	rjmp	.-696    	; 0x2ac <main+0xd0>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     564:	90 91 1f 04 	lds	r25, 0x041F
     568:	91 30       	cpi	r25, 0x01	; 1
     56a:	09 f4       	brne	.+2      	; 0x56e <main+0x392>
     56c:	ba c2       	rjmp	.+1396   	; 0xae2 <main+0x906>
     56e:	91 30       	cpi	r25, 0x01	; 1
     570:	08 f0       	brcs	.+2      	; 0x574 <main+0x398>
     572:	3c c2       	rjmp	.+1144   	; 0x9ec <main+0x810>
						case 0:
							setRightSpeed(0);
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
							setLeftSpeed(0);
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
							turnOffGreenLeds();
     580:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <turnOffGreenLeds>
							pwm_red=255;
     584:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     588:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     58c:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <updateRedLed>
							updateGreenLed(pwm_green);
     596:	80 91 0d 02 	lds	r24, 0x020D
     59a:	0e 94 39 35 	call	0x6a72	; 0x6a72 <updateGreenLed>
							updateBlueLed(pwm_blue);
     59e:	80 91 0e 02 	lds	r24, 0x020E
     5a2:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <updateBlueLed>
							LED_IR1_HIGH;
     5a6:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     5a8:	45 9a       	sbi	0x08, 5	; 8
     5aa:	90 91 48 04 	lds	r25, 0x0448
							break;
     5ae:	e6 ce       	rjmp	.-564    	; 0x37c <main+0x1a0>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     5b0:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     5b4:	80 91 48 04 	lds	r24, 0x0448
     5b8:	98 2f       	mov	r25, r24
     5ba:	94 50       	subi	r25, 0x04	; 4
     5bc:	92 30       	cpi	r25, 0x02	; 2
     5be:	08 f4       	brcc	.+2      	; 0x5c2 <main+0x3e6>
     5c0:	85 c1       	rjmp	.+778    	; 0x8cc <main+0x6f0>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     5c2:	87 30       	cpi	r24, 0x07	; 7
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <main+0x3ec>
     5c6:	ad c1       	rjmp	.+858    	; 0x922 <main+0x746>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     5c8:	86 30       	cpi	r24, 0x06	; 6
     5ca:	09 f4       	brne	.+2      	; 0x5ce <main+0x3f2>
     5cc:	e4 c0       	rjmp	.+456    	; 0x796 <main+0x5ba>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     5ce:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
     5d2:	6b 01       	movw	r12, r22
     5d4:	7c 01       	movw	r14, r24
     5d6:	5c ce       	rjmp	.-840    	; 0x290 <main+0xb4>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     5d8:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
     5dc:	29 81       	ldd	r18, Y+1	; 0x01
     5de:	3a 81       	ldd	r19, Y+2	; 0x02
     5e0:	4b 81       	ldd	r20, Y+3	; 0x03
     5e2:	5c 81       	ldd	r21, Y+4	; 0x04
     5e4:	62 1b       	sub	r22, r18
     5e6:	73 0b       	sbc	r23, r19
     5e8:	84 0b       	sbc	r24, r20
     5ea:	95 0b       	sbc	r25, r21
     5ec:	68 3c       	cpi	r22, 0xC8	; 200
     5ee:	32 e1       	ldi	r19, 0x12	; 18
     5f0:	73 07       	cpc	r23, r19
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	83 07       	cpc	r24, r19
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	93 07       	cpc	r25, r19
     5fa:	08 f4       	brcc	.+2      	; 0x5fe <main+0x422>
     5fc:	3a ce       	rjmp	.-908    	; 0x272 <main+0x96>
				pwm_red = 255;
     5fe:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     602:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     606:	10 93 0e 02 	sts	0x020E, r17
     60a:	33 ce       	rjmp	.-922    	; 0x272 <main+0x96>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     60c:	0e 94 da 34 	call	0x69b4	; 0x69b4 <enableObstacleAvoidance>
					enableCliffAvoidance();
     610:	0e 94 e1 34 	call	0x69c2	; 0x69c2 <enableCliffAvoidance>
     614:	90 91 48 04 	lds	r25, 0x0448
					break;
     618:	b1 ce       	rjmp	.-670    	; 0x37c <main+0x1a0>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     61a:	9a 30       	cpi	r25, 0x0A	; 10
     61c:	09 f4       	brne	.+2      	; 0x620 <main+0x444>
     61e:	a1 c0       	rjmp	.+322    	; 0x762 <main+0x586>
     620:	9b 30       	cpi	r25, 0x0B	; 11
     622:	f8 f4       	brcc	.+62     	; 0x662 <main+0x486>
     624:	98 30       	cpi	r25, 0x08	; 8
     626:	09 f4       	brne	.+2      	; 0x62a <main+0x44e>
     628:	90 c0       	rjmp	.+288    	; 0x74a <main+0x56e>
     62a:	99 30       	cpi	r25, 0x09	; 9
     62c:	08 f4       	brcc	.+2      	; 0x630 <main+0x454>
     62e:	40 c0       	rjmp	.+128    	; 0x6b0 <main+0x4d4>
					if(calibrateOdomFlag==1) {
						handleCalibration();
					}
					break;

			case 9:	if(leftMotSteps <= 3000) {
     630:	60 91 d3 02 	lds	r22, 0x02D3
     634:	70 91 d4 02 	lds	r23, 0x02D4
     638:	80 91 d5 02 	lds	r24, 0x02D5
     63c:	90 91 d6 02 	lds	r25, 0x02D6
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e8       	ldi	r19, 0x80	; 128
     644:	4b e3       	ldi	r20, 0x3B	; 59
     646:	55 e4       	ldi	r21, 0x45	; 69
     648:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__cmpsf2>
     64c:	18 16       	cp	r1, r24
     64e:	14 f5       	brge	.+68     	; 0x694 <main+0x4b8>

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
						setRightSpeed(0);
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
     65c:	90 91 48 04 	lds	r25, 0x0448
     660:	8d ce       	rjmp	.-742    	; 0x37c <main+0x1a0>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     662:	9c 30       	cpi	r25, 0x0C	; 12
     664:	09 f4       	brne	.+2      	; 0x668 <main+0x48c>
     666:	ca c0       	rjmp	.+404    	; 0x7fc <main+0x620>
     668:	9c 30       	cpi	r25, 0x0C	; 12
     66a:	08 f4       	brcc	.+2      	; 0x66e <main+0x492>
     66c:	ad c0       	rjmp	.+346    	; 0x7c8 <main+0x5ec>
     66e:	9d 30       	cpi	r25, 0x0D	; 13
     670:	09 f0       	breq	.+2      	; 0x674 <main+0x498>
     672:	84 ce       	rjmp	.-760    	; 0x37c <main+0x1a0>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
     674:	60 91 d3 02 	lds	r22, 0x02D3
     678:	70 91 d4 02 	lds	r23, 0x02D4
     67c:	80 91 d5 02 	lds	r24, 0x02D5
     680:	90 91 d6 02 	lds	r25, 0x02D6
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 ec       	ldi	r19, 0xC0	; 192
     688:	4a ed       	ldi	r20, 0xDA	; 218
     68a:	55 e4       	ldi	r21, 0x45	; 69
     68c:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__cmpsf2>
     690:	18 16       	cp	r1, r24
     692:	f4 f2       	brlt	.-68     	; 0x650 <main+0x474>
						setLeftSpeed(40);
     694:	88 e2       	ldi	r24, 0x28	; 40
     696:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
						setRightSpeed(40);
     69a:	88 e2       	ldi	r24, 0x28	; 40
     69c:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
     6a0:	90 91 48 04 	lds	r25, 0x0448
     6a4:	6b ce       	rjmp	.-810    	; 0x37c <main+0x1a0>
		}

		switch(currentSelector) {
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     6a6:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <handleMotorsWithNoController>
     6aa:	90 91 48 04 	lds	r25, 0x0448
					break;
     6ae:	66 ce       	rjmp	.-820    	; 0x37c <main+0x1a0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     6b0:	80 91 4c 04 	lds	r24, 0x044C
     6b4:	82 30       	cpi	r24, 0x02	; 2
     6b6:	09 f4       	brne	.+2      	; 0x6ba <main+0x4de>
     6b8:	50 c5       	rjmp	.+2720   	; 0x115a <main+0xf7e>
     6ba:	83 30       	cpi	r24, 0x03	; 3
     6bc:	08 f0       	brcs	.+2      	; 0x6c0 <main+0x4e4>
     6be:	b5 c1       	rjmp	.+874    	; 0xa2a <main+0x84e>
     6c0:	88 23       	and	r24, r24
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <main+0x4ea>
     6c4:	81 c4       	rjmp	.+2306   	; 0xfc8 <main+0xdec>
						case 0:	// move around
							turnOffGreenLeds();
     6c6:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <turnOffGreenLeds>
							GREEN_LED0_ON;
     6ca:	80 91 0b 01 	lds	r24, 0x010B
     6ce:	8e 7f       	andi	r24, 0xFE	; 254
     6d0:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     6d4:	10 92 4d 04 	sts	0x044D, r1
							enableObstacleAvoidance();
     6d8:	0e 94 da 34 	call	0x69b4	; 0x69b4 <enableObstacleAvoidance>
							setRightSpeed(20);
     6dc:	84 e1       	ldi	r24, 0x14	; 20
     6de:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
							setLeftSpeed(20);
     6e2:	84 e1       	ldi	r24, 0x14	; 20
     6e4:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     6e8:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
     6ec:	9b 01       	movw	r18, r22
     6ee:	ac 01       	movw	r20, r24
     6f0:	60 93 54 04 	sts	0x0454, r22
     6f4:	70 93 55 04 	sts	0x0455, r23
     6f8:	80 93 56 04 	sts	0x0456, r24
     6fc:	90 93 57 04 	sts	0x0457, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     700:	80 91 50 04 	lds	r24, 0x0450
     704:	90 91 51 04 	lds	r25, 0x0451
     708:	a0 91 52 04 	lds	r26, 0x0452
     70c:	b0 91 53 04 	lds	r27, 0x0453
     710:	28 1b       	sub	r18, r24
     712:	39 0b       	sbc	r19, r25
     714:	4a 0b       	sbc	r20, r26
     716:	5b 0b       	sbc	r21, r27
     718:	23 33       	cpi	r18, 0x33	; 51
     71a:	6f ee       	ldi	r22, 0xEF	; 239
     71c:	36 07       	cpc	r19, r22
     71e:	62 e0       	ldi	r22, 0x02	; 2
     720:	46 07       	cpc	r20, r22
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	56 07       	cpc	r21, r22
     726:	10 f0       	brcs	.+4      	; 0x72c <main+0x550>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     728:	20 92 4c 04 	sts	0x044C, r2
							//pwm_green = 0;
							//pwm_blue = 0;													
							break;							
					}

					updateRedLed(pwm_red);
     72c:	80 91 0c 02 	lds	r24, 0x020C
     730:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <updateRedLed>
					updateGreenLed(pwm_green);
     734:	80 91 0d 02 	lds	r24, 0x020D
     738:	0e 94 39 35 	call	0x6a72	; 0x6a72 <updateGreenLed>
					updateBlueLed(pwm_blue);
     73c:	80 91 0e 02 	lds	r24, 0x020E
     740:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <updateBlueLed>
     744:	90 91 48 04 	lds	r25, 0x0448

					break;
     748:	19 ce       	rjmp	.-974    	; 0x37c <main+0x1a0>
  
			case 8:	// motors calibration
					irEnabled = 1;
     74a:	20 92 12 02 	sts	0x0212, r2
					if(calibrateOdomFlag==1) {
     74e:	80 91 c0 04 	lds	r24, 0x04C0
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	09 f0       	breq	.+2      	; 0x758 <main+0x57c>
     756:	ad cd       	rjmp	.-1190   	; 0x2b2 <main+0xd6>
						handleCalibration();
     758:	0e 94 4a 22 	call	0x4494	; 0x4494 <handleCalibration>
     75c:	90 91 48 04 	lds	r25, 0x0448
     760:	0d ce       	rjmp	.-998    	; 0x37c <main+0x1a0>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 10:if(leftMotSteps <= 4000) {
     762:	60 91 d3 02 	lds	r22, 0x02D3
     766:	70 91 d4 02 	lds	r23, 0x02D4
     76a:	80 91 d5 02 	lds	r24, 0x02D5
     76e:	90 91 d6 02 	lds	r25, 0x02D6
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	4a e7       	ldi	r20, 0x7A	; 122
     778:	55 e4       	ldi	r21, 0x45	; 69
     77a:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__cmpsf2>
     77e:	18 16       	cp	r1, r24
     780:	0c f4       	brge	.+2      	; 0x784 <main+0x5a8>
     782:	66 cf       	rjmp	.-308    	; 0x650 <main+0x474>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     784:	88 e2       	ldi	r24, 0x28	; 40
     786:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
						setRightSpeed(40);
     78a:	88 e2       	ldi	r24, 0x28	; 40
     78c:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
     790:	90 91 48 04 	lds	r25, 0x0448
     794:	f3 cd       	rjmp	.-1050   	; 0x37c <main+0x1a0>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     796:	80 91 1f 04 	lds	r24, 0x041F
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	09 f0       	breq	.+2      	; 0x7a0 <main+0x5c4>
     79e:	17 cf       	rjmp	.-466    	; 0x5ce <main+0x3f2>
     7a0:	90 91 15 03 	lds	r25, 0x0315
     7a4:	92 30       	cpi	r25, 0x02	; 2
     7a6:	08 f0       	brcs	.+2      	; 0x7aa <main+0x5ce>
     7a8:	12 cf       	rjmp	.-476    	; 0x5ce <main+0x3f2>
					if(rgbState == 0) {
     7aa:	90 91 18 03 	lds	r25, 0x0318
     7ae:	99 23       	and	r25, r25
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <main+0x5d8>
     7b2:	04 c6       	rjmp	.+3080   	; 0x13bc <main+0x11e0>
						pwm_red = 254;
     7b4:	4e ef       	ldi	r20, 0xFE	; 254
     7b6:	40 93 0c 02 	sts	0x020C, r20
						pwm_green = 255;
     7ba:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     7be:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     7c2:	80 93 18 03 	sts	0x0318, r24
     7c6:	03 cf       	rjmp	.-506    	; 0x5ce <main+0x3f2>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 11:if(leftMotSteps <= 5000) {
     7c8:	60 91 d3 02 	lds	r22, 0x02D3
     7cc:	70 91 d4 02 	lds	r23, 0x02D4
     7d0:	80 91 d5 02 	lds	r24, 0x02D5
     7d4:	90 91 d6 02 	lds	r25, 0x02D6
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e4       	ldi	r19, 0x40	; 64
     7dc:	4c e9       	ldi	r20, 0x9C	; 156
     7de:	55 e4       	ldi	r21, 0x45	; 69
     7e0:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__cmpsf2>
     7e4:	18 16       	cp	r1, r24
     7e6:	0c f4       	brge	.+2      	; 0x7ea <main+0x60e>
     7e8:	33 cf       	rjmp	.-410    	; 0x650 <main+0x474>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     7ea:	88 e2       	ldi	r24, 0x28	; 40
     7ec:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
						setRightSpeed(40);
     7f0:	88 e2       	ldi	r24, 0x28	; 40
     7f2:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
     7f6:	90 91 48 04 	lds	r25, 0x0448
     7fa:	c0 cd       	rjmp	.-1152   	; 0x37c <main+0x1a0>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     7fc:	60 91 d3 02 	lds	r22, 0x02D3
     800:	70 91 d4 02 	lds	r23, 0x02D4
     804:	80 91 d5 02 	lds	r24, 0x02D5
     808:	90 91 d6 02 	lds	r25, 0x02D6
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e8       	ldi	r19, 0x80	; 128
     810:	4b eb       	ldi	r20, 0xBB	; 187
     812:	55 e4       	ldi	r21, 0x45	; 69
     814:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__cmpsf2>
     818:	18 16       	cp	r1, r24
     81a:	0c f0       	brlt	.+2      	; 0x81e <main+0x642>
     81c:	3b cf       	rjmp	.-394    	; 0x694 <main+0x4b8>
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
						setRightSpeed(0);
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
     82a:	90 91 48 04 	lds	r25, 0x0448
     82e:	a6 cd       	rjmp	.-1204   	; 0x37c <main+0x1a0>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     830:	94 30       	cpi	r25, 0x04	; 4
     832:	d1 f0       	breq	.+52     	; 0x868 <main+0x68c>
     834:	95 30       	cpi	r25, 0x05	; 5
     836:	08 f4       	brcc	.+2      	; 0x83a <main+0x65e>
     838:	e9 ce       	rjmp	.-558    	; 0x60c <main+0x430>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     83a:	80 91 0c 02 	lds	r24, 0x020C
     83e:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <updateRedLed>
					updateGreenLed(pwm_green);
     842:	80 91 0d 02 	lds	r24, 0x020D
     846:	0e 94 39 35 	call	0x6a72	; 0x6a72 <updateGreenLed>
					updateBlueLed(pwm_blue);
     84a:	80 91 0e 02 	lds	r24, 0x020E
     84e:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <updateBlueLed>
					enableObstacleAvoidance();
     852:	0e 94 da 34 	call	0x69b4	; 0x69b4 <enableObstacleAvoidance>
					setLeftSpeed(25);
     856:	89 e1       	ldi	r24, 0x19	; 25
     858:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
					setRightSpeed(25);
     85c:	89 e1       	ldi	r24, 0x19	; 25
     85e:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
     862:	90 91 48 04 	lds	r25, 0x0448
					break;
     866:	8a cd       	rjmp	.-1260   	; 0x37c <main+0x1a0>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     868:	80 91 0b 01 	lds	r24, 0x010B
     86c:	8e 7f       	andi	r24, 0xFE	; 254
     86e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     872:	80 91 0b 01 	lds	r24, 0x010B
     876:	8d 7f       	andi	r24, 0xFD	; 253
     878:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     87c:	80 91 0b 01 	lds	r24, 0x010B
     880:	8b 7f       	andi	r24, 0xFB	; 251
     882:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     886:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     888:	80 91 0b 01 	lds	r24, 0x010B
     88c:	8f 7e       	andi	r24, 0xEF	; 239
     88e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     892:	80 91 0b 01 	lds	r24, 0x010B
     896:	8f 7d       	andi	r24, 0xDF	; 223
     898:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     89c:	80 91 0b 01 	lds	r24, 0x010B
     8a0:	8f 7b       	andi	r24, 0xBF	; 191
     8a2:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     8a6:	80 91 0b 01 	lds	r24, 0x010B
     8aa:	8f 77       	andi	r24, 0x7F	; 127
     8ac:	80 93 0b 01 	sts	0x010B, r24
     8b0:	3d cf       	rjmp	.-390    	; 0x72c <main+0x550>
						if(pwm_intermediate_left_desired < pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
     8b2:	80 91 f7 02 	lds	r24, 0x02F7
     8b6:	90 91 f8 02 	lds	r25, 0x02F8
     8ba:	90 93 fc 02 	sts	0x02FC, r25
     8be:	80 93 fb 02 	sts	0x02FB, r24
					pwm_intermediate_left_desired = pwm_left_desired;
     8c2:	80 91 f9 02 	lds	r24, 0x02F9
     8c6:	90 91 fa 02 	lds	r25, 0x02FA
     8ca:	43 ce       	rjmp	.-890    	; 0x552 <main+0x376>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     8cc:	0e 94 05 41 	call	0x820a	; 0x820a <rand>
     8d0:	6e e1       	ldi	r22, 0x1E	; 30
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
     8d8:	a8 0e       	add	r10, r24
     8da:	b9 1e       	adc	r11, r25
     8dc:	5f e7       	ldi	r21, 0x7F	; 127
     8de:	a5 22       	and	r10, r21
     8e0:	bb 24       	eor	r11, r11

				switch(rgbState) {
     8e2:	80 91 18 03 	lds	r24, 0x0318
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	09 f4       	brne	.+2      	; 0x8ec <main+0x710>
     8ea:	ee c3       	rjmp	.+2012   	; 0x10c8 <main+0xeec>
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <main+0x716>
     8f0:	61 c3       	rjmp	.+1730   	; 0xfb4 <main+0xdd8>
					case 0:
						pwm_red = 255 - currRand;	
     8f2:	8a 2d       	mov	r24, r10
     8f4:	80 95       	com	r24
     8f6:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     8fa:	20 92 18 03 	sts	0x0318, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     8fe:	80 e2       	ldi	r24, 0x20	; 32
     900:	a8 16       	cp	r10, r24
     902:	b1 04       	cpc	r11, r1
     904:	08 f0       	brcs	.+2      	; 0x908 <main+0x72c>
     906:	d4 c0       	rjmp	.+424    	; 0xab0 <main+0x8d4>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     908:	80 91 0d 02 	lds	r24, 0x020D
     90c:	8f 3f       	cpi	r24, 0xFF	; 255
     90e:	09 f4       	brne	.+2      	; 0x912 <main+0x736>
     910:	5e ce       	rjmp	.-836    	; 0x5ce <main+0x3f2>
     912:	80 91 0e 02 	lds	r24, 0x020E
     916:	8f 3f       	cpi	r24, 0xFF	; 255
     918:	09 f4       	brne	.+2      	; 0x91c <main+0x740>
     91a:	59 ce       	rjmp	.-846    	; 0x5ce <main+0x3f2>
						pwm_red = 255;
     91c:	10 93 0c 02 	sts	0x020C, r17
     920:	56 ce       	rjmp	.-852    	; 0x5ce <main+0x3f2>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     922:	80 91 94 00 	lds	r24, 0x0094
     926:	90 91 95 00 	lds	r25, 0x0095
     92a:	0e 94 0a 41 	call	0x8214	; 0x8214 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     92e:	0e 94 05 41 	call	0x820a	; 0x820a <rand>
     932:	6e e1       	ldi	r22, 0x1E	; 30
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
     93a:	4c 01       	movw	r8, r24
     93c:	8a 0c       	add	r8, r10
     93e:	9b 1c       	adc	r9, r11
     940:	ff e7       	ldi	r31, 0x7F	; 127
     942:	8f 22       	and	r8, r31
     944:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     946:	88 2d       	mov	r24, r8
     948:	80 95       	com	r24
     94a:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     94e:	80 91 94 00 	lds	r24, 0x0094
     952:	90 91 95 00 	lds	r25, 0x0095
     956:	0e 94 0a 41 	call	0x8214	; 0x8214 <srand>
				currRand = (currRand + rand()%30) % 128;	
     95a:	0e 94 05 41 	call	0x820a	; 0x820a <rand>
     95e:	6e e1       	ldi	r22, 0x1E	; 30
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
     966:	6c 01       	movw	r12, r24
     968:	c8 0c       	add	r12, r8
     96a:	d9 1c       	adc	r13, r9
     96c:	2f e7       	ldi	r18, 0x7F	; 127
     96e:	c2 22       	and	r12, r18
     970:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     972:	8c 2d       	mov	r24, r12
     974:	80 95       	com	r24
     976:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     97a:	80 91 94 00 	lds	r24, 0x0094
     97e:	90 91 95 00 	lds	r25, 0x0095
     982:	0e 94 0a 41 	call	0x8214	; 0x8214 <srand>
				currRand = (currRand + rand()%30) % 128;
     986:	0e 94 05 41 	call	0x820a	; 0x820a <rand>
     98a:	6e e1       	ldi	r22, 0x1E	; 30
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
     992:	5c 01       	movw	r10, r24
     994:	ac 0c       	add	r10, r12
     996:	bd 1c       	adc	r11, r13
     998:	3f e7       	ldi	r19, 0x7F	; 127
     99a:	a3 22       	and	r10, r19
     99c:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     99e:	8a 2d       	mov	r24, r10
     9a0:	80 95       	com	r24
     9a2:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     9a6:	80 91 94 00 	lds	r24, 0x0094
     9aa:	90 91 95 00 	lds	r25, 0x0095
     9ae:	0e 94 0a 41 	call	0x8214	; 0x8214 <srand>
				currRand2 = rand()%128;
     9b2:	0e 94 05 41 	call	0x820a	; 0x820a <rand>
     9b6:	60 e8       	ldi	r22, 0x80	; 128
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
				if(currRand2<32) {
     9be:	80 32       	cpi	r24, 0x20	; 32
     9c0:	91 05       	cpc	r25, r1
     9c2:	08 f0       	brcs	.+2      	; 0x9c6 <main+0x7ea>
     9c4:	87 c0       	rjmp	.+270    	; 0xad4 <main+0x8f8>
					pwm_red = 255;
     9c6:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     9ca:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	fb cd       	rjmp	.-1034   	; 0x5ce <main+0x3f2>
					}
	
					if(pwm_left_desired == 0) {
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
						pwm_intermediate_left_desired = 0;
     9d8:	10 92 fe 02 	sts	0x02FE, r1
     9dc:	10 92 fd 02 	sts	0x02FD, r1
     9e0:	60 cc       	rjmp	.-1856   	; 0x2a2 <main+0xc6>

				if(softAccEnabled) {
					if(pwm_right_desired == 0) {
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
						pwm_intermediate_right_desired = 0;
     9e2:	10 92 fc 02 	sts	0x02FC, r1
     9e6:	10 92 fb 02 	sts	0x02FB, r1
     9ea:	8f cd       	rjmp	.-1250   	; 0x50a <main+0x32e>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     9ec:	92 30       	cpi	r25, 0x02	; 2
     9ee:	11 f0       	breq	.+4      	; 0x9f4 <main+0x818>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     9f0:	98 2f       	mov	r25, r24
     9f2:	c4 cc       	rjmp	.-1656   	; 0x37c <main+0x1a0>
     9f4:	90 91 20 04 	lds	r25, 0x0420
     9f8:	99 23       	and	r25, r25
     9fa:	d1 f3       	breq	.-12     	; 0x9f0 <main+0x814>
								turnOnGreenLeds();
     9fc:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     a00:	60 91 13 03 	lds	r22, 0x0313
     a04:	70 91 14 03 	lds	r23, 0x0314
     a08:	8e ef       	ldi	r24, 0xFE	; 254
     a0a:	9f e0       	ldi	r25, 0x0F	; 15
     a0c:	0e 94 69 41 	call	0x82d2	; 0x82d2 <__eewr_word_m2560>
								turnOffGreenLeds();
     a10:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     a14:	8a ea       	ldi	r24, 0xAA	; 170
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								addressReceived = 0;
     a1c:	10 92 20 04 	sts	0x0420, r1
								menuChoice = 0;
     a20:	10 92 1f 04 	sts	0x041F, r1
     a24:	90 91 48 04 	lds	r25, 0x0448
     a28:	a9 cc       	rjmp	.-1710   	; 0x37c <main+0x1a0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     a2a:	84 30       	cpi	r24, 0x04	; 4
     a2c:	09 f4       	brne	.+2      	; 0xa30 <main+0x854>
     a2e:	54 c3       	rjmp	.+1704   	; 0x10d8 <main+0xefc>
     a30:	84 30       	cpi	r24, 0x04	; 4
     a32:	08 f4       	brcc	.+2      	; 0xa36 <main+0x85a>
     a34:	04 c3       	rjmp	.+1544   	; 0x103e <main+0xe62>
     a36:	85 30       	cpi	r24, 0x05	; 5
     a38:	09 f0       	breq	.+2      	; 0xa3c <main+0x860>
     a3a:	78 ce       	rjmp	.-784    	; 0x72c <main+0x550>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     a3c:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <turnOffGreenLeds>
							GREEN_LED6_ON;
     a40:	80 91 0b 01 	lds	r24, 0x010B
     a44:	8f 7b       	andi	r24, 0xBF	; 191
     a46:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     a4a:	80 91 0b 01 	lds	r24, 0x010B
     a4e:	8f 77       	andi	r24, 0x7F	; 127
     a50:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     a54:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
     a58:	9b 01       	movw	r18, r22
     a5a:	ac 01       	movw	r20, r24
     a5c:	60 93 54 04 	sts	0x0454, r22
     a60:	70 93 55 04 	sts	0x0455, r23
     a64:	80 93 56 04 	sts	0x0456, r24
     a68:	90 93 57 04 	sts	0x0457, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     a6c:	80 91 50 04 	lds	r24, 0x0450
     a70:	90 91 51 04 	lds	r25, 0x0451
     a74:	a0 91 52 04 	lds	r26, 0x0452
     a78:	b0 91 53 04 	lds	r27, 0x0453
     a7c:	28 1b       	sub	r18, r24
     a7e:	39 0b       	sbc	r19, r25
     a80:	4a 0b       	sbc	r20, r26
     a82:	5b 0b       	sbc	r21, r27
     a84:	2b 32       	cpi	r18, 0x2B	; 43
     a86:	9c e1       	ldi	r25, 0x1C	; 28
     a88:	39 07       	cpc	r19, r25
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	49 07       	cpc	r20, r25
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	59 07       	cpc	r21, r25
     a92:	08 f4       	brcc	.+2      	; 0xa96 <main+0x8ba>
     a94:	4b ce       	rjmp	.-874    	; 0x72c <main+0x550>
								demoStartTime = getTime100MicroSec();
     a96:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
     a9a:	60 93 50 04 	sts	0x0450, r22
     a9e:	70 93 51 04 	sts	0x0451, r23
     aa2:	80 93 52 04 	sts	0x0452, r24
     aa6:	90 93 53 04 	sts	0x0453, r25
								demoState = 0;							
     aaa:	10 92 4c 04 	sts	0x044C, r1
     aae:	3e ce       	rjmp	.-900    	; 0x72c <main+0x550>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     ab0:	90 e4       	ldi	r25, 0x40	; 64
     ab2:	a9 16       	cp	r10, r25
     ab4:	b1 04       	cpc	r11, r1
     ab6:	08 f0       	brcs	.+2      	; 0xaba <main+0x8de>
     ab8:	cc c3       	rjmp	.+1944   	; 0x1252 <main+0x1076>
					if(pwm_red!=255 && pwm_blue!=255) {
     aba:	80 91 0c 02 	lds	r24, 0x020C
     abe:	8f 3f       	cpi	r24, 0xFF	; 255
     ac0:	09 f4       	brne	.+2      	; 0xac4 <main+0x8e8>
     ac2:	85 cd       	rjmp	.-1270   	; 0x5ce <main+0x3f2>
     ac4:	80 91 0e 02 	lds	r24, 0x020E
     ac8:	8f 3f       	cpi	r24, 0xFF	; 255
     aca:	09 f4       	brne	.+2      	; 0xace <main+0x8f2>
     acc:	80 cd       	rjmp	.-1280   	; 0x5ce <main+0x3f2>
						pwm_green = 255;
     ace:	10 93 0d 02 	sts	0x020D, r17
     ad2:	7d cd       	rjmp	.-1286   	; 0x5ce <main+0x3f2>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     ad4:	80 34       	cpi	r24, 0x40	; 64
     ad6:	91 05       	cpc	r25, r1
     ad8:	08 f0       	brcs	.+2      	; 0xadc <main+0x900>
     ada:	e7 c3       	rjmp	.+1998   	; 0x12aa <main+0x10ce>
					pwm_green = 255;
     adc:	10 93 0d 02 	sts	0x020D, r17
     ae0:	74 cf       	rjmp	.-280    	; 0x9ca <main+0x7ee>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     ae2:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <turnOnGreenLeds>
							updateRedLed(pwm_red);
     ae6:	80 91 0c 02 	lds	r24, 0x020C
     aea:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <updateRedLed>
							updateGreenLed(pwm_green);
     aee:	80 91 0d 02 	lds	r24, 0x020D
     af2:	0e 94 39 35 	call	0x6a72	; 0x6a72 <updateGreenLed>
							updateBlueLed(pwm_blue);
     af6:	80 91 0e 02 	lds	r24, 0x020E
     afa:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <updateBlueLed>
							LED_IR1_LOW;
     afe:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     b00:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     b02:	80 91 22 04 	lds	r24, 0x0422
     b06:	88 23       	and	r24, r24
     b08:	09 f4       	brne	.+2      	; 0xb0c <main+0x930>
     b0a:	a8 cd       	rjmp	.-1200   	; 0x65c <main+0x480>
								getDataNow = 0;	
     b0c:	10 92 22 04 	sts	0x0422, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b10:	80 91 57 02 	lds	r24, 0x0257
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     b1a:	80 91 58 02 	lds	r24, 0x0258
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     b24:	80 91 27 02 	lds	r24, 0x0227
     b28:	90 91 28 02 	lds	r25, 0x0228
     b2c:	61 e0       	ldi	r22, 0x01	; 1
     b2e:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     b32:	80 91 27 02 	lds	r24, 0x0227
     b36:	90 91 28 02 	lds	r25, 0x0228
     b3a:	89 2f       	mov	r24, r25
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b42:	80 91 59 02 	lds	r24, 0x0259
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     b4c:	80 91 5a 02 	lds	r24, 0x025A
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     b56:	80 91 2b 02 	lds	r24, 0x022B
     b5a:	90 91 2c 02 	lds	r25, 0x022C
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     b64:	80 91 2b 02 	lds	r24, 0x022B
     b68:	90 91 2c 02 	lds	r25, 0x022C
     b6c:	89 2f       	mov	r24, r25
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b74:	80 91 5b 02 	lds	r24, 0x025B
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     b7e:	80 91 5c 02 	lds	r24, 0x025C
     b82:	61 e0       	ldi	r22, 0x01	; 1
     b84:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     b88:	80 91 2f 02 	lds	r24, 0x022F
     b8c:	90 91 30 02 	lds	r25, 0x0230
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     b96:	80 91 2f 02 	lds	r24, 0x022F
     b9a:	90 91 30 02 	lds	r25, 0x0230
     b9e:	89 2f       	mov	r24, r25
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ba6:	80 91 5d 02 	lds	r24, 0x025D
     baa:	61 e0       	ldi	r22, 0x01	; 1
     bac:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     bb0:	80 91 5e 02 	lds	r24, 0x025E
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     bba:	80 91 33 02 	lds	r24, 0x0233
     bbe:	90 91 34 02 	lds	r25, 0x0234
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     bc8:	80 91 33 02 	lds	r24, 0x0233
     bcc:	90 91 34 02 	lds	r25, 0x0234
     bd0:	89 2f       	mov	r24, r25
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     bd8:	80 91 5f 02 	lds	r24, 0x025F
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     be2:	80 91 60 02 	lds	r24, 0x0260
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     bec:	80 91 37 02 	lds	r24, 0x0237
     bf0:	90 91 38 02 	lds	r25, 0x0238
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     bfa:	80 91 37 02 	lds	r24, 0x0237
     bfe:	90 91 38 02 	lds	r25, 0x0238
     c02:	89 2f       	mov	r24, r25
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c0a:	80 91 61 02 	lds	r24, 0x0261
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c14:	80 91 62 02 	lds	r24, 0x0262
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c1e:	80 91 3b 02 	lds	r24, 0x023B
     c22:	90 91 3c 02 	lds	r25, 0x023C
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c2c:	80 91 3b 02 	lds	r24, 0x023B
     c30:	90 91 3c 02 	lds	r25, 0x023C
     c34:	89 2f       	mov	r24, r25
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c3c:	80 91 63 02 	lds	r24, 0x0263
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c46:	80 91 64 02 	lds	r24, 0x0264
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c50:	80 91 3f 02 	lds	r24, 0x023F
     c54:	90 91 40 02 	lds	r25, 0x0240
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c5e:	80 91 3f 02 	lds	r24, 0x023F
     c62:	90 91 40 02 	lds	r25, 0x0240
     c66:	89 2f       	mov	r24, r25
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c6e:	80 91 65 02 	lds	r24, 0x0265
     c72:	61 e0       	ldi	r22, 0x01	; 1
     c74:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c78:	80 91 66 02 	lds	r24, 0x0266
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c82:	80 91 43 02 	lds	r24, 0x0243
     c86:	90 91 44 02 	lds	r25, 0x0244
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c90:	80 91 43 02 	lds	r24, 0x0243
     c94:	90 91 44 02 	lds	r25, 0x0244
     c98:	89 2f       	mov	r24, r25
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ca0:	80 91 67 02 	lds	r24, 0x0267
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     caa:	80 91 68 02 	lds	r24, 0x0268
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     cb4:	80 91 47 02 	lds	r24, 0x0247
     cb8:	90 91 48 02 	lds	r25, 0x0248
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     cc2:	80 91 47 02 	lds	r24, 0x0247
     cc6:	90 91 48 02 	lds	r25, 0x0248
     cca:	89 2f       	mov	r24, r25
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     cd2:	80 91 69 02 	lds	r24, 0x0269
     cd6:	61 e0       	ldi	r22, 0x01	; 1
     cd8:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     cdc:	80 91 6a 02 	lds	r24, 0x026A
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ce6:	80 91 4b 02 	lds	r24, 0x024B
     cea:	90 91 4c 02 	lds	r25, 0x024C
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     cf4:	80 91 4b 02 	lds	r24, 0x024B
     cf8:	90 91 4c 02 	lds	r25, 0x024C
     cfc:	89 2f       	mov	r24, r25
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d04:	80 91 6b 02 	lds	r24, 0x026B
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d0e:	80 91 6c 02 	lds	r24, 0x026C
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d18:	80 91 4f 02 	lds	r24, 0x024F
     d1c:	90 91 50 02 	lds	r25, 0x0250
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d26:	80 91 4f 02 	lds	r24, 0x024F
     d2a:	90 91 50 02 	lds	r25, 0x0250
     d2e:	89 2f       	mov	r24, r25
     d30:	61 e0       	ldi	r22, 0x01	; 1
     d32:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d36:	80 91 6d 02 	lds	r24, 0x026D
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d40:	80 91 6e 02 	lds	r24, 0x026E
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d4a:	80 91 53 02 	lds	r24, 0x0253
     d4e:	90 91 54 02 	lds	r25, 0x0254
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d58:	80 91 53 02 	lds	r24, 0x0253
     d5c:	90 91 54 02 	lds	r25, 0x0254
     d60:	89 2f       	mov	r24, r25
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     d68:	80 91 28 04 	lds	r24, 0x0428
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(accX>>8,1);
     d72:	80 91 29 04 	lds	r24, 0x0429
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     d7c:	80 91 2a 04 	lds	r24, 0x042A
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(accY>>8,1);
     d86:	80 91 2b 04 	lds	r24, 0x042B
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     d90:	80 91 2c 04 	lds	r24, 0x042C
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     d9a:	80 91 2d 04 	lds	r24, 0x042D
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(irCommand,1);
     da4:	80 91 23 04 	lds	r24, 0x0423
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(currentSelector,1);
     dae:	80 91 48 04 	lds	r24, 0x0448
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     db8:	80 91 03 01 	lds	r24, 0x0103
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	80 72       	andi	r24, 0x20	; 32
     dc0:	90 70       	andi	r25, 0x00	; 0
     dc2:	95 95       	asr	r25
     dc4:	87 95       	ror	r24
     dc6:	95 95       	asr	r25
     dc8:	87 95       	ror	r24
     dca:	95 95       	asr	r25
     dcc:	87 95       	ror	r24
     dce:	95 95       	asr	r25
     dd0:	87 95       	ror	r24
     dd2:	95 95       	asr	r25
     dd4:	87 95       	ror	r24
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(rfFlags,1);
     ddc:	80 91 15 03 	lds	r24, 0x0315
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
     de6:	60 91 64 04 	lds	r22, 0x0464
     dea:	70 91 65 04 	lds	r23, 0x0465
     dee:	80 91 66 04 	lds	r24, 0x0466
     df2:	90 91 67 04 	lds	r25, 0x0467
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e4       	ldi	r19, 0x40	; 64
     dfa:	4f e0       	ldi	r20, 0x0F	; 15
     dfc:	54 e4       	ldi	r21, 0x44	; 68
     dfe:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
     e02:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <__fixunssfsi>
     e06:	86 2f       	mov	r24, r22
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
     e0e:	60 91 64 04 	lds	r22, 0x0464
     e12:	70 91 65 04 	lds	r23, 0x0465
     e16:	80 91 66 04 	lds	r24, 0x0466
     e1a:	90 91 67 04 	lds	r25, 0x0467
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e4       	ldi	r19, 0x40	; 64
     e22:	4f e0       	ldi	r20, 0x0F	; 15
     e24:	54 e4       	ldi	r21, 0x44	; 68
     e26:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
     e2a:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <__fixunssfsi>
     e2e:	87 2f       	mov	r24, r23
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
     e36:	60 91 6c 04 	lds	r22, 0x046C
     e3a:	70 91 6d 04 	lds	r23, 0x046D
     e3e:	80 91 6e 04 	lds	r24, 0x046E
     e42:	90 91 6f 04 	lds	r25, 0x046F
     e46:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <__fixunssfsi>
     e4a:	86 2f       	mov	r24, r22
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
     e52:	60 91 6c 04 	lds	r22, 0x046C
     e56:	70 91 6d 04 	lds	r23, 0x046D
     e5a:	80 91 6e 04 	lds	r24, 0x046E
     e5e:	90 91 6f 04 	lds	r25, 0x046F
     e62:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <__fixunssfsi>
     e66:	87 2f       	mov	r24, r23
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
     e6e:	60 91 70 04 	lds	r22, 0x0470
     e72:	70 91 71 04 	lds	r23, 0x0471
     e76:	80 91 72 04 	lds	r24, 0x0472
     e7a:	90 91 73 04 	lds	r25, 0x0473
     e7e:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <__fixunssfsi>
     e82:	86 2f       	mov	r24, r22
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
     e8a:	60 91 70 04 	lds	r22, 0x0470
     e8e:	70 91 71 04 	lds	r23, 0x0471
     e92:	80 91 72 04 	lds	r24, 0x0472
     e96:	90 91 73 04 	lds	r25, 0x0473
     e9a:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <__fixunssfsi>
     e9e:	87 2f       	mov	r24, r23
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
     ea6:	60 91 d3 02 	lds	r22, 0x02D3
     eaa:	70 91 d4 02 	lds	r23, 0x02D4
     eae:	80 91 d5 02 	lds	r24, 0x02D5
     eb2:	90 91 d6 02 	lds	r25, 0x02D6
     eb6:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
     eba:	86 2f       	mov	r24, r22
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
     ec2:	60 91 d3 02 	lds	r22, 0x02D3
     ec6:	70 91 d4 02 	lds	r23, 0x02D4
     eca:	80 91 d5 02 	lds	r24, 0x02D5
     ece:	90 91 d6 02 	lds	r25, 0x02D6
     ed2:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
     ed6:	87 2f       	mov	r24, r23
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
     ede:	60 91 d3 02 	lds	r22, 0x02D3
     ee2:	70 91 d4 02 	lds	r23, 0x02D4
     ee6:	80 91 d5 02 	lds	r24, 0x02D5
     eea:	90 91 d6 02 	lds	r25, 0x02D6
     eee:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
     ef8:	60 91 d3 02 	lds	r22, 0x02D3
     efc:	70 91 d4 02 	lds	r23, 0x02D4
     f00:	80 91 d5 02 	lds	r24, 0x02D5
     f04:	90 91 d6 02 	lds	r25, 0x02D6
     f08:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
     f0c:	89 2f       	mov	r24, r25
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
     f14:	60 91 cf 02 	lds	r22, 0x02CF
     f18:	70 91 d0 02 	lds	r23, 0x02D0
     f1c:	80 91 d1 02 	lds	r24, 0x02D1
     f20:	90 91 d2 02 	lds	r25, 0x02D2
     f24:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
     f28:	86 2f       	mov	r24, r22
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
     f30:	60 91 cf 02 	lds	r22, 0x02CF
     f34:	70 91 d0 02 	lds	r23, 0x02D0
     f38:	80 91 d1 02 	lds	r24, 0x02D1
     f3c:	90 91 d2 02 	lds	r25, 0x02D2
     f40:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
     f44:	87 2f       	mov	r24, r23
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
     f4c:	60 91 cf 02 	lds	r22, 0x02CF
     f50:	70 91 d0 02 	lds	r23, 0x02D0
     f54:	80 91 d1 02 	lds	r24, 0x02D1
     f58:	90 91 d2 02 	lds	r25, 0x02D2
     f5c:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
     f66:	60 91 cf 02 	lds	r22, 0x02CF
     f6a:	70 91 d0 02 	lds	r23, 0x02D0
     f6e:	80 91 d1 02 	lds	r24, 0x02D1
     f72:	90 91 d2 02 	lds	r25, 0x02D2
     f76:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
     f7a:	89 2f       	mov	r24, r25
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
     f82:	80 91 f9 02 	lds	r24, 0x02F9
     f86:	90 91 fa 02 	lds	r25, 0x02FA
     f8a:	95 95       	asr	r25
     f8c:	87 95       	ror	r24
     f8e:	95 95       	asr	r25
     f90:	87 95       	ror	r24
     f92:	61 e0       	ldi	r22, 0x01	; 1
     f94:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
     f98:	80 91 f7 02 	lds	r24, 0x02F7
     f9c:	90 91 f8 02 	lds	r25, 0x02F8
     fa0:	95 95       	asr	r25
     fa2:	87 95       	ror	r24
     fa4:	95 95       	asr	r25
     fa6:	87 95       	ror	r24
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	0e 94 95 1a 	call	0x352a	; 0x352a <usart0Transmit>
     fae:	90 91 48 04 	lds	r25, 0x0448
     fb2:	e4 c9       	rjmp	.-3128   	; 0x37c <main+0x1a0>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	09 f0       	breq	.+2      	; 0xfba <main+0xdde>
     fb8:	a2 cc       	rjmp	.-1724   	; 0x8fe <main+0x722>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
     fba:	8a 2d       	mov	r24, r10
     fbc:	80 95       	com	r24
     fbe:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
     fc2:	10 92 18 03 	sts	0x0318, r1
						break;
     fc6:	9b cc       	rjmp	.-1738   	; 0x8fe <main+0x722>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	09 f0       	breq	.+2      	; 0xfce <main+0xdf2>
     fcc:	af cb       	rjmp	.-2210   	; 0x72c <main+0x550>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
     fce:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <turnOffGreenLeds>
							GREEN_LED2_ON;
     fd2:	80 91 0b 01 	lds	r24, 0x010B
     fd6:	8b 7f       	andi	r24, 0xFB	; 251
     fd8:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
     fdc:	10 92 4e 04 	sts	0x044E, r1
							enableObstacleAvoidance();
     fe0:	0e 94 da 34 	call	0x69b4	; 0x69b4 <enableObstacleAvoidance>
							setRightSpeed(15);
     fe4:	8f e0       	ldi	r24, 0x0F	; 15
     fe6:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
							setLeftSpeed(15);
     fea:	8f e0       	ldi	r24, 0x0F	; 15
     fec:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
     ff0:	80 91 69 02 	lds	r24, 0x0269
     ff4:	90 91 6a 02 	lds	r25, 0x026A
     ff8:	e1 e0       	ldi	r30, 0x01	; 1
     ffa:	80 39       	cpi	r24, 0x90	; 144
     ffc:	9e 07       	cpc	r25, r30
     ffe:	0c f4       	brge	.+2      	; 0x1002 <main+0xe26>
    1000:	3a c1       	rjmp	.+628    	; 0x1276 <main+0x109a>
    1002:	80 91 6b 02 	lds	r24, 0x026B
    1006:	90 91 6c 02 	lds	r25, 0x026C
    100a:	f1 e0       	ldi	r31, 0x01	; 1
    100c:	80 39       	cpi	r24, 0x90	; 144
    100e:	9f 07       	cpc	r25, r31
    1010:	0c f4       	brge	.+2      	; 0x1014 <main+0xe38>
    1012:	31 c1       	rjmp	.+610    	; 0x1276 <main+0x109a>
    1014:	80 91 67 02 	lds	r24, 0x0267
    1018:	90 91 68 02 	lds	r25, 0x0268
    101c:	21 e0       	ldi	r18, 0x01	; 1
    101e:	80 39       	cpi	r24, 0x90	; 144
    1020:	92 07       	cpc	r25, r18
    1022:	0c f4       	brge	.+2      	; 0x1026 <main+0xe4a>
    1024:	28 c1       	rjmp	.+592    	; 0x1276 <main+0x109a>
    1026:	80 91 6d 02 	lds	r24, 0x026D
    102a:	90 91 6e 02 	lds	r25, 0x026E
    102e:	31 e0       	ldi	r19, 0x01	; 1
    1030:	80 39       	cpi	r24, 0x90	; 144
    1032:	93 07       	cpc	r25, r19
    1034:	0c f4       	brge	.+2      	; 0x1038 <main+0xe5c>
    1036:	1f c1       	rjmp	.+574    	; 0x1276 <main+0x109a>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    1038:	10 92 4d 04 	sts	0x044D, r1
    103c:	77 cb       	rjmp	.-2322   	; 0x72c <main+0x550>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    103e:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <turnOffGreenLeds>
							GREEN_LED6_ON;
    1042:	80 91 0b 01 	lds	r24, 0x010B
    1046:	8f 7b       	andi	r24, 0xBF	; 191
    1048:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    104c:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    1050:	9b 01       	movw	r18, r22
    1052:	ac 01       	movw	r20, r24
    1054:	60 93 54 04 	sts	0x0454, r22
    1058:	70 93 55 04 	sts	0x0455, r23
    105c:	80 93 56 04 	sts	0x0456, r24
    1060:	90 93 57 04 	sts	0x0457, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    1064:	80 91 50 04 	lds	r24, 0x0450
    1068:	90 91 51 04 	lds	r25, 0x0451
    106c:	a0 91 52 04 	lds	r26, 0x0452
    1070:	b0 91 53 04 	lds	r27, 0x0453
    1074:	28 1b       	sub	r18, r24
    1076:	39 0b       	sbc	r19, r25
    1078:	4a 0b       	sbc	r20, r26
    107a:	5b 0b       	sbc	r21, r27
    107c:	2d 3c       	cpi	r18, 0xCD	; 205
    107e:	66 e6       	ldi	r22, 0x66	; 102
    1080:	36 07       	cpc	r19, r22
    1082:	64 e0       	ldi	r22, 0x04	; 4
    1084:	46 07       	cpc	r20, r22
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	56 07       	cpc	r21, r22
    108a:	08 f4       	brcc	.+2      	; 0x108e <main+0xeb2>
    108c:	39 c1       	rjmp	.+626    	; 0x1300 <main+0x1124>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    108e:	80 91 bb 02 	lds	r24, 0x02BB
    1092:	90 91 bc 02 	lds	r25, 0x02BC
    1096:	e3 e0       	ldi	r30, 0x03	; 3
    1098:	8a 37       	cpi	r24, 0x7A	; 122
    109a:	9e 07       	cpc	r25, r30
    109c:	08 f4       	brcc	.+2      	; 0x10a0 <main+0xec4>
    109e:	3c c1       	rjmp	.+632    	; 0x1318 <main+0x113c>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    10a0:	83 ef       	ldi	r24, 0xF3	; 243
    10a2:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
									setLeftSpeed(-13);
    10a6:	83 ef       	ldi	r24, 0xF3	; 243
    10a8:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    10ac:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    10b0:	60 93 50 04 	sts	0x0450, r22
    10b4:	70 93 51 04 	sts	0x0451, r23
    10b8:	80 93 52 04 	sts	0x0452, r24
    10bc:	90 93 53 04 	sts	0x0453, r25
									demoState = 4;
    10c0:	f4 e0       	ldi	r31, 0x04	; 4
    10c2:	f0 93 4c 04 	sts	0x044C, r31
									break;
    10c6:	32 cb       	rjmp	.-2460   	; 0x72c <main+0x550>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    10c8:	8a 2d       	mov	r24, r10
    10ca:	80 95       	com	r24
    10cc:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    10d0:	62 e0       	ldi	r22, 0x02	; 2
    10d2:	60 93 18 03 	sts	0x0318, r22
						break;
    10d6:	13 cc       	rjmp	.-2010   	; 0x8fe <main+0x722>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    10d8:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <turnOffGreenLeds>
							GREEN_LED6_ON;
    10dc:	80 91 0b 01 	lds	r24, 0x010B
    10e0:	8f 7b       	andi	r24, 0xBF	; 191
    10e2:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    10e6:	80 91 0b 01 	lds	r24, 0x010B
    10ea:	8f 77       	andi	r24, 0x7F	; 127
    10ec:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    10f0:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    10f4:	9b 01       	movw	r18, r22
    10f6:	ac 01       	movw	r20, r24
    10f8:	60 93 54 04 	sts	0x0454, r22
    10fc:	70 93 55 04 	sts	0x0455, r23
    1100:	80 93 56 04 	sts	0x0456, r24
    1104:	90 93 57 04 	sts	0x0457, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    1108:	80 91 50 04 	lds	r24, 0x0450
    110c:	90 91 51 04 	lds	r25, 0x0451
    1110:	a0 91 52 04 	lds	r26, 0x0452
    1114:	b0 91 53 04 	lds	r27, 0x0453
    1118:	28 1b       	sub	r18, r24
    111a:	39 0b       	sbc	r19, r25
    111c:	4a 0b       	sbc	r20, r26
    111e:	5b 0b       	sbc	r21, r27
    1120:	2f 38       	cpi	r18, 0x8F	; 143
    1122:	65 e2       	ldi	r22, 0x25	; 37
    1124:	36 07       	cpc	r19, r22
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	46 07       	cpc	r20, r22
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	56 07       	cpc	r21, r22
    112e:	08 f4       	brcc	.+2      	; 0x1132 <main+0xf56>
    1130:	fd ca       	rjmp	.-2566   	; 0x72c <main+0x550>
								setRightSpeed(20);
    1132:	84 e1       	ldi	r24, 0x14	; 20
    1134:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
								setLeftSpeed(-20);								
    1138:	8c ee       	ldi	r24, 0xEC	; 236
    113a:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    113e:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    1142:	60 93 50 04 	sts	0x0450, r22
    1146:	70 93 51 04 	sts	0x0451, r23
    114a:	80 93 52 04 	sts	0x0452, r24
    114e:	90 93 53 04 	sts	0x0453, r25
								demoState = 5;							
    1152:	85 e0       	ldi	r24, 0x05	; 5
    1154:	80 93 4c 04 	sts	0x044C, r24
    1158:	e9 ca       	rjmp	.-2606   	; 0x72c <main+0x550>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    115a:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <turnOffGreenLeds>
							GREEN_LED4_ON;
    115e:	80 91 0b 01 	lds	r24, 0x010B
    1162:	8f 7e       	andi	r24, 0xEF	; 239
    1164:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    1168:	0e 94 de 34 	call	0x69bc	; 0x69bc <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    116c:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    1170:	9b 01       	movw	r18, r22
    1172:	ac 01       	movw	r20, r24
    1174:	60 93 54 04 	sts	0x0454, r22
    1178:	70 93 55 04 	sts	0x0455, r23
    117c:	80 93 56 04 	sts	0x0456, r24
    1180:	90 93 57 04 	sts	0x0457, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    1184:	80 91 50 04 	lds	r24, 0x0450
    1188:	90 91 51 04 	lds	r25, 0x0451
    118c:	a0 91 52 04 	lds	r26, 0x0452
    1190:	b0 91 53 04 	lds	r27, 0x0453
    1194:	28 1b       	sub	r18, r24
    1196:	39 0b       	sbc	r19, r25
    1198:	4a 0b       	sbc	r20, r26
    119a:	5b 0b       	sbc	r21, r27
    119c:	23 33       	cpi	r18, 0x33	; 51
    119e:	6f ee       	ldi	r22, 0xEF	; 239
    11a0:	36 07       	cpc	r19, r22
    11a2:	62 e0       	ldi	r22, 0x02	; 2
    11a4:	46 07       	cpc	r20, r22
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	56 07       	cpc	r21, r22
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <main+0xfd2>
    11ac:	f0 c0       	rjmp	.+480    	; 0x138e <main+0x11b2>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    11ae:	80 91 03 01 	lds	r24, 0x0103
    11b2:	84 ff       	sbrs	r24, 4
    11b4:	d1 c0       	rjmp	.+418    	; 0x1358 <main+0x117c>
								outOfLine = 0;
    11b6:	10 92 4e 04 	sts	0x044E, r1
								chargeContact++;
    11ba:	80 91 4f 04 	lds	r24, 0x044F
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	80 93 4f 04 	sts	0x044F, r24
								if(chargeContact > 20) {
    11c4:	85 31       	cpi	r24, 0x15	; 21
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <main+0xfee>
    11c8:	0f c1       	rjmp	.+542    	; 0x13e8 <main+0x120c>
    11ca:	80 91 69 02 	lds	r24, 0x0269
    11ce:	90 91 6a 02 	lds	r25, 0x026A
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    11d2:	20 91 67 02 	lds	r18, 0x0267
    11d6:	30 91 68 02 	lds	r19, 0x0268
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	22 3c       	cpi	r18, 0xC2	; 194
    11de:	34 07       	cpc	r19, r20
    11e0:	ac f4       	brge	.+42     	; 0x120c <main+0x1030>
    11e2:	51 e0       	ldi	r21, 0x01	; 1
    11e4:	83 3c       	cpi	r24, 0xC3	; 195
    11e6:	95 07       	cpc	r25, r21
    11e8:	8c f0       	brlt	.+34     	; 0x120c <main+0x1030>
    11ea:	40 91 6b 02 	lds	r20, 0x026B
    11ee:	50 91 6c 02 	lds	r21, 0x026C
    11f2:	61 e0       	ldi	r22, 0x01	; 1
    11f4:	43 3c       	cpi	r20, 0xC3	; 195
    11f6:	56 07       	cpc	r21, r22
    11f8:	4c f0       	brlt	.+18     	; 0x120c <main+0x1030>
    11fa:	40 91 6d 02 	lds	r20, 0x026D
    11fe:	50 91 6e 02 	lds	r21, 0x026E
    1202:	e1 e0       	ldi	r30, 0x01	; 1
    1204:	43 3c       	cpi	r20, 0xC3	; 195
    1206:	5e 07       	cpc	r21, r30
    1208:	0c f0       	brlt	.+2      	; 0x120c <main+0x1030>
    120a:	0d c1       	rjmp	.+538    	; 0x1426 <main+0x124a>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    120c:	40 91 6d 02 	lds	r20, 0x026D
    1210:	50 91 6e 02 	lds	r21, 0x026E
    1214:	f1 e0       	ldi	r31, 0x01	; 1
    1216:	42 3c       	cpi	r20, 0xC2	; 194
    1218:	5f 07       	cpc	r21, r31
    121a:	0c f0       	brlt	.+2      	; 0x121e <main+0x1042>
    121c:	88 c0       	rjmp	.+272    	; 0x132e <main+0x1152>
    121e:	41 e0       	ldi	r20, 0x01	; 1
    1220:	23 3c       	cpi	r18, 0xC3	; 195
    1222:	34 07       	cpc	r19, r20
    1224:	0c f4       	brge	.+2      	; 0x1228 <main+0x104c>
    1226:	83 c0       	rjmp	.+262    	; 0x132e <main+0x1152>
    1228:	51 e0       	ldi	r21, 0x01	; 1
    122a:	83 3c       	cpi	r24, 0xC3	; 195
    122c:	95 07       	cpc	r25, r21
    122e:	0c f4       	brge	.+2      	; 0x1232 <main+0x1056>
    1230:	83 c0       	rjmp	.+262    	; 0x1338 <main+0x115c>
    1232:	80 91 6b 02 	lds	r24, 0x026B
    1236:	90 91 6c 02 	lds	r25, 0x026C
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	83 3c       	cpi	r24, 0xC3	; 195
    123e:	96 07       	cpc	r25, r22
    1240:	0c f0       	brlt	.+2      	; 0x1244 <main+0x1068>
    1242:	f8 c0       	rjmp	.+496    	; 0x1434 <main+0x1258>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    1244:	8f e0       	ldi	r24, 0x0F	; 15
    1246:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
								setRightSpeed(-5);
    124a:	8b ef       	ldi	r24, 0xFB	; 251
    124c:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
    1250:	6d ca       	rjmp	.-2854   	; 0x72c <main+0x550>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    1252:	e0 e6       	ldi	r30, 0x60	; 96
    1254:	ae 16       	cp	r10, r30
    1256:	b1 04       	cpc	r11, r1
    1258:	08 f0       	brcs	.+2      	; 0x125c <main+0x1080>
    125a:	b9 c9       	rjmp	.-3214   	; 0x5ce <main+0x3f2>
					if(pwm_red!=255 && pwm_green!=255) {
    125c:	80 91 0c 02 	lds	r24, 0x020C
    1260:	8f 3f       	cpi	r24, 0xFF	; 255
    1262:	09 f4       	brne	.+2      	; 0x1266 <main+0x108a>
    1264:	b4 c9       	rjmp	.-3224   	; 0x5ce <main+0x3f2>
    1266:	80 91 0d 02 	lds	r24, 0x020D
    126a:	8f 3f       	cpi	r24, 0xFF	; 255
    126c:	09 f4       	brne	.+2      	; 0x1270 <main+0x1094>
    126e:	af c9       	rjmp	.-3234   	; 0x5ce <main+0x3f2>
						pwm_blue = 255;
    1270:	10 93 0e 02 	sts	0x020E, r17
    1274:	ac c9       	rjmp	.-3240   	; 0x5ce <main+0x3f2>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    1276:	80 91 4d 04 	lds	r24, 0x044D
    127a:	8f 5f       	subi	r24, 0xFF	; 255
    127c:	80 93 4d 04 	sts	0x044D, r24
								if(lineFound > 10) {
    1280:	8b 30       	cpi	r24, 0x0B	; 11
    1282:	08 f4       	brcc	.+2      	; 0x1286 <main+0x10aa>
    1284:	53 ca       	rjmp	.-2906   	; 0x72c <main+0x550>
									outOfLine = 0;
    1286:	10 92 4e 04 	sts	0x044E, r1
									chargeContact = 0;
    128a:	10 92 4f 04 	sts	0x044F, r1
									demoStartTime = getTime100MicroSec();
    128e:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    1292:	60 93 50 04 	sts	0x0450, r22
    1296:	70 93 51 04 	sts	0x0451, r23
    129a:	80 93 52 04 	sts	0x0452, r24
    129e:	90 93 53 04 	sts	0x0453, r25
									demoState = 2;
    12a2:	42 e0       	ldi	r20, 0x02	; 2
    12a4:	40 93 4c 04 	sts	0x044C, r20
									break;
    12a8:	41 ca       	rjmp	.-2942   	; 0x72c <main+0x550>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    12aa:	80 36       	cpi	r24, 0x60	; 96
    12ac:	91 05       	cpc	r25, r1
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <main+0x10d6>
    12b0:	8c cb       	rjmp	.-2280   	; 0x9ca <main+0x7ee>
					pwm_blue = 255;
    12b2:	10 93 0e 02 	sts	0x020E, r17
    12b6:	89 cb       	rjmp	.-2286   	; 0x9ca <main+0x7ee>
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired += speedStep;
						if(pwm_intermediate_right_desired > pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    12b8:	82 17       	cp	r24, r18
    12ba:	93 07       	cpc	r25, r19
    12bc:	0c f0       	brlt	.+2      	; 0x12c0 <main+0x10e4>
    12be:	25 c9       	rjmp	.-3510   	; 0x50a <main+0x32e>
						pwm_intermediate_right_desired -= speedStep;
    12c0:	40 91 17 02 	lds	r20, 0x0217
    12c4:	24 1b       	sub	r18, r20
    12c6:	31 09       	sbc	r19, r1
    12c8:	30 93 fc 02 	sts	0x02FC, r19
    12cc:	20 93 fb 02 	sts	0x02FB, r18
						if(pwm_intermediate_right_desired < pwm_right_desired) {
    12d0:	28 17       	cp	r18, r24
    12d2:	39 07       	cpc	r19, r25
    12d4:	0c f0       	brlt	.+2      	; 0x12d8 <main+0x10fc>
    12d6:	19 c9       	rjmp	.-3534   	; 0x50a <main+0x32e>
    12d8:	14 c9       	rjmp	.-3544   	; 0x502 <main+0x326>
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
						pwm_intermediate_left_desired += speedStep;
						if(pwm_intermediate_left_desired > pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}
					} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    12da:	82 17       	cp	r24, r18
    12dc:	93 07       	cpc	r25, r19
    12de:	14 f0       	brlt	.+4      	; 0x12e4 <main+0x1108>
    12e0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
						pwm_intermediate_left_desired -= speedStep;
    12e4:	40 91 17 02 	lds	r20, 0x0217
    12e8:	24 1b       	sub	r18, r20
    12ea:	31 09       	sbc	r19, r1
    12ec:	30 93 fe 02 	sts	0x02FE, r19
    12f0:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_left_desired < pwm_left_desired) {
    12f4:	28 17       	cp	r18, r24
    12f6:	39 07       	cpc	r19, r25
    12f8:	14 f0       	brlt	.+4      	; 0x12fe <main+0x1122>
    12fa:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
    12fe:	29 c9       	rjmp	.-3502   	; 0x552 <main+0x376>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    1300:	80 91 03 01 	lds	r24, 0x0103
    1304:	84 fd       	sbrc	r24, 4
    1306:	12 ca       	rjmp	.-3036   	; 0x72c <main+0x550>
								chargeContact = 0;
    1308:	10 92 4f 04 	sts	0x044F, r1
								outOfLine = 0;
    130c:	10 92 4e 04 	sts	0x044E, r1
								demoState = 2;
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	98 2e       	mov	r9, r24
    1314:	90 92 4c 04 	sts	0x044C, r9
								demoStartTime = getTime100MicroSec();
    1318:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    131c:	60 93 50 04 	sts	0x0450, r22
    1320:	70 93 51 04 	sts	0x0451, r23
    1324:	80 93 52 04 	sts	0x0452, r24
    1328:	90 93 53 04 	sts	0x0453, r25
								break;						
    132c:	ff c9       	rjmp	.-3074   	; 0x72c <main+0x550>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    132e:	e1 e0       	ldi	r30, 0x01	; 1
    1330:	83 3c       	cpi	r24, 0xC3	; 195
    1332:	9e 07       	cpc	r25, r30
    1334:	0c f0       	brlt	.+2      	; 0x1338 <main+0x115c>
    1336:	86 cf       	rjmp	.-244    	; 0x1244 <main+0x1068>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    1338:	80 91 6b 02 	lds	r24, 0x026B
    133c:	90 91 6c 02 	lds	r25, 0x026C
    1340:	f1 e0       	ldi	r31, 0x01	; 1
    1342:	83 3c       	cpi	r24, 0xC3	; 195
    1344:	9f 07       	cpc	r25, r31
    1346:	0c f4       	brge	.+2      	; 0x134a <main+0x116e>
    1348:	48 c0       	rjmp	.+144    	; 0x13da <main+0x11fe>
								setLeftSpeed(-5);
    134a:	8b ef       	ldi	r24, 0xFB	; 251
    134c:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
								setRightSpeed(15);
    1350:	8f e0       	ldi	r24, 0x0F	; 15
    1352:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
    1356:	ea c9       	rjmp	.-3116   	; 0x72c <main+0x550>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    1358:	10 92 4f 04 	sts	0x044F, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    135c:	80 91 69 02 	lds	r24, 0x0269
    1360:	90 91 6a 02 	lds	r25, 0x026A
    1364:	e1 e0       	ldi	r30, 0x01	; 1
    1366:	83 3c       	cpi	r24, 0xC3	; 195
    1368:	9e 07       	cpc	r25, r30
    136a:	2c f1       	brlt	.+74     	; 0x13b6 <main+0x11da>
    136c:	20 91 6b 02 	lds	r18, 0x026B
    1370:	30 91 6c 02 	lds	r19, 0x026C
    1374:	f1 e0       	ldi	r31, 0x01	; 1
    1376:	23 3c       	cpi	r18, 0xC3	; 195
    1378:	3f 07       	cpc	r19, r31
    137a:	ec f0       	brlt	.+58     	; 0x13b6 <main+0x11da>
									outOfLine++;
    137c:	20 91 4e 04 	lds	r18, 0x044E
    1380:	2f 5f       	subi	r18, 0xFF	; 255
    1382:	20 93 4e 04 	sts	0x044E, r18
									if(outOfLine > 250) {
    1386:	2b 3f       	cpi	r18, 0xFB	; 251
    1388:	08 f4       	brcc	.+2      	; 0x138c <main+0x11b0>
    138a:	23 cf       	rjmp	.-442    	; 0x11d2 <main+0xff6>
    138c:	cd c9       	rjmp	.-3174   	; 0x728 <main+0x54c>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    138e:	8c ee       	ldi	r24, 0xEC	; 236
    1390:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
								setLeftSpeed(-20);
    1394:	8c ee       	ldi	r24, 0xEC	; 236
    1396:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    139a:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    139e:	60 93 50 04 	sts	0x0450, r22
    13a2:	70 93 51 04 	sts	0x0451, r23
    13a6:	80 93 52 04 	sts	0x0452, r24
    13aa:	90 93 53 04 	sts	0x0453, r25
								demoState = 4;
    13ae:	84 e0       	ldi	r24, 0x04	; 4
    13b0:	80 93 4c 04 	sts	0x044C, r24
								break;
    13b4:	bb c9       	rjmp	.-3210   	; 0x72c <main+0x550>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    13b6:	10 92 4e 04 	sts	0x044E, r1
    13ba:	0b cf       	rjmp	.-490    	; 0x11d2 <main+0xff6>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    13bc:	91 30       	cpi	r25, 0x01	; 1
    13be:	41 f1       	breq	.+80     	; 0x1410 <main+0x1234>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    13c0:	92 30       	cpi	r25, 0x02	; 2
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <main+0x11ea>
    13c4:	04 c9       	rjmp	.-3576   	; 0x5ce <main+0x3f2>
						pwm_red = 255;
    13c6:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    13ca:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    13ce:	8e ef       	ldi	r24, 0xFE	; 254
    13d0:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    13d4:	10 92 18 03 	sts	0x0318, r1
    13d8:	fa c8       	rjmp	.-3596   	; 0x5ce <main+0x3f2>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    13da:	8f e0       	ldi	r24, 0x0F	; 15
    13dc:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
								setLeftSpeed(15);
    13e0:	8f e0       	ldi	r24, 0x0F	; 15
    13e2:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
    13e6:	a2 c9       	rjmp	.-3260   	; 0x72c <main+0x550>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
									setRightSpeed(0);
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    13f4:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    13f8:	60 93 50 04 	sts	0x0450, r22
    13fc:	70 93 51 04 	sts	0x0451, r23
    1400:	80 93 52 04 	sts	0x0452, r24
    1404:	90 93 53 04 	sts	0x0453, r25
									demoState = 3;
    1408:	93 e0       	ldi	r25, 0x03	; 3
    140a:	90 93 4c 04 	sts	0x044C, r25
									break;
    140e:	8e c9       	rjmp	.-3300   	; 0x72c <main+0x550>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1410:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1414:	5e ef       	ldi	r21, 0xFE	; 254
    1416:	50 93 0d 02 	sts	0x020D, r21
						pwm_blue = 255;
    141a:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    141e:	62 e0       	ldi	r22, 0x02	; 2
    1420:	60 93 18 03 	sts	0x0318, r22
    1424:	d4 c8       	rjmp	.-3672   	; 0x5ce <main+0x3f2>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    1426:	86 ef       	ldi	r24, 0xF6	; 246
    1428:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
								setRightSpeed(15);
    142c:	8f e0       	ldi	r24, 0x0F	; 15
    142e:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
    1432:	7c c9       	rjmp	.-3336   	; 0x72c <main+0x550>
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    1434:	8f e0       	ldi	r24, 0x0F	; 15
    1436:	0e 94 29 21 	call	0x4252	; 0x4252 <setLeftSpeed>
								setRightSpeed(-10);
    143a:	86 ef       	ldi	r24, 0xF6	; 246
    143c:	0e 94 46 21 	call	0x428c	; 0x428c <setRightSpeed>
    1440:	75 c9       	rjmp	.-3350   	; 0x72c <main+0x550>

00001442 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1446:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1448:	0d b4       	in	r0, 0x2d	; 45
    144a:	07 fc       	sbrc	r0, 7
    144c:	0a c0       	rjmp	.+20     	; 0x1462 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    144e:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1450:	37 e2       	ldi	r19, 0x27	; 39
    1452:	80 31       	cpi	r24, 0x10	; 16
    1454:	93 07       	cpc	r25, r19
    1456:	c0 f3       	brcs	.-16     	; 0x1448 <SPI_WAIT+0x6>
			spiCommError = 1;
    1458:	20 93 16 03 	sts	0x0316, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    145c:	0d b4       	in	r0, 0x2d	; 45
    145e:	07 fe       	sbrs	r0, 7
    1460:	f6 cf       	rjmp	.-20     	; 0x144e <SPI_WAIT+0xc>
			return;
		}
	}
}
    1462:	08 95       	ret

00001464 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1464:	84 b1       	in	r24, 0x04	; 4
    1466:	80 7f       	andi	r24, 0xF0	; 240
    1468:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    146a:	84 b1       	in	r24, 0x04	; 4
    146c:	87 60       	ori	r24, 0x07	; 7
    146e:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1470:	80 e5       	ldi	r24, 0x50	; 80
    1472:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1474:	8d b5       	in	r24, 0x2d	; 45
    1476:	81 60       	ori	r24, 0x01	; 1
    1478:	8d bd       	out	0x2d, r24	; 45

}
    147a:	08 95       	ret

0000147c <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    147c:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    147e:	1d bc       	out	0x2d, r1	; 45
}
    1480:	08 95       	ret

00001482 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1482:	44 23       	and	r20, r20
    1484:	09 f1       	breq	.+66     	; 0x14c8 <SPI_ReadWrite_Block+0x46>
    1486:	a6 2f       	mov	r26, r22
    1488:	b7 2f       	mov	r27, r23
    148a:	e8 2f       	mov	r30, r24
    148c:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    148e:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1490:	21 91       	ld	r18, Z+
    1492:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1494:	21 e0       	ldi	r18, 0x01	; 1
    1496:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1498:	0d b4       	in	r0, 0x2d	; 45
    149a:	07 fc       	sbrc	r0, 7
    149c:	0b c0       	rjmp	.+22     	; 0x14b4 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    149e:	2f 5f       	subi	r18, 0xFF	; 255
    14a0:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    14a2:	57 e2       	ldi	r21, 0x27	; 39
    14a4:	20 31       	cpi	r18, 0x10	; 16
    14a6:	35 07       	cpc	r19, r21
    14a8:	b8 f3       	brcs	.-18     	; 0x1498 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    14aa:	90 93 16 03 	sts	0x0316, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    14ae:	0d b4       	in	r0, 0x2d	; 45
    14b0:	07 fe       	sbrs	r0, 7
    14b2:	f5 cf       	rjmp	.-22     	; 0x149e <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    14b4:	20 91 16 03 	lds	r18, 0x0316
    14b8:	22 23       	and	r18, r18
    14ba:	31 f4       	brne	.+12     	; 0x14c8 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    14bc:	2e b5       	in	r18, 0x2e	; 46
    14be:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    14c0:	2e 2f       	mov	r18, r30
    14c2:	28 1b       	sub	r18, r24
    14c4:	24 17       	cp	r18, r20
    14c6:	20 f3       	brcs	.-56     	; 0x1490 <SPI_ReadWrite_Block+0xe>
    14c8:	08 95       	ret

000014ca <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    14ca:	66 23       	and	r22, r22
    14cc:	e9 f0       	breq	.+58     	; 0x1508 <SPI_Write_Block+0x3e>
    14ce:	e8 2f       	mov	r30, r24
    14d0:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    14d2:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    14d4:	21 91       	ld	r18, Z+
    14d6:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    14d8:	21 e0       	ldi	r18, 0x01	; 1
    14da:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    14dc:	0d b4       	in	r0, 0x2d	; 45
    14de:	07 fc       	sbrc	r0, 7
    14e0:	0b c0       	rjmp	.+22     	; 0x14f8 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    14e2:	2f 5f       	subi	r18, 0xFF	; 255
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    14e6:	47 e2       	ldi	r20, 0x27	; 39
    14e8:	20 31       	cpi	r18, 0x10	; 16
    14ea:	34 07       	cpc	r19, r20
    14ec:	b8 f3       	brcs	.-18     	; 0x14dc <SPI_Write_Block+0x12>
			spiCommError = 1;
    14ee:	90 93 16 03 	sts	0x0316, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    14f2:	0d b4       	in	r0, 0x2d	; 45
    14f4:	07 fe       	sbrs	r0, 7
    14f6:	f5 cf       	rjmp	.-22     	; 0x14e2 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    14f8:	20 91 16 03 	lds	r18, 0x0316
    14fc:	22 23       	and	r18, r18
    14fe:	21 f4       	brne	.+8      	; 0x1508 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1500:	2e 2f       	mov	r18, r30
    1502:	28 1b       	sub	r18, r24
    1504:	26 17       	cp	r18, r22
    1506:	30 f3       	brcs	.-52     	; 0x14d4 <SPI_Write_Block+0xa>
    1508:	08 95       	ret

0000150a <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    150a:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1510:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1512:	0d b4       	in	r0, 0x2d	; 45
    1514:	07 fc       	sbrc	r0, 7
    1516:	0a c0       	rjmp	.+20     	; 0x152c <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1518:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    151a:	37 e2       	ldi	r19, 0x27	; 39
    151c:	80 31       	cpi	r24, 0x10	; 16
    151e:	93 07       	cpc	r25, r19
    1520:	c0 f3       	brcs	.-16     	; 0x1512 <SPI_Write_Byte+0x8>
			spiCommError = 1;
    1522:	20 93 16 03 	sts	0x0316, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1526:	0d b4       	in	r0, 0x2d	; 45
    1528:	07 fe       	sbrs	r0, 7
    152a:	f6 cf       	rjmp	.-20     	; 0x1518 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    152c:	8e b5       	in	r24, 0x2e	; 46
}
    152e:	08 95       	ret

00001530 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <mirf_config+0xa>
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    153e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1540:	80 e2       	ldi	r24, 0x20	; 32
    1542:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1546:	8d e0       	ldi	r24, 0x0D	; 13
    1548:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    154c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    154e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1550:	83 e2       	ldi	r24, 0x23	; 35
    1552:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    155c:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    155e:	80 91 13 03 	lds	r24, 0x0313
    1562:	90 91 14 03 	lds	r25, 0x0314
    1566:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    1568:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    156a:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    156c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    156e:	80 e3       	ldi	r24, 0x30	; 48
    1570:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1574:	8e 01       	movw	r16, r28
    1576:	0f 5f       	subi	r16, 0xFF	; 255
    1578:	1f 4f       	sbci	r17, 0xFF	; 255
    157a:	c8 01       	movw	r24, r16
    157c:	63 e0       	ldi	r22, 0x03	; 3
    157e:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1582:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1584:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1586:	8a e2       	ldi	r24, 0x2A	; 42
    1588:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    158c:	c8 01       	movw	r24, r16
    158e:	63 e0       	ldi	r22, 0x03	; 3
    1590:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1594:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1596:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1598:	81 e2       	ldi	r24, 0x21	; 33
    159a:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15a4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15a8:	82 e2       	ldi	r24, 0x22	; 34
    15aa:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15b4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15b6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15b8:	84 e2       	ldi	r24, 0x24	; 36
    15ba:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15be:	82 e1       	ldi	r24, 0x12	; 18
    15c0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15c4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15c6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15c8:	85 e2       	ldi	r24, 0x25	; 37
    15ca:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15ce:	88 e2       	ldi	r24, 0x28	; 40
    15d0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15d4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15d6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15d8:	81 e3       	ldi	r24, 0x31	; 49
    15da:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15de:	8d e0       	ldi	r24, 0x0D	; 13
    15e0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15e4:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    15e6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    15e8:	80 e5       	ldi	r24, 0x50	; 80
    15ea:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    15ee:	83 e7       	ldi	r24, 0x73	; 115
    15f0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15f4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15f6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15f8:	8c e3       	ldi	r24, 0x3C	; 60
    15fa:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1604:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1606:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1608:	8d e3       	ldi	r24, 0x3D	; 61
    160a:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    160e:	86 e0       	ldi	r24, 0x06	; 6
    1610:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1614:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1616:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1618:	80 e2       	ldi	r24, 0x20	; 32
    161a:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    161e:	8f e0       	ldi	r24, 0x0F	; 15
    1620:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1624:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	1f 91       	pop	r17
    1632:	0f 91       	pop	r16
    1634:	08 95       	ret

00001636 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1636:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1638:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    163a:	0e 94 98 0a 	call	0x1530	; 0x1530 <mirf_config>
}
    163e:	08 95       	ret

00001640 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1646:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1648:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    164a:	8a e2       	ldi	r24, 0x2A	; 42
    164c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1650:	ce 01       	movw	r24, r28
    1652:	65 e0       	ldi	r22, 0x05	; 5
    1654:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1658:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    165a:	2c 9a       	sbi	0x05, 4	; 5
}
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	08 95       	ret

00001662 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1668:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    166a:	80 e3       	ldi	r24, 0x30	; 48
    166c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1670:	ce 01       	movw	r24, r28
    1672:	65 e0       	ldi	r22, 0x05	; 5
    1674:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1678:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	08 95       	ret

00001680 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1680:	80 91 b9 04 	lds	r24, 0x04B9
    1684:	88 23       	and	r24, r24
    1686:	11 f0       	breq	.+4      	; 0x168c <mirf_data_ready+0xc>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    168a:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    168c:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    168e:	8f ef       	ldi	r24, 0xFF	; 255
    1690:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1694:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1696:	80 74       	andi	r24, 0x40	; 64
    1698:	08 95       	ret

0000169a <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	0f 92       	push	r0
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    16a4:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    16a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    16a8:	87 e1       	ldi	r24, 0x17	; 23
    16aa:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    16ae:	be 01       	movw	r22, r28
    16b0:	6f 5f       	subi	r22, 0xFF	; 255
    16b2:	7f 4f       	sbci	r23, 0xFF	; 255
    16b4:	cb 01       	movw	r24, r22
    16b6:	41 e0       	ldi	r20, 0x01	; 1
    16b8:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    16bc:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    16be:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c0:	81 70       	andi	r24, 0x01	; 1
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    16ca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    16cc:	82 ee       	ldi	r24, 0xE2	; 226
    16ce:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    16d2:	28 9a       	sbi	0x05, 0	; 5

}
    16d4:	08 95       	ret

000016d6 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    16dc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    16de:	81 e6       	ldi	r24, 0x61	; 97
    16e0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    16e4:	ce 01       	movw	r24, r28
    16e6:	be 01       	movw	r22, r28
    16e8:	4d e0       	ldi	r20, 0x0D	; 13
    16ea:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    16ee:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    16f0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    16f2:	87 e2       	ldi	r24, 0x27	; 39
    16f4:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    16f8:	80 e4       	ldi	r24, 0x40	; 64
    16fa:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    16fe:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	0f 92       	push	r0
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1710:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1712:	8f 71       	andi	r24, 0x1F	; 31
    1714:	80 62       	ori	r24, 0x20	; 32
    1716:	69 83       	std	Y+1, r22	; 0x01
    1718:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    171c:	69 81       	ldd	r22, Y+1	; 0x01
    171e:	86 2f       	mov	r24, r22
    1720:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1724:	28 9a       	sbi	0x05, 0	; 5
}
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	0f 92       	push	r0
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    173e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1740:	8f 71       	andi	r24, 0x1F	; 31
    1742:	49 83       	std	Y+1, r20	; 0x01
    1744:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1748:	c8 01       	movw	r24, r16
    174a:	b8 01       	movw	r22, r16
    174c:	49 81       	ldd	r20, Y+1	; 0x01
    174e:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1752:	28 9a       	sbi	0x05, 0	; 5
}
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	08 95       	ret

00001760 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	0f 92       	push	r0
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1770:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1772:	8f 71       	andi	r24, 0x1F	; 31
    1774:	80 62       	ori	r24, 0x20	; 32
    1776:	49 83       	std	Y+1, r20	; 0x01
    1778:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    177c:	c8 01       	movw	r24, r16
    177e:	49 81       	ldd	r20, Y+1	; 0x01
    1780:	64 2f       	mov	r22, r20
    1782:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1786:	28 9a       	sbi	0x05, 0	; 5
}
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	08 95       	ret

00001794 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	0f 92       	push	r0
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    17a4:	80 91 b9 04 	lds	r24, 0x04B9
    17a8:	88 23       	and	r24, r24
    17aa:	e1 f7       	brne	.-8      	; 0x17a4 <mirf_send+0x10>

    mirf_CE_lo;
    17ac:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	80 93 b9 04 	sts	0x04B9, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    17b4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    17b6:	80 e2       	ldi	r24, 0x20	; 32
    17b8:	69 83       	std	Y+1, r22	; 0x01
    17ba:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    17be:	8a e4       	ldi	r24, 0x4A	; 74
    17c0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    17c4:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    17c6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    17c8:	81 ee       	ldi	r24, 0xE1	; 225
    17ca:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    17ce:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    17d0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    17d2:	80 ea       	ldi	r24, 0xA0	; 160
    17d4:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    17d8:	c8 01       	movw	r24, r16
    17da:	69 81       	ldd	r22, Y+1	; 0x01
    17dc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    17e0:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    17e2:	2c 9a       	sbi	0x05, 4	; 5
}
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	08 95       	ret

000017f0 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	0f 92       	push	r0
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	18 2f       	mov	r17, r24
    1804:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    1806:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1808:	81 ee       	ldi	r24, 0xE1	; 225
    180a:	99 83       	std	Y+1, r25	; 0x01
    180c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1810:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1812:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1814:	88 ea       	ldi	r24, 0xA8	; 168
    1816:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    181a:	99 81       	ldd	r25, Y+1	; 0x01
    181c:	00 23       	and	r16, r16
    181e:	61 f0       	breq	.+24     	; 0x1838 <writeAckPayload+0x48>
    1820:	61 2f       	mov	r22, r17
    1822:	79 2f       	mov	r23, r25
    1824:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1826:	f7 01       	movw	r30, r14
    1828:	81 91       	ld	r24, Z+
    182a:	7f 01       	movw	r14, r30
    182c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1830:	8e 2d       	mov	r24, r14
    1832:	81 1b       	sub	r24, r17
    1834:	80 17       	cp	r24, r16
    1836:	b8 f3       	brcs	.-18     	; 0x1826 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1838:	28 9a       	sbi	0x05, 0	; 5


}
    183a:	0f 90       	pop	r0
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	ff 90       	pop	r15
    1846:	ef 90       	pop	r14
    1848:	08 95       	ret

0000184a <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    184a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    184c:	81 ee       	ldi	r24, 0xE1	; 225
    184e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1852:	28 9a       	sbi	0x05, 0	; 5

}
    1854:	08 95       	ret

00001856 <handleRFCommands>:

void handleRFCommands() {
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    185c:	80 91 b9 04 	lds	r24, 0x04B9
    1860:	88 23       	and	r24, r24
    1862:	21 f0       	breq	.+8      	; 0x186c <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    186c:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    186e:	8f ef       	ldi	r24, 0xFF	; 255
    1870:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1874:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
    1876:	86 ff       	sbrs	r24, 6
    1878:	f5 cf       	rjmp	.-22     	; 0x1864 <handleRFCommands+0xe>

		rfFlags |= 0x02;
    187a:	80 91 15 03 	lds	r24, 0x0315
    187e:	82 60       	ori	r24, 0x02	; 2
    1880:	80 93 15 03 	sts	0x0315, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1884:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1886:	87 e2       	ldi	r24, 0x27	; 39
    1888:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    188c:	80 e7       	ldi	r24, 0x70	; 112
    188e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1892:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    1894:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1896:	81 e6       	ldi	r24, 0x61	; 97
    1898:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    189c:	8e e6       	ldi	r24, 0x6E	; 110
    189e:	95 e0       	ldi	r25, 0x05	; 5
    18a0:	bc 01       	movw	r22, r24
    18a2:	4d e0       	ldi	r20, 0x0D	; 13
    18a4:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    18a8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18aa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18ac:	87 e2       	ldi	r24, 0x27	; 39
    18ae:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18b2:	80 e4       	ldi	r24, 0x40	; 64
    18b4:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    18b8:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    18ba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    18bc:	82 ee       	ldi	r24, 0xE2	; 226
    18be:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    18c2:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    18c4:	40 91 6e 05 	lds	r20, 0x056E
    18c8:	24 2f       	mov	r18, r20
    18ca:	44 23       	and	r20, r20
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <handleRFCommands+0x7a>
    18ce:	6e c1       	rjmp	.+732    	; 0x1bac <handleRFCommands+0x356>

			sleep(60);
    18d0:	50 91 6f 05 	lds	r21, 0x056F
    18d4:	e5 2f       	mov	r30, r21
    18d6:	60 91 70 05 	lds	r22, 0x0570

		}

		if(calibrateOdomFlag==0) { 
    18da:	80 91 c0 04 	lds	r24, 0x04C0
    18de:	88 23       	and	r24, r24
    18e0:	41 f5       	brne	.+80     	; 0x1932 <handleRFCommands+0xdc>
			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    18e2:	e0 91 72 05 	lds	r30, 0x0572
    18e6:	2e 2f       	mov	r18, r30
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	2f 77       	andi	r18, 0x7F	; 127
    18ec:	30 70       	andi	r19, 0x00	; 0
    18ee:	30 93 12 03 	sts	0x0312, r19
    18f2:	20 93 11 03 	sts	0x0311, r18
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    18f6:	70 91 73 05 	lds	r23, 0x0573
    18fa:	87 2f       	mov	r24, r23
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	8f 77       	andi	r24, 0x7F	; 127
    1900:	90 70       	andi	r25, 0x00	; 0
    1902:	90 93 10 03 	sts	0x0310, r25
    1906:	80 93 0f 03 	sts	0x030F, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    190a:	e7 fd       	sbrc	r30, 7
    190c:	03 c0       	rjmp	.+6      	; 0x1914 <handleRFCommands+0xbe>
				pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
			} else {								// backward
				pwm_right_desired = -(speedr);
    190e:	30 95       	com	r19
    1910:	21 95       	neg	r18
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
    1914:	30 93 f8 02 	sts	0x02F8, r19
    1918:	20 93 f7 02 	sts	0x02F7, r18
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    191c:	77 fd       	sbrc	r23, 7
    191e:	03 c0       	rjmp	.+6      	; 0x1926 <handleRFCommands+0xd0>
				pwm_left_desired = speedl;
			} else {								// backward
				pwm_left_desired = -(speedl);
    1920:	90 95       	com	r25
    1922:	81 95       	neg	r24
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	90 93 fa 02 	sts	0x02FA, r25
    192a:	80 93 f9 02 	sts	0x02F9, r24
    192e:	24 2f       	mov	r18, r20
    1930:	e5 2f       	mov	r30, r21

		}


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	30 93 67 05 	sts	0x0567, r19
    1938:	20 93 66 05 	sts	0x0566, r18
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	f0 93 69 05 	sts	0x0569, r31
    1942:	e0 93 68 05 	sts	0x0568, r30
    1946:	c6 2f       	mov	r28, r22
    1948:	d0 e0       	ldi	r29, 0x00	; 0
    194a:	d0 93 6b 05 	sts	0x056B, r29
    194e:	c0 93 6a 05 	sts	0x056A, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1952:	92 2f       	mov	r25, r18
    1954:	88 27       	eor	r24, r24
    1956:	82 1b       	sub	r24, r18
    1958:	93 0b       	sbc	r25, r19
    195a:	24 e6       	ldi	r18, 0x64	; 100
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	b9 01       	movw	r22, r18
    1960:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__udivmodhi4>
    1964:	16 2f       	mov	r17, r22
    1966:	10 95       	com	r17
    1968:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    196c:	5e 2f       	mov	r21, r30
    196e:	44 27       	eor	r20, r20
    1970:	4e 1b       	sub	r20, r30
    1972:	5f 0b       	sbc	r21, r31
    1974:	ca 01       	movw	r24, r20
    1976:	b9 01       	movw	r22, r18
    1978:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__udivmodhi4>
    197c:	60 95       	com	r22
    197e:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1982:	5c 2f       	mov	r21, r28
    1984:	44 27       	eor	r20, r20
    1986:	4c 1b       	sub	r20, r28
    1988:	5d 0b       	sbc	r21, r29
    198a:	ca 01       	movw	r24, r20
    198c:	b9 01       	movw	r22, r18
    198e:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__udivmodhi4>
    1992:	60 95       	com	r22
    1994:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    1998:	81 2f       	mov	r24, r17
    199a:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <updateRedLed>
		updateGreenLed(pwm_green);
    199e:	80 91 0d 02 	lds	r24, 0x020D
    19a2:	0e 94 39 35 	call	0x6a72	; 0x6a72 <updateGreenLed>
		updateBlueLed(pwm_blue);
    19a6:	80 91 0e 02 	lds	r24, 0x020E
    19aa:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    19ae:	80 91 71 05 	lds	r24, 0x0571
    19b2:	80 ff       	sbrs	r24, 0
    19b4:	0e c1       	rjmp	.+540    	; 0x1bd2 <handleRFCommands+0x37c>
			LED_IR1_LOW;
    19b6:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    19b8:	81 ff       	sbrs	r24, 1
    19ba:	0e c1       	rjmp	.+540    	; 0x1bd8 <handleRFCommands+0x382>
			LED_IR2_LOW;
    19bc:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    19be:	98 2f       	mov	r25, r24
    19c0:	82 ff       	sbrs	r24, 2
    19c2:	0e c1       	rjmp	.+540    	; 0x1be0 <handleRFCommands+0x38a>
			irEnabled = 1;
    19c4:	21 e0       	ldi	r18, 0x01	; 1
    19c6:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    19ca:	84 fd       	sbrc	r24, 4
    19cc:	0d c1       	rjmp	.+538    	; 0x1be8 <handleRFCommands+0x392>
			calibrateSensors();
			resetOdometry();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    19ce:	86 ff       	sbrs	r24, 6
    19d0:	14 c1       	rjmp	.+552    	; 0x1bfa <handleRFCommands+0x3a4>
			obstacleAvoidanceEnabled = 1;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	80 93 61 04 	sts	0x0461, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    19d8:	97 fd       	sbrc	r25, 7
    19da:	13 c1       	rjmp	.+550    	; 0x1c02 <handleRFCommands+0x3ac>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    19dc:	10 92 62 04 	sts	0x0462, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    19e0:	80 91 74 05 	lds	r24, 0x0574
    19e4:	80 ff       	sbrs	r24, 0
    19e6:	14 c1       	rjmp	.+552    	; 0x1c10 <handleRFCommands+0x3ba>
				GREEN_LED0_ON;
    19e8:	80 91 0b 01 	lds	r24, 0x010B
    19ec:	8e 7f       	andi	r24, 0xFE	; 254
    19ee:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    19f2:	80 91 74 05 	lds	r24, 0x0574
    19f6:	81 ff       	sbrs	r24, 1
    19f8:	14 c1       	rjmp	.+552    	; 0x1c22 <handleRFCommands+0x3cc>
				GREEN_LED1_ON;
    19fa:	80 91 0b 01 	lds	r24, 0x010B
    19fe:	8d 7f       	andi	r24, 0xFD	; 253
    1a00:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1a04:	80 91 74 05 	lds	r24, 0x0574
    1a08:	82 ff       	sbrs	r24, 2
    1a0a:	14 c1       	rjmp	.+552    	; 0x1c34 <handleRFCommands+0x3de>
				GREEN_LED2_ON;
    1a0c:	80 91 0b 01 	lds	r24, 0x010B
    1a10:	8b 7f       	andi	r24, 0xFB	; 251
    1a12:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1a16:	80 91 74 05 	lds	r24, 0x0574
    1a1a:	83 ff       	sbrs	r24, 3
    1a1c:	14 c1       	rjmp	.+552    	; 0x1c46 <handleRFCommands+0x3f0>
				GREEN_LED3_ON;
    1a1e:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    1a20:	80 91 74 05 	lds	r24, 0x0574
    1a24:	84 ff       	sbrs	r24, 4
    1a26:	14 c1       	rjmp	.+552    	; 0x1c50 <handleRFCommands+0x3fa>
				GREEN_LED4_ON;
    1a28:	80 91 0b 01 	lds	r24, 0x010B
    1a2c:	8f 7e       	andi	r24, 0xEF	; 239
    1a2e:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    1a32:	80 91 74 05 	lds	r24, 0x0574
    1a36:	85 ff       	sbrs	r24, 5
    1a38:	14 c1       	rjmp	.+552    	; 0x1c62 <handleRFCommands+0x40c>
				GREEN_LED5_ON;
    1a3a:	80 91 0b 01 	lds	r24, 0x010B
    1a3e:	8f 7d       	andi	r24, 0xDF	; 223
    1a40:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    1a44:	80 91 74 05 	lds	r24, 0x0574
    1a48:	86 ff       	sbrs	r24, 6
    1a4a:	14 c1       	rjmp	.+552    	; 0x1c74 <handleRFCommands+0x41e>
				GREEN_LED6_ON;
    1a4c:	80 91 0b 01 	lds	r24, 0x010B
    1a50:	8f 7b       	andi	r24, 0xBF	; 191
    1a52:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    1a56:	80 91 74 05 	lds	r24, 0x0574
    1a5a:	87 fd       	sbrc	r24, 7
    1a5c:	14 c1       	rjmp	.+552    	; 0x1c86 <handleRFCommands+0x430>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    1a5e:	80 91 0b 01 	lds	r24, 0x010B
    1a62:	80 68       	ori	r24, 0x80	; 128
    1a64:	80 93 0b 01 	sts	0x010B, r24
			}

		#endif
		
		if(currentSelector == 8) {
    1a68:	80 91 48 04 	lds	r24, 0x0448
    1a6c:	88 30       	cpi	r24, 0x08	; 8
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <handleRFCommands+0x21c>
    1a70:	14 c1       	rjmp	.+552    	; 0x1c9a <handleRFCommands+0x444>
		}

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1a72:	80 91 0b 02 	lds	r24, 0x020B
    1a76:	80 93 c6 04 	sts	0x04C6, r24

		switch(packetId) {
    1a7a:	85 30       	cpi	r24, 0x05	; 5
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <handleRFCommands+0x22a>
    1a7e:	4b c2       	rjmp	.+1174   	; 0x1f16 <handleRFCommands+0x6c0>
    1a80:	86 30       	cpi	r24, 0x06	; 6
    1a82:	08 f0       	brcs	.+2      	; 0x1a86 <handleRFCommands+0x230>
    1a84:	27 c1       	rjmp	.+590    	; 0x1cd4 <handleRFCommands+0x47e>
    1a86:	83 30       	cpi	r24, 0x03	; 3
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <handleRFCommands+0x236>
    1a8a:	8d c1       	rjmp	.+794    	; 0x1da6 <handleRFCommands+0x550>
    1a8c:	84 30       	cpi	r24, 0x04	; 4
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <handleRFCommands+0x23c>
    1a90:	3f c0       	rjmp	.+126    	; 0x1b10 <handleRFCommands+0x2ba>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    1a92:	90 91 5f 02 	lds	r25, 0x025F
    1a96:	80 91 60 02 	lds	r24, 0x0260
    1a9a:	90 93 c7 04 	sts	0x04C7, r25
				ackPayload[2] = proximityResult[4]>>8;
    1a9e:	80 93 c8 04 	sts	0x04C8, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    1aa2:	90 91 67 02 	lds	r25, 0x0267
    1aa6:	80 91 68 02 	lds	r24, 0x0268
    1aaa:	90 93 c9 04 	sts	0x04C9, r25
				ackPayload[4] = proximityResult[8]>>8;
    1aae:	80 93 ca 04 	sts	0x04CA, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    1ab2:	90 91 69 02 	lds	r25, 0x0269
    1ab6:	80 91 6a 02 	lds	r24, 0x026A
    1aba:	90 93 cb 04 	sts	0x04CB, r25
				ackPayload[6] = proximityResult[9]>>8;
    1abe:	80 93 cc 04 	sts	0x04CC, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    1ac2:	90 91 6b 02 	lds	r25, 0x026B
    1ac6:	80 91 6c 02 	lds	r24, 0x026C
    1aca:	90 93 cd 04 	sts	0x04CD, r25
				ackPayload[8] = proximityResult[10]>>8;
    1ace:	80 93 ce 04 	sts	0x04CE, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    1ad2:	90 91 6d 02 	lds	r25, 0x026D
    1ad6:	80 91 6e 02 	lds	r24, 0x026E
    1ada:	90 93 cf 04 	sts	0x04CF, r25
				ackPayload[10] = proximityResult[11]>>8;
    1ade:	80 93 d0 04 	sts	0x04D0, r24
				ackPayload[11] = accX&0xFF;
    1ae2:	90 91 28 04 	lds	r25, 0x0428
    1ae6:	80 91 29 04 	lds	r24, 0x0429
    1aea:	90 93 d1 04 	sts	0x04D1, r25
				ackPayload[12] = accX>>8;
    1aee:	80 93 d2 04 	sts	0x04D2, r24
				ackPayload[13] = accY&0xFF;
    1af2:	90 91 2a 04 	lds	r25, 0x042A
    1af6:	80 91 2b 04 	lds	r24, 0x042B
    1afa:	90 93 d3 04 	sts	0x04D3, r25
				ackPayload[14] = accY>>8;
    1afe:	80 93 d4 04 	sts	0x04D4, r24
				ackPayload[15] = irCommand;
    1b02:	80 91 23 04 	lds	r24, 0x0423
    1b06:	80 93 d5 04 	sts	0x04D5, r24
				packetId = 5;
    1b0a:	85 e0       	ldi	r24, 0x05	; 5
    1b0c:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
    1b10:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1b12:	81 ee       	ldi	r24, 0xE1	; 225
    1b14:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1b18:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1b1a:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1b1c:	88 ea       	ldi	r24, 0xA8	; 168
    1b1e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    1b22:	80 91 c6 04 	lds	r24, 0x04C6
    1b26:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b2a:	80 91 c7 04 	lds	r24, 0x04C7
    1b2e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b32:	80 91 c8 04 	lds	r24, 0x04C8
    1b36:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b3a:	80 91 c9 04 	lds	r24, 0x04C9
    1b3e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b42:	80 91 ca 04 	lds	r24, 0x04CA
    1b46:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b4a:	80 91 cb 04 	lds	r24, 0x04CB
    1b4e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b52:	80 91 cc 04 	lds	r24, 0x04CC
    1b56:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b5a:	80 91 cd 04 	lds	r24, 0x04CD
    1b5e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b62:	80 91 ce 04 	lds	r24, 0x04CE
    1b66:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b6a:	80 91 cf 04 	lds	r24, 0x04CF
    1b6e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b72:	80 91 d0 04 	lds	r24, 0x04D0
    1b76:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b7a:	80 91 d1 04 	lds	r24, 0x04D1
    1b7e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b82:	80 91 d2 04 	lds	r24, 0x04D2
    1b86:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b8a:	80 91 d3 04 	lds	r24, 0x04D3
    1b8e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b92:	80 91 d4 04 	lds	r24, 0x04D4
    1b96:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b9a:	80 91 d5 04 	lds	r24, 0x04D5
    1b9e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    1ba2:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1bac:	50 91 6f 05 	lds	r21, 0x056F
    1bb0:	e5 2f       	mov	r30, r21
    1bb2:	55 23       	and	r21, r21
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <handleRFCommands+0x362>
    1bb6:	8f ce       	rjmp	.-738    	; 0x18d6 <handleRFCommands+0x80>
    1bb8:	60 91 70 05 	lds	r22, 0x0570
    1bbc:	66 23       	and	r22, r22
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <handleRFCommands+0x36c>
    1bc0:	06 c2       	rjmp	.+1036   	; 0x1fce <handleRFCommands+0x778>
    1bc2:	80 91 71 05 	lds	r24, 0x0571
    1bc6:	88 30       	cpi	r24, 0x08	; 8
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <handleRFCommands+0x376>
    1bca:	03 c2       	rjmp	.+1030   	; 0x1fd2 <handleRFCommands+0x77c>
    1bcc:	e6 2f       	mov	r30, r22
    1bce:	26 2f       	mov	r18, r22
    1bd0:	84 ce       	rjmp	.-760    	; 0x18da <handleRFCommands+0x84>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    1bd2:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1bd4:	81 fd       	sbrc	r24, 1
    1bd6:	f2 ce       	rjmp	.-540    	; 0x19bc <handleRFCommands+0x166>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    1bd8:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1bda:	98 2f       	mov	r25, r24
    1bdc:	82 fd       	sbrc	r24, 2
    1bde:	f2 ce       	rjmp	.-540    	; 0x19c4 <handleRFCommands+0x16e>
			irEnabled = 1;
		} else {
			irEnabled = 0;
    1be0:	10 92 12 02 	sts	0x0212, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1be4:	84 ff       	sbrs	r24, 4
    1be6:	f3 ce       	rjmp	.-538    	; 0x19ce <handleRFCommands+0x178>
			calibrateSensors();
    1be8:	0e 94 1d 38 	call	0x703a	; 0x703a <calibrateSensors>
			resetOdometry();
    1bec:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <resetOdometry>
    1bf0:	90 91 71 05 	lds	r25, 0x0571
    1bf4:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1bf6:	86 fd       	sbrc	r24, 6
    1bf8:	ec ce       	rjmp	.-552    	; 0x19d2 <handleRFCommands+0x17c>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    1bfa:	10 92 61 04 	sts	0x0461, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1bfe:	97 ff       	sbrs	r25, 7
    1c00:	ed ce       	rjmp	.-550    	; 0x19dc <handleRFCommands+0x186>
			cliffAvoidanceEnabled = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	80 93 62 04 	sts	0x0462, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1c08:	80 91 74 05 	lds	r24, 0x0574
    1c0c:	80 fd       	sbrc	r24, 0
    1c0e:	ec ce       	rjmp	.-552    	; 0x19e8 <handleRFCommands+0x192>
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    1c10:	80 91 0b 01 	lds	r24, 0x010B
    1c14:	81 60       	ori	r24, 0x01	; 1
    1c16:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1c1a:	80 91 74 05 	lds	r24, 0x0574
    1c1e:	81 fd       	sbrc	r24, 1
    1c20:	ec ce       	rjmp	.-552    	; 0x19fa <handleRFCommands+0x1a4>
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    1c22:	80 91 0b 01 	lds	r24, 0x010B
    1c26:	82 60       	ori	r24, 0x02	; 2
    1c28:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1c2c:	80 91 74 05 	lds	r24, 0x0574
    1c30:	82 fd       	sbrc	r24, 2
    1c32:	ec ce       	rjmp	.-552    	; 0x1a0c <handleRFCommands+0x1b6>
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    1c34:	80 91 0b 01 	lds	r24, 0x010B
    1c38:	84 60       	ori	r24, 0x04	; 4
    1c3a:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1c3e:	80 91 74 05 	lds	r24, 0x0574
    1c42:	83 fd       	sbrc	r24, 3
    1c44:	ec ce       	rjmp	.-552    	; 0x1a1e <handleRFCommands+0x1c8>
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    1c46:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
    1c48:	80 91 74 05 	lds	r24, 0x0574
    1c4c:	84 fd       	sbrc	r24, 4
    1c4e:	ec ce       	rjmp	.-552    	; 0x1a28 <handleRFCommands+0x1d2>
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    1c50:	80 91 0b 01 	lds	r24, 0x010B
    1c54:	80 61       	ori	r24, 0x10	; 16
    1c56:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
    1c5a:	80 91 74 05 	lds	r24, 0x0574
    1c5e:	85 fd       	sbrc	r24, 5
    1c60:	ec ce       	rjmp	.-552    	; 0x1a3a <handleRFCommands+0x1e4>
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    1c62:	80 91 0b 01 	lds	r24, 0x010B
    1c66:	80 62       	ori	r24, 0x20	; 32
    1c68:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
    1c6c:	80 91 74 05 	lds	r24, 0x0574
    1c70:	86 fd       	sbrc	r24, 6
    1c72:	ec ce       	rjmp	.-552    	; 0x1a4c <handleRFCommands+0x1f6>
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    1c74:	80 91 0b 01 	lds	r24, 0x010B
    1c78:	80 64       	ori	r24, 0x40	; 64
    1c7a:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
    1c7e:	80 91 74 05 	lds	r24, 0x0574
    1c82:	87 ff       	sbrs	r24, 7
    1c84:	ec ce       	rjmp	.-552    	; 0x1a5e <handleRFCommands+0x208>
				GREEN_LED7_ON;
    1c86:	80 91 0b 01 	lds	r24, 0x010B
    1c8a:	8f 77       	andi	r24, 0x7F	; 127
    1c8c:	80 93 0b 01 	sts	0x010B, r24
				GREEN_LED7_OFF;
			}

		#endif
		
		if(currentSelector == 8) {
    1c90:	80 91 48 04 	lds	r24, 0x0448
    1c94:	88 30       	cpi	r24, 0x08	; 8
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <handleRFCommands+0x444>
    1c98:	ec ce       	rjmp	.-552    	; 0x1a72 <handleRFCommands+0x21c>
			if(calibrateOdomFlag==0) {
    1c9a:	80 91 c0 04 	lds	r24, 0x04C0
    1c9e:	88 23       	and	r24, r24
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <handleRFCommands+0x44e>
    1ca2:	e7 ce       	rjmp	.-562    	; 0x1a72 <handleRFCommands+0x21c>
				if((rfData[7]&0b00000001)==0b00000001) {
    1ca4:	80 91 75 05 	lds	r24, 0x0575
    1ca8:	80 ff       	sbrs	r24, 0
    1caa:	e3 ce       	rjmp	.-570    	; 0x1a72 <handleRFCommands+0x21c>
					calibrateSensors();
    1cac:	0e 94 1d 38 	call	0x703a	; 0x703a <calibrateSensors>
					proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    1cb0:	8f ef       	ldi	r24, 0xFF	; 255
    1cb2:	93 e0       	ldi	r25, 0x03	; 3
    1cb4:	90 93 68 02 	sts	0x0268, r25
    1cb8:	80 93 67 02 	sts	0x0267, r24
					proximityResult[11] = 1023;	// and in that case a false black line will be detected
    1cbc:	90 93 6e 02 	sts	0x026E, r25
    1cc0:	80 93 6d 02 	sts	0x026D, r24
					calibState = 0;
    1cc4:	10 92 81 05 	sts	0x0581, r1
					calibVelIndex = 1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	80 93 c3 04 	sts	0x04C3, r24
					calibrateOdomFlag = 1;
    1cce:	80 93 c0 04 	sts	0x04C0, r24
    1cd2:	cf ce       	rjmp	.-610    	; 0x1a72 <handleRFCommands+0x21c>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    1cd4:	86 30       	cpi	r24, 0x06	; 6
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <handleRFCommands+0x484>
    1cd8:	cc c0       	rjmp	.+408    	; 0x1e72 <handleRFCommands+0x61c>
    1cda:	87 30       	cpi	r24, 0x07	; 7
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <handleRFCommands+0x48a>
    1cde:	18 cf       	rjmp	.-464    	; 0x1b10 <handleRFCommands+0x2ba>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    1ce0:	60 91 d3 02 	lds	r22, 0x02D3
    1ce4:	70 91 d4 02 	lds	r23, 0x02D4
    1ce8:	80 91 d5 02 	lds	r24, 0x02D5
    1cec:	90 91 d6 02 	lds	r25, 0x02D6
    1cf0:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    1cf4:	60 93 c7 04 	sts	0x04C7, r22
				ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    1cf8:	70 93 c8 04 	sts	0x04C8, r23
				ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    1cfc:	80 93 c9 04 	sts	0x04C9, r24
				ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    1d00:	90 93 ca 04 	sts	0x04CA, r25
				ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    1d04:	60 91 cf 02 	lds	r22, 0x02CF
    1d08:	70 91 d0 02 	lds	r23, 0x02D0
    1d0c:	80 91 d1 02 	lds	r24, 0x02D1
    1d10:	90 91 d2 02 	lds	r25, 0x02D2
    1d14:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    1d18:	60 93 cb 04 	sts	0x04CB, r22
				ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    1d1c:	70 93 cc 04 	sts	0x04CC, r23
				ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    1d20:	80 93 cd 04 	sts	0x04CD, r24
				ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    1d24:	90 93 ce 04 	sts	0x04CE, r25
				lastTheta = theta;
    1d28:	60 91 64 04 	lds	r22, 0x0464
    1d2c:	70 91 65 04 	lds	r23, 0x0465
    1d30:	80 91 66 04 	lds	r24, 0x0466
    1d34:	90 91 67 04 	lds	r25, 0x0467
    1d38:	60 93 68 04 	sts	0x0468, r22
    1d3c:	70 93 69 04 	sts	0x0469, r23
    1d40:	80 93 6a 04 	sts	0x046A, r24
    1d44:	90 93 6b 04 	sts	0x046B, r25
				ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e4       	ldi	r19, 0x40	; 64
    1d4c:	4f e0       	ldi	r20, 0x0F	; 15
    1d4e:	54 e4       	ldi	r21, 0x44	; 68
    1d50:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    1d54:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    1d58:	26 2f       	mov	r18, r22
    1d5a:	20 93 cf 04 	sts	0x04CF, r18
				ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    1d5e:	70 93 d0 04 	sts	0x04D0, r23
				ackPayload[11] = ((unsigned int)xPos)&0xFF;
    1d62:	60 91 6c 04 	lds	r22, 0x046C
    1d66:	70 91 6d 04 	lds	r23, 0x046D
    1d6a:	80 91 6e 04 	lds	r24, 0x046E
    1d6e:	90 91 6f 04 	lds	r25, 0x046F
    1d72:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <__fixunssfsi>
    1d76:	60 93 d1 04 	sts	0x04D1, r22
				ackPayload[12] = ((unsigned int)xPos)>>8;
    1d7a:	70 93 d2 04 	sts	0x04D2, r23
				ackPayload[13] = ((unsigned int)yPos)&0xFF;
    1d7e:	60 91 70 04 	lds	r22, 0x0470
    1d82:	70 91 71 04 	lds	r23, 0x0471
    1d86:	80 91 72 04 	lds	r24, 0x0472
    1d8a:	90 91 73 04 	lds	r25, 0x0473
    1d8e:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <__fixunssfsi>
    1d92:	60 93 d3 04 	sts	0x04D3, r22
				ackPayload[14] = ((unsigned int)yPos)>>8;
    1d96:	70 93 d4 04 	sts	0x04D4, r23
				//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
				//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
				//ackPayload[12] = ((unsigned int)xPosOld)>>8;
				//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
				//ackPayload[14] = ((unsigned int)yPosOld)>>8;
				ackPayload[15] = 0;
    1d9a:	10 92 d5 04 	sts	0x04D5, r1
				packetId = 3;
    1d9e:	83 e0       	ldi	r24, 0x03	; 3
    1da0:	80 93 0b 02 	sts	0x020B, r24
				break;
    1da4:	b5 ce       	rjmp	.-662    	; 0x1b10 <handleRFCommands+0x2ba>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
    1da6:	90 91 57 02 	lds	r25, 0x0257
    1daa:	80 91 58 02 	lds	r24, 0x0258
    1dae:	90 93 c7 04 	sts	0x04C7, r25
				ackPayload[2] = proximityResult[0]>>8;
    1db2:	80 93 c8 04 	sts	0x04C8, r24
				ackPayload[3] = proximityResult[1]&0xFF;
    1db6:	90 91 59 02 	lds	r25, 0x0259
    1dba:	80 91 5a 02 	lds	r24, 0x025A
    1dbe:	90 93 c9 04 	sts	0x04C9, r25
				ackPayload[4] = proximityResult[1]>>8;
    1dc2:	80 93 ca 04 	sts	0x04CA, r24
				ackPayload[5] = proximityResult[2]&0xFF;
    1dc6:	90 91 5b 02 	lds	r25, 0x025B
    1dca:	80 91 5c 02 	lds	r24, 0x025C
    1dce:	90 93 cb 04 	sts	0x04CB, r25
				ackPayload[6] = proximityResult[2]>>8;
    1dd2:	80 93 cc 04 	sts	0x04CC, r24
				ackPayload[7] = proximityResult[3]&0xFF;
    1dd6:	90 91 5d 02 	lds	r25, 0x025D
    1dda:	80 91 5e 02 	lds	r24, 0x025E
    1dde:	90 93 cd 04 	sts	0x04CD, r25
				ackPayload[8] = proximityResult[3]>>8;
    1de2:	80 93 ce 04 	sts	0x04CE, r24
				ackPayload[9] = proximityResult[5]&0xFF;
    1de6:	90 91 61 02 	lds	r25, 0x0261
    1dea:	80 91 62 02 	lds	r24, 0x0262
    1dee:	90 93 cf 04 	sts	0x04CF, r25
				ackPayload[10] = proximityResult[5]>>8;
    1df2:	80 93 d0 04 	sts	0x04D0, r24
				ackPayload[11] = proximityResult[6]&0xFF;
    1df6:	90 91 63 02 	lds	r25, 0x0263
    1dfa:	80 91 64 02 	lds	r24, 0x0264
    1dfe:	90 93 d1 04 	sts	0x04D1, r25
				ackPayload[12] = proximityResult[6]>>8;
    1e02:	80 93 d2 04 	sts	0x04D2, r24
				ackPayload[13] = proximityResult[7]&0xFF;
    1e06:	90 91 65 02 	lds	r25, 0x0265
    1e0a:	80 91 66 02 	lds	r24, 0x0266
    1e0e:	90 93 d3 04 	sts	0x04D3, r25
				ackPayload[14] = proximityResult[7]>>8;
    1e12:	80 93 d4 04 	sts	0x04D4, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    1e16:	30 91 03 01 	lds	r19, 0x0103
    1e1a:	80 91 03 01 	lds	r24, 0x0103
    1e1e:	20 91 03 01 	lds	r18, 0x0103
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	80 72       	andi	r24, 0x20	; 32
    1e26:	90 70       	andi	r25, 0x00	; 0
    1e28:	95 95       	asr	r25
    1e2a:	87 95       	ror	r24
    1e2c:	95 95       	asr	r25
    1e2e:	87 95       	ror	r24
    1e30:	95 95       	asr	r25
    1e32:	87 95       	ror	r24
    1e34:	95 95       	asr	r25
    1e36:	87 95       	ror	r24
    1e38:	95 95       	asr	r25
    1e3a:	87 95       	ror	r24
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	22 1f       	adc	r18, r18
    1e42:	22 27       	eor	r18, r18
    1e44:	22 1f       	adc	r18, r18
    1e46:	22 0f       	add	r18, r18
    1e48:	22 0f       	add	r18, r18
    1e4a:	28 2b       	or	r18, r24
    1e4c:	83 2f       	mov	r24, r19
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	80 71       	andi	r24, 0x10	; 16
    1e52:	90 70       	andi	r25, 0x00	; 0
    1e54:	95 95       	asr	r25
    1e56:	87 95       	ror	r24
    1e58:	95 95       	asr	r25
    1e5a:	87 95       	ror	r24
    1e5c:	95 95       	asr	r25
    1e5e:	87 95       	ror	r24
    1e60:	95 95       	asr	r25
    1e62:	87 95       	ror	r24
    1e64:	28 2b       	or	r18, r24
    1e66:	20 93 d5 04 	sts	0x04D5, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    1e6a:	84 e0       	ldi	r24, 0x04	; 4
    1e6c:	80 93 0b 02 	sts	0x020B, r24
				break;
    1e70:	4f ce       	rjmp	.-866    	; 0x1b10 <handleRFCommands+0x2ba>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    1e72:	80 91 37 02 	lds	r24, 0x0237
    1e76:	90 91 38 02 	lds	r25, 0x0238
    1e7a:	80 93 c7 04 	sts	0x04C7, r24
				ackPayload[2] = proximityValue[8]>>8;
    1e7e:	80 91 37 02 	lds	r24, 0x0237
    1e82:	90 91 38 02 	lds	r25, 0x0238
    1e86:	90 93 c8 04 	sts	0x04C8, r25
				ackPayload[3] = proximityValue[16]&0xFF;
    1e8a:	80 91 47 02 	lds	r24, 0x0247
    1e8e:	90 91 48 02 	lds	r25, 0x0248
    1e92:	80 93 c9 04 	sts	0x04C9, r24
				ackPayload[4] = proximityValue[16]>>8;
    1e96:	80 91 47 02 	lds	r24, 0x0247
    1e9a:	90 91 48 02 	lds	r25, 0x0248
    1e9e:	90 93 ca 04 	sts	0x04CA, r25
				ackPayload[5] = proximityValue[18]&0xFF;
    1ea2:	80 91 4b 02 	lds	r24, 0x024B
    1ea6:	90 91 4c 02 	lds	r25, 0x024C
    1eaa:	80 93 cb 04 	sts	0x04CB, r24
				ackPayload[6] = proximityValue[18]>>8;
    1eae:	80 91 4b 02 	lds	r24, 0x024B
    1eb2:	90 91 4c 02 	lds	r25, 0x024C
    1eb6:	90 93 cc 04 	sts	0x04CC, r25
				ackPayload[7] = proximityValue[20]&0xFF;
    1eba:	80 91 4f 02 	lds	r24, 0x024F
    1ebe:	90 91 50 02 	lds	r25, 0x0250
    1ec2:	80 93 cd 04 	sts	0x04CD, r24
				ackPayload[8] = proximityValue[20]>>8;
    1ec6:	80 91 4f 02 	lds	r24, 0x024F
    1eca:	90 91 50 02 	lds	r25, 0x0250
    1ece:	90 93 ce 04 	sts	0x04CE, r25
				ackPayload[9] = proximityValue[22]&0xFF;
    1ed2:	80 91 53 02 	lds	r24, 0x0253
    1ed6:	90 91 54 02 	lds	r25, 0x0254
    1eda:	80 93 cf 04 	sts	0x04CF, r24
				ackPayload[10] = proximityValue[22]>>8;
    1ede:	80 91 53 02 	lds	r24, 0x0253
    1ee2:	90 91 54 02 	lds	r25, 0x0254
    1ee6:	90 93 d0 04 	sts	0x04D0, r25
				ackPayload[11] = accZ&0xFF;
    1eea:	90 91 2c 04 	lds	r25, 0x042C
    1eee:	80 91 2d 04 	lds	r24, 0x042D
    1ef2:	90 93 d1 04 	sts	0x04D1, r25
				ackPayload[12] = accZ>>8;	
    1ef6:	80 93 d2 04 	sts	0x04D2, r24
				ackPayload[13] = batteryLevel&0xFF;
    1efa:	90 91 bb 02 	lds	r25, 0x02BB
    1efe:	80 91 bc 02 	lds	r24, 0x02BC
    1f02:	90 93 d3 04 	sts	0x04D3, r25
				ackPayload[14] = batteryLevel>>8;
    1f06:	80 93 d4 04 	sts	0x04D4, r24
				ackPayload[15] = 0;
    1f0a:	10 92 d5 04 	sts	0x04D5, r1
				packetId = 7;
    1f0e:	87 e0       	ldi	r24, 0x07	; 7
    1f10:	80 93 0b 02 	sts	0x020B, r24
				break;
    1f14:	fd cd       	rjmp	.-1030   	; 0x1b10 <handleRFCommands+0x2ba>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    1f16:	80 91 27 02 	lds	r24, 0x0227
    1f1a:	90 91 28 02 	lds	r25, 0x0228
    1f1e:	80 93 c7 04 	sts	0x04C7, r24
				ackPayload[2] = proximityValue[0]>>8;
    1f22:	80 91 27 02 	lds	r24, 0x0227
    1f26:	90 91 28 02 	lds	r25, 0x0228
    1f2a:	90 93 c8 04 	sts	0x04C8, r25
				ackPayload[3] = proximityValue[2]&0xFF;
    1f2e:	80 91 2b 02 	lds	r24, 0x022B
    1f32:	90 91 2c 02 	lds	r25, 0x022C
    1f36:	80 93 c9 04 	sts	0x04C9, r24
				ackPayload[4] = proximityValue[2]>>8;
    1f3a:	80 91 2b 02 	lds	r24, 0x022B
    1f3e:	90 91 2c 02 	lds	r25, 0x022C
    1f42:	90 93 ca 04 	sts	0x04CA, r25
				ackPayload[5] = proximityValue[4]&0xFF;
    1f46:	80 91 2f 02 	lds	r24, 0x022F
    1f4a:	90 91 30 02 	lds	r25, 0x0230
    1f4e:	80 93 cb 04 	sts	0x04CB, r24
				ackPayload[6] = proximityValue[4]>>8;
    1f52:	80 91 2f 02 	lds	r24, 0x022F
    1f56:	90 91 30 02 	lds	r25, 0x0230
    1f5a:	90 93 cc 04 	sts	0x04CC, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    1f5e:	80 91 33 02 	lds	r24, 0x0233
    1f62:	90 91 34 02 	lds	r25, 0x0234
    1f66:	80 93 cd 04 	sts	0x04CD, r24
				ackPayload[8] = proximityValue[6]>>8;
    1f6a:	80 91 33 02 	lds	r24, 0x0233
    1f6e:	90 91 34 02 	lds	r25, 0x0234
    1f72:	90 93 ce 04 	sts	0x04CE, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    1f76:	80 91 3b 02 	lds	r24, 0x023B
    1f7a:	90 91 3c 02 	lds	r25, 0x023C
    1f7e:	80 93 cf 04 	sts	0x04CF, r24
				ackPayload[10] = proximityValue[10]>>8;
    1f82:	80 91 3b 02 	lds	r24, 0x023B
    1f86:	90 91 3c 02 	lds	r25, 0x023C
    1f8a:	90 93 d0 04 	sts	0x04D0, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    1f8e:	80 91 3f 02 	lds	r24, 0x023F
    1f92:	90 91 40 02 	lds	r25, 0x0240
    1f96:	80 93 d1 04 	sts	0x04D1, r24
				ackPayload[12] = proximityValue[12]>>8;
    1f9a:	80 91 3f 02 	lds	r24, 0x023F
    1f9e:	90 91 40 02 	lds	r25, 0x0240
    1fa2:	90 93 d2 04 	sts	0x04D2, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    1fa6:	80 91 43 02 	lds	r24, 0x0243
    1faa:	90 91 44 02 	lds	r25, 0x0244
    1fae:	80 93 d3 04 	sts	0x04D3, r24
				ackPayload[14] = proximityValue[14]>>8;
    1fb2:	80 91 43 02 	lds	r24, 0x0243
    1fb6:	90 91 44 02 	lds	r25, 0x0244
    1fba:	90 93 d4 04 	sts	0x04D4, r25
				ackPayload[15] = currentSelector;
    1fbe:	80 91 48 04 	lds	r24, 0x0448
    1fc2:	80 93 d5 04 	sts	0x04D5, r24
				packetId = 6;
    1fc6:	86 e0       	ldi	r24, 0x06	; 6
    1fc8:	80 93 0b 02 	sts	0x020B, r24
				break;
    1fcc:	a1 cd       	rjmp	.-1214   	; 0x1b10 <handleRFCommands+0x2ba>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1fce:	25 2f       	mov	r18, r21
    1fd0:	84 cc       	rjmp	.-1784   	; 0x18da <handleRFCommands+0x84>
    1fd2:	80 91 72 05 	lds	r24, 0x0572
    1fd6:	88 23       	and	r24, r24
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <handleRFCommands+0x786>
    1fda:	f8 cd       	rjmp	.-1040   	; 0x1bcc <handleRFCommands+0x376>
    1fdc:	80 91 73 05 	lds	r24, 0x0573
    1fe0:	88 23       	and	r24, r24
    1fe2:	11 f0       	breq	.+4      	; 0x1fe8 <handleRFCommands+0x792>
    1fe4:	25 2f       	mov	r18, r21
    1fe6:	79 cc       	rjmp	.-1806   	; 0x18da <handleRFCommands+0x84>

			sleep(60);
    1fe8:	8c e3       	ldi	r24, 0x3C	; 60
    1fea:	0e 94 05 1c 	call	0x380a	; 0x380a <sleep>
    1fee:	40 91 6e 05 	lds	r20, 0x056E
    1ff2:	24 2f       	mov	r18, r20
    1ff4:	6d cc       	rjmp	.-1830   	; 0x18d0 <handleRFCommands+0x7a>

00001ff6 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29

	PCICR = 0;
    1ffa:	c8 e6       	ldi	r28, 0x68	; 104
    1ffc:	d0 e0       	ldi	r29, 0x00	; 0
    1ffe:	18 82       	st	Y, r1
	PCMSK1 = 0;
    2000:	ac e6       	ldi	r26, 0x6C	; 108
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	1c 92       	st	X, r1
	TCCR2A = 0;
    2006:	e0 eb       	ldi	r30, 0xB0	; 176
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	10 82       	st	Z, r1
	TCCR2B = 0;
    200c:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    2010:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    2014:	88 81       	ld	r24, Y
    2016:	82 60       	ori	r24, 0x02	; 2
    2018:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    201a:	8c 91       	ld	r24, X
    201c:	80 68       	ori	r24, 0x80	; 128
    201e:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    2020:	80 81       	ld	r24, Z
    2022:	82 60       	ori	r24, 0x02	; 2
    2024:	80 83       	st	Z, r24

}
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	08 95       	ret

0000202c <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    202c:	1f 92       	push	r1
    202e:	0f 92       	push	r0
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	0f 92       	push	r0
    2034:	11 24       	eor	r1, r1
    2036:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    2038:	80 91 12 02 	lds	r24, 0x0212
    203c:	88 23       	and	r24, r24
    203e:	21 f1       	breq	.+72     	; 0x2088 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    2040:	80 91 03 01 	lds	r24, 0x0103
    2044:	86 fd       	sbrc	r24, 6
    2046:	20 c0       	rjmp	.+64     	; 0x2088 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    2048:	80 91 68 00 	lds	r24, 0x0068
    204c:	8d 7f       	andi	r24, 0xFD	; 253
    204e:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    2052:	80 91 6c 00 	lds	r24, 0x006C
    2056:	8f 77       	andi	r24, 0x7F	; 127
    2058:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    2062:	8d e0       	ldi	r24, 0x0D	; 13
    2064:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2068:	80 91 b1 00 	lds	r24, 0x00B1
    206c:	86 60       	ori	r24, 0x06	; 6
    206e:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    2072:	80 91 70 00 	lds	r24, 0x0070
    2076:	82 60       	ori	r24, 0x02	; 2
    2078:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    207c:	10 92 1e 02 	sts	0x021E, r1
    2080:	10 92 1f 02 	sts	0x021F, r1
    2084:	10 92 20 02 	sts	0x0220, r1

		}

	}
	
}
    2088:	8f 91       	pop	r24
    208a:	0f 90       	pop	r0
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	0f 90       	pop	r0
    2090:	1f 90       	pop	r1
    2092:	18 95       	reti

00002094 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    2094:	1f 92       	push	r1
    2096:	0f 92       	push	r0
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	0f 92       	push	r0
    209c:	11 24       	eor	r1, r1
    209e:	2f 93       	push	r18
    20a0:	3f 93       	push	r19
    20a2:	4f 93       	push	r20
    20a4:	5f 93       	push	r21
    20a6:	8f 93       	push	r24
    20a8:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    20aa:	80 91 b1 00 	lds	r24, 0x00B1
    20ae:	88 7f       	andi	r24, 0xF8	; 248
    20b0:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    20b4:	80 91 13 02 	lds	r24, 0x0213
    20b8:	88 23       	and	r24, r24
    20ba:	a9 f0       	breq	.+42     	; 0x20e6 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    20bc:	80 91 03 01 	lds	r24, 0x0103
    20c0:	86 ff       	sbrs	r24, 6
    20c2:	65 c0       	rjmp	.+202    	; 0x218e <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    20c4:	80 91 68 00 	lds	r24, 0x0068
    20c8:	82 60       	ori	r24, 0x02	; 2
    20ca:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    20ce:	80 91 6c 00 	lds	r24, 0x006C
    20d2:	80 68       	ori	r24, 0x80	; 128
    20d4:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    20d8:	8f ef       	ldi	r24, 0xFF	; 255
    20da:	9f ef       	ldi	r25, 0xFF	; 255
    20dc:	90 93 02 02 	sts	0x0202, r25
    20e0:	80 93 01 02 	sts	0x0201, r24
    20e4:	49 c0       	rjmp	.+146    	; 0x2178 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    20e6:	80 91 01 02 	lds	r24, 0x0201
    20ea:	90 91 02 02 	lds	r25, 0x0202
    20ee:	2f ef       	ldi	r18, 0xFF	; 255
    20f0:	8f 3f       	cpi	r24, 0xFF	; 255
    20f2:	92 07       	cpc	r25, r18
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <__vector_13+0x64>
    20f6:	63 c0       	rjmp	.+198    	; 0x21be <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	91 05       	cpc	r25, r1
    20fc:	09 f4       	brne	.+2      	; 0x2100 <__vector_13+0x6c>
    20fe:	98 c0       	rjmp	.+304    	; 0x2230 <__stack+0x31>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2100:	9c 01       	movw	r18, r24
    2102:	22 50       	subi	r18, 0x02	; 2
    2104:	30 40       	sbci	r19, 0x00	; 0
    2106:	25 30       	cpi	r18, 0x05	; 5
    2108:	31 05       	cpc	r19, r1
    210a:	08 f4       	brcc	.+2      	; 0x210e <__vector_13+0x7a>
    210c:	67 c0       	rjmp	.+206    	; 0x21dc <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    210e:	9c 01       	movw	r18, r24
    2110:	27 50       	subi	r18, 0x07	; 7
    2112:	30 40       	sbci	r19, 0x00	; 0
    2114:	26 30       	cpi	r18, 0x06	; 6
    2116:	31 05       	cpc	r19, r1
    2118:	08 f0       	brcs	.+2      	; 0x211c <__vector_13+0x88>
    211a:	bd c0       	rjmp	.+378    	; 0x2296 <__stack+0x97>

				OCR2A = 54;
    211c:	26 e3       	ldi	r18, 0x36	; 54
    211e:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2122:	20 91 b1 00 	lds	r18, 0x00B1
    2126:	26 60       	ori	r18, 0x06	; 6
    2128:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    212c:	20 91 70 00 	lds	r18, 0x0070
    2130:	22 60       	ori	r18, 0x02	; 2
    2132:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2136:	20 91 03 01 	lds	r18, 0x0103
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	20 74       	andi	r18, 0x40	; 64
    213e:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    2140:	00 24       	eor	r0, r0
    2142:	22 0f       	add	r18, r18
    2144:	33 1f       	adc	r19, r19
    2146:	00 1c       	adc	r0, r0
    2148:	22 0f       	add	r18, r18
    214a:	33 1f       	adc	r19, r19
    214c:	00 1c       	adc	r0, r0
    214e:	23 2f       	mov	r18, r19
    2150:	30 2d       	mov	r19, r0
    2152:	4c e0       	ldi	r20, 0x0C	; 12
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	48 1b       	sub	r20, r24
    2158:	59 0b       	sbc	r21, r25
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <__vector_13+0xcc>
    215c:	22 0f       	add	r18, r18
    215e:	33 1f       	adc	r19, r19
    2160:	4a 95       	dec	r20
    2162:	e2 f7       	brpl	.-8      	; 0x215c <__vector_13+0xc8>
				data_temp += temp;
    2164:	40 91 1e 02 	lds	r20, 0x021E
    2168:	42 0f       	add	r20, r18
    216a:	40 93 1e 02 	sts	0x021E, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    216e:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    2170:	90 93 02 02 	sts	0x0202, r25
    2174:	80 93 01 02 	sts	0x0201, r24

		}

}
    2178:	9f 91       	pop	r25
    217a:	8f 91       	pop	r24
    217c:	5f 91       	pop	r21
    217e:	4f 91       	pop	r20
    2180:	3f 91       	pop	r19
    2182:	2f 91       	pop	r18
    2184:	0f 90       	pop	r0
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	0f 90       	pop	r0
    218a:	1f 90       	pop	r1
    218c:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    218e:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    2192:	83 e3       	ldi	r24, 0x33	; 51
    2194:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2198:	80 91 b1 00 	lds	r24, 0x00B1
    219c:	86 60       	ori	r24, 0x06	; 6
    219e:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    21a2:	80 91 70 00 	lds	r24, 0x0070
    21a6:	82 60       	ori	r24, 0x02	; 2
    21a8:	80 93 70 00 	sts	0x0070, r24
    21ac:	80 91 01 02 	lds	r24, 0x0201
    21b0:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    21b4:	2f ef       	ldi	r18, 0xFF	; 255
    21b6:	8f 3f       	cpi	r24, 0xFF	; 255
    21b8:	92 07       	cpc	r25, r18
    21ba:	c9 f6       	brne	.-78     	; 0x216e <__vector_13+0xda>
    21bc:	dd cf       	rjmp	.-70     	; 0x2178 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    21be:	20 91 03 01 	lds	r18, 0x0103
    21c2:	26 ff       	sbrs	r18, 6
    21c4:	52 c0       	rjmp	.+164    	; 0x226a <__stack+0x6b>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    21c6:	20 91 68 00 	lds	r18, 0x0068
    21ca:	22 60       	ori	r18, 0x02	; 2
    21cc:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    21d0:	20 91 6c 00 	lds	r18, 0x006C
    21d4:	20 68       	ori	r18, 0x80	; 128
    21d6:	20 93 6c 00 	sts	0x006C, r18
    21da:	ce cf       	rjmp	.-100    	; 0x2178 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    21dc:	26 e3       	ldi	r18, 0x36	; 54
    21de:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    21e2:	20 91 b1 00 	lds	r18, 0x00B1
    21e6:	26 60       	ori	r18, 0x06	; 6
    21e8:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    21ec:	20 91 70 00 	lds	r18, 0x0070
    21f0:	22 60       	ori	r18, 0x02	; 2
    21f2:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    21f6:	20 91 03 01 	lds	r18, 0x0103
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	20 74       	andi	r18, 0x40	; 64
    21fe:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2200:	00 24       	eor	r0, r0
    2202:	22 0f       	add	r18, r18
    2204:	33 1f       	adc	r19, r19
    2206:	00 1c       	adc	r0, r0
    2208:	22 0f       	add	r18, r18
    220a:	33 1f       	adc	r19, r19
    220c:	00 1c       	adc	r0, r0
    220e:	23 2f       	mov	r18, r19
    2210:	30 2d       	mov	r19, r0
    2212:	46 e0       	ldi	r20, 0x06	; 6
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	48 1b       	sub	r20, r24
    2218:	59 0b       	sbc	r21, r25
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <__stack+0x21>
    221c:	22 0f       	add	r18, r18
    221e:	33 1f       	adc	r19, r19
    2220:	4a 95       	dec	r20
    2222:	e2 f7       	brpl	.-8      	; 0x221c <__stack+0x1d>
				address_temp += temp;
    2224:	40 91 1f 02 	lds	r20, 0x021F
    2228:	42 0f       	add	r20, r18
    222a:	40 93 1f 02 	sts	0x021F, r20
    222e:	9f cf       	rjmp	.-194    	; 0x216e <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2230:	20 91 03 01 	lds	r18, 0x0103
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	20 74       	andi	r18, 0x40	; 64
    2238:	30 70       	andi	r19, 0x00	; 0
    223a:	02 2e       	mov	r0, r18
    223c:	23 2f       	mov	r18, r19
    223e:	00 0c       	add	r0, r0
    2240:	22 1f       	adc	r18, r18
    2242:	33 0b       	sbc	r19, r19
    2244:	00 0c       	add	r0, r0
    2246:	22 1f       	adc	r18, r18
    2248:	33 1f       	adc	r19, r19
    224a:	20 93 20 02 	sts	0x0220, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    224e:	26 e3       	ldi	r18, 0x36	; 54
    2250:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2254:	20 91 b1 00 	lds	r18, 0x00B1
    2258:	26 60       	ori	r18, 0x06	; 6
    225a:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    225e:	20 91 70 00 	lds	r18, 0x0070
    2262:	22 60       	ori	r18, 0x02	; 2
    2264:	20 93 70 00 	sts	0x0070, r18
    2268:	82 cf       	rjmp	.-252    	; 0x216e <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    226a:	8c e1       	ldi	r24, 0x1C	; 28
    226c:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2270:	80 91 b1 00 	lds	r24, 0x00B1
    2274:	86 60       	ori	r24, 0x06	; 6
    2276:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    227a:	80 91 70 00 	lds	r24, 0x0070
    227e:	82 60       	ori	r24, 0x02	; 2
    2280:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    2284:	10 92 1e 02 	sts	0x021E, r1
    2288:	10 92 1f 02 	sts	0x021F, r1
    228c:	10 92 20 02 	sts	0x0220, r1
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	6d cf       	rjmp	.-294    	; 0x2170 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    2296:	8d 30       	cpi	r24, 0x0D	; 13
    2298:	91 05       	cpc	r25, r1
    229a:	09 f0       	breq	.+2      	; 0x229e <__stack+0x9f>
    229c:	68 cf       	rjmp	.-304    	; 0x216e <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    229e:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    22a2:	80 91 68 00 	lds	r24, 0x0068
    22a6:	82 60       	ori	r24, 0x02	; 2
    22a8:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    22ac:	80 91 6c 00 	lds	r24, 0x006C
    22b0:	80 68       	ori	r24, 0x80	; 128
    22b2:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    22b6:	8f ef       	ldi	r24, 0xFF	; 255
    22b8:	9f ef       	ldi	r25, 0xFF	; 255
    22ba:	90 93 02 02 	sts	0x0202, r25
    22be:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    22c2:	80 91 20 02 	lds	r24, 0x0220
    22c6:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    22ca:	80 91 1f 02 	lds	r24, 0x021F
    22ce:	80 93 1c 02 	sts	0x021C, r24
				data_ir = data_temp;
    22d2:	80 91 1e 02 	lds	r24, 0x021E
    22d6:	80 93 1d 02 	sts	0x021D, r24
				command_received=1;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	80 93 24 04 	sts	0x0424, r24
    22e0:	4b cf       	rjmp	.-362    	; 0x2178 <__vector_13+0xe4>

000022e2 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    22e2:	80 91 00 02 	lds	r24, 0x0200
    22e6:	08 95       	ret

000022e8 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    22e8:	80 91 1c 02 	lds	r24, 0x021C
    22ec:	08 95       	ret

000022ee <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    22ee:	80 91 1d 02 	lds	r24, 0x021D
    22f2:	08 95       	ret

000022f4 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    22f4:	80 91 12 02 	lds	r24, 0x0212
    22f8:	88 23       	and	r24, r24
    22fa:	51 f1       	breq	.+84     	; 0x2350 <handleIRRemoteCommands+0x5c>

		if(command_received) {
    22fc:	80 91 24 04 	lds	r24, 0x0424
    2300:	88 23       	and	r24, r24
    2302:	31 f1       	breq	.+76     	; 0x2350 <handleIRRemoteCommands+0x5c>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    2304:	e0 91 1d 02 	lds	r30, 0x021D

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    2308:	e0 93 23 04 	sts	0x0423, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    230c:	10 92 24 04 	sts	0x0424, r1

			switch(irCommand) {
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	e5 33       	cpi	r30, 0x35	; 53
    2314:	f1 05       	cpc	r31, r1
    2316:	e8 f0       	brcs	.+58     	; 0x2352 <handleIRRemoteCommands+0x5e>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    2318:	20 91 f7 02 	lds	r18, 0x02F7
    231c:	30 91 f8 02 	lds	r19, 0x02F8
    2320:	80 91 f9 02 	lds	r24, 0x02F9
    2324:	90 91 fa 02 	lds	r25, 0x02FA
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2328:	37 fd       	sbrc	r19, 7
    232a:	b9 c1       	rjmp	.+882    	; 0x269e <handleIRRemoteCommands+0x3aa>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    232c:	30 93 12 03 	sts	0x0312, r19
    2330:	20 93 11 03 	sts	0x0311, r18
			}
			if(pwm_left_desired >= 0) {
    2334:	97 fd       	sbrc	r25, 7
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <handleIRRemoteCommands+0x4e>
				speedl = pwm_left_desired;
    2338:	90 93 10 03 	sts	0x0310, r25
    233c:	80 93 0f 03 	sts	0x030F, r24
    2340:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired);
    2342:	90 95       	com	r25
    2344:	81 95       	neg	r24
    2346:	9f 4f       	sbci	r25, 0xFF	; 255
    2348:	90 93 10 03 	sts	0x0310, r25
    234c:	80 93 0f 03 	sts	0x030F, r24
    2350:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    2352:	ee 58       	subi	r30, 0x8E	; 142
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	ee 0f       	add	r30, r30
    2358:	ff 1f       	adc	r31, r31
    235a:	05 90       	lpm	r0, Z+
    235c:	f4 91       	lpm	r31, Z+
    235e:	e0 2d       	mov	r30, r0
    2360:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    2362:	80 93 61 04 	sts	0x0461, r24
							cliffAvoidanceEnabled = 0;
    2366:	10 92 62 04 	sts	0x0462, r1
    236a:	20 91 f7 02 	lds	r18, 0x02F7
    236e:	30 91 f8 02 	lds	r19, 0x02F8
    2372:	80 91 f9 02 	lds	r24, 0x02F9
    2376:	90 91 fa 02 	lds	r25, 0x02FA
							break;
    237a:	d6 cf       	rjmp	.-84     	; 0x2328 <handleIRRemoteCommands+0x34>
						case 2:
							obstacleAvoidanceEnabled = 0;
    237c:	10 92 61 04 	sts	0x0461, r1
							cliffAvoidanceEnabled = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	80 93 62 04 	sts	0x0462, r24
    2386:	20 91 f7 02 	lds	r18, 0x02F7
    238a:	30 91 f8 02 	lds	r19, 0x02F8
    238e:	80 91 f9 02 	lds	r24, 0x02F9
    2392:	90 91 fa 02 	lds	r25, 0x02FA
							break;
    2396:	c8 cf       	rjmp	.-112    	; 0x2328 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    2398:	80 91 26 04 	lds	r24, 0x0426
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	83 70       	andi	r24, 0x03	; 3
    23a2:	90 70       	andi	r25, 0x00	; 0
    23a4:	80 93 26 04 	sts	0x0426, r24
					switch(behaviorState) {
    23a8:	82 30       	cpi	r24, 0x02	; 2
    23aa:	41 f3       	breq	.-48     	; 0x237c <handleIRRemoteCommands+0x88>
    23ac:	83 30       	cpi	r24, 0x03	; 3
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <handleIRRemoteCommands+0xbe>
    23b0:	8a c1       	rjmp	.+788    	; 0x26c6 <handleIRRemoteCommands+0x3d2>
    23b2:	81 30       	cpi	r24, 0x01	; 1
    23b4:	b1 f2       	breq	.-84     	; 0x2362 <handleIRRemoteCommands+0x6e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    23b6:	10 92 61 04 	sts	0x0461, r1
							cliffAvoidanceEnabled = 0;
    23ba:	10 92 62 04 	sts	0x0462, r1
    23be:	20 91 f7 02 	lds	r18, 0x02F7
    23c2:	30 91 f8 02 	lds	r19, 0x02F8
    23c6:	80 91 f9 02 	lds	r24, 0x02F9
    23ca:	90 91 fa 02 	lds	r25, 0x02FA
							break;
    23ce:	ac cf       	rjmp	.-168    	; 0x2328 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    23d0:	10 92 61 04 	sts	0x0461, r1
    23d4:	20 91 f7 02 	lds	r18, 0x02F7
    23d8:	30 91 f8 02 	lds	r19, 0x02F8
    23dc:	80 91 f9 02 	lds	r24, 0x02F9
    23e0:	90 91 fa 02 	lds	r25, 0x02FA
					break;
    23e4:	a1 cf       	rjmp	.-190    	; 0x2328 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    23e6:	80 91 f9 02 	lds	r24, 0x02F9
    23ea:	90 91 fa 02 	lds	r25, 0x02FA
    23ee:	02 97       	sbiw	r24, 0x02	; 2
    23f0:	90 93 fa 02 	sts	0x02FA, r25
    23f4:	80 93 f9 02 	sts	0x02F9, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    23f8:	2e ef       	ldi	r18, 0xFE	; 254
    23fa:	80 30       	cpi	r24, 0x00	; 0
    23fc:	92 07       	cpc	r25, r18
    23fe:	9c f5       	brge	.+102    	; 0x2466 <handleIRRemoteCommands+0x172>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	9e ef       	ldi	r25, 0xFE	; 254
    2404:	90 93 fa 02 	sts	0x02FA, r25
    2408:	80 93 f9 02 	sts	0x02F9, r24
    240c:	20 91 f7 02 	lds	r18, 0x02F7
    2410:	30 91 f8 02 	lds	r19, 0x02F8
    2414:	89 cf       	rjmp	.-238    	; 0x2328 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    2416:	20 91 f7 02 	lds	r18, 0x02F7
    241a:	30 91 f8 02 	lds	r19, 0x02F8
    241e:	80 91 f5 02 	lds	r24, 0x02F5
    2422:	90 91 f6 02 	lds	r25, 0x02F6
    2426:	28 17       	cp	r18, r24
    2428:	39 07       	cpc	r19, r25
    242a:	24 f0       	brlt	.+8      	; 0x2434 <handleIRRemoteCommands+0x140>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    242c:	20 91 f9 02 	lds	r18, 0x02F9
    2430:	30 91 fa 02 	lds	r19, 0x02FA
					}
					pwm_right_desired -= STEP_MOTORS;
    2434:	22 50       	subi	r18, 0x02	; 2
    2436:	30 40       	sbci	r19, 0x00	; 0
    2438:	30 93 f8 02 	sts	0x02F8, r19
    243c:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired -= STEP_MOTORS;
    2440:	c9 01       	movw	r24, r18
    2442:	30 93 fa 02 	sts	0x02FA, r19
    2446:	20 93 f9 02 	sts	0x02F9, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    244a:	4e ef       	ldi	r20, 0xFE	; 254
    244c:	20 30       	cpi	r18, 0x00	; 0
    244e:	34 07       	cpc	r19, r20
    2450:	34 f4       	brge	.+12     	; 0x245e <handleIRRemoteCommands+0x16a>
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	5e ef       	ldi	r21, 0xFE	; 254
    2456:	50 93 f8 02 	sts	0x02F8, r21
    245a:	40 93 f7 02 	sts	0x02F7, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    245e:	4e ef       	ldi	r20, 0xFE	; 254
    2460:	20 30       	cpi	r18, 0x00	; 0
    2462:	34 07       	cpc	r19, r20
    2464:	6c f2       	brlt	.-102    	; 0x2400 <handleIRRemoteCommands+0x10c>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2466:	20 91 f7 02 	lds	r18, 0x02F7
    246a:	30 91 f8 02 	lds	r19, 0x02F8
    246e:	5c cf       	rjmp	.-328    	; 0x2328 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	80 93 61 04 	sts	0x0461, r24
    2476:	20 91 f7 02 	lds	r18, 0x02F7
    247a:	30 91 f8 02 	lds	r19, 0x02F8
    247e:	80 91 f9 02 	lds	r24, 0x02F9
    2482:	90 91 fa 02 	lds	r25, 0x02FA
					break;
    2486:	50 cf       	rjmp	.-352    	; 0x2328 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    2488:	20 91 f7 02 	lds	r18, 0x02F7
    248c:	30 91 f8 02 	lds	r19, 0x02F8
    2490:	22 50       	subi	r18, 0x02	; 2
    2492:	30 40       	sbci	r19, 0x00	; 0
    2494:	30 93 f8 02 	sts	0x02F8, r19
    2498:	20 93 f7 02 	sts	0x02F7, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    249c:	4e ef       	ldi	r20, 0xFE	; 254
    249e:	20 30       	cpi	r18, 0x00	; 0
    24a0:	34 07       	cpc	r19, r20
    24a2:	0c f0       	brlt	.+2      	; 0x24a6 <handleIRRemoteCommands+0x1b2>
    24a4:	3d cf       	rjmp	.-390    	; 0x2320 <handleIRRemoteCommands+0x2c>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	9e ef       	ldi	r25, 0xFE	; 254
    24aa:	90 93 f8 02 	sts	0x02F8, r25
    24ae:	80 93 f7 02 	sts	0x02F7, r24
    24b2:	80 91 f9 02 	lds	r24, 0x02F9
    24b6:	90 91 fa 02 	lds	r25, 0x02FA
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	32 e0       	ldi	r19, 0x02	; 2
    24be:	36 cf       	rjmp	.-404    	; 0x232c <handleIRRemoteCommands+0x38>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    24c0:	20 91 f7 02 	lds	r18, 0x02F7
    24c4:	30 91 f8 02 	lds	r19, 0x02F8
    24c8:	22 50       	subi	r18, 0x02	; 2
    24ca:	30 40       	sbci	r19, 0x00	; 0
    24cc:	30 93 f8 02 	sts	0x02F8, r19
    24d0:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired += STEP_MOTORS;
    24d4:	80 91 f9 02 	lds	r24, 0x02F9
    24d8:	90 91 fa 02 	lds	r25, 0x02FA
    24dc:	02 96       	adiw	r24, 0x02	; 2
    24de:	90 93 fa 02 	sts	0x02FA, r25
    24e2:	80 93 f9 02 	sts	0x02F9, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    24e6:	4e ef       	ldi	r20, 0xFE	; 254
    24e8:	20 30       	cpi	r18, 0x00	; 0
    24ea:	34 07       	cpc	r19, r20
    24ec:	34 f4       	brge	.+12     	; 0x24fa <handleIRRemoteCommands+0x206>
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	3e ef       	ldi	r19, 0xFE	; 254
    24f2:	30 93 f8 02 	sts	0x02F8, r19
    24f6:	20 93 f7 02 	sts	0x02F7, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    24fa:	42 e0       	ldi	r20, 0x02	; 2
    24fc:	81 30       	cpi	r24, 0x01	; 1
    24fe:	94 07       	cpc	r25, r20
    2500:	0c f4       	brge	.+2      	; 0x2504 <handleIRRemoteCommands+0x210>
    2502:	12 cf       	rjmp	.-476    	; 0x2328 <handleIRRemoteCommands+0x34>
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	92 e0       	ldi	r25, 0x02	; 2
    2508:	90 93 fa 02 	sts	0x02FA, r25
    250c:	80 93 f9 02 	sts	0x02F9, r24
    2510:	0b cf       	rjmp	.-490    	; 0x2328 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    2512:	10 92 f8 02 	sts	0x02F8, r1
    2516:	10 92 f7 02 	sts	0x02F7, r1
					pwm_left_desired = 0;
    251a:	10 92 fa 02 	sts	0x02FA, r1
    251e:	10 92 f9 02 	sts	0x02F9, r1
					if(currentSelector == 8) {
    2522:	80 91 48 04 	lds	r24, 0x0448
    2526:	88 30       	cpi	r24, 0x08	; 8
    2528:	09 f4       	brne	.+2      	; 0x252c <handleIRRemoteCommands+0x238>
    252a:	db c0       	rjmp	.+438    	; 0x26e2 <handleIRRemoteCommands+0x3ee>
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	fb ce       	rjmp	.-522    	; 0x232c <handleIRRemoteCommands+0x38>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    2536:	20 91 f7 02 	lds	r18, 0x02F7
    253a:	30 91 f8 02 	lds	r19, 0x02F8
    253e:	2e 5f       	subi	r18, 0xFE	; 254
    2540:	3f 4f       	sbci	r19, 0xFF	; 255
    2542:	30 93 f8 02 	sts	0x02F8, r19
    2546:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired -= STEP_MOTORS;
    254a:	80 91 f9 02 	lds	r24, 0x02F9
    254e:	90 91 fa 02 	lds	r25, 0x02FA
    2552:	02 97       	sbiw	r24, 0x02	; 2
    2554:	90 93 fa 02 	sts	0x02FA, r25
    2558:	80 93 f9 02 	sts	0x02F9, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    255c:	42 e0       	ldi	r20, 0x02	; 2
    255e:	21 30       	cpi	r18, 0x01	; 1
    2560:	34 07       	cpc	r19, r20
    2562:	34 f0       	brlt	.+12     	; 0x2570 <handleIRRemoteCommands+0x27c>
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	32 e0       	ldi	r19, 0x02	; 2
    2568:	30 93 f8 02 	sts	0x02F8, r19
    256c:	20 93 f7 02 	sts	0x02F7, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2570:	4e ef       	ldi	r20, 0xFE	; 254
    2572:	80 30       	cpi	r24, 0x00	; 0
    2574:	94 07       	cpc	r25, r20
    2576:	0c f0       	brlt	.+2      	; 0x257a <handleIRRemoteCommands+0x286>
    2578:	d7 ce       	rjmp	.-594    	; 0x2328 <handleIRRemoteCommands+0x34>
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	9e ef       	ldi	r25, 0xFE	; 254
    257e:	90 93 fa 02 	sts	0x02FA, r25
    2582:	80 93 f9 02 	sts	0x02F9, r24
    2586:	d0 ce       	rjmp	.-608    	; 0x2328 <handleIRRemoteCommands+0x34>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    2588:	80 91 f9 02 	lds	r24, 0x02F9
    258c:	90 91 fa 02 	lds	r25, 0x02FA
    2590:	02 96       	adiw	r24, 0x02	; 2
    2592:	90 93 fa 02 	sts	0x02FA, r25
    2596:	80 93 f9 02 	sts	0x02F9, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    259a:	22 e0       	ldi	r18, 0x02	; 2
    259c:	81 30       	cpi	r24, 0x01	; 1
    259e:	92 07       	cpc	r25, r18
    25a0:	0c f4       	brge	.+2      	; 0x25a4 <handleIRRemoteCommands+0x2b0>
    25a2:	61 cf       	rjmp	.-318    	; 0x2466 <handleIRRemoteCommands+0x172>
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	92 e0       	ldi	r25, 0x02	; 2
    25a8:	90 93 fa 02 	sts	0x02FA, r25
    25ac:	80 93 f9 02 	sts	0x02F9, r24
    25b0:	5a cf       	rjmp	.-332    	; 0x2466 <handleIRRemoteCommands+0x172>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    25b2:	20 91 f7 02 	lds	r18, 0x02F7
    25b6:	30 91 f8 02 	lds	r19, 0x02F8
    25ba:	80 91 f9 02 	lds	r24, 0x02F9
    25be:	90 91 fa 02 	lds	r25, 0x02FA
    25c2:	82 17       	cp	r24, r18
    25c4:	93 07       	cpc	r25, r19
    25c6:	0c f4       	brge	.+2      	; 0x25ca <handleIRRemoteCommands+0x2d6>
    25c8:	6e c0       	rjmp	.+220    	; 0x26a6 <handleIRRemoteCommands+0x3b2>
    25ca:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    25cc:	2e 5f       	subi	r18, 0xFE	; 254
    25ce:	3f 4f       	sbci	r19, 0xFF	; 255
    25d0:	30 93 f8 02 	sts	0x02F8, r19
    25d4:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired += STEP_MOTORS;
    25d8:	02 96       	adiw	r24, 0x02	; 2
    25da:	90 93 fa 02 	sts	0x02FA, r25
    25de:	80 93 f9 02 	sts	0x02F9, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    25e2:	42 e0       	ldi	r20, 0x02	; 2
    25e4:	21 30       	cpi	r18, 0x01	; 1
    25e6:	34 07       	cpc	r19, r20
    25e8:	34 f0       	brlt	.+12     	; 0x25f6 <handleIRRemoteCommands+0x302>
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	32 e0       	ldi	r19, 0x02	; 2
    25ee:	30 93 f8 02 	sts	0x02F8, r19
    25f2:	20 93 f7 02 	sts	0x02F7, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    25f6:	22 e0       	ldi	r18, 0x02	; 2
    25f8:	81 30       	cpi	r24, 0x01	; 1
    25fa:	92 07       	cpc	r25, r18
    25fc:	0c f4       	brge	.+2      	; 0x2600 <handleIRRemoteCommands+0x30c>
    25fe:	33 cf       	rjmp	.-410    	; 0x2466 <handleIRRemoteCommands+0x172>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	92 e0       	ldi	r25, 0x02	; 2
    2604:	90 93 fa 02 	sts	0x02FA, r25
    2608:	80 93 f9 02 	sts	0x02F9, r24
    260c:	20 91 f7 02 	lds	r18, 0x02F7
    2610:	30 91 f8 02 	lds	r19, 0x02F8
    2614:	89 ce       	rjmp	.-750    	; 0x2328 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    2616:	20 91 f7 02 	lds	r18, 0x02F7
    261a:	30 91 f8 02 	lds	r19, 0x02F8
    261e:	2e 5f       	subi	r18, 0xFE	; 254
    2620:	3f 4f       	sbci	r19, 0xFF	; 255
    2622:	30 93 f8 02 	sts	0x02F8, r19
    2626:	20 93 f7 02 	sts	0x02F7, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    262a:	42 e0       	ldi	r20, 0x02	; 2
    262c:	21 30       	cpi	r18, 0x01	; 1
    262e:	34 07       	cpc	r19, r20
    2630:	0c f4       	brge	.+2      	; 0x2634 <handleIRRemoteCommands+0x340>
    2632:	76 ce       	rjmp	.-788    	; 0x2320 <handleIRRemoteCommands+0x2c>
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	92 e0       	ldi	r25, 0x02	; 2
    2638:	90 93 f8 02 	sts	0x02F8, r25
    263c:	80 93 f7 02 	sts	0x02F7, r24
    2640:	80 91 f9 02 	lds	r24, 0x02F9
    2644:	90 91 fa 02 	lds	r25, 0x02FA
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	32 e0       	ldi	r19, 0x02	; 2
    264c:	6f ce       	rjmp	.-802    	; 0x232c <handleIRRemoteCommands+0x38>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    264e:	80 91 25 04 	lds	r24, 0x0425
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	01 96       	adiw	r24, 0x01	; 1
    2656:	65 e0       	ldi	r22, 0x05	; 5
    2658:	70 e0       	ldi	r23, 0x00	; 0
    265a:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
    265e:	80 93 25 04 	sts	0x0425, r24

					if(colorState==0) {			// turn on blue and off all IRs
    2662:	88 23       	and	r24, r24
    2664:	11 f5       	brne	.+68     	; 0x26aa <handleIRRemoteCommands+0x3b6>
						LED_IR1_HIGH;
    2666:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    2668:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    266a:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    266e:	8f ef       	ldi	r24, 0xFF	; 255
    2670:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2674:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    2678:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <updateRedLed>
					updateGreenLed(pwm_green);
    267c:	80 91 0d 02 	lds	r24, 0x020D
    2680:	0e 94 39 35 	call	0x6a72	; 0x6a72 <updateGreenLed>
					updateBlueLed(pwm_blue);
    2684:	80 91 0e 02 	lds	r24, 0x020E
    2688:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <updateBlueLed>
    268c:	20 91 f7 02 	lds	r18, 0x02F7
    2690:	30 91 f8 02 	lds	r19, 0x02F8
    2694:	80 91 f9 02 	lds	r24, 0x02F9
    2698:	90 91 fa 02 	lds	r25, 0x02FA

	               	break;
    269c:	45 ce       	rjmp	.-886    	; 0x2328 <handleIRRemoteCommands+0x34>

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    269e:	30 95       	com	r19
    26a0:	21 95       	neg	r18
    26a2:	3f 4f       	sbci	r19, 0xFF	; 255
    26a4:	43 ce       	rjmp	.-890    	; 0x232c <handleIRRemoteCommands+0x38>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    26a6:	c9 01       	movw	r24, r18
    26a8:	91 cf       	rjmp	.-222    	; 0x25cc <handleIRRemoteCommands+0x2d8>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	91 f0       	breq	.+36     	; 0x26d2 <handleIRRemoteCommands+0x3de>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    26ae:	82 30       	cpi	r24, 0x02	; 2
    26b0:	a1 f1       	breq	.+104    	; 0x271a <handleIRRemoteCommands+0x426>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    26b2:	83 30       	cpi	r24, 0x03	; 3
    26b4:	e9 f1       	breq	.+122    	; 0x2730 <handleIRRemoteCommands+0x43c>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    26b6:	8f ef       	ldi	r24, 0xFF	; 255
    26b8:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    26bc:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    26c0:	80 93 0c 02 	sts	0x020C, r24
    26c4:	d9 cf       	rjmp	.-78     	; 0x2678 <handleIRRemoteCommands+0x384>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	80 93 61 04 	sts	0x0461, r24
							cliffAvoidanceEnabled = 1;
    26cc:	80 93 62 04 	sts	0x0462, r24
    26d0:	23 ce       	rjmp	.-954    	; 0x2318 <handleIRRemoteCommands+0x24>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    26d2:	8f ef       	ldi	r24, 0xFF	; 255
    26d4:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    26d8:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    26dc:	80 93 0c 02 	sts	0x020C, r24
    26e0:	cb cf       	rjmp	.-106    	; 0x2678 <handleIRRemoteCommands+0x384>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    26e2:	0e 94 1d 38 	call	0x703a	; 0x703a <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    26e6:	8f ef       	ldi	r24, 0xFF	; 255
    26e8:	93 e0       	ldi	r25, 0x03	; 3
    26ea:	90 93 68 02 	sts	0x0268, r25
    26ee:	80 93 67 02 	sts	0x0267, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    26f2:	90 93 6e 02 	sts	0x026E, r25
    26f6:	80 93 6d 02 	sts	0x026D, r24
						calibState = 0;
    26fa:	10 92 81 05 	sts	0x0581, r1
						calibVelIndex = 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	80 93 c3 04 	sts	0x04C3, r24
						calibrateOdomFlag = 1;
    2704:	80 93 c0 04 	sts	0x04C0, r24
    2708:	20 91 f7 02 	lds	r18, 0x02F7
    270c:	30 91 f8 02 	lds	r19, 0x02F8
    2710:	80 91 f9 02 	lds	r24, 0x02F9
    2714:	90 91 fa 02 	lds	r25, 0x02FA
    2718:	07 ce       	rjmp	.-1010   	; 0x2328 <handleIRRemoteCommands+0x34>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    271a:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    271c:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    271e:	8f ef       	ldi	r24, 0xFF	; 255
    2720:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2724:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    2728:	10 92 0c 02 	sts	0x020C, r1
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	a4 cf       	rjmp	.-184    	; 0x2678 <handleIRRemoteCommands+0x384>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    2730:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    2734:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    2738:	10 92 0c 02 	sts	0x020C, r1
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	9c cf       	rjmp	.-200    	; 0x2678 <handleIRRemoteCommands+0x384>

00002740 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    2740:	08 95       	ret

00002742 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    2742:	cf 92       	push	r12
    2744:	df 92       	push	r13
    2746:	ef 92       	push	r14
    2748:	ff 92       	push	r15
    274a:	0f 93       	push	r16
    274c:	1f 93       	push	r17
    274e:	cf 93       	push	r28
    2750:	df 93       	push	r29
    2752:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    2754:	80 81       	ld	r24, Z
    2756:	91 81       	ldd	r25, Z+1	; 0x01
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	09 f4       	brne	.+2      	; 0x275e <start_vertical_speed_control_left+0x1c>
    275c:	f7 c0       	rjmp	.+494    	; 0x294c <start_vertical_speed_control_left+0x20a>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    275e:	20 91 3a 04 	lds	r18, 0x043A
    2762:	30 91 3b 04 	lds	r19, 0x043B
    2766:	41 e0       	ldi	r20, 0x01	; 1
    2768:	2e 30       	cpi	r18, 0x0E	; 14
    276a:	34 07       	cpc	r19, r20
    276c:	0c f4       	brge	.+2      	; 0x2770 <start_vertical_speed_control_left+0x2e>
    276e:	c7 c0       	rjmp	.+398    	; 0x28fe <start_vertical_speed_control_left+0x1bc>
		if(*pwm_left > 0) {
    2770:	18 16       	cp	r1, r24
    2772:	19 06       	cpc	r1, r25
    2774:	0c f0       	brlt	.+2      	; 0x2778 <start_vertical_speed_control_left+0x36>
    2776:	68 c1       	rjmp	.+720    	; 0x2a48 <start_vertical_speed_control_left+0x306>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    2778:	88 e6       	ldi	r24, 0x68	; 104
    277a:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    277c:	82 1b       	sub	r24, r18
    277e:	93 0b       	sbc	r25, r19
    2780:	95 95       	asr	r25
    2782:	87 95       	ror	r24
    2784:	95 95       	asr	r25
    2786:	87 95       	ror	r24
    2788:	29 e1       	ldi	r18, 0x19	; 25
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	28 1b       	sub	r18, r24
    278e:	39 0b       	sbc	r19, r25
    2790:	30 93 04 02 	sts	0x0204, r19
    2794:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2798:	c0 91 c1 04 	lds	r28, 0x04C1
    279c:	d0 91 c2 04 	lds	r29, 0x04C2
    27a0:	d0 93 6d 05 	sts	0x056D, r29
    27a4:	c0 93 6c 05 	sts	0x056C, r28
	if(*pwm_left >= 0) {
    27a8:	80 81       	ld	r24, Z
    27aa:	91 81       	ldd	r25, Z+1	; 0x01
    27ac:	97 fd       	sbrc	r25, 7
    27ae:	2e c1       	rjmp	.+604    	; 0x2a0c <start_vertical_speed_control_left+0x2ca>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    27b0:	20 91 ef 02 	lds	r18, 0x02EF
    27b4:	30 91 f0 02 	lds	r19, 0x02F0
    27b8:	dc 01       	movw	r26, r24
    27ba:	a2 1b       	sub	r26, r18
    27bc:	b3 0b       	sbc	r27, r19
    27be:	b0 93 c2 04 	sts	0x04C2, r27
    27c2:	a0 93 c1 04 	sts	0x04C1, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    27c6:	80 91 07 03 	lds	r24, 0x0307
    27ca:	90 91 08 03 	lds	r25, 0x0308
    27ce:	8a 0f       	add	r24, r26
    27d0:	9b 1f       	adc	r25, r27
    27d2:	90 93 08 03 	sts	0x0308, r25
    27d6:	80 93 07 03 	sts	0x0307, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    27da:	66 e0       	ldi	r22, 0x06	; 6
    27dc:	81 34       	cpi	r24, 0x41	; 65
    27de:	96 07       	cpc	r25, r22
    27e0:	0c f4       	brge	.+2      	; 0x27e4 <start_vertical_speed_control_left+0xa2>
    27e2:	cb c0       	rjmp	.+406    	; 0x297a <start_vertical_speed_control_left+0x238>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    27e4:	80 e4       	ldi	r24, 0x40	; 64
    27e6:	96 e0       	ldi	r25, 0x06	; 6
    27e8:	90 93 08 03 	sts	0x0308, r25
    27ec:	80 93 07 03 	sts	0x0307, r24
    27f0:	10 ec       	ldi	r17, 0xC0	; 192
    27f2:	c1 2e       	mov	r12, r17
    27f4:	12 e1       	ldi	r17, 0x12	; 18
    27f6:	d1 2e       	mov	r13, r17
    27f8:	e1 2c       	mov	r14, r1
    27fa:	f1 2c       	mov	r15, r1
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    27fc:	00 81       	ld	r16, Z
    27fe:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2800:	9d 01       	movw	r18, r26
    2802:	22 0f       	add	r18, r18
    2804:	33 1f       	adc	r19, r19
    2806:	2a 0f       	add	r18, r26
    2808:	3b 1f       	adc	r19, r27
    280a:	22 0f       	add	r18, r18
    280c:	33 1f       	adc	r19, r19
    280e:	22 0f       	add	r18, r18
    2810:	33 1f       	adc	r19, r19
    2812:	22 0f       	add	r18, r18
    2814:	33 1f       	adc	r19, r19
    2816:	2a 0f       	add	r18, r26
    2818:	3b 1f       	adc	r19, r27
    281a:	44 27       	eor	r20, r20
    281c:	37 fd       	sbrc	r19, 7
    281e:	40 95       	com	r20
    2820:	54 2f       	mov	r21, r20
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2822:	80 91 03 02 	lds	r24, 0x0203
    2826:	90 91 04 02 	lds	r25, 0x0204
    282a:	08 9f       	mul	r16, r24
    282c:	b0 01       	movw	r22, r0
    282e:	09 9f       	mul	r16, r25
    2830:	70 0d       	add	r23, r0
    2832:	18 9f       	mul	r17, r24
    2834:	70 0d       	add	r23, r0
    2836:	11 24       	eor	r1, r1
    2838:	88 27       	eor	r24, r24
    283a:	77 fd       	sbrc	r23, 7
    283c:	80 95       	com	r24
    283e:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2840:	26 0f       	add	r18, r22
    2842:	37 1f       	adc	r19, r23
    2844:	48 1f       	adc	r20, r24
    2846:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    2848:	ac 1b       	sub	r26, r28
    284a:	bd 0b       	sbc	r27, r29
    284c:	aa 0f       	add	r26, r26
    284e:	bb 1f       	adc	r27, r27
    2850:	bd 01       	movw	r22, r26
    2852:	cb 01       	movw	r24, r22
    2854:	aa 27       	eor	r26, r26
    2856:	97 fd       	sbrc	r25, 7
    2858:	a0 95       	com	r26
    285a:	ba 2f       	mov	r27, r26
    285c:	28 0f       	add	r18, r24
    285e:	39 1f       	adc	r19, r25
    2860:	4a 1f       	adc	r20, r26
    2862:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);
    2864:	2c 0d       	add	r18, r12
    2866:	3d 1d       	adc	r19, r13
    2868:	4e 1d       	adc	r20, r14
    286a:	5f 1d       	adc	r21, r15
    286c:	20 93 03 03 	sts	0x0303, r18
    2870:	30 93 04 03 	sts	0x0304, r19
    2874:	40 93 05 03 	sts	0x0305, r20
    2878:	50 93 06 03 	sts	0x0306, r21

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    287c:	57 fd       	sbrc	r21, 7
    287e:	9d c0       	rjmp	.+314    	; 0x29ba <start_vertical_speed_control_left+0x278>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2880:	12 16       	cp	r1, r18
    2882:	13 06       	cpc	r1, r19
    2884:	14 06       	cpc	r1, r20
    2886:	15 06       	cpc	r1, r21
    2888:	0c f0       	brlt	.+2      	; 0x288c <start_vertical_speed_control_left+0x14a>
    288a:	a4 c0       	rjmp	.+328    	; 0x29d4 <start_vertical_speed_control_left+0x292>
    288c:	17 fd       	sbrc	r17, 7
    288e:	c9 c0       	rjmp	.+402    	; 0x2a22 <start_vertical_speed_control_left+0x2e0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2890:	21 3c       	cpi	r18, 0xC1	; 193
    2892:	7d e5       	ldi	r23, 0x5D	; 93
    2894:	37 07       	cpc	r19, r23
    2896:	70 e0       	ldi	r23, 0x00	; 0
    2898:	47 07       	cpc	r20, r23
    289a:	70 e0       	ldi	r23, 0x00	; 0
    289c:	57 07       	cpc	r21, r23
    289e:	0c f4       	brge	.+2      	; 0x28a2 <start_vertical_speed_control_left+0x160>
    28a0:	99 c0       	rjmp	.+306    	; 0x29d4 <start_vertical_speed_control_left+0x292>
    28a2:	80 ec       	ldi	r24, 0xC0	; 192
    28a4:	9d e5       	ldi	r25, 0x5D	; 93
    28a6:	a0 e0       	ldi	r26, 0x00	; 0
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	80 93 03 03 	sts	0x0303, r24
    28ae:	90 93 04 03 	sts	0x0304, r25
    28b2:	a0 93 05 03 	sts	0x0305, r26
    28b6:	b0 93 06 03 	sts	0x0306, r27
    28ba:	2c ed       	ldi	r18, 0xDC	; 220
    28bc:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    28be:	31 83       	std	Z+1, r19	; 0x01
    28c0:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    28c2:	80 91 e9 02 	lds	r24, 0x02E9
    28c6:	90 91 ea 02 	lds	r25, 0x02EA
    28ca:	18 16       	cp	r1, r24
    28cc:	19 06       	cpc	r1, r25
    28ce:	0c f0       	brlt	.+2      	; 0x28d2 <start_vertical_speed_control_left+0x190>
    28d0:	98 c0       	rjmp	.+304    	; 0x2a02 <start_vertical_speed_control_left+0x2c0>
		*pwm_left += 1;
    28d2:	2f 5f       	subi	r18, 0xFF	; 255
    28d4:	3f 4f       	sbci	r19, 0xFF	; 255
    28d6:	31 83       	std	Z+1, r19	; 0x01
    28d8:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    28da:	42 e0       	ldi	r20, 0x02	; 2
    28dc:	21 30       	cpi	r18, 0x01	; 1
    28de:	34 07       	cpc	r19, r20
    28e0:	0c f4       	brge	.+2      	; 0x28e4 <start_vertical_speed_control_left+0x1a2>
    28e2:	41 c0       	rjmp	.+130    	; 0x2966 <start_vertical_speed_control_left+0x224>
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	92 e0       	ldi	r25, 0x02	; 2
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	1f 91       	pop	r17
    28f2:	0f 91       	pop	r16
    28f4:	ff 90       	pop	r15
    28f6:	ef 90       	pop	r14
    28f8:	df 90       	pop	r13
    28fa:	cf 90       	pop	r12
    28fc:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    28fe:	24 3b       	cpi	r18, 0xB4	; 180
    2900:	31 05       	cpc	r19, r1
    2902:	94 f4       	brge	.+36     	; 0x2928 <start_vertical_speed_control_left+0x1e6>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2904:	2a 35       	cpi	r18, 0x5A	; 90
    2906:	31 05       	cpc	r19, r1
    2908:	7c f4       	brge	.+30     	; 0x2928 <start_vertical_speed_control_left+0x1e6>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    290a:	18 16       	cp	r1, r24
    290c:	19 06       	cpc	r1, r25
    290e:	0c f0       	brlt	.+2      	; 0x2912 <start_vertical_speed_control_left+0x1d0>
    2910:	a9 c0       	rjmp	.+338    	; 0x2a64 <start_vertical_speed_control_left+0x322>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2912:	35 95       	asr	r19
    2914:	27 95       	ror	r18
    2916:	35 95       	asr	r19
    2918:	27 95       	ror	r18
    291a:	27 5e       	subi	r18, 0xE7	; 231
    291c:	3f 4f       	sbci	r19, 0xFF	; 255
    291e:	30 93 04 02 	sts	0x0204, r19
    2922:	20 93 03 02 	sts	0x0203, r18
    2926:	38 cf       	rjmp	.-400    	; 0x2798 <start_vertical_speed_control_left+0x56>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    2928:	18 16       	cp	r1, r24
    292a:	19 06       	cpc	r1, r25
    292c:	0c f0       	brlt	.+2      	; 0x2930 <start_vertical_speed_control_left+0x1ee>
    292e:	42 c0       	rjmp	.+132    	; 0x29b4 <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    2930:	84 eb       	ldi	r24, 0xB4	; 180
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	82 1b       	sub	r24, r18
    2936:	93 0b       	sbc	r25, r19
    2938:	95 95       	asr	r25
    293a:	87 95       	ror	r24
    293c:	95 95       	asr	r25
    293e:	87 95       	ror	r24
    2940:	49 96       	adiw	r24, 0x19	; 25
    2942:	90 93 04 02 	sts	0x0204, r25
    2946:	80 93 03 02 	sts	0x0203, r24
    294a:	26 cf       	rjmp	.-436    	; 0x2798 <start_vertical_speed_control_left+0x56>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    294c:	10 92 08 03 	sts	0x0308, r1
    2950:	10 92 07 03 	sts	0x0307, r1
		delta_left_speed_current = 0;
    2954:	10 92 c2 04 	sts	0x04C2, r1
    2958:	10 92 c1 04 	sts	0x04C1, r1
		delta_left_speed_prev = 0;
    295c:	10 92 6d 05 	sts	0x056D, r1
    2960:	10 92 6c 05 	sts	0x056C, r1
		return;
    2964:	c3 cf       	rjmp	.-122    	; 0x28ec <start_vertical_speed_control_left+0x1aa>
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2966:	6e ef       	ldi	r22, 0xFE	; 254
    2968:	20 30       	cpi	r18, 0x00	; 0
    296a:	36 07       	cpc	r19, r22
    296c:	0c f0       	brlt	.+2      	; 0x2970 <start_vertical_speed_control_left+0x22e>
    296e:	be cf       	rjmp	.-132    	; 0x28ec <start_vertical_speed_control_left+0x1aa>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	9e ef       	ldi	r25, 0xFE	; 254
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	80 83       	st	Z, r24
    2978:	b9 cf       	rjmp	.-142    	; 0x28ec <start_vertical_speed_control_left+0x1aa>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    297a:	79 ef       	ldi	r23, 0xF9	; 249
    297c:	80 3c       	cpi	r24, 0xC0	; 192
    297e:	97 07       	cpc	r25, r23
    2980:	7c f4       	brge	.+30     	; 0x29a0 <start_vertical_speed_control_left+0x25e>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    2982:	80 ec       	ldi	r24, 0xC0	; 192
    2984:	99 ef       	ldi	r25, 0xF9	; 249
    2986:	90 93 08 03 	sts	0x0308, r25
    298a:	80 93 07 03 	sts	0x0307, r24
    298e:	60 e4       	ldi	r22, 0x40	; 64
    2990:	c6 2e       	mov	r12, r22
    2992:	6d ee       	ldi	r22, 0xED	; 237
    2994:	d6 2e       	mov	r13, r22
    2996:	6f ef       	ldi	r22, 0xFF	; 255
    2998:	e6 2e       	mov	r14, r22
    299a:	6f ef       	ldi	r22, 0xFF	; 255
    299c:	f6 2e       	mov	r15, r22
    299e:	2e cf       	rjmp	.-420    	; 0x27fc <start_vertical_speed_control_left+0xba>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    29a0:	6c 01       	movw	r12, r24
    29a2:	cc 0c       	add	r12, r12
    29a4:	dd 1c       	adc	r13, r13
    29a6:	c8 0e       	add	r12, r24
    29a8:	d9 1e       	adc	r13, r25
    29aa:	ee 24       	eor	r14, r14
    29ac:	d7 fc       	sbrc	r13, 7
    29ae:	e0 94       	com	r14
    29b0:	fe 2c       	mov	r15, r14
    29b2:	24 cf       	rjmp	.-440    	; 0x27fc <start_vertical_speed_control_left+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    29b4:	84 eb       	ldi	r24, 0xB4	; 180
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	e1 ce       	rjmp	.-574    	; 0x277c <start_vertical_speed_control_left+0x3a>
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    29ba:	17 fd       	sbrc	r17, 7
    29bc:	0b c0       	rjmp	.+22     	; 0x29d4 <start_vertical_speed_control_left+0x292>
		pwm_left_speed_controller = 0;
    29be:	10 92 03 03 	sts	0x0303, r1
    29c2:	10 92 04 03 	sts	0x0304, r1
    29c6:	10 92 05 03 	sts	0x0305, r1
    29ca:	10 92 06 03 	sts	0x0306, r1
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    29d4:	20 34       	cpi	r18, 0x40	; 64
    29d6:	82 ea       	ldi	r24, 0xA2	; 162
    29d8:	38 07       	cpc	r19, r24
    29da:	8f ef       	ldi	r24, 0xFF	; 255
    29dc:	48 07       	cpc	r20, r24
    29de:	8f ef       	ldi	r24, 0xFF	; 255
    29e0:	58 07       	cpc	r21, r24
    29e2:	54 f5       	brge	.+84     	; 0x2a38 <start_vertical_speed_control_left+0x2f6>
    29e4:	80 e4       	ldi	r24, 0x40	; 64
    29e6:	92 ea       	ldi	r25, 0xA2	; 162
    29e8:	af ef       	ldi	r26, 0xFF	; 255
    29ea:	bf ef       	ldi	r27, 0xFF	; 255
    29ec:	80 93 03 03 	sts	0x0303, r24
    29f0:	90 93 04 03 	sts	0x0304, r25
    29f4:	a0 93 05 03 	sts	0x0305, r26
    29f8:	b0 93 06 03 	sts	0x0306, r27
    29fc:	24 e2       	ldi	r18, 0x24	; 36
    29fe:	3a ef       	ldi	r19, 0xFA	; 250
    2a00:	5e cf       	rjmp	.-324    	; 0x28be <start_vertical_speed_control_left+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    2a02:	21 50       	subi	r18, 0x01	; 1
    2a04:	30 40       	sbci	r19, 0x00	; 0
    2a06:	31 83       	std	Z+1, r19	; 0x01
    2a08:	20 83       	st	Z, r18
    2a0a:	67 cf       	rjmp	.-306    	; 0x28da <start_vertical_speed_control_left+0x198>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2a0c:	a0 91 ef 02 	lds	r26, 0x02EF
    2a10:	b0 91 f0 02 	lds	r27, 0x02F0
    2a14:	a8 0f       	add	r26, r24
    2a16:	b9 1f       	adc	r27, r25
    2a18:	b0 93 c2 04 	sts	0x04C2, r27
    2a1c:	a0 93 c1 04 	sts	0x04C1, r26
    2a20:	d2 ce       	rjmp	.-604    	; 0x27c6 <start_vertical_speed_control_left+0x84>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2a22:	10 92 03 03 	sts	0x0303, r1
    2a26:	10 92 04 03 	sts	0x0304, r1
    2a2a:	10 92 05 03 	sts	0x0305, r1
    2a2e:	10 92 06 03 	sts	0x0306, r1
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2a38:	84 e0       	ldi	r24, 0x04	; 4
    2a3a:	55 95       	asr	r21
    2a3c:	47 95       	ror	r20
    2a3e:	37 95       	ror	r19
    2a40:	27 95       	ror	r18
    2a42:	8a 95       	dec	r24
    2a44:	d1 f7       	brne	.-12     	; 0x2a3a <start_vertical_speed_control_left+0x2f8>
    2a46:	3b cf       	rjmp	.-394    	; 0x28be <start_vertical_speed_control_left+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    2a48:	88 e6       	ldi	r24, 0x68	; 104
    2a4a:	91 e0       	ldi	r25, 0x01	; 1
    2a4c:	82 1b       	sub	r24, r18
    2a4e:	93 0b       	sbc	r25, r19
    2a50:	95 95       	asr	r25
    2a52:	87 95       	ror	r24
    2a54:	95 95       	asr	r25
    2a56:	87 95       	ror	r24
    2a58:	49 96       	adiw	r24, 0x19	; 25
    2a5a:	90 93 04 02 	sts	0x0204, r25
    2a5e:	80 93 03 02 	sts	0x0203, r24
    2a62:	9a ce       	rjmp	.-716    	; 0x2798 <start_vertical_speed_control_left+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2a64:	35 95       	asr	r19
    2a66:	27 95       	ror	r18
    2a68:	35 95       	asr	r19
    2a6a:	27 95       	ror	r18
    2a6c:	89 e1       	ldi	r24, 0x19	; 25
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	82 1b       	sub	r24, r18
    2a72:	93 0b       	sbc	r25, r19
    2a74:	90 93 04 02 	sts	0x0204, r25
    2a78:	80 93 03 02 	sts	0x0203, r24
    2a7c:	8d ce       	rjmp	.-742    	; 0x2798 <start_vertical_speed_control_left+0x56>

00002a7e <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2a7e:	cf 92       	push	r12
    2a80:	df 92       	push	r13
    2a82:	ef 92       	push	r14
    2a84:	ff 92       	push	r15
    2a86:	0f 93       	push	r16
    2a88:	1f 93       	push	r17
    2a8a:	cf 93       	push	r28
    2a8c:	df 93       	push	r29
    2a8e:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2a90:	80 81       	ld	r24, Z
    2a92:	91 81       	ldd	r25, Z+1	; 0x01
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <start_vertical_speed_control_right+0x1c>
    2a98:	f7 c0       	rjmp	.+494    	; 0x2c88 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2a9a:	20 91 3a 04 	lds	r18, 0x043A
    2a9e:	30 91 3b 04 	lds	r19, 0x043B
    2aa2:	41 e0       	ldi	r20, 0x01	; 1
    2aa4:	2e 30       	cpi	r18, 0x0E	; 14
    2aa6:	34 07       	cpc	r19, r20
    2aa8:	0c f4       	brge	.+2      	; 0x2aac <start_vertical_speed_control_right+0x2e>
    2aaa:	c7 c0       	rjmp	.+398    	; 0x2c3a <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    2aac:	18 16       	cp	r1, r24
    2aae:	19 06       	cpc	r1, r25
    2ab0:	0c f0       	brlt	.+2      	; 0x2ab4 <start_vertical_speed_control_right+0x36>
    2ab2:	68 c1       	rjmp	.+720    	; 0x2d84 <start_vertical_speed_control_right+0x306>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    2ab4:	88 e6       	ldi	r24, 0x68	; 104
    2ab6:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2ab8:	82 1b       	sub	r24, r18
    2aba:	93 0b       	sbc	r25, r19
    2abc:	95 95       	asr	r25
    2abe:	87 95       	ror	r24
    2ac0:	95 95       	asr	r25
    2ac2:	87 95       	ror	r24
    2ac4:	29 e1       	ldi	r18, 0x19	; 25
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	28 1b       	sub	r18, r24
    2aca:	39 0b       	sbc	r19, r25
    2acc:	30 93 06 02 	sts	0x0206, r19
    2ad0:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2ad4:	c0 91 7b 05 	lds	r28, 0x057B
    2ad8:	d0 91 7c 05 	lds	r29, 0x057C
    2adc:	d0 93 c5 04 	sts	0x04C5, r29
    2ae0:	c0 93 c4 04 	sts	0x04C4, r28
	if(*pwm_right >= 0) {
    2ae4:	80 81       	ld	r24, Z
    2ae6:	91 81       	ldd	r25, Z+1	; 0x01
    2ae8:	97 fd       	sbrc	r25, 7
    2aea:	2e c1       	rjmp	.+604    	; 0x2d48 <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2aec:	20 91 f1 02 	lds	r18, 0x02F1
    2af0:	30 91 f2 02 	lds	r19, 0x02F2
    2af4:	dc 01       	movw	r26, r24
    2af6:	a2 1b       	sub	r26, r18
    2af8:	b3 0b       	sbc	r27, r19
    2afa:	b0 93 7c 05 	sts	0x057C, r27
    2afe:	a0 93 7b 05 	sts	0x057B, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2b02:	80 91 09 03 	lds	r24, 0x0309
    2b06:	90 91 0a 03 	lds	r25, 0x030A
    2b0a:	8a 0f       	add	r24, r26
    2b0c:	9b 1f       	adc	r25, r27
    2b0e:	90 93 0a 03 	sts	0x030A, r25
    2b12:	80 93 09 03 	sts	0x0309, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2b16:	66 e0       	ldi	r22, 0x06	; 6
    2b18:	81 34       	cpi	r24, 0x41	; 65
    2b1a:	96 07       	cpc	r25, r22
    2b1c:	0c f4       	brge	.+2      	; 0x2b20 <start_vertical_speed_control_right+0xa2>
    2b1e:	cb c0       	rjmp	.+406    	; 0x2cb6 <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    2b20:	80 e4       	ldi	r24, 0x40	; 64
    2b22:	96 e0       	ldi	r25, 0x06	; 6
    2b24:	90 93 0a 03 	sts	0x030A, r25
    2b28:	80 93 09 03 	sts	0x0309, r24
    2b2c:	40 ec       	ldi	r20, 0xC0	; 192
    2b2e:	c4 2e       	mov	r12, r20
    2b30:	42 e1       	ldi	r20, 0x12	; 18
    2b32:	d4 2e       	mov	r13, r20
    2b34:	e1 2c       	mov	r14, r1
    2b36:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2b38:	00 81       	ld	r16, Z
    2b3a:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2b3c:	9d 01       	movw	r18, r26
    2b3e:	22 0f       	add	r18, r18
    2b40:	33 1f       	adc	r19, r19
    2b42:	2a 0f       	add	r18, r26
    2b44:	3b 1f       	adc	r19, r27
    2b46:	22 0f       	add	r18, r18
    2b48:	33 1f       	adc	r19, r19
    2b4a:	22 0f       	add	r18, r18
    2b4c:	33 1f       	adc	r19, r19
    2b4e:	22 0f       	add	r18, r18
    2b50:	33 1f       	adc	r19, r19
    2b52:	2a 0f       	add	r18, r26
    2b54:	3b 1f       	adc	r19, r27
    2b56:	44 27       	eor	r20, r20
    2b58:	37 fd       	sbrc	r19, 7
    2b5a:	40 95       	com	r20
    2b5c:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2b5e:	80 91 05 02 	lds	r24, 0x0205
    2b62:	90 91 06 02 	lds	r25, 0x0206
    2b66:	08 9f       	mul	r16, r24
    2b68:	b0 01       	movw	r22, r0
    2b6a:	09 9f       	mul	r16, r25
    2b6c:	70 0d       	add	r23, r0
    2b6e:	18 9f       	mul	r17, r24
    2b70:	70 0d       	add	r23, r0
    2b72:	11 24       	eor	r1, r1
    2b74:	88 27       	eor	r24, r24
    2b76:	77 fd       	sbrc	r23, 7
    2b78:	80 95       	com	r24
    2b7a:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2b7c:	26 0f       	add	r18, r22
    2b7e:	37 1f       	adc	r19, r23
    2b80:	48 1f       	adc	r20, r24
    2b82:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2b84:	ac 1b       	sub	r26, r28
    2b86:	bd 0b       	sbc	r27, r29
    2b88:	aa 0f       	add	r26, r26
    2b8a:	bb 1f       	adc	r27, r27
    2b8c:	bd 01       	movw	r22, r26
    2b8e:	cb 01       	movw	r24, r22
    2b90:	aa 27       	eor	r26, r26
    2b92:	97 fd       	sbrc	r25, 7
    2b94:	a0 95       	com	r26
    2b96:	ba 2f       	mov	r27, r26
    2b98:	28 0f       	add	r18, r24
    2b9a:	39 1f       	adc	r19, r25
    2b9c:	4a 1f       	adc	r20, r26
    2b9e:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);
    2ba0:	2c 0d       	add	r18, r12
    2ba2:	3d 1d       	adc	r19, r13
    2ba4:	4e 1d       	adc	r20, r14
    2ba6:	5f 1d       	adc	r21, r15
    2ba8:	20 93 ff 02 	sts	0x02FF, r18
    2bac:	30 93 00 03 	sts	0x0300, r19
    2bb0:	40 93 01 03 	sts	0x0301, r20
    2bb4:	50 93 02 03 	sts	0x0302, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2bb8:	57 fd       	sbrc	r21, 7
    2bba:	9d c0       	rjmp	.+314    	; 0x2cf6 <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2bbc:	12 16       	cp	r1, r18
    2bbe:	13 06       	cpc	r1, r19
    2bc0:	14 06       	cpc	r1, r20
    2bc2:	15 06       	cpc	r1, r21
    2bc4:	0c f0       	brlt	.+2      	; 0x2bc8 <start_vertical_speed_control_right+0x14a>
    2bc6:	a4 c0       	rjmp	.+328    	; 0x2d10 <start_vertical_speed_control_right+0x292>
    2bc8:	17 fd       	sbrc	r17, 7
    2bca:	c9 c0       	rjmp	.+402    	; 0x2d5e <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2bcc:	21 3c       	cpi	r18, 0xC1	; 193
    2bce:	7d e5       	ldi	r23, 0x5D	; 93
    2bd0:	37 07       	cpc	r19, r23
    2bd2:	70 e0       	ldi	r23, 0x00	; 0
    2bd4:	47 07       	cpc	r20, r23
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	57 07       	cpc	r21, r23
    2bda:	0c f4       	brge	.+2      	; 0x2bde <start_vertical_speed_control_right+0x160>
    2bdc:	99 c0       	rjmp	.+306    	; 0x2d10 <start_vertical_speed_control_right+0x292>
    2bde:	80 ec       	ldi	r24, 0xC0	; 192
    2be0:	9d e5       	ldi	r25, 0x5D	; 93
    2be2:	a0 e0       	ldi	r26, 0x00	; 0
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	80 93 ff 02 	sts	0x02FF, r24
    2bea:	90 93 00 03 	sts	0x0300, r25
    2bee:	a0 93 01 03 	sts	0x0301, r26
    2bf2:	b0 93 02 03 	sts	0x0302, r27
    2bf6:	2c ed       	ldi	r18, 0xDC	; 220
    2bf8:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    2bfa:	31 83       	std	Z+1, r19	; 0x01
    2bfc:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    2bfe:	80 91 e7 02 	lds	r24, 0x02E7
    2c02:	90 91 e8 02 	lds	r25, 0x02E8
    2c06:	18 16       	cp	r1, r24
    2c08:	19 06       	cpc	r1, r25
    2c0a:	0c f0       	brlt	.+2      	; 0x2c0e <start_vertical_speed_control_right+0x190>
    2c0c:	98 c0       	rjmp	.+304    	; 0x2d3e <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    2c0e:	2f 5f       	subi	r18, 0xFF	; 255
    2c10:	3f 4f       	sbci	r19, 0xFF	; 255
    2c12:	31 83       	std	Z+1, r19	; 0x01
    2c14:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2c16:	42 e0       	ldi	r20, 0x02	; 2
    2c18:	21 30       	cpi	r18, 0x01	; 1
    2c1a:	34 07       	cpc	r19, r20
    2c1c:	0c f4       	brge	.+2      	; 0x2c20 <start_vertical_speed_control_right+0x1a2>
    2c1e:	41 c0       	rjmp	.+130    	; 0x2ca2 <start_vertical_speed_control_right+0x224>
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	92 e0       	ldi	r25, 0x02	; 2
    2c24:	91 83       	std	Z+1, r25	; 0x01
    2c26:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	df 90       	pop	r13
    2c36:	cf 90       	pop	r12
    2c38:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2c3a:	24 3b       	cpi	r18, 0xB4	; 180
    2c3c:	31 05       	cpc	r19, r1
    2c3e:	94 f4       	brge	.+36     	; 0x2c64 <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2c40:	2a 35       	cpi	r18, 0x5A	; 90
    2c42:	31 05       	cpc	r19, r1
    2c44:	7c f4       	brge	.+30     	; 0x2c64 <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    2c46:	18 16       	cp	r1, r24
    2c48:	19 06       	cpc	r1, r25
    2c4a:	0c f0       	brlt	.+2      	; 0x2c4e <start_vertical_speed_control_right+0x1d0>
    2c4c:	a9 c0       	rjmp	.+338    	; 0x2da0 <start_vertical_speed_control_right+0x322>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    2c4e:	35 95       	asr	r19
    2c50:	27 95       	ror	r18
    2c52:	35 95       	asr	r19
    2c54:	27 95       	ror	r18
    2c56:	27 5e       	subi	r18, 0xE7	; 231
    2c58:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5a:	30 93 06 02 	sts	0x0206, r19
    2c5e:	20 93 05 02 	sts	0x0205, r18
    2c62:	38 cf       	rjmp	.-400    	; 0x2ad4 <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    2c64:	18 16       	cp	r1, r24
    2c66:	19 06       	cpc	r1, r25
    2c68:	0c f0       	brlt	.+2      	; 0x2c6c <start_vertical_speed_control_right+0x1ee>
    2c6a:	42 c0       	rjmp	.+132    	; 0x2cf0 <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    2c6c:	84 eb       	ldi	r24, 0xB4	; 180
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	82 1b       	sub	r24, r18
    2c72:	93 0b       	sbc	r25, r19
    2c74:	95 95       	asr	r25
    2c76:	87 95       	ror	r24
    2c78:	95 95       	asr	r25
    2c7a:	87 95       	ror	r24
    2c7c:	49 96       	adiw	r24, 0x19	; 25
    2c7e:	90 93 06 02 	sts	0x0206, r25
    2c82:	80 93 05 02 	sts	0x0205, r24
    2c86:	26 cf       	rjmp	.-436    	; 0x2ad4 <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    2c88:	10 92 0a 03 	sts	0x030A, r1
    2c8c:	10 92 09 03 	sts	0x0309, r1
		delta_right_speed_current = 0;
    2c90:	10 92 7c 05 	sts	0x057C, r1
    2c94:	10 92 7b 05 	sts	0x057B, r1
		delta_right_speed_prev = 0;
    2c98:	10 92 c5 04 	sts	0x04C5, r1
    2c9c:	10 92 c4 04 	sts	0x04C4, r1
		return;
    2ca0:	c3 cf       	rjmp	.-122    	; 0x2c28 <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2ca2:	6e ef       	ldi	r22, 0xFE	; 254
    2ca4:	20 30       	cpi	r18, 0x00	; 0
    2ca6:	36 07       	cpc	r19, r22
    2ca8:	0c f0       	brlt	.+2      	; 0x2cac <start_vertical_speed_control_right+0x22e>
    2caa:	be cf       	rjmp	.-132    	; 0x2c28 <start_vertical_speed_control_right+0x1aa>
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	9e ef       	ldi	r25, 0xFE	; 254
    2cb0:	91 83       	std	Z+1, r25	; 0x01
    2cb2:	80 83       	st	Z, r24
    2cb4:	b9 cf       	rjmp	.-142    	; 0x2c28 <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2cb6:	79 ef       	ldi	r23, 0xF9	; 249
    2cb8:	80 3c       	cpi	r24, 0xC0	; 192
    2cba:	97 07       	cpc	r25, r23
    2cbc:	7c f4       	brge	.+30     	; 0x2cdc <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    2cbe:	80 ec       	ldi	r24, 0xC0	; 192
    2cc0:	99 ef       	ldi	r25, 0xF9	; 249
    2cc2:	90 93 0a 03 	sts	0x030A, r25
    2cc6:	80 93 09 03 	sts	0x0309, r24
    2cca:	20 e4       	ldi	r18, 0x40	; 64
    2ccc:	c2 2e       	mov	r12, r18
    2cce:	2d ee       	ldi	r18, 0xED	; 237
    2cd0:	d2 2e       	mov	r13, r18
    2cd2:	2f ef       	ldi	r18, 0xFF	; 255
    2cd4:	e2 2e       	mov	r14, r18
    2cd6:	2f ef       	ldi	r18, 0xFF	; 255
    2cd8:	f2 2e       	mov	r15, r18
    2cda:	2e cf       	rjmp	.-420    	; 0x2b38 <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2cdc:	6c 01       	movw	r12, r24
    2cde:	cc 0c       	add	r12, r12
    2ce0:	dd 1c       	adc	r13, r13
    2ce2:	c8 0e       	add	r12, r24
    2ce4:	d9 1e       	adc	r13, r25
    2ce6:	ee 24       	eor	r14, r14
    2ce8:	d7 fc       	sbrc	r13, 7
    2cea:	e0 94       	com	r14
    2cec:	fe 2c       	mov	r15, r14
    2cee:	24 cf       	rjmp	.-440    	; 0x2b38 <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2cf0:	84 eb       	ldi	r24, 0xB4	; 180
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	e1 ce       	rjmp	.-574    	; 0x2ab8 <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2cf6:	17 fd       	sbrc	r17, 7
    2cf8:	0b c0       	rjmp	.+22     	; 0x2d10 <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    2cfa:	10 92 ff 02 	sts	0x02FF, r1
    2cfe:	10 92 00 03 	sts	0x0300, r1
    2d02:	10 92 01 03 	sts	0x0301, r1
    2d06:	10 92 02 03 	sts	0x0302, r1
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2d10:	20 34       	cpi	r18, 0x40	; 64
    2d12:	82 ea       	ldi	r24, 0xA2	; 162
    2d14:	38 07       	cpc	r19, r24
    2d16:	8f ef       	ldi	r24, 0xFF	; 255
    2d18:	48 07       	cpc	r20, r24
    2d1a:	8f ef       	ldi	r24, 0xFF	; 255
    2d1c:	58 07       	cpc	r21, r24
    2d1e:	54 f5       	brge	.+84     	; 0x2d74 <start_vertical_speed_control_right+0x2f6>
    2d20:	80 e4       	ldi	r24, 0x40	; 64
    2d22:	92 ea       	ldi	r25, 0xA2	; 162
    2d24:	af ef       	ldi	r26, 0xFF	; 255
    2d26:	bf ef       	ldi	r27, 0xFF	; 255
    2d28:	80 93 ff 02 	sts	0x02FF, r24
    2d2c:	90 93 00 03 	sts	0x0300, r25
    2d30:	a0 93 01 03 	sts	0x0301, r26
    2d34:	b0 93 02 03 	sts	0x0302, r27
    2d38:	24 e2       	ldi	r18, 0x24	; 36
    2d3a:	3a ef       	ldi	r19, 0xFA	; 250
    2d3c:	5e cf       	rjmp	.-324    	; 0x2bfa <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    2d3e:	21 50       	subi	r18, 0x01	; 1
    2d40:	30 40       	sbci	r19, 0x00	; 0
    2d42:	31 83       	std	Z+1, r19	; 0x01
    2d44:	20 83       	st	Z, r18
    2d46:	67 cf       	rjmp	.-306    	; 0x2c16 <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2d48:	a0 91 f1 02 	lds	r26, 0x02F1
    2d4c:	b0 91 f2 02 	lds	r27, 0x02F2
    2d50:	a8 0f       	add	r26, r24
    2d52:	b9 1f       	adc	r27, r25
    2d54:	b0 93 7c 05 	sts	0x057C, r27
    2d58:	a0 93 7b 05 	sts	0x057B, r26
    2d5c:	d2 ce       	rjmp	.-604    	; 0x2b02 <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2d5e:	10 92 ff 02 	sts	0x02FF, r1
    2d62:	10 92 00 03 	sts	0x0300, r1
    2d66:	10 92 01 03 	sts	0x0301, r1
    2d6a:	10 92 02 03 	sts	0x0302, r1
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2d74:	64 e0       	ldi	r22, 0x04	; 4
    2d76:	55 95       	asr	r21
    2d78:	47 95       	ror	r20
    2d7a:	37 95       	ror	r19
    2d7c:	27 95       	ror	r18
    2d7e:	6a 95       	dec	r22
    2d80:	d1 f7       	brne	.-12     	; 0x2d76 <start_vertical_speed_control_right+0x2f8>
    2d82:	3b cf       	rjmp	.-394    	; 0x2bfa <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    2d84:	88 e6       	ldi	r24, 0x68	; 104
    2d86:	91 e0       	ldi	r25, 0x01	; 1
    2d88:	82 1b       	sub	r24, r18
    2d8a:	93 0b       	sbc	r25, r19
    2d8c:	95 95       	asr	r25
    2d8e:	87 95       	ror	r24
    2d90:	95 95       	asr	r25
    2d92:	87 95       	ror	r24
    2d94:	49 96       	adiw	r24, 0x19	; 25
    2d96:	90 93 06 02 	sts	0x0206, r25
    2d9a:	80 93 05 02 	sts	0x0205, r24
    2d9e:	9a ce       	rjmp	.-716    	; 0x2ad4 <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    2da0:	35 95       	asr	r19
    2da2:	27 95       	ror	r18
    2da4:	35 95       	asr	r19
    2da6:	27 95       	ror	r18
    2da8:	89 e1       	ldi	r24, 0x19	; 25
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	82 1b       	sub	r24, r18
    2dae:	93 0b       	sbc	r25, r19
    2db0:	90 93 06 02 	sts	0x0206, r25
    2db4:	80 93 05 02 	sts	0x0205, r24
    2db8:	8d ce       	rjmp	.-742    	; 0x2ad4 <start_vertical_speed_control_right+0x56>

00002dba <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    2dba:	cf 92       	push	r12
    2dbc:	df 92       	push	r13
    2dbe:	ef 92       	push	r14
    2dc0:	ff 92       	push	r15
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2dcc:	80 81       	ld	r24, Z
    2dce:	91 81       	ldd	r25, Z+1	; 0x01
    2dd0:	00 97       	sbiw	r24, 0x00	; 0
    2dd2:	09 f4       	brne	.+2      	; 0x2dd6 <start_horizontal_speed_control_right+0x1c>
    2dd4:	b8 c0       	rjmp	.+368    	; 0x2f46 <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2dd6:	c0 91 7b 05 	lds	r28, 0x057B
    2dda:	d0 91 7c 05 	lds	r29, 0x057C
    2dde:	d0 93 c5 04 	sts	0x04C5, r29
    2de2:	c0 93 c4 04 	sts	0x04C4, r28
	if(*pwm_right >= 0) {
    2de6:	80 81       	ld	r24, Z
    2de8:	91 81       	ldd	r25, Z+1	; 0x01
    2dea:	97 fd       	sbrc	r25, 7
    2dec:	cd c0       	rjmp	.+410    	; 0x2f88 <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2dee:	20 91 f1 02 	lds	r18, 0x02F1
    2df2:	30 91 f2 02 	lds	r19, 0x02F2
    2df6:	dc 01       	movw	r26, r24
    2df8:	a2 1b       	sub	r26, r18
    2dfa:	b3 0b       	sbc	r27, r19
    2dfc:	b0 93 7c 05 	sts	0x057C, r27
    2e00:	a0 93 7b 05 	sts	0x057B, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2e04:	c0 90 09 03 	lds	r12, 0x0309
    2e08:	d0 90 0a 03 	lds	r13, 0x030A
    2e0c:	ca 0e       	add	r12, r26
    2e0e:	db 1e       	adc	r13, r27
    2e10:	d0 92 0a 03 	sts	0x030A, r13
    2e14:	c0 92 09 03 	sts	0x0309, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    2e18:	81 e4       	ldi	r24, 0x41	; 65
    2e1a:	c8 16       	cp	r12, r24
    2e1c:	86 e0       	ldi	r24, 0x06	; 6
    2e1e:	d8 06       	cpc	r13, r24
    2e20:	0c f4       	brge	.+2      	; 0x2e24 <start_horizontal_speed_control_right+0x6a>
    2e22:	9e c0       	rjmp	.+316    	; 0x2f60 <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    2e24:	80 e4       	ldi	r24, 0x40	; 64
    2e26:	96 e0       	ldi	r25, 0x06	; 6
    2e28:	90 93 0a 03 	sts	0x030A, r25
    2e2c:	80 93 09 03 	sts	0x0309, r24
    2e30:	10 e8       	ldi	r17, 0x80	; 128
    2e32:	c1 2e       	mov	r12, r17
    2e34:	1c e0       	ldi	r17, 0x0C	; 12
    2e36:	d1 2e       	mov	r13, r17
    2e38:	e1 2c       	mov	r14, r1
    2e3a:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    2e3c:	00 81       	ld	r16, Z
    2e3e:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    2e40:	cd 01       	movw	r24, r26
    2e42:	88 0f       	add	r24, r24
    2e44:	99 1f       	adc	r25, r25
    2e46:	8a 0f       	add	r24, r26
    2e48:	9b 1f       	adc	r25, r27
    2e4a:	9c 01       	movw	r18, r24
    2e4c:	22 0f       	add	r18, r18
    2e4e:	33 1f       	adc	r19, r19
    2e50:	22 0f       	add	r18, r18
    2e52:	33 1f       	adc	r19, r19
    2e54:	28 0f       	add	r18, r24
    2e56:	39 1f       	adc	r19, r25
    2e58:	44 27       	eor	r20, r20
    2e5a:	37 fd       	sbrc	r19, 7
    2e5c:	40 95       	com	r20
    2e5e:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    2e60:	b8 01       	movw	r22, r16
    2e62:	66 0f       	add	r22, r22
    2e64:	77 1f       	adc	r23, r23
    2e66:	66 0f       	add	r22, r22
    2e68:	77 1f       	adc	r23, r23
    2e6a:	66 0f       	add	r22, r22
    2e6c:	77 1f       	adc	r23, r23
    2e6e:	88 27       	eor	r24, r24
    2e70:	77 fd       	sbrc	r23, 7
    2e72:	80 95       	com	r24
    2e74:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    2e76:	26 0f       	add	r18, r22
    2e78:	37 1f       	adc	r19, r23
    2e7a:	48 1f       	adc	r20, r24
    2e7c:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    2e7e:	ac 1b       	sub	r26, r28
    2e80:	bd 0b       	sbc	r27, r29
    2e82:	cd 01       	movw	r24, r26
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	8a 0f       	add	r24, r26
    2e8a:	9b 1f       	adc	r25, r27
    2e8c:	aa 27       	eor	r26, r26
    2e8e:	97 fd       	sbrc	r25, 7
    2e90:	a0 95       	com	r26
    2e92:	ba 2f       	mov	r27, r26
    2e94:	28 0f       	add	r18, r24
    2e96:	39 1f       	adc	r19, r25
    2e98:	4a 1f       	adc	r20, r26
    2e9a:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);
    2e9c:	2c 0d       	add	r18, r12
    2e9e:	3d 1d       	adc	r19, r13
    2ea0:	4e 1d       	adc	r20, r14
    2ea2:	5f 1d       	adc	r21, r15
    2ea4:	20 93 ff 02 	sts	0x02FF, r18
    2ea8:	30 93 00 03 	sts	0x0300, r19
    2eac:	40 93 01 03 	sts	0x0301, r20
    2eb0:	50 93 02 03 	sts	0x0302, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2eb4:	57 fd       	sbrc	r21, 7
    2eb6:	7a c0       	rjmp	.+244    	; 0x2fac <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2eb8:	12 16       	cp	r1, r18
    2eba:	13 06       	cpc	r1, r19
    2ebc:	14 06       	cpc	r1, r20
    2ebe:	15 06       	cpc	r1, r21
    2ec0:	0c f0       	brlt	.+2      	; 0x2ec4 <start_horizontal_speed_control_right+0x10a>
    2ec2:	81 c0       	rjmp	.+258    	; 0x2fc6 <start_horizontal_speed_control_right+0x20c>
    2ec4:	17 fd       	sbrc	r17, 7
    2ec6:	ad c0       	rjmp	.+346    	; 0x3022 <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2ec8:	21 3c       	cpi	r18, 0xC1	; 193
    2eca:	8d e5       	ldi	r24, 0x5D	; 93
    2ecc:	38 07       	cpc	r19, r24
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	48 07       	cpc	r20, r24
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	58 07       	cpc	r21, r24
    2ed6:	0c f4       	brge	.+2      	; 0x2eda <start_horizontal_speed_control_right+0x120>
    2ed8:	76 c0       	rjmp	.+236    	; 0x2fc6 <start_horizontal_speed_control_right+0x20c>
    2eda:	80 ec       	ldi	r24, 0xC0	; 192
    2edc:	9d e5       	ldi	r25, 0x5D	; 93
    2ede:	a0 e0       	ldi	r26, 0x00	; 0
    2ee0:	b0 e0       	ldi	r27, 0x00	; 0
    2ee2:	80 93 ff 02 	sts	0x02FF, r24
    2ee6:	90 93 00 03 	sts	0x0300, r25
    2eea:	a0 93 01 03 	sts	0x0301, r26
    2eee:	b0 93 02 03 	sts	0x0302, r27
    2ef2:	2c ed       	ldi	r18, 0xDC	; 220
    2ef4:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    2ef6:	31 83       	std	Z+1, r19	; 0x01
    2ef8:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    2efa:	80 91 e7 02 	lds	r24, 0x02E7
    2efe:	90 91 e8 02 	lds	r25, 0x02E8
    2f02:	18 16       	cp	r1, r24
    2f04:	19 06       	cpc	r1, r25
    2f06:	0c f0       	brlt	.+2      	; 0x2f0a <start_horizontal_speed_control_right+0x150>
    2f08:	87 c0       	rjmp	.+270    	; 0x3018 <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    2f0a:	2f 5f       	subi	r18, 0xFF	; 255
    2f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0e:	31 83       	std	Z+1, r19	; 0x01
    2f10:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    2f12:	12 16       	cp	r1, r18
    2f14:	13 06       	cpc	r1, r19
    2f16:	0c f0       	brlt	.+2      	; 0x2f1a <start_horizontal_speed_control_right+0x160>
    2f18:	6d c0       	rjmp	.+218    	; 0x2ff4 <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    2f1a:	22 5e       	subi	r18, 0xE2	; 226
    2f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1e:	31 83       	std	Z+1, r19	; 0x01
    2f20:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2f22:	82 e0       	ldi	r24, 0x02	; 2
    2f24:	21 30       	cpi	r18, 0x01	; 1
    2f26:	38 07       	cpc	r19, r24
    2f28:	0c f4       	brge	.+2      	; 0x2f2c <start_horizontal_speed_control_right+0x172>
    2f2a:	6c c0       	rjmp	.+216    	; 0x3004 <start_horizontal_speed_control_right+0x24a>
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	92 e0       	ldi	r25, 0x02	; 2
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	1f 91       	pop	r17
    2f3a:	0f 91       	pop	r16
    2f3c:	ff 90       	pop	r15
    2f3e:	ef 90       	pop	r14
    2f40:	df 90       	pop	r13
    2f42:	cf 90       	pop	r12
    2f44:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    2f46:	10 92 0a 03 	sts	0x030A, r1
    2f4a:	10 92 09 03 	sts	0x0309, r1
		delta_right_speed_current = 0;
    2f4e:	10 92 7c 05 	sts	0x057C, r1
    2f52:	10 92 7b 05 	sts	0x057B, r1
		delta_right_speed_prev = 0;
    2f56:	10 92 c5 04 	sts	0x04C5, r1
    2f5a:	10 92 c4 04 	sts	0x04C4, r1
		return;
    2f5e:	ea cf       	rjmp	.-44     	; 0x2f34 <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2f60:	80 ec       	ldi	r24, 0xC0	; 192
    2f62:	c8 16       	cp	r12, r24
    2f64:	89 ef       	ldi	r24, 0xF9	; 249
    2f66:	d8 06       	cpc	r13, r24
    2f68:	d4 f4       	brge	.+52     	; 0x2f9e <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    2f6a:	80 ec       	ldi	r24, 0xC0	; 192
    2f6c:	99 ef       	ldi	r25, 0xF9	; 249
    2f6e:	90 93 0a 03 	sts	0x030A, r25
    2f72:	80 93 09 03 	sts	0x0309, r24
    2f76:	60 e8       	ldi	r22, 0x80	; 128
    2f78:	c6 2e       	mov	r12, r22
    2f7a:	63 ef       	ldi	r22, 0xF3	; 243
    2f7c:	d6 2e       	mov	r13, r22
    2f7e:	6f ef       	ldi	r22, 0xFF	; 255
    2f80:	e6 2e       	mov	r14, r22
    2f82:	6f ef       	ldi	r22, 0xFF	; 255
    2f84:	f6 2e       	mov	r15, r22
    2f86:	5a cf       	rjmp	.-332    	; 0x2e3c <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2f88:	a0 91 f1 02 	lds	r26, 0x02F1
    2f8c:	b0 91 f2 02 	lds	r27, 0x02F2
    2f90:	a8 0f       	add	r26, r24
    2f92:	b9 1f       	adc	r27, r25
    2f94:	b0 93 7c 05 	sts	0x057C, r27
    2f98:	a0 93 7b 05 	sts	0x057B, r26
    2f9c:	33 cf       	rjmp	.-410    	; 0x2e04 <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2f9e:	cc 0c       	add	r12, r12
    2fa0:	dd 1c       	adc	r13, r13
    2fa2:	ee 24       	eor	r14, r14
    2fa4:	d7 fc       	sbrc	r13, 7
    2fa6:	e0 94       	com	r14
    2fa8:	fe 2c       	mov	r15, r14
    2faa:	48 cf       	rjmp	.-368    	; 0x2e3c <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2fac:	17 fd       	sbrc	r17, 7
    2fae:	0b c0       	rjmp	.+22     	; 0x2fc6 <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    2fb0:	10 92 ff 02 	sts	0x02FF, r1
    2fb4:	10 92 00 03 	sts	0x0300, r1
    2fb8:	10 92 01 03 	sts	0x0301, r1
    2fbc:	10 92 02 03 	sts	0x0302, r1
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2fc6:	20 34       	cpi	r18, 0x40	; 64
    2fc8:	82 ea       	ldi	r24, 0xA2	; 162
    2fca:	38 07       	cpc	r19, r24
    2fcc:	8f ef       	ldi	r24, 0xFF	; 255
    2fce:	48 07       	cpc	r20, r24
    2fd0:	8f ef       	ldi	r24, 0xFF	; 255
    2fd2:	58 07       	cpc	r21, r24
    2fd4:	8c f5       	brge	.+98     	; 0x3038 <start_horizontal_speed_control_right+0x27e>
    2fd6:	80 e4       	ldi	r24, 0x40	; 64
    2fd8:	92 ea       	ldi	r25, 0xA2	; 162
    2fda:	af ef       	ldi	r26, 0xFF	; 255
    2fdc:	bf ef       	ldi	r27, 0xFF	; 255
    2fde:	80 93 ff 02 	sts	0x02FF, r24
    2fe2:	90 93 00 03 	sts	0x0300, r25
    2fe6:	a0 93 01 03 	sts	0x0301, r26
    2fea:	b0 93 02 03 	sts	0x0302, r27
    2fee:	24 e2       	ldi	r18, 0x24	; 36
    2ff0:	3a ef       	ldi	r19, 0xFA	; 250
    2ff2:	81 cf       	rjmp	.-254    	; 0x2ef6 <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    2ff4:	21 15       	cp	r18, r1
    2ff6:	31 05       	cpc	r19, r1
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <start_horizontal_speed_control_right+0x242>
    2ffa:	9c cf       	rjmp	.-200    	; 0x2f34 <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    2ffc:	2e 51       	subi	r18, 0x1E	; 30
    2ffe:	30 40       	sbci	r19, 0x00	; 0
    3000:	31 83       	std	Z+1, r19	; 0x01
    3002:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3004:	8e ef       	ldi	r24, 0xFE	; 254
    3006:	20 30       	cpi	r18, 0x00	; 0
    3008:	38 07       	cpc	r19, r24
    300a:	0c f0       	brlt	.+2      	; 0x300e <start_horizontal_speed_control_right+0x254>
    300c:	93 cf       	rjmp	.-218    	; 0x2f34 <start_horizontal_speed_control_right+0x17a>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	9e ef       	ldi	r25, 0xFE	; 254
    3012:	91 83       	std	Z+1, r25	; 0x01
    3014:	80 83       	st	Z, r24
    3016:	8e cf       	rjmp	.-228    	; 0x2f34 <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    3018:	21 50       	subi	r18, 0x01	; 1
    301a:	30 40       	sbci	r19, 0x00	; 0
    301c:	31 83       	std	Z+1, r19	; 0x01
    301e:	20 83       	st	Z, r18
    3020:	78 cf       	rjmp	.-272    	; 0x2f12 <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3022:	10 92 ff 02 	sts	0x02FF, r1
    3026:	10 92 00 03 	sts	0x0300, r1
    302a:	10 92 01 03 	sts	0x0301, r1
    302e:	10 92 02 03 	sts	0x0302, r1
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3038:	14 e0       	ldi	r17, 0x04	; 4
    303a:	55 95       	asr	r21
    303c:	47 95       	ror	r20
    303e:	37 95       	ror	r19
    3040:	27 95       	ror	r18
    3042:	1a 95       	dec	r17
    3044:	d1 f7       	brne	.-12     	; 0x303a <start_horizontal_speed_control_right+0x280>
    3046:	57 cf       	rjmp	.-338    	; 0x2ef6 <start_horizontal_speed_control_right+0x13c>

00003048 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    3048:	cf 92       	push	r12
    304a:	df 92       	push	r13
    304c:	ef 92       	push	r14
    304e:	ff 92       	push	r15
    3050:	0f 93       	push	r16
    3052:	1f 93       	push	r17
    3054:	cf 93       	push	r28
    3056:	df 93       	push	r29
    3058:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    305a:	80 81       	ld	r24, Z
    305c:	91 81       	ldd	r25, Z+1	; 0x01
    305e:	00 97       	sbiw	r24, 0x00	; 0
    3060:	09 f4       	brne	.+2      	; 0x3064 <start_horizontal_speed_control_left+0x1c>
    3062:	b8 c0       	rjmp	.+368    	; 0x31d4 <start_horizontal_speed_control_left+0x18c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    3064:	c0 91 c1 04 	lds	r28, 0x04C1
    3068:	d0 91 c2 04 	lds	r29, 0x04C2
    306c:	d0 93 6d 05 	sts	0x056D, r29
    3070:	c0 93 6c 05 	sts	0x056C, r28
	if(*pwm_left >= 0) {
    3074:	80 81       	ld	r24, Z
    3076:	91 81       	ldd	r25, Z+1	; 0x01
    3078:	97 fd       	sbrc	r25, 7
    307a:	cd c0       	rjmp	.+410    	; 0x3216 <start_horizontal_speed_control_left+0x1ce>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    307c:	20 91 ef 02 	lds	r18, 0x02EF
    3080:	30 91 f0 02 	lds	r19, 0x02F0
    3084:	dc 01       	movw	r26, r24
    3086:	a2 1b       	sub	r26, r18
    3088:	b3 0b       	sbc	r27, r19
    308a:	b0 93 c2 04 	sts	0x04C2, r27
    308e:	a0 93 c1 04 	sts	0x04C1, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    3092:	c0 90 07 03 	lds	r12, 0x0307
    3096:	d0 90 08 03 	lds	r13, 0x0308
    309a:	ca 0e       	add	r12, r26
    309c:	db 1e       	adc	r13, r27
    309e:	d0 92 08 03 	sts	0x0308, r13
    30a2:	c0 92 07 03 	sts	0x0307, r12

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    30a6:	81 e4       	ldi	r24, 0x41	; 65
    30a8:	c8 16       	cp	r12, r24
    30aa:	86 e0       	ldi	r24, 0x06	; 6
    30ac:	d8 06       	cpc	r13, r24
    30ae:	0c f4       	brge	.+2      	; 0x30b2 <start_horizontal_speed_control_left+0x6a>
    30b0:	9e c0       	rjmp	.+316    	; 0x31ee <start_horizontal_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    30b2:	80 e4       	ldi	r24, 0x40	; 64
    30b4:	96 e0       	ldi	r25, 0x06	; 6
    30b6:	90 93 08 03 	sts	0x0308, r25
    30ba:	80 93 07 03 	sts	0x0307, r24
    30be:	10 e8       	ldi	r17, 0x80	; 128
    30c0:	c1 2e       	mov	r12, r17
    30c2:	1c e0       	ldi	r17, 0x0C	; 12
    30c4:	d1 2e       	mov	r13, r17
    30c6:	e1 2c       	mov	r14, r1
    30c8:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    30ca:	00 81       	ld	r16, Z
    30cc:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    30ce:	cd 01       	movw	r24, r26
    30d0:	88 0f       	add	r24, r24
    30d2:	99 1f       	adc	r25, r25
    30d4:	8a 0f       	add	r24, r26
    30d6:	9b 1f       	adc	r25, r27
    30d8:	9c 01       	movw	r18, r24
    30da:	22 0f       	add	r18, r18
    30dc:	33 1f       	adc	r19, r19
    30de:	22 0f       	add	r18, r18
    30e0:	33 1f       	adc	r19, r19
    30e2:	28 0f       	add	r18, r24
    30e4:	39 1f       	adc	r19, r25
    30e6:	44 27       	eor	r20, r20
    30e8:	37 fd       	sbrc	r19, 7
    30ea:	40 95       	com	r20
    30ec:	54 2f       	mov	r21, r20
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    30ee:	b8 01       	movw	r22, r16
    30f0:	66 0f       	add	r22, r22
    30f2:	77 1f       	adc	r23, r23
    30f4:	66 0f       	add	r22, r22
    30f6:	77 1f       	adc	r23, r23
    30f8:	66 0f       	add	r22, r22
    30fa:	77 1f       	adc	r23, r23
    30fc:	88 27       	eor	r24, r24
    30fe:	77 fd       	sbrc	r23, 7
    3100:	80 95       	com	r24
    3102:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3104:	26 0f       	add	r18, r22
    3106:	37 1f       	adc	r19, r23
    3108:	48 1f       	adc	r20, r24
    310a:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    310c:	ac 1b       	sub	r26, r28
    310e:	bd 0b       	sbc	r27, r29
    3110:	cd 01       	movw	r24, r26
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	8a 0f       	add	r24, r26
    3118:	9b 1f       	adc	r25, r27
    311a:	aa 27       	eor	r26, r26
    311c:	97 fd       	sbrc	r25, 7
    311e:	a0 95       	com	r26
    3120:	ba 2f       	mov	r27, r26
    3122:	28 0f       	add	r18, r24
    3124:	39 1f       	adc	r19, r25
    3126:	4a 1f       	adc	r20, r26
    3128:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);
    312a:	2c 0d       	add	r18, r12
    312c:	3d 1d       	adc	r19, r13
    312e:	4e 1d       	adc	r20, r14
    3130:	5f 1d       	adc	r21, r15
    3132:	20 93 03 03 	sts	0x0303, r18
    3136:	30 93 04 03 	sts	0x0304, r19
    313a:	40 93 05 03 	sts	0x0305, r20
    313e:	50 93 06 03 	sts	0x0306, r21

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3142:	57 fd       	sbrc	r21, 7
    3144:	7a c0       	rjmp	.+244    	; 0x323a <start_horizontal_speed_control_left+0x1f2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    3146:	12 16       	cp	r1, r18
    3148:	13 06       	cpc	r1, r19
    314a:	14 06       	cpc	r1, r20
    314c:	15 06       	cpc	r1, r21
    314e:	0c f0       	brlt	.+2      	; 0x3152 <start_horizontal_speed_control_left+0x10a>
    3150:	81 c0       	rjmp	.+258    	; 0x3254 <start_horizontal_speed_control_left+0x20c>
    3152:	17 fd       	sbrc	r17, 7
    3154:	ad c0       	rjmp	.+346    	; 0x32b0 <start_horizontal_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    3156:	21 3c       	cpi	r18, 0xC1	; 193
    3158:	8d e5       	ldi	r24, 0x5D	; 93
    315a:	38 07       	cpc	r19, r24
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	48 07       	cpc	r20, r24
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	58 07       	cpc	r21, r24
    3164:	0c f4       	brge	.+2      	; 0x3168 <start_horizontal_speed_control_left+0x120>
    3166:	76 c0       	rjmp	.+236    	; 0x3254 <start_horizontal_speed_control_left+0x20c>
    3168:	80 ec       	ldi	r24, 0xC0	; 192
    316a:	9d e5       	ldi	r25, 0x5D	; 93
    316c:	a0 e0       	ldi	r26, 0x00	; 0
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	80 93 03 03 	sts	0x0303, r24
    3174:	90 93 04 03 	sts	0x0304, r25
    3178:	a0 93 05 03 	sts	0x0305, r26
    317c:	b0 93 06 03 	sts	0x0306, r27
    3180:	2c ed       	ldi	r18, 0xDC	; 220
    3182:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    3184:	31 83       	std	Z+1, r19	; 0x01
    3186:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    3188:	80 91 e9 02 	lds	r24, 0x02E9
    318c:	90 91 ea 02 	lds	r25, 0x02EA
    3190:	18 16       	cp	r1, r24
    3192:	19 06       	cpc	r1, r25
    3194:	0c f0       	brlt	.+2      	; 0x3198 <start_horizontal_speed_control_left+0x150>
    3196:	87 c0       	rjmp	.+270    	; 0x32a6 <start_horizontal_speed_control_left+0x25e>
		*pwm_left += 1;
    3198:	2f 5f       	subi	r18, 0xFF	; 255
    319a:	3f 4f       	sbci	r19, 0xFF	; 255
    319c:	31 83       	std	Z+1, r19	; 0x01
    319e:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    31a0:	12 16       	cp	r1, r18
    31a2:	13 06       	cpc	r1, r19
    31a4:	0c f0       	brlt	.+2      	; 0x31a8 <start_horizontal_speed_control_left+0x160>
    31a6:	6d c0       	rjmp	.+218    	; 0x3282 <start_horizontal_speed_control_left+0x23a>
		*pwm_left += 30;
    31a8:	22 5e       	subi	r18, 0xE2	; 226
    31aa:	3f 4f       	sbci	r19, 0xFF	; 255
    31ac:	31 83       	std	Z+1, r19	; 0x01
    31ae:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    31b0:	82 e0       	ldi	r24, 0x02	; 2
    31b2:	21 30       	cpi	r18, 0x01	; 1
    31b4:	38 07       	cpc	r19, r24
    31b6:	0c f4       	brge	.+2      	; 0x31ba <start_horizontal_speed_control_left+0x172>
    31b8:	6c c0       	rjmp	.+216    	; 0x3292 <start_horizontal_speed_control_left+0x24a>
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	92 e0       	ldi	r25, 0x02	; 2
    31be:	91 83       	std	Z+1, r25	; 0x01
    31c0:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    31c2:	df 91       	pop	r29
    31c4:	cf 91       	pop	r28
    31c6:	1f 91       	pop	r17
    31c8:	0f 91       	pop	r16
    31ca:	ff 90       	pop	r15
    31cc:	ef 90       	pop	r14
    31ce:	df 90       	pop	r13
    31d0:	cf 90       	pop	r12
    31d2:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    31d4:	10 92 08 03 	sts	0x0308, r1
    31d8:	10 92 07 03 	sts	0x0307, r1
		delta_left_speed_current = 0;
    31dc:	10 92 c2 04 	sts	0x04C2, r1
    31e0:	10 92 c1 04 	sts	0x04C1, r1
		delta_left_speed_prev = 0;
    31e4:	10 92 6d 05 	sts	0x056D, r1
    31e8:	10 92 6c 05 	sts	0x056C, r1
		return;
    31ec:	ea cf       	rjmp	.-44     	; 0x31c2 <start_horizontal_speed_control_left+0x17a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    31ee:	80 ec       	ldi	r24, 0xC0	; 192
    31f0:	c8 16       	cp	r12, r24
    31f2:	89 ef       	ldi	r24, 0xF9	; 249
    31f4:	d8 06       	cpc	r13, r24
    31f6:	d4 f4       	brge	.+52     	; 0x322c <start_horizontal_speed_control_left+0x1e4>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    31f8:	80 ec       	ldi	r24, 0xC0	; 192
    31fa:	99 ef       	ldi	r25, 0xF9	; 249
    31fc:	90 93 08 03 	sts	0x0308, r25
    3200:	80 93 07 03 	sts	0x0307, r24
    3204:	60 e8       	ldi	r22, 0x80	; 128
    3206:	c6 2e       	mov	r12, r22
    3208:	63 ef       	ldi	r22, 0xF3	; 243
    320a:	d6 2e       	mov	r13, r22
    320c:	6f ef       	ldi	r22, 0xFF	; 255
    320e:	e6 2e       	mov	r14, r22
    3210:	6f ef       	ldi	r22, 0xFF	; 255
    3212:	f6 2e       	mov	r15, r22
    3214:	5a cf       	rjmp	.-332    	; 0x30ca <start_horizontal_speed_control_left+0x82>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    3216:	a0 91 ef 02 	lds	r26, 0x02EF
    321a:	b0 91 f0 02 	lds	r27, 0x02F0
    321e:	a8 0f       	add	r26, r24
    3220:	b9 1f       	adc	r27, r25
    3222:	b0 93 c2 04 	sts	0x04C2, r27
    3226:	a0 93 c1 04 	sts	0x04C1, r26
    322a:	33 cf       	rjmp	.-410    	; 0x3092 <start_horizontal_speed_control_left+0x4a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    322c:	cc 0c       	add	r12, r12
    322e:	dd 1c       	adc	r13, r13
    3230:	ee 24       	eor	r14, r14
    3232:	d7 fc       	sbrc	r13, 7
    3234:	e0 94       	com	r14
    3236:	fe 2c       	mov	r15, r14
    3238:	48 cf       	rjmp	.-368    	; 0x30ca <start_horizontal_speed_control_left+0x82>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    323a:	17 fd       	sbrc	r17, 7
    323c:	0b c0       	rjmp	.+22     	; 0x3254 <start_horizontal_speed_control_left+0x20c>
		pwm_left_speed_controller = 0;
    323e:	10 92 03 03 	sts	0x0303, r1
    3242:	10 92 04 03 	sts	0x0304, r1
    3246:	10 92 05 03 	sts	0x0305, r1
    324a:	10 92 06 03 	sts	0x0306, r1
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3254:	20 34       	cpi	r18, 0x40	; 64
    3256:	82 ea       	ldi	r24, 0xA2	; 162
    3258:	38 07       	cpc	r19, r24
    325a:	8f ef       	ldi	r24, 0xFF	; 255
    325c:	48 07       	cpc	r20, r24
    325e:	8f ef       	ldi	r24, 0xFF	; 255
    3260:	58 07       	cpc	r21, r24
    3262:	8c f5       	brge	.+98     	; 0x32c6 <start_horizontal_speed_control_left+0x27e>
    3264:	80 e4       	ldi	r24, 0x40	; 64
    3266:	92 ea       	ldi	r25, 0xA2	; 162
    3268:	af ef       	ldi	r26, 0xFF	; 255
    326a:	bf ef       	ldi	r27, 0xFF	; 255
    326c:	80 93 03 03 	sts	0x0303, r24
    3270:	90 93 04 03 	sts	0x0304, r25
    3274:	a0 93 05 03 	sts	0x0305, r26
    3278:	b0 93 06 03 	sts	0x0306, r27
    327c:	24 e2       	ldi	r18, 0x24	; 36
    327e:	3a ef       	ldi	r19, 0xFA	; 250
    3280:	81 cf       	rjmp	.-254    	; 0x3184 <start_horizontal_speed_control_left+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    3282:	21 15       	cp	r18, r1
    3284:	31 05       	cpc	r19, r1
    3286:	09 f4       	brne	.+2      	; 0x328a <start_horizontal_speed_control_left+0x242>
    3288:	9c cf       	rjmp	.-200    	; 0x31c2 <start_horizontal_speed_control_left+0x17a>
		*pwm_left -= 30;
    328a:	2e 51       	subi	r18, 0x1E	; 30
    328c:	30 40       	sbci	r19, 0x00	; 0
    328e:	31 83       	std	Z+1, r19	; 0x01
    3290:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3292:	8e ef       	ldi	r24, 0xFE	; 254
    3294:	20 30       	cpi	r18, 0x00	; 0
    3296:	38 07       	cpc	r19, r24
    3298:	0c f0       	brlt	.+2      	; 0x329c <start_horizontal_speed_control_left+0x254>
    329a:	93 cf       	rjmp	.-218    	; 0x31c2 <start_horizontal_speed_control_left+0x17a>
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	9e ef       	ldi	r25, 0xFE	; 254
    32a0:	91 83       	std	Z+1, r25	; 0x01
    32a2:	80 83       	st	Z, r24
    32a4:	8e cf       	rjmp	.-228    	; 0x31c2 <start_horizontal_speed_control_left+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    32a6:	21 50       	subi	r18, 0x01	; 1
    32a8:	30 40       	sbci	r19, 0x00	; 0
    32aa:	31 83       	std	Z+1, r19	; 0x01
    32ac:	20 83       	st	Z, r18
    32ae:	78 cf       	rjmp	.-272    	; 0x31a0 <start_horizontal_speed_control_left+0x158>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    32b0:	10 92 03 03 	sts	0x0303, r1
    32b4:	10 92 04 03 	sts	0x0304, r1
    32b8:	10 92 05 03 	sts	0x0305, r1
    32bc:	10 92 06 03 	sts	0x0306, r1
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    32c6:	04 e0       	ldi	r16, 0x04	; 4
    32c8:	55 95       	asr	r21
    32ca:	47 95       	ror	r20
    32cc:	37 95       	ror	r19
    32ce:	27 95       	ror	r18
    32d0:	0a 95       	dec	r16
    32d2:	d1 f7       	brne	.-12     	; 0x32c8 <start_horizontal_speed_control_left+0x280>
    32d4:	57 cf       	rjmp	.-338    	; 0x3184 <start_horizontal_speed_control_left+0x13c>

000032d6 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    32d6:	85 b7       	in	r24, 0x35	; 53
    32d8:	80 61       	ori	r24, 0x10	; 16
    32da:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    32dc:	8f ef       	ldi	r24, 0xFF	; 255
    32de:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    32e0:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    32e2:	97 ef       	ldi	r25, 0xF7	; 247
    32e4:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    32e6:	90 ee       	ldi	r25, 0xE0	; 224
    32e8:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    32ea:	90 ef       	ldi	r25, 0xF0	; 240
    32ec:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    32ee:	90 eb       	ldi	r25, 0xB0	; 176
    32f0:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    32f2:	9c ef       	ldi	r25, 0xFC	; 252
    32f4:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    32f6:	93 e0       	ldi	r25, 0x03	; 3
    32f8:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    32fa:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    32fc:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    32fe:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    3300:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    3302:	80 91 4b 04 	lds	r24, 0x044B
    3306:	88 23       	and	r24, r24
    3308:	e1 f0       	breq	.+56     	; 0x3342 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    330a:	81 30       	cpi	r24, 0x01	; 1
    330c:	d1 f0       	breq	.+52     	; 0x3342 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    330e:	82 30       	cpi	r24, 0x02	; 2
    3310:	51 f1       	breq	.+84     	; 0x3366 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3312:	9f ef       	ldi	r25, 0xFF	; 255
    3314:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3318:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    331c:	9f e0       	ldi	r25, 0x0F	; 15
    331e:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    3322:	88 23       	and	r24, r24
    3324:	a9 f4       	brne	.+42     	; 0x3350 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    3326:	90 91 05 01 	lds	r25, 0x0105
    332a:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    332e:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3332:	9f ef       	ldi	r25, 0xFF	; 255
    3334:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    3338:	88 23       	and	r24, r24
    333a:	29 f4       	brne	.+10     	; 0x3346 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    333c:	10 92 0b 01 	sts	0x010B, r1
    3340:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    3342:	14 ba       	out	0x14, r1	; 20
    3344:	e6 cf       	rjmp	.-52     	; 0x3312 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    3346:	81 30       	cpi	r24, 0x01	; 1
    3348:	c9 f3       	breq	.-14     	; 0x333c <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    334a:	82 30       	cpi	r24, 0x02	; 2
    334c:	41 f0       	breq	.+16     	; 0x335e <initPortsIO+0x88>
    334e:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3350:	81 30       	cpi	r24, 0x01	; 1
    3352:	11 f0       	breq	.+4      	; 0x3358 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    3354:	82 30       	cpi	r24, 0x02	; 2
    3356:	59 f7       	brne	.-42     	; 0x332e <initPortsIO+0x58>
		PORTJ = 0x0F;
    3358:	90 93 05 01 	sts	0x0105, r25
    335c:	e8 cf       	rjmp	.-48     	; 0x332e <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    335e:	87 ef       	ldi	r24, 0xF7	; 247
    3360:	80 93 0b 01 	sts	0x010B, r24
    3364:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    3366:	98 e0       	ldi	r25, 0x08	; 8
    3368:	94 bb       	out	0x14, r25	; 20
    336a:	d3 cf       	rjmp	.-90     	; 0x3312 <initPortsIO+0x3c>

0000336c <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    336c:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    3370:	10 92 bc 00 	sts	0x00BC, r1
}
    3374:	08 95       	ret

00003376 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    3376:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    3378:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    337a:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3384:	08 95       	ret

00003386 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3386:	94 ea       	ldi	r25, 0xA4	; 164
    3388:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    338c:	90 91 bc 00 	lds	r25, 0x00BC
    3390:	97 ff       	sbrs	r25, 7
    3392:	fc cf       	rjmp	.-8      	; 0x338c <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3394:	90 91 b9 00 	lds	r25, 0x00B9
    3398:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    339a:	98 30       	cpi	r25, 0x08	; 8
    339c:	21 f0       	breq	.+8      	; 0x33a6 <i2c_start+0x20>
    339e:	90 31       	cpi	r25, 0x10	; 16
    33a0:	11 f0       	breq	.+4      	; 0x33a6 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	08 95       	ret
	}

	// send device address
	TWDR = address;
    33a6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    33aa:	84 e8       	ldi	r24, 0x84	; 132
    33ac:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    33b0:	80 91 bc 00 	lds	r24, 0x00BC
    33b4:	87 ff       	sbrs	r24, 7
    33b6:	fc cf       	rjmp	.-8      	; 0x33b0 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    33b8:	90 91 b9 00 	lds	r25, 0x00B9
    33bc:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    33be:	98 31       	cpi	r25, 0x18	; 24
    33c0:	21 f0       	breq	.+8      	; 0x33ca <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	90 34       	cpi	r25, 0x40	; 64
    33c6:	19 f0       	breq	.+6      	; 0x33ce <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    33c8:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    33ca:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    33cc:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	08 95       	ret

000033d2 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    33d2:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    33d4:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    33d6:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    33d8:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    33dc:	90 91 bc 00 	lds	r25, 0x00BC
    33e0:	97 ff       	sbrs	r25, 7
    33e2:	fc cf       	rjmp	.-8      	; 0x33dc <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    33e4:	90 91 b9 00 	lds	r25, 0x00B9
    33e8:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    33ea:	98 30       	cpi	r25, 0x08	; 8
    33ec:	11 f0       	breq	.+4      	; 0x33f2 <i2c_start_wait+0x20>
    33ee:	90 31       	cpi	r25, 0x10	; 16
    33f0:	99 f7       	brne	.-26     	; 0x33d8 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    33f2:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    33f6:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    33fa:	90 91 bc 00 	lds	r25, 0x00BC
    33fe:	97 ff       	sbrs	r25, 7
    3400:	fc cf       	rjmp	.-8      	; 0x33fa <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3402:	90 91 b9 00 	lds	r25, 0x00B9
    3406:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    3408:	90 32       	cpi	r25, 0x20	; 32
    340a:	19 f0       	breq	.+6      	; 0x3412 <i2c_start_wait+0x40>
    340c:	98 35       	cpi	r25, 0x58	; 88
    340e:	09 f0       	breq	.+2      	; 0x3412 <i2c_start_wait+0x40>
    3410:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3412:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    3416:	90 91 bc 00 	lds	r25, 0x00BC
    341a:	94 fd       	sbrc	r25, 4
    341c:	fc cf       	rjmp	.-8      	; 0x3416 <i2c_start_wait+0x44>
    341e:	dc cf       	rjmp	.-72     	; 0x33d8 <i2c_start_wait+0x6>

00003420 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3420:	94 ea       	ldi	r25, 0xA4	; 164
    3422:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3426:	90 91 bc 00 	lds	r25, 0x00BC
    342a:	97 ff       	sbrs	r25, 7
    342c:	fc cf       	rjmp	.-8      	; 0x3426 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    342e:	90 91 b9 00 	lds	r25, 0x00B9
    3432:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3434:	98 30       	cpi	r25, 0x08	; 8
    3436:	21 f0       	breq	.+8      	; 0x3440 <i2c_rep_start+0x20>
    3438:	90 31       	cpi	r25, 0x10	; 16
    343a:	11 f0       	breq	.+4      	; 0x3440 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3440:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3444:	84 e8       	ldi	r24, 0x84	; 132
    3446:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    344a:	80 91 bc 00 	lds	r24, 0x00BC
    344e:	87 ff       	sbrs	r24, 7
    3450:	fc cf       	rjmp	.-8      	; 0x344a <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3452:	90 91 b9 00 	lds	r25, 0x00B9
    3456:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3458:	98 31       	cpi	r25, 0x18	; 24
    345a:	21 f0       	breq	.+8      	; 0x3464 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	90 34       	cpi	r25, 0x40	; 64
    3460:	19 f0       	breq	.+6      	; 0x3468 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    3462:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3464:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    3466:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	08 95       	ret

0000346c <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    346c:	84 e9       	ldi	r24, 0x94	; 148
    346e:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3472:	80 91 bc 00 	lds	r24, 0x00BC
    3476:	84 fd       	sbrc	r24, 4
    3478:	fc cf       	rjmp	.-8      	; 0x3472 <i2c_stop+0x6>

}/* i2c_stop */
    347a:	08 95       	ret

0000347c <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    347c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3480:	84 e8       	ldi	r24, 0x84	; 132
    3482:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3486:	80 91 bc 00 	lds	r24, 0x00BC
    348a:	87 ff       	sbrs	r24, 7
    348c:	fc cf       	rjmp	.-8      	; 0x3486 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    348e:	90 91 b9 00 	lds	r25, 0x00B9
    3492:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	98 32       	cpi	r25, 0x28	; 40
    3498:	09 f0       	breq	.+2      	; 0x349c <i2c_write+0x20>
	return 0;

}/* i2c_write */
    349a:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    349c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    349e:	08 95       	ret

000034a0 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    34a0:	84 ec       	ldi	r24, 0xC4	; 196
    34a2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    34a6:	80 91 bc 00 	lds	r24, 0x00BC
    34aa:	87 ff       	sbrs	r24, 7
    34ac:	fc cf       	rjmp	.-8      	; 0x34a6 <i2c_readAck+0x6>

    return TWDR;
    34ae:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    34b2:	08 95       	ret

000034b4 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    34b4:	84 e8       	ldi	r24, 0x84	; 132
    34b6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    34ba:	80 91 bc 00 	lds	r24, 0x00BC
    34be:	87 ff       	sbrs	r24, 7
    34c0:	fc cf       	rjmp	.-8      	; 0x34ba <i2c_readNak+0x6>
	
    return TWDR;
    34c2:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    34c6:	08 95       	ret

000034c8 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    34c8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    34cc:	80 e1       	ldi	r24, 0x10	; 16
    34ce:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    34d2:	e0 ec       	ldi	r30, 0xC0	; 192
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	80 81       	ld	r24, Z
    34d8:	82 60       	ori	r24, 0x02	; 2
    34da:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    34dc:	e1 ec       	ldi	r30, 0xC1	; 193
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	80 81       	ld	r24, Z
    34e2:	88 69       	ori	r24, 0x98	; 152
    34e4:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    34e6:	e2 ec       	ldi	r30, 0xC2	; 194
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	80 81       	ld	r24, Z
    34ec:	86 60       	ori	r24, 0x06	; 6
    34ee:	80 83       	st	Z, r24



}
    34f0:	08 95       	ret

000034f2 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    34f2:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    34f6:	80 e1       	ldi	r24, 0x10	; 16
    34f8:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    34fc:	e8 ec       	ldi	r30, 0xC8	; 200
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	82 60       	ori	r24, 0x02	; 2
    3504:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    3506:	e9 ec       	ldi	r30, 0xC9	; 201
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	80 81       	ld	r24, Z
    350c:	88 61       	ori	r24, 0x18	; 24
    350e:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    3510:	ea ec       	ldi	r30, 0xCA	; 202
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	80 81       	ld	r24, Z
    3516:	86 60       	ori	r24, 0x06	; 6
    3518:	80 83       	st	Z, r24

}
    351a:	08 95       	ret

0000351c <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    351c:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    3520:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    3524:	10 92 c2 00 	sts	0x00C2, r1

}
    3528:	08 95       	ret

0000352a <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    352a:	90 91 c0 00 	lds	r25, 0x00C0
    352e:	95 ff       	sbrs	r25, 5
    3530:	fc cf       	rjmp	.-8      	; 0x352a <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    3532:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    3536:	66 23       	and	r22, r22
    3538:	21 f0       	breq	.+8      	; 0x3542 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    353a:	80 91 c0 00 	lds	r24, 0x00C0
    353e:	86 ff       	sbrs	r24, 6
    3540:	fc cf       	rjmp	.-8      	; 0x353a <usart0Transmit+0x10>
    3542:	08 95       	ret

00003544 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    3544:	90 91 c8 00 	lds	r25, 0x00C8
    3548:	95 ff       	sbrs	r25, 5
    354a:	fc cf       	rjmp	.-8      	; 0x3544 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    354c:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    3550:	66 23       	and	r22, r22
    3552:	21 f0       	breq	.+8      	; 0x355c <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    3554:	80 91 c8 00 	lds	r24, 0x00C8
    3558:	86 ff       	sbrs	r24, 6
    355a:	fc cf       	rjmp	.-8      	; 0x3554 <usart1Transmit+0x10>
    355c:	08 95       	ret

0000355e <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    355e:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    3562:	80 95       	com	r24
	} else {
		return 1;
	}

}
    3564:	88 1f       	adc	r24, r24
    3566:	88 27       	eor	r24, r24
    3568:	88 1f       	adc	r24, r24
    356a:	08 95       	ret

0000356c <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    356c:	87 e9       	ldi	r24, 0x97	; 151
    356e:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3570:	20 91 c0 00 	lds	r18, 0x00C0
    3574:	27 fd       	sbrc	r18, 7
    3576:	07 c0       	rjmp	.+14     	; 0x3586 <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    3578:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    357a:	d1 f7       	brne	.-12     	; 0x3570 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	80 93 1a 03 	sts	0x031A, r24
			return 0;				// timeout
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    3586:	80 91 c6 00 	lds	r24, 0x00C6

}
    358a:	08 95       	ret

0000358c <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    358c:	1f 92       	push	r1
    358e:	0f 92       	push	r0
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	0f 92       	push	r0
    3594:	0b b6       	in	r0, 0x3b	; 59
    3596:	0f 92       	push	r0
    3598:	11 24       	eor	r1, r1
    359a:	2f 93       	push	r18
    359c:	3f 93       	push	r19
    359e:	4f 93       	push	r20
    35a0:	5f 93       	push	r21
    35a2:	6f 93       	push	r22
    35a4:	7f 93       	push	r23
    35a6:	8f 93       	push	r24
    35a8:	9f 93       	push	r25
    35aa:	af 93       	push	r26
    35ac:	bf 93       	push	r27
    35ae:	ef 93       	push	r30
    35b0:	ff 93       	push	r31

	char receivedByte = UDR0;
    35b2:	80 91 c6 00 	lds	r24, 0x00C6

	if(currentSelector==15) {
    35b6:	90 91 48 04 	lds	r25, 0x0448
    35ba:	9f 30       	cpi	r25, 0x0F	; 15
    35bc:	21 f1       	breq	.+72     	; 0x3606 <__vector_25+0x7a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    35be:	90 91 11 02 	lds	r25, 0x0211
    35c2:	99 23       	and	r25, r25
    35c4:	d9 f4       	brne	.+54     	; 0x35fc <__vector_25+0x70>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    35c6:	90 91 1f 04 	lds	r25, 0x041F
    35ca:	91 30       	cpi	r25, 0x01	; 1
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <__vector_25+0x44>
    35ce:	60 c0       	rjmp	.+192    	; 0x3690 <__vector_25+0x104>
    35d0:	92 30       	cpi	r25, 0x02	; 2
    35d2:	09 f4       	brne	.+2      	; 0x35d6 <__vector_25+0x4a>
    35d4:	43 c0       	rjmp	.+134    	; 0x365c <__vector_25+0xd0>
			}
		}

	}

}
    35d6:	ff 91       	pop	r31
    35d8:	ef 91       	pop	r30
    35da:	bf 91       	pop	r27
    35dc:	af 91       	pop	r26
    35de:	9f 91       	pop	r25
    35e0:	8f 91       	pop	r24
    35e2:	7f 91       	pop	r23
    35e4:	6f 91       	pop	r22
    35e6:	5f 91       	pop	r21
    35e8:	4f 91       	pop	r20
    35ea:	3f 91       	pop	r19
    35ec:	2f 91       	pop	r18
    35ee:	0f 90       	pop	r0
    35f0:	0b be       	out	0x3b, r0	; 59
    35f2:	0f 90       	pop	r0
    35f4:	0f be       	out	0x3f, r0	; 63
    35f6:	0f 90       	pop	r0
    35f8:	1f 90       	pop	r1
    35fa:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    35fc:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    3600:	80 93 1f 04 	sts	0x041F, r24
    3604:	e8 cf       	rjmp	.-48     	; 0x35d6 <__vector_25+0x4a>

	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
    3606:	8b 32       	cpi	r24, 0x2B	; 43
    3608:	09 f4       	brne	.+2      	; 0x360c <__vector_25+0x80>
    360a:	4c c0       	rjmp	.+152    	; 0x36a4 <__vector_25+0x118>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    360c:	8d 32       	cpi	r24, 0x2D	; 45
    360e:	f1 f0       	breq	.+60     	; 0x364c <__vector_25+0xc0>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    3610:	87 36       	cpi	r24, 0x67	; 103
    3612:	09 f0       	breq	.+2      	; 0x3616 <__vector_25+0x8a>
    3614:	5b c0       	rjmp	.+182    	; 0x36cc <__vector_25+0x140>
			usart0Transmit(irCommand,1);
    3616:	90 91 23 04 	lds	r25, 0x0423

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    361a:	80 91 c0 00 	lds	r24, 0x00C0
    361e:	85 ff       	sbrs	r24, 5
    3620:	fc cf       	rjmp	.-8      	; 0x361a <__vector_25+0x8e>
	UDR0 = data;						// put data into buffer, sends the data
    3622:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3626:	80 91 c0 00 	lds	r24, 0x00C0
    362a:	86 ff       	sbrs	r24, 6
    362c:	fc cf       	rjmp	.-8      	; 0x3626 <__vector_25+0x9a>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    362e:	90 91 66 00 	lds	r25, 0x0066
    3632:	90 93 be 04 	sts	0x04BE, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3636:	80 91 c0 00 	lds	r24, 0x00C0
    363a:	85 ff       	sbrs	r24, 5
    363c:	fc cf       	rjmp	.-8      	; 0x3636 <__vector_25+0xaa>
	UDR0 = data;						// put data into buffer, sends the data
    363e:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3642:	80 91 c0 00 	lds	r24, 0x00C0
    3646:	86 ff       	sbrs	r24, 6
    3648:	fc cf       	rjmp	.-8      	; 0x3642 <__vector_25+0xb6>
    364a:	c5 cf       	rjmp	.-118    	; 0x35d6 <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    364c:	80 91 be 04 	lds	r24, 0x04BE
    3650:	88 23       	and	r24, r24
    3652:	d1 f1       	breq	.+116    	; 0x36c8 <__vector_25+0x13c>
				currentOsccal--;	
    3654:	81 50       	subi	r24, 0x01	; 1
    3656:	80 93 be 04 	sts	0x04BE, r24
    365a:	2b c0       	rjmp	.+86     	; 0x36b2 <__vector_25+0x126>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    365c:	40 91 21 04 	lds	r20, 0x0421
    3660:	44 23       	and	r20, r20
    3662:	51 f1       	breq	.+84     	; 0x36b8 <__vector_25+0x12c>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    3664:	41 30       	cpi	r20, 0x01	; 1
    3666:	09 f0       	breq	.+2      	; 0x366a <__vector_25+0xde>
    3668:	b6 cf       	rjmp	.-148    	; 0x35d6 <__vector_25+0x4a>
						rfAddress |= ((unsigned int)receivedByte<<8);
    366a:	38 2f       	mov	r19, r24
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	80 91 13 03 	lds	r24, 0x0313
    3672:	90 91 14 03 	lds	r25, 0x0314
    3676:	82 2b       	or	r24, r18
    3678:	93 2b       	or	r25, r19
    367a:	90 93 14 03 	sts	0x0314, r25
    367e:	80 93 13 03 	sts	0x0313, r24
						addressReceived = 1;
    3682:	40 93 20 04 	sts	0x0420, r20
						menuState = 0;
    3686:	10 92 21 04 	sts	0x0421, r1
						chooseMenu = 1;
    368a:	40 93 11 02 	sts	0x0211, r20
    368e:	a3 cf       	rjmp	.-186    	; 0x35d6 <__vector_25+0x4a>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    3690:	8a 3a       	cpi	r24, 0xAA	; 170
    3692:	31 f1       	breq	.+76     	; 0x36e0 <__vector_25+0x154>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    3694:	85 35       	cpi	r24, 0x55	; 85
    3696:	09 f0       	breq	.+2      	; 0x369a <__vector_25+0x10e>
    3698:	9e cf       	rjmp	.-196    	; 0x35d6 <__vector_25+0x4a>
						chooseMenu = 1;
    369a:	90 93 11 02 	sts	0x0211, r25
						menuChoice = 0;
    369e:	10 92 1f 04 	sts	0x041F, r1
    36a2:	99 cf       	rjmp	.-206    	; 0x35d6 <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    36a4:	80 91 be 04 	lds	r24, 0x04BE
    36a8:	8f 3f       	cpi	r24, 0xFF	; 255
    36aa:	e9 f0       	breq	.+58     	; 0x36e6 <__vector_25+0x15a>
				currentOsccal++;
    36ac:	8f 5f       	subi	r24, 0xFF	; 255
    36ae:	80 93 be 04 	sts	0x04BE, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    36b2:	80 93 66 00 	sts	0x0066, r24
    36b6:	8f cf       	rjmp	.-226    	; 0x35d6 <__vector_25+0x4a>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    36b8:	80 93 13 03 	sts	0x0313, r24
    36bc:	10 92 14 03 	sts	0x0314, r1
						menuState = 1;
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	80 93 21 04 	sts	0x0421, r24
    36c6:	87 cf       	rjmp	.-242    	; 0x35d6 <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	f3 cf       	rjmp	.-26     	; 0x36b2 <__vector_25+0x126>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    36cc:	83 37       	cpi	r24, 0x73	; 115
    36ce:	09 f0       	breq	.+2      	; 0x36d2 <__vector_25+0x146>
    36d0:	82 cf       	rjmp	.-252    	; 0x35d6 <__vector_25+0x4a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    36d2:	8d ef       	ldi	r24, 0xFD	; 253
    36d4:	9f e0       	ldi	r25, 0x0F	; 15
    36d6:	60 91 be 04 	lds	r22, 0x04BE
    36da:	0e 94 5b 41 	call	0x82b6	; 0x82b6 <__eewr_byte_m2560>
    36de:	7b cf       	rjmp	.-266    	; 0x35d6 <__vector_25+0x4a>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    36e0:	90 93 22 04 	sts	0x0422, r25
    36e4:	78 cf       	rjmp	.-272    	; 0x35d6 <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    36e6:	8f ef       	ldi	r24, 0xFF	; 255
    36e8:	e4 cf       	rjmp	.-56     	; 0x36b2 <__vector_25+0x126>

000036ea <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    36ea:	86 b1       	in	r24, 0x06	; 6
    36ec:	66 b1       	in	r22, 0x06	; 6
    36ee:	26 b1       	in	r18, 0x06	; 6
    36f0:	46 b1       	in	r20, 0x06	; 6
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	28 70       	andi	r18, 0x08	; 8
    36f6:	30 70       	andi	r19, 0x00	; 0
    36f8:	35 95       	asr	r19
    36fa:	27 95       	ror	r18
    36fc:	35 95       	asr	r19
    36fe:	27 95       	ror	r18
    3700:	35 95       	asr	r19
    3702:	27 95       	ror	r18
    3704:	22 0f       	add	r18, r18
    3706:	33 1f       	adc	r19, r19
    3708:	70 e0       	ldi	r23, 0x00	; 0
    370a:	64 70       	andi	r22, 0x04	; 4
    370c:	70 70       	andi	r23, 0x00	; 0
    370e:	75 95       	asr	r23
    3710:	67 95       	ror	r22
    3712:	75 95       	asr	r23
    3714:	67 95       	ror	r22
    3716:	26 0f       	add	r18, r22
    3718:	37 1f       	adc	r19, r23
    371a:	22 0f       	add	r18, r18
    371c:	33 1f       	adc	r19, r19
    371e:	50 e0       	ldi	r21, 0x00	; 0
    3720:	42 70       	andi	r20, 0x02	; 2
    3722:	50 70       	andi	r21, 0x00	; 0
    3724:	55 95       	asr	r21
    3726:	47 95       	ror	r20
    3728:	24 0f       	add	r18, r20
    372a:	35 1f       	adc	r19, r21
    372c:	22 0f       	add	r18, r18
    372e:	81 70       	andi	r24, 0x01	; 1
}
    3730:	82 0f       	add	r24, r18
    3732:	08 95       	ret

00003734 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3734:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    3736:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    3738:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    373a:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    373e:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    3742:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    3746:	8e ef       	ldi	r24, 0xFE	; 254
    3748:	9f e0       	ldi	r25, 0x0F	; 15
    374a:	0e 94 2d 41 	call	0x825a	; 0x825a <__eerd_word_m2560>
    374e:	90 93 14 03 	sts	0x0314, r25
    3752:	80 93 13 03 	sts	0x0313, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    3756:	8d ef       	ldi	r24, 0xFD	; 253
    3758:	9f e0       	ldi	r25, 0x0F	; 15
    375a:	0e 94 25 41 	call	0x824a	; 0x824a <__eerd_byte_m2560>
    375e:	80 93 be 04 	sts	0x04BE, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    3762:	98 2f       	mov	r25, r24
    3764:	91 50       	subi	r25, 0x01	; 1
    3766:	9e 3f       	cpi	r25, 0xFE	; 254
    3768:	e8 f5       	brcc	.+122    	; 0x37e4 <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    376a:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    376e:	80 91 13 03 	lds	r24, 0x0313
    3772:	90 91 14 03 	lds	r25, 0x0314
    3776:	9c 01       	movw	r18, r24
    3778:	21 58       	subi	r18, 0x81	; 129
    377a:	3c 40       	sbci	r19, 0x0C	; 12
    377c:	23 30       	cpi	r18, 0x03	; 3
    377e:	31 05       	cpc	r19, r1
    3780:	08 f5       	brcc	.+66     	; 0x37c4 <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    3782:	10 92 4b 04 	sts	0x044B, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    3786:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <initCalibration>
	initPortsIO();
    378a:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <initPortsIO>
	initAdc();
    378e:	0e 94 aa 1c 	call	0x3954	; 0x3954 <initAdc>
	initMotors();
    3792:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <initMotors>
	initRGBleds();
    3796:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <initRGBleds>
	initSPI();
    379a:	0e 94 32 0a 	call	0x1464	; 0x1464 <initSPI>
	mirf_init();
    379e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <mirf_init>
	if(spiCommError==0) {
    37a2:	80 91 16 03 	lds	r24, 0x0316
    37a6:	88 23       	and	r24, r24
    37a8:	29 f4       	brne	.+10     	; 0x37b4 <initPeripherals+0x80>
		rfFlags |= 1;
    37aa:	80 91 15 03 	lds	r24, 0x0315
    37ae:	81 60       	ori	r24, 0x01	; 1
    37b0:	80 93 15 03 	sts	0x0315, r24
	}
	initUsart0();
    37b4:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <initUsart0>
	initAccelerometer();
    37b8:	0e 94 30 36 	call	0x6c60	; 0x6c60 <initAccelerometer>
	init_ir_remote_control();
    37bc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <init_ir_remote_control>

	sei();			// enable global interrupts
    37c0:	78 94       	sei

	
}
    37c2:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    37c4:	2c e0       	ldi	r18, 0x0C	; 12
    37c6:	80 38       	cpi	r24, 0x80	; 128
    37c8:	92 07       	cpc	r25, r18
    37ca:	21 f4       	brne	.+8      	; 0x37d4 <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	80 93 4b 04 	sts	0x044B, r24
    37d2:	d9 cf       	rjmp	.-78     	; 0x3786 <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    37d4:	2c e0       	ldi	r18, 0x0C	; 12
    37d6:	84 38       	cpi	r24, 0x84	; 132
    37d8:	92 07       	cpc	r25, r18
    37da:	a8 f2       	brcs	.-86     	; 0x3786 <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    37dc:	82 e0       	ldi	r24, 0x02	; 2
    37de:	80 93 4b 04 	sts	0x044B, r24
    37e2:	d1 cf       	rjmp	.-94     	; 0x3786 <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    37e4:	60 91 66 00 	lds	r22, 0x0066
    37e8:	60 93 be 04 	sts	0x04BE, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    37ec:	8d ef       	ldi	r24, 0xFD	; 253
    37ee:	9f e0       	ldi	r25, 0x0F	; 15
    37f0:	0e 94 5b 41 	call	0x82b6	; 0x82b6 <__eewr_byte_m2560>
    37f4:	bc cf       	rjmp	.-136    	; 0x376e <initPeripherals+0x3a>

000037f6 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    37f6:	1f 92       	push	r1
    37f8:	0f 92       	push	r0
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	0f 92       	push	r0
    37fe:	11 24       	eor	r1, r1

}
    3800:	0f 90       	pop	r0
    3802:	0f be       	out	0x3f, r0	; 63
    3804:	0f 90       	pop	r0
    3806:	1f 90       	pop	r1
    3808:	18 95       	reti

0000380a <sleep>:

void sleep(unsigned char seconds) {
    380a:	cf 93       	push	r28
    380c:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    380e:	9e e1       	ldi	r25, 0x1E	; 30
    3810:	89 9f       	mul	r24, r25
    3812:	e0 01       	movw	r28, r0
    3814:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    3816:	80 91 68 00 	lds	r24, 0x0068
    381a:	8d 7f       	andi	r24, 0xFD	; 253
    381c:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    3820:	80 91 6c 00 	lds	r24, 0x006C
    3824:	8f 77       	andi	r24, 0x7F	; 127
    3826:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    382a:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    382c:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    3830:	80 91 7a 00 	lds	r24, 0x007A
    3834:	80 61       	ori	r24, 0x10	; 16
    3836:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    383a:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    383e:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    3842:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    3846:	88 b3       	in	r24, 0x18	; 24
    3848:	87 60       	ori	r24, 0x07	; 7
    384a:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    384c:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    3850:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    3854:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    3858:	89 b3       	in	r24, 0x19	; 25
    385a:	87 60       	ori	r24, 0x07	; 7
    385c:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    385e:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    3862:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    3866:	0e 94 8e 1a 	call	0x351c	; 0x351c <closeUsart>
	closeSPI();
    386a:	0e 94 3e 0a 	call	0x147c	; 0x147c <closeSPI>
	i2c_close();
    386e:	0e 94 b6 19 	call	0x336c	; 0x336c <i2c_close>

	// set port pins
	initPortsIO();
    3872:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    3876:	83 b7       	in	r24, 0x33	; 51
    3878:	8f 60       	ori	r24, 0x0F	; 15
    387a:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    3882:	80 91 b0 00 	lds	r24, 0x00B0
    3886:	8d 7f       	andi	r24, 0xFD	; 253
    3888:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    388c:	80 91 b1 00 	lds	r24, 0x00B1
    3890:	87 60       	ori	r24, 0x07	; 7
    3892:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    3896:	20 97       	sbiw	r28, 0x00	; 0
    3898:	19 f0       	breq	.+6      	; 0x38a0 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    389a:	88 95       	sleep
		pause--;
    389c:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    389e:	e9 f7       	brne	.-6      	; 0x389a <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    38a0:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    38a2:	80 91 b1 00 	lds	r24, 0x00B1
    38a6:	88 7f       	andi	r24, 0xF8	; 248
    38a8:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    38ac:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    38b0:	80 91 b0 00 	lds	r24, 0x00B0
    38b4:	82 60       	ori	r24, 0x02	; 2
    38b6:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    38ba:	8f ef       	ldi	r24, 0xFF	; 255
    38bc:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    38c0:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    38c4:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    38c8:	10 92 f4 02 	sts	0x02F4, r1
    38cc:	10 92 f3 02 	sts	0x02F3, r1
	pwm_left = 0;
    38d0:	10 92 f6 02 	sts	0x02F6, r1
    38d4:	10 92 f5 02 	sts	0x02F5, r1
	initPeripherals();
    38d8:	0e 94 9a 1b 	call	0x3734	; 0x3734 <initPeripherals>

}
    38dc:	df 91       	pop	r29
    38de:	cf 91       	pop	r28
    38e0:	08 95       	ret

000038e2 <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    38e2:	60 91 44 04 	lds	r22, 0x0444
    38e6:	70 91 45 04 	lds	r23, 0x0445
	return clockTick;
}
    38ea:	80 91 46 04 	lds	r24, 0x0446
    38ee:	90 91 47 04 	lds	r25, 0x0447
    38f2:	08 95       	ret

000038f4 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	80 93 bd 02 	sts	0x02BD, r24
}
    38fa:	08 95       	ret

000038fc <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	dc 01       	movw	r26, r24
    3902:	80 93 d3 02 	sts	0x02D3, r24
    3906:	90 93 d4 02 	sts	0x02D4, r25
    390a:	a0 93 d5 02 	sts	0x02D5, r26
    390e:	b0 93 d6 02 	sts	0x02D6, r27
	rightMotSteps = 0;
    3912:	80 93 cf 02 	sts	0x02CF, r24
    3916:	90 93 d0 02 	sts	0x02D0, r25
    391a:	a0 93 d1 02 	sts	0x02D1, r26
    391e:	b0 93 d2 02 	sts	0x02D2, r27
	theta = 0;
    3922:	80 93 64 04 	sts	0x0464, r24
    3926:	90 93 65 04 	sts	0x0465, r25
    392a:	a0 93 66 04 	sts	0x0466, r26
    392e:	b0 93 67 04 	sts	0x0467, r27
	xPos = 0;
    3932:	80 93 6c 04 	sts	0x046C, r24
    3936:	90 93 6d 04 	sts	0x046D, r25
    393a:	a0 93 6e 04 	sts	0x046E, r26
    393e:	b0 93 6f 04 	sts	0x046F, r27
	yPos = 0;
    3942:	80 93 70 04 	sts	0x0470, r24
    3946:	90 93 71 04 	sts	0x0471, r25
    394a:	a0 93 72 04 	sts	0x0472, r26
    394e:	b0 93 73 04 	sts	0x0473, r27
}
    3952:	08 95       	ret

00003954 <initAdc>:

#include "adc.h"


void initAdc(void) {
    3954:	cf 93       	push	r28
    3956:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    3958:	ea e7       	ldi	r30, 0x7A	; 122
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	10 82       	st	Z, r1
	ADCSRB = 0;
    395e:	ab e7       	ldi	r26, 0x7B	; 123
    3960:	b0 e0       	ldi	r27, 0x00	; 0
    3962:	1c 92       	st	X, r1
	ADMUX = 0;
    3964:	cc e7       	ldi	r28, 0x7C	; 124
    3966:	d0 e0       	ldi	r29, 0x00	; 0
    3968:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    396a:	80 81       	ld	r24, Z
    396c:	86 60       	ori	r24, 0x06	; 6
    396e:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3970:	88 81       	ld	r24, Y
    3972:	80 64       	ori	r24, 0x40	; 64
    3974:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    3976:	80 81       	ld	r24, Z
    3978:	80 62       	ori	r24, 0x20	; 32
    397a:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    397c:	8c 91       	ld	r24, X
    397e:	88 7f       	andi	r24, 0xF8	; 248
    3980:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    3982:	80 81       	ld	r24, Z
    3984:	88 60       	ori	r24, 0x08	; 8
    3986:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3988:	80 81       	ld	r24, Z
    398a:	80 68       	ori	r24, 0x80	; 128
    398c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    398e:	80 81       	ld	r24, Z
    3990:	80 64       	ori	r24, 0x40	; 64
    3992:	80 83       	st	Z, r24

}
    3994:	df 91       	pop	r29
    3996:	cf 91       	pop	r28
    3998:	08 95       	ret

0000399a <__vector_29>:

ISR(ADC_vect) {
    399a:	1f 92       	push	r1
    399c:	0f 92       	push	r0
    399e:	0f b6       	in	r0, 0x3f	; 63
    39a0:	0f 92       	push	r0
    39a2:	0b b6       	in	r0, 0x3b	; 59
    39a4:	0f 92       	push	r0
    39a6:	11 24       	eor	r1, r1
    39a8:	2f 93       	push	r18
    39aa:	3f 93       	push	r19
    39ac:	4f 93       	push	r20
    39ae:	5f 93       	push	r21
    39b0:	6f 93       	push	r22
    39b2:	8f 93       	push	r24
    39b4:	9f 93       	push	r25
    39b6:	af 93       	push	r26
    39b8:	bf 93       	push	r27
    39ba:	ef 93       	push	r30
    39bc:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    39be:	80 91 44 04 	lds	r24, 0x0444
    39c2:	90 91 45 04 	lds	r25, 0x0445
    39c6:	a0 91 46 04 	lds	r26, 0x0446
    39ca:	b0 91 47 04 	lds	r27, 0x0447
    39ce:	01 96       	adiw	r24, 0x01	; 1
    39d0:	a1 1d       	adc	r26, r1
    39d2:	b1 1d       	adc	r27, r1
    39d4:	80 93 44 04 	sts	0x0444, r24
    39d8:	90 93 45 04 	sts	0x0445, r25
    39dc:	a0 93 46 04 	sts	0x0446, r26
    39e0:	b0 93 47 04 	sts	0x0447, r27
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    39e4:	20 91 78 00 	lds	r18, 0x0078
    39e8:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    39ea:	40 91 79 00 	lds	r20, 0x0079
    39ee:	94 2f       	mov	r25, r20
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	28 2b       	or	r18, r24
    39f4:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    39f6:	80 91 b7 02 	lds	r24, 0x02B7
    39fa:	82 30       	cpi	r24, 0x02	; 2
    39fc:	09 f4       	brne	.+2      	; 0x3a00 <__vector_29+0x66>
    39fe:	b2 c1       	rjmp	.+868    	; 0x3d64 <__vector_29+0x3ca>
    3a00:	83 30       	cpi	r24, 0x03	; 3
    3a02:	08 f4       	brcc	.+2      	; 0x3a06 <__vector_29+0x6c>
    3a04:	45 c0       	rjmp	.+138    	; 0x3a90 <__vector_29+0xf6>
    3a06:	83 30       	cpi	r24, 0x03	; 3
    3a08:	09 f4       	brne	.+2      	; 0x3a0c <__vector_29+0x72>
    3a0a:	d5 c1       	rjmp	.+938    	; 0x3db6 <__vector_29+0x41c>
    3a0c:	84 30       	cpi	r24, 0x04	; 4
    3a0e:	09 f4       	brne	.+2      	; 0x3a12 <__vector_29+0x78>
    3a10:	68 c1       	rjmp	.+720    	; 0x3ce2 <__vector_29+0x348>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3a12:	80 91 b8 02 	lds	r24, 0x02B8
    3a16:	82 30       	cpi	r24, 0x02	; 2
    3a18:	09 f4       	brne	.+2      	; 0x3a1c <__vector_29+0x82>
    3a1a:	4f c1       	rjmp	.+670    	; 0x3cba <__vector_29+0x320>
    3a1c:	83 30       	cpi	r24, 0x03	; 3
    3a1e:	08 f0       	brcs	.+2      	; 0x3a22 <__vector_29+0x88>
    3a20:	cd c0       	rjmp	.+410    	; 0x3bbc <__vector_29+0x222>
    3a22:	88 23       	and	r24, r24
    3a24:	09 f0       	breq	.+2      	; 0x3a28 <__vector_29+0x8e>
    3a26:	24 c1       	rjmp	.+584    	; 0x3c70 <__vector_29+0x2d6>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    3a28:	80 91 22 02 	lds	r24, 0x0222
    3a2c:	86 95       	lsr	r24
    3a2e:	80 93 21 02 	sts	0x0221, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    3a32:	80 91 b9 02 	lds	r24, 0x02B9
    3a36:	88 23       	and	r24, r24
    3a38:	09 f0       	breq	.+2      	; 0x3a3c <__vector_29+0xa2>
    3a3a:	ed c1       	rjmp	.+986    	; 0x3e16 <__vector_29+0x47c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	80 93 b7 02 	sts	0x02B7, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	80 93 b8 02 	sts	0x02B8, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    3a48:	90 91 21 02 	lds	r25, 0x0221
    3a4c:	98 30       	cpi	r25, 0x08	; 8
    3a4e:	08 f0       	brcs	.+2      	; 0x3a52 <__vector_29+0xb8>
    3a50:	ed c0       	rjmp	.+474    	; 0x3c2c <__vector_29+0x292>
		ADCSRB &= ~(1 << MUX5);
    3a52:	90 91 7b 00 	lds	r25, 0x007B
    3a56:	97 7f       	andi	r25, 0xF7	; 247
    3a58:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    3a5c:	90 91 21 02 	lds	r25, 0x0221
    3a60:	90 5c       	subi	r25, 0xC0	; 192
    3a62:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3a66:	82 30       	cpi	r24, 0x02	; 2
    3a68:	09 f4       	brne	.+2      	; 0x3a6c <__vector_29+0xd2>
    3a6a:	ed c0       	rjmp	.+474    	; 0x3c46 <__vector_29+0x2ac>

	}

	//LED_BLUE_OFF;

}
    3a6c:	ff 91       	pop	r31
    3a6e:	ef 91       	pop	r30
    3a70:	bf 91       	pop	r27
    3a72:	af 91       	pop	r26
    3a74:	9f 91       	pop	r25
    3a76:	8f 91       	pop	r24
    3a78:	6f 91       	pop	r22
    3a7a:	5f 91       	pop	r21
    3a7c:	4f 91       	pop	r20
    3a7e:	3f 91       	pop	r19
    3a80:	2f 91       	pop	r18
    3a82:	0f 90       	pop	r0
    3a84:	0b be       	out	0x3b, r0	; 59
    3a86:	0f 90       	pop	r0
    3a88:	0f be       	out	0x3f, r0	; 63
    3a8a:	0f 90       	pop	r0
    3a8c:	1f 90       	pop	r1
    3a8e:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3a90:	88 23       	and	r24, r24
    3a92:	09 f0       	breq	.+2      	; 0x3a96 <__vector_29+0xfc>
    3a94:	fe c0       	rjmp	.+508    	; 0x3c92 <__vector_29+0x2f8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3a96:	60 91 22 02 	lds	r22, 0x0222
    3a9a:	6e 30       	cpi	r22, 0x0E	; 14
    3a9c:	09 f4       	brne	.+2      	; 0x3aa0 <__vector_29+0x106>
    3a9e:	dc c1       	rjmp	.+952    	; 0x3e58 <__vector_29+0x4be>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    3aa0:	46 2f       	mov	r20, r22
    3aa2:	50 e0       	ldi	r21, 0x00	; 0
    3aa4:	fa 01       	movw	r30, r20
    3aa6:	ee 0f       	add	r30, r30
    3aa8:	ff 1f       	adc	r31, r31
    3aaa:	e9 5d       	subi	r30, 0xD9	; 217
    3aac:	fd 4f       	sbci	r31, 0xFD	; 253
    3aae:	31 83       	std	Z+1, r19	; 0x01
    3ab0:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    3ab2:	40 ff       	sbrs	r20, 0
    3ab4:	77 c0       	rjmp	.+238    	; 0x3ba4 <__vector_29+0x20a>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    3ab6:	fa 01       	movw	r30, r20
    3ab8:	ee 0f       	add	r30, r30
    3aba:	ff 1f       	adc	r31, r31
    3abc:	eb 5d       	subi	r30, 0xDB	; 219
    3abe:	fd 4f       	sbci	r31, 0xFD	; 253
    3ac0:	80 81       	ld	r24, Z
    3ac2:	91 81       	ldd	r25, Z+1	; 0x01
    3ac4:	fa 01       	movw	r30, r20
    3ac6:	ee 0f       	add	r30, r30
    3ac8:	ff 1f       	adc	r31, r31
    3aca:	e9 5d       	subi	r30, 0xD9	; 217
    3acc:	fd 4f       	sbci	r31, 0xFD	; 253
    3ace:	40 81       	ld	r20, Z
    3ad0:	51 81       	ldd	r21, Z+1	; 0x01
    3ad2:	26 2f       	mov	r18, r22
    3ad4:	26 95       	lsr	r18
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	84 1b       	sub	r24, r20
    3ada:	95 0b       	sbc	r25, r21
    3adc:	22 0f       	add	r18, r18
    3ade:	33 1f       	adc	r19, r19
    3ae0:	f9 01       	movw	r30, r18
    3ae2:	e1 59       	subi	r30, 0x91	; 145
    3ae4:	fd 4f       	sbci	r31, 0xFD	; 253
    3ae6:	40 81       	ld	r20, Z
    3ae8:	51 81       	ldd	r21, Z+1	; 0x01
    3aea:	84 1b       	sub	r24, r20
    3aec:	95 0b       	sbc	r25, r21
    3aee:	f9 01       	movw	r30, r18
    3af0:	e9 5a       	subi	r30, 0xA9	; 169
    3af2:	fd 4f       	sbci	r31, 0xFD	; 253
    3af4:	91 83       	std	Z+1, r25	; 0x01
    3af6:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    3af8:	97 fd       	sbrc	r25, 7
    3afa:	c9 c1       	rjmp	.+914    	; 0x3e8e <__vector_29+0x4f4>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    3afc:	44 e0       	ldi	r20, 0x04	; 4
    3afe:	81 30       	cpi	r24, 0x01	; 1
    3b00:	94 07       	cpc	r25, r20
    3b02:	24 f0       	brlt	.+8      	; 0x3b0c <__vector_29+0x172>
					proximityResult[currentProx>>1] = 1024;
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	94 e0       	ldi	r25, 0x04	; 4
    3b08:	91 83       	std	Z+1, r25	; 0x01
    3b0a:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    3b0c:	60 31       	cpi	r22, 0x10	; 16
    3b0e:	48 f4       	brcc	.+18     	; 0x3b22 <__vector_29+0x188>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    3b10:	8c 33       	cpi	r24, 0x3C	; 60
    3b12:	91 05       	cpc	r25, r1
    3b14:	0c f0       	brlt	.+2      	; 0x3b18 <__vector_29+0x17e>
    3b16:	c0 c1       	rjmp	.+896    	; 0x3e98 <__vector_29+0x4fe>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    3b18:	21 54       	subi	r18, 0x41	; 65
    3b1a:	3d 4f       	sbci	r19, 0xFD	; 253
    3b1c:	f9 01       	movw	r30, r18
    3b1e:	91 83       	std	Z+1, r25	; 0x01
    3b20:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    3b22:	80 91 62 04 	lds	r24, 0x0462
    3b26:	88 23       	and	r24, r24
    3b28:	09 f4       	brne	.+2      	; 0x3b2c <__vector_29+0x192>
    3b2a:	81 c1       	rjmp	.+770    	; 0x3e2e <__vector_29+0x494>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3b2c:	80 91 67 02 	lds	r24, 0x0267
    3b30:	90 91 68 02 	lds	r25, 0x0268
    3b34:	f1 e0       	ldi	r31, 0x01	; 1
    3b36:	84 3a       	cpi	r24, 0xA4	; 164
    3b38:	9f 07       	cpc	r25, r31
    3b3a:	cc f0       	brlt	.+50     	; 0x3b6e <__vector_29+0x1d4>
    3b3c:	80 91 69 02 	lds	r24, 0x0269
    3b40:	90 91 6a 02 	lds	r25, 0x026A
    3b44:	21 e0       	ldi	r18, 0x01	; 1
    3b46:	84 3a       	cpi	r24, 0xA4	; 164
    3b48:	92 07       	cpc	r25, r18
    3b4a:	8c f0       	brlt	.+34     	; 0x3b6e <__vector_29+0x1d4>
    3b4c:	80 91 6b 02 	lds	r24, 0x026B
    3b50:	90 91 6c 02 	lds	r25, 0x026C
    3b54:	41 e0       	ldi	r20, 0x01	; 1
    3b56:	84 3a       	cpi	r24, 0xA4	; 164
    3b58:	94 07       	cpc	r25, r20
    3b5a:	4c f0       	brlt	.+18     	; 0x3b6e <__vector_29+0x1d4>
    3b5c:	80 91 6d 02 	lds	r24, 0x026D
    3b60:	90 91 6e 02 	lds	r25, 0x026E
    3b64:	e1 e0       	ldi	r30, 0x01	; 1
    3b66:	84 3a       	cpi	r24, 0xA4	; 164
    3b68:	9e 07       	cpc	r25, r30
    3b6a:	0c f0       	brlt	.+2      	; 0x3b6e <__vector_29+0x1d4>
    3b6c:	60 c1       	rjmp	.+704    	; 0x3e2e <__vector_29+0x494>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	80 93 63 04 	sts	0x0463, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    3b74:	10 92 f6 02 	sts	0x02F6, r1
    3b78:	10 92 f5 02 	sts	0x02F5, r1
						OCR4A = 0;
    3b7c:	10 92 a9 00 	sts	0x00A9, r1
    3b80:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    3b84:	10 92 ab 00 	sts	0x00AB, r1
    3b88:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    3b8c:	10 92 f4 02 	sts	0x02F4, r1
    3b90:	10 92 f3 02 	sts	0x02F3, r1
						OCR3A = 0;
    3b94:	10 92 99 00 	sts	0x0099, r1
    3b98:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    3b9c:	10 92 9b 00 	sts	0x009B, r1
    3ba0:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    3ba4:	6f 5f       	subi	r22, 0xFF	; 255
    3ba6:	60 93 22 02 	sts	0x0222, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    3baa:	68 31       	cpi	r22, 0x18	; 24
    3bac:	08 f4       	brcc	.+2      	; 0x3bb0 <__vector_29+0x216>
    3bae:	31 cf       	rjmp	.-414    	; 0x3a12 <__vector_29+0x78>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    3bb0:	10 92 22 02 	sts	0x0222, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	80 93 be 02 	sts	0x02BE, r24
    3bba:	2b cf       	rjmp	.-426    	; 0x3a12 <__vector_29+0x78>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3bbc:	83 30       	cpi	r24, 0x03	; 3
    3bbe:	09 f4       	brne	.+2      	; 0x3bc2 <__vector_29+0x228>
    3bc0:	bd c0       	rjmp	.+378    	; 0x3d3c <__vector_29+0x3a2>
    3bc2:	84 30       	cpi	r24, 0x04	; 4
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <__vector_29+0x22e>
    3bc6:	40 cf       	rjmp	.-384    	; 0x3a48 <__vector_29+0xae>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    3bc8:	90 91 24 02 	lds	r25, 0x0224
    3bcc:	90 93 21 02 	sts	0x0221, r25
			rightChannelPhase = rightMotorPhase;
    3bd0:	90 91 25 02 	lds	r25, 0x0225
    3bd4:	90 93 b9 02 	sts	0x02B9, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    3bd8:	90 91 ba 02 	lds	r25, 0x02BA
    3bdc:	99 23       	and	r25, r25
    3bde:	09 f0       	breq	.+2      	; 0x3be2 <__vector_29+0x248>
    3be0:	14 c1       	rjmp	.+552    	; 0x3e0a <__vector_29+0x470>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3be2:	83 e0       	ldi	r24, 0x03	; 3
    3be4:	80 93 b7 02 	sts	0x02B7, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    3be8:	10 92 b8 02 	sts	0x02B8, r1

			if(currentProx==14 && measBattery==1) {
    3bec:	60 91 22 02 	lds	r22, 0x0222
    3bf0:	6e 30       	cpi	r22, 0x0E	; 14
    3bf2:	09 f4       	brne	.+2      	; 0x3bf6 <__vector_29+0x25c>
    3bf4:	2b c1       	rjmp	.+598    	; 0x3e4c <__vector_29+0x4b2>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    3bf6:	86 2f       	mov	r24, r22
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	60 ff       	sbrs	r22, 0
    3bfc:	fd c0       	rjmp	.+506    	; 0x3df8 <__vector_29+0x45e>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    3bfe:	60 31       	cpi	r22, 0x10	; 16
    3c00:	08 f4       	brcc	.+2      	; 0x3c04 <__vector_29+0x26a>
    3c02:	18 c1       	rjmp	.+560    	; 0x3e34 <__vector_29+0x49a>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    3c04:	20 91 4b 04 	lds	r18, 0x044B
    3c08:	22 23       	and	r18, r18
    3c0a:	09 f0       	breq	.+2      	; 0x3c0e <__vector_29+0x274>
    3c0c:	e1 c0       	rjmp	.+450    	; 0x3dd0 <__vector_29+0x436>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    3c0e:	40 97       	sbiw	r24, 0x10	; 16
    3c10:	95 95       	asr	r25
    3c12:	87 95       	ror	r24
    3c14:	21 e0       	ldi	r18, 0x01	; 1
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	02 c0       	rjmp	.+4      	; 0x3c1e <__vector_29+0x284>
    3c1a:	22 0f       	add	r18, r18
    3c1c:	33 1f       	adc	r19, r19
    3c1e:	8a 95       	dec	r24
    3c20:	e2 f7       	brpl	.-8      	; 0x3c1a <__vector_29+0x280>
    3c22:	20 93 05 01 	sts	0x0105, r18
    3c26:	80 91 b8 02 	lds	r24, 0x02B8
    3c2a:	0e cf       	rjmp	.-484    	; 0x3a48 <__vector_29+0xae>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    3c2c:	90 91 7b 00 	lds	r25, 0x007B
    3c30:	98 60       	ori	r25, 0x08	; 8
    3c32:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    3c36:	90 91 21 02 	lds	r25, 0x0221
    3c3a:	98 5c       	subi	r25, 0xC8	; 200
    3c3c:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3c40:	82 30       	cpi	r24, 0x02	; 2
    3c42:	09 f0       	breq	.+2      	; 0x3c46 <__vector_29+0x2ac>
    3c44:	13 cf       	rjmp	.-474    	; 0x3a6c <__vector_29+0xd2>

		if(hardwareRevision == HW_REV_3_0) {
    3c46:	20 91 4b 04 	lds	r18, 0x044B
    3c4a:	22 23       	and	r18, r18
    3c4c:	51 f0       	breq	.+20     	; 0x3c62 <__vector_29+0x2c8>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    3c4e:	21 30       	cpi	r18, 0x01	; 1
    3c50:	19 f0       	breq	.+6      	; 0x3c58 <__vector_29+0x2be>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    3c52:	22 30       	cpi	r18, 0x02	; 2
    3c54:	09 f0       	breq	.+2      	; 0x3c58 <__vector_29+0x2be>
    3c56:	0a cf       	rjmp	.-492    	; 0x3a6c <__vector_29+0xd2>
			PORTJ = 0xFF;
    3c58:	8f ef       	ldi	r24, 0xFF	; 255
    3c5a:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    3c5e:	12 b8       	out	0x02, r1	; 2
    3c60:	05 cf       	rjmp	.-502    	; 0x3a6c <__vector_29+0xd2>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    3c62:	80 91 05 01 	lds	r24, 0x0105
    3c66:	80 7f       	andi	r24, 0xF0	; 240
    3c68:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    3c6c:	12 b8       	out	0x02, r1	; 2
    3c6e:	fe ce       	rjmp	.-516    	; 0x3a6c <__vector_29+0xd2>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3c70:	81 30       	cpi	r24, 0x01	; 1
    3c72:	09 f0       	breq	.+2      	; 0x3c76 <__vector_29+0x2dc>
    3c74:	e9 ce       	rjmp	.-558    	; 0x3a48 <__vector_29+0xae>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    3c76:	80 91 23 02 	lds	r24, 0x0223
    3c7a:	80 93 21 02 	sts	0x0221, r24
			leftChannelPhase = leftMotorPhase;
    3c7e:	80 91 26 02 	lds	r24, 0x0226
    3c82:	80 93 ba 02 	sts	0x02BA, r24
			adcSaveDataTo = SAVE_TO_PROX;
    3c86:	10 92 b7 02 	sts	0x02B7, r1
			adcSamplingState = 2;
    3c8a:	82 e0       	ldi	r24, 0x02	; 2
    3c8c:	80 93 b8 02 	sts	0x02B8, r24
			break;
    3c90:	db ce       	rjmp	.-586    	; 0x3a48 <__vector_29+0xae>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3c92:	81 30       	cpi	r24, 0x01	; 1
    3c94:	09 f0       	breq	.+2      	; 0x3c98 <__vector_29+0x2fe>
    3c96:	bd ce       	rjmp	.-646    	; 0x3a12 <__vector_29+0x78>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    3c98:	80 91 e1 02 	lds	r24, 0x02E1
    3c9c:	90 91 e2 02 	lds	r25, 0x02E2
    3ca0:	82 0f       	add	r24, r18
    3ca2:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    3ca4:	96 95       	lsr	r25
    3ca6:	87 95       	ror	r24
    3ca8:	90 93 e2 02 	sts	0x02E2, r25
    3cac:	80 93 e1 02 	sts	0x02E1, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3cb0:	80 91 b8 02 	lds	r24, 0x02B8
    3cb4:	82 30       	cpi	r24, 0x02	; 2
    3cb6:	09 f0       	breq	.+2      	; 0x3cba <__vector_29+0x320>
    3cb8:	b1 ce       	rjmp	.-670    	; 0x3a1c <__vector_29+0x82>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    3cba:	80 91 24 02 	lds	r24, 0x0224
    3cbe:	80 93 21 02 	sts	0x0221, r24
			rightChannelPhase = rightMotorPhase;
    3cc2:	80 91 25 02 	lds	r24, 0x0225
    3cc6:	80 93 b9 02 	sts	0x02B9, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3cca:	80 91 ba 02 	lds	r24, 0x02BA
    3cce:	88 23       	and	r24, r24
    3cd0:	09 f0       	breq	.+2      	; 0x3cd4 <__vector_29+0x33a>
    3cd2:	a7 c0       	rjmp	.+334    	; 0x3e22 <__vector_29+0x488>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3cd4:	83 e0       	ldi	r24, 0x03	; 3
    3cd6:	80 93 b7 02 	sts	0x02B7, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3cda:	83 e0       	ldi	r24, 0x03	; 3
    3cdc:	80 93 b8 02 	sts	0x02B8, r24
			break;
    3ce0:	b3 ce       	rjmp	.-666    	; 0x3a48 <__vector_29+0xae>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    3ce2:	80 91 0a 02 	lds	r24, 0x020A
    3ce6:	88 23       	and	r24, r24
    3ce8:	09 f4       	brne	.+2      	; 0x3cec <__vector_29+0x352>
    3cea:	93 ce       	rjmp	.-730    	; 0x3a12 <__vector_29+0x78>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    3cec:	90 91 00 01 	lds	r25, 0x0100
    3cf0:	93 fd       	sbrc	r25, 3
    3cf2:	8f ce       	rjmp	.-738    	; 0x3a12 <__vector_29+0x78>
    3cf4:	90 91 00 01 	lds	r25, 0x0100
    3cf8:	94 fd       	sbrc	r25, 4
    3cfa:	8b ce       	rjmp	.-746    	; 0x3a12 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    3cfc:	48 2f       	mov	r20, r24
    3cfe:	4f 5f       	subi	r20, 0xFF	; 255
    3d00:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    3d04:	45 30       	cpi	r20, 0x05	; 5
    3d06:	08 f4       	brcc	.+2      	; 0x3d0a <__vector_29+0x370>
    3d08:	84 ce       	rjmp	.-760    	; 0x3a12 <__vector_29+0x78>
					if(pwm_left != 0) {
    3d0a:	80 91 f5 02 	lds	r24, 0x02F5
    3d0e:	90 91 f6 02 	lds	r25, 0x02F6
    3d12:	00 97       	sbiw	r24, 0x00	; 0
    3d14:	51 f0       	breq	.+20     	; 0x3d2a <__vector_29+0x390>
						left_vel_sum += value;
    3d16:	80 91 eb 02 	lds	r24, 0x02EB
    3d1a:	90 91 ec 02 	lds	r25, 0x02EC
    3d1e:	82 0f       	add	r24, r18
    3d20:	93 1f       	adc	r25, r19
    3d22:	90 93 ec 02 	sts	0x02EC, r25
    3d26:	80 93 eb 02 	sts	0x02EB, r24
					}
					if(firstSampleLeft==8) {
    3d2a:	48 30       	cpi	r20, 0x08	; 8
    3d2c:	09 f0       	breq	.+2      	; 0x3d30 <__vector_29+0x396>
    3d2e:	71 ce       	rjmp	.-798    	; 0x3a12 <__vector_29+0x78>
						firstSampleLeft = 0;
    3d30:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	80 93 07 02 	sts	0x0207, r24
    3d3a:	6b ce       	rjmp	.-810    	; 0x3a12 <__vector_29+0x78>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    3d3c:	80 91 23 02 	lds	r24, 0x0223
    3d40:	80 93 21 02 	sts	0x0221, r24
			leftChannelPhase = leftMotorPhase;
    3d44:	80 91 26 02 	lds	r24, 0x0226
    3d48:	80 93 ba 02 	sts	0x02BA, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    3d4c:	80 91 b9 02 	lds	r24, 0x02B9
    3d50:	88 23       	and	r24, r24
    3d52:	09 f0       	breq	.+2      	; 0x3d56 <__vector_29+0x3bc>
    3d54:	54 c0       	rjmp	.+168    	; 0x3dfe <__vector_29+0x464>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3d56:	81 e0       	ldi	r24, 0x01	; 1
    3d58:	80 93 b7 02 	sts	0x02B7, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    3d5c:	84 e0       	ldi	r24, 0x04	; 4
    3d5e:	80 93 b8 02 	sts	0x02B8, r24
			break;
    3d62:	72 ce       	rjmp	.-796    	; 0x3a48 <__vector_29+0xae>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    3d64:	80 91 09 02 	lds	r24, 0x0209
    3d68:	88 23       	and	r24, r24
    3d6a:	09 f4       	brne	.+2      	; 0x3d6e <__vector_29+0x3d4>
    3d6c:	52 ce       	rjmp	.-860    	; 0x3a12 <__vector_29+0x78>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    3d6e:	63 99       	sbic	0x0c, 3	; 12
    3d70:	50 ce       	rjmp	.-864    	; 0x3a12 <__vector_29+0x78>
    3d72:	64 99       	sbic	0x0c, 4	; 12
    3d74:	4e ce       	rjmp	.-868    	; 0x3a12 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    3d76:	48 2f       	mov	r20, r24
    3d78:	4f 5f       	subi	r20, 0xFF	; 255
    3d7a:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    3d7e:	45 30       	cpi	r20, 0x05	; 5
    3d80:	08 f4       	brcc	.+2      	; 0x3d84 <__vector_29+0x3ea>
    3d82:	47 ce       	rjmp	.-882    	; 0x3a12 <__vector_29+0x78>
					if(pwm_right != 0) {
    3d84:	80 91 f3 02 	lds	r24, 0x02F3
    3d88:	90 91 f4 02 	lds	r25, 0x02F4
    3d8c:	00 97       	sbiw	r24, 0x00	; 0
    3d8e:	51 f0       	breq	.+20     	; 0x3da4 <__vector_29+0x40a>
						right_vel_sum += value;
    3d90:	80 91 ed 02 	lds	r24, 0x02ED
    3d94:	90 91 ee 02 	lds	r25, 0x02EE
    3d98:	82 0f       	add	r24, r18
    3d9a:	93 1f       	adc	r25, r19
    3d9c:	90 93 ee 02 	sts	0x02EE, r25
    3da0:	80 93 ed 02 	sts	0x02ED, r24
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    3da4:	48 30       	cpi	r20, 0x08	; 8
    3da6:	09 f0       	breq	.+2      	; 0x3daa <__vector_29+0x410>
    3da8:	34 ce       	rjmp	.-920    	; 0x3a12 <__vector_29+0x78>
						firstSampleRight = 0;
    3daa:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	80 93 08 02 	sts	0x0208, r24
    3db4:	2e ce       	rjmp	.-932    	; 0x3a12 <__vector_29+0x78>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    3db6:	80 91 df 02 	lds	r24, 0x02DF
    3dba:	90 91 e0 02 	lds	r25, 0x02E0
    3dbe:	82 0f       	add	r24, r18
    3dc0:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    3dc2:	96 95       	lsr	r25
    3dc4:	87 95       	ror	r24
    3dc6:	90 93 e0 02 	sts	0x02E0, r25
    3dca:	80 93 df 02 	sts	0x02DF, r24
			break;
    3dce:	21 ce       	rjmp	.-958    	; 0x3a12 <__vector_29+0x78>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    3dd0:	21 30       	cpi	r18, 0x01	; 1
    3dd2:	11 f0       	breq	.+4      	; 0x3dd8 <__vector_29+0x43e>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    3dd4:	22 30       	cpi	r18, 0x02	; 2
    3dd6:	81 f4       	brne	.+32     	; 0x3df8 <__vector_29+0x45e>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    3dd8:	40 91 05 01 	lds	r20, 0x0105
    3ddc:	40 97       	sbiw	r24, 0x10	; 16
    3dde:	95 95       	asr	r25
    3de0:	87 95       	ror	r24
    3de2:	21 e0       	ldi	r18, 0x01	; 1
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	02 c0       	rjmp	.+4      	; 0x3dec <__vector_29+0x452>
    3de8:	22 0f       	add	r18, r18
    3dea:	33 1f       	adc	r19, r19
    3dec:	8a 95       	dec	r24
    3dee:	e2 f7       	brpl	.-8      	; 0x3de8 <__vector_29+0x44e>
    3df0:	20 95       	com	r18
    3df2:	24 23       	and	r18, r20
    3df4:	20 93 05 01 	sts	0x0105, r18
    3df8:	80 91 b8 02 	lds	r24, 0x02B8
    3dfc:	25 ce       	rjmp	.-950    	; 0x3a48 <__vector_29+0xae>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3dfe:	81 30       	cpi	r24, 0x01	; 1
    3e00:	d1 f1       	breq	.+116    	; 0x3e76 <__vector_29+0x4dc>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3e02:	85 e0       	ldi	r24, 0x05	; 5
    3e04:	80 93 b7 02 	sts	0x02B7, r24
    3e08:	a9 cf       	rjmp	.-174    	; 0x3d5c <__vector_29+0x3c2>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3e0a:	91 30       	cpi	r25, 0x01	; 1
    3e0c:	09 f0       	breq	.+2      	; 0x3e10 <__vector_29+0x476>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3e0e:	85 e0       	ldi	r24, 0x05	; 5
    3e10:	80 93 b7 02 	sts	0x02B7, r24
    3e14:	e9 ce       	rjmp	.-558    	; 0x3be8 <__vector_29+0x24e>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3e16:	81 30       	cpi	r24, 0x01	; 1
    3e18:	b1 f1       	breq	.+108    	; 0x3e86 <__vector_29+0x4ec>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3e1a:	85 e0       	ldi	r24, 0x05	; 5
    3e1c:	80 93 b7 02 	sts	0x02B7, r24
    3e20:	10 ce       	rjmp	.-992    	; 0x3a42 <__vector_29+0xa8>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3e22:	81 30       	cpi	r24, 0x01	; 1
    3e24:	61 f1       	breq	.+88     	; 0x3e7e <__vector_29+0x4e4>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3e26:	85 e0       	ldi	r24, 0x05	; 5
    3e28:	80 93 b7 02 	sts	0x02B7, r24
    3e2c:	56 cf       	rjmp	.-340    	; 0x3cda <__vector_29+0x340>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    3e2e:	10 92 63 04 	sts	0x0463, r1
    3e32:	b8 ce       	rjmp	.-656    	; 0x3ba4 <__vector_29+0x20a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    3e34:	66 95       	lsr	r22
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	02 c0       	rjmp	.+4      	; 0x3e40 <__vector_29+0x4a6>
    3e3c:	88 0f       	add	r24, r24
    3e3e:	99 1f       	adc	r25, r25
    3e40:	6a 95       	dec	r22
    3e42:	e2 f7       	brpl	.-8      	; 0x3e3c <__vector_29+0x4a2>
    3e44:	82 b9       	out	0x02, r24	; 2
    3e46:	80 91 b8 02 	lds	r24, 0x02B8
    3e4a:	fe cd       	rjmp	.-1028   	; 0x3a48 <__vector_29+0xae>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    3e4c:	80 91 bd 02 	lds	r24, 0x02BD
    3e50:	81 30       	cpi	r24, 0x01	; 1
    3e52:	a1 f1       	breq	.+104    	; 0x3ebc <__vector_29+0x522>
    3e54:	80 e0       	ldi	r24, 0x00	; 0
    3e56:	f8 cd       	rjmp	.-1040   	; 0x3a48 <__vector_29+0xae>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3e58:	80 91 bd 02 	lds	r24, 0x02BD
    3e5c:	82 30       	cpi	r24, 0x02	; 2
    3e5e:	09 f0       	breq	.+2      	; 0x3e62 <__vector_29+0x4c8>
    3e60:	1f ce       	rjmp	.-962    	; 0x3aa0 <__vector_29+0x106>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    3e62:	30 93 bc 02 	sts	0x02BC, r19
    3e66:	20 93 bb 02 	sts	0x02BB, r18
				measBattery = 0;
    3e6a:	10 92 bd 02 	sts	0x02BD, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    3e6e:	46 98       	cbi	0x08, 6	; 8
    3e70:	4e e0       	ldi	r20, 0x0E	; 14
    3e72:	50 e0       	ldi	r21, 0x00	; 0
    3e74:	1e ce       	rjmp	.-964    	; 0x3ab2 <__vector_29+0x118>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3e76:	82 e0       	ldi	r24, 0x02	; 2
    3e78:	80 93 b7 02 	sts	0x02B7, r24
    3e7c:	6f cf       	rjmp	.-290    	; 0x3d5c <__vector_29+0x3c2>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    3e7e:	84 e0       	ldi	r24, 0x04	; 4
    3e80:	80 93 b7 02 	sts	0x02B7, r24
    3e84:	2a cf       	rjmp	.-428    	; 0x3cda <__vector_29+0x340>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3e86:	82 e0       	ldi	r24, 0x02	; 2
    3e88:	80 93 b7 02 	sts	0x02B7, r24
    3e8c:	da cd       	rjmp	.-1100   	; 0x3a42 <__vector_29+0xa8>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    3e8e:	11 82       	std	Z+1, r1	; 0x01
    3e90:	10 82       	st	Z, r1
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	3a ce       	rjmp	.-908    	; 0x3b0c <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    3e98:	ac 01       	movw	r20, r24
    3e9a:	44 5c       	subi	r20, 0xC4	; 196
    3e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e9e:	55 95       	asr	r21
    3ea0:	47 95       	ror	r20
    3ea2:	48 37       	cpi	r20, 0x78	; 120
    3ea4:	51 05       	cpc	r21, r1
    3ea6:	7c f4       	brge	.+30     	; 0x3ec6 <__vector_29+0x52c>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    3ea8:	21 54       	subi	r18, 0x41	; 65
    3eaa:	3d 4f       	sbci	r19, 0xFD	; 253
    3eac:	cc 97       	sbiw	r24, 0x3c	; 60
    3eae:	95 95       	asr	r25
    3eb0:	87 95       	ror	r24
    3eb2:	cc 96       	adiw	r24, 0x3c	; 60
    3eb4:	f9 01       	movw	r30, r18
    3eb6:	91 83       	std	Z+1, r25	; 0x01
    3eb8:	80 83       	st	Z, r24
    3eba:	33 ce       	rjmp	.-922    	; 0x3b22 <__vector_29+0x188>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    3ebc:	82 e0       	ldi	r24, 0x02	; 2
    3ebe:	80 93 bd 02 	sts	0x02BD, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    3ec2:	46 9a       	sbi	0x08, 6	; 8
    3ec4:	98 ce       	rjmp	.-720    	; 0x3bf6 <__vector_29+0x25c>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    3ec6:	ac 01       	movw	r20, r24
    3ec8:	44 5d       	subi	r20, 0xD4	; 212
    3eca:	5e 4f       	sbci	r21, 0xFE	; 254
    3ecc:	55 95       	asr	r21
    3ece:	47 95       	ror	r20
    3ed0:	55 95       	asr	r21
    3ed2:	47 95       	ror	r20
    3ed4:	44 3b       	cpi	r20, 0xB4	; 180
    3ed6:	51 05       	cpc	r21, r1
    3ed8:	74 f4       	brge	.+28     	; 0x3ef6 <__vector_29+0x55c>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    3eda:	21 54       	subi	r18, 0x41	; 65
    3edc:	3d 4f       	sbci	r19, 0xFD	; 253
    3ede:	84 5b       	subi	r24, 0xB4	; 180
    3ee0:	90 40       	sbci	r25, 0x00	; 0
    3ee2:	95 95       	asr	r25
    3ee4:	87 95       	ror	r24
    3ee6:	95 95       	asr	r25
    3ee8:	87 95       	ror	r24
    3eea:	88 58       	subi	r24, 0x88	; 136
    3eec:	9f 4f       	sbci	r25, 0xFF	; 255
    3eee:	f9 01       	movw	r30, r18
    3ef0:	91 83       	std	Z+1, r25	; 0x01
    3ef2:	80 83       	st	Z, r24
    3ef4:	16 ce       	rjmp	.-980    	; 0x3b22 <__vector_29+0x188>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    3ef6:	21 54       	subi	r18, 0x41	; 65
    3ef8:	3d 4f       	sbci	r19, 0xFD	; 253
    3efa:	84 5a       	subi	r24, 0xA4	; 164
    3efc:	91 40       	sbci	r25, 0x01	; 1
    3efe:	95 95       	asr	r25
    3f00:	87 95       	ror	r24
    3f02:	95 95       	asr	r25
    3f04:	87 95       	ror	r24
    3f06:	95 95       	asr	r25
    3f08:	87 95       	ror	r24
    3f0a:	8c 54       	subi	r24, 0x4C	; 76
    3f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0e:	f9 01       	movw	r30, r18
    3f10:	91 83       	std	Z+1, r25	; 0x01
    3f12:	80 83       	st	Z, r24
    3f14:	06 ce       	rjmp	.-1012   	; 0x3b22 <__vector_29+0x188>

00003f16 <initMotors>:

#include "motors.h"

void initMotors() {
    3f16:	0f 93       	push	r16
    3f18:	1f 93       	push	r17
    3f1a:	cf 93       	push	r28
    3f1c:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    3f1e:	e0 e9       	ldi	r30, 0x90	; 144
    3f20:	f0 e0       	ldi	r31, 0x00	; 0
    3f22:	10 82       	st	Z, r1
	TCCR3B = 0;
    3f24:	41 e9       	ldi	r20, 0x91	; 145
    3f26:	50 e0       	ldi	r21, 0x00	; 0
    3f28:	da 01       	movw	r26, r20
    3f2a:	1c 92       	st	X, r1
	TIMSK3 = 0;
    3f2c:	21 e7       	ldi	r18, 0x71	; 113
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	e9 01       	movw	r28, r18
    3f32:	18 82       	st	Y, r1
	TCCR4A = 0;
    3f34:	a0 ea       	ldi	r26, 0xA0	; 160
    3f36:	b0 e0       	ldi	r27, 0x00	; 0
    3f38:	1c 92       	st	X, r1
	TCCR4B = 0;
    3f3a:	81 ea       	ldi	r24, 0xA1	; 161
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	ec 01       	movw	r28, r24
    3f40:	18 82       	st	Y, r1
	TIMSK4 = 0;
    3f42:	02 e7       	ldi	r16, 0x72	; 114
    3f44:	10 e0       	ldi	r17, 0x00	; 0
    3f46:	e8 01       	movw	r28, r16
    3f48:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    3f4a:	60 81       	ld	r22, Z
    3f4c:	63 68       	ori	r22, 0x83	; 131
    3f4e:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    3f50:	60 81       	ld	r22, Z
    3f52:	63 60       	ori	r22, 0x03	; 3
    3f54:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3f56:	ea 01       	movw	r28, r20
    3f58:	68 81       	ld	r22, Y
    3f5a:	6b 60       	ori	r22, 0x0B	; 11
    3f5c:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    3f5e:	40 91 f3 02 	lds	r20, 0x02F3
    3f62:	50 91 f4 02 	lds	r21, 0x02F4
    3f66:	50 93 99 00 	sts	0x0099, r21
    3f6a:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    3f6e:	10 92 9b 00 	sts	0x009B, r1
    3f72:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    3f76:	e9 01       	movw	r28, r18
    3f78:	48 81       	ld	r20, Y
    3f7a:	41 60       	ori	r20, 0x01	; 1
    3f7c:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3f7e:	20 81       	ld	r18, Z
    3f80:	2f 75       	andi	r18, 0x5F	; 95
    3f82:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3f84:	2e b1       	in	r18, 0x0e	; 14
    3f86:	27 7e       	andi	r18, 0xE7	; 231
    3f88:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    3f8a:	2c 91       	ld	r18, X
    3f8c:	23 68       	ori	r18, 0x83	; 131
    3f8e:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3f90:	fc 01       	movw	r30, r24
    3f92:	20 81       	ld	r18, Z
    3f94:	2b 60       	ori	r18, 0x0B	; 11
    3f96:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    3f98:	80 91 f5 02 	lds	r24, 0x02F5
    3f9c:	90 91 f6 02 	lds	r25, 0x02F6
    3fa0:	90 93 a9 00 	sts	0x00A9, r25
    3fa4:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    3fa8:	10 92 ab 00 	sts	0x00AB, r1
    3fac:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    3fb0:	e8 01       	movw	r28, r16
    3fb2:	88 81       	ld	r24, Y
    3fb4:	81 60       	ori	r24, 0x01	; 1
    3fb6:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3fb8:	8c 91       	ld	r24, X
    3fba:	8f 75       	andi	r24, 0x5F	; 95
    3fbc:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3fbe:	e2 e0       	ldi	r30, 0x02	; 2
    3fc0:	f1 e0       	ldi	r31, 0x01	; 1
    3fc2:	80 81       	ld	r24, Z
    3fc4:	87 7e       	andi	r24, 0xE7	; 231
    3fc6:	80 83       	st	Z, r24


}
    3fc8:	df 91       	pop	r29
    3fca:	cf 91       	pop	r28
    3fcc:	1f 91       	pop	r17
    3fce:	0f 91       	pop	r16
    3fd0:	08 95       	ret

00003fd2 <cast_speed>:

signed int cast_speed(signed int vel) {
    3fd2:	28 2f       	mov	r18, r24
    3fd4:	39 2f       	mov	r19, r25
    3fd6:	8e ef       	ldi	r24, 0xFE	; 254
    3fd8:	20 30       	cpi	r18, 0x00	; 0
    3fda:	38 07       	cpc	r19, r24
    3fdc:	14 f4       	brge	.+4      	; 0x3fe2 <cast_speed+0x10>
    3fde:	20 e0       	ldi	r18, 0x00	; 0
    3fe0:	3e ef       	ldi	r19, 0xFE	; 254
    3fe2:	82 e0       	ldi	r24, 0x02	; 2
    3fe4:	21 30       	cpi	r18, 0x01	; 1
    3fe6:	38 07       	cpc	r19, r24
    3fe8:	14 f0       	brlt	.+4      	; 0x3fee <cast_speed+0x1c>
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	32 e0       	ldi	r19, 0x02	; 2
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    3fee:	c9 01       	movw	r24, r18
    3ff0:	08 95       	ret

00003ff2 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    3ff2:	80 91 07 02 	lds	r24, 0x0207
    3ff6:	88 23       	and	r24, r24
    3ff8:	c1 f1       	breq	.+112    	; 0x406a <handleMotorsWithNoController+0x78>
		last_left_vel = left_vel_sum>>2;
    3ffa:	60 91 eb 02 	lds	r22, 0x02EB
    3ffe:	70 91 ec 02 	lds	r23, 0x02EC
    4002:	76 95       	lsr	r23
    4004:	67 95       	ror	r22
    4006:	76 95       	lsr	r23
    4008:	67 95       	ror	r22
    400a:	70 93 f0 02 	sts	0x02F0, r23
    400e:	60 93 ef 02 	sts	0x02EF, r22
		compute_left_vel = 0;
    4012:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    4016:	10 92 ec 02 	sts	0x02EC, r1
    401a:	10 92 eb 02 	sts	0x02EB, r1

		if(pwm_left_desired >= 0) {
    401e:	80 91 f9 02 	lds	r24, 0x02F9
    4022:	90 91 fa 02 	lds	r25, 0x02FA
    4026:	97 fd       	sbrc	r25, 7
    4028:	e3 c0       	rjmp	.+454    	; 0x41f0 <handleMotorsWithNoController+0x1fe>
			leftMotSteps += (last_left_vel>>3);
    402a:	75 95       	asr	r23
    402c:	67 95       	ror	r22
    402e:	75 95       	asr	r23
    4030:	67 95       	ror	r22
    4032:	75 95       	asr	r23
    4034:	67 95       	ror	r22
    4036:	88 27       	eor	r24, r24
    4038:	77 fd       	sbrc	r23, 7
    403a:	80 95       	com	r24
    403c:	98 2f       	mov	r25, r24
    403e:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4042:	9b 01       	movw	r18, r22
    4044:	ac 01       	movw	r20, r24
    4046:	60 91 d3 02 	lds	r22, 0x02D3
    404a:	70 91 d4 02 	lds	r23, 0x02D4
    404e:	80 91 d5 02 	lds	r24, 0x02D5
    4052:	90 91 d6 02 	lds	r25, 0x02D6
    4056:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <__addsf3>
    405a:	60 93 d3 02 	sts	0x02D3, r22
    405e:	70 93 d4 02 	sts	0x02D4, r23
    4062:	80 93 d5 02 	sts	0x02D5, r24
    4066:	90 93 d6 02 	sts	0x02D6, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    406a:	80 91 08 02 	lds	r24, 0x0208
    406e:	88 23       	and	r24, r24
    4070:	c1 f1       	breq	.+112    	; 0x40e2 <handleMotorsWithNoController+0xf0>
		last_right_vel = right_vel_sum>>2;
    4072:	60 91 ed 02 	lds	r22, 0x02ED
    4076:	70 91 ee 02 	lds	r23, 0x02EE
    407a:	76 95       	lsr	r23
    407c:	67 95       	ror	r22
    407e:	76 95       	lsr	r23
    4080:	67 95       	ror	r22
    4082:	70 93 f2 02 	sts	0x02F2, r23
    4086:	60 93 f1 02 	sts	0x02F1, r22
		compute_right_vel = 0;
    408a:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    408e:	10 92 ee 02 	sts	0x02EE, r1
    4092:	10 92 ed 02 	sts	0x02ED, r1

		if(pwm_right_desired >= 0) {
    4096:	80 91 f7 02 	lds	r24, 0x02F7
    409a:	90 91 f8 02 	lds	r25, 0x02F8
    409e:	97 fd       	sbrc	r25, 7
    40a0:	86 c0       	rjmp	.+268    	; 0x41ae <handleMotorsWithNoController+0x1bc>
			rightMotSteps += (last_right_vel>>3);
    40a2:	75 95       	asr	r23
    40a4:	67 95       	ror	r22
    40a6:	75 95       	asr	r23
    40a8:	67 95       	ror	r22
    40aa:	75 95       	asr	r23
    40ac:	67 95       	ror	r22
    40ae:	88 27       	eor	r24, r24
    40b0:	77 fd       	sbrc	r23, 7
    40b2:	80 95       	com	r24
    40b4:	98 2f       	mov	r25, r24
    40b6:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    40ba:	9b 01       	movw	r18, r22
    40bc:	ac 01       	movw	r20, r24
    40be:	60 91 cf 02 	lds	r22, 0x02CF
    40c2:	70 91 d0 02 	lds	r23, 0x02D0
    40c6:	80 91 d1 02 	lds	r24, 0x02D1
    40ca:	90 91 d2 02 	lds	r25, 0x02D2
    40ce:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <__addsf3>
    40d2:	60 93 cf 02 	sts	0x02CF, r22
    40d6:	70 93 d0 02 	sts	0x02D0, r23
    40da:	80 93 d1 02 	sts	0x02D1, r24
    40de:	90 93 d2 02 	sts	0x02D2, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    40e2:	20 91 fb 02 	lds	r18, 0x02FB
    40e6:	30 91 fc 02 	lds	r19, 0x02FC
    40ea:	c9 01       	movw	r24, r18
    40ec:	88 0f       	add	r24, r24
    40ee:	99 1f       	adc	r25, r25
    40f0:	88 0f       	add	r24, r24
    40f2:	99 1f       	adc	r25, r25
    40f4:	82 0f       	add	r24, r18
    40f6:	93 1f       	adc	r25, r19
    40f8:	90 93 0c 03 	sts	0x030C, r25
    40fc:	80 93 0b 03 	sts	0x030B, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    4100:	40 91 fd 02 	lds	r20, 0x02FD
    4104:	50 91 fe 02 	lds	r21, 0x02FE
    4108:	9a 01       	movw	r18, r20
    410a:	22 0f       	add	r18, r18
    410c:	33 1f       	adc	r19, r19
    410e:	22 0f       	add	r18, r18
    4110:	33 1f       	adc	r19, r19
    4112:	24 0f       	add	r18, r20
    4114:	35 1f       	adc	r19, r21
    4116:	52 2f       	mov	r21, r18
    4118:	43 2f       	mov	r20, r19
    411a:	20 93 0d 03 	sts	0x030D, r18
    411e:	30 93 0e 03 	sts	0x030E, r19
	if(obstacleAvoidanceEnabled) {
    4122:	20 91 61 04 	lds	r18, 0x0461
    4126:	22 23       	and	r18, r18
    4128:	39 f5       	brne	.+78     	; 0x4178 <handleMotorsWithNoController+0x186>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    412a:	50 93 f5 02 	sts	0x02F5, r21
    412e:	40 93 f6 02 	sts	0x02F6, r20
	pwm_right = pwm_right_working;
    4132:	90 93 f4 02 	sts	0x02F4, r25
    4136:	80 93 f3 02 	sts	0x02F3, r24

	if(pwm_right > 0) {
    413a:	18 16       	cp	r1, r24
    413c:	19 06       	cpc	r1, r25
    413e:	5c f5       	brge	.+86     	; 0x4196 <handleMotorsWithNoController+0x1a4>
		OCR3A = (unsigned int)pwm_right;
    4140:	90 93 99 00 	sts	0x0099, r25
    4144:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    4148:	80 91 f5 02 	lds	r24, 0x02F5
    414c:	90 91 f6 02 	lds	r25, 0x02F6
    4150:	18 16       	cp	r1, r24
    4152:	19 06       	cpc	r1, r25
    4154:	2c f4       	brge	.+10     	; 0x4160 <handleMotorsWithNoController+0x16e>
		OCR4A = (unsigned int)pwm_left;
    4156:	90 93 a9 00 	sts	0x00A9, r25
    415a:	80 93 a8 00 	sts	0x00A8, r24
    415e:	08 95       	ret
	} else if(pwm_left < 0) {
    4160:	00 97       	sbiw	r24, 0x00	; 0
    4162:	09 f0       	breq	.+2      	; 0x4166 <handleMotorsWithNoController+0x174>
    4164:	6e c0       	rjmp	.+220    	; 0x4242 <handleMotorsWithNoController+0x250>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    4166:	10 92 a9 00 	sts	0x00A9, r1
    416a:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    416e:	10 92 ab 00 	sts	0x00AB, r1
    4172:	10 92 aa 00 	sts	0x00AA, r1
    4176:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    4178:	8d e0       	ldi	r24, 0x0D	; 13
    417a:	93 e0       	ldi	r25, 0x03	; 3
    417c:	6b e0       	ldi	r22, 0x0B	; 11
    417e:	73 e0       	ldi	r23, 0x03	; 3
    4180:	0e 94 d8 32 	call	0x65b0	; 0x65b0 <obstacleAvoidance>
    4184:	50 91 0d 03 	lds	r21, 0x030D
    4188:	40 91 0e 03 	lds	r20, 0x030E
    418c:	80 91 0b 03 	lds	r24, 0x030B
    4190:	90 91 0c 03 	lds	r25, 0x030C
    4194:	ca cf       	rjmp	.-108    	; 0x412a <handleMotorsWithNoController+0x138>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    4196:	00 97       	sbiw	r24, 0x00	; 0
    4198:	09 f0       	breq	.+2      	; 0x419c <handleMotorsWithNoController+0x1aa>
    419a:	4b c0       	rjmp	.+150    	; 0x4232 <handleMotorsWithNoController+0x240>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    419c:	10 92 99 00 	sts	0x0099, r1
    41a0:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    41a4:	10 92 9b 00 	sts	0x009B, r1
    41a8:	10 92 9a 00 	sts	0x009A, r1
    41ac:	cd cf       	rjmp	.-102    	; 0x4148 <handleMotorsWithNoController+0x156>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    41ae:	75 95       	asr	r23
    41b0:	67 95       	ror	r22
    41b2:	75 95       	asr	r23
    41b4:	67 95       	ror	r22
    41b6:	75 95       	asr	r23
    41b8:	67 95       	ror	r22
    41ba:	88 27       	eor	r24, r24
    41bc:	77 fd       	sbrc	r23, 7
    41be:	80 95       	com	r24
    41c0:	98 2f       	mov	r25, r24
    41c2:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    41c6:	9b 01       	movw	r18, r22
    41c8:	ac 01       	movw	r20, r24
    41ca:	60 91 cf 02 	lds	r22, 0x02CF
    41ce:	70 91 d0 02 	lds	r23, 0x02D0
    41d2:	80 91 d1 02 	lds	r24, 0x02D1
    41d6:	90 91 d2 02 	lds	r25, 0x02D2
    41da:	0e 94 2b 3d 	call	0x7a56	; 0x7a56 <__subsf3>
    41de:	60 93 cf 02 	sts	0x02CF, r22
    41e2:	70 93 d0 02 	sts	0x02D0, r23
    41e6:	80 93 d1 02 	sts	0x02D1, r24
    41ea:	90 93 d2 02 	sts	0x02D2, r25
    41ee:	79 cf       	rjmp	.-270    	; 0x40e2 <handleMotorsWithNoController+0xf0>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    41f0:	75 95       	asr	r23
    41f2:	67 95       	ror	r22
    41f4:	75 95       	asr	r23
    41f6:	67 95       	ror	r22
    41f8:	75 95       	asr	r23
    41fa:	67 95       	ror	r22
    41fc:	88 27       	eor	r24, r24
    41fe:	77 fd       	sbrc	r23, 7
    4200:	80 95       	com	r24
    4202:	98 2f       	mov	r25, r24
    4204:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4208:	9b 01       	movw	r18, r22
    420a:	ac 01       	movw	r20, r24
    420c:	60 91 d3 02 	lds	r22, 0x02D3
    4210:	70 91 d4 02 	lds	r23, 0x02D4
    4214:	80 91 d5 02 	lds	r24, 0x02D5
    4218:	90 91 d6 02 	lds	r25, 0x02D6
    421c:	0e 94 2b 3d 	call	0x7a56	; 0x7a56 <__subsf3>
    4220:	60 93 d3 02 	sts	0x02D3, r22
    4224:	70 93 d4 02 	sts	0x02D4, r23
    4228:	80 93 d5 02 	sts	0x02D5, r24
    422c:	90 93 d6 02 	sts	0x02D6, r25
    4230:	1c cf       	rjmp	.-456    	; 0x406a <handleMotorsWithNoController+0x78>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    4232:	90 95       	com	r25
    4234:	81 95       	neg	r24
    4236:	9f 4f       	sbci	r25, 0xFF	; 255
    4238:	90 93 9b 00 	sts	0x009B, r25
    423c:	80 93 9a 00 	sts	0x009A, r24
    4240:	83 cf       	rjmp	.-250    	; 0x4148 <handleMotorsWithNoController+0x156>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    4242:	90 95       	com	r25
    4244:	81 95       	neg	r24
    4246:	9f 4f       	sbci	r25, 0xFF	; 255
    4248:	90 93 ab 00 	sts	0x00AB, r25
    424c:	80 93 aa 00 	sts	0x00AA, r24
    4250:	08 95       	ret

00004252 <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4252:	28 2f       	mov	r18, r24
    4254:	33 27       	eor	r19, r19
    4256:	27 fd       	sbrc	r18, 7
    4258:	30 95       	com	r19
    425a:	37 fd       	sbrc	r19, 7
    425c:	13 c0       	rjmp	.+38     	; 0x4284 <setLeftSpeed+0x32>
    425e:	30 93 10 03 	sts	0x0310, r19
    4262:	20 93 0f 03 	sts	0x030F, r18

    if(vel >= 0) {
    4266:	87 fd       	sbrc	r24, 7
    4268:	05 c0       	rjmp	.+10     	; 0x4274 <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    426a:	30 93 fa 02 	sts	0x02FA, r19
    426e:	20 93 f9 02 	sts	0x02F9, r18
    4272:	08 95       	ret
    4274:	30 95       	com	r19
    4276:	21 95       	neg	r18
    4278:	3f 4f       	sbci	r19, 0xFF	; 255
    427a:	30 93 fa 02 	sts	0x02FA, r19
    427e:	20 93 f9 02 	sts	0x02F9, r18
    4282:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4284:	30 95       	com	r19
    4286:	21 95       	neg	r18
    4288:	3f 4f       	sbci	r19, 0xFF	; 255
    428a:	e9 cf       	rjmp	.-46     	; 0x425e <setLeftSpeed+0xc>

0000428c <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    428c:	28 2f       	mov	r18, r24
    428e:	33 27       	eor	r19, r19
    4290:	27 fd       	sbrc	r18, 7
    4292:	30 95       	com	r19
    4294:	37 fd       	sbrc	r19, 7
    4296:	13 c0       	rjmp	.+38     	; 0x42be <setRightSpeed+0x32>
    4298:	30 93 12 03 	sts	0x0312, r19
    429c:	20 93 11 03 	sts	0x0311, r18

    if(vel >= 0) {
    42a0:	87 fd       	sbrc	r24, 7
    42a2:	05 c0       	rjmp	.+10     	; 0x42ae <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    42a4:	30 93 f8 02 	sts	0x02F8, r19
    42a8:	20 93 f7 02 	sts	0x02F7, r18
    42ac:	08 95       	ret
    42ae:	30 95       	com	r19
    42b0:	21 95       	neg	r18
    42b2:	3f 4f       	sbci	r19, 0xFF	; 255
    42b4:	30 93 f8 02 	sts	0x02F8, r19
    42b8:	20 93 f7 02 	sts	0x02F7, r18
    42bc:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    42be:	30 95       	com	r19
    42c0:	21 95       	neg	r18
    42c2:	3f 4f       	sbci	r19, 0xFF	; 255
    42c4:	e9 cf       	rjmp	.-46     	; 0x4298 <setRightSpeed+0xc>

000042c6 <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    42c6:	80 91 bf 04 	lds	r24, 0x04BF
    42ca:	88 23       	and	r24, r24
    42cc:	89 f5       	brne	.+98     	; 0x4330 <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    42ce:	e0 91 c3 04 	lds	r30, 0x04C3
    42d2:	e2 30       	cpi	r30, 0x02	; 2
    42d4:	08 f4       	brcc	.+2      	; 0x42d8 <updateOdomData+0x12>
    42d6:	96 c0       	rjmp	.+300    	; 0x4404 <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    42d8:	f0 e0       	ldi	r31, 0x00	; 0
    42da:	df 01       	movw	r26, r30
    42dc:	a2 95       	swap	r26
    42de:	b2 95       	swap	r27
    42e0:	b0 7f       	andi	r27, 0xF0	; 240
    42e2:	ba 27       	eor	r27, r26
    42e4:	a0 7f       	andi	r26, 0xF0	; 240
    42e6:	ba 27       	eor	r27, r26
    42e8:	aa 54       	subi	r26, 0x4A	; 74
    42ea:	bb 4f       	sbci	r27, 0xFB	; 251
    42ec:	12 96       	adiw	r26, 0x02	; 2
    42ee:	2d 91       	ld	r18, X+
    42f0:	3c 91       	ld	r19, X
    42f2:	13 97       	sbiw	r26, 0x03	; 3
    42f4:	80 91 82 05 	lds	r24, 0x0582
    42f8:	90 91 83 05 	lds	r25, 0x0583
    42fc:	28 17       	cp	r18, r24
    42fe:	39 07       	cpc	r19, r25
    4300:	34 f0       	brlt	.+12     	; 0x430e <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    4302:	c9 01       	movw	r24, r18
    4304:	01 96       	adiw	r24, 0x01	; 1
    4306:	90 93 83 05 	sts	0x0583, r25
    430a:	80 93 82 05 	sts	0x0582, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    430e:	e2 95       	swap	r30
    4310:	f2 95       	swap	r31
    4312:	f0 7f       	andi	r31, 0xF0	; 240
    4314:	fe 27       	eor	r31, r30
    4316:	e0 7f       	andi	r30, 0xF0	; 240
    4318:	fe 27       	eor	r31, r30
    431a:	ea 53       	subi	r30, 0x3A	; 58
    431c:	fb 4f       	sbci	r31, 0xFB	; 251
    431e:	20 91 a9 04 	lds	r18, 0x04A9
    4322:	30 91 aa 04 	lds	r19, 0x04AA
    4326:	31 83       	std	Z+1, r19	; 0x01
    4328:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    432a:	93 83       	std	Z+3, r25	; 0x03
    432c:	82 83       	std	Z+2, r24	; 0x02
    432e:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4330:	81 30       	cpi	r24, 0x01	; 1
    4332:	31 f0       	breq	.+12     	; 0x4340 <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4334:	82 30       	cpi	r24, 0x02	; 2
    4336:	09 f4       	brne	.+2      	; 0x433a <updateOdomData+0x74>
    4338:	6b c0       	rjmp	.+214    	; 0x4410 <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    433a:	83 30       	cpi	r24, 0x03	; 3
    433c:	91 f1       	breq	.+100    	; 0x43a2 <updateOdomData+0xdc>
    433e:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4340:	e0 91 c3 04 	lds	r30, 0x04C3
    4344:	e2 30       	cpi	r30, 0x02	; 2
    4346:	08 f4       	brcc	.+2      	; 0x434a <updateOdomData+0x84>
    4348:	93 c0       	rjmp	.+294    	; 0x4470 <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    434a:	f0 e0       	ldi	r31, 0x00	; 0
    434c:	df 01       	movw	r26, r30
    434e:	a2 95       	swap	r26
    4350:	b2 95       	swap	r27
    4352:	b0 7f       	andi	r27, 0xF0	; 240
    4354:	ba 27       	eor	r27, r26
    4356:	a0 7f       	andi	r26, 0xF0	; 240
    4358:	ba 27       	eor	r27, r26
    435a:	aa 54       	subi	r26, 0x4A	; 74
    435c:	bb 4f       	sbci	r27, 0xFB	; 251
    435e:	16 96       	adiw	r26, 0x06	; 6
    4360:	2d 91       	ld	r18, X+
    4362:	3c 91       	ld	r19, X
    4364:	17 97       	sbiw	r26, 0x07	; 7
    4366:	80 91 82 05 	lds	r24, 0x0582
    436a:	90 91 83 05 	lds	r25, 0x0583
    436e:	28 17       	cp	r18, r24
    4370:	39 07       	cpc	r19, r25
    4372:	34 f0       	brlt	.+12     	; 0x4380 <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    4374:	c9 01       	movw	r24, r18
    4376:	01 96       	adiw	r24, 0x01	; 1
    4378:	90 93 83 05 	sts	0x0583, r25
    437c:	80 93 82 05 	sts	0x0582, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    4380:	e2 95       	swap	r30
    4382:	f2 95       	swap	r31
    4384:	f0 7f       	andi	r31, 0xF0	; 240
    4386:	fe 27       	eor	r31, r30
    4388:	e0 7f       	andi	r30, 0xF0	; 240
    438a:	fe 27       	eor	r31, r30
    438c:	ea 53       	subi	r30, 0x3A	; 58
    438e:	fb 4f       	sbci	r31, 0xFB	; 251
    4390:	20 91 ab 04 	lds	r18, 0x04AB
    4394:	30 91 ac 04 	lds	r19, 0x04AC
    4398:	35 83       	std	Z+5, r19	; 0x05
    439a:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    439c:	97 83       	std	Z+7, r25	; 0x07
    439e:	86 83       	std	Z+6, r24	; 0x06
    43a0:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    43a2:	e0 91 c3 04 	lds	r30, 0x04C3
    43a6:	e2 30       	cpi	r30, 0x02	; 2
    43a8:	08 f4       	brcc	.+2      	; 0x43ac <updateOdomData+0xe6>
    43aa:	68 c0       	rjmp	.+208    	; 0x447c <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    43ac:	f0 e0       	ldi	r31, 0x00	; 0
    43ae:	df 01       	movw	r26, r30
    43b0:	a2 95       	swap	r26
    43b2:	b2 95       	swap	r27
    43b4:	b0 7f       	andi	r27, 0xF0	; 240
    43b6:	ba 27       	eor	r27, r26
    43b8:	a0 7f       	andi	r26, 0xF0	; 240
    43ba:	ba 27       	eor	r27, r26
    43bc:	aa 54       	subi	r26, 0x4A	; 74
    43be:	bb 4f       	sbci	r27, 0xFB	; 251
    43c0:	1e 96       	adiw	r26, 0x0e	; 14
    43c2:	2d 91       	ld	r18, X+
    43c4:	3c 91       	ld	r19, X
    43c6:	1f 97       	sbiw	r26, 0x0f	; 15
    43c8:	80 91 82 05 	lds	r24, 0x0582
    43cc:	90 91 83 05 	lds	r25, 0x0583
    43d0:	28 17       	cp	r18, r24
    43d2:	39 07       	cpc	r19, r25
    43d4:	34 f0       	brlt	.+12     	; 0x43e2 <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    43d6:	c9 01       	movw	r24, r18
    43d8:	01 96       	adiw	r24, 0x01	; 1
    43da:	90 93 83 05 	sts	0x0583, r25
    43de:	80 93 82 05 	sts	0x0582, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    43e2:	e2 95       	swap	r30
    43e4:	f2 95       	swap	r31
    43e6:	f0 7f       	andi	r31, 0xF0	; 240
    43e8:	fe 27       	eor	r31, r30
    43ea:	e0 7f       	andi	r30, 0xF0	; 240
    43ec:	fe 27       	eor	r31, r30
    43ee:	ea 53       	subi	r30, 0x3A	; 58
    43f0:	fb 4f       	sbci	r31, 0xFB	; 251
    43f2:	20 91 ab 04 	lds	r18, 0x04AB
    43f6:	30 91 ac 04 	lds	r19, 0x04AC
    43fa:	35 87       	std	Z+13, r19	; 0x0d
    43fc:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    43fe:	97 87       	std	Z+15, r25	; 0x0f
    4400:	86 87       	std	Z+14, r24	; 0x0e
    4402:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4404:	f0 e0       	ldi	r31, 0x00	; 0
    4406:	80 91 82 05 	lds	r24, 0x0582
    440a:	90 91 83 05 	lds	r25, 0x0583
    440e:	7f cf       	rjmp	.-258    	; 0x430e <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4410:	e0 91 c3 04 	lds	r30, 0x04C3
    4414:	e2 30       	cpi	r30, 0x02	; 2
    4416:	c0 f1       	brcs	.+112    	; 0x4488 <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    4418:	f0 e0       	ldi	r31, 0x00	; 0
    441a:	df 01       	movw	r26, r30
    441c:	a2 95       	swap	r26
    441e:	b2 95       	swap	r27
    4420:	b0 7f       	andi	r27, 0xF0	; 240
    4422:	ba 27       	eor	r27, r26
    4424:	a0 7f       	andi	r26, 0xF0	; 240
    4426:	ba 27       	eor	r27, r26
    4428:	aa 54       	subi	r26, 0x4A	; 74
    442a:	bb 4f       	sbci	r27, 0xFB	; 251
    442c:	1a 96       	adiw	r26, 0x0a	; 10
    442e:	2d 91       	ld	r18, X+
    4430:	3c 91       	ld	r19, X
    4432:	1b 97       	sbiw	r26, 0x0b	; 11
    4434:	80 91 82 05 	lds	r24, 0x0582
    4438:	90 91 83 05 	lds	r25, 0x0583
    443c:	28 17       	cp	r18, r24
    443e:	39 07       	cpc	r19, r25
    4440:	34 f0       	brlt	.+12     	; 0x444e <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    4442:	c9 01       	movw	r24, r18
    4444:	01 96       	adiw	r24, 0x01	; 1
    4446:	90 93 83 05 	sts	0x0583, r25
    444a:	80 93 82 05 	sts	0x0582, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    444e:	e2 95       	swap	r30
    4450:	f2 95       	swap	r31
    4452:	f0 7f       	andi	r31, 0xF0	; 240
    4454:	fe 27       	eor	r31, r30
    4456:	e0 7f       	andi	r30, 0xF0	; 240
    4458:	fe 27       	eor	r31, r30
    445a:	ea 53       	subi	r30, 0x3A	; 58
    445c:	fb 4f       	sbci	r31, 0xFB	; 251
    445e:	20 91 a9 04 	lds	r18, 0x04A9
    4462:	30 91 aa 04 	lds	r19, 0x04AA
    4466:	31 87       	std	Z+9, r19	; 0x09
    4468:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    446a:	93 87       	std	Z+11, r25	; 0x0b
    446c:	82 87       	std	Z+10, r24	; 0x0a
    446e:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4470:	f0 e0       	ldi	r31, 0x00	; 0
    4472:	80 91 82 05 	lds	r24, 0x0582
    4476:	90 91 83 05 	lds	r25, 0x0583
    447a:	82 cf       	rjmp	.-252    	; 0x4380 <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    447c:	f0 e0       	ldi	r31, 0x00	; 0
    447e:	80 91 82 05 	lds	r24, 0x0582
    4482:	90 91 83 05 	lds	r25, 0x0583
    4486:	ad cf       	rjmp	.-166    	; 0x43e2 <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4488:	f0 e0       	ldi	r31, 0x00	; 0
    448a:	80 91 82 05 	lds	r24, 0x0582
    448e:	90 91 83 05 	lds	r25, 0x0583
    4492:	dd cf       	rjmp	.-70     	; 0x444e <updateOdomData+0x188>

00004494 <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    4494:	80 91 81 05 	lds	r24, 0x0581
    4498:	82 30       	cpi	r24, 0x02	; 2
    449a:	09 f4       	brne	.+2      	; 0x449e <handleCalibration+0xa>
    449c:	d0 c0       	rjmp	.+416    	; 0x463e <handleCalibration+0x1aa>
    449e:	83 30       	cpi	r24, 0x03	; 3
    44a0:	08 f4       	brcc	.+2      	; 0x44a4 <handleCalibration+0x10>
    44a2:	3f c0       	rjmp	.+126    	; 0x4522 <handleCalibration+0x8e>
    44a4:	84 30       	cpi	r24, 0x04	; 4
    44a6:	09 f4       	brne	.+2      	; 0x44aa <handleCalibration+0x16>
    44a8:	91 c0       	rjmp	.+290    	; 0x45cc <handleCalibration+0x138>
    44aa:	84 30       	cpi	r24, 0x04	; 4
    44ac:	08 f0       	brcs	.+2      	; 0x44b0 <handleCalibration+0x1c>
    44ae:	63 c0       	rjmp	.+198    	; 0x4576 <handleCalibration+0xe2>
                calibState = 5;
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    44b0:	80 91 bf 04 	lds	r24, 0x04BF
    44b4:	88 23       	and	r24, r24
    44b6:	09 f4       	brne	.+2      	; 0x44ba <handleCalibration+0x26>
    44b8:	e1 c0       	rjmp	.+450    	; 0x467c <handleCalibration+0x1e8>
    44ba:	82 30       	cpi	r24, 0x02	; 2
    44bc:	09 f4       	brne	.+2      	; 0x44c0 <handleCalibration+0x2c>
    44be:	de c0       	rjmp	.+444    	; 0x467c <handleCalibration+0x1e8>
                    updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    44c0:	80 91 6d 02 	lds	r24, 0x026D
    44c4:	90 91 6e 02 	lds	r25, 0x026E
    44c8:	21 e0       	ldi	r18, 0x01	; 1
    44ca:	8a 36       	cpi	r24, 0x6A	; 106
    44cc:	92 07       	cpc	r25, r18
    44ce:	0c f4       	brge	.+2      	; 0x44d2 <handleCalibration+0x3e>
    44d0:	8a c1       	rjmp	.+788    	; 0x47e6 <handleCalibration+0x352>
					updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    44d2:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    44d6:	20 91 7d 05 	lds	r18, 0x057D
    44da:	30 91 7e 05 	lds	r19, 0x057E
    44de:	40 91 7f 05 	lds	r20, 0x057F
    44e2:	50 91 80 05 	lds	r21, 0x0580
    44e6:	62 1b       	sub	r22, r18
    44e8:	73 0b       	sbc	r23, r19
    44ea:	84 0b       	sbc	r24, r20
    44ec:	95 0b       	sbc	r25, r21
    44ee:	6c 39       	cpi	r22, 0x9C	; 156
    44f0:	2d ec       	ldi	r18, 0xCD	; 205
    44f2:	72 07       	cpc	r23, r18
    44f4:	28 e0       	ldi	r18, 0x08	; 8
    44f6:	82 07       	cpc	r24, r18
    44f8:	20 e0       	ldi	r18, 0x00	; 0
    44fa:	92 07       	cpc	r25, r18
    44fc:	d8 f1       	brcs	.+118    	; 0x4574 <handleCalibration+0xe0>
            	tempVel = 0;
    44fe:	10 92 83 05 	sts	0x0583, r1
    4502:	10 92 82 05 	sts	0x0582, r1
				avgLeftSpeed = 0;
    4506:	10 92 aa 04 	sts	0x04AA, r1
    450a:	10 92 a9 04 	sts	0x04A9, r1
				avgRightSpeed = 0;
    450e:	10 92 ac 04 	sts	0x04AC, r1
    4512:	10 92 ab 04 	sts	0x04AB, r1
                updateOdomData();
    4516:	0e 94 63 21 	call	0x42c6	; 0x42c6 <updateOdomData>
                calibState = 5;
    451a:	85 e0       	ldi	r24, 0x05	; 5
    451c:	80 93 81 05 	sts	0x0581, r24
    4520:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4522:	88 23       	and	r24, r24
    4524:	29 f5       	brne	.+74     	; 0x4570 <handleCalibration+0xdc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    4526:	80 91 bf 04 	lds	r24, 0x04BF
    452a:	88 23       	and	r24, r24
    452c:	09 f0       	breq	.+2      	; 0x4530 <handleCalibration+0x9c>
    452e:	3c c1       	rjmp	.+632    	; 0x47a8 <handleCalibration+0x314>
				pwm_intermediate_right_desired = 0;
    4530:	10 92 fc 02 	sts	0x02FC, r1
    4534:	10 92 fb 02 	sts	0x02FB, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    4538:	90 91 c3 04 	lds	r25, 0x04C3
    453c:	85 e0       	ldi	r24, 0x05	; 5
    453e:	98 9f       	mul	r25, r24
    4540:	c0 01       	movw	r24, r0
    4542:	11 24       	eor	r1, r1
    4544:	88 0f       	add	r24, r24
    4546:	99 1f       	adc	r25, r25
    4548:	88 0f       	add	r24, r24
    454a:	99 1f       	adc	r25, r25
    454c:	90 93 fe 02 	sts	0x02FE, r25
    4550:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = 1;
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	80 93 81 05 	sts	0x0581, r24
            timeoutOdometry = getTime100MicroSec();
    455a:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    455e:	60 93 7d 05 	sts	0x057D, r22
    4562:	70 93 7e 05 	sts	0x057E, r23
    4566:	80 93 7f 05 	sts	0x057F, r24
    456a:	90 93 80 05 	sts	0x0580, r25
            break;
    456e:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4570:	81 30       	cpi	r24, 0x01	; 1
    4572:	71 f0       	breq	.+28     	; 0x4590 <handleCalibration+0xfc>
    4574:	08 95       	ret
    4576:	85 30       	cpi	r24, 0x05	; 5
    4578:	e9 f7       	brne	.-6      	; 0x4574 <handleCalibration+0xe0>
                calibState = 5;
			}
            break;

		case 5:
        	calibVelIndex++;
    457a:	80 91 c3 04 	lds	r24, 0x04C3
    457e:	8f 5f       	subi	r24, 0xFF	; 255
    4580:	80 93 c3 04 	sts	0x04C3, r24
            if(calibVelIndex == 10) {
    4584:	8a 30       	cpi	r24, 0x0A	; 10
    4586:	09 f4       	brne	.+2      	; 0x458a <handleCalibration+0xf6>
    4588:	8b c1       	rjmp	.+790    	; 0x48a0 <handleCalibration+0x40c>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = 0;
    458a:	10 92 81 05 	sts	0x0581, r1
    458e:	08 95       	ret
            calibState = 1;
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4590:	80 91 bf 04 	lds	r24, 0x04BF
    4594:	88 23       	and	r24, r24
    4596:	09 f4       	brne	.+2      	; 0x459a <handleCalibration+0x106>
    4598:	d0 c0       	rjmp	.+416    	; 0x473a <handleCalibration+0x2a6>
    459a:	82 30       	cpi	r24, 0x02	; 2
    459c:	09 f4       	brne	.+2      	; 0x45a0 <handleCalibration+0x10c>
    459e:	cd c0       	rjmp	.+410    	; 0x473a <handleCalibration+0x2a6>
                    timeOdometry = getTime100MicroSec();;
                    calibState = 2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    45a0:	80 91 6d 02 	lds	r24, 0x026D
    45a4:	90 91 6e 02 	lds	r25, 0x026E
    45a8:	21 e0       	ldi	r18, 0x01	; 1
    45aa:	8a 36       	cpi	r24, 0x6A	; 106
    45ac:	92 07       	cpc	r25, r18
    45ae:	0c f0       	brlt	.+2      	; 0x45b2 <handleCalibration+0x11e>
    45b0:	90 cf       	rjmp	.-224    	; 0x44d2 <handleCalibration+0x3e>
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
    45b2:	10 92 a8 04 	sts	0x04A8, r1
    45b6:	10 92 a7 04 	sts	0x04A7, r1
					rightSpeedSumOdom = 0;
    45ba:	10 92 a1 04 	sts	0x04A1, r1
    45be:	10 92 a2 04 	sts	0x04A2, r1
    45c2:	10 92 a3 04 	sts	0x04A3, r1
    45c6:	10 92 a4 04 	sts	0x04A4, r1
    45ca:	cc c0       	rjmp	.+408    	; 0x4764 <handleCalibration+0x2d0>
                calibState = 5;
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    45cc:	80 91 bf 04 	lds	r24, 0x04BF
    45d0:	88 23       	and	r24, r24
    45d2:	49 f1       	breq	.+82     	; 0x4626 <handleCalibration+0x192>
    45d4:	82 30       	cpi	r24, 0x02	; 2
    45d6:	39 f1       	breq	.+78     	; 0x4626 <handleCalibration+0x192>
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    45d8:	80 91 6d 02 	lds	r24, 0x026D
    45dc:	90 91 6e 02 	lds	r25, 0x026E
    45e0:	21 e0       	ldi	r18, 0x01	; 1
    45e2:	86 3b       	cpi	r24, 0xB6	; 182
    45e4:	92 07       	cpc	r25, r18
    45e6:	3c f5       	brge	.+78     	; 0x4636 <handleCalibration+0x1a2>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    45e8:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    45ec:	20 91 7d 05 	lds	r18, 0x057D
    45f0:	30 91 7e 05 	lds	r19, 0x057E
    45f4:	40 91 7f 05 	lds	r20, 0x057F
    45f8:	50 91 80 05 	lds	r21, 0x0580
    45fc:	62 1b       	sub	r22, r18
    45fe:	73 0b       	sbc	r23, r19
    4600:	84 0b       	sbc	r24, r20
    4602:	95 0b       	sbc	r25, r21
    4604:	6c 39       	cpi	r22, 0x9C	; 156
    4606:	2d ec       	ldi	r18, 0xCD	; 205
    4608:	72 07       	cpc	r23, r18
    460a:	28 e0       	ldi	r18, 0x08	; 8
    460c:	82 07       	cpc	r24, r18
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	92 07       	cpc	r25, r18
    4612:	08 f4       	brcc	.+2      	; 0x4616 <handleCalibration+0x182>
    4614:	af cf       	rjmp	.-162    	; 0x4574 <handleCalibration+0xe0>
            	tempVel = 0;
    4616:	10 92 83 05 	sts	0x0583, r1
    461a:	10 92 82 05 	sts	0x0582, r1
                //updateOdomData();
                calibState = 5;
    461e:	85 e0       	ldi	r24, 0x05	; 5
    4620:	80 93 81 05 	sts	0x0581, r24
    4624:	08 95       	ret
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    4626:	80 91 67 02 	lds	r24, 0x0267
    462a:	90 91 68 02 	lds	r25, 0x0268
    462e:	21 e0       	ldi	r18, 0x01	; 1
    4630:	86 3b       	cpi	r24, 0xB6	; 182
    4632:	92 07       	cpc	r25, r18
    4634:	cc f2       	brlt	.-78     	; 0x45e8 <handleCalibration+0x154>
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
    4636:	85 e0       	ldi	r24, 0x05	; 5
    4638:	80 93 81 05 	sts	0x0581, r24
    463c:	d5 cf       	rjmp	.-86     	; 0x45e8 <handleCalibration+0x154>
                calibState = 5;
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    463e:	80 91 bf 04 	lds	r24, 0x04BF
    4642:	88 23       	and	r24, r24
    4644:	09 f4       	brne	.+2      	; 0x4648 <handleCalibration+0x1b4>
    4646:	a6 c0       	rjmp	.+332    	; 0x4794 <handleCalibration+0x300>
    4648:	82 30       	cpi	r24, 0x02	; 2
    464a:	09 f4       	brne	.+2      	; 0x464e <handleCalibration+0x1ba>
    464c:	a3 c0       	rjmp	.+326    	; 0x4794 <handleCalibration+0x300>
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 3;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    464e:	80 91 6d 02 	lds	r24, 0x026D
    4652:	90 91 6e 02 	lds	r25, 0x026E
    4656:	21 e0       	ldi	r18, 0x01	; 1
    4658:	86 3b       	cpi	r24, 0xB6	; 182
    465a:	92 07       	cpc	r25, r18
    465c:	0c f4       	brge	.+2      	; 0x4660 <handleCalibration+0x1cc>
    465e:	39 cf       	rjmp	.-398    	; 0x44d2 <handleCalibration+0x3e>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
                	calibState = 3;
    4660:	83 e0       	ldi	r24, 0x03	; 3
    4662:	80 93 81 05 	sts	0x0581, r24
                    timeoutOdometry = getTime100MicroSec();;
    4666:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    466a:	60 93 7d 05 	sts	0x057D, r22
    466e:	70 93 7e 05 	sts	0x057E, r23
    4672:	80 93 7f 05 	sts	0x057F, r24
    4676:	90 93 80 05 	sts	0x0580, r25
    467a:	2b cf       	rjmp	.-426    	; 0x44d2 <handleCalibration+0x3e>
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    467c:	80 91 67 02 	lds	r24, 0x0267
    4680:	90 91 68 02 	lds	r25, 0x0268
    4684:	21 e0       	ldi	r18, 0x01	; 1
    4686:	8a 36       	cpi	r24, 0x6A	; 106
    4688:	92 07       	cpc	r25, r18
    468a:	0c f0       	brlt	.+2      	; 0x468e <handleCalibration+0x1fa>
    468c:	22 cf       	rjmp	.-444    	; 0x44d2 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    468e:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    4692:	20 91 ba 04 	lds	r18, 0x04BA
    4696:	30 91 bb 04 	lds	r19, 0x04BB
    469a:	40 91 bc 04 	lds	r20, 0x04BC
    469e:	50 91 bd 04 	lds	r21, 0x04BD
    46a2:	62 1b       	sub	r22, r18
    46a4:	73 0b       	sbc	r23, r19
    46a6:	84 0b       	sbc	r24, r20
    46a8:	95 0b       	sbc	r25, r21
    46aa:	60 93 ba 04 	sts	0x04BA, r22
    46ae:	70 93 bb 04 	sts	0x04BB, r23
    46b2:	80 93 bc 04 	sts	0x04BC, r24
    46b6:	90 93 bd 04 	sts	0x04BD, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    46ba:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <__floatunsisf>
    46be:	20 e0       	ldi	r18, 0x00	; 0
    46c0:	30 e0       	ldi	r19, 0x00	; 0
    46c2:	40 ed       	ldi	r20, 0xD0	; 208
    46c4:	52 e4       	ldi	r21, 0x42	; 66
    46c6:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    46ca:	20 e0       	ldi	r18, 0x00	; 0
    46cc:	34 e2       	ldi	r19, 0x24	; 36
    46ce:	44 e7       	ldi	r20, 0x74	; 116
    46d0:	59 e4       	ldi	r21, 0x49	; 73
    46d2:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    46d6:	9b 01       	movw	r18, r22
    46d8:	ac 01       	movw	r20, r24
    46da:	64 e1       	ldi	r22, 0x14	; 20
    46dc:	7e e2       	ldi	r23, 0x2E	; 46
    46de:	88 e7       	ldi	r24, 0x78	; 120
    46e0:	93 e4       	ldi	r25, 0x43	; 67
    46e2:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    46e6:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <__fixunssfsi>
    46ea:	70 93 83 05 	sts	0x0583, r23
    46ee:	60 93 82 05 	sts	0x0582, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    46f2:	20 91 a5 04 	lds	r18, 0x04A5
    46f6:	30 91 a6 04 	lds	r19, 0x04A6
    46fa:	40 e0       	ldi	r20, 0x00	; 0
    46fc:	50 e0       	ldi	r21, 0x00	; 0
    46fe:	60 91 9d 04 	lds	r22, 0x049D
    4702:	70 91 9e 04 	lds	r23, 0x049E
    4706:	80 91 9f 04 	lds	r24, 0x049F
    470a:	90 91 a0 04 	lds	r25, 0x04A0
    470e:	0e 94 7a 40 	call	0x80f4	; 0x80f4 <__divmodsi4>
    4712:	30 93 aa 04 	sts	0x04AA, r19
    4716:	20 93 a9 04 	sts	0x04A9, r18
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
					updateOdomData();
    471a:	0e 94 63 21 	call	0x42c6	; 0x42c6 <updateOdomData>
                    calibState = 4;
    471e:	84 e0       	ldi	r24, 0x04	; 4
    4720:	80 93 81 05 	sts	0x0581, r24
                    timeoutOdometry = getTime100MicroSec();;
    4724:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    4728:	60 93 7d 05 	sts	0x057D, r22
    472c:	70 93 7e 05 	sts	0x057E, r23
    4730:	80 93 7f 05 	sts	0x057F, r24
    4734:	90 93 80 05 	sts	0x0580, r25
    4738:	cc ce       	rjmp	.-616    	; 0x44d2 <handleCalibration+0x3e>
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    473a:	80 91 67 02 	lds	r24, 0x0267
    473e:	90 91 68 02 	lds	r25, 0x0268
    4742:	21 e0       	ldi	r18, 0x01	; 1
    4744:	8a 36       	cpi	r24, 0x6A	; 106
    4746:	92 07       	cpc	r25, r18
    4748:	0c f0       	brlt	.+2      	; 0x474c <handleCalibration+0x2b8>
    474a:	c3 ce       	rjmp	.-634    	; 0x44d2 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {				
                	leftSumCount = 0;
    474c:	10 92 a6 04 	sts	0x04A6, r1
    4750:	10 92 a5 04 	sts	0x04A5, r1
                    leftSpeedSumOdom = 0;
    4754:	10 92 9d 04 	sts	0x049D, r1
    4758:	10 92 9e 04 	sts	0x049E, r1
    475c:	10 92 9f 04 	sts	0x049F, r1
    4760:	10 92 a0 04 	sts	0x04A0, r1
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
					rightSpeedSumOdom = 0;
                    timeOdometry = getTime100MicroSec();;
    4764:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    4768:	60 93 ba 04 	sts	0x04BA, r22
    476c:	70 93 bb 04 	sts	0x04BB, r23
    4770:	80 93 bc 04 	sts	0x04BC, r24
    4774:	90 93 bd 04 	sts	0x04BD, r25
                    calibState = 2;
    4778:	82 e0       	ldi	r24, 0x02	; 2
    477a:	80 93 81 05 	sts	0x0581, r24
                    timeoutOdometry = getTime100MicroSec();;
    477e:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    4782:	60 93 7d 05 	sts	0x057D, r22
    4786:	70 93 7e 05 	sts	0x057E, r23
    478a:	80 93 7f 05 	sts	0x057F, r24
    478e:	90 93 80 05 	sts	0x0580, r25
    4792:	9f ce       	rjmp	.-706    	; 0x44d2 <handleCalibration+0x3e>
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    4794:	80 91 67 02 	lds	r24, 0x0267
    4798:	90 91 68 02 	lds	r25, 0x0268
    479c:	21 e0       	ldi	r18, 0x01	; 1
    479e:	86 3b       	cpi	r24, 0xB6	; 182
    47a0:	92 07       	cpc	r25, r18
    47a2:	0c f4       	brge	.+2      	; 0x47a6 <handleCalibration+0x312>
    47a4:	96 ce       	rjmp	.-724    	; 0x44d2 <handleCalibration+0x3e>
    47a6:	5c cf       	rjmp	.-328    	; 0x4660 <handleCalibration+0x1cc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    47a8:	81 30       	cpi	r24, 0x01	; 1
    47aa:	09 f4       	brne	.+2      	; 0x47ae <handleCalibration+0x31a>
    47ac:	84 c0       	rjmp	.+264    	; 0x48b6 <handleCalibration+0x422>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    47ae:	82 30       	cpi	r24, 0x02	; 2
    47b0:	09 f4       	brne	.+2      	; 0x47b4 <handleCalibration+0x320>
    47b2:	60 c0       	rjmp	.+192    	; 0x4874 <handleCalibration+0x3e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    47b4:	83 30       	cpi	r24, 0x03	; 3
    47b6:	09 f0       	breq	.+2      	; 0x47ba <handleCalibration+0x326>
    47b8:	cd ce       	rjmp	.-614    	; 0x4554 <handleCalibration+0xc0>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    47ba:	90 91 c3 04 	lds	r25, 0x04C3
    47be:	85 e0       	ldi	r24, 0x05	; 5
    47c0:	98 9f       	mul	r25, r24
    47c2:	c0 01       	movw	r24, r0
    47c4:	11 24       	eor	r1, r1
    47c6:	88 0f       	add	r24, r24
    47c8:	99 1f       	adc	r25, r25
    47ca:	88 0f       	add	r24, r24
    47cc:	99 1f       	adc	r25, r25
    47ce:	90 95       	com	r25
    47d0:	81 95       	neg	r24
    47d2:	9f 4f       	sbci	r25, 0xFF	; 255
    47d4:	90 93 fc 02 	sts	0x02FC, r25
    47d8:	80 93 fb 02 	sts	0x02FB, r24
				pwm_intermediate_left_desired = 0;
    47dc:	10 92 fe 02 	sts	0x02FE, r1
    47e0:	10 92 fd 02 	sts	0x02FD, r1
    47e4:	b7 ce       	rjmp	.-658    	; 0x4554 <handleCalibration+0xc0>
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    47e6:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    47ea:	20 91 ba 04 	lds	r18, 0x04BA
    47ee:	30 91 bb 04 	lds	r19, 0x04BB
    47f2:	40 91 bc 04 	lds	r20, 0x04BC
    47f6:	50 91 bd 04 	lds	r21, 0x04BD
    47fa:	62 1b       	sub	r22, r18
    47fc:	73 0b       	sbc	r23, r19
    47fe:	84 0b       	sbc	r24, r20
    4800:	95 0b       	sbc	r25, r21
    4802:	60 93 ba 04 	sts	0x04BA, r22
    4806:	70 93 bb 04 	sts	0x04BB, r23
    480a:	80 93 bc 04 	sts	0x04BC, r24
    480e:	90 93 bd 04 	sts	0x04BD, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    4812:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <__floatunsisf>
    4816:	20 e0       	ldi	r18, 0x00	; 0
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	40 ed       	ldi	r20, 0xD0	; 208
    481c:	52 e4       	ldi	r21, 0x42	; 66
    481e:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    4822:	20 e0       	ldi	r18, 0x00	; 0
    4824:	34 e2       	ldi	r19, 0x24	; 36
    4826:	44 e7       	ldi	r20, 0x74	; 116
    4828:	59 e4       	ldi	r21, 0x49	; 73
    482a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    482e:	9b 01       	movw	r18, r22
    4830:	ac 01       	movw	r20, r24
    4832:	64 e1       	ldi	r22, 0x14	; 20
    4834:	7e e2       	ldi	r23, 0x2E	; 46
    4836:	88 e7       	ldi	r24, 0x78	; 120
    4838:	93 e4       	ldi	r25, 0x43	; 67
    483a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    483e:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <__fixunssfsi>
    4842:	70 93 83 05 	sts	0x0583, r23
    4846:	60 93 82 05 	sts	0x0582, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    484a:	20 91 a7 04 	lds	r18, 0x04A7
    484e:	30 91 a8 04 	lds	r19, 0x04A8
    4852:	40 e0       	ldi	r20, 0x00	; 0
    4854:	50 e0       	ldi	r21, 0x00	; 0
    4856:	60 91 a1 04 	lds	r22, 0x04A1
    485a:	70 91 a2 04 	lds	r23, 0x04A2
    485e:	80 91 a3 04 	lds	r24, 0x04A3
    4862:	90 91 a4 04 	lds	r25, 0x04A4
    4866:	0e 94 7a 40 	call	0x80f4	; 0x80f4 <__divmodsi4>
    486a:	30 93 ac 04 	sts	0x04AC, r19
    486e:	20 93 ab 04 	sts	0x04AB, r18
    4872:	53 cf       	rjmp	.-346    	; 0x471a <handleCalibration+0x286>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    4874:	10 92 fc 02 	sts	0x02FC, r1
    4878:	10 92 fb 02 	sts	0x02FB, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    487c:	90 91 c3 04 	lds	r25, 0x04C3
    4880:	85 e0       	ldi	r24, 0x05	; 5
    4882:	98 9f       	mul	r25, r24
    4884:	c0 01       	movw	r24, r0
    4886:	11 24       	eor	r1, r1
    4888:	88 0f       	add	r24, r24
    488a:	99 1f       	adc	r25, r25
    488c:	88 0f       	add	r24, r24
    488e:	99 1f       	adc	r25, r25
    4890:	90 95       	com	r25
    4892:	81 95       	neg	r24
    4894:	9f 4f       	sbci	r25, 0xFF	; 255
    4896:	90 93 fe 02 	sts	0x02FE, r25
    489a:	80 93 fd 02 	sts	0x02FD, r24
    489e:	5a ce       	rjmp	.-844    	; 0x4554 <handleCalibration+0xc0>
            break;

		case 5:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    48a0:	91 e0       	ldi	r25, 0x01	; 1
    48a2:	90 93 c3 04 	sts	0x04C3, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    48a6:	80 91 bf 04 	lds	r24, 0x04BF
    48aa:	88 23       	and	r24, r24
    48ac:	b9 f4       	brne	.+46     	; 0x48dc <handleCalibration+0x448>
                	calibWheel = LEFT_WHEEL_BW_SC;
    48ae:	82 e0       	ldi	r24, 0x02	; 2
    48b0:	80 93 bf 04 	sts	0x04BF, r24
    48b4:	6a ce       	rjmp	.-812    	; 0x458a <handleCalibration+0xf6>
    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    48b6:	90 91 c3 04 	lds	r25, 0x04C3
    48ba:	85 e0       	ldi	r24, 0x05	; 5
    48bc:	98 9f       	mul	r25, r24
    48be:	c0 01       	movw	r24, r0
    48c0:	11 24       	eor	r1, r1
    48c2:	88 0f       	add	r24, r24
    48c4:	99 1f       	adc	r25, r25
    48c6:	88 0f       	add	r24, r24
    48c8:	99 1f       	adc	r25, r25
    48ca:	90 93 fc 02 	sts	0x02FC, r25
    48ce:	80 93 fb 02 	sts	0x02FB, r24
				pwm_intermediate_left_desired = 0;
    48d2:	10 92 fe 02 	sts	0x02FE, r1
    48d6:	10 92 fd 02 	sts	0x02FD, r1
    48da:	3c ce       	rjmp	.-904    	; 0x4554 <handleCalibration+0xc0>
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    48dc:	81 30       	cpi	r24, 0x01	; 1
    48de:	61 f0       	breq	.+24     	; 0x48f8 <handleCalibration+0x464>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    48e0:	82 30       	cpi	r24, 0x02	; 2
    48e2:	71 f0       	breq	.+28     	; 0x4900 <handleCalibration+0x46c>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    48e4:	83 30       	cpi	r24, 0x03	; 3
    48e6:	09 f0       	breq	.+2      	; 0x48ea <handleCalibration+0x456>
    48e8:	50 ce       	rjmp	.-864    	; 0x458a <handleCalibration+0xf6>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    48ea:	10 92 bf 04 	sts	0x04BF, r1
					// red off
					writeCalibrationToFlash();
    48ee:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    48f2:	10 92 c0 04 	sts	0x04C0, r1
    48f6:	49 ce       	rjmp	.-878    	; 0x458a <handleCalibration+0xf6>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    48f8:	83 e0       	ldi	r24, 0x03	; 3
    48fa:	80 93 bf 04 	sts	0x04BF, r24
    48fe:	45 ce       	rjmp	.-886    	; 0x458a <handleCalibration+0xf6>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    4900:	90 93 bf 04 	sts	0x04BF, r25
					calibrateOdomFlag = 0;
    4904:	10 92 c0 04 	sts	0x04C0, r1
    4908:	40 ce       	rjmp	.-896    	; 0x458a <handleCalibration+0xf6>

0000490a <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    490a:	af 92       	push	r10
    490c:	bf 92       	push	r11
    490e:	cf 92       	push	r12
    4910:	df 92       	push	r13
    4912:	ef 92       	push	r14
    4914:	ff 92       	push	r15
    4916:	0f 93       	push	r16
    4918:	1f 93       	push	r17
    491a:	cf 93       	push	r28
    491c:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    491e:	9c 01       	movw	r18, r24
    4920:	22 0f       	add	r18, r18
    4922:	33 1f       	adc	r19, r19
    4924:	22 0f       	add	r18, r18
    4926:	33 1f       	adc	r19, r19
    4928:	28 0f       	add	r18, r24
    492a:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    492c:	21 15       	cp	r18, r1
    492e:	31 05       	cpc	r19, r1
    4930:	09 f4       	brne	.+2      	; 0x4934 <getInputFromSpeed+0x2a>
    4932:	7b c0       	rjmp	.+246    	; 0x4a2a <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    4934:	86 2f       	mov	r24, r22
    4936:	82 50       	subi	r24, 0x02	; 2
    4938:	82 30       	cpi	r24, 0x02	; 2
    493a:	08 f4       	brcc	.+2      	; 0x493e <getInputFromSpeed+0x34>
    493c:	84 c0       	rjmp	.+264    	; 0x4a46 <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    493e:	66 23       	and	r22, r22
    4940:	09 f0       	breq	.+2      	; 0x4944 <getInputFromSpeed+0x3a>
    4942:	84 c0       	rjmp	.+264    	; 0x4a4c <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    4944:	80 91 d8 04 	lds	r24, 0x04D8
    4948:	90 91 d9 04 	lds	r25, 0x04D9
    494c:	82 17       	cp	r24, r18
    494e:	93 07       	cpc	r25, r19
    4950:	0c f0       	brlt	.+2      	; 0x4954 <getInputFromSpeed+0x4a>
    4952:	1b c2       	rjmp	.+1078   	; 0x4d8a <getInputFromSpeed+0x480>
    4954:	80 91 e8 04 	lds	r24, 0x04E8
    4958:	90 91 e9 04 	lds	r25, 0x04E9
    495c:	82 17       	cp	r24, r18
    495e:	93 07       	cpc	r25, r19
    4960:	0c f0       	brlt	.+2      	; 0x4964 <getInputFromSpeed+0x5a>
    4962:	1c c2       	rjmp	.+1080   	; 0x4d9c <getInputFromSpeed+0x492>
    4964:	80 91 f8 04 	lds	r24, 0x04F8
    4968:	90 91 f9 04 	lds	r25, 0x04F9
    496c:	82 17       	cp	r24, r18
    496e:	93 07       	cpc	r25, r19
    4970:	0c f0       	brlt	.+2      	; 0x4974 <getInputFromSpeed+0x6a>
    4972:	17 c2       	rjmp	.+1070   	; 0x4da2 <getInputFromSpeed+0x498>
    4974:	80 91 08 05 	lds	r24, 0x0508
    4978:	90 91 09 05 	lds	r25, 0x0509
    497c:	82 17       	cp	r24, r18
    497e:	93 07       	cpc	r25, r19
    4980:	0c f0       	brlt	.+2      	; 0x4984 <getInputFromSpeed+0x7a>
    4982:	12 c2       	rjmp	.+1060   	; 0x4da8 <getInputFromSpeed+0x49e>
    4984:	80 91 18 05 	lds	r24, 0x0518
    4988:	90 91 19 05 	lds	r25, 0x0519
    498c:	82 17       	cp	r24, r18
    498e:	93 07       	cpc	r25, r19
    4990:	0c f0       	brlt	.+2      	; 0x4994 <getInputFromSpeed+0x8a>
    4992:	fe c1       	rjmp	.+1020   	; 0x4d90 <getInputFromSpeed+0x486>
    4994:	80 91 28 05 	lds	r24, 0x0528
    4998:	90 91 29 05 	lds	r25, 0x0529
    499c:	82 17       	cp	r24, r18
    499e:	93 07       	cpc	r25, r19
    49a0:	0c f0       	brlt	.+2      	; 0x49a4 <getInputFromSpeed+0x9a>
    49a2:	f9 c1       	rjmp	.+1010   	; 0x4d96 <getInputFromSpeed+0x48c>
    49a4:	80 91 38 05 	lds	r24, 0x0538
    49a8:	90 91 39 05 	lds	r25, 0x0539
    49ac:	82 17       	cp	r24, r18
    49ae:	93 07       	cpc	r25, r19
    49b0:	0c f0       	brlt	.+2      	; 0x49b4 <getInputFromSpeed+0xaa>
    49b2:	02 c2       	rjmp	.+1028   	; 0x4db8 <getInputFromSpeed+0x4ae>
    49b4:	80 91 48 05 	lds	r24, 0x0548
    49b8:	90 91 49 05 	lds	r25, 0x0549
    49bc:	82 17       	cp	r24, r18
    49be:	93 07       	cpc	r25, r19
    49c0:	0c f0       	brlt	.+2      	; 0x49c4 <getInputFromSpeed+0xba>
    49c2:	fd c1       	rjmp	.+1018   	; 0x4dbe <getInputFromSpeed+0x4b4>
    49c4:	c0 91 58 05 	lds	r28, 0x0558
    49c8:	d0 91 59 05 	lds	r29, 0x0559
    49cc:	c2 17       	cp	r28, r18
    49ce:	d3 07       	cpc	r29, r19
    49d0:	0c f0       	brlt	.+2      	; 0x49d4 <getInputFromSpeed+0xca>
    49d2:	7a c1       	rjmp	.+756    	; 0x4cc8 <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    49d4:	b9 01       	movw	r22, r18
    49d6:	88 27       	eor	r24, r24
    49d8:	77 fd       	sbrc	r23, 7
    49da:	80 95       	com	r24
    49dc:	98 2f       	mov	r25, r24
    49de:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    49e2:	7b 01       	movw	r14, r22
    49e4:	8c 01       	movw	r16, r24
    49e6:	60 91 56 05 	lds	r22, 0x0556
    49ea:	70 91 57 05 	lds	r23, 0x0557
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    49ee:	88 27       	eor	r24, r24
    49f0:	77 fd       	sbrc	r23, 7
    49f2:	80 95       	com	r24
    49f4:	98 2f       	mov	r25, r24
    49f6:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    49fa:	9b 01       	movw	r18, r22
    49fc:	ac 01       	movw	r20, r24
    49fe:	c8 01       	movw	r24, r16
    4a00:	b7 01       	movw	r22, r14
    4a02:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    4a06:	7b 01       	movw	r14, r22
    4a08:	8c 01       	movw	r16, r24
    4a0a:	be 01       	movw	r22, r28
    4a0c:	88 27       	eor	r24, r24
    4a0e:	77 fd       	sbrc	r23, 7
    4a10:	80 95       	com	r24
    4a12:	98 2f       	mov	r25, r24
    4a14:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4a18:	9b 01       	movw	r18, r22
    4a1a:	ac 01       	movw	r20, r24
    4a1c:	c8 01       	movw	r24, r16
    4a1e:	b7 01       	movw	r22, r14
    4a20:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    4a24:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    4a28:	02 c0       	rjmp	.+4      	; 0x4a2e <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    4a2a:	60 e0       	ldi	r22, 0x00	; 0
    4a2c:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    4a2e:	cb 01       	movw	r24, r22
    4a30:	df 91       	pop	r29
    4a32:	cf 91       	pop	r28
    4a34:	1f 91       	pop	r17
    4a36:	0f 91       	pop	r16
    4a38:	ff 90       	pop	r15
    4a3a:	ef 90       	pop	r14
    4a3c:	df 90       	pop	r13
    4a3e:	cf 90       	pop	r12
    4a40:	bf 90       	pop	r11
    4a42:	af 90       	pop	r10
    4a44:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    4a46:	30 95       	com	r19
    4a48:	21 95       	neg	r18
    4a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a4c:	63 30       	cpi	r22, 0x03	; 3
    4a4e:	09 f4       	brne	.+2      	; 0x4a52 <getInputFromSpeed+0x148>
    4a50:	f3 c0       	rjmp	.+486    	; 0x4c38 <getInputFromSpeed+0x32e>
    4a52:	62 30       	cpi	r22, 0x02	; 2
    4a54:	01 f1       	breq	.+64     	; 0x4a96 <getInputFromSpeed+0x18c>
    4a56:	61 30       	cpi	r22, 0x01	; 1
    4a58:	09 f4       	brne	.+2      	; 0x4a5c <getInputFromSpeed+0x152>
    4a5a:	98 c0       	rjmp	.+304    	; 0x4b8c <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    4a5c:	66 23       	and	r22, r22
    4a5e:	09 f4       	brne	.+2      	; 0x4a62 <getInputFromSpeed+0x158>
    4a60:	90 c0       	rjmp	.+288    	; 0x4b82 <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    4a62:	61 30       	cpi	r22, 0x01	; 1
    4a64:	09 f4       	brne	.+2      	; 0x4a68 <getInputFromSpeed+0x15e>
    4a66:	8c c1       	rjmp	.+792    	; 0x4d80 <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    4a68:	62 30       	cpi	r22, 0x02	; 2
    4a6a:	09 f4       	brne	.+2      	; 0x4a6e <getInputFromSpeed+0x164>
    4a6c:	a0 c1       	rjmp	.+832    	; 0x4dae <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    4a6e:	63 30       	cpi	r22, 0x03	; 3
    4a70:	e1 f6       	brne	.-72     	; 0x4a2a <getInputFromSpeed+0x120>
    4a72:	c0 91 64 05 	lds	r28, 0x0564
    4a76:	d0 91 65 05 	lds	r29, 0x0565
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    4a7a:	b9 01       	movw	r22, r18
    4a7c:	88 27       	eor	r24, r24
    4a7e:	77 fd       	sbrc	r23, 7
    4a80:	80 95       	com	r24
    4a82:	98 2f       	mov	r25, r24
    4a84:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4a88:	7b 01       	movw	r14, r22
    4a8a:	8c 01       	movw	r16, r24
    4a8c:	60 91 62 05 	lds	r22, 0x0562
    4a90:	70 91 63 05 	lds	r23, 0x0563
    4a94:	55 c0       	rjmp	.+170    	; 0x4b40 <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    4a96:	80 91 e0 04 	lds	r24, 0x04E0
    4a9a:	90 91 e1 04 	lds	r25, 0x04E1
    4a9e:	82 17       	cp	r24, r18
    4aa0:	93 07       	cpc	r25, r19
    4aa2:	0c f0       	brlt	.+2      	; 0x4aa6 <getInputFromSpeed+0x19c>
    4aa4:	72 c1       	rjmp	.+740    	; 0x4d8a <getInputFromSpeed+0x480>
    4aa6:	80 91 f0 04 	lds	r24, 0x04F0
    4aaa:	90 91 f1 04 	lds	r25, 0x04F1
    4aae:	82 17       	cp	r24, r18
    4ab0:	93 07       	cpc	r25, r19
    4ab2:	0c f0       	brlt	.+2      	; 0x4ab6 <getInputFromSpeed+0x1ac>
    4ab4:	73 c1       	rjmp	.+742    	; 0x4d9c <getInputFromSpeed+0x492>
    4ab6:	80 91 00 05 	lds	r24, 0x0500
    4aba:	90 91 01 05 	lds	r25, 0x0501
    4abe:	82 17       	cp	r24, r18
    4ac0:	93 07       	cpc	r25, r19
    4ac2:	0c f0       	brlt	.+2      	; 0x4ac6 <getInputFromSpeed+0x1bc>
    4ac4:	6e c1       	rjmp	.+732    	; 0x4da2 <getInputFromSpeed+0x498>
    4ac6:	80 91 10 05 	lds	r24, 0x0510
    4aca:	90 91 11 05 	lds	r25, 0x0511
    4ace:	82 17       	cp	r24, r18
    4ad0:	93 07       	cpc	r25, r19
    4ad2:	0c f0       	brlt	.+2      	; 0x4ad6 <getInputFromSpeed+0x1cc>
    4ad4:	69 c1       	rjmp	.+722    	; 0x4da8 <getInputFromSpeed+0x49e>
    4ad6:	80 91 20 05 	lds	r24, 0x0520
    4ada:	90 91 21 05 	lds	r25, 0x0521
    4ade:	82 17       	cp	r24, r18
    4ae0:	93 07       	cpc	r25, r19
    4ae2:	0c f0       	brlt	.+2      	; 0x4ae6 <getInputFromSpeed+0x1dc>
    4ae4:	55 c1       	rjmp	.+682    	; 0x4d90 <getInputFromSpeed+0x486>
    4ae6:	80 91 30 05 	lds	r24, 0x0530
    4aea:	90 91 31 05 	lds	r25, 0x0531
    4aee:	82 17       	cp	r24, r18
    4af0:	93 07       	cpc	r25, r19
    4af2:	0c f0       	brlt	.+2      	; 0x4af6 <getInputFromSpeed+0x1ec>
    4af4:	50 c1       	rjmp	.+672    	; 0x4d96 <getInputFromSpeed+0x48c>
    4af6:	80 91 40 05 	lds	r24, 0x0540
    4afa:	90 91 41 05 	lds	r25, 0x0541
    4afe:	82 17       	cp	r24, r18
    4b00:	93 07       	cpc	r25, r19
    4b02:	0c f0       	brlt	.+2      	; 0x4b06 <getInputFromSpeed+0x1fc>
    4b04:	59 c1       	rjmp	.+690    	; 0x4db8 <getInputFromSpeed+0x4ae>
    4b06:	80 91 50 05 	lds	r24, 0x0550
    4b0a:	90 91 51 05 	lds	r25, 0x0551
    4b0e:	82 17       	cp	r24, r18
    4b10:	93 07       	cpc	r25, r19
    4b12:	0c f0       	brlt	.+2      	; 0x4b16 <getInputFromSpeed+0x20c>
    4b14:	54 c1       	rjmp	.+680    	; 0x4dbe <getInputFromSpeed+0x4b4>
    4b16:	c0 91 60 05 	lds	r28, 0x0560
    4b1a:	d0 91 61 05 	lds	r29, 0x0561
    4b1e:	c2 17       	cp	r28, r18
    4b20:	d3 07       	cpc	r29, r19
    4b22:	0c f0       	brlt	.+2      	; 0x4b26 <getInputFromSpeed+0x21c>
    4b24:	d1 c0       	rjmp	.+418    	; 0x4cc8 <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    4b26:	b9 01       	movw	r22, r18
    4b28:	88 27       	eor	r24, r24
    4b2a:	77 fd       	sbrc	r23, 7
    4b2c:	80 95       	com	r24
    4b2e:	98 2f       	mov	r25, r24
    4b30:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4b34:	7b 01       	movw	r14, r22
    4b36:	8c 01       	movw	r16, r24
    4b38:	60 91 5e 05 	lds	r22, 0x055E
    4b3c:	70 91 5f 05 	lds	r23, 0x055F
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    4b40:	88 27       	eor	r24, r24
    4b42:	77 fd       	sbrc	r23, 7
    4b44:	80 95       	com	r24
    4b46:	98 2f       	mov	r25, r24
    4b48:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4b4c:	9b 01       	movw	r18, r22
    4b4e:	ac 01       	movw	r20, r24
    4b50:	c8 01       	movw	r24, r16
    4b52:	b7 01       	movw	r22, r14
    4b54:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    4b58:	7b 01       	movw	r14, r22
    4b5a:	8c 01       	movw	r16, r24
    4b5c:	be 01       	movw	r22, r28
    4b5e:	88 27       	eor	r24, r24
    4b60:	77 fd       	sbrc	r23, 7
    4b62:	80 95       	com	r24
    4b64:	98 2f       	mov	r25, r24
    4b66:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4b6a:	9b 01       	movw	r18, r22
    4b6c:	ac 01       	movw	r20, r24
    4b6e:	c8 01       	movw	r24, r16
    4b70:	b7 01       	movw	r22, r14
    4b72:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    4b76:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
            temp = -temp;
    4b7a:	70 95       	com	r23
    4b7c:	61 95       	neg	r22
    4b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b80:	56 cf       	rjmp	.-340    	; 0x4a2e <getInputFromSpeed+0x124>
    4b82:	c0 91 58 05 	lds	r28, 0x0558
    4b86:	d0 91 59 05 	lds	r29, 0x0559
    4b8a:	24 cf       	rjmp	.-440    	; 0x49d4 <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    4b8c:	80 91 dc 04 	lds	r24, 0x04DC
    4b90:	90 91 dd 04 	lds	r25, 0x04DD
    4b94:	82 17       	cp	r24, r18
    4b96:	93 07       	cpc	r25, r19
    4b98:	0c f0       	brlt	.+2      	; 0x4b9c <getInputFromSpeed+0x292>
    4b9a:	f7 c0       	rjmp	.+494    	; 0x4d8a <getInputFromSpeed+0x480>
    4b9c:	80 91 ec 04 	lds	r24, 0x04EC
    4ba0:	90 91 ed 04 	lds	r25, 0x04ED
    4ba4:	82 17       	cp	r24, r18
    4ba6:	93 07       	cpc	r25, r19
    4ba8:	0c f0       	brlt	.+2      	; 0x4bac <getInputFromSpeed+0x2a2>
    4baa:	f8 c0       	rjmp	.+496    	; 0x4d9c <getInputFromSpeed+0x492>
    4bac:	80 91 fc 04 	lds	r24, 0x04FC
    4bb0:	90 91 fd 04 	lds	r25, 0x04FD
    4bb4:	82 17       	cp	r24, r18
    4bb6:	93 07       	cpc	r25, r19
    4bb8:	0c f0       	brlt	.+2      	; 0x4bbc <getInputFromSpeed+0x2b2>
    4bba:	f3 c0       	rjmp	.+486    	; 0x4da2 <getInputFromSpeed+0x498>
    4bbc:	80 91 0c 05 	lds	r24, 0x050C
    4bc0:	90 91 0d 05 	lds	r25, 0x050D
    4bc4:	82 17       	cp	r24, r18
    4bc6:	93 07       	cpc	r25, r19
    4bc8:	0c f0       	brlt	.+2      	; 0x4bcc <getInputFromSpeed+0x2c2>
    4bca:	ee c0       	rjmp	.+476    	; 0x4da8 <getInputFromSpeed+0x49e>
    4bcc:	80 91 1c 05 	lds	r24, 0x051C
    4bd0:	90 91 1d 05 	lds	r25, 0x051D
    4bd4:	82 17       	cp	r24, r18
    4bd6:	93 07       	cpc	r25, r19
    4bd8:	0c f0       	brlt	.+2      	; 0x4bdc <getInputFromSpeed+0x2d2>
    4bda:	da c0       	rjmp	.+436    	; 0x4d90 <getInputFromSpeed+0x486>
    4bdc:	80 91 2c 05 	lds	r24, 0x052C
    4be0:	90 91 2d 05 	lds	r25, 0x052D
    4be4:	82 17       	cp	r24, r18
    4be6:	93 07       	cpc	r25, r19
    4be8:	0c f0       	brlt	.+2      	; 0x4bec <getInputFromSpeed+0x2e2>
    4bea:	d5 c0       	rjmp	.+426    	; 0x4d96 <getInputFromSpeed+0x48c>
    4bec:	80 91 3c 05 	lds	r24, 0x053C
    4bf0:	90 91 3d 05 	lds	r25, 0x053D
    4bf4:	82 17       	cp	r24, r18
    4bf6:	93 07       	cpc	r25, r19
    4bf8:	0c f0       	brlt	.+2      	; 0x4bfc <getInputFromSpeed+0x2f2>
    4bfa:	de c0       	rjmp	.+444    	; 0x4db8 <getInputFromSpeed+0x4ae>
    4bfc:	80 91 4c 05 	lds	r24, 0x054C
    4c00:	90 91 4d 05 	lds	r25, 0x054D
    4c04:	82 17       	cp	r24, r18
    4c06:	93 07       	cpc	r25, r19
    4c08:	0c f0       	brlt	.+2      	; 0x4c0c <getInputFromSpeed+0x302>
    4c0a:	d9 c0       	rjmp	.+434    	; 0x4dbe <getInputFromSpeed+0x4b4>
    4c0c:	c0 91 5c 05 	lds	r28, 0x055C
    4c10:	d0 91 5d 05 	lds	r29, 0x055D
    4c14:	c2 17       	cp	r28, r18
    4c16:	d3 07       	cpc	r29, r19
    4c18:	0c f0       	brlt	.+2      	; 0x4c1c <getInputFromSpeed+0x312>
    4c1a:	56 c0       	rjmp	.+172    	; 0x4cc8 <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    4c1c:	b9 01       	movw	r22, r18
    4c1e:	88 27       	eor	r24, r24
    4c20:	77 fd       	sbrc	r23, 7
    4c22:	80 95       	com	r24
    4c24:	98 2f       	mov	r25, r24
    4c26:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4c2a:	7b 01       	movw	r14, r22
    4c2c:	8c 01       	movw	r16, r24
    4c2e:	60 91 5a 05 	lds	r22, 0x055A
    4c32:	70 91 5b 05 	lds	r23, 0x055B
    4c36:	db ce       	rjmp	.-586    	; 0x49ee <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    4c38:	80 91 e4 04 	lds	r24, 0x04E4
    4c3c:	90 91 e5 04 	lds	r25, 0x04E5
    4c40:	82 17       	cp	r24, r18
    4c42:	93 07       	cpc	r25, r19
    4c44:	0c f0       	brlt	.+2      	; 0x4c48 <getInputFromSpeed+0x33e>
    4c46:	a1 c0       	rjmp	.+322    	; 0x4d8a <getInputFromSpeed+0x480>
    4c48:	80 91 f4 04 	lds	r24, 0x04F4
    4c4c:	90 91 f5 04 	lds	r25, 0x04F5
    4c50:	82 17       	cp	r24, r18
    4c52:	93 07       	cpc	r25, r19
    4c54:	0c f0       	brlt	.+2      	; 0x4c58 <getInputFromSpeed+0x34e>
    4c56:	a2 c0       	rjmp	.+324    	; 0x4d9c <getInputFromSpeed+0x492>
    4c58:	80 91 04 05 	lds	r24, 0x0504
    4c5c:	90 91 05 05 	lds	r25, 0x0505
    4c60:	82 17       	cp	r24, r18
    4c62:	93 07       	cpc	r25, r19
    4c64:	0c f0       	brlt	.+2      	; 0x4c68 <getInputFromSpeed+0x35e>
    4c66:	9d c0       	rjmp	.+314    	; 0x4da2 <getInputFromSpeed+0x498>
    4c68:	80 91 14 05 	lds	r24, 0x0514
    4c6c:	90 91 15 05 	lds	r25, 0x0515
    4c70:	82 17       	cp	r24, r18
    4c72:	93 07       	cpc	r25, r19
    4c74:	0c f0       	brlt	.+2      	; 0x4c78 <getInputFromSpeed+0x36e>
    4c76:	98 c0       	rjmp	.+304    	; 0x4da8 <getInputFromSpeed+0x49e>
    4c78:	80 91 24 05 	lds	r24, 0x0524
    4c7c:	90 91 25 05 	lds	r25, 0x0525
    4c80:	82 17       	cp	r24, r18
    4c82:	93 07       	cpc	r25, r19
    4c84:	0c f0       	brlt	.+2      	; 0x4c88 <getInputFromSpeed+0x37e>
    4c86:	84 c0       	rjmp	.+264    	; 0x4d90 <getInputFromSpeed+0x486>
    4c88:	80 91 34 05 	lds	r24, 0x0534
    4c8c:	90 91 35 05 	lds	r25, 0x0535
    4c90:	82 17       	cp	r24, r18
    4c92:	93 07       	cpc	r25, r19
    4c94:	0c f0       	brlt	.+2      	; 0x4c98 <getInputFromSpeed+0x38e>
    4c96:	7f c0       	rjmp	.+254    	; 0x4d96 <getInputFromSpeed+0x48c>
    4c98:	80 91 44 05 	lds	r24, 0x0544
    4c9c:	90 91 45 05 	lds	r25, 0x0545
    4ca0:	82 17       	cp	r24, r18
    4ca2:	93 07       	cpc	r25, r19
    4ca4:	0c f0       	brlt	.+2      	; 0x4ca8 <getInputFromSpeed+0x39e>
    4ca6:	88 c0       	rjmp	.+272    	; 0x4db8 <getInputFromSpeed+0x4ae>
    4ca8:	80 91 54 05 	lds	r24, 0x0554
    4cac:	90 91 55 05 	lds	r25, 0x0555
    4cb0:	82 17       	cp	r24, r18
    4cb2:	93 07       	cpc	r25, r19
    4cb4:	0c f0       	brlt	.+2      	; 0x4cb8 <getInputFromSpeed+0x3ae>
    4cb6:	83 c0       	rjmp	.+262    	; 0x4dbe <getInputFromSpeed+0x4b4>
    4cb8:	c0 91 64 05 	lds	r28, 0x0564
    4cbc:	d0 91 65 05 	lds	r29, 0x0565
    4cc0:	c2 17       	cp	r28, r18
    4cc2:	d3 07       	cpc	r29, r19
    4cc4:	0c f4       	brge	.+2      	; 0x4cc8 <getInputFromSpeed+0x3be>
    4cc6:	d9 ce       	rjmp	.-590    	; 0x4a7a <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    4cc8:	c8 e0       	ldi	r28, 0x08	; 8
    4cca:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    4ccc:	20 97       	sbiw	r28, 0x00	; 0
    4cce:	09 f0       	breq	.+2      	; 0x4cd2 <getInputFromSpeed+0x3c8>
    4cd0:	79 c0       	rjmp	.+242    	; 0x4dc4 <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    4cd2:	66 23       	and	r22, r22
    4cd4:	91 f4       	brne	.+36     	; 0x4cfa <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    4cd6:	40 91 d6 04 	lds	r20, 0x04D6
    4cda:	50 91 d7 04 	lds	r21, 0x04D7
    4cde:	24 9f       	mul	r18, r20
    4ce0:	c0 01       	movw	r24, r0
    4ce2:	25 9f       	mul	r18, r21
    4ce4:	90 0d       	add	r25, r0
    4ce6:	34 9f       	mul	r19, r20
    4ce8:	90 0d       	add	r25, r0
    4cea:	11 24       	eor	r1, r1
    4cec:	60 91 d8 04 	lds	r22, 0x04D8
    4cf0:	70 91 d9 04 	lds	r23, 0x04D9
    4cf4:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
    4cf8:	9a ce       	rjmp	.-716    	; 0x4a2e <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    4cfa:	61 30       	cpi	r22, 0x01	; 1
    4cfc:	d1 f0       	breq	.+52     	; 0x4d32 <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    4cfe:	62 30       	cpi	r22, 0x02	; 2
    4d00:	51 f1       	breq	.+84     	; 0x4d56 <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    4d02:	63 30       	cpi	r22, 0x03	; 3
    4d04:	09 f0       	breq	.+2      	; 0x4d08 <getInputFromSpeed+0x3fe>
    4d06:	91 ce       	rjmp	.-734    	; 0x4a2a <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    4d08:	40 91 e2 04 	lds	r20, 0x04E2
    4d0c:	50 91 e3 04 	lds	r21, 0x04E3
    4d10:	24 9f       	mul	r18, r20
    4d12:	c0 01       	movw	r24, r0
    4d14:	25 9f       	mul	r18, r21
    4d16:	90 0d       	add	r25, r0
    4d18:	34 9f       	mul	r19, r20
    4d1a:	90 0d       	add	r25, r0
    4d1c:	11 24       	eor	r1, r1
    4d1e:	60 91 e4 04 	lds	r22, 0x04E4
    4d22:	70 91 e5 04 	lds	r23, 0x04E5
    4d26:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
            temp = -temp;
    4d2a:	70 95       	com	r23
    4d2c:	61 95       	neg	r22
    4d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d30:	7e ce       	rjmp	.-772    	; 0x4a2e <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    4d32:	40 91 da 04 	lds	r20, 0x04DA
    4d36:	50 91 db 04 	lds	r21, 0x04DB
    4d3a:	24 9f       	mul	r18, r20
    4d3c:	c0 01       	movw	r24, r0
    4d3e:	25 9f       	mul	r18, r21
    4d40:	90 0d       	add	r25, r0
    4d42:	34 9f       	mul	r19, r20
    4d44:	90 0d       	add	r25, r0
    4d46:	11 24       	eor	r1, r1
    4d48:	60 91 dc 04 	lds	r22, 0x04DC
    4d4c:	70 91 dd 04 	lds	r23, 0x04DD
    4d50:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
    4d54:	6c ce       	rjmp	.-808    	; 0x4a2e <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    4d56:	40 91 de 04 	lds	r20, 0x04DE
    4d5a:	50 91 df 04 	lds	r21, 0x04DF
    4d5e:	24 9f       	mul	r18, r20
    4d60:	c0 01       	movw	r24, r0
    4d62:	25 9f       	mul	r18, r21
    4d64:	90 0d       	add	r25, r0
    4d66:	34 9f       	mul	r19, r20
    4d68:	90 0d       	add	r25, r0
    4d6a:	11 24       	eor	r1, r1
    4d6c:	60 91 e0 04 	lds	r22, 0x04E0
    4d70:	70 91 e1 04 	lds	r23, 0x04E1
    4d74:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
            temp = -temp;
    4d78:	70 95       	com	r23
    4d7a:	61 95       	neg	r22
    4d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d7e:	57 ce       	rjmp	.-850    	; 0x4a2e <getInputFromSpeed+0x124>
    4d80:	c0 91 5c 05 	lds	r28, 0x055C
    4d84:	d0 91 5d 05 	lds	r29, 0x055D
    4d88:	49 cf       	rjmp	.-366    	; 0x4c1c <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4d8a:	c0 e0       	ldi	r28, 0x00	; 0
    4d8c:	d0 e0       	ldi	r29, 0x00	; 0
    4d8e:	9e cf       	rjmp	.-196    	; 0x4ccc <getInputFromSpeed+0x3c2>
    4d90:	c4 e0       	ldi	r28, 0x04	; 4
    4d92:	d0 e0       	ldi	r29, 0x00	; 0
    4d94:	9b cf       	rjmp	.-202    	; 0x4ccc <getInputFromSpeed+0x3c2>
    4d96:	c5 e0       	ldi	r28, 0x05	; 5
    4d98:	d0 e0       	ldi	r29, 0x00	; 0
    4d9a:	98 cf       	rjmp	.-208    	; 0x4ccc <getInputFromSpeed+0x3c2>
    4d9c:	c1 e0       	ldi	r28, 0x01	; 1
    4d9e:	d0 e0       	ldi	r29, 0x00	; 0
    4da0:	95 cf       	rjmp	.-214    	; 0x4ccc <getInputFromSpeed+0x3c2>
    4da2:	c2 e0       	ldi	r28, 0x02	; 2
    4da4:	d0 e0       	ldi	r29, 0x00	; 0
    4da6:	92 cf       	rjmp	.-220    	; 0x4ccc <getInputFromSpeed+0x3c2>
    4da8:	c3 e0       	ldi	r28, 0x03	; 3
    4daa:	d0 e0       	ldi	r29, 0x00	; 0
    4dac:	8f cf       	rjmp	.-226    	; 0x4ccc <getInputFromSpeed+0x3c2>
    4dae:	c0 91 60 05 	lds	r28, 0x0560
    4db2:	d0 91 61 05 	lds	r29, 0x0561
    4db6:	b7 ce       	rjmp	.-658    	; 0x4b26 <getInputFromSpeed+0x21c>
    4db8:	c6 e0       	ldi	r28, 0x06	; 6
    4dba:	d0 e0       	ldi	r29, 0x00	; 0
    4dbc:	87 cf       	rjmp	.-242    	; 0x4ccc <getInputFromSpeed+0x3c2>
    4dbe:	c7 e0       	ldi	r28, 0x07	; 7
    4dc0:	d0 e0       	ldi	r29, 0x00	; 0
    4dc2:	84 cf       	rjmp	.-248    	; 0x4ccc <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    4dc4:	c9 30       	cpi	r28, 0x09	; 9
    4dc6:	d1 05       	cpc	r29, r1
    4dc8:	09 f4       	brne	.+2      	; 0x4dcc <getInputFromSpeed+0x4c2>
    4dca:	48 ce       	rjmp	.-880    	; 0x4a5c <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    4dcc:	66 23       	and	r22, r22
    4dce:	09 f0       	breq	.+2      	; 0x4dd2 <getInputFromSpeed+0x4c8>
    4dd0:	47 c0       	rjmp	.+142    	; 0x4e60 <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    4dd2:	fe 01       	movw	r30, r28
    4dd4:	e2 95       	swap	r30
    4dd6:	f2 95       	swap	r31
    4dd8:	f0 7f       	andi	r31, 0xF0	; 240
    4dda:	fe 27       	eor	r31, r30
    4ddc:	e0 7f       	andi	r30, 0xF0	; 240
    4dde:	fe 27       	eor	r31, r30
    4de0:	ea 53       	subi	r30, 0x3A	; 58
    4de2:	fb 4f       	sbci	r31, 0xFB	; 251
    4de4:	c2 80       	ldd	r12, Z+2	; 0x02
    4de6:	d3 80       	ldd	r13, Z+3	; 0x03
    4de8:	a0 80       	ld	r10, Z
    4dea:	b1 80       	ldd	r11, Z+1	; 0x01
    4dec:	2c 19       	sub	r18, r12
    4dee:	3d 09       	sbc	r19, r13
    4df0:	b9 01       	movw	r22, r18
    4df2:	88 27       	eor	r24, r24
    4df4:	77 fd       	sbrc	r23, 7
    4df6:	80 95       	com	r24
    4df8:	98 2f       	mov	r25, r24
    4dfa:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4dfe:	7b 01       	movw	r14, r22
    4e00:	8c 01       	movw	r16, r24
    4e02:	c2 95       	swap	r28
    4e04:	d2 95       	swap	r29
    4e06:	d0 7f       	andi	r29, 0xF0	; 240
    4e08:	dc 27       	eor	r29, r28
    4e0a:	c0 7f       	andi	r28, 0xF0	; 240
    4e0c:	dc 27       	eor	r29, r28
    4e0e:	ca 52       	subi	r28, 0x2A	; 42
    4e10:	db 4f       	sbci	r29, 0xFB	; 251
    4e12:	68 81       	ld	r22, Y
    4e14:	79 81       	ldd	r23, Y+1	; 0x01
    4e16:	6a 19       	sub	r22, r10
    4e18:	7b 09       	sbc	r23, r11
    4e1a:	88 27       	eor	r24, r24
    4e1c:	77 fd       	sbrc	r23, 7
    4e1e:	80 95       	com	r24
    4e20:	98 2f       	mov	r25, r24
    4e22:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4e26:	9b 01       	movw	r18, r22
    4e28:	ac 01       	movw	r20, r24
    4e2a:	c8 01       	movw	r24, r16
    4e2c:	b7 01       	movw	r22, r14
    4e2e:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    4e32:	7b 01       	movw	r14, r22
    4e34:	8c 01       	movw	r16, r24
    4e36:	6a 81       	ldd	r22, Y+2	; 0x02
    4e38:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    4e3a:	6c 19       	sub	r22, r12
    4e3c:	7d 09       	sbc	r23, r13
    4e3e:	88 27       	eor	r24, r24
    4e40:	77 fd       	sbrc	r23, 7
    4e42:	80 95       	com	r24
    4e44:	98 2f       	mov	r25, r24
    4e46:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4e4a:	9b 01       	movw	r18, r22
    4e4c:	ac 01       	movw	r20, r24
    4e4e:	c8 01       	movw	r24, r16
    4e50:	b7 01       	movw	r22, r14
    4e52:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    4e56:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    4e5a:	6a 0d       	add	r22, r10
    4e5c:	7b 1d       	adc	r23, r11
    4e5e:	e7 cd       	rjmp	.-1074   	; 0x4a2e <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    4e60:	61 30       	cpi	r22, 0x01	; 1
    4e62:	09 f4       	brne	.+2      	; 0x4e66 <getInputFromSpeed+0x55c>
    4e64:	50 c0       	rjmp	.+160    	; 0x4f06 <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    4e66:	62 30       	cpi	r22, 0x02	; 2
    4e68:	09 f4       	brne	.+2      	; 0x4e6c <getInputFromSpeed+0x562>
    4e6a:	82 c0       	rjmp	.+260    	; 0x4f70 <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    4e6c:	63 30       	cpi	r22, 0x03	; 3
    4e6e:	09 f0       	breq	.+2      	; 0x4e72 <getInputFromSpeed+0x568>
    4e70:	dc cd       	rjmp	.-1096   	; 0x4a2a <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    4e72:	fe 01       	movw	r30, r28
    4e74:	e2 95       	swap	r30
    4e76:	f2 95       	swap	r31
    4e78:	f0 7f       	andi	r31, 0xF0	; 240
    4e7a:	fe 27       	eor	r31, r30
    4e7c:	e0 7f       	andi	r30, 0xF0	; 240
    4e7e:	fe 27       	eor	r31, r30
    4e80:	ea 53       	subi	r30, 0x3A	; 58
    4e82:	fb 4f       	sbci	r31, 0xFB	; 251
    4e84:	c6 84       	ldd	r12, Z+14	; 0x0e
    4e86:	d7 84       	ldd	r13, Z+15	; 0x0f
    4e88:	a4 84       	ldd	r10, Z+12	; 0x0c
    4e8a:	b5 84       	ldd	r11, Z+13	; 0x0d
    4e8c:	2c 19       	sub	r18, r12
    4e8e:	3d 09       	sbc	r19, r13
    4e90:	b9 01       	movw	r22, r18
    4e92:	88 27       	eor	r24, r24
    4e94:	77 fd       	sbrc	r23, 7
    4e96:	80 95       	com	r24
    4e98:	98 2f       	mov	r25, r24
    4e9a:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4e9e:	7b 01       	movw	r14, r22
    4ea0:	8c 01       	movw	r16, r24
    4ea2:	c2 95       	swap	r28
    4ea4:	d2 95       	swap	r29
    4ea6:	d0 7f       	andi	r29, 0xF0	; 240
    4ea8:	dc 27       	eor	r29, r28
    4eaa:	c0 7f       	andi	r28, 0xF0	; 240
    4eac:	dc 27       	eor	r29, r28
    4eae:	ca 52       	subi	r28, 0x2A	; 42
    4eb0:	db 4f       	sbci	r29, 0xFB	; 251
    4eb2:	6c 85       	ldd	r22, Y+12	; 0x0c
    4eb4:	7d 85       	ldd	r23, Y+13	; 0x0d
    4eb6:	6a 19       	sub	r22, r10
    4eb8:	7b 09       	sbc	r23, r11
    4eba:	88 27       	eor	r24, r24
    4ebc:	77 fd       	sbrc	r23, 7
    4ebe:	80 95       	com	r24
    4ec0:	98 2f       	mov	r25, r24
    4ec2:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4ec6:	9b 01       	movw	r18, r22
    4ec8:	ac 01       	movw	r20, r24
    4eca:	c8 01       	movw	r24, r16
    4ecc:	b7 01       	movw	r22, r14
    4ece:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    4ed2:	7b 01       	movw	r14, r22
    4ed4:	8c 01       	movw	r16, r24
    4ed6:	6e 85       	ldd	r22, Y+14	; 0x0e
    4ed8:	7f 85       	ldd	r23, Y+15	; 0x0f
    4eda:	6c 19       	sub	r22, r12
    4edc:	7d 09       	sbc	r23, r13
    4ede:	88 27       	eor	r24, r24
    4ee0:	77 fd       	sbrc	r23, 7
    4ee2:	80 95       	com	r24
    4ee4:	98 2f       	mov	r25, r24
    4ee6:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4eea:	9b 01       	movw	r18, r22
    4eec:	ac 01       	movw	r20, r24
    4eee:	c8 01       	movw	r24, r16
    4ef0:	b7 01       	movw	r22, r14
    4ef2:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    4ef6:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    4efa:	6a 0d       	add	r22, r10
    4efc:	7b 1d       	adc	r23, r11
            temp = -temp;
    4efe:	70 95       	com	r23
    4f00:	61 95       	neg	r22
    4f02:	7f 4f       	sbci	r23, 0xFF	; 255
    4f04:	94 cd       	rjmp	.-1240   	; 0x4a2e <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    4f06:	fe 01       	movw	r30, r28
    4f08:	e2 95       	swap	r30
    4f0a:	f2 95       	swap	r31
    4f0c:	f0 7f       	andi	r31, 0xF0	; 240
    4f0e:	fe 27       	eor	r31, r30
    4f10:	e0 7f       	andi	r30, 0xF0	; 240
    4f12:	fe 27       	eor	r31, r30
    4f14:	ea 53       	subi	r30, 0x3A	; 58
    4f16:	fb 4f       	sbci	r31, 0xFB	; 251
    4f18:	c6 80       	ldd	r12, Z+6	; 0x06
    4f1a:	d7 80       	ldd	r13, Z+7	; 0x07
    4f1c:	a4 80       	ldd	r10, Z+4	; 0x04
    4f1e:	b5 80       	ldd	r11, Z+5	; 0x05
    4f20:	2c 19       	sub	r18, r12
    4f22:	3d 09       	sbc	r19, r13
    4f24:	b9 01       	movw	r22, r18
    4f26:	88 27       	eor	r24, r24
    4f28:	77 fd       	sbrc	r23, 7
    4f2a:	80 95       	com	r24
    4f2c:	98 2f       	mov	r25, r24
    4f2e:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4f32:	7b 01       	movw	r14, r22
    4f34:	8c 01       	movw	r16, r24
    4f36:	c2 95       	swap	r28
    4f38:	d2 95       	swap	r29
    4f3a:	d0 7f       	andi	r29, 0xF0	; 240
    4f3c:	dc 27       	eor	r29, r28
    4f3e:	c0 7f       	andi	r28, 0xF0	; 240
    4f40:	dc 27       	eor	r29, r28
    4f42:	ca 52       	subi	r28, 0x2A	; 42
    4f44:	db 4f       	sbci	r29, 0xFB	; 251
    4f46:	6c 81       	ldd	r22, Y+4	; 0x04
    4f48:	7d 81       	ldd	r23, Y+5	; 0x05
    4f4a:	6a 19       	sub	r22, r10
    4f4c:	7b 09       	sbc	r23, r11
    4f4e:	88 27       	eor	r24, r24
    4f50:	77 fd       	sbrc	r23, 7
    4f52:	80 95       	com	r24
    4f54:	98 2f       	mov	r25, r24
    4f56:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4f5a:	9b 01       	movw	r18, r22
    4f5c:	ac 01       	movw	r20, r24
    4f5e:	c8 01       	movw	r24, r16
    4f60:	b7 01       	movw	r22, r14
    4f62:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    4f66:	7b 01       	movw	r14, r22
    4f68:	8c 01       	movw	r16, r24
    4f6a:	6e 81       	ldd	r22, Y+6	; 0x06
    4f6c:	7f 81       	ldd	r23, Y+7	; 0x07
    4f6e:	65 cf       	rjmp	.-310    	; 0x4e3a <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    4f70:	fe 01       	movw	r30, r28
    4f72:	e2 95       	swap	r30
    4f74:	f2 95       	swap	r31
    4f76:	f0 7f       	andi	r31, 0xF0	; 240
    4f78:	fe 27       	eor	r31, r30
    4f7a:	e0 7f       	andi	r30, 0xF0	; 240
    4f7c:	fe 27       	eor	r31, r30
    4f7e:	ea 53       	subi	r30, 0x3A	; 58
    4f80:	fb 4f       	sbci	r31, 0xFB	; 251
    4f82:	c2 84       	ldd	r12, Z+10	; 0x0a
    4f84:	d3 84       	ldd	r13, Z+11	; 0x0b
    4f86:	a0 84       	ldd	r10, Z+8	; 0x08
    4f88:	b1 84       	ldd	r11, Z+9	; 0x09
    4f8a:	2c 19       	sub	r18, r12
    4f8c:	3d 09       	sbc	r19, r13
    4f8e:	b9 01       	movw	r22, r18
    4f90:	88 27       	eor	r24, r24
    4f92:	77 fd       	sbrc	r23, 7
    4f94:	80 95       	com	r24
    4f96:	98 2f       	mov	r25, r24
    4f98:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4f9c:	7b 01       	movw	r14, r22
    4f9e:	8c 01       	movw	r16, r24
    4fa0:	c2 95       	swap	r28
    4fa2:	d2 95       	swap	r29
    4fa4:	d0 7f       	andi	r29, 0xF0	; 240
    4fa6:	dc 27       	eor	r29, r28
    4fa8:	c0 7f       	andi	r28, 0xF0	; 240
    4faa:	dc 27       	eor	r29, r28
    4fac:	ca 52       	subi	r28, 0x2A	; 42
    4fae:	db 4f       	sbci	r29, 0xFB	; 251
    4fb0:	68 85       	ldd	r22, Y+8	; 0x08
    4fb2:	79 85       	ldd	r23, Y+9	; 0x09
    4fb4:	6a 19       	sub	r22, r10
    4fb6:	7b 09       	sbc	r23, r11
    4fb8:	88 27       	eor	r24, r24
    4fba:	77 fd       	sbrc	r23, 7
    4fbc:	80 95       	com	r24
    4fbe:	98 2f       	mov	r25, r24
    4fc0:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    4fc4:	9b 01       	movw	r18, r22
    4fc6:	ac 01       	movw	r20, r24
    4fc8:	c8 01       	movw	r24, r16
    4fca:	b7 01       	movw	r22, r14
    4fcc:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    4fd0:	7b 01       	movw	r14, r22
    4fd2:	8c 01       	movw	r16, r24
    4fd4:	6a 85       	ldd	r22, Y+10	; 0x0a
    4fd6:	7b 85       	ldd	r23, Y+11	; 0x0b
    4fd8:	80 cf       	rjmp	.-256    	; 0x4eda <getInputFromSpeed+0x5d0>

00004fda <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    4fda:	8f 92       	push	r8
    4fdc:	9f 92       	push	r9
    4fde:	af 92       	push	r10
    4fe0:	bf 92       	push	r11
    4fe2:	cf 92       	push	r12
    4fe4:	df 92       	push	r13
    4fe6:	ef 92       	push	r14
    4fe8:	ff 92       	push	r15
    4fea:	0f 93       	push	r16
    4fec:	1f 93       	push	r17
    4fee:	cf 93       	push	r28
    4ff0:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    4ff2:	c0 91 f1 02 	lds	r28, 0x02F1
    4ff6:	d0 91 f2 02 	lds	r29, 0x02F2
    4ffa:	80 91 f3 02 	lds	r24, 0x02F3
    4ffe:	90 91 f4 02 	lds	r25, 0x02F4
    5002:	97 fd       	sbrc	r25, 7
    5004:	d9 c0       	rjmp	.+434    	; 0x51b8 <getRightSpeedFromInput+0x1de>
    5006:	60 91 da 04 	lds	r22, 0x04DA
    500a:	70 91 db 04 	lds	r23, 0x04DB
    500e:	6c 17       	cp	r22, r28
    5010:	7d 07       	cpc	r23, r29
    5012:	0c f0       	brlt	.+2      	; 0x5016 <getRightSpeedFromInput+0x3c>
    5014:	bd c0       	rjmp	.+378    	; 0x5190 <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    5016:	0f ef       	ldi	r16, 0xFF	; 255
    5018:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    501a:	80 91 ea 04 	lds	r24, 0x04EA
    501e:	90 91 eb 04 	lds	r25, 0x04EB
    5022:	8c 17       	cp	r24, r28
    5024:	9d 07       	cpc	r25, r29
    5026:	44 f0       	brlt	.+16     	; 0x5038 <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5028:	81 e0       	ldi	r24, 0x01	; 1
    502a:	9f ef       	ldi	r25, 0xFF	; 255
    502c:	0f 3f       	cpi	r16, 0xFF	; 255
    502e:	19 07       	cpc	r17, r25
    5030:	09 f0       	breq	.+2      	; 0x5034 <getRightSpeedFromInput+0x5a>
    5032:	80 e0       	ldi	r24, 0x00	; 0
    5034:	08 2f       	mov	r16, r24
    5036:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5038:	80 91 fa 04 	lds	r24, 0x04FA
    503c:	90 91 fb 04 	lds	r25, 0x04FB
    5040:	8c 17       	cp	r24, r28
    5042:	9d 07       	cpc	r25, r29
    5044:	2c f0       	brlt	.+10     	; 0x5050 <getRightSpeedFromInput+0x76>
    5046:	8f ef       	ldi	r24, 0xFF	; 255
    5048:	0f 3f       	cpi	r16, 0xFF	; 255
    504a:	18 07       	cpc	r17, r24
    504c:	09 f4       	brne	.+2      	; 0x5050 <getRightSpeedFromInput+0x76>
    504e:	6c c1       	rjmp	.+728    	; 0x5328 <getRightSpeedFromInput+0x34e>
    5050:	80 91 0a 05 	lds	r24, 0x050A
    5054:	90 91 0b 05 	lds	r25, 0x050B
    5058:	8c 17       	cp	r24, r28
    505a:	9d 07       	cpc	r25, r29
    505c:	2c f0       	brlt	.+10     	; 0x5068 <getRightSpeedFromInput+0x8e>
    505e:	9f ef       	ldi	r25, 0xFF	; 255
    5060:	0f 3f       	cpi	r16, 0xFF	; 255
    5062:	19 07       	cpc	r17, r25
    5064:	09 f4       	brne	.+2      	; 0x5068 <getRightSpeedFromInput+0x8e>
    5066:	72 c1       	rjmp	.+740    	; 0x534c <getRightSpeedFromInput+0x372>
    5068:	80 91 1a 05 	lds	r24, 0x051A
    506c:	90 91 1b 05 	lds	r25, 0x051B
    5070:	8c 17       	cp	r24, r28
    5072:	9d 07       	cpc	r25, r29
    5074:	2c f0       	brlt	.+10     	; 0x5080 <getRightSpeedFromInput+0xa6>
    5076:	8f ef       	ldi	r24, 0xFF	; 255
    5078:	0f 3f       	cpi	r16, 0xFF	; 255
    507a:	18 07       	cpc	r17, r24
    507c:	09 f4       	brne	.+2      	; 0x5080 <getRightSpeedFromInput+0xa6>
    507e:	63 c1       	rjmp	.+710    	; 0x5346 <getRightSpeedFromInput+0x36c>
    5080:	80 91 2a 05 	lds	r24, 0x052A
    5084:	90 91 2b 05 	lds	r25, 0x052B
    5088:	8c 17       	cp	r24, r28
    508a:	9d 07       	cpc	r25, r29
    508c:	2c f0       	brlt	.+10     	; 0x5098 <getRightSpeedFromInput+0xbe>
    508e:	9f ef       	ldi	r25, 0xFF	; 255
    5090:	0f 3f       	cpi	r16, 0xFF	; 255
    5092:	19 07       	cpc	r17, r25
    5094:	09 f4       	brne	.+2      	; 0x5098 <getRightSpeedFromInput+0xbe>
    5096:	54 c1       	rjmp	.+680    	; 0x5340 <getRightSpeedFromInput+0x366>
    5098:	80 91 3a 05 	lds	r24, 0x053A
    509c:	90 91 3b 05 	lds	r25, 0x053B
    50a0:	8c 17       	cp	r24, r28
    50a2:	9d 07       	cpc	r25, r29
    50a4:	2c f0       	brlt	.+10     	; 0x50b0 <getRightSpeedFromInput+0xd6>
    50a6:	8f ef       	ldi	r24, 0xFF	; 255
    50a8:	0f 3f       	cpi	r16, 0xFF	; 255
    50aa:	18 07       	cpc	r17, r24
    50ac:	09 f4       	brne	.+2      	; 0x50b0 <getRightSpeedFromInput+0xd6>
    50ae:	45 c1       	rjmp	.+650    	; 0x533a <getRightSpeedFromInput+0x360>
    50b0:	80 91 4a 05 	lds	r24, 0x054A
    50b4:	90 91 4b 05 	lds	r25, 0x054B
    50b8:	8c 17       	cp	r24, r28
    50ba:	9d 07       	cpc	r25, r29
    50bc:	2c f0       	brlt	.+10     	; 0x50c8 <getRightSpeedFromInput+0xee>
    50be:	9f ef       	ldi	r25, 0xFF	; 255
    50c0:	0f 3f       	cpi	r16, 0xFF	; 255
    50c2:	19 07       	cpc	r17, r25
    50c4:	09 f4       	brne	.+2      	; 0x50c8 <getRightSpeedFromInput+0xee>
    50c6:	36 c1       	rjmp	.+620    	; 0x5334 <getRightSpeedFromInput+0x35a>
    50c8:	e0 90 5a 05 	lds	r14, 0x055A
    50cc:	f0 90 5b 05 	lds	r15, 0x055B
    50d0:	ec 16       	cp	r14, r28
    50d2:	fd 06       	cpc	r15, r29
    50d4:	2c f0       	brlt	.+10     	; 0x50e0 <getRightSpeedFromInput+0x106>
    50d6:	8f ef       	ldi	r24, 0xFF	; 255
    50d8:	0f 3f       	cpi	r16, 0xFF	; 255
    50da:	18 07       	cpc	r17, r24
    50dc:	09 f4       	brne	.+2      	; 0x50e0 <getRightSpeedFromInput+0x106>
    50de:	27 c1       	rjmp	.+590    	; 0x532e <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    50e0:	20 97       	sbiw	r28, 0x00	; 0
    50e2:	09 f4       	brne	.+2      	; 0x50e6 <getRightSpeedFromInput+0x10c>
    50e4:	58 c0       	rjmp	.+176    	; 0x5196 <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    50e6:	01 15       	cp	r16, r1
    50e8:	11 05       	cpc	r17, r1
    50ea:	09 f4       	brne	.+2      	; 0x50ee <getRightSpeedFromInput+0x114>
    50ec:	32 c1       	rjmp	.+612    	; 0x5352 <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    50ee:	9f ef       	ldi	r25, 0xFF	; 255
    50f0:	0f 3f       	cpi	r16, 0xFF	; 255
    50f2:	19 07       	cpc	r17, r25
    50f4:	09 f4       	brne	.+2      	; 0x50f8 <getRightSpeedFromInput+0x11e>
    50f6:	e9 c0       	rjmp	.+466    	; 0x52ca <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    50f8:	f8 01       	movw	r30, r16
    50fa:	e2 95       	swap	r30
    50fc:	f2 95       	swap	r31
    50fe:	f0 7f       	andi	r31, 0xF0	; 240
    5100:	fe 27       	eor	r31, r30
    5102:	e0 7f       	andi	r30, 0xF0	; 240
    5104:	fe 27       	eor	r31, r30
    5106:	ea 53       	subi	r30, 0x3A	; 58
    5108:	fb 4f       	sbci	r31, 0xFB	; 251
    510a:	a4 80       	ldd	r10, Z+4	; 0x04
    510c:	b5 80       	ldd	r11, Z+5	; 0x05
    510e:	86 80       	ldd	r8, Z+6	; 0x06
    5110:	97 80       	ldd	r9, Z+7	; 0x07
    5112:	ca 19       	sub	r28, r10
    5114:	db 09       	sbc	r29, r11
    5116:	be 01       	movw	r22, r28
    5118:	88 27       	eor	r24, r24
    511a:	77 fd       	sbrc	r23, 7
    511c:	80 95       	com	r24
    511e:	98 2f       	mov	r25, r24
    5120:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    5124:	6b 01       	movw	r12, r22
    5126:	7c 01       	movw	r14, r24
    5128:	e8 01       	movw	r28, r16
    512a:	c2 95       	swap	r28
    512c:	d2 95       	swap	r29
    512e:	d0 7f       	andi	r29, 0xF0	; 240
    5130:	dc 27       	eor	r29, r28
    5132:	c0 7f       	andi	r28, 0xF0	; 240
    5134:	dc 27       	eor	r29, r28
    5136:	ca 52       	subi	r28, 0x2A	; 42
    5138:	db 4f       	sbci	r29, 0xFB	; 251
    513a:	6e 81       	ldd	r22, Y+6	; 0x06
    513c:	7f 81       	ldd	r23, Y+7	; 0x07
    513e:	68 19       	sub	r22, r8
    5140:	79 09       	sbc	r23, r9
    5142:	88 27       	eor	r24, r24
    5144:	77 fd       	sbrc	r23, 7
    5146:	80 95       	com	r24
    5148:	98 2f       	mov	r25, r24
    514a:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    514e:	9b 01       	movw	r18, r22
    5150:	ac 01       	movw	r20, r24
    5152:	c7 01       	movw	r24, r14
    5154:	b6 01       	movw	r22, r12
    5156:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    515a:	7b 01       	movw	r14, r22
    515c:	8c 01       	movw	r16, r24
    515e:	6c 81       	ldd	r22, Y+4	; 0x04
    5160:	7d 81       	ldd	r23, Y+5	; 0x05
    5162:	6a 19       	sub	r22, r10
    5164:	7b 09       	sbc	r23, r11
    5166:	88 27       	eor	r24, r24
    5168:	77 fd       	sbrc	r23, 7
    516a:	80 95       	com	r24
    516c:	98 2f       	mov	r25, r24
    516e:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    5172:	9b 01       	movw	r18, r22
    5174:	ac 01       	movw	r20, r24
    5176:	c8 01       	movw	r24, r16
    5178:	b7 01       	movw	r22, r14
    517a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    517e:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    5182:	68 0d       	add	r22, r8
    5184:	79 1d       	adc	r23, r9
    5186:	70 93 b0 04 	sts	0x04B0, r23
    518a:	60 93 af 04 	sts	0x04AF, r22
    518e:	07 c0       	rjmp	.+14     	; 0x519e <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5190:	00 e0       	ldi	r16, 0x00	; 0
    5192:	10 e0       	ldi	r17, 0x00	; 0
    5194:	42 cf       	rjmp	.-380    	; 0x501a <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    5196:	10 92 b0 04 	sts	0x04B0, r1
    519a:	10 92 af 04 	sts	0x04AF, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    519e:	df 91       	pop	r29
    51a0:	cf 91       	pop	r28
    51a2:	1f 91       	pop	r17
    51a4:	0f 91       	pop	r16
    51a6:	ff 90       	pop	r15
    51a8:	ef 90       	pop	r14
    51aa:	df 90       	pop	r13
    51ac:	cf 90       	pop	r12
    51ae:	bf 90       	pop	r11
    51b0:	af 90       	pop	r10
    51b2:	9f 90       	pop	r9
    51b4:	8f 90       	pop	r8
    51b6:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    51b8:	60 91 e2 04 	lds	r22, 0x04E2
    51bc:	70 91 e3 04 	lds	r23, 0x04E3
    51c0:	6c 17       	cp	r22, r28
    51c2:	7d 07       	cpc	r23, r29
    51c4:	0c f0       	brlt	.+2      	; 0x51c8 <getRightSpeedFromInput+0x1ee>
    51c6:	7e c0       	rjmp	.+252    	; 0x52c4 <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    51c8:	0f ef       	ldi	r16, 0xFF	; 255
    51ca:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    51cc:	80 91 f2 04 	lds	r24, 0x04F2
    51d0:	90 91 f3 04 	lds	r25, 0x04F3
    51d4:	8c 17       	cp	r24, r28
    51d6:	9d 07       	cpc	r25, r29
    51d8:	44 f0       	brlt	.+16     	; 0x51ea <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    51da:	81 e0       	ldi	r24, 0x01	; 1
    51dc:	9f ef       	ldi	r25, 0xFF	; 255
    51de:	0f 3f       	cpi	r16, 0xFF	; 255
    51e0:	19 07       	cpc	r17, r25
    51e2:	09 f0       	breq	.+2      	; 0x51e6 <getRightSpeedFromInput+0x20c>
    51e4:	80 e0       	ldi	r24, 0x00	; 0
    51e6:	08 2f       	mov	r16, r24
    51e8:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    51ea:	80 91 02 05 	lds	r24, 0x0502
    51ee:	90 91 03 05 	lds	r25, 0x0503
    51f2:	8c 17       	cp	r24, r28
    51f4:	9d 07       	cpc	r25, r29
    51f6:	2c f0       	brlt	.+10     	; 0x5202 <getRightSpeedFromInput+0x228>
    51f8:	8f ef       	ldi	r24, 0xFF	; 255
    51fa:	0f 3f       	cpi	r16, 0xFF	; 255
    51fc:	18 07       	cpc	r17, r24
    51fe:	09 f4       	brne	.+2      	; 0x5202 <getRightSpeedFromInput+0x228>
    5200:	19 c1       	rjmp	.+562    	; 0x5434 <getRightSpeedFromInput+0x45a>
    5202:	80 91 12 05 	lds	r24, 0x0512
    5206:	90 91 13 05 	lds	r25, 0x0513
    520a:	8c 17       	cp	r24, r28
    520c:	9d 07       	cpc	r25, r29
    520e:	2c f0       	brlt	.+10     	; 0x521a <getRightSpeedFromInput+0x240>
    5210:	9f ef       	ldi	r25, 0xFF	; 255
    5212:	0f 3f       	cpi	r16, 0xFF	; 255
    5214:	19 07       	cpc	r17, r25
    5216:	09 f4       	brne	.+2      	; 0x521a <getRightSpeedFromInput+0x240>
    5218:	0a c1       	rjmp	.+532    	; 0x542e <getRightSpeedFromInput+0x454>
    521a:	80 91 22 05 	lds	r24, 0x0522
    521e:	90 91 23 05 	lds	r25, 0x0523
    5222:	8c 17       	cp	r24, r28
    5224:	9d 07       	cpc	r25, r29
    5226:	2c f0       	brlt	.+10     	; 0x5232 <getRightSpeedFromInput+0x258>
    5228:	8f ef       	ldi	r24, 0xFF	; 255
    522a:	0f 3f       	cpi	r16, 0xFF	; 255
    522c:	18 07       	cpc	r17, r24
    522e:	09 f4       	brne	.+2      	; 0x5232 <getRightSpeedFromInput+0x258>
    5230:	fb c0       	rjmp	.+502    	; 0x5428 <getRightSpeedFromInput+0x44e>
    5232:	80 91 32 05 	lds	r24, 0x0532
    5236:	90 91 33 05 	lds	r25, 0x0533
    523a:	8c 17       	cp	r24, r28
    523c:	9d 07       	cpc	r25, r29
    523e:	2c f0       	brlt	.+10     	; 0x524a <getRightSpeedFromInput+0x270>
    5240:	9f ef       	ldi	r25, 0xFF	; 255
    5242:	0f 3f       	cpi	r16, 0xFF	; 255
    5244:	19 07       	cpc	r17, r25
    5246:	09 f4       	brne	.+2      	; 0x524a <getRightSpeedFromInput+0x270>
    5248:	ec c0       	rjmp	.+472    	; 0x5422 <getRightSpeedFromInput+0x448>
    524a:	80 91 42 05 	lds	r24, 0x0542
    524e:	90 91 43 05 	lds	r25, 0x0543
    5252:	8c 17       	cp	r24, r28
    5254:	9d 07       	cpc	r25, r29
    5256:	2c f0       	brlt	.+10     	; 0x5262 <getRightSpeedFromInput+0x288>
    5258:	8f ef       	ldi	r24, 0xFF	; 255
    525a:	0f 3f       	cpi	r16, 0xFF	; 255
    525c:	18 07       	cpc	r17, r24
    525e:	09 f4       	brne	.+2      	; 0x5262 <getRightSpeedFromInput+0x288>
    5260:	dd c0       	rjmp	.+442    	; 0x541c <getRightSpeedFromInput+0x442>
    5262:	80 91 52 05 	lds	r24, 0x0552
    5266:	90 91 53 05 	lds	r25, 0x0553
    526a:	8c 17       	cp	r24, r28
    526c:	9d 07       	cpc	r25, r29
    526e:	2c f0       	brlt	.+10     	; 0x527a <getRightSpeedFromInput+0x2a0>
    5270:	9f ef       	ldi	r25, 0xFF	; 255
    5272:	0f 3f       	cpi	r16, 0xFF	; 255
    5274:	19 07       	cpc	r17, r25
    5276:	09 f4       	brne	.+2      	; 0x527a <getRightSpeedFromInput+0x2a0>
    5278:	ce c0       	rjmp	.+412    	; 0x5416 <getRightSpeedFromInput+0x43c>
    527a:	e0 90 62 05 	lds	r14, 0x0562
    527e:	f0 90 63 05 	lds	r15, 0x0563
    5282:	ec 16       	cp	r14, r28
    5284:	fd 06       	cpc	r15, r29
    5286:	2c f0       	brlt	.+10     	; 0x5292 <getRightSpeedFromInput+0x2b8>
    5288:	8f ef       	ldi	r24, 0xFF	; 255
    528a:	0f 3f       	cpi	r16, 0xFF	; 255
    528c:	18 07       	cpc	r17, r24
    528e:	09 f4       	brne	.+2      	; 0x5292 <getRightSpeedFromInput+0x2b8>
    5290:	bf c0       	rjmp	.+382    	; 0x5410 <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    5292:	01 15       	cp	r16, r1
    5294:	11 05       	cpc	r17, r1
    5296:	09 f0       	breq	.+2      	; 0x529a <getRightSpeedFromInput+0x2c0>
    5298:	6e c0       	rjmp	.+220    	; 0x5376 <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    529a:	20 91 e4 04 	lds	r18, 0x04E4
    529e:	30 91 e5 04 	lds	r19, 0x04E5
    52a2:	c2 9f       	mul	r28, r18
    52a4:	c0 01       	movw	r24, r0
    52a6:	c3 9f       	mul	r28, r19
    52a8:	90 0d       	add	r25, r0
    52aa:	d2 9f       	mul	r29, r18
    52ac:	90 0d       	add	r25, r0
    52ae:	11 24       	eor	r1, r1
    52b0:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    52b4:	70 95       	com	r23
    52b6:	61 95       	neg	r22
    52b8:	7f 4f       	sbci	r23, 0xFF	; 255
    52ba:	70 93 b0 04 	sts	0x04B0, r23
    52be:	60 93 af 04 	sts	0x04AF, r22
    52c2:	6d cf       	rjmp	.-294    	; 0x519e <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    52c4:	00 e0       	ldi	r16, 0x00	; 0
    52c6:	10 e0       	ldi	r17, 0x00	; 0
    52c8:	81 cf       	rjmp	.-254    	; 0x51cc <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    52ca:	60 91 5c 05 	lds	r22, 0x055C
    52ce:	70 91 5d 05 	lds	r23, 0x055D
    52d2:	88 27       	eor	r24, r24
    52d4:	77 fd       	sbrc	r23, 7
    52d6:	80 95       	com	r24
    52d8:	98 2f       	mov	r25, r24
    52da:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    52de:	5b 01       	movw	r10, r22
    52e0:	6c 01       	movw	r12, r24
    52e2:	be 01       	movw	r22, r28
    52e4:	88 27       	eor	r24, r24
    52e6:	77 fd       	sbrc	r23, 7
    52e8:	80 95       	com	r24
    52ea:	98 2f       	mov	r25, r24
    52ec:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    52f0:	9b 01       	movw	r18, r22
    52f2:	ac 01       	movw	r20, r24
    52f4:	c6 01       	movw	r24, r12
    52f6:	b5 01       	movw	r22, r10
    52f8:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    52fc:	5b 01       	movw	r10, r22
    52fe:	6c 01       	movw	r12, r24
    5300:	b7 01       	movw	r22, r14
    5302:	88 27       	eor	r24, r24
    5304:	77 fd       	sbrc	r23, 7
    5306:	80 95       	com	r24
    5308:	98 2f       	mov	r25, r24
    530a:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    530e:	9b 01       	movw	r18, r22
    5310:	ac 01       	movw	r20, r24
    5312:	c6 01       	movw	r24, r12
    5314:	b5 01       	movw	r22, r10
    5316:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    531a:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    531e:	70 93 b0 04 	sts	0x04B0, r23
    5322:	60 93 af 04 	sts	0x04AF, r22
    5326:	3b cf       	rjmp	.-394    	; 0x519e <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5328:	02 e0       	ldi	r16, 0x02	; 2
    532a:	10 e0       	ldi	r17, 0x00	; 0
    532c:	91 ce       	rjmp	.-734    	; 0x5050 <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    532e:	08 e0       	ldi	r16, 0x08	; 8
    5330:	10 e0       	ldi	r17, 0x00	; 0
    5332:	d6 ce       	rjmp	.-596    	; 0x50e0 <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5334:	07 e0       	ldi	r16, 0x07	; 7
    5336:	10 e0       	ldi	r17, 0x00	; 0
    5338:	c7 ce       	rjmp	.-626    	; 0x50c8 <getRightSpeedFromInput+0xee>
    533a:	06 e0       	ldi	r16, 0x06	; 6
    533c:	10 e0       	ldi	r17, 0x00	; 0
    533e:	b8 ce       	rjmp	.-656    	; 0x50b0 <getRightSpeedFromInput+0xd6>
    5340:	05 e0       	ldi	r16, 0x05	; 5
    5342:	10 e0       	ldi	r17, 0x00	; 0
    5344:	a9 ce       	rjmp	.-686    	; 0x5098 <getRightSpeedFromInput+0xbe>
    5346:	04 e0       	ldi	r16, 0x04	; 4
    5348:	10 e0       	ldi	r17, 0x00	; 0
    534a:	9a ce       	rjmp	.-716    	; 0x5080 <getRightSpeedFromInput+0xa6>
    534c:	03 e0       	ldi	r16, 0x03	; 3
    534e:	10 e0       	ldi	r17, 0x00	; 0
    5350:	8b ce       	rjmp	.-746    	; 0x5068 <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    5352:	20 91 dc 04 	lds	r18, 0x04DC
    5356:	30 91 dd 04 	lds	r19, 0x04DD
    535a:	c2 9f       	mul	r28, r18
    535c:	c0 01       	movw	r24, r0
    535e:	c3 9f       	mul	r28, r19
    5360:	90 0d       	add	r25, r0
    5362:	d2 9f       	mul	r29, r18
    5364:	90 0d       	add	r25, r0
    5366:	11 24       	eor	r1, r1
    5368:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
    536c:	70 93 b0 04 	sts	0x04B0, r23
    5370:	60 93 af 04 	sts	0x04AF, r22
    5374:	14 cf       	rjmp	.-472    	; 0x519e <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5376:	8f ef       	ldi	r24, 0xFF	; 255
    5378:	0f 3f       	cpi	r16, 0xFF	; 255
    537a:	18 07       	cpc	r17, r24
    537c:	09 f4       	brne	.+2      	; 0x5380 <getRightSpeedFromInput+0x3a6>
    537e:	5d c0       	rjmp	.+186    	; 0x543a <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    5380:	f8 01       	movw	r30, r16
    5382:	e2 95       	swap	r30
    5384:	f2 95       	swap	r31
    5386:	f0 7f       	andi	r31, 0xF0	; 240
    5388:	fe 27       	eor	r31, r30
    538a:	e0 7f       	andi	r30, 0xF0	; 240
    538c:	fe 27       	eor	r31, r30
    538e:	ea 53       	subi	r30, 0x3A	; 58
    5390:	fb 4f       	sbci	r31, 0xFB	; 251
    5392:	a4 84       	ldd	r10, Z+12	; 0x0c
    5394:	b5 84       	ldd	r11, Z+13	; 0x0d
    5396:	86 84       	ldd	r8, Z+14	; 0x0e
    5398:	97 84       	ldd	r9, Z+15	; 0x0f
    539a:	ca 19       	sub	r28, r10
    539c:	db 09       	sbc	r29, r11
    539e:	be 01       	movw	r22, r28
    53a0:	88 27       	eor	r24, r24
    53a2:	77 fd       	sbrc	r23, 7
    53a4:	80 95       	com	r24
    53a6:	98 2f       	mov	r25, r24
    53a8:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    53ac:	6b 01       	movw	r12, r22
    53ae:	7c 01       	movw	r14, r24
    53b0:	e8 01       	movw	r28, r16
    53b2:	c2 95       	swap	r28
    53b4:	d2 95       	swap	r29
    53b6:	d0 7f       	andi	r29, 0xF0	; 240
    53b8:	dc 27       	eor	r29, r28
    53ba:	c0 7f       	andi	r28, 0xF0	; 240
    53bc:	dc 27       	eor	r29, r28
    53be:	ca 52       	subi	r28, 0x2A	; 42
    53c0:	db 4f       	sbci	r29, 0xFB	; 251
    53c2:	6e 85       	ldd	r22, Y+14	; 0x0e
    53c4:	7f 85       	ldd	r23, Y+15	; 0x0f
    53c6:	68 19       	sub	r22, r8
    53c8:	79 09       	sbc	r23, r9
    53ca:	88 27       	eor	r24, r24
    53cc:	77 fd       	sbrc	r23, 7
    53ce:	80 95       	com	r24
    53d0:	98 2f       	mov	r25, r24
    53d2:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    53d6:	9b 01       	movw	r18, r22
    53d8:	ac 01       	movw	r20, r24
    53da:	c7 01       	movw	r24, r14
    53dc:	b6 01       	movw	r22, r12
    53de:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    53e2:	7b 01       	movw	r14, r22
    53e4:	8c 01       	movw	r16, r24
    53e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    53e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    53ea:	6a 19       	sub	r22, r10
    53ec:	7b 09       	sbc	r23, r11
    53ee:	88 27       	eor	r24, r24
    53f0:	77 fd       	sbrc	r23, 7
    53f2:	80 95       	com	r24
    53f4:	98 2f       	mov	r25, r24
    53f6:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    53fa:	9b 01       	movw	r18, r22
    53fc:	ac 01       	movw	r20, r24
    53fe:	c8 01       	movw	r24, r16
    5400:	b7 01       	movw	r22, r14
    5402:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    5406:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    540a:	68 0d       	add	r22, r8
    540c:	79 1d       	adc	r23, r9
    540e:	52 cf       	rjmp	.-348    	; 0x52b4 <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5410:	08 e0       	ldi	r16, 0x08	; 8
    5412:	10 e0       	ldi	r17, 0x00	; 0
    5414:	3e cf       	rjmp	.-388    	; 0x5292 <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5416:	07 e0       	ldi	r16, 0x07	; 7
    5418:	10 e0       	ldi	r17, 0x00	; 0
    541a:	2f cf       	rjmp	.-418    	; 0x527a <getRightSpeedFromInput+0x2a0>
    541c:	06 e0       	ldi	r16, 0x06	; 6
    541e:	10 e0       	ldi	r17, 0x00	; 0
    5420:	20 cf       	rjmp	.-448    	; 0x5262 <getRightSpeedFromInput+0x288>
    5422:	05 e0       	ldi	r16, 0x05	; 5
    5424:	10 e0       	ldi	r17, 0x00	; 0
    5426:	11 cf       	rjmp	.-478    	; 0x524a <getRightSpeedFromInput+0x270>
    5428:	04 e0       	ldi	r16, 0x04	; 4
    542a:	10 e0       	ldi	r17, 0x00	; 0
    542c:	02 cf       	rjmp	.-508    	; 0x5232 <getRightSpeedFromInput+0x258>
    542e:	03 e0       	ldi	r16, 0x03	; 3
    5430:	10 e0       	ldi	r17, 0x00	; 0
    5432:	f3 ce       	rjmp	.-538    	; 0x521a <getRightSpeedFromInput+0x240>
    5434:	02 e0       	ldi	r16, 0x02	; 2
    5436:	10 e0       	ldi	r17, 0x00	; 0
    5438:	e4 ce       	rjmp	.-568    	; 0x5202 <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    543a:	60 91 64 05 	lds	r22, 0x0564
    543e:	70 91 65 05 	lds	r23, 0x0565
    5442:	88 27       	eor	r24, r24
    5444:	77 fd       	sbrc	r23, 7
    5446:	80 95       	com	r24
    5448:	98 2f       	mov	r25, r24
    544a:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    544e:	5b 01       	movw	r10, r22
    5450:	6c 01       	movw	r12, r24
    5452:	be 01       	movw	r22, r28
    5454:	88 27       	eor	r24, r24
    5456:	77 fd       	sbrc	r23, 7
    5458:	80 95       	com	r24
    545a:	98 2f       	mov	r25, r24
    545c:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    5460:	9b 01       	movw	r18, r22
    5462:	ac 01       	movw	r20, r24
    5464:	c6 01       	movw	r24, r12
    5466:	b5 01       	movw	r22, r10
    5468:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    546c:	5b 01       	movw	r10, r22
    546e:	6c 01       	movw	r12, r24
    5470:	b7 01       	movw	r22, r14
    5472:	88 27       	eor	r24, r24
    5474:	77 fd       	sbrc	r23, 7
    5476:	80 95       	com	r24
    5478:	98 2f       	mov	r25, r24
    547a:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    547e:	9b 01       	movw	r18, r22
    5480:	ac 01       	movw	r20, r24
    5482:	c6 01       	movw	r24, r12
    5484:	b5 01       	movw	r22, r10
    5486:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    548a:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    548e:	12 cf       	rjmp	.-476    	; 0x52b4 <getRightSpeedFromInput+0x2da>

00005490 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    5490:	8f 92       	push	r8
    5492:	9f 92       	push	r9
    5494:	af 92       	push	r10
    5496:	bf 92       	push	r11
    5498:	cf 92       	push	r12
    549a:	df 92       	push	r13
    549c:	ef 92       	push	r14
    549e:	ff 92       	push	r15
    54a0:	0f 93       	push	r16
    54a2:	1f 93       	push	r17
    54a4:	cf 93       	push	r28
    54a6:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    54a8:	c0 91 ef 02 	lds	r28, 0x02EF
    54ac:	d0 91 f0 02 	lds	r29, 0x02F0
    54b0:	80 91 f5 02 	lds	r24, 0x02F5
    54b4:	90 91 f6 02 	lds	r25, 0x02F6
    54b8:	97 fd       	sbrc	r25, 7
    54ba:	d9 c0       	rjmp	.+434    	; 0x566e <getLeftSpeedFromInput+0x1de>
    54bc:	60 91 d6 04 	lds	r22, 0x04D6
    54c0:	70 91 d7 04 	lds	r23, 0x04D7
    54c4:	6c 17       	cp	r22, r28
    54c6:	7d 07       	cpc	r23, r29
    54c8:	0c f0       	brlt	.+2      	; 0x54cc <getLeftSpeedFromInput+0x3c>
    54ca:	bd c0       	rjmp	.+378    	; 0x5646 <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    54cc:	0f ef       	ldi	r16, 0xFF	; 255
    54ce:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    54d0:	80 91 e6 04 	lds	r24, 0x04E6
    54d4:	90 91 e7 04 	lds	r25, 0x04E7
    54d8:	8c 17       	cp	r24, r28
    54da:	9d 07       	cpc	r25, r29
    54dc:	44 f0       	brlt	.+16     	; 0x54ee <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    54de:	81 e0       	ldi	r24, 0x01	; 1
    54e0:	9f ef       	ldi	r25, 0xFF	; 255
    54e2:	0f 3f       	cpi	r16, 0xFF	; 255
    54e4:	19 07       	cpc	r17, r25
    54e6:	09 f0       	breq	.+2      	; 0x54ea <getLeftSpeedFromInput+0x5a>
    54e8:	80 e0       	ldi	r24, 0x00	; 0
    54ea:	08 2f       	mov	r16, r24
    54ec:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    54ee:	80 91 f6 04 	lds	r24, 0x04F6
    54f2:	90 91 f7 04 	lds	r25, 0x04F7
    54f6:	8c 17       	cp	r24, r28
    54f8:	9d 07       	cpc	r25, r29
    54fa:	2c f0       	brlt	.+10     	; 0x5506 <getLeftSpeedFromInput+0x76>
    54fc:	8f ef       	ldi	r24, 0xFF	; 255
    54fe:	0f 3f       	cpi	r16, 0xFF	; 255
    5500:	18 07       	cpc	r17, r24
    5502:	09 f4       	brne	.+2      	; 0x5506 <getLeftSpeedFromInput+0x76>
    5504:	6c c1       	rjmp	.+728    	; 0x57de <getLeftSpeedFromInput+0x34e>
    5506:	80 91 06 05 	lds	r24, 0x0506
    550a:	90 91 07 05 	lds	r25, 0x0507
    550e:	8c 17       	cp	r24, r28
    5510:	9d 07       	cpc	r25, r29
    5512:	2c f0       	brlt	.+10     	; 0x551e <getLeftSpeedFromInput+0x8e>
    5514:	9f ef       	ldi	r25, 0xFF	; 255
    5516:	0f 3f       	cpi	r16, 0xFF	; 255
    5518:	19 07       	cpc	r17, r25
    551a:	09 f4       	brne	.+2      	; 0x551e <getLeftSpeedFromInput+0x8e>
    551c:	72 c1       	rjmp	.+740    	; 0x5802 <getLeftSpeedFromInput+0x372>
    551e:	80 91 16 05 	lds	r24, 0x0516
    5522:	90 91 17 05 	lds	r25, 0x0517
    5526:	8c 17       	cp	r24, r28
    5528:	9d 07       	cpc	r25, r29
    552a:	2c f0       	brlt	.+10     	; 0x5536 <getLeftSpeedFromInput+0xa6>
    552c:	8f ef       	ldi	r24, 0xFF	; 255
    552e:	0f 3f       	cpi	r16, 0xFF	; 255
    5530:	18 07       	cpc	r17, r24
    5532:	09 f4       	brne	.+2      	; 0x5536 <getLeftSpeedFromInput+0xa6>
    5534:	63 c1       	rjmp	.+710    	; 0x57fc <getLeftSpeedFromInput+0x36c>
    5536:	80 91 26 05 	lds	r24, 0x0526
    553a:	90 91 27 05 	lds	r25, 0x0527
    553e:	8c 17       	cp	r24, r28
    5540:	9d 07       	cpc	r25, r29
    5542:	2c f0       	brlt	.+10     	; 0x554e <getLeftSpeedFromInput+0xbe>
    5544:	9f ef       	ldi	r25, 0xFF	; 255
    5546:	0f 3f       	cpi	r16, 0xFF	; 255
    5548:	19 07       	cpc	r17, r25
    554a:	09 f4       	brne	.+2      	; 0x554e <getLeftSpeedFromInput+0xbe>
    554c:	54 c1       	rjmp	.+680    	; 0x57f6 <getLeftSpeedFromInput+0x366>
    554e:	80 91 36 05 	lds	r24, 0x0536
    5552:	90 91 37 05 	lds	r25, 0x0537
    5556:	8c 17       	cp	r24, r28
    5558:	9d 07       	cpc	r25, r29
    555a:	2c f0       	brlt	.+10     	; 0x5566 <getLeftSpeedFromInput+0xd6>
    555c:	8f ef       	ldi	r24, 0xFF	; 255
    555e:	0f 3f       	cpi	r16, 0xFF	; 255
    5560:	18 07       	cpc	r17, r24
    5562:	09 f4       	brne	.+2      	; 0x5566 <getLeftSpeedFromInput+0xd6>
    5564:	45 c1       	rjmp	.+650    	; 0x57f0 <getLeftSpeedFromInput+0x360>
    5566:	80 91 46 05 	lds	r24, 0x0546
    556a:	90 91 47 05 	lds	r25, 0x0547
    556e:	8c 17       	cp	r24, r28
    5570:	9d 07       	cpc	r25, r29
    5572:	2c f0       	brlt	.+10     	; 0x557e <getLeftSpeedFromInput+0xee>
    5574:	9f ef       	ldi	r25, 0xFF	; 255
    5576:	0f 3f       	cpi	r16, 0xFF	; 255
    5578:	19 07       	cpc	r17, r25
    557a:	09 f4       	brne	.+2      	; 0x557e <getLeftSpeedFromInput+0xee>
    557c:	36 c1       	rjmp	.+620    	; 0x57ea <getLeftSpeedFromInput+0x35a>
    557e:	e0 90 56 05 	lds	r14, 0x0556
    5582:	f0 90 57 05 	lds	r15, 0x0557
    5586:	ec 16       	cp	r14, r28
    5588:	fd 06       	cpc	r15, r29
    558a:	2c f0       	brlt	.+10     	; 0x5596 <getLeftSpeedFromInput+0x106>
    558c:	8f ef       	ldi	r24, 0xFF	; 255
    558e:	0f 3f       	cpi	r16, 0xFF	; 255
    5590:	18 07       	cpc	r17, r24
    5592:	09 f4       	brne	.+2      	; 0x5596 <getLeftSpeedFromInput+0x106>
    5594:	27 c1       	rjmp	.+590    	; 0x57e4 <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    5596:	20 97       	sbiw	r28, 0x00	; 0
    5598:	09 f4       	brne	.+2      	; 0x559c <getLeftSpeedFromInput+0x10c>
    559a:	58 c0       	rjmp	.+176    	; 0x564c <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    559c:	01 15       	cp	r16, r1
    559e:	11 05       	cpc	r17, r1
    55a0:	09 f4       	brne	.+2      	; 0x55a4 <getLeftSpeedFromInput+0x114>
    55a2:	32 c1       	rjmp	.+612    	; 0x5808 <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    55a4:	9f ef       	ldi	r25, 0xFF	; 255
    55a6:	0f 3f       	cpi	r16, 0xFF	; 255
    55a8:	19 07       	cpc	r17, r25
    55aa:	09 f4       	brne	.+2      	; 0x55ae <getLeftSpeedFromInput+0x11e>
    55ac:	e9 c0       	rjmp	.+466    	; 0x5780 <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    55ae:	f8 01       	movw	r30, r16
    55b0:	e2 95       	swap	r30
    55b2:	f2 95       	swap	r31
    55b4:	f0 7f       	andi	r31, 0xF0	; 240
    55b6:	fe 27       	eor	r31, r30
    55b8:	e0 7f       	andi	r30, 0xF0	; 240
    55ba:	fe 27       	eor	r31, r30
    55bc:	ea 53       	subi	r30, 0x3A	; 58
    55be:	fb 4f       	sbci	r31, 0xFB	; 251
    55c0:	a0 80       	ld	r10, Z
    55c2:	b1 80       	ldd	r11, Z+1	; 0x01
    55c4:	82 80       	ldd	r8, Z+2	; 0x02
    55c6:	93 80       	ldd	r9, Z+3	; 0x03
    55c8:	ca 19       	sub	r28, r10
    55ca:	db 09       	sbc	r29, r11
    55cc:	be 01       	movw	r22, r28
    55ce:	88 27       	eor	r24, r24
    55d0:	77 fd       	sbrc	r23, 7
    55d2:	80 95       	com	r24
    55d4:	98 2f       	mov	r25, r24
    55d6:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    55da:	6b 01       	movw	r12, r22
    55dc:	7c 01       	movw	r14, r24
    55de:	e8 01       	movw	r28, r16
    55e0:	c2 95       	swap	r28
    55e2:	d2 95       	swap	r29
    55e4:	d0 7f       	andi	r29, 0xF0	; 240
    55e6:	dc 27       	eor	r29, r28
    55e8:	c0 7f       	andi	r28, 0xF0	; 240
    55ea:	dc 27       	eor	r29, r28
    55ec:	ca 52       	subi	r28, 0x2A	; 42
    55ee:	db 4f       	sbci	r29, 0xFB	; 251
    55f0:	6a 81       	ldd	r22, Y+2	; 0x02
    55f2:	7b 81       	ldd	r23, Y+3	; 0x03
    55f4:	68 19       	sub	r22, r8
    55f6:	79 09       	sbc	r23, r9
    55f8:	88 27       	eor	r24, r24
    55fa:	77 fd       	sbrc	r23, 7
    55fc:	80 95       	com	r24
    55fe:	98 2f       	mov	r25, r24
    5600:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    5604:	9b 01       	movw	r18, r22
    5606:	ac 01       	movw	r20, r24
    5608:	c7 01       	movw	r24, r14
    560a:	b6 01       	movw	r22, r12
    560c:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    5610:	7b 01       	movw	r14, r22
    5612:	8c 01       	movw	r16, r24
    5614:	68 81       	ld	r22, Y
    5616:	79 81       	ldd	r23, Y+1	; 0x01
    5618:	6a 19       	sub	r22, r10
    561a:	7b 09       	sbc	r23, r11
    561c:	88 27       	eor	r24, r24
    561e:	77 fd       	sbrc	r23, 7
    5620:	80 95       	com	r24
    5622:	98 2f       	mov	r25, r24
    5624:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    5628:	9b 01       	movw	r18, r22
    562a:	ac 01       	movw	r20, r24
    562c:	c8 01       	movw	r24, r16
    562e:	b7 01       	movw	r22, r14
    5630:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    5634:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    5638:	68 0d       	add	r22, r8
    563a:	79 1d       	adc	r23, r9
    563c:	70 93 ae 04 	sts	0x04AE, r23
    5640:	60 93 ad 04 	sts	0x04AD, r22
    5644:	07 c0       	rjmp	.+14     	; 0x5654 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5646:	00 e0       	ldi	r16, 0x00	; 0
    5648:	10 e0       	ldi	r17, 0x00	; 0
    564a:	42 cf       	rjmp	.-380    	; 0x54d0 <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    564c:	10 92 ae 04 	sts	0x04AE, r1
    5650:	10 92 ad 04 	sts	0x04AD, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    5654:	df 91       	pop	r29
    5656:	cf 91       	pop	r28
    5658:	1f 91       	pop	r17
    565a:	0f 91       	pop	r16
    565c:	ff 90       	pop	r15
    565e:	ef 90       	pop	r14
    5660:	df 90       	pop	r13
    5662:	cf 90       	pop	r12
    5664:	bf 90       	pop	r11
    5666:	af 90       	pop	r10
    5668:	9f 90       	pop	r9
    566a:	8f 90       	pop	r8
    566c:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    566e:	60 91 de 04 	lds	r22, 0x04DE
    5672:	70 91 df 04 	lds	r23, 0x04DF
    5676:	6c 17       	cp	r22, r28
    5678:	7d 07       	cpc	r23, r29
    567a:	0c f0       	brlt	.+2      	; 0x567e <getLeftSpeedFromInput+0x1ee>
    567c:	7e c0       	rjmp	.+252    	; 0x577a <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    567e:	0f ef       	ldi	r16, 0xFF	; 255
    5680:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    5682:	80 91 ee 04 	lds	r24, 0x04EE
    5686:	90 91 ef 04 	lds	r25, 0x04EF
    568a:	8c 17       	cp	r24, r28
    568c:	9d 07       	cpc	r25, r29
    568e:	44 f0       	brlt	.+16     	; 0x56a0 <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    5690:	81 e0       	ldi	r24, 0x01	; 1
    5692:	9f ef       	ldi	r25, 0xFF	; 255
    5694:	0f 3f       	cpi	r16, 0xFF	; 255
    5696:	19 07       	cpc	r17, r25
    5698:	09 f0       	breq	.+2      	; 0x569c <getLeftSpeedFromInput+0x20c>
    569a:	80 e0       	ldi	r24, 0x00	; 0
    569c:	08 2f       	mov	r16, r24
    569e:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    56a0:	80 91 fe 04 	lds	r24, 0x04FE
    56a4:	90 91 ff 04 	lds	r25, 0x04FF
    56a8:	8c 17       	cp	r24, r28
    56aa:	9d 07       	cpc	r25, r29
    56ac:	2c f0       	brlt	.+10     	; 0x56b8 <getLeftSpeedFromInput+0x228>
    56ae:	8f ef       	ldi	r24, 0xFF	; 255
    56b0:	0f 3f       	cpi	r16, 0xFF	; 255
    56b2:	18 07       	cpc	r17, r24
    56b4:	09 f4       	brne	.+2      	; 0x56b8 <getLeftSpeedFromInput+0x228>
    56b6:	19 c1       	rjmp	.+562    	; 0x58ea <getLeftSpeedFromInput+0x45a>
    56b8:	80 91 0e 05 	lds	r24, 0x050E
    56bc:	90 91 0f 05 	lds	r25, 0x050F
    56c0:	8c 17       	cp	r24, r28
    56c2:	9d 07       	cpc	r25, r29
    56c4:	2c f0       	brlt	.+10     	; 0x56d0 <getLeftSpeedFromInput+0x240>
    56c6:	9f ef       	ldi	r25, 0xFF	; 255
    56c8:	0f 3f       	cpi	r16, 0xFF	; 255
    56ca:	19 07       	cpc	r17, r25
    56cc:	09 f4       	brne	.+2      	; 0x56d0 <getLeftSpeedFromInput+0x240>
    56ce:	0a c1       	rjmp	.+532    	; 0x58e4 <getLeftSpeedFromInput+0x454>
    56d0:	80 91 1e 05 	lds	r24, 0x051E
    56d4:	90 91 1f 05 	lds	r25, 0x051F
    56d8:	8c 17       	cp	r24, r28
    56da:	9d 07       	cpc	r25, r29
    56dc:	2c f0       	brlt	.+10     	; 0x56e8 <getLeftSpeedFromInput+0x258>
    56de:	8f ef       	ldi	r24, 0xFF	; 255
    56e0:	0f 3f       	cpi	r16, 0xFF	; 255
    56e2:	18 07       	cpc	r17, r24
    56e4:	09 f4       	brne	.+2      	; 0x56e8 <getLeftSpeedFromInput+0x258>
    56e6:	fb c0       	rjmp	.+502    	; 0x58de <getLeftSpeedFromInput+0x44e>
    56e8:	80 91 2e 05 	lds	r24, 0x052E
    56ec:	90 91 2f 05 	lds	r25, 0x052F
    56f0:	8c 17       	cp	r24, r28
    56f2:	9d 07       	cpc	r25, r29
    56f4:	2c f0       	brlt	.+10     	; 0x5700 <getLeftSpeedFromInput+0x270>
    56f6:	9f ef       	ldi	r25, 0xFF	; 255
    56f8:	0f 3f       	cpi	r16, 0xFF	; 255
    56fa:	19 07       	cpc	r17, r25
    56fc:	09 f4       	brne	.+2      	; 0x5700 <getLeftSpeedFromInput+0x270>
    56fe:	ec c0       	rjmp	.+472    	; 0x58d8 <getLeftSpeedFromInput+0x448>
    5700:	80 91 3e 05 	lds	r24, 0x053E
    5704:	90 91 3f 05 	lds	r25, 0x053F
    5708:	8c 17       	cp	r24, r28
    570a:	9d 07       	cpc	r25, r29
    570c:	2c f0       	brlt	.+10     	; 0x5718 <getLeftSpeedFromInput+0x288>
    570e:	8f ef       	ldi	r24, 0xFF	; 255
    5710:	0f 3f       	cpi	r16, 0xFF	; 255
    5712:	18 07       	cpc	r17, r24
    5714:	09 f4       	brne	.+2      	; 0x5718 <getLeftSpeedFromInput+0x288>
    5716:	dd c0       	rjmp	.+442    	; 0x58d2 <getLeftSpeedFromInput+0x442>
    5718:	80 91 4e 05 	lds	r24, 0x054E
    571c:	90 91 4f 05 	lds	r25, 0x054F
    5720:	8c 17       	cp	r24, r28
    5722:	9d 07       	cpc	r25, r29
    5724:	2c f0       	brlt	.+10     	; 0x5730 <getLeftSpeedFromInput+0x2a0>
    5726:	9f ef       	ldi	r25, 0xFF	; 255
    5728:	0f 3f       	cpi	r16, 0xFF	; 255
    572a:	19 07       	cpc	r17, r25
    572c:	09 f4       	brne	.+2      	; 0x5730 <getLeftSpeedFromInput+0x2a0>
    572e:	ce c0       	rjmp	.+412    	; 0x58cc <getLeftSpeedFromInput+0x43c>
    5730:	e0 90 5e 05 	lds	r14, 0x055E
    5734:	f0 90 5f 05 	lds	r15, 0x055F
    5738:	ec 16       	cp	r14, r28
    573a:	fd 06       	cpc	r15, r29
    573c:	2c f0       	brlt	.+10     	; 0x5748 <getLeftSpeedFromInput+0x2b8>
    573e:	8f ef       	ldi	r24, 0xFF	; 255
    5740:	0f 3f       	cpi	r16, 0xFF	; 255
    5742:	18 07       	cpc	r17, r24
    5744:	09 f4       	brne	.+2      	; 0x5748 <getLeftSpeedFromInput+0x2b8>
    5746:	bf c0       	rjmp	.+382    	; 0x58c6 <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    5748:	01 15       	cp	r16, r1
    574a:	11 05       	cpc	r17, r1
    574c:	09 f0       	breq	.+2      	; 0x5750 <getLeftSpeedFromInput+0x2c0>
    574e:	6e c0       	rjmp	.+220    	; 0x582c <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    5750:	20 91 e0 04 	lds	r18, 0x04E0
    5754:	30 91 e1 04 	lds	r19, 0x04E1
    5758:	c2 9f       	mul	r28, r18
    575a:	c0 01       	movw	r24, r0
    575c:	c3 9f       	mul	r28, r19
    575e:	90 0d       	add	r25, r0
    5760:	d2 9f       	mul	r29, r18
    5762:	90 0d       	add	r25, r0
    5764:	11 24       	eor	r1, r1
    5766:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    576a:	70 95       	com	r23
    576c:	61 95       	neg	r22
    576e:	7f 4f       	sbci	r23, 0xFF	; 255
    5770:	70 93 ae 04 	sts	0x04AE, r23
    5774:	60 93 ad 04 	sts	0x04AD, r22
    5778:	6d cf       	rjmp	.-294    	; 0x5654 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    577a:	00 e0       	ldi	r16, 0x00	; 0
    577c:	10 e0       	ldi	r17, 0x00	; 0
    577e:	81 cf       	rjmp	.-254    	; 0x5682 <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    5780:	60 91 58 05 	lds	r22, 0x0558
    5784:	70 91 59 05 	lds	r23, 0x0559
    5788:	88 27       	eor	r24, r24
    578a:	77 fd       	sbrc	r23, 7
    578c:	80 95       	com	r24
    578e:	98 2f       	mov	r25, r24
    5790:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    5794:	5b 01       	movw	r10, r22
    5796:	6c 01       	movw	r12, r24
    5798:	be 01       	movw	r22, r28
    579a:	88 27       	eor	r24, r24
    579c:	77 fd       	sbrc	r23, 7
    579e:	80 95       	com	r24
    57a0:	98 2f       	mov	r25, r24
    57a2:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    57a6:	9b 01       	movw	r18, r22
    57a8:	ac 01       	movw	r20, r24
    57aa:	c6 01       	movw	r24, r12
    57ac:	b5 01       	movw	r22, r10
    57ae:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    57b2:	5b 01       	movw	r10, r22
    57b4:	6c 01       	movw	r12, r24
    57b6:	b7 01       	movw	r22, r14
    57b8:	88 27       	eor	r24, r24
    57ba:	77 fd       	sbrc	r23, 7
    57bc:	80 95       	com	r24
    57be:	98 2f       	mov	r25, r24
    57c0:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    57c4:	9b 01       	movw	r18, r22
    57c6:	ac 01       	movw	r20, r24
    57c8:	c6 01       	movw	r24, r12
    57ca:	b5 01       	movw	r22, r10
    57cc:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    57d0:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    57d4:	70 93 ae 04 	sts	0x04AE, r23
    57d8:	60 93 ad 04 	sts	0x04AD, r22
    57dc:	3b cf       	rjmp	.-394    	; 0x5654 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    57de:	02 e0       	ldi	r16, 0x02	; 2
    57e0:	10 e0       	ldi	r17, 0x00	; 0
    57e2:	91 ce       	rjmp	.-734    	; 0x5506 <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    57e4:	08 e0       	ldi	r16, 0x08	; 8
    57e6:	10 e0       	ldi	r17, 0x00	; 0
    57e8:	d6 ce       	rjmp	.-596    	; 0x5596 <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    57ea:	07 e0       	ldi	r16, 0x07	; 7
    57ec:	10 e0       	ldi	r17, 0x00	; 0
    57ee:	c7 ce       	rjmp	.-626    	; 0x557e <getLeftSpeedFromInput+0xee>
    57f0:	06 e0       	ldi	r16, 0x06	; 6
    57f2:	10 e0       	ldi	r17, 0x00	; 0
    57f4:	b8 ce       	rjmp	.-656    	; 0x5566 <getLeftSpeedFromInput+0xd6>
    57f6:	05 e0       	ldi	r16, 0x05	; 5
    57f8:	10 e0       	ldi	r17, 0x00	; 0
    57fa:	a9 ce       	rjmp	.-686    	; 0x554e <getLeftSpeedFromInput+0xbe>
    57fc:	04 e0       	ldi	r16, 0x04	; 4
    57fe:	10 e0       	ldi	r17, 0x00	; 0
    5800:	9a ce       	rjmp	.-716    	; 0x5536 <getLeftSpeedFromInput+0xa6>
    5802:	03 e0       	ldi	r16, 0x03	; 3
    5804:	10 e0       	ldi	r17, 0x00	; 0
    5806:	8b ce       	rjmp	.-746    	; 0x551e <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    5808:	20 91 d8 04 	lds	r18, 0x04D8
    580c:	30 91 d9 04 	lds	r19, 0x04D9
    5810:	c2 9f       	mul	r28, r18
    5812:	c0 01       	movw	r24, r0
    5814:	c3 9f       	mul	r28, r19
    5816:	90 0d       	add	r25, r0
    5818:	d2 9f       	mul	r29, r18
    581a:	90 0d       	add	r25, r0
    581c:	11 24       	eor	r1, r1
    581e:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
    5822:	70 93 ae 04 	sts	0x04AE, r23
    5826:	60 93 ad 04 	sts	0x04AD, r22
    582a:	14 cf       	rjmp	.-472    	; 0x5654 <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    582c:	8f ef       	ldi	r24, 0xFF	; 255
    582e:	0f 3f       	cpi	r16, 0xFF	; 255
    5830:	18 07       	cpc	r17, r24
    5832:	09 f4       	brne	.+2      	; 0x5836 <getLeftSpeedFromInput+0x3a6>
    5834:	5d c0       	rjmp	.+186    	; 0x58f0 <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    5836:	f8 01       	movw	r30, r16
    5838:	e2 95       	swap	r30
    583a:	f2 95       	swap	r31
    583c:	f0 7f       	andi	r31, 0xF0	; 240
    583e:	fe 27       	eor	r31, r30
    5840:	e0 7f       	andi	r30, 0xF0	; 240
    5842:	fe 27       	eor	r31, r30
    5844:	ea 53       	subi	r30, 0x3A	; 58
    5846:	fb 4f       	sbci	r31, 0xFB	; 251
    5848:	a0 84       	ldd	r10, Z+8	; 0x08
    584a:	b1 84       	ldd	r11, Z+9	; 0x09
    584c:	82 84       	ldd	r8, Z+10	; 0x0a
    584e:	93 84       	ldd	r9, Z+11	; 0x0b
    5850:	ca 19       	sub	r28, r10
    5852:	db 09       	sbc	r29, r11
    5854:	be 01       	movw	r22, r28
    5856:	88 27       	eor	r24, r24
    5858:	77 fd       	sbrc	r23, 7
    585a:	80 95       	com	r24
    585c:	98 2f       	mov	r25, r24
    585e:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    5862:	6b 01       	movw	r12, r22
    5864:	7c 01       	movw	r14, r24
    5866:	e8 01       	movw	r28, r16
    5868:	c2 95       	swap	r28
    586a:	d2 95       	swap	r29
    586c:	d0 7f       	andi	r29, 0xF0	; 240
    586e:	dc 27       	eor	r29, r28
    5870:	c0 7f       	andi	r28, 0xF0	; 240
    5872:	dc 27       	eor	r29, r28
    5874:	ca 52       	subi	r28, 0x2A	; 42
    5876:	db 4f       	sbci	r29, 0xFB	; 251
    5878:	6a 85       	ldd	r22, Y+10	; 0x0a
    587a:	7b 85       	ldd	r23, Y+11	; 0x0b
    587c:	68 19       	sub	r22, r8
    587e:	79 09       	sbc	r23, r9
    5880:	88 27       	eor	r24, r24
    5882:	77 fd       	sbrc	r23, 7
    5884:	80 95       	com	r24
    5886:	98 2f       	mov	r25, r24
    5888:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    588c:	9b 01       	movw	r18, r22
    588e:	ac 01       	movw	r20, r24
    5890:	c7 01       	movw	r24, r14
    5892:	b6 01       	movw	r22, r12
    5894:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    5898:	7b 01       	movw	r14, r22
    589a:	8c 01       	movw	r16, r24
    589c:	68 85       	ldd	r22, Y+8	; 0x08
    589e:	79 85       	ldd	r23, Y+9	; 0x09
    58a0:	6a 19       	sub	r22, r10
    58a2:	7b 09       	sbc	r23, r11
    58a4:	88 27       	eor	r24, r24
    58a6:	77 fd       	sbrc	r23, 7
    58a8:	80 95       	com	r24
    58aa:	98 2f       	mov	r25, r24
    58ac:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    58b0:	9b 01       	movw	r18, r22
    58b2:	ac 01       	movw	r20, r24
    58b4:	c8 01       	movw	r24, r16
    58b6:	b7 01       	movw	r22, r14
    58b8:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    58bc:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    58c0:	68 0d       	add	r22, r8
    58c2:	79 1d       	adc	r23, r9
    58c4:	52 cf       	rjmp	.-348    	; 0x576a <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    58c6:	08 e0       	ldi	r16, 0x08	; 8
    58c8:	10 e0       	ldi	r17, 0x00	; 0
    58ca:	3e cf       	rjmp	.-388    	; 0x5748 <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    58cc:	07 e0       	ldi	r16, 0x07	; 7
    58ce:	10 e0       	ldi	r17, 0x00	; 0
    58d0:	2f cf       	rjmp	.-418    	; 0x5730 <getLeftSpeedFromInput+0x2a0>
    58d2:	06 e0       	ldi	r16, 0x06	; 6
    58d4:	10 e0       	ldi	r17, 0x00	; 0
    58d6:	20 cf       	rjmp	.-448    	; 0x5718 <getLeftSpeedFromInput+0x288>
    58d8:	05 e0       	ldi	r16, 0x05	; 5
    58da:	10 e0       	ldi	r17, 0x00	; 0
    58dc:	11 cf       	rjmp	.-478    	; 0x5700 <getLeftSpeedFromInput+0x270>
    58de:	04 e0       	ldi	r16, 0x04	; 4
    58e0:	10 e0       	ldi	r17, 0x00	; 0
    58e2:	02 cf       	rjmp	.-508    	; 0x56e8 <getLeftSpeedFromInput+0x258>
    58e4:	03 e0       	ldi	r16, 0x03	; 3
    58e6:	10 e0       	ldi	r17, 0x00	; 0
    58e8:	f3 ce       	rjmp	.-538    	; 0x56d0 <getLeftSpeedFromInput+0x240>
    58ea:	02 e0       	ldi	r16, 0x02	; 2
    58ec:	10 e0       	ldi	r17, 0x00	; 0
    58ee:	e4 ce       	rjmp	.-568    	; 0x56b8 <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    58f0:	60 91 60 05 	lds	r22, 0x0560
    58f4:	70 91 61 05 	lds	r23, 0x0561
    58f8:	88 27       	eor	r24, r24
    58fa:	77 fd       	sbrc	r23, 7
    58fc:	80 95       	com	r24
    58fe:	98 2f       	mov	r25, r24
    5900:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    5904:	5b 01       	movw	r10, r22
    5906:	6c 01       	movw	r12, r24
    5908:	be 01       	movw	r22, r28
    590a:	88 27       	eor	r24, r24
    590c:	77 fd       	sbrc	r23, 7
    590e:	80 95       	com	r24
    5910:	98 2f       	mov	r25, r24
    5912:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    5916:	9b 01       	movw	r18, r22
    5918:	ac 01       	movw	r20, r24
    591a:	c6 01       	movw	r24, r12
    591c:	b5 01       	movw	r22, r10
    591e:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    5922:	5b 01       	movw	r10, r22
    5924:	6c 01       	movw	r12, r24
    5926:	b7 01       	movw	r22, r14
    5928:	88 27       	eor	r24, r24
    592a:	77 fd       	sbrc	r23, 7
    592c:	80 95       	com	r24
    592e:	98 2f       	mov	r25, r24
    5930:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    5934:	9b 01       	movw	r18, r22
    5936:	ac 01       	movw	r20, r24
    5938:	c6 01       	movw	r24, r12
    593a:	b5 01       	movw	r22, r10
    593c:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    5940:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    5944:	12 cf       	rjmp	.-476    	; 0x576a <getLeftSpeedFromInput+0x2da>

00005946 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    5946:	2f 92       	push	r2
    5948:	3f 92       	push	r3
    594a:	4f 92       	push	r4
    594c:	5f 92       	push	r5
    594e:	6f 92       	push	r6
    5950:	7f 92       	push	r7
    5952:	8f 92       	push	r8
    5954:	9f 92       	push	r9
    5956:	af 92       	push	r10
    5958:	bf 92       	push	r11
    595a:	cf 92       	push	r12
    595c:	df 92       	push	r13
    595e:	ef 92       	push	r14
    5960:	ff 92       	push	r15
    5962:	0f 93       	push	r16
    5964:	1f 93       	push	r17

	if(calibrateOdomFlag==1) {
    5966:	80 91 c0 04 	lds	r24, 0x04C0
    596a:	81 30       	cpi	r24, 0x01	; 1
    596c:	09 f4       	brne	.+2      	; 0x5970 <handleMotorsWithSpeedController+0x2a>
    596e:	28 c2       	rjmp	.+1104   	; 0x5dc0 <handleMotorsWithSpeedController+0x47a>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    5970:	80 91 fb 02 	lds	r24, 0x02FB
    5974:	90 91 fc 02 	lds	r25, 0x02FC
    5978:	97 fd       	sbrc	r25, 7
    597a:	9a c2       	rjmp	.+1332   	; 0x5eb0 <handleMotorsWithSpeedController+0x56a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    597c:	61 e0       	ldi	r22, 0x01	; 1
    597e:	0e 94 85 24 	call	0x490a	; 0x490a <getInputFromSpeed>
    5982:	90 93 0c 03 	sts	0x030C, r25
    5986:	80 93 0b 03 	sts	0x030B, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    598a:	80 91 fd 02 	lds	r24, 0x02FD
    598e:	90 91 fe 02 	lds	r25, 0x02FE
    5992:	97 fd       	sbrc	r25, 7
    5994:	85 c2       	rjmp	.+1290   	; 0x5ea0 <handleMotorsWithSpeedController+0x55a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    5996:	60 e0       	ldi	r22, 0x00	; 0
    5998:	0e 94 85 24 	call	0x490a	; 0x490a <getInputFromSpeed>
    599c:	90 93 0e 03 	sts	0x030E, r25
    59a0:	80 93 0d 03 	sts	0x030D, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    59a4:	20 91 61 04 	lds	r18, 0x0461
    59a8:	22 23       	and	r18, r18
    59aa:	09 f0       	breq	.+2      	; 0x59ae <handleMotorsWithSpeedController+0x68>
    59ac:	fe c1       	rjmp	.+1020   	; 0x5daa <handleMotorsWithSpeedController+0x464>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    59ae:	90 93 ea 02 	sts	0x02EA, r25
    59b2:	80 93 e9 02 	sts	0x02E9, r24
	pwm_right_desired_to_control = pwm_right_working;
    59b6:	80 91 0b 03 	lds	r24, 0x030B
    59ba:	90 91 0c 03 	lds	r25, 0x030C
    59be:	90 93 e8 02 	sts	0x02E8, r25
    59c2:	80 93 e7 02 	sts	0x02E7, r24

	if(compute_left_vel) {
    59c6:	80 91 07 02 	lds	r24, 0x0207
    59ca:	88 23       	and	r24, r24
    59cc:	09 f4       	brne	.+2      	; 0x59d0 <handleMotorsWithSpeedController+0x8a>
    59ce:	93 c0       	rjmp	.+294    	; 0x5af6 <handleMotorsWithSpeedController+0x1b0>

		last_left_vel = left_vel_sum>>2;
    59d0:	20 91 eb 02 	lds	r18, 0x02EB
    59d4:	30 91 ec 02 	lds	r19, 0x02EC
    59d8:	36 95       	lsr	r19
    59da:	27 95       	ror	r18
    59dc:	36 95       	lsr	r19
    59de:	27 95       	ror	r18
    59e0:	30 93 f0 02 	sts	0x02F0, r19
    59e4:	20 93 ef 02 	sts	0x02EF, r18
		compute_left_vel = 0;
    59e8:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    59ec:	10 92 ec 02 	sts	0x02EC, r1
    59f0:	10 92 eb 02 	sts	0x02EB, r1
		
		if(calibrateOdomFlag==1) {
    59f4:	80 91 c0 04 	lds	r24, 0x04C0
    59f8:	81 30       	cpi	r24, 0x01	; 1
    59fa:	09 f4       	brne	.+2      	; 0x59fe <handleMotorsWithSpeedController+0xb8>
    59fc:	08 c2       	rjmp	.+1040   	; 0x5e0e <handleMotorsWithSpeedController+0x4c8>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    59fe:	0e 94 48 2a 	call	0x5490	; 0x5490 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    5a02:	80 91 88 04 	lds	r24, 0x0488
    5a06:	90 91 89 04 	lds	r25, 0x0489
    5a0a:	a0 91 8a 04 	lds	r26, 0x048A
    5a0e:	b0 91 8b 04 	lds	r27, 0x048B
    5a12:	80 93 90 04 	sts	0x0490, r24
    5a16:	90 93 91 04 	sts	0x0491, r25
    5a1a:	a0 93 92 04 	sts	0x0492, r26
    5a1e:	b0 93 93 04 	sts	0x0493, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    5a22:	60 91 ad 04 	lds	r22, 0x04AD
    5a26:	70 91 ae 04 	lds	r23, 0x04AE
    5a2a:	88 27       	eor	r24, r24
    5a2c:	77 fd       	sbrc	r23, 7
    5a2e:	80 95       	com	r24
    5a30:	98 2f       	mov	r25, r24
    5a32:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    5a36:	7b 01       	movw	r14, r22
    5a38:	8c 01       	movw	r16, r24
    5a3a:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    5a3e:	20 91 b1 04 	lds	r18, 0x04B1
    5a42:	30 91 b2 04 	lds	r19, 0x04B2
    5a46:	40 91 b3 04 	lds	r20, 0x04B3
    5a4a:	50 91 b4 04 	lds	r21, 0x04B4
    5a4e:	62 1b       	sub	r22, r18
    5a50:	73 0b       	sbc	r23, r19
    5a52:	84 0b       	sbc	r24, r20
    5a54:	95 0b       	sbc	r25, r21
    5a56:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <__floatunsisf>
    5a5a:	20 e0       	ldi	r18, 0x00	; 0
    5a5c:	30 e0       	ldi	r19, 0x00	; 0
    5a5e:	40 ed       	ldi	r20, 0xD0	; 208
    5a60:	52 e4       	ldi	r21, 0x42	; 66
    5a62:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    5a66:	9b 01       	movw	r18, r22
    5a68:	ac 01       	movw	r20, r24
    5a6a:	c8 01       	movw	r24, r16
    5a6c:	b7 01       	movw	r22, r14
    5a6e:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    5a72:	20 e0       	ldi	r18, 0x00	; 0
    5a74:	34 e2       	ldi	r19, 0x24	; 36
    5a76:	44 e7       	ldi	r20, 0x74	; 116
    5a78:	59 e4       	ldi	r21, 0x49	; 73
    5a7a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    5a7e:	9b 01       	movw	r18, r22
    5a80:	ac 01       	movw	r20, r24
    5a82:	60 91 88 04 	lds	r22, 0x0488
    5a86:	70 91 89 04 	lds	r23, 0x0489
    5a8a:	80 91 8a 04 	lds	r24, 0x048A
    5a8e:	90 91 8b 04 	lds	r25, 0x048B
    5a92:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <__addsf3>
    5a96:	60 93 88 04 	sts	0x0488, r22
    5a9a:	70 93 89 04 	sts	0x0489, r23
    5a9e:	80 93 8a 04 	sts	0x048A, r24
    5aa2:	90 93 8b 04 	sts	0x048B, r25
		timeLeftOdom = getTime100MicroSec();
    5aa6:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    5aaa:	60 93 b1 04 	sts	0x04B1, r22
    5aae:	70 93 b2 04 	sts	0x04B2, r23
    5ab2:	80 93 b3 04 	sts	0x04B3, r24
    5ab6:	90 93 b4 04 	sts	0x04B4, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    5aba:	80 91 16 02 	lds	r24, 0x0216
    5abe:	81 30       	cpi	r24, 0x01	; 1
    5ac0:	09 f4       	brne	.+2      	; 0x5ac4 <handleMotorsWithSpeedController+0x17e>
    5ac2:	c7 c1       	rjmp	.+910    	; 0x5e52 <handleMotorsWithSpeedController+0x50c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    5ac4:	8d e0       	ldi	r24, 0x0D	; 13
    5ac6:	93 e0       	ldi	r25, 0x03	; 3
    5ac8:	0e 94 a1 13 	call	0x2742	; 0x2742 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    5acc:	80 91 0d 03 	lds	r24, 0x030D
    5ad0:	90 91 0e 03 	lds	r25, 0x030E
    5ad4:	90 93 f6 02 	sts	0x02F6, r25
    5ad8:	80 93 f5 02 	sts	0x02F5, r24

		if(pwm_left > 0) {
    5adc:	18 16       	cp	r1, r24
    5ade:	19 06       	cpc	r1, r25
    5ae0:	0c f0       	brlt	.+2      	; 0x5ae4 <handleMotorsWithSpeedController+0x19e>
    5ae2:	f9 c1       	rjmp	.+1010   	; 0x5ed6 <handleMotorsWithSpeedController+0x590>
			OCR4A = (unsigned int)pwm_left;
    5ae4:	90 93 a9 00 	sts	0x00A9, r25
    5ae8:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    5aec:	80 91 98 04 	lds	r24, 0x0498
    5af0:	8f 5f       	subi	r24, 0xFF	; 255
    5af2:	80 93 98 04 	sts	0x0498, r24

	}

	if(compute_right_vel) {
    5af6:	80 91 08 02 	lds	r24, 0x0208
    5afa:	88 23       	and	r24, r24
    5afc:	09 f0       	breq	.+2      	; 0x5b00 <handleMotorsWithSpeedController+0x1ba>
    5afe:	c1 c0       	rjmp	.+386    	; 0x5c82 <handleMotorsWithSpeedController+0x33c>
    5b00:	80 91 98 04 	lds	r24, 0x0498

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    5b04:	82 30       	cpi	r24, 0x02	; 2
    5b06:	08 f4       	brcc	.+2      	; 0x5b0a <handleMotorsWithSpeedController+0x1c4>
    5b08:	ab c0       	rjmp	.+342    	; 0x5c60 <handleMotorsWithSpeedController+0x31a>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    5b0a:	10 92 98 04 	sts	0x0498, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    5b0e:	60 90 8c 04 	lds	r6, 0x048C
    5b12:	70 90 8d 04 	lds	r7, 0x048D
    5b16:	80 90 8e 04 	lds	r8, 0x048E
    5b1a:	90 90 8f 04 	lds	r9, 0x048F
    5b1e:	20 90 88 04 	lds	r2, 0x0488
    5b22:	30 90 89 04 	lds	r3, 0x0489
    5b26:	40 90 8a 04 	lds	r4, 0x048A
    5b2a:	50 90 8b 04 	lds	r5, 0x048B
    5b2e:	c4 01       	movw	r24, r8
    5b30:	b3 01       	movw	r22, r6
    5b32:	20 91 94 04 	lds	r18, 0x0494
    5b36:	30 91 95 04 	lds	r19, 0x0495
    5b3a:	40 91 96 04 	lds	r20, 0x0496
    5b3e:	50 91 97 04 	lds	r21, 0x0497
    5b42:	0e 94 2b 3d 	call	0x7a56	; 0x7a56 <__subsf3>
    5b46:	7b 01       	movw	r14, r22
    5b48:	8c 01       	movw	r16, r24
    5b4a:	c2 01       	movw	r24, r4
    5b4c:	b1 01       	movw	r22, r2
    5b4e:	20 91 90 04 	lds	r18, 0x0490
    5b52:	30 91 91 04 	lds	r19, 0x0491
    5b56:	40 91 92 04 	lds	r20, 0x0492
    5b5a:	50 91 93 04 	lds	r21, 0x0493
    5b5e:	0e 94 2b 3d 	call	0x7a56	; 0x7a56 <__subsf3>
    5b62:	9b 01       	movw	r18, r22
    5b64:	ac 01       	movw	r20, r24
    5b66:	c8 01       	movw	r24, r16
    5b68:	b7 01       	movw	r22, r14
    5b6a:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <__addsf3>
    5b6e:	20 e0       	ldi	r18, 0x00	; 0
    5b70:	30 e0       	ldi	r19, 0x00	; 0
    5b72:	40 e0       	ldi	r20, 0x00	; 0
    5b74:	5f e3       	ldi	r21, 0x3F	; 63
    5b76:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    5b7a:	d6 2e       	mov	r13, r22
    5b7c:	c7 2e       	mov	r12, r23
    5b7e:	b8 2e       	mov	r11, r24
    5b80:	a9 2e       	mov	r10, r25
    5b82:	a6 01       	movw	r20, r12
    5b84:	95 01       	movw	r18, r10
    5b86:	85 2f       	mov	r24, r21
    5b88:	94 2f       	mov	r25, r20
    5b8a:	a3 2f       	mov	r26, r19
    5b8c:	b2 2f       	mov	r27, r18
    5b8e:	80 93 74 04 	sts	0x0474, r24
    5b92:	90 93 75 04 	sts	0x0475, r25
    5b96:	a0 93 76 04 	sts	0x0476, r26
    5b9a:	b0 93 77 04 	sts	0x0477, r27

		if(robotPosition == HORIZONTAL_POS) {
    5b9e:	80 91 16 02 	lds	r24, 0x0216
    5ba2:	81 30       	cpi	r24, 0x01	; 1
    5ba4:	09 f4       	brne	.+2      	; 0x5ba8 <handleMotorsWithSpeedController+0x262>
    5ba6:	1d c1       	rjmp	.+570    	; 0x5de2 <handleMotorsWithSpeedController+0x49c>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    5ba8:	f0 90 99 04 	lds	r15, 0x0499
    5bac:	00 91 9a 04 	lds	r16, 0x049A
    5bb0:	10 91 9b 04 	lds	r17, 0x049B
    5bb4:	e0 90 9c 04 	lds	r14, 0x049C
    5bb8:	8f 2d       	mov	r24, r15
    5bba:	90 2f       	mov	r25, r16
    5bbc:	a1 2f       	mov	r26, r17
    5bbe:	be 2d       	mov	r27, r14
    5bc0:	80 93 64 04 	sts	0x0464, r24
    5bc4:	90 93 65 04 	sts	0x0465, r25
    5bc8:	a0 93 66 04 	sts	0x0466, r26
    5bcc:	b0 93 67 04 	sts	0x0467, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    5bd0:	6f 2d       	mov	r22, r15
    5bd2:	70 2f       	mov	r23, r16
    5bd4:	81 2f       	mov	r24, r17
    5bd6:	9e 2d       	mov	r25, r14
    5bd8:	0e 94 f6 3d 	call	0x7bec	; 0x7bec <cos>
    5bdc:	9b 01       	movw	r18, r22
    5bde:	ac 01       	movw	r20, r24
    5be0:	d6 01       	movw	r26, r12
    5be2:	f5 01       	movw	r30, r10
    5be4:	6b 2f       	mov	r22, r27
    5be6:	7c 2d       	mov	r23, r12
    5be8:	8f 2f       	mov	r24, r31
    5bea:	9a 2d       	mov	r25, r10
    5bec:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    5bf0:	9b 01       	movw	r18, r22
    5bf2:	ac 01       	movw	r20, r24
    5bf4:	60 91 6c 04 	lds	r22, 0x046C
    5bf8:	70 91 6d 04 	lds	r23, 0x046D
    5bfc:	80 91 6e 04 	lds	r24, 0x046E
    5c00:	90 91 6f 04 	lds	r25, 0x046F
    5c04:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <__addsf3>
    5c08:	60 93 6c 04 	sts	0x046C, r22
    5c0c:	70 93 6d 04 	sts	0x046D, r23
    5c10:	80 93 6e 04 	sts	0x046E, r24
    5c14:	90 93 6f 04 	sts	0x046F, r25
		yPos = yPos + sin(theta)*deltaDist;
    5c18:	6f 2d       	mov	r22, r15
    5c1a:	70 2f       	mov	r23, r16
    5c1c:	81 2f       	mov	r24, r17
    5c1e:	9e 2d       	mov	r25, r14
    5c20:	0e 94 0c 40 	call	0x8018	; 0x8018 <sin>
    5c24:	9b 01       	movw	r18, r22
    5c26:	ac 01       	movw	r20, r24
    5c28:	d6 01       	movw	r26, r12
    5c2a:	f5 01       	movw	r30, r10
    5c2c:	6b 2f       	mov	r22, r27
    5c2e:	7c 2d       	mov	r23, r12
    5c30:	8f 2f       	mov	r24, r31
    5c32:	9a 2d       	mov	r25, r10
    5c34:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    5c38:	9b 01       	movw	r18, r22
    5c3a:	ac 01       	movw	r20, r24
    5c3c:	60 91 70 04 	lds	r22, 0x0470
    5c40:	70 91 71 04 	lds	r23, 0x0471
    5c44:	80 91 72 04 	lds	r24, 0x0472
    5c48:	90 91 73 04 	lds	r25, 0x0473
    5c4c:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <__addsf3>
    5c50:	60 93 70 04 	sts	0x0470, r22
    5c54:	70 93 71 04 	sts	0x0471, r23
    5c58:	80 93 72 04 	sts	0x0472, r24
    5c5c:	90 93 73 04 	sts	0x0473, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    5c60:	1f 91       	pop	r17
    5c62:	0f 91       	pop	r16
    5c64:	ff 90       	pop	r15
    5c66:	ef 90       	pop	r14
    5c68:	df 90       	pop	r13
    5c6a:	cf 90       	pop	r12
    5c6c:	bf 90       	pop	r11
    5c6e:	af 90       	pop	r10
    5c70:	9f 90       	pop	r9
    5c72:	8f 90       	pop	r8
    5c74:	7f 90       	pop	r7
    5c76:	6f 90       	pop	r6
    5c78:	5f 90       	pop	r5
    5c7a:	4f 90       	pop	r4
    5c7c:	3f 90       	pop	r3
    5c7e:	2f 90       	pop	r2
    5c80:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    5c82:	20 91 ed 02 	lds	r18, 0x02ED
    5c86:	30 91 ee 02 	lds	r19, 0x02EE
    5c8a:	36 95       	lsr	r19
    5c8c:	27 95       	ror	r18
    5c8e:	36 95       	lsr	r19
    5c90:	27 95       	ror	r18
    5c92:	30 93 f2 02 	sts	0x02F2, r19
    5c96:	20 93 f1 02 	sts	0x02F1, r18
		compute_right_vel = 0;
    5c9a:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    5c9e:	10 92 ee 02 	sts	0x02EE, r1
    5ca2:	10 92 ed 02 	sts	0x02ED, r1

		if(calibrateOdomFlag==1) {
    5ca6:	80 91 c0 04 	lds	r24, 0x04C0
    5caa:	81 30       	cpi	r24, 0x01	; 1
    5cac:	09 f4       	brne	.+2      	; 0x5cb0 <handleMotorsWithSpeedController+0x36a>
    5cae:	d6 c0       	rjmp	.+428    	; 0x5e5c <handleMotorsWithSpeedController+0x516>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    5cb0:	0e 94 ed 27 	call	0x4fda	; 0x4fda <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    5cb4:	80 91 8c 04 	lds	r24, 0x048C
    5cb8:	90 91 8d 04 	lds	r25, 0x048D
    5cbc:	a0 91 8e 04 	lds	r26, 0x048E
    5cc0:	b0 91 8f 04 	lds	r27, 0x048F
    5cc4:	80 93 94 04 	sts	0x0494, r24
    5cc8:	90 93 95 04 	sts	0x0495, r25
    5ccc:	a0 93 96 04 	sts	0x0496, r26
    5cd0:	b0 93 97 04 	sts	0x0497, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    5cd4:	60 91 af 04 	lds	r22, 0x04AF
    5cd8:	70 91 b0 04 	lds	r23, 0x04B0
    5cdc:	88 27       	eor	r24, r24
    5cde:	77 fd       	sbrc	r23, 7
    5ce0:	80 95       	com	r24
    5ce2:	98 2f       	mov	r25, r24
    5ce4:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    5ce8:	7b 01       	movw	r14, r22
    5cea:	8c 01       	movw	r16, r24
    5cec:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    5cf0:	20 91 b5 04 	lds	r18, 0x04B5
    5cf4:	30 91 b6 04 	lds	r19, 0x04B6
    5cf8:	40 91 b7 04 	lds	r20, 0x04B7
    5cfc:	50 91 b8 04 	lds	r21, 0x04B8
    5d00:	62 1b       	sub	r22, r18
    5d02:	73 0b       	sbc	r23, r19
    5d04:	84 0b       	sbc	r24, r20
    5d06:	95 0b       	sbc	r25, r21
    5d08:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <__floatunsisf>
    5d0c:	20 e0       	ldi	r18, 0x00	; 0
    5d0e:	30 e0       	ldi	r19, 0x00	; 0
    5d10:	40 ed       	ldi	r20, 0xD0	; 208
    5d12:	52 e4       	ldi	r21, 0x42	; 66
    5d14:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    5d18:	9b 01       	movw	r18, r22
    5d1a:	ac 01       	movw	r20, r24
    5d1c:	c8 01       	movw	r24, r16
    5d1e:	b7 01       	movw	r22, r14
    5d20:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    5d24:	20 e0       	ldi	r18, 0x00	; 0
    5d26:	34 e2       	ldi	r19, 0x24	; 36
    5d28:	44 e7       	ldi	r20, 0x74	; 116
    5d2a:	59 e4       	ldi	r21, 0x49	; 73
    5d2c:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    5d30:	9b 01       	movw	r18, r22
    5d32:	ac 01       	movw	r20, r24
    5d34:	60 91 8c 04 	lds	r22, 0x048C
    5d38:	70 91 8d 04 	lds	r23, 0x048D
    5d3c:	80 91 8e 04 	lds	r24, 0x048E
    5d40:	90 91 8f 04 	lds	r25, 0x048F
    5d44:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <__addsf3>
    5d48:	60 93 8c 04 	sts	0x048C, r22
    5d4c:	70 93 8d 04 	sts	0x048D, r23
    5d50:	80 93 8e 04 	sts	0x048E, r24
    5d54:	90 93 8f 04 	sts	0x048F, r25
		timeRightOdom = getTime100MicroSec();
    5d58:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getTime100MicroSec>
    5d5c:	60 93 b5 04 	sts	0x04B5, r22
    5d60:	70 93 b6 04 	sts	0x04B6, r23
    5d64:	80 93 b7 04 	sts	0x04B7, r24
    5d68:	90 93 b8 04 	sts	0x04B8, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    5d6c:	80 91 16 02 	lds	r24, 0x0216
    5d70:	81 30       	cpi	r24, 0x01	; 1
    5d72:	09 f4       	brne	.+2      	; 0x5d76 <handleMotorsWithSpeedController+0x430>
    5d74:	47 c0       	rjmp	.+142    	; 0x5e04 <handleMotorsWithSpeedController+0x4be>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    5d76:	8b e0       	ldi	r24, 0x0B	; 11
    5d78:	93 e0       	ldi	r25, 0x03	; 3
    5d7a:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    5d7e:	80 91 0b 03 	lds	r24, 0x030B
    5d82:	90 91 0c 03 	lds	r25, 0x030C
    5d86:	90 93 f4 02 	sts	0x02F4, r25
    5d8a:	80 93 f3 02 	sts	0x02F3, r24

		if(pwm_right > 0) {
    5d8e:	18 16       	cp	r1, r24
    5d90:	19 06       	cpc	r1, r25
    5d92:	0c f0       	brlt	.+2      	; 0x5d96 <handleMotorsWithSpeedController+0x450>
    5d94:	95 c0       	rjmp	.+298    	; 0x5ec0 <handleMotorsWithSpeedController+0x57a>
			OCR3A = (unsigned int)pwm_right;
    5d96:	90 93 99 00 	sts	0x0099, r25
    5d9a:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    5d9e:	80 91 98 04 	lds	r24, 0x0498
    5da2:	8f 5f       	subi	r24, 0xFF	; 255
    5da4:	80 93 98 04 	sts	0x0498, r24
    5da8:	ad ce       	rjmp	.-678    	; 0x5b04 <handleMotorsWithSpeedController+0x1be>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    5daa:	8d e0       	ldi	r24, 0x0D	; 13
    5dac:	93 e0       	ldi	r25, 0x03	; 3
    5dae:	6b e0       	ldi	r22, 0x0B	; 11
    5db0:	73 e0       	ldi	r23, 0x03	; 3
    5db2:	0e 94 d8 32 	call	0x65b0	; 0x65b0 <obstacleAvoidance>
    5db6:	80 91 0d 03 	lds	r24, 0x030D
    5dba:	90 91 0e 03 	lds	r25, 0x030E
    5dbe:	f7 cd       	rjmp	.-1042   	; 0x59ae <handleMotorsWithSpeedController+0x68>
}

void handleMotorsWithSpeedController() {

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    5dc0:	80 91 fb 02 	lds	r24, 0x02FB
    5dc4:	90 91 fc 02 	lds	r25, 0x02FC
    5dc8:	90 93 0c 03 	sts	0x030C, r25
    5dcc:	80 93 0b 03 	sts	0x030B, r24
		pwm_left_working = pwm_intermediate_left_desired;
    5dd0:	80 91 fd 02 	lds	r24, 0x02FD
    5dd4:	90 91 fe 02 	lds	r25, 0x02FE
    5dd8:	90 93 0e 03 	sts	0x030E, r25
    5ddc:	80 93 0d 03 	sts	0x030D, r24
    5de0:	e1 cd       	rjmp	.-1086   	; 0x59a4 <handleMotorsWithSpeedController+0x5e>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    5de2:	c4 01       	movw	r24, r8
    5de4:	b3 01       	movw	r22, r6
    5de6:	a2 01       	movw	r20, r4
    5de8:	91 01       	movw	r18, r2
    5dea:	0e 94 2b 3d 	call	0x7a56	; 0x7a56 <__subsf3>
    5dee:	20 e0       	ldi	r18, 0x00	; 0
    5df0:	30 e0       	ldi	r19, 0x00	; 0
    5df2:	4e e1       	ldi	r20, 0x1E	; 30
    5df4:	52 e4       	ldi	r21, 0x42	; 66
    5df6:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__divsf3>
    5dfa:	f6 2e       	mov	r15, r22
    5dfc:	07 2f       	mov	r16, r23
    5dfe:	18 2f       	mov	r17, r24
    5e00:	e9 2e       	mov	r14, r25
    5e02:	da ce       	rjmp	.-588    	; 0x5bb8 <handleMotorsWithSpeedController+0x272>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    5e04:	8b e0       	ldi	r24, 0x0B	; 11
    5e06:	93 e0       	ldi	r25, 0x03	; 3
    5e08:	0e 94 dd 16 	call	0x2dba	; 0x2dba <start_horizontal_speed_control_right>
    5e0c:	b8 cf       	rjmp	.-144    	; 0x5d7e <handleMotorsWithSpeedController+0x438>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    5e0e:	44 27       	eor	r20, r20
    5e10:	37 fd       	sbrc	r19, 7
    5e12:	40 95       	com	r20
    5e14:	54 2f       	mov	r21, r20
    5e16:	80 91 9d 04 	lds	r24, 0x049D
    5e1a:	90 91 9e 04 	lds	r25, 0x049E
    5e1e:	a0 91 9f 04 	lds	r26, 0x049F
    5e22:	b0 91 a0 04 	lds	r27, 0x04A0
    5e26:	82 0f       	add	r24, r18
    5e28:	93 1f       	adc	r25, r19
    5e2a:	a4 1f       	adc	r26, r20
    5e2c:	b5 1f       	adc	r27, r21
    5e2e:	80 93 9d 04 	sts	0x049D, r24
    5e32:	90 93 9e 04 	sts	0x049E, r25
    5e36:	a0 93 9f 04 	sts	0x049F, r26
    5e3a:	b0 93 a0 04 	sts	0x04A0, r27
			leftSumCount++;
    5e3e:	80 91 a5 04 	lds	r24, 0x04A5
    5e42:	90 91 a6 04 	lds	r25, 0x04A6
    5e46:	01 96       	adiw	r24, 0x01	; 1
    5e48:	90 93 a6 04 	sts	0x04A6, r25
    5e4c:	80 93 a5 04 	sts	0x04A5, r24
    5e50:	d6 cd       	rjmp	.-1108   	; 0x59fe <handleMotorsWithSpeedController+0xb8>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    5e52:	8d e0       	ldi	r24, 0x0D	; 13
    5e54:	93 e0       	ldi	r25, 0x03	; 3
    5e56:	0e 94 24 18 	call	0x3048	; 0x3048 <start_horizontal_speed_control_left>
    5e5a:	38 ce       	rjmp	.-912    	; 0x5acc <handleMotorsWithSpeedController+0x186>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    5e5c:	44 27       	eor	r20, r20
    5e5e:	37 fd       	sbrc	r19, 7
    5e60:	40 95       	com	r20
    5e62:	54 2f       	mov	r21, r20
    5e64:	80 91 a1 04 	lds	r24, 0x04A1
    5e68:	90 91 a2 04 	lds	r25, 0x04A2
    5e6c:	a0 91 a3 04 	lds	r26, 0x04A3
    5e70:	b0 91 a4 04 	lds	r27, 0x04A4
    5e74:	82 0f       	add	r24, r18
    5e76:	93 1f       	adc	r25, r19
    5e78:	a4 1f       	adc	r26, r20
    5e7a:	b5 1f       	adc	r27, r21
    5e7c:	80 93 a1 04 	sts	0x04A1, r24
    5e80:	90 93 a2 04 	sts	0x04A2, r25
    5e84:	a0 93 a3 04 	sts	0x04A3, r26
    5e88:	b0 93 a4 04 	sts	0x04A4, r27
			rightSumCount++;
    5e8c:	80 91 a7 04 	lds	r24, 0x04A7
    5e90:	90 91 a8 04 	lds	r25, 0x04A8
    5e94:	01 96       	adiw	r24, 0x01	; 1
    5e96:	90 93 a8 04 	sts	0x04A8, r25
    5e9a:	80 93 a7 04 	sts	0x04A7, r24
    5e9e:	08 cf       	rjmp	.-496    	; 0x5cb0 <handleMotorsWithSpeedController+0x36a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    5ea0:	62 e0       	ldi	r22, 0x02	; 2
    5ea2:	0e 94 85 24 	call	0x490a	; 0x490a <getInputFromSpeed>
    5ea6:	90 93 0e 03 	sts	0x030E, r25
    5eaa:	80 93 0d 03 	sts	0x030D, r24
    5eae:	7a cd       	rjmp	.-1292   	; 0x59a4 <handleMotorsWithSpeedController+0x5e>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    5eb0:	63 e0       	ldi	r22, 0x03	; 3
    5eb2:	0e 94 85 24 	call	0x490a	; 0x490a <getInputFromSpeed>
    5eb6:	90 93 0c 03 	sts	0x030C, r25
    5eba:	80 93 0b 03 	sts	0x030B, r24
    5ebe:	65 cd       	rjmp	.-1334   	; 0x598a <handleMotorsWithSpeedController+0x44>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    5ec0:	00 97       	sbiw	r24, 0x00	; 0
    5ec2:	a1 f4       	brne	.+40     	; 0x5eec <handleMotorsWithSpeedController+0x5a6>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    5ec4:	10 92 99 00 	sts	0x0099, r1
    5ec8:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    5ecc:	10 92 9b 00 	sts	0x009B, r1
    5ed0:	10 92 9a 00 	sts	0x009A, r1
    5ed4:	64 cf       	rjmp	.-312    	; 0x5d9e <handleMotorsWithSpeedController+0x458>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    5ed6:	00 97       	sbiw	r24, 0x00	; 0
    5ed8:	89 f4       	brne	.+34     	; 0x5efc <handleMotorsWithSpeedController+0x5b6>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    5eda:	10 92 a9 00 	sts	0x00A9, r1
    5ede:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    5ee2:	10 92 ab 00 	sts	0x00AB, r1
    5ee6:	10 92 aa 00 	sts	0x00AA, r1
    5eea:	00 ce       	rjmp	.-1024   	; 0x5aec <handleMotorsWithSpeedController+0x1a6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    5eec:	90 95       	com	r25
    5eee:	81 95       	neg	r24
    5ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ef2:	90 93 9b 00 	sts	0x009B, r25
    5ef6:	80 93 9a 00 	sts	0x009A, r24
    5efa:	51 cf       	rjmp	.-350    	; 0x5d9e <handleMotorsWithSpeedController+0x458>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    5efc:	90 95       	com	r25
    5efe:	81 95       	neg	r24
    5f00:	9f 4f       	sbci	r25, 0xFF	; 255
    5f02:	90 93 ab 00 	sts	0x00AB, r25
    5f06:	80 93 aa 00 	sts	0x00AA, r24
    5f0a:	f0 cd       	rjmp	.-1056   	; 0x5aec <handleMotorsWithSpeedController+0x1a6>

00005f0c <initCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void initCalibration() {
    5f0c:	2f 92       	push	r2
    5f0e:	3f 92       	push	r3
    5f10:	4f 92       	push	r4
    5f12:	5f 92       	push	r5
    5f14:	6f 92       	push	r6
    5f16:	7f 92       	push	r7
    5f18:	8f 92       	push	r8
    5f1a:	9f 92       	push	r9
    5f1c:	af 92       	push	r10
    5f1e:	bf 92       	push	r11
    5f20:	cf 92       	push	r12
    5f22:	df 92       	push	r13
    5f24:	ef 92       	push	r14
    5f26:	ff 92       	push	r15
    5f28:	0f 93       	push	r16
    5f2a:	1f 93       	push	r17
    5f2c:	cf 93       	push	r28
    5f2e:	df 93       	push	r29

    unsigned int temp=0;
    unsigned int i=0;

	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    5f30:	8a e6       	ldi	r24, 0x6A	; 106
    5f32:	9f e0       	ldi	r25, 0x0F	; 15
    5f34:	0e 94 2d 41 	call	0x825a	; 0x825a <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    5f38:	2a ea       	ldi	r18, 0xAA	; 170
    5f3a:	85 35       	cpi	r24, 0x55	; 85
    5f3c:	92 07       	cpc	r25, r18
    5f3e:	09 f4       	brne	.+2      	; 0x5f42 <initCalibration+0x36>
    5f40:	b1 c1       	rjmp	.+866    	; 0x62a4 <initCalibration+0x398>
        for(i=0; i<CALIBRATION_SAMPLES; i++) {
            calibration[i][0] = i+1;
        }
        // the following values are taken from a field test
        // forward left, speed control enabled
        calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    5f42:	a4 e1       	ldi	r26, 0x14	; 20
    5f44:	b0 e0       	ldi	r27, 0x00	; 0
    5f46:	b0 93 d7 04 	sts	0x04D7, r27
    5f4a:	a0 93 d6 04 	sts	0x04D6, r26
        calibration[1][0] = 40;
    5f4e:	88 e2       	ldi	r24, 0x28	; 40
    5f50:	90 e0       	ldi	r25, 0x00	; 0
    5f52:	90 93 e7 04 	sts	0x04E7, r25
    5f56:	80 93 e6 04 	sts	0x04E6, r24
        calibration[2][0] = 59;
    5f5a:	8b e3       	ldi	r24, 0x3B	; 59
    5f5c:	90 e0       	ldi	r25, 0x00	; 0
    5f5e:	90 93 f7 04 	sts	0x04F7, r25
    5f62:	80 93 f6 04 	sts	0x04F6, r24
        calibration[3][0] = 79;
    5f66:	0f e4       	ldi	r16, 0x4F	; 79
    5f68:	10 e0       	ldi	r17, 0x00	; 0
    5f6a:	10 93 07 05 	sts	0x0507, r17
    5f6e:	00 93 06 05 	sts	0x0506, r16
        calibration[4][0] = 100;
    5f72:	e4 e6       	ldi	r30, 0x64	; 100
    5f74:	f0 e0       	ldi	r31, 0x00	; 0
    5f76:	f0 93 17 05 	sts	0x0517, r31
    5f7a:	e0 93 16 05 	sts	0x0516, r30
        calibration[5][0] = 120;
    5f7e:	f8 e7       	ldi	r31, 0x78	; 120
    5f80:	af 2e       	mov	r10, r31
    5f82:	b1 2c       	mov	r11, r1
    5f84:	b0 92 27 05 	sts	0x0527, r11
    5f88:	a0 92 26 05 	sts	0x0526, r10
        calibration[6][0] = 139;
    5f8c:	8b e8       	ldi	r24, 0x8B	; 139
    5f8e:	90 e0       	ldi	r25, 0x00	; 0
    5f90:	90 93 37 05 	sts	0x0537, r25
    5f94:	80 93 36 05 	sts	0x0536, r24
        calibration[7][0] = 159;
    5f98:	2f e9       	ldi	r18, 0x9F	; 159
    5f9a:	30 e0       	ldi	r19, 0x00	; 0
    5f9c:	30 93 47 05 	sts	0x0547, r19
    5fa0:	20 93 46 05 	sts	0x0546, r18
		calibration[8][0] = 180;
    5fa4:	44 eb       	ldi	r20, 0xB4	; 180
    5fa6:	50 e0       	ldi	r21, 0x00	; 0
    5fa8:	50 93 57 05 	sts	0x0557, r21
    5fac:	40 93 56 05 	sts	0x0556, r20
        calibration[0][1] = 19;    	// real speed measured in mm/s
    5fb0:	63 e1       	ldi	r22, 0x13	; 19
    5fb2:	70 e0       	ldi	r23, 0x00	; 0
    5fb4:	70 93 d9 04 	sts	0x04D9, r23
    5fb8:	60 93 d8 04 	sts	0x04D8, r22
        calibration[1][1] = 47;
    5fbc:	2f e2       	ldi	r18, 0x2F	; 47
    5fbe:	30 e0       	ldi	r19, 0x00	; 0
    5fc0:	30 93 e9 04 	sts	0x04E9, r19
    5fc4:	20 93 e8 04 	sts	0x04E8, r18
        calibration[2][1] = 72;
    5fc8:	28 e4       	ldi	r18, 0x48	; 72
    5fca:	30 e0       	ldi	r19, 0x00	; 0
    5fcc:	30 93 f9 04 	sts	0x04F9, r19
    5fd0:	20 93 f8 04 	sts	0x04F8, r18
        calibration[3][1] = 91;
    5fd4:	2b e5       	ldi	r18, 0x5B	; 91
    5fd6:	30 e0       	ldi	r19, 0x00	; 0
    5fd8:	30 93 09 05 	sts	0x0509, r19
    5fdc:	20 93 08 05 	sts	0x0508, r18
        calibration[4][1] = 109;
    5fe0:	2d e6       	ldi	r18, 0x6D	; 109
    5fe2:	30 e0       	ldi	r19, 0x00	; 0
    5fe4:	30 93 19 05 	sts	0x0519, r19
    5fe8:	20 93 18 05 	sts	0x0518, r18
        calibration[5][1] = 125;
    5fec:	ed e7       	ldi	r30, 0x7D	; 125
    5fee:	6e 2e       	mov	r6, r30
    5ff0:	71 2c       	mov	r7, r1
    5ff2:	70 92 29 05 	sts	0x0529, r7
    5ff6:	60 92 28 05 	sts	0x0528, r6
        calibration[6][1] = 143;
    5ffa:	2f e8       	ldi	r18, 0x8F	; 143
    5ffc:	30 e0       	ldi	r19, 0x00	; 0
    5ffe:	30 93 39 05 	sts	0x0539, r19
    6002:	20 93 38 05 	sts	0x0538, r18
        calibration[7][1] = 160;
    6006:	20 ea       	ldi	r18, 0xA0	; 160
    6008:	30 e0       	ldi	r19, 0x00	; 0
    600a:	30 93 49 05 	sts	0x0549, r19
    600e:	20 93 48 05 	sts	0x0548, r18
		calibration[8][1] = 174;
    6012:	ee ea       	ldi	r30, 0xAE	; 174
    6014:	f0 e0       	ldi	r31, 0x00	; 0
    6016:	f0 93 59 05 	sts	0x0559, r31
    601a:	e0 93 58 05 	sts	0x0558, r30
        // forward right, speed control enabled
        calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    601e:	70 93 db 04 	sts	0x04DB, r23
    6022:	60 93 da 04 	sts	0x04DA, r22
        calibration[1][2] = 39;
    6026:	e7 e2       	ldi	r30, 0x27	; 39
    6028:	f0 e0       	ldi	r31, 0x00	; 0
    602a:	f0 93 eb 04 	sts	0x04EB, r31
    602e:	e0 93 ea 04 	sts	0x04EA, r30
        calibration[2][2] = 60;
    6032:	cc e3       	ldi	r28, 0x3C	; 60
    6034:	d0 e0       	ldi	r29, 0x00	; 0
    6036:	d0 93 fb 04 	sts	0x04FB, r29
    603a:	c0 93 fa 04 	sts	0x04FA, r28
        calibration[3][2] = 80;
    603e:	70 e5       	ldi	r23, 0x50	; 80
    6040:	27 2e       	mov	r2, r23
    6042:	31 2c       	mov	r3, r1
    6044:	30 92 0b 05 	sts	0x050B, r3
    6048:	20 92 0a 05 	sts	0x050A, r2
        calibration[4][2] = 99;
    604c:	63 e6       	ldi	r22, 0x63	; 99
    604e:	e6 2e       	mov	r14, r22
    6050:	f1 2c       	mov	r15, r1
    6052:	f0 92 1b 05 	sts	0x051B, r15
    6056:	e0 92 1a 05 	sts	0x051A, r14
        calibration[5][2] = 119;
    605a:	67 e7       	ldi	r22, 0x77	; 119
    605c:	70 e0       	ldi	r23, 0x00	; 0
    605e:	70 93 2b 05 	sts	0x052B, r23
    6062:	60 93 2a 05 	sts	0x052A, r22
        calibration[6][2] = 140;
    6066:	0f 2e       	mov	r0, r31
    6068:	fc e8       	ldi	r31, 0x8C	; 140
    606a:	cf 2e       	mov	r12, r31
    606c:	dd 24       	eor	r13, r13
    606e:	f0 2d       	mov	r31, r0
    6070:	d0 92 3b 05 	sts	0x053B, r13
    6074:	c0 92 3a 05 	sts	0x053A, r12
        calibration[7][2] = 160;
    6078:	30 93 4b 05 	sts	0x054B, r19
    607c:	20 93 4a 05 	sts	0x054A, r18
		calibration[8][2] = 180;
    6080:	50 93 5b 05 	sts	0x055B, r21
    6084:	40 93 5a 05 	sts	0x055A, r20
        calibration[0][3] = 23;    	// real speed measured in mm/s
    6088:	0f 2e       	mov	r0, r31
    608a:	f7 e1       	ldi	r31, 0x17	; 23
    608c:	8f 2e       	mov	r8, r31
    608e:	99 24       	eor	r9, r9
    6090:	f0 2d       	mov	r31, r0
    6092:	90 92 dd 04 	sts	0x04DD, r9
    6096:	80 92 dc 04 	sts	0x04DC, r8
        calibration[1][3] = 46;
    609a:	0f 2e       	mov	r0, r31
    609c:	fe e2       	ldi	r31, 0x2E	; 46
    609e:	8f 2e       	mov	r8, r31
    60a0:	99 24       	eor	r9, r9
    60a2:	f0 2d       	mov	r31, r0
    60a4:	90 92 ed 04 	sts	0x04ED, r9
    60a8:	80 92 ec 04 	sts	0x04EC, r8
        calibration[2][3] = 64;
    60ac:	88 24       	eor	r8, r8
    60ae:	99 24       	eor	r9, r9
    60b0:	68 94       	set
    60b2:	86 f8       	bld	r8, 6
    60b4:	90 92 fd 04 	sts	0x04FD, r9
    60b8:	80 92 fc 04 	sts	0x04FC, r8
        calibration[3][3] = 81;
    60bc:	0f 2e       	mov	r0, r31
    60be:	f1 e5       	ldi	r31, 0x51	; 81
    60c0:	4f 2e       	mov	r4, r31
    60c2:	55 24       	eor	r5, r5
    60c4:	f0 2d       	mov	r31, r0
    60c6:	50 92 0d 05 	sts	0x050D, r5
    60ca:	40 92 0c 05 	sts	0x050C, r4
        calibration[4][3] = 97;
    60ce:	0f 2e       	mov	r0, r31
    60d0:	f1 e6       	ldi	r31, 0x61	; 97
    60d2:	8f 2e       	mov	r8, r31
    60d4:	99 24       	eor	r9, r9
    60d6:	f0 2d       	mov	r31, r0
    60d8:	90 92 1d 05 	sts	0x051D, r9
    60dc:	80 92 1c 05 	sts	0x051C, r8
        calibration[5][3] = 112;
    60e0:	0f 2e       	mov	r0, r31
    60e2:	f0 e7       	ldi	r31, 0x70	; 112
    60e4:	8f 2e       	mov	r8, r31
    60e6:	99 24       	eor	r9, r9
    60e8:	f0 2d       	mov	r31, r0
    60ea:	90 92 2d 05 	sts	0x052D, r9
    60ee:	80 92 2c 05 	sts	0x052C, r8
        calibration[6][3] = 125;
    60f2:	70 92 3d 05 	sts	0x053D, r7
    60f6:	60 92 3c 05 	sts	0x053C, r6
        calibration[7][3] = 139;
    60fa:	90 93 4d 05 	sts	0x054D, r25
    60fe:	80 93 4c 05 	sts	0x054C, r24
		calibration[8][3] = 152;
    6102:	0f 2e       	mov	r0, r31
    6104:	f8 e9       	ldi	r31, 0x98	; 152
    6106:	8f 2e       	mov	r8, r31
    6108:	99 24       	eor	r9, r9
    610a:	f0 2d       	mov	r31, r0
    610c:	90 92 5d 05 	sts	0x055D, r9
    6110:	80 92 5c 05 	sts	0x055C, r8
        // backward left, speed control enabled
        calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    6114:	b0 93 df 04 	sts	0x04DF, r27
    6118:	a0 93 de 04 	sts	0x04DE, r26
        calibration[1][4] = 39;
    611c:	f0 93 ef 04 	sts	0x04EF, r31
    6120:	e0 93 ee 04 	sts	0x04EE, r30
        calibration[2][4] = 60;
    6124:	d0 93 ff 04 	sts	0x04FF, r29
    6128:	c0 93 fe 04 	sts	0x04FE, r28
        calibration[3][4] = 79;
    612c:	10 93 0f 05 	sts	0x050F, r17
    6130:	00 93 0e 05 	sts	0x050E, r16
        calibration[4][4] = 99;
    6134:	f0 92 1f 05 	sts	0x051F, r15
    6138:	e0 92 1e 05 	sts	0x051E, r14
        calibration[5][4] = 120;
    613c:	b0 92 2f 05 	sts	0x052F, r11
    6140:	a0 92 2e 05 	sts	0x052E, r10
        calibration[6][4] = 140;
    6144:	d0 92 3f 05 	sts	0x053F, r13
    6148:	c0 92 3e 05 	sts	0x053E, r12
        calibration[7][4] = 160;
    614c:	30 93 4f 05 	sts	0x054F, r19
    6150:	20 93 4e 05 	sts	0x054E, r18
		calibration[8][4] = 179;
    6154:	c3 eb       	ldi	r28, 0xB3	; 179
    6156:	d0 e0       	ldi	r29, 0x00	; 0
    6158:	d0 93 5f 05 	sts	0x055F, r29
    615c:	c0 93 5e 05 	sts	0x055E, r28
        calibration[0][5] = 18;    	// real speed measured in mm/s
    6160:	c2 e1       	ldi	r28, 0x12	; 18
    6162:	d0 e0       	ldi	r29, 0x00	; 0
    6164:	d0 93 e1 04 	sts	0x04E1, r29
    6168:	c0 93 e0 04 	sts	0x04E0, r28
        calibration[1][5] = 45;
    616c:	cd e2       	ldi	r28, 0x2D	; 45
    616e:	d0 e0       	ldi	r29, 0x00	; 0
    6170:	d0 93 f1 04 	sts	0x04F1, r29
    6174:	c0 93 f0 04 	sts	0x04F0, r28
        calibration[2][5] = 68;
    6178:	c4 e4       	ldi	r28, 0x44	; 68
    617a:	d0 e0       	ldi	r29, 0x00	; 0
    617c:	d0 93 01 05 	sts	0x0501, r29
    6180:	c0 93 00 05 	sts	0x0500, r28
        calibration[3][5] = 87;
    6184:	c7 e5       	ldi	r28, 0x57	; 87
    6186:	d0 e0       	ldi	r29, 0x00	; 0
    6188:	d0 93 11 05 	sts	0x0511, r29
    618c:	c0 93 10 05 	sts	0x0510, r28
        calibration[4][5] = 105;
    6190:	c9 e6       	ldi	r28, 0x69	; 105
    6192:	d0 e0       	ldi	r29, 0x00	; 0
    6194:	d0 93 21 05 	sts	0x0521, r29
    6198:	c0 93 20 05 	sts	0x0520, r28
        calibration[5][5] = 119;
    619c:	70 93 31 05 	sts	0x0531, r23
    61a0:	60 93 30 05 	sts	0x0530, r22
        calibration[6][5] = 137;
    61a4:	c9 e8       	ldi	r28, 0x89	; 137
    61a6:	d0 e0       	ldi	r29, 0x00	; 0
    61a8:	d0 93 41 05 	sts	0x0541, r29
    61ac:	c0 93 40 05 	sts	0x0540, r28
        calibration[7][5] = 151;
    61b0:	c7 e9       	ldi	r28, 0x97	; 151
    61b2:	d0 e0       	ldi	r29, 0x00	; 0
    61b4:	d0 93 51 05 	sts	0x0551, r29
    61b8:	c0 93 50 05 	sts	0x0550, r28
		calibration[8][5] = 168;
    61bc:	c8 ea       	ldi	r28, 0xA8	; 168
    61be:	d0 e0       	ldi	r29, 0x00	; 0
    61c0:	d0 93 61 05 	sts	0x0561, r29
    61c4:	c0 93 60 05 	sts	0x0560, r28
        // backward right, speed control enabled
        calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    61c8:	b0 93 e3 04 	sts	0x04E3, r27
    61cc:	a0 93 e2 04 	sts	0x04E2, r26
        calibration[1][6] = 39;
    61d0:	f0 93 f3 04 	sts	0x04F3, r31
    61d4:	e0 93 f2 04 	sts	0x04F2, r30
        calibration[2][6] = 59;
    61d8:	eb e3       	ldi	r30, 0x3B	; 59
    61da:	f0 e0       	ldi	r31, 0x00	; 0
    61dc:	f0 93 03 05 	sts	0x0503, r31
    61e0:	e0 93 02 05 	sts	0x0502, r30
        calibration[3][6] = 80;
    61e4:	30 92 13 05 	sts	0x0513, r3
    61e8:	20 92 12 05 	sts	0x0512, r2
        calibration[4][6] = 100;
    61ec:	e4 e6       	ldi	r30, 0x64	; 100
    61ee:	8e 2e       	mov	r8, r30
    61f0:	91 2c       	mov	r9, r1
    61f2:	90 92 23 05 	sts	0x0523, r9
    61f6:	80 92 22 05 	sts	0x0522, r8
        calibration[5][6] = 119;
    61fa:	70 93 33 05 	sts	0x0533, r23
    61fe:	60 93 32 05 	sts	0x0532, r22
        calibration[6][6] = 139;
    6202:	90 93 43 05 	sts	0x0543, r25
    6206:	80 93 42 05 	sts	0x0542, r24
        calibration[7][6] = 160;
    620a:	30 93 53 05 	sts	0x0553, r19
    620e:	20 93 52 05 	sts	0x0552, r18
		calibration[8][6] = 180;
    6212:	50 93 63 05 	sts	0x0563, r21
    6216:	40 93 62 05 	sts	0x0562, r20
        calibration[0][7] = 22;    	// real speed measured in mm/s
    621a:	26 e1       	ldi	r18, 0x16	; 22
    621c:	30 e0       	ldi	r19, 0x00	; 0
    621e:	30 93 e5 04 	sts	0x04E5, r19
    6222:	20 93 e4 04 	sts	0x04E4, r18
        calibration[1][7] = 46;
    6226:	2e e2       	ldi	r18, 0x2E	; 46
    6228:	30 e0       	ldi	r19, 0x00	; 0
    622a:	30 93 f5 04 	sts	0x04F5, r19
    622e:	20 93 f4 04 	sts	0x04F4, r18
        calibration[2][7] = 65;
    6232:	21 e4       	ldi	r18, 0x41	; 65
    6234:	30 e0       	ldi	r19, 0x00	; 0
    6236:	30 93 05 05 	sts	0x0505, r19
    623a:	20 93 04 05 	sts	0x0504, r18
        calibration[3][7] = 81;
    623e:	50 92 15 05 	sts	0x0515, r5
    6242:	40 92 14 05 	sts	0x0514, r4
        calibration[4][7] = 96;
    6246:	20 e6       	ldi	r18, 0x60	; 96
    6248:	30 e0       	ldi	r19, 0x00	; 0
    624a:	30 93 25 05 	sts	0x0525, r19
    624e:	20 93 24 05 	sts	0x0524, r18
        calibration[5][7] = 111;
    6252:	2f e6       	ldi	r18, 0x6F	; 111
    6254:	30 e0       	ldi	r19, 0x00	; 0
    6256:	30 93 35 05 	sts	0x0535, r19
    625a:	20 93 34 05 	sts	0x0534, r18
        calibration[6][7] = 125;
    625e:	70 92 45 05 	sts	0x0545, r7
    6262:	60 92 44 05 	sts	0x0544, r6
        calibration[7][7] = 139;
    6266:	90 93 55 05 	sts	0x0555, r25
    626a:	80 93 54 05 	sts	0x0554, r24
		calibration[8][7] = 153;
    626e:	89 e9       	ldi	r24, 0x99	; 153
    6270:	90 e0       	ldi	r25, 0x00	; 0
    6272:	90 93 65 05 	sts	0x0565, r25
    6276:	80 93 64 05 	sts	0x0564, r24

        writeCalibrationToFlash();
    627a:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <writeCalibrationToFlash>

    }

}
    627e:	df 91       	pop	r29
    6280:	cf 91       	pop	r28
    6282:	1f 91       	pop	r17
    6284:	0f 91       	pop	r16
    6286:	ff 90       	pop	r15
    6288:	ef 90       	pop	r14
    628a:	df 90       	pop	r13
    628c:	cf 90       	pop	r12
    628e:	bf 90       	pop	r11
    6290:	af 90       	pop	r10
    6292:	9f 90       	pop	r9
    6294:	8f 90       	pop	r8
    6296:	7f 90       	pop	r7
    6298:	6f 90       	pop	r6
    629a:	5f 90       	pop	r5
    629c:	4f 90       	pop	r4
    629e:	3f 90       	pop	r3
    62a0:	2f 90       	pop	r2
    62a2:	08 95       	ret
    unsigned int i=0;

	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    62a4:	0e 94 22 3d 	call	0x7a44	; 0x7a44 <readCalibrationFromFlash>
    62a8:	ea cf       	rjmp	.-44     	; 0x627e <initCalibration+0x372>

000062aa <__vector_45>:
    }

}

// Motor left
ISR(TIMER4_OVF_vect) {
    62aa:	1f 92       	push	r1
    62ac:	0f 92       	push	r0
    62ae:	0f b6       	in	r0, 0x3f	; 63
    62b0:	0f 92       	push	r0
    62b2:	11 24       	eor	r1, r1
    62b4:	8f 93       	push	r24
    62b6:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    62b8:	80 91 63 04 	lds	r24, 0x0463
    62bc:	88 23       	and	r24, r24
    62be:	61 f0       	breq	.+24     	; 0x62d8 <__vector_45+0x2e>
		pwm_left = 0;
    62c0:	10 92 f6 02 	sts	0x02F6, r1
    62c4:	10 92 f5 02 	sts	0x02F5, r1
		OCR4A = 0;
    62c8:	10 92 a9 00 	sts	0x00A9, r1
    62cc:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    62d0:	10 92 ab 00 	sts	0x00AB, r1
    62d4:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    62d8:	10 92 e0 02 	sts	0x02E0, r1
    62dc:	10 92 df 02 	sts	0x02DF, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    62e0:	80 91 f5 02 	lds	r24, 0x02F5
    62e4:	90 91 f6 02 	lds	r25, 0x02F6
    62e8:	00 97       	sbiw	r24, 0x00	; 0
    62ea:	41 f5       	brne	.+80     	; 0x633c <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    62ec:	80 91 e9 02 	lds	r24, 0x02E9
    62f0:	90 91 ea 02 	lds	r25, 0x02EA
    62f4:	97 fd       	sbrc	r25, 7
    62f6:	69 c0       	rjmp	.+210    	; 0x63ca <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    62f8:	81 e0       	ldi	r24, 0x01	; 1
    62fa:	80 93 26 02 	sts	0x0226, r24
			currentMotLeftChannel = 14;
    62fe:	8e e0       	ldi	r24, 0x0E	; 14
    6300:	80 93 23 02 	sts	0x0223, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    6304:	81 e0       	ldi	r24, 0x01	; 1
    6306:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    630a:	80 91 a0 00 	lds	r24, 0x00A0
    630e:	8f 75       	andi	r24, 0x5F	; 95
    6310:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6314:	80 91 02 01 	lds	r24, 0x0102
    6318:	87 7e       	andi	r24, 0xE7	; 231
    631a:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    631e:	80 91 72 00 	lds	r24, 0x0072
    6322:	89 7f       	andi	r24, 0xF9	; 249
    6324:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    6328:	89 b3       	in	r24, 0x19	; 25
    632a:	86 60       	ori	r24, 0x06	; 6
    632c:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    632e:	9f 91       	pop	r25
    6330:	8f 91       	pop	r24
    6332:	0f 90       	pop	r0
    6334:	0f be       	out	0x3f, r0	; 63
    6336:	0f 90       	pop	r0
    6338:	1f 90       	pop	r1
    633a:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    633c:	18 16       	cp	r1, r24
    633e:	19 06       	cpc	r1, r25
    6340:	2c f5       	brge	.+74     	; 0x638c <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    6342:	10 92 26 02 	sts	0x0226, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    6346:	8f e0       	ldi	r24, 0x0F	; 15
    6348:	80 93 23 02 	sts	0x0223, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    634c:	80 91 a0 00 	lds	r24, 0x00A0
    6350:	8f 7d       	andi	r24, 0xDF	; 223
    6352:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    6356:	80 91 72 00 	lds	r24, 0x0072
    635a:	8b 7f       	andi	r24, 0xFB	; 251
    635c:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    6360:	80 91 02 01 	lds	r24, 0x0102
    6364:	8f 7e       	andi	r24, 0xEF	; 239
    6366:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    636a:	80 91 a0 00 	lds	r24, 0x00A0
    636e:	80 68       	ori	r24, 0x80	; 128
    6370:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    6374:	80 91 72 00 	lds	r24, 0x0072
    6378:	82 60       	ori	r24, 0x02	; 2
    637a:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    637e:	9f 91       	pop	r25
    6380:	8f 91       	pop	r24
    6382:	0f 90       	pop	r0
    6384:	0f be       	out	0x3f, r0	; 63
    6386:	0f 90       	pop	r0
    6388:	1f 90       	pop	r1
    638a:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    638c:	10 92 26 02 	sts	0x0226, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    6390:	8e e0       	ldi	r24, 0x0E	; 14
    6392:	80 93 23 02 	sts	0x0223, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    6396:	80 91 a0 00 	lds	r24, 0x00A0
    639a:	8f 77       	andi	r24, 0x7F	; 127
    639c:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    63a0:	80 91 72 00 	lds	r24, 0x0072
    63a4:	8d 7f       	andi	r24, 0xFD	; 253
    63a6:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    63aa:	80 91 02 01 	lds	r24, 0x0102
    63ae:	87 7f       	andi	r24, 0xF7	; 247
    63b0:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    63b4:	80 91 a0 00 	lds	r24, 0x00A0
    63b8:	80 62       	ori	r24, 0x20	; 32
    63ba:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    63be:	80 91 72 00 	lds	r24, 0x0072
    63c2:	84 60       	ori	r24, 0x04	; 4
    63c4:	80 93 72 00 	sts	0x0072, r24
    63c8:	b2 cf       	rjmp	.-156    	; 0x632e <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    63ca:	81 e0       	ldi	r24, 0x01	; 1
    63cc:	80 93 26 02 	sts	0x0226, r24
			currentMotLeftChannel = 15;
    63d0:	8f e0       	ldi	r24, 0x0F	; 15
    63d2:	80 93 23 02 	sts	0x0223, r24
    63d6:	96 cf       	rjmp	.-212    	; 0x6304 <__vector_45+0x5a>

000063d8 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    63d8:	1f 92       	push	r1
    63da:	0f 92       	push	r0
    63dc:	0f b6       	in	r0, 0x3f	; 63
    63de:	0f 92       	push	r0
    63e0:	11 24       	eor	r1, r1
    63e2:	8f 93       	push	r24
    63e4:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    63e6:	81 e0       	ldi	r24, 0x01	; 1
    63e8:	80 93 26 02 	sts	0x0226, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    63ec:	9e e0       	ldi	r25, 0x0E	; 14
    63ee:	90 93 23 02 	sts	0x0223, r25

	firstSampleLeft = 1;
    63f2:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    63f6:	9f 91       	pop	r25
    63f8:	8f 91       	pop	r24
    63fa:	0f 90       	pop	r0
    63fc:	0f be       	out	0x3f, r0	; 63
    63fe:	0f 90       	pop	r0
    6400:	1f 90       	pop	r1
    6402:	18 95       	reti

00006404 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    6404:	1f 92       	push	r1
    6406:	0f 92       	push	r0
    6408:	0f b6       	in	r0, 0x3f	; 63
    640a:	0f 92       	push	r0
    640c:	11 24       	eor	r1, r1
    640e:	8f 93       	push	r24
    6410:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6412:	81 e0       	ldi	r24, 0x01	; 1
    6414:	80 93 26 02 	sts	0x0226, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    6418:	9f e0       	ldi	r25, 0x0F	; 15
    641a:	90 93 23 02 	sts	0x0223, r25

	firstSampleLeft = 1;
    641e:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    6422:	9f 91       	pop	r25
    6424:	8f 91       	pop	r24
    6426:	0f 90       	pop	r0
    6428:	0f be       	out	0x3f, r0	; 63
    642a:	0f 90       	pop	r0
    642c:	1f 90       	pop	r1
    642e:	18 95       	reti

00006430 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    6430:	1f 92       	push	r1
    6432:	0f 92       	push	r0
    6434:	0f b6       	in	r0, 0x3f	; 63
    6436:	0f 92       	push	r0
    6438:	11 24       	eor	r1, r1
    643a:	8f 93       	push	r24
    643c:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    643e:	80 91 63 04 	lds	r24, 0x0463
    6442:	88 23       	and	r24, r24
    6444:	61 f0       	breq	.+24     	; 0x645e <__vector_35+0x2e>
		pwm_right = 0;
    6446:	10 92 f4 02 	sts	0x02F4, r1
    644a:	10 92 f3 02 	sts	0x02F3, r1
		OCR3A = 0;
    644e:	10 92 99 00 	sts	0x0099, r1
    6452:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    6456:	10 92 9b 00 	sts	0x009B, r1
    645a:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    645e:	10 92 e2 02 	sts	0x02E2, r1
    6462:	10 92 e1 02 	sts	0x02E1, r1


	if(pwm_right == 0) {
    6466:	80 91 f3 02 	lds	r24, 0x02F3
    646a:	90 91 f4 02 	lds	r25, 0x02F4
    646e:	00 97       	sbiw	r24, 0x00	; 0
    6470:	31 f5       	brne	.+76     	; 0x64be <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    6472:	80 91 e7 02 	lds	r24, 0x02E7
    6476:	90 91 e8 02 	lds	r25, 0x02E8
    647a:	97 fd       	sbrc	r25, 7
    647c:	5f c0       	rjmp	.+190    	; 0x653c <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    647e:	81 e0       	ldi	r24, 0x01	; 1
    6480:	80 93 25 02 	sts	0x0225, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    6484:	8c e0       	ldi	r24, 0x0C	; 12
    6486:	80 93 24 02 	sts	0x0224, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    648a:	81 e0       	ldi	r24, 0x01	; 1
    648c:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    6490:	80 91 90 00 	lds	r24, 0x0090
    6494:	8f 75       	andi	r24, 0x5F	; 95
    6496:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    649a:	8e b1       	in	r24, 0x0e	; 14
    649c:	87 7e       	andi	r24, 0xE7	; 231
    649e:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    64a0:	80 91 71 00 	lds	r24, 0x0071
    64a4:	89 7f       	andi	r24, 0xF9	; 249
    64a6:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    64aa:	88 b3       	in	r24, 0x18	; 24
    64ac:	86 60       	ori	r24, 0x06	; 6
    64ae:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    64b0:	9f 91       	pop	r25
    64b2:	8f 91       	pop	r24
    64b4:	0f 90       	pop	r0
    64b6:	0f be       	out	0x3f, r0	; 63
    64b8:	0f 90       	pop	r0
    64ba:	1f 90       	pop	r1
    64bc:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    64be:	18 16       	cp	r1, r24
    64c0:	19 06       	cpc	r1, r25
    64c2:	0c f5       	brge	.+66     	; 0x6506 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    64c4:	10 92 25 02 	sts	0x0225, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    64c8:	8d e0       	ldi	r24, 0x0D	; 13
    64ca:	80 93 24 02 	sts	0x0224, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    64ce:	80 91 90 00 	lds	r24, 0x0090
    64d2:	8f 7d       	andi	r24, 0xDF	; 223
    64d4:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    64d8:	80 91 71 00 	lds	r24, 0x0071
    64dc:	8b 7f       	andi	r24, 0xFB	; 251
    64de:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    64e2:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    64e4:	80 91 90 00 	lds	r24, 0x0090
    64e8:	80 68       	ori	r24, 0x80	; 128
    64ea:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    64ee:	80 91 71 00 	lds	r24, 0x0071
    64f2:	82 60       	ori	r24, 0x02	; 2
    64f4:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    64f8:	9f 91       	pop	r25
    64fa:	8f 91       	pop	r24
    64fc:	0f 90       	pop	r0
    64fe:	0f be       	out	0x3f, r0	; 63
    6500:	0f 90       	pop	r0
    6502:	1f 90       	pop	r1
    6504:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    6506:	10 92 25 02 	sts	0x0225, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    650a:	8c e0       	ldi	r24, 0x0C	; 12
    650c:	80 93 24 02 	sts	0x0224, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    6510:	80 91 90 00 	lds	r24, 0x0090
    6514:	8f 77       	andi	r24, 0x7F	; 127
    6516:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    651a:	80 91 71 00 	lds	r24, 0x0071
    651e:	8d 7f       	andi	r24, 0xFD	; 253
    6520:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    6524:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    6526:	80 91 90 00 	lds	r24, 0x0090
    652a:	80 62       	ori	r24, 0x20	; 32
    652c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    6530:	80 91 71 00 	lds	r24, 0x0071
    6534:	84 60       	ori	r24, 0x04	; 4
    6536:	80 93 71 00 	sts	0x0071, r24
    653a:	ba cf       	rjmp	.-140    	; 0x64b0 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    653c:	81 e0       	ldi	r24, 0x01	; 1
    653e:	80 93 25 02 	sts	0x0225, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    6542:	8d e0       	ldi	r24, 0x0D	; 13
    6544:	80 93 24 02 	sts	0x0224, r24
    6548:	a0 cf       	rjmp	.-192    	; 0x648a <__vector_35+0x5a>

0000654a <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    654a:	1f 92       	push	r1
    654c:	0f 92       	push	r0
    654e:	0f b6       	in	r0, 0x3f	; 63
    6550:	0f 92       	push	r0
    6552:	11 24       	eor	r1, r1
    6554:	8f 93       	push	r24
    6556:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    6558:	81 e0       	ldi	r24, 0x01	; 1
    655a:	80 93 25 02 	sts	0x0225, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    655e:	9c e0       	ldi	r25, 0x0C	; 12
    6560:	90 93 24 02 	sts	0x0224, r25

	firstSampleRight = 1;
    6564:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    6568:	9f 91       	pop	r25
    656a:	8f 91       	pop	r24
    656c:	0f 90       	pop	r0
    656e:	0f be       	out	0x3f, r0	; 63
    6570:	0f 90       	pop	r0
    6572:	1f 90       	pop	r1
    6574:	18 95       	reti

00006576 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    6576:	1f 92       	push	r1
    6578:	0f 92       	push	r0
    657a:	0f b6       	in	r0, 0x3f	; 63
    657c:	0f 92       	push	r0
    657e:	11 24       	eor	r1, r1
    6580:	8f 93       	push	r24
    6582:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    6584:	81 e0       	ldi	r24, 0x01	; 1
    6586:	80 93 25 02 	sts	0x0225, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    658a:	9d e0       	ldi	r25, 0x0D	; 13
    658c:	90 93 24 02 	sts	0x0224, r25

	firstSampleRight = 1;
    6590:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    6594:	9f 91       	pop	r25
    6596:	8f 91       	pop	r24
    6598:	0f 90       	pop	r0
    659a:	0f be       	out	0x3f, r0	; 63
    659c:	0f 90       	pop	r0
    659e:	1f 90       	pop	r1
    65a0:	18 95       	reti

000065a2 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    65a2:	80 91 94 00 	lds	r24, 0x0094
    65a6:	90 91 95 00 	lds	r25, 0x0095
    65aa:	0e 94 0a 41 	call	0x8214	; 0x8214 <srand>

}
    65ae:	08 95       	ret

000065b0 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    65b0:	2f 92       	push	r2
    65b2:	3f 92       	push	r3
    65b4:	4f 92       	push	r4
    65b6:	5f 92       	push	r5
    65b8:	6f 92       	push	r6
    65ba:	7f 92       	push	r7
    65bc:	8f 92       	push	r8
    65be:	9f 92       	push	r9
    65c0:	af 92       	push	r10
    65c2:	bf 92       	push	r11
    65c4:	cf 92       	push	r12
    65c6:	df 92       	push	r13
    65c8:	ef 92       	push	r14
    65ca:	ff 92       	push	r15
    65cc:	0f 93       	push	r16
    65ce:	1f 93       	push	r17
    65d0:	df 93       	push	r29
    65d2:	cf 93       	push	r28
    65d4:	cd b7       	in	r28, 0x3d	; 61
    65d6:	de b7       	in	r29, 0x3e	; 62
    65d8:	28 97       	sbiw	r28, 0x08	; 8
    65da:	0f b6       	in	r0, 0x3f	; 63
    65dc:	f8 94       	cli
    65de:	de bf       	out	0x3e, r29	; 62
    65e0:	0f be       	out	0x3f, r0	; 63
    65e2:	cd bf       	out	0x3d, r28	; 61
    65e4:	2c 01       	movw	r4, r24
    65e6:	7a 83       	std	Y+2, r23	; 0x02
    65e8:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    65ea:	fc 01       	movw	r30, r24
    65ec:	01 90       	ld	r0, Z+
    65ee:	f0 81       	ld	r31, Z
    65f0:	e0 2d       	mov	r30, r0
    65f2:	fc 83       	std	Y+4, r31	; 0x04
    65f4:	eb 83       	std	Y+3, r30	; 0x03
    65f6:	fb 01       	movw	r30, r22
    65f8:	01 90       	ld	r0, Z+
    65fa:	f0 81       	ld	r31, Z
    65fc:	e0 2d       	mov	r30, r0
    65fe:	fe 83       	std	Y+6, r31	; 0x06
    6600:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6602:	60 91 bf 02 	lds	r22, 0x02BF
    6606:	70 91 c0 02 	lds	r23, 0x02C0
    660a:	65 30       	cpi	r22, 0x05	; 5
    660c:	71 05       	cpc	r23, r1
    660e:	34 f4       	brge	.+12     	; 0x661c <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    6610:	10 92 c0 02 	sts	0x02C0, r1
    6614:	10 92 bf 02 	sts	0x02BF, r1
    6618:	60 e0       	ldi	r22, 0x00	; 0
    661a:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    661c:	40 91 c1 02 	lds	r20, 0x02C1
    6620:	50 91 c2 02 	lds	r21, 0x02C2
    6624:	45 30       	cpi	r20, 0x05	; 5
    6626:	51 05       	cpc	r21, r1
    6628:	34 f4       	brge	.+12     	; 0x6636 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    662a:	10 92 c2 02 	sts	0x02C2, r1
    662e:	10 92 c1 02 	sts	0x02C1, r1
    6632:	40 e0       	ldi	r20, 0x00	; 0
    6634:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6636:	80 91 c3 02 	lds	r24, 0x02C3
    663a:	90 91 c4 02 	lds	r25, 0x02C4
    663e:	85 30       	cpi	r24, 0x05	; 5
    6640:	91 05       	cpc	r25, r1
    6642:	24 f4       	brge	.+8      	; 0x664c <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    6644:	10 92 c4 02 	sts	0x02C4, r1
    6648:	10 92 c3 02 	sts	0x02C3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    664c:	00 91 c5 02 	lds	r16, 0x02C5
    6650:	10 91 c6 02 	lds	r17, 0x02C6
    6654:	05 30       	cpi	r16, 0x05	; 5
    6656:	11 05       	cpc	r17, r1
    6658:	34 f4       	brge	.+12     	; 0x6666 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    665a:	10 92 c6 02 	sts	0x02C6, r1
    665e:	10 92 c5 02 	sts	0x02C5, r1
    6662:	00 e0       	ldi	r16, 0x00	; 0
    6664:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6666:	60 90 c7 02 	lds	r6, 0x02C7
    666a:	70 90 c8 02 	lds	r7, 0x02C8
    666e:	f5 e0       	ldi	r31, 0x05	; 5
    6670:	6f 16       	cp	r6, r31
    6672:	71 04       	cpc	r7, r1
    6674:	34 f4       	brge	.+12     	; 0x6682 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    6676:	10 92 c8 02 	sts	0x02C8, r1
    667a:	10 92 c7 02 	sts	0x02C7, r1
    667e:	66 24       	eor	r6, r6
    6680:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6682:	20 91 c9 02 	lds	r18, 0x02C9
    6686:	30 91 ca 02 	lds	r19, 0x02CA
    668a:	25 30       	cpi	r18, 0x05	; 5
    668c:	31 05       	cpc	r19, r1
    668e:	34 f4       	brge	.+12     	; 0x669c <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    6690:	10 92 ca 02 	sts	0x02CA, r1
    6694:	10 92 c9 02 	sts	0x02C9, r1
    6698:	20 e0       	ldi	r18, 0x00	; 0
    669a:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    669c:	80 91 cb 02 	lds	r24, 0x02CB
    66a0:	90 91 cc 02 	lds	r25, 0x02CC
    66a4:	85 30       	cpi	r24, 0x05	; 5
    66a6:	91 05       	cpc	r25, r1
    66a8:	24 f4       	brge	.+8      	; 0x66b2 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    66aa:	10 92 cc 02 	sts	0x02CC, r1
    66ae:	10 92 cb 02 	sts	0x02CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    66b2:	80 91 cd 02 	lds	r24, 0x02CD
    66b6:	90 91 ce 02 	lds	r25, 0x02CE
    66ba:	85 30       	cpi	r24, 0x05	; 5
    66bc:	91 05       	cpc	r25, r1
    66be:	34 f4       	brge	.+12     	; 0x66cc <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    66c0:	10 92 ce 02 	sts	0x02CE, r1
    66c4:	10 92 cd 02 	sts	0x02CD, r1
    66c8:	80 e0       	ldi	r24, 0x00	; 0
    66ca:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    66cc:	ee 24       	eor	r14, r14
    66ce:	ff 24       	eor	r15, r15
    66d0:	e6 1a       	sub	r14, r22
    66d2:	f7 0a       	sbc	r15, r23
    66d4:	5a 01       	movw	r10, r20
    66d6:	b5 94       	asr	r11
    66d8:	a7 94       	ror	r10
    66da:	15 95       	asr	r17
    66dc:	07 95       	ror	r16
    66de:	69 01       	movw	r12, r18
    66e0:	d5 94       	asr	r13
    66e2:	c7 94       	ror	r12
    66e4:	4c 01       	movw	r8, r24
    66e6:	95 94       	asr	r9
    66e8:	87 94       	ror	r8
    66ea:	0e 94 05 41 	call	0x820a	; 0x820a <rand>
    66ee:	93 01       	movw	r18, r6
    66f0:	2e 51       	subi	r18, 0x1E	; 30
    66f2:	30 40       	sbci	r19, 0x00	; 0
    66f4:	2e 0d       	add	r18, r14
    66f6:	3f 1d       	adc	r19, r15
    66f8:	20 0f       	add	r18, r16
    66fa:	31 1f       	adc	r19, r17
    66fc:	2c 0d       	add	r18, r12
    66fe:	3d 1d       	adc	r19, r13
    6700:	2a 19       	sub	r18, r10
    6702:	3b 09       	sbc	r19, r11
    6704:	28 19       	sub	r18, r8
    6706:	39 09       	sbc	r19, r9
    6708:	1c e3       	ldi	r17, 0x3C	; 60
    670a:	21 2e       	mov	r2, r17
    670c:	31 2c       	mov	r3, r1
    670e:	b1 01       	movw	r22, r2
    6710:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
    6714:	28 0f       	add	r18, r24
    6716:	39 1f       	adc	r19, r25
    6718:	38 87       	std	Y+8, r19	; 0x08
    671a:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    671c:	e0 90 c1 02 	lds	r14, 0x02C1
    6720:	f0 90 c2 02 	lds	r15, 0x02C2
    6724:	f5 94       	asr	r15
    6726:	e7 94       	ror	r14
    6728:	00 91 c3 02 	lds	r16, 0x02C3
    672c:	10 91 c4 02 	lds	r17, 0x02C4
    6730:	15 95       	asr	r17
    6732:	07 95       	ror	r16
    6734:	15 95       	asr	r17
    6736:	07 95       	ror	r16
    6738:	c0 90 c5 02 	lds	r12, 0x02C5
    673c:	d0 90 c6 02 	lds	r13, 0x02C6
    6740:	d5 94       	asr	r13
    6742:	c7 94       	ror	r12
    6744:	a0 90 c9 02 	lds	r10, 0x02C9
    6748:	b0 90 ca 02 	lds	r11, 0x02CA
    674c:	b5 94       	asr	r11
    674e:	a7 94       	ror	r10
    6750:	60 90 cb 02 	lds	r6, 0x02CB
    6754:	70 90 cc 02 	lds	r7, 0x02CC
    6758:	75 94       	asr	r7
    675a:	67 94       	ror	r6
    675c:	75 94       	asr	r7
    675e:	67 94       	ror	r6
    6760:	80 90 cd 02 	lds	r8, 0x02CD
    6764:	90 90 ce 02 	lds	r9, 0x02CE
    6768:	95 94       	asr	r9
    676a:	87 94       	ror	r8
    676c:	0e 94 05 41 	call	0x820a	; 0x820a <rand>
    6770:	97 01       	movw	r18, r14
    6772:	20 0f       	add	r18, r16
    6774:	31 1f       	adc	r19, r17
    6776:	2e 51       	subi	r18, 0x1E	; 30
    6778:	30 40       	sbci	r19, 0x00	; 0
    677a:	2c 0d       	add	r18, r12
    677c:	3d 1d       	adc	r19, r13
    677e:	2a 19       	sub	r18, r10
    6780:	3b 09       	sbc	r19, r11
    6782:	28 19       	sub	r18, r8
    6784:	39 09       	sbc	r19, r9
    6786:	26 19       	sub	r18, r6
    6788:	37 09       	sbc	r19, r7
    678a:	b1 01       	movw	r22, r2
    678c:	0e 94 67 40 	call	0x80ce	; 0x80ce <__divmodhi4>
    6790:	28 0f       	add	r18, r24
    6792:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    6794:	8b 81       	ldd	r24, Y+3	; 0x03
    6796:	9c 81       	ldd	r25, Y+4	; 0x04
    6798:	97 fd       	sbrc	r25, 7
    679a:	97 c0       	rjmp	.+302    	; 0x68ca <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    679c:	5c 01       	movw	r10, r24
    679e:	cc 24       	eor	r12, r12
    67a0:	b7 fc       	sbrc	r11, 7
    67a2:	c0 94       	com	r12
    67a4:	dc 2c       	mov	r13, r12
    67a6:	ef 81       	ldd	r30, Y+7	; 0x07
    67a8:	f8 85       	ldd	r31, Y+8	; 0x08
    67aa:	3f 01       	movw	r6, r30
    67ac:	88 24       	eor	r8, r8
    67ae:	77 fc       	sbrc	r7, 7
    67b0:	80 94       	com	r8
    67b2:	98 2c       	mov	r9, r8
    67b4:	79 01       	movw	r14, r18
    67b6:	00 27       	eor	r16, r16
    67b8:	f7 fc       	sbrc	r15, 7
    67ba:	00 95       	com	r16
    67bc:	10 2f       	mov	r17, r16
    67be:	c4 01       	movw	r24, r8
    67c0:	b3 01       	movw	r22, r6
    67c2:	6e 19       	sub	r22, r14
    67c4:	7f 09       	sbc	r23, r15
    67c6:	80 0b       	sbc	r24, r16
    67c8:	91 0b       	sbc	r25, r17
    67ca:	a6 01       	movw	r20, r12
    67cc:	95 01       	movw	r18, r10
    67ce:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsi3>
    67d2:	56 e0       	ldi	r21, 0x06	; 6
    67d4:	95 95       	asr	r25
    67d6:	87 95       	ror	r24
    67d8:	77 95       	ror	r23
    67da:	67 95       	ror	r22
    67dc:	5a 95       	dec	r21
    67de:	d1 f7       	brne	.-12     	; 0x67d4 <obstacleAvoidance+0x224>
    67e0:	6a 0d       	add	r22, r10
    67e2:	7b 1d       	adc	r23, r11
    67e4:	8c 1d       	adc	r24, r12
    67e6:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    67e8:	f2 01       	movw	r30, r4
    67ea:	71 83       	std	Z+1, r23	; 0x01
    67ec:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    67ee:	2d 81       	ldd	r18, Y+5	; 0x05
    67f0:	3e 81       	ldd	r19, Y+6	; 0x06
    67f2:	37 fd       	sbrc	r19, 7
    67f4:	97 c0       	rjmp	.+302    	; 0x6924 <obstacleAvoidance+0x374>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    67f6:	59 01       	movw	r10, r18
    67f8:	cc 24       	eor	r12, r12
    67fa:	b7 fc       	sbrc	r11, 7
    67fc:	c0 94       	com	r12
    67fe:	dc 2c       	mov	r13, r12
    6800:	c8 01       	movw	r24, r16
    6802:	b7 01       	movw	r22, r14
    6804:	66 0d       	add	r22, r6
    6806:	77 1d       	adc	r23, r7
    6808:	88 1d       	adc	r24, r8
    680a:	99 1d       	adc	r25, r9
    680c:	a6 01       	movw	r20, r12
    680e:	95 01       	movw	r18, r10
    6810:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsi3>
    6814:	36 e0       	ldi	r19, 0x06	; 6
    6816:	95 95       	asr	r25
    6818:	87 95       	ror	r24
    681a:	77 95       	ror	r23
    681c:	67 95       	ror	r22
    681e:	3a 95       	dec	r19
    6820:	d1 f7       	brne	.-12     	; 0x6816 <obstacleAvoidance+0x266>
    6822:	6a 0d       	add	r22, r10
    6824:	7b 1d       	adc	r23, r11
    6826:	8c 1d       	adc	r24, r12
    6828:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    682a:	9b 01       	movw	r18, r22
    682c:	e9 81       	ldd	r30, Y+1	; 0x01
    682e:	fa 81       	ldd	r31, Y+2	; 0x02
    6830:	71 83       	std	Z+1, r23	; 0x01
    6832:	60 83       	st	Z, r22
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    6834:	f2 e0       	ldi	r31, 0x02	; 2
    6836:	21 30       	cpi	r18, 0x01	; 1
    6838:	3f 07       	cpc	r19, r31
    683a:	44 f0       	brlt	.+16     	; 0x684c <obstacleAvoidance+0x29c>
    683c:	80 e0       	ldi	r24, 0x00	; 0
    683e:	92 e0       	ldi	r25, 0x02	; 2
    6840:	e9 81       	ldd	r30, Y+1	; 0x01
    6842:	fa 81       	ldd	r31, Y+2	; 0x02
    6844:	91 83       	std	Z+1, r25	; 0x01
    6846:	80 83       	st	Z, r24
    6848:	20 e0       	ldi	r18, 0x00	; 0
    684a:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    684c:	f2 01       	movw	r30, r4
    684e:	80 81       	ld	r24, Z
    6850:	91 81       	ldd	r25, Z+1	; 0x01
    6852:	f2 e0       	ldi	r31, 0x02	; 2
    6854:	81 30       	cpi	r24, 0x01	; 1
    6856:	9f 07       	cpc	r25, r31
    6858:	4c f0       	brlt	.+18     	; 0x686c <obstacleAvoidance+0x2bc>
    685a:	80 e0       	ldi	r24, 0x00	; 0
    685c:	92 e0       	ldi	r25, 0x02	; 2
    685e:	f2 01       	movw	r30, r4
    6860:	91 83       	std	Z+1, r25	; 0x01
    6862:	80 83       	st	Z, r24
    6864:	e9 81       	ldd	r30, Y+1	; 0x01
    6866:	fa 81       	ldd	r31, Y+2	; 0x02
    6868:	20 81       	ld	r18, Z
    686a:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    686c:	fe ef       	ldi	r31, 0xFE	; 254
    686e:	20 30       	cpi	r18, 0x00	; 0
    6870:	3f 07       	cpc	r19, r31
    6872:	4c f4       	brge	.+18     	; 0x6886 <obstacleAvoidance+0x2d6>
    6874:	80 e0       	ldi	r24, 0x00	; 0
    6876:	9e ef       	ldi	r25, 0xFE	; 254
    6878:	e9 81       	ldd	r30, Y+1	; 0x01
    687a:	fa 81       	ldd	r31, Y+2	; 0x02
    687c:	91 83       	std	Z+1, r25	; 0x01
    687e:	80 83       	st	Z, r24
    6880:	f2 01       	movw	r30, r4
    6882:	80 81       	ld	r24, Z
    6884:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    6886:	fe ef       	ldi	r31, 0xFE	; 254
    6888:	80 30       	cpi	r24, 0x00	; 0
    688a:	9f 07       	cpc	r25, r31
    688c:	2c f4       	brge	.+10     	; 0x6898 <obstacleAvoidance+0x2e8>
    688e:	80 e0       	ldi	r24, 0x00	; 0
    6890:	9e ef       	ldi	r25, 0xFE	; 254
    6892:	f2 01       	movw	r30, r4
    6894:	91 83       	std	Z+1, r25	; 0x01
    6896:	80 83       	st	Z, r24

}
    6898:	28 96       	adiw	r28, 0x08	; 8
    689a:	0f b6       	in	r0, 0x3f	; 63
    689c:	f8 94       	cli
    689e:	de bf       	out	0x3e, r29	; 62
    68a0:	0f be       	out	0x3f, r0	; 63
    68a2:	cd bf       	out	0x3d, r28	; 61
    68a4:	cf 91       	pop	r28
    68a6:	df 91       	pop	r29
    68a8:	1f 91       	pop	r17
    68aa:	0f 91       	pop	r16
    68ac:	ff 90       	pop	r15
    68ae:	ef 90       	pop	r14
    68b0:	df 90       	pop	r13
    68b2:	cf 90       	pop	r12
    68b4:	bf 90       	pop	r11
    68b6:	af 90       	pop	r10
    68b8:	9f 90       	pop	r9
    68ba:	8f 90       	pop	r8
    68bc:	7f 90       	pop	r7
    68be:	6f 90       	pop	r6
    68c0:	5f 90       	pop	r5
    68c2:	4f 90       	pop	r4
    68c4:	3f 90       	pop	r3
    68c6:	2f 90       	pop	r2
    68c8:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    68ca:	5c 01       	movw	r10, r24
    68cc:	cc 24       	eor	r12, r12
    68ce:	b7 fc       	sbrc	r11, 7
    68d0:	c0 94       	com	r12
    68d2:	dc 2c       	mov	r13, r12
    68d4:	ef 81       	ldd	r30, Y+7	; 0x07
    68d6:	f8 85       	ldd	r31, Y+8	; 0x08
    68d8:	3f 01       	movw	r6, r30
    68da:	88 24       	eor	r8, r8
    68dc:	77 fc       	sbrc	r7, 7
    68de:	80 94       	com	r8
    68e0:	98 2c       	mov	r9, r8
    68e2:	79 01       	movw	r14, r18
    68e4:	00 27       	eor	r16, r16
    68e6:	f7 fc       	sbrc	r15, 7
    68e8:	00 95       	com	r16
    68ea:	10 2f       	mov	r17, r16
    68ec:	c8 01       	movw	r24, r16
    68ee:	b7 01       	movw	r22, r14
    68f0:	66 0d       	add	r22, r6
    68f2:	77 1d       	adc	r23, r7
    68f4:	88 1d       	adc	r24, r8
    68f6:	99 1d       	adc	r25, r9
    68f8:	a6 01       	movw	r20, r12
    68fa:	95 01       	movw	r18, r10
    68fc:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsi3>
    6900:	46 e0       	ldi	r20, 0x06	; 6
    6902:	95 95       	asr	r25
    6904:	87 95       	ror	r24
    6906:	77 95       	ror	r23
    6908:	67 95       	ror	r22
    690a:	4a 95       	dec	r20
    690c:	d1 f7       	brne	.-12     	; 0x6902 <obstacleAvoidance+0x352>
    690e:	a6 1a       	sub	r10, r22
    6910:	b7 0a       	sbc	r11, r23
    6912:	c8 0a       	sbc	r12, r24
    6914:	d9 0a       	sbc	r13, r25
		*pwmLeft = (signed int)res;
    6916:	f2 01       	movw	r30, r4
    6918:	b1 82       	std	Z+1, r11	; 0x01
    691a:	a0 82       	st	Z, r10
	}
	if(desR >=0) {
    691c:	2d 81       	ldd	r18, Y+5	; 0x05
    691e:	3e 81       	ldd	r19, Y+6	; 0x06
    6920:	37 ff       	sbrs	r19, 7
    6922:	69 cf       	rjmp	.-302    	; 0x67f6 <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    6924:	59 01       	movw	r10, r18
    6926:	cc 24       	eor	r12, r12
    6928:	b7 fc       	sbrc	r11, 7
    692a:	c0 94       	com	r12
    692c:	dc 2c       	mov	r13, r12
    692e:	c4 01       	movw	r24, r8
    6930:	b3 01       	movw	r22, r6
    6932:	6e 19       	sub	r22, r14
    6934:	7f 09       	sbc	r23, r15
    6936:	80 0b       	sbc	r24, r16
    6938:	91 0b       	sbc	r25, r17
    693a:	a6 01       	movw	r20, r12
    693c:	95 01       	movw	r18, r10
    693e:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsi3>
    6942:	26 e0       	ldi	r18, 0x06	; 6
    6944:	95 95       	asr	r25
    6946:	87 95       	ror	r24
    6948:	77 95       	ror	r23
    694a:	67 95       	ror	r22
    694c:	2a 95       	dec	r18
    694e:	d1 f7       	brne	.-12     	; 0x6944 <obstacleAvoidance+0x394>
    6950:	a6 1a       	sub	r10, r22
    6952:	b7 0a       	sbc	r11, r23
    6954:	c8 0a       	sbc	r12, r24
    6956:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    6958:	95 01       	movw	r18, r10
    695a:	e9 81       	ldd	r30, Y+1	; 0x01
    695c:	fa 81       	ldd	r31, Y+2	; 0x02
    695e:	b1 82       	std	Z+1, r11	; 0x01
    6960:	a0 82       	st	Z, r10
    6962:	68 cf       	rjmp	.-304    	; 0x6834 <obstacleAvoidance+0x284>

00006964 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    6964:	80 91 67 02 	lds	r24, 0x0267
    6968:	90 91 68 02 	lds	r25, 0x0268
    696c:	21 e0       	ldi	r18, 0x01	; 1
    696e:	84 3a       	cpi	r24, 0xA4	; 164
    6970:	92 07       	cpc	r25, r18
    6972:	d4 f0       	brlt	.+52     	; 0x69a8 <cliffDetected+0x44>
    6974:	80 91 69 02 	lds	r24, 0x0269
    6978:	90 91 6a 02 	lds	r25, 0x026A
    697c:	21 e0       	ldi	r18, 0x01	; 1
    697e:	84 3a       	cpi	r24, 0xA4	; 164
    6980:	92 07       	cpc	r25, r18
    6982:	94 f0       	brlt	.+36     	; 0x69a8 <cliffDetected+0x44>
    6984:	80 91 6b 02 	lds	r24, 0x026B
    6988:	90 91 6c 02 	lds	r25, 0x026C
    698c:	21 e0       	ldi	r18, 0x01	; 1
    698e:	84 3a       	cpi	r24, 0xA4	; 164
    6990:	92 07       	cpc	r25, r18
    6992:	74 f0       	brlt	.+28     	; 0x69b0 <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    6994:	81 e0       	ldi	r24, 0x01	; 1
    6996:	20 91 6d 02 	lds	r18, 0x026D
    699a:	30 91 6e 02 	lds	r19, 0x026E
    699e:	91 e0       	ldi	r25, 0x01	; 1
    69a0:	24 3a       	cpi	r18, 0xA4	; 164
    69a2:	39 07       	cpc	r19, r25
    69a4:	1c f4       	brge	.+6      	; 0x69ac <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    69a6:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    69a8:	81 e0       	ldi	r24, 0x01	; 1
    69aa:	08 95       	ret
    69ac:	80 e0       	ldi	r24, 0x00	; 0
    69ae:	08 95       	ret
    69b0:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    69b2:	08 95       	ret

000069b4 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    69b4:	81 e0       	ldi	r24, 0x01	; 1
    69b6:	80 93 61 04 	sts	0x0461, r24
}
    69ba:	08 95       	ret

000069bc <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    69bc:	10 92 61 04 	sts	0x0461, r1
}
    69c0:	08 95       	ret

000069c2 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    69c2:	81 e0       	ldi	r24, 0x01	; 1
    69c4:	80 93 62 04 	sts	0x0462, r24
}
    69c8:	08 95       	ret

000069ca <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    69ca:	10 92 62 04 	sts	0x0462, r1
}
    69ce:	08 95       	ret

000069d0 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    69d0:	a0 e8       	ldi	r26, 0x80	; 128
    69d2:	b0 e0       	ldi	r27, 0x00	; 0
    69d4:	1c 92       	st	X, r1
	TCCR1B = 0;
    69d6:	e1 e8       	ldi	r30, 0x81	; 129
    69d8:	f0 e0       	ldi	r31, 0x00	; 0
    69da:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    69dc:	8c 91       	ld	r24, X
    69de:	89 6a       	ori	r24, 0xA9	; 169
    69e0:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    69e2:	80 81       	ld	r24, Z
    69e4:	89 60       	ori	r24, 0x09	; 9
    69e6:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    69e8:	80 91 0c 02 	lds	r24, 0x020C
    69ec:	90 e0       	ldi	r25, 0x00	; 0
    69ee:	90 93 89 00 	sts	0x0089, r25
    69f2:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    69f6:	80 91 0d 02 	lds	r24, 0x020D
    69fa:	90 e0       	ldi	r25, 0x00	; 0
    69fc:	90 93 8b 00 	sts	0x008B, r25
    6a00:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    6a04:	80 91 0e 02 	lds	r24, 0x020E
    6a08:	90 e0       	ldi	r25, 0x00	; 0
    6a0a:	90 93 8d 00 	sts	0x008D, r25
    6a0e:	80 93 8c 00 	sts	0x008C, r24

}
    6a12:	08 95       	ret

00006a14 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    6a14:	81 e0       	ldi	r24, 0x01	; 1
    6a16:	90 91 17 03 	lds	r25, 0x0317
    6a1a:	89 1b       	sub	r24, r25
    6a1c:	80 93 17 03 	sts	0x0317, r24

	if(blinkState) {
    6a20:	88 23       	and	r24, r24
    6a22:	39 f4       	brne	.+14     	; 0x6a32 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    6a24:	80 91 80 00 	lds	r24, 0x0080
    6a28:	87 7f       	andi	r24, 0xF7	; 247
    6a2a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    6a2e:	2f 98       	cbi	0x05, 7	; 5
    6a30:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    6a32:	80 91 80 00 	lds	r24, 0x0080
    6a36:	88 60       	ori	r24, 0x08	; 8
    6a38:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    6a3c:	8f ef       	ldi	r24, 0xFF	; 255
    6a3e:	90 e0       	ldi	r25, 0x00	; 0
    6a40:	90 93 8d 00 	sts	0x008D, r25
    6a44:	80 93 8c 00 	sts	0x008C, r24
    6a48:	08 95       	ret

00006a4a <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    6a4a:	88 23       	and	r24, r24
    6a4c:	59 f0       	breq	.+22     	; 0x6a64 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    6a4e:	90 91 80 00 	lds	r25, 0x0080
    6a52:	90 68       	ori	r25, 0x80	; 128
    6a54:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    6a58:	90 e0       	ldi	r25, 0x00	; 0
    6a5a:	90 93 89 00 	sts	0x0089, r25
    6a5e:	80 93 88 00 	sts	0x0088, r24
    6a62:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    6a64:	80 91 80 00 	lds	r24, 0x0080
    6a68:	8f 77       	andi	r24, 0x7F	; 127
    6a6a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    6a6e:	2d 98       	cbi	0x05, 5	; 5
    6a70:	08 95       	ret

00006a72 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    6a72:	88 23       	and	r24, r24
    6a74:	59 f0       	breq	.+22     	; 0x6a8c <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    6a76:	90 91 80 00 	lds	r25, 0x0080
    6a7a:	90 62       	ori	r25, 0x20	; 32
    6a7c:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    6a80:	90 e0       	ldi	r25, 0x00	; 0
    6a82:	90 93 8b 00 	sts	0x008B, r25
    6a86:	80 93 8a 00 	sts	0x008A, r24
    6a8a:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    6a8c:	80 91 80 00 	lds	r24, 0x0080
    6a90:	8f 7d       	andi	r24, 0xDF	; 223
    6a92:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    6a96:	2e 98       	cbi	0x05, 6	; 5
    6a98:	08 95       	ret

00006a9a <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    6a9a:	88 23       	and	r24, r24
    6a9c:	59 f0       	breq	.+22     	; 0x6ab4 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    6a9e:	90 91 80 00 	lds	r25, 0x0080
    6aa2:	98 60       	ori	r25, 0x08	; 8
    6aa4:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    6aa8:	90 e0       	ldi	r25, 0x00	; 0
    6aaa:	90 93 8d 00 	sts	0x008D, r25
    6aae:	80 93 8c 00 	sts	0x008C, r24
    6ab2:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    6ab4:	80 91 80 00 	lds	r24, 0x0080
    6ab8:	87 7f       	andi	r24, 0xF7	; 247
    6aba:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    6abe:	2f 98       	cbi	0x05, 7	; 5
    6ac0:	08 95       	ret

00006ac2 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6ac2:	83 30       	cpi	r24, 0x03	; 3
    6ac4:	09 f4       	brne	.+2      	; 0x6ac8 <setGreenLed+0x6>
    6ac6:	5a c0       	rjmp	.+180    	; 0x6b7c <setGreenLed+0xba>
    6ac8:	84 30       	cpi	r24, 0x04	; 4
    6aca:	80 f0       	brcs	.+32     	; 0x6aec <setGreenLed+0x2a>
    6acc:	85 30       	cpi	r24, 0x05	; 5
    6ace:	09 f4       	brne	.+2      	; 0x6ad2 <setGreenLed+0x10>
    6ad0:	41 c0       	rjmp	.+130    	; 0x6b54 <setGreenLed+0x92>
    6ad2:	85 30       	cpi	r24, 0x05	; 5
    6ad4:	d0 f4       	brcc	.+52     	; 0x6b0a <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6ad6:	66 23       	and	r22, r22
    6ad8:	09 f4       	brne	.+2      	; 0x6adc <setGreenLed+0x1a>
    6ada:	68 c0       	rjmp	.+208    	; 0x6bac <setGreenLed+0xea>
    6adc:	80 91 0b 01 	lds	r24, 0x010B
    6ae0:	8f 7e       	andi	r24, 0xEF	; 239
    6ae2:	80 93 0b 01 	sts	0x010B, r24
    6ae6:	80 91 0b 01 	lds	r24, 0x010B
    6aea:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6aec:	81 30       	cpi	r24, 0x01	; 1
    6aee:	e1 f1       	breq	.+120    	; 0x6b68 <setGreenLed+0xa6>
    6af0:	82 30       	cpi	r24, 0x02	; 2
    6af2:	80 f0       	brcs	.+32     	; 0x6b14 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6af4:	66 23       	and	r22, r22
    6af6:	09 f4       	brne	.+2      	; 0x6afa <setGreenLed+0x38>
    6af8:	46 c0       	rjmp	.+140    	; 0x6b86 <setGreenLed+0xc4>
    6afa:	80 91 0b 01 	lds	r24, 0x010B
    6afe:	8b 7f       	andi	r24, 0xFB	; 251
    6b00:	80 93 0b 01 	sts	0x010B, r24
    6b04:	80 91 0b 01 	lds	r24, 0x010B
    6b08:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6b0a:	86 30       	cpi	r24, 0x06	; 6
    6b0c:	c9 f0       	breq	.+50     	; 0x6b40 <setGreenLed+0x7e>
    6b0e:	87 30       	cpi	r24, 0x07	; 7
    6b10:	61 f0       	breq	.+24     	; 0x6b2a <setGreenLed+0x68>
    6b12:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6b14:	66 23       	and	r22, r22
    6b16:	09 f4       	brne	.+2      	; 0x6b1a <setGreenLed+0x58>
    6b18:	51 c0       	rjmp	.+162    	; 0x6bbc <setGreenLed+0xfa>
    6b1a:	80 91 0b 01 	lds	r24, 0x010B
    6b1e:	8e 7f       	andi	r24, 0xFE	; 254
    6b20:	80 93 0b 01 	sts	0x010B, r24
    6b24:	80 91 0b 01 	lds	r24, 0x010B
    6b28:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6b2a:	66 23       	and	r22, r22
    6b2c:	09 f0       	breq	.+2      	; 0x6b30 <setGreenLed+0x6e>
    6b2e:	5e c0       	rjmp	.+188    	; 0x6bec <setGreenLed+0x12a>
    6b30:	80 91 0b 01 	lds	r24, 0x010B
    6b34:	80 68       	ori	r24, 0x80	; 128
    6b36:	80 93 0b 01 	sts	0x010B, r24
    6b3a:	80 91 0b 01 	lds	r24, 0x010B
    6b3e:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6b40:	66 23       	and	r22, r22
    6b42:	49 f1       	breq	.+82     	; 0x6b96 <setGreenLed+0xd4>
    6b44:	80 91 0b 01 	lds	r24, 0x010B
    6b48:	8f 7b       	andi	r24, 0xBF	; 191
    6b4a:	80 93 0b 01 	sts	0x010B, r24
    6b4e:	80 91 0b 01 	lds	r24, 0x010B
    6b52:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6b54:	66 23       	and	r22, r22
    6b56:	d1 f1       	breq	.+116    	; 0x6bcc <setGreenLed+0x10a>
    6b58:	80 91 0b 01 	lds	r24, 0x010B
    6b5c:	8f 7d       	andi	r24, 0xDF	; 223
    6b5e:	80 93 0b 01 	sts	0x010B, r24
    6b62:	80 91 0b 01 	lds	r24, 0x010B
    6b66:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6b68:	66 23       	and	r22, r22
    6b6a:	c1 f1       	breq	.+112    	; 0x6bdc <setGreenLed+0x11a>
    6b6c:	80 91 0b 01 	lds	r24, 0x010B
    6b70:	8d 7f       	andi	r24, 0xFD	; 253
    6b72:	80 93 0b 01 	sts	0x010B, r24
    6b76:	80 91 0b 01 	lds	r24, 0x010B
    6b7a:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6b7c:	66 23       	and	r22, r22
    6b7e:	99 f0       	breq	.+38     	; 0x6ba6 <setGreenLed+0xe4>
    6b80:	a3 98       	cbi	0x14, 3	; 20
    6b82:	84 b3       	in	r24, 0x14	; 20
    6b84:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6b86:	80 91 0b 01 	lds	r24, 0x010B
    6b8a:	84 60       	ori	r24, 0x04	; 4
    6b8c:	80 93 0b 01 	sts	0x010B, r24
    6b90:	80 91 0b 01 	lds	r24, 0x010B
    6b94:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6b96:	80 91 0b 01 	lds	r24, 0x010B
    6b9a:	80 64       	ori	r24, 0x40	; 64
    6b9c:	80 93 0b 01 	sts	0x010B, r24
    6ba0:	80 91 0b 01 	lds	r24, 0x010B
    6ba4:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6ba6:	a3 9a       	sbi	0x14, 3	; 20
    6ba8:	84 b3       	in	r24, 0x14	; 20
    6baa:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6bac:	80 91 0b 01 	lds	r24, 0x010B
    6bb0:	80 61       	ori	r24, 0x10	; 16
    6bb2:	80 93 0b 01 	sts	0x010B, r24
    6bb6:	80 91 0b 01 	lds	r24, 0x010B
    6bba:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6bbc:	80 91 0b 01 	lds	r24, 0x010B
    6bc0:	81 60       	ori	r24, 0x01	; 1
    6bc2:	80 93 0b 01 	sts	0x010B, r24
    6bc6:	80 91 0b 01 	lds	r24, 0x010B
    6bca:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6bcc:	80 91 0b 01 	lds	r24, 0x010B
    6bd0:	80 62       	ori	r24, 0x20	; 32
    6bd2:	80 93 0b 01 	sts	0x010B, r24
    6bd6:	80 91 0b 01 	lds	r24, 0x010B
    6bda:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6bdc:	80 91 0b 01 	lds	r24, 0x010B
    6be0:	82 60       	ori	r24, 0x02	; 2
    6be2:	80 93 0b 01 	sts	0x010B, r24
    6be6:	80 91 0b 01 	lds	r24, 0x010B
    6bea:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6bec:	80 91 0b 01 	lds	r24, 0x010B
    6bf0:	8f 77       	andi	r24, 0x7F	; 127
    6bf2:	80 93 0b 01 	sts	0x010B, r24
    6bf6:	80 91 0b 01 	lds	r24, 0x010B
    6bfa:	08 95       	ret

00006bfc <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    6bfc:	eb e0       	ldi	r30, 0x0B	; 11
    6bfe:	f1 e0       	ldi	r31, 0x01	; 1
    6c00:	80 81       	ld	r24, Z
    6c02:	81 60       	ori	r24, 0x01	; 1
    6c04:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    6c06:	80 81       	ld	r24, Z
    6c08:	82 60       	ori	r24, 0x02	; 2
    6c0a:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    6c0c:	80 81       	ld	r24, Z
    6c0e:	84 60       	ori	r24, 0x04	; 4
    6c10:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    6c12:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    6c14:	80 81       	ld	r24, Z
    6c16:	80 61       	ori	r24, 0x10	; 16
    6c18:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    6c1a:	80 81       	ld	r24, Z
    6c1c:	80 62       	ori	r24, 0x20	; 32
    6c1e:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    6c20:	80 81       	ld	r24, Z
    6c22:	80 64       	ori	r24, 0x40	; 64
    6c24:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    6c26:	80 81       	ld	r24, Z
    6c28:	80 68       	ori	r24, 0x80	; 128
    6c2a:	80 83       	st	Z, r24

}
    6c2c:	08 95       	ret

00006c2e <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    6c2e:	eb e0       	ldi	r30, 0x0B	; 11
    6c30:	f1 e0       	ldi	r31, 0x01	; 1
    6c32:	80 81       	ld	r24, Z
    6c34:	8e 7f       	andi	r24, 0xFE	; 254
    6c36:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    6c38:	80 81       	ld	r24, Z
    6c3a:	8d 7f       	andi	r24, 0xFD	; 253
    6c3c:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    6c3e:	80 81       	ld	r24, Z
    6c40:	8b 7f       	andi	r24, 0xFB	; 251
    6c42:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    6c44:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    6c46:	80 81       	ld	r24, Z
    6c48:	8f 7e       	andi	r24, 0xEF	; 239
    6c4a:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    6c4c:	80 81       	ld	r24, Z
    6c4e:	8f 7d       	andi	r24, 0xDF	; 223
    6c50:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    6c52:	80 81       	ld	r24, Z
    6c54:	8f 7b       	andi	r24, 0xBF	; 191
    6c56:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    6c58:	80 81       	ld	r24, Z
    6c5a:	8f 77       	andi	r24, 0x7F	; 127
    6c5c:	80 83       	st	Z, r24

}
    6c5e:	08 95       	ret

00006c60 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    6c60:	0e 94 bb 19 	call	0x3376	; 0x3376 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6c64:	80 91 14 02 	lds	r24, 0x0214
    6c68:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6c6c:	88 23       	and	r24, r24
    6c6e:	49 f4       	brne	.+18     	; 0x6c82 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    6c70:	86 e1       	ldi	r24, 0x16	; 22
    6c72:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    6c76:	85 e4       	ldi	r24, 0x45	; 69
    6c78:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6c7c:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>
    6c80:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    6c82:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    6c86:	86 ea       	ldi	r24, 0xA6	; 166
    6c88:	90 e0       	ldi	r25, 0x00	; 0
    6c8a:	90 93 15 02 	sts	0x0215, r25
    6c8e:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6c92:	86 ea       	ldi	r24, 0xA6	; 166
    6c94:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6c98:	88 23       	and	r24, r24
    6c9a:	41 f5       	brne	.+80     	; 0x6cec <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    6c9c:	8d e2       	ldi	r24, 0x2D	; 45
    6c9e:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_write(0x08);	// measurement mode
    6ca2:	88 e0       	ldi	r24, 0x08	; 8
    6ca4:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6ca8:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6cac:	80 91 14 02 	lds	r24, 0x0214
    6cb0:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6cb4:	88 23       	and	r24, r24
    6cb6:	d1 f4       	brne	.+52     	; 0x6cec <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    6cb8:	81 e3       	ldi	r24, 0x31	; 49
    6cba:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    6cbe:	80 e0       	ldi	r24, 0x00	; 0
    6cc0:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6cc4:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6cc8:	80 91 14 02 	lds	r24, 0x0214
    6ccc:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6cd0:	88 23       	and	r24, r24
    6cd2:	61 f4       	brne	.+24     	; 0x6cec <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    6cd4:	8c e2       	ldi	r24, 0x2C	; 44
    6cd6:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    6cda:	89 e0       	ldi	r24, 0x09	; 9
    6cdc:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6ce0:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    6ce4:	81 e0       	ldi	r24, 0x01	; 1
    6ce6:	80 93 27 04 	sts	0x0427, r24
    6cea:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    6cec:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    6cf0:	82 e0       	ldi	r24, 0x02	; 2
    6cf2:	80 93 27 04 	sts	0x0427, r24
    6cf6:	08 95       	ret

00006cf8 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6cf8:	80 91 14 02 	lds	r24, 0x0214
    6cfc:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6d00:	88 23       	and	r24, r24
    6d02:	51 f4       	brne	.+20     	; 0x6d18 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    6d04:	86 e1       	ldi	r24, 0x16	; 22
    6d06:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    6d0a:	85 e4       	ldi	r24, 0x45	; 69
    6d0c:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6d10:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>
    }

	return 0;				// configuration ok
    6d14:	80 e0       	ldi	r24, 0x00	; 0

}
    6d16:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    6d18:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>
		return 1;
    6d1c:	81 e0       	ldi	r24, 0x01	; 1
    6d1e:	08 95       	ret

00006d20 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6d20:	80 91 14 02 	lds	r24, 0x0214
    6d24:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6d28:	88 23       	and	r24, r24
    6d2a:	31 f5       	brne	.+76     	; 0x6d78 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    6d2c:	8d e2       	ldi	r24, 0x2D	; 45
    6d2e:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_write(0x08);	// measurement mode
    6d32:	88 e0       	ldi	r24, 0x08	; 8
    6d34:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6d38:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6d3c:	80 91 14 02 	lds	r24, 0x0214
    6d40:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6d44:	88 23       	and	r24, r24
    6d46:	c1 f4       	brne	.+48     	; 0x6d78 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    6d48:	81 e3       	ldi	r24, 0x31	; 49
    6d4a:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    6d4e:	80 e0       	ldi	r24, 0x00	; 0
    6d50:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6d54:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6d58:	80 91 14 02 	lds	r24, 0x0214
    6d5c:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6d60:	88 23       	and	r24, r24
    6d62:	51 f4       	brne	.+20     	; 0x6d78 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    6d64:	8c e2       	ldi	r24, 0x2C	; 44
    6d66:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    6d6a:	89 e0       	ldi	r24, 0x09	; 9
    6d6c:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6d70:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>
    }

	return 0;
    6d74:	80 e0       	ldi	r24, 0x00	; 0

}
    6d76:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    6d78:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>
		return 1;
    6d7c:	81 e0       	ldi	r24, 0x01	; 1
    6d7e:	08 95       	ret

00006d80 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    6d80:	ff 92       	push	r15
    6d82:	0f 93       	push	r16
    6d84:	1f 93       	push	r17
    6d86:	df 93       	push	r29
    6d88:	cf 93       	push	r28
    6d8a:	0f 92       	push	r0
    6d8c:	cd b7       	in	r28, 0x3d	; 61
    6d8e:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    6d90:	80 91 27 04 	lds	r24, 0x0427
    6d94:	88 23       	and	r24, r24
    6d96:	91 f0       	breq	.+36     	; 0x6dbc <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    6d98:	81 30       	cpi	r24, 0x01	; 1
    6d9a:	09 f4       	brne	.+2      	; 0x6d9e <readAccelXY+0x1e>
    6d9c:	88 c0       	rjmp	.+272    	; 0x6eae <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    6d9e:	10 92 29 04 	sts	0x0429, r1
    6da2:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    6da6:	10 92 2b 04 	sts	0x042B, r1
    6daa:	10 92 2a 04 	sts	0x042A, r1

	}

}
    6dae:	0f 90       	pop	r0
    6db0:	cf 91       	pop	r28
    6db2:	df 91       	pop	r29
    6db4:	1f 91       	pop	r17
    6db6:	0f 91       	pop	r16
    6db8:	ff 90       	pop	r15
    6dba:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    6dbc:	80 91 14 02 	lds	r24, 0x0214
    6dc0:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    6dc4:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    6dc6:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    6dca:	80 91 14 02 	lds	r24, 0x0214
    6dce:	8f 5f       	subi	r24, 0xFF	; 255
    6dd0:	0e 94 10 1a 	call	0x3420	; 0x3420 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    6dd4:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    6dd8:	08 2f       	mov	r16, r24
    6dda:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    6dde:	f8 2e       	mov	r15, r24
    6de0:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    6de4:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    6de6:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    6dea:	89 83       	std	Y+1, r24	; 0x01
    6dec:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    6df0:	90 91 84 05 	lds	r25, 0x0584
    6df4:	89 81       	ldd	r24, Y+1	; 0x01
    6df6:	99 23       	and	r25, r25
    6df8:	39 f1       	breq	.+78     	; 0x6e48 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    6dfa:	4f 2d       	mov	r20, r15
    6dfc:	55 27       	eor	r21, r21
    6dfe:	47 fd       	sbrc	r20, 7
    6e00:	50 95       	com	r21
    6e02:	54 2f       	mov	r21, r20
    6e04:	44 27       	eor	r20, r20
    6e06:	60 2f       	mov	r22, r16
    6e08:	77 27       	eor	r23, r23
    6e0a:	67 fd       	sbrc	r22, 7
    6e0c:	70 95       	com	r23
    6e0e:	46 2b       	or	r20, r22
    6e10:	57 2b       	or	r21, r23
    6e12:	50 93 29 04 	sts	0x0429, r21
    6e16:	40 93 28 04 	sts	0x0428, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    6e1a:	28 2f       	mov	r18, r24
    6e1c:	33 27       	eor	r19, r19
    6e1e:	27 fd       	sbrc	r18, 7
    6e20:	30 95       	com	r19
    6e22:	32 2f       	mov	r19, r18
    6e24:	22 27       	eor	r18, r18
    6e26:	81 2f       	mov	r24, r17
    6e28:	99 27       	eor	r25, r25
    6e2a:	87 fd       	sbrc	r24, 7
    6e2c:	90 95       	com	r25
    6e2e:	28 2b       	or	r18, r24
    6e30:	39 2b       	or	r19, r25
    6e32:	30 93 2b 04 	sts	0x042B, r19
    6e36:	20 93 2a 04 	sts	0x042A, r18
		accX = 0;
		accY = 0;

	}

}
    6e3a:	0f 90       	pop	r0
    6e3c:	cf 91       	pop	r28
    6e3e:	df 91       	pop	r29
    6e40:	1f 91       	pop	r17
    6e42:	0f 91       	pop	r16
    6e44:	ff 90       	pop	r15
    6e46:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    6e48:	4f 2d       	mov	r20, r15
    6e4a:	55 27       	eor	r21, r21
    6e4c:	47 fd       	sbrc	r20, 7
    6e4e:	50 95       	com	r21
    6e50:	54 2f       	mov	r21, r20
    6e52:	44 27       	eor	r20, r20
    6e54:	60 2f       	mov	r22, r16
    6e56:	77 27       	eor	r23, r23
    6e58:	67 fd       	sbrc	r22, 7
    6e5a:	70 95       	com	r23
    6e5c:	46 2b       	or	r20, r22
    6e5e:	57 2b       	or	r21, r23
    6e60:	60 91 2e 04 	lds	r22, 0x042E
    6e64:	70 91 2f 04 	lds	r23, 0x042F
    6e68:	46 1b       	sub	r20, r22
    6e6a:	57 0b       	sbc	r21, r23
    6e6c:	50 93 29 04 	sts	0x0429, r21
    6e70:	40 93 28 04 	sts	0x0428, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    6e74:	28 2f       	mov	r18, r24
    6e76:	33 27       	eor	r19, r19
    6e78:	27 fd       	sbrc	r18, 7
    6e7a:	30 95       	com	r19
    6e7c:	32 2f       	mov	r19, r18
    6e7e:	22 27       	eor	r18, r18
    6e80:	81 2f       	mov	r24, r17
    6e82:	99 27       	eor	r25, r25
    6e84:	87 fd       	sbrc	r24, 7
    6e86:	90 95       	com	r25
    6e88:	28 2b       	or	r18, r24
    6e8a:	39 2b       	or	r19, r25
    6e8c:	80 91 30 04 	lds	r24, 0x0430
    6e90:	90 91 31 04 	lds	r25, 0x0431
    6e94:	28 1b       	sub	r18, r24
    6e96:	39 0b       	sbc	r19, r25
    6e98:	30 93 2b 04 	sts	0x042B, r19
    6e9c:	20 93 2a 04 	sts	0x042A, r18
		accX = 0;
		accY = 0;

	}

}
    6ea0:	0f 90       	pop	r0
    6ea2:	cf 91       	pop	r28
    6ea4:	df 91       	pop	r29
    6ea6:	1f 91       	pop	r17
    6ea8:	0f 91       	pop	r16
    6eaa:	ff 90       	pop	r15
    6eac:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    6eae:	80 91 14 02 	lds	r24, 0x0214
    6eb2:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    6eb6:	82 e3       	ldi	r24, 0x32	; 50
    6eb8:	86 cf       	rjmp	.-244    	; 0x6dc6 <readAccelXY+0x46>

00006eba <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    6eba:	df 93       	push	r29
    6ebc:	cf 93       	push	r28
    6ebe:	00 d0       	rcall	.+0      	; 0x6ec0 <readAccelXYZ+0x6>
    6ec0:	00 d0       	rcall	.+0      	; 0x6ec2 <readAccelXYZ+0x8>
    6ec2:	cd b7       	in	r28, 0x3d	; 61
    6ec4:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    6ec6:	80 91 27 04 	lds	r24, 0x0427
    6eca:	88 23       	and	r24, r24
    6ecc:	c1 f0       	breq	.+48     	; 0x6efe <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    6ece:	81 30       	cpi	r24, 0x01	; 1
    6ed0:	09 f4       	brne	.+2      	; 0x6ed4 <readAccelXYZ+0x1a>
    6ed2:	ad c0       	rjmp	.+346    	; 0x702e <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    6ed4:	10 92 29 04 	sts	0x0429, r1
    6ed8:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    6edc:	10 92 2b 04 	sts	0x042B, r1
    6ee0:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    6ee4:	10 92 2d 04 	sts	0x042D, r1
    6ee8:	10 92 2c 04 	sts	0x042C, r1

	}

}
    6eec:	26 96       	adiw	r28, 0x06	; 6
    6eee:	0f b6       	in	r0, 0x3f	; 63
    6ef0:	f8 94       	cli
    6ef2:	de bf       	out	0x3e, r29	; 62
    6ef4:	0f be       	out	0x3f, r0	; 63
    6ef6:	cd bf       	out	0x3d, r28	; 61
    6ef8:	cf 91       	pop	r28
    6efa:	df 91       	pop	r29
    6efc:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    6efe:	80 91 14 02 	lds	r24, 0x0214
    6f02:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    6f06:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    6f08:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    6f0c:	80 91 14 02 	lds	r24, 0x0214
    6f10:	8f 5f       	subi	r24, 0xFF	; 255
    6f12:	0e 94 10 1a 	call	0x3420	; 0x3420 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    6f16:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    6f1a:	89 83       	std	Y+1, r24	; 0x01
    6f1c:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    6f20:	8a 83       	std	Y+2, r24	; 0x02
    6f22:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    6f26:	8b 83       	std	Y+3, r24	; 0x03
    6f28:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    6f2c:	8c 83       	std	Y+4, r24	; 0x04
    6f2e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    6f32:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    6f34:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <i2c_readNak>
    6f38:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    6f3a:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    6f3e:	80 91 84 05 	lds	r24, 0x0584
    6f42:	88 23       	and	r24, r24
    6f44:	89 f1       	breq	.+98     	; 0x6fa8 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    6f46:	8a 81       	ldd	r24, Y+2	; 0x02
    6f48:	99 27       	eor	r25, r25
    6f4a:	87 fd       	sbrc	r24, 7
    6f4c:	90 95       	com	r25
    6f4e:	98 2f       	mov	r25, r24
    6f50:	88 27       	eor	r24, r24
    6f52:	29 81       	ldd	r18, Y+1	; 0x01
    6f54:	33 27       	eor	r19, r19
    6f56:	27 fd       	sbrc	r18, 7
    6f58:	30 95       	com	r19
    6f5a:	82 2b       	or	r24, r18
    6f5c:	93 2b       	or	r25, r19
    6f5e:	90 93 29 04 	sts	0x0429, r25
    6f62:	80 93 28 04 	sts	0x0428, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    6f66:	8c 81       	ldd	r24, Y+4	; 0x04
    6f68:	99 27       	eor	r25, r25
    6f6a:	87 fd       	sbrc	r24, 7
    6f6c:	90 95       	com	r25
    6f6e:	98 2f       	mov	r25, r24
    6f70:	88 27       	eor	r24, r24
    6f72:	2b 81       	ldd	r18, Y+3	; 0x03
    6f74:	33 27       	eor	r19, r19
    6f76:	27 fd       	sbrc	r18, 7
    6f78:	30 95       	com	r19
    6f7a:	82 2b       	or	r24, r18
    6f7c:	93 2b       	or	r25, r19
    6f7e:	90 93 2b 04 	sts	0x042B, r25
    6f82:	80 93 2a 04 	sts	0x042A, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    6f86:	8e 81       	ldd	r24, Y+6	; 0x06
    6f88:	99 27       	eor	r25, r25
    6f8a:	87 fd       	sbrc	r24, 7
    6f8c:	90 95       	com	r25
    6f8e:	98 2f       	mov	r25, r24
    6f90:	88 27       	eor	r24, r24
    6f92:	2d 81       	ldd	r18, Y+5	; 0x05
    6f94:	33 27       	eor	r19, r19
    6f96:	27 fd       	sbrc	r18, 7
    6f98:	30 95       	com	r19
    6f9a:	82 2b       	or	r24, r18
    6f9c:	93 2b       	or	r25, r19
    6f9e:	90 93 2d 04 	sts	0x042D, r25
    6fa2:	80 93 2c 04 	sts	0x042C, r24
    6fa6:	a2 cf       	rjmp	.-188    	; 0x6eec <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    6fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    6faa:	99 27       	eor	r25, r25
    6fac:	87 fd       	sbrc	r24, 7
    6fae:	90 95       	com	r25
    6fb0:	98 2f       	mov	r25, r24
    6fb2:	88 27       	eor	r24, r24
    6fb4:	29 81       	ldd	r18, Y+1	; 0x01
    6fb6:	33 27       	eor	r19, r19
    6fb8:	27 fd       	sbrc	r18, 7
    6fba:	30 95       	com	r19
    6fbc:	82 2b       	or	r24, r18
    6fbe:	93 2b       	or	r25, r19
    6fc0:	20 91 2e 04 	lds	r18, 0x042E
    6fc4:	30 91 2f 04 	lds	r19, 0x042F
    6fc8:	82 1b       	sub	r24, r18
    6fca:	93 0b       	sbc	r25, r19
    6fcc:	90 93 29 04 	sts	0x0429, r25
    6fd0:	80 93 28 04 	sts	0x0428, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    6fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    6fd6:	99 27       	eor	r25, r25
    6fd8:	87 fd       	sbrc	r24, 7
    6fda:	90 95       	com	r25
    6fdc:	98 2f       	mov	r25, r24
    6fde:	88 27       	eor	r24, r24
    6fe0:	2b 81       	ldd	r18, Y+3	; 0x03
    6fe2:	33 27       	eor	r19, r19
    6fe4:	27 fd       	sbrc	r18, 7
    6fe6:	30 95       	com	r19
    6fe8:	82 2b       	or	r24, r18
    6fea:	93 2b       	or	r25, r19
    6fec:	20 91 30 04 	lds	r18, 0x0430
    6ff0:	30 91 31 04 	lds	r19, 0x0431
    6ff4:	82 1b       	sub	r24, r18
    6ff6:	93 0b       	sbc	r25, r19
    6ff8:	90 93 2b 04 	sts	0x042B, r25
    6ffc:	80 93 2a 04 	sts	0x042A, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    7000:	8e 81       	ldd	r24, Y+6	; 0x06
    7002:	99 27       	eor	r25, r25
    7004:	87 fd       	sbrc	r24, 7
    7006:	90 95       	com	r25
    7008:	98 2f       	mov	r25, r24
    700a:	88 27       	eor	r24, r24
    700c:	2d 81       	ldd	r18, Y+5	; 0x05
    700e:	33 27       	eor	r19, r19
    7010:	27 fd       	sbrc	r18, 7
    7012:	30 95       	com	r19
    7014:	82 2b       	or	r24, r18
    7016:	93 2b       	or	r25, r19
    7018:	20 91 32 04 	lds	r18, 0x0432
    701c:	30 91 33 04 	lds	r19, 0x0433
    7020:	82 1b       	sub	r24, r18
    7022:	93 0b       	sbc	r25, r19
    7024:	90 93 2d 04 	sts	0x042D, r25
    7028:	80 93 2c 04 	sts	0x042C, r24
    702c:	5f cf       	rjmp	.-322    	; 0x6eec <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    702e:	80 91 14 02 	lds	r24, 0x0214
    7032:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7036:	82 e3       	ldi	r24, 0x32	; 50
    7038:	67 cf       	rjmp	.-306    	; 0x6f08 <readAccelXYZ+0x4e>

0000703a <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    703a:	cf 93       	push	r28
    703c:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    703e:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    7042:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    7046:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    704a:	80 e0       	ldi	r24, 0x00	; 0
    704c:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <updateRedLed>
	updateGreenLed(pwm_green);
    7050:	80 91 0d 02 	lds	r24, 0x020D
    7054:	0e 94 39 35 	call	0x6a72	; 0x6a72 <updateGreenLed>
	updateBlueLed(pwm_blue);
    7058:	80 91 0e 02 	lds	r24, 0x020E
    705c:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <updateBlueLed>

	calibrationCycle = 0;
    7060:	10 92 4a 04 	sts	0x044A, r1
    7064:	10 92 49 04 	sts	0x0449, r1
	startCalibration = 1;
    7068:	81 e0       	ldi	r24, 0x01	; 1
    706a:	80 93 84 05 	sts	0x0584, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    706e:	c1 e0       	ldi	r28, 0x01	; 1
    7070:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    7072:	0e 94 5d 37 	call	0x6eba	; 0x6eba <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    7076:	20 91 49 04 	lds	r18, 0x0449
    707a:	30 91 4a 04 	lds	r19, 0x044A
    707e:	21 31       	cpi	r18, 0x11	; 17
    7080:	31 05       	cpc	r19, r1
    7082:	0c f4       	brge	.+2      	; 0x7086 <calibrateSensors+0x4c>
    7084:	35 c1       	rjmp	.+618    	; 0x72f0 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    7086:	80 91 87 02 	lds	r24, 0x0287
    708a:	90 91 88 02 	lds	r25, 0x0288
    708e:	a0 91 89 02 	lds	r26, 0x0289
    7092:	b0 91 8a 02 	lds	r27, 0x028A
    7096:	54 e0       	ldi	r21, 0x04	; 4
    7098:	b6 95       	lsr	r27
    709a:	a7 95       	ror	r26
    709c:	97 95       	ror	r25
    709e:	87 95       	ror	r24
    70a0:	5a 95       	dec	r21
    70a2:	d1 f7       	brne	.-12     	; 0x7098 <calibrateSensors+0x5e>
    70a4:	90 93 70 02 	sts	0x0270, r25
    70a8:	80 93 6f 02 	sts	0x026F, r24
    70ac:	80 91 8b 02 	lds	r24, 0x028B
    70b0:	90 91 8c 02 	lds	r25, 0x028C
    70b4:	a0 91 8d 02 	lds	r26, 0x028D
    70b8:	b0 91 8e 02 	lds	r27, 0x028E
    70bc:	44 e0       	ldi	r20, 0x04	; 4
    70be:	b6 95       	lsr	r27
    70c0:	a7 95       	ror	r26
    70c2:	97 95       	ror	r25
    70c4:	87 95       	ror	r24
    70c6:	4a 95       	dec	r20
    70c8:	d1 f7       	brne	.-12     	; 0x70be <calibrateSensors+0x84>
    70ca:	90 93 72 02 	sts	0x0272, r25
    70ce:	80 93 71 02 	sts	0x0271, r24
    70d2:	80 91 8f 02 	lds	r24, 0x028F
    70d6:	90 91 90 02 	lds	r25, 0x0290
    70da:	a0 91 91 02 	lds	r26, 0x0291
    70de:	b0 91 92 02 	lds	r27, 0x0292
    70e2:	34 e0       	ldi	r19, 0x04	; 4
    70e4:	b6 95       	lsr	r27
    70e6:	a7 95       	ror	r26
    70e8:	97 95       	ror	r25
    70ea:	87 95       	ror	r24
    70ec:	3a 95       	dec	r19
    70ee:	d1 f7       	brne	.-12     	; 0x70e4 <calibrateSensors+0xaa>
    70f0:	90 93 74 02 	sts	0x0274, r25
    70f4:	80 93 73 02 	sts	0x0273, r24
    70f8:	80 91 93 02 	lds	r24, 0x0293
    70fc:	90 91 94 02 	lds	r25, 0x0294
    7100:	a0 91 95 02 	lds	r26, 0x0295
    7104:	b0 91 96 02 	lds	r27, 0x0296
    7108:	24 e0       	ldi	r18, 0x04	; 4
    710a:	b6 95       	lsr	r27
    710c:	a7 95       	ror	r26
    710e:	97 95       	ror	r25
    7110:	87 95       	ror	r24
    7112:	2a 95       	dec	r18
    7114:	d1 f7       	brne	.-12     	; 0x710a <calibrateSensors+0xd0>
    7116:	90 93 76 02 	sts	0x0276, r25
    711a:	80 93 75 02 	sts	0x0275, r24
    711e:	80 91 97 02 	lds	r24, 0x0297
    7122:	90 91 98 02 	lds	r25, 0x0298
    7126:	a0 91 99 02 	lds	r26, 0x0299
    712a:	b0 91 9a 02 	lds	r27, 0x029A
    712e:	f4 e0       	ldi	r31, 0x04	; 4
    7130:	b6 95       	lsr	r27
    7132:	a7 95       	ror	r26
    7134:	97 95       	ror	r25
    7136:	87 95       	ror	r24
    7138:	fa 95       	dec	r31
    713a:	d1 f7       	brne	.-12     	; 0x7130 <calibrateSensors+0xf6>
    713c:	90 93 78 02 	sts	0x0278, r25
    7140:	80 93 77 02 	sts	0x0277, r24
    7144:	80 91 9b 02 	lds	r24, 0x029B
    7148:	90 91 9c 02 	lds	r25, 0x029C
    714c:	a0 91 9d 02 	lds	r26, 0x029D
    7150:	b0 91 9e 02 	lds	r27, 0x029E
    7154:	e4 e0       	ldi	r30, 0x04	; 4
    7156:	b6 95       	lsr	r27
    7158:	a7 95       	ror	r26
    715a:	97 95       	ror	r25
    715c:	87 95       	ror	r24
    715e:	ea 95       	dec	r30
    7160:	d1 f7       	brne	.-12     	; 0x7156 <calibrateSensors+0x11c>
    7162:	90 93 7a 02 	sts	0x027A, r25
    7166:	80 93 79 02 	sts	0x0279, r24
    716a:	80 91 9f 02 	lds	r24, 0x029F
    716e:	90 91 a0 02 	lds	r25, 0x02A0
    7172:	a0 91 a1 02 	lds	r26, 0x02A1
    7176:	b0 91 a2 02 	lds	r27, 0x02A2
    717a:	74 e0       	ldi	r23, 0x04	; 4
    717c:	b6 95       	lsr	r27
    717e:	a7 95       	ror	r26
    7180:	97 95       	ror	r25
    7182:	87 95       	ror	r24
    7184:	7a 95       	dec	r23
    7186:	d1 f7       	brne	.-12     	; 0x717c <calibrateSensors+0x142>
    7188:	90 93 7c 02 	sts	0x027C, r25
    718c:	80 93 7b 02 	sts	0x027B, r24
    7190:	80 91 a3 02 	lds	r24, 0x02A3
    7194:	90 91 a4 02 	lds	r25, 0x02A4
    7198:	a0 91 a5 02 	lds	r26, 0x02A5
    719c:	b0 91 a6 02 	lds	r27, 0x02A6
    71a0:	64 e0       	ldi	r22, 0x04	; 4
    71a2:	b6 95       	lsr	r27
    71a4:	a7 95       	ror	r26
    71a6:	97 95       	ror	r25
    71a8:	87 95       	ror	r24
    71aa:	6a 95       	dec	r22
    71ac:	d1 f7       	brne	.-12     	; 0x71a2 <calibrateSensors+0x168>
    71ae:	90 93 7e 02 	sts	0x027E, r25
    71b2:	80 93 7d 02 	sts	0x027D, r24
    71b6:	80 91 ab 02 	lds	r24, 0x02AB
    71ba:	90 91 ac 02 	lds	r25, 0x02AC
    71be:	a0 91 ad 02 	lds	r26, 0x02AD
    71c2:	b0 91 ae 02 	lds	r27, 0x02AE
    71c6:	54 e0       	ldi	r21, 0x04	; 4
    71c8:	b6 95       	lsr	r27
    71ca:	a7 95       	ror	r26
    71cc:	97 95       	ror	r25
    71ce:	87 95       	ror	r24
    71d0:	5a 95       	dec	r21
    71d2:	d1 f7       	brne	.-12     	; 0x71c8 <calibrateSensors+0x18e>
    71d4:	9c 01       	movw	r18, r24
    71d6:	80 91 af 02 	lds	r24, 0x02AF
    71da:	90 91 b0 02 	lds	r25, 0x02B0
    71de:	a0 91 b1 02 	lds	r26, 0x02B1
    71e2:	b0 91 b2 02 	lds	r27, 0x02B2
    71e6:	44 e0       	ldi	r20, 0x04	; 4
    71e8:	b6 95       	lsr	r27
    71ea:	a7 95       	ror	r26
    71ec:	97 95       	ror	r25
    71ee:	87 95       	ror	r24
    71f0:	4a 95       	dec	r20
    71f2:	d1 f7       	brne	.-12     	; 0x71e8 <calibrateSensors+0x1ae>
    71f4:	bc 01       	movw	r22, r24
    71f6:	80 91 b3 02 	lds	r24, 0x02B3
    71fa:	90 91 b4 02 	lds	r25, 0x02B4
    71fe:	a0 91 b5 02 	lds	r26, 0x02B5
    7202:	b0 91 b6 02 	lds	r27, 0x02B6
    7206:	f4 e0       	ldi	r31, 0x04	; 4
    7208:	b6 95       	lsr	r27
    720a:	a7 95       	ror	r26
    720c:	97 95       	ror	r25
    720e:	87 95       	ror	r24
    7210:	fa 95       	dec	r31
    7212:	d1 f7       	brne	.-12     	; 0x7208 <calibrateSensors+0x1ce>
    7214:	ac 01       	movw	r20, r24
    7216:	80 91 a7 02 	lds	r24, 0x02A7
    721a:	90 91 a8 02 	lds	r25, 0x02A8
    721e:	a0 91 a9 02 	lds	r26, 0x02A9
    7222:	b0 91 aa 02 	lds	r27, 0x02AA
    7226:	e4 e0       	ldi	r30, 0x04	; 4
    7228:	b6 95       	lsr	r27
    722a:	a7 95       	ror	r26
    722c:	97 95       	ror	r25
    722e:	87 95       	ror	r24
    7230:	ea 95       	dec	r30
    7232:	d1 f7       	brne	.-12     	; 0x7228 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    7234:	80 50       	subi	r24, 0x00	; 0
    7236:	92 40       	sbci	r25, 0x02	; 2
    7238:	90 93 80 02 	sts	0x0280, r25
    723c:	80 93 7f 02 	sts	0x027F, r24
    7240:	20 50       	subi	r18, 0x00	; 0
    7242:	32 40       	sbci	r19, 0x02	; 2
    7244:	30 93 82 02 	sts	0x0282, r19
    7248:	20 93 81 02 	sts	0x0281, r18
    724c:	60 50       	subi	r22, 0x00	; 0
    724e:	72 40       	sbci	r23, 0x02	; 2
    7250:	70 93 84 02 	sts	0x0284, r23
    7254:	60 93 83 02 	sts	0x0283, r22
    7258:	40 50       	subi	r20, 0x00	; 0
    725a:	52 40       	sbci	r21, 0x02	; 2
    725c:	50 93 86 02 	sts	0x0286, r21
    7260:	40 93 85 02 	sts	0x0285, r20
			}

			accOffsetX = accOffsetXSum>>4;
    7264:	80 91 34 04 	lds	r24, 0x0434
    7268:	90 91 35 04 	lds	r25, 0x0435
    726c:	95 95       	asr	r25
    726e:	87 95       	ror	r24
    7270:	95 95       	asr	r25
    7272:	87 95       	ror	r24
    7274:	95 95       	asr	r25
    7276:	87 95       	ror	r24
    7278:	95 95       	asr	r25
    727a:	87 95       	ror	r24
    727c:	90 93 2f 04 	sts	0x042F, r25
    7280:	80 93 2e 04 	sts	0x042E, r24
			accOffsetY = accOffsetYSum>>4;
    7284:	80 91 36 04 	lds	r24, 0x0436
    7288:	90 91 37 04 	lds	r25, 0x0437
    728c:	95 95       	asr	r25
    728e:	87 95       	ror	r24
    7290:	95 95       	asr	r25
    7292:	87 95       	ror	r24
    7294:	95 95       	asr	r25
    7296:	87 95       	ror	r24
    7298:	95 95       	asr	r25
    729a:	87 95       	ror	r24
    729c:	90 93 31 04 	sts	0x0431, r25
    72a0:	80 93 30 04 	sts	0x0430, r24
			accOffsetZ = accOffsetZSum>>4;
    72a4:	80 91 38 04 	lds	r24, 0x0438
    72a8:	90 91 39 04 	lds	r25, 0x0439
    72ac:	95 95       	asr	r25
    72ae:	87 95       	ror	r24
    72b0:	95 95       	asr	r25
    72b2:	87 95       	ror	r24
    72b4:	95 95       	asr	r25
    72b6:	87 95       	ror	r24
    72b8:	95 95       	asr	r25
    72ba:	87 95       	ror	r24
    72bc:	90 93 33 04 	sts	0x0433, r25
    72c0:	80 93 32 04 	sts	0x0432, r24

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    72c4:	10 92 84 05 	sts	0x0584, r1

		}

	}

	pwm_red = 255;
    72c8:	8f ef       	ldi	r24, 0xFF	; 255
    72ca:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    72ce:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    72d2:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    72d6:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <updateRedLed>
	updateGreenLed(pwm_green);
    72da:	80 91 0d 02 	lds	r24, 0x020D
    72de:	0e 94 39 35 	call	0x6a72	; 0x6a72 <updateGreenLed>
	updateBlueLed(pwm_blue);
    72e2:	80 91 0e 02 	lds	r24, 0x020E
    72e6:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <updateBlueLed>

}
    72ea:	df 91       	pop	r29
    72ec:	cf 91       	pop	r28
    72ee:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    72f0:	80 91 be 02 	lds	r24, 0x02BE
    72f4:	88 23       	and	r24, r24
    72f6:	09 f4       	brne	.+2      	; 0x72fa <calibrateSensors+0x2c0>
    72f8:	86 c1       	rjmp	.+780    	; 0x7606 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    72fa:	10 92 be 02 	sts	0x02BE, r1

				if(calibrationCycle==0) {		// reset all variables
    72fe:	21 15       	cp	r18, r1
    7300:	31 05       	cpc	r19, r1
    7302:	09 f4       	brne	.+2      	; 0x7306 <calibrateSensors+0x2cc>
    7304:	86 c1       	rjmp	.+780    	; 0x7612 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    7306:	80 91 57 02 	lds	r24, 0x0257
    730a:	90 91 58 02 	lds	r25, 0x0258
    730e:	aa 27       	eor	r26, r26
    7310:	97 fd       	sbrc	r25, 7
    7312:	a0 95       	com	r26
    7314:	ba 2f       	mov	r27, r26
    7316:	40 91 87 02 	lds	r20, 0x0287
    731a:	50 91 88 02 	lds	r21, 0x0288
    731e:	60 91 89 02 	lds	r22, 0x0289
    7322:	70 91 8a 02 	lds	r23, 0x028A
    7326:	84 0f       	add	r24, r20
    7328:	95 1f       	adc	r25, r21
    732a:	a6 1f       	adc	r26, r22
    732c:	b7 1f       	adc	r27, r23
    732e:	80 93 87 02 	sts	0x0287, r24
    7332:	90 93 88 02 	sts	0x0288, r25
    7336:	a0 93 89 02 	sts	0x0289, r26
    733a:	b0 93 8a 02 	sts	0x028A, r27
    733e:	80 91 59 02 	lds	r24, 0x0259
    7342:	90 91 5a 02 	lds	r25, 0x025A
    7346:	aa 27       	eor	r26, r26
    7348:	97 fd       	sbrc	r25, 7
    734a:	a0 95       	com	r26
    734c:	ba 2f       	mov	r27, r26
    734e:	40 91 8b 02 	lds	r20, 0x028B
    7352:	50 91 8c 02 	lds	r21, 0x028C
    7356:	60 91 8d 02 	lds	r22, 0x028D
    735a:	70 91 8e 02 	lds	r23, 0x028E
    735e:	84 0f       	add	r24, r20
    7360:	95 1f       	adc	r25, r21
    7362:	a6 1f       	adc	r26, r22
    7364:	b7 1f       	adc	r27, r23
    7366:	80 93 8b 02 	sts	0x028B, r24
    736a:	90 93 8c 02 	sts	0x028C, r25
    736e:	a0 93 8d 02 	sts	0x028D, r26
    7372:	b0 93 8e 02 	sts	0x028E, r27
    7376:	80 91 5b 02 	lds	r24, 0x025B
    737a:	90 91 5c 02 	lds	r25, 0x025C
    737e:	aa 27       	eor	r26, r26
    7380:	97 fd       	sbrc	r25, 7
    7382:	a0 95       	com	r26
    7384:	ba 2f       	mov	r27, r26
    7386:	40 91 8f 02 	lds	r20, 0x028F
    738a:	50 91 90 02 	lds	r21, 0x0290
    738e:	60 91 91 02 	lds	r22, 0x0291
    7392:	70 91 92 02 	lds	r23, 0x0292
    7396:	84 0f       	add	r24, r20
    7398:	95 1f       	adc	r25, r21
    739a:	a6 1f       	adc	r26, r22
    739c:	b7 1f       	adc	r27, r23
    739e:	80 93 8f 02 	sts	0x028F, r24
    73a2:	90 93 90 02 	sts	0x0290, r25
    73a6:	a0 93 91 02 	sts	0x0291, r26
    73aa:	b0 93 92 02 	sts	0x0292, r27
    73ae:	80 91 5d 02 	lds	r24, 0x025D
    73b2:	90 91 5e 02 	lds	r25, 0x025E
    73b6:	aa 27       	eor	r26, r26
    73b8:	97 fd       	sbrc	r25, 7
    73ba:	a0 95       	com	r26
    73bc:	ba 2f       	mov	r27, r26
    73be:	40 91 93 02 	lds	r20, 0x0293
    73c2:	50 91 94 02 	lds	r21, 0x0294
    73c6:	60 91 95 02 	lds	r22, 0x0295
    73ca:	70 91 96 02 	lds	r23, 0x0296
    73ce:	84 0f       	add	r24, r20
    73d0:	95 1f       	adc	r25, r21
    73d2:	a6 1f       	adc	r26, r22
    73d4:	b7 1f       	adc	r27, r23
    73d6:	80 93 93 02 	sts	0x0293, r24
    73da:	90 93 94 02 	sts	0x0294, r25
    73de:	a0 93 95 02 	sts	0x0295, r26
    73e2:	b0 93 96 02 	sts	0x0296, r27
    73e6:	80 91 5f 02 	lds	r24, 0x025F
    73ea:	90 91 60 02 	lds	r25, 0x0260
    73ee:	aa 27       	eor	r26, r26
    73f0:	97 fd       	sbrc	r25, 7
    73f2:	a0 95       	com	r26
    73f4:	ba 2f       	mov	r27, r26
    73f6:	40 91 97 02 	lds	r20, 0x0297
    73fa:	50 91 98 02 	lds	r21, 0x0298
    73fe:	60 91 99 02 	lds	r22, 0x0299
    7402:	70 91 9a 02 	lds	r23, 0x029A
    7406:	84 0f       	add	r24, r20
    7408:	95 1f       	adc	r25, r21
    740a:	a6 1f       	adc	r26, r22
    740c:	b7 1f       	adc	r27, r23
    740e:	80 93 97 02 	sts	0x0297, r24
    7412:	90 93 98 02 	sts	0x0298, r25
    7416:	a0 93 99 02 	sts	0x0299, r26
    741a:	b0 93 9a 02 	sts	0x029A, r27
    741e:	80 91 61 02 	lds	r24, 0x0261
    7422:	90 91 62 02 	lds	r25, 0x0262
    7426:	aa 27       	eor	r26, r26
    7428:	97 fd       	sbrc	r25, 7
    742a:	a0 95       	com	r26
    742c:	ba 2f       	mov	r27, r26
    742e:	40 91 9b 02 	lds	r20, 0x029B
    7432:	50 91 9c 02 	lds	r21, 0x029C
    7436:	60 91 9d 02 	lds	r22, 0x029D
    743a:	70 91 9e 02 	lds	r23, 0x029E
    743e:	84 0f       	add	r24, r20
    7440:	95 1f       	adc	r25, r21
    7442:	a6 1f       	adc	r26, r22
    7444:	b7 1f       	adc	r27, r23
    7446:	80 93 9b 02 	sts	0x029B, r24
    744a:	90 93 9c 02 	sts	0x029C, r25
    744e:	a0 93 9d 02 	sts	0x029D, r26
    7452:	b0 93 9e 02 	sts	0x029E, r27
    7456:	80 91 63 02 	lds	r24, 0x0263
    745a:	90 91 64 02 	lds	r25, 0x0264
    745e:	aa 27       	eor	r26, r26
    7460:	97 fd       	sbrc	r25, 7
    7462:	a0 95       	com	r26
    7464:	ba 2f       	mov	r27, r26
    7466:	40 91 9f 02 	lds	r20, 0x029F
    746a:	50 91 a0 02 	lds	r21, 0x02A0
    746e:	60 91 a1 02 	lds	r22, 0x02A1
    7472:	70 91 a2 02 	lds	r23, 0x02A2
    7476:	84 0f       	add	r24, r20
    7478:	95 1f       	adc	r25, r21
    747a:	a6 1f       	adc	r26, r22
    747c:	b7 1f       	adc	r27, r23
    747e:	80 93 9f 02 	sts	0x029F, r24
    7482:	90 93 a0 02 	sts	0x02A0, r25
    7486:	a0 93 a1 02 	sts	0x02A1, r26
    748a:	b0 93 a2 02 	sts	0x02A2, r27
    748e:	80 91 65 02 	lds	r24, 0x0265
    7492:	90 91 66 02 	lds	r25, 0x0266
    7496:	aa 27       	eor	r26, r26
    7498:	97 fd       	sbrc	r25, 7
    749a:	a0 95       	com	r26
    749c:	ba 2f       	mov	r27, r26
    749e:	40 91 a3 02 	lds	r20, 0x02A3
    74a2:	50 91 a4 02 	lds	r21, 0x02A4
    74a6:	60 91 a5 02 	lds	r22, 0x02A5
    74aa:	70 91 a6 02 	lds	r23, 0x02A6
    74ae:	84 0f       	add	r24, r20
    74b0:	95 1f       	adc	r25, r21
    74b2:	a6 1f       	adc	r26, r22
    74b4:	b7 1f       	adc	r27, r23
    74b6:	80 93 a3 02 	sts	0x02A3, r24
    74ba:	90 93 a4 02 	sts	0x02A4, r25
    74be:	a0 93 a5 02 	sts	0x02A5, r26
    74c2:	b0 93 a6 02 	sts	0x02A6, r27
    74c6:	80 91 67 02 	lds	r24, 0x0267
    74ca:	90 91 68 02 	lds	r25, 0x0268
    74ce:	aa 27       	eor	r26, r26
    74d0:	97 fd       	sbrc	r25, 7
    74d2:	a0 95       	com	r26
    74d4:	ba 2f       	mov	r27, r26
    74d6:	40 91 a7 02 	lds	r20, 0x02A7
    74da:	50 91 a8 02 	lds	r21, 0x02A8
    74de:	60 91 a9 02 	lds	r22, 0x02A9
    74e2:	70 91 aa 02 	lds	r23, 0x02AA
    74e6:	84 0f       	add	r24, r20
    74e8:	95 1f       	adc	r25, r21
    74ea:	a6 1f       	adc	r26, r22
    74ec:	b7 1f       	adc	r27, r23
    74ee:	80 93 a7 02 	sts	0x02A7, r24
    74f2:	90 93 a8 02 	sts	0x02A8, r25
    74f6:	a0 93 a9 02 	sts	0x02A9, r26
    74fa:	b0 93 aa 02 	sts	0x02AA, r27
    74fe:	80 91 69 02 	lds	r24, 0x0269
    7502:	90 91 6a 02 	lds	r25, 0x026A
    7506:	aa 27       	eor	r26, r26
    7508:	97 fd       	sbrc	r25, 7
    750a:	a0 95       	com	r26
    750c:	ba 2f       	mov	r27, r26
    750e:	40 91 ab 02 	lds	r20, 0x02AB
    7512:	50 91 ac 02 	lds	r21, 0x02AC
    7516:	60 91 ad 02 	lds	r22, 0x02AD
    751a:	70 91 ae 02 	lds	r23, 0x02AE
    751e:	84 0f       	add	r24, r20
    7520:	95 1f       	adc	r25, r21
    7522:	a6 1f       	adc	r26, r22
    7524:	b7 1f       	adc	r27, r23
    7526:	80 93 ab 02 	sts	0x02AB, r24
    752a:	90 93 ac 02 	sts	0x02AC, r25
    752e:	a0 93 ad 02 	sts	0x02AD, r26
    7532:	b0 93 ae 02 	sts	0x02AE, r27
    7536:	80 91 6b 02 	lds	r24, 0x026B
    753a:	90 91 6c 02 	lds	r25, 0x026C
    753e:	aa 27       	eor	r26, r26
    7540:	97 fd       	sbrc	r25, 7
    7542:	a0 95       	com	r26
    7544:	ba 2f       	mov	r27, r26
    7546:	40 91 af 02 	lds	r20, 0x02AF
    754a:	50 91 b0 02 	lds	r21, 0x02B0
    754e:	60 91 b1 02 	lds	r22, 0x02B1
    7552:	70 91 b2 02 	lds	r23, 0x02B2
    7556:	84 0f       	add	r24, r20
    7558:	95 1f       	adc	r25, r21
    755a:	a6 1f       	adc	r26, r22
    755c:	b7 1f       	adc	r27, r23
    755e:	80 93 af 02 	sts	0x02AF, r24
    7562:	90 93 b0 02 	sts	0x02B0, r25
    7566:	a0 93 b1 02 	sts	0x02B1, r26
    756a:	b0 93 b2 02 	sts	0x02B2, r27
    756e:	80 91 6d 02 	lds	r24, 0x026D
    7572:	90 91 6e 02 	lds	r25, 0x026E
    7576:	aa 27       	eor	r26, r26
    7578:	97 fd       	sbrc	r25, 7
    757a:	a0 95       	com	r26
    757c:	ba 2f       	mov	r27, r26
    757e:	40 91 b3 02 	lds	r20, 0x02B3
    7582:	50 91 b4 02 	lds	r21, 0x02B4
    7586:	60 91 b5 02 	lds	r22, 0x02B5
    758a:	70 91 b6 02 	lds	r23, 0x02B6
    758e:	84 0f       	add	r24, r20
    7590:	95 1f       	adc	r25, r21
    7592:	a6 1f       	adc	r26, r22
    7594:	b7 1f       	adc	r27, r23
    7596:	80 93 b3 02 	sts	0x02B3, r24
    759a:	90 93 b4 02 	sts	0x02B4, r25
    759e:	a0 93 b5 02 	sts	0x02B5, r26
    75a2:	b0 93 b6 02 	sts	0x02B6, r27
				}

				accOffsetXSum += accX;
    75a6:	80 91 34 04 	lds	r24, 0x0434
    75aa:	90 91 35 04 	lds	r25, 0x0435
    75ae:	40 91 28 04 	lds	r20, 0x0428
    75b2:	50 91 29 04 	lds	r21, 0x0429
    75b6:	84 0f       	add	r24, r20
    75b8:	95 1f       	adc	r25, r21
    75ba:	90 93 35 04 	sts	0x0435, r25
    75be:	80 93 34 04 	sts	0x0434, r24
				accOffsetYSum += accY;
    75c2:	80 91 36 04 	lds	r24, 0x0436
    75c6:	90 91 37 04 	lds	r25, 0x0437
    75ca:	40 91 2a 04 	lds	r20, 0x042A
    75ce:	50 91 2b 04 	lds	r21, 0x042B
    75d2:	84 0f       	add	r24, r20
    75d4:	95 1f       	adc	r25, r21
    75d6:	90 93 37 04 	sts	0x0437, r25
    75da:	80 93 36 04 	sts	0x0436, r24
				accOffsetZSum += accZ;
    75de:	80 91 38 04 	lds	r24, 0x0438
    75e2:	90 91 39 04 	lds	r25, 0x0439
    75e6:	40 91 2c 04 	lds	r20, 0x042C
    75ea:	50 91 2d 04 	lds	r21, 0x042D
    75ee:	84 0f       	add	r24, r20
    75f0:	95 1f       	adc	r25, r21
    75f2:	90 93 39 04 	sts	0x0439, r25
    75f6:	80 93 38 04 	sts	0x0438, r24

				calibrationCycle++;
    75fa:	2f 5f       	subi	r18, 0xFF	; 255
    75fc:	3f 4f       	sbci	r19, 0xFF	; 255
    75fe:	30 93 4a 04 	sts	0x044A, r19
    7602:	20 93 49 04 	sts	0x0449, r18
    7606:	80 91 84 05 	lds	r24, 0x0584
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    760a:	88 23       	and	r24, r24
    760c:	09 f0       	breq	.+2      	; 0x7610 <calibrateSensors+0x5d6>
    760e:	31 cd       	rjmp	.-1438   	; 0x7072 <calibrateSensors+0x38>
    7610:	5b ce       	rjmp	.-842    	; 0x72c8 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7612:	10 92 87 02 	sts	0x0287, r1
    7616:	10 92 88 02 	sts	0x0288, r1
    761a:	10 92 89 02 	sts	0x0289, r1
    761e:	10 92 8a 02 	sts	0x028A, r1
						proximityOffset[i] = 0;
    7622:	10 92 70 02 	sts	0x0270, r1
    7626:	10 92 6f 02 	sts	0x026F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    762a:	10 92 8b 02 	sts	0x028B, r1
    762e:	10 92 8c 02 	sts	0x028C, r1
    7632:	10 92 8d 02 	sts	0x028D, r1
    7636:	10 92 8e 02 	sts	0x028E, r1
						proximityOffset[i] = 0;
    763a:	10 92 72 02 	sts	0x0272, r1
    763e:	10 92 71 02 	sts	0x0271, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7642:	10 92 8f 02 	sts	0x028F, r1
    7646:	10 92 90 02 	sts	0x0290, r1
    764a:	10 92 91 02 	sts	0x0291, r1
    764e:	10 92 92 02 	sts	0x0292, r1
						proximityOffset[i] = 0;
    7652:	10 92 74 02 	sts	0x0274, r1
    7656:	10 92 73 02 	sts	0x0273, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    765a:	10 92 93 02 	sts	0x0293, r1
    765e:	10 92 94 02 	sts	0x0294, r1
    7662:	10 92 95 02 	sts	0x0295, r1
    7666:	10 92 96 02 	sts	0x0296, r1
						proximityOffset[i] = 0;
    766a:	10 92 76 02 	sts	0x0276, r1
    766e:	10 92 75 02 	sts	0x0275, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7672:	10 92 97 02 	sts	0x0297, r1
    7676:	10 92 98 02 	sts	0x0298, r1
    767a:	10 92 99 02 	sts	0x0299, r1
    767e:	10 92 9a 02 	sts	0x029A, r1
						proximityOffset[i] = 0;
    7682:	10 92 78 02 	sts	0x0278, r1
    7686:	10 92 77 02 	sts	0x0277, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    768a:	10 92 9b 02 	sts	0x029B, r1
    768e:	10 92 9c 02 	sts	0x029C, r1
    7692:	10 92 9d 02 	sts	0x029D, r1
    7696:	10 92 9e 02 	sts	0x029E, r1
						proximityOffset[i] = 0;
    769a:	10 92 7a 02 	sts	0x027A, r1
    769e:	10 92 79 02 	sts	0x0279, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    76a2:	10 92 9f 02 	sts	0x029F, r1
    76a6:	10 92 a0 02 	sts	0x02A0, r1
    76aa:	10 92 a1 02 	sts	0x02A1, r1
    76ae:	10 92 a2 02 	sts	0x02A2, r1
						proximityOffset[i] = 0;
    76b2:	10 92 7c 02 	sts	0x027C, r1
    76b6:	10 92 7b 02 	sts	0x027B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    76ba:	10 92 a3 02 	sts	0x02A3, r1
    76be:	10 92 a4 02 	sts	0x02A4, r1
    76c2:	10 92 a5 02 	sts	0x02A5, r1
    76c6:	10 92 a6 02 	sts	0x02A6, r1
						proximityOffset[i] = 0;
    76ca:	10 92 7e 02 	sts	0x027E, r1
    76ce:	10 92 7d 02 	sts	0x027D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    76d2:	10 92 a7 02 	sts	0x02A7, r1
    76d6:	10 92 a8 02 	sts	0x02A8, r1
    76da:	10 92 a9 02 	sts	0x02A9, r1
    76de:	10 92 aa 02 	sts	0x02AA, r1
						proximityOffset[i] = 0;
    76e2:	10 92 80 02 	sts	0x0280, r1
    76e6:	10 92 7f 02 	sts	0x027F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    76ea:	10 92 ab 02 	sts	0x02AB, r1
    76ee:	10 92 ac 02 	sts	0x02AC, r1
    76f2:	10 92 ad 02 	sts	0x02AD, r1
    76f6:	10 92 ae 02 	sts	0x02AE, r1
						proximityOffset[i] = 0;
    76fa:	10 92 82 02 	sts	0x0282, r1
    76fe:	10 92 81 02 	sts	0x0281, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7702:	10 92 af 02 	sts	0x02AF, r1
    7706:	10 92 b0 02 	sts	0x02B0, r1
    770a:	10 92 b1 02 	sts	0x02B1, r1
    770e:	10 92 b2 02 	sts	0x02B2, r1
						proximityOffset[i] = 0;
    7712:	10 92 84 02 	sts	0x0284, r1
    7716:	10 92 83 02 	sts	0x0283, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    771a:	10 92 b3 02 	sts	0x02B3, r1
    771e:	10 92 b4 02 	sts	0x02B4, r1
    7722:	10 92 b5 02 	sts	0x02B5, r1
    7726:	10 92 b6 02 	sts	0x02B6, r1
						proximityOffset[i] = 0;
    772a:	10 92 86 02 	sts	0x0286, r1
    772e:	10 92 85 02 	sts	0x0285, r1
					}
					accOffsetXSum = 0;
    7732:	10 92 35 04 	sts	0x0435, r1
    7736:	10 92 34 04 	sts	0x0434, r1
					accOffsetYSum = 0;
    773a:	10 92 37 04 	sts	0x0437, r1
    773e:	10 92 36 04 	sts	0x0436, r1
					accOffsetZSum = 0;
    7742:	10 92 39 04 	sts	0x0439, r1
    7746:	10 92 38 04 	sts	0x0438, r1

					calibrationCycle++;
    774a:	d0 93 4a 04 	sts	0x044A, r29
    774e:	c0 93 49 04 	sts	0x0449, r28
    7752:	80 91 84 05 	lds	r24, 0x0584

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    7756:	59 cf       	rjmp	.-334    	; 0x760a <calibrateSensors+0x5d0>

00007758 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    7758:	80 91 27 04 	lds	r24, 0x0427
    775c:	88 23       	and	r24, r24
    775e:	79 f0       	breq	.+30     	; 0x777e <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    7760:	81 30       	cpi	r24, 0x01	; 1
    7762:	11 f1       	breq	.+68     	; 0x77a8 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    7764:	10 92 29 04 	sts	0x0429, r1
    7768:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    776c:	10 92 2b 04 	sts	0x042B, r1
    7770:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    7774:	10 92 2d 04 	sts	0x042D, r1
    7778:	10 92 2c 04 	sts	0x042C, r1
    777c:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    777e:	80 91 14 02 	lds	r24, 0x0214
    7782:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7786:	80 e0       	ldi	r24, 0x00	; 0
    7788:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    778c:	80 91 14 02 	lds	r24, 0x0214
    7790:	8f 5f       	subi	r24, 0xFF	; 255
    7792:	0e 94 10 1a 	call	0x3420	; 0x3420 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7796:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    779a:	80 93 3e 04 	sts	0x043E, r24
    779e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    77a2:	80 93 3f 04 	sts	0x043F, r24
    77a6:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    77a8:	80 91 14 02 	lds	r24, 0x0214
    77ac:	0e 94 c3 19 	call	0x3386	; 0x3386 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    77b0:	82 e3       	ldi	r24, 0x32	; 50
    77b2:	0e 94 3e 1a 	call	0x347c	; 0x347c <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    77b6:	80 91 14 02 	lds	r24, 0x0214
    77ba:	8f 5f       	subi	r24, 0xFF	; 255
    77bc:	0e 94 10 1a 	call	0x3420	; 0x3420 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    77c0:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    77c4:	80 93 3e 04 	sts	0x043E, r24
    77c8:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    77cc:	80 93 3f 04 	sts	0x043F, r24
    77d0:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    77d4:	80 93 40 04 	sts	0x0440, r24
    77d8:	08 95       	ret

000077da <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    77da:	80 91 27 04 	lds	r24, 0x0427
    77de:	88 23       	and	r24, r24
    77e0:	09 f0       	breq	.+2      	; 0x77e4 <readAccelXYZ_2+0xa>
    77e2:	4e c0       	rjmp	.+156    	; 0x7880 <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    77e4:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    77e8:	80 93 40 04 	sts	0x0440, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    77ec:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    77f0:	80 93 41 04 	sts	0x0441, r24
    77f4:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <i2c_readAck>
    77f8:	80 93 42 04 	sts	0x0442, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    77fc:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <i2c_readNak>
    7800:	80 93 43 04 	sts	0x0443, r24
		i2c_stop();													// set stop conditon = release bus
    7804:	0e 94 36 1a 	call	0x346c	; 0x346c <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7808:	80 91 84 05 	lds	r24, 0x0584
    780c:	88 23       	and	r24, r24
    780e:	09 f4       	brne	.+2      	; 0x7812 <readAccelXYZ_2+0x38>
    7810:	47 c0       	rjmp	.+142    	; 0x78a0 <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    7812:	80 91 3f 04 	lds	r24, 0x043F
    7816:	99 27       	eor	r25, r25
    7818:	87 fd       	sbrc	r24, 7
    781a:	90 95       	com	r25
    781c:	98 2f       	mov	r25, r24
    781e:	88 27       	eor	r24, r24
    7820:	20 91 3e 04 	lds	r18, 0x043E
    7824:	33 27       	eor	r19, r19
    7826:	27 fd       	sbrc	r18, 7
    7828:	30 95       	com	r19
    782a:	82 2b       	or	r24, r18
    782c:	93 2b       	or	r25, r19
    782e:	90 93 29 04 	sts	0x0429, r25
    7832:	80 93 28 04 	sts	0x0428, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    7836:	80 91 41 04 	lds	r24, 0x0441
    783a:	99 27       	eor	r25, r25
    783c:	87 fd       	sbrc	r24, 7
    783e:	90 95       	com	r25
    7840:	98 2f       	mov	r25, r24
    7842:	88 27       	eor	r24, r24
    7844:	20 91 40 04 	lds	r18, 0x0440
    7848:	33 27       	eor	r19, r19
    784a:	27 fd       	sbrc	r18, 7
    784c:	30 95       	com	r19
    784e:	82 2b       	or	r24, r18
    7850:	93 2b       	or	r25, r19
    7852:	90 93 2b 04 	sts	0x042B, r25
    7856:	80 93 2a 04 	sts	0x042A, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    785a:	80 91 43 04 	lds	r24, 0x0443
    785e:	99 27       	eor	r25, r25
    7860:	87 fd       	sbrc	r24, 7
    7862:	90 95       	com	r25
    7864:	98 2f       	mov	r25, r24
    7866:	88 27       	eor	r24, r24
    7868:	20 91 42 04 	lds	r18, 0x0442
    786c:	33 27       	eor	r19, r19
    786e:	27 fd       	sbrc	r18, 7
    7870:	30 95       	com	r19
    7872:	82 2b       	or	r24, r18
    7874:	93 2b       	or	r25, r19
    7876:	90 93 2d 04 	sts	0x042D, r25
    787a:	80 93 2c 04 	sts	0x042C, r24
    787e:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    7880:	81 30       	cpi	r24, 0x01	; 1
    7882:	09 f4       	brne	.+2      	; 0x7886 <readAccelXYZ_2+0xac>
    7884:	b3 cf       	rjmp	.-154    	; 0x77ec <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    7886:	10 92 29 04 	sts	0x0429, r1
    788a:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    788e:	10 92 2b 04 	sts	0x042B, r1
    7892:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    7896:	10 92 2d 04 	sts	0x042D, r1
    789a:	10 92 2c 04 	sts	0x042C, r1
    789e:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    78a0:	80 91 3f 04 	lds	r24, 0x043F
    78a4:	99 27       	eor	r25, r25
    78a6:	87 fd       	sbrc	r24, 7
    78a8:	90 95       	com	r25
    78aa:	98 2f       	mov	r25, r24
    78ac:	88 27       	eor	r24, r24
    78ae:	20 91 3e 04 	lds	r18, 0x043E
    78b2:	33 27       	eor	r19, r19
    78b4:	27 fd       	sbrc	r18, 7
    78b6:	30 95       	com	r19
    78b8:	82 2b       	or	r24, r18
    78ba:	93 2b       	or	r25, r19
    78bc:	20 91 2e 04 	lds	r18, 0x042E
    78c0:	30 91 2f 04 	lds	r19, 0x042F
    78c4:	82 1b       	sub	r24, r18
    78c6:	93 0b       	sbc	r25, r19
    78c8:	90 93 29 04 	sts	0x0429, r25
    78cc:	80 93 28 04 	sts	0x0428, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    78d0:	80 91 41 04 	lds	r24, 0x0441
    78d4:	99 27       	eor	r25, r25
    78d6:	87 fd       	sbrc	r24, 7
    78d8:	90 95       	com	r25
    78da:	98 2f       	mov	r25, r24
    78dc:	88 27       	eor	r24, r24
    78de:	20 91 40 04 	lds	r18, 0x0440
    78e2:	33 27       	eor	r19, r19
    78e4:	27 fd       	sbrc	r18, 7
    78e6:	30 95       	com	r19
    78e8:	82 2b       	or	r24, r18
    78ea:	93 2b       	or	r25, r19
    78ec:	20 91 30 04 	lds	r18, 0x0430
    78f0:	30 91 31 04 	lds	r19, 0x0431
    78f4:	82 1b       	sub	r24, r18
    78f6:	93 0b       	sbc	r25, r19
    78f8:	90 93 2b 04 	sts	0x042B, r25
    78fc:	80 93 2a 04 	sts	0x042A, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    7900:	80 91 43 04 	lds	r24, 0x0443
    7904:	99 27       	eor	r25, r25
    7906:	87 fd       	sbrc	r24, 7
    7908:	90 95       	com	r25
    790a:	98 2f       	mov	r25, r24
    790c:	88 27       	eor	r24, r24
    790e:	20 91 42 04 	lds	r18, 0x0442
    7912:	33 27       	eor	r19, r19
    7914:	27 fd       	sbrc	r18, 7
    7916:	30 95       	com	r19
    7918:	82 2b       	or	r24, r18
    791a:	93 2b       	or	r25, r19
    791c:	20 91 32 04 	lds	r18, 0x0432
    7920:	30 91 33 04 	lds	r19, 0x0433
    7924:	82 1b       	sub	r24, r18
    7926:	93 0b       	sbc	r25, r19
    7928:	90 93 2d 04 	sts	0x042D, r25
    792c:	80 93 2c 04 	sts	0x042C, r24
    7930:	08 95       	ret

00007932 <computeAngle>:

	}

}

void computeAngle() {
    7932:	ef 92       	push	r14
    7934:	ff 92       	push	r15
    7936:	0f 93       	push	r16
    7938:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    793a:	80 91 2c 04 	lds	r24, 0x042C
    793e:	90 91 2d 04 	lds	r25, 0x042D
    7942:	97 fd       	sbrc	r25, 7
    7944:	6c c0       	rjmp	.+216    	; 0x7a1e <computeAngle+0xec>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    7946:	85 31       	cpi	r24, 0x15	; 21
    7948:	91 05       	cpc	r25, r1
    794a:	08 f0       	brcs	.+2      	; 0x794e <computeAngle+0x1c>
    794c:	54 c0       	rjmp	.+168    	; 0x79f6 <computeAngle+0xc4>
		currPosition = HORIZONTAL_POS;
    794e:	81 e0       	ldi	r24, 0x01	; 1
    7950:	80 93 15 02 	sts	0x0215, r24
    7954:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    7956:	80 91 16 02 	lds	r24, 0x0216
    795a:	82 17       	cp	r24, r18
    795c:	09 f4       	brne	.+2      	; 0x7960 <computeAngle+0x2e>
    795e:	53 c0       	rjmp	.+166    	; 0x7a06 <computeAngle+0xd4>
		timesInSamePos++;
    7960:	80 91 3c 04 	lds	r24, 0x043C
    7964:	90 91 3d 04 	lds	r25, 0x043D
    7968:	01 96       	adiw	r24, 0x01	; 1
    796a:	90 93 3d 04 	sts	0x043D, r25
    796e:	80 93 3c 04 	sts	0x043C, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    7972:	88 3c       	cpi	r24, 0xC8	; 200
    7974:	91 05       	cpc	r25, r1
    7976:	08 f0       	brcs	.+2      	; 0x797a <computeAngle+0x48>
    7978:	4b c0       	rjmp	.+150    	; 0x7a10 <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    797a:	60 91 28 04 	lds	r22, 0x0428
    797e:	70 91 29 04 	lds	r23, 0x0429
    7982:	88 27       	eor	r24, r24
    7984:	77 fd       	sbrc	r23, 7
    7986:	80 95       	com	r24
    7988:	98 2f       	mov	r25, r24
    798a:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    798e:	7b 01       	movw	r14, r22
    7990:	8c 01       	movw	r16, r24
    7992:	60 91 2a 04 	lds	r22, 0x042A
    7996:	70 91 2b 04 	lds	r23, 0x042B
    799a:	88 27       	eor	r24, r24
    799c:	77 fd       	sbrc	r23, 7
    799e:	80 95       	com	r24
    79a0:	98 2f       	mov	r25, r24
    79a2:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <__floatsisf>
    79a6:	9b 01       	movw	r18, r22
    79a8:	ac 01       	movw	r20, r24
    79aa:	c8 01       	movw	r24, r16
    79ac:	b7 01       	movw	r22, r14
    79ae:	0e 94 9f 3d 	call	0x7b3e	; 0x7b3e <atan2>
    79b2:	60 93 99 04 	sts	0x0499, r22
    79b6:	70 93 9a 04 	sts	0x049A, r23
    79ba:	80 93 9b 04 	sts	0x049B, r24
    79be:	90 93 9c 04 	sts	0x049C, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    79c2:	21 ee       	ldi	r18, 0xE1	; 225
    79c4:	3e e2       	ldi	r19, 0x2E	; 46
    79c6:	45 e6       	ldi	r20, 0x65	; 101
    79c8:	52 e4       	ldi	r21, 0x42	; 66
    79ca:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <__mulsf3>
    79ce:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__fixsfsi>
    79d2:	9b 01       	movw	r18, r22
    79d4:	70 93 3b 04 	sts	0x043B, r23
    79d8:	60 93 3a 04 	sts	0x043A, r22

	if(currentAngle < 0) {
    79dc:	77 ff       	sbrs	r23, 7
    79de:	06 c0       	rjmp	.+12     	; 0x79ec <computeAngle+0xba>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    79e0:	28 59       	subi	r18, 0x98	; 152
    79e2:	3e 4f       	sbci	r19, 0xFE	; 254
    79e4:	30 93 3b 04 	sts	0x043B, r19
    79e8:	20 93 3a 04 	sts	0x043A, r18
	}

}
    79ec:	1f 91       	pop	r17
    79ee:	0f 91       	pop	r16
    79f0:	ff 90       	pop	r15
    79f2:	ef 90       	pop	r14
    79f4:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    79f6:	10 92 15 02 	sts	0x0215, r1
    79fa:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    79fc:	80 91 16 02 	lds	r24, 0x0216
    7a00:	82 17       	cp	r24, r18
    7a02:	09 f0       	breq	.+2      	; 0x7a06 <computeAngle+0xd4>
    7a04:	ad cf       	rjmp	.-166    	; 0x7960 <computeAngle+0x2e>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    7a06:	10 92 3d 04 	sts	0x043D, r1
    7a0a:	10 92 3c 04 	sts	0x043C, r1
    7a0e:	b5 cf       	rjmp	.-150    	; 0x797a <computeAngle+0x48>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    7a10:	10 92 3d 04 	sts	0x043D, r1
    7a14:	10 92 3c 04 	sts	0x043C, r1
			robotPosition = currPosition;
    7a18:	20 93 16 02 	sts	0x0216, r18
    7a1c:	ae cf       	rjmp	.-164    	; 0x797a <computeAngle+0x48>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    7a1e:	90 95       	com	r25
    7a20:	81 95       	neg	r24
    7a22:	9f 4f       	sbci	r25, 0xFF	; 255
    7a24:	90 cf       	rjmp	.-224    	; 0x7946 <computeAngle+0x14>

00007a26 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7a26:	86 ed       	ldi	r24, 0xD6	; 214
    7a28:	94 e0       	ldi	r25, 0x04	; 4
    7a2a:	6c e6       	ldi	r22, 0x6C	; 108
    7a2c:	7f e0       	ldi	r23, 0x0F	; 15
    7a2e:	40 e9       	ldi	r20, 0x90	; 144
    7a30:	50 e0       	ldi	r21, 0x00	; 0
    7a32:	0e 94 33 41 	call	0x8266	; 0x8266 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    7a36:	8a e6       	ldi	r24, 0x6A	; 106
    7a38:	9f e0       	ldi	r25, 0x0F	; 15
    7a3a:	65 e5       	ldi	r22, 0x55	; 85
    7a3c:	7a ea       	ldi	r23, 0xAA	; 170
    7a3e:	0e 94 55 41 	call	0x82aa	; 0x82aa <__eeupd_word_m2560>
}
    7a42:	08 95       	ret

00007a44 <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7a44:	86 ed       	ldi	r24, 0xD6	; 214
    7a46:	94 e0       	ldi	r25, 0x04	; 4
    7a48:	6c e6       	ldi	r22, 0x6C	; 108
    7a4a:	7f e0       	ldi	r23, 0x0F	; 15
    7a4c:	40 e9       	ldi	r20, 0x90	; 144
    7a4e:	50 e0       	ldi	r21, 0x00	; 0
    7a50:	0e 94 15 41 	call	0x822a	; 0x822a <__eerd_block_m2560>
}
    7a54:	08 95       	ret

00007a56 <__subsf3>:
    7a56:	50 58       	subi	r21, 0x80	; 128

00007a58 <__addsf3>:
    7a58:	bb 27       	eor	r27, r27
    7a5a:	aa 27       	eor	r26, r26
    7a5c:	0e d0       	rcall	.+28     	; 0x7a7a <__addsf3x>
    7a5e:	27 c2       	rjmp	.+1102   	; 0x7eae <__fp_round>
    7a60:	f0 d1       	rcall	.+992    	; 0x7e42 <__fp_pscA>
    7a62:	30 f0       	brcs	.+12     	; 0x7a70 <__addsf3+0x18>
    7a64:	f5 d1       	rcall	.+1002   	; 0x7e50 <__fp_pscB>
    7a66:	20 f0       	brcs	.+8      	; 0x7a70 <__addsf3+0x18>
    7a68:	31 f4       	brne	.+12     	; 0x7a76 <__addsf3+0x1e>
    7a6a:	9f 3f       	cpi	r25, 0xFF	; 255
    7a6c:	11 f4       	brne	.+4      	; 0x7a72 <__addsf3+0x1a>
    7a6e:	1e f4       	brtc	.+6      	; 0x7a76 <__addsf3+0x1e>
    7a70:	c0 c1       	rjmp	.+896    	; 0x7df2 <__fp_nan>
    7a72:	0e f4       	brtc	.+2      	; 0x7a76 <__addsf3+0x1e>
    7a74:	e0 95       	com	r30
    7a76:	e7 fb       	bst	r30, 7
    7a78:	b6 c1       	rjmp	.+876    	; 0x7de6 <__fp_inf>

00007a7a <__addsf3x>:
    7a7a:	e9 2f       	mov	r30, r25
    7a7c:	3a d2       	rcall	.+1140   	; 0x7ef2 <__fp_split3>
    7a7e:	80 f3       	brcs	.-32     	; 0x7a60 <__addsf3+0x8>
    7a80:	ba 17       	cp	r27, r26
    7a82:	62 07       	cpc	r22, r18
    7a84:	73 07       	cpc	r23, r19
    7a86:	84 07       	cpc	r24, r20
    7a88:	95 07       	cpc	r25, r21
    7a8a:	18 f0       	brcs	.+6      	; 0x7a92 <__addsf3x+0x18>
    7a8c:	71 f4       	brne	.+28     	; 0x7aaa <__addsf3x+0x30>
    7a8e:	9e f5       	brtc	.+102    	; 0x7af6 <__addsf3x+0x7c>
    7a90:	52 c2       	rjmp	.+1188   	; 0x7f36 <__fp_zero>
    7a92:	0e f4       	brtc	.+2      	; 0x7a96 <__addsf3x+0x1c>
    7a94:	e0 95       	com	r30
    7a96:	0b 2e       	mov	r0, r27
    7a98:	ba 2f       	mov	r27, r26
    7a9a:	a0 2d       	mov	r26, r0
    7a9c:	0b 01       	movw	r0, r22
    7a9e:	b9 01       	movw	r22, r18
    7aa0:	90 01       	movw	r18, r0
    7aa2:	0c 01       	movw	r0, r24
    7aa4:	ca 01       	movw	r24, r20
    7aa6:	a0 01       	movw	r20, r0
    7aa8:	11 24       	eor	r1, r1
    7aaa:	ff 27       	eor	r31, r31
    7aac:	59 1b       	sub	r21, r25
    7aae:	99 f0       	breq	.+38     	; 0x7ad6 <__addsf3x+0x5c>
    7ab0:	59 3f       	cpi	r21, 0xF9	; 249
    7ab2:	50 f4       	brcc	.+20     	; 0x7ac8 <__addsf3x+0x4e>
    7ab4:	50 3e       	cpi	r21, 0xE0	; 224
    7ab6:	68 f1       	brcs	.+90     	; 0x7b12 <__addsf3x+0x98>
    7ab8:	1a 16       	cp	r1, r26
    7aba:	f0 40       	sbci	r31, 0x00	; 0
    7abc:	a2 2f       	mov	r26, r18
    7abe:	23 2f       	mov	r18, r19
    7ac0:	34 2f       	mov	r19, r20
    7ac2:	44 27       	eor	r20, r20
    7ac4:	58 5f       	subi	r21, 0xF8	; 248
    7ac6:	f3 cf       	rjmp	.-26     	; 0x7aae <__addsf3x+0x34>
    7ac8:	46 95       	lsr	r20
    7aca:	37 95       	ror	r19
    7acc:	27 95       	ror	r18
    7ace:	a7 95       	ror	r26
    7ad0:	f0 40       	sbci	r31, 0x00	; 0
    7ad2:	53 95       	inc	r21
    7ad4:	c9 f7       	brne	.-14     	; 0x7ac8 <__addsf3x+0x4e>
    7ad6:	7e f4       	brtc	.+30     	; 0x7af6 <__addsf3x+0x7c>
    7ad8:	1f 16       	cp	r1, r31
    7ada:	ba 0b       	sbc	r27, r26
    7adc:	62 0b       	sbc	r22, r18
    7ade:	73 0b       	sbc	r23, r19
    7ae0:	84 0b       	sbc	r24, r20
    7ae2:	ba f0       	brmi	.+46     	; 0x7b12 <__addsf3x+0x98>
    7ae4:	91 50       	subi	r25, 0x01	; 1
    7ae6:	a1 f0       	breq	.+40     	; 0x7b10 <__addsf3x+0x96>
    7ae8:	ff 0f       	add	r31, r31
    7aea:	bb 1f       	adc	r27, r27
    7aec:	66 1f       	adc	r22, r22
    7aee:	77 1f       	adc	r23, r23
    7af0:	88 1f       	adc	r24, r24
    7af2:	c2 f7       	brpl	.-16     	; 0x7ae4 <__addsf3x+0x6a>
    7af4:	0e c0       	rjmp	.+28     	; 0x7b12 <__addsf3x+0x98>
    7af6:	ba 0f       	add	r27, r26
    7af8:	62 1f       	adc	r22, r18
    7afa:	73 1f       	adc	r23, r19
    7afc:	84 1f       	adc	r24, r20
    7afe:	48 f4       	brcc	.+18     	; 0x7b12 <__addsf3x+0x98>
    7b00:	87 95       	ror	r24
    7b02:	77 95       	ror	r23
    7b04:	67 95       	ror	r22
    7b06:	b7 95       	ror	r27
    7b08:	f7 95       	ror	r31
    7b0a:	9e 3f       	cpi	r25, 0xFE	; 254
    7b0c:	08 f0       	brcs	.+2      	; 0x7b10 <__addsf3x+0x96>
    7b0e:	b3 cf       	rjmp	.-154    	; 0x7a76 <__addsf3+0x1e>
    7b10:	93 95       	inc	r25
    7b12:	88 0f       	add	r24, r24
    7b14:	08 f0       	brcs	.+2      	; 0x7b18 <__addsf3x+0x9e>
    7b16:	99 27       	eor	r25, r25
    7b18:	ee 0f       	add	r30, r30
    7b1a:	97 95       	ror	r25
    7b1c:	87 95       	ror	r24
    7b1e:	08 95       	ret
    7b20:	90 d1       	rcall	.+800    	; 0x7e42 <__fp_pscA>
    7b22:	58 f0       	brcs	.+22     	; 0x7b3a <__addsf3x+0xc0>
    7b24:	80 e8       	ldi	r24, 0x80	; 128
    7b26:	91 e0       	ldi	r25, 0x01	; 1
    7b28:	09 f4       	brne	.+2      	; 0x7b2c <__addsf3x+0xb2>
    7b2a:	9e ef       	ldi	r25, 0xFE	; 254
    7b2c:	91 d1       	rcall	.+802    	; 0x7e50 <__fp_pscB>
    7b2e:	28 f0       	brcs	.+10     	; 0x7b3a <__addsf3x+0xc0>
    7b30:	40 e8       	ldi	r20, 0x80	; 128
    7b32:	51 e0       	ldi	r21, 0x01	; 1
    7b34:	59 f4       	brne	.+22     	; 0x7b4c <atan2+0xe>
    7b36:	5e ef       	ldi	r21, 0xFE	; 254
    7b38:	09 c0       	rjmp	.+18     	; 0x7b4c <atan2+0xe>
    7b3a:	5b c1       	rjmp	.+694    	; 0x7df2 <__fp_nan>
    7b3c:	fc c1       	rjmp	.+1016   	; 0x7f36 <__fp_zero>

00007b3e <atan2>:
    7b3e:	e9 2f       	mov	r30, r25
    7b40:	e0 78       	andi	r30, 0x80	; 128
    7b42:	d7 d1       	rcall	.+942    	; 0x7ef2 <__fp_split3>
    7b44:	68 f3       	brcs	.-38     	; 0x7b20 <__addsf3x+0xa6>
    7b46:	09 2e       	mov	r0, r25
    7b48:	05 2a       	or	r0, r21
    7b4a:	c1 f3       	breq	.-16     	; 0x7b3c <__addsf3x+0xc2>
    7b4c:	26 17       	cp	r18, r22
    7b4e:	37 07       	cpc	r19, r23
    7b50:	48 07       	cpc	r20, r24
    7b52:	59 07       	cpc	r21, r25
    7b54:	38 f0       	brcs	.+14     	; 0x7b64 <atan2+0x26>
    7b56:	0e 2e       	mov	r0, r30
    7b58:	07 f8       	bld	r0, 7
    7b5a:	e0 25       	eor	r30, r0
    7b5c:	69 f0       	breq	.+26     	; 0x7b78 <atan2+0x3a>
    7b5e:	e0 25       	eor	r30, r0
    7b60:	e0 64       	ori	r30, 0x40	; 64
    7b62:	0a c0       	rjmp	.+20     	; 0x7b78 <atan2+0x3a>
    7b64:	ef 63       	ori	r30, 0x3F	; 63
    7b66:	07 f8       	bld	r0, 7
    7b68:	00 94       	com	r0
    7b6a:	07 fa       	bst	r0, 7
    7b6c:	db 01       	movw	r26, r22
    7b6e:	b9 01       	movw	r22, r18
    7b70:	9d 01       	movw	r18, r26
    7b72:	dc 01       	movw	r26, r24
    7b74:	ca 01       	movw	r24, r20
    7b76:	ad 01       	movw	r20, r26
    7b78:	ef 93       	push	r30
    7b7a:	4a d0       	rcall	.+148    	; 0x7c10 <__divsf3_pse>
    7b7c:	98 d1       	rcall	.+816    	; 0x7eae <__fp_round>
    7b7e:	0a d0       	rcall	.+20     	; 0x7b94 <atan>
    7b80:	5f 91       	pop	r21
    7b82:	55 23       	and	r21, r21
    7b84:	31 f0       	breq	.+12     	; 0x7b92 <atan2+0x54>
    7b86:	2b ed       	ldi	r18, 0xDB	; 219
    7b88:	3f e0       	ldi	r19, 0x0F	; 15
    7b8a:	49 e4       	ldi	r20, 0x49	; 73
    7b8c:	50 fd       	sbrc	r21, 0
    7b8e:	49 ec       	ldi	r20, 0xC9	; 201
    7b90:	63 cf       	rjmp	.-314    	; 0x7a58 <__addsf3>
    7b92:	08 95       	ret

00007b94 <atan>:
    7b94:	df 93       	push	r29
    7b96:	dd 27       	eor	r29, r29
    7b98:	b9 2f       	mov	r27, r25
    7b9a:	bf 77       	andi	r27, 0x7F	; 127
    7b9c:	40 e8       	ldi	r20, 0x80	; 128
    7b9e:	5f e3       	ldi	r21, 0x3F	; 63
    7ba0:	16 16       	cp	r1, r22
    7ba2:	17 06       	cpc	r1, r23
    7ba4:	48 07       	cpc	r20, r24
    7ba6:	5b 07       	cpc	r21, r27
    7ba8:	10 f4       	brcc	.+4      	; 0x7bae <atan+0x1a>
    7baa:	d9 2f       	mov	r29, r25
    7bac:	cb d1       	rcall	.+918    	; 0x7f44 <inverse>
    7bae:	9f 93       	push	r25
    7bb0:	8f 93       	push	r24
    7bb2:	7f 93       	push	r23
    7bb4:	6f 93       	push	r22
    7bb6:	36 d2       	rcall	.+1132   	; 0x8024 <square>
    7bb8:	ee e4       	ldi	r30, 0x4E	; 78
    7bba:	f1 e0       	ldi	r31, 0x01	; 1
    7bbc:	1d d1       	rcall	.+570    	; 0x7df8 <__fp_powser>
    7bbe:	77 d1       	rcall	.+750    	; 0x7eae <__fp_round>
    7bc0:	2f 91       	pop	r18
    7bc2:	3f 91       	pop	r19
    7bc4:	4f 91       	pop	r20
    7bc6:	5f 91       	pop	r21
    7bc8:	d0 d1       	rcall	.+928    	; 0x7f6a <__mulsf3x>
    7bca:	dd 23       	and	r29, r29
    7bcc:	49 f0       	breq	.+18     	; 0x7be0 <atan+0x4c>
    7bce:	90 58       	subi	r25, 0x80	; 128
    7bd0:	a2 ea       	ldi	r26, 0xA2	; 162
    7bd2:	2a ed       	ldi	r18, 0xDA	; 218
    7bd4:	3f e0       	ldi	r19, 0x0F	; 15
    7bd6:	49 ec       	ldi	r20, 0xC9	; 201
    7bd8:	5f e3       	ldi	r21, 0x3F	; 63
    7bda:	d0 78       	andi	r29, 0x80	; 128
    7bdc:	5d 27       	eor	r21, r29
    7bde:	4d df       	rcall	.-358    	; 0x7a7a <__addsf3x>
    7be0:	df 91       	pop	r29
    7be2:	65 c1       	rjmp	.+714    	; 0x7eae <__fp_round>

00007be4 <__cmpsf2>:
    7be4:	dc d0       	rcall	.+440    	; 0x7d9e <__fp_cmp>
    7be6:	08 f4       	brcc	.+2      	; 0x7bea <__cmpsf2+0x6>
    7be8:	81 e0       	ldi	r24, 0x01	; 1
    7bea:	08 95       	ret

00007bec <cos>:
    7bec:	39 d1       	rcall	.+626    	; 0x7e60 <__fp_rempio2>
    7bee:	e3 95       	inc	r30
    7bf0:	6f c1       	rjmp	.+734    	; 0x7ed0 <__fp_sinus>

00007bf2 <__divsf3>:
    7bf2:	0c d0       	rcall	.+24     	; 0x7c0c <__divsf3x>
    7bf4:	5c c1       	rjmp	.+696    	; 0x7eae <__fp_round>
    7bf6:	2c d1       	rcall	.+600    	; 0x7e50 <__fp_pscB>
    7bf8:	40 f0       	brcs	.+16     	; 0x7c0a <__divsf3+0x18>
    7bfa:	23 d1       	rcall	.+582    	; 0x7e42 <__fp_pscA>
    7bfc:	30 f0       	brcs	.+12     	; 0x7c0a <__divsf3+0x18>
    7bfe:	21 f4       	brne	.+8      	; 0x7c08 <__divsf3+0x16>
    7c00:	5f 3f       	cpi	r21, 0xFF	; 255
    7c02:	19 f0       	breq	.+6      	; 0x7c0a <__divsf3+0x18>
    7c04:	f0 c0       	rjmp	.+480    	; 0x7de6 <__fp_inf>
    7c06:	51 11       	cpse	r21, r1
    7c08:	97 c1       	rjmp	.+814    	; 0x7f38 <__fp_szero>
    7c0a:	f3 c0       	rjmp	.+486    	; 0x7df2 <__fp_nan>

00007c0c <__divsf3x>:
    7c0c:	72 d1       	rcall	.+740    	; 0x7ef2 <__fp_split3>
    7c0e:	98 f3       	brcs	.-26     	; 0x7bf6 <__divsf3+0x4>

00007c10 <__divsf3_pse>:
    7c10:	99 23       	and	r25, r25
    7c12:	c9 f3       	breq	.-14     	; 0x7c06 <__divsf3+0x14>
    7c14:	55 23       	and	r21, r21
    7c16:	b1 f3       	breq	.-20     	; 0x7c04 <__divsf3+0x12>
    7c18:	95 1b       	sub	r25, r21
    7c1a:	55 0b       	sbc	r21, r21
    7c1c:	bb 27       	eor	r27, r27
    7c1e:	aa 27       	eor	r26, r26
    7c20:	62 17       	cp	r22, r18
    7c22:	73 07       	cpc	r23, r19
    7c24:	84 07       	cpc	r24, r20
    7c26:	38 f0       	brcs	.+14     	; 0x7c36 <__divsf3_pse+0x26>
    7c28:	9f 5f       	subi	r25, 0xFF	; 255
    7c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    7c2c:	22 0f       	add	r18, r18
    7c2e:	33 1f       	adc	r19, r19
    7c30:	44 1f       	adc	r20, r20
    7c32:	aa 1f       	adc	r26, r26
    7c34:	a9 f3       	breq	.-22     	; 0x7c20 <__divsf3_pse+0x10>
    7c36:	33 d0       	rcall	.+102    	; 0x7c9e <__divsf3_pse+0x8e>
    7c38:	0e 2e       	mov	r0, r30
    7c3a:	3a f0       	brmi	.+14     	; 0x7c4a <__divsf3_pse+0x3a>
    7c3c:	e0 e8       	ldi	r30, 0x80	; 128
    7c3e:	30 d0       	rcall	.+96     	; 0x7ca0 <__divsf3_pse+0x90>
    7c40:	91 50       	subi	r25, 0x01	; 1
    7c42:	50 40       	sbci	r21, 0x00	; 0
    7c44:	e6 95       	lsr	r30
    7c46:	00 1c       	adc	r0, r0
    7c48:	ca f7       	brpl	.-14     	; 0x7c3c <__divsf3_pse+0x2c>
    7c4a:	29 d0       	rcall	.+82     	; 0x7c9e <__divsf3_pse+0x8e>
    7c4c:	fe 2f       	mov	r31, r30
    7c4e:	27 d0       	rcall	.+78     	; 0x7c9e <__divsf3_pse+0x8e>
    7c50:	66 0f       	add	r22, r22
    7c52:	77 1f       	adc	r23, r23
    7c54:	88 1f       	adc	r24, r24
    7c56:	bb 1f       	adc	r27, r27
    7c58:	26 17       	cp	r18, r22
    7c5a:	37 07       	cpc	r19, r23
    7c5c:	48 07       	cpc	r20, r24
    7c5e:	ab 07       	cpc	r26, r27
    7c60:	b0 e8       	ldi	r27, 0x80	; 128
    7c62:	09 f0       	breq	.+2      	; 0x7c66 <__divsf3_pse+0x56>
    7c64:	bb 0b       	sbc	r27, r27
    7c66:	80 2d       	mov	r24, r0
    7c68:	bf 01       	movw	r22, r30
    7c6a:	ff 27       	eor	r31, r31
    7c6c:	93 58       	subi	r25, 0x83	; 131
    7c6e:	5f 4f       	sbci	r21, 0xFF	; 255
    7c70:	2a f0       	brmi	.+10     	; 0x7c7c <__divsf3_pse+0x6c>
    7c72:	9e 3f       	cpi	r25, 0xFE	; 254
    7c74:	51 05       	cpc	r21, r1
    7c76:	68 f0       	brcs	.+26     	; 0x7c92 <__divsf3_pse+0x82>
    7c78:	b6 c0       	rjmp	.+364    	; 0x7de6 <__fp_inf>
    7c7a:	5e c1       	rjmp	.+700    	; 0x7f38 <__fp_szero>
    7c7c:	5f 3f       	cpi	r21, 0xFF	; 255
    7c7e:	ec f3       	brlt	.-6      	; 0x7c7a <__divsf3_pse+0x6a>
    7c80:	98 3e       	cpi	r25, 0xE8	; 232
    7c82:	dc f3       	brlt	.-10     	; 0x7c7a <__divsf3_pse+0x6a>
    7c84:	86 95       	lsr	r24
    7c86:	77 95       	ror	r23
    7c88:	67 95       	ror	r22
    7c8a:	b7 95       	ror	r27
    7c8c:	f7 95       	ror	r31
    7c8e:	9f 5f       	subi	r25, 0xFF	; 255
    7c90:	c9 f7       	brne	.-14     	; 0x7c84 <__divsf3_pse+0x74>
    7c92:	88 0f       	add	r24, r24
    7c94:	91 1d       	adc	r25, r1
    7c96:	96 95       	lsr	r25
    7c98:	87 95       	ror	r24
    7c9a:	97 f9       	bld	r25, 7
    7c9c:	08 95       	ret
    7c9e:	e1 e0       	ldi	r30, 0x01	; 1
    7ca0:	66 0f       	add	r22, r22
    7ca2:	77 1f       	adc	r23, r23
    7ca4:	88 1f       	adc	r24, r24
    7ca6:	bb 1f       	adc	r27, r27
    7ca8:	62 17       	cp	r22, r18
    7caa:	73 07       	cpc	r23, r19
    7cac:	84 07       	cpc	r24, r20
    7cae:	ba 07       	cpc	r27, r26
    7cb0:	20 f0       	brcs	.+8      	; 0x7cba <__divsf3_pse+0xaa>
    7cb2:	62 1b       	sub	r22, r18
    7cb4:	73 0b       	sbc	r23, r19
    7cb6:	84 0b       	sbc	r24, r20
    7cb8:	ba 0b       	sbc	r27, r26
    7cba:	ee 1f       	adc	r30, r30
    7cbc:	88 f7       	brcc	.-30     	; 0x7ca0 <__divsf3_pse+0x90>
    7cbe:	e0 95       	com	r30
    7cc0:	08 95       	ret

00007cc2 <__fixsfsi>:
    7cc2:	04 d0       	rcall	.+8      	; 0x7ccc <__fixunssfsi>
    7cc4:	68 94       	set
    7cc6:	b1 11       	cpse	r27, r1
    7cc8:	37 c1       	rjmp	.+622    	; 0x7f38 <__fp_szero>
    7cca:	08 95       	ret

00007ccc <__fixunssfsi>:
    7ccc:	1a d1       	rcall	.+564    	; 0x7f02 <__fp_splitA>
    7cce:	88 f0       	brcs	.+34     	; 0x7cf2 <__fixunssfsi+0x26>
    7cd0:	9f 57       	subi	r25, 0x7F	; 127
    7cd2:	90 f0       	brcs	.+36     	; 0x7cf8 <__fixunssfsi+0x2c>
    7cd4:	b9 2f       	mov	r27, r25
    7cd6:	99 27       	eor	r25, r25
    7cd8:	b7 51       	subi	r27, 0x17	; 23
    7cda:	a0 f0       	brcs	.+40     	; 0x7d04 <__fixunssfsi+0x38>
    7cdc:	d1 f0       	breq	.+52     	; 0x7d12 <__fixunssfsi+0x46>
    7cde:	66 0f       	add	r22, r22
    7ce0:	77 1f       	adc	r23, r23
    7ce2:	88 1f       	adc	r24, r24
    7ce4:	99 1f       	adc	r25, r25
    7ce6:	1a f0       	brmi	.+6      	; 0x7cee <__fixunssfsi+0x22>
    7ce8:	ba 95       	dec	r27
    7cea:	c9 f7       	brne	.-14     	; 0x7cde <__fixunssfsi+0x12>
    7cec:	12 c0       	rjmp	.+36     	; 0x7d12 <__fixunssfsi+0x46>
    7cee:	b1 30       	cpi	r27, 0x01	; 1
    7cf0:	81 f0       	breq	.+32     	; 0x7d12 <__fixunssfsi+0x46>
    7cf2:	21 d1       	rcall	.+578    	; 0x7f36 <__fp_zero>
    7cf4:	b1 e0       	ldi	r27, 0x01	; 1
    7cf6:	08 95       	ret
    7cf8:	1e c1       	rjmp	.+572    	; 0x7f36 <__fp_zero>
    7cfa:	67 2f       	mov	r22, r23
    7cfc:	78 2f       	mov	r23, r24
    7cfe:	88 27       	eor	r24, r24
    7d00:	b8 5f       	subi	r27, 0xF8	; 248
    7d02:	39 f0       	breq	.+14     	; 0x7d12 <__fixunssfsi+0x46>
    7d04:	b9 3f       	cpi	r27, 0xF9	; 249
    7d06:	cc f3       	brlt	.-14     	; 0x7cfa <__fixunssfsi+0x2e>
    7d08:	86 95       	lsr	r24
    7d0a:	77 95       	ror	r23
    7d0c:	67 95       	ror	r22
    7d0e:	b3 95       	inc	r27
    7d10:	d9 f7       	brne	.-10     	; 0x7d08 <__fixunssfsi+0x3c>
    7d12:	3e f4       	brtc	.+14     	; 0x7d22 <__fixunssfsi+0x56>
    7d14:	90 95       	com	r25
    7d16:	80 95       	com	r24
    7d18:	70 95       	com	r23
    7d1a:	61 95       	neg	r22
    7d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    7d1e:	8f 4f       	sbci	r24, 0xFF	; 255
    7d20:	9f 4f       	sbci	r25, 0xFF	; 255
    7d22:	08 95       	ret

00007d24 <__floatunsisf>:
    7d24:	e8 94       	clt
    7d26:	09 c0       	rjmp	.+18     	; 0x7d3a <__floatsisf+0x12>

00007d28 <__floatsisf>:
    7d28:	97 fb       	bst	r25, 7
    7d2a:	3e f4       	brtc	.+14     	; 0x7d3a <__floatsisf+0x12>
    7d2c:	90 95       	com	r25
    7d2e:	80 95       	com	r24
    7d30:	70 95       	com	r23
    7d32:	61 95       	neg	r22
    7d34:	7f 4f       	sbci	r23, 0xFF	; 255
    7d36:	8f 4f       	sbci	r24, 0xFF	; 255
    7d38:	9f 4f       	sbci	r25, 0xFF	; 255
    7d3a:	99 23       	and	r25, r25
    7d3c:	a9 f0       	breq	.+42     	; 0x7d68 <__floatsisf+0x40>
    7d3e:	f9 2f       	mov	r31, r25
    7d40:	96 e9       	ldi	r25, 0x96	; 150
    7d42:	bb 27       	eor	r27, r27
    7d44:	93 95       	inc	r25
    7d46:	f6 95       	lsr	r31
    7d48:	87 95       	ror	r24
    7d4a:	77 95       	ror	r23
    7d4c:	67 95       	ror	r22
    7d4e:	b7 95       	ror	r27
    7d50:	f1 11       	cpse	r31, r1
    7d52:	f8 cf       	rjmp	.-16     	; 0x7d44 <__floatsisf+0x1c>
    7d54:	fa f4       	brpl	.+62     	; 0x7d94 <__floatsisf+0x6c>
    7d56:	bb 0f       	add	r27, r27
    7d58:	11 f4       	brne	.+4      	; 0x7d5e <__floatsisf+0x36>
    7d5a:	60 ff       	sbrs	r22, 0
    7d5c:	1b c0       	rjmp	.+54     	; 0x7d94 <__floatsisf+0x6c>
    7d5e:	6f 5f       	subi	r22, 0xFF	; 255
    7d60:	7f 4f       	sbci	r23, 0xFF	; 255
    7d62:	8f 4f       	sbci	r24, 0xFF	; 255
    7d64:	9f 4f       	sbci	r25, 0xFF	; 255
    7d66:	16 c0       	rjmp	.+44     	; 0x7d94 <__floatsisf+0x6c>
    7d68:	88 23       	and	r24, r24
    7d6a:	11 f0       	breq	.+4      	; 0x7d70 <__floatsisf+0x48>
    7d6c:	96 e9       	ldi	r25, 0x96	; 150
    7d6e:	11 c0       	rjmp	.+34     	; 0x7d92 <__floatsisf+0x6a>
    7d70:	77 23       	and	r23, r23
    7d72:	21 f0       	breq	.+8      	; 0x7d7c <__floatsisf+0x54>
    7d74:	9e e8       	ldi	r25, 0x8E	; 142
    7d76:	87 2f       	mov	r24, r23
    7d78:	76 2f       	mov	r23, r22
    7d7a:	05 c0       	rjmp	.+10     	; 0x7d86 <__floatsisf+0x5e>
    7d7c:	66 23       	and	r22, r22
    7d7e:	71 f0       	breq	.+28     	; 0x7d9c <__floatsisf+0x74>
    7d80:	96 e8       	ldi	r25, 0x86	; 134
    7d82:	86 2f       	mov	r24, r22
    7d84:	70 e0       	ldi	r23, 0x00	; 0
    7d86:	60 e0       	ldi	r22, 0x00	; 0
    7d88:	2a f0       	brmi	.+10     	; 0x7d94 <__floatsisf+0x6c>
    7d8a:	9a 95       	dec	r25
    7d8c:	66 0f       	add	r22, r22
    7d8e:	77 1f       	adc	r23, r23
    7d90:	88 1f       	adc	r24, r24
    7d92:	da f7       	brpl	.-10     	; 0x7d8a <__floatsisf+0x62>
    7d94:	88 0f       	add	r24, r24
    7d96:	96 95       	lsr	r25
    7d98:	87 95       	ror	r24
    7d9a:	97 f9       	bld	r25, 7
    7d9c:	08 95       	ret

00007d9e <__fp_cmp>:
    7d9e:	99 0f       	add	r25, r25
    7da0:	00 08       	sbc	r0, r0
    7da2:	55 0f       	add	r21, r21
    7da4:	aa 0b       	sbc	r26, r26
    7da6:	e0 e8       	ldi	r30, 0x80	; 128
    7da8:	fe ef       	ldi	r31, 0xFE	; 254
    7daa:	16 16       	cp	r1, r22
    7dac:	17 06       	cpc	r1, r23
    7dae:	e8 07       	cpc	r30, r24
    7db0:	f9 07       	cpc	r31, r25
    7db2:	c0 f0       	brcs	.+48     	; 0x7de4 <__fp_cmp+0x46>
    7db4:	12 16       	cp	r1, r18
    7db6:	13 06       	cpc	r1, r19
    7db8:	e4 07       	cpc	r30, r20
    7dba:	f5 07       	cpc	r31, r21
    7dbc:	98 f0       	brcs	.+38     	; 0x7de4 <__fp_cmp+0x46>
    7dbe:	62 1b       	sub	r22, r18
    7dc0:	73 0b       	sbc	r23, r19
    7dc2:	84 0b       	sbc	r24, r20
    7dc4:	95 0b       	sbc	r25, r21
    7dc6:	39 f4       	brne	.+14     	; 0x7dd6 <__fp_cmp+0x38>
    7dc8:	0a 26       	eor	r0, r26
    7dca:	61 f0       	breq	.+24     	; 0x7de4 <__fp_cmp+0x46>
    7dcc:	23 2b       	or	r18, r19
    7dce:	24 2b       	or	r18, r20
    7dd0:	25 2b       	or	r18, r21
    7dd2:	21 f4       	brne	.+8      	; 0x7ddc <__fp_cmp+0x3e>
    7dd4:	08 95       	ret
    7dd6:	0a 26       	eor	r0, r26
    7dd8:	09 f4       	brne	.+2      	; 0x7ddc <__fp_cmp+0x3e>
    7dda:	a1 40       	sbci	r26, 0x01	; 1
    7ddc:	a6 95       	lsr	r26
    7dde:	8f ef       	ldi	r24, 0xFF	; 255
    7de0:	81 1d       	adc	r24, r1
    7de2:	81 1d       	adc	r24, r1
    7de4:	08 95       	ret

00007de6 <__fp_inf>:
    7de6:	97 f9       	bld	r25, 7
    7de8:	9f 67       	ori	r25, 0x7F	; 127
    7dea:	80 e8       	ldi	r24, 0x80	; 128
    7dec:	70 e0       	ldi	r23, 0x00	; 0
    7dee:	60 e0       	ldi	r22, 0x00	; 0
    7df0:	08 95       	ret

00007df2 <__fp_nan>:
    7df2:	9f ef       	ldi	r25, 0xFF	; 255
    7df4:	80 ec       	ldi	r24, 0xC0	; 192
    7df6:	08 95       	ret

00007df8 <__fp_powser>:
    7df8:	df 93       	push	r29
    7dfa:	cf 93       	push	r28
    7dfc:	1f 93       	push	r17
    7dfe:	0f 93       	push	r16
    7e00:	ff 92       	push	r15
    7e02:	ef 92       	push	r14
    7e04:	df 92       	push	r13
    7e06:	7b 01       	movw	r14, r22
    7e08:	8c 01       	movw	r16, r24
    7e0a:	68 94       	set
    7e0c:	05 c0       	rjmp	.+10     	; 0x7e18 <__fp_powser+0x20>
    7e0e:	da 2e       	mov	r13, r26
    7e10:	ef 01       	movw	r28, r30
    7e12:	ab d0       	rcall	.+342    	; 0x7f6a <__mulsf3x>
    7e14:	fe 01       	movw	r30, r28
    7e16:	e8 94       	clt
    7e18:	a5 91       	lpm	r26, Z+
    7e1a:	25 91       	lpm	r18, Z+
    7e1c:	35 91       	lpm	r19, Z+
    7e1e:	45 91       	lpm	r20, Z+
    7e20:	55 91       	lpm	r21, Z+
    7e22:	ae f3       	brts	.-22     	; 0x7e0e <__fp_powser+0x16>
    7e24:	ef 01       	movw	r28, r30
    7e26:	29 de       	rcall	.-942    	; 0x7a7a <__addsf3x>
    7e28:	fe 01       	movw	r30, r28
    7e2a:	97 01       	movw	r18, r14
    7e2c:	a8 01       	movw	r20, r16
    7e2e:	da 94       	dec	r13
    7e30:	79 f7       	brne	.-34     	; 0x7e10 <__fp_powser+0x18>
    7e32:	df 90       	pop	r13
    7e34:	ef 90       	pop	r14
    7e36:	ff 90       	pop	r15
    7e38:	0f 91       	pop	r16
    7e3a:	1f 91       	pop	r17
    7e3c:	cf 91       	pop	r28
    7e3e:	df 91       	pop	r29
    7e40:	08 95       	ret

00007e42 <__fp_pscA>:
    7e42:	00 24       	eor	r0, r0
    7e44:	0a 94       	dec	r0
    7e46:	16 16       	cp	r1, r22
    7e48:	17 06       	cpc	r1, r23
    7e4a:	18 06       	cpc	r1, r24
    7e4c:	09 06       	cpc	r0, r25
    7e4e:	08 95       	ret

00007e50 <__fp_pscB>:
    7e50:	00 24       	eor	r0, r0
    7e52:	0a 94       	dec	r0
    7e54:	12 16       	cp	r1, r18
    7e56:	13 06       	cpc	r1, r19
    7e58:	14 06       	cpc	r1, r20
    7e5a:	05 06       	cpc	r0, r21
    7e5c:	08 95       	ret
    7e5e:	c9 cf       	rjmp	.-110    	; 0x7df2 <__fp_nan>

00007e60 <__fp_rempio2>:
    7e60:	50 d0       	rcall	.+160    	; 0x7f02 <__fp_splitA>
    7e62:	e8 f3       	brcs	.-6      	; 0x7e5e <__fp_pscB+0xe>
    7e64:	e8 94       	clt
    7e66:	e0 e0       	ldi	r30, 0x00	; 0
    7e68:	bb 27       	eor	r27, r27
    7e6a:	9f 57       	subi	r25, 0x7F	; 127
    7e6c:	f0 f0       	brcs	.+60     	; 0x7eaa <__fp_rempio2+0x4a>
    7e6e:	2a ed       	ldi	r18, 0xDA	; 218
    7e70:	3f e0       	ldi	r19, 0x0F	; 15
    7e72:	49 ec       	ldi	r20, 0xC9	; 201
    7e74:	06 c0       	rjmp	.+12     	; 0x7e82 <__fp_rempio2+0x22>
    7e76:	ee 0f       	add	r30, r30
    7e78:	bb 0f       	add	r27, r27
    7e7a:	66 1f       	adc	r22, r22
    7e7c:	77 1f       	adc	r23, r23
    7e7e:	88 1f       	adc	r24, r24
    7e80:	28 f0       	brcs	.+10     	; 0x7e8c <__fp_rempio2+0x2c>
    7e82:	b2 3a       	cpi	r27, 0xA2	; 162
    7e84:	62 07       	cpc	r22, r18
    7e86:	73 07       	cpc	r23, r19
    7e88:	84 07       	cpc	r24, r20
    7e8a:	28 f0       	brcs	.+10     	; 0x7e96 <__fp_rempio2+0x36>
    7e8c:	b2 5a       	subi	r27, 0xA2	; 162
    7e8e:	62 0b       	sbc	r22, r18
    7e90:	73 0b       	sbc	r23, r19
    7e92:	84 0b       	sbc	r24, r20
    7e94:	e3 95       	inc	r30
    7e96:	9a 95       	dec	r25
    7e98:	72 f7       	brpl	.-36     	; 0x7e76 <__fp_rempio2+0x16>
    7e9a:	80 38       	cpi	r24, 0x80	; 128
    7e9c:	30 f4       	brcc	.+12     	; 0x7eaa <__fp_rempio2+0x4a>
    7e9e:	9a 95       	dec	r25
    7ea0:	bb 0f       	add	r27, r27
    7ea2:	66 1f       	adc	r22, r22
    7ea4:	77 1f       	adc	r23, r23
    7ea6:	88 1f       	adc	r24, r24
    7ea8:	d2 f7       	brpl	.-12     	; 0x7e9e <__fp_rempio2+0x3e>
    7eaa:	90 48       	sbci	r25, 0x80	; 128
    7eac:	c0 c0       	rjmp	.+384    	; 0x802e <__fp_mpack_finite>

00007eae <__fp_round>:
    7eae:	09 2e       	mov	r0, r25
    7eb0:	03 94       	inc	r0
    7eb2:	00 0c       	add	r0, r0
    7eb4:	11 f4       	brne	.+4      	; 0x7eba <__fp_round+0xc>
    7eb6:	88 23       	and	r24, r24
    7eb8:	52 f0       	brmi	.+20     	; 0x7ece <__fp_round+0x20>
    7eba:	bb 0f       	add	r27, r27
    7ebc:	40 f4       	brcc	.+16     	; 0x7ece <__fp_round+0x20>
    7ebe:	bf 2b       	or	r27, r31
    7ec0:	11 f4       	brne	.+4      	; 0x7ec6 <__fp_round+0x18>
    7ec2:	60 ff       	sbrs	r22, 0
    7ec4:	04 c0       	rjmp	.+8      	; 0x7ece <__fp_round+0x20>
    7ec6:	6f 5f       	subi	r22, 0xFF	; 255
    7ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    7eca:	8f 4f       	sbci	r24, 0xFF	; 255
    7ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    7ece:	08 95       	ret

00007ed0 <__fp_sinus>:
    7ed0:	ef 93       	push	r30
    7ed2:	e0 ff       	sbrs	r30, 0
    7ed4:	06 c0       	rjmp	.+12     	; 0x7ee2 <__fp_sinus+0x12>
    7ed6:	a2 ea       	ldi	r26, 0xA2	; 162
    7ed8:	2a ed       	ldi	r18, 0xDA	; 218
    7eda:	3f e0       	ldi	r19, 0x0F	; 15
    7edc:	49 ec       	ldi	r20, 0xC9	; 201
    7ede:	5f eb       	ldi	r21, 0xBF	; 191
    7ee0:	cc dd       	rcall	.-1128   	; 0x7a7a <__addsf3x>
    7ee2:	e5 df       	rcall	.-54     	; 0x7eae <__fp_round>
    7ee4:	0f 90       	pop	r0
    7ee6:	03 94       	inc	r0
    7ee8:	01 fc       	sbrc	r0, 1
    7eea:	90 58       	subi	r25, 0x80	; 128
    7eec:	eb e7       	ldi	r30, 0x7B	; 123
    7eee:	f1 e0       	ldi	r31, 0x01	; 1
    7ef0:	aa c0       	rjmp	.+340    	; 0x8046 <__fp_powsodd>

00007ef2 <__fp_split3>:
    7ef2:	57 fd       	sbrc	r21, 7
    7ef4:	90 58       	subi	r25, 0x80	; 128
    7ef6:	44 0f       	add	r20, r20
    7ef8:	55 1f       	adc	r21, r21
    7efa:	59 f0       	breq	.+22     	; 0x7f12 <__fp_splitA+0x10>
    7efc:	5f 3f       	cpi	r21, 0xFF	; 255
    7efe:	71 f0       	breq	.+28     	; 0x7f1c <__fp_splitA+0x1a>
    7f00:	47 95       	ror	r20

00007f02 <__fp_splitA>:
    7f02:	88 0f       	add	r24, r24
    7f04:	97 fb       	bst	r25, 7
    7f06:	99 1f       	adc	r25, r25
    7f08:	61 f0       	breq	.+24     	; 0x7f22 <__fp_splitA+0x20>
    7f0a:	9f 3f       	cpi	r25, 0xFF	; 255
    7f0c:	79 f0       	breq	.+30     	; 0x7f2c <__fp_splitA+0x2a>
    7f0e:	87 95       	ror	r24
    7f10:	08 95       	ret
    7f12:	12 16       	cp	r1, r18
    7f14:	13 06       	cpc	r1, r19
    7f16:	14 06       	cpc	r1, r20
    7f18:	55 1f       	adc	r21, r21
    7f1a:	f2 cf       	rjmp	.-28     	; 0x7f00 <__fp_split3+0xe>
    7f1c:	46 95       	lsr	r20
    7f1e:	f1 df       	rcall	.-30     	; 0x7f02 <__fp_splitA>
    7f20:	08 c0       	rjmp	.+16     	; 0x7f32 <__fp_splitA+0x30>
    7f22:	16 16       	cp	r1, r22
    7f24:	17 06       	cpc	r1, r23
    7f26:	18 06       	cpc	r1, r24
    7f28:	99 1f       	adc	r25, r25
    7f2a:	f1 cf       	rjmp	.-30     	; 0x7f0e <__fp_splitA+0xc>
    7f2c:	86 95       	lsr	r24
    7f2e:	71 05       	cpc	r23, r1
    7f30:	61 05       	cpc	r22, r1
    7f32:	08 94       	sec
    7f34:	08 95       	ret

00007f36 <__fp_zero>:
    7f36:	e8 94       	clt

00007f38 <__fp_szero>:
    7f38:	bb 27       	eor	r27, r27
    7f3a:	66 27       	eor	r22, r22
    7f3c:	77 27       	eor	r23, r23
    7f3e:	cb 01       	movw	r24, r22
    7f40:	97 f9       	bld	r25, 7
    7f42:	08 95       	ret

00007f44 <inverse>:
    7f44:	9b 01       	movw	r18, r22
    7f46:	ac 01       	movw	r20, r24
    7f48:	60 e0       	ldi	r22, 0x00	; 0
    7f4a:	70 e0       	ldi	r23, 0x00	; 0
    7f4c:	80 e8       	ldi	r24, 0x80	; 128
    7f4e:	9f e3       	ldi	r25, 0x3F	; 63
    7f50:	50 ce       	rjmp	.-864    	; 0x7bf2 <__divsf3>

00007f52 <__mulsf3>:
    7f52:	0b d0       	rcall	.+22     	; 0x7f6a <__mulsf3x>
    7f54:	ac cf       	rjmp	.-168    	; 0x7eae <__fp_round>
    7f56:	75 df       	rcall	.-278    	; 0x7e42 <__fp_pscA>
    7f58:	28 f0       	brcs	.+10     	; 0x7f64 <__mulsf3+0x12>
    7f5a:	7a df       	rcall	.-268    	; 0x7e50 <__fp_pscB>
    7f5c:	18 f0       	brcs	.+6      	; 0x7f64 <__mulsf3+0x12>
    7f5e:	95 23       	and	r25, r21
    7f60:	09 f0       	breq	.+2      	; 0x7f64 <__mulsf3+0x12>
    7f62:	41 cf       	rjmp	.-382    	; 0x7de6 <__fp_inf>
    7f64:	46 cf       	rjmp	.-372    	; 0x7df2 <__fp_nan>
    7f66:	11 24       	eor	r1, r1
    7f68:	e7 cf       	rjmp	.-50     	; 0x7f38 <__fp_szero>

00007f6a <__mulsf3x>:
    7f6a:	c3 df       	rcall	.-122    	; 0x7ef2 <__fp_split3>
    7f6c:	a0 f3       	brcs	.-24     	; 0x7f56 <__mulsf3+0x4>

00007f6e <__mulsf3_pse>:
    7f6e:	95 9f       	mul	r25, r21
    7f70:	d1 f3       	breq	.-12     	; 0x7f66 <__mulsf3+0x14>
    7f72:	95 0f       	add	r25, r21
    7f74:	50 e0       	ldi	r21, 0x00	; 0
    7f76:	55 1f       	adc	r21, r21
    7f78:	62 9f       	mul	r22, r18
    7f7a:	f0 01       	movw	r30, r0
    7f7c:	72 9f       	mul	r23, r18
    7f7e:	bb 27       	eor	r27, r27
    7f80:	f0 0d       	add	r31, r0
    7f82:	b1 1d       	adc	r27, r1
    7f84:	63 9f       	mul	r22, r19
    7f86:	aa 27       	eor	r26, r26
    7f88:	f0 0d       	add	r31, r0
    7f8a:	b1 1d       	adc	r27, r1
    7f8c:	aa 1f       	adc	r26, r26
    7f8e:	64 9f       	mul	r22, r20
    7f90:	66 27       	eor	r22, r22
    7f92:	b0 0d       	add	r27, r0
    7f94:	a1 1d       	adc	r26, r1
    7f96:	66 1f       	adc	r22, r22
    7f98:	82 9f       	mul	r24, r18
    7f9a:	22 27       	eor	r18, r18
    7f9c:	b0 0d       	add	r27, r0
    7f9e:	a1 1d       	adc	r26, r1
    7fa0:	62 1f       	adc	r22, r18
    7fa2:	73 9f       	mul	r23, r19
    7fa4:	b0 0d       	add	r27, r0
    7fa6:	a1 1d       	adc	r26, r1
    7fa8:	62 1f       	adc	r22, r18
    7faa:	83 9f       	mul	r24, r19
    7fac:	a0 0d       	add	r26, r0
    7fae:	61 1d       	adc	r22, r1
    7fb0:	22 1f       	adc	r18, r18
    7fb2:	74 9f       	mul	r23, r20
    7fb4:	33 27       	eor	r19, r19
    7fb6:	a0 0d       	add	r26, r0
    7fb8:	61 1d       	adc	r22, r1
    7fba:	23 1f       	adc	r18, r19
    7fbc:	84 9f       	mul	r24, r20
    7fbe:	60 0d       	add	r22, r0
    7fc0:	21 1d       	adc	r18, r1
    7fc2:	82 2f       	mov	r24, r18
    7fc4:	76 2f       	mov	r23, r22
    7fc6:	6a 2f       	mov	r22, r26
    7fc8:	11 24       	eor	r1, r1
    7fca:	9f 57       	subi	r25, 0x7F	; 127
    7fcc:	50 40       	sbci	r21, 0x00	; 0
    7fce:	8a f0       	brmi	.+34     	; 0x7ff2 <__mulsf3_pse+0x84>
    7fd0:	e1 f0       	breq	.+56     	; 0x800a <__mulsf3_pse+0x9c>
    7fd2:	88 23       	and	r24, r24
    7fd4:	4a f0       	brmi	.+18     	; 0x7fe8 <__mulsf3_pse+0x7a>
    7fd6:	ee 0f       	add	r30, r30
    7fd8:	ff 1f       	adc	r31, r31
    7fda:	bb 1f       	adc	r27, r27
    7fdc:	66 1f       	adc	r22, r22
    7fde:	77 1f       	adc	r23, r23
    7fe0:	88 1f       	adc	r24, r24
    7fe2:	91 50       	subi	r25, 0x01	; 1
    7fe4:	50 40       	sbci	r21, 0x00	; 0
    7fe6:	a9 f7       	brne	.-22     	; 0x7fd2 <__mulsf3_pse+0x64>
    7fe8:	9e 3f       	cpi	r25, 0xFE	; 254
    7fea:	51 05       	cpc	r21, r1
    7fec:	70 f0       	brcs	.+28     	; 0x800a <__mulsf3_pse+0x9c>
    7fee:	fb ce       	rjmp	.-522    	; 0x7de6 <__fp_inf>
    7ff0:	a3 cf       	rjmp	.-186    	; 0x7f38 <__fp_szero>
    7ff2:	5f 3f       	cpi	r21, 0xFF	; 255
    7ff4:	ec f3       	brlt	.-6      	; 0x7ff0 <__mulsf3_pse+0x82>
    7ff6:	98 3e       	cpi	r25, 0xE8	; 232
    7ff8:	dc f3       	brlt	.-10     	; 0x7ff0 <__mulsf3_pse+0x82>
    7ffa:	86 95       	lsr	r24
    7ffc:	77 95       	ror	r23
    7ffe:	67 95       	ror	r22
    8000:	b7 95       	ror	r27
    8002:	f7 95       	ror	r31
    8004:	e7 95       	ror	r30
    8006:	9f 5f       	subi	r25, 0xFF	; 255
    8008:	c1 f7       	brne	.-16     	; 0x7ffa <__mulsf3_pse+0x8c>
    800a:	fe 2b       	or	r31, r30
    800c:	88 0f       	add	r24, r24
    800e:	91 1d       	adc	r25, r1
    8010:	96 95       	lsr	r25
    8012:	87 95       	ror	r24
    8014:	97 f9       	bld	r25, 7
    8016:	08 95       	ret

00008018 <sin>:
    8018:	9f 93       	push	r25
    801a:	22 df       	rcall	.-444    	; 0x7e60 <__fp_rempio2>
    801c:	0f 90       	pop	r0
    801e:	07 fc       	sbrc	r0, 7
    8020:	ee 5f       	subi	r30, 0xFE	; 254
    8022:	56 cf       	rjmp	.-340    	; 0x7ed0 <__fp_sinus>

00008024 <square>:
    8024:	9b 01       	movw	r18, r22
    8026:	ac 01       	movw	r20, r24
    8028:	94 cf       	rjmp	.-216    	; 0x7f52 <__mulsf3>

0000802a <__fp_mpack>:
    802a:	9f 3f       	cpi	r25, 0xFF	; 255
    802c:	31 f0       	breq	.+12     	; 0x803a <__fp_mpack_finite+0xc>

0000802e <__fp_mpack_finite>:
    802e:	91 50       	subi	r25, 0x01	; 1
    8030:	20 f4       	brcc	.+8      	; 0x803a <__fp_mpack_finite+0xc>
    8032:	87 95       	ror	r24
    8034:	77 95       	ror	r23
    8036:	67 95       	ror	r22
    8038:	b7 95       	ror	r27
    803a:	88 0f       	add	r24, r24
    803c:	91 1d       	adc	r25, r1
    803e:	96 95       	lsr	r25
    8040:	87 95       	ror	r24
    8042:	97 f9       	bld	r25, 7
    8044:	08 95       	ret

00008046 <__fp_powsodd>:
    8046:	9f 93       	push	r25
    8048:	8f 93       	push	r24
    804a:	7f 93       	push	r23
    804c:	6f 93       	push	r22
    804e:	ff 93       	push	r31
    8050:	ef 93       	push	r30
    8052:	9b 01       	movw	r18, r22
    8054:	ac 01       	movw	r20, r24
    8056:	7d df       	rcall	.-262    	; 0x7f52 <__mulsf3>
    8058:	ef 91       	pop	r30
    805a:	ff 91       	pop	r31
    805c:	cd de       	rcall	.-614    	; 0x7df8 <__fp_powser>
    805e:	2f 91       	pop	r18
    8060:	3f 91       	pop	r19
    8062:	4f 91       	pop	r20
    8064:	5f 91       	pop	r21
    8066:	75 cf       	rjmp	.-278    	; 0x7f52 <__mulsf3>

00008068 <__mulsi3>:
    8068:	62 9f       	mul	r22, r18
    806a:	d0 01       	movw	r26, r0
    806c:	73 9f       	mul	r23, r19
    806e:	f0 01       	movw	r30, r0
    8070:	82 9f       	mul	r24, r18
    8072:	e0 0d       	add	r30, r0
    8074:	f1 1d       	adc	r31, r1
    8076:	64 9f       	mul	r22, r20
    8078:	e0 0d       	add	r30, r0
    807a:	f1 1d       	adc	r31, r1
    807c:	92 9f       	mul	r25, r18
    807e:	f0 0d       	add	r31, r0
    8080:	83 9f       	mul	r24, r19
    8082:	f0 0d       	add	r31, r0
    8084:	74 9f       	mul	r23, r20
    8086:	f0 0d       	add	r31, r0
    8088:	65 9f       	mul	r22, r21
    808a:	f0 0d       	add	r31, r0
    808c:	99 27       	eor	r25, r25
    808e:	72 9f       	mul	r23, r18
    8090:	b0 0d       	add	r27, r0
    8092:	e1 1d       	adc	r30, r1
    8094:	f9 1f       	adc	r31, r25
    8096:	63 9f       	mul	r22, r19
    8098:	b0 0d       	add	r27, r0
    809a:	e1 1d       	adc	r30, r1
    809c:	f9 1f       	adc	r31, r25
    809e:	bd 01       	movw	r22, r26
    80a0:	cf 01       	movw	r24, r30
    80a2:	11 24       	eor	r1, r1
    80a4:	08 95       	ret

000080a6 <__udivmodhi4>:
    80a6:	aa 1b       	sub	r26, r26
    80a8:	bb 1b       	sub	r27, r27
    80aa:	51 e1       	ldi	r21, 0x11	; 17
    80ac:	07 c0       	rjmp	.+14     	; 0x80bc <__udivmodhi4_ep>

000080ae <__udivmodhi4_loop>:
    80ae:	aa 1f       	adc	r26, r26
    80b0:	bb 1f       	adc	r27, r27
    80b2:	a6 17       	cp	r26, r22
    80b4:	b7 07       	cpc	r27, r23
    80b6:	10 f0       	brcs	.+4      	; 0x80bc <__udivmodhi4_ep>
    80b8:	a6 1b       	sub	r26, r22
    80ba:	b7 0b       	sbc	r27, r23

000080bc <__udivmodhi4_ep>:
    80bc:	88 1f       	adc	r24, r24
    80be:	99 1f       	adc	r25, r25
    80c0:	5a 95       	dec	r21
    80c2:	a9 f7       	brne	.-22     	; 0x80ae <__udivmodhi4_loop>
    80c4:	80 95       	com	r24
    80c6:	90 95       	com	r25
    80c8:	bc 01       	movw	r22, r24
    80ca:	cd 01       	movw	r24, r26
    80cc:	08 95       	ret

000080ce <__divmodhi4>:
    80ce:	97 fb       	bst	r25, 7
    80d0:	09 2e       	mov	r0, r25
    80d2:	07 26       	eor	r0, r23
    80d4:	0a d0       	rcall	.+20     	; 0x80ea <__divmodhi4_neg1>
    80d6:	77 fd       	sbrc	r23, 7
    80d8:	04 d0       	rcall	.+8      	; 0x80e2 <__divmodhi4_neg2>
    80da:	e5 df       	rcall	.-54     	; 0x80a6 <__udivmodhi4>
    80dc:	06 d0       	rcall	.+12     	; 0x80ea <__divmodhi4_neg1>
    80de:	00 20       	and	r0, r0
    80e0:	1a f4       	brpl	.+6      	; 0x80e8 <__divmodhi4_exit>

000080e2 <__divmodhi4_neg2>:
    80e2:	70 95       	com	r23
    80e4:	61 95       	neg	r22
    80e6:	7f 4f       	sbci	r23, 0xFF	; 255

000080e8 <__divmodhi4_exit>:
    80e8:	08 95       	ret

000080ea <__divmodhi4_neg1>:
    80ea:	f6 f7       	brtc	.-4      	; 0x80e8 <__divmodhi4_exit>
    80ec:	90 95       	com	r25
    80ee:	81 95       	neg	r24
    80f0:	9f 4f       	sbci	r25, 0xFF	; 255
    80f2:	08 95       	ret

000080f4 <__divmodsi4>:
    80f4:	97 fb       	bst	r25, 7
    80f6:	09 2e       	mov	r0, r25
    80f8:	05 26       	eor	r0, r21
    80fa:	0e d0       	rcall	.+28     	; 0x8118 <__divmodsi4_neg1>
    80fc:	57 fd       	sbrc	r21, 7
    80fe:	04 d0       	rcall	.+8      	; 0x8108 <__divmodsi4_neg2>
    8100:	14 d0       	rcall	.+40     	; 0x812a <__udivmodsi4>
    8102:	0a d0       	rcall	.+20     	; 0x8118 <__divmodsi4_neg1>
    8104:	00 1c       	adc	r0, r0
    8106:	38 f4       	brcc	.+14     	; 0x8116 <__divmodsi4_exit>

00008108 <__divmodsi4_neg2>:
    8108:	50 95       	com	r21
    810a:	40 95       	com	r20
    810c:	30 95       	com	r19
    810e:	21 95       	neg	r18
    8110:	3f 4f       	sbci	r19, 0xFF	; 255
    8112:	4f 4f       	sbci	r20, 0xFF	; 255
    8114:	5f 4f       	sbci	r21, 0xFF	; 255

00008116 <__divmodsi4_exit>:
    8116:	08 95       	ret

00008118 <__divmodsi4_neg1>:
    8118:	f6 f7       	brtc	.-4      	; 0x8116 <__divmodsi4_exit>
    811a:	90 95       	com	r25
    811c:	80 95       	com	r24
    811e:	70 95       	com	r23
    8120:	61 95       	neg	r22
    8122:	7f 4f       	sbci	r23, 0xFF	; 255
    8124:	8f 4f       	sbci	r24, 0xFF	; 255
    8126:	9f 4f       	sbci	r25, 0xFF	; 255
    8128:	08 95       	ret

0000812a <__udivmodsi4>:
    812a:	a1 e2       	ldi	r26, 0x21	; 33
    812c:	1a 2e       	mov	r1, r26
    812e:	aa 1b       	sub	r26, r26
    8130:	bb 1b       	sub	r27, r27
    8132:	fd 01       	movw	r30, r26
    8134:	0d c0       	rjmp	.+26     	; 0x8150 <__udivmodsi4_ep>

00008136 <__udivmodsi4_loop>:
    8136:	aa 1f       	adc	r26, r26
    8138:	bb 1f       	adc	r27, r27
    813a:	ee 1f       	adc	r30, r30
    813c:	ff 1f       	adc	r31, r31
    813e:	a2 17       	cp	r26, r18
    8140:	b3 07       	cpc	r27, r19
    8142:	e4 07       	cpc	r30, r20
    8144:	f5 07       	cpc	r31, r21
    8146:	20 f0       	brcs	.+8      	; 0x8150 <__udivmodsi4_ep>
    8148:	a2 1b       	sub	r26, r18
    814a:	b3 0b       	sbc	r27, r19
    814c:	e4 0b       	sbc	r30, r20
    814e:	f5 0b       	sbc	r31, r21

00008150 <__udivmodsi4_ep>:
    8150:	66 1f       	adc	r22, r22
    8152:	77 1f       	adc	r23, r23
    8154:	88 1f       	adc	r24, r24
    8156:	99 1f       	adc	r25, r25
    8158:	1a 94       	dec	r1
    815a:	69 f7       	brne	.-38     	; 0x8136 <__udivmodsi4_loop>
    815c:	60 95       	com	r22
    815e:	70 95       	com	r23
    8160:	80 95       	com	r24
    8162:	90 95       	com	r25
    8164:	9b 01       	movw	r18, r22
    8166:	ac 01       	movw	r20, r24
    8168:	bd 01       	movw	r22, r26
    816a:	cf 01       	movw	r24, r30
    816c:	08 95       	ret

0000816e <do_rand>:
    816e:	af 92       	push	r10
    8170:	bf 92       	push	r11
    8172:	cf 92       	push	r12
    8174:	df 92       	push	r13
    8176:	ef 92       	push	r14
    8178:	ff 92       	push	r15
    817a:	0f 93       	push	r16
    817c:	1f 93       	push	r17
    817e:	cf 93       	push	r28
    8180:	df 93       	push	r29
    8182:	ec 01       	movw	r28, r24
    8184:	68 81       	ld	r22, Y
    8186:	79 81       	ldd	r23, Y+1	; 0x01
    8188:	8a 81       	ldd	r24, Y+2	; 0x02
    818a:	9b 81       	ldd	r25, Y+3	; 0x03
    818c:	61 15       	cp	r22, r1
    818e:	71 05       	cpc	r23, r1
    8190:	81 05       	cpc	r24, r1
    8192:	91 05       	cpc	r25, r1
    8194:	21 f4       	brne	.+8      	; 0x819e <do_rand+0x30>
    8196:	64 e2       	ldi	r22, 0x24	; 36
    8198:	79 ed       	ldi	r23, 0xD9	; 217
    819a:	8b e5       	ldi	r24, 0x5B	; 91
    819c:	97 e0       	ldi	r25, 0x07	; 7
    819e:	2d e1       	ldi	r18, 0x1D	; 29
    81a0:	33 ef       	ldi	r19, 0xF3	; 243
    81a2:	41 e0       	ldi	r20, 0x01	; 1
    81a4:	50 e0       	ldi	r21, 0x00	; 0
    81a6:	0e 94 7a 40 	call	0x80f4	; 0x80f4 <__divmodsi4>
    81aa:	79 01       	movw	r14, r18
    81ac:	8a 01       	movw	r16, r20
    81ae:	27 ea       	ldi	r18, 0xA7	; 167
    81b0:	31 e4       	ldi	r19, 0x41	; 65
    81b2:	40 e0       	ldi	r20, 0x00	; 0
    81b4:	50 e0       	ldi	r21, 0x00	; 0
    81b6:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsi3>
    81ba:	5b 01       	movw	r10, r22
    81bc:	6c 01       	movw	r12, r24
    81be:	c8 01       	movw	r24, r16
    81c0:	b7 01       	movw	r22, r14
    81c2:	2c ee       	ldi	r18, 0xEC	; 236
    81c4:	34 ef       	ldi	r19, 0xF4	; 244
    81c6:	4f ef       	ldi	r20, 0xFF	; 255
    81c8:	5f ef       	ldi	r21, 0xFF	; 255
    81ca:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsi3>
    81ce:	6a 0d       	add	r22, r10
    81d0:	7b 1d       	adc	r23, r11
    81d2:	8c 1d       	adc	r24, r12
    81d4:	9d 1d       	adc	r25, r13
    81d6:	97 ff       	sbrs	r25, 7
    81d8:	04 c0       	rjmp	.+8      	; 0x81e2 <do_rand+0x74>
    81da:	61 50       	subi	r22, 0x01	; 1
    81dc:	70 40       	sbci	r23, 0x00	; 0
    81de:	80 40       	sbci	r24, 0x00	; 0
    81e0:	90 48       	sbci	r25, 0x80	; 128
    81e2:	68 83       	st	Y, r22
    81e4:	79 83       	std	Y+1, r23	; 0x01
    81e6:	8a 83       	std	Y+2, r24	; 0x02
    81e8:	9b 83       	std	Y+3, r25	; 0x03
    81ea:	7f 77       	andi	r23, 0x7F	; 127
    81ec:	cb 01       	movw	r24, r22
    81ee:	df 91       	pop	r29
    81f0:	cf 91       	pop	r28
    81f2:	1f 91       	pop	r17
    81f4:	0f 91       	pop	r16
    81f6:	ff 90       	pop	r15
    81f8:	ef 90       	pop	r14
    81fa:	df 90       	pop	r13
    81fc:	cf 90       	pop	r12
    81fe:	bf 90       	pop	r11
    8200:	af 90       	pop	r10
    8202:	08 95       	ret

00008204 <rand_r>:
    8204:	0e 94 b7 40 	call	0x816e	; 0x816e <do_rand>
    8208:	08 95       	ret

0000820a <rand>:
    820a:	88 e1       	ldi	r24, 0x18	; 24
    820c:	92 e0       	ldi	r25, 0x02	; 2
    820e:	0e 94 b7 40 	call	0x816e	; 0x816e <do_rand>
    8212:	08 95       	ret

00008214 <srand>:
    8214:	a0 e0       	ldi	r26, 0x00	; 0
    8216:	b0 e0       	ldi	r27, 0x00	; 0
    8218:	80 93 18 02 	sts	0x0218, r24
    821c:	90 93 19 02 	sts	0x0219, r25
    8220:	a0 93 1a 02 	sts	0x021A, r26
    8224:	b0 93 1b 02 	sts	0x021B, r27
    8228:	08 95       	ret

0000822a <__eerd_block_m2560>:
    822a:	dc 01       	movw	r26, r24
    822c:	cb 01       	movw	r24, r22

0000822e <__eerd_blraw_m2560>:
    822e:	fc 01       	movw	r30, r24
    8230:	f9 99       	sbic	0x1f, 1	; 31
    8232:	fe cf       	rjmp	.-4      	; 0x8230 <__eerd_blraw_m2560+0x2>
    8234:	06 c0       	rjmp	.+12     	; 0x8242 <__eerd_blraw_m2560+0x14>
    8236:	f2 bd       	out	0x22, r31	; 34
    8238:	e1 bd       	out	0x21, r30	; 33
    823a:	f8 9a       	sbi	0x1f, 0	; 31
    823c:	31 96       	adiw	r30, 0x01	; 1
    823e:	00 b4       	in	r0, 0x20	; 32
    8240:	0d 92       	st	X+, r0
    8242:	41 50       	subi	r20, 0x01	; 1
    8244:	50 40       	sbci	r21, 0x00	; 0
    8246:	b8 f7       	brcc	.-18     	; 0x8236 <__eerd_blraw_m2560+0x8>
    8248:	08 95       	ret

0000824a <__eerd_byte_m2560>:
    824a:	f9 99       	sbic	0x1f, 1	; 31
    824c:	fe cf       	rjmp	.-4      	; 0x824a <__eerd_byte_m2560>
    824e:	92 bd       	out	0x22, r25	; 34
    8250:	81 bd       	out	0x21, r24	; 33
    8252:	f8 9a       	sbi	0x1f, 0	; 31
    8254:	99 27       	eor	r25, r25
    8256:	80 b5       	in	r24, 0x20	; 32
    8258:	08 95       	ret

0000825a <__eerd_word_m2560>:
    825a:	a8 e1       	ldi	r26, 0x18	; 24
    825c:	b0 e0       	ldi	r27, 0x00	; 0
    825e:	42 e0       	ldi	r20, 0x02	; 2
    8260:	50 e0       	ldi	r21, 0x00	; 0
    8262:	0c 94 17 41 	jmp	0x822e	; 0x822e <__eerd_blraw_m2560>

00008266 <__eeupd_block_m2560>:
    8266:	dc 01       	movw	r26, r24
    8268:	a4 0f       	add	r26, r20
    826a:	b5 1f       	adc	r27, r21
    826c:	41 50       	subi	r20, 0x01	; 1
    826e:	50 40       	sbci	r21, 0x00	; 0
    8270:	48 f0       	brcs	.+18     	; 0x8284 <__eeupd_block_m2560+0x1e>
    8272:	cb 01       	movw	r24, r22
    8274:	84 0f       	add	r24, r20
    8276:	95 1f       	adc	r25, r21
    8278:	2e 91       	ld	r18, -X
    827a:	0e 94 44 41 	call	0x8288	; 0x8288 <__eeupd_r18_m2560>
    827e:	41 50       	subi	r20, 0x01	; 1
    8280:	50 40       	sbci	r21, 0x00	; 0
    8282:	d0 f7       	brcc	.-12     	; 0x8278 <__eeupd_block_m2560+0x12>
    8284:	08 95       	ret

00008286 <__eeupd_byte_m2560>:
    8286:	26 2f       	mov	r18, r22

00008288 <__eeupd_r18_m2560>:
    8288:	f9 99       	sbic	0x1f, 1	; 31
    828a:	fe cf       	rjmp	.-4      	; 0x8288 <__eeupd_r18_m2560>
    828c:	92 bd       	out	0x22, r25	; 34
    828e:	81 bd       	out	0x21, r24	; 33
    8290:	f8 9a       	sbi	0x1f, 0	; 31
    8292:	01 97       	sbiw	r24, 0x01	; 1
    8294:	00 b4       	in	r0, 0x20	; 32
    8296:	02 16       	cp	r0, r18
    8298:	39 f0       	breq	.+14     	; 0x82a8 <__eeupd_r18_m2560+0x20>
    829a:	1f ba       	out	0x1f, r1	; 31
    829c:	20 bd       	out	0x20, r18	; 32
    829e:	0f b6       	in	r0, 0x3f	; 63
    82a0:	f8 94       	cli
    82a2:	fa 9a       	sbi	0x1f, 2	; 31
    82a4:	f9 9a       	sbi	0x1f, 1	; 31
    82a6:	0f be       	out	0x3f, r0	; 63
    82a8:	08 95       	ret

000082aa <__eeupd_word_m2560>:
    82aa:	01 96       	adiw	r24, 0x01	; 1
    82ac:	27 2f       	mov	r18, r23
    82ae:	0e 94 44 41 	call	0x8288	; 0x8288 <__eeupd_r18_m2560>
    82b2:	0c 94 43 41 	jmp	0x8286	; 0x8286 <__eeupd_byte_m2560>

000082b6 <__eewr_byte_m2560>:
    82b6:	26 2f       	mov	r18, r22

000082b8 <__eewr_r18_m2560>:
    82b8:	f9 99       	sbic	0x1f, 1	; 31
    82ba:	fe cf       	rjmp	.-4      	; 0x82b8 <__eewr_r18_m2560>
    82bc:	1f ba       	out	0x1f, r1	; 31
    82be:	92 bd       	out	0x22, r25	; 34
    82c0:	81 bd       	out	0x21, r24	; 33
    82c2:	20 bd       	out	0x20, r18	; 32
    82c4:	0f b6       	in	r0, 0x3f	; 63
    82c6:	f8 94       	cli
    82c8:	fa 9a       	sbi	0x1f, 2	; 31
    82ca:	f9 9a       	sbi	0x1f, 1	; 31
    82cc:	0f be       	out	0x3f, r0	; 63
    82ce:	01 96       	adiw	r24, 0x01	; 1
    82d0:	08 95       	ret

000082d2 <__eewr_word_m2560>:
    82d2:	0e 94 5b 41 	call	0x82b6	; 0x82b6 <__eewr_byte_m2560>
    82d6:	27 2f       	mov	r18, r23
    82d8:	0c 94 5c 41 	jmp	0x82b8	; 0x82b8 <__eewr_r18_m2560>

000082dc <_exit>:
    82dc:	ff cf       	rjmp	.-2      	; 0x82dc <_exit>
