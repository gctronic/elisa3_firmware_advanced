
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800200  00006558  000065ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006558  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026d  00800326  00800326  00006712  2**0
                  ALLOC
  3 .stab         0000267c  00000000  00000000  00006714  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008f2  00000000  00000000  00008d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b8  00000000  00000000  00009682  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001283  00000000  00000000  0000993a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004bb4  00000000  00000000  0000abbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000181a  00000000  00000000  0000f771  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005a9b  00000000  00000000  00010f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007e0  00000000  00000000  00016a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000011f5  00000000  00000000  00017208  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001920  00000000  00000000  000183fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000219  00000000  00000000  00019d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000178  00000000  00000000  00019f36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 93 19 	jmp	0x3326	; 0x3326 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 a4 21 	jmp	0x4348	; 0x4348 <__vector_32>
      84:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 17 21 	jmp	0x422e	; 0x422e <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__vector_42>
      ac:	0c 94 01 21 	jmp	0x4202	; 0x4202 <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	eb 11       	cpse	r30, r11
      e6:	cf 11       	cpse	r28, r15
      e8:	9d 11       	cpse	r25, r13
      ea:	60 12       	cpse	r6, r16
      ec:	2a 12       	cpse	r2, r26
      ee:	53 12       	cpse	r5, r19
      f0:	74 11       	cpse	r23, r4
      f2:	58 11       	cpse	r21, r8
      f4:	2b 11       	cpse	r18, r11
      f6:	13 11       	cpse	r17, r3
      f8:	b4 10       	cpse	r11, r4
      fa:	b4 10       	cpse	r11, r4
      fc:	b4 10       	cpse	r11, r4
      fe:	b4 10       	cpse	r11, r4
     100:	b4 10       	cpse	r11, r4
     102:	b4 10       	cpse	r11, r4
     104:	07 11       	cpse	r16, r7
     106:	fc 10       	cpse	r15, r12
     108:	b4 10       	cpse	r11, r4
     10a:	b4 10       	cpse	r11, r4
     10c:	b4 10       	cpse	r11, r4
     10e:	b4 10       	cpse	r11, r4
     110:	b4 10       	cpse	r11, r4
     112:	b4 10       	cpse	r11, r4
     114:	b4 10       	cpse	r11, r4
     116:	b4 10       	cpse	r11, r4
     118:	b4 10       	cpse	r11, r4
     11a:	b4 10       	cpse	r11, r4
     11c:	b4 10       	cpse	r11, r4
     11e:	b4 10       	cpse	r11, r4
     120:	2b 11       	cpse	r18, r11
     122:	9d 11       	cpse	r25, r13
     124:	f0 10       	cpse	r15, r0
     126:	eb 10       	cpse	r14, r11
     128:	b4 10       	cpse	r11, r4
     12a:	b4 10       	cpse	r11, r4
     12c:	b4 10       	cpse	r11, r4
     12e:	b4 10       	cpse	r11, r4
     130:	b4 10       	cpse	r11, r4
     132:	b4 10       	cpse	r11, r4
     134:	b4 10       	cpse	r11, r4
     136:	b4 10       	cpse	r11, r4
     138:	b4 10       	cpse	r11, r4
     13a:	b4 10       	cpse	r11, r4
     13c:	b4 10       	cpse	r11, r4
     13e:	b4 10       	cpse	r11, r4
     140:	2a 12       	cpse	r2, r26
     142:	74 11       	cpse	r23, r4
     144:	b4 10       	cpse	r11, r4
     146:	b4 10       	cpse	r11, r4
     148:	eb 11       	cpse	r30, r11
     14a:	53 12       	cpse	r5, r19
     14c:	14 12       	cpse	r1, r20
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e8 e5       	ldi	r30, 0x58	; 88
     194:	f5 e6       	ldi	r31, 0x65	; 101
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a6 32       	cpi	r26, 0x26	; 38
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	15 e0       	ldi	r17, 0x05	; 5
     1a4:	a6 e2       	ldi	r26, 0x26	; 38
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a3 39       	cpi	r26, 0x93	; 147
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 ab 32 	jmp	0x6556	; 0x6556 <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	2f 92       	push	r2
     1c0:	3f 92       	push	r3
     1c2:	4f 92       	push	r4
     1c4:	5f 92       	push	r5
     1c6:	6f 92       	push	r6
     1c8:	7f 92       	push	r7
     1ca:	8f 92       	push	r8
     1cc:	9f 92       	push	r9
     1ce:	af 92       	push	r10
     1d0:	bf 92       	push	r11
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <main+0x26>
     1e4:	0f 92       	push	r0
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     1ea:	0e 94 34 19 	call	0x3268	; 0x3268 <initPeripherals>

	calibrateSensors();
     1ee:	0e 94 20 27 	call	0x4e40	; 0x4e40 <calibrateSensors>

	initBehaviors();
     1f2:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <initBehaviors>

	startTime = getTime100MicroSec();
     1f6:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
     1fa:	6b 01       	movw	r12, r22
     1fc:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     1fe:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
     202:	9b 01       	movw	r18, r22
     204:	ac 01       	movw	r20, r24
     206:	60 93 59 05 	sts	0x0559, r22
     20a:	30 93 5a 05 	sts	0x055A, r19
     20e:	40 93 5b 05 	sts	0x055B, r20
     212:	50 93 5c 05 	sts	0x055C, r21
     216:	10 92 5d 05 	sts	0x055D, r1
     21a:	10 92 5e 05 	sts	0x055E, r1
     21e:	10 92 5f 05 	sts	0x055F, r1
     222:	10 92 60 05 	sts	0x0560, r1
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     226:	aa 24       	eor	r10, r10
     228:	bb 24       	eor	r11, r11


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     22a:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     22c:	19 82       	std	Y+1, r1	; 0x01
     22e:	1a 82       	std	Y+2, r1	; 0x02
     230:	1b 82       	std	Y+3, r1	; 0x03
     232:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     234:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     236:	22 24       	eor	r2, r2
     238:	23 94       	inc	r2

	speedStepCounter = getTime100MicroSec();

	while(1) {

		currentSelector = getSelector();	// update selector position
     23a:	0e 94 0f 19 	call	0x321e	; 0x321e <getSelector>
     23e:	80 93 49 05 	sts	0x0549, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     242:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <readAccelXYZ>

		computeAngle();
     246:	0e 94 9c 2b 	call	0x5738	; 0x5738 <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     24a:	80 91 49 05 	lds	r24, 0x0549
     24e:	87 30       	cpi	r24, 0x07	; 7
     250:	09 f4       	brne	.+2      	; 0x254 <main+0x96>
     252:	c3 c1       	rjmp	.+902    	; 0x5da <main+0x41c>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     254:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     258:	6c 19       	sub	r22, r12
     25a:	7d 09       	sbc	r23, r13
     25c:	8e 09       	sbc	r24, r14
     25e:	9f 09       	sbc	r25, r15
     260:	6e 31       	cpi	r22, 0x1E	; 30
     262:	4b e4       	ldi	r20, 0x4B	; 75
     264:	74 07       	cpc	r23, r20
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	84 07       	cpc	r24, r20
     26a:	40 e0       	ldi	r20, 0x00	; 0
     26c:	94 07       	cpc	r25, r20
     26e:	08 f0       	brcs	.+2      	; 0x272 <main+0xb4>
     270:	93 c1       	rjmp	.+806    	; 0x598 <main+0x3da>

			startTime = getTime100MicroSec();
		}


		handleIRRemoteCommands();
     272:	0e 94 a2 10 	call	0x2144	; 0x2144 <handleIRRemoteCommands>


		handleRFCommands();
     276:	0e 94 4d 0b 	call	0x169a	; 0x169a <handleRFCommands>
		
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     27a:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
     27e:	9b 01       	movw	r18, r22
     280:	ac 01       	movw	r20, r24
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	cb 01       	movw	r24, r22
     288:	f0 91 59 05 	lds	r31, 0x0559
     28c:	e0 91 5a 05 	lds	r30, 0x055A
     290:	80 90 5b 05 	lds	r8, 0x055B
     294:	40 90 5c 05 	lds	r4, 0x055C
     298:	30 90 5d 05 	lds	r3, 0x055D
     29c:	50 90 5e 05 	lds	r5, 0x055E
     2a0:	60 90 5f 05 	lds	r6, 0x055F
     2a4:	70 90 60 05 	lds	r7, 0x0560
     2a8:	b2 2f       	mov	r27, r18
     2aa:	bf 1b       	sub	r27, r31
     2ac:	a1 e0       	ldi	r26, 0x01	; 1
     2ae:	2b 17       	cp	r18, r27
     2b0:	08 f0       	brcs	.+2      	; 0x2b4 <main+0xf6>
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	f3 2f       	mov	r31, r19
     2b6:	fe 1b       	sub	r31, r30
     2b8:	ef 2f       	mov	r30, r31
     2ba:	f1 e0       	ldi	r31, 0x01	; 1
     2bc:	3e 17       	cp	r19, r30
     2be:	08 f0       	brcs	.+2      	; 0x2c2 <main+0x104>
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	9e 2e       	mov	r9, r30
     2c4:	9a 1a       	sub	r9, r26
     2c6:	a9 2d       	mov	r26, r9
     2c8:	99 24       	eor	r9, r9
     2ca:	93 94       	inc	r9
     2cc:	ea 17       	cp	r30, r26
     2ce:	08 f0       	brcs	.+2      	; 0x2d2 <main+0x114>
     2d0:	99 24       	eor	r9, r9
     2d2:	f9 29       	or	r31, r9
     2d4:	e4 2f       	mov	r30, r20
     2d6:	e8 19       	sub	r30, r8
     2d8:	8e 2e       	mov	r8, r30
     2da:	e1 e0       	ldi	r30, 0x01	; 1
     2dc:	48 15       	cp	r20, r8
     2de:	08 f0       	brcs	.+2      	; 0x2e2 <main+0x124>
     2e0:	e0 e0       	ldi	r30, 0x00	; 0
     2e2:	98 2c       	mov	r9, r8
     2e4:	9f 1a       	sub	r9, r31
     2e6:	f1 e0       	ldi	r31, 0x01	; 1
     2e8:	89 14       	cp	r8, r9
     2ea:	08 f0       	brcs	.+2      	; 0x2ee <main+0x130>
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ef 2b       	or	r30, r31
     2f0:	f5 2f       	mov	r31, r21
     2f2:	f4 19       	sub	r31, r4
     2f4:	4f 2e       	mov	r4, r31
     2f6:	f1 e0       	ldi	r31, 0x01	; 1
     2f8:	54 15       	cp	r21, r4
     2fa:	08 f0       	brcs	.+2      	; 0x2fe <main+0x140>
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	84 2c       	mov	r8, r4
     300:	8e 1a       	sub	r8, r30
     302:	e1 e0       	ldi	r30, 0x01	; 1
     304:	48 14       	cp	r4, r8
     306:	08 f0       	brcs	.+2      	; 0x30a <main+0x14c>
     308:	e0 e0       	ldi	r30, 0x00	; 0
     30a:	fe 2b       	or	r31, r30
     30c:	31 94       	neg	r3
     30e:	e1 e0       	ldi	r30, 0x01	; 1
     310:	63 15       	cp	r22, r3
     312:	08 f0       	brcs	.+2      	; 0x316 <main+0x158>
     314:	e0 e0       	ldi	r30, 0x00	; 0
     316:	43 2c       	mov	r4, r3
     318:	4f 1a       	sub	r4, r31
     31a:	f1 e0       	ldi	r31, 0x01	; 1
     31c:	34 14       	cp	r3, r4
     31e:	08 f0       	brcs	.+2      	; 0x322 <main+0x164>
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ef 2b       	or	r30, r31
     324:	51 94       	neg	r5
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	75 15       	cp	r23, r5
     32a:	08 f0       	brcs	.+2      	; 0x32e <main+0x170>
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	35 2c       	mov	r3, r5
     330:	3e 1a       	sub	r3, r30
     332:	e1 e0       	ldi	r30, 0x01	; 1
     334:	53 14       	cp	r5, r3
     336:	08 f0       	brcs	.+2      	; 0x33a <main+0x17c>
     338:	e0 e0       	ldi	r30, 0x00	; 0
     33a:	fe 2b       	or	r31, r30
     33c:	61 94       	neg	r6
     33e:	e1 e0       	ldi	r30, 0x01	; 1
     340:	86 15       	cp	r24, r6
     342:	08 f0       	brcs	.+2      	; 0x346 <main+0x188>
     344:	e0 e0       	ldi	r30, 0x00	; 0
     346:	96 2d       	mov	r25, r6
     348:	9f 1b       	sub	r25, r31
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	69 16       	cp	r6, r25
     34e:	08 f0       	brcs	.+2      	; 0x352 <main+0x194>
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	e8 2b       	or	r30, r24
     354:	71 94       	neg	r7
     356:	7e 16       	cp	r7, r30
     358:	09 f0       	breq	.+2      	; 0x35c <main+0x19e>
     35a:	8b c0       	rjmp	.+278    	; 0x472 <main+0x2b4>
     35c:	99 23       	and	r25, r25
     35e:	09 f0       	breq	.+2      	; 0x362 <main+0x1a4>
     360:	88 c0       	rjmp	.+272    	; 0x472 <main+0x2b4>
     362:	33 20       	and	r3, r3
     364:	09 f0       	breq	.+2      	; 0x368 <main+0x1aa>
     366:	85 c0       	rjmp	.+266    	; 0x472 <main+0x2b4>
     368:	44 20       	and	r4, r4
     36a:	09 f0       	breq	.+2      	; 0x36e <main+0x1b0>
     36c:	82 c0       	rjmp	.+260    	; 0x472 <main+0x2b4>
     36e:	88 20       	and	r8, r8
     370:	09 f0       	breq	.+2      	; 0x374 <main+0x1b6>
     372:	7f c0       	rjmp	.+254    	; 0x472 <main+0x2b4>
     374:	99 20       	and	r9, r9
     376:	09 f0       	breq	.+2      	; 0x37a <main+0x1bc>
     378:	7c c0       	rjmp	.+248    	; 0x472 <main+0x2b4>
     37a:	a2 30       	cpi	r26, 0x02	; 2
     37c:	08 f0       	brcs	.+2      	; 0x380 <main+0x1c2>
     37e:	79 c0       	rjmp	.+242    	; 0x472 <main+0x2b4>
     380:	a1 30       	cpi	r26, 0x01	; 1
     382:	09 f4       	brne	.+2      	; 0x386 <main+0x1c8>
     384:	73 c0       	rjmp	.+230    	; 0x46c <main+0x2ae>
				pwm_intermediate_left_desired = pwm_left_desired;
			}

		}

		if(currentSelector!=6 && currentSelector!=15) {
     386:	80 91 49 05 	lds	r24, 0x0549
     38a:	86 30       	cpi	r24, 0x06	; 6
     38c:	09 f4       	brne	.+2      	; 0x390 <main+0x1d2>
     38e:	de c0       	rjmp	.+444    	; 0x54c <main+0x38e>
     390:	8f 30       	cpi	r24, 0x0F	; 15
     392:	09 f0       	breq	.+2      	; 0x396 <main+0x1d8>
     394:	4b c0       	rjmp	.+150    	; 0x42c <main+0x26e>
					break;

		}

		if(currentSelector != 0) {
			handleMotorsWithSpeedController();  
     396:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <handleMotorsWithSpeedController>
     39a:	80 91 49 05 	lds	r24, 0x0549
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     39e:	08 17       	cp	r16, r24
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <main+0x1e6>
     3a2:	4b cf       	rjmp	.-362    	; 0x23a <main+0x7c>
			disableObstacleAvoidance();
     3a4:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <disableObstacleAvoidance>
			disableCliffAvoidance();
     3a8:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     3ac:	80 91 0b 01 	lds	r24, 0x010B
     3b0:	81 60       	ori	r24, 0x01	; 1
     3b2:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     3b6:	80 91 0b 01 	lds	r24, 0x010B
     3ba:	82 60       	ori	r24, 0x02	; 2
     3bc:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     3c0:	80 91 0b 01 	lds	r24, 0x010B
     3c4:	84 60       	ori	r24, 0x04	; 4
     3c6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     3ca:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     3cc:	80 91 0b 01 	lds	r24, 0x010B
     3d0:	80 61       	ori	r24, 0x10	; 16
     3d2:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     3d6:	80 91 0b 01 	lds	r24, 0x010B
     3da:	80 62       	ori	r24, 0x20	; 32
     3dc:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     3e0:	80 91 0b 01 	lds	r24, 0x010B
     3e4:	80 64       	ori	r24, 0x40	; 64
     3e6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     3ea:	80 91 0b 01 	lds	r24, 0x010B
     3ee:	80 68       	ori	r24, 0x80	; 128
     3f0:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     3f4:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     3f8:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     3fc:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	0e 94 28 24 	call	0x4850	; 0x4850 <updateRedLed>
			updateGreenLed(pwm_green);
     406:	80 91 0d 02 	lds	r24, 0x020D
     40a:	0e 94 3c 24 	call	0x4878	; 0x4878 <updateGreenLed>
			updateBlueLed(pwm_blue);
     40e:	80 91 0e 02 	lds	r24, 0x020E
     412:	0e 94 50 24 	call	0x48a0	; 0x48a0 <updateBlueLed>
			setRightSpeed(0);
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
			setLeftSpeed(0);
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
			rgbState = 0;
     422:	10 92 16 04 	sts	0x0416, r1
     426:	00 91 49 05 	lds	r16, 0x0549
     42a:	07 cf       	rjmp	.-498    	; 0x23a <main+0x7c>
			}

		}

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
		}

		switch(currentSelector) {
     432:	90 91 49 05 	lds	r25, 0x0549
     436:	89 2f       	mov	r24, r25
     438:	96 30       	cpi	r25, 0x06	; 6
     43a:	09 f4       	brne	.+2      	; 0x43e <main+0x280>
     43c:	87 c0       	rjmp	.+270    	; 0x54c <main+0x38e>
     43e:	97 30       	cpi	r25, 0x07	; 7
     440:	08 f0       	brcs	.+2      	; 0x444 <main+0x286>
     442:	ec c0       	rjmp	.+472    	; 0x61c <main+0x45e>
     444:	92 30       	cpi	r25, 0x02	; 2
     446:	09 f4       	brne	.+2      	; 0x44a <main+0x28c>
     448:	e4 c0       	rjmp	.+456    	; 0x612 <main+0x454>
     44a:	93 30       	cpi	r25, 0x03	; 3
     44c:	08 f0       	brcs	.+2      	; 0x450 <main+0x292>
     44e:	db c1       	rjmp	.+950    	; 0x806 <main+0x648>
     450:	99 23       	and	r25, r25
     452:	09 f4       	brne	.+2      	; 0x456 <main+0x298>
     454:	ba c1       	rjmp	.+884    	; 0x7ca <main+0x60c>
     456:	91 30       	cpi	r25, 0x01	; 1
     458:	21 f4       	brne	.+8      	; 0x462 <main+0x2a4>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     45a:	0e 94 dd 23 	call	0x47ba	; 0x47ba <enableObstacleAvoidance>
     45e:	90 91 49 05 	lds	r25, 0x0549
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector != 0) {
     462:	99 23       	and	r25, r25
     464:	09 f0       	breq	.+2      	; 0x468 <main+0x2aa>
     466:	97 cf       	rjmp	.-210    	; 0x396 <main+0x1d8>
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	99 cf       	rjmp	.-206    	; 0x39e <main+0x1e0>
		handleIRRemoteCommands();


		handleRFCommands();
		
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     46c:	b0 39       	cpi	r27, 0x90	; 144
     46e:	08 f4       	brcc	.+2      	; 0x472 <main+0x2b4>
     470:	8a cf       	rjmp	.-236    	; 0x386 <main+0x1c8>
			speedStepCounter = getTime100MicroSec();
     472:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
     476:	9b 01       	movw	r18, r22
     478:	ac 01       	movw	r20, r24
     47a:	60 93 59 05 	sts	0x0559, r22
     47e:	30 93 5a 05 	sts	0x055A, r19
     482:	40 93 5b 05 	sts	0x055B, r20
     486:	50 93 5c 05 	sts	0x055C, r21
     48a:	10 92 5d 05 	sts	0x055D, r1
     48e:	10 92 5e 05 	sts	0x055E, r1
     492:	10 92 5f 05 	sts	0x055F, r1
     496:	10 92 60 05 	sts	0x0560, r1

			if(softAccEnabled) {
     49a:	80 91 61 05 	lds	r24, 0x0561
     49e:	88 23       	and	r24, r24
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <main+0x2e6>
     4a2:	8e c0       	rjmp	.+284    	; 0x5c0 <main+0x402>
				if(pwm_right_desired == 0) {
     4a4:	80 91 f9 03 	lds	r24, 0x03F9
     4a8:	90 91 fa 03 	lds	r25, 0x03FA
     4ac:	00 97       	sbiw	r24, 0x00	; 0
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <main+0x2f4>
     4b0:	fb c0       	rjmp	.+502    	; 0x6a8 <main+0x4ea>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     4b2:	20 91 fd 03 	lds	r18, 0x03FD
     4b6:	30 91 fe 03 	lds	r19, 0x03FE
     4ba:	28 9f       	mul	r18, r24
     4bc:	a0 01       	movw	r20, r0
     4be:	29 9f       	mul	r18, r25
     4c0:	50 0d       	add	r21, r0
     4c2:	38 9f       	mul	r19, r24
     4c4:	50 0d       	add	r21, r0
     4c6:	11 24       	eor	r1, r1
     4c8:	57 fd       	sbrc	r21, 7
     4ca:	ee c0       	rjmp	.+476    	; 0x6a8 <main+0x4ea>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     4cc:	28 17       	cp	r18, r24
     4ce:	39 07       	cpc	r19, r25
     4d0:	0c f0       	brlt	.+2      	; 0x4d4 <main+0x316>
     4d2:	94 c2       	rjmp	.+1320   	; 0x9fc <main+0x83e>
					pwm_intermediate_right_desired += speedStep;
     4d4:	40 91 18 02 	lds	r20, 0x0218
     4d8:	24 0f       	add	r18, r20
     4da:	31 1d       	adc	r19, r1
     4dc:	30 93 fe 03 	sts	0x03FE, r19
     4e0:	20 93 fd 03 	sts	0x03FD, r18
					if(pwm_intermediate_right_desired > pwm_right_desired) {
     4e4:	82 17       	cp	r24, r18
     4e6:	93 07       	cpc	r25, r19
     4e8:	24 f4       	brge	.+8      	; 0x4f2 <main+0x334>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
     4ea:	90 93 fe 03 	sts	0x03FE, r25
     4ee:	80 93 fd 03 	sts	0x03FD, r24
					}					
				}
	
				if(pwm_left_desired == 0) {
     4f2:	80 91 fb 03 	lds	r24, 0x03FB
     4f6:	90 91 fc 03 	lds	r25, 0x03FC
     4fa:	00 97       	sbiw	r24, 0x00	; 0
     4fc:	09 f4       	brne	.+2      	; 0x500 <main+0x342>
     4fe:	df c0       	rjmp	.+446    	; 0x6be <main+0x500>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     500:	20 91 ff 03 	lds	r18, 0x03FF
     504:	30 91 00 04 	lds	r19, 0x0400
     508:	28 9f       	mul	r18, r24
     50a:	a0 01       	movw	r20, r0
     50c:	29 9f       	mul	r18, r25
     50e:	50 0d       	add	r21, r0
     510:	38 9f       	mul	r19, r24
     512:	50 0d       	add	r21, r0
     514:	11 24       	eor	r1, r1
     516:	57 fd       	sbrc	r21, 7
     518:	d2 c0       	rjmp	.+420    	; 0x6be <main+0x500>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     51a:	28 17       	cp	r18, r24
     51c:	39 07       	cpc	r19, r25
     51e:	0c f0       	brlt	.+2      	; 0x522 <main+0x364>
     520:	7e c2       	rjmp	.+1276   	; 0xa1e <main+0x860>
					pwm_intermediate_left_desired += speedStep;
     522:	40 91 18 02 	lds	r20, 0x0218
     526:	24 0f       	add	r18, r20
     528:	31 1d       	adc	r19, r1
     52a:	30 93 00 04 	sts	0x0400, r19
     52e:	20 93 ff 03 	sts	0x03FF, r18
					if(pwm_intermediate_left_desired > pwm_left_desired) {
     532:	82 17       	cp	r24, r18
     534:	93 07       	cpc	r25, r19
     536:	0c f0       	brlt	.+2      	; 0x53a <main+0x37c>
     538:	26 cf       	rjmp	.-436    	; 0x386 <main+0x1c8>
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
				pwm_intermediate_left_desired = pwm_left_desired;
     53a:	90 93 00 04 	sts	0x0400, r25
     53e:	80 93 ff 03 	sts	0x03FF, r24
			}

		}

		if(currentSelector!=6 && currentSelector!=15) {
     542:	80 91 49 05 	lds	r24, 0x0549
     546:	86 30       	cpi	r24, 0x06	; 6
     548:	09 f0       	breq	.+2      	; 0x54c <main+0x38e>
     54a:	22 cf       	rjmp	.-444    	; 0x390 <main+0x1d2>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     54c:	90 91 1d 05 	lds	r25, 0x051D
     550:	91 30       	cpi	r25, 0x01	; 1
     552:	09 f4       	brne	.+2      	; 0x556 <main+0x398>
     554:	f0 c2       	rjmp	.+1504   	; 0xb36 <main+0x978>
     556:	91 30       	cpi	r25, 0x01	; 1
     558:	08 f0       	brcs	.+2      	; 0x55c <main+0x39e>
     55a:	b5 c2       	rjmp	.+1386   	; 0xac6 <main+0x908>
						case 0:
							setRightSpeed(0);
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
							setLeftSpeed(0);
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
							turnOffGreenLeds();
     568:	0e 94 01 25 	call	0x4a02	; 0x4a02 <turnOffGreenLeds>
							pwm_red=255;
     56c:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     570:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     574:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     578:	8f ef       	ldi	r24, 0xFF	; 255
     57a:	0e 94 28 24 	call	0x4850	; 0x4850 <updateRedLed>
							updateGreenLed(pwm_green);
     57e:	80 91 0d 02 	lds	r24, 0x020D
     582:	0e 94 3c 24 	call	0x4878	; 0x4878 <updateGreenLed>
							updateBlueLed(pwm_blue);
     586:	80 91 0e 02 	lds	r24, 0x020E
     58a:	0e 94 50 24 	call	0x48a0	; 0x48a0 <updateBlueLed>
							LED_IR1_HIGH;
     58e:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     590:	45 9a       	sbi	0x08, 5	; 8
     592:	90 91 49 05 	lds	r25, 0x0549
							break;
     596:	65 cf       	rjmp	.-310    	; 0x462 <main+0x2a4>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     598:	0e 94 12 1a 	call	0x3424	; 0x3424 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     59c:	80 91 49 05 	lds	r24, 0x0549
     5a0:	98 2f       	mov	r25, r24
     5a2:	94 50       	subi	r25, 0x04	; 4
     5a4:	92 30       	cpi	r25, 0x02	; 2
     5a6:	08 f4       	brcc	.+2      	; 0x5aa <main+0x3ec>
     5a8:	a3 c1       	rjmp	.+838    	; 0x8f0 <main+0x732>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     5aa:	87 30       	cpi	r24, 0x07	; 7
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <main+0x3f2>
     5ae:	cb c1       	rjmp	.+918    	; 0x946 <main+0x788>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     5b0:	86 30       	cpi	r24, 0x06	; 6
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <main+0x3f8>
     5b4:	0f c1       	rjmp	.+542    	; 0x7d4 <main+0x616>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     5b6:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
     5ba:	6b 01       	movw	r12, r22
     5bc:	7c 01       	movw	r14, r24
     5be:	59 ce       	rjmp	.-846    	; 0x272 <main+0xb4>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
     5c0:	80 91 f9 03 	lds	r24, 0x03F9
     5c4:	90 91 fa 03 	lds	r25, 0x03FA
     5c8:	90 93 fe 03 	sts	0x03FE, r25
     5cc:	80 93 fd 03 	sts	0x03FD, r24
				pwm_intermediate_left_desired = pwm_left_desired;
     5d0:	80 91 fb 03 	lds	r24, 0x03FB
     5d4:	90 91 fc 03 	lds	r25, 0x03FC
     5d8:	b0 cf       	rjmp	.-160    	; 0x53a <main+0x37c>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     5da:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
     5de:	29 81       	ldd	r18, Y+1	; 0x01
     5e0:	3a 81       	ldd	r19, Y+2	; 0x02
     5e2:	4b 81       	ldd	r20, Y+3	; 0x03
     5e4:	5c 81       	ldd	r21, Y+4	; 0x04
     5e6:	62 1b       	sub	r22, r18
     5e8:	73 0b       	sbc	r23, r19
     5ea:	84 0b       	sbc	r24, r20
     5ec:	95 0b       	sbc	r25, r21
     5ee:	68 3c       	cpi	r22, 0xC8	; 200
     5f0:	32 e1       	ldi	r19, 0x12	; 18
     5f2:	73 07       	cpc	r23, r19
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	83 07       	cpc	r24, r19
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	93 07       	cpc	r25, r19
     5fc:	08 f4       	brcc	.+2      	; 0x600 <main+0x442>
     5fe:	2a ce       	rjmp	.-940    	; 0x254 <main+0x96>
				pwm_red = 255;
     600:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     604:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     608:	10 93 0e 02 	sts	0x020E, r17
     60c:	23 ce       	rjmp	.-954    	; 0x254 <main+0x96>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     60e:	0e 94 dd 23 	call	0x47ba	; 0x47ba <enableObstacleAvoidance>
					enableCliffAvoidance();
     612:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <enableCliffAvoidance>
     616:	90 91 49 05 	lds	r25, 0x0549
					break;
     61a:	23 cf       	rjmp	.-442    	; 0x462 <main+0x2a4>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     61c:	9a 30       	cpi	r25, 0x0A	; 10
     61e:	09 f4       	brne	.+2      	; 0x622 <main+0x464>
     620:	53 c0       	rjmp	.+166    	; 0x6c8 <main+0x50a>
     622:	9b 30       	cpi	r25, 0x0B	; 11
     624:	f8 f4       	brcc	.+62     	; 0x664 <main+0x4a6>
     626:	98 30       	cpi	r25, 0x08	; 8
     628:	09 f4       	brne	.+2      	; 0x62c <main+0x46e>
     62a:	68 c0       	rjmp	.+208    	; 0x6fc <main+0x53e>
     62c:	99 30       	cpi	r25, 0x09	; 9
     62e:	08 f4       	brcc	.+2      	; 0x632 <main+0x474>
     630:	7f c0       	rjmp	.+254    	; 0x730 <main+0x572>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 9:	if(leftMotSteps <= 3000) {
     632:	80 91 dd 03 	lds	r24, 0x03DD
     636:	90 91 de 03 	lds	r25, 0x03DE
     63a:	a0 91 df 03 	lds	r26, 0x03DF
     63e:	b0 91 e0 03 	lds	r27, 0x03E0
     642:	89 3b       	cpi	r24, 0xB9	; 185
     644:	fb e0       	ldi	r31, 0x0B	; 11
     646:	9f 07       	cpc	r25, r31
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	af 07       	cpc	r26, r31
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	bf 07       	cpc	r27, r31
     650:	14 f1       	brlt	.+68     	; 0x696 <main+0x4d8>

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
						setRightSpeed(0);
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
     65e:	90 91 49 05 	lds	r25, 0x0549
     662:	ff ce       	rjmp	.-514    	; 0x462 <main+0x2a4>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     664:	9c 30       	cpi	r25, 0x0C	; 12
     666:	09 f4       	brne	.+2      	; 0x66a <main+0x4ac>
     668:	29 c1       	rjmp	.+594    	; 0x8bc <main+0x6fe>
     66a:	9c 30       	cpi	r25, 0x0C	; 12
     66c:	08 f4       	brcc	.+2      	; 0x670 <main+0x4b2>
     66e:	0c c1       	rjmp	.+536    	; 0x888 <main+0x6ca>
     670:	9d 30       	cpi	r25, 0x0D	; 13
     672:	09 f0       	breq	.+2      	; 0x676 <main+0x4b8>
     674:	f6 ce       	rjmp	.-532    	; 0x462 <main+0x2a4>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
     676:	80 91 dd 03 	lds	r24, 0x03DD
     67a:	90 91 de 03 	lds	r25, 0x03DE
     67e:	a0 91 df 03 	lds	r26, 0x03DF
     682:	b0 91 e0 03 	lds	r27, 0x03E0
     686:	89 35       	cpi	r24, 0x59	; 89
     688:	5b e1       	ldi	r21, 0x1B	; 27
     68a:	95 07       	cpc	r25, r21
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	a5 07       	cpc	r26, r21
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	b5 07       	cpc	r27, r21
     694:	f4 f6       	brge	.-68     	; 0x652 <main+0x494>
						setLeftSpeed(40);
     696:	88 e2       	ldi	r24, 0x28	; 40
     698:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
						setRightSpeed(40);
     69c:	88 e2       	ldi	r24, 0x28	; 40
     69e:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
     6a2:	90 91 49 05 	lds	r25, 0x0549
     6a6:	dd ce       	rjmp	.-582    	; 0x462 <main+0x2a4>

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
     6a8:	10 92 fe 03 	sts	0x03FE, r1
     6ac:	10 92 fd 03 	sts	0x03FD, r1
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
     6b0:	80 91 fb 03 	lds	r24, 0x03FB
     6b4:	90 91 fc 03 	lds	r25, 0x03FC
     6b8:	00 97       	sbiw	r24, 0x00	; 0
     6ba:	09 f0       	breq	.+2      	; 0x6be <main+0x500>
     6bc:	21 cf       	rjmp	.-446    	; 0x500 <main+0x342>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
     6be:	10 92 00 04 	sts	0x0400, r1
     6c2:	10 92 ff 03 	sts	0x03FF, r1
     6c6:	5f ce       	rjmp	.-834    	; 0x386 <main+0x1c8>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 10:if(leftMotSteps <= 4000) {
     6c8:	80 91 dd 03 	lds	r24, 0x03DD
     6cc:	90 91 de 03 	lds	r25, 0x03DE
     6d0:	a0 91 df 03 	lds	r26, 0x03DF
     6d4:	b0 91 e0 03 	lds	r27, 0x03E0
     6d8:	81 3a       	cpi	r24, 0xA1	; 161
     6da:	2f e0       	ldi	r18, 0x0F	; 15
     6dc:	92 07       	cpc	r25, r18
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	a2 07       	cpc	r26, r18
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	b2 07       	cpc	r27, r18
     6e6:	0c f0       	brlt	.+2      	; 0x6ea <main+0x52c>
     6e8:	b4 cf       	rjmp	.-152    	; 0x652 <main+0x494>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     6ea:	88 e2       	ldi	r24, 0x28	; 40
     6ec:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
						setRightSpeed(40);
     6f0:	88 e2       	ldi	r24, 0x28	; 40
     6f2:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
     6f6:	90 91 49 05 	lds	r25, 0x0549
     6fa:	b3 ce       	rjmp	.-666    	; 0x462 <main+0x2a4>
					updateGreenLed(pwm_green);
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	if(leftMotSteps <= 2000) {
     6fc:	80 91 dd 03 	lds	r24, 0x03DD
     700:	90 91 de 03 	lds	r25, 0x03DE
     704:	a0 91 df 03 	lds	r26, 0x03DF
     708:	b0 91 e0 03 	lds	r27, 0x03E0
     70c:	81 3d       	cpi	r24, 0xD1	; 209
     70e:	e7 e0       	ldi	r30, 0x07	; 7
     710:	9e 07       	cpc	r25, r30
     712:	e0 e0       	ldi	r30, 0x00	; 0
     714:	ae 07       	cpc	r26, r30
     716:	e0 e0       	ldi	r30, 0x00	; 0
     718:	be 07       	cpc	r27, r30
     71a:	0c f0       	brlt	.+2      	; 0x71e <main+0x560>
     71c:	9a cf       	rjmp	.-204    	; 0x652 <main+0x494>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     71e:	88 e2       	ldi	r24, 0x28	; 40
     720:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
						setRightSpeed(40);
     724:	88 e2       	ldi	r24, 0x28	; 40
     726:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
     72a:	90 91 49 05 	lds	r25, 0x0549
     72e:	99 ce       	rjmp	.-718    	; 0x462 <main+0x2a4>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     730:	80 91 4d 05 	lds	r24, 0x054D
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	09 f4       	brne	.+2      	; 0x73a <main+0x57c>
     738:	d0 c3       	rjmp	.+1952   	; 0xeda <main+0xd1c>
     73a:	83 30       	cpi	r24, 0x03	; 3
     73c:	08 f0       	brcs	.+2      	; 0x740 <main+0x582>
     73e:	80 c1       	rjmp	.+768    	; 0xa40 <main+0x882>
     740:	88 23       	and	r24, r24
     742:	09 f0       	breq	.+2      	; 0x746 <main+0x588>
     744:	87 c3       	rjmp	.+1806   	; 0xe54 <main+0xc96>
						case 0:	// move around
							turnOffGreenLeds();
     746:	0e 94 01 25 	call	0x4a02	; 0x4a02 <turnOffGreenLeds>
							GREEN_LED0_ON;
     74a:	80 91 0b 01 	lds	r24, 0x010B
     74e:	8e 7f       	andi	r24, 0xFE	; 254
     750:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     754:	10 92 4e 05 	sts	0x054E, r1
							enableObstacleAvoidance();
     758:	0e 94 dd 23 	call	0x47ba	; 0x47ba <enableObstacleAvoidance>
							setRightSpeed(20);
     75c:	84 e1       	ldi	r24, 0x14	; 20
     75e:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
							setLeftSpeed(20);
     762:	84 e1       	ldi	r24, 0x14	; 20
     764:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     768:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
     76c:	9b 01       	movw	r18, r22
     76e:	ac 01       	movw	r20, r24
     770:	60 93 55 05 	sts	0x0555, r22
     774:	70 93 56 05 	sts	0x0556, r23
     778:	80 93 57 05 	sts	0x0557, r24
     77c:	90 93 58 05 	sts	0x0558, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     780:	80 91 51 05 	lds	r24, 0x0551
     784:	90 91 52 05 	lds	r25, 0x0552
     788:	a0 91 53 05 	lds	r26, 0x0553
     78c:	b0 91 54 05 	lds	r27, 0x0554
     790:	28 1b       	sub	r18, r24
     792:	39 0b       	sbc	r19, r25
     794:	4a 0b       	sbc	r20, r26
     796:	5b 0b       	sbc	r21, r27
     798:	23 33       	cpi	r18, 0x33	; 51
     79a:	6f ee       	ldi	r22, 0xEF	; 239
     79c:	36 07       	cpc	r19, r22
     79e:	62 e0       	ldi	r22, 0x02	; 2
     7a0:	46 07       	cpc	r20, r22
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	56 07       	cpc	r21, r22
     7a6:	10 f0       	brcs	.+4      	; 0x7ac <main+0x5ee>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     7a8:	20 92 4d 05 	sts	0x054D, r2
							//pwm_green = 0;
							//pwm_blue = 0;													
							break;							
					}

					updateRedLed(pwm_red);
     7ac:	80 91 0c 02 	lds	r24, 0x020C
     7b0:	0e 94 28 24 	call	0x4850	; 0x4850 <updateRedLed>
					updateGreenLed(pwm_green);
     7b4:	80 91 0d 02 	lds	r24, 0x020D
     7b8:	0e 94 3c 24 	call	0x4878	; 0x4878 <updateGreenLed>
					updateBlueLed(pwm_blue);
     7bc:	80 91 0e 02 	lds	r24, 0x020E
     7c0:	0e 94 50 24 	call	0x48a0	; 0x48a0 <updateBlueLed>
     7c4:	90 91 49 05 	lds	r25, 0x0549

					break;
     7c8:	4c ce       	rjmp	.-872    	; 0x462 <main+0x2a4>
		}

		switch(currentSelector) {
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     7ca:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <handleMotorsWithNoController>
     7ce:	90 91 49 05 	lds	r25, 0x0549
					break;
     7d2:	47 ce       	rjmp	.-882    	; 0x462 <main+0x2a4>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     7d4:	80 91 1d 05 	lds	r24, 0x051D
     7d8:	81 30       	cpi	r24, 0x01	; 1
     7da:	09 f0       	breq	.+2      	; 0x7de <main+0x620>
     7dc:	ec ce       	rjmp	.-552    	; 0x5b6 <main+0x3f8>
     7de:	90 91 13 04 	lds	r25, 0x0413
     7e2:	92 30       	cpi	r25, 0x02	; 2
     7e4:	08 f0       	brcs	.+2      	; 0x7e8 <main+0x62a>
     7e6:	e7 ce       	rjmp	.-562    	; 0x5b6 <main+0x3f8>
					if(rgbState == 0) {
     7e8:	90 91 16 04 	lds	r25, 0x0416
     7ec:	99 23       	and	r25, r25
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <main+0x634>
     7f0:	07 c5       	rjmp	.+2574   	; 0x1200 <main+0x1042>
						pwm_red = 254;
     7f2:	4e ef       	ldi	r20, 0xFE	; 254
     7f4:	40 93 0c 02 	sts	0x020C, r20
						pwm_green = 255;
     7f8:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     7fc:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     800:	80 93 16 04 	sts	0x0416, r24
     804:	d8 ce       	rjmp	.-592    	; 0x5b6 <main+0x3f8>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     806:	94 30       	cpi	r25, 0x04	; 4
     808:	d1 f0       	breq	.+52     	; 0x83e <main+0x680>
     80a:	95 30       	cpi	r25, 0x05	; 5
     80c:	08 f4       	brcc	.+2      	; 0x810 <main+0x652>
     80e:	ff ce       	rjmp	.-514    	; 0x60e <main+0x450>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     810:	80 91 0c 02 	lds	r24, 0x020C
     814:	0e 94 28 24 	call	0x4850	; 0x4850 <updateRedLed>
					updateGreenLed(pwm_green);
     818:	80 91 0d 02 	lds	r24, 0x020D
     81c:	0e 94 3c 24 	call	0x4878	; 0x4878 <updateGreenLed>
					updateBlueLed(pwm_blue);
     820:	80 91 0e 02 	lds	r24, 0x020E
     824:	0e 94 50 24 	call	0x48a0	; 0x48a0 <updateBlueLed>
					enableObstacleAvoidance();
     828:	0e 94 dd 23 	call	0x47ba	; 0x47ba <enableObstacleAvoidance>
					setLeftSpeed(25);
     82c:	89 e1       	ldi	r24, 0x19	; 25
     82e:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
					setRightSpeed(25);
     832:	89 e1       	ldi	r24, 0x19	; 25
     834:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
     838:	90 91 49 05 	lds	r25, 0x0549
					break;
     83c:	12 ce       	rjmp	.-988    	; 0x462 <main+0x2a4>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     83e:	80 91 0b 01 	lds	r24, 0x010B
     842:	8e 7f       	andi	r24, 0xFE	; 254
     844:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     848:	80 91 0b 01 	lds	r24, 0x010B
     84c:	8d 7f       	andi	r24, 0xFD	; 253
     84e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     852:	80 91 0b 01 	lds	r24, 0x010B
     856:	8b 7f       	andi	r24, 0xFB	; 251
     858:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     85c:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     85e:	80 91 0b 01 	lds	r24, 0x010B
     862:	8f 7e       	andi	r24, 0xEF	; 239
     864:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     868:	80 91 0b 01 	lds	r24, 0x010B
     86c:	8f 7d       	andi	r24, 0xDF	; 223
     86e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     872:	80 91 0b 01 	lds	r24, 0x010B
     876:	8f 7b       	andi	r24, 0xBF	; 191
     878:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     87c:	80 91 0b 01 	lds	r24, 0x010B
     880:	8f 77       	andi	r24, 0x7F	; 127
     882:	80 93 0b 01 	sts	0x010B, r24
     886:	92 cf       	rjmp	.-220    	; 0x7ac <main+0x5ee>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 11:if(leftMotSteps <= 5000) {
     888:	80 91 dd 03 	lds	r24, 0x03DD
     88c:	90 91 de 03 	lds	r25, 0x03DE
     890:	a0 91 df 03 	lds	r26, 0x03DF
     894:	b0 91 e0 03 	lds	r27, 0x03E0
     898:	89 38       	cpi	r24, 0x89	; 137
     89a:	33 e1       	ldi	r19, 0x13	; 19
     89c:	93 07       	cpc	r25, r19
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	a3 07       	cpc	r26, r19
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	b3 07       	cpc	r27, r19
     8a6:	0c f0       	brlt	.+2      	; 0x8aa <main+0x6ec>
     8a8:	d4 ce       	rjmp	.-600    	; 0x652 <main+0x494>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     8aa:	88 e2       	ldi	r24, 0x28	; 40
     8ac:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
						setRightSpeed(40);
     8b0:	88 e2       	ldi	r24, 0x28	; 40
     8b2:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
     8b6:	90 91 49 05 	lds	r25, 0x0549
     8ba:	d3 cd       	rjmp	.-1114   	; 0x462 <main+0x2a4>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     8bc:	80 91 dd 03 	lds	r24, 0x03DD
     8c0:	90 91 de 03 	lds	r25, 0x03DE
     8c4:	a0 91 df 03 	lds	r26, 0x03DF
     8c8:	b0 91 e0 03 	lds	r27, 0x03E0
     8cc:	81 37       	cpi	r24, 0x71	; 113
     8ce:	47 e1       	ldi	r20, 0x17	; 23
     8d0:	94 07       	cpc	r25, r20
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	a4 07       	cpc	r26, r20
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	b4 07       	cpc	r27, r20
     8da:	0c f4       	brge	.+2      	; 0x8de <main+0x720>
     8dc:	dc ce       	rjmp	.-584    	; 0x696 <main+0x4d8>
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
						setRightSpeed(0);
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
     8ea:	90 91 49 05 	lds	r25, 0x0549
     8ee:	b9 cd       	rjmp	.-1166   	; 0x462 <main+0x2a4>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     8f0:	0e 94 1d 30 	call	0x603a	; 0x603a <rand>
     8f4:	6e e1       	ldi	r22, 0x1E	; 30
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__divmodhi4>
     8fc:	a8 0e       	add	r10, r24
     8fe:	b9 1e       	adc	r11, r25
     900:	5f e7       	ldi	r21, 0x7F	; 127
     902:	a5 22       	and	r10, r21
     904:	bb 24       	eor	r11, r11

				switch(rgbState) {
     906:	80 91 16 04 	lds	r24, 0x0416
     90a:	81 30       	cpi	r24, 0x01	; 1
     90c:	09 f4       	brne	.+2      	; 0x910 <main+0x752>
     90e:	dd c2       	rjmp	.+1466   	; 0xeca <main+0xd0c>
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	08 f0       	brcs	.+2      	; 0x916 <main+0x758>
     914:	95 c2       	rjmp	.+1322   	; 0xe40 <main+0xc82>
					case 0:
						pwm_red = 255 - currRand;	
     916:	8a 2d       	mov	r24, r10
     918:	80 95       	com	r24
     91a:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     91e:	20 92 16 04 	sts	0x0416, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     922:	80 e2       	ldi	r24, 0x20	; 32
     924:	a8 16       	cp	r10, r24
     926:	b1 04       	cpc	r11, r1
     928:	08 f0       	brcs	.+2      	; 0x92c <main+0x76e>
     92a:	ec c0       	rjmp	.+472    	; 0xb04 <main+0x946>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn off all leds
     92c:	80 91 0d 02 	lds	r24, 0x020D
     930:	8f 3f       	cpi	r24, 0xFF	; 255
     932:	09 f4       	brne	.+2      	; 0x936 <main+0x778>
     934:	40 ce       	rjmp	.-896    	; 0x5b6 <main+0x3f8>
     936:	80 91 0e 02 	lds	r24, 0x020E
     93a:	8f 3f       	cpi	r24, 0xFF	; 255
     93c:	09 f4       	brne	.+2      	; 0x940 <main+0x782>
     93e:	3b ce       	rjmp	.-906    	; 0x5b6 <main+0x3f8>
						pwm_red = 255;
     940:	10 93 0c 02 	sts	0x020C, r17
     944:	38 ce       	rjmp	.-912    	; 0x5b6 <main+0x3f8>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     946:	80 91 94 00 	lds	r24, 0x0094
     94a:	90 91 95 00 	lds	r25, 0x0095
     94e:	0e 94 22 30 	call	0x6044	; 0x6044 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     952:	0e 94 1d 30 	call	0x603a	; 0x603a <rand>
     956:	6e e1       	ldi	r22, 0x1E	; 30
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__divmodhi4>
     95e:	4c 01       	movw	r8, r24
     960:	8a 0c       	add	r8, r10
     962:	9b 1c       	adc	r9, r11
     964:	ff e7       	ldi	r31, 0x7F	; 127
     966:	8f 22       	and	r8, r31
     968:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     96a:	88 2d       	mov	r24, r8
     96c:	80 95       	com	r24
     96e:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     972:	80 91 94 00 	lds	r24, 0x0094
     976:	90 91 95 00 	lds	r25, 0x0095
     97a:	0e 94 22 30 	call	0x6044	; 0x6044 <srand>
				currRand = (currRand + rand()%30) % 128;	
     97e:	0e 94 1d 30 	call	0x603a	; 0x603a <rand>
     982:	6e e1       	ldi	r22, 0x1E	; 30
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__divmodhi4>
     98a:	6c 01       	movw	r12, r24
     98c:	c8 0c       	add	r12, r8
     98e:	d9 1c       	adc	r13, r9
     990:	2f e7       	ldi	r18, 0x7F	; 127
     992:	c2 22       	and	r12, r18
     994:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     996:	8c 2d       	mov	r24, r12
     998:	80 95       	com	r24
     99a:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     99e:	80 91 94 00 	lds	r24, 0x0094
     9a2:	90 91 95 00 	lds	r25, 0x0095
     9a6:	0e 94 22 30 	call	0x6044	; 0x6044 <srand>
				currRand = (currRand + rand()%30) % 128;
     9aa:	0e 94 1d 30 	call	0x603a	; 0x603a <rand>
     9ae:	6e e1       	ldi	r22, 0x1E	; 30
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__divmodhi4>
     9b6:	5c 01       	movw	r10, r24
     9b8:	ac 0c       	add	r10, r12
     9ba:	bd 1c       	adc	r11, r13
     9bc:	3f e7       	ldi	r19, 0x7F	; 127
     9be:	a3 22       	and	r10, r19
     9c0:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     9c2:	8a 2d       	mov	r24, r10
     9c4:	80 95       	com	r24
     9c6:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     9ca:	80 91 94 00 	lds	r24, 0x0094
     9ce:	90 91 95 00 	lds	r25, 0x0095
     9d2:	0e 94 22 30 	call	0x6044	; 0x6044 <srand>
				currRand2 = rand()%128;
     9d6:	0e 94 1d 30 	call	0x603a	; 0x603a <rand>
     9da:	60 e8       	ldi	r22, 0x80	; 128
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__divmodhi4>
				if(currRand2<32) {
     9e2:	80 32       	cpi	r24, 0x20	; 32
     9e4:	91 05       	cpc	r25, r1
     9e6:	08 f0       	brcs	.+2      	; 0x9ea <main+0x82c>
     9e8:	9f c0       	rjmp	.+318    	; 0xb28 <main+0x96a>
					pwm_red = 255;
     9ea:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     9ee:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
     9f2:	69 83       	std	Y+1, r22	; 0x01
     9f4:	7a 83       	std	Y+2, r23	; 0x02
     9f6:	8b 83       	std	Y+3, r24	; 0x03
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	dd cd       	rjmp	.-1094   	; 0x5b6 <main+0x3f8>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
     9fc:	82 17       	cp	r24, r18
     9fe:	93 07       	cpc	r25, r19
     a00:	0c f0       	brlt	.+2      	; 0xa04 <main+0x846>
     a02:	77 cd       	rjmp	.-1298   	; 0x4f2 <main+0x334>
					pwm_intermediate_right_desired -= speedStep;
     a04:	40 91 18 02 	lds	r20, 0x0218
     a08:	24 1b       	sub	r18, r20
     a0a:	31 09       	sbc	r19, r1
     a0c:	30 93 fe 03 	sts	0x03FE, r19
     a10:	20 93 fd 03 	sts	0x03FD, r18
					if(pwm_intermediate_right_desired < pwm_right_desired) {
     a14:	28 17       	cp	r18, r24
     a16:	39 07       	cpc	r19, r25
     a18:	0c f0       	brlt	.+2      	; 0xa1c <main+0x85e>
     a1a:	6b cd       	rjmp	.-1322   	; 0x4f2 <main+0x334>
     a1c:	66 cd       	rjmp	.-1332   	; 0x4ea <main+0x32c>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
     a1e:	82 17       	cp	r24, r18
     a20:	93 07       	cpc	r25, r19
     a22:	0c f0       	brlt	.+2      	; 0xa26 <main+0x868>
     a24:	b0 cc       	rjmp	.-1696   	; 0x386 <main+0x1c8>
					pwm_intermediate_left_desired -= speedStep;
     a26:	40 91 18 02 	lds	r20, 0x0218
     a2a:	24 1b       	sub	r18, r20
     a2c:	31 09       	sbc	r19, r1
     a2e:	30 93 00 04 	sts	0x0400, r19
     a32:	20 93 ff 03 	sts	0x03FF, r18
					if(pwm_intermediate_left_desired < pwm_left_desired) {
     a36:	28 17       	cp	r18, r24
     a38:	39 07       	cpc	r19, r25
     a3a:	0c f0       	brlt	.+2      	; 0xa3e <main+0x880>
     a3c:	a4 cc       	rjmp	.-1720   	; 0x386 <main+0x1c8>
     a3e:	7d cd       	rjmp	.-1286   	; 0x53a <main+0x37c>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     a40:	84 30       	cpi	r24, 0x04	; 4
     a42:	09 f4       	brne	.+2      	; 0xa46 <main+0x888>
     a44:	1d c3       	rjmp	.+1594   	; 0x1080 <main+0xec2>
     a46:	84 30       	cpi	r24, 0x04	; 4
     a48:	08 f4       	brcc	.+2      	; 0xa4c <main+0x88e>
     a4a:	c3 c2       	rjmp	.+1414   	; 0xfd2 <main+0xe14>
     a4c:	85 30       	cpi	r24, 0x05	; 5
     a4e:	09 f0       	breq	.+2      	; 0xa52 <main+0x894>
     a50:	ad ce       	rjmp	.-678    	; 0x7ac <main+0x5ee>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     a52:	0e 94 01 25 	call	0x4a02	; 0x4a02 <turnOffGreenLeds>
							GREEN_LED6_ON;
     a56:	80 91 0b 01 	lds	r24, 0x010B
     a5a:	8f 7b       	andi	r24, 0xBF	; 191
     a5c:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     a60:	80 91 0b 01 	lds	r24, 0x010B
     a64:	8f 77       	andi	r24, 0x7F	; 127
     a66:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     a6a:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	60 93 55 05 	sts	0x0555, r22
     a76:	70 93 56 05 	sts	0x0556, r23
     a7a:	80 93 57 05 	sts	0x0557, r24
     a7e:	90 93 58 05 	sts	0x0558, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     a82:	80 91 51 05 	lds	r24, 0x0551
     a86:	90 91 52 05 	lds	r25, 0x0552
     a8a:	a0 91 53 05 	lds	r26, 0x0553
     a8e:	b0 91 54 05 	lds	r27, 0x0554
     a92:	28 1b       	sub	r18, r24
     a94:	39 0b       	sbc	r19, r25
     a96:	4a 0b       	sbc	r20, r26
     a98:	5b 0b       	sbc	r21, r27
     a9a:	2b 32       	cpi	r18, 0x2B	; 43
     a9c:	9c e1       	ldi	r25, 0x1C	; 28
     a9e:	39 07       	cpc	r19, r25
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	49 07       	cpc	r20, r25
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	59 07       	cpc	r21, r25
     aa8:	08 f4       	brcc	.+2      	; 0xaac <main+0x8ee>
     aaa:	80 ce       	rjmp	.-768    	; 0x7ac <main+0x5ee>
								demoStartTime = getTime100MicroSec();
     aac:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
     ab0:	60 93 51 05 	sts	0x0551, r22
     ab4:	70 93 52 05 	sts	0x0552, r23
     ab8:	80 93 53 05 	sts	0x0553, r24
     abc:	90 93 54 05 	sts	0x0554, r25
								demoState = 0;							
     ac0:	10 92 4d 05 	sts	0x054D, r1
     ac4:	73 ce       	rjmp	.-794    	; 0x7ac <main+0x5ee>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	11 f0       	breq	.+4      	; 0xace <main+0x910>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     aca:	98 2f       	mov	r25, r24
     acc:	ca cc       	rjmp	.-1644   	; 0x462 <main+0x2a4>
     ace:	90 91 1e 05 	lds	r25, 0x051E
     ad2:	99 23       	and	r25, r25
     ad4:	d1 f3       	breq	.-12     	; 0xaca <main+0x90c>
								turnOnGreenLeds();
     ad6:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     ada:	60 91 11 04 	lds	r22, 0x0411
     ade:	70 91 12 04 	lds	r23, 0x0412
     ae2:	8e ef       	ldi	r24, 0xFE	; 254
     ae4:	9f e0       	ldi	r25, 0x0F	; 15
     ae6:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__eewr_word_m2560>
								turnOffGreenLeds();
     aea:	0e 94 01 25 	call	0x4a02	; 0x4a02 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     aee:	8a ea       	ldi	r24, 0xAA	; 170
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
								addressReceived = 0;
     af6:	10 92 1e 05 	sts	0x051E, r1
								menuChoice = 0;
     afa:	10 92 1d 05 	sts	0x051D, r1
     afe:	90 91 49 05 	lds	r25, 0x0549
     b02:	af cc       	rjmp	.-1698   	; 0x462 <main+0x2a4>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn off all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     b04:	90 e4       	ldi	r25, 0x40	; 64
     b06:	a9 16       	cp	r10, r25
     b08:	b1 04       	cpc	r11, r1
     b0a:	08 f0       	brcs	.+2      	; 0xb0e <main+0x950>
     b0c:	a7 c2       	rjmp	.+1358   	; 0x105c <main+0xe9e>
					if(pwm_red!=255 && pwm_blue!=255) {
     b0e:	80 91 0c 02 	lds	r24, 0x020C
     b12:	8f 3f       	cpi	r24, 0xFF	; 255
     b14:	09 f4       	brne	.+2      	; 0xb18 <main+0x95a>
     b16:	4f cd       	rjmp	.-1378   	; 0x5b6 <main+0x3f8>
     b18:	80 91 0e 02 	lds	r24, 0x020E
     b1c:	8f 3f       	cpi	r24, 0xFF	; 255
     b1e:	09 f4       	brne	.+2      	; 0xb22 <main+0x964>
     b20:	4a cd       	rjmp	.-1388   	; 0x5b6 <main+0x3f8>
						pwm_green = 255;
     b22:	10 93 0d 02 	sts	0x020D, r17
     b26:	47 cd       	rjmp	.-1394   	; 0x5b6 <main+0x3f8>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     b28:	80 34       	cpi	r24, 0x40	; 64
     b2a:	91 05       	cpc	r25, r1
     b2c:	08 f0       	brcs	.+2      	; 0xb30 <main+0x972>
     b2e:	03 c3       	rjmp	.+1542   	; 0x1136 <main+0xf78>
					pwm_green = 255;
     b30:	10 93 0d 02 	sts	0x020D, r17
     b34:	5c cf       	rjmp	.-328    	; 0x9ee <main+0x830>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     b36:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <turnOnGreenLeds>
							updateRedLed(pwm_red);
     b3a:	80 91 0c 02 	lds	r24, 0x020C
     b3e:	0e 94 28 24 	call	0x4850	; 0x4850 <updateRedLed>
							updateGreenLed(pwm_green);
     b42:	80 91 0d 02 	lds	r24, 0x020D
     b46:	0e 94 3c 24 	call	0x4878	; 0x4878 <updateGreenLed>
							updateBlueLed(pwm_blue);
     b4a:	80 91 0e 02 	lds	r24, 0x020E
     b4e:	0e 94 50 24 	call	0x48a0	; 0x48a0 <updateBlueLed>
							LED_IR1_LOW;
     b52:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     b54:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     b56:	80 91 20 05 	lds	r24, 0x0520
     b5a:	88 23       	and	r24, r24
     b5c:	09 f4       	brne	.+2      	; 0xb60 <main+0x9a2>
     b5e:	7f cd       	rjmp	.-1282   	; 0x65e <main+0x4a0>
								getDataNow = 0;	
     b60:	10 92 20 05 	sts	0x0520, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b64:	80 91 61 03 	lds	r24, 0x0361
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     b6e:	80 91 62 03 	lds	r24, 0x0362
     b72:	61 e0       	ldi	r22, 0x01	; 1
     b74:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     b78:	80 91 31 03 	lds	r24, 0x0331
     b7c:	90 91 32 03 	lds	r25, 0x0332
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     b86:	80 91 31 03 	lds	r24, 0x0331
     b8a:	90 91 32 03 	lds	r25, 0x0332
     b8e:	89 2f       	mov	r24, r25
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b96:	80 91 63 03 	lds	r24, 0x0363
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ba0:	80 91 64 03 	lds	r24, 0x0364
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     baa:	80 91 35 03 	lds	r24, 0x0335
     bae:	90 91 36 03 	lds	r25, 0x0336
     bb2:	61 e0       	ldi	r22, 0x01	; 1
     bb4:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     bb8:	80 91 35 03 	lds	r24, 0x0335
     bbc:	90 91 36 03 	lds	r25, 0x0336
     bc0:	89 2f       	mov	r24, r25
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     bc8:	80 91 65 03 	lds	r24, 0x0365
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     bd2:	80 91 66 03 	lds	r24, 0x0366
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     bdc:	80 91 39 03 	lds	r24, 0x0339
     be0:	90 91 3a 03 	lds	r25, 0x033A
     be4:	61 e0       	ldi	r22, 0x01	; 1
     be6:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     bea:	80 91 39 03 	lds	r24, 0x0339
     bee:	90 91 3a 03 	lds	r25, 0x033A
     bf2:	89 2f       	mov	r24, r25
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     bfa:	80 91 67 03 	lds	r24, 0x0367
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c04:	80 91 68 03 	lds	r24, 0x0368
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c0e:	80 91 3d 03 	lds	r24, 0x033D
     c12:	90 91 3e 03 	lds	r25, 0x033E
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c1c:	80 91 3d 03 	lds	r24, 0x033D
     c20:	90 91 3e 03 	lds	r25, 0x033E
     c24:	89 2f       	mov	r24, r25
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c2c:	80 91 69 03 	lds	r24, 0x0369
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c36:	80 91 6a 03 	lds	r24, 0x036A
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c40:	80 91 41 03 	lds	r24, 0x0341
     c44:	90 91 42 03 	lds	r25, 0x0342
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c4e:	80 91 41 03 	lds	r24, 0x0341
     c52:	90 91 42 03 	lds	r25, 0x0342
     c56:	89 2f       	mov	r24, r25
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c5e:	80 91 6b 03 	lds	r24, 0x036B
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c68:	80 91 6c 03 	lds	r24, 0x036C
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c72:	80 91 45 03 	lds	r24, 0x0345
     c76:	90 91 46 03 	lds	r25, 0x0346
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c80:	80 91 45 03 	lds	r24, 0x0345
     c84:	90 91 46 03 	lds	r25, 0x0346
     c88:	89 2f       	mov	r24, r25
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c90:	80 91 6d 03 	lds	r24, 0x036D
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c9a:	80 91 6e 03 	lds	r24, 0x036E
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ca4:	80 91 49 03 	lds	r24, 0x0349
     ca8:	90 91 4a 03 	lds	r25, 0x034A
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     cb2:	80 91 49 03 	lds	r24, 0x0349
     cb6:	90 91 4a 03 	lds	r25, 0x034A
     cba:	89 2f       	mov	r24, r25
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     cc2:	80 91 6f 03 	lds	r24, 0x036F
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ccc:	80 91 70 03 	lds	r24, 0x0370
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     cd6:	80 91 4d 03 	lds	r24, 0x034D
     cda:	90 91 4e 03 	lds	r25, 0x034E
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ce4:	80 91 4d 03 	lds	r24, 0x034D
     ce8:	90 91 4e 03 	lds	r25, 0x034E
     cec:	89 2f       	mov	r24, r25
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     cf4:	80 91 71 03 	lds	r24, 0x0371
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     cfe:	80 91 72 03 	lds	r24, 0x0372
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d08:	80 91 51 03 	lds	r24, 0x0351
     d0c:	90 91 52 03 	lds	r25, 0x0352
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d16:	80 91 51 03 	lds	r24, 0x0351
     d1a:	90 91 52 03 	lds	r25, 0x0352
     d1e:	89 2f       	mov	r24, r25
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d26:	80 91 73 03 	lds	r24, 0x0373
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d30:	80 91 74 03 	lds	r24, 0x0374
     d34:	61 e0       	ldi	r22, 0x01	; 1
     d36:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d3a:	80 91 55 03 	lds	r24, 0x0355
     d3e:	90 91 56 03 	lds	r25, 0x0356
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d48:	80 91 55 03 	lds	r24, 0x0355
     d4c:	90 91 56 03 	lds	r25, 0x0356
     d50:	89 2f       	mov	r24, r25
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d58:	80 91 75 03 	lds	r24, 0x0375
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d62:	80 91 76 03 	lds	r24, 0x0376
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d6c:	80 91 59 03 	lds	r24, 0x0359
     d70:	90 91 5a 03 	lds	r25, 0x035A
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d7a:	80 91 59 03 	lds	r24, 0x0359
     d7e:	90 91 5a 03 	lds	r25, 0x035A
     d82:	89 2f       	mov	r24, r25
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d8a:	80 91 77 03 	lds	r24, 0x0377
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d94:	80 91 78 03 	lds	r24, 0x0378
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d9e:	80 91 5d 03 	lds	r24, 0x035D
     da2:	90 91 5e 03 	lds	r25, 0x035E
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     dac:	80 91 5d 03 	lds	r24, 0x035D
     db0:	90 91 5e 03 	lds	r25, 0x035E
     db4:	89 2f       	mov	r24, r25
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     dbc:	80 91 26 05 	lds	r24, 0x0526
     dc0:	61 e0       	ldi	r22, 0x01	; 1
     dc2:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
								usart0Transmit(accX>>8,1);
     dc6:	80 91 27 05 	lds	r24, 0x0527
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     dd0:	80 91 28 05 	lds	r24, 0x0528
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
								usart0Transmit(accY>>8,1);
     dda:	80 91 29 05 	lds	r24, 0x0529
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     de4:	80 91 2a 05 	lds	r24, 0x052A
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     dee:	80 91 2b 05 	lds	r24, 0x052B
     df2:	61 e0       	ldi	r22, 0x01	; 1
     df4:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
								usart0Transmit(irCommand,1);
     df8:	80 91 21 05 	lds	r24, 0x0521
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
								usart0Transmit(currentSelector,1);
     e02:	80 91 49 05 	lds	r24, 0x0549
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     e0c:	80 91 03 01 	lds	r24, 0x0103
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	80 72       	andi	r24, 0x20	; 32
     e14:	90 70       	andi	r25, 0x00	; 0
     e16:	95 95       	asr	r25
     e18:	87 95       	ror	r24
     e1a:	95 95       	asr	r25
     e1c:	87 95       	ror	r24
     e1e:	95 95       	asr	r25
     e20:	87 95       	ror	r24
     e22:	95 95       	asr	r25
     e24:	87 95       	ror	r24
     e26:	95 95       	asr	r25
     e28:	87 95       	ror	r24
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
								usart0Transmit(rfFlags,1);
     e30:	80 91 13 04 	lds	r24, 0x0413
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	0e 94 2f 18 	call	0x305e	; 0x305e <usart0Transmit>
     e3a:	90 91 49 05 	lds	r25, 0x0549
     e3e:	11 cb       	rjmp	.-2526   	; 0x462 <main+0x2a4>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
     e40:	82 30       	cpi	r24, 0x02	; 2
     e42:	09 f0       	breq	.+2      	; 0xe46 <main+0xc88>
     e44:	6e cd       	rjmp	.-1316   	; 0x922 <main+0x764>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
     e46:	8a 2d       	mov	r24, r10
     e48:	80 95       	com	r24
     e4a:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
     e4e:	10 92 16 04 	sts	0x0416, r1
						break;
     e52:	67 cd       	rjmp	.-1330   	; 0x922 <main+0x764>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	09 f0       	breq	.+2      	; 0xe5a <main+0xc9c>
     e58:	a9 cc       	rjmp	.-1710   	; 0x7ac <main+0x5ee>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
     e5a:	0e 94 01 25 	call	0x4a02	; 0x4a02 <turnOffGreenLeds>
							GREEN_LED2_ON;
     e5e:	80 91 0b 01 	lds	r24, 0x010B
     e62:	8b 7f       	andi	r24, 0xFB	; 251
     e64:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
     e68:	10 92 4f 05 	sts	0x054F, r1
							enableObstacleAvoidance();
     e6c:	0e 94 dd 23 	call	0x47ba	; 0x47ba <enableObstacleAvoidance>
							setRightSpeed(20);
     e70:	84 e1       	ldi	r24, 0x14	; 20
     e72:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
							setLeftSpeed(20);
     e76:	84 e1       	ldi	r24, 0x14	; 20
     e78:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
     e7c:	80 91 73 03 	lds	r24, 0x0373
     e80:	90 91 74 03 	lds	r25, 0x0374
     e84:	e1 e0       	ldi	r30, 0x01	; 1
     e86:	80 39       	cpi	r24, 0x90	; 144
     e88:	9e 07       	cpc	r25, r30
     e8a:	0c f4       	brge	.+2      	; 0xe8e <main+0xcd0>
     e8c:	3a c1       	rjmp	.+628    	; 0x1102 <main+0xf44>
     e8e:	80 91 75 03 	lds	r24, 0x0375
     e92:	90 91 76 03 	lds	r25, 0x0376
     e96:	f1 e0       	ldi	r31, 0x01	; 1
     e98:	80 39       	cpi	r24, 0x90	; 144
     e9a:	9f 07       	cpc	r25, r31
     e9c:	0c f4       	brge	.+2      	; 0xea0 <main+0xce2>
     e9e:	31 c1       	rjmp	.+610    	; 0x1102 <main+0xf44>
     ea0:	80 91 71 03 	lds	r24, 0x0371
     ea4:	90 91 72 03 	lds	r25, 0x0372
     ea8:	21 e0       	ldi	r18, 0x01	; 1
     eaa:	80 39       	cpi	r24, 0x90	; 144
     eac:	92 07       	cpc	r25, r18
     eae:	0c f4       	brge	.+2      	; 0xeb2 <main+0xcf4>
     eb0:	28 c1       	rjmp	.+592    	; 0x1102 <main+0xf44>
     eb2:	80 91 77 03 	lds	r24, 0x0377
     eb6:	90 91 78 03 	lds	r25, 0x0378
     eba:	31 e0       	ldi	r19, 0x01	; 1
     ebc:	80 39       	cpi	r24, 0x90	; 144
     ebe:	93 07       	cpc	r25, r19
     ec0:	0c f4       	brge	.+2      	; 0xec4 <main+0xd06>
     ec2:	1f c1       	rjmp	.+574    	; 0x1102 <main+0xf44>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
     ec4:	10 92 4e 05 	sts	0x054E, r1
     ec8:	71 cc       	rjmp	.-1822   	; 0x7ac <main+0x5ee>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
     eca:	8a 2d       	mov	r24, r10
     ecc:	80 95       	com	r24
     ece:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
     ed2:	62 e0       	ldi	r22, 0x02	; 2
     ed4:	60 93 16 04 	sts	0x0416, r22
						break;
     ed8:	24 cd       	rjmp	.-1464   	; 0x922 <main+0x764>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
     eda:	0e 94 01 25 	call	0x4a02	; 0x4a02 <turnOffGreenLeds>
							GREEN_LED4_ON;
     ede:	80 91 0b 01 	lds	r24, 0x010B
     ee2:	8f 7e       	andi	r24, 0xEF	; 239
     ee4:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
     ee8:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
     eec:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
     ef0:	9b 01       	movw	r18, r22
     ef2:	ac 01       	movw	r20, r24
     ef4:	60 93 55 05 	sts	0x0555, r22
     ef8:	70 93 56 05 	sts	0x0556, r23
     efc:	80 93 57 05 	sts	0x0557, r24
     f00:	90 93 58 05 	sts	0x0558, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
     f04:	80 91 51 05 	lds	r24, 0x0551
     f08:	90 91 52 05 	lds	r25, 0x0552
     f0c:	a0 91 53 05 	lds	r26, 0x0553
     f10:	b0 91 54 05 	lds	r27, 0x0554
     f14:	28 1b       	sub	r18, r24
     f16:	39 0b       	sbc	r19, r25
     f18:	4a 0b       	sbc	r20, r26
     f1a:	5b 0b       	sbc	r21, r27
     f1c:	23 33       	cpi	r18, 0x33	; 51
     f1e:	6f ee       	ldi	r22, 0xEF	; 239
     f20:	36 07       	cpc	r19, r22
     f22:	62 e0       	ldi	r22, 0x02	; 2
     f24:	46 07       	cpc	r20, r22
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	56 07       	cpc	r21, r22
     f2a:	08 f0       	brcs	.+2      	; 0xf2e <main+0xd70>
     f2c:	52 c1       	rjmp	.+676    	; 0x11d2 <main+0x1014>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
     f2e:	80 91 03 01 	lds	r24, 0x0103
     f32:	84 ff       	sbrs	r24, 4
     f34:	33 c1       	rjmp	.+614    	; 0x119c <main+0xfde>
								outOfLine = 0;
     f36:	10 92 4f 05 	sts	0x054F, r1
								chargeContact++;
     f3a:	80 91 50 05 	lds	r24, 0x0550
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	80 93 50 05 	sts	0x0550, r24
								if(chargeContact > 20) {
     f44:	85 31       	cpi	r24, 0x15	; 21
     f46:	08 f0       	brcs	.+2      	; 0xf4a <main+0xd8c>
     f48:	71 c1       	rjmp	.+738    	; 0x122c <main+0x106e>
     f4a:	80 91 73 03 	lds	r24, 0x0373
     f4e:	90 91 74 03 	lds	r25, 0x0374
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
     f52:	20 91 71 03 	lds	r18, 0x0371
     f56:	30 91 72 03 	lds	r19, 0x0372
     f5a:	41 e0       	ldi	r20, 0x01	; 1
     f5c:	22 3c       	cpi	r18, 0xC2	; 194
     f5e:	34 07       	cpc	r19, r20
     f60:	ac f4       	brge	.+42     	; 0xf8c <main+0xdce>
     f62:	51 e0       	ldi	r21, 0x01	; 1
     f64:	83 3c       	cpi	r24, 0xC3	; 195
     f66:	95 07       	cpc	r25, r21
     f68:	8c f0       	brlt	.+34     	; 0xf8c <main+0xdce>
     f6a:	40 91 75 03 	lds	r20, 0x0375
     f6e:	50 91 76 03 	lds	r21, 0x0376
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	43 3c       	cpi	r20, 0xC3	; 195
     f76:	56 07       	cpc	r21, r22
     f78:	4c f0       	brlt	.+18     	; 0xf8c <main+0xdce>
     f7a:	40 91 77 03 	lds	r20, 0x0377
     f7e:	50 91 78 03 	lds	r21, 0x0378
     f82:	e1 e0       	ldi	r30, 0x01	; 1
     f84:	43 3c       	cpi	r20, 0xC3	; 195
     f86:	5e 07       	cpc	r21, r30
     f88:	0c f0       	brlt	.+2      	; 0xf8c <main+0xdce>
     f8a:	76 c1       	rjmp	.+748    	; 0x1278 <main+0x10ba>
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
     f8c:	40 91 77 03 	lds	r20, 0x0377
     f90:	50 91 78 03 	lds	r21, 0x0378
     f94:	f1 e0       	ldi	r31, 0x01	; 1
     f96:	42 3c       	cpi	r20, 0xC2	; 194
     f98:	5f 07       	cpc	r21, r31
     f9a:	0c f0       	brlt	.+2      	; 0xf9e <main+0xde0>
     f9c:	ea c0       	rjmp	.+468    	; 0x1172 <main+0xfb4>
     f9e:	41 e0       	ldi	r20, 0x01	; 1
     fa0:	23 3c       	cpi	r18, 0xC3	; 195
     fa2:	34 07       	cpc	r19, r20
     fa4:	0c f4       	brge	.+2      	; 0xfa8 <main+0xdea>
     fa6:	e5 c0       	rjmp	.+458    	; 0x1172 <main+0xfb4>
     fa8:	51 e0       	ldi	r21, 0x01	; 1
     faa:	83 3c       	cpi	r24, 0xC3	; 195
     fac:	95 07       	cpc	r25, r21
     fae:	0c f4       	brge	.+2      	; 0xfb2 <main+0xdf4>
     fb0:	e5 c0       	rjmp	.+458    	; 0x117c <main+0xfbe>
     fb2:	80 91 75 03 	lds	r24, 0x0375
     fb6:	90 91 76 03 	lds	r25, 0x0376
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	83 3c       	cpi	r24, 0xC3	; 195
     fbe:	96 07       	cpc	r25, r22
     fc0:	0c f0       	brlt	.+2      	; 0xfc4 <main+0xe06>
     fc2:	53 c1       	rjmp	.+678    	; 0x126a <main+0x10ac>
								setLeftSpeed(20);
								setRightSpeed(-15);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(20);
     fc4:	84 e1       	ldi	r24, 0x14	; 20
     fc6:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
								setRightSpeed(-10);
     fca:	86 ef       	ldi	r24, 0xF6	; 246
     fcc:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
     fd0:	ed cb       	rjmp	.-2086   	; 0x7ac <main+0x5ee>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
     fd2:	0e 94 01 25 	call	0x4a02	; 0x4a02 <turnOffGreenLeds>
							GREEN_LED6_ON;
     fd6:	80 91 0b 01 	lds	r24, 0x010B
     fda:	8f 7b       	andi	r24, 0xBF	; 191
     fdc:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
     fe0:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
     fe4:	9b 01       	movw	r18, r22
     fe6:	ac 01       	movw	r20, r24
     fe8:	60 93 55 05 	sts	0x0555, r22
     fec:	70 93 56 05 	sts	0x0556, r23
     ff0:	80 93 57 05 	sts	0x0557, r24
     ff4:	90 93 58 05 	sts	0x0558, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
     ff8:	80 91 51 05 	lds	r24, 0x0551
     ffc:	90 91 52 05 	lds	r25, 0x0552
    1000:	a0 91 53 05 	lds	r26, 0x0553
    1004:	b0 91 54 05 	lds	r27, 0x0554
    1008:	28 1b       	sub	r18, r24
    100a:	39 0b       	sbc	r19, r25
    100c:	4a 0b       	sbc	r20, r26
    100e:	5b 0b       	sbc	r21, r27
    1010:	2d 3c       	cpi	r18, 0xCD	; 205
    1012:	66 e6       	ldi	r22, 0x66	; 102
    1014:	36 07       	cpc	r19, r22
    1016:	64 e0       	ldi	r22, 0x04	; 4
    1018:	46 07       	cpc	r20, r22
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	56 07       	cpc	r21, r22
    101e:	08 f4       	brcc	.+2      	; 0x1022 <main+0xe64>
    1020:	91 c0       	rjmp	.+290    	; 0x1144 <main+0xf86>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    1022:	80 91 c5 03 	lds	r24, 0x03C5
    1026:	90 91 c6 03 	lds	r25, 0x03C6
    102a:	e3 e0       	ldi	r30, 0x03	; 3
    102c:	8a 37       	cpi	r24, 0x7A	; 122
    102e:	9e 07       	cpc	r25, r30
    1030:	08 f4       	brcc	.+2      	; 0x1034 <main+0xe76>
    1032:	94 c0       	rjmp	.+296    	; 0x115c <main+0xf9e>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-20);
    1034:	8c ee       	ldi	r24, 0xEC	; 236
    1036:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
									setLeftSpeed(-20);
    103a:	8c ee       	ldi	r24, 0xEC	; 236
    103c:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    1040:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
    1044:	60 93 51 05 	sts	0x0551, r22
    1048:	70 93 52 05 	sts	0x0552, r23
    104c:	80 93 53 05 	sts	0x0553, r24
    1050:	90 93 54 05 	sts	0x0554, r25
									demoState = 4;
    1054:	f4 e0       	ldi	r31, 0x04	; 4
    1056:	f0 93 4d 05 	sts	0x054D, r31
									break;
    105a:	a8 cb       	rjmp	.-2224   	; 0x7ac <main+0x5ee>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    105c:	e0 e6       	ldi	r30, 0x60	; 96
    105e:	ae 16       	cp	r10, r30
    1060:	b1 04       	cpc	r11, r1
    1062:	08 f0       	brcs	.+2      	; 0x1066 <main+0xea8>
    1064:	a8 ca       	rjmp	.-2736   	; 0x5b6 <main+0x3f8>
					if(pwm_red!=255 && pwm_green!=255) {
    1066:	80 91 0c 02 	lds	r24, 0x020C
    106a:	8f 3f       	cpi	r24, 0xFF	; 255
    106c:	09 f4       	brne	.+2      	; 0x1070 <main+0xeb2>
    106e:	a3 ca       	rjmp	.-2746   	; 0x5b6 <main+0x3f8>
    1070:	80 91 0d 02 	lds	r24, 0x020D
    1074:	8f 3f       	cpi	r24, 0xFF	; 255
    1076:	09 f4       	brne	.+2      	; 0x107a <main+0xebc>
    1078:	9e ca       	rjmp	.-2756   	; 0x5b6 <main+0x3f8>
						pwm_blue = 255;
    107a:	10 93 0e 02 	sts	0x020E, r17
    107e:	9b ca       	rjmp	.-2762   	; 0x5b6 <main+0x3f8>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    1080:	0e 94 01 25 	call	0x4a02	; 0x4a02 <turnOffGreenLeds>
							GREEN_LED6_ON;
    1084:	80 91 0b 01 	lds	r24, 0x010B
    1088:	8f 7b       	andi	r24, 0xBF	; 191
    108a:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    108e:	80 91 0b 01 	lds	r24, 0x010B
    1092:	8f 77       	andi	r24, 0x7F	; 127
    1094:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    1098:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
    109c:	9b 01       	movw	r18, r22
    109e:	ac 01       	movw	r20, r24
    10a0:	60 93 55 05 	sts	0x0555, r22
    10a4:	70 93 56 05 	sts	0x0556, r23
    10a8:	80 93 57 05 	sts	0x0557, r24
    10ac:	90 93 58 05 	sts	0x0558, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    10b0:	80 91 51 05 	lds	r24, 0x0551
    10b4:	90 91 52 05 	lds	r25, 0x0552
    10b8:	a0 91 53 05 	lds	r26, 0x0553
    10bc:	b0 91 54 05 	lds	r27, 0x0554
    10c0:	28 1b       	sub	r18, r24
    10c2:	39 0b       	sbc	r19, r25
    10c4:	4a 0b       	sbc	r20, r26
    10c6:	5b 0b       	sbc	r21, r27
    10c8:	2f 38       	cpi	r18, 0x8F	; 143
    10ca:	65 e2       	ldi	r22, 0x25	; 37
    10cc:	36 07       	cpc	r19, r22
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	46 07       	cpc	r20, r22
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	56 07       	cpc	r21, r22
    10d6:	08 f4       	brcc	.+2      	; 0x10da <main+0xf1c>
    10d8:	69 cb       	rjmp	.-2350   	; 0x7ac <main+0x5ee>
								setRightSpeed(20);
    10da:	84 e1       	ldi	r24, 0x14	; 20
    10dc:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
								setLeftSpeed(-20);								
    10e0:	8c ee       	ldi	r24, 0xEC	; 236
    10e2:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    10e6:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
    10ea:	60 93 51 05 	sts	0x0551, r22
    10ee:	70 93 52 05 	sts	0x0552, r23
    10f2:	80 93 53 05 	sts	0x0553, r24
    10f6:	90 93 54 05 	sts	0x0554, r25
								demoState = 5;							
    10fa:	85 e0       	ldi	r24, 0x05	; 5
    10fc:	80 93 4d 05 	sts	0x054D, r24
    1100:	55 cb       	rjmp	.-2390   	; 0x7ac <main+0x5ee>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(20);
							setLeftSpeed(20);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    1102:	80 91 4e 05 	lds	r24, 0x054E
    1106:	8f 5f       	subi	r24, 0xFF	; 255
    1108:	80 93 4e 05 	sts	0x054E, r24
								if(lineFound > 10) {
    110c:	8b 30       	cpi	r24, 0x0B	; 11
    110e:	08 f4       	brcc	.+2      	; 0x1112 <main+0xf54>
    1110:	4d cb       	rjmp	.-2406   	; 0x7ac <main+0x5ee>
									outOfLine = 0;
    1112:	10 92 4f 05 	sts	0x054F, r1
									chargeContact = 0;
    1116:	10 92 50 05 	sts	0x0550, r1
									demoStartTime = getTime100MicroSec();
    111a:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
    111e:	60 93 51 05 	sts	0x0551, r22
    1122:	70 93 52 05 	sts	0x0552, r23
    1126:	80 93 53 05 	sts	0x0553, r24
    112a:	90 93 54 05 	sts	0x0554, r25
									demoState = 2;
    112e:	42 e0       	ldi	r20, 0x02	; 2
    1130:	40 93 4d 05 	sts	0x054D, r20
									break;
    1134:	3b cb       	rjmp	.-2442   	; 0x7ac <main+0x5ee>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    1136:	80 36       	cpi	r24, 0x60	; 96
    1138:	91 05       	cpc	r25, r1
    113a:	08 f0       	brcs	.+2      	; 0x113e <main+0xf80>
    113c:	58 cc       	rjmp	.-1872   	; 0x9ee <main+0x830>
					pwm_blue = 255;
    113e:	10 93 0e 02 	sts	0x020E, r17
    1142:	55 cc       	rjmp	.-1878   	; 0x9ee <main+0x830>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    1144:	80 91 03 01 	lds	r24, 0x0103
    1148:	84 fd       	sbrc	r24, 4
    114a:	30 cb       	rjmp	.-2464   	; 0x7ac <main+0x5ee>
								chargeContact = 0;
    114c:	10 92 50 05 	sts	0x0550, r1
								outOfLine = 0;
    1150:	10 92 4f 05 	sts	0x054F, r1
								demoState = 2;
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	98 2e       	mov	r9, r24
    1158:	90 92 4d 05 	sts	0x054D, r9
								demoStartTime = getTime100MicroSec();
    115c:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
    1160:	60 93 51 05 	sts	0x0551, r22
    1164:	70 93 52 05 	sts	0x0552, r23
    1168:	80 93 53 05 	sts	0x0553, r24
    116c:	90 93 54 05 	sts	0x0554, r25
								break;						
    1170:	1d cb       	rjmp	.-2502   	; 0x7ac <main+0x5ee>
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(20);
								setRightSpeed(-15);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    1172:	e1 e0       	ldi	r30, 0x01	; 1
    1174:	83 3c       	cpi	r24, 0xC3	; 195
    1176:	9e 07       	cpc	r25, r30
    1178:	0c f0       	brlt	.+2      	; 0x117c <main+0xfbe>
    117a:	24 cf       	rjmp	.-440    	; 0xfc4 <main+0xe06>
								setRightSpeed(-10);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    117c:	80 91 75 03 	lds	r24, 0x0375
    1180:	90 91 76 03 	lds	r25, 0x0376
    1184:	f1 e0       	ldi	r31, 0x01	; 1
    1186:	83 3c       	cpi	r24, 0xC3	; 195
    1188:	9f 07       	cpc	r25, r31
    118a:	0c f4       	brge	.+2      	; 0x118e <main+0xfd0>
    118c:	48 c0       	rjmp	.+144    	; 0x121e <main+0x1060>
								setLeftSpeed(-10);
    118e:	86 ef       	ldi	r24, 0xF6	; 246
    1190:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
								setRightSpeed(20);
    1194:	84 e1       	ldi	r24, 0x14	; 20
    1196:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
    119a:	08 cb       	rjmp	.-2544   	; 0x7ac <main+0x5ee>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    119c:	10 92 50 05 	sts	0x0550, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    11a0:	80 91 73 03 	lds	r24, 0x0373
    11a4:	90 91 74 03 	lds	r25, 0x0374
    11a8:	e1 e0       	ldi	r30, 0x01	; 1
    11aa:	83 3c       	cpi	r24, 0xC3	; 195
    11ac:	9e 07       	cpc	r25, r30
    11ae:	2c f1       	brlt	.+74     	; 0x11fa <main+0x103c>
    11b0:	20 91 75 03 	lds	r18, 0x0375
    11b4:	30 91 76 03 	lds	r19, 0x0376
    11b8:	f1 e0       	ldi	r31, 0x01	; 1
    11ba:	23 3c       	cpi	r18, 0xC3	; 195
    11bc:	3f 07       	cpc	r19, r31
    11be:	ec f0       	brlt	.+58     	; 0x11fa <main+0x103c>
									outOfLine++;
    11c0:	20 91 4f 05 	lds	r18, 0x054F
    11c4:	2f 5f       	subi	r18, 0xFF	; 255
    11c6:	20 93 4f 05 	sts	0x054F, r18
									if(outOfLine > 250) {
    11ca:	2b 3f       	cpi	r18, 0xFB	; 251
    11cc:	08 f4       	brcc	.+2      	; 0x11d0 <main+0x1012>
    11ce:	c1 ce       	rjmp	.-638    	; 0xf52 <main+0xd94>
    11d0:	eb ca       	rjmp	.-2602   	; 0x7a8 <main+0x5ea>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    11d2:	8c ee       	ldi	r24, 0xEC	; 236
    11d4:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
								setLeftSpeed(-20);
    11d8:	8c ee       	ldi	r24, 0xEC	; 236
    11da:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    11de:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
    11e2:	60 93 51 05 	sts	0x0551, r22
    11e6:	70 93 52 05 	sts	0x0552, r23
    11ea:	80 93 53 05 	sts	0x0553, r24
    11ee:	90 93 54 05 	sts	0x0554, r25
								demoState = 4;
    11f2:	84 e0       	ldi	r24, 0x04	; 4
    11f4:	80 93 4d 05 	sts	0x054D, r24
								break;
    11f8:	d9 ca       	rjmp	.-2638   	; 0x7ac <main+0x5ee>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    11fa:	10 92 4f 05 	sts	0x054F, r1
    11fe:	a9 ce       	rjmp	.-686    	; 0xf52 <main+0xd94>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    1200:	91 30       	cpi	r25, 0x01	; 1
    1202:	41 f1       	breq	.+80     	; 0x1254 <main+0x1096>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    1204:	92 30       	cpi	r25, 0x02	; 2
    1206:	09 f0       	breq	.+2      	; 0x120a <main+0x104c>
    1208:	d6 c9       	rjmp	.-3156   	; 0x5b6 <main+0x3f8>
						pwm_red = 255;
    120a:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    120e:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    1212:	8e ef       	ldi	r24, 0xFE	; 254
    1214:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    1218:	10 92 16 04 	sts	0x0416, r1
    121c:	cc c9       	rjmp	.-3176   	; 0x5b6 <main+0x3f8>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(20);
    121e:	84 e1       	ldi	r24, 0x14	; 20
    1220:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
								setLeftSpeed(20);
    1224:	84 e1       	ldi	r24, 0x14	; 20
    1226:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
    122a:	c0 ca       	rjmp	.-2688   	; 0x7ac <main+0x5ee>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
									setRightSpeed(0);
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    1238:	0e 94 09 1a 	call	0x3412	; 0x3412 <getTime100MicroSec>
    123c:	60 93 51 05 	sts	0x0551, r22
    1240:	70 93 52 05 	sts	0x0552, r23
    1244:	80 93 53 05 	sts	0x0553, r24
    1248:	90 93 54 05 	sts	0x0554, r25
									demoState = 3;
    124c:	93 e0       	ldi	r25, 0x03	; 3
    124e:	90 93 4d 05 	sts	0x054D, r25
									break;
    1252:	ac ca       	rjmp	.-2728   	; 0x7ac <main+0x5ee>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1254:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1258:	5e ef       	ldi	r21, 0xFE	; 254
    125a:	50 93 0d 02 	sts	0x020D, r21
						pwm_blue = 255;
    125e:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    1262:	62 e0       	ldi	r22, 0x02	; 2
    1264:	60 93 16 04 	sts	0x0416, r22
    1268:	a6 c9       	rjmp	.-3252   	; 0x5b6 <main+0x3f8>
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(20);
    126a:	84 e1       	ldi	r24, 0x14	; 20
    126c:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
								setRightSpeed(-15);
    1270:	81 ef       	ldi	r24, 0xF1	; 241
    1272:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
    1276:	9a ca       	rjmp	.-2764   	; 0x7ac <main+0x5ee>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-15);
    1278:	81 ef       	ldi	r24, 0xF1	; 241
    127a:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <setLeftSpeed>
								setRightSpeed(20);
    127e:	84 e1       	ldi	r24, 0x14	; 20
    1280:	0e 94 1a 20 	call	0x4034	; 0x4034 <setRightSpeed>
    1284:	93 ca       	rjmp	.-2778   	; 0x7ac <main+0x5ee>

00001286 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    128a:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    128c:	0d b4       	in	r0, 0x2d	; 45
    128e:	07 fc       	sbrc	r0, 7
    1290:	0a c0       	rjmp	.+20     	; 0x12a6 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1292:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1294:	37 e2       	ldi	r19, 0x27	; 39
    1296:	80 31       	cpi	r24, 0x10	; 16
    1298:	93 07       	cpc	r25, r19
    129a:	c0 f3       	brcs	.-16     	; 0x128c <SPI_WAIT+0x6>
			spiCommError = 1;
    129c:	20 93 14 04 	sts	0x0414, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    12a0:	0d b4       	in	r0, 0x2d	; 45
    12a2:	07 fe       	sbrs	r0, 7
    12a4:	f6 cf       	rjmp	.-20     	; 0x1292 <SPI_WAIT+0xc>
			return;
		}
	}
}
    12a6:	08 95       	ret

000012a8 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    12a8:	84 b1       	in	r24, 0x04	; 4
    12aa:	80 7f       	andi	r24, 0xF0	; 240
    12ac:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    12ae:	84 b1       	in	r24, 0x04	; 4
    12b0:	87 60       	ori	r24, 0x07	; 7
    12b2:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    12b4:	80 e5       	ldi	r24, 0x50	; 80
    12b6:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    12b8:	8d b5       	in	r24, 0x2d	; 45
    12ba:	81 60       	ori	r24, 0x01	; 1
    12bc:	8d bd       	out	0x2d, r24	; 45

}
    12be:	08 95       	ret

000012c0 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    12c0:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    12c2:	1d bc       	out	0x2d, r1	; 45
}
    12c4:	08 95       	ret

000012c6 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    12c6:	44 23       	and	r20, r20
    12c8:	09 f1       	breq	.+66     	; 0x130c <SPI_ReadWrite_Block+0x46>
    12ca:	a6 2f       	mov	r26, r22
    12cc:	b7 2f       	mov	r27, r23
    12ce:	e8 2f       	mov	r30, r24
    12d0:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    12d2:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    12d4:	21 91       	ld	r18, Z+
    12d6:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    12d8:	21 e0       	ldi	r18, 0x01	; 1
    12da:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    12dc:	0d b4       	in	r0, 0x2d	; 45
    12de:	07 fc       	sbrc	r0, 7
    12e0:	0b c0       	rjmp	.+22     	; 0x12f8 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    12e2:	2f 5f       	subi	r18, 0xFF	; 255
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    12e6:	57 e2       	ldi	r21, 0x27	; 39
    12e8:	20 31       	cpi	r18, 0x10	; 16
    12ea:	35 07       	cpc	r19, r21
    12ec:	b8 f3       	brcs	.-18     	; 0x12dc <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    12ee:	90 93 14 04 	sts	0x0414, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    12f2:	0d b4       	in	r0, 0x2d	; 45
    12f4:	07 fe       	sbrs	r0, 7
    12f6:	f5 cf       	rjmp	.-22     	; 0x12e2 <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    12f8:	20 91 14 04 	lds	r18, 0x0414
    12fc:	22 23       	and	r18, r18
    12fe:	31 f4       	brne	.+12     	; 0x130c <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    1300:	2e b5       	in	r18, 0x2e	; 46
    1302:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1304:	2e 2f       	mov	r18, r30
    1306:	28 1b       	sub	r18, r24
    1308:	24 17       	cp	r18, r20
    130a:	20 f3       	brcs	.-56     	; 0x12d4 <SPI_ReadWrite_Block+0xe>
    130c:	08 95       	ret

0000130e <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    130e:	66 23       	and	r22, r22
    1310:	e9 f0       	breq	.+58     	; 0x134c <SPI_Write_Block+0x3e>
    1312:	e8 2f       	mov	r30, r24
    1314:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1316:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1318:	21 91       	ld	r18, Z+
    131a:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    131c:	21 e0       	ldi	r18, 0x01	; 1
    131e:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1320:	0d b4       	in	r0, 0x2d	; 45
    1322:	07 fc       	sbrc	r0, 7
    1324:	0b c0       	rjmp	.+22     	; 0x133c <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1326:	2f 5f       	subi	r18, 0xFF	; 255
    1328:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    132a:	47 e2       	ldi	r20, 0x27	; 39
    132c:	20 31       	cpi	r18, 0x10	; 16
    132e:	34 07       	cpc	r19, r20
    1330:	b8 f3       	brcs	.-18     	; 0x1320 <SPI_Write_Block+0x12>
			spiCommError = 1;
    1332:	90 93 14 04 	sts	0x0414, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1336:	0d b4       	in	r0, 0x2d	; 45
    1338:	07 fe       	sbrs	r0, 7
    133a:	f5 cf       	rjmp	.-22     	; 0x1326 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    133c:	20 91 14 04 	lds	r18, 0x0414
    1340:	22 23       	and	r18, r18
    1342:	21 f4       	brne	.+8      	; 0x134c <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1344:	2e 2f       	mov	r18, r30
    1346:	28 1b       	sub	r18, r24
    1348:	26 17       	cp	r18, r22
    134a:	30 f3       	brcs	.-52     	; 0x1318 <SPI_Write_Block+0xa>
    134c:	08 95       	ret

0000134e <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    134e:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1354:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1356:	0d b4       	in	r0, 0x2d	; 45
    1358:	07 fc       	sbrc	r0, 7
    135a:	0a c0       	rjmp	.+20     	; 0x1370 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    135c:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    135e:	37 e2       	ldi	r19, 0x27	; 39
    1360:	80 31       	cpi	r24, 0x10	; 16
    1362:	93 07       	cpc	r25, r19
    1364:	c0 f3       	brcs	.-16     	; 0x1356 <SPI_Write_Byte+0x8>
			spiCommError = 1;
    1366:	20 93 14 04 	sts	0x0414, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    136a:	0d b4       	in	r0, 0x2d	; 45
    136c:	07 fe       	sbrs	r0, 7
    136e:	f6 cf       	rjmp	.-20     	; 0x135c <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    1370:	8e b5       	in	r24, 0x2e	; 46
}
    1372:	08 95       	ret

00001374 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	00 d0       	rcall	.+0      	; 0x137e <mirf_config+0xa>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1382:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1384:	80 e2       	ldi	r24, 0x20	; 32
    1386:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    138a:	8d e0       	ldi	r24, 0x0D	; 13
    138c:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1390:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1392:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1394:	83 e2       	ldi	r24, 0x23	; 35
    1396:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    13a0:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    13a2:	80 91 11 04 	lds	r24, 0x0411
    13a6:	90 91 12 04 	lds	r25, 0x0412
    13aa:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    13ac:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    13ae:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    13b0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    13b2:	80 e3       	ldi	r24, 0x30	; 48
    13b4:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    13b8:	8e 01       	movw	r16, r28
    13ba:	0f 5f       	subi	r16, 0xFF	; 255
    13bc:	1f 4f       	sbci	r17, 0xFF	; 255
    13be:	c8 01       	movw	r24, r16
    13c0:	63 e0       	ldi	r22, 0x03	; 3
    13c2:	0e 94 87 09 	call	0x130e	; 0x130e <SPI_Write_Block>
    mirf_CSN_hi;
    13c6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    13c8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    13ca:	8a e2       	ldi	r24, 0x2A	; 42
    13cc:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    13d0:	c8 01       	movw	r24, r16
    13d2:	63 e0       	ldi	r22, 0x03	; 3
    13d4:	0e 94 87 09 	call	0x130e	; 0x130e <SPI_Write_Block>
    mirf_CSN_hi;
    13d8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    13da:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    13dc:	81 e2       	ldi	r24, 0x21	; 33
    13de:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    13e8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    13ea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    13ec:	82 e2       	ldi	r24, 0x22	; 34
    13ee:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    13f8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    13fa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    13fc:	84 e2       	ldi	r24, 0x24	; 36
    13fe:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1402:	82 e1       	ldi	r24, 0x12	; 18
    1404:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1408:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    140a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    140c:	85 e2       	ldi	r24, 0x25	; 37
    140e:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1412:	88 e2       	ldi	r24, 0x28	; 40
    1414:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1418:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    141a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    141c:	81 e3       	ldi	r24, 0x31	; 49
    141e:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1422:	8d e0       	ldi	r24, 0x0D	; 13
    1424:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1428:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    142a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    142c:	80 e5       	ldi	r24, 0x50	; 80
    142e:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1432:	83 e7       	ldi	r24, 0x73	; 115
    1434:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1438:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    143a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    143c:	8c e3       	ldi	r24, 0x3C	; 60
    143e:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1448:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    144a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    144c:	8d e3       	ldi	r24, 0x3D	; 61
    144e:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1452:	86 e0       	ldi	r24, 0x06	; 6
    1454:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1458:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    145a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    145c:	80 e2       	ldi	r24, 0x20	; 32
    145e:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1462:	8f e0       	ldi	r24, 0x0F	; 15
    1464:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1468:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	08 95       	ret

0000147a <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    147a:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    147c:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    147e:	0e 94 ba 09 	call	0x1374	; 0x1374 <mirf_config>
}
    1482:	08 95       	ret

00001484 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    148a:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    148c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    148e:	8a e2       	ldi	r24, 0x2A	; 42
    1490:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1494:	ce 01       	movw	r24, r28
    1496:	65 e0       	ldi	r22, 0x05	; 5
    1498:	0e 94 87 09 	call	0x130e	; 0x130e <SPI_Write_Block>
    mirf_CSN_hi;
    149c:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    149e:	2c 9a       	sbi	0x05, 4	; 5
}
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    14ac:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    14ae:	80 e3       	ldi	r24, 0x30	; 48
    14b0:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    14b4:	ce 01       	movw	r24, r28
    14b6:	65 e0       	ldi	r22, 0x05	; 5
    14b8:	0e 94 87 09 	call	0x130e	; 0x130e <SPI_Write_Block>
    mirf_CSN_hi;
    14bc:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    14c4:	80 91 65 05 	lds	r24, 0x0565
    14c8:	88 23       	and	r24, r24
    14ca:	11 f0       	breq	.+4      	; 0x14d0 <mirf_data_ready+0xc>
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    14ce:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    14d0:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
    14d4:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    14d8:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    14da:	80 74       	andi	r24, 0x40	; 64
    14dc:	08 95       	ret

000014de <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	0f 92       	push	r0
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    14e8:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    14ea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    14ec:	87 e1       	ldi	r24, 0x17	; 23
    14ee:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    14f2:	be 01       	movw	r22, r28
    14f4:	6f 5f       	subi	r22, 0xFF	; 255
    14f6:	7f 4f       	sbci	r23, 0xFF	; 255
    14f8:	cb 01       	movw	r24, r22
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	0e 94 63 09 	call	0x12c6	; 0x12c6 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1500:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1502:	89 81       	ldd	r24, Y+1	; 0x01
}
    1504:	81 70       	andi	r24, 0x01	; 1
    1506:	0f 90       	pop	r0
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    150e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1510:	82 ee       	ldi	r24, 0xE2	; 226
    1512:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1516:	28 9a       	sbi	0x05, 0	; 5

}
    1518:	08 95       	ret

0000151a <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1520:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1522:	81 e6       	ldi	r24, 0x61	; 97
    1524:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1528:	ce 01       	movw	r24, r28
    152a:	be 01       	movw	r22, r28
    152c:	4d e0       	ldi	r20, 0x0D	; 13
    152e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1532:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1534:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1536:	87 e2       	ldi	r24, 0x27	; 39
    1538:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    153c:	80 e4       	ldi	r24, 0x40	; 64
    153e:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1542:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	0f 92       	push	r0
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1554:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1556:	8f 71       	andi	r24, 0x1F	; 31
    1558:	80 62       	ori	r24, 0x20	; 32
    155a:	69 83       	std	Y+1, r22	; 0x01
    155c:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1560:	69 81       	ldd	r22, Y+1	; 0x01
    1562:	86 2f       	mov	r24, r22
    1564:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1568:	28 9a       	sbi	0x05, 0	; 5
}
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1572:	0f 93       	push	r16
    1574:	1f 93       	push	r17
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	0f 92       	push	r0
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1582:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1584:	8f 71       	andi	r24, 0x1F	; 31
    1586:	49 83       	std	Y+1, r20	; 0x01
    1588:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    158c:	c8 01       	movw	r24, r16
    158e:	b8 01       	movw	r22, r16
    1590:	49 81       	ldd	r20, Y+1	; 0x01
    1592:	0e 94 63 09 	call	0x12c6	; 0x12c6 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1596:	28 9a       	sbi	0x05, 0	; 5
}
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	08 95       	ret

000015a4 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	0f 92       	push	r0
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    15b4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15b6:	8f 71       	andi	r24, 0x1F	; 31
    15b8:	80 62       	ori	r24, 0x20	; 32
    15ba:	49 83       	std	Y+1, r20	; 0x01
    15bc:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    15c0:	c8 01       	movw	r24, r16
    15c2:	49 81       	ldd	r20, Y+1	; 0x01
    15c4:	64 2f       	mov	r22, r20
    15c6:	0e 94 87 09 	call	0x130e	; 0x130e <SPI_Write_Block>
    mirf_CSN_hi;
    15ca:	28 9a       	sbi	0x05, 0	; 5
}
    15cc:	0f 90       	pop	r0
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	08 95       	ret

000015d8 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	0f 92       	push	r0
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    15e8:	80 91 65 05 	lds	r24, 0x0565
    15ec:	88 23       	and	r24, r24
    15ee:	e1 f7       	brne	.-8      	; 0x15e8 <mirf_send+0x10>

    mirf_CE_lo;
    15f0:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	80 93 65 05 	sts	0x0565, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15f8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15fa:	80 e2       	ldi	r24, 0x20	; 32
    15fc:	69 83       	std	Y+1, r22	; 0x01
    15fe:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1602:	8a e4       	ldi	r24, 0x4A	; 74
    1604:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1608:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    160a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    160c:	81 ee       	ldi	r24, 0xE1	; 225
    160e:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1612:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1614:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1616:	80 ea       	ldi	r24, 0xA0	; 160
    1618:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    161c:	c8 01       	movw	r24, r16
    161e:	69 81       	ldd	r22, Y+1	; 0x01
    1620:	0e 94 87 09 	call	0x130e	; 0x130e <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1624:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1626:	2c 9a       	sbi	0x05, 4	; 5
}
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	08 95       	ret

00001634 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	0f 92       	push	r0
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	18 2f       	mov	r17, r24
    1648:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    164a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    164c:	81 ee       	ldi	r24, 0xE1	; 225
    164e:	99 83       	std	Y+1, r25	; 0x01
    1650:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1654:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1656:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1658:	88 ea       	ldi	r24, 0xA8	; 168
    165a:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    165e:	99 81       	ldd	r25, Y+1	; 0x01
    1660:	00 23       	and	r16, r16
    1662:	61 f0       	breq	.+24     	; 0x167c <writeAckPayload+0x48>
    1664:	61 2f       	mov	r22, r17
    1666:	79 2f       	mov	r23, r25
    1668:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    166a:	f7 01       	movw	r30, r14
    166c:	81 91       	ld	r24, Z+
    166e:	7f 01       	movw	r14, r30
    1670:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1674:	8e 2d       	mov	r24, r14
    1676:	81 1b       	sub	r24, r17
    1678:	80 17       	cp	r24, r16
    167a:	b8 f3       	brcs	.-18     	; 0x166a <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    167c:	28 9a       	sbi	0x05, 0	; 5


}
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	08 95       	ret

0000168e <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    168e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1690:	81 ee       	ldi	r24, 0xE1	; 225
    1692:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1696:	28 9a       	sbi	0x05, 0	; 5

}
    1698:	08 95       	ret

0000169a <handleRFCommands>:

void handleRFCommands() {
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    16a0:	80 91 65 05 	lds	r24, 0x0565
    16a4:	88 23       	and	r24, r24
    16a6:	21 f0       	breq	.+8      	; 0x16b0 <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	1f 91       	pop	r17
    16ae:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    16b0:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    16b2:	8f ef       	ldi	r24, 0xFF	; 255
    16b4:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    16b8:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
    16ba:	86 ff       	sbrs	r24, 6
    16bc:	f5 cf       	rjmp	.-22     	; 0x16a8 <handleRFCommands+0xe>

		rfFlags |= 0x02;
    16be:	80 91 13 04 	lds	r24, 0x0413
    16c2:	82 60       	ori	r24, 0x02	; 2
    16c4:	80 93 13 04 	sts	0x0413, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    16c8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    16ca:	87 e2       	ldi	r24, 0x27	; 39
    16cc:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    16d0:	80 e7       	ldi	r24, 0x70	; 112
    16d2:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    16d6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    16d8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    16da:	81 e6       	ldi	r24, 0x61	; 97
    16dc:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    16e0:	83 e8       	ldi	r24, 0x83	; 131
    16e2:	95 e0       	ldi	r25, 0x05	; 5
    16e4:	bc 01       	movw	r22, r24
    16e6:	4d e0       	ldi	r20, 0x0D	; 13
    16e8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    16ec:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    16ee:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    16f0:	87 e2       	ldi	r24, 0x27	; 39
    16f2:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    SPI_Write_Byte(value);
    16f6:	80 e4       	ldi	r24, 0x40	; 64
    16f8:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    16fc:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    16fe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1700:	82 ee       	ldi	r24, 0xE2	; 226
    1702:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    1706:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1708:	60 91 83 05 	lds	r22, 0x0583
    170c:	66 23       	and	r22, r22
    170e:	09 f4       	brne	.+2      	; 0x1712 <handleRFCommands+0x78>
    1710:	95 c1       	rjmp	.+810    	; 0x1a3c <handleRFCommands+0x3a2>
    1712:	50 91 87 05 	lds	r21, 0x0587
    1716:	40 91 88 05 	lds	r20, 0x0588
    171a:	e0 91 84 05 	lds	r30, 0x0584
    171e:	70 91 85 05 	lds	r23, 0x0585

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1722:	25 2f       	mov	r18, r21
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	2f 77       	andi	r18, 0x7F	; 127
    1728:	30 70       	andi	r19, 0x00	; 0
    172a:	30 93 10 04 	sts	0x0410, r19
    172e:	20 93 0f 04 	sts	0x040F, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1732:	84 2f       	mov	r24, r20
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	8f 77       	andi	r24, 0x7F	; 127
    1738:	90 70       	andi	r25, 0x00	; 0
    173a:	90 93 0e 04 	sts	0x040E, r25
    173e:	80 93 0d 04 	sts	0x040D, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
    1742:	57 fd       	sbrc	r21, 7
    1744:	7f c2       	rjmp	.+1278   	; 0x1c44 <handleRFCommands+0x5aa>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
    1746:	22 0f       	add	r18, r18
    1748:	33 1f       	adc	r19, r19
    174a:	22 0f       	add	r18, r18
    174c:	33 1f       	adc	r19, r19
    174e:	30 95       	com	r19
    1750:	21 95       	neg	r18
    1752:	3f 4f       	sbci	r19, 0xFF	; 255
    1754:	30 93 fa 03 	sts	0x03FA, r19
    1758:	20 93 f9 03 	sts	0x03F9, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    175c:	47 fd       	sbrc	r20, 7
    175e:	7c c2       	rjmp	.+1272   	; 0x1c58 <handleRFCommands+0x5be>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	90 95       	com	r25
    176a:	81 95       	neg	r24
    176c:	9f 4f       	sbci	r25, 0xFF	; 255
    176e:	90 93 fc 03 	sts	0x03FC, r25
    1772:	80 93 fb 03 	sts	0x03FB, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1776:	42 e0       	ldi	r20, 0x02	; 2
    1778:	21 30       	cpi	r18, 0x01	; 1
    177a:	34 07       	cpc	r19, r20
    177c:	44 f0       	brlt	.+16     	; 0x178e <handleRFCommands+0xf4>
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	52 e0       	ldi	r21, 0x02	; 2
    1782:	50 93 fa 03 	sts	0x03FA, r21
    1786:	40 93 f9 03 	sts	0x03F9, r20
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    178e:	42 e0       	ldi	r20, 0x02	; 2
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	94 07       	cpc	r25, r20
    1794:	34 f0       	brlt	.+12     	; 0x17a2 <handleRFCommands+0x108>
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	92 e0       	ldi	r25, 0x02	; 2
    179a:	90 93 fc 03 	sts	0x03FC, r25
    179e:	80 93 fb 03 	sts	0x03FB, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    17a2:	4e ef       	ldi	r20, 0xFE	; 254
    17a4:	20 30       	cpi	r18, 0x00	; 0
    17a6:	34 07       	cpc	r19, r20
    17a8:	34 f4       	brge	.+12     	; 0x17b6 <handleRFCommands+0x11c>
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	5e ef       	ldi	r21, 0xFE	; 254
    17ae:	50 93 fa 03 	sts	0x03FA, r21
    17b2:	40 93 f9 03 	sts	0x03F9, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    17b6:	2e ef       	ldi	r18, 0xFE	; 254
    17b8:	80 30       	cpi	r24, 0x00	; 0
    17ba:	92 07       	cpc	r25, r18
    17bc:	34 f4       	brge	.+12     	; 0x17ca <handleRFCommands+0x130>
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	9e ef       	ldi	r25, 0xFE	; 254
    17c2:	90 93 fc 03 	sts	0x03FC, r25
    17c6:	80 93 fb 03 	sts	0x03FB, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    17ca:	26 2f       	mov	r18, r22
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	30 93 7c 05 	sts	0x057C, r19
    17d2:	20 93 7b 05 	sts	0x057B, r18
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	f0 93 7e 05 	sts	0x057E, r31
    17dc:	e0 93 7d 05 	sts	0x057D, r30
    17e0:	c7 2f       	mov	r28, r23
    17e2:	d0 e0       	ldi	r29, 0x00	; 0
    17e4:	d0 93 80 05 	sts	0x0580, r29
    17e8:	c0 93 7f 05 	sts	0x057F, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    17ec:	92 2f       	mov	r25, r18
    17ee:	88 27       	eor	r24, r24
    17f0:	82 1b       	sub	r24, r18
    17f2:	93 0b       	sbc	r25, r19
    17f4:	24 e6       	ldi	r18, 0x64	; 100
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	b9 01       	movw	r22, r18
    17fa:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <__udivmodhi4>
    17fe:	16 2f       	mov	r17, r22
    1800:	10 95       	com	r17
    1802:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    1806:	5e 2f       	mov	r21, r30
    1808:	44 27       	eor	r20, r20
    180a:	4e 1b       	sub	r20, r30
    180c:	5f 0b       	sbc	r21, r31
    180e:	ca 01       	movw	r24, r20
    1810:	b9 01       	movw	r22, r18
    1812:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <__udivmodhi4>
    1816:	60 95       	com	r22
    1818:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    181c:	5c 2f       	mov	r21, r28
    181e:	44 27       	eor	r20, r20
    1820:	4c 1b       	sub	r20, r28
    1822:	5d 0b       	sbc	r21, r29
    1824:	ca 01       	movw	r24, r20
    1826:	b9 01       	movw	r22, r18
    1828:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <__udivmodhi4>
    182c:	60 95       	com	r22
    182e:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    1832:	81 2f       	mov	r24, r17
    1834:	0e 94 28 24 	call	0x4850	; 0x4850 <updateRedLed>
		updateGreenLed(pwm_green);
    1838:	80 91 0d 02 	lds	r24, 0x020D
    183c:	0e 94 3c 24 	call	0x4878	; 0x4878 <updateGreenLed>
		updateBlueLed(pwm_blue);
    1840:	80 91 0e 02 	lds	r24, 0x020E
    1844:	0e 94 50 24 	call	0x48a0	; 0x48a0 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    1848:	80 91 86 05 	lds	r24, 0x0586
    184c:	80 ff       	sbrs	r24, 0
    184e:	02 c1       	rjmp	.+516    	; 0x1a54 <handleRFCommands+0x3ba>
			LED_IR1_LOW;
    1850:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1852:	81 ff       	sbrs	r24, 1
    1854:	02 c1       	rjmp	.+516    	; 0x1a5a <handleRFCommands+0x3c0>
			LED_IR2_LOW;
    1856:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1858:	98 2f       	mov	r25, r24
    185a:	82 ff       	sbrs	r24, 2
    185c:	02 c1       	rjmp	.+516    	; 0x1a62 <handleRFCommands+0x3c8>
			irEnabled = 1;
    185e:	21 e0       	ldi	r18, 0x01	; 1
    1860:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1864:	84 fd       	sbrc	r24, 4
    1866:	01 c1       	rjmp	.+514    	; 0x1a6a <handleRFCommands+0x3d0>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1868:	86 ff       	sbrs	r24, 6
    186a:	06 c1       	rjmp	.+524    	; 0x1a78 <handleRFCommands+0x3de>
			obstacleAvoidanceEnabled = 1;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	80 93 62 05 	sts	0x0562, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1872:	97 fd       	sbrc	r25, 7
    1874:	05 c1       	rjmp	.+522    	; 0x1a80 <handleRFCommands+0x3e6>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    1876:	10 92 63 05 	sts	0x0563, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    187a:	80 91 89 05 	lds	r24, 0x0589
    187e:	80 ff       	sbrs	r24, 0
    1880:	06 c1       	rjmp	.+524    	; 0x1a8e <handleRFCommands+0x3f4>
				GREEN_LED0_ON;
    1882:	80 91 0b 01 	lds	r24, 0x010B
    1886:	8e 7f       	andi	r24, 0xFE	; 254
    1888:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    188c:	80 91 89 05 	lds	r24, 0x0589
    1890:	81 ff       	sbrs	r24, 1
    1892:	06 c1       	rjmp	.+524    	; 0x1aa0 <handleRFCommands+0x406>
				GREEN_LED1_ON;
    1894:	80 91 0b 01 	lds	r24, 0x010B
    1898:	8d 7f       	andi	r24, 0xFD	; 253
    189a:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    189e:	80 91 89 05 	lds	r24, 0x0589
    18a2:	82 ff       	sbrs	r24, 2
    18a4:	06 c1       	rjmp	.+524    	; 0x1ab2 <handleRFCommands+0x418>
				GREEN_LED2_ON;
    18a6:	80 91 0b 01 	lds	r24, 0x010B
    18aa:	8b 7f       	andi	r24, 0xFB	; 251
    18ac:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    18b0:	80 91 89 05 	lds	r24, 0x0589
    18b4:	83 ff       	sbrs	r24, 3
    18b6:	06 c1       	rjmp	.+524    	; 0x1ac4 <handleRFCommands+0x42a>
				GREEN_LED3_ON;
    18b8:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    18ba:	80 91 89 05 	lds	r24, 0x0589
    18be:	84 ff       	sbrs	r24, 4
    18c0:	06 c1       	rjmp	.+524    	; 0x1ace <handleRFCommands+0x434>
				GREEN_LED4_ON;
    18c2:	80 91 0b 01 	lds	r24, 0x010B
    18c6:	8f 7e       	andi	r24, 0xEF	; 239
    18c8:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    18cc:	80 91 89 05 	lds	r24, 0x0589
    18d0:	85 ff       	sbrs	r24, 5
    18d2:	06 c1       	rjmp	.+524    	; 0x1ae0 <handleRFCommands+0x446>
				GREEN_LED5_ON;
    18d4:	80 91 0b 01 	lds	r24, 0x010B
    18d8:	8f 7d       	andi	r24, 0xDF	; 223
    18da:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    18de:	80 91 89 05 	lds	r24, 0x0589
    18e2:	86 ff       	sbrs	r24, 6
    18e4:	06 c1       	rjmp	.+524    	; 0x1af2 <handleRFCommands+0x458>
				GREEN_LED6_ON;
    18e6:	80 91 0b 01 	lds	r24, 0x010B
    18ea:	8f 7b       	andi	r24, 0xBF	; 191
    18ec:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    18f0:	80 91 89 05 	lds	r24, 0x0589
    18f4:	87 fd       	sbrc	r24, 7
    18f6:	06 c1       	rjmp	.+524    	; 0x1b04 <handleRFCommands+0x46a>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    18f8:	80 91 0b 01 	lds	r24, 0x010B
    18fc:	80 68       	ori	r24, 0x80	; 128
    18fe:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1902:	80 91 0b 02 	lds	r24, 0x020B
    1906:	80 93 6b 05 	sts	0x056B, r24

		switch(packetId) {
    190a:	85 30       	cpi	r24, 0x05	; 5
    190c:	09 f4       	brne	.+2      	; 0x1910 <handleRFCommands+0x276>
    190e:	06 c1       	rjmp	.+524    	; 0x1b1c <handleRFCommands+0x482>
    1910:	86 30       	cpi	r24, 0x06	; 6
    1912:	08 f0       	brcs	.+2      	; 0x1916 <handleRFCommands+0x27c>
    1914:	5f c1       	rjmp	.+702    	; 0x1bd4 <handleRFCommands+0x53a>
    1916:	83 30       	cpi	r24, 0x03	; 3
    1918:	09 f4       	brne	.+2      	; 0x191c <handleRFCommands+0x282>
    191a:	0e c2       	rjmp	.+1052   	; 0x1d38 <handleRFCommands+0x69e>
    191c:	84 30       	cpi	r24, 0x04	; 4
    191e:	09 f0       	breq	.+2      	; 0x1922 <handleRFCommands+0x288>
    1920:	3f c0       	rjmp	.+126    	; 0x19a0 <handleRFCommands+0x306>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    1922:	90 91 69 03 	lds	r25, 0x0369
    1926:	80 91 6a 03 	lds	r24, 0x036A
    192a:	90 93 6c 05 	sts	0x056C, r25
				ackPayload[2] = proximityResult[4]>>8;
    192e:	80 93 6d 05 	sts	0x056D, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    1932:	90 91 71 03 	lds	r25, 0x0371
    1936:	80 91 72 03 	lds	r24, 0x0372
    193a:	90 93 6e 05 	sts	0x056E, r25
				ackPayload[4] = proximityResult[8]>>8;
    193e:	80 93 6f 05 	sts	0x056F, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    1942:	90 91 73 03 	lds	r25, 0x0373
    1946:	80 91 74 03 	lds	r24, 0x0374
    194a:	90 93 70 05 	sts	0x0570, r25
				ackPayload[6] = proximityResult[9]>>8;
    194e:	80 93 71 05 	sts	0x0571, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    1952:	90 91 75 03 	lds	r25, 0x0375
    1956:	80 91 76 03 	lds	r24, 0x0376
    195a:	90 93 72 05 	sts	0x0572, r25
				ackPayload[8] = proximityResult[10]>>8;
    195e:	80 93 73 05 	sts	0x0573, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    1962:	90 91 77 03 	lds	r25, 0x0377
    1966:	80 91 78 03 	lds	r24, 0x0378
    196a:	90 93 74 05 	sts	0x0574, r25
				ackPayload[10] = proximityResult[11]>>8;
    196e:	80 93 75 05 	sts	0x0575, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    1972:	90 91 26 05 	lds	r25, 0x0526
    1976:	80 91 27 05 	lds	r24, 0x0527
    197a:	90 93 76 05 	sts	0x0576, r25
				ackPayload[12] = accX>>8;
    197e:	80 93 77 05 	sts	0x0577, r24
				ackPayload[13] = accY&0xFF;
    1982:	90 91 28 05 	lds	r25, 0x0528
    1986:	80 91 29 05 	lds	r24, 0x0529
    198a:	90 93 78 05 	sts	0x0578, r25
				ackPayload[14] = accY>>8;
    198e:	80 93 79 05 	sts	0x0579, r24
				ackPayload[15] = irCommand;
    1992:	80 91 21 05 	lds	r24, 0x0521
    1996:	80 93 7a 05 	sts	0x057A, r24
				packetId = 5;
    199a:	85 e0       	ldi	r24, 0x05	; 5
    199c:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
    19a0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    19a2:	81 ee       	ldi	r24, 0xE1	; 225
    19a4:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    mirf_CSN_hi;
    19a8:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    19aa:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    19ac:	88 ea       	ldi	r24, 0xA8	; 168
    19ae:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    19b2:	80 91 6b 05 	lds	r24, 0x056B
    19b6:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    19ba:	80 91 6c 05 	lds	r24, 0x056C
    19be:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    19c2:	80 91 6d 05 	lds	r24, 0x056D
    19c6:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    19ca:	80 91 6e 05 	lds	r24, 0x056E
    19ce:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    19d2:	80 91 6f 05 	lds	r24, 0x056F
    19d6:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    19da:	80 91 70 05 	lds	r24, 0x0570
    19de:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    19e2:	80 91 71 05 	lds	r24, 0x0571
    19e6:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    19ea:	80 91 72 05 	lds	r24, 0x0572
    19ee:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    19f2:	80 91 73 05 	lds	r24, 0x0573
    19f6:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    19fa:	80 91 74 05 	lds	r24, 0x0574
    19fe:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    1a02:	80 91 75 05 	lds	r24, 0x0575
    1a06:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    1a0a:	80 91 76 05 	lds	r24, 0x0576
    1a0e:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    1a12:	80 91 77 05 	lds	r24, 0x0577
    1a16:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    1a1a:	80 91 78 05 	lds	r24, 0x0578
    1a1e:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    1a22:	80 91 79 05 	lds	r24, 0x0579
    1a26:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
    1a2a:	80 91 7a 05 	lds	r24, 0x057A
    1a2e:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    1a32:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	1f 91       	pop	r17
    1a3a:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1a3c:	e0 91 84 05 	lds	r30, 0x0584
    1a40:	ee 23       	and	r30, r30
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <handleRFCommands+0x3ac>
    1a44:	12 c1       	rjmp	.+548    	; 0x1c6a <handleRFCommands+0x5d0>
    1a46:	50 91 87 05 	lds	r21, 0x0587
    1a4a:	40 91 88 05 	lds	r20, 0x0588
    1a4e:	70 91 85 05 	lds	r23, 0x0585
    1a52:	67 ce       	rjmp	.-818    	; 0x1722 <handleRFCommands+0x88>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    1a54:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1a56:	81 fd       	sbrc	r24, 1
    1a58:	fe ce       	rjmp	.-516    	; 0x1856 <handleRFCommands+0x1bc>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    1a5a:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1a5c:	98 2f       	mov	r25, r24
    1a5e:	82 fd       	sbrc	r24, 2
    1a60:	fe ce       	rjmp	.-516    	; 0x185e <handleRFCommands+0x1c4>
			irEnabled = 1;
		} else {
			irEnabled = 0;
    1a62:	10 92 12 02 	sts	0x0212, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1a66:	84 ff       	sbrs	r24, 4
    1a68:	ff ce       	rjmp	.-514    	; 0x1868 <handleRFCommands+0x1ce>
			calibrateSensors();
    1a6a:	0e 94 20 27 	call	0x4e40	; 0x4e40 <calibrateSensors>
    1a6e:	90 91 86 05 	lds	r25, 0x0586
    1a72:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1a74:	86 fd       	sbrc	r24, 6
    1a76:	fa ce       	rjmp	.-524    	; 0x186c <handleRFCommands+0x1d2>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    1a78:	10 92 62 05 	sts	0x0562, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1a7c:	97 ff       	sbrs	r25, 7
    1a7e:	fb ce       	rjmp	.-522    	; 0x1876 <handleRFCommands+0x1dc>
			cliffAvoidanceEnabled = 1;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	80 93 63 05 	sts	0x0563, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1a86:	80 91 89 05 	lds	r24, 0x0589
    1a8a:	80 fd       	sbrc	r24, 0
    1a8c:	fa ce       	rjmp	.-524    	; 0x1882 <handleRFCommands+0x1e8>
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    1a8e:	80 91 0b 01 	lds	r24, 0x010B
    1a92:	81 60       	ori	r24, 0x01	; 1
    1a94:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1a98:	80 91 89 05 	lds	r24, 0x0589
    1a9c:	81 fd       	sbrc	r24, 1
    1a9e:	fa ce       	rjmp	.-524    	; 0x1894 <handleRFCommands+0x1fa>
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    1aa0:	80 91 0b 01 	lds	r24, 0x010B
    1aa4:	82 60       	ori	r24, 0x02	; 2
    1aa6:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1aaa:	80 91 89 05 	lds	r24, 0x0589
    1aae:	82 fd       	sbrc	r24, 2
    1ab0:	fa ce       	rjmp	.-524    	; 0x18a6 <handleRFCommands+0x20c>
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    1ab2:	80 91 0b 01 	lds	r24, 0x010B
    1ab6:	84 60       	ori	r24, 0x04	; 4
    1ab8:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1abc:	80 91 89 05 	lds	r24, 0x0589
    1ac0:	83 fd       	sbrc	r24, 3
    1ac2:	fa ce       	rjmp	.-524    	; 0x18b8 <handleRFCommands+0x21e>
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    1ac4:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
    1ac6:	80 91 89 05 	lds	r24, 0x0589
    1aca:	84 fd       	sbrc	r24, 4
    1acc:	fa ce       	rjmp	.-524    	; 0x18c2 <handleRFCommands+0x228>
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    1ace:	80 91 0b 01 	lds	r24, 0x010B
    1ad2:	80 61       	ori	r24, 0x10	; 16
    1ad4:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
    1ad8:	80 91 89 05 	lds	r24, 0x0589
    1adc:	85 fd       	sbrc	r24, 5
    1ade:	fa ce       	rjmp	.-524    	; 0x18d4 <handleRFCommands+0x23a>
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    1ae0:	80 91 0b 01 	lds	r24, 0x010B
    1ae4:	80 62       	ori	r24, 0x20	; 32
    1ae6:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
    1aea:	80 91 89 05 	lds	r24, 0x0589
    1aee:	86 fd       	sbrc	r24, 6
    1af0:	fa ce       	rjmp	.-524    	; 0x18e6 <handleRFCommands+0x24c>
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    1af2:	80 91 0b 01 	lds	r24, 0x010B
    1af6:	80 64       	ori	r24, 0x40	; 64
    1af8:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
    1afc:	80 91 89 05 	lds	r24, 0x0589
    1b00:	87 ff       	sbrs	r24, 7
    1b02:	fa ce       	rjmp	.-524    	; 0x18f8 <handleRFCommands+0x25e>
				GREEN_LED7_ON;
    1b04:	80 91 0b 01 	lds	r24, 0x010B
    1b08:	8f 77       	andi	r24, 0x7F	; 127
    1b0a:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1b0e:	80 91 0b 02 	lds	r24, 0x020B
    1b12:	80 93 6b 05 	sts	0x056B, r24

		switch(packetId) {
    1b16:	85 30       	cpi	r24, 0x05	; 5
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <handleRFCommands+0x482>
    1b1a:	fa ce       	rjmp	.-524    	; 0x1910 <handleRFCommands+0x276>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    1b1c:	80 91 31 03 	lds	r24, 0x0331
    1b20:	90 91 32 03 	lds	r25, 0x0332
    1b24:	80 93 6c 05 	sts	0x056C, r24
				ackPayload[2] = proximityValue[0]>>8;
    1b28:	80 91 31 03 	lds	r24, 0x0331
    1b2c:	90 91 32 03 	lds	r25, 0x0332
    1b30:	90 93 6d 05 	sts	0x056D, r25
				ackPayload[3] = proximityValue[2]&0xFF;
    1b34:	80 91 35 03 	lds	r24, 0x0335
    1b38:	90 91 36 03 	lds	r25, 0x0336
    1b3c:	80 93 6e 05 	sts	0x056E, r24
				ackPayload[4] = proximityValue[2]>>8;
    1b40:	80 91 35 03 	lds	r24, 0x0335
    1b44:	90 91 36 03 	lds	r25, 0x0336
    1b48:	90 93 6f 05 	sts	0x056F, r25
				ackPayload[5] = proximityValue[4]&0xFF;
    1b4c:	80 91 39 03 	lds	r24, 0x0339
    1b50:	90 91 3a 03 	lds	r25, 0x033A
    1b54:	80 93 70 05 	sts	0x0570, r24
				ackPayload[6] = proximityValue[4]>>8;
    1b58:	80 91 39 03 	lds	r24, 0x0339
    1b5c:	90 91 3a 03 	lds	r25, 0x033A
    1b60:	90 93 71 05 	sts	0x0571, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    1b64:	80 91 3d 03 	lds	r24, 0x033D
    1b68:	90 91 3e 03 	lds	r25, 0x033E
    1b6c:	80 93 72 05 	sts	0x0572, r24
				ackPayload[8] = proximityValue[6]>>8;
    1b70:	80 91 3d 03 	lds	r24, 0x033D
    1b74:	90 91 3e 03 	lds	r25, 0x033E
    1b78:	90 93 73 05 	sts	0x0573, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    1b7c:	80 91 45 03 	lds	r24, 0x0345
    1b80:	90 91 46 03 	lds	r25, 0x0346
    1b84:	80 93 74 05 	sts	0x0574, r24
				ackPayload[10] = proximityValue[10]>>8;
    1b88:	80 91 45 03 	lds	r24, 0x0345
    1b8c:	90 91 46 03 	lds	r25, 0x0346
    1b90:	90 93 75 05 	sts	0x0575, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    1b94:	80 91 49 03 	lds	r24, 0x0349
    1b98:	90 91 4a 03 	lds	r25, 0x034A
    1b9c:	80 93 76 05 	sts	0x0576, r24
				ackPayload[12] = proximityValue[12]>>8;
    1ba0:	80 91 49 03 	lds	r24, 0x0349
    1ba4:	90 91 4a 03 	lds	r25, 0x034A
    1ba8:	90 93 77 05 	sts	0x0577, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    1bac:	80 91 4d 03 	lds	r24, 0x034D
    1bb0:	90 91 4e 03 	lds	r25, 0x034E
    1bb4:	80 93 78 05 	sts	0x0578, r24
				ackPayload[14] = proximityValue[14]>>8;
    1bb8:	80 91 4d 03 	lds	r24, 0x034D
    1bbc:	90 91 4e 03 	lds	r25, 0x034E
    1bc0:	90 93 79 05 	sts	0x0579, r25
				ackPayload[15] = currentSelector;
    1bc4:	80 91 49 05 	lds	r24, 0x0549
    1bc8:	80 93 7a 05 	sts	0x057A, r24
				packetId = 6;
    1bcc:	86 e0       	ldi	r24, 0x06	; 6
    1bce:	80 93 0b 02 	sts	0x020B, r24
				break;
    1bd2:	e6 ce       	rjmp	.-564    	; 0x19a0 <handleRFCommands+0x306>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    1bd4:	86 30       	cpi	r24, 0x06	; 6
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <handleRFCommands+0x540>
    1bd8:	5d c0       	rjmp	.+186    	; 0x1c94 <handleRFCommands+0x5fa>
    1bda:	87 30       	cpi	r24, 0x07	; 7
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <handleRFCommands+0x546>
    1bde:	e0 ce       	rjmp	.-576    	; 0x19a0 <handleRFCommands+0x306>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = leftMotSteps&0xFF;
    1be0:	30 91 dd 03 	lds	r19, 0x03DD
    1be4:	20 91 de 03 	lds	r18, 0x03DE
    1be8:	90 91 df 03 	lds	r25, 0x03DF
    1bec:	80 91 e0 03 	lds	r24, 0x03E0
    1bf0:	30 93 6c 05 	sts	0x056C, r19
				ackPayload[2] = leftMotSteps>>8;
    1bf4:	20 93 6d 05 	sts	0x056D, r18
				ackPayload[3] = leftMotSteps>>16;
    1bf8:	90 93 6e 05 	sts	0x056E, r25
				ackPayload[4] = leftMotSteps>>24;
    1bfc:	80 93 6f 05 	sts	0x056F, r24
				ackPayload[5] = rightMotSteps&0xFF;
    1c00:	30 91 d9 03 	lds	r19, 0x03D9
    1c04:	20 91 da 03 	lds	r18, 0x03DA
    1c08:	90 91 db 03 	lds	r25, 0x03DB
    1c0c:	80 91 dc 03 	lds	r24, 0x03DC
    1c10:	30 93 70 05 	sts	0x0570, r19
				ackPayload[6] = rightMotSteps>>8;
    1c14:	20 93 71 05 	sts	0x0571, r18
				ackPayload[7] = rightMotSteps>>16;
    1c18:	90 93 72 05 	sts	0x0572, r25
				ackPayload[8] = rightMotSteps>>24;
    1c1c:	80 93 73 05 	sts	0x0573, r24
				ackPayload[9] = 0;
    1c20:	10 92 74 05 	sts	0x0574, r1
				ackPayload[10] = 0;
    1c24:	10 92 75 05 	sts	0x0575, r1
				ackPayload[11] = 0;
    1c28:	10 92 76 05 	sts	0x0576, r1
				ackPayload[12] = 0;
    1c2c:	10 92 77 05 	sts	0x0577, r1
				ackPayload[13] = 0;
    1c30:	10 92 78 05 	sts	0x0578, r1
				ackPayload[14] = 0;
    1c34:	10 92 79 05 	sts	0x0579, r1
				ackPayload[15] = 0;
    1c38:	10 92 7a 05 	sts	0x057A, r1
				packetId = 3;
    1c3c:	83 e0       	ldi	r24, 0x03	; 3
    1c3e:	80 93 0b 02 	sts	0x020B, r24
				break;
    1c42:	ae ce       	rjmp	.-676    	; 0x19a0 <handleRFCommands+0x306>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    1c44:	22 0f       	add	r18, r18
    1c46:	33 1f       	adc	r19, r19
    1c48:	22 0f       	add	r18, r18
    1c4a:	33 1f       	adc	r19, r19
    1c4c:	30 93 fa 03 	sts	0x03FA, r19
    1c50:	20 93 f9 03 	sts	0x03F9, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    1c54:	47 ff       	sbrs	r20, 7
    1c56:	84 cd       	rjmp	.-1272   	; 0x1760 <handleRFCommands+0xc6>
			pwm_left_desired = speedl<<2;
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	90 93 fc 03 	sts	0x03FC, r25
    1c64:	80 93 fb 03 	sts	0x03FB, r24
    1c68:	86 cd       	rjmp	.-1268   	; 0x1776 <handleRFCommands+0xdc>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1c6a:	70 91 85 05 	lds	r23, 0x0585
    1c6e:	77 23       	and	r23, r23
    1c70:	61 f4       	brne	.+24     	; 0x1c8a <handleRFCommands+0x5f0>
    1c72:	80 91 86 05 	lds	r24, 0x0586
    1c76:	88 30       	cpi	r24, 0x08	; 8
    1c78:	41 f4       	brne	.+16     	; 0x1c8a <handleRFCommands+0x5f0>
    1c7a:	50 91 87 05 	lds	r21, 0x0587
    1c7e:	55 23       	and	r21, r21
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <handleRFCommands+0x5ea>
    1c82:	c0 c0       	rjmp	.+384    	; 0x1e04 <handleRFCommands+0x76a>
    1c84:	40 91 88 05 	lds	r20, 0x0588
    1c88:	4c cd       	rjmp	.-1384   	; 0x1722 <handleRFCommands+0x88>
    1c8a:	50 91 87 05 	lds	r21, 0x0587
    1c8e:	40 91 88 05 	lds	r20, 0x0588
    1c92:	47 cd       	rjmp	.-1394   	; 0x1722 <handleRFCommands+0x88>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    1c94:	80 91 41 03 	lds	r24, 0x0341
    1c98:	90 91 42 03 	lds	r25, 0x0342
    1c9c:	80 93 6c 05 	sts	0x056C, r24
				ackPayload[2] = proximityValue[8]>>8;
    1ca0:	80 91 41 03 	lds	r24, 0x0341
    1ca4:	90 91 42 03 	lds	r25, 0x0342
    1ca8:	90 93 6d 05 	sts	0x056D, r25
				ackPayload[3] = proximityValue[16]&0xFF;
    1cac:	80 91 51 03 	lds	r24, 0x0351
    1cb0:	90 91 52 03 	lds	r25, 0x0352
    1cb4:	80 93 6e 05 	sts	0x056E, r24
				ackPayload[4] = proximityValue[16]>>8;
    1cb8:	80 91 51 03 	lds	r24, 0x0351
    1cbc:	90 91 52 03 	lds	r25, 0x0352
    1cc0:	90 93 6f 05 	sts	0x056F, r25
				ackPayload[5] = proximityValue[18]&0xFF;
    1cc4:	80 91 55 03 	lds	r24, 0x0355
    1cc8:	90 91 56 03 	lds	r25, 0x0356
    1ccc:	80 93 70 05 	sts	0x0570, r24
				ackPayload[6] = proximityValue[18]>>8;
    1cd0:	80 91 55 03 	lds	r24, 0x0355
    1cd4:	90 91 56 03 	lds	r25, 0x0356
    1cd8:	90 93 71 05 	sts	0x0571, r25
				ackPayload[7] = proximityValue[20]&0xFF;
    1cdc:	80 91 59 03 	lds	r24, 0x0359
    1ce0:	90 91 5a 03 	lds	r25, 0x035A
    1ce4:	80 93 72 05 	sts	0x0572, r24
				ackPayload[8] = proximityValue[20]>>8;
    1ce8:	80 91 59 03 	lds	r24, 0x0359
    1cec:	90 91 5a 03 	lds	r25, 0x035A
    1cf0:	90 93 73 05 	sts	0x0573, r25
				ackPayload[9] = proximityValue[22]&0xFF;
    1cf4:	80 91 5d 03 	lds	r24, 0x035D
    1cf8:	90 91 5e 03 	lds	r25, 0x035E
    1cfc:	80 93 74 05 	sts	0x0574, r24
				ackPayload[10] = proximityValue[22]>>8;
    1d00:	80 91 5d 03 	lds	r24, 0x035D
    1d04:	90 91 5e 03 	lds	r25, 0x035E
    1d08:	90 93 75 05 	sts	0x0575, r25
				ackPayload[11] = accZ&0xFF;
    1d0c:	90 91 2a 05 	lds	r25, 0x052A
    1d10:	80 91 2b 05 	lds	r24, 0x052B
    1d14:	90 93 76 05 	sts	0x0576, r25
				ackPayload[12] = accZ>>8;
    1d18:	80 93 77 05 	sts	0x0577, r24
				ackPayload[13] = batteryLevel&0xFF;
    1d1c:	90 91 c5 03 	lds	r25, 0x03C5
    1d20:	80 91 c6 03 	lds	r24, 0x03C6
    1d24:	90 93 78 05 	sts	0x0578, r25
				ackPayload[14] = batteryLevel>>8;
    1d28:	80 93 79 05 	sts	0x0579, r24
				ackPayload[15] = 0;
    1d2c:	10 92 7a 05 	sts	0x057A, r1
				packetId = 7;
    1d30:	87 e0       	ldi	r24, 0x07	; 7
    1d32:	80 93 0b 02 	sts	0x020B, r24
				break;
    1d36:	34 ce       	rjmp	.-920    	; 0x19a0 <handleRFCommands+0x306>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
    1d38:	90 91 61 03 	lds	r25, 0x0361
    1d3c:	80 91 62 03 	lds	r24, 0x0362
    1d40:	90 93 6c 05 	sts	0x056C, r25
				ackPayload[2] = proximityResult[0]>>8;
    1d44:	80 93 6d 05 	sts	0x056D, r24
				ackPayload[3] = proximityResult[1]&0xFF;
    1d48:	90 91 63 03 	lds	r25, 0x0363
    1d4c:	80 91 64 03 	lds	r24, 0x0364
    1d50:	90 93 6e 05 	sts	0x056E, r25
				ackPayload[4] = proximityResult[1]>>8;
    1d54:	80 93 6f 05 	sts	0x056F, r24
				ackPayload[5] = proximityResult[2]&0xFF;
    1d58:	90 91 65 03 	lds	r25, 0x0365
    1d5c:	80 91 66 03 	lds	r24, 0x0366
    1d60:	90 93 70 05 	sts	0x0570, r25
				ackPayload[6] = proximityResult[2]>>8;
    1d64:	80 93 71 05 	sts	0x0571, r24
				ackPayload[7] = proximityResult[3]&0xFF;
    1d68:	90 91 67 03 	lds	r25, 0x0367
    1d6c:	80 91 68 03 	lds	r24, 0x0368
    1d70:	90 93 72 05 	sts	0x0572, r25
				ackPayload[8] = proximityResult[3]>>8;
    1d74:	80 93 73 05 	sts	0x0573, r24
				ackPayload[9] = proximityResult[5]&0xFF;
    1d78:	90 91 6b 03 	lds	r25, 0x036B
    1d7c:	80 91 6c 03 	lds	r24, 0x036C
    1d80:	90 93 74 05 	sts	0x0574, r25
				ackPayload[10] = proximityResult[5]>>8;
    1d84:	80 93 75 05 	sts	0x0575, r24
				ackPayload[11] = proximityResult[6]&0xFF;
    1d88:	90 91 6d 03 	lds	r25, 0x036D
    1d8c:	80 91 6e 03 	lds	r24, 0x036E
    1d90:	90 93 76 05 	sts	0x0576, r25
				ackPayload[12] = proximityResult[6]>>8;
    1d94:	80 93 77 05 	sts	0x0577, r24
				ackPayload[13] = proximityResult[7]&0xFF;
    1d98:	90 91 6f 03 	lds	r25, 0x036F
    1d9c:	80 91 70 03 	lds	r24, 0x0370
    1da0:	90 93 78 05 	sts	0x0578, r25
				ackPayload[14] = proximityResult[7]>>8;
    1da4:	80 93 79 05 	sts	0x0579, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    1da8:	30 91 03 01 	lds	r19, 0x0103
    1dac:	80 91 03 01 	lds	r24, 0x0103
    1db0:	20 91 03 01 	lds	r18, 0x0103
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	80 72       	andi	r24, 0x20	; 32
    1db8:	90 70       	andi	r25, 0x00	; 0
    1dba:	95 95       	asr	r25
    1dbc:	87 95       	ror	r24
    1dbe:	95 95       	asr	r25
    1dc0:	87 95       	ror	r24
    1dc2:	95 95       	asr	r25
    1dc4:	87 95       	ror	r24
    1dc6:	95 95       	asr	r25
    1dc8:	87 95       	ror	r24
    1dca:	95 95       	asr	r25
    1dcc:	87 95       	ror	r24
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	22 1f       	adc	r18, r18
    1dd4:	22 27       	eor	r18, r18
    1dd6:	22 1f       	adc	r18, r18
    1dd8:	22 0f       	add	r18, r18
    1dda:	22 0f       	add	r18, r18
    1ddc:	28 2b       	or	r18, r24
    1dde:	83 2f       	mov	r24, r19
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	80 71       	andi	r24, 0x10	; 16
    1de4:	90 70       	andi	r25, 0x00	; 0
    1de6:	95 95       	asr	r25
    1de8:	87 95       	ror	r24
    1dea:	95 95       	asr	r25
    1dec:	87 95       	ror	r24
    1dee:	95 95       	asr	r25
    1df0:	87 95       	ror	r24
    1df2:	95 95       	asr	r25
    1df4:	87 95       	ror	r24
    1df6:	28 2b       	or	r18, r24
    1df8:	20 93 7a 05 	sts	0x057A, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    1dfc:	84 e0       	ldi	r24, 0x04	; 4
    1dfe:	80 93 0b 02 	sts	0x020B, r24
				break;
    1e02:	ce cd       	rjmp	.-1124   	; 0x19a0 <handleRFCommands+0x306>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1e04:	40 91 88 05 	lds	r20, 0x0588
    1e08:	44 23       	and	r20, r20
    1e0a:	79 f0       	breq	.+30     	; 0x1e2a <handleRFCommands+0x790>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1e0c:	10 92 10 04 	sts	0x0410, r1
    1e10:	10 92 0f 04 	sts	0x040F, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1e14:	84 2f       	mov	r24, r20
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	8f 77       	andi	r24, 0x7F	; 127
    1e1a:	90 70       	andi	r25, 0x00	; 0
    1e1c:	90 93 0e 04 	sts	0x040E, r25
    1e20:	80 93 0d 04 	sts	0x040D, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	8e cc       	rjmp	.-1764   	; 0x1746 <handleRFCommands+0xac>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    1e2a:	8c e3       	ldi	r24, 0x3C	; 60
    1e2c:	0e 94 9d 19 	call	0x333a	; 0x333a <sleep>
    1e30:	50 91 87 05 	lds	r21, 0x0587
    1e34:	40 91 88 05 	lds	r20, 0x0588
    1e38:	60 91 83 05 	lds	r22, 0x0583
    1e3c:	e0 91 84 05 	lds	r30, 0x0584
    1e40:	70 91 85 05 	lds	r23, 0x0585
    1e44:	6e cc       	rjmp	.-1828   	; 0x1722 <handleRFCommands+0x88>

00001e46 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29

	PCICR = 0;
    1e4a:	c8 e6       	ldi	r28, 0x68	; 104
    1e4c:	d0 e0       	ldi	r29, 0x00	; 0
    1e4e:	18 82       	st	Y, r1
	PCMSK1 = 0;
    1e50:	ac e6       	ldi	r26, 0x6C	; 108
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	1c 92       	st	X, r1
	TCCR2A = 0;
    1e56:	e0 eb       	ldi	r30, 0xB0	; 176
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	10 82       	st	Z, r1
	TCCR2B = 0;
    1e5c:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    1e60:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    1e64:	88 81       	ld	r24, Y
    1e66:	82 60       	ori	r24, 0x02	; 2
    1e68:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    1e6a:	8c 91       	ld	r24, X
    1e6c:	80 68       	ori	r24, 0x80	; 128
    1e6e:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    1e70:	80 81       	ld	r24, Z
    1e72:	82 60       	ori	r24, 0x02	; 2
    1e74:	80 83       	st	Z, r24

}
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	08 95       	ret

00001e7c <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    1e7c:	1f 92       	push	r1
    1e7e:	0f 92       	push	r0
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	0f 92       	push	r0
    1e84:	11 24       	eor	r1, r1
    1e86:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    1e88:	80 91 12 02 	lds	r24, 0x0212
    1e8c:	88 23       	and	r24, r24
    1e8e:	21 f1       	breq	.+72     	; 0x1ed8 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    1e90:	80 91 03 01 	lds	r24, 0x0103
    1e94:	86 fd       	sbrc	r24, 6
    1e96:	20 c0       	rjmp	.+64     	; 0x1ed8 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    1e98:	80 91 68 00 	lds	r24, 0x0068
    1e9c:	8d 7f       	andi	r24, 0xFD	; 253
    1e9e:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    1ea2:	80 91 6c 00 	lds	r24, 0x006C
    1ea6:	8f 77       	andi	r24, 0x7F	; 127
    1ea8:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    1eb2:	8d e0       	ldi	r24, 0x0D	; 13
    1eb4:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1eb8:	80 91 b1 00 	lds	r24, 0x00B1
    1ebc:	86 60       	ori	r24, 0x06	; 6
    1ebe:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    1ec2:	80 91 70 00 	lds	r24, 0x0070
    1ec6:	82 60       	ori	r24, 0x02	; 2
    1ec8:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    1ecc:	10 92 28 03 	sts	0x0328, r1
    1ed0:	10 92 29 03 	sts	0x0329, r1
    1ed4:	10 92 2a 03 	sts	0x032A, r1

		}

	}
	
}
    1ed8:	8f 91       	pop	r24
    1eda:	0f 90       	pop	r0
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	0f 90       	pop	r0
    1ee0:	1f 90       	pop	r1
    1ee2:	18 95       	reti

00001ee4 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    1ee4:	1f 92       	push	r1
    1ee6:	0f 92       	push	r0
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	0f 92       	push	r0
    1eec:	11 24       	eor	r1, r1
    1eee:	2f 93       	push	r18
    1ef0:	3f 93       	push	r19
    1ef2:	4f 93       	push	r20
    1ef4:	5f 93       	push	r21
    1ef6:	8f 93       	push	r24
    1ef8:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    1efa:	80 91 b1 00 	lds	r24, 0x00B1
    1efe:	88 7f       	andi	r24, 0xF8	; 248
    1f00:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    1f04:	80 91 13 02 	lds	r24, 0x0213
    1f08:	88 23       	and	r24, r24
    1f0a:	a9 f0       	breq	.+42     	; 0x1f36 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    1f0c:	80 91 03 01 	lds	r24, 0x0103
    1f10:	86 ff       	sbrs	r24, 6
    1f12:	65 c0       	rjmp	.+202    	; 0x1fde <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1f14:	80 91 68 00 	lds	r24, 0x0068
    1f18:	82 60       	ori	r24, 0x02	; 2
    1f1a:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1f1e:	80 91 6c 00 	lds	r24, 0x006C
    1f22:	80 68       	ori	r24, 0x80	; 128
    1f24:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1f28:	8f ef       	ldi	r24, 0xFF	; 255
    1f2a:	9f ef       	ldi	r25, 0xFF	; 255
    1f2c:	90 93 02 02 	sts	0x0202, r25
    1f30:	80 93 01 02 	sts	0x0201, r24
    1f34:	49 c0       	rjmp	.+146    	; 0x1fc8 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    1f36:	80 91 01 02 	lds	r24, 0x0201
    1f3a:	90 91 02 02 	lds	r25, 0x0202
    1f3e:	2f ef       	ldi	r18, 0xFF	; 255
    1f40:	8f 3f       	cpi	r24, 0xFF	; 255
    1f42:	92 07       	cpc	r25, r18
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <__vector_13+0x64>
    1f46:	63 c0       	rjmp	.+198    	; 0x200e <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <__vector_13+0x6c>
    1f4e:	98 c0       	rjmp	.+304    	; 0x2080 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    1f50:	9c 01       	movw	r18, r24
    1f52:	22 50       	subi	r18, 0x02	; 2
    1f54:	30 40       	sbci	r19, 0x00	; 0
    1f56:	25 30       	cpi	r18, 0x05	; 5
    1f58:	31 05       	cpc	r19, r1
    1f5a:	08 f4       	brcc	.+2      	; 0x1f5e <__vector_13+0x7a>
    1f5c:	67 c0       	rjmp	.+206    	; 0x202c <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    1f5e:	9c 01       	movw	r18, r24
    1f60:	27 50       	subi	r18, 0x07	; 7
    1f62:	30 40       	sbci	r19, 0x00	; 0
    1f64:	26 30       	cpi	r18, 0x06	; 6
    1f66:	31 05       	cpc	r19, r1
    1f68:	08 f0       	brcs	.+2      	; 0x1f6c <__vector_13+0x88>
    1f6a:	bd c0       	rjmp	.+378    	; 0x20e6 <__vector_13+0x202>

				OCR2A = 54;
    1f6c:	26 e3       	ldi	r18, 0x36	; 54
    1f6e:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1f72:	20 91 b1 00 	lds	r18, 0x00B1
    1f76:	26 60       	ori	r18, 0x06	; 6
    1f78:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1f7c:	20 91 70 00 	lds	r18, 0x0070
    1f80:	22 60       	ori	r18, 0x02	; 2
    1f82:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1f86:	20 91 03 01 	lds	r18, 0x0103
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	20 74       	andi	r18, 0x40	; 64
    1f8e:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    1f90:	00 24       	eor	r0, r0
    1f92:	22 0f       	add	r18, r18
    1f94:	33 1f       	adc	r19, r19
    1f96:	00 1c       	adc	r0, r0
    1f98:	22 0f       	add	r18, r18
    1f9a:	33 1f       	adc	r19, r19
    1f9c:	00 1c       	adc	r0, r0
    1f9e:	23 2f       	mov	r18, r19
    1fa0:	30 2d       	mov	r19, r0
    1fa2:	4c e0       	ldi	r20, 0x0C	; 12
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	48 1b       	sub	r20, r24
    1fa8:	59 0b       	sbc	r21, r25
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <__vector_13+0xcc>
    1fac:	22 0f       	add	r18, r18
    1fae:	33 1f       	adc	r19, r19
    1fb0:	4a 95       	dec	r20
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <__vector_13+0xc8>
				data_temp += temp;
    1fb4:	40 91 28 03 	lds	r20, 0x0328
    1fb8:	42 0f       	add	r20, r18
    1fba:	40 93 28 03 	sts	0x0328, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    1fbe:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    1fc0:	90 93 02 02 	sts	0x0202, r25
    1fc4:	80 93 01 02 	sts	0x0201, r24

		}

}
    1fc8:	9f 91       	pop	r25
    1fca:	8f 91       	pop	r24
    1fcc:	5f 91       	pop	r21
    1fce:	4f 91       	pop	r20
    1fd0:	3f 91       	pop	r19
    1fd2:	2f 91       	pop	r18
    1fd4:	0f 90       	pop	r0
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	0f 90       	pop	r0
    1fda:	1f 90       	pop	r1
    1fdc:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    1fde:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    1fe2:	83 e3       	ldi	r24, 0x33	; 51
    1fe4:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1fe8:	80 91 b1 00 	lds	r24, 0x00B1
    1fec:	86 60       	ori	r24, 0x06	; 6
    1fee:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1ff2:	80 91 70 00 	lds	r24, 0x0070
    1ff6:	82 60       	ori	r24, 0x02	; 2
    1ff8:	80 93 70 00 	sts	0x0070, r24
    1ffc:	80 91 01 02 	lds	r24, 0x0201
    2000:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    2004:	2f ef       	ldi	r18, 0xFF	; 255
    2006:	8f 3f       	cpi	r24, 0xFF	; 255
    2008:	92 07       	cpc	r25, r18
    200a:	c9 f6       	brne	.-78     	; 0x1fbe <__vector_13+0xda>
    200c:	dd cf       	rjmp	.-70     	; 0x1fc8 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    200e:	20 91 03 01 	lds	r18, 0x0103
    2012:	26 ff       	sbrs	r18, 6
    2014:	52 c0       	rjmp	.+164    	; 0x20ba <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    2016:	20 91 68 00 	lds	r18, 0x0068
    201a:	22 60       	ori	r18, 0x02	; 2
    201c:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2020:	20 91 6c 00 	lds	r18, 0x006C
    2024:	20 68       	ori	r18, 0x80	; 128
    2026:	20 93 6c 00 	sts	0x006C, r18
    202a:	ce cf       	rjmp	.-100    	; 0x1fc8 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    202c:	26 e3       	ldi	r18, 0x36	; 54
    202e:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2032:	20 91 b1 00 	lds	r18, 0x00B1
    2036:	26 60       	ori	r18, 0x06	; 6
    2038:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    203c:	20 91 70 00 	lds	r18, 0x0070
    2040:	22 60       	ori	r18, 0x02	; 2
    2042:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2046:	20 91 03 01 	lds	r18, 0x0103
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	20 74       	andi	r18, 0x40	; 64
    204e:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2050:	00 24       	eor	r0, r0
    2052:	22 0f       	add	r18, r18
    2054:	33 1f       	adc	r19, r19
    2056:	00 1c       	adc	r0, r0
    2058:	22 0f       	add	r18, r18
    205a:	33 1f       	adc	r19, r19
    205c:	00 1c       	adc	r0, r0
    205e:	23 2f       	mov	r18, r19
    2060:	30 2d       	mov	r19, r0
    2062:	46 e0       	ldi	r20, 0x06	; 6
    2064:	50 e0       	ldi	r21, 0x00	; 0
    2066:	48 1b       	sub	r20, r24
    2068:	59 0b       	sbc	r21, r25
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <__vector_13+0x18c>
    206c:	22 0f       	add	r18, r18
    206e:	33 1f       	adc	r19, r19
    2070:	4a 95       	dec	r20
    2072:	e2 f7       	brpl	.-8      	; 0x206c <__vector_13+0x188>
				address_temp += temp;
    2074:	40 91 29 03 	lds	r20, 0x0329
    2078:	42 0f       	add	r20, r18
    207a:	40 93 29 03 	sts	0x0329, r20
    207e:	9f cf       	rjmp	.-194    	; 0x1fbe <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2080:	20 91 03 01 	lds	r18, 0x0103
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	20 74       	andi	r18, 0x40	; 64
    2088:	30 70       	andi	r19, 0x00	; 0
    208a:	02 2e       	mov	r0, r18
    208c:	23 2f       	mov	r18, r19
    208e:	00 0c       	add	r0, r0
    2090:	22 1f       	adc	r18, r18
    2092:	33 0b       	sbc	r19, r19
    2094:	00 0c       	add	r0, r0
    2096:	22 1f       	adc	r18, r18
    2098:	33 1f       	adc	r19, r19
    209a:	20 93 2a 03 	sts	0x032A, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    209e:	26 e3       	ldi	r18, 0x36	; 54
    20a0:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    20a4:	20 91 b1 00 	lds	r18, 0x00B1
    20a8:	26 60       	ori	r18, 0x06	; 6
    20aa:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    20ae:	20 91 70 00 	lds	r18, 0x0070
    20b2:	22 60       	ori	r18, 0x02	; 2
    20b4:	20 93 70 00 	sts	0x0070, r18
    20b8:	82 cf       	rjmp	.-252    	; 0x1fbe <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    20ba:	8c e1       	ldi	r24, 0x1C	; 28
    20bc:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    20c0:	80 91 b1 00 	lds	r24, 0x00B1
    20c4:	86 60       	ori	r24, 0x06	; 6
    20c6:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    20ca:	80 91 70 00 	lds	r24, 0x0070
    20ce:	82 60       	ori	r24, 0x02	; 2
    20d0:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    20d4:	10 92 28 03 	sts	0x0328, r1
    20d8:	10 92 29 03 	sts	0x0329, r1
    20dc:	10 92 2a 03 	sts	0x032A, r1
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	6d cf       	rjmp	.-294    	; 0x1fc0 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    20e6:	8d 30       	cpi	r24, 0x0D	; 13
    20e8:	91 05       	cpc	r25, r1
    20ea:	09 f0       	breq	.+2      	; 0x20ee <__vector_13+0x20a>
    20ec:	68 cf       	rjmp	.-304    	; 0x1fbe <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    20ee:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    20f2:	80 91 68 00 	lds	r24, 0x0068
    20f6:	82 60       	ori	r24, 0x02	; 2
    20f8:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    20fc:	80 91 6c 00 	lds	r24, 0x006C
    2100:	80 68       	ori	r24, 0x80	; 128
    2102:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    2106:	8f ef       	ldi	r24, 0xFF	; 255
    2108:	9f ef       	ldi	r25, 0xFF	; 255
    210a:	90 93 02 02 	sts	0x0202, r25
    210e:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    2112:	80 91 2a 03 	lds	r24, 0x032A
    2116:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    211a:	80 91 29 03 	lds	r24, 0x0329
    211e:	80 93 26 03 	sts	0x0326, r24
				data_ir = data_temp;
    2122:	80 91 28 03 	lds	r24, 0x0328
    2126:	80 93 27 03 	sts	0x0327, r24
				command_received=1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	80 93 22 05 	sts	0x0522, r24
    2130:	4b cf       	rjmp	.-362    	; 0x1fc8 <__vector_13+0xe4>

00002132 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    2132:	80 91 00 02 	lds	r24, 0x0200
    2136:	08 95       	ret

00002138 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    2138:	80 91 26 03 	lds	r24, 0x0326
    213c:	08 95       	ret

0000213e <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    213e:	80 91 27 03 	lds	r24, 0x0327
    2142:	08 95       	ret

00002144 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    2144:	80 91 12 02 	lds	r24, 0x0212
    2148:	88 23       	and	r24, r24
    214a:	b1 f1       	breq	.+108    	; 0x21b8 <handleIRRemoteCommands+0x74>

		if(command_received) {
    214c:	80 91 22 05 	lds	r24, 0x0522
    2150:	88 23       	and	r24, r24
    2152:	91 f1       	breq	.+100    	; 0x21b8 <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    2154:	e0 91 27 03 	lds	r30, 0x0327

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    2158:	e0 93 21 05 	sts	0x0521, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    215c:	10 92 22 05 	sts	0x0522, r1

			switch(irCommand) {
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	e5 33       	cpi	r30, 0x35	; 53
    2164:	f1 05       	cpc	r31, r1
    2166:	48 f1       	brcs	.+82     	; 0x21ba <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    2168:	20 91 f9 03 	lds	r18, 0x03F9
    216c:	30 91 fa 03 	lds	r19, 0x03FA
    2170:	80 91 fb 03 	lds	r24, 0x03FB
    2174:	90 91 fc 03 	lds	r25, 0x03FC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2178:	37 fd       	sbrc	r19, 7
    217a:	27 c0       	rjmp	.+78     	; 0x21ca <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    217c:	35 95       	asr	r19
    217e:	27 95       	ror	r18
    2180:	35 95       	asr	r19
    2182:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    2184:	30 93 10 04 	sts	0x0410, r19
    2188:	20 93 0f 04 	sts	0x040F, r18
			}
			if(pwm_left_desired >= 0) {
    218c:	97 fd       	sbrc	r25, 7
    218e:	09 c0       	rjmp	.+18     	; 0x21a2 <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    2190:	95 95       	asr	r25
    2192:	87 95       	ror	r24
    2194:	95 95       	asr	r25
    2196:	87 95       	ror	r24
    2198:	90 93 0e 04 	sts	0x040E, r25
    219c:	80 93 0d 04 	sts	0x040D, r24
    21a0:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    21a2:	90 95       	com	r25
    21a4:	81 95       	neg	r24
    21a6:	9f 4f       	sbci	r25, 0xFF	; 255
    21a8:	95 95       	asr	r25
    21aa:	87 95       	ror	r24
    21ac:	95 95       	asr	r25
    21ae:	87 95       	ror	r24
    21b0:	90 93 0e 04 	sts	0x040E, r25
    21b4:	80 93 0d 04 	sts	0x040D, r24
    21b8:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    21ba:	ee 58       	subi	r30, 0x8E	; 142
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	ee 0f       	add	r30, r30
    21c0:	ff 1f       	adc	r31, r31
    21c2:	05 90       	lpm	r0, Z+
    21c4:	f4 91       	lpm	r31, Z+
    21c6:	e0 2d       	mov	r30, r0
    21c8:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    21ca:	30 95       	com	r19
    21cc:	21 95       	neg	r18
    21ce:	3f 4f       	sbci	r19, 0xFF	; 255
    21d0:	d5 cf       	rjmp	.-86     	; 0x217c <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    21d2:	80 93 62 05 	sts	0x0562, r24
							cliffAvoidanceEnabled = 0;
    21d6:	10 92 63 05 	sts	0x0563, r1
    21da:	c6 cf       	rjmp	.-116    	; 0x2168 <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    21dc:	10 92 62 05 	sts	0x0562, r1
							cliffAvoidanceEnabled = 1;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	80 93 63 05 	sts	0x0563, r24
    21e6:	20 91 f9 03 	lds	r18, 0x03F9
    21ea:	30 91 fa 03 	lds	r19, 0x03FA
    21ee:	80 91 fb 03 	lds	r24, 0x03FB
    21f2:	90 91 fc 03 	lds	r25, 0x03FC
							break;
    21f6:	c0 cf       	rjmp	.-128    	; 0x2178 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    21f8:	10 92 62 05 	sts	0x0562, r1
    21fc:	20 91 f9 03 	lds	r18, 0x03F9
    2200:	30 91 fa 03 	lds	r19, 0x03FA
    2204:	80 91 fb 03 	lds	r24, 0x03FB
    2208:	90 91 fc 03 	lds	r25, 0x03FC
					break;
    220c:	b5 cf       	rjmp	.-150    	; 0x2178 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	80 93 62 05 	sts	0x0562, r24
    2214:	20 91 f9 03 	lds	r18, 0x03F9
    2218:	30 91 fa 03 	lds	r19, 0x03FA
    221c:	80 91 fb 03 	lds	r24, 0x03FB
    2220:	90 91 fc 03 	lds	r25, 0x03FC
					break;
    2224:	a9 cf       	rjmp	.-174    	; 0x2178 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    2226:	80 91 fb 03 	lds	r24, 0x03FB
    222a:	90 91 fc 03 	lds	r25, 0x03FC
    222e:	0f 97       	sbiw	r24, 0x0f	; 15
    2230:	90 93 fc 03 	sts	0x03FC, r25
    2234:	80 93 fb 03 	sts	0x03FB, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2238:	2e ef       	ldi	r18, 0xFE	; 254
    223a:	80 30       	cpi	r24, 0x00	; 0
    223c:	92 07       	cpc	r25, r18
    223e:	9c f5       	brge	.+102    	; 0x22a6 <__stack+0xa7>
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	9e ef       	ldi	r25, 0xFE	; 254
    2244:	90 93 fc 03 	sts	0x03FC, r25
    2248:	80 93 fb 03 	sts	0x03FB, r24
    224c:	20 91 f9 03 	lds	r18, 0x03F9
    2250:	30 91 fa 03 	lds	r19, 0x03FA
    2254:	91 cf       	rjmp	.-222    	; 0x2178 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    2256:	20 91 f9 03 	lds	r18, 0x03F9
    225a:	30 91 fa 03 	lds	r19, 0x03FA
    225e:	80 91 f7 03 	lds	r24, 0x03F7
    2262:	90 91 f8 03 	lds	r25, 0x03F8
    2266:	28 17       	cp	r18, r24
    2268:	39 07       	cpc	r19, r25
    226a:	24 f0       	brlt	.+8      	; 0x2274 <__stack+0x75>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    226c:	20 91 fb 03 	lds	r18, 0x03FB
    2270:	30 91 fc 03 	lds	r19, 0x03FC
					}
					pwm_right_desired -= STEP_MOTORS;
    2274:	2f 50       	subi	r18, 0x0F	; 15
    2276:	30 40       	sbci	r19, 0x00	; 0
    2278:	30 93 fa 03 	sts	0x03FA, r19
    227c:	20 93 f9 03 	sts	0x03F9, r18
					pwm_left_desired -= STEP_MOTORS;
    2280:	c9 01       	movw	r24, r18
    2282:	30 93 fc 03 	sts	0x03FC, r19
    2286:	20 93 fb 03 	sts	0x03FB, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    228a:	4e ef       	ldi	r20, 0xFE	; 254
    228c:	20 30       	cpi	r18, 0x00	; 0
    228e:	34 07       	cpc	r19, r20
    2290:	34 f4       	brge	.+12     	; 0x229e <__stack+0x9f>
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	5e ef       	ldi	r21, 0xFE	; 254
    2296:	50 93 fa 03 	sts	0x03FA, r21
    229a:	40 93 f9 03 	sts	0x03F9, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    229e:	4e ef       	ldi	r20, 0xFE	; 254
    22a0:	20 30       	cpi	r18, 0x00	; 0
    22a2:	34 07       	cpc	r19, r20
    22a4:	6c f2       	brlt	.-102    	; 0x2240 <__stack+0x41>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    22a6:	20 91 f9 03 	lds	r18, 0x03F9
    22aa:	30 91 fa 03 	lds	r19, 0x03FA
    22ae:	64 cf       	rjmp	.-312    	; 0x2178 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    22b0:	20 91 f9 03 	lds	r18, 0x03F9
    22b4:	30 91 fa 03 	lds	r19, 0x03FA
    22b8:	2f 50       	subi	r18, 0x0F	; 15
    22ba:	30 40       	sbci	r19, 0x00	; 0
    22bc:	30 93 fa 03 	sts	0x03FA, r19
    22c0:	20 93 f9 03 	sts	0x03F9, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    22c4:	4e ef       	ldi	r20, 0xFE	; 254
    22c6:	20 30       	cpi	r18, 0x00	; 0
    22c8:	34 07       	cpc	r19, r20
    22ca:	0c f0       	brlt	.+2      	; 0x22ce <__stack+0xcf>
    22cc:	17 c1       	rjmp	.+558    	; 0x24fc <__stack+0x2fd>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	9e ef       	ldi	r25, 0xFE	; 254
    22d2:	90 93 fa 03 	sts	0x03FA, r25
    22d6:	80 93 f9 03 	sts	0x03F9, r24
    22da:	80 91 fb 03 	lds	r24, 0x03FB
    22de:	90 91 fc 03 	lds	r25, 0x03FC
    22e2:	20 e8       	ldi	r18, 0x80	; 128
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	4e cf       	rjmp	.-356    	; 0x2184 <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    22e8:	20 91 f9 03 	lds	r18, 0x03F9
    22ec:	30 91 fa 03 	lds	r19, 0x03FA
    22f0:	2f 50       	subi	r18, 0x0F	; 15
    22f2:	30 40       	sbci	r19, 0x00	; 0
    22f4:	30 93 fa 03 	sts	0x03FA, r19
    22f8:	20 93 f9 03 	sts	0x03F9, r18
					pwm_left_desired += STEP_MOTORS;
    22fc:	80 91 fb 03 	lds	r24, 0x03FB
    2300:	90 91 fc 03 	lds	r25, 0x03FC
    2304:	0f 96       	adiw	r24, 0x0f	; 15
    2306:	90 93 fc 03 	sts	0x03FC, r25
    230a:	80 93 fb 03 	sts	0x03FB, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    230e:	4e ef       	ldi	r20, 0xFE	; 254
    2310:	20 30       	cpi	r18, 0x00	; 0
    2312:	34 07       	cpc	r19, r20
    2314:	34 f4       	brge	.+12     	; 0x2322 <__stack+0x123>
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	3e ef       	ldi	r19, 0xFE	; 254
    231a:	30 93 fa 03 	sts	0x03FA, r19
    231e:	20 93 f9 03 	sts	0x03F9, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2322:	42 e0       	ldi	r20, 0x02	; 2
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	94 07       	cpc	r25, r20
    2328:	0c f4       	brge	.+2      	; 0x232c <__stack+0x12d>
    232a:	26 cf       	rjmp	.-436    	; 0x2178 <handleIRRemoteCommands+0x34>
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	92 e0       	ldi	r25, 0x02	; 2
    2330:	90 93 fc 03 	sts	0x03FC, r25
    2334:	80 93 fb 03 	sts	0x03FB, r24
    2338:	1f cf       	rjmp	.-450    	; 0x2178 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    233a:	20 91 f9 03 	lds	r18, 0x03F9
    233e:	30 91 fa 03 	lds	r19, 0x03FA
    2342:	80 91 fb 03 	lds	r24, 0x03FB
    2346:	90 91 fc 03 	lds	r25, 0x03FC
    234a:	82 17       	cp	r24, r18
    234c:	93 07       	cpc	r25, r19
    234e:	0c f4       	brge	.+2      	; 0x2352 <__stack+0x153>
    2350:	da c0       	rjmp	.+436    	; 0x2506 <__stack+0x307>
    2352:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    2354:	21 5f       	subi	r18, 0xF1	; 241
    2356:	3f 4f       	sbci	r19, 0xFF	; 255
    2358:	30 93 fa 03 	sts	0x03FA, r19
    235c:	20 93 f9 03 	sts	0x03F9, r18
					pwm_left_desired += STEP_MOTORS;
    2360:	0f 96       	adiw	r24, 0x0f	; 15
    2362:	90 93 fc 03 	sts	0x03FC, r25
    2366:	80 93 fb 03 	sts	0x03FB, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    236a:	42 e0       	ldi	r20, 0x02	; 2
    236c:	21 30       	cpi	r18, 0x01	; 1
    236e:	34 07       	cpc	r19, r20
    2370:	34 f0       	brlt	.+12     	; 0x237e <__stack+0x17f>
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	32 e0       	ldi	r19, 0x02	; 2
    2376:	30 93 fa 03 	sts	0x03FA, r19
    237a:	20 93 f9 03 	sts	0x03F9, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    237e:	22 e0       	ldi	r18, 0x02	; 2
    2380:	81 30       	cpi	r24, 0x01	; 1
    2382:	92 07       	cpc	r25, r18
    2384:	0c f4       	brge	.+2      	; 0x2388 <__stack+0x189>
    2386:	8f cf       	rjmp	.-226    	; 0x22a6 <__stack+0xa7>
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	92 e0       	ldi	r25, 0x02	; 2
    238c:	90 93 fc 03 	sts	0x03FC, r25
    2390:	80 93 fb 03 	sts	0x03FB, r24
    2394:	20 91 f9 03 	lds	r18, 0x03F9
    2398:	30 91 fa 03 	lds	r19, 0x03FA
    239c:	ed ce       	rjmp	.-550    	; 0x2178 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    239e:	20 91 f9 03 	lds	r18, 0x03F9
    23a2:	30 91 fa 03 	lds	r19, 0x03FA
    23a6:	21 5f       	subi	r18, 0xF1	; 241
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	30 93 fa 03 	sts	0x03FA, r19
    23ae:	20 93 f9 03 	sts	0x03F9, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    23b2:	42 e0       	ldi	r20, 0x02	; 2
    23b4:	21 30       	cpi	r18, 0x01	; 1
    23b6:	34 07       	cpc	r19, r20
    23b8:	0c f4       	brge	.+2      	; 0x23bc <__stack+0x1bd>
    23ba:	a0 c0       	rjmp	.+320    	; 0x24fc <__stack+0x2fd>
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	92 e0       	ldi	r25, 0x02	; 2
    23c0:	90 93 fa 03 	sts	0x03FA, r25
    23c4:	80 93 f9 03 	sts	0x03F9, r24
    23c8:	80 91 fb 03 	lds	r24, 0x03FB
    23cc:	90 91 fc 03 	lds	r25, 0x03FC
    23d0:	20 e8       	ldi	r18, 0x80	; 128
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	d7 ce       	rjmp	.-594    	; 0x2184 <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    23d6:	80 91 23 05 	lds	r24, 0x0523
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	01 96       	adiw	r24, 0x01	; 1
    23de:	65 e0       	ldi	r22, 0x05	; 5
    23e0:	70 e0       	ldi	r23, 0x00	; 0
    23e2:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__divmodhi4>
    23e6:	80 93 23 05 	sts	0x0523, r24

					if(colorState==0) {			// turn on blue and off all IRs
    23ea:	88 23       	and	r24, r24
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <__stack+0x1f1>
    23ee:	8d c0       	rjmp	.+282    	; 0x250a <__stack+0x30b>
						LED_IR1_HIGH;
    23f0:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    23f2:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    23f4:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    23f8:	8f ef       	ldi	r24, 0xFF	; 255
    23fa:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    23fe:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    2402:	0e 94 28 24 	call	0x4850	; 0x4850 <updateRedLed>
					updateGreenLed(pwm_green);
    2406:	80 91 0d 02 	lds	r24, 0x020D
    240a:	0e 94 3c 24 	call	0x4878	; 0x4878 <updateGreenLed>
					updateBlueLed(pwm_blue);
    240e:	80 91 0e 02 	lds	r24, 0x020E
    2412:	0e 94 50 24 	call	0x48a0	; 0x48a0 <updateBlueLed>
    2416:	20 91 f9 03 	lds	r18, 0x03F9
    241a:	30 91 fa 03 	lds	r19, 0x03FA
    241e:	80 91 fb 03 	lds	r24, 0x03FB
    2422:	90 91 fc 03 	lds	r25, 0x03FC

	               	break;
    2426:	a8 ce       	rjmp	.-688    	; 0x2178 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    2428:	80 91 24 05 	lds	r24, 0x0524
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	01 96       	adiw	r24, 0x01	; 1
    2430:	83 70       	andi	r24, 0x03	; 3
    2432:	90 70       	andi	r25, 0x00	; 0
    2434:	80 93 24 05 	sts	0x0524, r24
					switch(behaviorState) {
    2438:	82 30       	cpi	r24, 0x02	; 2
    243a:	09 f4       	brne	.+2      	; 0x243e <__stack+0x23f>
    243c:	cf ce       	rjmp	.-610    	; 0x21dc <handleIRRemoteCommands+0x98>
    243e:	83 30       	cpi	r24, 0x03	; 3
    2440:	09 f4       	brne	.+2      	; 0x2444 <__stack+0x245>
    2442:	53 c0       	rjmp	.+166    	; 0x24ea <__stack+0x2eb>
    2444:	81 30       	cpi	r24, 0x01	; 1
    2446:	09 f4       	brne	.+2      	; 0x244a <__stack+0x24b>
    2448:	c4 ce       	rjmp	.-632    	; 0x21d2 <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    244a:	10 92 62 05 	sts	0x0562, r1
							cliffAvoidanceEnabled = 0;
    244e:	10 92 63 05 	sts	0x0563, r1
    2452:	8a ce       	rjmp	.-748    	; 0x2168 <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    2454:	20 91 f9 03 	lds	r18, 0x03F9
    2458:	30 91 fa 03 	lds	r19, 0x03FA
    245c:	21 5f       	subi	r18, 0xF1	; 241
    245e:	3f 4f       	sbci	r19, 0xFF	; 255
    2460:	30 93 fa 03 	sts	0x03FA, r19
    2464:	20 93 f9 03 	sts	0x03F9, r18
					pwm_left_desired -= STEP_MOTORS;
    2468:	80 91 fb 03 	lds	r24, 0x03FB
    246c:	90 91 fc 03 	lds	r25, 0x03FC
    2470:	0f 97       	sbiw	r24, 0x0f	; 15
    2472:	90 93 fc 03 	sts	0x03FC, r25
    2476:	80 93 fb 03 	sts	0x03FB, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    247a:	42 e0       	ldi	r20, 0x02	; 2
    247c:	21 30       	cpi	r18, 0x01	; 1
    247e:	34 07       	cpc	r19, r20
    2480:	34 f0       	brlt	.+12     	; 0x248e <__stack+0x28f>
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	32 e0       	ldi	r19, 0x02	; 2
    2486:	30 93 fa 03 	sts	0x03FA, r19
    248a:	20 93 f9 03 	sts	0x03F9, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    248e:	4e ef       	ldi	r20, 0xFE	; 254
    2490:	80 30       	cpi	r24, 0x00	; 0
    2492:	94 07       	cpc	r25, r20
    2494:	0c f0       	brlt	.+2      	; 0x2498 <__stack+0x299>
    2496:	70 ce       	rjmp	.-800    	; 0x2178 <handleIRRemoteCommands+0x34>
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	9e ef       	ldi	r25, 0xFE	; 254
    249c:	90 93 fc 03 	sts	0x03FC, r25
    24a0:	80 93 fb 03 	sts	0x03FB, r24
    24a4:	69 ce       	rjmp	.-814    	; 0x2178 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    24a6:	10 92 fa 03 	sts	0x03FA, r1
    24aa:	10 92 f9 03 	sts	0x03F9, r1
					pwm_left_desired = 0;
    24ae:	10 92 fc 03 	sts	0x03FC, r1
    24b2:	10 92 fb 03 	sts	0x03FB, r1
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	5e ce       	rjmp	.-836    	; 0x217c <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    24c0:	80 91 fb 03 	lds	r24, 0x03FB
    24c4:	90 91 fc 03 	lds	r25, 0x03FC
    24c8:	0f 96       	adiw	r24, 0x0f	; 15
    24ca:	90 93 fc 03 	sts	0x03FC, r25
    24ce:	80 93 fb 03 	sts	0x03FB, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    24d2:	22 e0       	ldi	r18, 0x02	; 2
    24d4:	81 30       	cpi	r24, 0x01	; 1
    24d6:	92 07       	cpc	r25, r18
    24d8:	0c f4       	brge	.+2      	; 0x24dc <__stack+0x2dd>
    24da:	e5 ce       	rjmp	.-566    	; 0x22a6 <__stack+0xa7>
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	92 e0       	ldi	r25, 0x02	; 2
    24e0:	90 93 fc 03 	sts	0x03FC, r25
    24e4:	80 93 fb 03 	sts	0x03FB, r24
    24e8:	de ce       	rjmp	.-580    	; 0x22a6 <__stack+0xa7>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	80 93 62 05 	sts	0x0562, r24
							cliffAvoidanceEnabled = 1;
    24f0:	80 93 63 05 	sts	0x0563, r24
    24f4:	20 91 f9 03 	lds	r18, 0x03F9
    24f8:	30 91 fa 03 	lds	r19, 0x03FA
    24fc:	80 91 fb 03 	lds	r24, 0x03FB
    2500:	90 91 fc 03 	lds	r25, 0x03FC
							break;
    2504:	39 ce       	rjmp	.-910    	; 0x2178 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2506:	c9 01       	movw	r24, r18
    2508:	25 cf       	rjmp	.-438    	; 0x2354 <__stack+0x155>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	61 f0       	breq	.+24     	; 0x2526 <__stack+0x327>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    250e:	82 30       	cpi	r24, 0x02	; 2
    2510:	91 f0       	breq	.+36     	; 0x2536 <__stack+0x337>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    2512:	83 30       	cpi	r24, 0x03	; 3
    2514:	d9 f0       	breq	.+54     	; 0x254c <__stack+0x34d>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    2516:	8f ef       	ldi	r24, 0xFF	; 255
    2518:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    251c:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2520:	80 93 0c 02 	sts	0x020C, r24
    2524:	6e cf       	rjmp	.-292    	; 0x2402 <__stack+0x203>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    2526:	8f ef       	ldi	r24, 0xFF	; 255
    2528:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    252c:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    2530:	80 93 0c 02 	sts	0x020C, r24
    2534:	66 cf       	rjmp	.-308    	; 0x2402 <__stack+0x203>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    2536:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    2538:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    253a:	8f ef       	ldi	r24, 0xFF	; 255
    253c:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2540:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    2544:	10 92 0c 02 	sts	0x020C, r1
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	5b cf       	rjmp	.-330    	; 0x2402 <__stack+0x203>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    254c:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    2550:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    2554:	10 92 0c 02 	sts	0x020C, r1
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	53 cf       	rjmp	.-346    	; 0x2402 <__stack+0x203>

0000255c <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    255c:	08 95       	ret

0000255e <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	09 f4       	brne	.+2      	; 0x2572 <start_vertical_speed_control_left+0x14>
    2570:	b8 c0       	rjmp	.+368    	; 0x26e2 <start_vertical_speed_control_left+0x184>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2572:	20 91 38 05 	lds	r18, 0x0538
    2576:	30 91 39 05 	lds	r19, 0x0539
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	2e 30       	cpi	r18, 0x0E	; 14
    257e:	34 07       	cpc	r19, r20
    2580:	0c f4       	brge	.+2      	; 0x2584 <start_vertical_speed_control_left+0x26>
    2582:	89 c0       	rjmp	.+274    	; 0x2696 <start_vertical_speed_control_left+0x138>
		if(*pwm_left > 0) {
    2584:	18 16       	cp	r1, r24
    2586:	19 06       	cpc	r1, r25
    2588:	0c f0       	brlt	.+2      	; 0x258c <start_vertical_speed_control_left+0x2e>
    258a:	14 c1       	rjmp	.+552    	; 0x27b4 <start_vertical_speed_control_left+0x256>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    258c:	88 e6       	ldi	r24, 0x68	; 104
    258e:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2590:	82 1b       	sub	r24, r18
    2592:	93 0b       	sbc	r25, r19
    2594:	95 95       	asr	r25
    2596:	87 95       	ror	r24
    2598:	95 95       	asr	r25
    259a:	87 95       	ror	r24
    259c:	29 e1       	ldi	r18, 0x19	; 25
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	28 1b       	sub	r18, r24
    25a2:	39 0b       	sbc	r19, r25
    25a4:	30 93 04 02 	sts	0x0204, r19
    25a8:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    25ac:	80 91 67 05 	lds	r24, 0x0567
    25b0:	90 91 68 05 	lds	r25, 0x0568
    25b4:	90 93 82 05 	sts	0x0582, r25
    25b8:	80 93 81 05 	sts	0x0581, r24
	if(*pwm_left >= 0) {
    25bc:	20 81       	ld	r18, Z
    25be:	31 81       	ldd	r19, Z+1	; 0x01
    25c0:	37 fd       	sbrc	r19, 7
    25c2:	d3 c0       	rjmp	.+422    	; 0x276a <start_vertical_speed_control_left+0x20c>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    25c4:	40 91 f1 03 	lds	r20, 0x03F1
    25c8:	50 91 f2 03 	lds	r21, 0x03F2
    25cc:	b9 01       	movw	r22, r18
    25ce:	64 1b       	sub	r22, r20
    25d0:	75 0b       	sbc	r23, r21
    25d2:	ab 01       	movw	r20, r22
    25d4:	70 93 68 05 	sts	0x0568, r23
    25d8:	60 93 67 05 	sts	0x0567, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    25dc:	20 91 05 04 	lds	r18, 0x0405
    25e0:	30 91 06 04 	lds	r19, 0x0406
    25e4:	24 0f       	add	r18, r20
    25e6:	35 1f       	adc	r19, r21
    25e8:	30 93 06 04 	sts	0x0406, r19
    25ec:	20 93 05 04 	sts	0x0405, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    25f0:	76 e0       	ldi	r23, 0x06	; 6
    25f2:	21 34       	cpi	r18, 0x41	; 65
    25f4:	37 07       	cpc	r19, r23
    25f6:	0c f4       	brge	.+2      	; 0x25fa <start_vertical_speed_control_left+0x9c>
    25f8:	85 c0       	rjmp	.+266    	; 0x2704 <start_vertical_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    25fa:	20 e4       	ldi	r18, 0x40	; 64
    25fc:	36 e0       	ldi	r19, 0x06	; 6
    25fe:	30 93 06 04 	sts	0x0406, r19
    2602:	20 93 05 04 	sts	0x0405, r18
    2606:	60 ec       	ldi	r22, 0xC0	; 192
    2608:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    260a:	9a 01       	movw	r18, r20
    260c:	22 0f       	add	r18, r18
    260e:	33 1f       	adc	r19, r19
    2610:	24 0f       	add	r18, r20
    2612:	35 1f       	adc	r19, r21
    2614:	22 0f       	add	r18, r18
    2616:	33 1f       	adc	r19, r19
    2618:	22 0f       	add	r18, r18
    261a:	33 1f       	adc	r19, r19
    261c:	22 0f       	add	r18, r18
    261e:	33 1f       	adc	r19, r19
    2620:	24 0f       	add	r18, r20
    2622:	35 1f       	adc	r19, r21
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    2624:	00 81       	ld	r16, Z
    2626:	11 81       	ldd	r17, Z+1	; 0x01
    2628:	c0 91 03 02 	lds	r28, 0x0203
    262c:	d0 91 04 02 	lds	r29, 0x0204
    2630:	0c 9f       	mul	r16, r28
    2632:	d0 01       	movw	r26, r0
    2634:	0d 9f       	mul	r16, r29
    2636:	b0 0d       	add	r27, r0
    2638:	1c 9f       	mul	r17, r28
    263a:	b0 0d       	add	r27, r0
    263c:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    263e:	2a 0f       	add	r18, r26
    2640:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    2642:	84 1b       	sub	r24, r20
    2644:	95 0b       	sbc	r25, r21
    2646:	88 0f       	add	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	28 0f       	add	r18, r24
    264c:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    264e:	26 0f       	add	r18, r22
    2650:	37 1f       	adc	r19, r23
    2652:	30 93 04 04 	sts	0x0404, r19
    2656:	20 93 03 04 	sts	0x0403, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    265a:	37 fd       	sbrc	r19, 7
    265c:	69 c0       	rjmp	.+210    	; 0x2730 <start_vertical_speed_control_left+0x1d2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    265e:	12 16       	cp	r1, r18
    2660:	13 06       	cpc	r1, r19
    2662:	0c f0       	brlt	.+2      	; 0x2666 <start_vertical_speed_control_left+0x108>
    2664:	6f c0       	rjmp	.+222    	; 0x2744 <start_vertical_speed_control_left+0x1e6>
    2666:	80 81       	ld	r24, Z
    2668:	91 81       	ldd	r25, Z+1	; 0x01
    266a:	97 fd       	sbrc	r25, 7
    266c:	89 c0       	rjmp	.+274    	; 0x2780 <start_vertical_speed_control_left+0x222>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    266e:	7d e5       	ldi	r23, 0x5D	; 93
    2670:	21 3c       	cpi	r18, 0xC1	; 193
    2672:	37 07       	cpc	r19, r23
    2674:	0c f4       	brge	.+2      	; 0x2678 <start_vertical_speed_control_left+0x11a>
    2676:	66 c0       	rjmp	.+204    	; 0x2744 <start_vertical_speed_control_left+0x1e6>
    2678:	80 ec       	ldi	r24, 0xC0	; 192
    267a:	9d e5       	ldi	r25, 0x5D	; 93
    267c:	90 93 04 04 	sts	0x0404, r25
    2680:	80 93 03 04 	sts	0x0403, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	92 e0       	ldi	r25, 0x02	; 2
    2688:	91 83       	std	Z+1, r25	; 0x01
    268a:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2696:	24 3b       	cpi	r18, 0xB4	; 180
    2698:	31 05       	cpc	r19, r1
    269a:	94 f4       	brge	.+36     	; 0x26c0 <start_vertical_speed_control_left+0x162>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    269c:	2a 35       	cpi	r18, 0x5A	; 90
    269e:	31 05       	cpc	r19, r1
    26a0:	7c f4       	brge	.+30     	; 0x26c0 <start_vertical_speed_control_left+0x162>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    26a2:	18 16       	cp	r1, r24
    26a4:	19 06       	cpc	r1, r25
    26a6:	0c f0       	brlt	.+2      	; 0x26aa <start_vertical_speed_control_left+0x14c>
    26a8:	93 c0       	rjmp	.+294    	; 0x27d0 <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    26aa:	35 95       	asr	r19
    26ac:	27 95       	ror	r18
    26ae:	35 95       	asr	r19
    26b0:	27 95       	ror	r18
    26b2:	27 5e       	subi	r18, 0xE7	; 231
    26b4:	3f 4f       	sbci	r19, 0xFF	; 255
    26b6:	30 93 04 02 	sts	0x0204, r19
    26ba:	20 93 03 02 	sts	0x0203, r18
    26be:	76 cf       	rjmp	.-276    	; 0x25ac <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    26c0:	18 16       	cp	r1, r24
    26c2:	19 06       	cpc	r1, r25
    26c4:	94 f5       	brge	.+100    	; 0x272a <start_vertical_speed_control_left+0x1cc>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    26c6:	84 eb       	ldi	r24, 0xB4	; 180
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	82 1b       	sub	r24, r18
    26cc:	93 0b       	sbc	r25, r19
    26ce:	95 95       	asr	r25
    26d0:	87 95       	ror	r24
    26d2:	95 95       	asr	r25
    26d4:	87 95       	ror	r24
    26d6:	49 96       	adiw	r24, 0x19	; 25
    26d8:	90 93 04 02 	sts	0x0204, r25
    26dc:	80 93 03 02 	sts	0x0203, r24
    26e0:	65 cf       	rjmp	.-310    	; 0x25ac <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    26e2:	10 92 06 04 	sts	0x0406, r1
    26e6:	10 92 05 04 	sts	0x0405, r1
		delta_left_speed_current = 0;
    26ea:	10 92 68 05 	sts	0x0568, r1
    26ee:	10 92 67 05 	sts	0x0567, r1
		delta_left_speed_prev = 0;
    26f2:	10 92 82 05 	sts	0x0582, r1
    26f6:	10 92 81 05 	sts	0x0581, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2704:	69 ef       	ldi	r22, 0xF9	; 249
    2706:	20 3c       	cpi	r18, 0xC0	; 192
    2708:	36 07       	cpc	r19, r22
    270a:	4c f4       	brge	.+18     	; 0x271e <start_vertical_speed_control_left+0x1c0>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    270c:	20 ec       	ldi	r18, 0xC0	; 192
    270e:	39 ef       	ldi	r19, 0xF9	; 249
    2710:	30 93 06 04 	sts	0x0406, r19
    2714:	20 93 05 04 	sts	0x0405, r18
    2718:	60 e4       	ldi	r22, 0x40	; 64
    271a:	7d ee       	ldi	r23, 0xED	; 237
    271c:	76 cf       	rjmp	.-276    	; 0x260a <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    271e:	b9 01       	movw	r22, r18
    2720:	66 0f       	add	r22, r22
    2722:	77 1f       	adc	r23, r23
    2724:	62 0f       	add	r22, r18
    2726:	73 1f       	adc	r23, r19
    2728:	70 cf       	rjmp	.-288    	; 0x260a <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    272a:	84 eb       	ldi	r24, 0xB4	; 180
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	30 cf       	rjmp	.-416    	; 0x2590 <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2730:	80 81       	ld	r24, Z
    2732:	91 81       	ldd	r25, Z+1	; 0x01
    2734:	97 fd       	sbrc	r25, 7
    2736:	06 c0       	rjmp	.+12     	; 0x2744 <start_vertical_speed_control_left+0x1e6>
		pwm_left_speed_controller = 0;
    2738:	10 92 04 04 	sts	0x0404, r1
    273c:	10 92 03 04 	sts	0x0403, r1
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2744:	82 ea       	ldi	r24, 0xA2	; 162
    2746:	20 34       	cpi	r18, 0x40	; 64
    2748:	38 07       	cpc	r19, r24
    274a:	04 f5       	brge	.+64     	; 0x278c <start_vertical_speed_control_left+0x22e>
    274c:	80 e4       	ldi	r24, 0x40	; 64
    274e:	92 ea       	ldi	r25, 0xA2	; 162
    2750:	90 93 04 04 	sts	0x0404, r25
    2754:	80 93 03 04 	sts	0x0403, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	9e ef       	ldi	r25, 0xFE	; 254
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24


}
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    276a:	40 91 f1 03 	lds	r20, 0x03F1
    276e:	50 91 f2 03 	lds	r21, 0x03F2
    2772:	42 0f       	add	r20, r18
    2774:	53 1f       	adc	r21, r19
    2776:	50 93 68 05 	sts	0x0568, r21
    277a:	40 93 67 05 	sts	0x0567, r20
    277e:	2e cf       	rjmp	.-420    	; 0x25dc <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2780:	10 92 04 04 	sts	0x0404, r1
    2784:	10 92 03 04 	sts	0x0403, r1
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    278c:	35 95       	asr	r19
    278e:	27 95       	ror	r18
    2790:	35 95       	asr	r19
    2792:	27 95       	ror	r18
    2794:	35 95       	asr	r19
    2796:	27 95       	ror	r18
    2798:	35 95       	asr	r19
    279a:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    279c:	31 83       	std	Z+1, r19	; 0x01
    279e:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    27a0:	42 e0       	ldi	r20, 0x02	; 2
    27a2:	21 30       	cpi	r18, 0x01	; 1
    27a4:	34 07       	cpc	r19, r20
    27a6:	0c f0       	brlt	.+2      	; 0x27aa <start_vertical_speed_control_left+0x24c>
    27a8:	6d cf       	rjmp	.-294    	; 0x2684 <start_vertical_speed_control_left+0x126>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    27aa:	6e ef       	ldi	r22, 0xFE	; 254
    27ac:	20 30       	cpi	r18, 0x00	; 0
    27ae:	36 07       	cpc	r19, r22
    27b0:	9c f2       	brlt	.-90     	; 0x2758 <start_vertical_speed_control_left+0x1fa>
    27b2:	6c cf       	rjmp	.-296    	; 0x268c <start_vertical_speed_control_left+0x12e>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    27b4:	88 e6       	ldi	r24, 0x68	; 104
    27b6:	91 e0       	ldi	r25, 0x01	; 1
    27b8:	82 1b       	sub	r24, r18
    27ba:	93 0b       	sbc	r25, r19
    27bc:	95 95       	asr	r25
    27be:	87 95       	ror	r24
    27c0:	95 95       	asr	r25
    27c2:	87 95       	ror	r24
    27c4:	49 96       	adiw	r24, 0x19	; 25
    27c6:	90 93 04 02 	sts	0x0204, r25
    27ca:	80 93 03 02 	sts	0x0203, r24
    27ce:	ee ce       	rjmp	.-548    	; 0x25ac <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    27d0:	35 95       	asr	r19
    27d2:	27 95       	ror	r18
    27d4:	35 95       	asr	r19
    27d6:	27 95       	ror	r18
    27d8:	89 e1       	ldi	r24, 0x19	; 25
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	82 1b       	sub	r24, r18
    27de:	93 0b       	sbc	r25, r19
    27e0:	90 93 04 02 	sts	0x0204, r25
    27e4:	80 93 03 02 	sts	0x0203, r24
    27e8:	e1 ce       	rjmp	.-574    	; 0x25ac <start_vertical_speed_control_left+0x4e>

000027ea <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    27ea:	0f 93       	push	r16
    27ec:	1f 93       	push	r17
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    27f4:	80 81       	ld	r24, Z
    27f6:	91 81       	ldd	r25, Z+1	; 0x01
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	09 f4       	brne	.+2      	; 0x27fe <start_vertical_speed_control_right+0x14>
    27fc:	b8 c0       	rjmp	.+368    	; 0x296e <start_vertical_speed_control_right+0x184>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    27fe:	20 91 38 05 	lds	r18, 0x0538
    2802:	30 91 39 05 	lds	r19, 0x0539
    2806:	41 e0       	ldi	r20, 0x01	; 1
    2808:	2e 30       	cpi	r18, 0x0E	; 14
    280a:	34 07       	cpc	r19, r20
    280c:	0c f4       	brge	.+2      	; 0x2810 <start_vertical_speed_control_right+0x26>
    280e:	89 c0       	rjmp	.+274    	; 0x2922 <start_vertical_speed_control_right+0x138>
		if(*pwm_right > 0) {
    2810:	18 16       	cp	r1, r24
    2812:	19 06       	cpc	r1, r25
    2814:	0c f0       	brlt	.+2      	; 0x2818 <start_vertical_speed_control_right+0x2e>
    2816:	14 c1       	rjmp	.+552    	; 0x2a40 <start_vertical_speed_control_right+0x256>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    2818:	88 e6       	ldi	r24, 0x68	; 104
    281a:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    281c:	82 1b       	sub	r24, r18
    281e:	93 0b       	sbc	r25, r19
    2820:	95 95       	asr	r25
    2822:	87 95       	ror	r24
    2824:	95 95       	asr	r25
    2826:	87 95       	ror	r24
    2828:	29 e1       	ldi	r18, 0x19	; 25
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	28 1b       	sub	r18, r24
    282e:	39 0b       	sbc	r19, r25
    2830:	30 93 06 02 	sts	0x0206, r19
    2834:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2838:	80 91 90 05 	lds	r24, 0x0590
    283c:	90 91 91 05 	lds	r25, 0x0591
    2840:	90 93 6a 05 	sts	0x056A, r25
    2844:	80 93 69 05 	sts	0x0569, r24
	if(*pwm_right >= 0) {
    2848:	20 81       	ld	r18, Z
    284a:	31 81       	ldd	r19, Z+1	; 0x01
    284c:	37 fd       	sbrc	r19, 7
    284e:	d3 c0       	rjmp	.+422    	; 0x29f6 <start_vertical_speed_control_right+0x20c>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2850:	40 91 f3 03 	lds	r20, 0x03F3
    2854:	50 91 f4 03 	lds	r21, 0x03F4
    2858:	b9 01       	movw	r22, r18
    285a:	64 1b       	sub	r22, r20
    285c:	75 0b       	sbc	r23, r21
    285e:	ab 01       	movw	r20, r22
    2860:	70 93 91 05 	sts	0x0591, r23
    2864:	60 93 90 05 	sts	0x0590, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2868:	20 91 07 04 	lds	r18, 0x0407
    286c:	30 91 08 04 	lds	r19, 0x0408
    2870:	24 0f       	add	r18, r20
    2872:	35 1f       	adc	r19, r21
    2874:	30 93 08 04 	sts	0x0408, r19
    2878:	20 93 07 04 	sts	0x0407, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    287c:	76 e0       	ldi	r23, 0x06	; 6
    287e:	21 34       	cpi	r18, 0x41	; 65
    2880:	37 07       	cpc	r19, r23
    2882:	0c f4       	brge	.+2      	; 0x2886 <start_vertical_speed_control_right+0x9c>
    2884:	85 c0       	rjmp	.+266    	; 0x2990 <start_vertical_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    2886:	20 e4       	ldi	r18, 0x40	; 64
    2888:	36 e0       	ldi	r19, 0x06	; 6
    288a:	30 93 08 04 	sts	0x0408, r19
    288e:	20 93 07 04 	sts	0x0407, r18
    2892:	60 ec       	ldi	r22, 0xC0	; 192
    2894:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    2896:	9a 01       	movw	r18, r20
    2898:	22 0f       	add	r18, r18
    289a:	33 1f       	adc	r19, r19
    289c:	24 0f       	add	r18, r20
    289e:	35 1f       	adc	r19, r21
    28a0:	22 0f       	add	r18, r18
    28a2:	33 1f       	adc	r19, r19
    28a4:	22 0f       	add	r18, r18
    28a6:	33 1f       	adc	r19, r19
    28a8:	22 0f       	add	r18, r18
    28aa:	33 1f       	adc	r19, r19
    28ac:	24 0f       	add	r18, r20
    28ae:	35 1f       	adc	r19, r21
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    28b0:	00 81       	ld	r16, Z
    28b2:	11 81       	ldd	r17, Z+1	; 0x01
    28b4:	c0 91 05 02 	lds	r28, 0x0205
    28b8:	d0 91 06 02 	lds	r29, 0x0206
    28bc:	0c 9f       	mul	r16, r28
    28be:	d0 01       	movw	r26, r0
    28c0:	0d 9f       	mul	r16, r29
    28c2:	b0 0d       	add	r27, r0
    28c4:	1c 9f       	mul	r17, r28
    28c6:	b0 0d       	add	r27, r0
    28c8:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    28ca:	2a 0f       	add	r18, r26
    28cc:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    28ce:	84 1b       	sub	r24, r20
    28d0:	95 0b       	sbc	r25, r21
    28d2:	88 0f       	add	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	28 0f       	add	r18, r24
    28d8:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    28da:	26 0f       	add	r18, r22
    28dc:	37 1f       	adc	r19, r23
    28de:	30 93 02 04 	sts	0x0402, r19
    28e2:	20 93 01 04 	sts	0x0401, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    28e6:	37 fd       	sbrc	r19, 7
    28e8:	69 c0       	rjmp	.+210    	; 0x29bc <start_vertical_speed_control_right+0x1d2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    28ea:	12 16       	cp	r1, r18
    28ec:	13 06       	cpc	r1, r19
    28ee:	0c f0       	brlt	.+2      	; 0x28f2 <start_vertical_speed_control_right+0x108>
    28f0:	6f c0       	rjmp	.+222    	; 0x29d0 <start_vertical_speed_control_right+0x1e6>
    28f2:	80 81       	ld	r24, Z
    28f4:	91 81       	ldd	r25, Z+1	; 0x01
    28f6:	97 fd       	sbrc	r25, 7
    28f8:	89 c0       	rjmp	.+274    	; 0x2a0c <start_vertical_speed_control_right+0x222>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    28fa:	7d e5       	ldi	r23, 0x5D	; 93
    28fc:	21 3c       	cpi	r18, 0xC1	; 193
    28fe:	37 07       	cpc	r19, r23
    2900:	0c f4       	brge	.+2      	; 0x2904 <start_vertical_speed_control_right+0x11a>
    2902:	66 c0       	rjmp	.+204    	; 0x29d0 <start_vertical_speed_control_right+0x1e6>
    2904:	80 ec       	ldi	r24, 0xC0	; 192
    2906:	9d e5       	ldi	r25, 0x5D	; 93
    2908:	90 93 02 04 	sts	0x0402, r25
    290c:	80 93 01 04 	sts	0x0401, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	92 e0       	ldi	r25, 0x02	; 2
    2914:	91 83       	std	Z+1, r25	; 0x01
    2916:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2922:	24 3b       	cpi	r18, 0xB4	; 180
    2924:	31 05       	cpc	r19, r1
    2926:	94 f4       	brge	.+36     	; 0x294c <start_vertical_speed_control_right+0x162>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2928:	2a 35       	cpi	r18, 0x5A	; 90
    292a:	31 05       	cpc	r19, r1
    292c:	7c f4       	brge	.+30     	; 0x294c <start_vertical_speed_control_right+0x162>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    292e:	18 16       	cp	r1, r24
    2930:	19 06       	cpc	r1, r25
    2932:	0c f0       	brlt	.+2      	; 0x2936 <start_vertical_speed_control_right+0x14c>
    2934:	93 c0       	rjmp	.+294    	; 0x2a5c <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    2936:	35 95       	asr	r19
    2938:	27 95       	ror	r18
    293a:	35 95       	asr	r19
    293c:	27 95       	ror	r18
    293e:	27 5e       	subi	r18, 0xE7	; 231
    2940:	3f 4f       	sbci	r19, 0xFF	; 255
    2942:	30 93 06 02 	sts	0x0206, r19
    2946:	20 93 05 02 	sts	0x0205, r18
    294a:	76 cf       	rjmp	.-276    	; 0x2838 <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    294c:	18 16       	cp	r1, r24
    294e:	19 06       	cpc	r1, r25
    2950:	94 f5       	brge	.+100    	; 0x29b6 <start_vertical_speed_control_right+0x1cc>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    2952:	84 eb       	ldi	r24, 0xB4	; 180
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	82 1b       	sub	r24, r18
    2958:	93 0b       	sbc	r25, r19
    295a:	95 95       	asr	r25
    295c:	87 95       	ror	r24
    295e:	95 95       	asr	r25
    2960:	87 95       	ror	r24
    2962:	49 96       	adiw	r24, 0x19	; 25
    2964:	90 93 06 02 	sts	0x0206, r25
    2968:	80 93 05 02 	sts	0x0205, r24
    296c:	65 cf       	rjmp	.-310    	; 0x2838 <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    296e:	10 92 08 04 	sts	0x0408, r1
    2972:	10 92 07 04 	sts	0x0407, r1
		delta_right_speed_current = 0;
    2976:	10 92 91 05 	sts	0x0591, r1
    297a:	10 92 90 05 	sts	0x0590, r1
		delta_right_speed_prev = 0;
    297e:	10 92 6a 05 	sts	0x056A, r1
    2982:	10 92 69 05 	sts	0x0569, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2990:	69 ef       	ldi	r22, 0xF9	; 249
    2992:	20 3c       	cpi	r18, 0xC0	; 192
    2994:	36 07       	cpc	r19, r22
    2996:	4c f4       	brge	.+18     	; 0x29aa <start_vertical_speed_control_right+0x1c0>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    2998:	20 ec       	ldi	r18, 0xC0	; 192
    299a:	39 ef       	ldi	r19, 0xF9	; 249
    299c:	30 93 08 04 	sts	0x0408, r19
    29a0:	20 93 07 04 	sts	0x0407, r18
    29a4:	60 e4       	ldi	r22, 0x40	; 64
    29a6:	7d ee       	ldi	r23, 0xED	; 237
    29a8:	76 cf       	rjmp	.-276    	; 0x2896 <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    29aa:	b9 01       	movw	r22, r18
    29ac:	66 0f       	add	r22, r22
    29ae:	77 1f       	adc	r23, r23
    29b0:	62 0f       	add	r22, r18
    29b2:	73 1f       	adc	r23, r19
    29b4:	70 cf       	rjmp	.-288    	; 0x2896 <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    29b6:	84 eb       	ldi	r24, 0xB4	; 180
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	30 cf       	rjmp	.-416    	; 0x281c <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    29bc:	80 81       	ld	r24, Z
    29be:	91 81       	ldd	r25, Z+1	; 0x01
    29c0:	97 fd       	sbrc	r25, 7
    29c2:	06 c0       	rjmp	.+12     	; 0x29d0 <start_vertical_speed_control_right+0x1e6>
		pwm_right_speed_controller = 0;
    29c4:	10 92 02 04 	sts	0x0402, r1
    29c8:	10 92 01 04 	sts	0x0401, r1
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    29d0:	82 ea       	ldi	r24, 0xA2	; 162
    29d2:	20 34       	cpi	r18, 0x40	; 64
    29d4:	38 07       	cpc	r19, r24
    29d6:	04 f5       	brge	.+64     	; 0x2a18 <start_vertical_speed_control_right+0x22e>
    29d8:	80 e4       	ldi	r24, 0x40	; 64
    29da:	92 ea       	ldi	r25, 0xA2	; 162
    29dc:	90 93 02 04 	sts	0x0402, r25
    29e0:	80 93 01 04 	sts	0x0401, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	9e ef       	ldi	r25, 0xFE	; 254
    29e8:	91 83       	std	Z+1, r25	; 0x01
    29ea:	80 83       	st	Z, r24

}
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    29f6:	40 91 f3 03 	lds	r20, 0x03F3
    29fa:	50 91 f4 03 	lds	r21, 0x03F4
    29fe:	42 0f       	add	r20, r18
    2a00:	53 1f       	adc	r21, r19
    2a02:	50 93 91 05 	sts	0x0591, r21
    2a06:	40 93 90 05 	sts	0x0590, r20
    2a0a:	2e cf       	rjmp	.-420    	; 0x2868 <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2a0c:	10 92 02 04 	sts	0x0402, r1
    2a10:	10 92 01 04 	sts	0x0401, r1
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2a18:	35 95       	asr	r19
    2a1a:	27 95       	ror	r18
    2a1c:	35 95       	asr	r19
    2a1e:	27 95       	ror	r18
    2a20:	35 95       	asr	r19
    2a22:	27 95       	ror	r18
    2a24:	35 95       	asr	r19
    2a26:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2a28:	31 83       	std	Z+1, r19	; 0x01
    2a2a:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2a2c:	42 e0       	ldi	r20, 0x02	; 2
    2a2e:	21 30       	cpi	r18, 0x01	; 1
    2a30:	34 07       	cpc	r19, r20
    2a32:	0c f0       	brlt	.+2      	; 0x2a36 <start_vertical_speed_control_right+0x24c>
    2a34:	6d cf       	rjmp	.-294    	; 0x2910 <start_vertical_speed_control_right+0x126>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2a36:	6e ef       	ldi	r22, 0xFE	; 254
    2a38:	20 30       	cpi	r18, 0x00	; 0
    2a3a:	36 07       	cpc	r19, r22
    2a3c:	9c f2       	brlt	.-90     	; 0x29e4 <start_vertical_speed_control_right+0x1fa>
    2a3e:	6c cf       	rjmp	.-296    	; 0x2918 <start_vertical_speed_control_right+0x12e>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    2a40:	88 e6       	ldi	r24, 0x68	; 104
    2a42:	91 e0       	ldi	r25, 0x01	; 1
    2a44:	82 1b       	sub	r24, r18
    2a46:	93 0b       	sbc	r25, r19
    2a48:	95 95       	asr	r25
    2a4a:	87 95       	ror	r24
    2a4c:	95 95       	asr	r25
    2a4e:	87 95       	ror	r24
    2a50:	49 96       	adiw	r24, 0x19	; 25
    2a52:	90 93 06 02 	sts	0x0206, r25
    2a56:	80 93 05 02 	sts	0x0205, r24
    2a5a:	ee ce       	rjmp	.-548    	; 0x2838 <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    2a5c:	35 95       	asr	r19
    2a5e:	27 95       	ror	r18
    2a60:	35 95       	asr	r19
    2a62:	27 95       	ror	r18
    2a64:	89 e1       	ldi	r24, 0x19	; 25
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	82 1b       	sub	r24, r18
    2a6a:	93 0b       	sbc	r25, r19
    2a6c:	90 93 06 02 	sts	0x0206, r25
    2a70:	80 93 05 02 	sts	0x0205, r24
    2a74:	e1 ce       	rjmp	.-574    	; 0x2838 <start_vertical_speed_control_right+0x4e>

00002a76 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    2a76:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2a78:	80 81       	ld	r24, Z
    2a7a:	91 81       	ldd	r25, Z+1	; 0x01
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <start_horizontal_speed_control_right+0xc>
    2a80:	7b c0       	rjmp	.+246    	; 0x2b78 <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2a82:	a0 91 90 05 	lds	r26, 0x0590
    2a86:	b0 91 91 05 	lds	r27, 0x0591
    2a8a:	b0 93 6a 05 	sts	0x056A, r27
    2a8e:	a0 93 69 05 	sts	0x0569, r26
	if(*pwm_right >= 0) {
    2a92:	20 81       	ld	r18, Z
    2a94:	31 81       	ldd	r19, Z+1	; 0x01
    2a96:	37 fd       	sbrc	r19, 7
    2a98:	89 c0       	rjmp	.+274    	; 0x2bac <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2a9a:	80 91 f3 03 	lds	r24, 0x03F3
    2a9e:	90 91 f4 03 	lds	r25, 0x03F4
    2aa2:	a9 01       	movw	r20, r18
    2aa4:	48 1b       	sub	r20, r24
    2aa6:	59 0b       	sbc	r21, r25
    2aa8:	ca 01       	movw	r24, r20
    2aaa:	50 93 91 05 	sts	0x0591, r21
    2aae:	40 93 90 05 	sts	0x0590, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2ab2:	20 91 07 04 	lds	r18, 0x0407
    2ab6:	30 91 08 04 	lds	r19, 0x0408
    2aba:	28 0f       	add	r18, r24
    2abc:	39 1f       	adc	r19, r25
    2abe:	30 93 08 04 	sts	0x0408, r19
    2ac2:	20 93 07 04 	sts	0x0407, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    2ac6:	56 e0       	ldi	r21, 0x06	; 6
    2ac8:	21 34       	cpi	r18, 0x41	; 65
    2aca:	35 07       	cpc	r19, r21
    2acc:	0c f4       	brge	.+2      	; 0x2ad0 <start_horizontal_speed_control_right+0x5a>
    2ace:	61 c0       	rjmp	.+194    	; 0x2b92 <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    2ad0:	20 e4       	ldi	r18, 0x40	; 64
    2ad2:	36 e0       	ldi	r19, 0x06	; 6
    2ad4:	30 93 08 04 	sts	0x0408, r19
    2ad8:	20 93 07 04 	sts	0x0407, r18
    2adc:	60 e8       	ldi	r22, 0x80	; 128
    2ade:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    2ae0:	9c 01       	movw	r18, r24
    2ae2:	22 0f       	add	r18, r18
    2ae4:	33 1f       	adc	r19, r19
    2ae6:	28 0f       	add	r18, r24
    2ae8:	39 1f       	adc	r19, r25
    2aea:	22 0f       	add	r18, r18
    2aec:	33 1f       	adc	r19, r19
    2aee:	22 0f       	add	r18, r18
    2af0:	33 1f       	adc	r19, r19
    2af2:	22 0f       	add	r18, r18
    2af4:	33 1f       	adc	r19, r19
    2af6:	28 0f       	add	r18, r24
    2af8:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    2afa:	40 81       	ld	r20, Z
    2afc:	51 81       	ldd	r21, Z+1	; 0x01
    2afe:	44 0f       	add	r20, r20
    2b00:	55 1f       	adc	r21, r21
    2b02:	44 0f       	add	r20, r20
    2b04:	55 1f       	adc	r21, r21
    2b06:	44 0f       	add	r20, r20
    2b08:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    2b0a:	24 0f       	add	r18, r20
    2b0c:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    2b0e:	ad 01       	movw	r20, r26
    2b10:	48 1b       	sub	r20, r24
    2b12:	59 0b       	sbc	r21, r25
    2b14:	ca 01       	movw	r24, r20
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	84 0f       	add	r24, r20
    2b1c:	95 1f       	adc	r25, r21
    2b1e:	28 0f       	add	r18, r24
    2b20:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    2b22:	26 0f       	add	r18, r22
    2b24:	37 1f       	adc	r19, r23
    2b26:	30 93 02 04 	sts	0x0402, r19
    2b2a:	20 93 01 04 	sts	0x0401, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2b2e:	37 fd       	sbrc	r19, 7
    2b30:	4c c0       	rjmp	.+152    	; 0x2bca <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2b32:	12 16       	cp	r1, r18
    2b34:	13 06       	cpc	r1, r19
    2b36:	0c f0       	brlt	.+2      	; 0x2b3a <start_horizontal_speed_control_right+0xc4>
    2b38:	52 c0       	rjmp	.+164    	; 0x2bde <start_horizontal_speed_control_right+0x168>
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	97 fd       	sbrc	r25, 7
    2b40:	67 c0       	rjmp	.+206    	; 0x2c10 <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2b42:	5d e5       	ldi	r21, 0x5D	; 93
    2b44:	21 3c       	cpi	r18, 0xC1	; 193
    2b46:	35 07       	cpc	r19, r21
    2b48:	0c f4       	brge	.+2      	; 0x2b4c <start_horizontal_speed_control_right+0xd6>
    2b4a:	49 c0       	rjmp	.+146    	; 0x2bde <start_horizontal_speed_control_right+0x168>
    2b4c:	80 ec       	ldi	r24, 0xC0	; 192
    2b4e:	9d e5       	ldi	r25, 0x5D	; 93
    2b50:	90 93 02 04 	sts	0x0402, r25
    2b54:	80 93 01 04 	sts	0x0401, r24
    2b58:	2c ed       	ldi	r18, 0xDC	; 220
    2b5a:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    2b5c:	22 5e       	subi	r18, 0xE2	; 226
    2b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b60:	31 83       	std	Z+1, r19	; 0x01
    2b62:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2b64:	42 e0       	ldi	r20, 0x02	; 2
    2b66:	21 30       	cpi	r18, 0x01	; 1
    2b68:	34 07       	cpc	r19, r20
    2b6a:	0c f4       	brge	.+2      	; 0x2b6e <start_horizontal_speed_control_right+0xf8>
    2b6c:	48 c0       	rjmp	.+144    	; 0x2bfe <start_horizontal_speed_control_right+0x188>
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	92 e0       	ldi	r25, 0x02	; 2
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	80 83       	st	Z, r24
    2b76:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    2b78:	10 92 08 04 	sts	0x0408, r1
    2b7c:	10 92 07 04 	sts	0x0407, r1
		delta_right_speed_current = 0;
    2b80:	10 92 91 05 	sts	0x0591, r1
    2b84:	10 92 90 05 	sts	0x0590, r1
		delta_right_speed_prev = 0;
    2b88:	10 92 6a 05 	sts	0x056A, r1
    2b8c:	10 92 69 05 	sts	0x0569, r1
		return;
    2b90:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2b92:	49 ef       	ldi	r20, 0xF9	; 249
    2b94:	20 3c       	cpi	r18, 0xC0	; 192
    2b96:	34 07       	cpc	r19, r20
    2b98:	a4 f4       	brge	.+40     	; 0x2bc2 <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    2b9a:	20 ec       	ldi	r18, 0xC0	; 192
    2b9c:	39 ef       	ldi	r19, 0xF9	; 249
    2b9e:	30 93 08 04 	sts	0x0408, r19
    2ba2:	20 93 07 04 	sts	0x0407, r18
    2ba6:	60 e8       	ldi	r22, 0x80	; 128
    2ba8:	73 ef       	ldi	r23, 0xF3	; 243
    2baa:	9a cf       	rjmp	.-204    	; 0x2ae0 <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2bac:	80 91 f3 03 	lds	r24, 0x03F3
    2bb0:	90 91 f4 03 	lds	r25, 0x03F4
    2bb4:	82 0f       	add	r24, r18
    2bb6:	93 1f       	adc	r25, r19
    2bb8:	90 93 91 05 	sts	0x0591, r25
    2bbc:	80 93 90 05 	sts	0x0590, r24
    2bc0:	78 cf       	rjmp	.-272    	; 0x2ab2 <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2bc2:	b9 01       	movw	r22, r18
    2bc4:	66 0f       	add	r22, r22
    2bc6:	77 1f       	adc	r23, r23
    2bc8:	8b cf       	rjmp	.-234    	; 0x2ae0 <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	97 fd       	sbrc	r25, 7
    2bd0:	06 c0       	rjmp	.+12     	; 0x2bde <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    2bd2:	10 92 02 04 	sts	0x0402, r1
    2bd6:	10 92 01 04 	sts	0x0401, r1
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2bde:	82 ea       	ldi	r24, 0xA2	; 162
    2be0:	20 34       	cpi	r18, 0x40	; 64
    2be2:	38 07       	cpc	r19, r24
    2be4:	dc f4       	brge	.+54     	; 0x2c1c <start_horizontal_speed_control_right+0x1a6>
    2be6:	80 e4       	ldi	r24, 0x40	; 64
    2be8:	92 ea       	ldi	r25, 0xA2	; 162
    2bea:	90 93 02 04 	sts	0x0402, r25
    2bee:	80 93 01 04 	sts	0x0401, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2bf2:	24 e2       	ldi	r18, 0x24	; 36
    2bf4:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    2bf6:	2e 51       	subi	r18, 0x1E	; 30
    2bf8:	30 40       	sbci	r19, 0x00	; 0
    2bfa:	31 83       	std	Z+1, r19	; 0x01
    2bfc:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2bfe:	5e ef       	ldi	r21, 0xFE	; 254
    2c00:	20 30       	cpi	r18, 0x00	; 0
    2c02:	35 07       	cpc	r19, r21
    2c04:	24 f4       	brge	.+8      	; 0x2c0e <start_horizontal_speed_control_right+0x198>
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	9e ef       	ldi	r25, 0xFE	; 254
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	80 83       	st	Z, r24
    2c0e:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2c10:	10 92 02 04 	sts	0x0402, r1
    2c14:	10 92 01 04 	sts	0x0401, r1
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2c1c:	35 95       	asr	r19
    2c1e:	27 95       	ror	r18
    2c20:	35 95       	asr	r19
    2c22:	27 95       	ror	r18
    2c24:	35 95       	asr	r19
    2c26:	27 95       	ror	r18
    2c28:	35 95       	asr	r19
    2c2a:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2c2c:	31 83       	std	Z+1, r19	; 0x01
    2c2e:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    2c30:	12 16       	cp	r1, r18
    2c32:	13 06       	cpc	r1, r19
    2c34:	0c f4       	brge	.+2      	; 0x2c38 <start_horizontal_speed_control_right+0x1c2>
    2c36:	92 cf       	rjmp	.-220    	; 0x2b5c <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    2c38:	21 15       	cp	r18, r1
    2c3a:	31 05       	cpc	r19, r1
    2c3c:	e1 f6       	brne	.-72     	; 0x2bf6 <start_horizontal_speed_control_right+0x180>
    2c3e:	08 95       	ret

00002c40 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    2c40:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    2c42:	80 81       	ld	r24, Z
    2c44:	91 81       	ldd	r25, Z+1	; 0x01
    2c46:	00 97       	sbiw	r24, 0x00	; 0
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <start_horizontal_speed_control_left+0xc>
    2c4a:	7b c0       	rjmp	.+246    	; 0x2d42 <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2c4c:	a0 91 67 05 	lds	r26, 0x0567
    2c50:	b0 91 68 05 	lds	r27, 0x0568
    2c54:	b0 93 82 05 	sts	0x0582, r27
    2c58:	a0 93 81 05 	sts	0x0581, r26
	if(*pwm_left >= 0) {
    2c5c:	20 81       	ld	r18, Z
    2c5e:	31 81       	ldd	r19, Z+1	; 0x01
    2c60:	37 fd       	sbrc	r19, 7
    2c62:	89 c0       	rjmp	.+274    	; 0x2d76 <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2c64:	80 91 f1 03 	lds	r24, 0x03F1
    2c68:	90 91 f2 03 	lds	r25, 0x03F2
    2c6c:	a9 01       	movw	r20, r18
    2c6e:	48 1b       	sub	r20, r24
    2c70:	59 0b       	sbc	r21, r25
    2c72:	ca 01       	movw	r24, r20
    2c74:	50 93 68 05 	sts	0x0568, r21
    2c78:	40 93 67 05 	sts	0x0567, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    2c7c:	20 91 05 04 	lds	r18, 0x0405
    2c80:	30 91 06 04 	lds	r19, 0x0406
    2c84:	28 0f       	add	r18, r24
    2c86:	39 1f       	adc	r19, r25
    2c88:	30 93 06 04 	sts	0x0406, r19
    2c8c:	20 93 05 04 	sts	0x0405, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    2c90:	56 e0       	ldi	r21, 0x06	; 6
    2c92:	21 34       	cpi	r18, 0x41	; 65
    2c94:	35 07       	cpc	r19, r21
    2c96:	0c f4       	brge	.+2      	; 0x2c9a <start_horizontal_speed_control_left+0x5a>
    2c98:	61 c0       	rjmp	.+194    	; 0x2d5c <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    2c9a:	20 e4       	ldi	r18, 0x40	; 64
    2c9c:	36 e0       	ldi	r19, 0x06	; 6
    2c9e:	30 93 06 04 	sts	0x0406, r19
    2ca2:	20 93 05 04 	sts	0x0405, r18
    2ca6:	60 e8       	ldi	r22, 0x80	; 128
    2ca8:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    2caa:	9c 01       	movw	r18, r24
    2cac:	22 0f       	add	r18, r18
    2cae:	33 1f       	adc	r19, r19
    2cb0:	28 0f       	add	r18, r24
    2cb2:	39 1f       	adc	r19, r25
    2cb4:	22 0f       	add	r18, r18
    2cb6:	33 1f       	adc	r19, r19
    2cb8:	22 0f       	add	r18, r18
    2cba:	33 1f       	adc	r19, r19
    2cbc:	22 0f       	add	r18, r18
    2cbe:	33 1f       	adc	r19, r19
    2cc0:	28 0f       	add	r18, r24
    2cc2:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    2cc4:	40 81       	ld	r20, Z
    2cc6:	51 81       	ldd	r21, Z+1	; 0x01
    2cc8:	44 0f       	add	r20, r20
    2cca:	55 1f       	adc	r21, r21
    2ccc:	44 0f       	add	r20, r20
    2cce:	55 1f       	adc	r21, r21
    2cd0:	44 0f       	add	r20, r20
    2cd2:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    2cd4:	24 0f       	add	r18, r20
    2cd6:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    2cd8:	ad 01       	movw	r20, r26
    2cda:	48 1b       	sub	r20, r24
    2cdc:	59 0b       	sbc	r21, r25
    2cde:	ca 01       	movw	r24, r20
    2ce0:	88 0f       	add	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	84 0f       	add	r24, r20
    2ce6:	95 1f       	adc	r25, r21
    2ce8:	28 0f       	add	r18, r24
    2cea:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    2cec:	26 0f       	add	r18, r22
    2cee:	37 1f       	adc	r19, r23
    2cf0:	30 93 04 04 	sts	0x0404, r19
    2cf4:	20 93 03 04 	sts	0x0403, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2cf8:	37 fd       	sbrc	r19, 7
    2cfa:	4c c0       	rjmp	.+152    	; 0x2d94 <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2cfc:	12 16       	cp	r1, r18
    2cfe:	13 06       	cpc	r1, r19
    2d00:	0c f0       	brlt	.+2      	; 0x2d04 <start_horizontal_speed_control_left+0xc4>
    2d02:	52 c0       	rjmp	.+164    	; 0x2da8 <start_horizontal_speed_control_left+0x168>
    2d04:	80 81       	ld	r24, Z
    2d06:	91 81       	ldd	r25, Z+1	; 0x01
    2d08:	97 fd       	sbrc	r25, 7
    2d0a:	67 c0       	rjmp	.+206    	; 0x2dda <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2d0c:	5d e5       	ldi	r21, 0x5D	; 93
    2d0e:	21 3c       	cpi	r18, 0xC1	; 193
    2d10:	35 07       	cpc	r19, r21
    2d12:	0c f4       	brge	.+2      	; 0x2d16 <start_horizontal_speed_control_left+0xd6>
    2d14:	49 c0       	rjmp	.+146    	; 0x2da8 <start_horizontal_speed_control_left+0x168>
    2d16:	80 ec       	ldi	r24, 0xC0	; 192
    2d18:	9d e5       	ldi	r25, 0x5D	; 93
    2d1a:	90 93 04 04 	sts	0x0404, r25
    2d1e:	80 93 03 04 	sts	0x0403, r24
    2d22:	2c ed       	ldi	r18, 0xDC	; 220
    2d24:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    2d26:	22 5e       	subi	r18, 0xE2	; 226
    2d28:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2a:	31 83       	std	Z+1, r19	; 0x01
    2d2c:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2d2e:	42 e0       	ldi	r20, 0x02	; 2
    2d30:	21 30       	cpi	r18, 0x01	; 1
    2d32:	34 07       	cpc	r19, r20
    2d34:	0c f4       	brge	.+2      	; 0x2d38 <start_horizontal_speed_control_left+0xf8>
    2d36:	48 c0       	rjmp	.+144    	; 0x2dc8 <start_horizontal_speed_control_left+0x188>
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	92 e0       	ldi	r25, 0x02	; 2
    2d3c:	91 83       	std	Z+1, r25	; 0x01
    2d3e:	80 83       	st	Z, r24
    2d40:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2d42:	10 92 06 04 	sts	0x0406, r1
    2d46:	10 92 05 04 	sts	0x0405, r1
		delta_left_speed_current = 0;
    2d4a:	10 92 68 05 	sts	0x0568, r1
    2d4e:	10 92 67 05 	sts	0x0567, r1
		delta_left_speed_prev = 0;
    2d52:	10 92 82 05 	sts	0x0582, r1
    2d56:	10 92 81 05 	sts	0x0581, r1
		return;
    2d5a:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2d5c:	49 ef       	ldi	r20, 0xF9	; 249
    2d5e:	20 3c       	cpi	r18, 0xC0	; 192
    2d60:	34 07       	cpc	r19, r20
    2d62:	a4 f4       	brge	.+40     	; 0x2d8c <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    2d64:	20 ec       	ldi	r18, 0xC0	; 192
    2d66:	39 ef       	ldi	r19, 0xF9	; 249
    2d68:	30 93 06 04 	sts	0x0406, r19
    2d6c:	20 93 05 04 	sts	0x0405, r18
    2d70:	60 e8       	ldi	r22, 0x80	; 128
    2d72:	73 ef       	ldi	r23, 0xF3	; 243
    2d74:	9a cf       	rjmp	.-204    	; 0x2caa <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2d76:	80 91 f1 03 	lds	r24, 0x03F1
    2d7a:	90 91 f2 03 	lds	r25, 0x03F2
    2d7e:	82 0f       	add	r24, r18
    2d80:	93 1f       	adc	r25, r19
    2d82:	90 93 68 05 	sts	0x0568, r25
    2d86:	80 93 67 05 	sts	0x0567, r24
    2d8a:	78 cf       	rjmp	.-272    	; 0x2c7c <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2d8c:	b9 01       	movw	r22, r18
    2d8e:	66 0f       	add	r22, r22
    2d90:	77 1f       	adc	r23, r23
    2d92:	8b cf       	rjmp	.-234    	; 0x2caa <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2d94:	80 81       	ld	r24, Z
    2d96:	91 81       	ldd	r25, Z+1	; 0x01
    2d98:	97 fd       	sbrc	r25, 7
    2d9a:	06 c0       	rjmp	.+12     	; 0x2da8 <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    2d9c:	10 92 04 04 	sts	0x0404, r1
    2da0:	10 92 03 04 	sts	0x0403, r1
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2da8:	82 ea       	ldi	r24, 0xA2	; 162
    2daa:	20 34       	cpi	r18, 0x40	; 64
    2dac:	38 07       	cpc	r19, r24
    2dae:	dc f4       	brge	.+54     	; 0x2de6 <start_horizontal_speed_control_left+0x1a6>
    2db0:	80 e4       	ldi	r24, 0x40	; 64
    2db2:	92 ea       	ldi	r25, 0xA2	; 162
    2db4:	90 93 04 04 	sts	0x0404, r25
    2db8:	80 93 03 04 	sts	0x0403, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2dbc:	24 e2       	ldi	r18, 0x24	; 36
    2dbe:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    2dc0:	2e 51       	subi	r18, 0x1E	; 30
    2dc2:	30 40       	sbci	r19, 0x00	; 0
    2dc4:	31 83       	std	Z+1, r19	; 0x01
    2dc6:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2dc8:	5e ef       	ldi	r21, 0xFE	; 254
    2dca:	20 30       	cpi	r18, 0x00	; 0
    2dcc:	35 07       	cpc	r19, r21
    2dce:	24 f4       	brge	.+8      	; 0x2dd8 <start_horizontal_speed_control_left+0x198>
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	9e ef       	ldi	r25, 0xFE	; 254
    2dd4:	91 83       	std	Z+1, r25	; 0x01
    2dd6:	80 83       	st	Z, r24
    2dd8:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2dda:	10 92 04 04 	sts	0x0404, r1
    2dde:	10 92 03 04 	sts	0x0403, r1
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2de6:	35 95       	asr	r19
    2de8:	27 95       	ror	r18
    2dea:	35 95       	asr	r19
    2dec:	27 95       	ror	r18
    2dee:	35 95       	asr	r19
    2df0:	27 95       	ror	r18
    2df2:	35 95       	asr	r19
    2df4:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2df6:	31 83       	std	Z+1, r19	; 0x01
    2df8:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    2dfa:	12 16       	cp	r1, r18
    2dfc:	13 06       	cpc	r1, r19
    2dfe:	0c f4       	brge	.+2      	; 0x2e02 <start_horizontal_speed_control_left+0x1c2>
    2e00:	92 cf       	rjmp	.-220    	; 0x2d26 <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    2e02:	21 15       	cp	r18, r1
    2e04:	31 05       	cpc	r19, r1
    2e06:	e1 f6       	brne	.-72     	; 0x2dc0 <start_horizontal_speed_control_left+0x180>
    2e08:	08 95       	ret

00002e0a <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    2e0a:	85 b7       	in	r24, 0x35	; 53
    2e0c:	80 61       	ori	r24, 0x10	; 16
    2e0e:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    2e10:	8f ef       	ldi	r24, 0xFF	; 255
    2e12:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    2e14:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    2e16:	97 ef       	ldi	r25, 0xF7	; 247
    2e18:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    2e1a:	90 ee       	ldi	r25, 0xE0	; 224
    2e1c:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    2e1e:	90 ef       	ldi	r25, 0xF0	; 240
    2e20:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    2e22:	90 eb       	ldi	r25, 0xB0	; 176
    2e24:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    2e26:	9c ef       	ldi	r25, 0xFC	; 252
    2e28:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    2e2a:	93 e0       	ldi	r25, 0x03	; 3
    2e2c:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    2e2e:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    2e30:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    2e32:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    2e34:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    2e36:	80 91 4c 05 	lds	r24, 0x054C
    2e3a:	88 23       	and	r24, r24
    2e3c:	e1 f0       	breq	.+56     	; 0x2e76 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    2e3e:	81 30       	cpi	r24, 0x01	; 1
    2e40:	d1 f0       	breq	.+52     	; 0x2e76 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    2e42:	82 30       	cpi	r24, 0x02	; 2
    2e44:	51 f1       	breq	.+84     	; 0x2e9a <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    2e46:	9f ef       	ldi	r25, 0xFF	; 255
    2e48:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    2e4c:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    2e50:	9f e0       	ldi	r25, 0x0F	; 15
    2e52:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    2e56:	88 23       	and	r24, r24
    2e58:	a9 f4       	brne	.+42     	; 0x2e84 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    2e5a:	90 91 05 01 	lds	r25, 0x0105
    2e5e:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    2e62:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    2e66:	9f ef       	ldi	r25, 0xFF	; 255
    2e68:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    2e6c:	88 23       	and	r24, r24
    2e6e:	29 f4       	brne	.+10     	; 0x2e7a <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    2e70:	10 92 0b 01 	sts	0x010B, r1
    2e74:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    2e76:	14 ba       	out	0x14, r1	; 20
    2e78:	e6 cf       	rjmp	.-52     	; 0x2e46 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    2e7a:	81 30       	cpi	r24, 0x01	; 1
    2e7c:	c9 f3       	breq	.-14     	; 0x2e70 <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    2e7e:	82 30       	cpi	r24, 0x02	; 2
    2e80:	41 f0       	breq	.+16     	; 0x2e92 <initPortsIO+0x88>
    2e82:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    2e84:	81 30       	cpi	r24, 0x01	; 1
    2e86:	11 f0       	breq	.+4      	; 0x2e8c <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    2e88:	82 30       	cpi	r24, 0x02	; 2
    2e8a:	59 f7       	brne	.-42     	; 0x2e62 <initPortsIO+0x58>
		PORTJ = 0x0F;
    2e8c:	90 93 05 01 	sts	0x0105, r25
    2e90:	e8 cf       	rjmp	.-48     	; 0x2e62 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    2e92:	87 ef       	ldi	r24, 0xF7	; 247
    2e94:	80 93 0b 01 	sts	0x010B, r24
    2e98:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    2e9a:	98 e0       	ldi	r25, 0x08	; 8
    2e9c:	94 bb       	out	0x14, r25	; 20
    2e9e:	d3 cf       	rjmp	.-90     	; 0x2e46 <initPortsIO+0x3c>

00002ea0 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    2ea0:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    2ea4:	10 92 bc 00 	sts	0x00BC, r1
}
    2ea8:	08 95       	ret

00002eaa <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    2eaa:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    2eac:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    2eae:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    2eb8:	08 95       	ret

00002eba <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2eba:	94 ea       	ldi	r25, 0xA4	; 164
    2ebc:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2ec0:	90 91 bc 00 	lds	r25, 0x00BC
    2ec4:	97 ff       	sbrs	r25, 7
    2ec6:	fc cf       	rjmp	.-8      	; 0x2ec0 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2ec8:	90 91 b9 00 	lds	r25, 0x00B9
    2ecc:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2ece:	98 30       	cpi	r25, 0x08	; 8
    2ed0:	21 f0       	breq	.+8      	; 0x2eda <i2c_start+0x20>
    2ed2:	90 31       	cpi	r25, 0x10	; 16
    2ed4:	11 f0       	breq	.+4      	; 0x2eda <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2eda:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2ede:	84 e8       	ldi	r24, 0x84	; 132
    2ee0:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2ee4:	80 91 bc 00 	lds	r24, 0x00BC
    2ee8:	87 ff       	sbrs	r24, 7
    2eea:	fc cf       	rjmp	.-8      	; 0x2ee4 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2eec:	90 91 b9 00 	lds	r25, 0x00B9
    2ef0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2ef2:	98 31       	cpi	r25, 0x18	; 24
    2ef4:	21 f0       	breq	.+8      	; 0x2efe <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	90 34       	cpi	r25, 0x40	; 64
    2efa:	19 f0       	breq	.+6      	; 0x2f02 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2efc:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2efe:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2f00:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	08 95       	ret

00002f06 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2f06:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2f08:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2f0a:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2f0c:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2f10:	90 91 bc 00 	lds	r25, 0x00BC
    2f14:	97 ff       	sbrs	r25, 7
    2f16:	fc cf       	rjmp	.-8      	; 0x2f10 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2f18:	90 91 b9 00 	lds	r25, 0x00B9
    2f1c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2f1e:	98 30       	cpi	r25, 0x08	; 8
    2f20:	11 f0       	breq	.+4      	; 0x2f26 <i2c_start_wait+0x20>
    2f22:	90 31       	cpi	r25, 0x10	; 16
    2f24:	99 f7       	brne	.-26     	; 0x2f0c <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2f26:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2f2a:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2f2e:	90 91 bc 00 	lds	r25, 0x00BC
    2f32:	97 ff       	sbrs	r25, 7
    2f34:	fc cf       	rjmp	.-8      	; 0x2f2e <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2f36:	90 91 b9 00 	lds	r25, 0x00B9
    2f3a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2f3c:	90 32       	cpi	r25, 0x20	; 32
    2f3e:	19 f0       	breq	.+6      	; 0x2f46 <i2c_start_wait+0x40>
    2f40:	98 35       	cpi	r25, 0x58	; 88
    2f42:	09 f0       	breq	.+2      	; 0x2f46 <i2c_start_wait+0x40>
    2f44:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2f46:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2f4a:	90 91 bc 00 	lds	r25, 0x00BC
    2f4e:	94 fd       	sbrc	r25, 4
    2f50:	fc cf       	rjmp	.-8      	; 0x2f4a <i2c_start_wait+0x44>
    2f52:	dc cf       	rjmp	.-72     	; 0x2f0c <i2c_start_wait+0x6>

00002f54 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2f54:	94 ea       	ldi	r25, 0xA4	; 164
    2f56:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2f5a:	90 91 bc 00 	lds	r25, 0x00BC
    2f5e:	97 ff       	sbrs	r25, 7
    2f60:	fc cf       	rjmp	.-8      	; 0x2f5a <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2f62:	90 91 b9 00 	lds	r25, 0x00B9
    2f66:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2f68:	98 30       	cpi	r25, 0x08	; 8
    2f6a:	21 f0       	breq	.+8      	; 0x2f74 <i2c_rep_start+0x20>
    2f6c:	90 31       	cpi	r25, 0x10	; 16
    2f6e:	11 f0       	breq	.+4      	; 0x2f74 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2f74:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2f78:	84 e8       	ldi	r24, 0x84	; 132
    2f7a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2f7e:	80 91 bc 00 	lds	r24, 0x00BC
    2f82:	87 ff       	sbrs	r24, 7
    2f84:	fc cf       	rjmp	.-8      	; 0x2f7e <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2f86:	90 91 b9 00 	lds	r25, 0x00B9
    2f8a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2f8c:	98 31       	cpi	r25, 0x18	; 24
    2f8e:	21 f0       	breq	.+8      	; 0x2f98 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 34       	cpi	r25, 0x40	; 64
    2f94:	19 f0       	breq	.+6      	; 0x2f9c <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    2f96:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2f98:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2f9a:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	08 95       	ret

00002fa0 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2fa0:	84 e9       	ldi	r24, 0x94	; 148
    2fa2:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2fa6:	80 91 bc 00 	lds	r24, 0x00BC
    2faa:	84 fd       	sbrc	r24, 4
    2fac:	fc cf       	rjmp	.-8      	; 0x2fa6 <i2c_stop+0x6>

}/* i2c_stop */
    2fae:	08 95       	ret

00002fb0 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2fb0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2fb4:	84 e8       	ldi	r24, 0x84	; 132
    2fb6:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2fba:	80 91 bc 00 	lds	r24, 0x00BC
    2fbe:	87 ff       	sbrs	r24, 7
    2fc0:	fc cf       	rjmp	.-8      	; 0x2fba <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2fc2:	90 91 b9 00 	lds	r25, 0x00B9
    2fc6:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	98 32       	cpi	r25, 0x28	; 40
    2fcc:	09 f0       	breq	.+2      	; 0x2fd0 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2fce:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2fd2:	08 95       	ret

00002fd4 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2fd4:	84 ec       	ldi	r24, 0xC4	; 196
    2fd6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    2fda:	80 91 bc 00 	lds	r24, 0x00BC
    2fde:	87 ff       	sbrs	r24, 7
    2fe0:	fc cf       	rjmp	.-8      	; 0x2fda <i2c_readAck+0x6>

    return TWDR;
    2fe2:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2fe6:	08 95       	ret

00002fe8 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2fe8:	84 e8       	ldi	r24, 0x84	; 132
    2fea:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2fee:	80 91 bc 00 	lds	r24, 0x00BC
    2ff2:	87 ff       	sbrs	r24, 7
    2ff4:	fc cf       	rjmp	.-8      	; 0x2fee <i2c_readNak+0x6>
	
    return TWDR;
    2ff6:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2ffa:	08 95       	ret

00002ffc <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    2ffc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    3000:	80 e1       	ldi	r24, 0x10	; 16
    3002:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    3006:	e0 ec       	ldi	r30, 0xC0	; 192
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
    300c:	82 60       	ori	r24, 0x02	; 2
    300e:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    3010:	e1 ec       	ldi	r30, 0xC1	; 193
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	88 69       	ori	r24, 0x98	; 152
    3018:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    301a:	e2 ec       	ldi	r30, 0xC2	; 194
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	86 60       	ori	r24, 0x06	; 6
    3022:	80 83       	st	Z, r24



}
    3024:	08 95       	ret

00003026 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    3026:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    302a:	80 e1       	ldi	r24, 0x10	; 16
    302c:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    3030:	e8 ec       	ldi	r30, 0xC8	; 200
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	82 60       	ori	r24, 0x02	; 2
    3038:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    303a:	e9 ec       	ldi	r30, 0xC9	; 201
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	80 81       	ld	r24, Z
    3040:	88 61       	ori	r24, 0x18	; 24
    3042:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    3044:	ea ec       	ldi	r30, 0xCA	; 202
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	86 60       	ori	r24, 0x06	; 6
    304c:	80 83       	st	Z, r24

}
    304e:	08 95       	ret

00003050 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    3050:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    3054:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    3058:	10 92 c2 00 	sts	0x00C2, r1

}
    305c:	08 95       	ret

0000305e <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    305e:	90 91 c0 00 	lds	r25, 0x00C0
    3062:	95 ff       	sbrs	r25, 5
    3064:	fc cf       	rjmp	.-8      	; 0x305e <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    3066:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    306a:	66 23       	and	r22, r22
    306c:	21 f0       	breq	.+8      	; 0x3076 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    306e:	80 91 c0 00 	lds	r24, 0x00C0
    3072:	86 ff       	sbrs	r24, 6
    3074:	fc cf       	rjmp	.-8      	; 0x306e <usart0Transmit+0x10>
    3076:	08 95       	ret

00003078 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    3078:	90 91 c8 00 	lds	r25, 0x00C8
    307c:	95 ff       	sbrs	r25, 5
    307e:	fc cf       	rjmp	.-8      	; 0x3078 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    3080:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    3084:	66 23       	and	r22, r22
    3086:	21 f0       	breq	.+8      	; 0x3090 <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    3088:	80 91 c8 00 	lds	r24, 0x00C8
    308c:	86 ff       	sbrs	r24, 6
    308e:	fc cf       	rjmp	.-8      	; 0x3088 <usart1Transmit+0x10>
    3090:	08 95       	ret

00003092 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3092:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    3096:	80 95       	com	r24
	} else {
		return 1;
	}

}
    3098:	88 1f       	adc	r24, r24
    309a:	88 27       	eor	r24, r24
    309c:	88 1f       	adc	r24, r24
    309e:	08 95       	ret

000030a0 <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    30a0:	87 e9       	ldi	r24, 0x97	; 151
    30a2:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    30a4:	20 91 c0 00 	lds	r18, 0x00C0
    30a8:	27 fd       	sbrc	r18, 7
    30aa:	07 c0       	rjmp	.+14     	; 0x30ba <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    30ac:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    30ae:	d1 f7       	brne	.-12     	; 0x30a4 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	80 93 18 04 	sts	0x0418, r24
			return 0;				// timeout
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    30ba:	80 91 c6 00 	lds	r24, 0x00C6

}
    30be:	08 95       	ret

000030c0 <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    30c0:	1f 92       	push	r1
    30c2:	0f 92       	push	r0
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	0f 92       	push	r0
    30c8:	0b b6       	in	r0, 0x3b	; 59
    30ca:	0f 92       	push	r0
    30cc:	11 24       	eor	r1, r1
    30ce:	2f 93       	push	r18
    30d0:	3f 93       	push	r19
    30d2:	4f 93       	push	r20
    30d4:	5f 93       	push	r21
    30d6:	6f 93       	push	r22
    30d8:	7f 93       	push	r23
    30da:	8f 93       	push	r24
    30dc:	9f 93       	push	r25
    30de:	af 93       	push	r26
    30e0:	bf 93       	push	r27
    30e2:	ef 93       	push	r30
    30e4:	ff 93       	push	r31

	char receivedByte = UDR0;
    30e6:	80 91 c6 00 	lds	r24, 0x00C6

	if(currentSelector==15) {
    30ea:	90 91 49 05 	lds	r25, 0x0549
    30ee:	9f 30       	cpi	r25, 0x0F	; 15
    30f0:	21 f1       	breq	.+72     	; 0x313a <__vector_25+0x7a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    30f2:	90 91 11 02 	lds	r25, 0x0211
    30f6:	99 23       	and	r25, r25
    30f8:	d9 f4       	brne	.+54     	; 0x3130 <__vector_25+0x70>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    30fa:	90 91 1d 05 	lds	r25, 0x051D
    30fe:	91 30       	cpi	r25, 0x01	; 1
    3100:	09 f4       	brne	.+2      	; 0x3104 <__vector_25+0x44>
    3102:	60 c0       	rjmp	.+192    	; 0x31c4 <__vector_25+0x104>
    3104:	92 30       	cpi	r25, 0x02	; 2
    3106:	09 f4       	brne	.+2      	; 0x310a <__vector_25+0x4a>
    3108:	43 c0       	rjmp	.+134    	; 0x3190 <__vector_25+0xd0>
			}
		}

	}

}
    310a:	ff 91       	pop	r31
    310c:	ef 91       	pop	r30
    310e:	bf 91       	pop	r27
    3110:	af 91       	pop	r26
    3112:	9f 91       	pop	r25
    3114:	8f 91       	pop	r24
    3116:	7f 91       	pop	r23
    3118:	6f 91       	pop	r22
    311a:	5f 91       	pop	r21
    311c:	4f 91       	pop	r20
    311e:	3f 91       	pop	r19
    3120:	2f 91       	pop	r18
    3122:	0f 90       	pop	r0
    3124:	0b be       	out	0x3b, r0	; 59
    3126:	0f 90       	pop	r0
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	0f 90       	pop	r0
    312c:	1f 90       	pop	r1
    312e:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    3130:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    3134:	80 93 1d 05 	sts	0x051D, r24
    3138:	e8 cf       	rjmp	.-48     	; 0x310a <__vector_25+0x4a>

	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
    313a:	8b 32       	cpi	r24, 0x2B	; 43
    313c:	09 f4       	brne	.+2      	; 0x3140 <__vector_25+0x80>
    313e:	4c c0       	rjmp	.+152    	; 0x31d8 <__vector_25+0x118>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    3140:	8d 32       	cpi	r24, 0x2D	; 45
    3142:	f1 f0       	breq	.+60     	; 0x3180 <__vector_25+0xc0>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    3144:	87 36       	cpi	r24, 0x67	; 103
    3146:	09 f0       	breq	.+2      	; 0x314a <__vector_25+0x8a>
    3148:	5b c0       	rjmp	.+182    	; 0x3200 <__vector_25+0x140>
			usart0Transmit(irCommand,1);
    314a:	90 91 21 05 	lds	r25, 0x0521

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    314e:	80 91 c0 00 	lds	r24, 0x00C0
    3152:	85 ff       	sbrs	r24, 5
    3154:	fc cf       	rjmp	.-8      	; 0x314e <__vector_25+0x8e>
	UDR0 = data;						// put data into buffer, sends the data
    3156:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    315a:	80 91 c0 00 	lds	r24, 0x00C0
    315e:	86 ff       	sbrs	r24, 6
    3160:	fc cf       	rjmp	.-8      	; 0x315a <__vector_25+0x9a>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    3162:	90 91 66 00 	lds	r25, 0x0066
    3166:	90 93 66 05 	sts	0x0566, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    316a:	80 91 c0 00 	lds	r24, 0x00C0
    316e:	85 ff       	sbrs	r24, 5
    3170:	fc cf       	rjmp	.-8      	; 0x316a <__vector_25+0xaa>
	UDR0 = data;						// put data into buffer, sends the data
    3172:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3176:	80 91 c0 00 	lds	r24, 0x00C0
    317a:	86 ff       	sbrs	r24, 6
    317c:	fc cf       	rjmp	.-8      	; 0x3176 <__vector_25+0xb6>
    317e:	c5 cf       	rjmp	.-118    	; 0x310a <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3180:	80 91 66 05 	lds	r24, 0x0566
    3184:	88 23       	and	r24, r24
    3186:	d1 f1       	breq	.+116    	; 0x31fc <__vector_25+0x13c>
				currentOsccal--;	
    3188:	81 50       	subi	r24, 0x01	; 1
    318a:	80 93 66 05 	sts	0x0566, r24
    318e:	2b c0       	rjmp	.+86     	; 0x31e6 <__vector_25+0x126>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    3190:	40 91 1f 05 	lds	r20, 0x051F
    3194:	44 23       	and	r20, r20
    3196:	51 f1       	breq	.+84     	; 0x31ec <__vector_25+0x12c>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    3198:	41 30       	cpi	r20, 0x01	; 1
    319a:	09 f0       	breq	.+2      	; 0x319e <__vector_25+0xde>
    319c:	b6 cf       	rjmp	.-148    	; 0x310a <__vector_25+0x4a>
						rfAddress |= ((unsigned int)receivedByte<<8);
    319e:	38 2f       	mov	r19, r24
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	80 91 11 04 	lds	r24, 0x0411
    31a6:	90 91 12 04 	lds	r25, 0x0412
    31aa:	82 2b       	or	r24, r18
    31ac:	93 2b       	or	r25, r19
    31ae:	90 93 12 04 	sts	0x0412, r25
    31b2:	80 93 11 04 	sts	0x0411, r24
						addressReceived = 1;
    31b6:	40 93 1e 05 	sts	0x051E, r20
						menuState = 0;
    31ba:	10 92 1f 05 	sts	0x051F, r1
						chooseMenu = 1;
    31be:	40 93 11 02 	sts	0x0211, r20
    31c2:	a3 cf       	rjmp	.-186    	; 0x310a <__vector_25+0x4a>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    31c4:	8a 3a       	cpi	r24, 0xAA	; 170
    31c6:	31 f1       	breq	.+76     	; 0x3214 <__vector_25+0x154>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    31c8:	85 35       	cpi	r24, 0x55	; 85
    31ca:	09 f0       	breq	.+2      	; 0x31ce <__vector_25+0x10e>
    31cc:	9e cf       	rjmp	.-196    	; 0x310a <__vector_25+0x4a>
						chooseMenu = 1;
    31ce:	90 93 11 02 	sts	0x0211, r25
						menuChoice = 0;
    31d2:	10 92 1d 05 	sts	0x051D, r1
    31d6:	99 cf       	rjmp	.-206    	; 0x310a <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    31d8:	80 91 66 05 	lds	r24, 0x0566
    31dc:	8f 3f       	cpi	r24, 0xFF	; 255
    31de:	e9 f0       	breq	.+58     	; 0x321a <__vector_25+0x15a>
				currentOsccal++;
    31e0:	8f 5f       	subi	r24, 0xFF	; 255
    31e2:	80 93 66 05 	sts	0x0566, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    31e6:	80 93 66 00 	sts	0x0066, r24
    31ea:	8f cf       	rjmp	.-226    	; 0x310a <__vector_25+0x4a>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    31ec:	80 93 11 04 	sts	0x0411, r24
    31f0:	10 92 12 04 	sts	0x0412, r1
						menuState = 1;
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	80 93 1f 05 	sts	0x051F, r24
    31fa:	87 cf       	rjmp	.-242    	; 0x310a <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	f3 cf       	rjmp	.-26     	; 0x31e6 <__vector_25+0x126>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    3200:	83 37       	cpi	r24, 0x73	; 115
    3202:	09 f0       	breq	.+2      	; 0x3206 <__vector_25+0x146>
    3204:	82 cf       	rjmp	.-252    	; 0x310a <__vector_25+0x4a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    3206:	8d ef       	ldi	r24, 0xFD	; 253
    3208:	9f e0       	ldi	r25, 0x0F	; 15
    320a:	60 91 66 05 	lds	r22, 0x0566
    320e:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <__eewr_byte_m2560>
    3212:	7b cf       	rjmp	.-266    	; 0x310a <__vector_25+0x4a>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    3214:	90 93 20 05 	sts	0x0520, r25
    3218:	78 cf       	rjmp	.-272    	; 0x310a <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    321a:	8f ef       	ldi	r24, 0xFF	; 255
    321c:	e4 cf       	rjmp	.-56     	; 0x31e6 <__vector_25+0x126>

0000321e <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    321e:	86 b1       	in	r24, 0x06	; 6
    3220:	66 b1       	in	r22, 0x06	; 6
    3222:	26 b1       	in	r18, 0x06	; 6
    3224:	46 b1       	in	r20, 0x06	; 6
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	28 70       	andi	r18, 0x08	; 8
    322a:	30 70       	andi	r19, 0x00	; 0
    322c:	35 95       	asr	r19
    322e:	27 95       	ror	r18
    3230:	35 95       	asr	r19
    3232:	27 95       	ror	r18
    3234:	35 95       	asr	r19
    3236:	27 95       	ror	r18
    3238:	22 0f       	add	r18, r18
    323a:	33 1f       	adc	r19, r19
    323c:	70 e0       	ldi	r23, 0x00	; 0
    323e:	64 70       	andi	r22, 0x04	; 4
    3240:	70 70       	andi	r23, 0x00	; 0
    3242:	75 95       	asr	r23
    3244:	67 95       	ror	r22
    3246:	75 95       	asr	r23
    3248:	67 95       	ror	r22
    324a:	26 0f       	add	r18, r22
    324c:	37 1f       	adc	r19, r23
    324e:	22 0f       	add	r18, r18
    3250:	33 1f       	adc	r19, r19
    3252:	50 e0       	ldi	r21, 0x00	; 0
    3254:	42 70       	andi	r20, 0x02	; 2
    3256:	50 70       	andi	r21, 0x00	; 0
    3258:	55 95       	asr	r21
    325a:	47 95       	ror	r20
    325c:	24 0f       	add	r18, r20
    325e:	35 1f       	adc	r19, r21
    3260:	22 0f       	add	r18, r18
    3262:	81 70       	andi	r24, 0x01	; 1
}
    3264:	82 0f       	add	r24, r18
    3266:	08 95       	ret

00003268 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3268:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    326a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    326c:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    326e:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    3272:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    3276:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    327a:	8e ef       	ldi	r24, 0xFE	; 254
    327c:	9f e0       	ldi	r25, 0x0F	; 15
    327e:	0e 94 de 31 	call	0x63bc	; 0x63bc <__eerd_word_m2560>
    3282:	90 93 12 04 	sts	0x0412, r25
    3286:	80 93 11 04 	sts	0x0411, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    328a:	8d ef       	ldi	r24, 0xFD	; 253
    328c:	9f e0       	ldi	r25, 0x0F	; 15
    328e:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__eerd_byte_m2560>
    3292:	80 93 66 05 	sts	0x0566, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    3296:	98 2f       	mov	r25, r24
    3298:	91 50       	subi	r25, 0x01	; 1
    329a:	9e 3f       	cpi	r25, 0xFE	; 254
    329c:	d8 f5       	brcc	.+118    	; 0x3314 <initPeripherals+0xac>
		OSCCAL = currentOsccal;
    329e:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    32a2:	80 91 11 04 	lds	r24, 0x0411
    32a6:	90 91 12 04 	lds	r25, 0x0412
    32aa:	9c 01       	movw	r18, r24
    32ac:	21 58       	subi	r18, 0x81	; 129
    32ae:	3c 40       	sbci	r19, 0x0C	; 12
    32b0:	23 30       	cpi	r18, 0x03	; 3
    32b2:	31 05       	cpc	r19, r1
    32b4:	f8 f4       	brcc	.+62     	; 0x32f4 <initPeripherals+0x8c>
		hardwareRevision = HW_REV_3_0;
    32b6:	10 92 4c 05 	sts	0x054C, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    32ba:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <initPortsIO>
	initAdc();
    32be:	0e 94 16 1a 	call	0x342c	; 0x342c <initAdc>
	initMotors();
    32c2:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <initMotors>
	initRGBleds();
    32c6:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <initRGBleds>
	initSPI();
    32ca:	0e 94 54 09 	call	0x12a8	; 0x12a8 <initSPI>
	mirf_init();
    32ce:	0e 94 3d 0a 	call	0x147a	; 0x147a <mirf_init>
	if(spiCommError==0) {
    32d2:	80 91 14 04 	lds	r24, 0x0414
    32d6:	88 23       	and	r24, r24
    32d8:	29 f4       	brne	.+10     	; 0x32e4 <initPeripherals+0x7c>
		rfFlags |= 1;
    32da:	80 91 13 04 	lds	r24, 0x0413
    32de:	81 60       	ori	r24, 0x01	; 1
    32e0:	80 93 13 04 	sts	0x0413, r24
	}
	initUsart0();
    32e4:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <initUsart0>
	initAccelerometer();
    32e8:	0e 94 33 25 	call	0x4a66	; 0x4a66 <initAccelerometer>
	init_ir_remote_control();
    32ec:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <init_ir_remote_control>

	sei();			// enable global interrupts
    32f0:	78 94       	sei

	
}
    32f2:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    32f4:	2c e0       	ldi	r18, 0x0C	; 12
    32f6:	80 38       	cpi	r24, 0x80	; 128
    32f8:	92 07       	cpc	r25, r18
    32fa:	21 f4       	brne	.+8      	; 0x3304 <initPeripherals+0x9c>
		hardwareRevision = HW_REV_3_0_1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	80 93 4c 05 	sts	0x054C, r24
    3302:	db cf       	rjmp	.-74     	; 0x32ba <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    3304:	2c e0       	ldi	r18, 0x0C	; 12
    3306:	84 38       	cpi	r24, 0x84	; 132
    3308:	92 07       	cpc	r25, r18
    330a:	b8 f2       	brcs	.-82     	; 0x32ba <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	80 93 4c 05 	sts	0x054C, r24
    3312:	d3 cf       	rjmp	.-90     	; 0x32ba <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    3314:	60 91 66 00 	lds	r22, 0x0066
    3318:	60 93 66 05 	sts	0x0566, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    331c:	8d ef       	ldi	r24, 0xFD	; 253
    331e:	9f e0       	ldi	r25, 0x0F	; 15
    3320:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <__eewr_byte_m2560>
    3324:	be cf       	rjmp	.-132    	; 0x32a2 <initPeripherals+0x3a>

00003326 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    3326:	1f 92       	push	r1
    3328:	0f 92       	push	r0
    332a:	0f b6       	in	r0, 0x3f	; 63
    332c:	0f 92       	push	r0
    332e:	11 24       	eor	r1, r1

}
    3330:	0f 90       	pop	r0
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	0f 90       	pop	r0
    3336:	1f 90       	pop	r1
    3338:	18 95       	reti

0000333a <sleep>:

void sleep(unsigned char seconds) {
    333a:	cf 93       	push	r28
    333c:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    333e:	9e e1       	ldi	r25, 0x1E	; 30
    3340:	89 9f       	mul	r24, r25
    3342:	e0 01       	movw	r28, r0
    3344:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    3346:	80 91 68 00 	lds	r24, 0x0068
    334a:	8d 7f       	andi	r24, 0xFD	; 253
    334c:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    3350:	80 91 6c 00 	lds	r24, 0x006C
    3354:	8f 77       	andi	r24, 0x7F	; 127
    3356:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    335a:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    335c:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    3360:	80 91 7a 00 	lds	r24, 0x007A
    3364:	80 61       	ori	r24, 0x10	; 16
    3366:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    336a:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    336e:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    3372:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    3376:	88 b3       	in	r24, 0x18	; 24
    3378:	87 60       	ori	r24, 0x07	; 7
    337a:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    337c:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    3380:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    3384:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    3388:	89 b3       	in	r24, 0x19	; 25
    338a:	87 60       	ori	r24, 0x07	; 7
    338c:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    338e:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    3392:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    3396:	0e 94 28 18 	call	0x3050	; 0x3050 <closeUsart>
	closeSPI();
    339a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <closeSPI>
	i2c_close();
    339e:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <i2c_close>

	// set port pins
	initPortsIO();
    33a2:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    33a6:	83 b7       	in	r24, 0x33	; 51
    33a8:	8f 60       	ori	r24, 0x0F	; 15
    33aa:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    33b2:	80 91 b0 00 	lds	r24, 0x00B0
    33b6:	8d 7f       	andi	r24, 0xFD	; 253
    33b8:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    33bc:	80 91 b1 00 	lds	r24, 0x00B1
    33c0:	87 60       	ori	r24, 0x07	; 7
    33c2:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    33c6:	20 97       	sbiw	r28, 0x00	; 0
    33c8:	19 f0       	breq	.+6      	; 0x33d0 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    33ca:	88 95       	sleep
		pause--;
    33cc:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    33ce:	e9 f7       	brne	.-6      	; 0x33ca <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    33d0:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    33d2:	80 91 b1 00 	lds	r24, 0x00B1
    33d6:	88 7f       	andi	r24, 0xF8	; 248
    33d8:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    33dc:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    33e0:	80 91 b0 00 	lds	r24, 0x00B0
    33e4:	82 60       	ori	r24, 0x02	; 2
    33e6:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    33ea:	8f ef       	ldi	r24, 0xFF	; 255
    33ec:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    33f0:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    33f4:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    33f8:	10 92 f6 03 	sts	0x03F6, r1
    33fc:	10 92 f5 03 	sts	0x03F5, r1
	pwm_left = 0;
    3400:	10 92 f8 03 	sts	0x03F8, r1
    3404:	10 92 f7 03 	sts	0x03F7, r1
	initPeripherals();
    3408:	0e 94 34 19 	call	0x3268	; 0x3268 <initPeripherals>

}
    340c:	df 91       	pop	r29
    340e:	cf 91       	pop	r28
    3410:	08 95       	ret

00003412 <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
	return clockTick;
    3412:	60 91 41 05 	lds	r22, 0x0541
    3416:	70 91 42 05 	lds	r23, 0x0542
}
    341a:	80 91 43 05 	lds	r24, 0x0543
    341e:	90 91 44 05 	lds	r25, 0x0544
    3422:	08 95       	ret

00003424 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	80 93 c7 03 	sts	0x03C7, r24
}
    342a:	08 95       	ret

0000342c <initAdc>:

#include "adc.h"


void initAdc(void) {
    342c:	cf 93       	push	r28
    342e:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    3430:	ea e7       	ldi	r30, 0x7A	; 122
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	10 82       	st	Z, r1
	ADCSRB = 0;
    3436:	ab e7       	ldi	r26, 0x7B	; 123
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	1c 92       	st	X, r1
	ADMUX = 0;
    343c:	cc e7       	ldi	r28, 0x7C	; 124
    343e:	d0 e0       	ldi	r29, 0x00	; 0
    3440:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    3442:	80 81       	ld	r24, Z
    3444:	86 60       	ori	r24, 0x06	; 6
    3446:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3448:	88 81       	ld	r24, Y
    344a:	80 64       	ori	r24, 0x40	; 64
    344c:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    344e:	80 81       	ld	r24, Z
    3450:	80 62       	ori	r24, 0x20	; 32
    3452:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    3454:	8c 91       	ld	r24, X
    3456:	88 7f       	andi	r24, 0xF8	; 248
    3458:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    345a:	80 81       	ld	r24, Z
    345c:	88 60       	ori	r24, 0x08	; 8
    345e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3460:	80 81       	ld	r24, Z
    3462:	80 68       	ori	r24, 0x80	; 128
    3464:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    3466:	80 81       	ld	r24, Z
    3468:	80 64       	ori	r24, 0x40	; 64
    346a:	80 83       	st	Z, r24

}
    346c:	df 91       	pop	r29
    346e:	cf 91       	pop	r28
    3470:	08 95       	ret

00003472 <__vector_29>:

ISR(ADC_vect) {
    3472:	1f 92       	push	r1
    3474:	0f 92       	push	r0
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	0f 92       	push	r0
    347a:	0b b6       	in	r0, 0x3b	; 59
    347c:	0f 92       	push	r0
    347e:	11 24       	eor	r1, r1
    3480:	2f 93       	push	r18
    3482:	3f 93       	push	r19
    3484:	4f 93       	push	r20
    3486:	5f 93       	push	r21
    3488:	6f 93       	push	r22
    348a:	7f 93       	push	r23
    348c:	8f 93       	push	r24
    348e:	9f 93       	push	r25
    3490:	ef 93       	push	r30
    3492:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    3494:	40 91 41 05 	lds	r20, 0x0541
    3498:	30 91 42 05 	lds	r19, 0x0542
    349c:	20 91 43 05 	lds	r18, 0x0543
    34a0:	90 91 44 05 	lds	r25, 0x0544
    34a4:	80 91 45 05 	lds	r24, 0x0545
    34a8:	e0 91 46 05 	lds	r30, 0x0546
    34ac:	70 91 47 05 	lds	r23, 0x0547
    34b0:	f0 91 48 05 	lds	r31, 0x0548
    34b4:	64 2f       	mov	r22, r20
    34b6:	6f 5f       	subi	r22, 0xFF	; 255
    34b8:	51 e0       	ldi	r21, 0x01	; 1
    34ba:	64 17       	cp	r22, r20
    34bc:	08 f0       	brcs	.+2      	; 0x34c0 <__vector_29+0x4e>
    34be:	50 e0       	ldi	r21, 0x00	; 0
    34c0:	53 0f       	add	r21, r19
    34c2:	41 e0       	ldi	r20, 0x01	; 1
    34c4:	53 17       	cp	r21, r19
    34c6:	08 f0       	brcs	.+2      	; 0x34ca <__vector_29+0x58>
    34c8:	40 e0       	ldi	r20, 0x00	; 0
    34ca:	42 0f       	add	r20, r18
    34cc:	31 e0       	ldi	r19, 0x01	; 1
    34ce:	42 17       	cp	r20, r18
    34d0:	08 f0       	brcs	.+2      	; 0x34d4 <__vector_29+0x62>
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	39 0f       	add	r19, r25
    34d6:	21 e0       	ldi	r18, 0x01	; 1
    34d8:	39 17       	cp	r19, r25
    34da:	08 f0       	brcs	.+2      	; 0x34de <__vector_29+0x6c>
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	28 0f       	add	r18, r24
    34e0:	91 e0       	ldi	r25, 0x01	; 1
    34e2:	28 17       	cp	r18, r24
    34e4:	08 f0       	brcs	.+2      	; 0x34e8 <__vector_29+0x76>
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	9e 0f       	add	r25, r30
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	9e 17       	cp	r25, r30
    34ee:	08 f0       	brcs	.+2      	; 0x34f2 <__vector_29+0x80>
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	87 0f       	add	r24, r23
    34f4:	e1 e0       	ldi	r30, 0x01	; 1
    34f6:	87 17       	cp	r24, r23
    34f8:	08 f0       	brcs	.+2      	; 0x34fc <__vector_29+0x8a>
    34fa:	e0 e0       	ldi	r30, 0x00	; 0
    34fc:	ef 0f       	add	r30, r31
    34fe:	60 93 41 05 	sts	0x0541, r22
    3502:	50 93 42 05 	sts	0x0542, r21
    3506:	40 93 43 05 	sts	0x0543, r20
    350a:	30 93 44 05 	sts	0x0544, r19
    350e:	20 93 45 05 	sts	0x0545, r18
    3512:	90 93 46 05 	sts	0x0546, r25
    3516:	80 93 47 05 	sts	0x0547, r24
    351a:	e0 93 48 05 	sts	0x0548, r30
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    351e:	20 91 78 00 	lds	r18, 0x0078
    3522:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    3524:	40 91 79 00 	lds	r20, 0x0079
    3528:	94 2f       	mov	r25, r20
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	28 2b       	or	r18, r24
    352e:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3530:	80 91 c1 03 	lds	r24, 0x03C1
    3534:	82 30       	cpi	r24, 0x02	; 2
    3536:	09 f4       	brne	.+2      	; 0x353a <__vector_29+0xc8>
    3538:	ab c1       	rjmp	.+854    	; 0x3890 <__vector_29+0x41e>
    353a:	83 30       	cpi	r24, 0x03	; 3
    353c:	08 f4       	brcc	.+2      	; 0x3540 <__vector_29+0xce>
    353e:	44 c0       	rjmp	.+136    	; 0x35c8 <__vector_29+0x156>
    3540:	83 30       	cpi	r24, 0x03	; 3
    3542:	09 f4       	brne	.+2      	; 0x3546 <__vector_29+0xd4>
    3544:	c8 c1       	rjmp	.+912    	; 0x38d6 <__vector_29+0x464>
    3546:	84 30       	cpi	r24, 0x04	; 4
    3548:	09 f4       	brne	.+2      	; 0x354c <__vector_29+0xda>
    354a:	67 c1       	rjmp	.+718    	; 0x381a <__vector_29+0x3a8>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    354c:	80 91 c2 03 	lds	r24, 0x03C2
    3550:	82 30       	cpi	r24, 0x02	; 2
    3552:	09 f4       	brne	.+2      	; 0x3556 <__vector_29+0xe4>
    3554:	4e c1       	rjmp	.+668    	; 0x37f2 <__vector_29+0x380>
    3556:	83 30       	cpi	r24, 0x03	; 3
    3558:	08 f0       	brcs	.+2      	; 0x355c <__vector_29+0xea>
    355a:	cc c0       	rjmp	.+408    	; 0x36f4 <__vector_29+0x282>
    355c:	88 23       	and	r24, r24
    355e:	09 f0       	breq	.+2      	; 0x3562 <__vector_29+0xf0>
    3560:	23 c1       	rjmp	.+582    	; 0x37a8 <__vector_29+0x336>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    3562:	80 91 2c 03 	lds	r24, 0x032C
    3566:	86 95       	lsr	r24
    3568:	80 93 2b 03 	sts	0x032B, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    356c:	80 91 c3 03 	lds	r24, 0x03C3
    3570:	88 23       	and	r24, r24
    3572:	09 f0       	breq	.+2      	; 0x3576 <__vector_29+0x104>
    3574:	e0 c1       	rjmp	.+960    	; 0x3936 <__vector_29+0x4c4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	80 93 c1 03 	sts	0x03C1, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	80 93 c2 03 	sts	0x03C2, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    3582:	90 91 2b 03 	lds	r25, 0x032B
    3586:	98 30       	cpi	r25, 0x08	; 8
    3588:	08 f0       	brcs	.+2      	; 0x358c <__vector_29+0x11a>
    358a:	ec c0       	rjmp	.+472    	; 0x3764 <__vector_29+0x2f2>
		ADCSRB &= ~(1 << MUX5);
    358c:	90 91 7b 00 	lds	r25, 0x007B
    3590:	97 7f       	andi	r25, 0xF7	; 247
    3592:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    3596:	90 91 2b 03 	lds	r25, 0x032B
    359a:	90 5c       	subi	r25, 0xC0	; 192
    359c:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    35a0:	82 30       	cpi	r24, 0x02	; 2
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <__vector_29+0x134>
    35a4:	ec c0       	rjmp	.+472    	; 0x377e <__vector_29+0x30c>

	}

	//LED_BLUE_OFF;

}
    35a6:	ff 91       	pop	r31
    35a8:	ef 91       	pop	r30
    35aa:	9f 91       	pop	r25
    35ac:	8f 91       	pop	r24
    35ae:	7f 91       	pop	r23
    35b0:	6f 91       	pop	r22
    35b2:	5f 91       	pop	r21
    35b4:	4f 91       	pop	r20
    35b6:	3f 91       	pop	r19
    35b8:	2f 91       	pop	r18
    35ba:	0f 90       	pop	r0
    35bc:	0b be       	out	0x3b, r0	; 59
    35be:	0f 90       	pop	r0
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	0f 90       	pop	r0
    35c4:	1f 90       	pop	r1
    35c6:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    35c8:	88 23       	and	r24, r24
    35ca:	09 f0       	breq	.+2      	; 0x35ce <__vector_29+0x15c>
    35cc:	fe c0       	rjmp	.+508    	; 0x37ca <__vector_29+0x358>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    35ce:	60 91 2c 03 	lds	r22, 0x032C
    35d2:	6e 30       	cpi	r22, 0x0E	; 14
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <__vector_29+0x166>
    35d6:	d0 c1       	rjmp	.+928    	; 0x3978 <__vector_29+0x506>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    35d8:	46 2f       	mov	r20, r22
    35da:	50 e0       	ldi	r21, 0x00	; 0
    35dc:	fa 01       	movw	r30, r20
    35de:	ee 0f       	add	r30, r30
    35e0:	ff 1f       	adc	r31, r31
    35e2:	ef 5c       	subi	r30, 0xCF	; 207
    35e4:	fc 4f       	sbci	r31, 0xFC	; 252
    35e6:	31 83       	std	Z+1, r19	; 0x01
    35e8:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    35ea:	40 ff       	sbrs	r20, 0
    35ec:	77 c0       	rjmp	.+238    	; 0x36dc <__vector_29+0x26a>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    35ee:	fa 01       	movw	r30, r20
    35f0:	ee 0f       	add	r30, r30
    35f2:	ff 1f       	adc	r31, r31
    35f4:	e1 5d       	subi	r30, 0xD1	; 209
    35f6:	fc 4f       	sbci	r31, 0xFC	; 252
    35f8:	80 81       	ld	r24, Z
    35fa:	91 81       	ldd	r25, Z+1	; 0x01
    35fc:	fa 01       	movw	r30, r20
    35fe:	ee 0f       	add	r30, r30
    3600:	ff 1f       	adc	r31, r31
    3602:	ef 5c       	subi	r30, 0xCF	; 207
    3604:	fc 4f       	sbci	r31, 0xFC	; 252
    3606:	40 81       	ld	r20, Z
    3608:	51 81       	ldd	r21, Z+1	; 0x01
    360a:	26 2f       	mov	r18, r22
    360c:	26 95       	lsr	r18
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	84 1b       	sub	r24, r20
    3612:	95 0b       	sbc	r25, r21
    3614:	22 0f       	add	r18, r18
    3616:	33 1f       	adc	r19, r19
    3618:	f9 01       	movw	r30, r18
    361a:	e7 58       	subi	r30, 0x87	; 135
    361c:	fc 4f       	sbci	r31, 0xFC	; 252
    361e:	40 81       	ld	r20, Z
    3620:	51 81       	ldd	r21, Z+1	; 0x01
    3622:	84 1b       	sub	r24, r20
    3624:	95 0b       	sbc	r25, r21
    3626:	f9 01       	movw	r30, r18
    3628:	ef 59       	subi	r30, 0x9F	; 159
    362a:	fc 4f       	sbci	r31, 0xFC	; 252
    362c:	91 83       	std	Z+1, r25	; 0x01
    362e:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    3630:	97 fd       	sbrc	r25, 7
    3632:	bd c1       	rjmp	.+890    	; 0x39ae <__vector_29+0x53c>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    3634:	44 e0       	ldi	r20, 0x04	; 4
    3636:	81 30       	cpi	r24, 0x01	; 1
    3638:	94 07       	cpc	r25, r20
    363a:	24 f0       	brlt	.+8      	; 0x3644 <__vector_29+0x1d2>
					proximityResult[currentProx>>1] = 1024;
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	94 e0       	ldi	r25, 0x04	; 4
    3640:	91 83       	std	Z+1, r25	; 0x01
    3642:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    3644:	60 31       	cpi	r22, 0x10	; 16
    3646:	48 f4       	brcc	.+18     	; 0x365a <__vector_29+0x1e8>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    3648:	8c 33       	cpi	r24, 0x3C	; 60
    364a:	91 05       	cpc	r25, r1
    364c:	0c f0       	brlt	.+2      	; 0x3650 <__vector_29+0x1de>
    364e:	b4 c1       	rjmp	.+872    	; 0x39b8 <__vector_29+0x546>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    3650:	27 53       	subi	r18, 0x37	; 55
    3652:	3c 4f       	sbci	r19, 0xFC	; 252
    3654:	f9 01       	movw	r30, r18
    3656:	91 83       	std	Z+1, r25	; 0x01
    3658:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    365a:	80 91 63 05 	lds	r24, 0x0563
    365e:	88 23       	and	r24, r24
    3660:	09 f4       	brne	.+2      	; 0x3664 <__vector_29+0x1f2>
    3662:	75 c1       	rjmp	.+746    	; 0x394e <__vector_29+0x4dc>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3664:	80 91 71 03 	lds	r24, 0x0371
    3668:	90 91 72 03 	lds	r25, 0x0372
    366c:	f1 e0       	ldi	r31, 0x01	; 1
    366e:	84 3a       	cpi	r24, 0xA4	; 164
    3670:	9f 07       	cpc	r25, r31
    3672:	cc f0       	brlt	.+50     	; 0x36a6 <__vector_29+0x234>
    3674:	80 91 73 03 	lds	r24, 0x0373
    3678:	90 91 74 03 	lds	r25, 0x0374
    367c:	21 e0       	ldi	r18, 0x01	; 1
    367e:	84 3a       	cpi	r24, 0xA4	; 164
    3680:	92 07       	cpc	r25, r18
    3682:	8c f0       	brlt	.+34     	; 0x36a6 <__vector_29+0x234>
    3684:	80 91 75 03 	lds	r24, 0x0375
    3688:	90 91 76 03 	lds	r25, 0x0376
    368c:	41 e0       	ldi	r20, 0x01	; 1
    368e:	84 3a       	cpi	r24, 0xA4	; 164
    3690:	94 07       	cpc	r25, r20
    3692:	4c f0       	brlt	.+18     	; 0x36a6 <__vector_29+0x234>
    3694:	80 91 77 03 	lds	r24, 0x0377
    3698:	90 91 78 03 	lds	r25, 0x0378
    369c:	e1 e0       	ldi	r30, 0x01	; 1
    369e:	84 3a       	cpi	r24, 0xA4	; 164
    36a0:	9e 07       	cpc	r25, r30
    36a2:	0c f0       	brlt	.+2      	; 0x36a6 <__vector_29+0x234>
    36a4:	54 c1       	rjmp	.+680    	; 0x394e <__vector_29+0x4dc>
						cliffDetectedFlag = 1;
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	80 93 64 05 	sts	0x0564, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    36ac:	10 92 f8 03 	sts	0x03F8, r1
    36b0:	10 92 f7 03 	sts	0x03F7, r1
						OCR4A = 0;
    36b4:	10 92 a9 00 	sts	0x00A9, r1
    36b8:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    36bc:	10 92 ab 00 	sts	0x00AB, r1
    36c0:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    36c4:	10 92 f6 03 	sts	0x03F6, r1
    36c8:	10 92 f5 03 	sts	0x03F5, r1
						OCR3A = 0;
    36cc:	10 92 99 00 	sts	0x0099, r1
    36d0:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    36d4:	10 92 9b 00 	sts	0x009B, r1
    36d8:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    36dc:	6f 5f       	subi	r22, 0xFF	; 255
    36de:	60 93 2c 03 	sts	0x032C, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    36e2:	68 31       	cpi	r22, 0x18	; 24
    36e4:	08 f4       	brcc	.+2      	; 0x36e8 <__vector_29+0x276>
    36e6:	32 cf       	rjmp	.-412    	; 0x354c <__vector_29+0xda>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    36e8:	10 92 2c 03 	sts	0x032C, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	80 93 c8 03 	sts	0x03C8, r24
    36f2:	2c cf       	rjmp	.-424    	; 0x354c <__vector_29+0xda>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    36f4:	83 30       	cpi	r24, 0x03	; 3
    36f6:	09 f4       	brne	.+2      	; 0x36fa <__vector_29+0x288>
    36f8:	b7 c0       	rjmp	.+366    	; 0x3868 <__vector_29+0x3f6>
    36fa:	84 30       	cpi	r24, 0x04	; 4
    36fc:	09 f0       	breq	.+2      	; 0x3700 <__vector_29+0x28e>
    36fe:	41 cf       	rjmp	.-382    	; 0x3582 <__vector_29+0x110>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    3700:	90 91 2e 03 	lds	r25, 0x032E
    3704:	90 93 2b 03 	sts	0x032B, r25
			rightChannelPhase = rightMotorPhase;
    3708:	90 91 2f 03 	lds	r25, 0x032F
    370c:	90 93 c3 03 	sts	0x03C3, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    3710:	90 91 c4 03 	lds	r25, 0x03C4
    3714:	99 23       	and	r25, r25
    3716:	09 f0       	breq	.+2      	; 0x371a <__vector_29+0x2a8>
    3718:	08 c1       	rjmp	.+528    	; 0x392a <__vector_29+0x4b8>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    371a:	83 e0       	ldi	r24, 0x03	; 3
    371c:	80 93 c1 03 	sts	0x03C1, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    3720:	10 92 c2 03 	sts	0x03C2, r1

			if(currentProx==14 && measBattery==1) {
    3724:	60 91 2c 03 	lds	r22, 0x032C
    3728:	6e 30       	cpi	r22, 0x0E	; 14
    372a:	09 f4       	brne	.+2      	; 0x372e <__vector_29+0x2bc>
    372c:	1f c1       	rjmp	.+574    	; 0x396c <__vector_29+0x4fa>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    372e:	86 2f       	mov	r24, r22
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	60 ff       	sbrs	r22, 0
    3734:	f1 c0       	rjmp	.+482    	; 0x3918 <__vector_29+0x4a6>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    3736:	60 31       	cpi	r22, 0x10	; 16
    3738:	08 f4       	brcc	.+2      	; 0x373c <__vector_29+0x2ca>
    373a:	0c c1       	rjmp	.+536    	; 0x3954 <__vector_29+0x4e2>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    373c:	20 91 4c 05 	lds	r18, 0x054C
    3740:	22 23       	and	r18, r18
    3742:	09 f0       	breq	.+2      	; 0x3746 <__vector_29+0x2d4>
    3744:	d5 c0       	rjmp	.+426    	; 0x38f0 <__vector_29+0x47e>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    3746:	40 97       	sbiw	r24, 0x10	; 16
    3748:	95 95       	asr	r25
    374a:	87 95       	ror	r24
    374c:	21 e0       	ldi	r18, 0x01	; 1
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	02 c0       	rjmp	.+4      	; 0x3756 <__vector_29+0x2e4>
    3752:	22 0f       	add	r18, r18
    3754:	33 1f       	adc	r19, r19
    3756:	8a 95       	dec	r24
    3758:	e2 f7       	brpl	.-8      	; 0x3752 <__vector_29+0x2e0>
    375a:	20 93 05 01 	sts	0x0105, r18
    375e:	80 91 c2 03 	lds	r24, 0x03C2
    3762:	0f cf       	rjmp	.-482    	; 0x3582 <__vector_29+0x110>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    3764:	90 91 7b 00 	lds	r25, 0x007B
    3768:	98 60       	ori	r25, 0x08	; 8
    376a:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    376e:	90 91 2b 03 	lds	r25, 0x032B
    3772:	98 5c       	subi	r25, 0xC8	; 200
    3774:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3778:	82 30       	cpi	r24, 0x02	; 2
    377a:	09 f0       	breq	.+2      	; 0x377e <__vector_29+0x30c>
    377c:	14 cf       	rjmp	.-472    	; 0x35a6 <__vector_29+0x134>

		if(hardwareRevision == HW_REV_3_0) {
    377e:	20 91 4c 05 	lds	r18, 0x054C
    3782:	22 23       	and	r18, r18
    3784:	51 f0       	breq	.+20     	; 0x379a <__vector_29+0x328>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    3786:	21 30       	cpi	r18, 0x01	; 1
    3788:	19 f0       	breq	.+6      	; 0x3790 <__vector_29+0x31e>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    378a:	22 30       	cpi	r18, 0x02	; 2
    378c:	09 f0       	breq	.+2      	; 0x3790 <__vector_29+0x31e>
    378e:	0b cf       	rjmp	.-490    	; 0x35a6 <__vector_29+0x134>
			PORTJ = 0xFF;
    3790:	8f ef       	ldi	r24, 0xFF	; 255
    3792:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    3796:	12 b8       	out	0x02, r1	; 2
    3798:	06 cf       	rjmp	.-500    	; 0x35a6 <__vector_29+0x134>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    379a:	80 91 05 01 	lds	r24, 0x0105
    379e:	80 7f       	andi	r24, 0xF0	; 240
    37a0:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    37a4:	12 b8       	out	0x02, r1	; 2
    37a6:	ff ce       	rjmp	.-514    	; 0x35a6 <__vector_29+0x134>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    37a8:	81 30       	cpi	r24, 0x01	; 1
    37aa:	09 f0       	breq	.+2      	; 0x37ae <__vector_29+0x33c>
    37ac:	ea ce       	rjmp	.-556    	; 0x3582 <__vector_29+0x110>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    37ae:	80 91 2d 03 	lds	r24, 0x032D
    37b2:	80 93 2b 03 	sts	0x032B, r24
			leftChannelPhase = leftMotorPhase;
    37b6:	80 91 30 03 	lds	r24, 0x0330
    37ba:	80 93 c4 03 	sts	0x03C4, r24
			adcSaveDataTo = SAVE_TO_PROX;
    37be:	10 92 c1 03 	sts	0x03C1, r1
			adcSamplingState = 2;
    37c2:	82 e0       	ldi	r24, 0x02	; 2
    37c4:	80 93 c2 03 	sts	0x03C2, r24
			break;
    37c8:	dc ce       	rjmp	.-584    	; 0x3582 <__vector_29+0x110>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    37ca:	81 30       	cpi	r24, 0x01	; 1
    37cc:	09 f0       	breq	.+2      	; 0x37d0 <__vector_29+0x35e>
    37ce:	be ce       	rjmp	.-644    	; 0x354c <__vector_29+0xda>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    37d0:	80 91 e3 03 	lds	r24, 0x03E3
    37d4:	90 91 e4 03 	lds	r25, 0x03E4
    37d8:	82 0f       	add	r24, r18
    37da:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    37dc:	96 95       	lsr	r25
    37de:	87 95       	ror	r24
    37e0:	90 93 e4 03 	sts	0x03E4, r25
    37e4:	80 93 e3 03 	sts	0x03E3, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    37e8:	80 91 c2 03 	lds	r24, 0x03C2
    37ec:	82 30       	cpi	r24, 0x02	; 2
    37ee:	09 f0       	breq	.+2      	; 0x37f2 <__vector_29+0x380>
    37f0:	b2 ce       	rjmp	.-668    	; 0x3556 <__vector_29+0xe4>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    37f2:	80 91 2e 03 	lds	r24, 0x032E
    37f6:	80 93 2b 03 	sts	0x032B, r24
			rightChannelPhase = rightMotorPhase;
    37fa:	80 91 2f 03 	lds	r24, 0x032F
    37fe:	80 93 c3 03 	sts	0x03C3, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3802:	80 91 c4 03 	lds	r24, 0x03C4
    3806:	88 23       	and	r24, r24
    3808:	09 f0       	breq	.+2      	; 0x380c <__vector_29+0x39a>
    380a:	9b c0       	rjmp	.+310    	; 0x3942 <__vector_29+0x4d0>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    380c:	83 e0       	ldi	r24, 0x03	; 3
    380e:	80 93 c1 03 	sts	0x03C1, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3812:	83 e0       	ldi	r24, 0x03	; 3
    3814:	80 93 c2 03 	sts	0x03C2, r24
			break;
    3818:	b4 ce       	rjmp	.-664    	; 0x3582 <__vector_29+0x110>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    381a:	80 91 0a 02 	lds	r24, 0x020A
    381e:	88 23       	and	r24, r24
    3820:	09 f4       	brne	.+2      	; 0x3824 <__vector_29+0x3b2>
    3822:	94 ce       	rjmp	.-728    	; 0x354c <__vector_29+0xda>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    3824:	90 91 00 01 	lds	r25, 0x0100
    3828:	93 fd       	sbrc	r25, 3
    382a:	90 ce       	rjmp	.-736    	; 0x354c <__vector_29+0xda>
    382c:	90 91 00 01 	lds	r25, 0x0100
    3830:	94 fd       	sbrc	r25, 4
    3832:	8c ce       	rjmp	.-744    	; 0x354c <__vector_29+0xda>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    3834:	48 2f       	mov	r20, r24
    3836:	4f 5f       	subi	r20, 0xFF	; 255
    3838:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    383c:	45 30       	cpi	r20, 0x05	; 5
    383e:	08 f4       	brcc	.+2      	; 0x3842 <__vector_29+0x3d0>
    3840:	85 ce       	rjmp	.-758    	; 0x354c <__vector_29+0xda>
					left_vel_sum += value;
    3842:	80 91 ed 03 	lds	r24, 0x03ED
    3846:	90 91 ee 03 	lds	r25, 0x03EE
    384a:	82 0f       	add	r24, r18
    384c:	93 1f       	adc	r25, r19
    384e:	90 93 ee 03 	sts	0x03EE, r25
    3852:	80 93 ed 03 	sts	0x03ED, r24
					if(firstSampleLeft==8) {
    3856:	48 30       	cpi	r20, 0x08	; 8
    3858:	09 f0       	breq	.+2      	; 0x385c <__vector_29+0x3ea>
    385a:	78 ce       	rjmp	.-784    	; 0x354c <__vector_29+0xda>
						firstSampleLeft = 0;
    385c:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	80 93 07 02 	sts	0x0207, r24
    3866:	72 ce       	rjmp	.-796    	; 0x354c <__vector_29+0xda>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    3868:	80 91 2d 03 	lds	r24, 0x032D
    386c:	80 93 2b 03 	sts	0x032B, r24
			leftChannelPhase = leftMotorPhase;
    3870:	80 91 30 03 	lds	r24, 0x0330
    3874:	80 93 c4 03 	sts	0x03C4, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    3878:	80 91 c3 03 	lds	r24, 0x03C3
    387c:	88 23       	and	r24, r24
    387e:	09 f0       	breq	.+2      	; 0x3882 <__vector_29+0x410>
    3880:	4e c0       	rjmp	.+156    	; 0x391e <__vector_29+0x4ac>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	80 93 c1 03 	sts	0x03C1, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    3888:	84 e0       	ldi	r24, 0x04	; 4
    388a:	80 93 c2 03 	sts	0x03C2, r24
			break;
    388e:	79 ce       	rjmp	.-782    	; 0x3582 <__vector_29+0x110>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    3890:	80 91 09 02 	lds	r24, 0x0209
    3894:	88 23       	and	r24, r24
    3896:	09 f4       	brne	.+2      	; 0x389a <__vector_29+0x428>
    3898:	59 ce       	rjmp	.-846    	; 0x354c <__vector_29+0xda>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    389a:	63 99       	sbic	0x0c, 3	; 12
    389c:	57 ce       	rjmp	.-850    	; 0x354c <__vector_29+0xda>
    389e:	64 99       	sbic	0x0c, 4	; 12
    38a0:	55 ce       	rjmp	.-854    	; 0x354c <__vector_29+0xda>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    38a2:	48 2f       	mov	r20, r24
    38a4:	4f 5f       	subi	r20, 0xFF	; 255
    38a6:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    38aa:	45 30       	cpi	r20, 0x05	; 5
    38ac:	08 f4       	brcc	.+2      	; 0x38b0 <__vector_29+0x43e>
    38ae:	4e ce       	rjmp	.-868    	; 0x354c <__vector_29+0xda>
					right_vel_sum += value;
    38b0:	80 91 ef 03 	lds	r24, 0x03EF
    38b4:	90 91 f0 03 	lds	r25, 0x03F0
    38b8:	82 0f       	add	r24, r18
    38ba:	93 1f       	adc	r25, r19
    38bc:	90 93 f0 03 	sts	0x03F0, r25
    38c0:	80 93 ef 03 	sts	0x03EF, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    38c4:	48 30       	cpi	r20, 0x08	; 8
    38c6:	09 f0       	breq	.+2      	; 0x38ca <__vector_29+0x458>
    38c8:	41 ce       	rjmp	.-894    	; 0x354c <__vector_29+0xda>
						firstSampleRight = 0;
    38ca:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	80 93 08 02 	sts	0x0208, r24
    38d4:	3b ce       	rjmp	.-906    	; 0x354c <__vector_29+0xda>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    38d6:	80 91 e1 03 	lds	r24, 0x03E1
    38da:	90 91 e2 03 	lds	r25, 0x03E2
    38de:	82 0f       	add	r24, r18
    38e0:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    38e2:	96 95       	lsr	r25
    38e4:	87 95       	ror	r24
    38e6:	90 93 e2 03 	sts	0x03E2, r25
    38ea:	80 93 e1 03 	sts	0x03E1, r24
			break;
    38ee:	2e ce       	rjmp	.-932    	; 0x354c <__vector_29+0xda>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    38f0:	21 30       	cpi	r18, 0x01	; 1
    38f2:	11 f0       	breq	.+4      	; 0x38f8 <__vector_29+0x486>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    38f4:	22 30       	cpi	r18, 0x02	; 2
    38f6:	81 f4       	brne	.+32     	; 0x3918 <__vector_29+0x4a6>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    38f8:	40 91 05 01 	lds	r20, 0x0105
    38fc:	40 97       	sbiw	r24, 0x10	; 16
    38fe:	95 95       	asr	r25
    3900:	87 95       	ror	r24
    3902:	21 e0       	ldi	r18, 0x01	; 1
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	02 c0       	rjmp	.+4      	; 0x390c <__vector_29+0x49a>
    3908:	22 0f       	add	r18, r18
    390a:	33 1f       	adc	r19, r19
    390c:	8a 95       	dec	r24
    390e:	e2 f7       	brpl	.-8      	; 0x3908 <__vector_29+0x496>
    3910:	20 95       	com	r18
    3912:	24 23       	and	r18, r20
    3914:	20 93 05 01 	sts	0x0105, r18
    3918:	80 91 c2 03 	lds	r24, 0x03C2
    391c:	32 ce       	rjmp	.-924    	; 0x3582 <__vector_29+0x110>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    391e:	81 30       	cpi	r24, 0x01	; 1
    3920:	d1 f1       	breq	.+116    	; 0x3996 <__vector_29+0x524>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3922:	85 e0       	ldi	r24, 0x05	; 5
    3924:	80 93 c1 03 	sts	0x03C1, r24
    3928:	af cf       	rjmp	.-162    	; 0x3888 <__vector_29+0x416>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    392a:	91 30       	cpi	r25, 0x01	; 1
    392c:	09 f0       	breq	.+2      	; 0x3930 <__vector_29+0x4be>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    392e:	85 e0       	ldi	r24, 0x05	; 5
    3930:	80 93 c1 03 	sts	0x03C1, r24
    3934:	f5 ce       	rjmp	.-534    	; 0x3720 <__vector_29+0x2ae>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3936:	81 30       	cpi	r24, 0x01	; 1
    3938:	b1 f1       	breq	.+108    	; 0x39a6 <__vector_29+0x534>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    393a:	85 e0       	ldi	r24, 0x05	; 5
    393c:	80 93 c1 03 	sts	0x03C1, r24
    3940:	1d ce       	rjmp	.-966    	; 0x357c <__vector_29+0x10a>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3942:	81 30       	cpi	r24, 0x01	; 1
    3944:	61 f1       	breq	.+88     	; 0x399e <__vector_29+0x52c>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3946:	85 e0       	ldi	r24, 0x05	; 5
    3948:	80 93 c1 03 	sts	0x03C1, r24
    394c:	62 cf       	rjmp	.-316    	; 0x3812 <__vector_29+0x3a0>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    394e:	10 92 64 05 	sts	0x0564, r1
    3952:	c4 ce       	rjmp	.-632    	; 0x36dc <__vector_29+0x26a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    3954:	66 95       	lsr	r22
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	02 c0       	rjmp	.+4      	; 0x3960 <__vector_29+0x4ee>
    395c:	88 0f       	add	r24, r24
    395e:	99 1f       	adc	r25, r25
    3960:	6a 95       	dec	r22
    3962:	e2 f7       	brpl	.-8      	; 0x395c <__vector_29+0x4ea>
    3964:	82 b9       	out	0x02, r24	; 2
    3966:	80 91 c2 03 	lds	r24, 0x03C2
    396a:	0b ce       	rjmp	.-1002   	; 0x3582 <__vector_29+0x110>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    396c:	80 91 c7 03 	lds	r24, 0x03C7
    3970:	81 30       	cpi	r24, 0x01	; 1
    3972:	a1 f1       	breq	.+104    	; 0x39dc <__vector_29+0x56a>
    3974:	80 e0       	ldi	r24, 0x00	; 0
    3976:	05 ce       	rjmp	.-1014   	; 0x3582 <__vector_29+0x110>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3978:	80 91 c7 03 	lds	r24, 0x03C7
    397c:	82 30       	cpi	r24, 0x02	; 2
    397e:	09 f0       	breq	.+2      	; 0x3982 <__vector_29+0x510>
    3980:	2b ce       	rjmp	.-938    	; 0x35d8 <__vector_29+0x166>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    3982:	30 93 c6 03 	sts	0x03C6, r19
    3986:	20 93 c5 03 	sts	0x03C5, r18
				measBattery = 0;
    398a:	10 92 c7 03 	sts	0x03C7, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    398e:	46 98       	cbi	0x08, 6	; 8
    3990:	4e e0       	ldi	r20, 0x0E	; 14
    3992:	50 e0       	ldi	r21, 0x00	; 0
    3994:	2a ce       	rjmp	.-940    	; 0x35ea <__vector_29+0x178>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3996:	82 e0       	ldi	r24, 0x02	; 2
    3998:	80 93 c1 03 	sts	0x03C1, r24
    399c:	75 cf       	rjmp	.-278    	; 0x3888 <__vector_29+0x416>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    399e:	84 e0       	ldi	r24, 0x04	; 4
    39a0:	80 93 c1 03 	sts	0x03C1, r24
    39a4:	36 cf       	rjmp	.-404    	; 0x3812 <__vector_29+0x3a0>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    39a6:	82 e0       	ldi	r24, 0x02	; 2
    39a8:	80 93 c1 03 	sts	0x03C1, r24
    39ac:	e7 cd       	rjmp	.-1074   	; 0x357c <__vector_29+0x10a>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    39ae:	11 82       	std	Z+1, r1	; 0x01
    39b0:	10 82       	st	Z, r1
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	46 ce       	rjmp	.-884    	; 0x3644 <__vector_29+0x1d2>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    39b8:	ac 01       	movw	r20, r24
    39ba:	44 5c       	subi	r20, 0xC4	; 196
    39bc:	5f 4f       	sbci	r21, 0xFF	; 255
    39be:	55 95       	asr	r21
    39c0:	47 95       	ror	r20
    39c2:	48 37       	cpi	r20, 0x78	; 120
    39c4:	51 05       	cpc	r21, r1
    39c6:	7c f4       	brge	.+30     	; 0x39e6 <__vector_29+0x574>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    39c8:	27 53       	subi	r18, 0x37	; 55
    39ca:	3c 4f       	sbci	r19, 0xFC	; 252
    39cc:	cc 97       	sbiw	r24, 0x3c	; 60
    39ce:	95 95       	asr	r25
    39d0:	87 95       	ror	r24
    39d2:	cc 96       	adiw	r24, 0x3c	; 60
    39d4:	f9 01       	movw	r30, r18
    39d6:	91 83       	std	Z+1, r25	; 0x01
    39d8:	80 83       	st	Z, r24
    39da:	3f ce       	rjmp	.-898    	; 0x365a <__vector_29+0x1e8>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    39dc:	82 e0       	ldi	r24, 0x02	; 2
    39de:	80 93 c7 03 	sts	0x03C7, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    39e2:	46 9a       	sbi	0x08, 6	; 8
    39e4:	a4 ce       	rjmp	.-696    	; 0x372e <__vector_29+0x2bc>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    39e6:	ac 01       	movw	r20, r24
    39e8:	44 5d       	subi	r20, 0xD4	; 212
    39ea:	5e 4f       	sbci	r21, 0xFE	; 254
    39ec:	55 95       	asr	r21
    39ee:	47 95       	ror	r20
    39f0:	55 95       	asr	r21
    39f2:	47 95       	ror	r20
    39f4:	44 3b       	cpi	r20, 0xB4	; 180
    39f6:	51 05       	cpc	r21, r1
    39f8:	74 f4       	brge	.+28     	; 0x3a16 <__vector_29+0x5a4>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    39fa:	27 53       	subi	r18, 0x37	; 55
    39fc:	3c 4f       	sbci	r19, 0xFC	; 252
    39fe:	84 5b       	subi	r24, 0xB4	; 180
    3a00:	90 40       	sbci	r25, 0x00	; 0
    3a02:	95 95       	asr	r25
    3a04:	87 95       	ror	r24
    3a06:	95 95       	asr	r25
    3a08:	87 95       	ror	r24
    3a0a:	88 58       	subi	r24, 0x88	; 136
    3a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0e:	f9 01       	movw	r30, r18
    3a10:	91 83       	std	Z+1, r25	; 0x01
    3a12:	80 83       	st	Z, r24
    3a14:	22 ce       	rjmp	.-956    	; 0x365a <__vector_29+0x1e8>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    3a16:	27 53       	subi	r18, 0x37	; 55
    3a18:	3c 4f       	sbci	r19, 0xFC	; 252
    3a1a:	84 5a       	subi	r24, 0xA4	; 164
    3a1c:	91 40       	sbci	r25, 0x01	; 1
    3a1e:	95 95       	asr	r25
    3a20:	87 95       	ror	r24
    3a22:	95 95       	asr	r25
    3a24:	87 95       	ror	r24
    3a26:	95 95       	asr	r25
    3a28:	87 95       	ror	r24
    3a2a:	8c 54       	subi	r24, 0x4C	; 76
    3a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2e:	f9 01       	movw	r30, r18
    3a30:	91 83       	std	Z+1, r25	; 0x01
    3a32:	80 83       	st	Z, r24
    3a34:	12 ce       	rjmp	.-988    	; 0x365a <__vector_29+0x1e8>

00003a36 <initMotors>:

#include "motors.h"

void initMotors() {
    3a36:	0f 93       	push	r16
    3a38:	1f 93       	push	r17
    3a3a:	cf 93       	push	r28
    3a3c:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    3a3e:	e0 e9       	ldi	r30, 0x90	; 144
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	10 82       	st	Z, r1
	TCCR3B = 0;
    3a44:	41 e9       	ldi	r20, 0x91	; 145
    3a46:	50 e0       	ldi	r21, 0x00	; 0
    3a48:	da 01       	movw	r26, r20
    3a4a:	1c 92       	st	X, r1
	TIMSK3 = 0;
    3a4c:	21 e7       	ldi	r18, 0x71	; 113
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	e9 01       	movw	r28, r18
    3a52:	18 82       	st	Y, r1
	TCCR4A = 0;
    3a54:	a0 ea       	ldi	r26, 0xA0	; 160
    3a56:	b0 e0       	ldi	r27, 0x00	; 0
    3a58:	1c 92       	st	X, r1
	TCCR4B = 0;
    3a5a:	81 ea       	ldi	r24, 0xA1	; 161
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	ec 01       	movw	r28, r24
    3a60:	18 82       	st	Y, r1
	TIMSK4 = 0;
    3a62:	02 e7       	ldi	r16, 0x72	; 114
    3a64:	10 e0       	ldi	r17, 0x00	; 0
    3a66:	e8 01       	movw	r28, r16
    3a68:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    3a6a:	60 81       	ld	r22, Z
    3a6c:	63 68       	ori	r22, 0x83	; 131
    3a6e:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    3a70:	60 81       	ld	r22, Z
    3a72:	63 60       	ori	r22, 0x03	; 3
    3a74:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3a76:	ea 01       	movw	r28, r20
    3a78:	68 81       	ld	r22, Y
    3a7a:	6b 60       	ori	r22, 0x0B	; 11
    3a7c:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    3a7e:	40 91 f5 03 	lds	r20, 0x03F5
    3a82:	50 91 f6 03 	lds	r21, 0x03F6
    3a86:	50 93 99 00 	sts	0x0099, r21
    3a8a:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    3a8e:	10 92 9b 00 	sts	0x009B, r1
    3a92:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    3a96:	e9 01       	movw	r28, r18
    3a98:	48 81       	ld	r20, Y
    3a9a:	41 60       	ori	r20, 0x01	; 1
    3a9c:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3a9e:	20 81       	ld	r18, Z
    3aa0:	2f 75       	andi	r18, 0x5F	; 95
    3aa2:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3aa4:	2e b1       	in	r18, 0x0e	; 14
    3aa6:	27 7e       	andi	r18, 0xE7	; 231
    3aa8:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    3aaa:	2c 91       	ld	r18, X
    3aac:	23 68       	ori	r18, 0x83	; 131
    3aae:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3ab0:	fc 01       	movw	r30, r24
    3ab2:	20 81       	ld	r18, Z
    3ab4:	2b 60       	ori	r18, 0x0B	; 11
    3ab6:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    3ab8:	80 91 f7 03 	lds	r24, 0x03F7
    3abc:	90 91 f8 03 	lds	r25, 0x03F8
    3ac0:	90 93 a9 00 	sts	0x00A9, r25
    3ac4:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    3ac8:	10 92 ab 00 	sts	0x00AB, r1
    3acc:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    3ad0:	e8 01       	movw	r28, r16
    3ad2:	88 81       	ld	r24, Y
    3ad4:	81 60       	ori	r24, 0x01	; 1
    3ad6:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3ad8:	8c 91       	ld	r24, X
    3ada:	8f 75       	andi	r24, 0x5F	; 95
    3adc:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3ade:	e2 e0       	ldi	r30, 0x02	; 2
    3ae0:	f1 e0       	ldi	r31, 0x01	; 1
    3ae2:	80 81       	ld	r24, Z
    3ae4:	87 7e       	andi	r24, 0xE7	; 231
    3ae6:	80 83       	st	Z, r24


}
    3ae8:	df 91       	pop	r29
    3aea:	cf 91       	pop	r28
    3aec:	1f 91       	pop	r17
    3aee:	0f 91       	pop	r16
    3af0:	08 95       	ret

00003af2 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    3af2:	80 91 07 02 	lds	r24, 0x0207
    3af6:	88 23       	and	r24, r24
    3af8:	b1 f1       	breq	.+108    	; 0x3b66 <handleMotorsWithNoController+0x74>
		last_left_vel = left_vel_sum>>2;
    3afa:	20 91 ed 03 	lds	r18, 0x03ED
    3afe:	30 91 ee 03 	lds	r19, 0x03EE
    3b02:	36 95       	lsr	r19
    3b04:	27 95       	ror	r18
    3b06:	36 95       	lsr	r19
    3b08:	27 95       	ror	r18
    3b0a:	30 93 f2 03 	sts	0x03F2, r19
    3b0e:	20 93 f1 03 	sts	0x03F1, r18
		compute_left_vel = 0;
    3b12:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    3b16:	10 92 ee 03 	sts	0x03EE, r1
    3b1a:	10 92 ed 03 	sts	0x03ED, r1

		if(pwm_left_desired >= 0) {
    3b1e:	80 91 fb 03 	lds	r24, 0x03FB
    3b22:	90 91 fc 03 	lds	r25, 0x03FC
    3b26:	97 fd       	sbrc	r25, 7
    3b28:	d5 c0       	rjmp	.+426    	; 0x3cd4 <handleMotorsWithNoController+0x1e2>
			leftMotSteps += (last_left_vel>>3);
    3b2a:	35 95       	asr	r19
    3b2c:	27 95       	ror	r18
    3b2e:	35 95       	asr	r19
    3b30:	27 95       	ror	r18
    3b32:	35 95       	asr	r19
    3b34:	27 95       	ror	r18
    3b36:	44 27       	eor	r20, r20
    3b38:	37 fd       	sbrc	r19, 7
    3b3a:	40 95       	com	r20
    3b3c:	54 2f       	mov	r21, r20
    3b3e:	80 91 dd 03 	lds	r24, 0x03DD
    3b42:	90 91 de 03 	lds	r25, 0x03DE
    3b46:	a0 91 df 03 	lds	r26, 0x03DF
    3b4a:	b0 91 e0 03 	lds	r27, 0x03E0
    3b4e:	82 0f       	add	r24, r18
    3b50:	93 1f       	adc	r25, r19
    3b52:	a4 1f       	adc	r26, r20
    3b54:	b5 1f       	adc	r27, r21
    3b56:	80 93 dd 03 	sts	0x03DD, r24
    3b5a:	90 93 de 03 	sts	0x03DE, r25
    3b5e:	a0 93 df 03 	sts	0x03DF, r26
    3b62:	b0 93 e0 03 	sts	0x03E0, r27
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    3b66:	80 91 08 02 	lds	r24, 0x0208
    3b6a:	88 23       	and	r24, r24
    3b6c:	b1 f1       	breq	.+108    	; 0x3bda <handleMotorsWithNoController+0xe8>
		last_right_vel = right_vel_sum>>2;
    3b6e:	20 91 ef 03 	lds	r18, 0x03EF
    3b72:	30 91 f0 03 	lds	r19, 0x03F0
    3b76:	36 95       	lsr	r19
    3b78:	27 95       	ror	r18
    3b7a:	36 95       	lsr	r19
    3b7c:	27 95       	ror	r18
    3b7e:	30 93 f4 03 	sts	0x03F4, r19
    3b82:	20 93 f3 03 	sts	0x03F3, r18
		compute_right_vel = 0;
    3b86:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    3b8a:	10 92 f0 03 	sts	0x03F0, r1
    3b8e:	10 92 ef 03 	sts	0x03EF, r1

		if(pwm_right_desired >= 0) {
    3b92:	80 91 f9 03 	lds	r24, 0x03F9
    3b96:	90 91 fa 03 	lds	r25, 0x03FA
    3b9a:	97 fd       	sbrc	r25, 7
    3b9c:	7c c0       	rjmp	.+248    	; 0x3c96 <handleMotorsWithNoController+0x1a4>
			rightMotSteps += (last_right_vel>>3);
    3b9e:	35 95       	asr	r19
    3ba0:	27 95       	ror	r18
    3ba2:	35 95       	asr	r19
    3ba4:	27 95       	ror	r18
    3ba6:	35 95       	asr	r19
    3ba8:	27 95       	ror	r18
    3baa:	44 27       	eor	r20, r20
    3bac:	37 fd       	sbrc	r19, 7
    3bae:	40 95       	com	r20
    3bb0:	54 2f       	mov	r21, r20
    3bb2:	80 91 d9 03 	lds	r24, 0x03D9
    3bb6:	90 91 da 03 	lds	r25, 0x03DA
    3bba:	a0 91 db 03 	lds	r26, 0x03DB
    3bbe:	b0 91 dc 03 	lds	r27, 0x03DC
    3bc2:	82 0f       	add	r24, r18
    3bc4:	93 1f       	adc	r25, r19
    3bc6:	a4 1f       	adc	r26, r20
    3bc8:	b5 1f       	adc	r27, r21
    3bca:	80 93 d9 03 	sts	0x03D9, r24
    3bce:	90 93 da 03 	sts	0x03DA, r25
    3bd2:	a0 93 db 03 	sts	0x03DB, r26
    3bd6:	b0 93 dc 03 	sts	0x03DC, r27
	}


	//pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	//pwm_left_working = pwm_left_desired;
	pwm_right_working = pwm_intermediate_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    3bda:	80 91 fd 03 	lds	r24, 0x03FD
    3bde:	90 91 fe 03 	lds	r25, 0x03FE
    3be2:	90 93 0a 04 	sts	0x040A, r25
    3be6:	80 93 09 04 	sts	0x0409, r24
	pwm_left_working = pwm_intermediate_left_desired;	
    3bea:	20 91 ff 03 	lds	r18, 0x03FF
    3bee:	30 91 00 04 	lds	r19, 0x0400
    3bf2:	30 93 0c 04 	sts	0x040C, r19
    3bf6:	20 93 0b 04 	sts	0x040B, r18
	if(obstacleAvoidanceEnabled) {
    3bfa:	40 91 62 05 	lds	r20, 0x0562
    3bfe:	44 23       	and	r20, r20
    3c00:	79 f5       	brne	.+94     	; 0x3c60 <handleMotorsWithNoController+0x16e>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    3c02:	30 93 ec 03 	sts	0x03EC, r19
    3c06:	20 93 eb 03 	sts	0x03EB, r18
	pwm_right_desired_to_control = pwm_right_working;
    3c0a:	90 93 ea 03 	sts	0x03EA, r25
    3c0e:	80 93 e9 03 	sts	0x03E9, r24

	pwm_left = pwm_left_working;
    3c12:	30 93 f8 03 	sts	0x03F8, r19
    3c16:	20 93 f7 03 	sts	0x03F7, r18
	pwm_right = pwm_right_working;
    3c1a:	90 93 f6 03 	sts	0x03F6, r25
    3c1e:	80 93 f5 03 	sts	0x03F5, r24

	if(pwm_right > 0) {
    3c22:	18 16       	cp	r1, r24
    3c24:	19 06       	cpc	r1, r25
    3c26:	5c f5       	brge	.+86     	; 0x3c7e <handleMotorsWithNoController+0x18c>
		OCR3A = (unsigned int)pwm_right;
    3c28:	90 93 99 00 	sts	0x0099, r25
    3c2c:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    3c30:	80 91 f7 03 	lds	r24, 0x03F7
    3c34:	90 91 f8 03 	lds	r25, 0x03F8
    3c38:	18 16       	cp	r1, r24
    3c3a:	19 06       	cpc	r1, r25
    3c3c:	2c f4       	brge	.+10     	; 0x3c48 <handleMotorsWithNoController+0x156>
		OCR4A = (unsigned int)pwm_left;
    3c3e:	90 93 a9 00 	sts	0x00A9, r25
    3c42:	80 93 a8 00 	sts	0x00A8, r24
    3c46:	08 95       	ret
	} else if(pwm_left < 0) {
    3c48:	00 97       	sbiw	r24, 0x00	; 0
    3c4a:	09 f0       	breq	.+2      	; 0x3c4e <handleMotorsWithNoController+0x15c>
    3c4c:	6a c0       	rjmp	.+212    	; 0x3d22 <handleMotorsWithNoController+0x230>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    3c4e:	10 92 a9 00 	sts	0x00A9, r1
    3c52:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    3c56:	10 92 ab 00 	sts	0x00AB, r1
    3c5a:	10 92 aa 00 	sts	0x00AA, r1
    3c5e:	08 95       	ret
	//pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	//pwm_left_working = pwm_left_desired;
	pwm_right_working = pwm_intermediate_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	pwm_left_working = pwm_intermediate_left_desired;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    3c60:	8b e0       	ldi	r24, 0x0B	; 11
    3c62:	94 e0       	ldi	r25, 0x04	; 4
    3c64:	69 e0       	ldi	r22, 0x09	; 9
    3c66:	74 e0       	ldi	r23, 0x04	; 4
    3c68:	0e 94 d7 21 	call	0x43ae	; 0x43ae <obstacleAvoidance>
    3c6c:	20 91 0b 04 	lds	r18, 0x040B
    3c70:	30 91 0c 04 	lds	r19, 0x040C
    3c74:	80 91 09 04 	lds	r24, 0x0409
    3c78:	90 91 0a 04 	lds	r25, 0x040A
    3c7c:	c2 cf       	rjmp	.-124    	; 0x3c02 <handleMotorsWithNoController+0x110>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    3c7e:	00 97       	sbiw	r24, 0x00	; 0
    3c80:	09 f0       	breq	.+2      	; 0x3c84 <handleMotorsWithNoController+0x192>
    3c82:	47 c0       	rjmp	.+142    	; 0x3d12 <handleMotorsWithNoController+0x220>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    3c84:	10 92 99 00 	sts	0x0099, r1
    3c88:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    3c8c:	10 92 9b 00 	sts	0x009B, r1
    3c90:	10 92 9a 00 	sts	0x009A, r1
    3c94:	cd cf       	rjmp	.-102    	; 0x3c30 <handleMotorsWithNoController+0x13e>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    3c96:	35 95       	asr	r19
    3c98:	27 95       	ror	r18
    3c9a:	35 95       	asr	r19
    3c9c:	27 95       	ror	r18
    3c9e:	35 95       	asr	r19
    3ca0:	27 95       	ror	r18
    3ca2:	44 27       	eor	r20, r20
    3ca4:	37 fd       	sbrc	r19, 7
    3ca6:	40 95       	com	r20
    3ca8:	54 2f       	mov	r21, r20
    3caa:	80 91 d9 03 	lds	r24, 0x03D9
    3cae:	90 91 da 03 	lds	r25, 0x03DA
    3cb2:	a0 91 db 03 	lds	r26, 0x03DB
    3cb6:	b0 91 dc 03 	lds	r27, 0x03DC
    3cba:	82 1b       	sub	r24, r18
    3cbc:	93 0b       	sbc	r25, r19
    3cbe:	a4 0b       	sbc	r26, r20
    3cc0:	b5 0b       	sbc	r27, r21
    3cc2:	80 93 d9 03 	sts	0x03D9, r24
    3cc6:	90 93 da 03 	sts	0x03DA, r25
    3cca:	a0 93 db 03 	sts	0x03DB, r26
    3cce:	b0 93 dc 03 	sts	0x03DC, r27
    3cd2:	83 cf       	rjmp	.-250    	; 0x3bda <handleMotorsWithNoController+0xe8>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    3cd4:	35 95       	asr	r19
    3cd6:	27 95       	ror	r18
    3cd8:	35 95       	asr	r19
    3cda:	27 95       	ror	r18
    3cdc:	35 95       	asr	r19
    3cde:	27 95       	ror	r18
    3ce0:	44 27       	eor	r20, r20
    3ce2:	37 fd       	sbrc	r19, 7
    3ce4:	40 95       	com	r20
    3ce6:	54 2f       	mov	r21, r20
    3ce8:	80 91 dd 03 	lds	r24, 0x03DD
    3cec:	90 91 de 03 	lds	r25, 0x03DE
    3cf0:	a0 91 df 03 	lds	r26, 0x03DF
    3cf4:	b0 91 e0 03 	lds	r27, 0x03E0
    3cf8:	82 1b       	sub	r24, r18
    3cfa:	93 0b       	sbc	r25, r19
    3cfc:	a4 0b       	sbc	r26, r20
    3cfe:	b5 0b       	sbc	r27, r21
    3d00:	80 93 dd 03 	sts	0x03DD, r24
    3d04:	90 93 de 03 	sts	0x03DE, r25
    3d08:	a0 93 df 03 	sts	0x03DF, r26
    3d0c:	b0 93 e0 03 	sts	0x03E0, r27
    3d10:	2a cf       	rjmp	.-428    	; 0x3b66 <handleMotorsWithNoController+0x74>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    3d12:	90 95       	com	r25
    3d14:	81 95       	neg	r24
    3d16:	9f 4f       	sbci	r25, 0xFF	; 255
    3d18:	90 93 9b 00 	sts	0x009B, r25
    3d1c:	80 93 9a 00 	sts	0x009A, r24
    3d20:	87 cf       	rjmp	.-242    	; 0x3c30 <handleMotorsWithNoController+0x13e>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    3d22:	90 95       	com	r25
    3d24:	81 95       	neg	r24
    3d26:	9f 4f       	sbci	r25, 0xFF	; 255
    3d28:	90 93 ab 00 	sts	0x00AB, r25
    3d2c:	80 93 aa 00 	sts	0x00AA, r24
    3d30:	08 95       	ret

00003d32 <handleMotorsWithSpeedController>:

void handleMotorsWithSpeedController() {

	//pwm_left_working = pwm_left_desired;
	//pwm_right_working = pwm_right_desired;
	pwm_right_working = pwm_intermediate_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    3d32:	20 91 fd 03 	lds	r18, 0x03FD
    3d36:	30 91 fe 03 	lds	r19, 0x03FE
    3d3a:	30 93 0a 04 	sts	0x040A, r19
    3d3e:	20 93 09 04 	sts	0x0409, r18
	pwm_left_working = pwm_intermediate_left_desired;
    3d42:	80 91 ff 03 	lds	r24, 0x03FF
    3d46:	90 91 00 04 	lds	r25, 0x0400
    3d4a:	90 93 0c 04 	sts	0x040C, r25
    3d4e:	80 93 0b 04 	sts	0x040B, r24
	if(obstacleAvoidanceEnabled) {
    3d52:	40 91 62 05 	lds	r20, 0x0562
    3d56:	44 23       	and	r20, r20
    3d58:	09 f0       	breq	.+2      	; 0x3d5c <handleMotorsWithSpeedController+0x2a>
    3d5a:	b8 c0       	rjmp	.+368    	; 0x3ecc <handleMotorsWithSpeedController+0x19a>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    3d5c:	90 93 ec 03 	sts	0x03EC, r25
    3d60:	80 93 eb 03 	sts	0x03EB, r24
	pwm_right_desired_to_control = pwm_right_working;
    3d64:	30 93 ea 03 	sts	0x03EA, r19
    3d68:	20 93 e9 03 	sts	0x03E9, r18

	if(compute_left_vel) {
    3d6c:	20 91 07 02 	lds	r18, 0x0207
    3d70:	22 23       	and	r18, r18
    3d72:	09 f4       	brne	.+2      	; 0x3d76 <handleMotorsWithSpeedController+0x44>
    3d74:	4b c0       	rjmp	.+150    	; 0x3e0c <handleMotorsWithSpeedController+0xda>

		last_left_vel = left_vel_sum>>2;
    3d76:	20 91 ed 03 	lds	r18, 0x03ED
    3d7a:	30 91 ee 03 	lds	r19, 0x03EE
    3d7e:	36 95       	lsr	r19
    3d80:	27 95       	ror	r18
    3d82:	36 95       	lsr	r19
    3d84:	27 95       	ror	r18
    3d86:	30 93 f2 03 	sts	0x03F2, r19
    3d8a:	20 93 f1 03 	sts	0x03F1, r18
		compute_left_vel = 0;
    3d8e:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    3d92:	10 92 ee 03 	sts	0x03EE, r1
    3d96:	10 92 ed 03 	sts	0x03ED, r1

		if(pwm_left_desired_to_control >= 0) {
    3d9a:	97 fd       	sbrc	r25, 7
    3d9c:	ce c0       	rjmp	.+412    	; 0x3f3a <handleMotorsWithSpeedController+0x208>
			leftMotSteps += (last_left_vel>>3);
    3d9e:	35 95       	asr	r19
    3da0:	27 95       	ror	r18
    3da2:	35 95       	asr	r19
    3da4:	27 95       	ror	r18
    3da6:	35 95       	asr	r19
    3da8:	27 95       	ror	r18
    3daa:	44 27       	eor	r20, r20
    3dac:	37 fd       	sbrc	r19, 7
    3dae:	40 95       	com	r20
    3db0:	54 2f       	mov	r21, r20
    3db2:	80 91 dd 03 	lds	r24, 0x03DD
    3db6:	90 91 de 03 	lds	r25, 0x03DE
    3dba:	a0 91 df 03 	lds	r26, 0x03DF
    3dbe:	b0 91 e0 03 	lds	r27, 0x03E0
    3dc2:	82 0f       	add	r24, r18
    3dc4:	93 1f       	adc	r25, r19
    3dc6:	a4 1f       	adc	r26, r20
    3dc8:	b5 1f       	adc	r27, r21
    3dca:	80 93 dd 03 	sts	0x03DD, r24
    3dce:	90 93 de 03 	sts	0x03DE, r25
    3dd2:	a0 93 df 03 	sts	0x03DF, r26
    3dd6:	b0 93 e0 03 	sts	0x03E0, r27
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}

		if(robotPosition == HORIZONTAL_POS) {
    3dda:	80 91 17 02 	lds	r24, 0x0217
    3dde:	81 30       	cpi	r24, 0x01	; 1
    3de0:	09 f4       	brne	.+2      	; 0x3de4 <handleMotorsWithSpeedController+0xb2>
    3de2:	ce c0       	rjmp	.+412    	; 0x3f80 <handleMotorsWithSpeedController+0x24e>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    3de4:	8b e0       	ldi	r24, 0x0B	; 11
    3de6:	94 e0       	ldi	r25, 0x04	; 4
    3de8:	0e 94 af 12 	call	0x255e	; 0x255e <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    3dec:	80 91 0b 04 	lds	r24, 0x040B
    3df0:	90 91 0c 04 	lds	r25, 0x040C
    3df4:	90 93 f8 03 	sts	0x03F8, r25
    3df8:	80 93 f7 03 	sts	0x03F7, r24

		if(pwm_left > 0) {
    3dfc:	18 16       	cp	r1, r24
    3dfe:	19 06       	cpc	r1, r25
    3e00:	0c f0       	brlt	.+2      	; 0x3e04 <handleMotorsWithSpeedController+0xd2>
    3e02:	c3 c0       	rjmp	.+390    	; 0x3f8a <handleMotorsWithSpeedController+0x258>
			OCR4A = (unsigned int)pwm_left;
    3e04:	90 93 a9 00 	sts	0x00A9, r25
    3e08:	80 93 a8 00 	sts	0x00A8, r24
			OCR4B = 0;
		}

	}

	if(compute_right_vel) {
    3e0c:	80 91 08 02 	lds	r24, 0x0208
    3e10:	88 23       	and	r24, r24
    3e12:	09 f4       	brne	.+2      	; 0x3e16 <handleMotorsWithSpeedController+0xe4>
    3e14:	5a c0       	rjmp	.+180    	; 0x3eca <handleMotorsWithSpeedController+0x198>

		last_right_vel = right_vel_sum>>2;
    3e16:	20 91 ef 03 	lds	r18, 0x03EF
    3e1a:	30 91 f0 03 	lds	r19, 0x03F0
    3e1e:	36 95       	lsr	r19
    3e20:	27 95       	ror	r18
    3e22:	36 95       	lsr	r19
    3e24:	27 95       	ror	r18
    3e26:	30 93 f4 03 	sts	0x03F4, r19
    3e2a:	20 93 f3 03 	sts	0x03F3, r18
		compute_right_vel = 0;
    3e2e:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    3e32:	10 92 f0 03 	sts	0x03F0, r1
    3e36:	10 92 ef 03 	sts	0x03EF, r1

		if(pwm_right_desired_to_control >= 0) {
    3e3a:	80 91 e9 03 	lds	r24, 0x03E9
    3e3e:	90 91 ea 03 	lds	r25, 0x03EA
    3e42:	97 fd       	sbrc	r25, 7
    3e44:	52 c0       	rjmp	.+164    	; 0x3eea <handleMotorsWithSpeedController+0x1b8>
			rightMotSteps += (last_right_vel>>3);
    3e46:	35 95       	asr	r19
    3e48:	27 95       	ror	r18
    3e4a:	35 95       	asr	r19
    3e4c:	27 95       	ror	r18
    3e4e:	35 95       	asr	r19
    3e50:	27 95       	ror	r18
    3e52:	44 27       	eor	r20, r20
    3e54:	37 fd       	sbrc	r19, 7
    3e56:	40 95       	com	r20
    3e58:	54 2f       	mov	r21, r20
    3e5a:	80 91 d9 03 	lds	r24, 0x03D9
    3e5e:	90 91 da 03 	lds	r25, 0x03DA
    3e62:	a0 91 db 03 	lds	r26, 0x03DB
    3e66:	b0 91 dc 03 	lds	r27, 0x03DC
    3e6a:	82 0f       	add	r24, r18
    3e6c:	93 1f       	adc	r25, r19
    3e6e:	a4 1f       	adc	r26, r20
    3e70:	b5 1f       	adc	r27, r21
    3e72:	80 93 d9 03 	sts	0x03D9, r24
    3e76:	90 93 da 03 	sts	0x03DA, r25
    3e7a:	a0 93 db 03 	sts	0x03DB, r26
    3e7e:	b0 93 dc 03 	sts	0x03DC, r27
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}

		if(robotPosition == HORIZONTAL_POS) {
    3e82:	80 91 17 02 	lds	r24, 0x0217
    3e86:	81 30       	cpi	r24, 0x01	; 1
    3e88:	09 f4       	brne	.+2      	; 0x3e8c <handleMotorsWithSpeedController+0x15a>
    3e8a:	52 c0       	rjmp	.+164    	; 0x3f30 <handleMotorsWithSpeedController+0x1fe>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    3e8c:	89 e0       	ldi	r24, 0x09	; 9
    3e8e:	94 e0       	ldi	r25, 0x04	; 4
    3e90:	0e 94 f5 13 	call	0x27ea	; 0x27ea <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    3e94:	80 91 09 04 	lds	r24, 0x0409
    3e98:	90 91 0a 04 	lds	r25, 0x040A
    3e9c:	90 93 f6 03 	sts	0x03F6, r25
    3ea0:	80 93 f5 03 	sts	0x03F5, r24

		if(pwm_right > 0) {
    3ea4:	18 16       	cp	r1, r24
    3ea6:	19 06       	cpc	r1, r25
    3ea8:	2c f4       	brge	.+10     	; 0x3eb4 <handleMotorsWithSpeedController+0x182>
			OCR3A = (unsigned int)pwm_right;
    3eaa:	90 93 99 00 	sts	0x0099, r25
    3eae:	80 93 98 00 	sts	0x0098, r24
    3eb2:	08 95       	ret
		} else if(pwm_right < 0) {
    3eb4:	00 97       	sbiw	r24, 0x00	; 0
    3eb6:	09 f0       	breq	.+2      	; 0x3eba <handleMotorsWithSpeedController+0x188>
    3eb8:	73 c0       	rjmp	.+230    	; 0x3fa0 <handleMotorsWithSpeedController+0x26e>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    3eba:	10 92 99 00 	sts	0x0099, r1
    3ebe:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    3ec2:	10 92 9b 00 	sts	0x009B, r1
    3ec6:	10 92 9a 00 	sts	0x009A, r1
    3eca:	08 95       	ret
	//pwm_left_working = pwm_left_desired;
	//pwm_right_working = pwm_right_desired;
	pwm_right_working = pwm_intermediate_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	pwm_left_working = pwm_intermediate_left_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    3ecc:	8b e0       	ldi	r24, 0x0B	; 11
    3ece:	94 e0       	ldi	r25, 0x04	; 4
    3ed0:	69 e0       	ldi	r22, 0x09	; 9
    3ed2:	74 e0       	ldi	r23, 0x04	; 4
    3ed4:	0e 94 d7 21 	call	0x43ae	; 0x43ae <obstacleAvoidance>
    3ed8:	80 91 0b 04 	lds	r24, 0x040B
    3edc:	90 91 0c 04 	lds	r25, 0x040C
    3ee0:	20 91 09 04 	lds	r18, 0x0409
    3ee4:	30 91 0a 04 	lds	r19, 0x040A
    3ee8:	39 cf       	rjmp	.-398    	; 0x3d5c <handleMotorsWithSpeedController+0x2a>
		right_vel_sum = 0;

		if(pwm_right_desired_to_control >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    3eea:	35 95       	asr	r19
    3eec:	27 95       	ror	r18
    3eee:	35 95       	asr	r19
    3ef0:	27 95       	ror	r18
    3ef2:	35 95       	asr	r19
    3ef4:	27 95       	ror	r18
    3ef6:	44 27       	eor	r20, r20
    3ef8:	37 fd       	sbrc	r19, 7
    3efa:	40 95       	com	r20
    3efc:	54 2f       	mov	r21, r20
    3efe:	80 91 d9 03 	lds	r24, 0x03D9
    3f02:	90 91 da 03 	lds	r25, 0x03DA
    3f06:	a0 91 db 03 	lds	r26, 0x03DB
    3f0a:	b0 91 dc 03 	lds	r27, 0x03DC
    3f0e:	82 1b       	sub	r24, r18
    3f10:	93 0b       	sbc	r25, r19
    3f12:	a4 0b       	sbc	r26, r20
    3f14:	b5 0b       	sbc	r27, r21
    3f16:	80 93 d9 03 	sts	0x03D9, r24
    3f1a:	90 93 da 03 	sts	0x03DA, r25
    3f1e:	a0 93 db 03 	sts	0x03DB, r26
    3f22:	b0 93 dc 03 	sts	0x03DC, r27
		}

		if(robotPosition == HORIZONTAL_POS) {
    3f26:	80 91 17 02 	lds	r24, 0x0217
    3f2a:	81 30       	cpi	r24, 0x01	; 1
    3f2c:	09 f0       	breq	.+2      	; 0x3f30 <handleMotorsWithSpeedController+0x1fe>
    3f2e:	ae cf       	rjmp	.-164    	; 0x3e8c <handleMotorsWithSpeedController+0x15a>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    3f30:	89 e0       	ldi	r24, 0x09	; 9
    3f32:	94 e0       	ldi	r25, 0x04	; 4
    3f34:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <start_horizontal_speed_control_right>
    3f38:	ad cf       	rjmp	.-166    	; 0x3e94 <handleMotorsWithSpeedController+0x162>
		left_vel_sum = 0;

		if(pwm_left_desired_to_control >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    3f3a:	35 95       	asr	r19
    3f3c:	27 95       	ror	r18
    3f3e:	35 95       	asr	r19
    3f40:	27 95       	ror	r18
    3f42:	35 95       	asr	r19
    3f44:	27 95       	ror	r18
    3f46:	44 27       	eor	r20, r20
    3f48:	37 fd       	sbrc	r19, 7
    3f4a:	40 95       	com	r20
    3f4c:	54 2f       	mov	r21, r20
    3f4e:	80 91 dd 03 	lds	r24, 0x03DD
    3f52:	90 91 de 03 	lds	r25, 0x03DE
    3f56:	a0 91 df 03 	lds	r26, 0x03DF
    3f5a:	b0 91 e0 03 	lds	r27, 0x03E0
    3f5e:	82 1b       	sub	r24, r18
    3f60:	93 0b       	sbc	r25, r19
    3f62:	a4 0b       	sbc	r26, r20
    3f64:	b5 0b       	sbc	r27, r21
    3f66:	80 93 dd 03 	sts	0x03DD, r24
    3f6a:	90 93 de 03 	sts	0x03DE, r25
    3f6e:	a0 93 df 03 	sts	0x03DF, r26
    3f72:	b0 93 e0 03 	sts	0x03E0, r27
		}

		if(robotPosition == HORIZONTAL_POS) {
    3f76:	80 91 17 02 	lds	r24, 0x0217
    3f7a:	81 30       	cpi	r24, 0x01	; 1
    3f7c:	09 f0       	breq	.+2      	; 0x3f80 <handleMotorsWithSpeedController+0x24e>
    3f7e:	32 cf       	rjmp	.-412    	; 0x3de4 <handleMotorsWithSpeedController+0xb2>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    3f80:	8b e0       	ldi	r24, 0x0B	; 11
    3f82:	94 e0       	ldi	r25, 0x04	; 4
    3f84:	0e 94 20 16 	call	0x2c40	; 0x2c40 <start_horizontal_speed_control_left>
    3f88:	31 cf       	rjmp	.-414    	; 0x3dec <handleMotorsWithSpeedController+0xba>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    3f8a:	00 97       	sbiw	r24, 0x00	; 0
    3f8c:	89 f4       	brne	.+34     	; 0x3fb0 <handleMotorsWithSpeedController+0x27e>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    3f8e:	10 92 a9 00 	sts	0x00A9, r1
    3f92:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    3f96:	10 92 ab 00 	sts	0x00AB, r1
    3f9a:	10 92 aa 00 	sts	0x00AA, r1
    3f9e:	36 cf       	rjmp	.-404    	; 0x3e0c <handleMotorsWithSpeedController+0xda>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    3fa0:	90 95       	com	r25
    3fa2:	81 95       	neg	r24
    3fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fa6:	90 93 9b 00 	sts	0x009B, r25
    3faa:	80 93 9a 00 	sts	0x009A, r24
    3fae:	08 95       	ret
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    3fb0:	90 95       	com	r25
    3fb2:	81 95       	neg	r24
    3fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb6:	90 93 ab 00 	sts	0x00AB, r25
    3fba:	80 93 aa 00 	sts	0x00AA, r24
    3fbe:	26 cf       	rjmp	.-436    	; 0x3e0c <handleMotorsWithSpeedController+0xda>

00003fc0 <setLeftSpeed>:

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    3fc0:	28 2f       	mov	r18, r24
    3fc2:	33 27       	eor	r19, r19
    3fc4:	27 fd       	sbrc	r18, 7
    3fc6:	30 95       	com	r19
    3fc8:	37 fd       	sbrc	r19, 7
    3fca:	30 c0       	rjmp	.+96     	; 0x402c <setLeftSpeed+0x6c>
    3fcc:	30 93 0e 04 	sts	0x040E, r19
    3fd0:	20 93 0d 04 	sts	0x040D, r18

    if(vel >= 0) {
    3fd4:	87 fd       	sbrc	r24, 7
    3fd6:	1e c0       	rjmp	.+60     	; 0x4014 <setLeftSpeed+0x54>
        pwm_left_desired = speedl<<2;
    3fd8:	22 0f       	add	r18, r18
    3fda:	33 1f       	adc	r19, r19
    3fdc:	22 0f       	add	r18, r18
    3fde:	33 1f       	adc	r19, r19
    3fe0:	30 93 fc 03 	sts	0x03FC, r19
    3fe4:	20 93 fb 03 	sts	0x03FB, r18
    } else {
        pwm_left_desired = -(speedl<<2);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    3fe8:	82 e0       	ldi	r24, 0x02	; 2
    3fea:	21 30       	cpi	r18, 0x01	; 1
    3fec:	38 07       	cpc	r19, r24
    3fee:	3c f0       	brlt	.+14     	; 0x3ffe <setLeftSpeed+0x3e>
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	92 e0       	ldi	r25, 0x02	; 2
    3ff4:	90 93 fc 03 	sts	0x03FC, r25
    3ff8:	80 93 fb 03 	sts	0x03FB, r24
    3ffc:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    3ffe:	8e ef       	ldi	r24, 0xFE	; 254
    4000:	20 30       	cpi	r18, 0x00	; 0
    4002:	38 07       	cpc	r19, r24
    4004:	34 f4       	brge	.+12     	; 0x4012 <setLeftSpeed+0x52>
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	9e ef       	ldi	r25, 0xFE	; 254
    400a:	90 93 fc 03 	sts	0x03FC, r25
    400e:	80 93 fb 03 	sts	0x03FB, r24
    4012:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl<<2;
    } else {
        pwm_left_desired = -(speedl<<2);
    4014:	22 0f       	add	r18, r18
    4016:	33 1f       	adc	r19, r19
    4018:	22 0f       	add	r18, r18
    401a:	33 1f       	adc	r19, r19
    401c:	30 95       	com	r19
    401e:	21 95       	neg	r18
    4020:	3f 4f       	sbci	r19, 0xFF	; 255
    4022:	30 93 fc 03 	sts	0x03FC, r19
    4026:	20 93 fb 03 	sts	0x03FB, r18
    402a:	de cf       	rjmp	.-68     	; 0x3fe8 <setLeftSpeed+0x28>

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    402c:	30 95       	com	r19
    402e:	21 95       	neg	r18
    4030:	3f 4f       	sbci	r19, 0xFF	; 255
    4032:	cc cf       	rjmp	.-104    	; 0x3fcc <setLeftSpeed+0xc>

00004034 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4034:	28 2f       	mov	r18, r24
    4036:	33 27       	eor	r19, r19
    4038:	27 fd       	sbrc	r18, 7
    403a:	30 95       	com	r19
    403c:	37 fd       	sbrc	r19, 7
    403e:	30 c0       	rjmp	.+96     	; 0x40a0 <setRightSpeed+0x6c>
    4040:	30 93 10 04 	sts	0x0410, r19
    4044:	20 93 0f 04 	sts	0x040F, r18

    if(vel >= 0) {
    4048:	87 fd       	sbrc	r24, 7
    404a:	1e c0       	rjmp	.+60     	; 0x4088 <setRightSpeed+0x54>
        pwm_right_desired = speedr<<2;
    404c:	22 0f       	add	r18, r18
    404e:	33 1f       	adc	r19, r19
    4050:	22 0f       	add	r18, r18
    4052:	33 1f       	adc	r19, r19
    4054:	30 93 fa 03 	sts	0x03FA, r19
    4058:	20 93 f9 03 	sts	0x03F9, r18
    } else {
        pwm_right_desired = -(speedr<<2);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    405c:	82 e0       	ldi	r24, 0x02	; 2
    405e:	21 30       	cpi	r18, 0x01	; 1
    4060:	38 07       	cpc	r19, r24
    4062:	3c f0       	brlt	.+14     	; 0x4072 <setRightSpeed+0x3e>
    4064:	80 e0       	ldi	r24, 0x00	; 0
    4066:	92 e0       	ldi	r25, 0x02	; 2
    4068:	90 93 fa 03 	sts	0x03FA, r25
    406c:	80 93 f9 03 	sts	0x03F9, r24
    4070:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    4072:	8e ef       	ldi	r24, 0xFE	; 254
    4074:	20 30       	cpi	r18, 0x00	; 0
    4076:	38 07       	cpc	r19, r24
    4078:	34 f4       	brge	.+12     	; 0x4086 <setRightSpeed+0x52>
    407a:	80 e0       	ldi	r24, 0x00	; 0
    407c:	9e ef       	ldi	r25, 0xFE	; 254
    407e:	90 93 fa 03 	sts	0x03FA, r25
    4082:	80 93 f9 03 	sts	0x03F9, r24
    4086:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr<<2;
    } else {
        pwm_right_desired = -(speedr<<2);
    4088:	22 0f       	add	r18, r18
    408a:	33 1f       	adc	r19, r19
    408c:	22 0f       	add	r18, r18
    408e:	33 1f       	adc	r19, r19
    4090:	30 95       	com	r19
    4092:	21 95       	neg	r18
    4094:	3f 4f       	sbci	r19, 0xFF	; 255
    4096:	30 93 fa 03 	sts	0x03FA, r19
    409a:	20 93 f9 03 	sts	0x03F9, r18
    409e:	de cf       	rjmp	.-68     	; 0x405c <setRightSpeed+0x28>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    40a0:	30 95       	com	r19
    40a2:	21 95       	neg	r18
    40a4:	3f 4f       	sbci	r19, 0xFF	; 255
    40a6:	cc cf       	rjmp	.-104    	; 0x4040 <setRightSpeed+0xc>

000040a8 <__vector_45>:
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);

}

// Motor left
ISR(TIMER4_OVF_vect) {
    40a8:	1f 92       	push	r1
    40aa:	0f 92       	push	r0
    40ac:	0f b6       	in	r0, 0x3f	; 63
    40ae:	0f 92       	push	r0
    40b0:	11 24       	eor	r1, r1
    40b2:	8f 93       	push	r24
    40b4:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    40b6:	80 91 64 05 	lds	r24, 0x0564
    40ba:	88 23       	and	r24, r24
    40bc:	61 f0       	breq	.+24     	; 0x40d6 <__vector_45+0x2e>
		pwm_left = 0;
    40be:	10 92 f8 03 	sts	0x03F8, r1
    40c2:	10 92 f7 03 	sts	0x03F7, r1
		OCR4A = 0;
    40c6:	10 92 a9 00 	sts	0x00A9, r1
    40ca:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    40ce:	10 92 ab 00 	sts	0x00AB, r1
    40d2:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    40d6:	10 92 e2 03 	sts	0x03E2, r1
    40da:	10 92 e1 03 	sts	0x03E1, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    40de:	80 91 f7 03 	lds	r24, 0x03F7
    40e2:	90 91 f8 03 	lds	r25, 0x03F8
    40e6:	00 97       	sbiw	r24, 0x00	; 0
    40e8:	41 f5       	brne	.+80     	; 0x413a <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    40ea:	80 91 eb 03 	lds	r24, 0x03EB
    40ee:	90 91 ec 03 	lds	r25, 0x03EC
    40f2:	97 fd       	sbrc	r25, 7
    40f4:	69 c0       	rjmp	.+210    	; 0x41c8 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	80 93 30 03 	sts	0x0330, r24
			currentMotLeftChannel = 14;
    40fc:	8e e0       	ldi	r24, 0x0E	; 14
    40fe:	80 93 2d 03 	sts	0x032D, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    4108:	80 91 a0 00 	lds	r24, 0x00A0
    410c:	8f 75       	andi	r24, 0x5F	; 95
    410e:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4112:	80 91 02 01 	lds	r24, 0x0102
    4116:	87 7e       	andi	r24, 0xE7	; 231
    4118:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    411c:	80 91 72 00 	lds	r24, 0x0072
    4120:	89 7f       	andi	r24, 0xF9	; 249
    4122:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    4126:	89 b3       	in	r24, 0x19	; 25
    4128:	86 60       	ori	r24, 0x06	; 6
    412a:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    412c:	9f 91       	pop	r25
    412e:	8f 91       	pop	r24
    4130:	0f 90       	pop	r0
    4132:	0f be       	out	0x3f, r0	; 63
    4134:	0f 90       	pop	r0
    4136:	1f 90       	pop	r1
    4138:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    413a:	18 16       	cp	r1, r24
    413c:	19 06       	cpc	r1, r25
    413e:	2c f5       	brge	.+74     	; 0x418a <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    4140:	10 92 30 03 	sts	0x0330, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    4144:	8f e0       	ldi	r24, 0x0F	; 15
    4146:	80 93 2d 03 	sts	0x032D, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    414a:	80 91 a0 00 	lds	r24, 0x00A0
    414e:	8f 7d       	andi	r24, 0xDF	; 223
    4150:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    4154:	80 91 72 00 	lds	r24, 0x0072
    4158:	8b 7f       	andi	r24, 0xFB	; 251
    415a:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    415e:	80 91 02 01 	lds	r24, 0x0102
    4162:	8f 7e       	andi	r24, 0xEF	; 239
    4164:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    4168:	80 91 a0 00 	lds	r24, 0x00A0
    416c:	80 68       	ori	r24, 0x80	; 128
    416e:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    4172:	80 91 72 00 	lds	r24, 0x0072
    4176:	82 60       	ori	r24, 0x02	; 2
    4178:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    417c:	9f 91       	pop	r25
    417e:	8f 91       	pop	r24
    4180:	0f 90       	pop	r0
    4182:	0f be       	out	0x3f, r0	; 63
    4184:	0f 90       	pop	r0
    4186:	1f 90       	pop	r1
    4188:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    418a:	10 92 30 03 	sts	0x0330, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    418e:	8e e0       	ldi	r24, 0x0E	; 14
    4190:	80 93 2d 03 	sts	0x032D, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    4194:	80 91 a0 00 	lds	r24, 0x00A0
    4198:	8f 77       	andi	r24, 0x7F	; 127
    419a:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    419e:	80 91 72 00 	lds	r24, 0x0072
    41a2:	8d 7f       	andi	r24, 0xFD	; 253
    41a4:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    41a8:	80 91 02 01 	lds	r24, 0x0102
    41ac:	87 7f       	andi	r24, 0xF7	; 247
    41ae:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    41b2:	80 91 a0 00 	lds	r24, 0x00A0
    41b6:	80 62       	ori	r24, 0x20	; 32
    41b8:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    41bc:	80 91 72 00 	lds	r24, 0x0072
    41c0:	84 60       	ori	r24, 0x04	; 4
    41c2:	80 93 72 00 	sts	0x0072, r24
    41c6:	b2 cf       	rjmp	.-156    	; 0x412c <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	80 93 30 03 	sts	0x0330, r24
			currentMotLeftChannel = 15;
    41ce:	8f e0       	ldi	r24, 0x0F	; 15
    41d0:	80 93 2d 03 	sts	0x032D, r24
    41d4:	96 cf       	rjmp	.-212    	; 0x4102 <__vector_45+0x5a>

000041d6 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    41d6:	1f 92       	push	r1
    41d8:	0f 92       	push	r0
    41da:	0f b6       	in	r0, 0x3f	; 63
    41dc:	0f 92       	push	r0
    41de:	11 24       	eor	r1, r1
    41e0:	8f 93       	push	r24
    41e2:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	80 93 30 03 	sts	0x0330, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    41ea:	9e e0       	ldi	r25, 0x0E	; 14
    41ec:	90 93 2d 03 	sts	0x032D, r25

	firstSampleLeft = 1;
    41f0:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    41f4:	9f 91       	pop	r25
    41f6:	8f 91       	pop	r24
    41f8:	0f 90       	pop	r0
    41fa:	0f be       	out	0x3f, r0	; 63
    41fc:	0f 90       	pop	r0
    41fe:	1f 90       	pop	r1
    4200:	18 95       	reti

00004202 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    4202:	1f 92       	push	r1
    4204:	0f 92       	push	r0
    4206:	0f b6       	in	r0, 0x3f	; 63
    4208:	0f 92       	push	r0
    420a:	11 24       	eor	r1, r1
    420c:	8f 93       	push	r24
    420e:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    4210:	81 e0       	ldi	r24, 0x01	; 1
    4212:	80 93 30 03 	sts	0x0330, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    4216:	9f e0       	ldi	r25, 0x0F	; 15
    4218:	90 93 2d 03 	sts	0x032D, r25

	firstSampleLeft = 1;
    421c:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    4220:	9f 91       	pop	r25
    4222:	8f 91       	pop	r24
    4224:	0f 90       	pop	r0
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	0f 90       	pop	r0
    422a:	1f 90       	pop	r1
    422c:	18 95       	reti

0000422e <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    422e:	1f 92       	push	r1
    4230:	0f 92       	push	r0
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	0f 92       	push	r0
    4236:	11 24       	eor	r1, r1
    4238:	8f 93       	push	r24
    423a:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    423c:	80 91 64 05 	lds	r24, 0x0564
    4240:	88 23       	and	r24, r24
    4242:	61 f0       	breq	.+24     	; 0x425c <__vector_35+0x2e>
		pwm_right = 0;
    4244:	10 92 f6 03 	sts	0x03F6, r1
    4248:	10 92 f5 03 	sts	0x03F5, r1
		OCR3A = 0;
    424c:	10 92 99 00 	sts	0x0099, r1
    4250:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    4254:	10 92 9b 00 	sts	0x009B, r1
    4258:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    425c:	10 92 e4 03 	sts	0x03E4, r1
    4260:	10 92 e3 03 	sts	0x03E3, r1


	if(pwm_right == 0) {
    4264:	80 91 f5 03 	lds	r24, 0x03F5
    4268:	90 91 f6 03 	lds	r25, 0x03F6
    426c:	00 97       	sbiw	r24, 0x00	; 0
    426e:	31 f5       	brne	.+76     	; 0x42bc <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    4270:	80 91 e9 03 	lds	r24, 0x03E9
    4274:	90 91 ea 03 	lds	r25, 0x03EA
    4278:	97 fd       	sbrc	r25, 7
    427a:	5f c0       	rjmp	.+190    	; 0x433a <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	80 93 2f 03 	sts	0x032F, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    4282:	8c e0       	ldi	r24, 0x0C	; 12
    4284:	80 93 2e 03 	sts	0x032E, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    4288:	81 e0       	ldi	r24, 0x01	; 1
    428a:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    428e:	80 91 90 00 	lds	r24, 0x0090
    4292:	8f 75       	andi	r24, 0x5F	; 95
    4294:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4298:	8e b1       	in	r24, 0x0e	; 14
    429a:	87 7e       	andi	r24, 0xE7	; 231
    429c:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    429e:	80 91 71 00 	lds	r24, 0x0071
    42a2:	89 7f       	andi	r24, 0xF9	; 249
    42a4:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    42a8:	88 b3       	in	r24, 0x18	; 24
    42aa:	86 60       	ori	r24, 0x06	; 6
    42ac:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    42ae:	9f 91       	pop	r25
    42b0:	8f 91       	pop	r24
    42b2:	0f 90       	pop	r0
    42b4:	0f be       	out	0x3f, r0	; 63
    42b6:	0f 90       	pop	r0
    42b8:	1f 90       	pop	r1
    42ba:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    42bc:	18 16       	cp	r1, r24
    42be:	19 06       	cpc	r1, r25
    42c0:	0c f5       	brge	.+66     	; 0x4304 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    42c2:	10 92 2f 03 	sts	0x032F, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    42c6:	8d e0       	ldi	r24, 0x0D	; 13
    42c8:	80 93 2e 03 	sts	0x032E, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    42cc:	80 91 90 00 	lds	r24, 0x0090
    42d0:	8f 7d       	andi	r24, 0xDF	; 223
    42d2:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    42d6:	80 91 71 00 	lds	r24, 0x0071
    42da:	8b 7f       	andi	r24, 0xFB	; 251
    42dc:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    42e0:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    42e2:	80 91 90 00 	lds	r24, 0x0090
    42e6:	80 68       	ori	r24, 0x80	; 128
    42e8:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    42ec:	80 91 71 00 	lds	r24, 0x0071
    42f0:	82 60       	ori	r24, 0x02	; 2
    42f2:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    42f6:	9f 91       	pop	r25
    42f8:	8f 91       	pop	r24
    42fa:	0f 90       	pop	r0
    42fc:	0f be       	out	0x3f, r0	; 63
    42fe:	0f 90       	pop	r0
    4300:	1f 90       	pop	r1
    4302:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    4304:	10 92 2f 03 	sts	0x032F, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    4308:	8c e0       	ldi	r24, 0x0C	; 12
    430a:	80 93 2e 03 	sts	0x032E, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    430e:	80 91 90 00 	lds	r24, 0x0090
    4312:	8f 77       	andi	r24, 0x7F	; 127
    4314:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    4318:	80 91 71 00 	lds	r24, 0x0071
    431c:	8d 7f       	andi	r24, 0xFD	; 253
    431e:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    4322:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    4324:	80 91 90 00 	lds	r24, 0x0090
    4328:	80 62       	ori	r24, 0x20	; 32
    432a:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    432e:	80 91 71 00 	lds	r24, 0x0071
    4332:	84 60       	ori	r24, 0x04	; 4
    4334:	80 93 71 00 	sts	0x0071, r24
    4338:	ba cf       	rjmp	.-140    	; 0x42ae <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	80 93 2f 03 	sts	0x032F, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    4340:	8d e0       	ldi	r24, 0x0D	; 13
    4342:	80 93 2e 03 	sts	0x032E, r24
    4346:	a0 cf       	rjmp	.-192    	; 0x4288 <__vector_35+0x5a>

00004348 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    4348:	1f 92       	push	r1
    434a:	0f 92       	push	r0
    434c:	0f b6       	in	r0, 0x3f	; 63
    434e:	0f 92       	push	r0
    4350:	11 24       	eor	r1, r1
    4352:	8f 93       	push	r24
    4354:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	80 93 2f 03 	sts	0x032F, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    435c:	9c e0       	ldi	r25, 0x0C	; 12
    435e:	90 93 2e 03 	sts	0x032E, r25

	firstSampleRight = 1;
    4362:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    4366:	9f 91       	pop	r25
    4368:	8f 91       	pop	r24
    436a:	0f 90       	pop	r0
    436c:	0f be       	out	0x3f, r0	; 63
    436e:	0f 90       	pop	r0
    4370:	1f 90       	pop	r1
    4372:	18 95       	reti

00004374 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    4374:	1f 92       	push	r1
    4376:	0f 92       	push	r0
    4378:	0f b6       	in	r0, 0x3f	; 63
    437a:	0f 92       	push	r0
    437c:	11 24       	eor	r1, r1
    437e:	8f 93       	push	r24
    4380:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	80 93 2f 03 	sts	0x032F, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    4388:	9d e0       	ldi	r25, 0x0D	; 13
    438a:	90 93 2e 03 	sts	0x032E, r25

	firstSampleRight = 1;
    438e:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    4392:	9f 91       	pop	r25
    4394:	8f 91       	pop	r24
    4396:	0f 90       	pop	r0
    4398:	0f be       	out	0x3f, r0	; 63
    439a:	0f 90       	pop	r0
    439c:	1f 90       	pop	r1
    439e:	18 95       	reti

000043a0 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    43a0:	80 91 94 00 	lds	r24, 0x0094
    43a4:	90 91 95 00 	lds	r25, 0x0095
    43a8:	0e 94 22 30 	call	0x6044	; 0x6044 <srand>

}
    43ac:	08 95       	ret

000043ae <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    43ae:	2f 92       	push	r2
    43b0:	3f 92       	push	r3
    43b2:	4f 92       	push	r4
    43b4:	5f 92       	push	r5
    43b6:	6f 92       	push	r6
    43b8:	7f 92       	push	r7
    43ba:	8f 92       	push	r8
    43bc:	9f 92       	push	r9
    43be:	af 92       	push	r10
    43c0:	bf 92       	push	r11
    43c2:	cf 92       	push	r12
    43c4:	df 92       	push	r13
    43c6:	ef 92       	push	r14
    43c8:	ff 92       	push	r15
    43ca:	0f 93       	push	r16
    43cc:	1f 93       	push	r17
    43ce:	df 93       	push	r29
    43d0:	cf 93       	push	r28
    43d2:	cd b7       	in	r28, 0x3d	; 61
    43d4:	de b7       	in	r29, 0x3e	; 62
    43d6:	28 97       	sbiw	r28, 0x08	; 8
    43d8:	0f b6       	in	r0, 0x3f	; 63
    43da:	f8 94       	cli
    43dc:	de bf       	out	0x3e, r29	; 62
    43de:	0f be       	out	0x3f, r0	; 63
    43e0:	cd bf       	out	0x3d, r28	; 61
    43e2:	2c 01       	movw	r4, r24
    43e4:	7a 83       	std	Y+2, r23	; 0x02
    43e6:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    43e8:	fc 01       	movw	r30, r24
    43ea:	01 90       	ld	r0, Z+
    43ec:	f0 81       	ld	r31, Z
    43ee:	e0 2d       	mov	r30, r0
    43f0:	fc 83       	std	Y+4, r31	; 0x04
    43f2:	eb 83       	std	Y+3, r30	; 0x03
    43f4:	fb 01       	movw	r30, r22
    43f6:	01 90       	ld	r0, Z+
    43f8:	f0 81       	ld	r31, Z
    43fa:	e0 2d       	mov	r30, r0
    43fc:	fe 83       	std	Y+6, r31	; 0x06
    43fe:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    4400:	60 91 c9 03 	lds	r22, 0x03C9
    4404:	70 91 ca 03 	lds	r23, 0x03CA
    4408:	65 30       	cpi	r22, 0x05	; 5
    440a:	71 05       	cpc	r23, r1
    440c:	34 f4       	brge	.+12     	; 0x441a <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    440e:	10 92 ca 03 	sts	0x03CA, r1
    4412:	10 92 c9 03 	sts	0x03C9, r1
    4416:	60 e0       	ldi	r22, 0x00	; 0
    4418:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    441a:	40 91 cb 03 	lds	r20, 0x03CB
    441e:	50 91 cc 03 	lds	r21, 0x03CC
    4422:	45 30       	cpi	r20, 0x05	; 5
    4424:	51 05       	cpc	r21, r1
    4426:	34 f4       	brge	.+12     	; 0x4434 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    4428:	10 92 cc 03 	sts	0x03CC, r1
    442c:	10 92 cb 03 	sts	0x03CB, r1
    4430:	40 e0       	ldi	r20, 0x00	; 0
    4432:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    4434:	80 91 cd 03 	lds	r24, 0x03CD
    4438:	90 91 ce 03 	lds	r25, 0x03CE
    443c:	85 30       	cpi	r24, 0x05	; 5
    443e:	91 05       	cpc	r25, r1
    4440:	24 f4       	brge	.+8      	; 0x444a <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    4442:	10 92 ce 03 	sts	0x03CE, r1
    4446:	10 92 cd 03 	sts	0x03CD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    444a:	00 91 cf 03 	lds	r16, 0x03CF
    444e:	10 91 d0 03 	lds	r17, 0x03D0
    4452:	05 30       	cpi	r16, 0x05	; 5
    4454:	11 05       	cpc	r17, r1
    4456:	34 f4       	brge	.+12     	; 0x4464 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    4458:	10 92 d0 03 	sts	0x03D0, r1
    445c:	10 92 cf 03 	sts	0x03CF, r1
    4460:	00 e0       	ldi	r16, 0x00	; 0
    4462:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    4464:	60 90 d1 03 	lds	r6, 0x03D1
    4468:	70 90 d2 03 	lds	r7, 0x03D2
    446c:	f5 e0       	ldi	r31, 0x05	; 5
    446e:	6f 16       	cp	r6, r31
    4470:	71 04       	cpc	r7, r1
    4472:	34 f4       	brge	.+12     	; 0x4480 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    4474:	10 92 d2 03 	sts	0x03D2, r1
    4478:	10 92 d1 03 	sts	0x03D1, r1
    447c:	66 24       	eor	r6, r6
    447e:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    4480:	20 91 d3 03 	lds	r18, 0x03D3
    4484:	30 91 d4 03 	lds	r19, 0x03D4
    4488:	25 30       	cpi	r18, 0x05	; 5
    448a:	31 05       	cpc	r19, r1
    448c:	34 f4       	brge	.+12     	; 0x449a <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    448e:	10 92 d4 03 	sts	0x03D4, r1
    4492:	10 92 d3 03 	sts	0x03D3, r1
    4496:	20 e0       	ldi	r18, 0x00	; 0
    4498:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    449a:	80 91 d5 03 	lds	r24, 0x03D5
    449e:	90 91 d6 03 	lds	r25, 0x03D6
    44a2:	85 30       	cpi	r24, 0x05	; 5
    44a4:	91 05       	cpc	r25, r1
    44a6:	24 f4       	brge	.+8      	; 0x44b0 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    44a8:	10 92 d6 03 	sts	0x03D6, r1
    44ac:	10 92 d5 03 	sts	0x03D5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    44b0:	80 91 d7 03 	lds	r24, 0x03D7
    44b4:	90 91 d8 03 	lds	r25, 0x03D8
    44b8:	85 30       	cpi	r24, 0x05	; 5
    44ba:	91 05       	cpc	r25, r1
    44bc:	34 f4       	brge	.+12     	; 0x44ca <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    44be:	10 92 d8 03 	sts	0x03D8, r1
    44c2:	10 92 d7 03 	sts	0x03D7, r1
    44c6:	80 e0       	ldi	r24, 0x00	; 0
    44c8:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    44ca:	ee 24       	eor	r14, r14
    44cc:	ff 24       	eor	r15, r15
    44ce:	e6 1a       	sub	r14, r22
    44d0:	f7 0a       	sbc	r15, r23
    44d2:	5a 01       	movw	r10, r20
    44d4:	b5 94       	asr	r11
    44d6:	a7 94       	ror	r10
    44d8:	15 95       	asr	r17
    44da:	07 95       	ror	r16
    44dc:	69 01       	movw	r12, r18
    44de:	d5 94       	asr	r13
    44e0:	c7 94       	ror	r12
    44e2:	4c 01       	movw	r8, r24
    44e4:	95 94       	asr	r9
    44e6:	87 94       	ror	r8
    44e8:	0e 94 1d 30 	call	0x603a	; 0x603a <rand>
    44ec:	93 01       	movw	r18, r6
    44ee:	2e 51       	subi	r18, 0x1E	; 30
    44f0:	30 40       	sbci	r19, 0x00	; 0
    44f2:	2e 0d       	add	r18, r14
    44f4:	3f 1d       	adc	r19, r15
    44f6:	20 0f       	add	r18, r16
    44f8:	31 1f       	adc	r19, r17
    44fa:	2c 0d       	add	r18, r12
    44fc:	3d 1d       	adc	r19, r13
    44fe:	2a 19       	sub	r18, r10
    4500:	3b 09       	sbc	r19, r11
    4502:	28 19       	sub	r18, r8
    4504:	39 09       	sbc	r19, r9
    4506:	4c e3       	ldi	r20, 0x3C	; 60
    4508:	24 2e       	mov	r2, r20
    450a:	31 2c       	mov	r3, r1
    450c:	b1 01       	movw	r22, r2
    450e:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__divmodhi4>
    4512:	28 0f       	add	r18, r24
    4514:	39 1f       	adc	r19, r25
    4516:	38 87       	std	Y+8, r19	; 0x08
    4518:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    451a:	e0 90 cb 03 	lds	r14, 0x03CB
    451e:	f0 90 cc 03 	lds	r15, 0x03CC
    4522:	f5 94       	asr	r15
    4524:	e7 94       	ror	r14
    4526:	00 91 cd 03 	lds	r16, 0x03CD
    452a:	10 91 ce 03 	lds	r17, 0x03CE
    452e:	15 95       	asr	r17
    4530:	07 95       	ror	r16
    4532:	15 95       	asr	r17
    4534:	07 95       	ror	r16
    4536:	c0 90 cf 03 	lds	r12, 0x03CF
    453a:	d0 90 d0 03 	lds	r13, 0x03D0
    453e:	d5 94       	asr	r13
    4540:	c7 94       	ror	r12
    4542:	80 90 d3 03 	lds	r8, 0x03D3
    4546:	90 90 d4 03 	lds	r9, 0x03D4
    454a:	95 94       	asr	r9
    454c:	87 94       	ror	r8
    454e:	60 90 d5 03 	lds	r6, 0x03D5
    4552:	70 90 d6 03 	lds	r7, 0x03D6
    4556:	75 94       	asr	r7
    4558:	67 94       	ror	r6
    455a:	75 94       	asr	r7
    455c:	67 94       	ror	r6
    455e:	a0 90 d7 03 	lds	r10, 0x03D7
    4562:	b0 90 d8 03 	lds	r11, 0x03D8
    4566:	b5 94       	asr	r11
    4568:	a7 94       	ror	r10
    456a:	0e 94 1d 30 	call	0x603a	; 0x603a <rand>
    456e:	97 01       	movw	r18, r14
    4570:	20 0f       	add	r18, r16
    4572:	31 1f       	adc	r19, r17
    4574:	2e 51       	subi	r18, 0x1E	; 30
    4576:	30 40       	sbci	r19, 0x00	; 0
    4578:	2c 0d       	add	r18, r12
    457a:	3d 1d       	adc	r19, r13
    457c:	2a 19       	sub	r18, r10
    457e:	3b 09       	sbc	r19, r11
    4580:	28 19       	sub	r18, r8
    4582:	39 09       	sbc	r19, r9
    4584:	26 19       	sub	r18, r6
    4586:	37 09       	sbc	r19, r7
    4588:	b1 01       	movw	r22, r2
    458a:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__divmodhi4>
    458e:	28 0f       	add	r18, r24
    4590:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    4592:	4b 81       	ldd	r20, Y+3	; 0x03
    4594:	5c 81       	ldd	r21, Y+4	; 0x04
    4596:	57 fd       	sbrc	r21, 7
    4598:	97 c0       	rjmp	.+302    	; 0x46c8 <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    459a:	5a 01       	movw	r10, r20
    459c:	cc 24       	eor	r12, r12
    459e:	b7 fc       	sbrc	r11, 7
    45a0:	c0 94       	com	r12
    45a2:	dc 2c       	mov	r13, r12
    45a4:	8f 81       	ldd	r24, Y+7	; 0x07
    45a6:	98 85       	ldd	r25, Y+8	; 0x08
    45a8:	3c 01       	movw	r6, r24
    45aa:	88 24       	eor	r8, r8
    45ac:	77 fc       	sbrc	r7, 7
    45ae:	80 94       	com	r8
    45b0:	98 2c       	mov	r9, r8
    45b2:	79 01       	movw	r14, r18
    45b4:	00 27       	eor	r16, r16
    45b6:	f7 fc       	sbrc	r15, 7
    45b8:	00 95       	com	r16
    45ba:	10 2f       	mov	r17, r16
    45bc:	c4 01       	movw	r24, r8
    45be:	b3 01       	movw	r22, r6
    45c0:	6e 19       	sub	r22, r14
    45c2:	7f 09       	sbc	r23, r15
    45c4:	80 0b       	sbc	r24, r16
    45c6:	91 0b       	sbc	r25, r17
    45c8:	a6 01       	movw	r20, r12
    45ca:	95 01       	movw	r18, r10
    45cc:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <__mulsi3>
    45d0:	f6 e0       	ldi	r31, 0x06	; 6
    45d2:	95 95       	asr	r25
    45d4:	87 95       	ror	r24
    45d6:	77 95       	ror	r23
    45d8:	67 95       	ror	r22
    45da:	fa 95       	dec	r31
    45dc:	d1 f7       	brne	.-12     	; 0x45d2 <obstacleAvoidance+0x224>
    45de:	6a 0d       	add	r22, r10
    45e0:	7b 1d       	adc	r23, r11
    45e2:	8c 1d       	adc	r24, r12
    45e4:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    45e6:	f2 01       	movw	r30, r4
    45e8:	71 83       	std	Z+1, r23	; 0x01
    45ea:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    45ec:	2d 81       	ldd	r18, Y+5	; 0x05
    45ee:	3e 81       	ldd	r19, Y+6	; 0x06
    45f0:	37 fd       	sbrc	r19, 7
    45f2:	99 c0       	rjmp	.+306    	; 0x4726 <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    45f4:	59 01       	movw	r10, r18
    45f6:	cc 24       	eor	r12, r12
    45f8:	b7 fc       	sbrc	r11, 7
    45fa:	c0 94       	com	r12
    45fc:	dc 2c       	mov	r13, r12
    45fe:	c8 01       	movw	r24, r16
    4600:	b7 01       	movw	r22, r14
    4602:	66 0d       	add	r22, r6
    4604:	77 1d       	adc	r23, r7
    4606:	88 1d       	adc	r24, r8
    4608:	99 1d       	adc	r25, r9
    460a:	a6 01       	movw	r20, r12
    460c:	95 01       	movw	r18, r10
    460e:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <__mulsi3>
    4612:	36 e0       	ldi	r19, 0x06	; 6
    4614:	95 95       	asr	r25
    4616:	87 95       	ror	r24
    4618:	77 95       	ror	r23
    461a:	67 95       	ror	r22
    461c:	3a 95       	dec	r19
    461e:	d1 f7       	brne	.-12     	; 0x4614 <obstacleAvoidance+0x266>
    4620:	6a 0d       	add	r22, r10
    4622:	7b 1d       	adc	r23, r11
    4624:	8c 1d       	adc	r24, r12
    4626:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    4628:	9b 01       	movw	r18, r22
    462a:	e9 81       	ldd	r30, Y+1	; 0x01
    462c:	fa 81       	ldd	r31, Y+2	; 0x02
    462e:	71 83       	std	Z+1, r23	; 0x01
    4630:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    4632:	f2 e0       	ldi	r31, 0x02	; 2
    4634:	21 30       	cpi	r18, 0x01	; 1
    4636:	3f 07       	cpc	r19, r31
    4638:	44 f0       	brlt	.+16     	; 0x464a <obstacleAvoidance+0x29c>
    463a:	80 e0       	ldi	r24, 0x00	; 0
    463c:	92 e0       	ldi	r25, 0x02	; 2
    463e:	e9 81       	ldd	r30, Y+1	; 0x01
    4640:	fa 81       	ldd	r31, Y+2	; 0x02
    4642:	91 83       	std	Z+1, r25	; 0x01
    4644:	80 83       	st	Z, r24
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    464a:	f2 01       	movw	r30, r4
    464c:	80 81       	ld	r24, Z
    464e:	91 81       	ldd	r25, Z+1	; 0x01
    4650:	f2 e0       	ldi	r31, 0x02	; 2
    4652:	81 30       	cpi	r24, 0x01	; 1
    4654:	9f 07       	cpc	r25, r31
    4656:	4c f0       	brlt	.+18     	; 0x466a <obstacleAvoidance+0x2bc>
    4658:	80 e0       	ldi	r24, 0x00	; 0
    465a:	92 e0       	ldi	r25, 0x02	; 2
    465c:	f2 01       	movw	r30, r4
    465e:	91 83       	std	Z+1, r25	; 0x01
    4660:	80 83       	st	Z, r24
    4662:	e9 81       	ldd	r30, Y+1	; 0x01
    4664:	fa 81       	ldd	r31, Y+2	; 0x02
    4666:	20 81       	ld	r18, Z
    4668:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    466a:	fe ef       	ldi	r31, 0xFE	; 254
    466c:	20 30       	cpi	r18, 0x00	; 0
    466e:	3f 07       	cpc	r19, r31
    4670:	4c f4       	brge	.+18     	; 0x4684 <obstacleAvoidance+0x2d6>
    4672:	80 e0       	ldi	r24, 0x00	; 0
    4674:	9e ef       	ldi	r25, 0xFE	; 254
    4676:	e9 81       	ldd	r30, Y+1	; 0x01
    4678:	fa 81       	ldd	r31, Y+2	; 0x02
    467a:	91 83       	std	Z+1, r25	; 0x01
    467c:	80 83       	st	Z, r24
    467e:	f2 01       	movw	r30, r4
    4680:	80 81       	ld	r24, Z
    4682:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    4684:	fe ef       	ldi	r31, 0xFE	; 254
    4686:	80 30       	cpi	r24, 0x00	; 0
    4688:	9f 07       	cpc	r25, r31
    468a:	2c f4       	brge	.+10     	; 0x4696 <obstacleAvoidance+0x2e8>
    468c:	80 e0       	ldi	r24, 0x00	; 0
    468e:	9e ef       	ldi	r25, 0xFE	; 254
    4690:	f2 01       	movw	r30, r4
    4692:	91 83       	std	Z+1, r25	; 0x01
    4694:	80 83       	st	Z, r24

}
    4696:	28 96       	adiw	r28, 0x08	; 8
    4698:	0f b6       	in	r0, 0x3f	; 63
    469a:	f8 94       	cli
    469c:	de bf       	out	0x3e, r29	; 62
    469e:	0f be       	out	0x3f, r0	; 63
    46a0:	cd bf       	out	0x3d, r28	; 61
    46a2:	cf 91       	pop	r28
    46a4:	df 91       	pop	r29
    46a6:	1f 91       	pop	r17
    46a8:	0f 91       	pop	r16
    46aa:	ff 90       	pop	r15
    46ac:	ef 90       	pop	r14
    46ae:	df 90       	pop	r13
    46b0:	cf 90       	pop	r12
    46b2:	bf 90       	pop	r11
    46b4:	af 90       	pop	r10
    46b6:	9f 90       	pop	r9
    46b8:	8f 90       	pop	r8
    46ba:	7f 90       	pop	r7
    46bc:	6f 90       	pop	r6
    46be:	5f 90       	pop	r5
    46c0:	4f 90       	pop	r4
    46c2:	3f 90       	pop	r3
    46c4:	2f 90       	pop	r2
    46c6:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    46c8:	4d 81       	ldd	r20, Y+5	; 0x05
    46ca:	5e 81       	ldd	r21, Y+6	; 0x06
    46cc:	5a 01       	movw	r10, r20
    46ce:	cc 24       	eor	r12, r12
    46d0:	b7 fc       	sbrc	r11, 7
    46d2:	c0 94       	com	r12
    46d4:	dc 2c       	mov	r13, r12
    46d6:	8f 81       	ldd	r24, Y+7	; 0x07
    46d8:	98 85       	ldd	r25, Y+8	; 0x08
    46da:	3c 01       	movw	r6, r24
    46dc:	88 24       	eor	r8, r8
    46de:	77 fc       	sbrc	r7, 7
    46e0:	80 94       	com	r8
    46e2:	98 2c       	mov	r9, r8
    46e4:	79 01       	movw	r14, r18
    46e6:	00 27       	eor	r16, r16
    46e8:	f7 fc       	sbrc	r15, 7
    46ea:	00 95       	com	r16
    46ec:	10 2f       	mov	r17, r16
    46ee:	c8 01       	movw	r24, r16
    46f0:	b7 01       	movw	r22, r14
    46f2:	66 0d       	add	r22, r6
    46f4:	77 1d       	adc	r23, r7
    46f6:	88 1d       	adc	r24, r8
    46f8:	99 1d       	adc	r25, r9
    46fa:	a6 01       	movw	r20, r12
    46fc:	95 01       	movw	r18, r10
    46fe:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <__mulsi3>
    4702:	e6 e0       	ldi	r30, 0x06	; 6
    4704:	95 95       	asr	r25
    4706:	87 95       	ror	r24
    4708:	77 95       	ror	r23
    470a:	67 95       	ror	r22
    470c:	ea 95       	dec	r30
    470e:	d1 f7       	brne	.-12     	; 0x4704 <obstacleAvoidance+0x356>
    4710:	26 1b       	sub	r18, r22
    4712:	37 0b       	sbc	r19, r23
    4714:	48 0b       	sbc	r20, r24
    4716:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    4718:	f2 01       	movw	r30, r4
    471a:	31 83       	std	Z+1, r19	; 0x01
    471c:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    471e:	2d 81       	ldd	r18, Y+5	; 0x05
    4720:	3e 81       	ldd	r19, Y+6	; 0x06
    4722:	37 ff       	sbrs	r19, 7
    4724:	67 cf       	rjmp	.-306    	; 0x45f4 <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    4726:	2b 81       	ldd	r18, Y+3	; 0x03
    4728:	3c 81       	ldd	r19, Y+4	; 0x04
    472a:	59 01       	movw	r10, r18
    472c:	cc 24       	eor	r12, r12
    472e:	b7 fc       	sbrc	r11, 7
    4730:	c0 94       	com	r12
    4732:	dc 2c       	mov	r13, r12
    4734:	c4 01       	movw	r24, r8
    4736:	b3 01       	movw	r22, r6
    4738:	6e 19       	sub	r22, r14
    473a:	7f 09       	sbc	r23, r15
    473c:	80 0b       	sbc	r24, r16
    473e:	91 0b       	sbc	r25, r17
    4740:	a6 01       	movw	r20, r12
    4742:	95 01       	movw	r18, r10
    4744:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <__mulsi3>
    4748:	26 e0       	ldi	r18, 0x06	; 6
    474a:	95 95       	asr	r25
    474c:	87 95       	ror	r24
    474e:	77 95       	ror	r23
    4750:	67 95       	ror	r22
    4752:	2a 95       	dec	r18
    4754:	d1 f7       	brne	.-12     	; 0x474a <obstacleAvoidance+0x39c>
    4756:	a6 1a       	sub	r10, r22
    4758:	b7 0a       	sbc	r11, r23
    475a:	c8 0a       	sbc	r12, r24
    475c:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    475e:	95 01       	movw	r18, r10
    4760:	e9 81       	ldd	r30, Y+1	; 0x01
    4762:	fa 81       	ldd	r31, Y+2	; 0x02
    4764:	b1 82       	std	Z+1, r11	; 0x01
    4766:	a0 82       	st	Z, r10
    4768:	64 cf       	rjmp	.-312    	; 0x4632 <obstacleAvoidance+0x284>

0000476a <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    476a:	80 91 71 03 	lds	r24, 0x0371
    476e:	90 91 72 03 	lds	r25, 0x0372
    4772:	21 e0       	ldi	r18, 0x01	; 1
    4774:	84 3a       	cpi	r24, 0xA4	; 164
    4776:	92 07       	cpc	r25, r18
    4778:	d4 f0       	brlt	.+52     	; 0x47ae <cliffDetected+0x44>
    477a:	80 91 73 03 	lds	r24, 0x0373
    477e:	90 91 74 03 	lds	r25, 0x0374
    4782:	21 e0       	ldi	r18, 0x01	; 1
    4784:	84 3a       	cpi	r24, 0xA4	; 164
    4786:	92 07       	cpc	r25, r18
    4788:	94 f0       	brlt	.+36     	; 0x47ae <cliffDetected+0x44>
    478a:	80 91 75 03 	lds	r24, 0x0375
    478e:	90 91 76 03 	lds	r25, 0x0376
    4792:	21 e0       	ldi	r18, 0x01	; 1
    4794:	84 3a       	cpi	r24, 0xA4	; 164
    4796:	92 07       	cpc	r25, r18
    4798:	74 f0       	brlt	.+28     	; 0x47b6 <cliffDetected+0x4c>
		return 1;
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	20 91 77 03 	lds	r18, 0x0377
    47a0:	30 91 78 03 	lds	r19, 0x0378
    47a4:	91 e0       	ldi	r25, 0x01	; 1
    47a6:	24 3a       	cpi	r18, 0xA4	; 164
    47a8:	39 07       	cpc	r19, r25
    47aa:	1c f4       	brge	.+6      	; 0x47b2 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    47ac:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	08 95       	ret
    47b2:	80 e0       	ldi	r24, 0x00	; 0
    47b4:	08 95       	ret
    47b6:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    47b8:	08 95       	ret

000047ba <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    47ba:	81 e0       	ldi	r24, 0x01	; 1
    47bc:	80 93 62 05 	sts	0x0562, r24
}
    47c0:	08 95       	ret

000047c2 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    47c2:	10 92 62 05 	sts	0x0562, r1
}
    47c6:	08 95       	ret

000047c8 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    47c8:	81 e0       	ldi	r24, 0x01	; 1
    47ca:	80 93 63 05 	sts	0x0563, r24
}
    47ce:	08 95       	ret

000047d0 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    47d0:	10 92 63 05 	sts	0x0563, r1
}
    47d4:	08 95       	ret

000047d6 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    47d6:	a0 e8       	ldi	r26, 0x80	; 128
    47d8:	b0 e0       	ldi	r27, 0x00	; 0
    47da:	1c 92       	st	X, r1
	TCCR1B = 0;
    47dc:	e1 e8       	ldi	r30, 0x81	; 129
    47de:	f0 e0       	ldi	r31, 0x00	; 0
    47e0:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    47e2:	8c 91       	ld	r24, X
    47e4:	89 6a       	ori	r24, 0xA9	; 169
    47e6:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    47e8:	80 81       	ld	r24, Z
    47ea:	89 60       	ori	r24, 0x09	; 9
    47ec:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    47ee:	80 91 0c 02 	lds	r24, 0x020C
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	90 93 89 00 	sts	0x0089, r25
    47f8:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    47fc:	80 91 0d 02 	lds	r24, 0x020D
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	90 93 8b 00 	sts	0x008B, r25
    4806:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    480a:	80 91 0e 02 	lds	r24, 0x020E
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	90 93 8d 00 	sts	0x008D, r25
    4814:	80 93 8c 00 	sts	0x008C, r24

}
    4818:	08 95       	ret

0000481a <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	90 91 15 04 	lds	r25, 0x0415
    4820:	89 1b       	sub	r24, r25
    4822:	80 93 15 04 	sts	0x0415, r24

	if(blinkState) {
    4826:	88 23       	and	r24, r24
    4828:	39 f4       	brne	.+14     	; 0x4838 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    482a:	80 91 80 00 	lds	r24, 0x0080
    482e:	87 7f       	andi	r24, 0xF7	; 247
    4830:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    4834:	2f 98       	cbi	0x05, 7	; 5
    4836:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    4838:	80 91 80 00 	lds	r24, 0x0080
    483c:	88 60       	ori	r24, 0x08	; 8
    483e:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    4842:	8f ef       	ldi	r24, 0xFF	; 255
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	90 93 8d 00 	sts	0x008D, r25
    484a:	80 93 8c 00 	sts	0x008C, r24
    484e:	08 95       	ret

00004850 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    4850:	88 23       	and	r24, r24
    4852:	59 f0       	breq	.+22     	; 0x486a <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    4854:	90 91 80 00 	lds	r25, 0x0080
    4858:	90 68       	ori	r25, 0x80	; 128
    485a:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	90 93 89 00 	sts	0x0089, r25
    4864:	80 93 88 00 	sts	0x0088, r24
    4868:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    486a:	80 91 80 00 	lds	r24, 0x0080
    486e:	8f 77       	andi	r24, 0x7F	; 127
    4870:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    4874:	2d 98       	cbi	0x05, 5	; 5
    4876:	08 95       	ret

00004878 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    4878:	88 23       	and	r24, r24
    487a:	59 f0       	breq	.+22     	; 0x4892 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    487c:	90 91 80 00 	lds	r25, 0x0080
    4880:	90 62       	ori	r25, 0x20	; 32
    4882:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	90 93 8b 00 	sts	0x008B, r25
    488c:	80 93 8a 00 	sts	0x008A, r24
    4890:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    4892:	80 91 80 00 	lds	r24, 0x0080
    4896:	8f 7d       	andi	r24, 0xDF	; 223
    4898:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    489c:	2e 98       	cbi	0x05, 6	; 5
    489e:	08 95       	ret

000048a0 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    48a0:	88 23       	and	r24, r24
    48a2:	59 f0       	breq	.+22     	; 0x48ba <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    48a4:	90 91 80 00 	lds	r25, 0x0080
    48a8:	98 60       	ori	r25, 0x08	; 8
    48aa:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	90 93 8d 00 	sts	0x008D, r25
    48b4:	80 93 8c 00 	sts	0x008C, r24
    48b8:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    48ba:	80 91 80 00 	lds	r24, 0x0080
    48be:	87 7f       	andi	r24, 0xF7	; 247
    48c0:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    48c4:	2f 98       	cbi	0x05, 7	; 5
    48c6:	08 95       	ret

000048c8 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    48c8:	83 30       	cpi	r24, 0x03	; 3
    48ca:	09 f4       	brne	.+2      	; 0x48ce <setGreenLed+0x6>
    48cc:	5a c0       	rjmp	.+180    	; 0x4982 <setGreenLed+0xba>
    48ce:	84 30       	cpi	r24, 0x04	; 4
    48d0:	80 f0       	brcs	.+32     	; 0x48f2 <setGreenLed+0x2a>
    48d2:	85 30       	cpi	r24, 0x05	; 5
    48d4:	09 f4       	brne	.+2      	; 0x48d8 <setGreenLed+0x10>
    48d6:	41 c0       	rjmp	.+130    	; 0x495a <setGreenLed+0x92>
    48d8:	85 30       	cpi	r24, 0x05	; 5
    48da:	d0 f4       	brcc	.+52     	; 0x4910 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    48dc:	66 23       	and	r22, r22
    48de:	09 f4       	brne	.+2      	; 0x48e2 <setGreenLed+0x1a>
    48e0:	68 c0       	rjmp	.+208    	; 0x49b2 <setGreenLed+0xea>
    48e2:	80 91 0b 01 	lds	r24, 0x010B
    48e6:	8f 7e       	andi	r24, 0xEF	; 239
    48e8:	80 93 0b 01 	sts	0x010B, r24
    48ec:	80 91 0b 01 	lds	r24, 0x010B
    48f0:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    48f2:	81 30       	cpi	r24, 0x01	; 1
    48f4:	e1 f1       	breq	.+120    	; 0x496e <setGreenLed+0xa6>
    48f6:	82 30       	cpi	r24, 0x02	; 2
    48f8:	80 f0       	brcs	.+32     	; 0x491a <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    48fa:	66 23       	and	r22, r22
    48fc:	09 f4       	brne	.+2      	; 0x4900 <setGreenLed+0x38>
    48fe:	46 c0       	rjmp	.+140    	; 0x498c <setGreenLed+0xc4>
    4900:	80 91 0b 01 	lds	r24, 0x010B
    4904:	8b 7f       	andi	r24, 0xFB	; 251
    4906:	80 93 0b 01 	sts	0x010B, r24
    490a:	80 91 0b 01 	lds	r24, 0x010B
    490e:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    4910:	86 30       	cpi	r24, 0x06	; 6
    4912:	c9 f0       	breq	.+50     	; 0x4946 <setGreenLed+0x7e>
    4914:	87 30       	cpi	r24, 0x07	; 7
    4916:	61 f0       	breq	.+24     	; 0x4930 <setGreenLed+0x68>
    4918:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    491a:	66 23       	and	r22, r22
    491c:	09 f4       	brne	.+2      	; 0x4920 <setGreenLed+0x58>
    491e:	51 c0       	rjmp	.+162    	; 0x49c2 <setGreenLed+0xfa>
    4920:	80 91 0b 01 	lds	r24, 0x010B
    4924:	8e 7f       	andi	r24, 0xFE	; 254
    4926:	80 93 0b 01 	sts	0x010B, r24
    492a:	80 91 0b 01 	lds	r24, 0x010B
    492e:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    4930:	66 23       	and	r22, r22
    4932:	09 f0       	breq	.+2      	; 0x4936 <setGreenLed+0x6e>
    4934:	5e c0       	rjmp	.+188    	; 0x49f2 <setGreenLed+0x12a>
    4936:	80 91 0b 01 	lds	r24, 0x010B
    493a:	80 68       	ori	r24, 0x80	; 128
    493c:	80 93 0b 01 	sts	0x010B, r24
    4940:	80 91 0b 01 	lds	r24, 0x010B
    4944:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    4946:	66 23       	and	r22, r22
    4948:	49 f1       	breq	.+82     	; 0x499c <setGreenLed+0xd4>
    494a:	80 91 0b 01 	lds	r24, 0x010B
    494e:	8f 7b       	andi	r24, 0xBF	; 191
    4950:	80 93 0b 01 	sts	0x010B, r24
    4954:	80 91 0b 01 	lds	r24, 0x010B
    4958:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    495a:	66 23       	and	r22, r22
    495c:	d1 f1       	breq	.+116    	; 0x49d2 <setGreenLed+0x10a>
    495e:	80 91 0b 01 	lds	r24, 0x010B
    4962:	8f 7d       	andi	r24, 0xDF	; 223
    4964:	80 93 0b 01 	sts	0x010B, r24
    4968:	80 91 0b 01 	lds	r24, 0x010B
    496c:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    496e:	66 23       	and	r22, r22
    4970:	c1 f1       	breq	.+112    	; 0x49e2 <setGreenLed+0x11a>
    4972:	80 91 0b 01 	lds	r24, 0x010B
    4976:	8d 7f       	andi	r24, 0xFD	; 253
    4978:	80 93 0b 01 	sts	0x010B, r24
    497c:	80 91 0b 01 	lds	r24, 0x010B
    4980:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    4982:	66 23       	and	r22, r22
    4984:	99 f0       	breq	.+38     	; 0x49ac <setGreenLed+0xe4>
    4986:	a3 98       	cbi	0x14, 3	; 20
    4988:	84 b3       	in	r24, 0x14	; 20
    498a:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    498c:	80 91 0b 01 	lds	r24, 0x010B
    4990:	84 60       	ori	r24, 0x04	; 4
    4992:	80 93 0b 01 	sts	0x010B, r24
    4996:	80 91 0b 01 	lds	r24, 0x010B
    499a:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    499c:	80 91 0b 01 	lds	r24, 0x010B
    49a0:	80 64       	ori	r24, 0x40	; 64
    49a2:	80 93 0b 01 	sts	0x010B, r24
    49a6:	80 91 0b 01 	lds	r24, 0x010B
    49aa:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    49ac:	a3 9a       	sbi	0x14, 3	; 20
    49ae:	84 b3       	in	r24, 0x14	; 20
    49b0:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    49b2:	80 91 0b 01 	lds	r24, 0x010B
    49b6:	80 61       	ori	r24, 0x10	; 16
    49b8:	80 93 0b 01 	sts	0x010B, r24
    49bc:	80 91 0b 01 	lds	r24, 0x010B
    49c0:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    49c2:	80 91 0b 01 	lds	r24, 0x010B
    49c6:	81 60       	ori	r24, 0x01	; 1
    49c8:	80 93 0b 01 	sts	0x010B, r24
    49cc:	80 91 0b 01 	lds	r24, 0x010B
    49d0:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    49d2:	80 91 0b 01 	lds	r24, 0x010B
    49d6:	80 62       	ori	r24, 0x20	; 32
    49d8:	80 93 0b 01 	sts	0x010B, r24
    49dc:	80 91 0b 01 	lds	r24, 0x010B
    49e0:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    49e2:	80 91 0b 01 	lds	r24, 0x010B
    49e6:	82 60       	ori	r24, 0x02	; 2
    49e8:	80 93 0b 01 	sts	0x010B, r24
    49ec:	80 91 0b 01 	lds	r24, 0x010B
    49f0:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    49f2:	80 91 0b 01 	lds	r24, 0x010B
    49f6:	8f 77       	andi	r24, 0x7F	; 127
    49f8:	80 93 0b 01 	sts	0x010B, r24
    49fc:	80 91 0b 01 	lds	r24, 0x010B
    4a00:	08 95       	ret

00004a02 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    4a02:	eb e0       	ldi	r30, 0x0B	; 11
    4a04:	f1 e0       	ldi	r31, 0x01	; 1
    4a06:	80 81       	ld	r24, Z
    4a08:	81 60       	ori	r24, 0x01	; 1
    4a0a:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    4a0c:	80 81       	ld	r24, Z
    4a0e:	82 60       	ori	r24, 0x02	; 2
    4a10:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    4a12:	80 81       	ld	r24, Z
    4a14:	84 60       	ori	r24, 0x04	; 4
    4a16:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    4a18:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    4a1a:	80 81       	ld	r24, Z
    4a1c:	80 61       	ori	r24, 0x10	; 16
    4a1e:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    4a20:	80 81       	ld	r24, Z
    4a22:	80 62       	ori	r24, 0x20	; 32
    4a24:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    4a26:	80 81       	ld	r24, Z
    4a28:	80 64       	ori	r24, 0x40	; 64
    4a2a:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    4a2c:	80 81       	ld	r24, Z
    4a2e:	80 68       	ori	r24, 0x80	; 128
    4a30:	80 83       	st	Z, r24

}
    4a32:	08 95       	ret

00004a34 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    4a34:	eb e0       	ldi	r30, 0x0B	; 11
    4a36:	f1 e0       	ldi	r31, 0x01	; 1
    4a38:	80 81       	ld	r24, Z
    4a3a:	8e 7f       	andi	r24, 0xFE	; 254
    4a3c:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    4a3e:	80 81       	ld	r24, Z
    4a40:	8d 7f       	andi	r24, 0xFD	; 253
    4a42:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    4a44:	80 81       	ld	r24, Z
    4a46:	8b 7f       	andi	r24, 0xFB	; 251
    4a48:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    4a4a:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    4a4c:	80 81       	ld	r24, Z
    4a4e:	8f 7e       	andi	r24, 0xEF	; 239
    4a50:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    4a52:	80 81       	ld	r24, Z
    4a54:	8f 7d       	andi	r24, 0xDF	; 223
    4a56:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    4a58:	80 81       	ld	r24, Z
    4a5a:	8f 7b       	andi	r24, 0xBF	; 191
    4a5c:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    4a5e:	80 81       	ld	r24, Z
    4a60:	8f 77       	andi	r24, 0x7F	; 127
    4a62:	80 83       	st	Z, r24

}
    4a64:	08 95       	ret

00004a66 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    4a66:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4a6a:	80 91 14 02 	lds	r24, 0x0214
    4a6e:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4a72:	88 23       	and	r24, r24
    4a74:	49 f4       	brne	.+18     	; 0x4a88 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    4a76:	86 e1       	ldi	r24, 0x16	; 22
    4a78:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    4a7c:	85 e4       	ldi	r24, 0x45	; 69
    4a7e:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4a82:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>
    4a86:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4a88:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    4a8c:	86 ea       	ldi	r24, 0xA6	; 166
    4a8e:	90 e0       	ldi	r25, 0x00	; 0
    4a90:	90 93 15 02 	sts	0x0215, r25
    4a94:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4a98:	86 ea       	ldi	r24, 0xA6	; 166
    4a9a:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4a9e:	88 23       	and	r24, r24
    4aa0:	41 f5       	brne	.+80     	; 0x4af2 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    4aa2:	8d e2       	ldi	r24, 0x2D	; 45
    4aa4:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_write(0x08);	// measurement mode
    4aa8:	88 e0       	ldi	r24, 0x08	; 8
    4aaa:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4aae:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4ab2:	80 91 14 02 	lds	r24, 0x0214
    4ab6:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4aba:	88 23       	and	r24, r24
    4abc:	d1 f4       	brne	.+52     	; 0x4af2 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    4abe:	81 e3       	ldi	r24, 0x31	; 49
    4ac0:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    4ac4:	80 e0       	ldi	r24, 0x00	; 0
    4ac6:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4aca:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4ace:	80 91 14 02 	lds	r24, 0x0214
    4ad2:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4ad6:	88 23       	and	r24, r24
    4ad8:	61 f4       	brne	.+24     	; 0x4af2 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    4ada:	8c e2       	ldi	r24, 0x2C	; 44
    4adc:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    4ae0:	89 e0       	ldi	r24, 0x09	; 9
    4ae2:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4ae6:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    4aea:	81 e0       	ldi	r24, 0x01	; 1
    4aec:	80 93 25 05 	sts	0x0525, r24
    4af0:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4af2:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    4af6:	82 e0       	ldi	r24, 0x02	; 2
    4af8:	80 93 25 05 	sts	0x0525, r24
    4afc:	08 95       	ret

00004afe <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4afe:	80 91 14 02 	lds	r24, 0x0214
    4b02:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4b06:	88 23       	and	r24, r24
    4b08:	51 f4       	brne	.+20     	; 0x4b1e <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    4b0a:	86 e1       	ldi	r24, 0x16	; 22
    4b0c:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    4b10:	85 e4       	ldi	r24, 0x45	; 69
    4b12:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4b16:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>
    }

	return 0;				// configuration ok
    4b1a:	80 e0       	ldi	r24, 0x00	; 0

}
    4b1c:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4b1e:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>
		return 1;
    4b22:	81 e0       	ldi	r24, 0x01	; 1
    4b24:	08 95       	ret

00004b26 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4b26:	80 91 14 02 	lds	r24, 0x0214
    4b2a:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4b2e:	88 23       	and	r24, r24
    4b30:	31 f5       	brne	.+76     	; 0x4b7e <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    4b32:	8d e2       	ldi	r24, 0x2D	; 45
    4b34:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_write(0x08);	// measurement mode
    4b38:	88 e0       	ldi	r24, 0x08	; 8
    4b3a:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4b3e:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4b42:	80 91 14 02 	lds	r24, 0x0214
    4b46:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4b4a:	88 23       	and	r24, r24
    4b4c:	c1 f4       	brne	.+48     	; 0x4b7e <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    4b4e:	81 e3       	ldi	r24, 0x31	; 49
    4b50:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    4b54:	80 e0       	ldi	r24, 0x00	; 0
    4b56:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4b5a:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4b5e:	80 91 14 02 	lds	r24, 0x0214
    4b62:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4b66:	88 23       	and	r24, r24
    4b68:	51 f4       	brne	.+20     	; 0x4b7e <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    4b6a:	8c e2       	ldi	r24, 0x2C	; 44
    4b6c:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    4b70:	89 e0       	ldi	r24, 0x09	; 9
    4b72:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4b76:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>
    }

	return 0;
    4b7a:	80 e0       	ldi	r24, 0x00	; 0

}
    4b7c:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4b7e:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>
		return 1;
    4b82:	81 e0       	ldi	r24, 0x01	; 1
    4b84:	08 95       	ret

00004b86 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    4b86:	ff 92       	push	r15
    4b88:	0f 93       	push	r16
    4b8a:	1f 93       	push	r17
    4b8c:	df 93       	push	r29
    4b8e:	cf 93       	push	r28
    4b90:	0f 92       	push	r0
    4b92:	cd b7       	in	r28, 0x3d	; 61
    4b94:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    4b96:	80 91 25 05 	lds	r24, 0x0525
    4b9a:	88 23       	and	r24, r24
    4b9c:	91 f0       	breq	.+36     	; 0x4bc2 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    4b9e:	81 30       	cpi	r24, 0x01	; 1
    4ba0:	09 f4       	brne	.+2      	; 0x4ba4 <readAccelXY+0x1e>
    4ba2:	88 c0       	rjmp	.+272    	; 0x4cb4 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    4ba4:	10 92 27 05 	sts	0x0527, r1
    4ba8:	10 92 26 05 	sts	0x0526, r1
		accY = 0;
    4bac:	10 92 29 05 	sts	0x0529, r1
    4bb0:	10 92 28 05 	sts	0x0528, r1

	}

}
    4bb4:	0f 90       	pop	r0
    4bb6:	cf 91       	pop	r28
    4bb8:	df 91       	pop	r29
    4bba:	1f 91       	pop	r17
    4bbc:	0f 91       	pop	r16
    4bbe:	ff 90       	pop	r15
    4bc0:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    4bc2:	80 91 14 02 	lds	r24, 0x0214
    4bc6:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    4bca:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    4bcc:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    4bd0:	80 91 14 02 	lds	r24, 0x0214
    4bd4:	8f 5f       	subi	r24, 0xFF	; 255
    4bd6:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    4bda:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    4bde:	08 2f       	mov	r16, r24
    4be0:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    4be4:	f8 2e       	mov	r15, r24
    4be6:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    4bea:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    4bec:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    4bf0:	89 83       	std	Y+1, r24	; 0x01
    4bf2:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    4bf6:	90 91 92 05 	lds	r25, 0x0592
    4bfa:	89 81       	ldd	r24, Y+1	; 0x01
    4bfc:	99 23       	and	r25, r25
    4bfe:	39 f1       	breq	.+78     	; 0x4c4e <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    4c00:	4f 2d       	mov	r20, r15
    4c02:	55 27       	eor	r21, r21
    4c04:	47 fd       	sbrc	r20, 7
    4c06:	50 95       	com	r21
    4c08:	54 2f       	mov	r21, r20
    4c0a:	44 27       	eor	r20, r20
    4c0c:	60 2f       	mov	r22, r16
    4c0e:	77 27       	eor	r23, r23
    4c10:	67 fd       	sbrc	r22, 7
    4c12:	70 95       	com	r23
    4c14:	46 2b       	or	r20, r22
    4c16:	57 2b       	or	r21, r23
    4c18:	50 93 27 05 	sts	0x0527, r21
    4c1c:	40 93 26 05 	sts	0x0526, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    4c20:	28 2f       	mov	r18, r24
    4c22:	33 27       	eor	r19, r19
    4c24:	27 fd       	sbrc	r18, 7
    4c26:	30 95       	com	r19
    4c28:	32 2f       	mov	r19, r18
    4c2a:	22 27       	eor	r18, r18
    4c2c:	81 2f       	mov	r24, r17
    4c2e:	99 27       	eor	r25, r25
    4c30:	87 fd       	sbrc	r24, 7
    4c32:	90 95       	com	r25
    4c34:	28 2b       	or	r18, r24
    4c36:	39 2b       	or	r19, r25
    4c38:	30 93 29 05 	sts	0x0529, r19
    4c3c:	20 93 28 05 	sts	0x0528, r18
		accX = 0;
		accY = 0;

	}

}
    4c40:	0f 90       	pop	r0
    4c42:	cf 91       	pop	r28
    4c44:	df 91       	pop	r29
    4c46:	1f 91       	pop	r17
    4c48:	0f 91       	pop	r16
    4c4a:	ff 90       	pop	r15
    4c4c:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    4c4e:	4f 2d       	mov	r20, r15
    4c50:	55 27       	eor	r21, r21
    4c52:	47 fd       	sbrc	r20, 7
    4c54:	50 95       	com	r21
    4c56:	54 2f       	mov	r21, r20
    4c58:	44 27       	eor	r20, r20
    4c5a:	60 2f       	mov	r22, r16
    4c5c:	77 27       	eor	r23, r23
    4c5e:	67 fd       	sbrc	r22, 7
    4c60:	70 95       	com	r23
    4c62:	46 2b       	or	r20, r22
    4c64:	57 2b       	or	r21, r23
    4c66:	60 91 2c 05 	lds	r22, 0x052C
    4c6a:	70 91 2d 05 	lds	r23, 0x052D
    4c6e:	46 1b       	sub	r20, r22
    4c70:	57 0b       	sbc	r21, r23
    4c72:	50 93 27 05 	sts	0x0527, r21
    4c76:	40 93 26 05 	sts	0x0526, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    4c7a:	28 2f       	mov	r18, r24
    4c7c:	33 27       	eor	r19, r19
    4c7e:	27 fd       	sbrc	r18, 7
    4c80:	30 95       	com	r19
    4c82:	32 2f       	mov	r19, r18
    4c84:	22 27       	eor	r18, r18
    4c86:	81 2f       	mov	r24, r17
    4c88:	99 27       	eor	r25, r25
    4c8a:	87 fd       	sbrc	r24, 7
    4c8c:	90 95       	com	r25
    4c8e:	28 2b       	or	r18, r24
    4c90:	39 2b       	or	r19, r25
    4c92:	80 91 2e 05 	lds	r24, 0x052E
    4c96:	90 91 2f 05 	lds	r25, 0x052F
    4c9a:	28 1b       	sub	r18, r24
    4c9c:	39 0b       	sbc	r19, r25
    4c9e:	30 93 29 05 	sts	0x0529, r19
    4ca2:	20 93 28 05 	sts	0x0528, r18
		accX = 0;
		accY = 0;

	}

}
    4ca6:	0f 90       	pop	r0
    4ca8:	cf 91       	pop	r28
    4caa:	df 91       	pop	r29
    4cac:	1f 91       	pop	r17
    4cae:	0f 91       	pop	r16
    4cb0:	ff 90       	pop	r15
    4cb2:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    4cb4:	80 91 14 02 	lds	r24, 0x0214
    4cb8:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    4cbc:	82 e3       	ldi	r24, 0x32	; 50
    4cbe:	86 cf       	rjmp	.-244    	; 0x4bcc <readAccelXY+0x46>

00004cc0 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    4cc0:	df 93       	push	r29
    4cc2:	cf 93       	push	r28
    4cc4:	00 d0       	rcall	.+0      	; 0x4cc6 <readAccelXYZ+0x6>
    4cc6:	00 d0       	rcall	.+0      	; 0x4cc8 <readAccelXYZ+0x8>
    4cc8:	cd b7       	in	r28, 0x3d	; 61
    4cca:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    4ccc:	80 91 25 05 	lds	r24, 0x0525
    4cd0:	88 23       	and	r24, r24
    4cd2:	c1 f0       	breq	.+48     	; 0x4d04 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    4cd4:	81 30       	cpi	r24, 0x01	; 1
    4cd6:	09 f4       	brne	.+2      	; 0x4cda <readAccelXYZ+0x1a>
    4cd8:	ad c0       	rjmp	.+346    	; 0x4e34 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    4cda:	10 92 27 05 	sts	0x0527, r1
    4cde:	10 92 26 05 	sts	0x0526, r1
		accY = 0;
    4ce2:	10 92 29 05 	sts	0x0529, r1
    4ce6:	10 92 28 05 	sts	0x0528, r1
		accZ = 0;
    4cea:	10 92 2b 05 	sts	0x052B, r1
    4cee:	10 92 2a 05 	sts	0x052A, r1

	}

}
    4cf2:	26 96       	adiw	r28, 0x06	; 6
    4cf4:	0f b6       	in	r0, 0x3f	; 63
    4cf6:	f8 94       	cli
    4cf8:	de bf       	out	0x3e, r29	; 62
    4cfa:	0f be       	out	0x3f, r0	; 63
    4cfc:	cd bf       	out	0x3d, r28	; 61
    4cfe:	cf 91       	pop	r28
    4d00:	df 91       	pop	r29
    4d02:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    4d04:	80 91 14 02 	lds	r24, 0x0214
    4d08:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    4d0c:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    4d0e:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    4d12:	80 91 14 02 	lds	r24, 0x0214
    4d16:	8f 5f       	subi	r24, 0xFF	; 255
    4d18:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    4d1c:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    4d20:	89 83       	std	Y+1, r24	; 0x01
    4d22:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    4d26:	8a 83       	std	Y+2, r24	; 0x02
    4d28:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    4d2c:	8b 83       	std	Y+3, r24	; 0x03
    4d2e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    4d32:	8c 83       	std	Y+4, r24	; 0x04
    4d34:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    4d38:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    4d3a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <i2c_readNak>
    4d3e:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    4d40:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    4d44:	80 91 92 05 	lds	r24, 0x0592
    4d48:	88 23       	and	r24, r24
    4d4a:	89 f1       	breq	.+98     	; 0x4dae <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    4d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d4e:	99 27       	eor	r25, r25
    4d50:	87 fd       	sbrc	r24, 7
    4d52:	90 95       	com	r25
    4d54:	98 2f       	mov	r25, r24
    4d56:	88 27       	eor	r24, r24
    4d58:	29 81       	ldd	r18, Y+1	; 0x01
    4d5a:	33 27       	eor	r19, r19
    4d5c:	27 fd       	sbrc	r18, 7
    4d5e:	30 95       	com	r19
    4d60:	82 2b       	or	r24, r18
    4d62:	93 2b       	or	r25, r19
    4d64:	90 93 27 05 	sts	0x0527, r25
    4d68:	80 93 26 05 	sts	0x0526, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    4d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    4d6e:	99 27       	eor	r25, r25
    4d70:	87 fd       	sbrc	r24, 7
    4d72:	90 95       	com	r25
    4d74:	98 2f       	mov	r25, r24
    4d76:	88 27       	eor	r24, r24
    4d78:	2b 81       	ldd	r18, Y+3	; 0x03
    4d7a:	33 27       	eor	r19, r19
    4d7c:	27 fd       	sbrc	r18, 7
    4d7e:	30 95       	com	r19
    4d80:	82 2b       	or	r24, r18
    4d82:	93 2b       	or	r25, r19
    4d84:	90 93 29 05 	sts	0x0529, r25
    4d88:	80 93 28 05 	sts	0x0528, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    4d8c:	8e 81       	ldd	r24, Y+6	; 0x06
    4d8e:	99 27       	eor	r25, r25
    4d90:	87 fd       	sbrc	r24, 7
    4d92:	90 95       	com	r25
    4d94:	98 2f       	mov	r25, r24
    4d96:	88 27       	eor	r24, r24
    4d98:	2d 81       	ldd	r18, Y+5	; 0x05
    4d9a:	33 27       	eor	r19, r19
    4d9c:	27 fd       	sbrc	r18, 7
    4d9e:	30 95       	com	r19
    4da0:	82 2b       	or	r24, r18
    4da2:	93 2b       	or	r25, r19
    4da4:	90 93 2b 05 	sts	0x052B, r25
    4da8:	80 93 2a 05 	sts	0x052A, r24
    4dac:	a2 cf       	rjmp	.-188    	; 0x4cf2 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    4dae:	8a 81       	ldd	r24, Y+2	; 0x02
    4db0:	99 27       	eor	r25, r25
    4db2:	87 fd       	sbrc	r24, 7
    4db4:	90 95       	com	r25
    4db6:	98 2f       	mov	r25, r24
    4db8:	88 27       	eor	r24, r24
    4dba:	29 81       	ldd	r18, Y+1	; 0x01
    4dbc:	33 27       	eor	r19, r19
    4dbe:	27 fd       	sbrc	r18, 7
    4dc0:	30 95       	com	r19
    4dc2:	82 2b       	or	r24, r18
    4dc4:	93 2b       	or	r25, r19
    4dc6:	20 91 2c 05 	lds	r18, 0x052C
    4dca:	30 91 2d 05 	lds	r19, 0x052D
    4dce:	82 1b       	sub	r24, r18
    4dd0:	93 0b       	sbc	r25, r19
    4dd2:	90 93 27 05 	sts	0x0527, r25
    4dd6:	80 93 26 05 	sts	0x0526, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    4dda:	8c 81       	ldd	r24, Y+4	; 0x04
    4ddc:	99 27       	eor	r25, r25
    4dde:	87 fd       	sbrc	r24, 7
    4de0:	90 95       	com	r25
    4de2:	98 2f       	mov	r25, r24
    4de4:	88 27       	eor	r24, r24
    4de6:	2b 81       	ldd	r18, Y+3	; 0x03
    4de8:	33 27       	eor	r19, r19
    4dea:	27 fd       	sbrc	r18, 7
    4dec:	30 95       	com	r19
    4dee:	82 2b       	or	r24, r18
    4df0:	93 2b       	or	r25, r19
    4df2:	20 91 2e 05 	lds	r18, 0x052E
    4df6:	30 91 2f 05 	lds	r19, 0x052F
    4dfa:	82 1b       	sub	r24, r18
    4dfc:	93 0b       	sbc	r25, r19
    4dfe:	90 93 29 05 	sts	0x0529, r25
    4e02:	80 93 28 05 	sts	0x0528, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    4e06:	8e 81       	ldd	r24, Y+6	; 0x06
    4e08:	99 27       	eor	r25, r25
    4e0a:	87 fd       	sbrc	r24, 7
    4e0c:	90 95       	com	r25
    4e0e:	98 2f       	mov	r25, r24
    4e10:	88 27       	eor	r24, r24
    4e12:	2d 81       	ldd	r18, Y+5	; 0x05
    4e14:	33 27       	eor	r19, r19
    4e16:	27 fd       	sbrc	r18, 7
    4e18:	30 95       	com	r19
    4e1a:	82 2b       	or	r24, r18
    4e1c:	93 2b       	or	r25, r19
    4e1e:	20 91 30 05 	lds	r18, 0x0530
    4e22:	30 91 31 05 	lds	r19, 0x0531
    4e26:	82 1b       	sub	r24, r18
    4e28:	93 0b       	sbc	r25, r19
    4e2a:	90 93 2b 05 	sts	0x052B, r25
    4e2e:	80 93 2a 05 	sts	0x052A, r24
    4e32:	5f cf       	rjmp	.-322    	; 0x4cf2 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    4e34:	80 91 14 02 	lds	r24, 0x0214
    4e38:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    4e3c:	82 e3       	ldi	r24, 0x32	; 50
    4e3e:	67 cf       	rjmp	.-306    	; 0x4d0e <readAccelXYZ+0x4e>

00004e40 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    4e40:	cf 93       	push	r28
    4e42:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    4e44:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    4e48:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    4e4c:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    4e50:	80 e0       	ldi	r24, 0x00	; 0
    4e52:	0e 94 28 24 	call	0x4850	; 0x4850 <updateRedLed>
	updateGreenLed(pwm_green);
    4e56:	80 91 0d 02 	lds	r24, 0x020D
    4e5a:	0e 94 3c 24 	call	0x4878	; 0x4878 <updateGreenLed>
	updateBlueLed(pwm_blue);
    4e5e:	80 91 0e 02 	lds	r24, 0x020E
    4e62:	0e 94 50 24 	call	0x48a0	; 0x48a0 <updateBlueLed>

	calibrationCycle = 0;
    4e66:	10 92 4b 05 	sts	0x054B, r1
    4e6a:	10 92 4a 05 	sts	0x054A, r1
	startCalibration = 1;
    4e6e:	81 e0       	ldi	r24, 0x01	; 1
    4e70:	80 93 92 05 	sts	0x0592, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    4e74:	c1 e0       	ldi	r28, 0x01	; 1
    4e76:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    4e78:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    4e7c:	20 91 4a 05 	lds	r18, 0x054A
    4e80:	30 91 4b 05 	lds	r19, 0x054B
    4e84:	21 31       	cpi	r18, 0x11	; 17
    4e86:	31 05       	cpc	r19, r1
    4e88:	0c f4       	brge	.+2      	; 0x4e8c <calibrateSensors+0x4c>
    4e8a:	35 c1       	rjmp	.+618    	; 0x50f6 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    4e8c:	80 91 91 03 	lds	r24, 0x0391
    4e90:	90 91 92 03 	lds	r25, 0x0392
    4e94:	a0 91 93 03 	lds	r26, 0x0393
    4e98:	b0 91 94 03 	lds	r27, 0x0394
    4e9c:	54 e0       	ldi	r21, 0x04	; 4
    4e9e:	b6 95       	lsr	r27
    4ea0:	a7 95       	ror	r26
    4ea2:	97 95       	ror	r25
    4ea4:	87 95       	ror	r24
    4ea6:	5a 95       	dec	r21
    4ea8:	d1 f7       	brne	.-12     	; 0x4e9e <calibrateSensors+0x5e>
    4eaa:	90 93 7a 03 	sts	0x037A, r25
    4eae:	80 93 79 03 	sts	0x0379, r24
    4eb2:	80 91 95 03 	lds	r24, 0x0395
    4eb6:	90 91 96 03 	lds	r25, 0x0396
    4eba:	a0 91 97 03 	lds	r26, 0x0397
    4ebe:	b0 91 98 03 	lds	r27, 0x0398
    4ec2:	44 e0       	ldi	r20, 0x04	; 4
    4ec4:	b6 95       	lsr	r27
    4ec6:	a7 95       	ror	r26
    4ec8:	97 95       	ror	r25
    4eca:	87 95       	ror	r24
    4ecc:	4a 95       	dec	r20
    4ece:	d1 f7       	brne	.-12     	; 0x4ec4 <calibrateSensors+0x84>
    4ed0:	90 93 7c 03 	sts	0x037C, r25
    4ed4:	80 93 7b 03 	sts	0x037B, r24
    4ed8:	80 91 99 03 	lds	r24, 0x0399
    4edc:	90 91 9a 03 	lds	r25, 0x039A
    4ee0:	a0 91 9b 03 	lds	r26, 0x039B
    4ee4:	b0 91 9c 03 	lds	r27, 0x039C
    4ee8:	34 e0       	ldi	r19, 0x04	; 4
    4eea:	b6 95       	lsr	r27
    4eec:	a7 95       	ror	r26
    4eee:	97 95       	ror	r25
    4ef0:	87 95       	ror	r24
    4ef2:	3a 95       	dec	r19
    4ef4:	d1 f7       	brne	.-12     	; 0x4eea <calibrateSensors+0xaa>
    4ef6:	90 93 7e 03 	sts	0x037E, r25
    4efa:	80 93 7d 03 	sts	0x037D, r24
    4efe:	80 91 9d 03 	lds	r24, 0x039D
    4f02:	90 91 9e 03 	lds	r25, 0x039E
    4f06:	a0 91 9f 03 	lds	r26, 0x039F
    4f0a:	b0 91 a0 03 	lds	r27, 0x03A0
    4f0e:	24 e0       	ldi	r18, 0x04	; 4
    4f10:	b6 95       	lsr	r27
    4f12:	a7 95       	ror	r26
    4f14:	97 95       	ror	r25
    4f16:	87 95       	ror	r24
    4f18:	2a 95       	dec	r18
    4f1a:	d1 f7       	brne	.-12     	; 0x4f10 <calibrateSensors+0xd0>
    4f1c:	90 93 80 03 	sts	0x0380, r25
    4f20:	80 93 7f 03 	sts	0x037F, r24
    4f24:	80 91 a1 03 	lds	r24, 0x03A1
    4f28:	90 91 a2 03 	lds	r25, 0x03A2
    4f2c:	a0 91 a3 03 	lds	r26, 0x03A3
    4f30:	b0 91 a4 03 	lds	r27, 0x03A4
    4f34:	f4 e0       	ldi	r31, 0x04	; 4
    4f36:	b6 95       	lsr	r27
    4f38:	a7 95       	ror	r26
    4f3a:	97 95       	ror	r25
    4f3c:	87 95       	ror	r24
    4f3e:	fa 95       	dec	r31
    4f40:	d1 f7       	brne	.-12     	; 0x4f36 <calibrateSensors+0xf6>
    4f42:	90 93 82 03 	sts	0x0382, r25
    4f46:	80 93 81 03 	sts	0x0381, r24
    4f4a:	80 91 a5 03 	lds	r24, 0x03A5
    4f4e:	90 91 a6 03 	lds	r25, 0x03A6
    4f52:	a0 91 a7 03 	lds	r26, 0x03A7
    4f56:	b0 91 a8 03 	lds	r27, 0x03A8
    4f5a:	e4 e0       	ldi	r30, 0x04	; 4
    4f5c:	b6 95       	lsr	r27
    4f5e:	a7 95       	ror	r26
    4f60:	97 95       	ror	r25
    4f62:	87 95       	ror	r24
    4f64:	ea 95       	dec	r30
    4f66:	d1 f7       	brne	.-12     	; 0x4f5c <calibrateSensors+0x11c>
    4f68:	90 93 84 03 	sts	0x0384, r25
    4f6c:	80 93 83 03 	sts	0x0383, r24
    4f70:	80 91 a9 03 	lds	r24, 0x03A9
    4f74:	90 91 aa 03 	lds	r25, 0x03AA
    4f78:	a0 91 ab 03 	lds	r26, 0x03AB
    4f7c:	b0 91 ac 03 	lds	r27, 0x03AC
    4f80:	74 e0       	ldi	r23, 0x04	; 4
    4f82:	b6 95       	lsr	r27
    4f84:	a7 95       	ror	r26
    4f86:	97 95       	ror	r25
    4f88:	87 95       	ror	r24
    4f8a:	7a 95       	dec	r23
    4f8c:	d1 f7       	brne	.-12     	; 0x4f82 <calibrateSensors+0x142>
    4f8e:	90 93 86 03 	sts	0x0386, r25
    4f92:	80 93 85 03 	sts	0x0385, r24
    4f96:	80 91 ad 03 	lds	r24, 0x03AD
    4f9a:	90 91 ae 03 	lds	r25, 0x03AE
    4f9e:	a0 91 af 03 	lds	r26, 0x03AF
    4fa2:	b0 91 b0 03 	lds	r27, 0x03B0
    4fa6:	64 e0       	ldi	r22, 0x04	; 4
    4fa8:	b6 95       	lsr	r27
    4faa:	a7 95       	ror	r26
    4fac:	97 95       	ror	r25
    4fae:	87 95       	ror	r24
    4fb0:	6a 95       	dec	r22
    4fb2:	d1 f7       	brne	.-12     	; 0x4fa8 <calibrateSensors+0x168>
    4fb4:	90 93 88 03 	sts	0x0388, r25
    4fb8:	80 93 87 03 	sts	0x0387, r24
    4fbc:	80 91 b5 03 	lds	r24, 0x03B5
    4fc0:	90 91 b6 03 	lds	r25, 0x03B6
    4fc4:	a0 91 b7 03 	lds	r26, 0x03B7
    4fc8:	b0 91 b8 03 	lds	r27, 0x03B8
    4fcc:	54 e0       	ldi	r21, 0x04	; 4
    4fce:	b6 95       	lsr	r27
    4fd0:	a7 95       	ror	r26
    4fd2:	97 95       	ror	r25
    4fd4:	87 95       	ror	r24
    4fd6:	5a 95       	dec	r21
    4fd8:	d1 f7       	brne	.-12     	; 0x4fce <calibrateSensors+0x18e>
    4fda:	9c 01       	movw	r18, r24
    4fdc:	80 91 b9 03 	lds	r24, 0x03B9
    4fe0:	90 91 ba 03 	lds	r25, 0x03BA
    4fe4:	a0 91 bb 03 	lds	r26, 0x03BB
    4fe8:	b0 91 bc 03 	lds	r27, 0x03BC
    4fec:	44 e0       	ldi	r20, 0x04	; 4
    4fee:	b6 95       	lsr	r27
    4ff0:	a7 95       	ror	r26
    4ff2:	97 95       	ror	r25
    4ff4:	87 95       	ror	r24
    4ff6:	4a 95       	dec	r20
    4ff8:	d1 f7       	brne	.-12     	; 0x4fee <calibrateSensors+0x1ae>
    4ffa:	bc 01       	movw	r22, r24
    4ffc:	80 91 bd 03 	lds	r24, 0x03BD
    5000:	90 91 be 03 	lds	r25, 0x03BE
    5004:	a0 91 bf 03 	lds	r26, 0x03BF
    5008:	b0 91 c0 03 	lds	r27, 0x03C0
    500c:	f4 e0       	ldi	r31, 0x04	; 4
    500e:	b6 95       	lsr	r27
    5010:	a7 95       	ror	r26
    5012:	97 95       	ror	r25
    5014:	87 95       	ror	r24
    5016:	fa 95       	dec	r31
    5018:	d1 f7       	brne	.-12     	; 0x500e <calibrateSensors+0x1ce>
    501a:	ac 01       	movw	r20, r24
    501c:	80 91 b1 03 	lds	r24, 0x03B1
    5020:	90 91 b2 03 	lds	r25, 0x03B2
    5024:	a0 91 b3 03 	lds	r26, 0x03B3
    5028:	b0 91 b4 03 	lds	r27, 0x03B4
    502c:	e4 e0       	ldi	r30, 0x04	; 4
    502e:	b6 95       	lsr	r27
    5030:	a7 95       	ror	r26
    5032:	97 95       	ror	r25
    5034:	87 95       	ror	r24
    5036:	ea 95       	dec	r30
    5038:	d1 f7       	brne	.-12     	; 0x502e <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    503a:	80 50       	subi	r24, 0x00	; 0
    503c:	92 40       	sbci	r25, 0x02	; 2
    503e:	90 93 8a 03 	sts	0x038A, r25
    5042:	80 93 89 03 	sts	0x0389, r24
    5046:	20 50       	subi	r18, 0x00	; 0
    5048:	32 40       	sbci	r19, 0x02	; 2
    504a:	30 93 8c 03 	sts	0x038C, r19
    504e:	20 93 8b 03 	sts	0x038B, r18
    5052:	60 50       	subi	r22, 0x00	; 0
    5054:	72 40       	sbci	r23, 0x02	; 2
    5056:	70 93 8e 03 	sts	0x038E, r23
    505a:	60 93 8d 03 	sts	0x038D, r22
    505e:	40 50       	subi	r20, 0x00	; 0
    5060:	52 40       	sbci	r21, 0x02	; 2
    5062:	50 93 90 03 	sts	0x0390, r21
    5066:	40 93 8f 03 	sts	0x038F, r20
			}

			accOffsetX = accOffsetXSum>>4;
    506a:	80 91 32 05 	lds	r24, 0x0532
    506e:	90 91 33 05 	lds	r25, 0x0533
    5072:	95 95       	asr	r25
    5074:	87 95       	ror	r24
    5076:	95 95       	asr	r25
    5078:	87 95       	ror	r24
    507a:	95 95       	asr	r25
    507c:	87 95       	ror	r24
    507e:	95 95       	asr	r25
    5080:	87 95       	ror	r24
    5082:	90 93 2d 05 	sts	0x052D, r25
    5086:	80 93 2c 05 	sts	0x052C, r24
			accOffsetY = accOffsetYSum>>4;
    508a:	80 91 34 05 	lds	r24, 0x0534
    508e:	90 91 35 05 	lds	r25, 0x0535
    5092:	95 95       	asr	r25
    5094:	87 95       	ror	r24
    5096:	95 95       	asr	r25
    5098:	87 95       	ror	r24
    509a:	95 95       	asr	r25
    509c:	87 95       	ror	r24
    509e:	95 95       	asr	r25
    50a0:	87 95       	ror	r24
    50a2:	90 93 2f 05 	sts	0x052F, r25
    50a6:	80 93 2e 05 	sts	0x052E, r24
			accOffsetZ = accOffsetZSum>>4;
    50aa:	80 91 36 05 	lds	r24, 0x0536
    50ae:	90 91 37 05 	lds	r25, 0x0537
    50b2:	95 95       	asr	r25
    50b4:	87 95       	ror	r24
    50b6:	95 95       	asr	r25
    50b8:	87 95       	ror	r24
    50ba:	95 95       	asr	r25
    50bc:	87 95       	ror	r24
    50be:	95 95       	asr	r25
    50c0:	87 95       	ror	r24
    50c2:	90 93 31 05 	sts	0x0531, r25
    50c6:	80 93 30 05 	sts	0x0530, r24

			startCalibration = 0;
    50ca:	10 92 92 05 	sts	0x0592, r1

		}

	}

	pwm_red = 255;
    50ce:	8f ef       	ldi	r24, 0xFF	; 255
    50d0:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    50d4:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    50d8:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    50dc:	0e 94 28 24 	call	0x4850	; 0x4850 <updateRedLed>
	updateGreenLed(pwm_green);
    50e0:	80 91 0d 02 	lds	r24, 0x020D
    50e4:	0e 94 3c 24 	call	0x4878	; 0x4878 <updateGreenLed>
	updateBlueLed(pwm_blue);
    50e8:	80 91 0e 02 	lds	r24, 0x020E
    50ec:	0e 94 50 24 	call	0x48a0	; 0x48a0 <updateBlueLed>

}
    50f0:	df 91       	pop	r29
    50f2:	cf 91       	pop	r28
    50f4:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    50f6:	80 91 c8 03 	lds	r24, 0x03C8
    50fa:	88 23       	and	r24, r24
    50fc:	09 f4       	brne	.+2      	; 0x5100 <calibrateSensors+0x2c0>
    50fe:	86 c1       	rjmp	.+780    	; 0x540c <calibrateSensors+0x5cc>

				proxUpdated = 0;
    5100:	10 92 c8 03 	sts	0x03C8, r1

				if(calibrationCycle==0) {		// reset all variables
    5104:	21 15       	cp	r18, r1
    5106:	31 05       	cpc	r19, r1
    5108:	09 f4       	brne	.+2      	; 0x510c <calibrateSensors+0x2cc>
    510a:	86 c1       	rjmp	.+780    	; 0x5418 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    510c:	80 91 61 03 	lds	r24, 0x0361
    5110:	90 91 62 03 	lds	r25, 0x0362
    5114:	aa 27       	eor	r26, r26
    5116:	97 fd       	sbrc	r25, 7
    5118:	a0 95       	com	r26
    511a:	ba 2f       	mov	r27, r26
    511c:	40 91 91 03 	lds	r20, 0x0391
    5120:	50 91 92 03 	lds	r21, 0x0392
    5124:	60 91 93 03 	lds	r22, 0x0393
    5128:	70 91 94 03 	lds	r23, 0x0394
    512c:	84 0f       	add	r24, r20
    512e:	95 1f       	adc	r25, r21
    5130:	a6 1f       	adc	r26, r22
    5132:	b7 1f       	adc	r27, r23
    5134:	80 93 91 03 	sts	0x0391, r24
    5138:	90 93 92 03 	sts	0x0392, r25
    513c:	a0 93 93 03 	sts	0x0393, r26
    5140:	b0 93 94 03 	sts	0x0394, r27
    5144:	80 91 63 03 	lds	r24, 0x0363
    5148:	90 91 64 03 	lds	r25, 0x0364
    514c:	aa 27       	eor	r26, r26
    514e:	97 fd       	sbrc	r25, 7
    5150:	a0 95       	com	r26
    5152:	ba 2f       	mov	r27, r26
    5154:	40 91 95 03 	lds	r20, 0x0395
    5158:	50 91 96 03 	lds	r21, 0x0396
    515c:	60 91 97 03 	lds	r22, 0x0397
    5160:	70 91 98 03 	lds	r23, 0x0398
    5164:	84 0f       	add	r24, r20
    5166:	95 1f       	adc	r25, r21
    5168:	a6 1f       	adc	r26, r22
    516a:	b7 1f       	adc	r27, r23
    516c:	80 93 95 03 	sts	0x0395, r24
    5170:	90 93 96 03 	sts	0x0396, r25
    5174:	a0 93 97 03 	sts	0x0397, r26
    5178:	b0 93 98 03 	sts	0x0398, r27
    517c:	80 91 65 03 	lds	r24, 0x0365
    5180:	90 91 66 03 	lds	r25, 0x0366
    5184:	aa 27       	eor	r26, r26
    5186:	97 fd       	sbrc	r25, 7
    5188:	a0 95       	com	r26
    518a:	ba 2f       	mov	r27, r26
    518c:	40 91 99 03 	lds	r20, 0x0399
    5190:	50 91 9a 03 	lds	r21, 0x039A
    5194:	60 91 9b 03 	lds	r22, 0x039B
    5198:	70 91 9c 03 	lds	r23, 0x039C
    519c:	84 0f       	add	r24, r20
    519e:	95 1f       	adc	r25, r21
    51a0:	a6 1f       	adc	r26, r22
    51a2:	b7 1f       	adc	r27, r23
    51a4:	80 93 99 03 	sts	0x0399, r24
    51a8:	90 93 9a 03 	sts	0x039A, r25
    51ac:	a0 93 9b 03 	sts	0x039B, r26
    51b0:	b0 93 9c 03 	sts	0x039C, r27
    51b4:	80 91 67 03 	lds	r24, 0x0367
    51b8:	90 91 68 03 	lds	r25, 0x0368
    51bc:	aa 27       	eor	r26, r26
    51be:	97 fd       	sbrc	r25, 7
    51c0:	a0 95       	com	r26
    51c2:	ba 2f       	mov	r27, r26
    51c4:	40 91 9d 03 	lds	r20, 0x039D
    51c8:	50 91 9e 03 	lds	r21, 0x039E
    51cc:	60 91 9f 03 	lds	r22, 0x039F
    51d0:	70 91 a0 03 	lds	r23, 0x03A0
    51d4:	84 0f       	add	r24, r20
    51d6:	95 1f       	adc	r25, r21
    51d8:	a6 1f       	adc	r26, r22
    51da:	b7 1f       	adc	r27, r23
    51dc:	80 93 9d 03 	sts	0x039D, r24
    51e0:	90 93 9e 03 	sts	0x039E, r25
    51e4:	a0 93 9f 03 	sts	0x039F, r26
    51e8:	b0 93 a0 03 	sts	0x03A0, r27
    51ec:	80 91 69 03 	lds	r24, 0x0369
    51f0:	90 91 6a 03 	lds	r25, 0x036A
    51f4:	aa 27       	eor	r26, r26
    51f6:	97 fd       	sbrc	r25, 7
    51f8:	a0 95       	com	r26
    51fa:	ba 2f       	mov	r27, r26
    51fc:	40 91 a1 03 	lds	r20, 0x03A1
    5200:	50 91 a2 03 	lds	r21, 0x03A2
    5204:	60 91 a3 03 	lds	r22, 0x03A3
    5208:	70 91 a4 03 	lds	r23, 0x03A4
    520c:	84 0f       	add	r24, r20
    520e:	95 1f       	adc	r25, r21
    5210:	a6 1f       	adc	r26, r22
    5212:	b7 1f       	adc	r27, r23
    5214:	80 93 a1 03 	sts	0x03A1, r24
    5218:	90 93 a2 03 	sts	0x03A2, r25
    521c:	a0 93 a3 03 	sts	0x03A3, r26
    5220:	b0 93 a4 03 	sts	0x03A4, r27
    5224:	80 91 6b 03 	lds	r24, 0x036B
    5228:	90 91 6c 03 	lds	r25, 0x036C
    522c:	aa 27       	eor	r26, r26
    522e:	97 fd       	sbrc	r25, 7
    5230:	a0 95       	com	r26
    5232:	ba 2f       	mov	r27, r26
    5234:	40 91 a5 03 	lds	r20, 0x03A5
    5238:	50 91 a6 03 	lds	r21, 0x03A6
    523c:	60 91 a7 03 	lds	r22, 0x03A7
    5240:	70 91 a8 03 	lds	r23, 0x03A8
    5244:	84 0f       	add	r24, r20
    5246:	95 1f       	adc	r25, r21
    5248:	a6 1f       	adc	r26, r22
    524a:	b7 1f       	adc	r27, r23
    524c:	80 93 a5 03 	sts	0x03A5, r24
    5250:	90 93 a6 03 	sts	0x03A6, r25
    5254:	a0 93 a7 03 	sts	0x03A7, r26
    5258:	b0 93 a8 03 	sts	0x03A8, r27
    525c:	80 91 6d 03 	lds	r24, 0x036D
    5260:	90 91 6e 03 	lds	r25, 0x036E
    5264:	aa 27       	eor	r26, r26
    5266:	97 fd       	sbrc	r25, 7
    5268:	a0 95       	com	r26
    526a:	ba 2f       	mov	r27, r26
    526c:	40 91 a9 03 	lds	r20, 0x03A9
    5270:	50 91 aa 03 	lds	r21, 0x03AA
    5274:	60 91 ab 03 	lds	r22, 0x03AB
    5278:	70 91 ac 03 	lds	r23, 0x03AC
    527c:	84 0f       	add	r24, r20
    527e:	95 1f       	adc	r25, r21
    5280:	a6 1f       	adc	r26, r22
    5282:	b7 1f       	adc	r27, r23
    5284:	80 93 a9 03 	sts	0x03A9, r24
    5288:	90 93 aa 03 	sts	0x03AA, r25
    528c:	a0 93 ab 03 	sts	0x03AB, r26
    5290:	b0 93 ac 03 	sts	0x03AC, r27
    5294:	80 91 6f 03 	lds	r24, 0x036F
    5298:	90 91 70 03 	lds	r25, 0x0370
    529c:	aa 27       	eor	r26, r26
    529e:	97 fd       	sbrc	r25, 7
    52a0:	a0 95       	com	r26
    52a2:	ba 2f       	mov	r27, r26
    52a4:	40 91 ad 03 	lds	r20, 0x03AD
    52a8:	50 91 ae 03 	lds	r21, 0x03AE
    52ac:	60 91 af 03 	lds	r22, 0x03AF
    52b0:	70 91 b0 03 	lds	r23, 0x03B0
    52b4:	84 0f       	add	r24, r20
    52b6:	95 1f       	adc	r25, r21
    52b8:	a6 1f       	adc	r26, r22
    52ba:	b7 1f       	adc	r27, r23
    52bc:	80 93 ad 03 	sts	0x03AD, r24
    52c0:	90 93 ae 03 	sts	0x03AE, r25
    52c4:	a0 93 af 03 	sts	0x03AF, r26
    52c8:	b0 93 b0 03 	sts	0x03B0, r27
    52cc:	80 91 71 03 	lds	r24, 0x0371
    52d0:	90 91 72 03 	lds	r25, 0x0372
    52d4:	aa 27       	eor	r26, r26
    52d6:	97 fd       	sbrc	r25, 7
    52d8:	a0 95       	com	r26
    52da:	ba 2f       	mov	r27, r26
    52dc:	40 91 b1 03 	lds	r20, 0x03B1
    52e0:	50 91 b2 03 	lds	r21, 0x03B2
    52e4:	60 91 b3 03 	lds	r22, 0x03B3
    52e8:	70 91 b4 03 	lds	r23, 0x03B4
    52ec:	84 0f       	add	r24, r20
    52ee:	95 1f       	adc	r25, r21
    52f0:	a6 1f       	adc	r26, r22
    52f2:	b7 1f       	adc	r27, r23
    52f4:	80 93 b1 03 	sts	0x03B1, r24
    52f8:	90 93 b2 03 	sts	0x03B2, r25
    52fc:	a0 93 b3 03 	sts	0x03B3, r26
    5300:	b0 93 b4 03 	sts	0x03B4, r27
    5304:	80 91 73 03 	lds	r24, 0x0373
    5308:	90 91 74 03 	lds	r25, 0x0374
    530c:	aa 27       	eor	r26, r26
    530e:	97 fd       	sbrc	r25, 7
    5310:	a0 95       	com	r26
    5312:	ba 2f       	mov	r27, r26
    5314:	40 91 b5 03 	lds	r20, 0x03B5
    5318:	50 91 b6 03 	lds	r21, 0x03B6
    531c:	60 91 b7 03 	lds	r22, 0x03B7
    5320:	70 91 b8 03 	lds	r23, 0x03B8
    5324:	84 0f       	add	r24, r20
    5326:	95 1f       	adc	r25, r21
    5328:	a6 1f       	adc	r26, r22
    532a:	b7 1f       	adc	r27, r23
    532c:	80 93 b5 03 	sts	0x03B5, r24
    5330:	90 93 b6 03 	sts	0x03B6, r25
    5334:	a0 93 b7 03 	sts	0x03B7, r26
    5338:	b0 93 b8 03 	sts	0x03B8, r27
    533c:	80 91 75 03 	lds	r24, 0x0375
    5340:	90 91 76 03 	lds	r25, 0x0376
    5344:	aa 27       	eor	r26, r26
    5346:	97 fd       	sbrc	r25, 7
    5348:	a0 95       	com	r26
    534a:	ba 2f       	mov	r27, r26
    534c:	40 91 b9 03 	lds	r20, 0x03B9
    5350:	50 91 ba 03 	lds	r21, 0x03BA
    5354:	60 91 bb 03 	lds	r22, 0x03BB
    5358:	70 91 bc 03 	lds	r23, 0x03BC
    535c:	84 0f       	add	r24, r20
    535e:	95 1f       	adc	r25, r21
    5360:	a6 1f       	adc	r26, r22
    5362:	b7 1f       	adc	r27, r23
    5364:	80 93 b9 03 	sts	0x03B9, r24
    5368:	90 93 ba 03 	sts	0x03BA, r25
    536c:	a0 93 bb 03 	sts	0x03BB, r26
    5370:	b0 93 bc 03 	sts	0x03BC, r27
    5374:	80 91 77 03 	lds	r24, 0x0377
    5378:	90 91 78 03 	lds	r25, 0x0378
    537c:	aa 27       	eor	r26, r26
    537e:	97 fd       	sbrc	r25, 7
    5380:	a0 95       	com	r26
    5382:	ba 2f       	mov	r27, r26
    5384:	40 91 bd 03 	lds	r20, 0x03BD
    5388:	50 91 be 03 	lds	r21, 0x03BE
    538c:	60 91 bf 03 	lds	r22, 0x03BF
    5390:	70 91 c0 03 	lds	r23, 0x03C0
    5394:	84 0f       	add	r24, r20
    5396:	95 1f       	adc	r25, r21
    5398:	a6 1f       	adc	r26, r22
    539a:	b7 1f       	adc	r27, r23
    539c:	80 93 bd 03 	sts	0x03BD, r24
    53a0:	90 93 be 03 	sts	0x03BE, r25
    53a4:	a0 93 bf 03 	sts	0x03BF, r26
    53a8:	b0 93 c0 03 	sts	0x03C0, r27
				}

				accOffsetXSum += accX;
    53ac:	80 91 32 05 	lds	r24, 0x0532
    53b0:	90 91 33 05 	lds	r25, 0x0533
    53b4:	40 91 26 05 	lds	r20, 0x0526
    53b8:	50 91 27 05 	lds	r21, 0x0527
    53bc:	84 0f       	add	r24, r20
    53be:	95 1f       	adc	r25, r21
    53c0:	90 93 33 05 	sts	0x0533, r25
    53c4:	80 93 32 05 	sts	0x0532, r24
				accOffsetYSum += accY;
    53c8:	80 91 34 05 	lds	r24, 0x0534
    53cc:	90 91 35 05 	lds	r25, 0x0535
    53d0:	40 91 28 05 	lds	r20, 0x0528
    53d4:	50 91 29 05 	lds	r21, 0x0529
    53d8:	84 0f       	add	r24, r20
    53da:	95 1f       	adc	r25, r21
    53dc:	90 93 35 05 	sts	0x0535, r25
    53e0:	80 93 34 05 	sts	0x0534, r24
				accOffsetZSum += accZ;
    53e4:	80 91 36 05 	lds	r24, 0x0536
    53e8:	90 91 37 05 	lds	r25, 0x0537
    53ec:	40 91 2a 05 	lds	r20, 0x052A
    53f0:	50 91 2b 05 	lds	r21, 0x052B
    53f4:	84 0f       	add	r24, r20
    53f6:	95 1f       	adc	r25, r21
    53f8:	90 93 37 05 	sts	0x0537, r25
    53fc:	80 93 36 05 	sts	0x0536, r24

				calibrationCycle++;
    5400:	2f 5f       	subi	r18, 0xFF	; 255
    5402:	3f 4f       	sbci	r19, 0xFF	; 255
    5404:	30 93 4b 05 	sts	0x054B, r19
    5408:	20 93 4a 05 	sts	0x054A, r18
    540c:	80 91 92 05 	lds	r24, 0x0592
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    5410:	88 23       	and	r24, r24
    5412:	09 f0       	breq	.+2      	; 0x5416 <calibrateSensors+0x5d6>
    5414:	31 cd       	rjmp	.-1438   	; 0x4e78 <calibrateSensors+0x38>
    5416:	5b ce       	rjmp	.-842    	; 0x50ce <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5418:	10 92 91 03 	sts	0x0391, r1
    541c:	10 92 92 03 	sts	0x0392, r1
    5420:	10 92 93 03 	sts	0x0393, r1
    5424:	10 92 94 03 	sts	0x0394, r1
						proximityOffset[i] = 0;
    5428:	10 92 7a 03 	sts	0x037A, r1
    542c:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5430:	10 92 95 03 	sts	0x0395, r1
    5434:	10 92 96 03 	sts	0x0396, r1
    5438:	10 92 97 03 	sts	0x0397, r1
    543c:	10 92 98 03 	sts	0x0398, r1
						proximityOffset[i] = 0;
    5440:	10 92 7c 03 	sts	0x037C, r1
    5444:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5448:	10 92 99 03 	sts	0x0399, r1
    544c:	10 92 9a 03 	sts	0x039A, r1
    5450:	10 92 9b 03 	sts	0x039B, r1
    5454:	10 92 9c 03 	sts	0x039C, r1
						proximityOffset[i] = 0;
    5458:	10 92 7e 03 	sts	0x037E, r1
    545c:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5460:	10 92 9d 03 	sts	0x039D, r1
    5464:	10 92 9e 03 	sts	0x039E, r1
    5468:	10 92 9f 03 	sts	0x039F, r1
    546c:	10 92 a0 03 	sts	0x03A0, r1
						proximityOffset[i] = 0;
    5470:	10 92 80 03 	sts	0x0380, r1
    5474:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5478:	10 92 a1 03 	sts	0x03A1, r1
    547c:	10 92 a2 03 	sts	0x03A2, r1
    5480:	10 92 a3 03 	sts	0x03A3, r1
    5484:	10 92 a4 03 	sts	0x03A4, r1
						proximityOffset[i] = 0;
    5488:	10 92 82 03 	sts	0x0382, r1
    548c:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5490:	10 92 a5 03 	sts	0x03A5, r1
    5494:	10 92 a6 03 	sts	0x03A6, r1
    5498:	10 92 a7 03 	sts	0x03A7, r1
    549c:	10 92 a8 03 	sts	0x03A8, r1
						proximityOffset[i] = 0;
    54a0:	10 92 84 03 	sts	0x0384, r1
    54a4:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    54a8:	10 92 a9 03 	sts	0x03A9, r1
    54ac:	10 92 aa 03 	sts	0x03AA, r1
    54b0:	10 92 ab 03 	sts	0x03AB, r1
    54b4:	10 92 ac 03 	sts	0x03AC, r1
						proximityOffset[i] = 0;
    54b8:	10 92 86 03 	sts	0x0386, r1
    54bc:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    54c0:	10 92 ad 03 	sts	0x03AD, r1
    54c4:	10 92 ae 03 	sts	0x03AE, r1
    54c8:	10 92 af 03 	sts	0x03AF, r1
    54cc:	10 92 b0 03 	sts	0x03B0, r1
						proximityOffset[i] = 0;
    54d0:	10 92 88 03 	sts	0x0388, r1
    54d4:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    54d8:	10 92 b1 03 	sts	0x03B1, r1
    54dc:	10 92 b2 03 	sts	0x03B2, r1
    54e0:	10 92 b3 03 	sts	0x03B3, r1
    54e4:	10 92 b4 03 	sts	0x03B4, r1
						proximityOffset[i] = 0;
    54e8:	10 92 8a 03 	sts	0x038A, r1
    54ec:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    54f0:	10 92 b5 03 	sts	0x03B5, r1
    54f4:	10 92 b6 03 	sts	0x03B6, r1
    54f8:	10 92 b7 03 	sts	0x03B7, r1
    54fc:	10 92 b8 03 	sts	0x03B8, r1
						proximityOffset[i] = 0;
    5500:	10 92 8c 03 	sts	0x038C, r1
    5504:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5508:	10 92 b9 03 	sts	0x03B9, r1
    550c:	10 92 ba 03 	sts	0x03BA, r1
    5510:	10 92 bb 03 	sts	0x03BB, r1
    5514:	10 92 bc 03 	sts	0x03BC, r1
						proximityOffset[i] = 0;
    5518:	10 92 8e 03 	sts	0x038E, r1
    551c:	10 92 8d 03 	sts	0x038D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5520:	10 92 bd 03 	sts	0x03BD, r1
    5524:	10 92 be 03 	sts	0x03BE, r1
    5528:	10 92 bf 03 	sts	0x03BF, r1
    552c:	10 92 c0 03 	sts	0x03C0, r1
						proximityOffset[i] = 0;
    5530:	10 92 90 03 	sts	0x0390, r1
    5534:	10 92 8f 03 	sts	0x038F, r1
					}
					accOffsetXSum = 0;
    5538:	10 92 33 05 	sts	0x0533, r1
    553c:	10 92 32 05 	sts	0x0532, r1
					accOffsetYSum = 0;
    5540:	10 92 35 05 	sts	0x0535, r1
    5544:	10 92 34 05 	sts	0x0534, r1
					accOffsetZSum = 0;
    5548:	10 92 37 05 	sts	0x0537, r1
    554c:	10 92 36 05 	sts	0x0536, r1

					calibrationCycle++;
    5550:	d0 93 4b 05 	sts	0x054B, r29
    5554:	c0 93 4a 05 	sts	0x054A, r28
    5558:	80 91 92 05 	lds	r24, 0x0592

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    555c:	59 cf       	rjmp	.-334    	; 0x5410 <calibrateSensors+0x5d0>

0000555e <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    555e:	80 91 25 05 	lds	r24, 0x0525
    5562:	88 23       	and	r24, r24
    5564:	79 f0       	breq	.+30     	; 0x5584 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    5566:	81 30       	cpi	r24, 0x01	; 1
    5568:	11 f1       	breq	.+68     	; 0x55ae <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    556a:	10 92 27 05 	sts	0x0527, r1
    556e:	10 92 26 05 	sts	0x0526, r1
		accY = 0;
    5572:	10 92 29 05 	sts	0x0529, r1
    5576:	10 92 28 05 	sts	0x0528, r1
		accZ = 0;
    557a:	10 92 2b 05 	sts	0x052B, r1
    557e:	10 92 2a 05 	sts	0x052A, r1
    5582:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    5584:	80 91 14 02 	lds	r24, 0x0214
    5588:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    558c:	80 e0       	ldi	r24, 0x00	; 0
    558e:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    5592:	80 91 14 02 	lds	r24, 0x0214
    5596:	8f 5f       	subi	r24, 0xFF	; 255
    5598:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    559c:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    55a0:	80 93 3b 05 	sts	0x053B, r24
    55a4:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    55a8:	80 93 3c 05 	sts	0x053C, r24
    55ac:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    55ae:	80 91 14 02 	lds	r24, 0x0214
    55b2:	0e 94 5d 17 	call	0x2eba	; 0x2eba <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    55b6:	82 e3       	ldi	r24, 0x32	; 50
    55b8:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    55bc:	80 91 14 02 	lds	r24, 0x0214
    55c0:	8f 5f       	subi	r24, 0xFF	; 255
    55c2:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    55c6:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    55ca:	80 93 3b 05 	sts	0x053B, r24
    55ce:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    55d2:	80 93 3c 05 	sts	0x053C, r24
    55d6:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    55da:	80 93 3d 05 	sts	0x053D, r24
    55de:	08 95       	ret

000055e0 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    55e0:	80 91 25 05 	lds	r24, 0x0525
    55e4:	88 23       	and	r24, r24
    55e6:	09 f0       	breq	.+2      	; 0x55ea <readAccelXYZ_2+0xa>
    55e8:	4e c0       	rjmp	.+156    	; 0x5686 <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    55ea:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    55ee:	80 93 3d 05 	sts	0x053D, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    55f2:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    55f6:	80 93 3e 05 	sts	0x053E, r24
    55fa:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <i2c_readAck>
    55fe:	80 93 3f 05 	sts	0x053F, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    5602:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <i2c_readNak>
    5606:	80 93 40 05 	sts	0x0540, r24
		i2c_stop();													// set stop conditon = release bus
    560a:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    560e:	80 91 92 05 	lds	r24, 0x0592
    5612:	88 23       	and	r24, r24
    5614:	09 f4       	brne	.+2      	; 0x5618 <readAccelXYZ_2+0x38>
    5616:	47 c0       	rjmp	.+142    	; 0x56a6 <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    5618:	80 91 3c 05 	lds	r24, 0x053C
    561c:	99 27       	eor	r25, r25
    561e:	87 fd       	sbrc	r24, 7
    5620:	90 95       	com	r25
    5622:	98 2f       	mov	r25, r24
    5624:	88 27       	eor	r24, r24
    5626:	20 91 3b 05 	lds	r18, 0x053B
    562a:	33 27       	eor	r19, r19
    562c:	27 fd       	sbrc	r18, 7
    562e:	30 95       	com	r19
    5630:	82 2b       	or	r24, r18
    5632:	93 2b       	or	r25, r19
    5634:	90 93 27 05 	sts	0x0527, r25
    5638:	80 93 26 05 	sts	0x0526, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    563c:	80 91 3e 05 	lds	r24, 0x053E
    5640:	99 27       	eor	r25, r25
    5642:	87 fd       	sbrc	r24, 7
    5644:	90 95       	com	r25
    5646:	98 2f       	mov	r25, r24
    5648:	88 27       	eor	r24, r24
    564a:	20 91 3d 05 	lds	r18, 0x053D
    564e:	33 27       	eor	r19, r19
    5650:	27 fd       	sbrc	r18, 7
    5652:	30 95       	com	r19
    5654:	82 2b       	or	r24, r18
    5656:	93 2b       	or	r25, r19
    5658:	90 93 29 05 	sts	0x0529, r25
    565c:	80 93 28 05 	sts	0x0528, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    5660:	80 91 40 05 	lds	r24, 0x0540
    5664:	99 27       	eor	r25, r25
    5666:	87 fd       	sbrc	r24, 7
    5668:	90 95       	com	r25
    566a:	98 2f       	mov	r25, r24
    566c:	88 27       	eor	r24, r24
    566e:	20 91 3f 05 	lds	r18, 0x053F
    5672:	33 27       	eor	r19, r19
    5674:	27 fd       	sbrc	r18, 7
    5676:	30 95       	com	r19
    5678:	82 2b       	or	r24, r18
    567a:	93 2b       	or	r25, r19
    567c:	90 93 2b 05 	sts	0x052B, r25
    5680:	80 93 2a 05 	sts	0x052A, r24
    5684:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    5686:	81 30       	cpi	r24, 0x01	; 1
    5688:	09 f4       	brne	.+2      	; 0x568c <readAccelXYZ_2+0xac>
    568a:	b3 cf       	rjmp	.-154    	; 0x55f2 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    568c:	10 92 27 05 	sts	0x0527, r1
    5690:	10 92 26 05 	sts	0x0526, r1
		accY = 0;
    5694:	10 92 29 05 	sts	0x0529, r1
    5698:	10 92 28 05 	sts	0x0528, r1
		accZ = 0;
    569c:	10 92 2b 05 	sts	0x052B, r1
    56a0:	10 92 2a 05 	sts	0x052A, r1
    56a4:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    56a6:	80 91 3c 05 	lds	r24, 0x053C
    56aa:	99 27       	eor	r25, r25
    56ac:	87 fd       	sbrc	r24, 7
    56ae:	90 95       	com	r25
    56b0:	98 2f       	mov	r25, r24
    56b2:	88 27       	eor	r24, r24
    56b4:	20 91 3b 05 	lds	r18, 0x053B
    56b8:	33 27       	eor	r19, r19
    56ba:	27 fd       	sbrc	r18, 7
    56bc:	30 95       	com	r19
    56be:	82 2b       	or	r24, r18
    56c0:	93 2b       	or	r25, r19
    56c2:	20 91 2c 05 	lds	r18, 0x052C
    56c6:	30 91 2d 05 	lds	r19, 0x052D
    56ca:	82 1b       	sub	r24, r18
    56cc:	93 0b       	sbc	r25, r19
    56ce:	90 93 27 05 	sts	0x0527, r25
    56d2:	80 93 26 05 	sts	0x0526, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    56d6:	80 91 3e 05 	lds	r24, 0x053E
    56da:	99 27       	eor	r25, r25
    56dc:	87 fd       	sbrc	r24, 7
    56de:	90 95       	com	r25
    56e0:	98 2f       	mov	r25, r24
    56e2:	88 27       	eor	r24, r24
    56e4:	20 91 3d 05 	lds	r18, 0x053D
    56e8:	33 27       	eor	r19, r19
    56ea:	27 fd       	sbrc	r18, 7
    56ec:	30 95       	com	r19
    56ee:	82 2b       	or	r24, r18
    56f0:	93 2b       	or	r25, r19
    56f2:	20 91 2e 05 	lds	r18, 0x052E
    56f6:	30 91 2f 05 	lds	r19, 0x052F
    56fa:	82 1b       	sub	r24, r18
    56fc:	93 0b       	sbc	r25, r19
    56fe:	90 93 29 05 	sts	0x0529, r25
    5702:	80 93 28 05 	sts	0x0528, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    5706:	80 91 40 05 	lds	r24, 0x0540
    570a:	99 27       	eor	r25, r25
    570c:	87 fd       	sbrc	r24, 7
    570e:	90 95       	com	r25
    5710:	98 2f       	mov	r25, r24
    5712:	88 27       	eor	r24, r24
    5714:	20 91 3f 05 	lds	r18, 0x053F
    5718:	33 27       	eor	r19, r19
    571a:	27 fd       	sbrc	r18, 7
    571c:	30 95       	com	r19
    571e:	82 2b       	or	r24, r18
    5720:	93 2b       	or	r25, r19
    5722:	20 91 30 05 	lds	r18, 0x0530
    5726:	30 91 31 05 	lds	r19, 0x0531
    572a:	82 1b       	sub	r24, r18
    572c:	93 0b       	sbc	r25, r19
    572e:	90 93 2b 05 	sts	0x052B, r25
    5732:	80 93 2a 05 	sts	0x052A, r24
    5736:	08 95       	ret

00005738 <computeAngle>:

	}

}

void computeAngle() {
    5738:	ef 92       	push	r14
    573a:	ff 92       	push	r15
    573c:	0f 93       	push	r16
    573e:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    5740:	80 91 2a 05 	lds	r24, 0x052A
    5744:	90 91 2b 05 	lds	r25, 0x052B
    5748:	97 fd       	sbrc	r25, 7
    574a:	5b c0       	rjmp	.+182    	; 0x5802 <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    574c:	80 31       	cpi	r24, 0x10	; 16
    574e:	91 05       	cpc	r25, r1
    5750:	08 f0       	brcs	.+2      	; 0x5754 <computeAngle+0x1c>
    5752:	42 c0       	rjmp	.+132    	; 0x57d8 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    5754:	81 e0       	ldi	r24, 0x01	; 1
    5756:	80 93 16 02 	sts	0x0216, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    575a:	90 91 15 02 	lds	r25, 0x0215
    575e:	98 17       	cp	r25, r24
    5760:	09 f4       	brne	.+2      	; 0x5764 <computeAngle+0x2c>
    5762:	42 c0       	rjmp	.+132    	; 0x57e8 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    5764:	10 92 3a 05 	sts	0x053A, r1
	}
	prevPosition = currPosition;
    5768:	80 93 15 02 	sts	0x0215, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2((float)accX, (float)accY)*RAD_2_DEG);
    576c:	60 91 26 05 	lds	r22, 0x0526
    5770:	70 91 27 05 	lds	r23, 0x0527
    5774:	88 27       	eor	r24, r24
    5776:	77 fd       	sbrc	r23, 7
    5778:	80 95       	com	r24
    577a:	98 2f       	mov	r25, r24
    577c:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <__floatsisf>
    5780:	7b 01       	movw	r14, r22
    5782:	8c 01       	movw	r16, r24
    5784:	60 91 28 05 	lds	r22, 0x0528
    5788:	70 91 29 05 	lds	r23, 0x0529
    578c:	88 27       	eor	r24, r24
    578e:	77 fd       	sbrc	r23, 7
    5790:	80 95       	com	r24
    5792:	98 2f       	mov	r25, r24
    5794:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <__floatsisf>
    5798:	9b 01       	movw	r18, r22
    579a:	ac 01       	movw	r20, r24
    579c:	c8 01       	movw	r24, r16
    579e:	b7 01       	movw	r22, r14
    57a0:	0e 94 3c 30 	call	0x6078	; 0x6078 <atan2>
    57a4:	21 ee       	ldi	r18, 0xE1	; 225
    57a6:	3e e2       	ldi	r19, 0x2E	; 46
    57a8:	45 e6       	ldi	r20, 0x65	; 101
    57aa:	52 e4       	ldi	r21, 0x42	; 66
    57ac:	0e 94 05 2c 	call	0x580a	; 0x580a <__mulsf3>
    57b0:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <__fixsfsi>
    57b4:	9b 01       	movw	r18, r22
    57b6:	70 93 39 05 	sts	0x0539, r23
    57ba:	60 93 38 05 	sts	0x0538, r22

	if(currentAngle < 0) {
    57be:	77 ff       	sbrs	r23, 7
    57c0:	06 c0       	rjmp	.+12     	; 0x57ce <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    57c2:	28 59       	subi	r18, 0x98	; 152
    57c4:	3e 4f       	sbci	r19, 0xFE	; 254
    57c6:	30 93 39 05 	sts	0x0539, r19
    57ca:	20 93 38 05 	sts	0x0538, r18
	}

}
    57ce:	1f 91       	pop	r17
    57d0:	0f 91       	pop	r16
    57d2:	ff 90       	pop	r15
    57d4:	ef 90       	pop	r14
    57d6:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    57d8:	10 92 16 02 	sts	0x0216, r1
    57dc:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    57de:	90 91 15 02 	lds	r25, 0x0215
    57e2:	98 17       	cp	r25, r24
    57e4:	09 f0       	breq	.+2      	; 0x57e8 <computeAngle+0xb0>
    57e6:	be cf       	rjmp	.-132    	; 0x5764 <computeAngle+0x2c>
		timesInSamePos++;
    57e8:	90 91 3a 05 	lds	r25, 0x053A
    57ec:	9f 5f       	subi	r25, 0xFF	; 255
    57ee:	90 93 3a 05 	sts	0x053A, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    57f2:	95 30       	cpi	r25, 0x05	; 5
    57f4:	08 f4       	brcc	.+2      	; 0x57f8 <computeAngle+0xc0>
    57f6:	b8 cf       	rjmp	.-144    	; 0x5768 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    57f8:	10 92 3a 05 	sts	0x053A, r1
			robotPosition = currPosition;
    57fc:	80 93 17 02 	sts	0x0217, r24
    5800:	b3 cf       	rjmp	.-154    	; 0x5768 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    5802:	90 95       	com	r25
    5804:	81 95       	neg	r24
    5806:	9f 4f       	sbci	r25, 0xFF	; 255
    5808:	a1 cf       	rjmp	.-190    	; 0x574c <computeAngle+0x14>

0000580a <__mulsf3>:
    580a:	a0 e2       	ldi	r26, 0x20	; 32
    580c:	b0 e0       	ldi	r27, 0x00	; 0
    580e:	eb e0       	ldi	r30, 0x0B	; 11
    5810:	fc e2       	ldi	r31, 0x2C	; 44
    5812:	0c 94 9a 2f 	jmp	0x5f34	; 0x5f34 <__prologue_saves__+0x4>
    5816:	69 83       	std	Y+1, r22	; 0x01
    5818:	7a 83       	std	Y+2, r23	; 0x02
    581a:	8b 83       	std	Y+3, r24	; 0x03
    581c:	9c 83       	std	Y+4, r25	; 0x04
    581e:	2d 83       	std	Y+5, r18	; 0x05
    5820:	3e 83       	std	Y+6, r19	; 0x06
    5822:	4f 83       	std	Y+7, r20	; 0x07
    5824:	58 87       	std	Y+8, r21	; 0x08
    5826:	99 e0       	ldi	r25, 0x09	; 9
    5828:	e9 2e       	mov	r14, r25
    582a:	f1 2c       	mov	r15, r1
    582c:	ec 0e       	add	r14, r28
    582e:	fd 1e       	adc	r15, r29
    5830:	b7 01       	movw	r22, r14
    5832:	ce 01       	movw	r24, r28
    5834:	01 96       	adiw	r24, 0x01	; 1
    5836:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__unpack_f>
    583a:	8e 01       	movw	r16, r28
    583c:	0f 5e       	subi	r16, 0xEF	; 239
    583e:	1f 4f       	sbci	r17, 0xFF	; 255
    5840:	b8 01       	movw	r22, r16
    5842:	ce 01       	movw	r24, r28
    5844:	05 96       	adiw	r24, 0x05	; 5
    5846:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__unpack_f>
    584a:	99 85       	ldd	r25, Y+9	; 0x09
    584c:	92 30       	cpi	r25, 0x02	; 2
    584e:	88 f0       	brcs	.+34     	; 0x5872 <__mulsf3+0x68>
    5850:	89 89       	ldd	r24, Y+17	; 0x11
    5852:	82 30       	cpi	r24, 0x02	; 2
    5854:	c0 f0       	brcs	.+48     	; 0x5886 <__mulsf3+0x7c>
    5856:	94 30       	cpi	r25, 0x04	; 4
    5858:	19 f4       	brne	.+6      	; 0x5860 <__mulsf3+0x56>
    585a:	82 30       	cpi	r24, 0x02	; 2
    585c:	29 f0       	breq	.+10     	; 0x5868 <__mulsf3+0x5e>
    585e:	09 c0       	rjmp	.+18     	; 0x5872 <__mulsf3+0x68>
    5860:	84 30       	cpi	r24, 0x04	; 4
    5862:	29 f4       	brne	.+10     	; 0x586e <__mulsf3+0x64>
    5864:	92 30       	cpi	r25, 0x02	; 2
    5866:	79 f4       	brne	.+30     	; 0x5886 <__mulsf3+0x7c>
    5868:	69 e1       	ldi	r22, 0x19	; 25
    586a:	72 e0       	ldi	r23, 0x02	; 2
    586c:	c6 c0       	rjmp	.+396    	; 0x59fa <__mulsf3+0x1f0>
    586e:	92 30       	cpi	r25, 0x02	; 2
    5870:	41 f4       	brne	.+16     	; 0x5882 <__mulsf3+0x78>
    5872:	20 e0       	ldi	r18, 0x00	; 0
    5874:	9a 85       	ldd	r25, Y+10	; 0x0a
    5876:	8a 89       	ldd	r24, Y+18	; 0x12
    5878:	98 13       	cpse	r25, r24
    587a:	21 e0       	ldi	r18, 0x01	; 1
    587c:	2a 87       	std	Y+10, r18	; 0x0a
    587e:	b7 01       	movw	r22, r14
    5880:	bc c0       	rjmp	.+376    	; 0x59fa <__mulsf3+0x1f0>
    5882:	82 30       	cpi	r24, 0x02	; 2
    5884:	41 f4       	brne	.+16     	; 0x5896 <__mulsf3+0x8c>
    5886:	20 e0       	ldi	r18, 0x00	; 0
    5888:	9a 85       	ldd	r25, Y+10	; 0x0a
    588a:	8a 89       	ldd	r24, Y+18	; 0x12
    588c:	98 13       	cpse	r25, r24
    588e:	21 e0       	ldi	r18, 0x01	; 1
    5890:	2a 8b       	std	Y+18, r18	; 0x12
    5892:	b8 01       	movw	r22, r16
    5894:	b2 c0       	rjmp	.+356    	; 0x59fa <__mulsf3+0x1f0>
    5896:	cd 84       	ldd	r12, Y+13	; 0x0d
    5898:	de 84       	ldd	r13, Y+14	; 0x0e
    589a:	ef 84       	ldd	r14, Y+15	; 0x0f
    589c:	f8 88       	ldd	r15, Y+16	; 0x10
    589e:	0d 89       	ldd	r16, Y+21	; 0x15
    58a0:	1e 89       	ldd	r17, Y+22	; 0x16
    58a2:	2f 89       	ldd	r18, Y+23	; 0x17
    58a4:	38 8d       	ldd	r19, Y+24	; 0x18
    58a6:	88 24       	eor	r8, r8
    58a8:	99 24       	eor	r9, r9
    58aa:	54 01       	movw	r10, r8
    58ac:	40 e0       	ldi	r20, 0x00	; 0
    58ae:	50 e0       	ldi	r21, 0x00	; 0
    58b0:	60 e0       	ldi	r22, 0x00	; 0
    58b2:	70 e0       	ldi	r23, 0x00	; 0
    58b4:	44 24       	eor	r4, r4
    58b6:	55 24       	eor	r5, r5
    58b8:	32 01       	movw	r6, r4
    58ba:	e0 e0       	ldi	r30, 0x00	; 0
    58bc:	f0 e0       	ldi	r31, 0x00	; 0
    58be:	c6 01       	movw	r24, r12
    58c0:	81 70       	andi	r24, 0x01	; 1
    58c2:	90 70       	andi	r25, 0x00	; 0
    58c4:	89 2b       	or	r24, r25
    58c6:	d9 f0       	breq	.+54     	; 0x58fe <__mulsf3+0xf4>
    58c8:	80 0e       	add	r8, r16
    58ca:	91 1e       	adc	r9, r17
    58cc:	a2 1e       	adc	r10, r18
    58ce:	b3 1e       	adc	r11, r19
    58d0:	db 01       	movw	r26, r22
    58d2:	ca 01       	movw	r24, r20
    58d4:	84 0d       	add	r24, r4
    58d6:	95 1d       	adc	r25, r5
    58d8:	a6 1d       	adc	r26, r6
    58da:	b7 1d       	adc	r27, r7
    58dc:	40 e0       	ldi	r20, 0x00	; 0
    58de:	50 e0       	ldi	r21, 0x00	; 0
    58e0:	60 e0       	ldi	r22, 0x00	; 0
    58e2:	70 e0       	ldi	r23, 0x00	; 0
    58e4:	80 16       	cp	r8, r16
    58e6:	91 06       	cpc	r9, r17
    58e8:	a2 06       	cpc	r10, r18
    58ea:	b3 06       	cpc	r11, r19
    58ec:	20 f4       	brcc	.+8      	; 0x58f6 <__mulsf3+0xec>
    58ee:	41 e0       	ldi	r20, 0x01	; 1
    58f0:	50 e0       	ldi	r21, 0x00	; 0
    58f2:	60 e0       	ldi	r22, 0x00	; 0
    58f4:	70 e0       	ldi	r23, 0x00	; 0
    58f6:	48 0f       	add	r20, r24
    58f8:	59 1f       	adc	r21, r25
    58fa:	6a 1f       	adc	r22, r26
    58fc:	7b 1f       	adc	r23, r27
    58fe:	44 0c       	add	r4, r4
    5900:	55 1c       	adc	r5, r5
    5902:	66 1c       	adc	r6, r6
    5904:	77 1c       	adc	r7, r7
    5906:	37 ff       	sbrs	r19, 7
    5908:	08 c0       	rjmp	.+16     	; 0x591a <__mulsf3+0x110>
    590a:	81 e0       	ldi	r24, 0x01	; 1
    590c:	90 e0       	ldi	r25, 0x00	; 0
    590e:	a0 e0       	ldi	r26, 0x00	; 0
    5910:	b0 e0       	ldi	r27, 0x00	; 0
    5912:	48 2a       	or	r4, r24
    5914:	59 2a       	or	r5, r25
    5916:	6a 2a       	or	r6, r26
    5918:	7b 2a       	or	r7, r27
    591a:	31 96       	adiw	r30, 0x01	; 1
    591c:	e0 32       	cpi	r30, 0x20	; 32
    591e:	f1 05       	cpc	r31, r1
    5920:	49 f0       	breq	.+18     	; 0x5934 <__mulsf3+0x12a>
    5922:	00 0f       	add	r16, r16
    5924:	11 1f       	adc	r17, r17
    5926:	22 1f       	adc	r18, r18
    5928:	33 1f       	adc	r19, r19
    592a:	f6 94       	lsr	r15
    592c:	e7 94       	ror	r14
    592e:	d7 94       	ror	r13
    5930:	c7 94       	ror	r12
    5932:	c5 cf       	rjmp	.-118    	; 0x58be <__mulsf3+0xb4>
    5934:	8b 89       	ldd	r24, Y+19	; 0x13
    5936:	9c 89       	ldd	r25, Y+20	; 0x14
    5938:	2b 85       	ldd	r18, Y+11	; 0x0b
    593a:	3c 85       	ldd	r19, Y+12	; 0x0c
    593c:	82 0f       	add	r24, r18
    593e:	93 1f       	adc	r25, r19
    5940:	02 96       	adiw	r24, 0x02	; 2
    5942:	9c 8f       	std	Y+28, r25	; 0x1c
    5944:	8b 8f       	std	Y+27, r24	; 0x1b
    5946:	1a 8e       	std	Y+26, r1	; 0x1a
    5948:	9a 85       	ldd	r25, Y+10	; 0x0a
    594a:	8a 89       	ldd	r24, Y+18	; 0x12
    594c:	98 17       	cp	r25, r24
    594e:	11 f0       	breq	.+4      	; 0x5954 <__mulsf3+0x14a>
    5950:	81 e0       	ldi	r24, 0x01	; 1
    5952:	8a 8f       	std	Y+26, r24	; 0x1a
    5954:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5956:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5958:	17 c0       	rjmp	.+46     	; 0x5988 <__mulsf3+0x17e>
    595a:	ca 01       	movw	r24, r20
    595c:	81 70       	andi	r24, 0x01	; 1
    595e:	90 70       	andi	r25, 0x00	; 0
    5960:	89 2b       	or	r24, r25
    5962:	61 f0       	breq	.+24     	; 0x597c <__mulsf3+0x172>
    5964:	b6 94       	lsr	r11
    5966:	a7 94       	ror	r10
    5968:	97 94       	ror	r9
    596a:	87 94       	ror	r8
    596c:	80 e0       	ldi	r24, 0x00	; 0
    596e:	90 e0       	ldi	r25, 0x00	; 0
    5970:	a0 e0       	ldi	r26, 0x00	; 0
    5972:	b0 e8       	ldi	r27, 0x80	; 128
    5974:	88 2a       	or	r8, r24
    5976:	99 2a       	or	r9, r25
    5978:	aa 2a       	or	r10, r26
    597a:	bb 2a       	or	r11, r27
    597c:	76 95       	lsr	r23
    597e:	67 95       	ror	r22
    5980:	57 95       	ror	r21
    5982:	47 95       	ror	r20
    5984:	2f 5f       	subi	r18, 0xFF	; 255
    5986:	3f 4f       	sbci	r19, 0xFF	; 255
    5988:	77 fd       	sbrc	r23, 7
    598a:	e7 cf       	rjmp	.-50     	; 0x595a <__mulsf3+0x150>
    598c:	c9 01       	movw	r24, r18
    598e:	0b c0       	rjmp	.+22     	; 0x59a6 <__mulsf3+0x19c>
    5990:	44 0f       	add	r20, r20
    5992:	55 1f       	adc	r21, r21
    5994:	66 1f       	adc	r22, r22
    5996:	77 1f       	adc	r23, r23
    5998:	b7 fc       	sbrc	r11, 7
    599a:	41 60       	ori	r20, 0x01	; 1
    599c:	88 0c       	add	r8, r8
    599e:	99 1c       	adc	r9, r9
    59a0:	aa 1c       	adc	r10, r10
    59a2:	bb 1c       	adc	r11, r11
    59a4:	01 97       	sbiw	r24, 0x01	; 1
    59a6:	40 30       	cpi	r20, 0x00	; 0
    59a8:	a0 e0       	ldi	r26, 0x00	; 0
    59aa:	5a 07       	cpc	r21, r26
    59ac:	a0 e0       	ldi	r26, 0x00	; 0
    59ae:	6a 07       	cpc	r22, r26
    59b0:	a0 e4       	ldi	r26, 0x40	; 64
    59b2:	7a 07       	cpc	r23, r26
    59b4:	68 f3       	brcs	.-38     	; 0x5990 <__mulsf3+0x186>
    59b6:	9c 8f       	std	Y+28, r25	; 0x1c
    59b8:	8b 8f       	std	Y+27, r24	; 0x1b
    59ba:	db 01       	movw	r26, r22
    59bc:	ca 01       	movw	r24, r20
    59be:	8f 77       	andi	r24, 0x7F	; 127
    59c0:	90 70       	andi	r25, 0x00	; 0
    59c2:	a0 70       	andi	r26, 0x00	; 0
    59c4:	b0 70       	andi	r27, 0x00	; 0
    59c6:	80 34       	cpi	r24, 0x40	; 64
    59c8:	91 05       	cpc	r25, r1
    59ca:	a1 05       	cpc	r26, r1
    59cc:	b1 05       	cpc	r27, r1
    59ce:	61 f4       	brne	.+24     	; 0x59e8 <__mulsf3+0x1de>
    59d0:	47 fd       	sbrc	r20, 7
    59d2:	0a c0       	rjmp	.+20     	; 0x59e8 <__mulsf3+0x1de>
    59d4:	81 14       	cp	r8, r1
    59d6:	91 04       	cpc	r9, r1
    59d8:	a1 04       	cpc	r10, r1
    59da:	b1 04       	cpc	r11, r1
    59dc:	29 f0       	breq	.+10     	; 0x59e8 <__mulsf3+0x1de>
    59de:	40 5c       	subi	r20, 0xC0	; 192
    59e0:	5f 4f       	sbci	r21, 0xFF	; 255
    59e2:	6f 4f       	sbci	r22, 0xFF	; 255
    59e4:	7f 4f       	sbci	r23, 0xFF	; 255
    59e6:	40 78       	andi	r20, 0x80	; 128
    59e8:	4d 8f       	std	Y+29, r20	; 0x1d
    59ea:	5e 8f       	std	Y+30, r21	; 0x1e
    59ec:	6f 8f       	std	Y+31, r22	; 0x1f
    59ee:	78 a3       	std	Y+32, r23	; 0x20
    59f0:	83 e0       	ldi	r24, 0x03	; 3
    59f2:	89 8f       	std	Y+25, r24	; 0x19
    59f4:	be 01       	movw	r22, r28
    59f6:	67 5e       	subi	r22, 0xE7	; 231
    59f8:	7f 4f       	sbci	r23, 0xFF	; 255
    59fa:	cb 01       	movw	r24, r22
    59fc:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <__pack_f>
    5a00:	e0 e1       	ldi	r30, 0x10	; 16
    5a02:	a0 96       	adiw	r28, 0x20	; 32
    5a04:	0c 94 b6 2f 	jmp	0x5f6c	; 0x5f6c <__epilogue_restores__+0x4>

00005a08 <__floatsisf>:
    5a08:	a8 e0       	ldi	r26, 0x08	; 8
    5a0a:	b0 e0       	ldi	r27, 0x00	; 0
    5a0c:	ea e0       	ldi	r30, 0x0A	; 10
    5a0e:	fd e2       	ldi	r31, 0x2D	; 45
    5a10:	0c 94 a1 2f 	jmp	0x5f42	; 0x5f42 <__prologue_saves__+0x12>
    5a14:	9b 01       	movw	r18, r22
    5a16:	ac 01       	movw	r20, r24
    5a18:	83 e0       	ldi	r24, 0x03	; 3
    5a1a:	89 83       	std	Y+1, r24	; 0x01
    5a1c:	da 01       	movw	r26, r20
    5a1e:	c9 01       	movw	r24, r18
    5a20:	88 27       	eor	r24, r24
    5a22:	b7 fd       	sbrc	r27, 7
    5a24:	83 95       	inc	r24
    5a26:	99 27       	eor	r25, r25
    5a28:	aa 27       	eor	r26, r26
    5a2a:	bb 27       	eor	r27, r27
    5a2c:	b8 2e       	mov	r11, r24
    5a2e:	21 15       	cp	r18, r1
    5a30:	31 05       	cpc	r19, r1
    5a32:	41 05       	cpc	r20, r1
    5a34:	51 05       	cpc	r21, r1
    5a36:	19 f4       	brne	.+6      	; 0x5a3e <__floatsisf+0x36>
    5a38:	82 e0       	ldi	r24, 0x02	; 2
    5a3a:	89 83       	std	Y+1, r24	; 0x01
    5a3c:	3a c0       	rjmp	.+116    	; 0x5ab2 <__floatsisf+0xaa>
    5a3e:	88 23       	and	r24, r24
    5a40:	a9 f0       	breq	.+42     	; 0x5a6c <__floatsisf+0x64>
    5a42:	20 30       	cpi	r18, 0x00	; 0
    5a44:	80 e0       	ldi	r24, 0x00	; 0
    5a46:	38 07       	cpc	r19, r24
    5a48:	80 e0       	ldi	r24, 0x00	; 0
    5a4a:	48 07       	cpc	r20, r24
    5a4c:	80 e8       	ldi	r24, 0x80	; 128
    5a4e:	58 07       	cpc	r21, r24
    5a50:	29 f4       	brne	.+10     	; 0x5a5c <__floatsisf+0x54>
    5a52:	60 e0       	ldi	r22, 0x00	; 0
    5a54:	70 e0       	ldi	r23, 0x00	; 0
    5a56:	80 e0       	ldi	r24, 0x00	; 0
    5a58:	9f ec       	ldi	r25, 0xCF	; 207
    5a5a:	30 c0       	rjmp	.+96     	; 0x5abc <__floatsisf+0xb4>
    5a5c:	ee 24       	eor	r14, r14
    5a5e:	ff 24       	eor	r15, r15
    5a60:	87 01       	movw	r16, r14
    5a62:	e2 1a       	sub	r14, r18
    5a64:	f3 0a       	sbc	r15, r19
    5a66:	04 0b       	sbc	r16, r20
    5a68:	15 0b       	sbc	r17, r21
    5a6a:	02 c0       	rjmp	.+4      	; 0x5a70 <__floatsisf+0x68>
    5a6c:	79 01       	movw	r14, r18
    5a6e:	8a 01       	movw	r16, r20
    5a70:	8e e1       	ldi	r24, 0x1E	; 30
    5a72:	c8 2e       	mov	r12, r24
    5a74:	d1 2c       	mov	r13, r1
    5a76:	dc 82       	std	Y+4, r13	; 0x04
    5a78:	cb 82       	std	Y+3, r12	; 0x03
    5a7a:	ed 82       	std	Y+5, r14	; 0x05
    5a7c:	fe 82       	std	Y+6, r15	; 0x06
    5a7e:	0f 83       	std	Y+7, r16	; 0x07
    5a80:	18 87       	std	Y+8, r17	; 0x08
    5a82:	c8 01       	movw	r24, r16
    5a84:	b7 01       	movw	r22, r14
    5a86:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <__clzsi2>
    5a8a:	01 97       	sbiw	r24, 0x01	; 1
    5a8c:	18 16       	cp	r1, r24
    5a8e:	19 06       	cpc	r1, r25
    5a90:	84 f4       	brge	.+32     	; 0x5ab2 <__floatsisf+0xaa>
    5a92:	08 2e       	mov	r0, r24
    5a94:	04 c0       	rjmp	.+8      	; 0x5a9e <__floatsisf+0x96>
    5a96:	ee 0c       	add	r14, r14
    5a98:	ff 1c       	adc	r15, r15
    5a9a:	00 1f       	adc	r16, r16
    5a9c:	11 1f       	adc	r17, r17
    5a9e:	0a 94       	dec	r0
    5aa0:	d2 f7       	brpl	.-12     	; 0x5a96 <__floatsisf+0x8e>
    5aa2:	ed 82       	std	Y+5, r14	; 0x05
    5aa4:	fe 82       	std	Y+6, r15	; 0x06
    5aa6:	0f 83       	std	Y+7, r16	; 0x07
    5aa8:	18 87       	std	Y+8, r17	; 0x08
    5aaa:	c8 1a       	sub	r12, r24
    5aac:	d9 0a       	sbc	r13, r25
    5aae:	dc 82       	std	Y+4, r13	; 0x04
    5ab0:	cb 82       	std	Y+3, r12	; 0x03
    5ab2:	ba 82       	std	Y+2, r11	; 0x02
    5ab4:	ce 01       	movw	r24, r28
    5ab6:	01 96       	adiw	r24, 0x01	; 1
    5ab8:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <__pack_f>
    5abc:	e9 e0       	ldi	r30, 0x09	; 9
    5abe:	28 96       	adiw	r28, 0x08	; 8
    5ac0:	0c 94 bd 2f 	jmp	0x5f7a	; 0x5f7a <__epilogue_restores__+0x12>

00005ac4 <__fixsfsi>:
    5ac4:	ac e0       	ldi	r26, 0x0C	; 12
    5ac6:	b0 e0       	ldi	r27, 0x00	; 0
    5ac8:	e8 e6       	ldi	r30, 0x68	; 104
    5aca:	fd e2       	ldi	r31, 0x2D	; 45
    5acc:	0c 94 a8 2f 	jmp	0x5f50	; 0x5f50 <__prologue_saves__+0x20>
    5ad0:	69 83       	std	Y+1, r22	; 0x01
    5ad2:	7a 83       	std	Y+2, r23	; 0x02
    5ad4:	8b 83       	std	Y+3, r24	; 0x03
    5ad6:	9c 83       	std	Y+4, r25	; 0x04
    5ad8:	be 01       	movw	r22, r28
    5ada:	6b 5f       	subi	r22, 0xFB	; 251
    5adc:	7f 4f       	sbci	r23, 0xFF	; 255
    5ade:	ce 01       	movw	r24, r28
    5ae0:	01 96       	adiw	r24, 0x01	; 1
    5ae2:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__unpack_f>
    5ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ae8:	82 30       	cpi	r24, 0x02	; 2
    5aea:	a9 f1       	breq	.+106    	; 0x5b56 <__fixsfsi+0x92>
    5aec:	82 30       	cpi	r24, 0x02	; 2
    5aee:	98 f1       	brcs	.+102    	; 0x5b56 <__fixsfsi+0x92>
    5af0:	84 30       	cpi	r24, 0x04	; 4
    5af2:	21 f4       	brne	.+8      	; 0x5afc <__fixsfsi+0x38>
    5af4:	8e 81       	ldd	r24, Y+6	; 0x06
    5af6:	88 23       	and	r24, r24
    5af8:	59 f4       	brne	.+22     	; 0x5b10 <__fixsfsi+0x4c>
    5afa:	0f c0       	rjmp	.+30     	; 0x5b1a <__fixsfsi+0x56>
    5afc:	2f 81       	ldd	r18, Y+7	; 0x07
    5afe:	38 85       	ldd	r19, Y+8	; 0x08
    5b00:	37 fd       	sbrc	r19, 7
    5b02:	29 c0       	rjmp	.+82     	; 0x5b56 <__fixsfsi+0x92>
    5b04:	6e 81       	ldd	r22, Y+6	; 0x06
    5b06:	2f 31       	cpi	r18, 0x1F	; 31
    5b08:	31 05       	cpc	r19, r1
    5b0a:	64 f0       	brlt	.+24     	; 0x5b24 <__fixsfsi+0x60>
    5b0c:	66 23       	and	r22, r22
    5b0e:	29 f0       	breq	.+10     	; 0x5b1a <__fixsfsi+0x56>
    5b10:	20 e0       	ldi	r18, 0x00	; 0
    5b12:	30 e0       	ldi	r19, 0x00	; 0
    5b14:	40 e0       	ldi	r20, 0x00	; 0
    5b16:	50 e8       	ldi	r21, 0x80	; 128
    5b18:	22 c0       	rjmp	.+68     	; 0x5b5e <__fixsfsi+0x9a>
    5b1a:	2f ef       	ldi	r18, 0xFF	; 255
    5b1c:	3f ef       	ldi	r19, 0xFF	; 255
    5b1e:	4f ef       	ldi	r20, 0xFF	; 255
    5b20:	5f e7       	ldi	r21, 0x7F	; 127
    5b22:	1d c0       	rjmp	.+58     	; 0x5b5e <__fixsfsi+0x9a>
    5b24:	8e e1       	ldi	r24, 0x1E	; 30
    5b26:	90 e0       	ldi	r25, 0x00	; 0
    5b28:	82 1b       	sub	r24, r18
    5b2a:	93 0b       	sbc	r25, r19
    5b2c:	29 85       	ldd	r18, Y+9	; 0x09
    5b2e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5b30:	4b 85       	ldd	r20, Y+11	; 0x0b
    5b32:	5c 85       	ldd	r21, Y+12	; 0x0c
    5b34:	04 c0       	rjmp	.+8      	; 0x5b3e <__fixsfsi+0x7a>
    5b36:	56 95       	lsr	r21
    5b38:	47 95       	ror	r20
    5b3a:	37 95       	ror	r19
    5b3c:	27 95       	ror	r18
    5b3e:	8a 95       	dec	r24
    5b40:	d2 f7       	brpl	.-12     	; 0x5b36 <__fixsfsi+0x72>
    5b42:	66 23       	and	r22, r22
    5b44:	61 f0       	breq	.+24     	; 0x5b5e <__fixsfsi+0x9a>
    5b46:	50 95       	com	r21
    5b48:	40 95       	com	r20
    5b4a:	30 95       	com	r19
    5b4c:	21 95       	neg	r18
    5b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    5b50:	4f 4f       	sbci	r20, 0xFF	; 255
    5b52:	5f 4f       	sbci	r21, 0xFF	; 255
    5b54:	04 c0       	rjmp	.+8      	; 0x5b5e <__fixsfsi+0x9a>
    5b56:	20 e0       	ldi	r18, 0x00	; 0
    5b58:	30 e0       	ldi	r19, 0x00	; 0
    5b5a:	40 e0       	ldi	r20, 0x00	; 0
    5b5c:	50 e0       	ldi	r21, 0x00	; 0
    5b5e:	ca 01       	movw	r24, r20
    5b60:	b9 01       	movw	r22, r18
    5b62:	e2 e0       	ldi	r30, 0x02	; 2
    5b64:	2c 96       	adiw	r28, 0x0c	; 12
    5b66:	0c 94 c4 2f 	jmp	0x5f88	; 0x5f88 <__epilogue_restores__+0x20>

00005b6a <__clzsi2>:
    5b6a:	ef 92       	push	r14
    5b6c:	ff 92       	push	r15
    5b6e:	0f 93       	push	r16
    5b70:	1f 93       	push	r17
    5b72:	9b 01       	movw	r18, r22
    5b74:	ac 01       	movw	r20, r24
    5b76:	20 30       	cpi	r18, 0x00	; 0
    5b78:	80 e0       	ldi	r24, 0x00	; 0
    5b7a:	38 07       	cpc	r19, r24
    5b7c:	81 e0       	ldi	r24, 0x01	; 1
    5b7e:	48 07       	cpc	r20, r24
    5b80:	80 e0       	ldi	r24, 0x00	; 0
    5b82:	58 07       	cpc	r21, r24
    5b84:	80 f4       	brcc	.+32     	; 0x5ba6 <__clzsi2+0x3c>
    5b86:	2f 3f       	cpi	r18, 0xFF	; 255
    5b88:	31 05       	cpc	r19, r1
    5b8a:	41 05       	cpc	r20, r1
    5b8c:	51 05       	cpc	r21, r1
    5b8e:	09 f0       	breq	.+2      	; 0x5b92 <__clzsi2+0x28>
    5b90:	20 f4       	brcc	.+8      	; 0x5b9a <__clzsi2+0x30>
    5b92:	ee 24       	eor	r14, r14
    5b94:	ff 24       	eor	r15, r15
    5b96:	87 01       	movw	r16, r14
    5b98:	19 c0       	rjmp	.+50     	; 0x5bcc <__clzsi2+0x62>
    5b9a:	68 e0       	ldi	r22, 0x08	; 8
    5b9c:	e6 2e       	mov	r14, r22
    5b9e:	f1 2c       	mov	r15, r1
    5ba0:	01 2d       	mov	r16, r1
    5ba2:	11 2d       	mov	r17, r1
    5ba4:	13 c0       	rjmp	.+38     	; 0x5bcc <__clzsi2+0x62>
    5ba6:	20 30       	cpi	r18, 0x00	; 0
    5ba8:	80 e0       	ldi	r24, 0x00	; 0
    5baa:	38 07       	cpc	r19, r24
    5bac:	80 e0       	ldi	r24, 0x00	; 0
    5bae:	48 07       	cpc	r20, r24
    5bb0:	81 e0       	ldi	r24, 0x01	; 1
    5bb2:	58 07       	cpc	r21, r24
    5bb4:	30 f4       	brcc	.+12     	; 0x5bc2 <__clzsi2+0x58>
    5bb6:	90 e1       	ldi	r25, 0x10	; 16
    5bb8:	e9 2e       	mov	r14, r25
    5bba:	f1 2c       	mov	r15, r1
    5bbc:	01 2d       	mov	r16, r1
    5bbe:	11 2d       	mov	r17, r1
    5bc0:	05 c0       	rjmp	.+10     	; 0x5bcc <__clzsi2+0x62>
    5bc2:	88 e1       	ldi	r24, 0x18	; 24
    5bc4:	e8 2e       	mov	r14, r24
    5bc6:	f1 2c       	mov	r15, r1
    5bc8:	01 2d       	mov	r16, r1
    5bca:	11 2d       	mov	r17, r1
    5bcc:	80 e2       	ldi	r24, 0x20	; 32
    5bce:	90 e0       	ldi	r25, 0x00	; 0
    5bd0:	a0 e0       	ldi	r26, 0x00	; 0
    5bd2:	b0 e0       	ldi	r27, 0x00	; 0
    5bd4:	8e 19       	sub	r24, r14
    5bd6:	9f 09       	sbc	r25, r15
    5bd8:	a0 0b       	sbc	r26, r16
    5bda:	b1 0b       	sbc	r27, r17
    5bdc:	04 c0       	rjmp	.+8      	; 0x5be6 <__clzsi2+0x7c>
    5bde:	56 95       	lsr	r21
    5be0:	47 95       	ror	r20
    5be2:	37 95       	ror	r19
    5be4:	27 95       	ror	r18
    5be6:	ea 94       	dec	r14
    5be8:	d2 f7       	brpl	.-12     	; 0x5bde <__clzsi2+0x74>
    5bea:	f9 01       	movw	r30, r18
    5bec:	ef 5d       	subi	r30, 0xDF	; 223
    5bee:	fd 4f       	sbci	r31, 0xFD	; 253
    5bf0:	20 81       	ld	r18, Z
    5bf2:	82 1b       	sub	r24, r18
    5bf4:	91 09       	sbc	r25, r1
    5bf6:	a1 09       	sbc	r26, r1
    5bf8:	b1 09       	sbc	r27, r1
    5bfa:	1f 91       	pop	r17
    5bfc:	0f 91       	pop	r16
    5bfe:	ff 90       	pop	r15
    5c00:	ef 90       	pop	r14
    5c02:	08 95       	ret

00005c04 <__pack_f>:
    5c04:	9f 92       	push	r9
    5c06:	af 92       	push	r10
    5c08:	bf 92       	push	r11
    5c0a:	cf 92       	push	r12
    5c0c:	df 92       	push	r13
    5c0e:	ef 92       	push	r14
    5c10:	ff 92       	push	r15
    5c12:	0f 93       	push	r16
    5c14:	1f 93       	push	r17
    5c16:	ee 24       	eor	r14, r14
    5c18:	ff 24       	eor	r15, r15
    5c1a:	87 01       	movw	r16, r14
    5c1c:	fc 01       	movw	r30, r24
    5c1e:	24 81       	ldd	r18, Z+4	; 0x04
    5c20:	35 81       	ldd	r19, Z+5	; 0x05
    5c22:	46 81       	ldd	r20, Z+6	; 0x06
    5c24:	57 81       	ldd	r21, Z+7	; 0x07
    5c26:	91 80       	ldd	r9, Z+1	; 0x01
    5c28:	80 81       	ld	r24, Z
    5c2a:	82 30       	cpi	r24, 0x02	; 2
    5c2c:	10 f4       	brcc	.+4      	; 0x5c32 <__pack_f+0x2e>
    5c2e:	40 61       	ori	r20, 0x10	; 16
    5c30:	a2 c0       	rjmp	.+324    	; 0x5d76 <__pack_f+0x172>
    5c32:	84 30       	cpi	r24, 0x04	; 4
    5c34:	09 f4       	brne	.+2      	; 0x5c38 <__pack_f+0x34>
    5c36:	9b c0       	rjmp	.+310    	; 0x5d6e <__pack_f+0x16a>
    5c38:	82 30       	cpi	r24, 0x02	; 2
    5c3a:	29 f4       	brne	.+10     	; 0x5c46 <__pack_f+0x42>
    5c3c:	20 e0       	ldi	r18, 0x00	; 0
    5c3e:	30 e0       	ldi	r19, 0x00	; 0
    5c40:	40 e0       	ldi	r20, 0x00	; 0
    5c42:	50 e0       	ldi	r21, 0x00	; 0
    5c44:	05 c0       	rjmp	.+10     	; 0x5c50 <__pack_f+0x4c>
    5c46:	21 15       	cp	r18, r1
    5c48:	31 05       	cpc	r19, r1
    5c4a:	41 05       	cpc	r20, r1
    5c4c:	51 05       	cpc	r21, r1
    5c4e:	19 f4       	brne	.+6      	; 0x5c56 <__pack_f+0x52>
    5c50:	e0 e0       	ldi	r30, 0x00	; 0
    5c52:	f0 e0       	ldi	r31, 0x00	; 0
    5c54:	92 c0       	rjmp	.+292    	; 0x5d7a <__pack_f+0x176>
    5c56:	82 81       	ldd	r24, Z+2	; 0x02
    5c58:	93 81       	ldd	r25, Z+3	; 0x03
    5c5a:	6f ef       	ldi	r22, 0xFF	; 255
    5c5c:	82 38       	cpi	r24, 0x82	; 130
    5c5e:	96 07       	cpc	r25, r22
    5c60:	0c f0       	brlt	.+2      	; 0x5c64 <__pack_f+0x60>
    5c62:	5a c0       	rjmp	.+180    	; 0x5d18 <__pack_f+0x114>
    5c64:	62 e8       	ldi	r22, 0x82	; 130
    5c66:	7f ef       	ldi	r23, 0xFF	; 255
    5c68:	68 1b       	sub	r22, r24
    5c6a:	79 0b       	sbc	r23, r25
    5c6c:	6a 31       	cpi	r22, 0x1A	; 26
    5c6e:	71 05       	cpc	r23, r1
    5c70:	2c f0       	brlt	.+10     	; 0x5c7c <__pack_f+0x78>
    5c72:	20 e0       	ldi	r18, 0x00	; 0
    5c74:	30 e0       	ldi	r19, 0x00	; 0
    5c76:	40 e0       	ldi	r20, 0x00	; 0
    5c78:	50 e0       	ldi	r21, 0x00	; 0
    5c7a:	2a c0       	rjmp	.+84     	; 0x5cd0 <__pack_f+0xcc>
    5c7c:	aa 24       	eor	r10, r10
    5c7e:	bb 24       	eor	r11, r11
    5c80:	65 01       	movw	r12, r10
    5c82:	81 e0       	ldi	r24, 0x01	; 1
    5c84:	90 e0       	ldi	r25, 0x00	; 0
    5c86:	a0 e0       	ldi	r26, 0x00	; 0
    5c88:	b0 e0       	ldi	r27, 0x00	; 0
    5c8a:	06 2e       	mov	r0, r22
    5c8c:	04 c0       	rjmp	.+8      	; 0x5c96 <__pack_f+0x92>
    5c8e:	88 0f       	add	r24, r24
    5c90:	99 1f       	adc	r25, r25
    5c92:	aa 1f       	adc	r26, r26
    5c94:	bb 1f       	adc	r27, r27
    5c96:	0a 94       	dec	r0
    5c98:	d2 f7       	brpl	.-12     	; 0x5c8e <__pack_f+0x8a>
    5c9a:	01 97       	sbiw	r24, 0x01	; 1
    5c9c:	a1 09       	sbc	r26, r1
    5c9e:	b1 09       	sbc	r27, r1
    5ca0:	82 23       	and	r24, r18
    5ca2:	93 23       	and	r25, r19
    5ca4:	a4 23       	and	r26, r20
    5ca6:	b5 23       	and	r27, r21
    5ca8:	00 97       	sbiw	r24, 0x00	; 0
    5caa:	a1 05       	cpc	r26, r1
    5cac:	b1 05       	cpc	r27, r1
    5cae:	29 f0       	breq	.+10     	; 0x5cba <__pack_f+0xb6>
    5cb0:	71 e0       	ldi	r23, 0x01	; 1
    5cb2:	a7 2e       	mov	r10, r23
    5cb4:	b1 2c       	mov	r11, r1
    5cb6:	c1 2c       	mov	r12, r1
    5cb8:	d1 2c       	mov	r13, r1
    5cba:	04 c0       	rjmp	.+8      	; 0x5cc4 <__pack_f+0xc0>
    5cbc:	56 95       	lsr	r21
    5cbe:	47 95       	ror	r20
    5cc0:	37 95       	ror	r19
    5cc2:	27 95       	ror	r18
    5cc4:	6a 95       	dec	r22
    5cc6:	d2 f7       	brpl	.-12     	; 0x5cbc <__pack_f+0xb8>
    5cc8:	2a 29       	or	r18, r10
    5cca:	3b 29       	or	r19, r11
    5ccc:	4c 29       	or	r20, r12
    5cce:	5d 29       	or	r21, r13
    5cd0:	da 01       	movw	r26, r20
    5cd2:	c9 01       	movw	r24, r18
    5cd4:	8f 77       	andi	r24, 0x7F	; 127
    5cd6:	90 70       	andi	r25, 0x00	; 0
    5cd8:	a0 70       	andi	r26, 0x00	; 0
    5cda:	b0 70       	andi	r27, 0x00	; 0
    5cdc:	80 34       	cpi	r24, 0x40	; 64
    5cde:	91 05       	cpc	r25, r1
    5ce0:	a1 05       	cpc	r26, r1
    5ce2:	b1 05       	cpc	r27, r1
    5ce4:	39 f4       	brne	.+14     	; 0x5cf4 <__pack_f+0xf0>
    5ce6:	27 ff       	sbrs	r18, 7
    5ce8:	09 c0       	rjmp	.+18     	; 0x5cfc <__pack_f+0xf8>
    5cea:	20 5c       	subi	r18, 0xC0	; 192
    5cec:	3f 4f       	sbci	r19, 0xFF	; 255
    5cee:	4f 4f       	sbci	r20, 0xFF	; 255
    5cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    5cf2:	04 c0       	rjmp	.+8      	; 0x5cfc <__pack_f+0xf8>
    5cf4:	21 5c       	subi	r18, 0xC1	; 193
    5cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    5cf8:	4f 4f       	sbci	r20, 0xFF	; 255
    5cfa:	5f 4f       	sbci	r21, 0xFF	; 255
    5cfc:	80 e0       	ldi	r24, 0x00	; 0
    5cfe:	90 e0       	ldi	r25, 0x00	; 0
    5d00:	20 30       	cpi	r18, 0x00	; 0
    5d02:	60 e0       	ldi	r22, 0x00	; 0
    5d04:	36 07       	cpc	r19, r22
    5d06:	60 e0       	ldi	r22, 0x00	; 0
    5d08:	46 07       	cpc	r20, r22
    5d0a:	60 e4       	ldi	r22, 0x40	; 64
    5d0c:	56 07       	cpc	r21, r22
    5d0e:	10 f0       	brcs	.+4      	; 0x5d14 <__pack_f+0x110>
    5d10:	81 e0       	ldi	r24, 0x01	; 1
    5d12:	90 e0       	ldi	r25, 0x00	; 0
    5d14:	fc 01       	movw	r30, r24
    5d16:	23 c0       	rjmp	.+70     	; 0x5d5e <__pack_f+0x15a>
    5d18:	80 38       	cpi	r24, 0x80	; 128
    5d1a:	91 05       	cpc	r25, r1
    5d1c:	44 f5       	brge	.+80     	; 0x5d6e <__pack_f+0x16a>
    5d1e:	fc 01       	movw	r30, r24
    5d20:	e1 58       	subi	r30, 0x81	; 129
    5d22:	ff 4f       	sbci	r31, 0xFF	; 255
    5d24:	da 01       	movw	r26, r20
    5d26:	c9 01       	movw	r24, r18
    5d28:	8f 77       	andi	r24, 0x7F	; 127
    5d2a:	90 70       	andi	r25, 0x00	; 0
    5d2c:	a0 70       	andi	r26, 0x00	; 0
    5d2e:	b0 70       	andi	r27, 0x00	; 0
    5d30:	80 34       	cpi	r24, 0x40	; 64
    5d32:	91 05       	cpc	r25, r1
    5d34:	a1 05       	cpc	r26, r1
    5d36:	b1 05       	cpc	r27, r1
    5d38:	39 f4       	brne	.+14     	; 0x5d48 <__pack_f+0x144>
    5d3a:	27 ff       	sbrs	r18, 7
    5d3c:	09 c0       	rjmp	.+18     	; 0x5d50 <__pack_f+0x14c>
    5d3e:	20 5c       	subi	r18, 0xC0	; 192
    5d40:	3f 4f       	sbci	r19, 0xFF	; 255
    5d42:	4f 4f       	sbci	r20, 0xFF	; 255
    5d44:	5f 4f       	sbci	r21, 0xFF	; 255
    5d46:	04 c0       	rjmp	.+8      	; 0x5d50 <__pack_f+0x14c>
    5d48:	21 5c       	subi	r18, 0xC1	; 193
    5d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d4c:	4f 4f       	sbci	r20, 0xFF	; 255
    5d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    5d50:	57 ff       	sbrs	r21, 7
    5d52:	05 c0       	rjmp	.+10     	; 0x5d5e <__pack_f+0x15a>
    5d54:	56 95       	lsr	r21
    5d56:	47 95       	ror	r20
    5d58:	37 95       	ror	r19
    5d5a:	27 95       	ror	r18
    5d5c:	31 96       	adiw	r30, 0x01	; 1
    5d5e:	87 e0       	ldi	r24, 0x07	; 7
    5d60:	56 95       	lsr	r21
    5d62:	47 95       	ror	r20
    5d64:	37 95       	ror	r19
    5d66:	27 95       	ror	r18
    5d68:	8a 95       	dec	r24
    5d6a:	d1 f7       	brne	.-12     	; 0x5d60 <__pack_f+0x15c>
    5d6c:	06 c0       	rjmp	.+12     	; 0x5d7a <__pack_f+0x176>
    5d6e:	20 e0       	ldi	r18, 0x00	; 0
    5d70:	30 e0       	ldi	r19, 0x00	; 0
    5d72:	40 e0       	ldi	r20, 0x00	; 0
    5d74:	50 e0       	ldi	r21, 0x00	; 0
    5d76:	ef ef       	ldi	r30, 0xFF	; 255
    5d78:	f0 e0       	ldi	r31, 0x00	; 0
    5d7a:	e2 2e       	mov	r14, r18
    5d7c:	f3 2e       	mov	r15, r19
    5d7e:	94 2f       	mov	r25, r20
    5d80:	9f 77       	andi	r25, 0x7F	; 127
    5d82:	80 2f       	mov	r24, r16
    5d84:	80 78       	andi	r24, 0x80	; 128
    5d86:	89 2b       	or	r24, r25
    5d88:	9e 2f       	mov	r25, r30
    5d8a:	97 95       	ror	r25
    5d8c:	99 27       	eor	r25, r25
    5d8e:	97 95       	ror	r25
    5d90:	8f 77       	andi	r24, 0x7F	; 127
    5d92:	08 2f       	mov	r16, r24
    5d94:	09 2b       	or	r16, r25
    5d96:	9e 2f       	mov	r25, r30
    5d98:	96 95       	lsr	r25
    5d9a:	81 2f       	mov	r24, r17
    5d9c:	80 78       	andi	r24, 0x80	; 128
    5d9e:	89 2b       	or	r24, r25
    5da0:	97 94       	ror	r9
    5da2:	99 24       	eor	r9, r9
    5da4:	97 94       	ror	r9
    5da6:	8f 77       	andi	r24, 0x7F	; 127
    5da8:	18 2f       	mov	r17, r24
    5daa:	19 29       	or	r17, r9
    5dac:	c8 01       	movw	r24, r16
    5dae:	b7 01       	movw	r22, r14
    5db0:	1f 91       	pop	r17
    5db2:	0f 91       	pop	r16
    5db4:	ff 90       	pop	r15
    5db6:	ef 90       	pop	r14
    5db8:	df 90       	pop	r13
    5dba:	cf 90       	pop	r12
    5dbc:	bf 90       	pop	r11
    5dbe:	af 90       	pop	r10
    5dc0:	9f 90       	pop	r9
    5dc2:	08 95       	ret

00005dc4 <__unpack_f>:
    5dc4:	cf 93       	push	r28
    5dc6:	df 93       	push	r29
    5dc8:	fc 01       	movw	r30, r24
    5dca:	db 01       	movw	r26, r22
    5dcc:	20 81       	ld	r18, Z
    5dce:	31 81       	ldd	r19, Z+1	; 0x01
    5dd0:	92 81       	ldd	r25, Z+2	; 0x02
    5dd2:	49 2f       	mov	r20, r25
    5dd4:	4f 77       	andi	r20, 0x7F	; 127
    5dd6:	50 e0       	ldi	r21, 0x00	; 0
    5dd8:	99 1f       	adc	r25, r25
    5dda:	99 27       	eor	r25, r25
    5ddc:	99 1f       	adc	r25, r25
    5dde:	83 81       	ldd	r24, Z+3	; 0x03
    5de0:	e8 2f       	mov	r30, r24
    5de2:	ee 0f       	add	r30, r30
    5de4:	e9 2b       	or	r30, r25
    5de6:	6e 2f       	mov	r22, r30
    5de8:	70 e0       	ldi	r23, 0x00	; 0
    5dea:	88 1f       	adc	r24, r24
    5dec:	88 27       	eor	r24, r24
    5dee:	88 1f       	adc	r24, r24
    5df0:	ed 01       	movw	r28, r26
    5df2:	89 83       	std	Y+1, r24	; 0x01
    5df4:	ee 23       	and	r30, r30
    5df6:	71 f5       	brne	.+92     	; 0x5e54 <__unpack_f+0x90>
    5df8:	21 15       	cp	r18, r1
    5dfa:	31 05       	cpc	r19, r1
    5dfc:	41 05       	cpc	r20, r1
    5dfe:	51 05       	cpc	r21, r1
    5e00:	11 f4       	brne	.+4      	; 0x5e06 <__unpack_f+0x42>
    5e02:	82 e0       	ldi	r24, 0x02	; 2
    5e04:	2f c0       	rjmp	.+94     	; 0x5e64 <__unpack_f+0xa0>
    5e06:	6e 57       	subi	r22, 0x7E	; 126
    5e08:	70 40       	sbci	r23, 0x00	; 0
    5e0a:	fd 01       	movw	r30, r26
    5e0c:	73 83       	std	Z+3, r23	; 0x03
    5e0e:	62 83       	std	Z+2, r22	; 0x02
    5e10:	67 e0       	ldi	r22, 0x07	; 7
    5e12:	22 0f       	add	r18, r18
    5e14:	33 1f       	adc	r19, r19
    5e16:	44 1f       	adc	r20, r20
    5e18:	55 1f       	adc	r21, r21
    5e1a:	6a 95       	dec	r22
    5e1c:	d1 f7       	brne	.-12     	; 0x5e12 <__unpack_f+0x4e>
    5e1e:	83 e0       	ldi	r24, 0x03	; 3
    5e20:	8c 93       	st	X, r24
    5e22:	0a c0       	rjmp	.+20     	; 0x5e38 <__unpack_f+0x74>
    5e24:	22 0f       	add	r18, r18
    5e26:	33 1f       	adc	r19, r19
    5e28:	44 1f       	adc	r20, r20
    5e2a:	55 1f       	adc	r21, r21
    5e2c:	ed 01       	movw	r28, r26
    5e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e30:	9b 81       	ldd	r25, Y+3	; 0x03
    5e32:	01 97       	sbiw	r24, 0x01	; 1
    5e34:	9b 83       	std	Y+3, r25	; 0x03
    5e36:	8a 83       	std	Y+2, r24	; 0x02
    5e38:	20 30       	cpi	r18, 0x00	; 0
    5e3a:	e0 e0       	ldi	r30, 0x00	; 0
    5e3c:	3e 07       	cpc	r19, r30
    5e3e:	e0 e0       	ldi	r30, 0x00	; 0
    5e40:	4e 07       	cpc	r20, r30
    5e42:	e0 e4       	ldi	r30, 0x40	; 64
    5e44:	5e 07       	cpc	r21, r30
    5e46:	70 f3       	brcs	.-36     	; 0x5e24 <__unpack_f+0x60>
    5e48:	ed 01       	movw	r28, r26
    5e4a:	2c 83       	std	Y+4, r18	; 0x04
    5e4c:	3d 83       	std	Y+5, r19	; 0x05
    5e4e:	4e 83       	std	Y+6, r20	; 0x06
    5e50:	5f 83       	std	Y+7, r21	; 0x07
    5e52:	25 c0       	rjmp	.+74     	; 0x5e9e <__unpack_f+0xda>
    5e54:	ef 3f       	cpi	r30, 0xFF	; 255
    5e56:	79 f4       	brne	.+30     	; 0x5e76 <__unpack_f+0xb2>
    5e58:	21 15       	cp	r18, r1
    5e5a:	31 05       	cpc	r19, r1
    5e5c:	41 05       	cpc	r20, r1
    5e5e:	51 05       	cpc	r21, r1
    5e60:	19 f4       	brne	.+6      	; 0x5e68 <__unpack_f+0xa4>
    5e62:	84 e0       	ldi	r24, 0x04	; 4
    5e64:	8c 93       	st	X, r24
    5e66:	1b c0       	rjmp	.+54     	; 0x5e9e <__unpack_f+0xda>
    5e68:	44 ff       	sbrs	r20, 4
    5e6a:	03 c0       	rjmp	.+6      	; 0x5e72 <__unpack_f+0xae>
    5e6c:	81 e0       	ldi	r24, 0x01	; 1
    5e6e:	8c 93       	st	X, r24
    5e70:	11 c0       	rjmp	.+34     	; 0x5e94 <__unpack_f+0xd0>
    5e72:	1c 92       	st	X, r1
    5e74:	0f c0       	rjmp	.+30     	; 0x5e94 <__unpack_f+0xd0>
    5e76:	6f 57       	subi	r22, 0x7F	; 127
    5e78:	70 40       	sbci	r23, 0x00	; 0
    5e7a:	ed 01       	movw	r28, r26
    5e7c:	7b 83       	std	Y+3, r23	; 0x03
    5e7e:	6a 83       	std	Y+2, r22	; 0x02
    5e80:	83 e0       	ldi	r24, 0x03	; 3
    5e82:	8c 93       	st	X, r24
    5e84:	87 e0       	ldi	r24, 0x07	; 7
    5e86:	22 0f       	add	r18, r18
    5e88:	33 1f       	adc	r19, r19
    5e8a:	44 1f       	adc	r20, r20
    5e8c:	55 1f       	adc	r21, r21
    5e8e:	8a 95       	dec	r24
    5e90:	d1 f7       	brne	.-12     	; 0x5e86 <__unpack_f+0xc2>
    5e92:	50 64       	ori	r21, 0x40	; 64
    5e94:	fd 01       	movw	r30, r26
    5e96:	24 83       	std	Z+4, r18	; 0x04
    5e98:	35 83       	std	Z+5, r19	; 0x05
    5e9a:	46 83       	std	Z+6, r20	; 0x06
    5e9c:	57 83       	std	Z+7, r21	; 0x07
    5e9e:	df 91       	pop	r29
    5ea0:	cf 91       	pop	r28
    5ea2:	08 95       	ret

00005ea4 <__mulsi3>:
    5ea4:	62 9f       	mul	r22, r18
    5ea6:	d0 01       	movw	r26, r0
    5ea8:	73 9f       	mul	r23, r19
    5eaa:	f0 01       	movw	r30, r0
    5eac:	82 9f       	mul	r24, r18
    5eae:	e0 0d       	add	r30, r0
    5eb0:	f1 1d       	adc	r31, r1
    5eb2:	64 9f       	mul	r22, r20
    5eb4:	e0 0d       	add	r30, r0
    5eb6:	f1 1d       	adc	r31, r1
    5eb8:	92 9f       	mul	r25, r18
    5eba:	f0 0d       	add	r31, r0
    5ebc:	83 9f       	mul	r24, r19
    5ebe:	f0 0d       	add	r31, r0
    5ec0:	74 9f       	mul	r23, r20
    5ec2:	f0 0d       	add	r31, r0
    5ec4:	65 9f       	mul	r22, r21
    5ec6:	f0 0d       	add	r31, r0
    5ec8:	99 27       	eor	r25, r25
    5eca:	72 9f       	mul	r23, r18
    5ecc:	b0 0d       	add	r27, r0
    5ece:	e1 1d       	adc	r30, r1
    5ed0:	f9 1f       	adc	r31, r25
    5ed2:	63 9f       	mul	r22, r19
    5ed4:	b0 0d       	add	r27, r0
    5ed6:	e1 1d       	adc	r30, r1
    5ed8:	f9 1f       	adc	r31, r25
    5eda:	bd 01       	movw	r22, r26
    5edc:	cf 01       	movw	r24, r30
    5ede:	11 24       	eor	r1, r1
    5ee0:	08 95       	ret

00005ee2 <__udivmodhi4>:
    5ee2:	aa 1b       	sub	r26, r26
    5ee4:	bb 1b       	sub	r27, r27
    5ee6:	51 e1       	ldi	r21, 0x11	; 17
    5ee8:	07 c0       	rjmp	.+14     	; 0x5ef8 <__udivmodhi4_ep>

00005eea <__udivmodhi4_loop>:
    5eea:	aa 1f       	adc	r26, r26
    5eec:	bb 1f       	adc	r27, r27
    5eee:	a6 17       	cp	r26, r22
    5ef0:	b7 07       	cpc	r27, r23
    5ef2:	10 f0       	brcs	.+4      	; 0x5ef8 <__udivmodhi4_ep>
    5ef4:	a6 1b       	sub	r26, r22
    5ef6:	b7 0b       	sbc	r27, r23

00005ef8 <__udivmodhi4_ep>:
    5ef8:	88 1f       	adc	r24, r24
    5efa:	99 1f       	adc	r25, r25
    5efc:	5a 95       	dec	r21
    5efe:	a9 f7       	brne	.-22     	; 0x5eea <__udivmodhi4_loop>
    5f00:	80 95       	com	r24
    5f02:	90 95       	com	r25
    5f04:	bc 01       	movw	r22, r24
    5f06:	cd 01       	movw	r24, r26
    5f08:	08 95       	ret

00005f0a <__divmodhi4>:
    5f0a:	97 fb       	bst	r25, 7
    5f0c:	09 2e       	mov	r0, r25
    5f0e:	07 26       	eor	r0, r23
    5f10:	0a d0       	rcall	.+20     	; 0x5f26 <__divmodhi4_neg1>
    5f12:	77 fd       	sbrc	r23, 7
    5f14:	04 d0       	rcall	.+8      	; 0x5f1e <__divmodhi4_neg2>
    5f16:	e5 df       	rcall	.-54     	; 0x5ee2 <__udivmodhi4>
    5f18:	06 d0       	rcall	.+12     	; 0x5f26 <__divmodhi4_neg1>
    5f1a:	00 20       	and	r0, r0
    5f1c:	1a f4       	brpl	.+6      	; 0x5f24 <__divmodhi4_exit>

00005f1e <__divmodhi4_neg2>:
    5f1e:	70 95       	com	r23
    5f20:	61 95       	neg	r22
    5f22:	7f 4f       	sbci	r23, 0xFF	; 255

00005f24 <__divmodhi4_exit>:
    5f24:	08 95       	ret

00005f26 <__divmodhi4_neg1>:
    5f26:	f6 f7       	brtc	.-4      	; 0x5f24 <__divmodhi4_exit>
    5f28:	90 95       	com	r25
    5f2a:	81 95       	neg	r24
    5f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f2e:	08 95       	ret

00005f30 <__prologue_saves__>:
    5f30:	2f 92       	push	r2
    5f32:	3f 92       	push	r3
    5f34:	4f 92       	push	r4
    5f36:	5f 92       	push	r5
    5f38:	6f 92       	push	r6
    5f3a:	7f 92       	push	r7
    5f3c:	8f 92       	push	r8
    5f3e:	9f 92       	push	r9
    5f40:	af 92       	push	r10
    5f42:	bf 92       	push	r11
    5f44:	cf 92       	push	r12
    5f46:	df 92       	push	r13
    5f48:	ef 92       	push	r14
    5f4a:	ff 92       	push	r15
    5f4c:	0f 93       	push	r16
    5f4e:	1f 93       	push	r17
    5f50:	cf 93       	push	r28
    5f52:	df 93       	push	r29
    5f54:	cd b7       	in	r28, 0x3d	; 61
    5f56:	de b7       	in	r29, 0x3e	; 62
    5f58:	ca 1b       	sub	r28, r26
    5f5a:	db 0b       	sbc	r29, r27
    5f5c:	0f b6       	in	r0, 0x3f	; 63
    5f5e:	f8 94       	cli
    5f60:	de bf       	out	0x3e, r29	; 62
    5f62:	0f be       	out	0x3f, r0	; 63
    5f64:	cd bf       	out	0x3d, r28	; 61
    5f66:	19 94       	eijmp

00005f68 <__epilogue_restores__>:
    5f68:	2a 88       	ldd	r2, Y+18	; 0x12
    5f6a:	39 88       	ldd	r3, Y+17	; 0x11
    5f6c:	48 88       	ldd	r4, Y+16	; 0x10
    5f6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5f70:	6e 84       	ldd	r6, Y+14	; 0x0e
    5f72:	7d 84       	ldd	r7, Y+13	; 0x0d
    5f74:	8c 84       	ldd	r8, Y+12	; 0x0c
    5f76:	9b 84       	ldd	r9, Y+11	; 0x0b
    5f78:	aa 84       	ldd	r10, Y+10	; 0x0a
    5f7a:	b9 84       	ldd	r11, Y+9	; 0x09
    5f7c:	c8 84       	ldd	r12, Y+8	; 0x08
    5f7e:	df 80       	ldd	r13, Y+7	; 0x07
    5f80:	ee 80       	ldd	r14, Y+6	; 0x06
    5f82:	fd 80       	ldd	r15, Y+5	; 0x05
    5f84:	0c 81       	ldd	r16, Y+4	; 0x04
    5f86:	1b 81       	ldd	r17, Y+3	; 0x03
    5f88:	aa 81       	ldd	r26, Y+2	; 0x02
    5f8a:	b9 81       	ldd	r27, Y+1	; 0x01
    5f8c:	ce 0f       	add	r28, r30
    5f8e:	d1 1d       	adc	r29, r1
    5f90:	0f b6       	in	r0, 0x3f	; 63
    5f92:	f8 94       	cli
    5f94:	de bf       	out	0x3e, r29	; 62
    5f96:	0f be       	out	0x3f, r0	; 63
    5f98:	cd bf       	out	0x3d, r28	; 61
    5f9a:	ed 01       	movw	r28, r26
    5f9c:	08 95       	ret

00005f9e <do_rand>:
    5f9e:	af 92       	push	r10
    5fa0:	bf 92       	push	r11
    5fa2:	cf 92       	push	r12
    5fa4:	df 92       	push	r13
    5fa6:	ef 92       	push	r14
    5fa8:	ff 92       	push	r15
    5faa:	0f 93       	push	r16
    5fac:	1f 93       	push	r17
    5fae:	cf 93       	push	r28
    5fb0:	df 93       	push	r29
    5fb2:	ec 01       	movw	r28, r24
    5fb4:	68 81       	ld	r22, Y
    5fb6:	79 81       	ldd	r23, Y+1	; 0x01
    5fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    5fba:	9b 81       	ldd	r25, Y+3	; 0x03
    5fbc:	61 15       	cp	r22, r1
    5fbe:	71 05       	cpc	r23, r1
    5fc0:	81 05       	cpc	r24, r1
    5fc2:	91 05       	cpc	r25, r1
    5fc4:	21 f4       	brne	.+8      	; 0x5fce <do_rand+0x30>
    5fc6:	64 e2       	ldi	r22, 0x24	; 36
    5fc8:	79 ed       	ldi	r23, 0xD9	; 217
    5fca:	8b e5       	ldi	r24, 0x5B	; 91
    5fcc:	97 e0       	ldi	r25, 0x07	; 7
    5fce:	2d e1       	ldi	r18, 0x1D	; 29
    5fd0:	33 ef       	ldi	r19, 0xF3	; 243
    5fd2:	41 e0       	ldi	r20, 0x01	; 1
    5fd4:	50 e0       	ldi	r21, 0x00	; 0
    5fd6:	0e 94 6e 32 	call	0x64dc	; 0x64dc <__divmodsi4>
    5fda:	79 01       	movw	r14, r18
    5fdc:	8a 01       	movw	r16, r20
    5fde:	27 ea       	ldi	r18, 0xA7	; 167
    5fe0:	31 e4       	ldi	r19, 0x41	; 65
    5fe2:	40 e0       	ldi	r20, 0x00	; 0
    5fe4:	50 e0       	ldi	r21, 0x00	; 0
    5fe6:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <__mulsi3>
    5fea:	5b 01       	movw	r10, r22
    5fec:	6c 01       	movw	r12, r24
    5fee:	c8 01       	movw	r24, r16
    5ff0:	b7 01       	movw	r22, r14
    5ff2:	2c ee       	ldi	r18, 0xEC	; 236
    5ff4:	34 ef       	ldi	r19, 0xF4	; 244
    5ff6:	4f ef       	ldi	r20, 0xFF	; 255
    5ff8:	5f ef       	ldi	r21, 0xFF	; 255
    5ffa:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <__mulsi3>
    5ffe:	6a 0d       	add	r22, r10
    6000:	7b 1d       	adc	r23, r11
    6002:	8c 1d       	adc	r24, r12
    6004:	9d 1d       	adc	r25, r13
    6006:	97 ff       	sbrs	r25, 7
    6008:	04 c0       	rjmp	.+8      	; 0x6012 <do_rand+0x74>
    600a:	61 50       	subi	r22, 0x01	; 1
    600c:	70 40       	sbci	r23, 0x00	; 0
    600e:	80 40       	sbci	r24, 0x00	; 0
    6010:	90 48       	sbci	r25, 0x80	; 128
    6012:	68 83       	st	Y, r22
    6014:	79 83       	std	Y+1, r23	; 0x01
    6016:	8a 83       	std	Y+2, r24	; 0x02
    6018:	9b 83       	std	Y+3, r25	; 0x03
    601a:	7f 77       	andi	r23, 0x7F	; 127
    601c:	cb 01       	movw	r24, r22
    601e:	df 91       	pop	r29
    6020:	cf 91       	pop	r28
    6022:	1f 91       	pop	r17
    6024:	0f 91       	pop	r16
    6026:	ff 90       	pop	r15
    6028:	ef 90       	pop	r14
    602a:	df 90       	pop	r13
    602c:	cf 90       	pop	r12
    602e:	bf 90       	pop	r11
    6030:	af 90       	pop	r10
    6032:	08 95       	ret

00006034 <rand_r>:
    6034:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <do_rand>
    6038:	08 95       	ret

0000603a <rand>:
    603a:	81 e2       	ldi	r24, 0x21	; 33
    603c:	93 e0       	ldi	r25, 0x03	; 3
    603e:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <do_rand>
    6042:	08 95       	ret

00006044 <srand>:
    6044:	a0 e0       	ldi	r26, 0x00	; 0
    6046:	b0 e0       	ldi	r27, 0x00	; 0
    6048:	80 93 21 03 	sts	0x0321, r24
    604c:	90 93 22 03 	sts	0x0322, r25
    6050:	a0 93 23 03 	sts	0x0323, r26
    6054:	b0 93 24 03 	sts	0x0324, r27
    6058:	08 95       	ret
    605a:	f5 d0       	rcall	.+490    	; 0x6246 <__fp_pscA>
    605c:	58 f0       	brcs	.+22     	; 0x6074 <srand+0x30>
    605e:	80 e8       	ldi	r24, 0x80	; 128
    6060:	91 e0       	ldi	r25, 0x01	; 1
    6062:	09 f4       	brne	.+2      	; 0x6066 <srand+0x22>
    6064:	9e ef       	ldi	r25, 0xFE	; 254
    6066:	f6 d0       	rcall	.+492    	; 0x6254 <__fp_pscB>
    6068:	28 f0       	brcs	.+10     	; 0x6074 <srand+0x30>
    606a:	40 e8       	ldi	r20, 0x80	; 128
    606c:	51 e0       	ldi	r21, 0x01	; 1
    606e:	59 f4       	brne	.+22     	; 0x6086 <atan2+0xe>
    6070:	5e ef       	ldi	r21, 0xFE	; 254
    6072:	09 c0       	rjmp	.+18     	; 0x6086 <atan2+0xe>
    6074:	c0 c0       	rjmp	.+384    	; 0x61f6 <__fp_nan>
    6076:	28 c1       	rjmp	.+592    	; 0x62c8 <__fp_zero>

00006078 <atan2>:
    6078:	e9 2f       	mov	r30, r25
    607a:	e0 78       	andi	r30, 0x80	; 128
    607c:	03 d1       	rcall	.+518    	; 0x6284 <__fp_split3>
    607e:	68 f3       	brcs	.-38     	; 0x605a <srand+0x16>
    6080:	09 2e       	mov	r0, r25
    6082:	05 2a       	or	r0, r21
    6084:	c1 f3       	breq	.-16     	; 0x6076 <srand+0x32>
    6086:	26 17       	cp	r18, r22
    6088:	37 07       	cpc	r19, r23
    608a:	48 07       	cpc	r20, r24
    608c:	59 07       	cpc	r21, r25
    608e:	38 f0       	brcs	.+14     	; 0x609e <atan2+0x26>
    6090:	0e 2e       	mov	r0, r30
    6092:	07 f8       	bld	r0, 7
    6094:	e0 25       	eor	r30, r0
    6096:	69 f0       	breq	.+26     	; 0x60b2 <atan2+0x3a>
    6098:	e0 25       	eor	r30, r0
    609a:	e0 64       	ori	r30, 0x40	; 64
    609c:	0a c0       	rjmp	.+20     	; 0x60b2 <atan2+0x3a>
    609e:	ef 63       	ori	r30, 0x3F	; 63
    60a0:	07 f8       	bld	r0, 7
    60a2:	00 94       	com	r0
    60a4:	07 fa       	bst	r0, 7
    60a6:	db 01       	movw	r26, r22
    60a8:	b9 01       	movw	r22, r18
    60aa:	9d 01       	movw	r18, r26
    60ac:	dc 01       	movw	r26, r24
    60ae:	ca 01       	movw	r24, r20
    60b0:	ad 01       	movw	r20, r26
    60b2:	ef 93       	push	r30
    60b4:	41 d0       	rcall	.+130    	; 0x6138 <__divsf3_pse>
    60b6:	d5 d0       	rcall	.+426    	; 0x6262 <__fp_round>
    60b8:	0a d0       	rcall	.+20     	; 0x60ce <atan>
    60ba:	5f 91       	pop	r21
    60bc:	55 23       	and	r21, r21
    60be:	31 f0       	breq	.+12     	; 0x60cc <atan2+0x54>
    60c0:	2b ed       	ldi	r18, 0xDB	; 219
    60c2:	3f e0       	ldi	r19, 0x0F	; 15
    60c4:	49 e4       	ldi	r20, 0x49	; 73
    60c6:	50 fd       	sbrc	r21, 0
    60c8:	49 ec       	ldi	r20, 0xC9	; 201
    60ca:	92 c1       	rjmp	.+804    	; 0x63f0 <__addsf3>
    60cc:	08 95       	ret

000060ce <atan>:
    60ce:	df 93       	push	r29
    60d0:	dd 27       	eor	r29, r29
    60d2:	b9 2f       	mov	r27, r25
    60d4:	bf 77       	andi	r27, 0x7F	; 127
    60d6:	40 e8       	ldi	r20, 0x80	; 128
    60d8:	5f e3       	ldi	r21, 0x3F	; 63
    60da:	16 16       	cp	r1, r22
    60dc:	17 06       	cpc	r1, r23
    60de:	48 07       	cpc	r20, r24
    60e0:	5b 07       	cpc	r21, r27
    60e2:	10 f4       	brcc	.+4      	; 0x60e8 <atan+0x1a>
    60e4:	d9 2f       	mov	r29, r25
    60e6:	f7 d0       	rcall	.+494    	; 0x62d6 <inverse>
    60e8:	9f 93       	push	r25
    60ea:	8f 93       	push	r24
    60ec:	7f 93       	push	r23
    60ee:	6f 93       	push	r22
    60f0:	5a d1       	rcall	.+692    	; 0x63a6 <square>
    60f2:	ee e4       	ldi	r30, 0x4E	; 78
    60f4:	f1 e0       	ldi	r31, 0x01	; 1
    60f6:	82 d0       	rcall	.+260    	; 0x61fc <__fp_powser>
    60f8:	b4 d0       	rcall	.+360    	; 0x6262 <__fp_round>
    60fa:	2f 91       	pop	r18
    60fc:	3f 91       	pop	r19
    60fe:	4f 91       	pop	r20
    6100:	5f 91       	pop	r21
    6102:	fa d0       	rcall	.+500    	; 0x62f8 <__mulsf3x>
    6104:	dd 23       	and	r29, r29
    6106:	49 f0       	breq	.+18     	; 0x611a <atan+0x4c>
    6108:	90 58       	subi	r25, 0x80	; 128
    610a:	a2 ea       	ldi	r26, 0xA2	; 162
    610c:	2a ed       	ldi	r18, 0xDA	; 218
    610e:	3f e0       	ldi	r19, 0x0F	; 15
    6110:	49 ec       	ldi	r20, 0xC9	; 201
    6112:	5f e3       	ldi	r21, 0x3F	; 63
    6114:	d0 78       	andi	r29, 0x80	; 128
    6116:	5d 27       	eor	r21, r29
    6118:	7c d1       	rcall	.+760    	; 0x6412 <__addsf3x>
    611a:	df 91       	pop	r29
    611c:	a2 c0       	rjmp	.+324    	; 0x6262 <__fp_round>
    611e:	9a d0       	rcall	.+308    	; 0x6254 <__fp_pscB>
    6120:	40 f0       	brcs	.+16     	; 0x6132 <atan+0x64>
    6122:	91 d0       	rcall	.+290    	; 0x6246 <__fp_pscA>
    6124:	30 f0       	brcs	.+12     	; 0x6132 <atan+0x64>
    6126:	21 f4       	brne	.+8      	; 0x6130 <atan+0x62>
    6128:	5f 3f       	cpi	r21, 0xFF	; 255
    612a:	19 f0       	breq	.+6      	; 0x6132 <atan+0x64>
    612c:	5e c0       	rjmp	.+188    	; 0x61ea <__fp_inf>
    612e:	51 11       	cpse	r21, r1
    6130:	cc c0       	rjmp	.+408    	; 0x62ca <__fp_szero>
    6132:	61 c0       	rjmp	.+194    	; 0x61f6 <__fp_nan>

00006134 <__divsf3x>:
    6134:	a7 d0       	rcall	.+334    	; 0x6284 <__fp_split3>
    6136:	98 f3       	brcs	.-26     	; 0x611e <atan+0x50>

00006138 <__divsf3_pse>:
    6138:	99 23       	and	r25, r25
    613a:	c9 f3       	breq	.-14     	; 0x612e <atan+0x60>
    613c:	55 23       	and	r21, r21
    613e:	b1 f3       	breq	.-20     	; 0x612c <atan+0x5e>
    6140:	95 1b       	sub	r25, r21
    6142:	55 0b       	sbc	r21, r21
    6144:	bb 27       	eor	r27, r27
    6146:	aa 27       	eor	r26, r26
    6148:	62 17       	cp	r22, r18
    614a:	73 07       	cpc	r23, r19
    614c:	84 07       	cpc	r24, r20
    614e:	38 f0       	brcs	.+14     	; 0x615e <__divsf3_pse+0x26>
    6150:	9f 5f       	subi	r25, 0xFF	; 255
    6152:	5f 4f       	sbci	r21, 0xFF	; 255
    6154:	22 0f       	add	r18, r18
    6156:	33 1f       	adc	r19, r19
    6158:	44 1f       	adc	r20, r20
    615a:	aa 1f       	adc	r26, r26
    615c:	a9 f3       	breq	.-22     	; 0x6148 <__divsf3_pse+0x10>
    615e:	33 d0       	rcall	.+102    	; 0x61c6 <__divsf3_pse+0x8e>
    6160:	0e 2e       	mov	r0, r30
    6162:	3a f0       	brmi	.+14     	; 0x6172 <__divsf3_pse+0x3a>
    6164:	e0 e8       	ldi	r30, 0x80	; 128
    6166:	30 d0       	rcall	.+96     	; 0x61c8 <__divsf3_pse+0x90>
    6168:	91 50       	subi	r25, 0x01	; 1
    616a:	50 40       	sbci	r21, 0x00	; 0
    616c:	e6 95       	lsr	r30
    616e:	00 1c       	adc	r0, r0
    6170:	ca f7       	brpl	.-14     	; 0x6164 <__divsf3_pse+0x2c>
    6172:	29 d0       	rcall	.+82     	; 0x61c6 <__divsf3_pse+0x8e>
    6174:	fe 2f       	mov	r31, r30
    6176:	27 d0       	rcall	.+78     	; 0x61c6 <__divsf3_pse+0x8e>
    6178:	66 0f       	add	r22, r22
    617a:	77 1f       	adc	r23, r23
    617c:	88 1f       	adc	r24, r24
    617e:	bb 1f       	adc	r27, r27
    6180:	26 17       	cp	r18, r22
    6182:	37 07       	cpc	r19, r23
    6184:	48 07       	cpc	r20, r24
    6186:	ab 07       	cpc	r26, r27
    6188:	b0 e8       	ldi	r27, 0x80	; 128
    618a:	09 f0       	breq	.+2      	; 0x618e <__divsf3_pse+0x56>
    618c:	bb 0b       	sbc	r27, r27
    618e:	80 2d       	mov	r24, r0
    6190:	bf 01       	movw	r22, r30
    6192:	ff 27       	eor	r31, r31
    6194:	93 58       	subi	r25, 0x83	; 131
    6196:	5f 4f       	sbci	r21, 0xFF	; 255
    6198:	2a f0       	brmi	.+10     	; 0x61a4 <__divsf3_pse+0x6c>
    619a:	9e 3f       	cpi	r25, 0xFE	; 254
    619c:	51 05       	cpc	r21, r1
    619e:	68 f0       	brcs	.+26     	; 0x61ba <__divsf3_pse+0x82>
    61a0:	24 c0       	rjmp	.+72     	; 0x61ea <__fp_inf>
    61a2:	93 c0       	rjmp	.+294    	; 0x62ca <__fp_szero>
    61a4:	5f 3f       	cpi	r21, 0xFF	; 255
    61a6:	ec f3       	brlt	.-6      	; 0x61a2 <__divsf3_pse+0x6a>
    61a8:	98 3e       	cpi	r25, 0xE8	; 232
    61aa:	dc f3       	brlt	.-10     	; 0x61a2 <__divsf3_pse+0x6a>
    61ac:	86 95       	lsr	r24
    61ae:	77 95       	ror	r23
    61b0:	67 95       	ror	r22
    61b2:	b7 95       	ror	r27
    61b4:	f7 95       	ror	r31
    61b6:	9f 5f       	subi	r25, 0xFF	; 255
    61b8:	c9 f7       	brne	.-14     	; 0x61ac <__divsf3_pse+0x74>
    61ba:	88 0f       	add	r24, r24
    61bc:	91 1d       	adc	r25, r1
    61be:	96 95       	lsr	r25
    61c0:	87 95       	ror	r24
    61c2:	97 f9       	bld	r25, 7
    61c4:	08 95       	ret
    61c6:	e1 e0       	ldi	r30, 0x01	; 1
    61c8:	66 0f       	add	r22, r22
    61ca:	77 1f       	adc	r23, r23
    61cc:	88 1f       	adc	r24, r24
    61ce:	bb 1f       	adc	r27, r27
    61d0:	62 17       	cp	r22, r18
    61d2:	73 07       	cpc	r23, r19
    61d4:	84 07       	cpc	r24, r20
    61d6:	ba 07       	cpc	r27, r26
    61d8:	20 f0       	brcs	.+8      	; 0x61e2 <__divsf3_pse+0xaa>
    61da:	62 1b       	sub	r22, r18
    61dc:	73 0b       	sbc	r23, r19
    61de:	84 0b       	sbc	r24, r20
    61e0:	ba 0b       	sbc	r27, r26
    61e2:	ee 1f       	adc	r30, r30
    61e4:	88 f7       	brcc	.-30     	; 0x61c8 <__divsf3_pse+0x90>
    61e6:	e0 95       	com	r30
    61e8:	08 95       	ret

000061ea <__fp_inf>:
    61ea:	97 f9       	bld	r25, 7
    61ec:	9f 67       	ori	r25, 0x7F	; 127
    61ee:	80 e8       	ldi	r24, 0x80	; 128
    61f0:	70 e0       	ldi	r23, 0x00	; 0
    61f2:	60 e0       	ldi	r22, 0x00	; 0
    61f4:	08 95       	ret

000061f6 <__fp_nan>:
    61f6:	9f ef       	ldi	r25, 0xFF	; 255
    61f8:	80 ec       	ldi	r24, 0xC0	; 192
    61fa:	08 95       	ret

000061fc <__fp_powser>:
    61fc:	df 93       	push	r29
    61fe:	cf 93       	push	r28
    6200:	1f 93       	push	r17
    6202:	0f 93       	push	r16
    6204:	ff 92       	push	r15
    6206:	ef 92       	push	r14
    6208:	df 92       	push	r13
    620a:	7b 01       	movw	r14, r22
    620c:	8c 01       	movw	r16, r24
    620e:	68 94       	set
    6210:	05 c0       	rjmp	.+10     	; 0x621c <__fp_powser+0x20>
    6212:	da 2e       	mov	r13, r26
    6214:	ef 01       	movw	r28, r30
    6216:	70 d0       	rcall	.+224    	; 0x62f8 <__mulsf3x>
    6218:	fe 01       	movw	r30, r28
    621a:	e8 94       	clt
    621c:	a5 91       	lpm	r26, Z+
    621e:	25 91       	lpm	r18, Z+
    6220:	35 91       	lpm	r19, Z+
    6222:	45 91       	lpm	r20, Z+
    6224:	55 91       	lpm	r21, Z+
    6226:	ae f3       	brts	.-22     	; 0x6212 <__fp_powser+0x16>
    6228:	ef 01       	movw	r28, r30
    622a:	f3 d0       	rcall	.+486    	; 0x6412 <__addsf3x>
    622c:	fe 01       	movw	r30, r28
    622e:	97 01       	movw	r18, r14
    6230:	a8 01       	movw	r20, r16
    6232:	da 94       	dec	r13
    6234:	79 f7       	brne	.-34     	; 0x6214 <__fp_powser+0x18>
    6236:	df 90       	pop	r13
    6238:	ef 90       	pop	r14
    623a:	ff 90       	pop	r15
    623c:	0f 91       	pop	r16
    623e:	1f 91       	pop	r17
    6240:	cf 91       	pop	r28
    6242:	df 91       	pop	r29
    6244:	08 95       	ret

00006246 <__fp_pscA>:
    6246:	00 24       	eor	r0, r0
    6248:	0a 94       	dec	r0
    624a:	16 16       	cp	r1, r22
    624c:	17 06       	cpc	r1, r23
    624e:	18 06       	cpc	r1, r24
    6250:	09 06       	cpc	r0, r25
    6252:	08 95       	ret

00006254 <__fp_pscB>:
    6254:	00 24       	eor	r0, r0
    6256:	0a 94       	dec	r0
    6258:	12 16       	cp	r1, r18
    625a:	13 06       	cpc	r1, r19
    625c:	14 06       	cpc	r1, r20
    625e:	05 06       	cpc	r0, r21
    6260:	08 95       	ret

00006262 <__fp_round>:
    6262:	09 2e       	mov	r0, r25
    6264:	03 94       	inc	r0
    6266:	00 0c       	add	r0, r0
    6268:	11 f4       	brne	.+4      	; 0x626e <__fp_round+0xc>
    626a:	88 23       	and	r24, r24
    626c:	52 f0       	brmi	.+20     	; 0x6282 <__fp_round+0x20>
    626e:	bb 0f       	add	r27, r27
    6270:	40 f4       	brcc	.+16     	; 0x6282 <__fp_round+0x20>
    6272:	bf 2b       	or	r27, r31
    6274:	11 f4       	brne	.+4      	; 0x627a <__fp_round+0x18>
    6276:	60 ff       	sbrs	r22, 0
    6278:	04 c0       	rjmp	.+8      	; 0x6282 <__fp_round+0x20>
    627a:	6f 5f       	subi	r22, 0xFF	; 255
    627c:	7f 4f       	sbci	r23, 0xFF	; 255
    627e:	8f 4f       	sbci	r24, 0xFF	; 255
    6280:	9f 4f       	sbci	r25, 0xFF	; 255
    6282:	08 95       	ret

00006284 <__fp_split3>:
    6284:	57 fd       	sbrc	r21, 7
    6286:	90 58       	subi	r25, 0x80	; 128
    6288:	44 0f       	add	r20, r20
    628a:	55 1f       	adc	r21, r21
    628c:	59 f0       	breq	.+22     	; 0x62a4 <__fp_splitA+0x10>
    628e:	5f 3f       	cpi	r21, 0xFF	; 255
    6290:	71 f0       	breq	.+28     	; 0x62ae <__fp_splitA+0x1a>
    6292:	47 95       	ror	r20

00006294 <__fp_splitA>:
    6294:	88 0f       	add	r24, r24
    6296:	97 fb       	bst	r25, 7
    6298:	99 1f       	adc	r25, r25
    629a:	61 f0       	breq	.+24     	; 0x62b4 <__fp_splitA+0x20>
    629c:	9f 3f       	cpi	r25, 0xFF	; 255
    629e:	79 f0       	breq	.+30     	; 0x62be <__fp_splitA+0x2a>
    62a0:	87 95       	ror	r24
    62a2:	08 95       	ret
    62a4:	12 16       	cp	r1, r18
    62a6:	13 06       	cpc	r1, r19
    62a8:	14 06       	cpc	r1, r20
    62aa:	55 1f       	adc	r21, r21
    62ac:	f2 cf       	rjmp	.-28     	; 0x6292 <__fp_split3+0xe>
    62ae:	46 95       	lsr	r20
    62b0:	f1 df       	rcall	.-30     	; 0x6294 <__fp_splitA>
    62b2:	08 c0       	rjmp	.+16     	; 0x62c4 <__fp_splitA+0x30>
    62b4:	16 16       	cp	r1, r22
    62b6:	17 06       	cpc	r1, r23
    62b8:	18 06       	cpc	r1, r24
    62ba:	99 1f       	adc	r25, r25
    62bc:	f1 cf       	rjmp	.-30     	; 0x62a0 <__fp_splitA+0xc>
    62be:	86 95       	lsr	r24
    62c0:	71 05       	cpc	r23, r1
    62c2:	61 05       	cpc	r22, r1
    62c4:	08 94       	sec
    62c6:	08 95       	ret

000062c8 <__fp_zero>:
    62c8:	e8 94       	clt

000062ca <__fp_szero>:
    62ca:	bb 27       	eor	r27, r27
    62cc:	66 27       	eor	r22, r22
    62ce:	77 27       	eor	r23, r23
    62d0:	cb 01       	movw	r24, r22
    62d2:	97 f9       	bld	r25, 7
    62d4:	08 95       	ret

000062d6 <inverse>:
    62d6:	9b 01       	movw	r18, r22
    62d8:	ac 01       	movw	r20, r24
    62da:	60 e0       	ldi	r22, 0x00	; 0
    62dc:	70 e0       	ldi	r23, 0x00	; 0
    62de:	80 e8       	ldi	r24, 0x80	; 128
    62e0:	9f e3       	ldi	r25, 0x3F	; 63
    62e2:	ea c0       	rjmp	.+468    	; 0x64b8 <__divsf3>
    62e4:	b0 df       	rcall	.-160    	; 0x6246 <__fp_pscA>
    62e6:	28 f0       	brcs	.+10     	; 0x62f2 <inverse+0x1c>
    62e8:	b5 df       	rcall	.-150    	; 0x6254 <__fp_pscB>
    62ea:	18 f0       	brcs	.+6      	; 0x62f2 <inverse+0x1c>
    62ec:	95 23       	and	r25, r21
    62ee:	09 f0       	breq	.+2      	; 0x62f2 <inverse+0x1c>
    62f0:	7c cf       	rjmp	.-264    	; 0x61ea <__fp_inf>
    62f2:	81 cf       	rjmp	.-254    	; 0x61f6 <__fp_nan>
    62f4:	11 24       	eor	r1, r1
    62f6:	e9 cf       	rjmp	.-46     	; 0x62ca <__fp_szero>

000062f8 <__mulsf3x>:
    62f8:	c5 df       	rcall	.-118    	; 0x6284 <__fp_split3>
    62fa:	a0 f3       	brcs	.-24     	; 0x62e4 <inverse+0xe>

000062fc <__mulsf3_pse>:
    62fc:	95 9f       	mul	r25, r21
    62fe:	d1 f3       	breq	.-12     	; 0x62f4 <inverse+0x1e>
    6300:	95 0f       	add	r25, r21
    6302:	50 e0       	ldi	r21, 0x00	; 0
    6304:	55 1f       	adc	r21, r21
    6306:	62 9f       	mul	r22, r18
    6308:	f0 01       	movw	r30, r0
    630a:	72 9f       	mul	r23, r18
    630c:	bb 27       	eor	r27, r27
    630e:	f0 0d       	add	r31, r0
    6310:	b1 1d       	adc	r27, r1
    6312:	63 9f       	mul	r22, r19
    6314:	aa 27       	eor	r26, r26
    6316:	f0 0d       	add	r31, r0
    6318:	b1 1d       	adc	r27, r1
    631a:	aa 1f       	adc	r26, r26
    631c:	64 9f       	mul	r22, r20
    631e:	66 27       	eor	r22, r22
    6320:	b0 0d       	add	r27, r0
    6322:	a1 1d       	adc	r26, r1
    6324:	66 1f       	adc	r22, r22
    6326:	82 9f       	mul	r24, r18
    6328:	22 27       	eor	r18, r18
    632a:	b0 0d       	add	r27, r0
    632c:	a1 1d       	adc	r26, r1
    632e:	62 1f       	adc	r22, r18
    6330:	73 9f       	mul	r23, r19
    6332:	b0 0d       	add	r27, r0
    6334:	a1 1d       	adc	r26, r1
    6336:	62 1f       	adc	r22, r18
    6338:	83 9f       	mul	r24, r19
    633a:	a0 0d       	add	r26, r0
    633c:	61 1d       	adc	r22, r1
    633e:	22 1f       	adc	r18, r18
    6340:	74 9f       	mul	r23, r20
    6342:	33 27       	eor	r19, r19
    6344:	a0 0d       	add	r26, r0
    6346:	61 1d       	adc	r22, r1
    6348:	23 1f       	adc	r18, r19
    634a:	84 9f       	mul	r24, r20
    634c:	60 0d       	add	r22, r0
    634e:	21 1d       	adc	r18, r1
    6350:	82 2f       	mov	r24, r18
    6352:	76 2f       	mov	r23, r22
    6354:	6a 2f       	mov	r22, r26
    6356:	11 24       	eor	r1, r1
    6358:	9f 57       	subi	r25, 0x7F	; 127
    635a:	50 40       	sbci	r21, 0x00	; 0
    635c:	8a f0       	brmi	.+34     	; 0x6380 <__mulsf3_pse+0x84>
    635e:	e1 f0       	breq	.+56     	; 0x6398 <__mulsf3_pse+0x9c>
    6360:	88 23       	and	r24, r24
    6362:	4a f0       	brmi	.+18     	; 0x6376 <__mulsf3_pse+0x7a>
    6364:	ee 0f       	add	r30, r30
    6366:	ff 1f       	adc	r31, r31
    6368:	bb 1f       	adc	r27, r27
    636a:	66 1f       	adc	r22, r22
    636c:	77 1f       	adc	r23, r23
    636e:	88 1f       	adc	r24, r24
    6370:	91 50       	subi	r25, 0x01	; 1
    6372:	50 40       	sbci	r21, 0x00	; 0
    6374:	a9 f7       	brne	.-22     	; 0x6360 <__mulsf3_pse+0x64>
    6376:	9e 3f       	cpi	r25, 0xFE	; 254
    6378:	51 05       	cpc	r21, r1
    637a:	70 f0       	brcs	.+28     	; 0x6398 <__mulsf3_pse+0x9c>
    637c:	36 cf       	rjmp	.-404    	; 0x61ea <__fp_inf>
    637e:	a5 cf       	rjmp	.-182    	; 0x62ca <__fp_szero>
    6380:	5f 3f       	cpi	r21, 0xFF	; 255
    6382:	ec f3       	brlt	.-6      	; 0x637e <__mulsf3_pse+0x82>
    6384:	98 3e       	cpi	r25, 0xE8	; 232
    6386:	dc f3       	brlt	.-10     	; 0x637e <__mulsf3_pse+0x82>
    6388:	86 95       	lsr	r24
    638a:	77 95       	ror	r23
    638c:	67 95       	ror	r22
    638e:	b7 95       	ror	r27
    6390:	f7 95       	ror	r31
    6392:	e7 95       	ror	r30
    6394:	9f 5f       	subi	r25, 0xFF	; 255
    6396:	c1 f7       	brne	.-16     	; 0x6388 <__mulsf3_pse+0x8c>
    6398:	fe 2b       	or	r31, r30
    639a:	88 0f       	add	r24, r24
    639c:	91 1d       	adc	r25, r1
    639e:	96 95       	lsr	r25
    63a0:	87 95       	ror	r24
    63a2:	97 f9       	bld	r25, 7
    63a4:	08 95       	ret

000063a6 <square>:
    63a6:	9b 01       	movw	r18, r22
    63a8:	ac 01       	movw	r20, r24
    63aa:	2f ca       	rjmp	.-2978   	; 0x580a <__mulsf3>

000063ac <__eerd_byte_m2560>:
    63ac:	f9 99       	sbic	0x1f, 1	; 31
    63ae:	fe cf       	rjmp	.-4      	; 0x63ac <__eerd_byte_m2560>
    63b0:	92 bd       	out	0x22, r25	; 34
    63b2:	81 bd       	out	0x21, r24	; 33
    63b4:	f8 9a       	sbi	0x1f, 0	; 31
    63b6:	99 27       	eor	r25, r25
    63b8:	80 b5       	in	r24, 0x20	; 32
    63ba:	08 95       	ret

000063bc <__eerd_word_m2560>:
    63bc:	a8 e1       	ldi	r26, 0x18	; 24
    63be:	b0 e0       	ldi	r27, 0x00	; 0
    63c0:	42 e0       	ldi	r20, 0x02	; 2
    63c2:	50 e0       	ldi	r21, 0x00	; 0
    63c4:	0c 94 60 32 	jmp	0x64c0	; 0x64c0 <__eerd_blraw_m2560>

000063c8 <__eewr_byte_m2560>:
    63c8:	26 2f       	mov	r18, r22

000063ca <__eewr_r18_m2560>:
    63ca:	f9 99       	sbic	0x1f, 1	; 31
    63cc:	fe cf       	rjmp	.-4      	; 0x63ca <__eewr_r18_m2560>
    63ce:	1f ba       	out	0x1f, r1	; 31
    63d0:	92 bd       	out	0x22, r25	; 34
    63d2:	81 bd       	out	0x21, r24	; 33
    63d4:	20 bd       	out	0x20, r18	; 32
    63d6:	0f b6       	in	r0, 0x3f	; 63
    63d8:	f8 94       	cli
    63da:	fa 9a       	sbi	0x1f, 2	; 31
    63dc:	f9 9a       	sbi	0x1f, 1	; 31
    63de:	0f be       	out	0x3f, r0	; 63
    63e0:	01 96       	adiw	r24, 0x01	; 1
    63e2:	08 95       	ret

000063e4 <__eewr_word_m2560>:
    63e4:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <__eewr_byte_m2560>
    63e8:	27 2f       	mov	r18, r23
    63ea:	0c 94 e5 31 	jmp	0x63ca	; 0x63ca <__eewr_r18_m2560>

000063ee <__subsf3>:
    63ee:	50 58       	subi	r21, 0x80	; 128

000063f0 <__addsf3>:
    63f0:	bb 27       	eor	r27, r27
    63f2:	aa 27       	eor	r26, r26
    63f4:	0e d0       	rcall	.+28     	; 0x6412 <__addsf3x>
    63f6:	35 cf       	rjmp	.-406    	; 0x6262 <__fp_round>
    63f8:	26 df       	rcall	.-436    	; 0x6246 <__fp_pscA>
    63fa:	30 f0       	brcs	.+12     	; 0x6408 <__addsf3+0x18>
    63fc:	2b df       	rcall	.-426    	; 0x6254 <__fp_pscB>
    63fe:	20 f0       	brcs	.+8      	; 0x6408 <__addsf3+0x18>
    6400:	31 f4       	brne	.+12     	; 0x640e <__addsf3+0x1e>
    6402:	9f 3f       	cpi	r25, 0xFF	; 255
    6404:	11 f4       	brne	.+4      	; 0x640a <__addsf3+0x1a>
    6406:	1e f4       	brtc	.+6      	; 0x640e <__addsf3+0x1e>
    6408:	f6 ce       	rjmp	.-532    	; 0x61f6 <__fp_nan>
    640a:	0e f4       	brtc	.+2      	; 0x640e <__addsf3+0x1e>
    640c:	e0 95       	com	r30
    640e:	e7 fb       	bst	r30, 7
    6410:	ec ce       	rjmp	.-552    	; 0x61ea <__fp_inf>

00006412 <__addsf3x>:
    6412:	e9 2f       	mov	r30, r25
    6414:	37 df       	rcall	.-402    	; 0x6284 <__fp_split3>
    6416:	80 f3       	brcs	.-32     	; 0x63f8 <__addsf3+0x8>
    6418:	ba 17       	cp	r27, r26
    641a:	62 07       	cpc	r22, r18
    641c:	73 07       	cpc	r23, r19
    641e:	84 07       	cpc	r24, r20
    6420:	95 07       	cpc	r25, r21
    6422:	18 f0       	brcs	.+6      	; 0x642a <__addsf3x+0x18>
    6424:	71 f4       	brne	.+28     	; 0x6442 <__addsf3x+0x30>
    6426:	9e f5       	brtc	.+102    	; 0x648e <__addsf3x+0x7c>
    6428:	4f cf       	rjmp	.-354    	; 0x62c8 <__fp_zero>
    642a:	0e f4       	brtc	.+2      	; 0x642e <__addsf3x+0x1c>
    642c:	e0 95       	com	r30
    642e:	0b 2e       	mov	r0, r27
    6430:	ba 2f       	mov	r27, r26
    6432:	a0 2d       	mov	r26, r0
    6434:	0b 01       	movw	r0, r22
    6436:	b9 01       	movw	r22, r18
    6438:	90 01       	movw	r18, r0
    643a:	0c 01       	movw	r0, r24
    643c:	ca 01       	movw	r24, r20
    643e:	a0 01       	movw	r20, r0
    6440:	11 24       	eor	r1, r1
    6442:	ff 27       	eor	r31, r31
    6444:	59 1b       	sub	r21, r25
    6446:	99 f0       	breq	.+38     	; 0x646e <__addsf3x+0x5c>
    6448:	59 3f       	cpi	r21, 0xF9	; 249
    644a:	50 f4       	brcc	.+20     	; 0x6460 <__addsf3x+0x4e>
    644c:	50 3e       	cpi	r21, 0xE0	; 224
    644e:	68 f1       	brcs	.+90     	; 0x64aa <__addsf3x+0x98>
    6450:	1a 16       	cp	r1, r26
    6452:	f0 40       	sbci	r31, 0x00	; 0
    6454:	a2 2f       	mov	r26, r18
    6456:	23 2f       	mov	r18, r19
    6458:	34 2f       	mov	r19, r20
    645a:	44 27       	eor	r20, r20
    645c:	58 5f       	subi	r21, 0xF8	; 248
    645e:	f3 cf       	rjmp	.-26     	; 0x6446 <__addsf3x+0x34>
    6460:	46 95       	lsr	r20
    6462:	37 95       	ror	r19
    6464:	27 95       	ror	r18
    6466:	a7 95       	ror	r26
    6468:	f0 40       	sbci	r31, 0x00	; 0
    646a:	53 95       	inc	r21
    646c:	c9 f7       	brne	.-14     	; 0x6460 <__addsf3x+0x4e>
    646e:	7e f4       	brtc	.+30     	; 0x648e <__addsf3x+0x7c>
    6470:	1f 16       	cp	r1, r31
    6472:	ba 0b       	sbc	r27, r26
    6474:	62 0b       	sbc	r22, r18
    6476:	73 0b       	sbc	r23, r19
    6478:	84 0b       	sbc	r24, r20
    647a:	ba f0       	brmi	.+46     	; 0x64aa <__addsf3x+0x98>
    647c:	91 50       	subi	r25, 0x01	; 1
    647e:	a1 f0       	breq	.+40     	; 0x64a8 <__addsf3x+0x96>
    6480:	ff 0f       	add	r31, r31
    6482:	bb 1f       	adc	r27, r27
    6484:	66 1f       	adc	r22, r22
    6486:	77 1f       	adc	r23, r23
    6488:	88 1f       	adc	r24, r24
    648a:	c2 f7       	brpl	.-16     	; 0x647c <__addsf3x+0x6a>
    648c:	0e c0       	rjmp	.+28     	; 0x64aa <__addsf3x+0x98>
    648e:	ba 0f       	add	r27, r26
    6490:	62 1f       	adc	r22, r18
    6492:	73 1f       	adc	r23, r19
    6494:	84 1f       	adc	r24, r20
    6496:	48 f4       	brcc	.+18     	; 0x64aa <__addsf3x+0x98>
    6498:	87 95       	ror	r24
    649a:	77 95       	ror	r23
    649c:	67 95       	ror	r22
    649e:	b7 95       	ror	r27
    64a0:	f7 95       	ror	r31
    64a2:	9e 3f       	cpi	r25, 0xFE	; 254
    64a4:	08 f0       	brcs	.+2      	; 0x64a8 <__addsf3x+0x96>
    64a6:	b3 cf       	rjmp	.-154    	; 0x640e <__addsf3+0x1e>
    64a8:	93 95       	inc	r25
    64aa:	88 0f       	add	r24, r24
    64ac:	08 f0       	brcs	.+2      	; 0x64b0 <__addsf3x+0x9e>
    64ae:	99 27       	eor	r25, r25
    64b0:	ee 0f       	add	r30, r30
    64b2:	97 95       	ror	r25
    64b4:	87 95       	ror	r24
    64b6:	08 95       	ret

000064b8 <__divsf3>:
    64b8:	3d de       	rcall	.-902    	; 0x6134 <__divsf3x>
    64ba:	d3 ce       	rjmp	.-602    	; 0x6262 <__fp_round>

000064bc <__eerd_block_m2560>:
    64bc:	dc 01       	movw	r26, r24
    64be:	cb 01       	movw	r24, r22

000064c0 <__eerd_blraw_m2560>:
    64c0:	fc 01       	movw	r30, r24
    64c2:	f9 99       	sbic	0x1f, 1	; 31
    64c4:	fe cf       	rjmp	.-4      	; 0x64c2 <__eerd_blraw_m2560+0x2>
    64c6:	06 c0       	rjmp	.+12     	; 0x64d4 <__eerd_blraw_m2560+0x14>
    64c8:	f2 bd       	out	0x22, r31	; 34
    64ca:	e1 bd       	out	0x21, r30	; 33
    64cc:	f8 9a       	sbi	0x1f, 0	; 31
    64ce:	31 96       	adiw	r30, 0x01	; 1
    64d0:	00 b4       	in	r0, 0x20	; 32
    64d2:	0d 92       	st	X+, r0
    64d4:	41 50       	subi	r20, 0x01	; 1
    64d6:	50 40       	sbci	r21, 0x00	; 0
    64d8:	b8 f7       	brcc	.-18     	; 0x64c8 <__eerd_blraw_m2560+0x8>
    64da:	08 95       	ret

000064dc <__divmodsi4>:
    64dc:	97 fb       	bst	r25, 7
    64de:	09 2e       	mov	r0, r25
    64e0:	05 26       	eor	r0, r21
    64e2:	0e d0       	rcall	.+28     	; 0x6500 <__divmodsi4_neg1>
    64e4:	57 fd       	sbrc	r21, 7
    64e6:	04 d0       	rcall	.+8      	; 0x64f0 <__divmodsi4_neg2>
    64e8:	14 d0       	rcall	.+40     	; 0x6512 <__udivmodsi4>
    64ea:	0a d0       	rcall	.+20     	; 0x6500 <__divmodsi4_neg1>
    64ec:	00 1c       	adc	r0, r0
    64ee:	38 f4       	brcc	.+14     	; 0x64fe <__divmodsi4_exit>

000064f0 <__divmodsi4_neg2>:
    64f0:	50 95       	com	r21
    64f2:	40 95       	com	r20
    64f4:	30 95       	com	r19
    64f6:	21 95       	neg	r18
    64f8:	3f 4f       	sbci	r19, 0xFF	; 255
    64fa:	4f 4f       	sbci	r20, 0xFF	; 255
    64fc:	5f 4f       	sbci	r21, 0xFF	; 255

000064fe <__divmodsi4_exit>:
    64fe:	08 95       	ret

00006500 <__divmodsi4_neg1>:
    6500:	f6 f7       	brtc	.-4      	; 0x64fe <__divmodsi4_exit>
    6502:	90 95       	com	r25
    6504:	80 95       	com	r24
    6506:	70 95       	com	r23
    6508:	61 95       	neg	r22
    650a:	7f 4f       	sbci	r23, 0xFF	; 255
    650c:	8f 4f       	sbci	r24, 0xFF	; 255
    650e:	9f 4f       	sbci	r25, 0xFF	; 255
    6510:	08 95       	ret

00006512 <__udivmodsi4>:
    6512:	a1 e2       	ldi	r26, 0x21	; 33
    6514:	1a 2e       	mov	r1, r26
    6516:	aa 1b       	sub	r26, r26
    6518:	bb 1b       	sub	r27, r27
    651a:	fd 01       	movw	r30, r26
    651c:	0d c0       	rjmp	.+26     	; 0x6538 <__udivmodsi4_ep>

0000651e <__udivmodsi4_loop>:
    651e:	aa 1f       	adc	r26, r26
    6520:	bb 1f       	adc	r27, r27
    6522:	ee 1f       	adc	r30, r30
    6524:	ff 1f       	adc	r31, r31
    6526:	a2 17       	cp	r26, r18
    6528:	b3 07       	cpc	r27, r19
    652a:	e4 07       	cpc	r30, r20
    652c:	f5 07       	cpc	r31, r21
    652e:	20 f0       	brcs	.+8      	; 0x6538 <__udivmodsi4_ep>
    6530:	a2 1b       	sub	r26, r18
    6532:	b3 0b       	sbc	r27, r19
    6534:	e4 0b       	sbc	r30, r20
    6536:	f5 0b       	sbc	r31, r21

00006538 <__udivmodsi4_ep>:
    6538:	66 1f       	adc	r22, r22
    653a:	77 1f       	adc	r23, r23
    653c:	88 1f       	adc	r24, r24
    653e:	99 1f       	adc	r25, r25
    6540:	1a 94       	dec	r1
    6542:	69 f7       	brne	.-38     	; 0x651e <__udivmodsi4_loop>
    6544:	60 95       	com	r22
    6546:	70 95       	com	r23
    6548:	80 95       	com	r24
    654a:	90 95       	com	r25
    654c:	9b 01       	movw	r18, r22
    654e:	ac 01       	movw	r20, r24
    6550:	bd 01       	movw	r22, r26
    6552:	cf 01       	movw	r24, r30
    6554:	08 95       	ret

00006556 <_exit>:
    6556:	ff cf       	rjmp	.-2      	; 0x6556 <_exit>
