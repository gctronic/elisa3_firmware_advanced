
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00005ed0  00005f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005ed0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025b  00800324  00800324  00006088  2**0
                  ALLOC
  3 .stab         000025ec  00000000  00000000  00006088  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000088f  00000000  00000000  00008674  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b8  00000000  00000000  00008f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000011f6  00000000  00000000  000091bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004985  00000000  00000000  0000a3b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000017df  00000000  00000000  0000ed36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005732  00000000  00000000  00010515  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007e0  00000000  00000000  00015c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000115d  00000000  00000000  00016428  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001760  00000000  00000000  00017585  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000219  00000000  00000000  00018ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000190  00000000  00000000  00018efe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__vector_32>
      84:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <__vector_42>
      ac:	0c 94 c5 1d 	jmp	0x3b8a	; 0x3b8a <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 18 1d 	jmp	0x3a30	; 0x3a30 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	07 0f       	add	r16, r23
      e6:	eb 0e       	add	r14, r27
      e8:	b9 0e       	add	r11, r25
      ea:	7c 0f       	add	r23, r28
      ec:	46 0f       	add	r20, r22
      ee:	6f 0f       	add	r22, r31
      f0:	90 0e       	add	r9, r16
      f2:	74 0e       	add	r7, r20
      f4:	47 0e       	add	r4, r23
      f6:	2f 0e       	add	r2, r31
      f8:	d0 0d       	add	r29, r0
      fa:	d0 0d       	add	r29, r0
      fc:	d0 0d       	add	r29, r0
      fe:	d0 0d       	add	r29, r0
     100:	d0 0d       	add	r29, r0
     102:	d0 0d       	add	r29, r0
     104:	23 0e       	add	r2, r19
     106:	18 0e       	add	r1, r24
     108:	d0 0d       	add	r29, r0
     10a:	d0 0d       	add	r29, r0
     10c:	d0 0d       	add	r29, r0
     10e:	d0 0d       	add	r29, r0
     110:	d0 0d       	add	r29, r0
     112:	d0 0d       	add	r29, r0
     114:	d0 0d       	add	r29, r0
     116:	d0 0d       	add	r29, r0
     118:	d0 0d       	add	r29, r0
     11a:	d0 0d       	add	r29, r0
     11c:	d0 0d       	add	r29, r0
     11e:	d0 0d       	add	r29, r0
     120:	47 0e       	add	r4, r23
     122:	b9 0e       	add	r11, r25
     124:	0c 0e       	add	r0, r28
     126:	07 0e       	add	r0, r23
     128:	d0 0d       	add	r29, r0
     12a:	d0 0d       	add	r29, r0
     12c:	d0 0d       	add	r29, r0
     12e:	d0 0d       	add	r29, r0
     130:	d0 0d       	add	r29, r0
     132:	d0 0d       	add	r29, r0
     134:	d0 0d       	add	r29, r0
     136:	d0 0d       	add	r29, r0
     138:	d0 0d       	add	r29, r0
     13a:	d0 0d       	add	r29, r0
     13c:	d0 0d       	add	r29, r0
     13e:	d0 0d       	add	r29, r0
     140:	46 0f       	add	r20, r22
     142:	90 0e       	add	r9, r16
     144:	d0 0d       	add	r29, r0
     146:	d0 0d       	add	r29, r0
     148:	07 0f       	add	r16, r23
     14a:	6f 0f       	add	r22, r31
     14c:	30 0f       	add	r19, r16
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e0 ed       	ldi	r30, 0xD0	; 208
     194:	fe e5       	ldi	r31, 0x5E	; 94
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a4 32       	cpi	r26, 0x24	; 36
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	15 e0       	ldi	r17, 0x05	; 5
     1a4:	a4 e2       	ldi	r26, 0x24	; 36
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	af 37       	cpi	r26, 0x7F	; 127
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 67 2f 	jmp	0x5ece	; 0x5ece <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	8f 92       	push	r8
     1c0:	9f 92       	push	r9
     1c2:	af 92       	push	r10
     1c4:	bf 92       	push	r11
     1c6:	cf 92       	push	r12
     1c8:	df 92       	push	r13
     1ca:	ef 92       	push	r14
     1cc:	ff 92       	push	r15
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;

	initPeripherals();
     1d6:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <initPeripherals>

	calibrateSensors();
     1da:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <calibrateSensors>

	initBehaviors();
     1de:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <initBehaviors>

	startTime = getTime100MicroSec();
     1e2:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
     1e6:	7b 01       	movw	r14, r22
     1e8:	8c 01       	movw	r16, r24


int main(void) {

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;
     1ea:	cc 24       	eor	r12, r12
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5 || currentSelector==7) {
				pwm_red = rand() % 255;
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d0 e0       	ldi	r29, 0x00	; 0
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
						pwm_red = 255;
     1f0:	dd 24       	eor	r13, r13
     1f2:	da 94       	dec	r13
						pwm_green = 255;
						pwm_blue = 254;
     1f4:	6e ef       	ldi	r22, 0xFE	; 254
     1f6:	96 2e       	mov	r9, r22
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
     1f8:	52 e0       	ldi	r21, 0x02	; 2
     1fa:	b5 2e       	mov	r11, r21
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
								setLeftSpeed(-20);
								demoStartTime = getTime100MicroSec();
								demoState = 4;
     1fc:	44 e0       	ldi	r20, 0x04	; 4
     1fe:	a4 2e       	mov	r10, r20
							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
								setRightSpeed(20);
								setLeftSpeed(-20);								
								demoStartTime = getTime100MicroSec();
								demoState = 5;							
     200:	35 e0       	ldi	r19, 0x05	; 5
     202:	83 2e       	mov	r8, r19
	startTime = getTime100MicroSec();


	while(1) {

		currentSelector = getSelector();	// update selector position
     204:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <getSelector>
     208:	80 93 3f 05 	sts	0x053F, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     20c:	0e 94 24 23 	call	0x4648	; 0x4648 <readAccelXYZ>

		computeAngle();
     210:	0e 94 60 28 	call	0x50c0	; 0x50c0 <computeAngle>
	
		endTime = getTime100MicroSec();
     214:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     218:	6e 19       	sub	r22, r14
     21a:	7f 09       	sbc	r23, r15
     21c:	80 0b       	sbc	r24, r16
     21e:	91 0b       	sbc	r25, r17
     220:	6e 31       	cpi	r22, 0x1E	; 30
     222:	2b e4       	ldi	r18, 0x4B	; 75
     224:	72 07       	cpc	r23, r18
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	82 07       	cpc	r24, r18
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	92 07       	cpc	r25, r18
     22e:	08 f0       	brcs	.+2      	; 0x232 <main+0x74>
     230:	9a c0       	rjmp	.+308    	; 0x366 <main+0x1a8>

			startTime = getTime100MicroSec();
		}


		handleIRRemoteCommands();
     232:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <handleIRRemoteCommands>


		handleRFCommands();
     236:	0e 94 69 08 	call	0x10d2	; 0x10d2 <handleRFCommands>

		if(currentSelector != 6) {
     23a:	80 91 3f 05 	lds	r24, 0x053F
     23e:	86 30       	cpi	r24, 0x06	; 6
     240:	09 f0       	breq	.+2      	; 0x244 <main+0x86>
     242:	6e c0       	rjmp	.+220    	; 0x320 <main+0x162>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     244:	90 91 17 05 	lds	r25, 0x0517
     248:	91 30       	cpi	r25, 0x01	; 1
     24a:	09 f4       	brne	.+2      	; 0x24e <main+0x90>
     24c:	49 c2       	rjmp	.+1170   	; 0x6e0 <main+0x522>
     24e:	91 30       	cpi	r25, 0x01	; 1
     250:	08 f0       	brcs	.+2      	; 0x254 <main+0x96>
     252:	ee c1       	rjmp	.+988    	; 0x630 <main+0x472>
						case 0:
							setRightSpeed(0);
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	0e 94 de 1c 	call	0x39bc	; 0x39bc <setRightSpeed>
							setLeftSpeed(0);
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	0e 94 a4 1c 	call	0x3948	; 0x3948 <setLeftSpeed>
							turnOffGreenLeds();
     260:	0e 94 c5 21 	call	0x438a	; 0x438a <turnOffGreenLeds>
							pwm_red=255;
     264:	d0 92 0c 02 	sts	0x020C, r13
							pwm_green=255;
     268:	d0 92 0d 02 	sts	0x020D, r13
							pwm_blue=255;
     26c:	d0 92 0e 02 	sts	0x020E, r13
							updateRedLed(pwm_red);
     270:	8f ef       	ldi	r24, 0xFF	; 255
     272:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <updateRedLed>
							updateGreenLed(pwm_green);
     276:	80 91 0d 02 	lds	r24, 0x020D
     27a:	0e 94 00 21 	call	0x4200	; 0x4200 <updateGreenLed>
							updateBlueLed(pwm_blue);
     27e:	80 91 0e 02 	lds	r24, 0x020E
     282:	0e 94 14 21 	call	0x4228	; 0x4228 <updateBlueLed>
							LED_IR1_HIGH;
     286:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     288:	45 9a       	sbi	0x08, 5	; 8
     28a:	90 91 3f 05 	lds	r25, 0x053F
					}
					break;

		}

		if(currentSelector != 0) {
     28e:	99 23       	and	r25, r25
     290:	09 f0       	breq	.+2      	; 0x294 <main+0xd6>
     292:	64 c0       	rjmp	.+200    	; 0x35c <main+0x19e>
     294:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     296:	c8 16       	cp	r12, r24
     298:	09 f4       	brne	.+2      	; 0x29c <main+0xde>
     29a:	b4 cf       	rjmp	.-152    	; 0x204 <main+0x46>
			disableObstacleAvoidance();
     29c:	0e 94 a5 20 	call	0x414a	; 0x414a <disableObstacleAvoidance>
			disableCliffAvoidance();
     2a0:	0e 94 ac 20 	call	0x4158	; 0x4158 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     2a4:	80 91 0b 01 	lds	r24, 0x010B
     2a8:	81 60       	ori	r24, 0x01	; 1
     2aa:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     2ae:	80 91 0b 01 	lds	r24, 0x010B
     2b2:	82 60       	ori	r24, 0x02	; 2
     2b4:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     2b8:	80 91 0b 01 	lds	r24, 0x010B
     2bc:	84 60       	ori	r24, 0x04	; 4
     2be:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     2c2:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     2c4:	80 91 0b 01 	lds	r24, 0x010B
     2c8:	80 61       	ori	r24, 0x10	; 16
     2ca:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     2ce:	80 91 0b 01 	lds	r24, 0x010B
     2d2:	80 62       	ori	r24, 0x20	; 32
     2d4:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     2d8:	80 91 0b 01 	lds	r24, 0x010B
     2dc:	80 64       	ori	r24, 0x40	; 64
     2de:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     2e2:	80 91 0b 01 	lds	r24, 0x010B
     2e6:	80 68       	ori	r24, 0x80	; 128
     2e8:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     2ec:	d0 92 0c 02 	sts	0x020C, r13
			pwm_green = 255;
     2f0:	d0 92 0d 02 	sts	0x020D, r13
			pwm_blue = 255;
     2f4:	d0 92 0e 02 	sts	0x020E, r13
			updateRedLed(pwm_red);
     2f8:	8f ef       	ldi	r24, 0xFF	; 255
     2fa:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <updateRedLed>
			updateGreenLed(pwm_green);
     2fe:	80 91 0d 02 	lds	r24, 0x020D
     302:	0e 94 00 21 	call	0x4200	; 0x4200 <updateGreenLed>
			updateBlueLed(pwm_blue);
     306:	80 91 0e 02 	lds	r24, 0x020E
     30a:	0e 94 14 21 	call	0x4228	; 0x4228 <updateBlueLed>
			setRightSpeed(0);
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 de 1c 	call	0x39bc	; 0x39bc <setRightSpeed>
			setLeftSpeed(0);
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 a4 1c 	call	0x3948	; 0x3948 <setLeftSpeed>
     31a:	c0 90 3f 05 	lds	r12, 0x053F
     31e:	72 cf       	rjmp	.-284    	; 0x204 <main+0x46>


		handleRFCommands();

		if(currentSelector != 6) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
		}

		switch(currentSelector) {
     326:	90 91 3f 05 	lds	r25, 0x053F
     32a:	89 2f       	mov	r24, r25
     32c:	96 30       	cpi	r25, 0x06	; 6
     32e:	09 f4       	brne	.+2      	; 0x332 <main+0x174>
     330:	89 cf       	rjmp	.-238    	; 0x244 <main+0x86>
     332:	97 30       	cpi	r25, 0x07	; 7
     334:	60 f5       	brcc	.+88     	; 0x38e <main+0x1d0>
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	09 f4       	brne	.+2      	; 0x33c <main+0x17e>
     33a:	71 c0       	rjmp	.+226    	; 0x41e <main+0x260>
     33c:	93 30       	cpi	r25, 0x03	; 3
     33e:	08 f0       	brcs	.+2      	; 0x342 <main+0x184>
     340:	fa c0       	rjmp	.+500    	; 0x536 <main+0x378>
     342:	99 23       	and	r25, r25
     344:	09 f4       	brne	.+2      	; 0x348 <main+0x18a>
     346:	97 c0       	rjmp	.+302    	; 0x476 <main+0x2b8>
     348:	91 30       	cpi	r25, 0x01	; 1
     34a:	09 f0       	breq	.+2      	; 0x34e <main+0x190>
     34c:	a0 cf       	rjmp	.-192    	; 0x28e <main+0xd0>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     34e:	0e 94 a1 20 	call	0x4142	; 0x4142 <enableObstacleAvoidance>
     352:	90 91 3f 05 	lds	r25, 0x053F
					}
					break;

		}

		if(currentSelector != 0) {
     356:	99 23       	and	r25, r25
     358:	09 f4       	brne	.+2      	; 0x35c <main+0x19e>
     35a:	9c cf       	rjmp	.-200    	; 0x294 <main+0xd6>
			handleMotorsWithSpeedController();  
     35c:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <handleMotorsWithSpeedController>
     360:	80 91 3f 05 	lds	r24, 0x053F
     364:	98 cf       	rjmp	.-208    	; 0x296 <main+0xd8>

		computeAngle();
	
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     366:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5 || currentSelector==7) {
     36a:	80 91 3f 05 	lds	r24, 0x053F
     36e:	98 2f       	mov	r25, r24
     370:	94 50       	subi	r25, 0x04	; 4
     372:	92 30       	cpi	r25, 0x02	; 2
     374:	08 f4       	brcc	.+2      	; 0x378 <main+0x1ba>
     376:	58 c0       	rjmp	.+176    	; 0x428 <main+0x26a>
     378:	87 30       	cpi	r24, 0x07	; 7
     37a:	09 f4       	brne	.+2      	; 0x37e <main+0x1c0>
     37c:	55 c0       	rjmp	.+170    	; 0x428 <main+0x26a>
				pwm_red = rand() % 255;
				pwm_green = rand() % 255;
				pwm_blue = rand() % 255;
			} else if(currentSelector==6) {
     37e:	86 30       	cpi	r24, 0x06	; 6
     380:	09 f4       	brne	.+2      	; 0x384 <main+0x1c6>
     382:	3e c1       	rjmp	.+636    	; 0x600 <main+0x442>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     384:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
     388:	7b 01       	movw	r14, r22
     38a:	8c 01       	movw	r16, r24
     38c:	52 cf       	rjmp	.-348    	; 0x232 <main+0x74>

		if(currentSelector != 6) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     38e:	9a 30       	cpi	r25, 0x0A	; 10
     390:	09 f4       	brne	.+2      	; 0x394 <main+0x1d6>
     392:	bf c0       	rjmp	.+382    	; 0x512 <main+0x354>
     394:	9b 30       	cpi	r25, 0x0B	; 11
     396:	f8 f4       	brcc	.+62     	; 0x3d6 <main+0x218>
     398:	98 30       	cpi	r25, 0x08	; 8
     39a:	09 f4       	brne	.+2      	; 0x39e <main+0x1e0>
     39c:	5b c0       	rjmp	.+182    	; 0x454 <main+0x296>
     39e:	99 30       	cpi	r25, 0x09	; 9
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <main+0x1e6>
     3a2:	6e c0       	rjmp	.+220    	; 0x480 <main+0x2c2>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 9:	if(leftMotSteps <= 3000) {
     3a4:	80 91 db 03 	lds	r24, 0x03DB
     3a8:	90 91 dc 03 	lds	r25, 0x03DC
     3ac:	a0 91 dd 03 	lds	r26, 0x03DD
     3b0:	b0 91 de 03 	lds	r27, 0x03DE
     3b4:	89 3b       	cpi	r24, 0xB9	; 185
     3b6:	4b e0       	ldi	r20, 0x0B	; 11
     3b8:	94 07       	cpc	r25, r20
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	a4 07       	cpc	r26, r20
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	b4 07       	cpc	r27, r20
     3c2:	14 f5       	brge	.+68     	; 0x408 <main+0x24a>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     3c4:	88 e2       	ldi	r24, 0x28	; 40
     3c6:	0e 94 a4 1c 	call	0x3948	; 0x3948 <setLeftSpeed>
						setRightSpeed(40);
     3ca:	88 e2       	ldi	r24, 0x28	; 40
     3cc:	0e 94 de 1c 	call	0x39bc	; 0x39bc <setRightSpeed>
     3d0:	90 91 3f 05 	lds	r25, 0x053F
     3d4:	5c cf       	rjmp	.-328    	; 0x28e <main+0xd0>

		if(currentSelector != 6) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     3d6:	9c 30       	cpi	r25, 0x0C	; 12
     3d8:	09 f4       	brne	.+2      	; 0x3dc <main+0x21e>
     3da:	00 c1       	rjmp	.+512    	; 0x5dc <main+0x41e>
     3dc:	9c 30       	cpi	r25, 0x0C	; 12
     3de:	08 f4       	brcc	.+2      	; 0x3e2 <main+0x224>
     3e0:	eb c0       	rjmp	.+470    	; 0x5b8 <main+0x3fa>
     3e2:	9d 30       	cpi	r25, 0x0D	; 13
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <main+0x22a>
     3e6:	53 cf       	rjmp	.-346    	; 0x28e <main+0xd0>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
     3e8:	80 91 db 03 	lds	r24, 0x03DB
     3ec:	90 91 dc 03 	lds	r25, 0x03DC
     3f0:	a0 91 dd 03 	lds	r26, 0x03DD
     3f4:	b0 91 de 03 	lds	r27, 0x03DE
     3f8:	89 35       	cpi	r24, 0x59	; 89
     3fa:	4b e1       	ldi	r20, 0x1B	; 27
     3fc:	94 07       	cpc	r25, r20
     3fe:	40 e0       	ldi	r20, 0x00	; 0
     400:	a4 07       	cpc	r26, r20
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	b4 07       	cpc	r27, r20
     406:	f4 f2       	brlt	.-68     	; 0x3c4 <main+0x206>
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 a4 1c 	call	0x3948	; 0x3948 <setLeftSpeed>
						setRightSpeed(0);
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 de 1c 	call	0x39bc	; 0x39bc <setRightSpeed>
     414:	90 91 3f 05 	lds	r25, 0x053F
     418:	3a cf       	rjmp	.-396    	; 0x28e <main+0xd0>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     41a:	0e 94 a1 20 	call	0x4142	; 0x4142 <enableObstacleAvoidance>
					enableCliffAvoidance();
     41e:	0e 94 a8 20 	call	0x4150	; 0x4150 <enableCliffAvoidance>
     422:	90 91 3f 05 	lds	r25, 0x053F
					break;
     426:	33 cf       	rjmp	.-410    	; 0x28e <main+0xd0>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5 || currentSelector==7) {
				pwm_red = rand() % 255;
     428:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <rand>
     42c:	be 01       	movw	r22, r28
     42e:	0e 94 49 2c 	call	0x5892	; 0x5892 <__divmodhi4>
     432:	80 93 0c 02 	sts	0x020C, r24
				pwm_green = rand() % 255;
     436:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <rand>
     43a:	be 01       	movw	r22, r28
     43c:	0e 94 49 2c 	call	0x5892	; 0x5892 <__divmodhi4>
     440:	80 93 0d 02 	sts	0x020D, r24
				pwm_blue = rand() % 255;
     444:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <rand>
     448:	be 01       	movw	r22, r28
     44a:	0e 94 49 2c 	call	0x5892	; 0x5892 <__divmodhi4>
     44e:	80 93 0e 02 	sts	0x020E, r24
     452:	98 cf       	rjmp	.-208    	; 0x384 <main+0x1c6>
					updateGreenLed(pwm_green);
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	if(leftMotSteps <= 2000) {
     454:	80 91 db 03 	lds	r24, 0x03DB
     458:	90 91 dc 03 	lds	r25, 0x03DC
     45c:	a0 91 dd 03 	lds	r26, 0x03DD
     460:	b0 91 de 03 	lds	r27, 0x03DE
     464:	81 3d       	cpi	r24, 0xD1	; 209
     466:	27 e0       	ldi	r18, 0x07	; 7
     468:	92 07       	cpc	r25, r18
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	a2 07       	cpc	r26, r18
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	b2 07       	cpc	r27, r18
     472:	54 f6       	brge	.-108    	; 0x408 <main+0x24a>
     474:	a7 cf       	rjmp	.-178    	; 0x3c4 <main+0x206>
		}

		switch(currentSelector) {
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     476:	0e 94 30 1a 	call	0x3460	; 0x3460 <handleMotorsWithNoController>
     47a:	90 91 3f 05 	lds	r25, 0x053F
					break;
     47e:	07 cf       	rjmp	.-498    	; 0x28e <main+0xd0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     480:	80 91 43 05 	lds	r24, 0x0543
     484:	82 30       	cpi	r24, 0x02	; 2
     486:	09 f4       	brne	.+2      	; 0x48a <main+0x2cc>
     488:	d4 c2       	rjmp	.+1448   	; 0xa32 <main+0x874>
     48a:	83 30       	cpi	r24, 0x03	; 3
     48c:	08 f0       	brcs	.+2      	; 0x490 <main+0x2d2>
     48e:	ef c0       	rjmp	.+478    	; 0x66e <main+0x4b0>
     490:	88 23       	and	r24, r24
     492:	09 f0       	breq	.+2      	; 0x496 <main+0x2d8>
     494:	aa c2       	rjmp	.+1364   	; 0x9ea <main+0x82c>
						case 0:	// move around
							turnOnGreenLeds();
     496:	0e 94 de 21 	call	0x43bc	; 0x43bc <turnOnGreenLeds>
							lineFound = 0;
     49a:	10 92 44 05 	sts	0x0544, r1
							enableObstacleAvoidance();
     49e:	0e 94 a1 20 	call	0x4142	; 0x4142 <enableObstacleAvoidance>
							setRightSpeed(20);
     4a2:	84 e1       	ldi	r24, 0x14	; 20
     4a4:	0e 94 de 1c 	call	0x39bc	; 0x39bc <setRightSpeed>
							setLeftSpeed(20);
     4a8:	84 e1       	ldi	r24, 0x14	; 20
     4aa:	0e 94 a4 1c 	call	0x3948	; 0x3948 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     4ae:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
     4b2:	9b 01       	movw	r18, r22
     4b4:	ac 01       	movw	r20, r24
     4b6:	60 93 4b 05 	sts	0x054B, r22
     4ba:	70 93 4c 05 	sts	0x054C, r23
     4be:	80 93 4d 05 	sts	0x054D, r24
     4c2:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     4c6:	80 91 47 05 	lds	r24, 0x0547
     4ca:	90 91 48 05 	lds	r25, 0x0548
     4ce:	a0 91 49 05 	lds	r26, 0x0549
     4d2:	b0 91 4a 05 	lds	r27, 0x054A
     4d6:	28 1b       	sub	r18, r24
     4d8:	39 0b       	sbc	r19, r25
     4da:	4a 0b       	sbc	r20, r26
     4dc:	5b 0b       	sbc	r21, r27
     4de:	23 33       	cpi	r18, 0x33	; 51
     4e0:	8f ee       	ldi	r24, 0xEF	; 239
     4e2:	38 07       	cpc	r19, r24
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	48 07       	cpc	r20, r24
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	58 07       	cpc	r21, r24
     4ec:	18 f0       	brcs	.+6      	; 0x4f4 <main+0x336>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	80 93 43 05 	sts	0x0543, r24
							//pwm_green = 0;
							//pwm_blue = 0;													
							break;							
					}

					updateRedLed(pwm_red);
     4f4:	80 91 0c 02 	lds	r24, 0x020C
     4f8:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <updateRedLed>
					updateGreenLed(pwm_green);
     4fc:	80 91 0d 02 	lds	r24, 0x020D
     500:	0e 94 00 21 	call	0x4200	; 0x4200 <updateGreenLed>
					updateBlueLed(pwm_blue);
     504:	80 91 0e 02 	lds	r24, 0x020E
     508:	0e 94 14 21 	call	0x4228	; 0x4228 <updateBlueLed>
     50c:	90 91 3f 05 	lds	r25, 0x053F

					break;
     510:	be ce       	rjmp	.-644    	; 0x28e <main+0xd0>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 10:if(leftMotSteps <= 4000) {
     512:	80 91 db 03 	lds	r24, 0x03DB
     516:	90 91 dc 03 	lds	r25, 0x03DC
     51a:	a0 91 dd 03 	lds	r26, 0x03DD
     51e:	b0 91 de 03 	lds	r27, 0x03DE
     522:	81 3a       	cpi	r24, 0xA1	; 161
     524:	2f e0       	ldi	r18, 0x0F	; 15
     526:	92 07       	cpc	r25, r18
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	a2 07       	cpc	r26, r18
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	b2 07       	cpc	r27, r18
     530:	0c f0       	brlt	.+2      	; 0x534 <main+0x376>
     532:	6a cf       	rjmp	.-300    	; 0x408 <main+0x24a>
     534:	47 cf       	rjmp	.-370    	; 0x3c4 <main+0x206>

		if(currentSelector != 6) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     536:	94 30       	cpi	r25, 0x04	; 4
     538:	d1 f0       	breq	.+52     	; 0x56e <main+0x3b0>
     53a:	95 30       	cpi	r25, 0x05	; 5
     53c:	08 f4       	brcc	.+2      	; 0x540 <main+0x382>
     53e:	6d cf       	rjmp	.-294    	; 0x41a <main+0x25c>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     540:	80 91 0c 02 	lds	r24, 0x020C
     544:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <updateRedLed>
					updateGreenLed(pwm_green);
     548:	80 91 0d 02 	lds	r24, 0x020D
     54c:	0e 94 00 21 	call	0x4200	; 0x4200 <updateGreenLed>
					updateBlueLed(pwm_blue);
     550:	80 91 0e 02 	lds	r24, 0x020E
     554:	0e 94 14 21 	call	0x4228	; 0x4228 <updateBlueLed>
					enableObstacleAvoidance();
     558:	0e 94 a1 20 	call	0x4142	; 0x4142 <enableObstacleAvoidance>
					setLeftSpeed(25);
     55c:	89 e1       	ldi	r24, 0x19	; 25
     55e:	0e 94 a4 1c 	call	0x3948	; 0x3948 <setLeftSpeed>
					setRightSpeed(25);
     562:	89 e1       	ldi	r24, 0x19	; 25
     564:	0e 94 de 1c 	call	0x39bc	; 0x39bc <setRightSpeed>
     568:	90 91 3f 05 	lds	r25, 0x053F
					break;
     56c:	90 ce       	rjmp	.-736    	; 0x28e <main+0xd0>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     56e:	80 91 0b 01 	lds	r24, 0x010B
     572:	8e 7f       	andi	r24, 0xFE	; 254
     574:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     578:	80 91 0b 01 	lds	r24, 0x010B
     57c:	8d 7f       	andi	r24, 0xFD	; 253
     57e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     582:	80 91 0b 01 	lds	r24, 0x010B
     586:	8b 7f       	andi	r24, 0xFB	; 251
     588:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     58c:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     58e:	80 91 0b 01 	lds	r24, 0x010B
     592:	8f 7e       	andi	r24, 0xEF	; 239
     594:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     598:	80 91 0b 01 	lds	r24, 0x010B
     59c:	8f 7d       	andi	r24, 0xDF	; 223
     59e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     5a2:	80 91 0b 01 	lds	r24, 0x010B
     5a6:	8f 7b       	andi	r24, 0xBF	; 191
     5a8:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     5ac:	80 91 0b 01 	lds	r24, 0x010B
     5b0:	8f 77       	andi	r24, 0x7F	; 127
     5b2:	80 93 0b 01 	sts	0x010B, r24
     5b6:	9e cf       	rjmp	.-196    	; 0x4f4 <main+0x336>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 11:if(leftMotSteps <= 5000) {
     5b8:	80 91 db 03 	lds	r24, 0x03DB
     5bc:	90 91 dc 03 	lds	r25, 0x03DC
     5c0:	a0 91 dd 03 	lds	r26, 0x03DD
     5c4:	b0 91 de 03 	lds	r27, 0x03DE
     5c8:	89 38       	cpi	r24, 0x89	; 137
     5ca:	43 e1       	ldi	r20, 0x13	; 19
     5cc:	94 07       	cpc	r25, r20
     5ce:	40 e0       	ldi	r20, 0x00	; 0
     5d0:	a4 07       	cpc	r26, r20
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	b4 07       	cpc	r27, r20
     5d6:	0c f0       	brlt	.+2      	; 0x5da <main+0x41c>
     5d8:	17 cf       	rjmp	.-466    	; 0x408 <main+0x24a>
     5da:	f4 ce       	rjmp	.-536    	; 0x3c4 <main+0x206>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     5dc:	80 91 db 03 	lds	r24, 0x03DB
     5e0:	90 91 dc 03 	lds	r25, 0x03DC
     5e4:	a0 91 dd 03 	lds	r26, 0x03DD
     5e8:	b0 91 de 03 	lds	r27, 0x03DE
     5ec:	81 37       	cpi	r24, 0x71	; 113
     5ee:	27 e1       	ldi	r18, 0x17	; 23
     5f0:	92 07       	cpc	r25, r18
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	a2 07       	cpc	r26, r18
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	b2 07       	cpc	r27, r18
     5fa:	0c f0       	brlt	.+2      	; 0x5fe <main+0x440>
     5fc:	05 cf       	rjmp	.-502    	; 0x408 <main+0x24a>
     5fe:	e2 ce       	rjmp	.-572    	; 0x3c4 <main+0x206>
			if(currentSelector==4 || currentSelector==5 || currentSelector==7) {
				pwm_red = rand() % 255;
				pwm_green = rand() % 255;
				pwm_blue = rand() % 255;
			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     600:	80 91 17 05 	lds	r24, 0x0517
     604:	81 30       	cpi	r24, 0x01	; 1
     606:	09 f0       	breq	.+2      	; 0x60a <main+0x44c>
     608:	bd ce       	rjmp	.-646    	; 0x384 <main+0x1c6>
     60a:	90 91 0d 04 	lds	r25, 0x040D
     60e:	92 30       	cpi	r25, 0x02	; 2
     610:	08 f0       	brcs	.+2      	; 0x614 <main+0x456>
     612:	b8 ce       	rjmp	.-656    	; 0x384 <main+0x1c6>
					if(rgbState == 0) {
     614:	90 91 10 04 	lds	r25, 0x0410
     618:	99 23       	and	r25, r25
     61a:	09 f0       	breq	.+2      	; 0x61e <main+0x460>
     61c:	25 c3       	rjmp	.+1610   	; 0xc68 <main+0xaaa>
						pwm_red = 254;
     61e:	90 92 0c 02 	sts	0x020C, r9
						pwm_green = 255;
     622:	d0 92 0d 02 	sts	0x020D, r13
						pwm_blue = 255;
     626:	d0 92 0e 02 	sts	0x020E, r13
						rgbState = 1;
     62a:	80 93 10 04 	sts	0x0410, r24
     62e:	aa ce       	rjmp	.-684    	; 0x384 <main+0x1c6>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     630:	92 30       	cpi	r25, 0x02	; 2
     632:	11 f0       	breq	.+4      	; 0x638 <main+0x47a>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     634:	98 2f       	mov	r25, r24
     636:	2b ce       	rjmp	.-938    	; 0x28e <main+0xd0>
     638:	90 91 18 05 	lds	r25, 0x0518
     63c:	99 23       	and	r25, r25
     63e:	d1 f3       	breq	.-12     	; 0x634 <main+0x476>
								turnOnGreenLeds();
     640:	0e 94 de 21 	call	0x43bc	; 0x43bc <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     644:	60 91 0b 04 	lds	r22, 0x040B
     648:	70 91 0c 04 	lds	r23, 0x040C
     64c:	8e ef       	ldi	r24, 0xFE	; 254
     64e:	9f e0       	ldi	r25, 0x0F	; 15
     650:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <__eewr_word_m2560>
								turnOffGreenLeds();
     654:	0e 94 c5 21 	call	0x438a	; 0x438a <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     658:	8a ea       	ldi	r24, 0xAA	; 170
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
								addressReceived = 0;
     660:	10 92 18 05 	sts	0x0518, r1
								menuChoice = 0;
     664:	10 92 17 05 	sts	0x0517, r1
     668:	90 91 3f 05 	lds	r25, 0x053F
     66c:	10 ce       	rjmp	.-992    	; 0x28e <main+0xd0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     66e:	84 30       	cpi	r24, 0x04	; 4
     670:	09 f4       	brne	.+2      	; 0x674 <main+0x4b6>
     672:	62 c2       	rjmp	.+1220   	; 0xb38 <main+0x97a>
     674:	84 30       	cpi	r24, 0x04	; 4
     676:	08 f4       	brcc	.+2      	; 0x67a <main+0x4bc>
     678:	28 c2       	rjmp	.+1104   	; 0xaca <main+0x90c>
     67a:	85 30       	cpi	r24, 0x05	; 5
     67c:	09 f0       	breq	.+2      	; 0x680 <main+0x4c2>
     67e:	3a cf       	rjmp	.-396    	; 0x4f4 <main+0x336>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     680:	0e 94 c5 21 	call	0x438a	; 0x438a <turnOffGreenLeds>
							demoEndTime = getTime100MicroSec();
     684:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
     688:	9b 01       	movw	r18, r22
     68a:	ac 01       	movw	r20, r24
     68c:	60 93 4b 05 	sts	0x054B, r22
     690:	70 93 4c 05 	sts	0x054C, r23
     694:	80 93 4d 05 	sts	0x054D, r24
     698:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     69c:	80 91 47 05 	lds	r24, 0x0547
     6a0:	90 91 48 05 	lds	r25, 0x0548
     6a4:	a0 91 49 05 	lds	r26, 0x0549
     6a8:	b0 91 4a 05 	lds	r27, 0x054A
     6ac:	28 1b       	sub	r18, r24
     6ae:	39 0b       	sbc	r19, r25
     6b0:	4a 0b       	sbc	r20, r26
     6b2:	5b 0b       	sbc	r21, r27
     6b4:	2b 32       	cpi	r18, 0x2B	; 43
     6b6:	8c e1       	ldi	r24, 0x1C	; 28
     6b8:	38 07       	cpc	r19, r24
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	48 07       	cpc	r20, r24
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	58 07       	cpc	r21, r24
     6c2:	08 f4       	brcc	.+2      	; 0x6c6 <main+0x508>
     6c4:	17 cf       	rjmp	.-466    	; 0x4f4 <main+0x336>
								demoStartTime = getTime100MicroSec();
     6c6:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
     6ca:	60 93 47 05 	sts	0x0547, r22
     6ce:	70 93 48 05 	sts	0x0548, r23
     6d2:	80 93 49 05 	sts	0x0549, r24
     6d6:	90 93 4a 05 	sts	0x054A, r25
								demoState = 0;							
     6da:	10 92 43 05 	sts	0x0543, r1
     6de:	0a cf       	rjmp	.-492    	; 0x4f4 <main+0x336>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     6e0:	0e 94 de 21 	call	0x43bc	; 0x43bc <turnOnGreenLeds>
							updateRedLed(pwm_red);
     6e4:	80 91 0c 02 	lds	r24, 0x020C
     6e8:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <updateRedLed>
							updateGreenLed(pwm_green);
     6ec:	80 91 0d 02 	lds	r24, 0x020D
     6f0:	0e 94 00 21 	call	0x4200	; 0x4200 <updateGreenLed>
							updateBlueLed(pwm_blue);
     6f4:	80 91 0e 02 	lds	r24, 0x020E
     6f8:	0e 94 14 21 	call	0x4228	; 0x4228 <updateBlueLed>
							LED_IR1_LOW;
     6fc:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     6fe:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     700:	80 91 1a 05 	lds	r24, 0x051A
     704:	88 23       	and	r24, r24
     706:	09 f4       	brne	.+2      	; 0x70a <main+0x54c>
     708:	85 ce       	rjmp	.-758    	; 0x414 <main+0x256>
								getDataNow = 0;	
     70a:	10 92 1a 05 	sts	0x051A, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     70e:	80 91 5f 03 	lds	r24, 0x035F
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     718:	80 91 60 03 	lds	r24, 0x0360
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     722:	80 91 2f 03 	lds	r24, 0x032F
     726:	90 91 30 03 	lds	r25, 0x0330
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     730:	80 91 2f 03 	lds	r24, 0x032F
     734:	90 91 30 03 	lds	r25, 0x0330
     738:	89 2f       	mov	r24, r25
     73a:	61 e0       	ldi	r22, 0x01	; 1
     73c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     740:	80 91 61 03 	lds	r24, 0x0361
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     74a:	80 91 62 03 	lds	r24, 0x0362
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     754:	80 91 33 03 	lds	r24, 0x0333
     758:	90 91 34 03 	lds	r25, 0x0334
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     762:	80 91 33 03 	lds	r24, 0x0333
     766:	90 91 34 03 	lds	r25, 0x0334
     76a:	89 2f       	mov	r24, r25
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     772:	80 91 63 03 	lds	r24, 0x0363
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     77c:	80 91 64 03 	lds	r24, 0x0364
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     786:	80 91 37 03 	lds	r24, 0x0337
     78a:	90 91 38 03 	lds	r25, 0x0338
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     794:	80 91 37 03 	lds	r24, 0x0337
     798:	90 91 38 03 	lds	r25, 0x0338
     79c:	89 2f       	mov	r24, r25
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     7a4:	80 91 65 03 	lds	r24, 0x0365
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     7ae:	80 91 66 03 	lds	r24, 0x0366
     7b2:	61 e0       	ldi	r22, 0x01	; 1
     7b4:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     7b8:	80 91 3b 03 	lds	r24, 0x033B
     7bc:	90 91 3c 03 	lds	r25, 0x033C
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     7c6:	80 91 3b 03 	lds	r24, 0x033B
     7ca:	90 91 3c 03 	lds	r25, 0x033C
     7ce:	89 2f       	mov	r24, r25
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     7d6:	80 91 67 03 	lds	r24, 0x0367
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     7e0:	80 91 68 03 	lds	r24, 0x0368
     7e4:	61 e0       	ldi	r22, 0x01	; 1
     7e6:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     7ea:	80 91 3f 03 	lds	r24, 0x033F
     7ee:	90 91 40 03 	lds	r25, 0x0340
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     7f8:	80 91 3f 03 	lds	r24, 0x033F
     7fc:	90 91 40 03 	lds	r25, 0x0340
     800:	89 2f       	mov	r24, r25
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     808:	80 91 69 03 	lds	r24, 0x0369
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     812:	80 91 6a 03 	lds	r24, 0x036A
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     81c:	80 91 43 03 	lds	r24, 0x0343
     820:	90 91 44 03 	lds	r25, 0x0344
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     82a:	80 91 43 03 	lds	r24, 0x0343
     82e:	90 91 44 03 	lds	r25, 0x0344
     832:	89 2f       	mov	r24, r25
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     83a:	80 91 6b 03 	lds	r24, 0x036B
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     844:	80 91 6c 03 	lds	r24, 0x036C
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     84e:	80 91 47 03 	lds	r24, 0x0347
     852:	90 91 48 03 	lds	r25, 0x0348
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     85c:	80 91 47 03 	lds	r24, 0x0347
     860:	90 91 48 03 	lds	r25, 0x0348
     864:	89 2f       	mov	r24, r25
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     86c:	80 91 6d 03 	lds	r24, 0x036D
     870:	61 e0       	ldi	r22, 0x01	; 1
     872:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     876:	80 91 6e 03 	lds	r24, 0x036E
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     880:	80 91 4b 03 	lds	r24, 0x034B
     884:	90 91 4c 03 	lds	r25, 0x034C
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     88e:	80 91 4b 03 	lds	r24, 0x034B
     892:	90 91 4c 03 	lds	r25, 0x034C
     896:	89 2f       	mov	r24, r25
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     89e:	80 91 6f 03 	lds	r24, 0x036F
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     8a8:	80 91 70 03 	lds	r24, 0x0370
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     8b2:	80 91 4f 03 	lds	r24, 0x034F
     8b6:	90 91 50 03 	lds	r25, 0x0350
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     8c0:	80 91 4f 03 	lds	r24, 0x034F
     8c4:	90 91 50 03 	lds	r25, 0x0350
     8c8:	89 2f       	mov	r24, r25
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     8d0:	80 91 71 03 	lds	r24, 0x0371
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     8da:	80 91 72 03 	lds	r24, 0x0372
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     8e4:	80 91 53 03 	lds	r24, 0x0353
     8e8:	90 91 54 03 	lds	r25, 0x0354
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     8f2:	80 91 53 03 	lds	r24, 0x0353
     8f6:	90 91 54 03 	lds	r25, 0x0354
     8fa:	89 2f       	mov	r24, r25
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     902:	80 91 73 03 	lds	r24, 0x0373
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     90c:	80 91 74 03 	lds	r24, 0x0374
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     916:	80 91 57 03 	lds	r24, 0x0357
     91a:	90 91 58 03 	lds	r25, 0x0358
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     924:	80 91 57 03 	lds	r24, 0x0357
     928:	90 91 58 03 	lds	r25, 0x0358
     92c:	89 2f       	mov	r24, r25
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     934:	80 91 75 03 	lds	r24, 0x0375
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     93e:	80 91 76 03 	lds	r24, 0x0376
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     948:	80 91 5b 03 	lds	r24, 0x035B
     94c:	90 91 5c 03 	lds	r25, 0x035C
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     956:	80 91 5b 03 	lds	r24, 0x035B
     95a:	90 91 5c 03 	lds	r25, 0x035C
     95e:	89 2f       	mov	r24, r25
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     966:	80 91 20 05 	lds	r24, 0x0520
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
								usart0Transmit(accX>>8,1);
     970:	80 91 21 05 	lds	r24, 0x0521
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     97a:	80 91 22 05 	lds	r24, 0x0522
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
								usart0Transmit(accY>>8,1);
     984:	80 91 23 05 	lds	r24, 0x0523
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     98e:	80 91 24 05 	lds	r24, 0x0524
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     998:	80 91 25 05 	lds	r24, 0x0525
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
								usart0Transmit(irCommand,1);
     9a2:	80 91 1b 05 	lds	r24, 0x051B
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
								usart0Transmit(currentSelector,1);
     9ac:	80 91 3f 05 	lds	r24, 0x053F
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     9b6:	80 91 03 01 	lds	r24, 0x0103
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	80 72       	andi	r24, 0x20	; 32
     9be:	90 70       	andi	r25, 0x00	; 0
     9c0:	95 95       	asr	r25
     9c2:	87 95       	ror	r24
     9c4:	95 95       	asr	r25
     9c6:	87 95       	ror	r24
     9c8:	95 95       	asr	r25
     9ca:	87 95       	ror	r24
     9cc:	95 95       	asr	r25
     9ce:	87 95       	ror	r24
     9d0:	95 95       	asr	r25
     9d2:	87 95       	ror	r24
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
								usart0Transmit(rfFlags,1);
     9da:	80 91 0d 04 	lds	r24, 0x040D
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	0e 94 49 15 	call	0x2a92	; 0x2a92 <usart0Transmit>
     9e4:	90 91 3f 05 	lds	r25, 0x053F
     9e8:	52 cc       	rjmp	.-1884   	; 0x28e <main+0xd0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <main+0x832>
     9ee:	82 cd       	rjmp	.-1276   	; 0x4f4 <main+0x336>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
     9f0:	0e 94 c5 21 	call	0x438a	; 0x438a <turnOffGreenLeds>
							outOfLine = 0;
     9f4:	10 92 45 05 	sts	0x0545, r1
							enableObstacleAvoidance();
     9f8:	0e 94 a1 20 	call	0x4142	; 0x4142 <enableObstacleAvoidance>
							setRightSpeed(20);
     9fc:	84 e1       	ldi	r24, 0x14	; 20
     9fe:	0e 94 de 1c 	call	0x39bc	; 0x39bc <setRightSpeed>
							setLeftSpeed(20);
     a02:	84 e1       	ldi	r24, 0x14	; 20
     a04:	0e 94 a4 1c 	call	0x3948	; 0x3948 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR) {
     a08:	80 91 71 03 	lds	r24, 0x0371
     a0c:	90 91 72 03 	lds	r25, 0x0372
     a10:	21 e0       	ldi	r18, 0x01	; 1
     a12:	80 39       	cpi	r24, 0x90	; 144
     a14:	92 07       	cpc	r25, r18
     a16:	0c f4       	brge	.+2      	; 0xa1a <main+0x85c>
     a18:	c5 c0       	rjmp	.+394    	; 0xba4 <main+0x9e6>
     a1a:	80 91 73 03 	lds	r24, 0x0373
     a1e:	90 91 74 03 	lds	r25, 0x0374
     a22:	41 e0       	ldi	r20, 0x01	; 1
     a24:	80 39       	cpi	r24, 0x90	; 144
     a26:	94 07       	cpc	r25, r20
     a28:	0c f4       	brge	.+2      	; 0xa2c <main+0x86e>
     a2a:	bc c0       	rjmp	.+376    	; 0xba4 <main+0x9e6>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
     a2c:	10 92 44 05 	sts	0x0544, r1
     a30:	61 cd       	rjmp	.-1342   	; 0x4f4 <main+0x336>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOnGreenLeds();
     a32:	0e 94 de 21 	call	0x43bc	; 0x43bc <turnOnGreenLeds>
							disableObstacleAvoidance();
     a36:	0e 94 a5 20 	call	0x414a	; 0x414a <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
     a3a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
     a3e:	9b 01       	movw	r18, r22
     a40:	ac 01       	movw	r20, r24
     a42:	60 93 4b 05 	sts	0x054B, r22
     a46:	70 93 4c 05 	sts	0x054C, r23
     a4a:	80 93 4d 05 	sts	0x054D, r24
     a4e:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
     a52:	80 91 47 05 	lds	r24, 0x0547
     a56:	90 91 48 05 	lds	r25, 0x0548
     a5a:	a0 91 49 05 	lds	r26, 0x0549
     a5e:	b0 91 4a 05 	lds	r27, 0x054A
     a62:	28 1b       	sub	r18, r24
     a64:	39 0b       	sbc	r19, r25
     a66:	4a 0b       	sbc	r20, r26
     a68:	5b 0b       	sbc	r21, r27
     a6a:	23 33       	cpi	r18, 0x33	; 51
     a6c:	8f ee       	ldi	r24, 0xEF	; 239
     a6e:	38 07       	cpc	r19, r24
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	48 07       	cpc	r20, r24
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	58 07       	cpc	r21, r24
     a78:	08 f0       	brcs	.+2      	; 0xa7c <main+0x8be>
     a7a:	ad c0       	rjmp	.+346    	; 0xbd6 <main+0xa18>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
     a7c:	80 91 03 01 	lds	r24, 0x0103
     a80:	84 ff       	sbrs	r24, 4
     a82:	c7 c0       	rjmp	.+398    	; 0xc12 <main+0xa54>
								outOfLine = 0;
     a84:	10 92 45 05 	sts	0x0545, r1
								chargeContact++;
     a88:	80 91 46 05 	lds	r24, 0x0546
     a8c:	8f 5f       	subi	r24, 0xFF	; 255
     a8e:	80 93 46 05 	sts	0x0546, r24
								if(chargeContact > 20) {
     a92:	85 31       	cpi	r24, 0x15	; 21
     a94:	08 f0       	brcs	.+2      	; 0xa98 <main+0x8da>
     a96:	f6 c0       	rjmp	.+492    	; 0xc84 <main+0xac6>
     a98:	80 91 71 03 	lds	r24, 0x0371
     a9c:	90 91 72 03 	lds	r25, 0x0372
								} else {
									outOfLine = 0;
								}
							}
	
							if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
     aa0:	21 e0       	ldi	r18, 0x01	; 1
     aa2:	83 3c       	cpi	r24, 0xC3	; 195
     aa4:	92 07       	cpc	r25, r18
     aa6:	0c f0       	brlt	.+2      	; 0xaaa <main+0x8ec>
     aa8:	ce c0       	rjmp	.+412    	; 0xc46 <main+0xa88>
								setRightSpeed(-10);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
     aaa:	80 91 73 03 	lds	r24, 0x0373
     aae:	90 91 74 03 	lds	r25, 0x0374
     ab2:	41 e0       	ldi	r20, 0x01	; 1
     ab4:	83 3c       	cpi	r24, 0xC3	; 195
     ab6:	94 07       	cpc	r25, r20
     ab8:	0c f4       	brge	.+2      	; 0xabc <main+0x8fe>
     aba:	cf c0       	rjmp	.+414    	; 0xc5a <main+0xa9c>
								setLeftSpeed(-10);
     abc:	86 ef       	ldi	r24, 0xF6	; 246
     abe:	0e 94 a4 1c 	call	0x3948	; 0x3948 <setLeftSpeed>
								setRightSpeed(20);
     ac2:	84 e1       	ldi	r24, 0x14	; 20
     ac4:	0e 94 de 1c 	call	0x39bc	; 0x39bc <setRightSpeed>
     ac8:	15 cd       	rjmp	.-1494   	; 0x4f4 <main+0x336>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
     aca:	0e 94 c5 21 	call	0x438a	; 0x438a <turnOffGreenLeds>
							demoEndTime = getTime100MicroSec();
     ace:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
     ad2:	9b 01       	movw	r18, r22
     ad4:	ac 01       	movw	r20, r24
     ad6:	60 93 4b 05 	sts	0x054B, r22
     ada:	70 93 4c 05 	sts	0x054C, r23
     ade:	80 93 4d 05 	sts	0x054D, r24
     ae2:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
     ae6:	80 91 47 05 	lds	r24, 0x0547
     aea:	90 91 48 05 	lds	r25, 0x0548
     aee:	a0 91 49 05 	lds	r26, 0x0549
     af2:	b0 91 4a 05 	lds	r27, 0x054A
     af6:	28 1b       	sub	r18, r24
     af8:	39 0b       	sbc	r19, r25
     afa:	4a 0b       	sbc	r20, r26
     afc:	5b 0b       	sbc	r21, r27
     afe:	2d 3c       	cpi	r18, 0xCD	; 205
     b00:	86 e6       	ldi	r24, 0x66	; 102
     b02:	38 07       	cpc	r19, r24
     b04:	84 e0       	ldi	r24, 0x04	; 4
     b06:	48 07       	cpc	r20, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	58 07       	cpc	r21, r24
     b0c:	08 f4       	brcc	.+2      	; 0xb10 <main+0x952>
     b0e:	76 c0       	rjmp	.+236    	; 0xbfc <main+0xa3e>
								if(batteryLevel<800) {	// stay in charge if too much discharged
     b10:	80 91 c3 03 	lds	r24, 0x03C3
     b14:	90 91 c4 03 	lds	r25, 0x03C4
     b18:	23 e0       	ldi	r18, 0x03	; 3
     b1a:	80 32       	cpi	r24, 0x20	; 32
     b1c:	92 07       	cpc	r25, r18
     b1e:	08 f0       	brcs	.+2      	; 0xb22 <main+0x964>
     b20:	5a c0       	rjmp	.+180    	; 0xbd6 <main+0xa18>
							}
							if(!CHARGE_ON) {
								chargeContact = 0;
								outOfLine = 0;
								demoState = 2;
								demoStartTime = getTime100MicroSec();
     b22:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
     b26:	60 93 47 05 	sts	0x0547, r22
     b2a:	70 93 48 05 	sts	0x0548, r23
     b2e:	80 93 49 05 	sts	0x0549, r24
     b32:	90 93 4a 05 	sts	0x054A, r25
								break;						
     b36:	de cc       	rjmp	.-1604   	; 0x4f4 <main+0x336>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOnGreenLeds();
     b38:	0e 94 de 21 	call	0x43bc	; 0x43bc <turnOnGreenLeds>
							demoEndTime = getTime100MicroSec();
     b3c:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	60 93 4b 05 	sts	0x054B, r22
     b48:	70 93 4c 05 	sts	0x054C, r23
     b4c:	80 93 4d 05 	sts	0x054D, r24
     b50:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
     b54:	80 91 47 05 	lds	r24, 0x0547
     b58:	90 91 48 05 	lds	r25, 0x0548
     b5c:	a0 91 49 05 	lds	r26, 0x0549
     b60:	b0 91 4a 05 	lds	r27, 0x054A
     b64:	28 1b       	sub	r18, r24
     b66:	39 0b       	sbc	r19, r25
     b68:	4a 0b       	sbc	r20, r26
     b6a:	5b 0b       	sbc	r21, r27
     b6c:	2f 38       	cpi	r18, 0x8F	; 143
     b6e:	85 e2       	ldi	r24, 0x25	; 37
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	58 07       	cpc	r21, r24
     b7a:	08 f4       	brcc	.+2      	; 0xb7e <main+0x9c0>
     b7c:	bb cc       	rjmp	.-1674   	; 0x4f4 <main+0x336>
								setRightSpeed(20);
     b7e:	84 e1       	ldi	r24, 0x14	; 20
     b80:	0e 94 de 1c 	call	0x39bc	; 0x39bc <setRightSpeed>
								setLeftSpeed(-20);								
     b84:	8c ee       	ldi	r24, 0xEC	; 236
     b86:	0e 94 a4 1c 	call	0x3948	; 0x3948 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
     b8a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
     b8e:	60 93 47 05 	sts	0x0547, r22
     b92:	70 93 48 05 	sts	0x0548, r23
     b96:	80 93 49 05 	sts	0x0549, r24
     b9a:	90 93 4a 05 	sts	0x054A, r25
								demoState = 5;							
     b9e:	80 92 43 05 	sts	0x0543, r8
     ba2:	a8 cc       	rjmp	.-1712   	; 0x4f4 <main+0x336>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(20);
							setLeftSpeed(20);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR) {
								lineFound++;
     ba4:	80 91 44 05 	lds	r24, 0x0544
     ba8:	8f 5f       	subi	r24, 0xFF	; 255
     baa:	80 93 44 05 	sts	0x0544, r24
								if(lineFound > 10) {
     bae:	8b 30       	cpi	r24, 0x0B	; 11
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <main+0x9f6>
     bb2:	a0 cc       	rjmp	.-1728   	; 0x4f4 <main+0x336>
									outOfLine = 0;
     bb4:	10 92 45 05 	sts	0x0545, r1
									chargeContact = 0;
     bb8:	10 92 46 05 	sts	0x0546, r1
									demoStartTime = getTime100MicroSec();
     bbc:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
     bc0:	60 93 47 05 	sts	0x0547, r22
     bc4:	70 93 48 05 	sts	0x0548, r23
     bc8:	80 93 49 05 	sts	0x0549, r24
     bcc:	90 93 4a 05 	sts	0x054A, r25
									demoState = 2;
     bd0:	b0 92 43 05 	sts	0x0543, r11
									break;
     bd4:	8f cc       	rjmp	.-1762   	; 0x4f4 <main+0x336>
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
								if(batteryLevel<800) {	// stay in charge if too much discharged
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-20);
     bd6:	8c ee       	ldi	r24, 0xEC	; 236
     bd8:	0e 94 de 1c 	call	0x39bc	; 0x39bc <setRightSpeed>
									setLeftSpeed(-20);
     bdc:	8c ee       	ldi	r24, 0xEC	; 236
     bde:	0e 94 a4 1c 	call	0x3948	; 0x3948 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
     be2:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
     be6:	60 93 47 05 	sts	0x0547, r22
     bea:	70 93 48 05 	sts	0x0548, r23
     bee:	80 93 49 05 	sts	0x0549, r24
     bf2:	90 93 4a 05 	sts	0x054A, r25
									demoState = 4;
     bf6:	a0 92 43 05 	sts	0x0543, r10
									break;
     bfa:	7c cc       	rjmp	.-1800   	; 0x4f4 <main+0x336>
								}
							}
							if(!CHARGE_ON) {
     bfc:	80 91 03 01 	lds	r24, 0x0103
     c00:	84 fd       	sbrc	r24, 4
     c02:	78 cc       	rjmp	.-1808   	; 0x4f4 <main+0x336>
								chargeContact = 0;
     c04:	10 92 46 05 	sts	0x0546, r1
								outOfLine = 0;
     c08:	10 92 45 05 	sts	0x0545, r1
								demoState = 2;
     c0c:	b0 92 43 05 	sts	0x0543, r11
     c10:	88 cf       	rjmp	.-240    	; 0xb22 <main+0x964>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
     c12:	10 92 46 05 	sts	0x0546, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
     c16:	80 91 71 03 	lds	r24, 0x0371
     c1a:	90 91 72 03 	lds	r25, 0x0372
     c1e:	41 e0       	ldi	r20, 0x01	; 1
     c20:	83 3c       	cpi	r24, 0xC3	; 195
     c22:	94 07       	cpc	r25, r20
     c24:	bc f0       	brlt	.+46     	; 0xc54 <main+0xa96>
     c26:	20 91 73 03 	lds	r18, 0x0373
     c2a:	30 91 74 03 	lds	r19, 0x0374
     c2e:	41 e0       	ldi	r20, 0x01	; 1
     c30:	23 3c       	cpi	r18, 0xC3	; 195
     c32:	34 07       	cpc	r19, r20
     c34:	7c f0       	brlt	.+30     	; 0xc54 <main+0xa96>
									outOfLine++;
     c36:	80 91 45 05 	lds	r24, 0x0545
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	80 93 45 05 	sts	0x0545, r24
									if(outOfLine > 250) {
     c40:	8b 3f       	cpi	r24, 0xFB	; 251
     c42:	08 f0       	brcs	.+2      	; 0xc46 <main+0xa88>
     c44:	54 cc       	rjmp	.-1880   	; 0x4ee <main+0x330>
									outOfLine = 0;
								}
							}
	
							if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(20);
     c46:	84 e1       	ldi	r24, 0x14	; 20
     c48:	0e 94 a4 1c 	call	0x3948	; 0x3948 <setLeftSpeed>
								setRightSpeed(-10);
     c4c:	86 ef       	ldi	r24, 0xF6	; 246
     c4e:	0e 94 de 1c 	call	0x39bc	; 0x39bc <setRightSpeed>
     c52:	50 cc       	rjmp	.-1888   	; 0x4f4 <main+0x336>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
     c54:	10 92 45 05 	sts	0x0545, r1
     c58:	23 cf       	rjmp	.-442    	; 0xaa0 <main+0x8e2>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(20);
     c5a:	84 e1       	ldi	r24, 0x14	; 20
     c5c:	0e 94 de 1c 	call	0x39bc	; 0x39bc <setRightSpeed>
								setLeftSpeed(20);
     c60:	84 e1       	ldi	r24, 0x14	; 20
     c62:	0e 94 a4 1c 	call	0x3948	; 0x3948 <setLeftSpeed>
     c66:	46 cc       	rjmp	.-1908   	; 0x4f4 <main+0x336>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
     c68:	91 30       	cpi	r25, 0x01	; 1
     c6a:	01 f1       	breq	.+64     	; 0xcac <main+0xaee>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
     c6c:	92 30       	cpi	r25, 0x02	; 2
     c6e:	09 f0       	breq	.+2      	; 0xc72 <main+0xab4>
     c70:	89 cb       	rjmp	.-2286   	; 0x384 <main+0x1c6>
						pwm_red = 255;
     c72:	d0 92 0c 02 	sts	0x020C, r13
						pwm_green = 255;
     c76:	d0 92 0d 02 	sts	0x020D, r13
						pwm_blue = 254;
     c7a:	90 92 0e 02 	sts	0x020E, r9
						rgbState = 0;
     c7e:	10 92 10 04 	sts	0x0410, r1
     c82:	80 cb       	rjmp	.-2304   	; 0x384 <main+0x1c6>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	0e 94 a4 1c 	call	0x3948	; 0x3948 <setLeftSpeed>
									setRightSpeed(0);
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	0e 94 de 1c 	call	0x39bc	; 0x39bc <setRightSpeed>
									demoStartTime = getTime100MicroSec();
     c90:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getTime100MicroSec>
     c94:	60 93 47 05 	sts	0x0547, r22
     c98:	70 93 48 05 	sts	0x0548, r23
     c9c:	80 93 49 05 	sts	0x0549, r24
     ca0:	90 93 4a 05 	sts	0x054A, r25
									demoState = 3;
     ca4:	23 e0       	ldi	r18, 0x03	; 3
     ca6:	20 93 43 05 	sts	0x0543, r18
									break;
     caa:	24 cc       	rjmp	.-1976   	; 0x4f4 <main+0x336>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
     cac:	d0 92 0c 02 	sts	0x020C, r13
						pwm_green = 254;
     cb0:	90 92 0d 02 	sts	0x020D, r9
						pwm_blue = 255;
     cb4:	d0 92 0e 02 	sts	0x020E, r13
						rgbState = 2;
     cb8:	b0 92 10 04 	sts	0x0410, r11
     cbc:	63 cb       	rjmp	.-2362   	; 0x384 <main+0x1c6>

00000cbe <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
     cc2:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
     cc4:	0d b4       	in	r0, 0x2d	; 45
     cc6:	07 fc       	sbrc	r0, 7
     cc8:	0a c0       	rjmp	.+20     	; 0xcde <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     cca:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     ccc:	37 e2       	ldi	r19, 0x27	; 39
     cce:	80 31       	cpi	r24, 0x10	; 16
     cd0:	93 07       	cpc	r25, r19
     cd2:	c0 f3       	brcs	.-16     	; 0xcc4 <SPI_WAIT+0x6>
			spiCommError = 1;
     cd4:	20 93 0e 04 	sts	0x040E, r18
		}
	
		if(SPSR & _BV(SPIF)) {
     cd8:	0d b4       	in	r0, 0x2d	; 45
     cda:	07 fe       	sbrs	r0, 7
     cdc:	f6 cf       	rjmp	.-20     	; 0xcca <SPI_WAIT+0xc>
			return;
		}
	}
}
     cde:	08 95       	ret

00000ce0 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     ce0:	84 b1       	in	r24, 0x04	; 4
     ce2:	80 7f       	andi	r24, 0xF0	; 240
     ce4:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     ce6:	84 b1       	in	r24, 0x04	; 4
     ce8:	87 60       	ori	r24, 0x07	; 7
     cea:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     cec:	80 e5       	ldi	r24, 0x50	; 80
     cee:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     cf0:	8d b5       	in	r24, 0x2d	; 45
     cf2:	81 60       	ori	r24, 0x01	; 1
     cf4:	8d bd       	out	0x2d, r24	; 45

}
     cf6:	08 95       	ret

00000cf8 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     cf8:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     cfa:	1d bc       	out	0x2d, r1	; 45
}
     cfc:	08 95       	ret

00000cfe <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     cfe:	44 23       	and	r20, r20
     d00:	09 f1       	breq	.+66     	; 0xd44 <SPI_ReadWrite_Block+0x46>
     d02:	a6 2f       	mov	r26, r22
     d04:	b7 2f       	mov	r27, r23
     d06:	e8 2f       	mov	r30, r24
     d08:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
     d0a:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
     d0c:	21 91       	ld	r18, Z+
     d0e:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     d10:	21 e0       	ldi	r18, 0x01	; 1
     d12:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     d14:	0d b4       	in	r0, 0x2d	; 45
     d16:	07 fc       	sbrc	r0, 7
     d18:	0b c0       	rjmp	.+22     	; 0xd30 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     d1a:	2f 5f       	subi	r18, 0xFF	; 255
     d1c:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
     d1e:	57 e2       	ldi	r21, 0x27	; 39
     d20:	20 31       	cpi	r18, 0x10	; 16
     d22:	35 07       	cpc	r19, r21
     d24:	b8 f3       	brcs	.-18     	; 0xd14 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
     d26:	90 93 0e 04 	sts	0x040E, r25
		}
	
		if(SPSR & _BV(SPIF)) {
     d2a:	0d b4       	in	r0, 0x2d	; 45
     d2c:	07 fe       	sbrs	r0, 7
     d2e:	f5 cf       	rjmp	.-22     	; 0xd1a <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     d30:	20 91 0e 04 	lds	r18, 0x040E
     d34:	22 23       	and	r18, r18
     d36:	31 f4       	brne	.+12     	; 0xd44 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
     d38:	2e b5       	in	r18, 0x2e	; 46
     d3a:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     d3c:	2e 2f       	mov	r18, r30
     d3e:	28 1b       	sub	r18, r24
     d40:	24 17       	cp	r18, r20
     d42:	20 f3       	brcs	.-56     	; 0xd0c <SPI_ReadWrite_Block+0xe>
     d44:	08 95       	ret

00000d46 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     d46:	66 23       	and	r22, r22
     d48:	e9 f0       	breq	.+58     	; 0xd84 <SPI_Write_Block+0x3e>
     d4a:	e8 2f       	mov	r30, r24
     d4c:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
     d4e:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
     d50:	21 91       	ld	r18, Z+
     d52:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     d54:	21 e0       	ldi	r18, 0x01	; 1
     d56:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     d58:	0d b4       	in	r0, 0x2d	; 45
     d5a:	07 fc       	sbrc	r0, 7
     d5c:	0b c0       	rjmp	.+22     	; 0xd74 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     d5e:	2f 5f       	subi	r18, 0xFF	; 255
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
     d62:	47 e2       	ldi	r20, 0x27	; 39
     d64:	20 31       	cpi	r18, 0x10	; 16
     d66:	34 07       	cpc	r19, r20
     d68:	b8 f3       	brcs	.-18     	; 0xd58 <SPI_Write_Block+0x12>
			spiCommError = 1;
     d6a:	90 93 0e 04 	sts	0x040E, r25
		}
	
		if(SPSR & _BV(SPIF)) {
     d6e:	0d b4       	in	r0, 0x2d	; 45
     d70:	07 fe       	sbrs	r0, 7
     d72:	f5 cf       	rjmp	.-22     	; 0xd5e <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     d74:	20 91 0e 04 	lds	r18, 0x040E
     d78:	22 23       	and	r18, r18
     d7a:	21 f4       	brne	.+8      	; 0xd84 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     d7c:	2e 2f       	mov	r18, r30
     d7e:	28 1b       	sub	r18, r24
     d80:	26 17       	cp	r18, r22
     d82:	30 f3       	brcs	.-52     	; 0xd50 <SPI_Write_Block+0xa>
     d84:	08 95       	ret

00000d86 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     d86:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
     d8c:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
     d8e:	0d b4       	in	r0, 0x2d	; 45
     d90:	07 fc       	sbrc	r0, 7
     d92:	0a c0       	rjmp	.+20     	; 0xda8 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     d94:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     d96:	37 e2       	ldi	r19, 0x27	; 39
     d98:	80 31       	cpi	r24, 0x10	; 16
     d9a:	93 07       	cpc	r25, r19
     d9c:	c0 f3       	brcs	.-16     	; 0xd8e <SPI_Write_Byte+0x8>
			spiCommError = 1;
     d9e:	20 93 0e 04 	sts	0x040E, r18
		}
	
		if(SPSR & _BV(SPIF)) {
     da2:	0d b4       	in	r0, 0x2d	; 45
     da4:	07 fe       	sbrs	r0, 7
     da6:	f6 cf       	rjmp	.-20     	; 0xd94 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
     da8:	8e b5       	in	r24, 0x2e	; 46
}
     daa:	08 95       	ret

00000dac <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <mirf_config+0xa>
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     dba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     dbc:	80 e2       	ldi	r24, 0x20	; 32
     dbe:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     dc2:	8d e0       	ldi	r24, 0x0D	; 13
     dc4:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     dc8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     dca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     dcc:	83 e2       	ldi	r24, 0x23	; 35
     dce:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     dd8:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
     dda:	80 91 0b 04 	lds	r24, 0x040B
     dde:	90 91 0c 04 	lds	r25, 0x040C
     de2:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
     de4:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     de6:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     de8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     dea:	80 e3       	ldi	r24, 0x30	; 48
     dec:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     df0:	8e 01       	movw	r16, r28
     df2:	0f 5f       	subi	r16, 0xFF	; 255
     df4:	1f 4f       	sbci	r17, 0xFF	; 255
     df6:	c8 01       	movw	r24, r16
     df8:	63 e0       	ldi	r22, 0x03	; 3
     dfa:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_Write_Block>
    mirf_CSN_hi;
     dfe:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     e00:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e02:	8a e2       	ldi	r24, 0x2A	; 42
     e04:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     e08:	c8 01       	movw	r24, r16
     e0a:	63 e0       	ldi	r22, 0x03	; 3
     e0c:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_Write_Block>
    mirf_CSN_hi;
     e10:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e12:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e14:	81 e2       	ldi	r24, 0x21	; 33
     e16:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     e20:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e22:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e24:	82 e2       	ldi	r24, 0x22	; 34
     e26:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     e30:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e32:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e34:	84 e2       	ldi	r24, 0x24	; 36
     e36:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e3a:	82 e1       	ldi	r24, 0x12	; 18
     e3c:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     e40:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e42:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e44:	85 e2       	ldi	r24, 0x25	; 37
     e46:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e4a:	88 e2       	ldi	r24, 0x28	; 40
     e4c:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     e50:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e52:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e54:	81 e3       	ldi	r24, 0x31	; 49
     e56:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e5a:	8d e0       	ldi	r24, 0x0D	; 13
     e5c:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     e60:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     e62:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     e64:	80 e5       	ldi	r24, 0x50	; 80
     e66:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     e6a:	83 e7       	ldi	r24, 0x73	; 115
     e6c:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     e70:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e72:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e74:	8c e3       	ldi	r24, 0x3C	; 60
     e76:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     e80:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e82:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e84:	8d e3       	ldi	r24, 0x3D	; 61
     e86:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e8a:	86 e0       	ldi	r24, 0x06	; 6
     e8c:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     e90:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e92:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e94:	80 e2       	ldi	r24, 0x20	; 32
     e96:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e9a:	8f e0       	ldi	r24, 0x0F	; 15
     e9c:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     ea0:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	08 95       	ret

00000eb2 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     eb2:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     eb4:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     eb6:	0e 94 d6 06 	call	0xdac	; 0xdac <mirf_config>
}
     eba:	08 95       	ret

00000ebc <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	ec 01       	movw	r28, r24
    mirf_CE_lo;
     ec2:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     ec4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     ec6:	8a e2       	ldi	r24, 0x2A	; 42
     ec8:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     ecc:	ce 01       	movw	r24, r28
     ece:	65 e0       	ldi	r22, 0x05	; 5
     ed0:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_Write_Block>
    mirf_CSN_hi;
     ed4:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     ed6:	2c 9a       	sbi	0x05, 4	; 5
}
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     ee4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     ee6:	80 e3       	ldi	r24, 0x30	; 48
     ee8:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     eec:	ce 01       	movw	r24, r28
     eee:	65 e0       	ldi	r22, 0x05	; 5
     ef0:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_Write_Block>
    mirf_CSN_hi;
     ef4:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     efc:	80 91 52 05 	lds	r24, 0x0552
     f00:	88 23       	and	r24, r24
     f02:	11 f0       	breq	.+4      	; 0xf08 <mirf_data_ready+0xc>
     f04:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
     f06:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     f08:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     f10:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     f12:	80 74       	andi	r24, 0x40	; 64
     f14:	08 95       	ret

00000f16 <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	0f 92       	push	r0
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     f20:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     f22:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     f24:	87 e1       	ldi	r24, 0x17	; 23
     f26:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     f2a:	be 01       	movw	r22, r28
     f2c:	6f 5f       	subi	r22, 0xFF	; 255
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
     f30:	cb 01       	movw	r24, r22
     f32:	41 e0       	ldi	r20, 0x01	; 1
     f34:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     f38:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3c:	81 70       	andi	r24, 0x01	; 1
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
     f46:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     f48:	82 ee       	ldi	r24, 0xE2	; 226
     f4a:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     f4e:	28 9a       	sbi	0x05, 0	; 5

}
     f50:	08 95       	ret

00000f52 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
     f58:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     f5a:	81 e6       	ldi	r24, 0x61	; 97
     f5c:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     f60:	ce 01       	movw	r24, r28
     f62:	be 01       	movw	r22, r28
     f64:	4d e0       	ldi	r20, 0x0D	; 13
     f66:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     f6a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     f6c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     f6e:	87 e2       	ldi	r24, 0x27	; 39
     f70:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     f74:	80 e4       	ldi	r24, 0x40	; 64
     f76:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     f7a:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	0f 92       	push	r0
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
     f8c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     f8e:	8f 71       	andi	r24, 0x1F	; 31
     f90:	80 62       	ori	r24, 0x20	; 32
     f92:	69 83       	std	Y+1, r22	; 0x01
     f94:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     f98:	69 81       	ldd	r22, Y+1	; 0x01
     f9a:	86 2f       	mov	r24, r22
     f9c:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
     fa0:	28 9a       	sbi	0x05, 0	; 5
}
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     fba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     fbc:	8f 71       	andi	r24, 0x1F	; 31
     fbe:	49 83       	std	Y+1, r20	; 0x01
     fc0:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     fc4:	c8 01       	movw	r24, r16
     fc6:	b8 01       	movw	r22, r16
     fc8:	49 81       	ldd	r20, Y+1	; 0x01
     fca:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     fce:	28 9a       	sbi	0x05, 0	; 5
}
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	08 95       	ret

00000fdc <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     fec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     fee:	8f 71       	andi	r24, 0x1F	; 31
     ff0:	80 62       	ori	r24, 0x20	; 32
     ff2:	49 83       	std	Y+1, r20	; 0x01
     ff4:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     ff8:	c8 01       	movw	r24, r16
     ffa:	49 81       	ldd	r20, Y+1	; 0x01
     ffc:	64 2f       	mov	r22, r20
     ffe:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_Write_Block>
    mirf_CSN_hi;
    1002:	28 9a       	sbi	0x05, 0	; 5
}
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	08 95       	ret

00001010 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	0f 92       	push	r0
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1020:	80 91 52 05 	lds	r24, 0x0552
    1024:	88 23       	and	r24, r24
    1026:	e1 f7       	brne	.-8      	; 0x1020 <mirf_send+0x10>

    mirf_CE_lo;
    1028:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	80 93 52 05 	sts	0x0552, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1030:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1032:	80 e2       	ldi	r24, 0x20	; 32
    1034:	69 83       	std	Y+1, r22	; 0x01
    1036:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    103a:	8a e4       	ldi	r24, 0x4A	; 74
    103c:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
    1040:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1042:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1044:	81 ee       	ldi	r24, 0xE1	; 225
    1046:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    104a:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    104c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    104e:	80 ea       	ldi	r24, 0xA0	; 160
    1050:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1054:	c8 01       	movw	r24, r16
    1056:	69 81       	ldd	r22, Y+1	; 0x01
    1058:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    105c:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    105e:	2c 9a       	sbi	0x05, 4	; 5
}
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	08 95       	ret

0000106c <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	18 2f       	mov	r17, r24
    1080:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    1082:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1084:	81 ee       	ldi	r24, 0xE1	; 225
    1086:	99 83       	std	Y+1, r25	; 0x01
    1088:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
    108c:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    108e:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1090:	88 ea       	ldi	r24, 0xA8	; 168
    1092:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1096:	99 81       	ldd	r25, Y+1	; 0x01
    1098:	00 23       	and	r16, r16
    109a:	61 f0       	breq	.+24     	; 0x10b4 <writeAckPayload+0x48>
    109c:	61 2f       	mov	r22, r17
    109e:	79 2f       	mov	r23, r25
    10a0:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    10a2:	f7 01       	movw	r30, r14
    10a4:	81 91       	ld	r24, Z+
    10a6:	7f 01       	movw	r14, r30
    10a8:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    10ac:	8e 2d       	mov	r24, r14
    10ae:	81 1b       	sub	r24, r17
    10b0:	80 17       	cp	r24, r16
    10b2:	b8 f3       	brcs	.-18     	; 0x10a2 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    10b4:	28 9a       	sbi	0x05, 0	; 5


}
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	08 95       	ret

000010c6 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    10c6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    10c8:	81 ee       	ldi	r24, 0xE1	; 225
    10ca:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
    10ce:	28 9a       	sbi	0x05, 0	; 5

}
    10d0:	08 95       	ret

000010d2 <handleRFCommands>:

void handleRFCommands() {
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    10d8:	80 91 52 05 	lds	r24, 0x0552
    10dc:	88 23       	and	r24, r24
    10de:	21 f0       	breq	.+8      	; 0x10e8 <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    10e8:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    10f0:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
    10f2:	86 ff       	sbrs	r24, 6
    10f4:	f5 cf       	rjmp	.-22     	; 0x10e0 <handleRFCommands+0xe>

		rfFlags |= 0x02;
    10f6:	80 91 0d 04 	lds	r24, 0x040D
    10fa:	82 60       	ori	r24, 0x02	; 2
    10fc:	80 93 0d 04 	sts	0x040D, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1100:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1102:	87 e2       	ldi	r24, 0x27	; 39
    1104:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1108:	80 e7       	ldi	r24, 0x70	; 112
    110a:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
    110e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    1110:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1112:	81 e6       	ldi	r24, 0x61	; 97
    1114:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1118:	8f e6       	ldi	r24, 0x6F	; 111
    111a:	95 e0       	ldi	r25, 0x05	; 5
    111c:	bc 01       	movw	r22, r24
    111e:	4d e0       	ldi	r20, 0x0D	; 13
    1120:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1124:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1126:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1128:	87 e2       	ldi	r24, 0x27	; 39
    112a:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    112e:	80 e4       	ldi	r24, 0x40	; 64
    1130:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
    1134:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    1136:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1138:	82 ee       	ldi	r24, 0xE2	; 226
    113a:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
    113e:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1140:	60 91 6f 05 	lds	r22, 0x056F
    1144:	66 23       	and	r22, r22
    1146:	09 f4       	brne	.+2      	; 0x114a <handleRFCommands+0x78>
    1148:	95 c1       	rjmp	.+810    	; 0x1474 <handleRFCommands+0x3a2>
    114a:	50 91 73 05 	lds	r21, 0x0573
    114e:	40 91 74 05 	lds	r20, 0x0574
    1152:	e0 91 70 05 	lds	r30, 0x0570
    1156:	70 91 71 05 	lds	r23, 0x0571

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    115a:	25 2f       	mov	r18, r21
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	2f 77       	andi	r18, 0x7F	; 127
    1160:	30 70       	andi	r19, 0x00	; 0
    1162:	30 93 0a 04 	sts	0x040A, r19
    1166:	20 93 09 04 	sts	0x0409, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    116a:	84 2f       	mov	r24, r20
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	8f 77       	andi	r24, 0x7F	; 127
    1170:	90 70       	andi	r25, 0x00	; 0
    1172:	90 93 08 04 	sts	0x0408, r25
    1176:	80 93 07 04 	sts	0x0407, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
    117a:	57 fd       	sbrc	r21, 7
    117c:	7f c2       	rjmp	.+1278   	; 0x167c <handleRFCommands+0x5aa>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
    117e:	22 0f       	add	r18, r18
    1180:	33 1f       	adc	r19, r19
    1182:	22 0f       	add	r18, r18
    1184:	33 1f       	adc	r19, r19
    1186:	30 95       	com	r19
    1188:	21 95       	neg	r18
    118a:	3f 4f       	sbci	r19, 0xFF	; 255
    118c:	30 93 f8 03 	sts	0x03F8, r19
    1190:	20 93 f7 03 	sts	0x03F7, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    1194:	47 fd       	sbrc	r20, 7
    1196:	7c c2       	rjmp	.+1272   	; 0x1690 <handleRFCommands+0x5be>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	90 95       	com	r25
    11a2:	81 95       	neg	r24
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	90 93 fa 03 	sts	0x03FA, r25
    11aa:	80 93 f9 03 	sts	0x03F9, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    11ae:	42 e0       	ldi	r20, 0x02	; 2
    11b0:	21 30       	cpi	r18, 0x01	; 1
    11b2:	34 07       	cpc	r19, r20
    11b4:	44 f0       	brlt	.+16     	; 0x11c6 <handleRFCommands+0xf4>
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	52 e0       	ldi	r21, 0x02	; 2
    11ba:	50 93 f8 03 	sts	0x03F8, r21
    11be:	40 93 f7 03 	sts	0x03F7, r20
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    11c6:	42 e0       	ldi	r20, 0x02	; 2
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	94 07       	cpc	r25, r20
    11cc:	34 f0       	brlt	.+12     	; 0x11da <handleRFCommands+0x108>
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	92 e0       	ldi	r25, 0x02	; 2
    11d2:	90 93 fa 03 	sts	0x03FA, r25
    11d6:	80 93 f9 03 	sts	0x03F9, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    11da:	4e ef       	ldi	r20, 0xFE	; 254
    11dc:	20 30       	cpi	r18, 0x00	; 0
    11de:	34 07       	cpc	r19, r20
    11e0:	34 f4       	brge	.+12     	; 0x11ee <handleRFCommands+0x11c>
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	5e ef       	ldi	r21, 0xFE	; 254
    11e6:	50 93 f8 03 	sts	0x03F8, r21
    11ea:	40 93 f7 03 	sts	0x03F7, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    11ee:	2e ef       	ldi	r18, 0xFE	; 254
    11f0:	80 30       	cpi	r24, 0x00	; 0
    11f2:	92 07       	cpc	r25, r18
    11f4:	34 f4       	brge	.+12     	; 0x1202 <handleRFCommands+0x130>
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	9e ef       	ldi	r25, 0xFE	; 254
    11fa:	90 93 fa 03 	sts	0x03FA, r25
    11fe:	80 93 f9 03 	sts	0x03F9, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    1202:	26 2f       	mov	r18, r22
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	30 93 68 05 	sts	0x0568, r19
    120a:	20 93 67 05 	sts	0x0567, r18
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	f0 93 6a 05 	sts	0x056A, r31
    1214:	e0 93 69 05 	sts	0x0569, r30
    1218:	c7 2f       	mov	r28, r23
    121a:	d0 e0       	ldi	r29, 0x00	; 0
    121c:	d0 93 6c 05 	sts	0x056C, r29
    1220:	c0 93 6b 05 	sts	0x056B, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1224:	92 2f       	mov	r25, r18
    1226:	88 27       	eor	r24, r24
    1228:	82 1b       	sub	r24, r18
    122a:	93 0b       	sbc	r25, r19
    122c:	24 e6       	ldi	r18, 0x64	; 100
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	b9 01       	movw	r22, r18
    1232:	0e 94 35 2c 	call	0x586a	; 0x586a <__udivmodhi4>
    1236:	16 2f       	mov	r17, r22
    1238:	10 95       	com	r17
    123a:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    123e:	5e 2f       	mov	r21, r30
    1240:	44 27       	eor	r20, r20
    1242:	4e 1b       	sub	r20, r30
    1244:	5f 0b       	sbc	r21, r31
    1246:	ca 01       	movw	r24, r20
    1248:	b9 01       	movw	r22, r18
    124a:	0e 94 35 2c 	call	0x586a	; 0x586a <__udivmodhi4>
    124e:	60 95       	com	r22
    1250:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1254:	5c 2f       	mov	r21, r28
    1256:	44 27       	eor	r20, r20
    1258:	4c 1b       	sub	r20, r28
    125a:	5d 0b       	sbc	r21, r29
    125c:	ca 01       	movw	r24, r20
    125e:	b9 01       	movw	r22, r18
    1260:	0e 94 35 2c 	call	0x586a	; 0x586a <__udivmodhi4>
    1264:	60 95       	com	r22
    1266:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    126a:	81 2f       	mov	r24, r17
    126c:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <updateRedLed>
		updateGreenLed(pwm_green);
    1270:	80 91 0d 02 	lds	r24, 0x020D
    1274:	0e 94 00 21 	call	0x4200	; 0x4200 <updateGreenLed>
		updateBlueLed(pwm_blue);
    1278:	80 91 0e 02 	lds	r24, 0x020E
    127c:	0e 94 14 21 	call	0x4228	; 0x4228 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    1280:	80 91 72 05 	lds	r24, 0x0572
    1284:	80 ff       	sbrs	r24, 0
    1286:	02 c1       	rjmp	.+516    	; 0x148c <handleRFCommands+0x3ba>
			LED_IR1_LOW;
    1288:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    128a:	81 ff       	sbrs	r24, 1
    128c:	02 c1       	rjmp	.+516    	; 0x1492 <handleRFCommands+0x3c0>
			LED_IR2_LOW;
    128e:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1290:	98 2f       	mov	r25, r24
    1292:	82 ff       	sbrs	r24, 2
    1294:	02 c1       	rjmp	.+516    	; 0x149a <handleRFCommands+0x3c8>
			irEnabled = 1;
    1296:	21 e0       	ldi	r18, 0x01	; 1
    1298:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    129c:	84 fd       	sbrc	r24, 4
    129e:	01 c1       	rjmp	.+514    	; 0x14a2 <handleRFCommands+0x3d0>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    12a0:	86 ff       	sbrs	r24, 6
    12a2:	06 c1       	rjmp	.+524    	; 0x14b0 <handleRFCommands+0x3de>
			obstacleAvoidanceEnabled = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 4f 05 	sts	0x054F, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    12aa:	97 fd       	sbrc	r25, 7
    12ac:	05 c1       	rjmp	.+522    	; 0x14b8 <handleRFCommands+0x3e6>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    12ae:	10 92 50 05 	sts	0x0550, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    12b2:	80 91 75 05 	lds	r24, 0x0575
    12b6:	80 ff       	sbrs	r24, 0
    12b8:	06 c1       	rjmp	.+524    	; 0x14c6 <handleRFCommands+0x3f4>
				GREEN_LED0_ON;
    12ba:	80 91 0b 01 	lds	r24, 0x010B
    12be:	8e 7f       	andi	r24, 0xFE	; 254
    12c0:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    12c4:	80 91 75 05 	lds	r24, 0x0575
    12c8:	81 ff       	sbrs	r24, 1
    12ca:	06 c1       	rjmp	.+524    	; 0x14d8 <handleRFCommands+0x406>
				GREEN_LED1_ON;
    12cc:	80 91 0b 01 	lds	r24, 0x010B
    12d0:	8d 7f       	andi	r24, 0xFD	; 253
    12d2:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    12d6:	80 91 75 05 	lds	r24, 0x0575
    12da:	82 ff       	sbrs	r24, 2
    12dc:	06 c1       	rjmp	.+524    	; 0x14ea <handleRFCommands+0x418>
				GREEN_LED2_ON;
    12de:	80 91 0b 01 	lds	r24, 0x010B
    12e2:	8b 7f       	andi	r24, 0xFB	; 251
    12e4:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    12e8:	80 91 75 05 	lds	r24, 0x0575
    12ec:	83 ff       	sbrs	r24, 3
    12ee:	06 c1       	rjmp	.+524    	; 0x14fc <handleRFCommands+0x42a>
				GREEN_LED3_ON;
    12f0:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    12f2:	80 91 75 05 	lds	r24, 0x0575
    12f6:	84 ff       	sbrs	r24, 4
    12f8:	06 c1       	rjmp	.+524    	; 0x1506 <handleRFCommands+0x434>
				GREEN_LED4_ON;
    12fa:	80 91 0b 01 	lds	r24, 0x010B
    12fe:	8f 7e       	andi	r24, 0xEF	; 239
    1300:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    1304:	80 91 75 05 	lds	r24, 0x0575
    1308:	85 ff       	sbrs	r24, 5
    130a:	06 c1       	rjmp	.+524    	; 0x1518 <handleRFCommands+0x446>
				GREEN_LED5_ON;
    130c:	80 91 0b 01 	lds	r24, 0x010B
    1310:	8f 7d       	andi	r24, 0xDF	; 223
    1312:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    1316:	80 91 75 05 	lds	r24, 0x0575
    131a:	86 ff       	sbrs	r24, 6
    131c:	06 c1       	rjmp	.+524    	; 0x152a <handleRFCommands+0x458>
				GREEN_LED6_ON;
    131e:	80 91 0b 01 	lds	r24, 0x010B
    1322:	8f 7b       	andi	r24, 0xBF	; 191
    1324:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    1328:	80 91 75 05 	lds	r24, 0x0575
    132c:	87 fd       	sbrc	r24, 7
    132e:	06 c1       	rjmp	.+524    	; 0x153c <handleRFCommands+0x46a>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    1330:	80 91 0b 01 	lds	r24, 0x010B
    1334:	80 68       	ori	r24, 0x80	; 128
    1336:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    133a:	80 91 0b 02 	lds	r24, 0x020B
    133e:	80 93 57 05 	sts	0x0557, r24

		switch(packetId) {
    1342:	85 30       	cpi	r24, 0x05	; 5
    1344:	09 f4       	brne	.+2      	; 0x1348 <handleRFCommands+0x276>
    1346:	06 c1       	rjmp	.+524    	; 0x1554 <handleRFCommands+0x482>
    1348:	86 30       	cpi	r24, 0x06	; 6
    134a:	08 f0       	brcs	.+2      	; 0x134e <handleRFCommands+0x27c>
    134c:	5f c1       	rjmp	.+702    	; 0x160c <handleRFCommands+0x53a>
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	09 f4       	brne	.+2      	; 0x1354 <handleRFCommands+0x282>
    1352:	0e c2       	rjmp	.+1052   	; 0x1770 <handleRFCommands+0x69e>
    1354:	84 30       	cpi	r24, 0x04	; 4
    1356:	09 f0       	breq	.+2      	; 0x135a <handleRFCommands+0x288>
    1358:	3f c0       	rjmp	.+126    	; 0x13d8 <handleRFCommands+0x306>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    135a:	90 91 67 03 	lds	r25, 0x0367
    135e:	80 91 68 03 	lds	r24, 0x0368
    1362:	90 93 58 05 	sts	0x0558, r25
				ackPayload[2] = proximityResult[4]>>8;
    1366:	80 93 59 05 	sts	0x0559, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    136a:	90 91 6f 03 	lds	r25, 0x036F
    136e:	80 91 70 03 	lds	r24, 0x0370
    1372:	90 93 5a 05 	sts	0x055A, r25
				ackPayload[4] = proximityResult[8]>>8;
    1376:	80 93 5b 05 	sts	0x055B, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    137a:	90 91 71 03 	lds	r25, 0x0371
    137e:	80 91 72 03 	lds	r24, 0x0372
    1382:	90 93 5c 05 	sts	0x055C, r25
				ackPayload[6] = proximityResult[9]>>8;
    1386:	80 93 5d 05 	sts	0x055D, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    138a:	90 91 73 03 	lds	r25, 0x0373
    138e:	80 91 74 03 	lds	r24, 0x0374
    1392:	90 93 5e 05 	sts	0x055E, r25
				ackPayload[8] = proximityResult[10]>>8;
    1396:	80 93 5f 05 	sts	0x055F, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    139a:	90 91 75 03 	lds	r25, 0x0375
    139e:	80 91 76 03 	lds	r24, 0x0376
    13a2:	90 93 60 05 	sts	0x0560, r25
				ackPayload[10] = proximityResult[11]>>8;
    13a6:	80 93 61 05 	sts	0x0561, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    13aa:	90 91 20 05 	lds	r25, 0x0520
    13ae:	80 91 21 05 	lds	r24, 0x0521
    13b2:	90 93 62 05 	sts	0x0562, r25
				ackPayload[12] = accX>>8;
    13b6:	80 93 63 05 	sts	0x0563, r24
				ackPayload[13] = accY&0xFF;
    13ba:	90 91 22 05 	lds	r25, 0x0522
    13be:	80 91 23 05 	lds	r24, 0x0523
    13c2:	90 93 64 05 	sts	0x0564, r25
				ackPayload[14] = accY>>8;
    13c6:	80 93 65 05 	sts	0x0565, r24
				ackPayload[15] = irCommand;
    13ca:	80 91 1b 05 	lds	r24, 0x051B
    13ce:	80 93 66 05 	sts	0x0566, r24
				packetId = 5;
    13d2:	85 e0       	ldi	r24, 0x05	; 5
    13d4:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
    13d8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    13da:	81 ee       	ldi	r24, 0xE1	; 225
    13dc:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    mirf_CSN_hi;
    13e0:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    13e2:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    13e4:	88 ea       	ldi	r24, 0xA8	; 168
    13e6:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    13ea:	80 91 57 05 	lds	r24, 0x0557
    13ee:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    13f2:	80 91 58 05 	lds	r24, 0x0558
    13f6:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    13fa:	80 91 59 05 	lds	r24, 0x0559
    13fe:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    1402:	80 91 5a 05 	lds	r24, 0x055A
    1406:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    140a:	80 91 5b 05 	lds	r24, 0x055B
    140e:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    1412:	80 91 5c 05 	lds	r24, 0x055C
    1416:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    141a:	80 91 5d 05 	lds	r24, 0x055D
    141e:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    1422:	80 91 5e 05 	lds	r24, 0x055E
    1426:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    142a:	80 91 5f 05 	lds	r24, 0x055F
    142e:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    1432:	80 91 60 05 	lds	r24, 0x0560
    1436:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    143a:	80 91 61 05 	lds	r24, 0x0561
    143e:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    1442:	80 91 62 05 	lds	r24, 0x0562
    1446:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    144a:	80 91 63 05 	lds	r24, 0x0563
    144e:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    1452:	80 91 64 05 	lds	r24, 0x0564
    1456:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    145a:	80 91 65 05 	lds	r24, 0x0565
    145e:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
    1462:	80 91 66 05 	lds	r24, 0x0566
    1466:	0e 94 c3 06 	call	0xd86	; 0xd86 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    146a:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	1f 91       	pop	r17
    1472:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1474:	e0 91 70 05 	lds	r30, 0x0570
    1478:	ee 23       	and	r30, r30
    147a:	09 f4       	brne	.+2      	; 0x147e <handleRFCommands+0x3ac>
    147c:	12 c1       	rjmp	.+548    	; 0x16a2 <handleRFCommands+0x5d0>
    147e:	50 91 73 05 	lds	r21, 0x0573
    1482:	40 91 74 05 	lds	r20, 0x0574
    1486:	70 91 71 05 	lds	r23, 0x0571
    148a:	67 ce       	rjmp	.-818    	; 0x115a <handleRFCommands+0x88>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    148c:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    148e:	81 fd       	sbrc	r24, 1
    1490:	fe ce       	rjmp	.-516    	; 0x128e <handleRFCommands+0x1bc>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    1492:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1494:	98 2f       	mov	r25, r24
    1496:	82 fd       	sbrc	r24, 2
    1498:	fe ce       	rjmp	.-516    	; 0x1296 <handleRFCommands+0x1c4>
			irEnabled = 1;
		} else {
			irEnabled = 0;
    149a:	10 92 12 02 	sts	0x0212, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    149e:	84 ff       	sbrs	r24, 4
    14a0:	ff ce       	rjmp	.-514    	; 0x12a0 <handleRFCommands+0x1ce>
			calibrateSensors();
    14a2:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <calibrateSensors>
    14a6:	90 91 72 05 	lds	r25, 0x0572
    14aa:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    14ac:	86 fd       	sbrc	r24, 6
    14ae:	fa ce       	rjmp	.-524    	; 0x12a4 <handleRFCommands+0x1d2>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    14b0:	10 92 4f 05 	sts	0x054F, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    14b4:	97 ff       	sbrs	r25, 7
    14b6:	fb ce       	rjmp	.-522    	; 0x12ae <handleRFCommands+0x1dc>
			cliffAvoidanceEnabled = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	80 93 50 05 	sts	0x0550, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    14be:	80 91 75 05 	lds	r24, 0x0575
    14c2:	80 fd       	sbrc	r24, 0
    14c4:	fa ce       	rjmp	.-524    	; 0x12ba <handleRFCommands+0x1e8>
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    14c6:	80 91 0b 01 	lds	r24, 0x010B
    14ca:	81 60       	ori	r24, 0x01	; 1
    14cc:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    14d0:	80 91 75 05 	lds	r24, 0x0575
    14d4:	81 fd       	sbrc	r24, 1
    14d6:	fa ce       	rjmp	.-524    	; 0x12cc <handleRFCommands+0x1fa>
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    14d8:	80 91 0b 01 	lds	r24, 0x010B
    14dc:	82 60       	ori	r24, 0x02	; 2
    14de:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    14e2:	80 91 75 05 	lds	r24, 0x0575
    14e6:	82 fd       	sbrc	r24, 2
    14e8:	fa ce       	rjmp	.-524    	; 0x12de <handleRFCommands+0x20c>
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    14ea:	80 91 0b 01 	lds	r24, 0x010B
    14ee:	84 60       	ori	r24, 0x04	; 4
    14f0:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
    14f4:	80 91 75 05 	lds	r24, 0x0575
    14f8:	83 fd       	sbrc	r24, 3
    14fa:	fa ce       	rjmp	.-524    	; 0x12f0 <handleRFCommands+0x21e>
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    14fc:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
    14fe:	80 91 75 05 	lds	r24, 0x0575
    1502:	84 fd       	sbrc	r24, 4
    1504:	fa ce       	rjmp	.-524    	; 0x12fa <handleRFCommands+0x228>
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    1506:	80 91 0b 01 	lds	r24, 0x010B
    150a:	80 61       	ori	r24, 0x10	; 16
    150c:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
    1510:	80 91 75 05 	lds	r24, 0x0575
    1514:	85 fd       	sbrc	r24, 5
    1516:	fa ce       	rjmp	.-524    	; 0x130c <handleRFCommands+0x23a>
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    1518:	80 91 0b 01 	lds	r24, 0x010B
    151c:	80 62       	ori	r24, 0x20	; 32
    151e:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
    1522:	80 91 75 05 	lds	r24, 0x0575
    1526:	86 fd       	sbrc	r24, 6
    1528:	fa ce       	rjmp	.-524    	; 0x131e <handleRFCommands+0x24c>
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    152a:	80 91 0b 01 	lds	r24, 0x010B
    152e:	80 64       	ori	r24, 0x40	; 64
    1530:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
    1534:	80 91 75 05 	lds	r24, 0x0575
    1538:	87 ff       	sbrs	r24, 7
    153a:	fa ce       	rjmp	.-524    	; 0x1330 <handleRFCommands+0x25e>
				GREEN_LED7_ON;
    153c:	80 91 0b 01 	lds	r24, 0x010B
    1540:	8f 77       	andi	r24, 0x7F	; 127
    1542:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1546:	80 91 0b 02 	lds	r24, 0x020B
    154a:	80 93 57 05 	sts	0x0557, r24

		switch(packetId) {
    154e:	85 30       	cpi	r24, 0x05	; 5
    1550:	09 f0       	breq	.+2      	; 0x1554 <handleRFCommands+0x482>
    1552:	fa ce       	rjmp	.-524    	; 0x1348 <handleRFCommands+0x276>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    1554:	80 91 2f 03 	lds	r24, 0x032F
    1558:	90 91 30 03 	lds	r25, 0x0330
    155c:	80 93 58 05 	sts	0x0558, r24
				ackPayload[2] = proximityValue[0]>>8;
    1560:	80 91 2f 03 	lds	r24, 0x032F
    1564:	90 91 30 03 	lds	r25, 0x0330
    1568:	90 93 59 05 	sts	0x0559, r25
				ackPayload[3] = proximityValue[2]&0xFF;
    156c:	80 91 33 03 	lds	r24, 0x0333
    1570:	90 91 34 03 	lds	r25, 0x0334
    1574:	80 93 5a 05 	sts	0x055A, r24
				ackPayload[4] = proximityValue[2]>>8;
    1578:	80 91 33 03 	lds	r24, 0x0333
    157c:	90 91 34 03 	lds	r25, 0x0334
    1580:	90 93 5b 05 	sts	0x055B, r25
				ackPayload[5] = proximityValue[4]&0xFF;
    1584:	80 91 37 03 	lds	r24, 0x0337
    1588:	90 91 38 03 	lds	r25, 0x0338
    158c:	80 93 5c 05 	sts	0x055C, r24
				ackPayload[6] = proximityValue[4]>>8;
    1590:	80 91 37 03 	lds	r24, 0x0337
    1594:	90 91 38 03 	lds	r25, 0x0338
    1598:	90 93 5d 05 	sts	0x055D, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    159c:	80 91 3b 03 	lds	r24, 0x033B
    15a0:	90 91 3c 03 	lds	r25, 0x033C
    15a4:	80 93 5e 05 	sts	0x055E, r24
				ackPayload[8] = proximityValue[6]>>8;
    15a8:	80 91 3b 03 	lds	r24, 0x033B
    15ac:	90 91 3c 03 	lds	r25, 0x033C
    15b0:	90 93 5f 05 	sts	0x055F, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    15b4:	80 91 43 03 	lds	r24, 0x0343
    15b8:	90 91 44 03 	lds	r25, 0x0344
    15bc:	80 93 60 05 	sts	0x0560, r24
				ackPayload[10] = proximityValue[10]>>8;
    15c0:	80 91 43 03 	lds	r24, 0x0343
    15c4:	90 91 44 03 	lds	r25, 0x0344
    15c8:	90 93 61 05 	sts	0x0561, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    15cc:	80 91 47 03 	lds	r24, 0x0347
    15d0:	90 91 48 03 	lds	r25, 0x0348
    15d4:	80 93 62 05 	sts	0x0562, r24
				ackPayload[12] = proximityValue[12]>>8;
    15d8:	80 91 47 03 	lds	r24, 0x0347
    15dc:	90 91 48 03 	lds	r25, 0x0348
    15e0:	90 93 63 05 	sts	0x0563, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    15e4:	80 91 4b 03 	lds	r24, 0x034B
    15e8:	90 91 4c 03 	lds	r25, 0x034C
    15ec:	80 93 64 05 	sts	0x0564, r24
				ackPayload[14] = proximityValue[14]>>8;
    15f0:	80 91 4b 03 	lds	r24, 0x034B
    15f4:	90 91 4c 03 	lds	r25, 0x034C
    15f8:	90 93 65 05 	sts	0x0565, r25
				ackPayload[15] = currentSelector;
    15fc:	80 91 3f 05 	lds	r24, 0x053F
    1600:	80 93 66 05 	sts	0x0566, r24
				packetId = 6;
    1604:	86 e0       	ldi	r24, 0x06	; 6
    1606:	80 93 0b 02 	sts	0x020B, r24
				break;
    160a:	e6 ce       	rjmp	.-564    	; 0x13d8 <handleRFCommands+0x306>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    160c:	86 30       	cpi	r24, 0x06	; 6
    160e:	09 f4       	brne	.+2      	; 0x1612 <handleRFCommands+0x540>
    1610:	5d c0       	rjmp	.+186    	; 0x16cc <handleRFCommands+0x5fa>
    1612:	87 30       	cpi	r24, 0x07	; 7
    1614:	09 f0       	breq	.+2      	; 0x1618 <handleRFCommands+0x546>
    1616:	e0 ce       	rjmp	.-576    	; 0x13d8 <handleRFCommands+0x306>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = leftMotSteps&0xFF;
    1618:	30 91 db 03 	lds	r19, 0x03DB
    161c:	20 91 dc 03 	lds	r18, 0x03DC
    1620:	90 91 dd 03 	lds	r25, 0x03DD
    1624:	80 91 de 03 	lds	r24, 0x03DE
    1628:	30 93 58 05 	sts	0x0558, r19
				ackPayload[2] = leftMotSteps>>8;
    162c:	20 93 59 05 	sts	0x0559, r18
				ackPayload[3] = leftMotSteps>>16;
    1630:	90 93 5a 05 	sts	0x055A, r25
				ackPayload[4] = leftMotSteps>>24;
    1634:	80 93 5b 05 	sts	0x055B, r24
				ackPayload[5] = rightMotSteps&0xFF;
    1638:	30 91 d7 03 	lds	r19, 0x03D7
    163c:	20 91 d8 03 	lds	r18, 0x03D8
    1640:	90 91 d9 03 	lds	r25, 0x03D9
    1644:	80 91 da 03 	lds	r24, 0x03DA
    1648:	30 93 5c 05 	sts	0x055C, r19
				ackPayload[6] = rightMotSteps>>8;
    164c:	20 93 5d 05 	sts	0x055D, r18
				ackPayload[7] = rightMotSteps>>16;
    1650:	90 93 5e 05 	sts	0x055E, r25
				ackPayload[8] = rightMotSteps>>24;
    1654:	80 93 5f 05 	sts	0x055F, r24
				ackPayload[9] = 0;
    1658:	10 92 60 05 	sts	0x0560, r1
				ackPayload[10] = 0;
    165c:	10 92 61 05 	sts	0x0561, r1
				ackPayload[11] = 0;
    1660:	10 92 62 05 	sts	0x0562, r1
				ackPayload[12] = 0;
    1664:	10 92 63 05 	sts	0x0563, r1
				ackPayload[13] = 0;
    1668:	10 92 64 05 	sts	0x0564, r1
				ackPayload[14] = 0;
    166c:	10 92 65 05 	sts	0x0565, r1
				ackPayload[15] = 0;
    1670:	10 92 66 05 	sts	0x0566, r1
				packetId = 3;
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	80 93 0b 02 	sts	0x020B, r24
				break;
    167a:	ae ce       	rjmp	.-676    	; 0x13d8 <handleRFCommands+0x306>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    167c:	22 0f       	add	r18, r18
    167e:	33 1f       	adc	r19, r19
    1680:	22 0f       	add	r18, r18
    1682:	33 1f       	adc	r19, r19
    1684:	30 93 f8 03 	sts	0x03F8, r19
    1688:	20 93 f7 03 	sts	0x03F7, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    168c:	47 ff       	sbrs	r20, 7
    168e:	84 cd       	rjmp	.-1272   	; 0x1198 <handleRFCommands+0xc6>
			pwm_left_desired = speedl<<2;
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	90 93 fa 03 	sts	0x03FA, r25
    169c:	80 93 f9 03 	sts	0x03F9, r24
    16a0:	86 cd       	rjmp	.-1268   	; 0x11ae <handleRFCommands+0xdc>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    16a2:	70 91 71 05 	lds	r23, 0x0571
    16a6:	77 23       	and	r23, r23
    16a8:	61 f4       	brne	.+24     	; 0x16c2 <handleRFCommands+0x5f0>
    16aa:	80 91 72 05 	lds	r24, 0x0572
    16ae:	88 30       	cpi	r24, 0x08	; 8
    16b0:	41 f4       	brne	.+16     	; 0x16c2 <handleRFCommands+0x5f0>
    16b2:	50 91 73 05 	lds	r21, 0x0573
    16b6:	55 23       	and	r21, r21
    16b8:	09 f4       	brne	.+2      	; 0x16bc <handleRFCommands+0x5ea>
    16ba:	c0 c0       	rjmp	.+384    	; 0x183c <handleRFCommands+0x76a>
    16bc:	40 91 74 05 	lds	r20, 0x0574
    16c0:	4c cd       	rjmp	.-1384   	; 0x115a <handleRFCommands+0x88>
    16c2:	50 91 73 05 	lds	r21, 0x0573
    16c6:	40 91 74 05 	lds	r20, 0x0574
    16ca:	47 cd       	rjmp	.-1394   	; 0x115a <handleRFCommands+0x88>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    16cc:	80 91 3f 03 	lds	r24, 0x033F
    16d0:	90 91 40 03 	lds	r25, 0x0340
    16d4:	80 93 58 05 	sts	0x0558, r24
				ackPayload[2] = proximityValue[8]>>8;
    16d8:	80 91 3f 03 	lds	r24, 0x033F
    16dc:	90 91 40 03 	lds	r25, 0x0340
    16e0:	90 93 59 05 	sts	0x0559, r25
				ackPayload[3] = proximityValue[16]&0xFF;
    16e4:	80 91 4f 03 	lds	r24, 0x034F
    16e8:	90 91 50 03 	lds	r25, 0x0350
    16ec:	80 93 5a 05 	sts	0x055A, r24
				ackPayload[4] = proximityValue[16]>>8;
    16f0:	80 91 4f 03 	lds	r24, 0x034F
    16f4:	90 91 50 03 	lds	r25, 0x0350
    16f8:	90 93 5b 05 	sts	0x055B, r25
				ackPayload[5] = proximityValue[18]&0xFF;
    16fc:	80 91 53 03 	lds	r24, 0x0353
    1700:	90 91 54 03 	lds	r25, 0x0354
    1704:	80 93 5c 05 	sts	0x055C, r24
				ackPayload[6] = proximityValue[18]>>8;
    1708:	80 91 53 03 	lds	r24, 0x0353
    170c:	90 91 54 03 	lds	r25, 0x0354
    1710:	90 93 5d 05 	sts	0x055D, r25
				ackPayload[7] = proximityValue[20]&0xFF;
    1714:	80 91 57 03 	lds	r24, 0x0357
    1718:	90 91 58 03 	lds	r25, 0x0358
    171c:	80 93 5e 05 	sts	0x055E, r24
				ackPayload[8] = proximityValue[20]>>8;
    1720:	80 91 57 03 	lds	r24, 0x0357
    1724:	90 91 58 03 	lds	r25, 0x0358
    1728:	90 93 5f 05 	sts	0x055F, r25
				ackPayload[9] = proximityValue[22]&0xFF;
    172c:	80 91 5b 03 	lds	r24, 0x035B
    1730:	90 91 5c 03 	lds	r25, 0x035C
    1734:	80 93 60 05 	sts	0x0560, r24
				ackPayload[10] = proximityValue[22]>>8;
    1738:	80 91 5b 03 	lds	r24, 0x035B
    173c:	90 91 5c 03 	lds	r25, 0x035C
    1740:	90 93 61 05 	sts	0x0561, r25
				ackPayload[11] = accZ&0xFF;
    1744:	90 91 24 05 	lds	r25, 0x0524
    1748:	80 91 25 05 	lds	r24, 0x0525
    174c:	90 93 62 05 	sts	0x0562, r25
				ackPayload[12] = accZ>>8;
    1750:	80 93 63 05 	sts	0x0563, r24
				ackPayload[13] = batteryLevel&0xFF;
    1754:	90 91 c3 03 	lds	r25, 0x03C3
    1758:	80 91 c4 03 	lds	r24, 0x03C4
    175c:	90 93 64 05 	sts	0x0564, r25
				ackPayload[14] = batteryLevel>>8;
    1760:	80 93 65 05 	sts	0x0565, r24
				ackPayload[15] = 0;
    1764:	10 92 66 05 	sts	0x0566, r1
				packetId = 7;
    1768:	87 e0       	ldi	r24, 0x07	; 7
    176a:	80 93 0b 02 	sts	0x020B, r24
				break;
    176e:	34 ce       	rjmp	.-920    	; 0x13d8 <handleRFCommands+0x306>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
    1770:	90 91 5f 03 	lds	r25, 0x035F
    1774:	80 91 60 03 	lds	r24, 0x0360
    1778:	90 93 58 05 	sts	0x0558, r25
				ackPayload[2] = proximityResult[0]>>8;
    177c:	80 93 59 05 	sts	0x0559, r24
				ackPayload[3] = proximityResult[1]&0xFF;
    1780:	90 91 61 03 	lds	r25, 0x0361
    1784:	80 91 62 03 	lds	r24, 0x0362
    1788:	90 93 5a 05 	sts	0x055A, r25
				ackPayload[4] = proximityResult[1]>>8;
    178c:	80 93 5b 05 	sts	0x055B, r24
				ackPayload[5] = proximityResult[2]&0xFF;
    1790:	90 91 63 03 	lds	r25, 0x0363
    1794:	80 91 64 03 	lds	r24, 0x0364
    1798:	90 93 5c 05 	sts	0x055C, r25
				ackPayload[6] = proximityResult[2]>>8;
    179c:	80 93 5d 05 	sts	0x055D, r24
				ackPayload[7] = proximityResult[3]&0xFF;
    17a0:	90 91 65 03 	lds	r25, 0x0365
    17a4:	80 91 66 03 	lds	r24, 0x0366
    17a8:	90 93 5e 05 	sts	0x055E, r25
				ackPayload[8] = proximityResult[3]>>8;
    17ac:	80 93 5f 05 	sts	0x055F, r24
				ackPayload[9] = proximityResult[5]&0xFF;
    17b0:	90 91 69 03 	lds	r25, 0x0369
    17b4:	80 91 6a 03 	lds	r24, 0x036A
    17b8:	90 93 60 05 	sts	0x0560, r25
				ackPayload[10] = proximityResult[5]>>8;
    17bc:	80 93 61 05 	sts	0x0561, r24
				ackPayload[11] = proximityResult[6]&0xFF;
    17c0:	90 91 6b 03 	lds	r25, 0x036B
    17c4:	80 91 6c 03 	lds	r24, 0x036C
    17c8:	90 93 62 05 	sts	0x0562, r25
				ackPayload[12] = proximityResult[6]>>8;
    17cc:	80 93 63 05 	sts	0x0563, r24
				ackPayload[13] = proximityResult[7]&0xFF;
    17d0:	90 91 6d 03 	lds	r25, 0x036D
    17d4:	80 91 6e 03 	lds	r24, 0x036E
    17d8:	90 93 64 05 	sts	0x0564, r25
				ackPayload[14] = proximityResult[7]>>8;
    17dc:	80 93 65 05 	sts	0x0565, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    17e0:	30 91 03 01 	lds	r19, 0x0103
    17e4:	80 91 03 01 	lds	r24, 0x0103
    17e8:	20 91 03 01 	lds	r18, 0x0103
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	80 72       	andi	r24, 0x20	; 32
    17f0:	90 70       	andi	r25, 0x00	; 0
    17f2:	95 95       	asr	r25
    17f4:	87 95       	ror	r24
    17f6:	95 95       	asr	r25
    17f8:	87 95       	ror	r24
    17fa:	95 95       	asr	r25
    17fc:	87 95       	ror	r24
    17fe:	95 95       	asr	r25
    1800:	87 95       	ror	r24
    1802:	95 95       	asr	r25
    1804:	87 95       	ror	r24
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	22 1f       	adc	r18, r18
    180c:	22 27       	eor	r18, r18
    180e:	22 1f       	adc	r18, r18
    1810:	22 0f       	add	r18, r18
    1812:	22 0f       	add	r18, r18
    1814:	28 2b       	or	r18, r24
    1816:	83 2f       	mov	r24, r19
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	80 71       	andi	r24, 0x10	; 16
    181c:	90 70       	andi	r25, 0x00	; 0
    181e:	95 95       	asr	r25
    1820:	87 95       	ror	r24
    1822:	95 95       	asr	r25
    1824:	87 95       	ror	r24
    1826:	95 95       	asr	r25
    1828:	87 95       	ror	r24
    182a:	95 95       	asr	r25
    182c:	87 95       	ror	r24
    182e:	28 2b       	or	r18, r24
    1830:	20 93 66 05 	sts	0x0566, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    1834:	84 e0       	ldi	r24, 0x04	; 4
    1836:	80 93 0b 02 	sts	0x020B, r24
				break;
    183a:	ce cd       	rjmp	.-1124   	; 0x13d8 <handleRFCommands+0x306>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    183c:	40 91 74 05 	lds	r20, 0x0574
    1840:	44 23       	and	r20, r20
    1842:	79 f0       	breq	.+30     	; 0x1862 <handleRFCommands+0x790>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1844:	10 92 0a 04 	sts	0x040A, r1
    1848:	10 92 09 04 	sts	0x0409, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    184c:	84 2f       	mov	r24, r20
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	8f 77       	andi	r24, 0x7F	; 127
    1852:	90 70       	andi	r25, 0x00	; 0
    1854:	90 93 08 04 	sts	0x0408, r25
    1858:	80 93 07 04 	sts	0x0407, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	8e cc       	rjmp	.-1764   	; 0x117e <handleRFCommands+0xac>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    1862:	8c e3       	ldi	r24, 0x3C	; 60
    1864:	0e 94 41 16 	call	0x2c82	; 0x2c82 <sleep>
    1868:	50 91 73 05 	lds	r21, 0x0573
    186c:	40 91 74 05 	lds	r20, 0x0574
    1870:	60 91 6f 05 	lds	r22, 0x056F
    1874:	e0 91 70 05 	lds	r30, 0x0570
    1878:	70 91 71 05 	lds	r23, 0x0571
    187c:	6e cc       	rjmp	.-1828   	; 0x115a <handleRFCommands+0x88>

0000187e <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29

	PCICR = 0;
    1882:	c8 e6       	ldi	r28, 0x68	; 104
    1884:	d0 e0       	ldi	r29, 0x00	; 0
    1886:	18 82       	st	Y, r1
	PCMSK1 = 0;
    1888:	ac e6       	ldi	r26, 0x6C	; 108
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	1c 92       	st	X, r1
	TCCR2A = 0;
    188e:	e0 eb       	ldi	r30, 0xB0	; 176
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	10 82       	st	Z, r1
	TCCR2B = 0;
    1894:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    1898:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    189c:	88 81       	ld	r24, Y
    189e:	82 60       	ori	r24, 0x02	; 2
    18a0:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    18a2:	8c 91       	ld	r24, X
    18a4:	80 68       	ori	r24, 0x80	; 128
    18a6:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    18a8:	80 81       	ld	r24, Z
    18aa:	82 60       	ori	r24, 0x02	; 2
    18ac:	80 83       	st	Z, r24

}
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	08 95       	ret

000018b4 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    18b4:	1f 92       	push	r1
    18b6:	0f 92       	push	r0
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	0f 92       	push	r0
    18bc:	11 24       	eor	r1, r1
    18be:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    18c0:	80 91 12 02 	lds	r24, 0x0212
    18c4:	88 23       	and	r24, r24
    18c6:	21 f1       	breq	.+72     	; 0x1910 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    18c8:	80 91 03 01 	lds	r24, 0x0103
    18cc:	86 fd       	sbrc	r24, 6
    18ce:	20 c0       	rjmp	.+64     	; 0x1910 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    18d0:	80 91 68 00 	lds	r24, 0x0068
    18d4:	8d 7f       	andi	r24, 0xFD	; 253
    18d6:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    18da:	80 91 6c 00 	lds	r24, 0x006C
    18de:	8f 77       	andi	r24, 0x7F	; 127
    18e0:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    18ea:	8d e0       	ldi	r24, 0x0D	; 13
    18ec:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    18f0:	80 91 b1 00 	lds	r24, 0x00B1
    18f4:	86 60       	ori	r24, 0x06	; 6
    18f6:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    18fa:	80 91 70 00 	lds	r24, 0x0070
    18fe:	82 60       	ori	r24, 0x02	; 2
    1900:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    1904:	10 92 26 03 	sts	0x0326, r1
    1908:	10 92 27 03 	sts	0x0327, r1
    190c:	10 92 28 03 	sts	0x0328, r1

		}

	}
	
}
    1910:	8f 91       	pop	r24
    1912:	0f 90       	pop	r0
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	0f 90       	pop	r0
    1918:	1f 90       	pop	r1
    191a:	18 95       	reti

0000191c <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    191c:	1f 92       	push	r1
    191e:	0f 92       	push	r0
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	0f 92       	push	r0
    1924:	11 24       	eor	r1, r1
    1926:	2f 93       	push	r18
    1928:	3f 93       	push	r19
    192a:	4f 93       	push	r20
    192c:	5f 93       	push	r21
    192e:	8f 93       	push	r24
    1930:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    1932:	80 91 b1 00 	lds	r24, 0x00B1
    1936:	88 7f       	andi	r24, 0xF8	; 248
    1938:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    193c:	80 91 13 02 	lds	r24, 0x0213
    1940:	88 23       	and	r24, r24
    1942:	a9 f0       	breq	.+42     	; 0x196e <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    1944:	80 91 03 01 	lds	r24, 0x0103
    1948:	86 ff       	sbrs	r24, 6
    194a:	65 c0       	rjmp	.+202    	; 0x1a16 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    194c:	80 91 68 00 	lds	r24, 0x0068
    1950:	82 60       	ori	r24, 0x02	; 2
    1952:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1956:	80 91 6c 00 	lds	r24, 0x006C
    195a:	80 68       	ori	r24, 0x80	; 128
    195c:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	9f ef       	ldi	r25, 0xFF	; 255
    1964:	90 93 02 02 	sts	0x0202, r25
    1968:	80 93 01 02 	sts	0x0201, r24
    196c:	49 c0       	rjmp	.+146    	; 0x1a00 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    196e:	80 91 01 02 	lds	r24, 0x0201
    1972:	90 91 02 02 	lds	r25, 0x0202
    1976:	2f ef       	ldi	r18, 0xFF	; 255
    1978:	8f 3f       	cpi	r24, 0xFF	; 255
    197a:	92 07       	cpc	r25, r18
    197c:	09 f4       	brne	.+2      	; 0x1980 <__vector_13+0x64>
    197e:	63 c0       	rjmp	.+198    	; 0x1a46 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	91 05       	cpc	r25, r1
    1984:	09 f4       	brne	.+2      	; 0x1988 <__vector_13+0x6c>
    1986:	98 c0       	rjmp	.+304    	; 0x1ab8 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    1988:	9c 01       	movw	r18, r24
    198a:	22 50       	subi	r18, 0x02	; 2
    198c:	30 40       	sbci	r19, 0x00	; 0
    198e:	25 30       	cpi	r18, 0x05	; 5
    1990:	31 05       	cpc	r19, r1
    1992:	08 f4       	brcc	.+2      	; 0x1996 <__vector_13+0x7a>
    1994:	67 c0       	rjmp	.+206    	; 0x1a64 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    1996:	9c 01       	movw	r18, r24
    1998:	27 50       	subi	r18, 0x07	; 7
    199a:	30 40       	sbci	r19, 0x00	; 0
    199c:	26 30       	cpi	r18, 0x06	; 6
    199e:	31 05       	cpc	r19, r1
    19a0:	08 f0       	brcs	.+2      	; 0x19a4 <__vector_13+0x88>
    19a2:	bd c0       	rjmp	.+378    	; 0x1b1e <__vector_13+0x202>

				OCR2A = 54;
    19a4:	26 e3       	ldi	r18, 0x36	; 54
    19a6:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    19aa:	20 91 b1 00 	lds	r18, 0x00B1
    19ae:	26 60       	ori	r18, 0x06	; 6
    19b0:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    19b4:	20 91 70 00 	lds	r18, 0x0070
    19b8:	22 60       	ori	r18, 0x02	; 2
    19ba:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    19be:	20 91 03 01 	lds	r18, 0x0103
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	20 74       	andi	r18, 0x40	; 64
    19c6:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    19c8:	00 24       	eor	r0, r0
    19ca:	22 0f       	add	r18, r18
    19cc:	33 1f       	adc	r19, r19
    19ce:	00 1c       	adc	r0, r0
    19d0:	22 0f       	add	r18, r18
    19d2:	33 1f       	adc	r19, r19
    19d4:	00 1c       	adc	r0, r0
    19d6:	23 2f       	mov	r18, r19
    19d8:	30 2d       	mov	r19, r0
    19da:	4c e0       	ldi	r20, 0x0C	; 12
    19dc:	50 e0       	ldi	r21, 0x00	; 0
    19de:	48 1b       	sub	r20, r24
    19e0:	59 0b       	sbc	r21, r25
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <__vector_13+0xcc>
    19e4:	22 0f       	add	r18, r18
    19e6:	33 1f       	adc	r19, r19
    19e8:	4a 95       	dec	r20
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <__vector_13+0xc8>
				data_temp += temp;
    19ec:	40 91 26 03 	lds	r20, 0x0326
    19f0:	42 0f       	add	r20, r18
    19f2:	40 93 26 03 	sts	0x0326, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    19f6:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    19f8:	90 93 02 02 	sts	0x0202, r25
    19fc:	80 93 01 02 	sts	0x0201, r24

		}

}
    1a00:	9f 91       	pop	r25
    1a02:	8f 91       	pop	r24
    1a04:	5f 91       	pop	r21
    1a06:	4f 91       	pop	r20
    1a08:	3f 91       	pop	r19
    1a0a:	2f 91       	pop	r18
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	0f 90       	pop	r0
    1a12:	1f 90       	pop	r1
    1a14:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    1a16:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    1a1a:	83 e3       	ldi	r24, 0x33	; 51
    1a1c:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1a20:	80 91 b1 00 	lds	r24, 0x00B1
    1a24:	86 60       	ori	r24, 0x06	; 6
    1a26:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1a2a:	80 91 70 00 	lds	r24, 0x0070
    1a2e:	82 60       	ori	r24, 0x02	; 2
    1a30:	80 93 70 00 	sts	0x0070, r24
    1a34:	80 91 01 02 	lds	r24, 0x0201
    1a38:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    1a3c:	2f ef       	ldi	r18, 0xFF	; 255
    1a3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a40:	92 07       	cpc	r25, r18
    1a42:	c9 f6       	brne	.-78     	; 0x19f6 <__vector_13+0xda>
    1a44:	dd cf       	rjmp	.-70     	; 0x1a00 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    1a46:	20 91 03 01 	lds	r18, 0x0103
    1a4a:	26 ff       	sbrs	r18, 6
    1a4c:	52 c0       	rjmp	.+164    	; 0x1af2 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1a4e:	20 91 68 00 	lds	r18, 0x0068
    1a52:	22 60       	ori	r18, 0x02	; 2
    1a54:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1a58:	20 91 6c 00 	lds	r18, 0x006C
    1a5c:	20 68       	ori	r18, 0x80	; 128
    1a5e:	20 93 6c 00 	sts	0x006C, r18
    1a62:	ce cf       	rjmp	.-100    	; 0x1a00 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    1a64:	26 e3       	ldi	r18, 0x36	; 54
    1a66:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1a6a:	20 91 b1 00 	lds	r18, 0x00B1
    1a6e:	26 60       	ori	r18, 0x06	; 6
    1a70:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1a74:	20 91 70 00 	lds	r18, 0x0070
    1a78:	22 60       	ori	r18, 0x02	; 2
    1a7a:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1a7e:	20 91 03 01 	lds	r18, 0x0103
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	20 74       	andi	r18, 0x40	; 64
    1a86:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    1a88:	00 24       	eor	r0, r0
    1a8a:	22 0f       	add	r18, r18
    1a8c:	33 1f       	adc	r19, r19
    1a8e:	00 1c       	adc	r0, r0
    1a90:	22 0f       	add	r18, r18
    1a92:	33 1f       	adc	r19, r19
    1a94:	00 1c       	adc	r0, r0
    1a96:	23 2f       	mov	r18, r19
    1a98:	30 2d       	mov	r19, r0
    1a9a:	46 e0       	ldi	r20, 0x06	; 6
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	48 1b       	sub	r20, r24
    1aa0:	59 0b       	sbc	r21, r25
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <__vector_13+0x18c>
    1aa4:	22 0f       	add	r18, r18
    1aa6:	33 1f       	adc	r19, r19
    1aa8:	4a 95       	dec	r20
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <__vector_13+0x188>
				address_temp += temp;
    1aac:	40 91 27 03 	lds	r20, 0x0327
    1ab0:	42 0f       	add	r20, r18
    1ab2:	40 93 27 03 	sts	0x0327, r20
    1ab6:	9f cf       	rjmp	.-194    	; 0x19f6 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    1ab8:	20 91 03 01 	lds	r18, 0x0103
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	20 74       	andi	r18, 0x40	; 64
    1ac0:	30 70       	andi	r19, 0x00	; 0
    1ac2:	02 2e       	mov	r0, r18
    1ac4:	23 2f       	mov	r18, r19
    1ac6:	00 0c       	add	r0, r0
    1ac8:	22 1f       	adc	r18, r18
    1aca:	33 0b       	sbc	r19, r19
    1acc:	00 0c       	add	r0, r0
    1ace:	22 1f       	adc	r18, r18
    1ad0:	33 1f       	adc	r19, r19
    1ad2:	20 93 28 03 	sts	0x0328, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    1ad6:	26 e3       	ldi	r18, 0x36	; 54
    1ad8:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1adc:	20 91 b1 00 	lds	r18, 0x00B1
    1ae0:	26 60       	ori	r18, 0x06	; 6
    1ae2:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1ae6:	20 91 70 00 	lds	r18, 0x0070
    1aea:	22 60       	ori	r18, 0x02	; 2
    1aec:	20 93 70 00 	sts	0x0070, r18
    1af0:	82 cf       	rjmp	.-252    	; 0x19f6 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    1af2:	8c e1       	ldi	r24, 0x1C	; 28
    1af4:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1af8:	80 91 b1 00 	lds	r24, 0x00B1
    1afc:	86 60       	ori	r24, 0x06	; 6
    1afe:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    1b02:	80 91 70 00 	lds	r24, 0x0070
    1b06:	82 60       	ori	r24, 0x02	; 2
    1b08:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    1b0c:	10 92 26 03 	sts	0x0326, r1
    1b10:	10 92 27 03 	sts	0x0327, r1
    1b14:	10 92 28 03 	sts	0x0328, r1
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	6d cf       	rjmp	.-294    	; 0x19f8 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    1b1e:	8d 30       	cpi	r24, 0x0D	; 13
    1b20:	91 05       	cpc	r25, r1
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <__vector_13+0x20a>
    1b24:	68 cf       	rjmp	.-304    	; 0x19f6 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    1b26:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    1b2a:	80 91 68 00 	lds	r24, 0x0068
    1b2e:	82 60       	ori	r24, 0x02	; 2
    1b30:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    1b34:	80 91 6c 00 	lds	r24, 0x006C
    1b38:	80 68       	ori	r24, 0x80	; 128
    1b3a:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    1b40:	9f ef       	ldi	r25, 0xFF	; 255
    1b42:	90 93 02 02 	sts	0x0202, r25
    1b46:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    1b4a:	80 91 28 03 	lds	r24, 0x0328
    1b4e:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    1b52:	80 91 27 03 	lds	r24, 0x0327
    1b56:	80 93 24 03 	sts	0x0324, r24
				data_ir = data_temp;
    1b5a:	80 91 26 03 	lds	r24, 0x0326
    1b5e:	80 93 25 03 	sts	0x0325, r24
				command_received=1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	80 93 1c 05 	sts	0x051C, r24
    1b68:	4b cf       	rjmp	.-362    	; 0x1a00 <__vector_13+0xe4>

00001b6a <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    1b6a:	80 91 00 02 	lds	r24, 0x0200
    1b6e:	08 95       	ret

00001b70 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    1b70:	80 91 24 03 	lds	r24, 0x0324
    1b74:	08 95       	ret

00001b76 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    1b76:	80 91 25 03 	lds	r24, 0x0325
    1b7a:	08 95       	ret

00001b7c <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    1b7c:	80 91 12 02 	lds	r24, 0x0212
    1b80:	88 23       	and	r24, r24
    1b82:	b1 f1       	breq	.+108    	; 0x1bf0 <handleIRRemoteCommands+0x74>

		if(command_received) {
    1b84:	80 91 1c 05 	lds	r24, 0x051C
    1b88:	88 23       	and	r24, r24
    1b8a:	91 f1       	breq	.+100    	; 0x1bf0 <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    1b8c:	e0 91 25 03 	lds	r30, 0x0325

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    1b90:	e0 93 1b 05 	sts	0x051B, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    1b94:	10 92 1c 05 	sts	0x051C, r1

			switch(irCommand) {
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	e5 33       	cpi	r30, 0x35	; 53
    1b9c:	f1 05       	cpc	r31, r1
    1b9e:	48 f1       	brcs	.+82     	; 0x1bf2 <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    1ba0:	20 91 f7 03 	lds	r18, 0x03F7
    1ba4:	30 91 f8 03 	lds	r19, 0x03F8
    1ba8:	80 91 f9 03 	lds	r24, 0x03F9
    1bac:	90 91 fa 03 	lds	r25, 0x03FA
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    1bb0:	37 fd       	sbrc	r19, 7
    1bb2:	27 c0       	rjmp	.+78     	; 0x1c02 <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    1bb4:	35 95       	asr	r19
    1bb6:	27 95       	ror	r18
    1bb8:	35 95       	asr	r19
    1bba:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    1bbc:	30 93 0a 04 	sts	0x040A, r19
    1bc0:	20 93 09 04 	sts	0x0409, r18
			}
			if(pwm_left_desired >= 0) {
    1bc4:	97 fd       	sbrc	r25, 7
    1bc6:	09 c0       	rjmp	.+18     	; 0x1bda <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    1bc8:	95 95       	asr	r25
    1bca:	87 95       	ror	r24
    1bcc:	95 95       	asr	r25
    1bce:	87 95       	ror	r24
    1bd0:	90 93 08 04 	sts	0x0408, r25
    1bd4:	80 93 07 04 	sts	0x0407, r24
    1bd8:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    1bda:	90 95       	com	r25
    1bdc:	81 95       	neg	r24
    1bde:	9f 4f       	sbci	r25, 0xFF	; 255
    1be0:	95 95       	asr	r25
    1be2:	87 95       	ror	r24
    1be4:	95 95       	asr	r25
    1be6:	87 95       	ror	r24
    1be8:	90 93 08 04 	sts	0x0408, r25
    1bec:	80 93 07 04 	sts	0x0407, r24
    1bf0:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    1bf2:	ee 58       	subi	r30, 0x8E	; 142
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	ee 0f       	add	r30, r30
    1bf8:	ff 1f       	adc	r31, r31
    1bfa:	05 90       	lpm	r0, Z+
    1bfc:	f4 91       	lpm	r31, Z+
    1bfe:	e0 2d       	mov	r30, r0
    1c00:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    1c02:	30 95       	com	r19
    1c04:	21 95       	neg	r18
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	d5 cf       	rjmp	.-86     	; 0x1bb4 <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    1c0a:	80 93 4f 05 	sts	0x054F, r24
							cliffAvoidanceEnabled = 0;
    1c0e:	10 92 50 05 	sts	0x0550, r1
    1c12:	c6 cf       	rjmp	.-116    	; 0x1ba0 <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    1c14:	10 92 4f 05 	sts	0x054F, r1
							cliffAvoidanceEnabled = 1;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	80 93 50 05 	sts	0x0550, r24
    1c1e:	20 91 f7 03 	lds	r18, 0x03F7
    1c22:	30 91 f8 03 	lds	r19, 0x03F8
    1c26:	80 91 f9 03 	lds	r24, 0x03F9
    1c2a:	90 91 fa 03 	lds	r25, 0x03FA
							break;
    1c2e:	c0 cf       	rjmp	.-128    	; 0x1bb0 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    1c30:	10 92 4f 05 	sts	0x054F, r1
    1c34:	20 91 f7 03 	lds	r18, 0x03F7
    1c38:	30 91 f8 03 	lds	r19, 0x03F8
    1c3c:	80 91 f9 03 	lds	r24, 0x03F9
    1c40:	90 91 fa 03 	lds	r25, 0x03FA
					break;
    1c44:	b5 cf       	rjmp	.-150    	; 0x1bb0 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	80 93 4f 05 	sts	0x054F, r24
    1c4c:	20 91 f7 03 	lds	r18, 0x03F7
    1c50:	30 91 f8 03 	lds	r19, 0x03F8
    1c54:	80 91 f9 03 	lds	r24, 0x03F9
    1c58:	90 91 fa 03 	lds	r25, 0x03FA
					break;
    1c5c:	a9 cf       	rjmp	.-174    	; 0x1bb0 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    1c5e:	80 91 f9 03 	lds	r24, 0x03F9
    1c62:	90 91 fa 03 	lds	r25, 0x03FA
    1c66:	4e 97       	sbiw	r24, 0x1e	; 30
    1c68:	90 93 fa 03 	sts	0x03FA, r25
    1c6c:	80 93 f9 03 	sts	0x03F9, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1c70:	2e ef       	ldi	r18, 0xFE	; 254
    1c72:	80 30       	cpi	r24, 0x00	; 0
    1c74:	92 07       	cpc	r25, r18
    1c76:	9c f5       	brge	.+102    	; 0x1cde <handleIRRemoteCommands+0x162>
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	9e ef       	ldi	r25, 0xFE	; 254
    1c7c:	90 93 fa 03 	sts	0x03FA, r25
    1c80:	80 93 f9 03 	sts	0x03F9, r24
    1c84:	20 91 f7 03 	lds	r18, 0x03F7
    1c88:	30 91 f8 03 	lds	r19, 0x03F8
    1c8c:	91 cf       	rjmp	.-222    	; 0x1bb0 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    1c8e:	20 91 f7 03 	lds	r18, 0x03F7
    1c92:	30 91 f8 03 	lds	r19, 0x03F8
    1c96:	80 91 f5 03 	lds	r24, 0x03F5
    1c9a:	90 91 f6 03 	lds	r25, 0x03F6
    1c9e:	28 17       	cp	r18, r24
    1ca0:	39 07       	cpc	r19, r25
    1ca2:	24 f0       	brlt	.+8      	; 0x1cac <handleIRRemoteCommands+0x130>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    1ca4:	20 91 f9 03 	lds	r18, 0x03F9
    1ca8:	30 91 fa 03 	lds	r19, 0x03FA
					}
					pwm_right_desired -= STEP_MOTORS;
    1cac:	2e 51       	subi	r18, 0x1E	; 30
    1cae:	30 40       	sbci	r19, 0x00	; 0
    1cb0:	30 93 f8 03 	sts	0x03F8, r19
    1cb4:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired -= STEP_MOTORS;
    1cb8:	c9 01       	movw	r24, r18
    1cba:	30 93 fa 03 	sts	0x03FA, r19
    1cbe:	20 93 f9 03 	sts	0x03F9, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    1cc2:	4e ef       	ldi	r20, 0xFE	; 254
    1cc4:	20 30       	cpi	r18, 0x00	; 0
    1cc6:	34 07       	cpc	r19, r20
    1cc8:	34 f4       	brge	.+12     	; 0x1cd6 <handleIRRemoteCommands+0x15a>
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	5e ef       	ldi	r21, 0xFE	; 254
    1cce:	50 93 f8 03 	sts	0x03F8, r21
    1cd2:	40 93 f7 03 	sts	0x03F7, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    1cd6:	4e ef       	ldi	r20, 0xFE	; 254
    1cd8:	20 30       	cpi	r18, 0x00	; 0
    1cda:	34 07       	cpc	r19, r20
    1cdc:	6c f2       	brlt	.-102    	; 0x1c78 <handleIRRemoteCommands+0xfc>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1cde:	20 91 f7 03 	lds	r18, 0x03F7
    1ce2:	30 91 f8 03 	lds	r19, 0x03F8
    1ce6:	64 cf       	rjmp	.-312    	; 0x1bb0 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    1ce8:	20 91 f7 03 	lds	r18, 0x03F7
    1cec:	30 91 f8 03 	lds	r19, 0x03F8
    1cf0:	2e 51       	subi	r18, 0x1E	; 30
    1cf2:	30 40       	sbci	r19, 0x00	; 0
    1cf4:	30 93 f8 03 	sts	0x03F8, r19
    1cf8:	20 93 f7 03 	sts	0x03F7, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1cfc:	4e ef       	ldi	r20, 0xFE	; 254
    1cfe:	20 30       	cpi	r18, 0x00	; 0
    1d00:	34 07       	cpc	r19, r20
    1d02:	0c f0       	brlt	.+2      	; 0x1d06 <handleIRRemoteCommands+0x18a>
    1d04:	17 c1       	rjmp	.+558    	; 0x1f34 <handleIRRemoteCommands+0x3b8>
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	9e ef       	ldi	r25, 0xFE	; 254
    1d0a:	90 93 f8 03 	sts	0x03F8, r25
    1d0e:	80 93 f7 03 	sts	0x03F7, r24
    1d12:	80 91 f9 03 	lds	r24, 0x03F9
    1d16:	90 91 fa 03 	lds	r25, 0x03FA
    1d1a:	20 e8       	ldi	r18, 0x80	; 128
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	4e cf       	rjmp	.-356    	; 0x1bbc <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    1d20:	20 91 f7 03 	lds	r18, 0x03F7
    1d24:	30 91 f8 03 	lds	r19, 0x03F8
    1d28:	2e 51       	subi	r18, 0x1E	; 30
    1d2a:	30 40       	sbci	r19, 0x00	; 0
    1d2c:	30 93 f8 03 	sts	0x03F8, r19
    1d30:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired += STEP_MOTORS;
    1d34:	80 91 f9 03 	lds	r24, 0x03F9
    1d38:	90 91 fa 03 	lds	r25, 0x03FA
    1d3c:	4e 96       	adiw	r24, 0x1e	; 30
    1d3e:	90 93 fa 03 	sts	0x03FA, r25
    1d42:	80 93 f9 03 	sts	0x03F9, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1d46:	4e ef       	ldi	r20, 0xFE	; 254
    1d48:	20 30       	cpi	r18, 0x00	; 0
    1d4a:	34 07       	cpc	r19, r20
    1d4c:	34 f4       	brge	.+12     	; 0x1d5a <handleIRRemoteCommands+0x1de>
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	3e ef       	ldi	r19, 0xFE	; 254
    1d52:	30 93 f8 03 	sts	0x03F8, r19
    1d56:	20 93 f7 03 	sts	0x03F7, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1d5a:	42 e0       	ldi	r20, 0x02	; 2
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	94 07       	cpc	r25, r20
    1d60:	0c f4       	brge	.+2      	; 0x1d64 <handleIRRemoteCommands+0x1e8>
    1d62:	26 cf       	rjmp	.-436    	; 0x1bb0 <handleIRRemoteCommands+0x34>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	92 e0       	ldi	r25, 0x02	; 2
    1d68:	90 93 fa 03 	sts	0x03FA, r25
    1d6c:	80 93 f9 03 	sts	0x03F9, r24
    1d70:	1f cf       	rjmp	.-450    	; 0x1bb0 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1d72:	20 91 f7 03 	lds	r18, 0x03F7
    1d76:	30 91 f8 03 	lds	r19, 0x03F8
    1d7a:	80 91 f9 03 	lds	r24, 0x03F9
    1d7e:	90 91 fa 03 	lds	r25, 0x03FA
    1d82:	82 17       	cp	r24, r18
    1d84:	93 07       	cpc	r25, r19
    1d86:	0c f4       	brge	.+2      	; 0x1d8a <handleIRRemoteCommands+0x20e>
    1d88:	da c0       	rjmp	.+436    	; 0x1f3e <handleIRRemoteCommands+0x3c2>
    1d8a:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    1d8c:	22 5e       	subi	r18, 0xE2	; 226
    1d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d90:	30 93 f8 03 	sts	0x03F8, r19
    1d94:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired += STEP_MOTORS;
    1d98:	4e 96       	adiw	r24, 0x1e	; 30
    1d9a:	90 93 fa 03 	sts	0x03FA, r25
    1d9e:	80 93 f9 03 	sts	0x03F9, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    1da2:	42 e0       	ldi	r20, 0x02	; 2
    1da4:	21 30       	cpi	r18, 0x01	; 1
    1da6:	34 07       	cpc	r19, r20
    1da8:	34 f0       	brlt	.+12     	; 0x1db6 <handleIRRemoteCommands+0x23a>
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	32 e0       	ldi	r19, 0x02	; 2
    1dae:	30 93 f8 03 	sts	0x03F8, r19
    1db2:	20 93 f7 03 	sts	0x03F7, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    1db6:	22 e0       	ldi	r18, 0x02	; 2
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	92 07       	cpc	r25, r18
    1dbc:	0c f4       	brge	.+2      	; 0x1dc0 <handleIRRemoteCommands+0x244>
    1dbe:	8f cf       	rjmp	.-226    	; 0x1cde <handleIRRemoteCommands+0x162>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	92 e0       	ldi	r25, 0x02	; 2
    1dc4:	90 93 fa 03 	sts	0x03FA, r25
    1dc8:	80 93 f9 03 	sts	0x03F9, r24
    1dcc:	20 91 f7 03 	lds	r18, 0x03F7
    1dd0:	30 91 f8 03 	lds	r19, 0x03F8
    1dd4:	ed ce       	rjmp	.-550    	; 0x1bb0 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    1dd6:	20 91 f7 03 	lds	r18, 0x03F7
    1dda:	30 91 f8 03 	lds	r19, 0x03F8
    1dde:	22 5e       	subi	r18, 0xE2	; 226
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	30 93 f8 03 	sts	0x03F8, r19
    1de6:	20 93 f7 03 	sts	0x03F7, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1dea:	42 e0       	ldi	r20, 0x02	; 2
    1dec:	21 30       	cpi	r18, 0x01	; 1
    1dee:	34 07       	cpc	r19, r20
    1df0:	0c f4       	brge	.+2      	; 0x1df4 <handleIRRemoteCommands+0x278>
    1df2:	a0 c0       	rjmp	.+320    	; 0x1f34 <handleIRRemoteCommands+0x3b8>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	92 e0       	ldi	r25, 0x02	; 2
    1df8:	90 93 f8 03 	sts	0x03F8, r25
    1dfc:	80 93 f7 03 	sts	0x03F7, r24
    1e00:	80 91 f9 03 	lds	r24, 0x03F9
    1e04:	90 91 fa 03 	lds	r25, 0x03FA
    1e08:	20 e8       	ldi	r18, 0x80	; 128
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	d7 ce       	rjmp	.-594    	; 0x1bbc <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    1e0e:	80 91 1d 05 	lds	r24, 0x051D
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	01 96       	adiw	r24, 0x01	; 1
    1e16:	65 e0       	ldi	r22, 0x05	; 5
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	0e 94 49 2c 	call	0x5892	; 0x5892 <__divmodhi4>
    1e1e:	80 93 1d 05 	sts	0x051D, r24

					if(colorState==0) {			// turn on blue and off all IRs
    1e22:	88 23       	and	r24, r24
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <handleIRRemoteCommands+0x2ac>
    1e26:	8d c0       	rjmp	.+282    	; 0x1f42 <handleIRRemoteCommands+0x3c6>
						LED_IR1_HIGH;
    1e28:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    1e2a:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    1e2c:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    1e30:	8f ef       	ldi	r24, 0xFF	; 255
    1e32:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1e36:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    1e3a:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <updateRedLed>
					updateGreenLed(pwm_green);
    1e3e:	80 91 0d 02 	lds	r24, 0x020D
    1e42:	0e 94 00 21 	call	0x4200	; 0x4200 <updateGreenLed>
					updateBlueLed(pwm_blue);
    1e46:	80 91 0e 02 	lds	r24, 0x020E
    1e4a:	0e 94 14 21 	call	0x4228	; 0x4228 <updateBlueLed>
    1e4e:	20 91 f7 03 	lds	r18, 0x03F7
    1e52:	30 91 f8 03 	lds	r19, 0x03F8
    1e56:	80 91 f9 03 	lds	r24, 0x03F9
    1e5a:	90 91 fa 03 	lds	r25, 0x03FA

	               	break;
    1e5e:	a8 ce       	rjmp	.-688    	; 0x1bb0 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    1e60:	80 91 1e 05 	lds	r24, 0x051E
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	83 70       	andi	r24, 0x03	; 3
    1e6a:	90 70       	andi	r25, 0x00	; 0
    1e6c:	80 93 1e 05 	sts	0x051E, r24
					switch(behaviorState) {
    1e70:	82 30       	cpi	r24, 0x02	; 2
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <handleIRRemoteCommands+0x2fa>
    1e74:	cf ce       	rjmp	.-610    	; 0x1c14 <handleIRRemoteCommands+0x98>
    1e76:	83 30       	cpi	r24, 0x03	; 3
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <handleIRRemoteCommands+0x300>
    1e7a:	53 c0       	rjmp	.+166    	; 0x1f22 <handleIRRemoteCommands+0x3a6>
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <handleIRRemoteCommands+0x306>
    1e80:	c4 ce       	rjmp	.-632    	; 0x1c0a <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    1e82:	10 92 4f 05 	sts	0x054F, r1
							cliffAvoidanceEnabled = 0;
    1e86:	10 92 50 05 	sts	0x0550, r1
    1e8a:	8a ce       	rjmp	.-748    	; 0x1ba0 <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    1e8c:	20 91 f7 03 	lds	r18, 0x03F7
    1e90:	30 91 f8 03 	lds	r19, 0x03F8
    1e94:	22 5e       	subi	r18, 0xE2	; 226
    1e96:	3f 4f       	sbci	r19, 0xFF	; 255
    1e98:	30 93 f8 03 	sts	0x03F8, r19
    1e9c:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired -= STEP_MOTORS;
    1ea0:	80 91 f9 03 	lds	r24, 0x03F9
    1ea4:	90 91 fa 03 	lds	r25, 0x03FA
    1ea8:	4e 97       	sbiw	r24, 0x1e	; 30
    1eaa:	90 93 fa 03 	sts	0x03FA, r25
    1eae:	80 93 f9 03 	sts	0x03F9, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1eb2:	42 e0       	ldi	r20, 0x02	; 2
    1eb4:	21 30       	cpi	r18, 0x01	; 1
    1eb6:	34 07       	cpc	r19, r20
    1eb8:	34 f0       	brlt	.+12     	; 0x1ec6 <handleIRRemoteCommands+0x34a>
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	32 e0       	ldi	r19, 0x02	; 2
    1ebe:	30 93 f8 03 	sts	0x03F8, r19
    1ec2:	20 93 f7 03 	sts	0x03F7, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1ec6:	4e ef       	ldi	r20, 0xFE	; 254
    1ec8:	80 30       	cpi	r24, 0x00	; 0
    1eca:	94 07       	cpc	r25, r20
    1ecc:	0c f0       	brlt	.+2      	; 0x1ed0 <handleIRRemoteCommands+0x354>
    1ece:	70 ce       	rjmp	.-800    	; 0x1bb0 <handleIRRemoteCommands+0x34>
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	9e ef       	ldi	r25, 0xFE	; 254
    1ed4:	90 93 fa 03 	sts	0x03FA, r25
    1ed8:	80 93 f9 03 	sts	0x03F9, r24
    1edc:	69 ce       	rjmp	.-814    	; 0x1bb0 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    1ede:	10 92 f8 03 	sts	0x03F8, r1
    1ee2:	10 92 f7 03 	sts	0x03F7, r1
					pwm_left_desired = 0;
    1ee6:	10 92 fa 03 	sts	0x03FA, r1
    1eea:	10 92 f9 03 	sts	0x03F9, r1
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	5e ce       	rjmp	.-836    	; 0x1bb4 <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    1ef8:	80 91 f9 03 	lds	r24, 0x03F9
    1efc:	90 91 fa 03 	lds	r25, 0x03FA
    1f00:	4e 96       	adiw	r24, 0x1e	; 30
    1f02:	90 93 fa 03 	sts	0x03FA, r25
    1f06:	80 93 f9 03 	sts	0x03F9, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1f0a:	22 e0       	ldi	r18, 0x02	; 2
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	92 07       	cpc	r25, r18
    1f10:	0c f4       	brge	.+2      	; 0x1f14 <handleIRRemoteCommands+0x398>
    1f12:	e5 ce       	rjmp	.-566    	; 0x1cde <handleIRRemoteCommands+0x162>
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	92 e0       	ldi	r25, 0x02	; 2
    1f18:	90 93 fa 03 	sts	0x03FA, r25
    1f1c:	80 93 f9 03 	sts	0x03F9, r24
    1f20:	de ce       	rjmp	.-580    	; 0x1cde <handleIRRemoteCommands+0x162>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	80 93 4f 05 	sts	0x054F, r24
							cliffAvoidanceEnabled = 1;
    1f28:	80 93 50 05 	sts	0x0550, r24
    1f2c:	20 91 f7 03 	lds	r18, 0x03F7
    1f30:	30 91 f8 03 	lds	r19, 0x03F8
    1f34:	80 91 f9 03 	lds	r24, 0x03F9
    1f38:	90 91 fa 03 	lds	r25, 0x03FA
							break;
    1f3c:	39 ce       	rjmp	.-910    	; 0x1bb0 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1f3e:	c9 01       	movw	r24, r18
    1f40:	25 cf       	rjmp	.-438    	; 0x1d8c <handleIRRemoteCommands+0x210>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	61 f0       	breq	.+24     	; 0x1f5e <handleIRRemoteCommands+0x3e2>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	91 f0       	breq	.+36     	; 0x1f6e <handleIRRemoteCommands+0x3f2>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    1f4a:	83 30       	cpi	r24, 0x03	; 3
    1f4c:	d9 f0       	breq	.+54     	; 0x1f84 <handleIRRemoteCommands+0x408>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    1f4e:	8f ef       	ldi	r24, 0xFF	; 255
    1f50:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1f54:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1f58:	80 93 0c 02 	sts	0x020C, r24
    1f5c:	6e cf       	rjmp	.-292    	; 0x1e3a <handleIRRemoteCommands+0x2be>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    1f5e:	8f ef       	ldi	r24, 0xFF	; 255
    1f60:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    1f64:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    1f68:	80 93 0c 02 	sts	0x020C, r24
    1f6c:	66 cf       	rjmp	.-308    	; 0x1e3a <handleIRRemoteCommands+0x2be>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    1f6e:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    1f70:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    1f72:	8f ef       	ldi	r24, 0xFF	; 255
    1f74:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1f78:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    1f7c:	10 92 0c 02 	sts	0x020C, r1
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	5b cf       	rjmp	.-330    	; 0x1e3a <handleIRRemoteCommands+0x2be>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    1f84:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    1f88:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    1f8c:	10 92 0c 02 	sts	0x020C, r1
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	53 cf       	rjmp	.-346    	; 0x1e3a <handleIRRemoteCommands+0x2be>

00001f94 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    1f94:	08 95       	ret

00001f96 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <start_vertical_speed_control_left+0x14>
    1fa8:	b7 c0       	rjmp	.+366    	; 0x2118 <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1faa:	20 91 32 05 	lds	r18, 0x0532
    1fae:	30 91 33 05 	lds	r19, 0x0533
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	2e 30       	cpi	r18, 0x0E	; 14
    1fb6:	34 07       	cpc	r19, r20
    1fb8:	0c f4       	brge	.+2      	; 0x1fbc <start_vertical_speed_control_left+0x26>
    1fba:	88 c0       	rjmp	.+272    	; 0x20cc <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    1fbc:	18 16       	cp	r1, r24
    1fbe:	19 06       	cpc	r1, r25
    1fc0:	0c f0       	brlt	.+2      	; 0x1fc4 <start_vertical_speed_control_left+0x2e>
    1fc2:	13 c1       	rjmp	.+550    	; 0x21ea <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    1fc4:	88 e6       	ldi	r24, 0x68	; 104
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    1fc8:	82 1b       	sub	r24, r18
    1fca:	93 0b       	sbc	r25, r19
    1fcc:	95 95       	asr	r25
    1fce:	87 95       	ror	r24
    1fd0:	95 95       	asr	r25
    1fd2:	87 95       	ror	r24
    1fd4:	29 e1       	ldi	r18, 0x19	; 25
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	28 1b       	sub	r18, r24
    1fda:	39 0b       	sbc	r19, r25
    1fdc:	30 93 04 02 	sts	0x0204, r19
    1fe0:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1fe4:	40 91 53 05 	lds	r20, 0x0553
    1fe8:	50 91 54 05 	lds	r21, 0x0554
    1fec:	50 93 6e 05 	sts	0x056E, r21
    1ff0:	40 93 6d 05 	sts	0x056D, r20
	if(*pwm_left >= 0) {
    1ff4:	20 81       	ld	r18, Z
    1ff6:	31 81       	ldd	r19, Z+1	; 0x01
    1ff8:	37 fd       	sbrc	r19, 7
    1ffa:	d2 c0       	rjmp	.+420    	; 0x21a0 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1ffc:	80 91 ef 03 	lds	r24, 0x03EF
    2000:	90 91 f0 03 	lds	r25, 0x03F0
    2004:	b9 01       	movw	r22, r18
    2006:	68 1b       	sub	r22, r24
    2008:	79 0b       	sbc	r23, r25
    200a:	cb 01       	movw	r24, r22
    200c:	70 93 54 05 	sts	0x0554, r23
    2010:	60 93 53 05 	sts	0x0553, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    2014:	20 91 ff 03 	lds	r18, 0x03FF
    2018:	30 91 00 04 	lds	r19, 0x0400
    201c:	28 0f       	add	r18, r24
    201e:	39 1f       	adc	r19, r25
    2020:	30 93 00 04 	sts	0x0400, r19
    2024:	20 93 ff 03 	sts	0x03FF, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    2028:	76 e0       	ldi	r23, 0x06	; 6
    202a:	21 34       	cpi	r18, 0x41	; 65
    202c:	37 07       	cpc	r19, r23
    202e:	0c f4       	brge	.+2      	; 0x2032 <start_vertical_speed_control_left+0x9c>
    2030:	84 c0       	rjmp	.+264    	; 0x213a <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    2032:	20 e4       	ldi	r18, 0x40	; 64
    2034:	36 e0       	ldi	r19, 0x06	; 6
    2036:	30 93 00 04 	sts	0x0400, r19
    203a:	20 93 ff 03 	sts	0x03FF, r18
    203e:	60 ec       	ldi	r22, 0xC0	; 192
    2040:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    2042:	9c 01       	movw	r18, r24
    2044:	22 0f       	add	r18, r18
    2046:	33 1f       	adc	r19, r19
    2048:	dc 01       	movw	r26, r24
    204a:	aa 0f       	add	r26, r26
    204c:	bb 1f       	adc	r27, r27
    204e:	aa 0f       	add	r26, r26
    2050:	bb 1f       	adc	r27, r27
    2052:	aa 0f       	add	r26, r26
    2054:	bb 1f       	adc	r27, r27
    2056:	2a 0f       	add	r18, r26
    2058:	3b 1f       	adc	r19, r27
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    205a:	00 81       	ld	r16, Z
    205c:	11 81       	ldd	r17, Z+1	; 0x01
    205e:	c0 91 03 02 	lds	r28, 0x0203
    2062:	d0 91 04 02 	lds	r29, 0x0204
    2066:	0c 9f       	mul	r16, r28
    2068:	d0 01       	movw	r26, r0
    206a:	0d 9f       	mul	r16, r29
    206c:	b0 0d       	add	r27, r0
    206e:	1c 9f       	mul	r17, r28
    2070:	b0 0d       	add	r27, r0
    2072:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    2074:	2a 0f       	add	r18, r26
    2076:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    2078:	48 1b       	sub	r20, r24
    207a:	59 0b       	sbc	r21, r25
    207c:	44 0f       	add	r20, r20
    207e:	55 1f       	adc	r21, r21
    2080:	24 0f       	add	r18, r20
    2082:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    2084:	26 0f       	add	r18, r22
    2086:	37 1f       	adc	r19, r23
    2088:	30 93 fe 03 	sts	0x03FE, r19
    208c:	20 93 fd 03 	sts	0x03FD, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2090:	37 fd       	sbrc	r19, 7
    2092:	69 c0       	rjmp	.+210    	; 0x2166 <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2094:	12 16       	cp	r1, r18
    2096:	13 06       	cpc	r1, r19
    2098:	0c f0       	brlt	.+2      	; 0x209c <start_vertical_speed_control_left+0x106>
    209a:	6f c0       	rjmp	.+222    	; 0x217a <start_vertical_speed_control_left+0x1e4>
    209c:	80 81       	ld	r24, Z
    209e:	91 81       	ldd	r25, Z+1	; 0x01
    20a0:	97 fd       	sbrc	r25, 7
    20a2:	89 c0       	rjmp	.+274    	; 0x21b6 <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    20a4:	7d e5       	ldi	r23, 0x5D	; 93
    20a6:	21 3c       	cpi	r18, 0xC1	; 193
    20a8:	37 07       	cpc	r19, r23
    20aa:	0c f4       	brge	.+2      	; 0x20ae <start_vertical_speed_control_left+0x118>
    20ac:	66 c0       	rjmp	.+204    	; 0x217a <start_vertical_speed_control_left+0x1e4>
    20ae:	80 ec       	ldi	r24, 0xC0	; 192
    20b0:	9d e5       	ldi	r25, 0x5D	; 93
    20b2:	90 93 fe 03 	sts	0x03FE, r25
    20b6:	80 93 fd 03 	sts	0x03FD, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	92 e0       	ldi	r25, 0x02	; 2
    20be:	91 83       	std	Z+1, r25	; 0x01
    20c0:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    20cc:	24 3b       	cpi	r18, 0xB4	; 180
    20ce:	31 05       	cpc	r19, r1
    20d0:	94 f4       	brge	.+36     	; 0x20f6 <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    20d2:	2a 35       	cpi	r18, 0x5A	; 90
    20d4:	31 05       	cpc	r19, r1
    20d6:	7c f4       	brge	.+30     	; 0x20f6 <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    20d8:	18 16       	cp	r1, r24
    20da:	19 06       	cpc	r1, r25
    20dc:	0c f0       	brlt	.+2      	; 0x20e0 <start_vertical_speed_control_left+0x14a>
    20de:	93 c0       	rjmp	.+294    	; 0x2206 <__stack+0x7>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    20e0:	35 95       	asr	r19
    20e2:	27 95       	ror	r18
    20e4:	35 95       	asr	r19
    20e6:	27 95       	ror	r18
    20e8:	27 5e       	subi	r18, 0xE7	; 231
    20ea:	3f 4f       	sbci	r19, 0xFF	; 255
    20ec:	30 93 04 02 	sts	0x0204, r19
    20f0:	20 93 03 02 	sts	0x0203, r18
    20f4:	77 cf       	rjmp	.-274    	; 0x1fe4 <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    20f6:	18 16       	cp	r1, r24
    20f8:	19 06       	cpc	r1, r25
    20fa:	94 f5       	brge	.+100    	; 0x2160 <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    20fc:	84 eb       	ldi	r24, 0xB4	; 180
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	82 1b       	sub	r24, r18
    2102:	93 0b       	sbc	r25, r19
    2104:	95 95       	asr	r25
    2106:	87 95       	ror	r24
    2108:	95 95       	asr	r25
    210a:	87 95       	ror	r24
    210c:	49 96       	adiw	r24, 0x19	; 25
    210e:	90 93 04 02 	sts	0x0204, r25
    2112:	80 93 03 02 	sts	0x0203, r24
    2116:	66 cf       	rjmp	.-308    	; 0x1fe4 <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2118:	10 92 00 04 	sts	0x0400, r1
    211c:	10 92 ff 03 	sts	0x03FF, r1
		delta_left_speed_current = 0;
    2120:	10 92 54 05 	sts	0x0554, r1
    2124:	10 92 53 05 	sts	0x0553, r1
		delta_left_speed_prev = 0;
    2128:	10 92 6e 05 	sts	0x056E, r1
    212c:	10 92 6d 05 	sts	0x056D, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    213a:	69 ef       	ldi	r22, 0xF9	; 249
    213c:	20 3c       	cpi	r18, 0xC0	; 192
    213e:	36 07       	cpc	r19, r22
    2140:	4c f4       	brge	.+18     	; 0x2154 <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    2142:	20 ec       	ldi	r18, 0xC0	; 192
    2144:	39 ef       	ldi	r19, 0xF9	; 249
    2146:	30 93 00 04 	sts	0x0400, r19
    214a:	20 93 ff 03 	sts	0x03FF, r18
    214e:	60 e4       	ldi	r22, 0x40	; 64
    2150:	7d ee       	ldi	r23, 0xED	; 237
    2152:	77 cf       	rjmp	.-274    	; 0x2042 <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2154:	b9 01       	movw	r22, r18
    2156:	66 0f       	add	r22, r22
    2158:	77 1f       	adc	r23, r23
    215a:	62 0f       	add	r22, r18
    215c:	73 1f       	adc	r23, r19
    215e:	71 cf       	rjmp	.-286    	; 0x2042 <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2160:	84 eb       	ldi	r24, 0xB4	; 180
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	31 cf       	rjmp	.-414    	; 0x1fc8 <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	97 fd       	sbrc	r25, 7
    216c:	06 c0       	rjmp	.+12     	; 0x217a <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    216e:	10 92 fe 03 	sts	0x03FE, r1
    2172:	10 92 fd 03 	sts	0x03FD, r1
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    217a:	82 ea       	ldi	r24, 0xA2	; 162
    217c:	20 34       	cpi	r18, 0x40	; 64
    217e:	38 07       	cpc	r19, r24
    2180:	04 f5       	brge	.+64     	; 0x21c2 <start_vertical_speed_control_left+0x22c>
    2182:	80 e4       	ldi	r24, 0x40	; 64
    2184:	92 ea       	ldi	r25, 0xA2	; 162
    2186:	90 93 fe 03 	sts	0x03FE, r25
    218a:	80 93 fd 03 	sts	0x03FD, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	9e ef       	ldi	r25, 0xFE	; 254
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	80 83       	st	Z, r24


}
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    21a0:	80 91 ef 03 	lds	r24, 0x03EF
    21a4:	90 91 f0 03 	lds	r25, 0x03F0
    21a8:	82 0f       	add	r24, r18
    21aa:	93 1f       	adc	r25, r19
    21ac:	90 93 54 05 	sts	0x0554, r25
    21b0:	80 93 53 05 	sts	0x0553, r24
    21b4:	2f cf       	rjmp	.-418    	; 0x2014 <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    21b6:	10 92 fe 03 	sts	0x03FE, r1
    21ba:	10 92 fd 03 	sts	0x03FD, r1
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    21c2:	35 95       	asr	r19
    21c4:	27 95       	ror	r18
    21c6:	35 95       	asr	r19
    21c8:	27 95       	ror	r18
    21ca:	35 95       	asr	r19
    21cc:	27 95       	ror	r18
    21ce:	35 95       	asr	r19
    21d0:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    21d2:	31 83       	std	Z+1, r19	; 0x01
    21d4:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    21d6:	42 e0       	ldi	r20, 0x02	; 2
    21d8:	21 30       	cpi	r18, 0x01	; 1
    21da:	34 07       	cpc	r19, r20
    21dc:	0c f0       	brlt	.+2      	; 0x21e0 <start_vertical_speed_control_left+0x24a>
    21de:	6d cf       	rjmp	.-294    	; 0x20ba <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    21e0:	6e ef       	ldi	r22, 0xFE	; 254
    21e2:	20 30       	cpi	r18, 0x00	; 0
    21e4:	36 07       	cpc	r19, r22
    21e6:	9c f2       	brlt	.-90     	; 0x218e <start_vertical_speed_control_left+0x1f8>
    21e8:	6c cf       	rjmp	.-296    	; 0x20c2 <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    21ea:	88 e6       	ldi	r24, 0x68	; 104
    21ec:	91 e0       	ldi	r25, 0x01	; 1
    21ee:	82 1b       	sub	r24, r18
    21f0:	93 0b       	sbc	r25, r19
    21f2:	95 95       	asr	r25
    21f4:	87 95       	ror	r24
    21f6:	95 95       	asr	r25
    21f8:	87 95       	ror	r24
    21fa:	49 96       	adiw	r24, 0x19	; 25
    21fc:	90 93 04 02 	sts	0x0204, r25
    2200:	80 93 03 02 	sts	0x0203, r24
    2204:	ef ce       	rjmp	.-546    	; 0x1fe4 <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2206:	35 95       	asr	r19
    2208:	27 95       	ror	r18
    220a:	35 95       	asr	r19
    220c:	27 95       	ror	r18
    220e:	89 e1       	ldi	r24, 0x19	; 25
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	82 1b       	sub	r24, r18
    2214:	93 0b       	sbc	r25, r19
    2216:	90 93 04 02 	sts	0x0204, r25
    221a:	80 93 03 02 	sts	0x0203, r24
    221e:	e2 ce       	rjmp	.-572    	; 0x1fe4 <start_vertical_speed_control_left+0x4e>

00002220 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	09 f4       	brne	.+2      	; 0x2234 <start_vertical_speed_control_right+0x14>
    2232:	b7 c0       	rjmp	.+366    	; 0x23a2 <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2234:	20 91 32 05 	lds	r18, 0x0532
    2238:	30 91 33 05 	lds	r19, 0x0533
    223c:	41 e0       	ldi	r20, 0x01	; 1
    223e:	2e 30       	cpi	r18, 0x0E	; 14
    2240:	34 07       	cpc	r19, r20
    2242:	0c f4       	brge	.+2      	; 0x2246 <start_vertical_speed_control_right+0x26>
    2244:	88 c0       	rjmp	.+272    	; 0x2356 <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    2246:	18 16       	cp	r1, r24
    2248:	19 06       	cpc	r1, r25
    224a:	0c f0       	brlt	.+2      	; 0x224e <start_vertical_speed_control_right+0x2e>
    224c:	13 c1       	rjmp	.+550    	; 0x2474 <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    224e:	88 e6       	ldi	r24, 0x68	; 104
    2250:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2252:	82 1b       	sub	r24, r18
    2254:	93 0b       	sbc	r25, r19
    2256:	95 95       	asr	r25
    2258:	87 95       	ror	r24
    225a:	95 95       	asr	r25
    225c:	87 95       	ror	r24
    225e:	29 e1       	ldi	r18, 0x19	; 25
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	28 1b       	sub	r18, r24
    2264:	39 0b       	sbc	r19, r25
    2266:	30 93 06 02 	sts	0x0206, r19
    226a:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    226e:	40 91 7c 05 	lds	r20, 0x057C
    2272:	50 91 7d 05 	lds	r21, 0x057D
    2276:	50 93 56 05 	sts	0x0556, r21
    227a:	40 93 55 05 	sts	0x0555, r20
	if(*pwm_right >= 0) {
    227e:	20 81       	ld	r18, Z
    2280:	31 81       	ldd	r19, Z+1	; 0x01
    2282:	37 fd       	sbrc	r19, 7
    2284:	d2 c0       	rjmp	.+420    	; 0x242a <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2286:	80 91 f1 03 	lds	r24, 0x03F1
    228a:	90 91 f2 03 	lds	r25, 0x03F2
    228e:	b9 01       	movw	r22, r18
    2290:	68 1b       	sub	r22, r24
    2292:	79 0b       	sbc	r23, r25
    2294:	cb 01       	movw	r24, r22
    2296:	70 93 7d 05 	sts	0x057D, r23
    229a:	60 93 7c 05 	sts	0x057C, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    229e:	20 91 01 04 	lds	r18, 0x0401
    22a2:	30 91 02 04 	lds	r19, 0x0402
    22a6:	28 0f       	add	r18, r24
    22a8:	39 1f       	adc	r19, r25
    22aa:	30 93 02 04 	sts	0x0402, r19
    22ae:	20 93 01 04 	sts	0x0401, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    22b2:	76 e0       	ldi	r23, 0x06	; 6
    22b4:	21 34       	cpi	r18, 0x41	; 65
    22b6:	37 07       	cpc	r19, r23
    22b8:	0c f4       	brge	.+2      	; 0x22bc <start_vertical_speed_control_right+0x9c>
    22ba:	84 c0       	rjmp	.+264    	; 0x23c4 <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    22bc:	20 e4       	ldi	r18, 0x40	; 64
    22be:	36 e0       	ldi	r19, 0x06	; 6
    22c0:	30 93 02 04 	sts	0x0402, r19
    22c4:	20 93 01 04 	sts	0x0401, r18
    22c8:	60 ec       	ldi	r22, 0xC0	; 192
    22ca:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    22cc:	9c 01       	movw	r18, r24
    22ce:	22 0f       	add	r18, r18
    22d0:	33 1f       	adc	r19, r19
    22d2:	dc 01       	movw	r26, r24
    22d4:	aa 0f       	add	r26, r26
    22d6:	bb 1f       	adc	r27, r27
    22d8:	aa 0f       	add	r26, r26
    22da:	bb 1f       	adc	r27, r27
    22dc:	aa 0f       	add	r26, r26
    22de:	bb 1f       	adc	r27, r27
    22e0:	2a 0f       	add	r18, r26
    22e2:	3b 1f       	adc	r19, r27
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    22e4:	00 81       	ld	r16, Z
    22e6:	11 81       	ldd	r17, Z+1	; 0x01
    22e8:	c0 91 05 02 	lds	r28, 0x0205
    22ec:	d0 91 06 02 	lds	r29, 0x0206
    22f0:	0c 9f       	mul	r16, r28
    22f2:	d0 01       	movw	r26, r0
    22f4:	0d 9f       	mul	r16, r29
    22f6:	b0 0d       	add	r27, r0
    22f8:	1c 9f       	mul	r17, r28
    22fa:	b0 0d       	add	r27, r0
    22fc:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    22fe:	2a 0f       	add	r18, r26
    2300:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2302:	48 1b       	sub	r20, r24
    2304:	59 0b       	sbc	r21, r25
    2306:	44 0f       	add	r20, r20
    2308:	55 1f       	adc	r21, r21
    230a:	24 0f       	add	r18, r20
    230c:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    230e:	26 0f       	add	r18, r22
    2310:	37 1f       	adc	r19, r23
    2312:	30 93 fc 03 	sts	0x03FC, r19
    2316:	20 93 fb 03 	sts	0x03FB, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    231a:	37 fd       	sbrc	r19, 7
    231c:	69 c0       	rjmp	.+210    	; 0x23f0 <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    231e:	12 16       	cp	r1, r18
    2320:	13 06       	cpc	r1, r19
    2322:	0c f0       	brlt	.+2      	; 0x2326 <start_vertical_speed_control_right+0x106>
    2324:	6f c0       	rjmp	.+222    	; 0x2404 <start_vertical_speed_control_right+0x1e4>
    2326:	80 81       	ld	r24, Z
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	97 fd       	sbrc	r25, 7
    232c:	89 c0       	rjmp	.+274    	; 0x2440 <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    232e:	7d e5       	ldi	r23, 0x5D	; 93
    2330:	21 3c       	cpi	r18, 0xC1	; 193
    2332:	37 07       	cpc	r19, r23
    2334:	0c f4       	brge	.+2      	; 0x2338 <start_vertical_speed_control_right+0x118>
    2336:	66 c0       	rjmp	.+204    	; 0x2404 <start_vertical_speed_control_right+0x1e4>
    2338:	80 ec       	ldi	r24, 0xC0	; 192
    233a:	9d e5       	ldi	r25, 0x5D	; 93
    233c:	90 93 fc 03 	sts	0x03FC, r25
    2340:	80 93 fb 03 	sts	0x03FB, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	92 e0       	ldi	r25, 0x02	; 2
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    234c:	df 91       	pop	r29
    234e:	cf 91       	pop	r28
    2350:	1f 91       	pop	r17
    2352:	0f 91       	pop	r16
    2354:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2356:	24 3b       	cpi	r18, 0xB4	; 180
    2358:	31 05       	cpc	r19, r1
    235a:	94 f4       	brge	.+36     	; 0x2380 <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    235c:	2a 35       	cpi	r18, 0x5A	; 90
    235e:	31 05       	cpc	r19, r1
    2360:	7c f4       	brge	.+30     	; 0x2380 <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    2362:	18 16       	cp	r1, r24
    2364:	19 06       	cpc	r1, r25
    2366:	0c f0       	brlt	.+2      	; 0x236a <start_vertical_speed_control_right+0x14a>
    2368:	93 c0       	rjmp	.+294    	; 0x2490 <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    236a:	35 95       	asr	r19
    236c:	27 95       	ror	r18
    236e:	35 95       	asr	r19
    2370:	27 95       	ror	r18
    2372:	27 5e       	subi	r18, 0xE7	; 231
    2374:	3f 4f       	sbci	r19, 0xFF	; 255
    2376:	30 93 06 02 	sts	0x0206, r19
    237a:	20 93 05 02 	sts	0x0205, r18
    237e:	77 cf       	rjmp	.-274    	; 0x226e <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    2380:	18 16       	cp	r1, r24
    2382:	19 06       	cpc	r1, r25
    2384:	94 f5       	brge	.+100    	; 0x23ea <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    2386:	84 eb       	ldi	r24, 0xB4	; 180
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	82 1b       	sub	r24, r18
    238c:	93 0b       	sbc	r25, r19
    238e:	95 95       	asr	r25
    2390:	87 95       	ror	r24
    2392:	95 95       	asr	r25
    2394:	87 95       	ror	r24
    2396:	49 96       	adiw	r24, 0x19	; 25
    2398:	90 93 06 02 	sts	0x0206, r25
    239c:	80 93 05 02 	sts	0x0205, r24
    23a0:	66 cf       	rjmp	.-308    	; 0x226e <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    23a2:	10 92 02 04 	sts	0x0402, r1
    23a6:	10 92 01 04 	sts	0x0401, r1
		delta_right_speed_current = 0;
    23aa:	10 92 7d 05 	sts	0x057D, r1
    23ae:	10 92 7c 05 	sts	0x057C, r1
		delta_right_speed_prev = 0;
    23b2:	10 92 56 05 	sts	0x0556, r1
    23b6:	10 92 55 05 	sts	0x0555, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	1f 91       	pop	r17
    23c0:	0f 91       	pop	r16
    23c2:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    23c4:	69 ef       	ldi	r22, 0xF9	; 249
    23c6:	20 3c       	cpi	r18, 0xC0	; 192
    23c8:	36 07       	cpc	r19, r22
    23ca:	4c f4       	brge	.+18     	; 0x23de <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    23cc:	20 ec       	ldi	r18, 0xC0	; 192
    23ce:	39 ef       	ldi	r19, 0xF9	; 249
    23d0:	30 93 02 04 	sts	0x0402, r19
    23d4:	20 93 01 04 	sts	0x0401, r18
    23d8:	60 e4       	ldi	r22, 0x40	; 64
    23da:	7d ee       	ldi	r23, 0xED	; 237
    23dc:	77 cf       	rjmp	.-274    	; 0x22cc <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    23de:	b9 01       	movw	r22, r18
    23e0:	66 0f       	add	r22, r22
    23e2:	77 1f       	adc	r23, r23
    23e4:	62 0f       	add	r22, r18
    23e6:	73 1f       	adc	r23, r19
    23e8:	71 cf       	rjmp	.-286    	; 0x22cc <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    23ea:	84 eb       	ldi	r24, 0xB4	; 180
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	31 cf       	rjmp	.-414    	; 0x2252 <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    23f0:	80 81       	ld	r24, Z
    23f2:	91 81       	ldd	r25, Z+1	; 0x01
    23f4:	97 fd       	sbrc	r25, 7
    23f6:	06 c0       	rjmp	.+12     	; 0x2404 <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    23f8:	10 92 fc 03 	sts	0x03FC, r1
    23fc:	10 92 fb 03 	sts	0x03FB, r1
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2404:	82 ea       	ldi	r24, 0xA2	; 162
    2406:	20 34       	cpi	r18, 0x40	; 64
    2408:	38 07       	cpc	r19, r24
    240a:	04 f5       	brge	.+64     	; 0x244c <start_vertical_speed_control_right+0x22c>
    240c:	80 e4       	ldi	r24, 0x40	; 64
    240e:	92 ea       	ldi	r25, 0xA2	; 162
    2410:	90 93 fc 03 	sts	0x03FC, r25
    2414:	80 93 fb 03 	sts	0x03FB, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	9e ef       	ldi	r25, 0xFE	; 254
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	80 83       	st	Z, r24

}
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	1f 91       	pop	r17
    2426:	0f 91       	pop	r16
    2428:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    242a:	80 91 f1 03 	lds	r24, 0x03F1
    242e:	90 91 f2 03 	lds	r25, 0x03F2
    2432:	82 0f       	add	r24, r18
    2434:	93 1f       	adc	r25, r19
    2436:	90 93 7d 05 	sts	0x057D, r25
    243a:	80 93 7c 05 	sts	0x057C, r24
    243e:	2f cf       	rjmp	.-418    	; 0x229e <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2440:	10 92 fc 03 	sts	0x03FC, r1
    2444:	10 92 fb 03 	sts	0x03FB, r1
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    244c:	35 95       	asr	r19
    244e:	27 95       	ror	r18
    2450:	35 95       	asr	r19
    2452:	27 95       	ror	r18
    2454:	35 95       	asr	r19
    2456:	27 95       	ror	r18
    2458:	35 95       	asr	r19
    245a:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    245c:	31 83       	std	Z+1, r19	; 0x01
    245e:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2460:	42 e0       	ldi	r20, 0x02	; 2
    2462:	21 30       	cpi	r18, 0x01	; 1
    2464:	34 07       	cpc	r19, r20
    2466:	0c f0       	brlt	.+2      	; 0x246a <start_vertical_speed_control_right+0x24a>
    2468:	6d cf       	rjmp	.-294    	; 0x2344 <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    246a:	6e ef       	ldi	r22, 0xFE	; 254
    246c:	20 30       	cpi	r18, 0x00	; 0
    246e:	36 07       	cpc	r19, r22
    2470:	9c f2       	brlt	.-90     	; 0x2418 <start_vertical_speed_control_right+0x1f8>
    2472:	6c cf       	rjmp	.-296    	; 0x234c <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    2474:	88 e6       	ldi	r24, 0x68	; 104
    2476:	91 e0       	ldi	r25, 0x01	; 1
    2478:	82 1b       	sub	r24, r18
    247a:	93 0b       	sbc	r25, r19
    247c:	95 95       	asr	r25
    247e:	87 95       	ror	r24
    2480:	95 95       	asr	r25
    2482:	87 95       	ror	r24
    2484:	49 96       	adiw	r24, 0x19	; 25
    2486:	90 93 06 02 	sts	0x0206, r25
    248a:	80 93 05 02 	sts	0x0205, r24
    248e:	ef ce       	rjmp	.-546    	; 0x226e <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    2490:	35 95       	asr	r19
    2492:	27 95       	ror	r18
    2494:	35 95       	asr	r19
    2496:	27 95       	ror	r18
    2498:	89 e1       	ldi	r24, 0x19	; 25
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	82 1b       	sub	r24, r18
    249e:	93 0b       	sbc	r25, r19
    24a0:	90 93 06 02 	sts	0x0206, r25
    24a4:	80 93 05 02 	sts	0x0205, r24
    24a8:	e2 ce       	rjmp	.-572    	; 0x226e <start_vertical_speed_control_right+0x4e>

000024aa <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    24aa:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    24ac:	80 81       	ld	r24, Z
    24ae:	91 81       	ldd	r25, Z+1	; 0x01
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <start_horizontal_speed_control_right+0xc>
    24b4:	7b c0       	rjmp	.+246    	; 0x25ac <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    24b6:	a0 91 7c 05 	lds	r26, 0x057C
    24ba:	b0 91 7d 05 	lds	r27, 0x057D
    24be:	b0 93 56 05 	sts	0x0556, r27
    24c2:	a0 93 55 05 	sts	0x0555, r26
	if(*pwm_right >= 0) {
    24c6:	20 81       	ld	r18, Z
    24c8:	31 81       	ldd	r19, Z+1	; 0x01
    24ca:	37 fd       	sbrc	r19, 7
    24cc:	89 c0       	rjmp	.+274    	; 0x25e0 <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    24ce:	80 91 f1 03 	lds	r24, 0x03F1
    24d2:	90 91 f2 03 	lds	r25, 0x03F2
    24d6:	a9 01       	movw	r20, r18
    24d8:	48 1b       	sub	r20, r24
    24da:	59 0b       	sbc	r21, r25
    24dc:	ca 01       	movw	r24, r20
    24de:	50 93 7d 05 	sts	0x057D, r21
    24e2:	40 93 7c 05 	sts	0x057C, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    24e6:	20 91 01 04 	lds	r18, 0x0401
    24ea:	30 91 02 04 	lds	r19, 0x0402
    24ee:	28 0f       	add	r18, r24
    24f0:	39 1f       	adc	r19, r25
    24f2:	30 93 02 04 	sts	0x0402, r19
    24f6:	20 93 01 04 	sts	0x0401, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    24fa:	56 e0       	ldi	r21, 0x06	; 6
    24fc:	21 34       	cpi	r18, 0x41	; 65
    24fe:	35 07       	cpc	r19, r21
    2500:	0c f4       	brge	.+2      	; 0x2504 <start_horizontal_speed_control_right+0x5a>
    2502:	61 c0       	rjmp	.+194    	; 0x25c6 <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    2504:	20 e4       	ldi	r18, 0x40	; 64
    2506:	36 e0       	ldi	r19, 0x06	; 6
    2508:	30 93 02 04 	sts	0x0402, r19
    250c:	20 93 01 04 	sts	0x0401, r18
    2510:	60 e8       	ldi	r22, 0x80	; 128
    2512:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    2514:	9c 01       	movw	r18, r24
    2516:	22 0f       	add	r18, r18
    2518:	33 1f       	adc	r19, r19
    251a:	28 0f       	add	r18, r24
    251c:	39 1f       	adc	r19, r25
    251e:	22 0f       	add	r18, r18
    2520:	33 1f       	adc	r19, r19
    2522:	22 0f       	add	r18, r18
    2524:	33 1f       	adc	r19, r19
    2526:	22 0f       	add	r18, r18
    2528:	33 1f       	adc	r19, r19
    252a:	28 0f       	add	r18, r24
    252c:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    252e:	40 81       	ld	r20, Z
    2530:	51 81       	ldd	r21, Z+1	; 0x01
    2532:	44 0f       	add	r20, r20
    2534:	55 1f       	adc	r21, r21
    2536:	44 0f       	add	r20, r20
    2538:	55 1f       	adc	r21, r21
    253a:	44 0f       	add	r20, r20
    253c:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    253e:	24 0f       	add	r18, r20
    2540:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    2542:	ad 01       	movw	r20, r26
    2544:	48 1b       	sub	r20, r24
    2546:	59 0b       	sbc	r21, r25
    2548:	ca 01       	movw	r24, r20
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	84 0f       	add	r24, r20
    2550:	95 1f       	adc	r25, r21
    2552:	28 0f       	add	r18, r24
    2554:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    2556:	26 0f       	add	r18, r22
    2558:	37 1f       	adc	r19, r23
    255a:	30 93 fc 03 	sts	0x03FC, r19
    255e:	20 93 fb 03 	sts	0x03FB, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2562:	37 fd       	sbrc	r19, 7
    2564:	4c c0       	rjmp	.+152    	; 0x25fe <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2566:	12 16       	cp	r1, r18
    2568:	13 06       	cpc	r1, r19
    256a:	0c f0       	brlt	.+2      	; 0x256e <start_horizontal_speed_control_right+0xc4>
    256c:	52 c0       	rjmp	.+164    	; 0x2612 <start_horizontal_speed_control_right+0x168>
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	97 fd       	sbrc	r25, 7
    2574:	67 c0       	rjmp	.+206    	; 0x2644 <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2576:	5d e5       	ldi	r21, 0x5D	; 93
    2578:	21 3c       	cpi	r18, 0xC1	; 193
    257a:	35 07       	cpc	r19, r21
    257c:	0c f4       	brge	.+2      	; 0x2580 <start_horizontal_speed_control_right+0xd6>
    257e:	49 c0       	rjmp	.+146    	; 0x2612 <start_horizontal_speed_control_right+0x168>
    2580:	80 ec       	ldi	r24, 0xC0	; 192
    2582:	9d e5       	ldi	r25, 0x5D	; 93
    2584:	90 93 fc 03 	sts	0x03FC, r25
    2588:	80 93 fb 03 	sts	0x03FB, r24
    258c:	2c ed       	ldi	r18, 0xDC	; 220
    258e:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    2590:	22 5e       	subi	r18, 0xE2	; 226
    2592:	3f 4f       	sbci	r19, 0xFF	; 255
    2594:	31 83       	std	Z+1, r19	; 0x01
    2596:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2598:	42 e0       	ldi	r20, 0x02	; 2
    259a:	21 30       	cpi	r18, 0x01	; 1
    259c:	34 07       	cpc	r19, r20
    259e:	0c f4       	brge	.+2      	; 0x25a2 <start_horizontal_speed_control_right+0xf8>
    25a0:	48 c0       	rjmp	.+144    	; 0x2632 <start_horizontal_speed_control_right+0x188>
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	92 e0       	ldi	r25, 0x02	; 2
    25a6:	91 83       	std	Z+1, r25	; 0x01
    25a8:	80 83       	st	Z, r24
    25aa:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    25ac:	10 92 02 04 	sts	0x0402, r1
    25b0:	10 92 01 04 	sts	0x0401, r1
		delta_right_speed_current = 0;
    25b4:	10 92 7d 05 	sts	0x057D, r1
    25b8:	10 92 7c 05 	sts	0x057C, r1
		delta_right_speed_prev = 0;
    25bc:	10 92 56 05 	sts	0x0556, r1
    25c0:	10 92 55 05 	sts	0x0555, r1
		return;
    25c4:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    25c6:	49 ef       	ldi	r20, 0xF9	; 249
    25c8:	20 3c       	cpi	r18, 0xC0	; 192
    25ca:	34 07       	cpc	r19, r20
    25cc:	a4 f4       	brge	.+40     	; 0x25f6 <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    25ce:	20 ec       	ldi	r18, 0xC0	; 192
    25d0:	39 ef       	ldi	r19, 0xF9	; 249
    25d2:	30 93 02 04 	sts	0x0402, r19
    25d6:	20 93 01 04 	sts	0x0401, r18
    25da:	60 e8       	ldi	r22, 0x80	; 128
    25dc:	73 ef       	ldi	r23, 0xF3	; 243
    25de:	9a cf       	rjmp	.-204    	; 0x2514 <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    25e0:	80 91 f1 03 	lds	r24, 0x03F1
    25e4:	90 91 f2 03 	lds	r25, 0x03F2
    25e8:	82 0f       	add	r24, r18
    25ea:	93 1f       	adc	r25, r19
    25ec:	90 93 7d 05 	sts	0x057D, r25
    25f0:	80 93 7c 05 	sts	0x057C, r24
    25f4:	78 cf       	rjmp	.-272    	; 0x24e6 <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    25f6:	b9 01       	movw	r22, r18
    25f8:	66 0f       	add	r22, r22
    25fa:	77 1f       	adc	r23, r23
    25fc:	8b cf       	rjmp	.-234    	; 0x2514 <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    25fe:	80 81       	ld	r24, Z
    2600:	91 81       	ldd	r25, Z+1	; 0x01
    2602:	97 fd       	sbrc	r25, 7
    2604:	06 c0       	rjmp	.+12     	; 0x2612 <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    2606:	10 92 fc 03 	sts	0x03FC, r1
    260a:	10 92 fb 03 	sts	0x03FB, r1
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2612:	82 ea       	ldi	r24, 0xA2	; 162
    2614:	20 34       	cpi	r18, 0x40	; 64
    2616:	38 07       	cpc	r19, r24
    2618:	dc f4       	brge	.+54     	; 0x2650 <start_horizontal_speed_control_right+0x1a6>
    261a:	80 e4       	ldi	r24, 0x40	; 64
    261c:	92 ea       	ldi	r25, 0xA2	; 162
    261e:	90 93 fc 03 	sts	0x03FC, r25
    2622:	80 93 fb 03 	sts	0x03FB, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2626:	24 e2       	ldi	r18, 0x24	; 36
    2628:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    262a:	2e 51       	subi	r18, 0x1E	; 30
    262c:	30 40       	sbci	r19, 0x00	; 0
    262e:	31 83       	std	Z+1, r19	; 0x01
    2630:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2632:	5e ef       	ldi	r21, 0xFE	; 254
    2634:	20 30       	cpi	r18, 0x00	; 0
    2636:	35 07       	cpc	r19, r21
    2638:	24 f4       	brge	.+8      	; 0x2642 <start_horizontal_speed_control_right+0x198>
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	9e ef       	ldi	r25, 0xFE	; 254
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	80 83       	st	Z, r24
    2642:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2644:	10 92 fc 03 	sts	0x03FC, r1
    2648:	10 92 fb 03 	sts	0x03FB, r1
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2650:	35 95       	asr	r19
    2652:	27 95       	ror	r18
    2654:	35 95       	asr	r19
    2656:	27 95       	ror	r18
    2658:	35 95       	asr	r19
    265a:	27 95       	ror	r18
    265c:	35 95       	asr	r19
    265e:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2660:	31 83       	std	Z+1, r19	; 0x01
    2662:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    2664:	12 16       	cp	r1, r18
    2666:	13 06       	cpc	r1, r19
    2668:	0c f4       	brge	.+2      	; 0x266c <start_horizontal_speed_control_right+0x1c2>
    266a:	92 cf       	rjmp	.-220    	; 0x2590 <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    266c:	21 15       	cp	r18, r1
    266e:	31 05       	cpc	r19, r1
    2670:	e1 f6       	brne	.-72     	; 0x262a <start_horizontal_speed_control_right+0x180>
    2672:	08 95       	ret

00002674 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    2674:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    2676:	80 81       	ld	r24, Z
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	09 f4       	brne	.+2      	; 0x2680 <start_horizontal_speed_control_left+0xc>
    267e:	7b c0       	rjmp	.+246    	; 0x2776 <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2680:	a0 91 53 05 	lds	r26, 0x0553
    2684:	b0 91 54 05 	lds	r27, 0x0554
    2688:	b0 93 6e 05 	sts	0x056E, r27
    268c:	a0 93 6d 05 	sts	0x056D, r26
	if(*pwm_left >= 0) {
    2690:	20 81       	ld	r18, Z
    2692:	31 81       	ldd	r19, Z+1	; 0x01
    2694:	37 fd       	sbrc	r19, 7
    2696:	89 c0       	rjmp	.+274    	; 0x27aa <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2698:	80 91 ef 03 	lds	r24, 0x03EF
    269c:	90 91 f0 03 	lds	r25, 0x03F0
    26a0:	a9 01       	movw	r20, r18
    26a2:	48 1b       	sub	r20, r24
    26a4:	59 0b       	sbc	r21, r25
    26a6:	ca 01       	movw	r24, r20
    26a8:	50 93 54 05 	sts	0x0554, r21
    26ac:	40 93 53 05 	sts	0x0553, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    26b0:	20 91 ff 03 	lds	r18, 0x03FF
    26b4:	30 91 00 04 	lds	r19, 0x0400
    26b8:	28 0f       	add	r18, r24
    26ba:	39 1f       	adc	r19, r25
    26bc:	30 93 00 04 	sts	0x0400, r19
    26c0:	20 93 ff 03 	sts	0x03FF, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    26c4:	56 e0       	ldi	r21, 0x06	; 6
    26c6:	21 34       	cpi	r18, 0x41	; 65
    26c8:	35 07       	cpc	r19, r21
    26ca:	0c f4       	brge	.+2      	; 0x26ce <start_horizontal_speed_control_left+0x5a>
    26cc:	61 c0       	rjmp	.+194    	; 0x2790 <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    26ce:	20 e4       	ldi	r18, 0x40	; 64
    26d0:	36 e0       	ldi	r19, 0x06	; 6
    26d2:	30 93 00 04 	sts	0x0400, r19
    26d6:	20 93 ff 03 	sts	0x03FF, r18
    26da:	60 e8       	ldi	r22, 0x80	; 128
    26dc:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    26de:	9c 01       	movw	r18, r24
    26e0:	22 0f       	add	r18, r18
    26e2:	33 1f       	adc	r19, r19
    26e4:	28 0f       	add	r18, r24
    26e6:	39 1f       	adc	r19, r25
    26e8:	22 0f       	add	r18, r18
    26ea:	33 1f       	adc	r19, r19
    26ec:	22 0f       	add	r18, r18
    26ee:	33 1f       	adc	r19, r19
    26f0:	22 0f       	add	r18, r18
    26f2:	33 1f       	adc	r19, r19
    26f4:	28 0f       	add	r18, r24
    26f6:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    26f8:	40 81       	ld	r20, Z
    26fa:	51 81       	ldd	r21, Z+1	; 0x01
    26fc:	44 0f       	add	r20, r20
    26fe:	55 1f       	adc	r21, r21
    2700:	44 0f       	add	r20, r20
    2702:	55 1f       	adc	r21, r21
    2704:	44 0f       	add	r20, r20
    2706:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    2708:	24 0f       	add	r18, r20
    270a:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    270c:	ad 01       	movw	r20, r26
    270e:	48 1b       	sub	r20, r24
    2710:	59 0b       	sbc	r21, r25
    2712:	ca 01       	movw	r24, r20
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	84 0f       	add	r24, r20
    271a:	95 1f       	adc	r25, r21
    271c:	28 0f       	add	r18, r24
    271e:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    2720:	26 0f       	add	r18, r22
    2722:	37 1f       	adc	r19, r23
    2724:	30 93 fe 03 	sts	0x03FE, r19
    2728:	20 93 fd 03 	sts	0x03FD, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    272c:	37 fd       	sbrc	r19, 7
    272e:	4c c0       	rjmp	.+152    	; 0x27c8 <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2730:	12 16       	cp	r1, r18
    2732:	13 06       	cpc	r1, r19
    2734:	0c f0       	brlt	.+2      	; 0x2738 <start_horizontal_speed_control_left+0xc4>
    2736:	52 c0       	rjmp	.+164    	; 0x27dc <start_horizontal_speed_control_left+0x168>
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	97 fd       	sbrc	r25, 7
    273e:	67 c0       	rjmp	.+206    	; 0x280e <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2740:	5d e5       	ldi	r21, 0x5D	; 93
    2742:	21 3c       	cpi	r18, 0xC1	; 193
    2744:	35 07       	cpc	r19, r21
    2746:	0c f4       	brge	.+2      	; 0x274a <start_horizontal_speed_control_left+0xd6>
    2748:	49 c0       	rjmp	.+146    	; 0x27dc <start_horizontal_speed_control_left+0x168>
    274a:	80 ec       	ldi	r24, 0xC0	; 192
    274c:	9d e5       	ldi	r25, 0x5D	; 93
    274e:	90 93 fe 03 	sts	0x03FE, r25
    2752:	80 93 fd 03 	sts	0x03FD, r24
    2756:	2c ed       	ldi	r18, 0xDC	; 220
    2758:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    275a:	22 5e       	subi	r18, 0xE2	; 226
    275c:	3f 4f       	sbci	r19, 0xFF	; 255
    275e:	31 83       	std	Z+1, r19	; 0x01
    2760:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2762:	42 e0       	ldi	r20, 0x02	; 2
    2764:	21 30       	cpi	r18, 0x01	; 1
    2766:	34 07       	cpc	r19, r20
    2768:	0c f4       	brge	.+2      	; 0x276c <start_horizontal_speed_control_left+0xf8>
    276a:	48 c0       	rjmp	.+144    	; 0x27fc <start_horizontal_speed_control_left+0x188>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	92 e0       	ldi	r25, 0x02	; 2
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	80 83       	st	Z, r24
    2774:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2776:	10 92 00 04 	sts	0x0400, r1
    277a:	10 92 ff 03 	sts	0x03FF, r1
		delta_left_speed_current = 0;
    277e:	10 92 54 05 	sts	0x0554, r1
    2782:	10 92 53 05 	sts	0x0553, r1
		delta_left_speed_prev = 0;
    2786:	10 92 6e 05 	sts	0x056E, r1
    278a:	10 92 6d 05 	sts	0x056D, r1
		return;
    278e:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2790:	49 ef       	ldi	r20, 0xF9	; 249
    2792:	20 3c       	cpi	r18, 0xC0	; 192
    2794:	34 07       	cpc	r19, r20
    2796:	a4 f4       	brge	.+40     	; 0x27c0 <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    2798:	20 ec       	ldi	r18, 0xC0	; 192
    279a:	39 ef       	ldi	r19, 0xF9	; 249
    279c:	30 93 00 04 	sts	0x0400, r19
    27a0:	20 93 ff 03 	sts	0x03FF, r18
    27a4:	60 e8       	ldi	r22, 0x80	; 128
    27a6:	73 ef       	ldi	r23, 0xF3	; 243
    27a8:	9a cf       	rjmp	.-204    	; 0x26de <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    27aa:	80 91 ef 03 	lds	r24, 0x03EF
    27ae:	90 91 f0 03 	lds	r25, 0x03F0
    27b2:	82 0f       	add	r24, r18
    27b4:	93 1f       	adc	r25, r19
    27b6:	90 93 54 05 	sts	0x0554, r25
    27ba:	80 93 53 05 	sts	0x0553, r24
    27be:	78 cf       	rjmp	.-272    	; 0x26b0 <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    27c0:	b9 01       	movw	r22, r18
    27c2:	66 0f       	add	r22, r22
    27c4:	77 1f       	adc	r23, r23
    27c6:	8b cf       	rjmp	.-234    	; 0x26de <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    27c8:	80 81       	ld	r24, Z
    27ca:	91 81       	ldd	r25, Z+1	; 0x01
    27cc:	97 fd       	sbrc	r25, 7
    27ce:	06 c0       	rjmp	.+12     	; 0x27dc <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    27d0:	10 92 fe 03 	sts	0x03FE, r1
    27d4:	10 92 fd 03 	sts	0x03FD, r1
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    27dc:	82 ea       	ldi	r24, 0xA2	; 162
    27de:	20 34       	cpi	r18, 0x40	; 64
    27e0:	38 07       	cpc	r19, r24
    27e2:	dc f4       	brge	.+54     	; 0x281a <start_horizontal_speed_control_left+0x1a6>
    27e4:	80 e4       	ldi	r24, 0x40	; 64
    27e6:	92 ea       	ldi	r25, 0xA2	; 162
    27e8:	90 93 fe 03 	sts	0x03FE, r25
    27ec:	80 93 fd 03 	sts	0x03FD, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    27f0:	24 e2       	ldi	r18, 0x24	; 36
    27f2:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    27f4:	2e 51       	subi	r18, 0x1E	; 30
    27f6:	30 40       	sbci	r19, 0x00	; 0
    27f8:	31 83       	std	Z+1, r19	; 0x01
    27fa:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    27fc:	5e ef       	ldi	r21, 0xFE	; 254
    27fe:	20 30       	cpi	r18, 0x00	; 0
    2800:	35 07       	cpc	r19, r21
    2802:	24 f4       	brge	.+8      	; 0x280c <start_horizontal_speed_control_left+0x198>
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	9e ef       	ldi	r25, 0xFE	; 254
    2808:	91 83       	std	Z+1, r25	; 0x01
    280a:	80 83       	st	Z, r24
    280c:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    280e:	10 92 fe 03 	sts	0x03FE, r1
    2812:	10 92 fd 03 	sts	0x03FD, r1
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    281a:	35 95       	asr	r19
    281c:	27 95       	ror	r18
    281e:	35 95       	asr	r19
    2820:	27 95       	ror	r18
    2822:	35 95       	asr	r19
    2824:	27 95       	ror	r18
    2826:	35 95       	asr	r19
    2828:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    282a:	31 83       	std	Z+1, r19	; 0x01
    282c:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    282e:	12 16       	cp	r1, r18
    2830:	13 06       	cpc	r1, r19
    2832:	0c f4       	brge	.+2      	; 0x2836 <start_horizontal_speed_control_left+0x1c2>
    2834:	92 cf       	rjmp	.-220    	; 0x275a <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    2836:	21 15       	cp	r18, r1
    2838:	31 05       	cpc	r19, r1
    283a:	e1 f6       	brne	.-72     	; 0x27f4 <start_horizontal_speed_control_left+0x180>
    283c:	08 95       	ret

0000283e <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    283e:	85 b7       	in	r24, 0x35	; 53
    2840:	80 61       	ori	r24, 0x10	; 16
    2842:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    2844:	8f ef       	ldi	r24, 0xFF	; 255
    2846:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    2848:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    284a:	97 ef       	ldi	r25, 0xF7	; 247
    284c:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    284e:	90 ee       	ldi	r25, 0xE0	; 224
    2850:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    2852:	90 ef       	ldi	r25, 0xF0	; 240
    2854:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    2856:	90 eb       	ldi	r25, 0xB0	; 176
    2858:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    285a:	9c ef       	ldi	r25, 0xFC	; 252
    285c:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    285e:	93 e0       	ldi	r25, 0x03	; 3
    2860:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    2862:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    2864:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    2866:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    2868:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    286a:	80 91 42 05 	lds	r24, 0x0542
    286e:	88 23       	and	r24, r24
    2870:	e1 f0       	breq	.+56     	; 0x28aa <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    2872:	81 30       	cpi	r24, 0x01	; 1
    2874:	d1 f0       	breq	.+52     	; 0x28aa <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    2876:	82 30       	cpi	r24, 0x02	; 2
    2878:	51 f1       	breq	.+84     	; 0x28ce <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    287a:	9f ef       	ldi	r25, 0xFF	; 255
    287c:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    2880:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    2884:	9f e0       	ldi	r25, 0x0F	; 15
    2886:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    288a:	88 23       	and	r24, r24
    288c:	a9 f4       	brne	.+42     	; 0x28b8 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    288e:	90 91 05 01 	lds	r25, 0x0105
    2892:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    2896:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    289a:	9f ef       	ldi	r25, 0xFF	; 255
    289c:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    28a0:	88 23       	and	r24, r24
    28a2:	29 f4       	brne	.+10     	; 0x28ae <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    28a4:	10 92 0b 01 	sts	0x010B, r1
    28a8:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    28aa:	14 ba       	out	0x14, r1	; 20
    28ac:	e6 cf       	rjmp	.-52     	; 0x287a <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    28ae:	81 30       	cpi	r24, 0x01	; 1
    28b0:	c9 f3       	breq	.-14     	; 0x28a4 <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	41 f0       	breq	.+16     	; 0x28c6 <initPortsIO+0x88>
    28b6:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    28b8:	81 30       	cpi	r24, 0x01	; 1
    28ba:	11 f0       	breq	.+4      	; 0x28c0 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    28bc:	82 30       	cpi	r24, 0x02	; 2
    28be:	59 f7       	brne	.-42     	; 0x2896 <initPortsIO+0x58>
		PORTJ = 0x0F;
    28c0:	90 93 05 01 	sts	0x0105, r25
    28c4:	e8 cf       	rjmp	.-48     	; 0x2896 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    28c6:	87 ef       	ldi	r24, 0xF7	; 247
    28c8:	80 93 0b 01 	sts	0x010B, r24
    28cc:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    28ce:	98 e0       	ldi	r25, 0x08	; 8
    28d0:	94 bb       	out	0x14, r25	; 20
    28d2:	d3 cf       	rjmp	.-90     	; 0x287a <initPortsIO+0x3c>

000028d4 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    28d4:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    28d8:	10 92 bc 00 	sts	0x00BC, r1
}
    28dc:	08 95       	ret

000028de <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    28de:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    28e0:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    28e2:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    28ec:	08 95       	ret

000028ee <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    28ee:	94 ea       	ldi	r25, 0xA4	; 164
    28f0:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    28f4:	90 91 bc 00 	lds	r25, 0x00BC
    28f8:	97 ff       	sbrs	r25, 7
    28fa:	fc cf       	rjmp	.-8      	; 0x28f4 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    28fc:	90 91 b9 00 	lds	r25, 0x00B9
    2900:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2902:	98 30       	cpi	r25, 0x08	; 8
    2904:	21 f0       	breq	.+8      	; 0x290e <i2c_start+0x20>
    2906:	90 31       	cpi	r25, 0x10	; 16
    2908:	11 f0       	breq	.+4      	; 0x290e <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	08 95       	ret
	}

	// send device address
	TWDR = address;
    290e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2912:	84 e8       	ldi	r24, 0x84	; 132
    2914:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2918:	80 91 bc 00 	lds	r24, 0x00BC
    291c:	87 ff       	sbrs	r24, 7
    291e:	fc cf       	rjmp	.-8      	; 0x2918 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2920:	90 91 b9 00 	lds	r25, 0x00B9
    2924:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2926:	98 31       	cpi	r25, 0x18	; 24
    2928:	21 f0       	breq	.+8      	; 0x2932 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 34       	cpi	r25, 0x40	; 64
    292e:	19 f0       	breq	.+6      	; 0x2936 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2930:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2932:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2934:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	08 95       	ret

0000293a <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    293a:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    293c:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    293e:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2940:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2944:	90 91 bc 00 	lds	r25, 0x00BC
    2948:	97 ff       	sbrs	r25, 7
    294a:	fc cf       	rjmp	.-8      	; 0x2944 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    294c:	90 91 b9 00 	lds	r25, 0x00B9
    2950:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2952:	98 30       	cpi	r25, 0x08	; 8
    2954:	11 f0       	breq	.+4      	; 0x295a <i2c_start_wait+0x20>
    2956:	90 31       	cpi	r25, 0x10	; 16
    2958:	99 f7       	brne	.-26     	; 0x2940 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    295a:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    295e:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2962:	90 91 bc 00 	lds	r25, 0x00BC
    2966:	97 ff       	sbrs	r25, 7
    2968:	fc cf       	rjmp	.-8      	; 0x2962 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    296a:	90 91 b9 00 	lds	r25, 0x00B9
    296e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2970:	90 32       	cpi	r25, 0x20	; 32
    2972:	19 f0       	breq	.+6      	; 0x297a <i2c_start_wait+0x40>
    2974:	98 35       	cpi	r25, 0x58	; 88
    2976:	09 f0       	breq	.+2      	; 0x297a <i2c_start_wait+0x40>
    2978:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    297a:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    297e:	90 91 bc 00 	lds	r25, 0x00BC
    2982:	94 fd       	sbrc	r25, 4
    2984:	fc cf       	rjmp	.-8      	; 0x297e <i2c_start_wait+0x44>
    2986:	dc cf       	rjmp	.-72     	; 0x2940 <i2c_start_wait+0x6>

00002988 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2988:	94 ea       	ldi	r25, 0xA4	; 164
    298a:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    298e:	90 91 bc 00 	lds	r25, 0x00BC
    2992:	97 ff       	sbrs	r25, 7
    2994:	fc cf       	rjmp	.-8      	; 0x298e <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2996:	90 91 b9 00 	lds	r25, 0x00B9
    299a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    299c:	98 30       	cpi	r25, 0x08	; 8
    299e:	21 f0       	breq	.+8      	; 0x29a8 <i2c_rep_start+0x20>
    29a0:	90 31       	cpi	r25, 0x10	; 16
    29a2:	11 f0       	breq	.+4      	; 0x29a8 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	08 95       	ret
	}

	// send device address
	TWDR = address;
    29a8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    29ac:	84 e8       	ldi	r24, 0x84	; 132
    29ae:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    29b2:	80 91 bc 00 	lds	r24, 0x00BC
    29b6:	87 ff       	sbrs	r24, 7
    29b8:	fc cf       	rjmp	.-8      	; 0x29b2 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    29ba:	90 91 b9 00 	lds	r25, 0x00B9
    29be:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    29c0:	98 31       	cpi	r25, 0x18	; 24
    29c2:	21 f0       	breq	.+8      	; 0x29cc <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	90 34       	cpi	r25, 0x40	; 64
    29c8:	19 f0       	breq	.+6      	; 0x29d0 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    29ca:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    29cc:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    29ce:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	08 95       	ret

000029d4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    29d4:	84 e9       	ldi	r24, 0x94	; 148
    29d6:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    29da:	80 91 bc 00 	lds	r24, 0x00BC
    29de:	84 fd       	sbrc	r24, 4
    29e0:	fc cf       	rjmp	.-8      	; 0x29da <i2c_stop+0x6>

}/* i2c_stop */
    29e2:	08 95       	ret

000029e4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    29e4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    29e8:	84 e8       	ldi	r24, 0x84	; 132
    29ea:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    29ee:	80 91 bc 00 	lds	r24, 0x00BC
    29f2:	87 ff       	sbrs	r24, 7
    29f4:	fc cf       	rjmp	.-8      	; 0x29ee <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    29f6:	90 91 b9 00 	lds	r25, 0x00B9
    29fa:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	98 32       	cpi	r25, 0x28	; 40
    2a00:	09 f0       	breq	.+2      	; 0x2a04 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2a02:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2a04:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2a06:	08 95       	ret

00002a08 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2a08:	84 ec       	ldi	r24, 0xC4	; 196
    2a0a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    2a0e:	80 91 bc 00 	lds	r24, 0x00BC
    2a12:	87 ff       	sbrs	r24, 7
    2a14:	fc cf       	rjmp	.-8      	; 0x2a0e <i2c_readAck+0x6>

    return TWDR;
    2a16:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2a1a:	08 95       	ret

00002a1c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2a1c:	84 e8       	ldi	r24, 0x84	; 132
    2a1e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2a22:	80 91 bc 00 	lds	r24, 0x00BC
    2a26:	87 ff       	sbrs	r24, 7
    2a28:	fc cf       	rjmp	.-8      	; 0x2a22 <i2c_readNak+0x6>
	
    return TWDR;
    2a2a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2a2e:	08 95       	ret

00002a30 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    2a30:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    2a34:	80 e1       	ldi	r24, 0x10	; 16
    2a36:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2a3a:	e0 ec       	ldi	r30, 0xC0	; 192
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	82 60       	ori	r24, 0x02	; 2
    2a42:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    2a44:	e1 ec       	ldi	r30, 0xC1	; 193
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	88 69       	ori	r24, 0x98	; 152
    2a4c:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    2a4e:	e2 ec       	ldi	r30, 0xC2	; 194
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	86 60       	ori	r24, 0x06	; 6
    2a56:	80 83       	st	Z, r24



}
    2a58:	08 95       	ret

00002a5a <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    2a5a:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    2a5e:	80 e1       	ldi	r24, 0x10	; 16
    2a60:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    2a64:	e8 ec       	ldi	r30, 0xC8	; 200
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	82 60       	ori	r24, 0x02	; 2
    2a6c:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    2a6e:	e9 ec       	ldi	r30, 0xC9	; 201
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	88 61       	ori	r24, 0x18	; 24
    2a76:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    2a78:	ea ec       	ldi	r30, 0xCA	; 202
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	86 60       	ori	r24, 0x06	; 6
    2a80:	80 83       	st	Z, r24

}
    2a82:	08 95       	ret

00002a84 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    2a84:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    2a88:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    2a8c:	10 92 c2 00 	sts	0x00C2, r1

}
    2a90:	08 95       	ret

00002a92 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    2a92:	90 91 c0 00 	lds	r25, 0x00C0
    2a96:	95 ff       	sbrs	r25, 5
    2a98:	fc cf       	rjmp	.-8      	; 0x2a92 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    2a9a:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    2a9e:	66 23       	and	r22, r22
    2aa0:	21 f0       	breq	.+8      	; 0x2aaa <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    2aa2:	80 91 c0 00 	lds	r24, 0x00C0
    2aa6:	86 ff       	sbrs	r24, 6
    2aa8:	fc cf       	rjmp	.-8      	; 0x2aa2 <usart0Transmit+0x10>
    2aaa:	08 95       	ret

00002aac <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    2aac:	90 91 c8 00 	lds	r25, 0x00C8
    2ab0:	95 ff       	sbrs	r25, 5
    2ab2:	fc cf       	rjmp	.-8      	; 0x2aac <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    2ab4:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    2ab8:	66 23       	and	r22, r22
    2aba:	21 f0       	breq	.+8      	; 0x2ac4 <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    2abc:	80 91 c8 00 	lds	r24, 0x00C8
    2ac0:	86 ff       	sbrs	r24, 6
    2ac2:	fc cf       	rjmp	.-8      	; 0x2abc <usart1Transmit+0x10>
    2ac4:	08 95       	ret

00002ac6 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    2ac6:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    2aca:	80 95       	com	r24
	} else {
		return 1;
	}

}
    2acc:	88 1f       	adc	r24, r24
    2ace:	88 27       	eor	r24, r24
    2ad0:	88 1f       	adc	r24, r24
    2ad2:	08 95       	ret

00002ad4 <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    2ad4:	87 e9       	ldi	r24, 0x97	; 151
    2ad6:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    2ad8:	20 91 c0 00 	lds	r18, 0x00C0
    2adc:	27 fd       	sbrc	r18, 7
    2ade:	07 c0       	rjmp	.+14     	; 0x2aee <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    2ae0:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    2ae2:	d1 f7       	brne	.-12     	; 0x2ad8 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	80 93 12 04 	sts	0x0412, r24
			return 0;				// timeout
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    2aee:	80 91 c6 00 	lds	r24, 0x00C6

}
    2af2:	08 95       	ret

00002af4 <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    2af4:	1f 92       	push	r1
    2af6:	0f 92       	push	r0
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	0f 92       	push	r0
    2afc:	11 24       	eor	r1, r1
    2afe:	2f 93       	push	r18
    2b00:	3f 93       	push	r19
    2b02:	4f 93       	push	r20
    2b04:	8f 93       	push	r24
    2b06:	9f 93       	push	r25

	char receivedByte = UDR0;
    2b08:	90 91 c6 00 	lds	r25, 0x00C6

	if(chooseMenu) {
    2b0c:	80 91 11 02 	lds	r24, 0x0211
    2b10:	88 23       	and	r24, r24
    2b12:	c9 f4       	brne	.+50     	; 0x2b46 <__vector_25+0x52>
		chooseMenu = 0;
		menuChoice = receivedByte;
	} else {
		switch(menuChoice) {
    2b14:	80 91 17 05 	lds	r24, 0x0517
    2b18:	81 30       	cpi	r24, 0x01	; 1
    2b1a:	61 f0       	breq	.+24     	; 0x2b34 <__vector_25+0x40>
    2b1c:	82 30       	cpi	r24, 0x02	; 2
    2b1e:	c1 f0       	breq	.+48     	; 0x2b50 <__vector_25+0x5c>
				}
				break;
		}
	}

}
    2b20:	9f 91       	pop	r25
    2b22:	8f 91       	pop	r24
    2b24:	4f 91       	pop	r20
    2b26:	3f 91       	pop	r19
    2b28:	2f 91       	pop	r18
    2b2a:	0f 90       	pop	r0
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	0f 90       	pop	r0
    2b30:	1f 90       	pop	r1
    2b32:	18 95       	reti
		chooseMenu = 0;
		menuChoice = receivedByte;
	} else {
		switch(menuChoice) {
			case 1: // send sensors data and activate actuators
				if(receivedByte == 0xAA) {
    2b34:	9a 3a       	cpi	r25, 0xAA	; 170
    2b36:	69 f1       	breq	.+90     	; 0x2b92 <__vector_25+0x9e>
					getDataNow = 1;
				} else if(receivedByte == 0x55) {
    2b38:	95 35       	cpi	r25, 0x55	; 85
    2b3a:	91 f7       	brne	.-28     	; 0x2b20 <__vector_25+0x2c>
					chooseMenu = 1;
    2b3c:	80 93 11 02 	sts	0x0211, r24
					menuChoice = 0;
    2b40:	10 92 17 05 	sts	0x0517, r1
    2b44:	ed cf       	rjmp	.-38     	; 0x2b20 <__vector_25+0x2c>
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(chooseMenu) {
		chooseMenu = 0;
    2b46:	10 92 11 02 	sts	0x0211, r1
		menuChoice = receivedByte;
    2b4a:	90 93 17 05 	sts	0x0517, r25
    2b4e:	e8 cf       	rjmp	.-48     	; 0x2b20 <__vector_25+0x2c>
					menuChoice = 0;
				}
				break;

			case 2:	// address writing in eeprom
				if(menuState == 0) { // receive rf address LSB:
    2b50:	40 91 19 05 	lds	r20, 0x0519
    2b54:	44 23       	and	r20, r20
    2b56:	a9 f0       	breq	.+42     	; 0x2b82 <__vector_25+0x8e>
					rfAddress = (unsigned int)receivedByte&0x00FF;
					menuState = 1;
				} else if(menuState == 1) { // receive rf address MSB
    2b58:	41 30       	cpi	r20, 0x01	; 1
    2b5a:	11 f7       	brne	.-60     	; 0x2b20 <__vector_25+0x2c>
					rfAddress |= ((unsigned int)receivedByte<<8);
    2b5c:	39 2f       	mov	r19, r25
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	80 91 0b 04 	lds	r24, 0x040B
    2b64:	90 91 0c 04 	lds	r25, 0x040C
    2b68:	82 2b       	or	r24, r18
    2b6a:	93 2b       	or	r25, r19
    2b6c:	90 93 0c 04 	sts	0x040C, r25
    2b70:	80 93 0b 04 	sts	0x040B, r24
					addressReceived = 1;
    2b74:	40 93 18 05 	sts	0x0518, r20
					menuState = 0;
    2b78:	10 92 19 05 	sts	0x0519, r1
					chooseMenu = 1;
    2b7c:	40 93 11 02 	sts	0x0211, r20
    2b80:	cf cf       	rjmp	.-98     	; 0x2b20 <__vector_25+0x2c>
				}
				break;

			case 2:	// address writing in eeprom
				if(menuState == 0) { // receive rf address LSB:
					rfAddress = (unsigned int)receivedByte&0x00FF;
    2b82:	90 93 0b 04 	sts	0x040B, r25
    2b86:	10 92 0c 04 	sts	0x040C, r1
					menuState = 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	80 93 19 05 	sts	0x0519, r24
    2b90:	c7 cf       	rjmp	.-114    	; 0x2b20 <__vector_25+0x2c>
		menuChoice = receivedByte;
	} else {
		switch(menuChoice) {
			case 1: // send sensors data and activate actuators
				if(receivedByte == 0xAA) {
					getDataNow = 1;
    2b92:	80 93 1a 05 	sts	0x051A, r24
    2b96:	c4 cf       	rjmp	.-120    	; 0x2b20 <__vector_25+0x2c>

00002b98 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    2b98:	86 b1       	in	r24, 0x06	; 6
    2b9a:	66 b1       	in	r22, 0x06	; 6
    2b9c:	26 b1       	in	r18, 0x06	; 6
    2b9e:	46 b1       	in	r20, 0x06	; 6
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	28 70       	andi	r18, 0x08	; 8
    2ba4:	30 70       	andi	r19, 0x00	; 0
    2ba6:	35 95       	asr	r19
    2ba8:	27 95       	ror	r18
    2baa:	35 95       	asr	r19
    2bac:	27 95       	ror	r18
    2bae:	35 95       	asr	r19
    2bb0:	27 95       	ror	r18
    2bb2:	22 0f       	add	r18, r18
    2bb4:	33 1f       	adc	r19, r19
    2bb6:	70 e0       	ldi	r23, 0x00	; 0
    2bb8:	64 70       	andi	r22, 0x04	; 4
    2bba:	70 70       	andi	r23, 0x00	; 0
    2bbc:	75 95       	asr	r23
    2bbe:	67 95       	ror	r22
    2bc0:	75 95       	asr	r23
    2bc2:	67 95       	ror	r22
    2bc4:	26 0f       	add	r18, r22
    2bc6:	37 1f       	adc	r19, r23
    2bc8:	22 0f       	add	r18, r18
    2bca:	33 1f       	adc	r19, r19
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	42 70       	andi	r20, 0x02	; 2
    2bd0:	50 70       	andi	r21, 0x00	; 0
    2bd2:	55 95       	asr	r21
    2bd4:	47 95       	ror	r20
    2bd6:	24 0f       	add	r18, r20
    2bd8:	35 1f       	adc	r19, r21
    2bda:	22 0f       	add	r18, r18
    2bdc:	81 70       	andi	r24, 0x01	; 1
}
    2bde:	82 0f       	add	r24, r18
    2be0:	08 95       	ret

00002be2 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2be2:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    2be4:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    2be6:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    2be8:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    2bec:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    2bf0:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    2bf4:	8e ef       	ldi	r24, 0xFE	; 254
    2bf6:	9f e0       	ldi	r25, 0x0F	; 15
    2bf8:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <__eerd_word_m2560>
    2bfc:	90 93 0c 04 	sts	0x040C, r25
    2c00:	80 93 0b 04 	sts	0x040B, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    2c04:	9c 01       	movw	r18, r24
    2c06:	21 58       	subi	r18, 0x81	; 129
    2c08:	3c 40       	sbci	r19, 0x0C	; 12
    2c0a:	23 30       	cpi	r18, 0x03	; 3
    2c0c:	31 05       	cpc	r19, r1
    2c0e:	f8 f4       	brcc	.+62     	; 0x2c4e <initPeripherals+0x6c>
		hardwareRevision = HW_REV_3_0;
    2c10:	10 92 42 05 	sts	0x0542, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    2c14:	0e 94 1f 14 	call	0x283e	; 0x283e <initPortsIO>
	initAdc();
    2c18:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <initAdc>
	initMotors();
    2c1c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <initMotors>
	initRGBleds();
    2c20:	0e 94 af 20 	call	0x415e	; 0x415e <initRGBleds>
	initSPI();
    2c24:	0e 94 70 06 	call	0xce0	; 0xce0 <initSPI>
	mirf_init();
    2c28:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mirf_init>
	if(spiCommError==0) {
    2c2c:	80 91 0e 04 	lds	r24, 0x040E
    2c30:	88 23       	and	r24, r24
    2c32:	29 f4       	brne	.+10     	; 0x2c3e <initPeripherals+0x5c>
		rfFlags |= 1;
    2c34:	80 91 0d 04 	lds	r24, 0x040D
    2c38:	81 60       	ori	r24, 0x01	; 1
    2c3a:	80 93 0d 04 	sts	0x040D, r24
	}
	initUsart0();
    2c3e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <initUsart0>
	initAccelerometer();
    2c42:	0e 94 f7 21 	call	0x43ee	; 0x43ee <initAccelerometer>
	init_ir_remote_control();
    2c46:	0e 94 3f 0c 	call	0x187e	; 0x187e <init_ir_remote_control>

	sei();			// enable global interrupts
    2c4a:	78 94       	sei

	
}
    2c4c:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    2c4e:	2c e0       	ldi	r18, 0x0C	; 12
    2c50:	80 38       	cpi	r24, 0x80	; 128
    2c52:	92 07       	cpc	r25, r18
    2c54:	21 f4       	brne	.+8      	; 0x2c5e <initPeripherals+0x7c>
		hardwareRevision = HW_REV_3_0_1;
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	80 93 42 05 	sts	0x0542, r24
    2c5c:	db cf       	rjmp	.-74     	; 0x2c14 <initPeripherals+0x32>
	}

	if(rfAddress > 3203) {
    2c5e:	2c e0       	ldi	r18, 0x0C	; 12
    2c60:	84 38       	cpi	r24, 0x84	; 132
    2c62:	92 07       	cpc	r25, r18
    2c64:	b8 f2       	brcs	.-82     	; 0x2c14 <initPeripherals+0x32>
		hardwareRevision = HW_REV_3_1;
    2c66:	82 e0       	ldi	r24, 0x02	; 2
    2c68:	80 93 42 05 	sts	0x0542, r24
    2c6c:	d3 cf       	rjmp	.-90     	; 0x2c14 <initPeripherals+0x32>

00002c6e <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    2c6e:	1f 92       	push	r1
    2c70:	0f 92       	push	r0
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	0f 92       	push	r0
    2c76:	11 24       	eor	r1, r1

}
    2c78:	0f 90       	pop	r0
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	0f 90       	pop	r0
    2c7e:	1f 90       	pop	r1
    2c80:	18 95       	reti

00002c82 <sleep>:

void sleep(unsigned char seconds) {
    2c82:	cf 93       	push	r28
    2c84:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    2c86:	9e e1       	ldi	r25, 0x1E	; 30
    2c88:	89 9f       	mul	r24, r25
    2c8a:	e0 01       	movw	r28, r0
    2c8c:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2c8e:	80 91 68 00 	lds	r24, 0x0068
    2c92:	8d 7f       	andi	r24, 0xFD	; 253
    2c94:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    2c98:	80 91 6c 00 	lds	r24, 0x006C
    2c9c:	8f 77       	andi	r24, 0x7F	; 127
    2c9e:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    2ca2:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    2ca4:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    2ca8:	80 91 7a 00 	lds	r24, 0x007A
    2cac:	80 61       	ori	r24, 0x10	; 16
    2cae:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    2cb2:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    2cb6:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2cba:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    2cbe:	88 b3       	in	r24, 0x18	; 24
    2cc0:	87 60       	ori	r24, 0x07	; 7
    2cc2:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    2cc4:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    2cc8:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    2ccc:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    2cd0:	89 b3       	in	r24, 0x19	; 25
    2cd2:	87 60       	ori	r24, 0x07	; 7
    2cd4:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    2cd6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    2cda:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    2cde:	0e 94 42 15 	call	0x2a84	; 0x2a84 <closeUsart>
	closeSPI();
    2ce2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <closeSPI>
	i2c_close();
    2ce6:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <i2c_close>

	// set port pins
	initPortsIO();
    2cea:	0e 94 1f 14 	call	0x283e	; 0x283e <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    2cee:	83 b7       	in	r24, 0x33	; 51
    2cf0:	8f 60       	ori	r24, 0x0F	; 15
    2cf2:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    2cfa:	80 91 b0 00 	lds	r24, 0x00B0
    2cfe:	8d 7f       	andi	r24, 0xFD	; 253
    2d00:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    2d04:	80 91 b1 00 	lds	r24, 0x00B1
    2d08:	87 60       	ori	r24, 0x07	; 7
    2d0a:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    2d0e:	20 97       	sbiw	r28, 0x00	; 0
    2d10:	19 f0       	breq	.+6      	; 0x2d18 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    2d12:	88 95       	sleep
		pause--;
    2d14:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    2d16:	e9 f7       	brne	.-6      	; 0x2d12 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    2d18:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    2d1a:	80 91 b1 00 	lds	r24, 0x00B1
    2d1e:	88 7f       	andi	r24, 0xF8	; 248
    2d20:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    2d24:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    2d28:	80 91 b0 00 	lds	r24, 0x00B0
    2d2c:	82 60       	ori	r24, 0x02	; 2
    2d2e:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    2d32:	8f ef       	ldi	r24, 0xFF	; 255
    2d34:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    2d38:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    2d3c:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    2d40:	10 92 f4 03 	sts	0x03F4, r1
    2d44:	10 92 f3 03 	sts	0x03F3, r1
	pwm_left = 0;
    2d48:	10 92 f6 03 	sts	0x03F6, r1
    2d4c:	10 92 f5 03 	sts	0x03F5, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2d50:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    2d52:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    2d54:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    2d56:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    2d5a:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    2d5e:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    2d62:	8e ef       	ldi	r24, 0xFE	; 254
    2d64:	9f e0       	ldi	r25, 0x0F	; 15
    2d66:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <__eerd_word_m2560>
    2d6a:	90 93 0c 04 	sts	0x040C, r25
    2d6e:	80 93 0b 04 	sts	0x040B, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    2d72:	9c 01       	movw	r18, r24
    2d74:	21 58       	subi	r18, 0x81	; 129
    2d76:	3c 40       	sbci	r19, 0x0C	; 12
    2d78:	23 30       	cpi	r18, 0x03	; 3
    2d7a:	31 05       	cpc	r19, r1
    2d7c:	08 f5       	brcc	.+66     	; 0x2dc0 <sleep+0x13e>
		hardwareRevision = HW_REV_3_0;
    2d7e:	10 92 42 05 	sts	0x0542, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    2d82:	0e 94 1f 14 	call	0x283e	; 0x283e <initPortsIO>
	initAdc();
    2d86:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <initAdc>
	initMotors();
    2d8a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <initMotors>
	initRGBleds();
    2d8e:	0e 94 af 20 	call	0x415e	; 0x415e <initRGBleds>
	initSPI();
    2d92:	0e 94 70 06 	call	0xce0	; 0xce0 <initSPI>
	mirf_init();
    2d96:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mirf_init>
	if(spiCommError==0) {
    2d9a:	80 91 0e 04 	lds	r24, 0x040E
    2d9e:	88 23       	and	r24, r24
    2da0:	29 f4       	brne	.+10     	; 0x2dac <sleep+0x12a>
		rfFlags |= 1;
    2da2:	80 91 0d 04 	lds	r24, 0x040D
    2da6:	81 60       	ori	r24, 0x01	; 1
    2da8:	80 93 0d 04 	sts	0x040D, r24
	}
	initUsart0();
    2dac:	0e 94 18 15 	call	0x2a30	; 0x2a30 <initUsart0>
	initAccelerometer();
    2db0:	0e 94 f7 21 	call	0x43ee	; 0x43ee <initAccelerometer>
	init_ir_remote_control();
    2db4:	0e 94 3f 0c 	call	0x187e	; 0x187e <init_ir_remote_control>

	sei();			// enable global interrupts
    2db8:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    2dc0:	2c e0       	ldi	r18, 0x0C	; 12
    2dc2:	80 38       	cpi	r24, 0x80	; 128
    2dc4:	92 07       	cpc	r25, r18
    2dc6:	21 f4       	brne	.+8      	; 0x2dd0 <sleep+0x14e>
		hardwareRevision = HW_REV_3_0_1;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	80 93 42 05 	sts	0x0542, r24
    2dce:	d9 cf       	rjmp	.-78     	; 0x2d82 <sleep+0x100>
	}

	if(rfAddress > 3203) {
    2dd0:	2c e0       	ldi	r18, 0x0C	; 12
    2dd2:	84 38       	cpi	r24, 0x84	; 132
    2dd4:	92 07       	cpc	r25, r18
    2dd6:	a8 f2       	brcs	.-86     	; 0x2d82 <sleep+0x100>
		hardwareRevision = HW_REV_3_1;
    2dd8:	82 e0       	ldi	r24, 0x02	; 2
    2dda:	80 93 42 05 	sts	0x0542, r24
    2dde:	d1 cf       	rjmp	.-94     	; 0x2d82 <sleep+0x100>

00002de0 <getTime100MicroSec>:
	pwm_left = 0;
	initPeripherals();

}

unsigned long int getTime100MicroSec() {
    2de0:	60 91 3b 05 	lds	r22, 0x053B
    2de4:	70 91 3c 05 	lds	r23, 0x053C
	return clockTick;
}
    2de8:	80 91 3d 05 	lds	r24, 0x053D
    2dec:	90 91 3e 05 	lds	r25, 0x053E
    2df0:	08 95       	ret

00002df2 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	80 93 c5 03 	sts	0x03C5, r24
}
    2df8:	08 95       	ret

00002dfa <initAdc>:

#include "adc.h"


void initAdc(void) {
    2dfa:	cf 93       	push	r28
    2dfc:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    2dfe:	ea e7       	ldi	r30, 0x7A	; 122
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	10 82       	st	Z, r1
	ADCSRB = 0;
    2e04:	ab e7       	ldi	r26, 0x7B	; 123
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	1c 92       	st	X, r1
	ADMUX = 0;
    2e0a:	cc e7       	ldi	r28, 0x7C	; 124
    2e0c:	d0 e0       	ldi	r29, 0x00	; 0
    2e0e:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    2e10:	80 81       	ld	r24, Z
    2e12:	86 60       	ori	r24, 0x06	; 6
    2e14:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    2e16:	88 81       	ld	r24, Y
    2e18:	80 64       	ori	r24, 0x40	; 64
    2e1a:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    2e1c:	80 81       	ld	r24, Z
    2e1e:	80 62       	ori	r24, 0x20	; 32
    2e20:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    2e22:	8c 91       	ld	r24, X
    2e24:	88 7f       	andi	r24, 0xF8	; 248
    2e26:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    2e28:	80 81       	ld	r24, Z
    2e2a:	88 60       	ori	r24, 0x08	; 8
    2e2c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    2e2e:	80 81       	ld	r24, Z
    2e30:	80 68       	ori	r24, 0x80	; 128
    2e32:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    2e34:	80 81       	ld	r24, Z
    2e36:	80 64       	ori	r24, 0x40	; 64
    2e38:	80 83       	st	Z, r24

}
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	08 95       	ret

00002e40 <__vector_29>:

ISR(ADC_vect) {
    2e40:	1f 92       	push	r1
    2e42:	0f 92       	push	r0
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	0f 92       	push	r0
    2e48:	0b b6       	in	r0, 0x3b	; 59
    2e4a:	0f 92       	push	r0
    2e4c:	11 24       	eor	r1, r1
    2e4e:	2f 93       	push	r18
    2e50:	3f 93       	push	r19
    2e52:	4f 93       	push	r20
    2e54:	5f 93       	push	r21
    2e56:	6f 93       	push	r22
    2e58:	8f 93       	push	r24
    2e5a:	9f 93       	push	r25
    2e5c:	af 93       	push	r26
    2e5e:	bf 93       	push	r27
    2e60:	ef 93       	push	r30
    2e62:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    2e64:	80 91 3b 05 	lds	r24, 0x053B
    2e68:	90 91 3c 05 	lds	r25, 0x053C
    2e6c:	a0 91 3d 05 	lds	r26, 0x053D
    2e70:	b0 91 3e 05 	lds	r27, 0x053E
    2e74:	01 96       	adiw	r24, 0x01	; 1
    2e76:	a1 1d       	adc	r26, r1
    2e78:	b1 1d       	adc	r27, r1
    2e7a:	80 93 3b 05 	sts	0x053B, r24
    2e7e:	90 93 3c 05 	sts	0x053C, r25
    2e82:	a0 93 3d 05 	sts	0x053D, r26
    2e86:	b0 93 3e 05 	sts	0x053E, r27
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    2e8a:	20 91 78 00 	lds	r18, 0x0078
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    2e90:	40 91 79 00 	lds	r20, 0x0079
    2e94:	94 2f       	mov	r25, r20
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	28 2b       	or	r18, r24
    2e9a:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2e9c:	80 91 bf 03 	lds	r24, 0x03BF
    2ea0:	82 30       	cpi	r24, 0x02	; 2
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <__vector_29+0x66>
    2ea4:	ac c1       	rjmp	.+856    	; 0x31fe <__vector_29+0x3be>
    2ea6:	83 30       	cpi	r24, 0x03	; 3
    2ea8:	08 f4       	brcc	.+2      	; 0x2eac <__vector_29+0x6c>
    2eaa:	45 c0       	rjmp	.+138    	; 0x2f36 <__vector_29+0xf6>
    2eac:	83 30       	cpi	r24, 0x03	; 3
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <__vector_29+0x72>
    2eb0:	c9 c1       	rjmp	.+914    	; 0x3244 <__vector_29+0x404>
    2eb2:	84 30       	cpi	r24, 0x04	; 4
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <__vector_29+0x78>
    2eb6:	68 c1       	rjmp	.+720    	; 0x3188 <__vector_29+0x348>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2eb8:	80 91 c0 03 	lds	r24, 0x03C0
    2ebc:	82 30       	cpi	r24, 0x02	; 2
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <__vector_29+0x82>
    2ec0:	4f c1       	rjmp	.+670    	; 0x3160 <__vector_29+0x320>
    2ec2:	83 30       	cpi	r24, 0x03	; 3
    2ec4:	08 f0       	brcs	.+2      	; 0x2ec8 <__vector_29+0x88>
    2ec6:	cd c0       	rjmp	.+410    	; 0x3062 <__vector_29+0x222>
    2ec8:	88 23       	and	r24, r24
    2eca:	09 f0       	breq	.+2      	; 0x2ece <__vector_29+0x8e>
    2ecc:	24 c1       	rjmp	.+584    	; 0x3116 <__vector_29+0x2d6>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    2ece:	80 91 2a 03 	lds	r24, 0x032A
    2ed2:	86 95       	lsr	r24
    2ed4:	80 93 29 03 	sts	0x0329, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    2ed8:	80 91 c1 03 	lds	r24, 0x03C1
    2edc:	88 23       	and	r24, r24
    2ede:	09 f0       	breq	.+2      	; 0x2ee2 <__vector_29+0xa2>
    2ee0:	e1 c1       	rjmp	.+962    	; 0x32a4 <__vector_29+0x464>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	80 93 c0 03 	sts	0x03C0, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    2eee:	90 91 29 03 	lds	r25, 0x0329
    2ef2:	98 30       	cpi	r25, 0x08	; 8
    2ef4:	08 f0       	brcs	.+2      	; 0x2ef8 <__vector_29+0xb8>
    2ef6:	ed c0       	rjmp	.+474    	; 0x30d2 <__vector_29+0x292>
		ADCSRB &= ~(1 << MUX5);
    2ef8:	90 91 7b 00 	lds	r25, 0x007B
    2efc:	97 7f       	andi	r25, 0xF7	; 247
    2efe:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    2f02:	90 91 29 03 	lds	r25, 0x0329
    2f06:	90 5c       	subi	r25, 0xC0	; 192
    2f08:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    2f0c:	82 30       	cpi	r24, 0x02	; 2
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <__vector_29+0xd2>
    2f10:	ed c0       	rjmp	.+474    	; 0x30ec <__vector_29+0x2ac>

	}

	//LED_BLUE_OFF;

}
    2f12:	ff 91       	pop	r31
    2f14:	ef 91       	pop	r30
    2f16:	bf 91       	pop	r27
    2f18:	af 91       	pop	r26
    2f1a:	9f 91       	pop	r25
    2f1c:	8f 91       	pop	r24
    2f1e:	6f 91       	pop	r22
    2f20:	5f 91       	pop	r21
    2f22:	4f 91       	pop	r20
    2f24:	3f 91       	pop	r19
    2f26:	2f 91       	pop	r18
    2f28:	0f 90       	pop	r0
    2f2a:	0b be       	out	0x3b, r0	; 59
    2f2c:	0f 90       	pop	r0
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	0f 90       	pop	r0
    2f32:	1f 90       	pop	r1
    2f34:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2f36:	88 23       	and	r24, r24
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <__vector_29+0xfc>
    2f3a:	fe c0       	rjmp	.+508    	; 0x3138 <__vector_29+0x2f8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2f3c:	60 91 2a 03 	lds	r22, 0x032A
    2f40:	6e 30       	cpi	r22, 0x0E	; 14
    2f42:	09 f4       	brne	.+2      	; 0x2f46 <__vector_29+0x106>
    2f44:	d0 c1       	rjmp	.+928    	; 0x32e6 <__vector_29+0x4a6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    2f46:	46 2f       	mov	r20, r22
    2f48:	50 e0       	ldi	r21, 0x00	; 0
    2f4a:	fa 01       	movw	r30, r20
    2f4c:	ee 0f       	add	r30, r30
    2f4e:	ff 1f       	adc	r31, r31
    2f50:	e1 5d       	subi	r30, 0xD1	; 209
    2f52:	fc 4f       	sbci	r31, 0xFC	; 252
    2f54:	31 83       	std	Z+1, r19	; 0x01
    2f56:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    2f58:	40 ff       	sbrs	r20, 0
    2f5a:	77 c0       	rjmp	.+238    	; 0x304a <__vector_29+0x20a>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    2f5c:	fa 01       	movw	r30, r20
    2f5e:	ee 0f       	add	r30, r30
    2f60:	ff 1f       	adc	r31, r31
    2f62:	e3 5d       	subi	r30, 0xD3	; 211
    2f64:	fc 4f       	sbci	r31, 0xFC	; 252
    2f66:	80 81       	ld	r24, Z
    2f68:	91 81       	ldd	r25, Z+1	; 0x01
    2f6a:	fa 01       	movw	r30, r20
    2f6c:	ee 0f       	add	r30, r30
    2f6e:	ff 1f       	adc	r31, r31
    2f70:	e1 5d       	subi	r30, 0xD1	; 209
    2f72:	fc 4f       	sbci	r31, 0xFC	; 252
    2f74:	40 81       	ld	r20, Z
    2f76:	51 81       	ldd	r21, Z+1	; 0x01
    2f78:	26 2f       	mov	r18, r22
    2f7a:	26 95       	lsr	r18
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	84 1b       	sub	r24, r20
    2f80:	95 0b       	sbc	r25, r21
    2f82:	22 0f       	add	r18, r18
    2f84:	33 1f       	adc	r19, r19
    2f86:	f9 01       	movw	r30, r18
    2f88:	e9 58       	subi	r30, 0x89	; 137
    2f8a:	fc 4f       	sbci	r31, 0xFC	; 252
    2f8c:	40 81       	ld	r20, Z
    2f8e:	51 81       	ldd	r21, Z+1	; 0x01
    2f90:	84 1b       	sub	r24, r20
    2f92:	95 0b       	sbc	r25, r21
    2f94:	f9 01       	movw	r30, r18
    2f96:	e1 5a       	subi	r30, 0xA1	; 161
    2f98:	fc 4f       	sbci	r31, 0xFC	; 252
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    2f9e:	97 fd       	sbrc	r25, 7
    2fa0:	bd c1       	rjmp	.+890    	; 0x331c <__vector_29+0x4dc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    2fa2:	44 e0       	ldi	r20, 0x04	; 4
    2fa4:	81 30       	cpi	r24, 0x01	; 1
    2fa6:	94 07       	cpc	r25, r20
    2fa8:	24 f0       	brlt	.+8      	; 0x2fb2 <__vector_29+0x172>
					proximityResult[currentProx>>1] = 1024;
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	94 e0       	ldi	r25, 0x04	; 4
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    2fb2:	60 31       	cpi	r22, 0x10	; 16
    2fb4:	48 f4       	brcc	.+18     	; 0x2fc8 <__vector_29+0x188>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    2fb6:	8c 33       	cpi	r24, 0x3C	; 60
    2fb8:	91 05       	cpc	r25, r1
    2fba:	0c f0       	brlt	.+2      	; 0x2fbe <__vector_29+0x17e>
    2fbc:	b4 c1       	rjmp	.+872    	; 0x3326 <__vector_29+0x4e6>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    2fbe:	29 53       	subi	r18, 0x39	; 57
    2fc0:	3c 4f       	sbci	r19, 0xFC	; 252
    2fc2:	f9 01       	movw	r30, r18
    2fc4:	91 83       	std	Z+1, r25	; 0x01
    2fc6:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    2fc8:	80 91 50 05 	lds	r24, 0x0550
    2fcc:	88 23       	and	r24, r24
    2fce:	09 f4       	brne	.+2      	; 0x2fd2 <__vector_29+0x192>
    2fd0:	75 c1       	rjmp	.+746    	; 0x32bc <__vector_29+0x47c>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    2fd2:	80 91 6f 03 	lds	r24, 0x036F
    2fd6:	90 91 70 03 	lds	r25, 0x0370
    2fda:	f1 e0       	ldi	r31, 0x01	; 1
    2fdc:	84 3a       	cpi	r24, 0xA4	; 164
    2fde:	9f 07       	cpc	r25, r31
    2fe0:	cc f0       	brlt	.+50     	; 0x3014 <__vector_29+0x1d4>
    2fe2:	80 91 71 03 	lds	r24, 0x0371
    2fe6:	90 91 72 03 	lds	r25, 0x0372
    2fea:	21 e0       	ldi	r18, 0x01	; 1
    2fec:	84 3a       	cpi	r24, 0xA4	; 164
    2fee:	92 07       	cpc	r25, r18
    2ff0:	8c f0       	brlt	.+34     	; 0x3014 <__vector_29+0x1d4>
    2ff2:	80 91 73 03 	lds	r24, 0x0373
    2ff6:	90 91 74 03 	lds	r25, 0x0374
    2ffa:	41 e0       	ldi	r20, 0x01	; 1
    2ffc:	84 3a       	cpi	r24, 0xA4	; 164
    2ffe:	94 07       	cpc	r25, r20
    3000:	4c f0       	brlt	.+18     	; 0x3014 <__vector_29+0x1d4>
    3002:	80 91 75 03 	lds	r24, 0x0375
    3006:	90 91 76 03 	lds	r25, 0x0376
    300a:	e1 e0       	ldi	r30, 0x01	; 1
    300c:	84 3a       	cpi	r24, 0xA4	; 164
    300e:	9e 07       	cpc	r25, r30
    3010:	0c f0       	brlt	.+2      	; 0x3014 <__vector_29+0x1d4>
    3012:	54 c1       	rjmp	.+680    	; 0x32bc <__vector_29+0x47c>
						cliffDetectedFlag = 1;
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	80 93 51 05 	sts	0x0551, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    301a:	10 92 f6 03 	sts	0x03F6, r1
    301e:	10 92 f5 03 	sts	0x03F5, r1
						OCR4A = 0;
    3022:	10 92 a9 00 	sts	0x00A9, r1
    3026:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    302a:	10 92 ab 00 	sts	0x00AB, r1
    302e:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    3032:	10 92 f4 03 	sts	0x03F4, r1
    3036:	10 92 f3 03 	sts	0x03F3, r1
						OCR3A = 0;
    303a:	10 92 99 00 	sts	0x0099, r1
    303e:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    3042:	10 92 9b 00 	sts	0x009B, r1
    3046:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    304a:	6f 5f       	subi	r22, 0xFF	; 255
    304c:	60 93 2a 03 	sts	0x032A, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    3050:	68 31       	cpi	r22, 0x18	; 24
    3052:	08 f4       	brcc	.+2      	; 0x3056 <__vector_29+0x216>
    3054:	31 cf       	rjmp	.-414    	; 0x2eb8 <__vector_29+0x78>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    3056:	10 92 2a 03 	sts	0x032A, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	80 93 c6 03 	sts	0x03C6, r24
    3060:	2b cf       	rjmp	.-426    	; 0x2eb8 <__vector_29+0x78>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3062:	83 30       	cpi	r24, 0x03	; 3
    3064:	09 f4       	brne	.+2      	; 0x3068 <__vector_29+0x228>
    3066:	b7 c0       	rjmp	.+366    	; 0x31d6 <__vector_29+0x396>
    3068:	84 30       	cpi	r24, 0x04	; 4
    306a:	09 f0       	breq	.+2      	; 0x306e <__vector_29+0x22e>
    306c:	40 cf       	rjmp	.-384    	; 0x2eee <__vector_29+0xae>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    306e:	90 91 2c 03 	lds	r25, 0x032C
    3072:	90 93 29 03 	sts	0x0329, r25
			rightChannelPhase = rightMotorPhase;
    3076:	90 91 2d 03 	lds	r25, 0x032D
    307a:	90 93 c1 03 	sts	0x03C1, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    307e:	90 91 c2 03 	lds	r25, 0x03C2
    3082:	99 23       	and	r25, r25
    3084:	09 f0       	breq	.+2      	; 0x3088 <__vector_29+0x248>
    3086:	08 c1       	rjmp	.+528    	; 0x3298 <__vector_29+0x458>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3088:	83 e0       	ldi	r24, 0x03	; 3
    308a:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    308e:	10 92 c0 03 	sts	0x03C0, r1

			if(currentProx==14 && measBattery==1) {
    3092:	60 91 2a 03 	lds	r22, 0x032A
    3096:	6e 30       	cpi	r22, 0x0E	; 14
    3098:	09 f4       	brne	.+2      	; 0x309c <__vector_29+0x25c>
    309a:	1f c1       	rjmp	.+574    	; 0x32da <__vector_29+0x49a>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    309c:	86 2f       	mov	r24, r22
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	60 ff       	sbrs	r22, 0
    30a2:	f1 c0       	rjmp	.+482    	; 0x3286 <__vector_29+0x446>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    30a4:	60 31       	cpi	r22, 0x10	; 16
    30a6:	08 f4       	brcc	.+2      	; 0x30aa <__vector_29+0x26a>
    30a8:	0c c1       	rjmp	.+536    	; 0x32c2 <__vector_29+0x482>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    30aa:	20 91 42 05 	lds	r18, 0x0542
    30ae:	22 23       	and	r18, r18
    30b0:	09 f0       	breq	.+2      	; 0x30b4 <__vector_29+0x274>
    30b2:	d5 c0       	rjmp	.+426    	; 0x325e <__vector_29+0x41e>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    30b4:	40 97       	sbiw	r24, 0x10	; 16
    30b6:	95 95       	asr	r25
    30b8:	87 95       	ror	r24
    30ba:	21 e0       	ldi	r18, 0x01	; 1
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	02 c0       	rjmp	.+4      	; 0x30c4 <__vector_29+0x284>
    30c0:	22 0f       	add	r18, r18
    30c2:	33 1f       	adc	r19, r19
    30c4:	8a 95       	dec	r24
    30c6:	e2 f7       	brpl	.-8      	; 0x30c0 <__vector_29+0x280>
    30c8:	20 93 05 01 	sts	0x0105, r18
    30cc:	80 91 c0 03 	lds	r24, 0x03C0
    30d0:	0e cf       	rjmp	.-484    	; 0x2eee <__vector_29+0xae>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    30d2:	90 91 7b 00 	lds	r25, 0x007B
    30d6:	98 60       	ori	r25, 0x08	; 8
    30d8:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    30dc:	90 91 29 03 	lds	r25, 0x0329
    30e0:	98 5c       	subi	r25, 0xC8	; 200
    30e2:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    30e6:	82 30       	cpi	r24, 0x02	; 2
    30e8:	09 f0       	breq	.+2      	; 0x30ec <__vector_29+0x2ac>
    30ea:	13 cf       	rjmp	.-474    	; 0x2f12 <__vector_29+0xd2>

		if(hardwareRevision == HW_REV_3_0) {
    30ec:	20 91 42 05 	lds	r18, 0x0542
    30f0:	22 23       	and	r18, r18
    30f2:	51 f0       	breq	.+20     	; 0x3108 <__vector_29+0x2c8>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    30f4:	21 30       	cpi	r18, 0x01	; 1
    30f6:	19 f0       	breq	.+6      	; 0x30fe <__vector_29+0x2be>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    30f8:	22 30       	cpi	r18, 0x02	; 2
    30fa:	09 f0       	breq	.+2      	; 0x30fe <__vector_29+0x2be>
    30fc:	0a cf       	rjmp	.-492    	; 0x2f12 <__vector_29+0xd2>
			PORTJ = 0xFF;
    30fe:	8f ef       	ldi	r24, 0xFF	; 255
    3100:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    3104:	12 b8       	out	0x02, r1	; 2
    3106:	05 cf       	rjmp	.-502    	; 0x2f12 <__vector_29+0xd2>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    3108:	80 91 05 01 	lds	r24, 0x0105
    310c:	80 7f       	andi	r24, 0xF0	; 240
    310e:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    3112:	12 b8       	out	0x02, r1	; 2
    3114:	fe ce       	rjmp	.-516    	; 0x2f12 <__vector_29+0xd2>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3116:	81 30       	cpi	r24, 0x01	; 1
    3118:	09 f0       	breq	.+2      	; 0x311c <__vector_29+0x2dc>
    311a:	e9 ce       	rjmp	.-558    	; 0x2eee <__vector_29+0xae>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    311c:	80 91 2b 03 	lds	r24, 0x032B
    3120:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    3124:	80 91 2e 03 	lds	r24, 0x032E
    3128:	80 93 c2 03 	sts	0x03C2, r24
			adcSaveDataTo = SAVE_TO_PROX;
    312c:	10 92 bf 03 	sts	0x03BF, r1
			adcSamplingState = 2;
    3130:	82 e0       	ldi	r24, 0x02	; 2
    3132:	80 93 c0 03 	sts	0x03C0, r24
			break;
    3136:	db ce       	rjmp	.-586    	; 0x2eee <__vector_29+0xae>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3138:	81 30       	cpi	r24, 0x01	; 1
    313a:	09 f0       	breq	.+2      	; 0x313e <__vector_29+0x2fe>
    313c:	bd ce       	rjmp	.-646    	; 0x2eb8 <__vector_29+0x78>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    313e:	80 91 e1 03 	lds	r24, 0x03E1
    3142:	90 91 e2 03 	lds	r25, 0x03E2
    3146:	82 0f       	add	r24, r18
    3148:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    314a:	96 95       	lsr	r25
    314c:	87 95       	ror	r24
    314e:	90 93 e2 03 	sts	0x03E2, r25
    3152:	80 93 e1 03 	sts	0x03E1, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3156:	80 91 c0 03 	lds	r24, 0x03C0
    315a:	82 30       	cpi	r24, 0x02	; 2
    315c:	09 f0       	breq	.+2      	; 0x3160 <__vector_29+0x320>
    315e:	b1 ce       	rjmp	.-670    	; 0x2ec2 <__vector_29+0x82>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    3160:	80 91 2c 03 	lds	r24, 0x032C
    3164:	80 93 29 03 	sts	0x0329, r24
			rightChannelPhase = rightMotorPhase;
    3168:	80 91 2d 03 	lds	r24, 0x032D
    316c:	80 93 c1 03 	sts	0x03C1, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3170:	80 91 c2 03 	lds	r24, 0x03C2
    3174:	88 23       	and	r24, r24
    3176:	09 f0       	breq	.+2      	; 0x317a <__vector_29+0x33a>
    3178:	9b c0       	rjmp	.+310    	; 0x32b0 <__vector_29+0x470>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    317a:	83 e0       	ldi	r24, 0x03	; 3
    317c:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3180:	83 e0       	ldi	r24, 0x03	; 3
    3182:	80 93 c0 03 	sts	0x03C0, r24
			break;
    3186:	b3 ce       	rjmp	.-666    	; 0x2eee <__vector_29+0xae>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    3188:	80 91 0a 02 	lds	r24, 0x020A
    318c:	88 23       	and	r24, r24
    318e:	09 f4       	brne	.+2      	; 0x3192 <__vector_29+0x352>
    3190:	93 ce       	rjmp	.-730    	; 0x2eb8 <__vector_29+0x78>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    3192:	90 91 00 01 	lds	r25, 0x0100
    3196:	93 fd       	sbrc	r25, 3
    3198:	8f ce       	rjmp	.-738    	; 0x2eb8 <__vector_29+0x78>
    319a:	90 91 00 01 	lds	r25, 0x0100
    319e:	94 fd       	sbrc	r25, 4
    31a0:	8b ce       	rjmp	.-746    	; 0x2eb8 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    31a2:	48 2f       	mov	r20, r24
    31a4:	4f 5f       	subi	r20, 0xFF	; 255
    31a6:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    31aa:	45 30       	cpi	r20, 0x05	; 5
    31ac:	08 f4       	brcc	.+2      	; 0x31b0 <__vector_29+0x370>
    31ae:	84 ce       	rjmp	.-760    	; 0x2eb8 <__vector_29+0x78>
					left_vel_sum += value;
    31b0:	80 91 eb 03 	lds	r24, 0x03EB
    31b4:	90 91 ec 03 	lds	r25, 0x03EC
    31b8:	82 0f       	add	r24, r18
    31ba:	93 1f       	adc	r25, r19
    31bc:	90 93 ec 03 	sts	0x03EC, r25
    31c0:	80 93 eb 03 	sts	0x03EB, r24
					if(firstSampleLeft==8) {
    31c4:	48 30       	cpi	r20, 0x08	; 8
    31c6:	09 f0       	breq	.+2      	; 0x31ca <__vector_29+0x38a>
    31c8:	77 ce       	rjmp	.-786    	; 0x2eb8 <__vector_29+0x78>
						firstSampleLeft = 0;
    31ca:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	80 93 07 02 	sts	0x0207, r24
    31d4:	71 ce       	rjmp	.-798    	; 0x2eb8 <__vector_29+0x78>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    31d6:	80 91 2b 03 	lds	r24, 0x032B
    31da:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    31de:	80 91 2e 03 	lds	r24, 0x032E
    31e2:	80 93 c2 03 	sts	0x03C2, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    31e6:	80 91 c1 03 	lds	r24, 0x03C1
    31ea:	88 23       	and	r24, r24
    31ec:	09 f0       	breq	.+2      	; 0x31f0 <__vector_29+0x3b0>
    31ee:	4e c0       	rjmp	.+156    	; 0x328c <__vector_29+0x44c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    31f6:	84 e0       	ldi	r24, 0x04	; 4
    31f8:	80 93 c0 03 	sts	0x03C0, r24
			break;
    31fc:	78 ce       	rjmp	.-784    	; 0x2eee <__vector_29+0xae>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    31fe:	80 91 09 02 	lds	r24, 0x0209
    3202:	88 23       	and	r24, r24
    3204:	09 f4       	brne	.+2      	; 0x3208 <__vector_29+0x3c8>
    3206:	58 ce       	rjmp	.-848    	; 0x2eb8 <__vector_29+0x78>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    3208:	63 99       	sbic	0x0c, 3	; 12
    320a:	56 ce       	rjmp	.-852    	; 0x2eb8 <__vector_29+0x78>
    320c:	64 99       	sbic	0x0c, 4	; 12
    320e:	54 ce       	rjmp	.-856    	; 0x2eb8 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    3210:	48 2f       	mov	r20, r24
    3212:	4f 5f       	subi	r20, 0xFF	; 255
    3214:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    3218:	45 30       	cpi	r20, 0x05	; 5
    321a:	08 f4       	brcc	.+2      	; 0x321e <__vector_29+0x3de>
    321c:	4d ce       	rjmp	.-870    	; 0x2eb8 <__vector_29+0x78>
					right_vel_sum += value;
    321e:	80 91 ed 03 	lds	r24, 0x03ED
    3222:	90 91 ee 03 	lds	r25, 0x03EE
    3226:	82 0f       	add	r24, r18
    3228:	93 1f       	adc	r25, r19
    322a:	90 93 ee 03 	sts	0x03EE, r25
    322e:	80 93 ed 03 	sts	0x03ED, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    3232:	48 30       	cpi	r20, 0x08	; 8
    3234:	09 f0       	breq	.+2      	; 0x3238 <__vector_29+0x3f8>
    3236:	40 ce       	rjmp	.-896    	; 0x2eb8 <__vector_29+0x78>
						firstSampleRight = 0;
    3238:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	80 93 08 02 	sts	0x0208, r24
    3242:	3a ce       	rjmp	.-908    	; 0x2eb8 <__vector_29+0x78>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    3244:	80 91 df 03 	lds	r24, 0x03DF
    3248:	90 91 e0 03 	lds	r25, 0x03E0
    324c:	82 0f       	add	r24, r18
    324e:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    3250:	96 95       	lsr	r25
    3252:	87 95       	ror	r24
    3254:	90 93 e0 03 	sts	0x03E0, r25
    3258:	80 93 df 03 	sts	0x03DF, r24
			break;
    325c:	2d ce       	rjmp	.-934    	; 0x2eb8 <__vector_29+0x78>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    325e:	21 30       	cpi	r18, 0x01	; 1
    3260:	11 f0       	breq	.+4      	; 0x3266 <__vector_29+0x426>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    3262:	22 30       	cpi	r18, 0x02	; 2
    3264:	81 f4       	brne	.+32     	; 0x3286 <__vector_29+0x446>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    3266:	40 91 05 01 	lds	r20, 0x0105
    326a:	40 97       	sbiw	r24, 0x10	; 16
    326c:	95 95       	asr	r25
    326e:	87 95       	ror	r24
    3270:	21 e0       	ldi	r18, 0x01	; 1
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	02 c0       	rjmp	.+4      	; 0x327a <__vector_29+0x43a>
    3276:	22 0f       	add	r18, r18
    3278:	33 1f       	adc	r19, r19
    327a:	8a 95       	dec	r24
    327c:	e2 f7       	brpl	.-8      	; 0x3276 <__vector_29+0x436>
    327e:	20 95       	com	r18
    3280:	24 23       	and	r18, r20
    3282:	20 93 05 01 	sts	0x0105, r18
    3286:	80 91 c0 03 	lds	r24, 0x03C0
    328a:	31 ce       	rjmp	.-926    	; 0x2eee <__vector_29+0xae>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    328c:	81 30       	cpi	r24, 0x01	; 1
    328e:	d1 f1       	breq	.+116    	; 0x3304 <__vector_29+0x4c4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3290:	85 e0       	ldi	r24, 0x05	; 5
    3292:	80 93 bf 03 	sts	0x03BF, r24
    3296:	af cf       	rjmp	.-162    	; 0x31f6 <__vector_29+0x3b6>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3298:	91 30       	cpi	r25, 0x01	; 1
    329a:	09 f0       	breq	.+2      	; 0x329e <__vector_29+0x45e>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    329c:	85 e0       	ldi	r24, 0x05	; 5
    329e:	80 93 bf 03 	sts	0x03BF, r24
    32a2:	f5 ce       	rjmp	.-534    	; 0x308e <__vector_29+0x24e>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    32a4:	81 30       	cpi	r24, 0x01	; 1
    32a6:	b1 f1       	breq	.+108    	; 0x3314 <__vector_29+0x4d4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    32a8:	85 e0       	ldi	r24, 0x05	; 5
    32aa:	80 93 bf 03 	sts	0x03BF, r24
    32ae:	1c ce       	rjmp	.-968    	; 0x2ee8 <__vector_29+0xa8>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    32b0:	81 30       	cpi	r24, 0x01	; 1
    32b2:	61 f1       	breq	.+88     	; 0x330c <__vector_29+0x4cc>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    32b4:	85 e0       	ldi	r24, 0x05	; 5
    32b6:	80 93 bf 03 	sts	0x03BF, r24
    32ba:	62 cf       	rjmp	.-316    	; 0x3180 <__vector_29+0x340>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    32bc:	10 92 51 05 	sts	0x0551, r1
    32c0:	c4 ce       	rjmp	.-632    	; 0x304a <__vector_29+0x20a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    32c2:	66 95       	lsr	r22
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	02 c0       	rjmp	.+4      	; 0x32ce <__vector_29+0x48e>
    32ca:	88 0f       	add	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	6a 95       	dec	r22
    32d0:	e2 f7       	brpl	.-8      	; 0x32ca <__vector_29+0x48a>
    32d2:	82 b9       	out	0x02, r24	; 2
    32d4:	80 91 c0 03 	lds	r24, 0x03C0
    32d8:	0a ce       	rjmp	.-1004   	; 0x2eee <__vector_29+0xae>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    32da:	80 91 c5 03 	lds	r24, 0x03C5
    32de:	81 30       	cpi	r24, 0x01	; 1
    32e0:	a1 f1       	breq	.+104    	; 0x334a <__vector_29+0x50a>
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	04 ce       	rjmp	.-1016   	; 0x2eee <__vector_29+0xae>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    32e6:	80 91 c5 03 	lds	r24, 0x03C5
    32ea:	82 30       	cpi	r24, 0x02	; 2
    32ec:	09 f0       	breq	.+2      	; 0x32f0 <__vector_29+0x4b0>
    32ee:	2b ce       	rjmp	.-938    	; 0x2f46 <__vector_29+0x106>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    32f0:	30 93 c4 03 	sts	0x03C4, r19
    32f4:	20 93 c3 03 	sts	0x03C3, r18
				measBattery = 0;
    32f8:	10 92 c5 03 	sts	0x03C5, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    32fc:	46 98       	cbi	0x08, 6	; 8
    32fe:	4e e0       	ldi	r20, 0x0E	; 14
    3300:	50 e0       	ldi	r21, 0x00	; 0
    3302:	2a ce       	rjmp	.-940    	; 0x2f58 <__vector_29+0x118>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3304:	82 e0       	ldi	r24, 0x02	; 2
    3306:	80 93 bf 03 	sts	0x03BF, r24
    330a:	75 cf       	rjmp	.-278    	; 0x31f6 <__vector_29+0x3b6>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    330c:	84 e0       	ldi	r24, 0x04	; 4
    330e:	80 93 bf 03 	sts	0x03BF, r24
    3312:	36 cf       	rjmp	.-404    	; 0x3180 <__vector_29+0x340>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3314:	82 e0       	ldi	r24, 0x02	; 2
    3316:	80 93 bf 03 	sts	0x03BF, r24
    331a:	e6 cd       	rjmp	.-1076   	; 0x2ee8 <__vector_29+0xa8>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    331c:	11 82       	std	Z+1, r1	; 0x01
    331e:	10 82       	st	Z, r1
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	46 ce       	rjmp	.-884    	; 0x2fb2 <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    3326:	ac 01       	movw	r20, r24
    3328:	44 5c       	subi	r20, 0xC4	; 196
    332a:	5f 4f       	sbci	r21, 0xFF	; 255
    332c:	55 95       	asr	r21
    332e:	47 95       	ror	r20
    3330:	48 37       	cpi	r20, 0x78	; 120
    3332:	51 05       	cpc	r21, r1
    3334:	7c f4       	brge	.+30     	; 0x3354 <__vector_29+0x514>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    3336:	29 53       	subi	r18, 0x39	; 57
    3338:	3c 4f       	sbci	r19, 0xFC	; 252
    333a:	cc 97       	sbiw	r24, 0x3c	; 60
    333c:	95 95       	asr	r25
    333e:	87 95       	ror	r24
    3340:	cc 96       	adiw	r24, 0x3c	; 60
    3342:	f9 01       	movw	r30, r18
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	80 83       	st	Z, r24
    3348:	3f ce       	rjmp	.-898    	; 0x2fc8 <__vector_29+0x188>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    334a:	82 e0       	ldi	r24, 0x02	; 2
    334c:	80 93 c5 03 	sts	0x03C5, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    3350:	46 9a       	sbi	0x08, 6	; 8
    3352:	a4 ce       	rjmp	.-696    	; 0x309c <__vector_29+0x25c>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    3354:	ac 01       	movw	r20, r24
    3356:	44 5d       	subi	r20, 0xD4	; 212
    3358:	5e 4f       	sbci	r21, 0xFE	; 254
    335a:	55 95       	asr	r21
    335c:	47 95       	ror	r20
    335e:	55 95       	asr	r21
    3360:	47 95       	ror	r20
    3362:	44 3b       	cpi	r20, 0xB4	; 180
    3364:	51 05       	cpc	r21, r1
    3366:	74 f4       	brge	.+28     	; 0x3384 <__vector_29+0x544>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    3368:	29 53       	subi	r18, 0x39	; 57
    336a:	3c 4f       	sbci	r19, 0xFC	; 252
    336c:	84 5b       	subi	r24, 0xB4	; 180
    336e:	90 40       	sbci	r25, 0x00	; 0
    3370:	95 95       	asr	r25
    3372:	87 95       	ror	r24
    3374:	95 95       	asr	r25
    3376:	87 95       	ror	r24
    3378:	88 58       	subi	r24, 0x88	; 136
    337a:	9f 4f       	sbci	r25, 0xFF	; 255
    337c:	f9 01       	movw	r30, r18
    337e:	91 83       	std	Z+1, r25	; 0x01
    3380:	80 83       	st	Z, r24
    3382:	22 ce       	rjmp	.-956    	; 0x2fc8 <__vector_29+0x188>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    3384:	29 53       	subi	r18, 0x39	; 57
    3386:	3c 4f       	sbci	r19, 0xFC	; 252
    3388:	84 5a       	subi	r24, 0xA4	; 164
    338a:	91 40       	sbci	r25, 0x01	; 1
    338c:	95 95       	asr	r25
    338e:	87 95       	ror	r24
    3390:	95 95       	asr	r25
    3392:	87 95       	ror	r24
    3394:	95 95       	asr	r25
    3396:	87 95       	ror	r24
    3398:	8c 54       	subi	r24, 0x4C	; 76
    339a:	9f 4f       	sbci	r25, 0xFF	; 255
    339c:	f9 01       	movw	r30, r18
    339e:	91 83       	std	Z+1, r25	; 0x01
    33a0:	80 83       	st	Z, r24
    33a2:	12 ce       	rjmp	.-988    	; 0x2fc8 <__vector_29+0x188>

000033a4 <initMotors>:

#include "motors.h"

void initMotors() {
    33a4:	0f 93       	push	r16
    33a6:	1f 93       	push	r17
    33a8:	cf 93       	push	r28
    33aa:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    33ac:	e0 e9       	ldi	r30, 0x90	; 144
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	10 82       	st	Z, r1
	TCCR3B = 0;
    33b2:	41 e9       	ldi	r20, 0x91	; 145
    33b4:	50 e0       	ldi	r21, 0x00	; 0
    33b6:	da 01       	movw	r26, r20
    33b8:	1c 92       	st	X, r1
	TIMSK3 = 0;
    33ba:	21 e7       	ldi	r18, 0x71	; 113
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	e9 01       	movw	r28, r18
    33c0:	18 82       	st	Y, r1
	TCCR4A = 0;
    33c2:	a0 ea       	ldi	r26, 0xA0	; 160
    33c4:	b0 e0       	ldi	r27, 0x00	; 0
    33c6:	1c 92       	st	X, r1
	TCCR4B = 0;
    33c8:	81 ea       	ldi	r24, 0xA1	; 161
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	ec 01       	movw	r28, r24
    33ce:	18 82       	st	Y, r1
	TIMSK4 = 0;
    33d0:	02 e7       	ldi	r16, 0x72	; 114
    33d2:	10 e0       	ldi	r17, 0x00	; 0
    33d4:	e8 01       	movw	r28, r16
    33d6:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    33d8:	60 81       	ld	r22, Z
    33da:	63 68       	ori	r22, 0x83	; 131
    33dc:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    33de:	60 81       	ld	r22, Z
    33e0:	63 60       	ori	r22, 0x03	; 3
    33e2:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    33e4:	ea 01       	movw	r28, r20
    33e6:	68 81       	ld	r22, Y
    33e8:	6b 60       	ori	r22, 0x0B	; 11
    33ea:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    33ec:	40 91 f3 03 	lds	r20, 0x03F3
    33f0:	50 91 f4 03 	lds	r21, 0x03F4
    33f4:	50 93 99 00 	sts	0x0099, r21
    33f8:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    33fc:	10 92 9b 00 	sts	0x009B, r1
    3400:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    3404:	e9 01       	movw	r28, r18
    3406:	48 81       	ld	r20, Y
    3408:	41 60       	ori	r20, 0x01	; 1
    340a:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    340c:	20 81       	ld	r18, Z
    340e:	2f 75       	andi	r18, 0x5F	; 95
    3410:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3412:	2e b1       	in	r18, 0x0e	; 14
    3414:	27 7e       	andi	r18, 0xE7	; 231
    3416:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    3418:	2c 91       	ld	r18, X
    341a:	23 68       	ori	r18, 0x83	; 131
    341c:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    341e:	fc 01       	movw	r30, r24
    3420:	20 81       	ld	r18, Z
    3422:	2b 60       	ori	r18, 0x0B	; 11
    3424:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    3426:	80 91 f5 03 	lds	r24, 0x03F5
    342a:	90 91 f6 03 	lds	r25, 0x03F6
    342e:	90 93 a9 00 	sts	0x00A9, r25
    3432:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    3436:	10 92 ab 00 	sts	0x00AB, r1
    343a:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    343e:	e8 01       	movw	r28, r16
    3440:	88 81       	ld	r24, Y
    3442:	81 60       	ori	r24, 0x01	; 1
    3444:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3446:	8c 91       	ld	r24, X
    3448:	8f 75       	andi	r24, 0x5F	; 95
    344a:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    344c:	e2 e0       	ldi	r30, 0x02	; 2
    344e:	f1 e0       	ldi	r31, 0x01	; 1
    3450:	80 81       	ld	r24, Z
    3452:	87 7e       	andi	r24, 0xE7	; 231
    3454:	80 83       	st	Z, r24


}
    3456:	df 91       	pop	r29
    3458:	cf 91       	pop	r28
    345a:	1f 91       	pop	r17
    345c:	0f 91       	pop	r16
    345e:	08 95       	ret

00003460 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    3460:	80 91 07 02 	lds	r24, 0x0207
    3464:	88 23       	and	r24, r24
    3466:	09 f0       	breq	.+2      	; 0x346a <handleMotorsWithNoController+0xa>
    3468:	41 c0       	rjmp	.+130    	; 0x34ec <handleMotorsWithNoController+0x8c>
    346a:	60 91 f9 03 	lds	r22, 0x03F9
    346e:	70 91 fa 03 	lds	r23, 0x03FA
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    3472:	80 91 08 02 	lds	r24, 0x0208
    3476:	88 23       	and	r24, r24
    3478:	09 f0       	breq	.+2      	; 0x347c <handleMotorsWithNoController+0x1c>
    347a:	73 c0       	rjmp	.+230    	; 0x3562 <handleMotorsWithNoController+0x102>
    347c:	e0 91 f7 03 	lds	r30, 0x03F7
    3480:	f0 91 f8 03 	lds	r31, 0x03F8
			rightMotSteps -= (last_right_vel>>3);
		}
	}


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    3484:	f0 93 04 04 	sts	0x0404, r31
    3488:	e0 93 03 04 	sts	0x0403, r30
	pwm_left_working = pwm_left_desired;
    348c:	96 2f       	mov	r25, r22
    348e:	87 2f       	mov	r24, r23
    3490:	60 93 05 04 	sts	0x0405, r22
    3494:	70 93 06 04 	sts	0x0406, r23
	if(obstacleAvoidanceEnabled) {
    3498:	20 91 4f 05 	lds	r18, 0x054F
    349c:	22 23       	and	r18, r18
    349e:	09 f0       	breq	.+2      	; 0x34a2 <handleMotorsWithNoController+0x42>
    34a0:	a3 c0       	rjmp	.+326    	; 0x35e8 <handleMotorsWithNoController+0x188>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    34a2:	90 93 e9 03 	sts	0x03E9, r25
    34a6:	80 93 ea 03 	sts	0x03EA, r24
	pwm_right_desired_to_control = pwm_right_working;
    34aa:	f0 93 e8 03 	sts	0x03E8, r31
    34ae:	e0 93 e7 03 	sts	0x03E7, r30

	pwm_left = pwm_left_working;
    34b2:	90 93 f5 03 	sts	0x03F5, r25
    34b6:	80 93 f6 03 	sts	0x03F6, r24
	pwm_right = pwm_right_working;
    34ba:	f0 93 f4 03 	sts	0x03F4, r31
    34be:	e0 93 f3 03 	sts	0x03F3, r30

	if(pwm_right > 0) {
    34c2:	1e 16       	cp	r1, r30
    34c4:	1f 06       	cpc	r1, r31
    34c6:	0c f0       	brlt	.+2      	; 0x34ca <handleMotorsWithNoController+0x6a>
    34c8:	9e c0       	rjmp	.+316    	; 0x3606 <handleMotorsWithNoController+0x1a6>
		OCR3A = (unsigned int)pwm_right;
    34ca:	f0 93 99 00 	sts	0x0099, r31
    34ce:	e0 93 98 00 	sts	0x0098, r30
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    34d2:	80 91 f5 03 	lds	r24, 0x03F5
    34d6:	90 91 f6 03 	lds	r25, 0x03F6
    34da:	18 16       	cp	r1, r24
    34dc:	19 06       	cpc	r1, r25
    34de:	0c f0       	brlt	.+2      	; 0x34e2 <handleMotorsWithNoController+0x82>
    34e0:	77 c0       	rjmp	.+238    	; 0x35d0 <handleMotorsWithNoController+0x170>
		OCR4A = (unsigned int)pwm_left;
    34e2:	90 93 a9 00 	sts	0x00A9, r25
    34e6:	80 93 a8 00 	sts	0x00A8, r24
    34ea:	08 95       	ret

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
		last_left_vel = left_vel_sum>>2;
    34ec:	20 91 eb 03 	lds	r18, 0x03EB
    34f0:	30 91 ec 03 	lds	r19, 0x03EC
    34f4:	36 95       	lsr	r19
    34f6:	27 95       	ror	r18
    34f8:	36 95       	lsr	r19
    34fa:	27 95       	ror	r18
    34fc:	30 93 f0 03 	sts	0x03F0, r19
    3500:	20 93 ef 03 	sts	0x03EF, r18
		compute_left_vel = 0;
    3504:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    3508:	10 92 ec 03 	sts	0x03EC, r1
    350c:	10 92 eb 03 	sts	0x03EB, r1

		if(pwm_left_desired >= 0) {
    3510:	60 91 f9 03 	lds	r22, 0x03F9
    3514:	70 91 fa 03 	lds	r23, 0x03FA
    3518:	77 fd       	sbrc	r23, 7
    351a:	a0 c0       	rjmp	.+320    	; 0x365c <handleMotorsWithNoController+0x1fc>
			leftMotSteps += (last_left_vel>>3);
    351c:	35 95       	asr	r19
    351e:	27 95       	ror	r18
    3520:	35 95       	asr	r19
    3522:	27 95       	ror	r18
    3524:	35 95       	asr	r19
    3526:	27 95       	ror	r18
    3528:	44 27       	eor	r20, r20
    352a:	37 fd       	sbrc	r19, 7
    352c:	40 95       	com	r20
    352e:	54 2f       	mov	r21, r20
    3530:	80 91 db 03 	lds	r24, 0x03DB
    3534:	90 91 dc 03 	lds	r25, 0x03DC
    3538:	a0 91 dd 03 	lds	r26, 0x03DD
    353c:	b0 91 de 03 	lds	r27, 0x03DE
    3540:	82 0f       	add	r24, r18
    3542:	93 1f       	adc	r25, r19
    3544:	a4 1f       	adc	r26, r20
    3546:	b5 1f       	adc	r27, r21
    3548:	80 93 db 03 	sts	0x03DB, r24
    354c:	90 93 dc 03 	sts	0x03DC, r25
    3550:	a0 93 dd 03 	sts	0x03DD, r26
    3554:	b0 93 de 03 	sts	0x03DE, r27
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    3558:	80 91 08 02 	lds	r24, 0x0208
    355c:	88 23       	and	r24, r24
    355e:	09 f4       	brne	.+2      	; 0x3562 <handleMotorsWithNoController+0x102>
    3560:	8d cf       	rjmp	.-230    	; 0x347c <handleMotorsWithNoController+0x1c>
		last_right_vel = right_vel_sum>>2;
    3562:	20 91 ed 03 	lds	r18, 0x03ED
    3566:	30 91 ee 03 	lds	r19, 0x03EE
    356a:	36 95       	lsr	r19
    356c:	27 95       	ror	r18
    356e:	36 95       	lsr	r19
    3570:	27 95       	ror	r18
    3572:	30 93 f2 03 	sts	0x03F2, r19
    3576:	20 93 f1 03 	sts	0x03F1, r18
		compute_right_vel = 0;
    357a:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    357e:	10 92 ee 03 	sts	0x03EE, r1
    3582:	10 92 ed 03 	sts	0x03ED, r1

		if(pwm_right_desired >= 0) {
    3586:	e0 91 f7 03 	lds	r30, 0x03F7
    358a:	f0 91 f8 03 	lds	r31, 0x03F8
    358e:	f7 fd       	sbrc	r31, 7
    3590:	46 c0       	rjmp	.+140    	; 0x361e <handleMotorsWithNoController+0x1be>
			rightMotSteps += (last_right_vel>>3);
    3592:	35 95       	asr	r19
    3594:	27 95       	ror	r18
    3596:	35 95       	asr	r19
    3598:	27 95       	ror	r18
    359a:	35 95       	asr	r19
    359c:	27 95       	ror	r18
    359e:	44 27       	eor	r20, r20
    35a0:	37 fd       	sbrc	r19, 7
    35a2:	40 95       	com	r20
    35a4:	54 2f       	mov	r21, r20
    35a6:	80 91 d7 03 	lds	r24, 0x03D7
    35aa:	90 91 d8 03 	lds	r25, 0x03D8
    35ae:	a0 91 d9 03 	lds	r26, 0x03D9
    35b2:	b0 91 da 03 	lds	r27, 0x03DA
    35b6:	82 0f       	add	r24, r18
    35b8:	93 1f       	adc	r25, r19
    35ba:	a4 1f       	adc	r26, r20
    35bc:	b5 1f       	adc	r27, r21
    35be:	80 93 d7 03 	sts	0x03D7, r24
    35c2:	90 93 d8 03 	sts	0x03D8, r25
    35c6:	a0 93 d9 03 	sts	0x03D9, r26
    35ca:	b0 93 da 03 	sts	0x03DA, r27
    35ce:	5a cf       	rjmp	.-332    	; 0x3484 <handleMotorsWithNoController+0x24>
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	09 f0       	breq	.+2      	; 0x35d6 <handleMotorsWithNoController+0x176>
    35d4:	6a c0       	rjmp	.+212    	; 0x36aa <handleMotorsWithNoController+0x24a>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    35d6:	10 92 a9 00 	sts	0x00A9, r1
    35da:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    35de:	10 92 ab 00 	sts	0x00AB, r1
    35e2:	10 92 aa 00 	sts	0x00AA, r1
    35e6:	08 95       	ret


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	pwm_left_working = pwm_left_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    35e8:	85 e0       	ldi	r24, 0x05	; 5
    35ea:	94 e0       	ldi	r25, 0x04	; 4
    35ec:	63 e0       	ldi	r22, 0x03	; 3
    35ee:	74 e0       	ldi	r23, 0x04	; 4
    35f0:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <obstacleAvoidance>
    35f4:	90 91 05 04 	lds	r25, 0x0405
    35f8:	80 91 06 04 	lds	r24, 0x0406
    35fc:	e0 91 03 04 	lds	r30, 0x0403
    3600:	f0 91 04 04 	lds	r31, 0x0404
    3604:	4e cf       	rjmp	.-356    	; 0x34a2 <handleMotorsWithNoController+0x42>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    3606:	30 97       	sbiw	r30, 0x00	; 0
    3608:	09 f0       	breq	.+2      	; 0x360c <handleMotorsWithNoController+0x1ac>
    360a:	47 c0       	rjmp	.+142    	; 0x369a <handleMotorsWithNoController+0x23a>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    360c:	10 92 99 00 	sts	0x0099, r1
    3610:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    3614:	10 92 9b 00 	sts	0x009B, r1
    3618:	10 92 9a 00 	sts	0x009A, r1
    361c:	5a cf       	rjmp	.-332    	; 0x34d2 <handleMotorsWithNoController+0x72>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    361e:	35 95       	asr	r19
    3620:	27 95       	ror	r18
    3622:	35 95       	asr	r19
    3624:	27 95       	ror	r18
    3626:	35 95       	asr	r19
    3628:	27 95       	ror	r18
    362a:	44 27       	eor	r20, r20
    362c:	37 fd       	sbrc	r19, 7
    362e:	40 95       	com	r20
    3630:	54 2f       	mov	r21, r20
    3632:	80 91 d7 03 	lds	r24, 0x03D7
    3636:	90 91 d8 03 	lds	r25, 0x03D8
    363a:	a0 91 d9 03 	lds	r26, 0x03D9
    363e:	b0 91 da 03 	lds	r27, 0x03DA
    3642:	82 1b       	sub	r24, r18
    3644:	93 0b       	sbc	r25, r19
    3646:	a4 0b       	sbc	r26, r20
    3648:	b5 0b       	sbc	r27, r21
    364a:	80 93 d7 03 	sts	0x03D7, r24
    364e:	90 93 d8 03 	sts	0x03D8, r25
    3652:	a0 93 d9 03 	sts	0x03D9, r26
    3656:	b0 93 da 03 	sts	0x03DA, r27
    365a:	14 cf       	rjmp	.-472    	; 0x3484 <handleMotorsWithNoController+0x24>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    365c:	35 95       	asr	r19
    365e:	27 95       	ror	r18
    3660:	35 95       	asr	r19
    3662:	27 95       	ror	r18
    3664:	35 95       	asr	r19
    3666:	27 95       	ror	r18
    3668:	44 27       	eor	r20, r20
    366a:	37 fd       	sbrc	r19, 7
    366c:	40 95       	com	r20
    366e:	54 2f       	mov	r21, r20
    3670:	80 91 db 03 	lds	r24, 0x03DB
    3674:	90 91 dc 03 	lds	r25, 0x03DC
    3678:	a0 91 dd 03 	lds	r26, 0x03DD
    367c:	b0 91 de 03 	lds	r27, 0x03DE
    3680:	82 1b       	sub	r24, r18
    3682:	93 0b       	sbc	r25, r19
    3684:	a4 0b       	sbc	r26, r20
    3686:	b5 0b       	sbc	r27, r21
    3688:	80 93 db 03 	sts	0x03DB, r24
    368c:	90 93 dc 03 	sts	0x03DC, r25
    3690:	a0 93 dd 03 	sts	0x03DD, r26
    3694:	b0 93 de 03 	sts	0x03DE, r27
    3698:	ec ce       	rjmp	.-552    	; 0x3472 <handleMotorsWithNoController+0x12>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    369a:	f0 95       	com	r31
    369c:	e1 95       	neg	r30
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	f0 93 9b 00 	sts	0x009B, r31
    36a4:	e0 93 9a 00 	sts	0x009A, r30
    36a8:	14 cf       	rjmp	.-472    	; 0x34d2 <handleMotorsWithNoController+0x72>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    36aa:	90 95       	com	r25
    36ac:	81 95       	neg	r24
    36ae:	9f 4f       	sbci	r25, 0xFF	; 255
    36b0:	90 93 ab 00 	sts	0x00AB, r25
    36b4:	80 93 aa 00 	sts	0x00AA, r24
    36b8:	08 95       	ret

000036ba <handleMotorsWithSpeedController>:

}

void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
    36ba:	80 91 f9 03 	lds	r24, 0x03F9
    36be:	90 91 fa 03 	lds	r25, 0x03FA
    36c2:	90 93 06 04 	sts	0x0406, r25
    36c6:	80 93 05 04 	sts	0x0405, r24
	pwm_right_working = pwm_right_desired;
    36ca:	20 91 f7 03 	lds	r18, 0x03F7
    36ce:	30 91 f8 03 	lds	r19, 0x03F8
    36d2:	30 93 04 04 	sts	0x0404, r19
    36d6:	20 93 03 04 	sts	0x0403, r18
	if(obstacleAvoidanceEnabled) {
    36da:	40 91 4f 05 	lds	r20, 0x054F
    36de:	44 23       	and	r20, r20
    36e0:	09 f0       	breq	.+2      	; 0x36e4 <handleMotorsWithSpeedController+0x2a>
    36e2:	b8 c0       	rjmp	.+368    	; 0x3854 <handleMotorsWithSpeedController+0x19a>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    36e4:	90 93 ea 03 	sts	0x03EA, r25
    36e8:	80 93 e9 03 	sts	0x03E9, r24
	pwm_right_desired_to_control = pwm_right_working;
    36ec:	30 93 e8 03 	sts	0x03E8, r19
    36f0:	20 93 e7 03 	sts	0x03E7, r18

	if(compute_left_vel) {
    36f4:	20 91 07 02 	lds	r18, 0x0207
    36f8:	22 23       	and	r18, r18
    36fa:	09 f4       	brne	.+2      	; 0x36fe <handleMotorsWithSpeedController+0x44>
    36fc:	4b c0       	rjmp	.+150    	; 0x3794 <handleMotorsWithSpeedController+0xda>

		last_left_vel = left_vel_sum>>2;
    36fe:	20 91 eb 03 	lds	r18, 0x03EB
    3702:	30 91 ec 03 	lds	r19, 0x03EC
    3706:	36 95       	lsr	r19
    3708:	27 95       	ror	r18
    370a:	36 95       	lsr	r19
    370c:	27 95       	ror	r18
    370e:	30 93 f0 03 	sts	0x03F0, r19
    3712:	20 93 ef 03 	sts	0x03EF, r18
		compute_left_vel = 0;
    3716:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    371a:	10 92 ec 03 	sts	0x03EC, r1
    371e:	10 92 eb 03 	sts	0x03EB, r1

		if(pwm_left_desired_to_control >= 0) {
    3722:	97 fd       	sbrc	r25, 7
    3724:	ce c0       	rjmp	.+412    	; 0x38c2 <handleMotorsWithSpeedController+0x208>
			leftMotSteps += (last_left_vel>>3);
    3726:	35 95       	asr	r19
    3728:	27 95       	ror	r18
    372a:	35 95       	asr	r19
    372c:	27 95       	ror	r18
    372e:	35 95       	asr	r19
    3730:	27 95       	ror	r18
    3732:	44 27       	eor	r20, r20
    3734:	37 fd       	sbrc	r19, 7
    3736:	40 95       	com	r20
    3738:	54 2f       	mov	r21, r20
    373a:	80 91 db 03 	lds	r24, 0x03DB
    373e:	90 91 dc 03 	lds	r25, 0x03DC
    3742:	a0 91 dd 03 	lds	r26, 0x03DD
    3746:	b0 91 de 03 	lds	r27, 0x03DE
    374a:	82 0f       	add	r24, r18
    374c:	93 1f       	adc	r25, r19
    374e:	a4 1f       	adc	r26, r20
    3750:	b5 1f       	adc	r27, r21
    3752:	80 93 db 03 	sts	0x03DB, r24
    3756:	90 93 dc 03 	sts	0x03DC, r25
    375a:	a0 93 dd 03 	sts	0x03DD, r26
    375e:	b0 93 de 03 	sts	0x03DE, r27
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}

		if(robotPosition == HORIZONTAL_POS) {
    3762:	80 91 17 02 	lds	r24, 0x0217
    3766:	81 30       	cpi	r24, 0x01	; 1
    3768:	09 f4       	brne	.+2      	; 0x376c <handleMotorsWithSpeedController+0xb2>
    376a:	ce c0       	rjmp	.+412    	; 0x3908 <handleMotorsWithSpeedController+0x24e>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    376c:	85 e0       	ldi	r24, 0x05	; 5
    376e:	94 e0       	ldi	r25, 0x04	; 4
    3770:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    3774:	80 91 05 04 	lds	r24, 0x0405
    3778:	90 91 06 04 	lds	r25, 0x0406
    377c:	90 93 f6 03 	sts	0x03F6, r25
    3780:	80 93 f5 03 	sts	0x03F5, r24

		if(pwm_left > 0) {
    3784:	18 16       	cp	r1, r24
    3786:	19 06       	cpc	r1, r25
    3788:	0c f0       	brlt	.+2      	; 0x378c <handleMotorsWithSpeedController+0xd2>
    378a:	c3 c0       	rjmp	.+390    	; 0x3912 <handleMotorsWithSpeedController+0x258>
			OCR4A = (unsigned int)pwm_left;
    378c:	90 93 a9 00 	sts	0x00A9, r25
    3790:	80 93 a8 00 	sts	0x00A8, r24
			OCR4B = 0;
		}

	}

	if(compute_right_vel) {
    3794:	80 91 08 02 	lds	r24, 0x0208
    3798:	88 23       	and	r24, r24
    379a:	09 f4       	brne	.+2      	; 0x379e <handleMotorsWithSpeedController+0xe4>
    379c:	5a c0       	rjmp	.+180    	; 0x3852 <handleMotorsWithSpeedController+0x198>

		last_right_vel = right_vel_sum>>2;
    379e:	20 91 ed 03 	lds	r18, 0x03ED
    37a2:	30 91 ee 03 	lds	r19, 0x03EE
    37a6:	36 95       	lsr	r19
    37a8:	27 95       	ror	r18
    37aa:	36 95       	lsr	r19
    37ac:	27 95       	ror	r18
    37ae:	30 93 f2 03 	sts	0x03F2, r19
    37b2:	20 93 f1 03 	sts	0x03F1, r18
		compute_right_vel = 0;
    37b6:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    37ba:	10 92 ee 03 	sts	0x03EE, r1
    37be:	10 92 ed 03 	sts	0x03ED, r1

		if(pwm_right_desired_to_control >= 0) {
    37c2:	80 91 e7 03 	lds	r24, 0x03E7
    37c6:	90 91 e8 03 	lds	r25, 0x03E8
    37ca:	97 fd       	sbrc	r25, 7
    37cc:	52 c0       	rjmp	.+164    	; 0x3872 <handleMotorsWithSpeedController+0x1b8>
			rightMotSteps += (last_right_vel>>3);
    37ce:	35 95       	asr	r19
    37d0:	27 95       	ror	r18
    37d2:	35 95       	asr	r19
    37d4:	27 95       	ror	r18
    37d6:	35 95       	asr	r19
    37d8:	27 95       	ror	r18
    37da:	44 27       	eor	r20, r20
    37dc:	37 fd       	sbrc	r19, 7
    37de:	40 95       	com	r20
    37e0:	54 2f       	mov	r21, r20
    37e2:	80 91 d7 03 	lds	r24, 0x03D7
    37e6:	90 91 d8 03 	lds	r25, 0x03D8
    37ea:	a0 91 d9 03 	lds	r26, 0x03D9
    37ee:	b0 91 da 03 	lds	r27, 0x03DA
    37f2:	82 0f       	add	r24, r18
    37f4:	93 1f       	adc	r25, r19
    37f6:	a4 1f       	adc	r26, r20
    37f8:	b5 1f       	adc	r27, r21
    37fa:	80 93 d7 03 	sts	0x03D7, r24
    37fe:	90 93 d8 03 	sts	0x03D8, r25
    3802:	a0 93 d9 03 	sts	0x03D9, r26
    3806:	b0 93 da 03 	sts	0x03DA, r27
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}

		if(robotPosition == HORIZONTAL_POS) {
    380a:	80 91 17 02 	lds	r24, 0x0217
    380e:	81 30       	cpi	r24, 0x01	; 1
    3810:	09 f4       	brne	.+2      	; 0x3814 <handleMotorsWithSpeedController+0x15a>
    3812:	52 c0       	rjmp	.+164    	; 0x38b8 <handleMotorsWithSpeedController+0x1fe>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    3814:	83 e0       	ldi	r24, 0x03	; 3
    3816:	94 e0       	ldi	r25, 0x04	; 4
    3818:	0e 94 10 11 	call	0x2220	; 0x2220 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    381c:	80 91 03 04 	lds	r24, 0x0403
    3820:	90 91 04 04 	lds	r25, 0x0404
    3824:	90 93 f4 03 	sts	0x03F4, r25
    3828:	80 93 f3 03 	sts	0x03F3, r24

		if(pwm_right > 0) {
    382c:	18 16       	cp	r1, r24
    382e:	19 06       	cpc	r1, r25
    3830:	2c f4       	brge	.+10     	; 0x383c <handleMotorsWithSpeedController+0x182>
			OCR3A = (unsigned int)pwm_right;
    3832:	90 93 99 00 	sts	0x0099, r25
    3836:	80 93 98 00 	sts	0x0098, r24
    383a:	08 95       	ret
		} else if(pwm_right < 0) {
    383c:	00 97       	sbiw	r24, 0x00	; 0
    383e:	09 f0       	breq	.+2      	; 0x3842 <handleMotorsWithSpeedController+0x188>
    3840:	73 c0       	rjmp	.+230    	; 0x3928 <handleMotorsWithSpeedController+0x26e>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    3842:	10 92 99 00 	sts	0x0099, r1
    3846:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    384a:	10 92 9b 00 	sts	0x009B, r1
    384e:	10 92 9a 00 	sts	0x009A, r1
    3852:	08 95       	ret
void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
	pwm_right_working = pwm_right_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    3854:	85 e0       	ldi	r24, 0x05	; 5
    3856:	94 e0       	ldi	r25, 0x04	; 4
    3858:	63 e0       	ldi	r22, 0x03	; 3
    385a:	74 e0       	ldi	r23, 0x04	; 4
    385c:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <obstacleAvoidance>
    3860:	80 91 05 04 	lds	r24, 0x0405
    3864:	90 91 06 04 	lds	r25, 0x0406
    3868:	20 91 03 04 	lds	r18, 0x0403
    386c:	30 91 04 04 	lds	r19, 0x0404
    3870:	39 cf       	rjmp	.-398    	; 0x36e4 <handleMotorsWithSpeedController+0x2a>
		right_vel_sum = 0;

		if(pwm_right_desired_to_control >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    3872:	35 95       	asr	r19
    3874:	27 95       	ror	r18
    3876:	35 95       	asr	r19
    3878:	27 95       	ror	r18
    387a:	35 95       	asr	r19
    387c:	27 95       	ror	r18
    387e:	44 27       	eor	r20, r20
    3880:	37 fd       	sbrc	r19, 7
    3882:	40 95       	com	r20
    3884:	54 2f       	mov	r21, r20
    3886:	80 91 d7 03 	lds	r24, 0x03D7
    388a:	90 91 d8 03 	lds	r25, 0x03D8
    388e:	a0 91 d9 03 	lds	r26, 0x03D9
    3892:	b0 91 da 03 	lds	r27, 0x03DA
    3896:	82 1b       	sub	r24, r18
    3898:	93 0b       	sbc	r25, r19
    389a:	a4 0b       	sbc	r26, r20
    389c:	b5 0b       	sbc	r27, r21
    389e:	80 93 d7 03 	sts	0x03D7, r24
    38a2:	90 93 d8 03 	sts	0x03D8, r25
    38a6:	a0 93 d9 03 	sts	0x03D9, r26
    38aa:	b0 93 da 03 	sts	0x03DA, r27
		}

		if(robotPosition == HORIZONTAL_POS) {
    38ae:	80 91 17 02 	lds	r24, 0x0217
    38b2:	81 30       	cpi	r24, 0x01	; 1
    38b4:	09 f0       	breq	.+2      	; 0x38b8 <handleMotorsWithSpeedController+0x1fe>
    38b6:	ae cf       	rjmp	.-164    	; 0x3814 <handleMotorsWithSpeedController+0x15a>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    38b8:	83 e0       	ldi	r24, 0x03	; 3
    38ba:	94 e0       	ldi	r25, 0x04	; 4
    38bc:	0e 94 55 12 	call	0x24aa	; 0x24aa <start_horizontal_speed_control_right>
    38c0:	ad cf       	rjmp	.-166    	; 0x381c <handleMotorsWithSpeedController+0x162>
		left_vel_sum = 0;

		if(pwm_left_desired_to_control >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    38c2:	35 95       	asr	r19
    38c4:	27 95       	ror	r18
    38c6:	35 95       	asr	r19
    38c8:	27 95       	ror	r18
    38ca:	35 95       	asr	r19
    38cc:	27 95       	ror	r18
    38ce:	44 27       	eor	r20, r20
    38d0:	37 fd       	sbrc	r19, 7
    38d2:	40 95       	com	r20
    38d4:	54 2f       	mov	r21, r20
    38d6:	80 91 db 03 	lds	r24, 0x03DB
    38da:	90 91 dc 03 	lds	r25, 0x03DC
    38de:	a0 91 dd 03 	lds	r26, 0x03DD
    38e2:	b0 91 de 03 	lds	r27, 0x03DE
    38e6:	82 1b       	sub	r24, r18
    38e8:	93 0b       	sbc	r25, r19
    38ea:	a4 0b       	sbc	r26, r20
    38ec:	b5 0b       	sbc	r27, r21
    38ee:	80 93 db 03 	sts	0x03DB, r24
    38f2:	90 93 dc 03 	sts	0x03DC, r25
    38f6:	a0 93 dd 03 	sts	0x03DD, r26
    38fa:	b0 93 de 03 	sts	0x03DE, r27
		}

		if(robotPosition == HORIZONTAL_POS) {
    38fe:	80 91 17 02 	lds	r24, 0x0217
    3902:	81 30       	cpi	r24, 0x01	; 1
    3904:	09 f0       	breq	.+2      	; 0x3908 <handleMotorsWithSpeedController+0x24e>
    3906:	32 cf       	rjmp	.-412    	; 0x376c <handleMotorsWithSpeedController+0xb2>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    3908:	85 e0       	ldi	r24, 0x05	; 5
    390a:	94 e0       	ldi	r25, 0x04	; 4
    390c:	0e 94 3a 13 	call	0x2674	; 0x2674 <start_horizontal_speed_control_left>
    3910:	31 cf       	rjmp	.-414    	; 0x3774 <handleMotorsWithSpeedController+0xba>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    3912:	00 97       	sbiw	r24, 0x00	; 0
    3914:	89 f4       	brne	.+34     	; 0x3938 <handleMotorsWithSpeedController+0x27e>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    3916:	10 92 a9 00 	sts	0x00A9, r1
    391a:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    391e:	10 92 ab 00 	sts	0x00AB, r1
    3922:	10 92 aa 00 	sts	0x00AA, r1
    3926:	36 cf       	rjmp	.-404    	; 0x3794 <handleMotorsWithSpeedController+0xda>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    3928:	90 95       	com	r25
    392a:	81 95       	neg	r24
    392c:	9f 4f       	sbci	r25, 0xFF	; 255
    392e:	90 93 9b 00 	sts	0x009B, r25
    3932:	80 93 9a 00 	sts	0x009A, r24
    3936:	08 95       	ret
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    3938:	90 95       	com	r25
    393a:	81 95       	neg	r24
    393c:	9f 4f       	sbci	r25, 0xFF	; 255
    393e:	90 93 ab 00 	sts	0x00AB, r25
    3942:	80 93 aa 00 	sts	0x00AA, r24
    3946:	26 cf       	rjmp	.-436    	; 0x3794 <handleMotorsWithSpeedController+0xda>

00003948 <setLeftSpeed>:

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    3948:	28 2f       	mov	r18, r24
    394a:	33 27       	eor	r19, r19
    394c:	27 fd       	sbrc	r18, 7
    394e:	30 95       	com	r19
    3950:	37 fd       	sbrc	r19, 7
    3952:	30 c0       	rjmp	.+96     	; 0x39b4 <setLeftSpeed+0x6c>
    3954:	30 93 08 04 	sts	0x0408, r19
    3958:	20 93 07 04 	sts	0x0407, r18

    if(vel >= 0) {
    395c:	87 fd       	sbrc	r24, 7
    395e:	1e c0       	rjmp	.+60     	; 0x399c <setLeftSpeed+0x54>
        pwm_left_desired = speedl<<2;
    3960:	22 0f       	add	r18, r18
    3962:	33 1f       	adc	r19, r19
    3964:	22 0f       	add	r18, r18
    3966:	33 1f       	adc	r19, r19
    3968:	30 93 fa 03 	sts	0x03FA, r19
    396c:	20 93 f9 03 	sts	0x03F9, r18
    } else {
        pwm_left_desired = -(speedl<<2);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    3970:	82 e0       	ldi	r24, 0x02	; 2
    3972:	21 30       	cpi	r18, 0x01	; 1
    3974:	38 07       	cpc	r19, r24
    3976:	3c f0       	brlt	.+14     	; 0x3986 <setLeftSpeed+0x3e>
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	92 e0       	ldi	r25, 0x02	; 2
    397c:	90 93 fa 03 	sts	0x03FA, r25
    3980:	80 93 f9 03 	sts	0x03F9, r24
    3984:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    3986:	8e ef       	ldi	r24, 0xFE	; 254
    3988:	20 30       	cpi	r18, 0x00	; 0
    398a:	38 07       	cpc	r19, r24
    398c:	34 f4       	brge	.+12     	; 0x399a <setLeftSpeed+0x52>
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	9e ef       	ldi	r25, 0xFE	; 254
    3992:	90 93 fa 03 	sts	0x03FA, r25
    3996:	80 93 f9 03 	sts	0x03F9, r24
    399a:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl<<2;
    } else {
        pwm_left_desired = -(speedl<<2);
    399c:	22 0f       	add	r18, r18
    399e:	33 1f       	adc	r19, r19
    39a0:	22 0f       	add	r18, r18
    39a2:	33 1f       	adc	r19, r19
    39a4:	30 95       	com	r19
    39a6:	21 95       	neg	r18
    39a8:	3f 4f       	sbci	r19, 0xFF	; 255
    39aa:	30 93 fa 03 	sts	0x03FA, r19
    39ae:	20 93 f9 03 	sts	0x03F9, r18
    39b2:	de cf       	rjmp	.-68     	; 0x3970 <setLeftSpeed+0x28>

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    39b4:	30 95       	com	r19
    39b6:	21 95       	neg	r18
    39b8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ba:	cc cf       	rjmp	.-104    	; 0x3954 <setLeftSpeed+0xc>

000039bc <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    39bc:	28 2f       	mov	r18, r24
    39be:	33 27       	eor	r19, r19
    39c0:	27 fd       	sbrc	r18, 7
    39c2:	30 95       	com	r19
    39c4:	37 fd       	sbrc	r19, 7
    39c6:	30 c0       	rjmp	.+96     	; 0x3a28 <setRightSpeed+0x6c>
    39c8:	30 93 0a 04 	sts	0x040A, r19
    39cc:	20 93 09 04 	sts	0x0409, r18

    if(vel >= 0) {
    39d0:	87 fd       	sbrc	r24, 7
    39d2:	1e c0       	rjmp	.+60     	; 0x3a10 <setRightSpeed+0x54>
        pwm_right_desired = speedr<<2;
    39d4:	22 0f       	add	r18, r18
    39d6:	33 1f       	adc	r19, r19
    39d8:	22 0f       	add	r18, r18
    39da:	33 1f       	adc	r19, r19
    39dc:	30 93 f8 03 	sts	0x03F8, r19
    39e0:	20 93 f7 03 	sts	0x03F7, r18
    } else {
        pwm_right_desired = -(speedr<<2);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    39e4:	82 e0       	ldi	r24, 0x02	; 2
    39e6:	21 30       	cpi	r18, 0x01	; 1
    39e8:	38 07       	cpc	r19, r24
    39ea:	3c f0       	brlt	.+14     	; 0x39fa <setRightSpeed+0x3e>
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	92 e0       	ldi	r25, 0x02	; 2
    39f0:	90 93 f8 03 	sts	0x03F8, r25
    39f4:	80 93 f7 03 	sts	0x03F7, r24
    39f8:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    39fa:	8e ef       	ldi	r24, 0xFE	; 254
    39fc:	20 30       	cpi	r18, 0x00	; 0
    39fe:	38 07       	cpc	r19, r24
    3a00:	34 f4       	brge	.+12     	; 0x3a0e <setRightSpeed+0x52>
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	9e ef       	ldi	r25, 0xFE	; 254
    3a06:	90 93 f8 03 	sts	0x03F8, r25
    3a0a:	80 93 f7 03 	sts	0x03F7, r24
    3a0e:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr<<2;
    } else {
        pwm_right_desired = -(speedr<<2);
    3a10:	22 0f       	add	r18, r18
    3a12:	33 1f       	adc	r19, r19
    3a14:	22 0f       	add	r18, r18
    3a16:	33 1f       	adc	r19, r19
    3a18:	30 95       	com	r19
    3a1a:	21 95       	neg	r18
    3a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1e:	30 93 f8 03 	sts	0x03F8, r19
    3a22:	20 93 f7 03 	sts	0x03F7, r18
    3a26:	de cf       	rjmp	.-68     	; 0x39e4 <setRightSpeed+0x28>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    3a28:	30 95       	com	r19
    3a2a:	21 95       	neg	r18
    3a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a2e:	cc cf       	rjmp	.-104    	; 0x39c8 <setRightSpeed+0xc>

00003a30 <__vector_45>:
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);

}

// Motor left
ISR(TIMER4_OVF_vect) {
    3a30:	1f 92       	push	r1
    3a32:	0f 92       	push	r0
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	0f 92       	push	r0
    3a38:	11 24       	eor	r1, r1
    3a3a:	8f 93       	push	r24
    3a3c:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    3a3e:	80 91 51 05 	lds	r24, 0x0551
    3a42:	88 23       	and	r24, r24
    3a44:	61 f0       	breq	.+24     	; 0x3a5e <__vector_45+0x2e>
		pwm_left = 0;
    3a46:	10 92 f6 03 	sts	0x03F6, r1
    3a4a:	10 92 f5 03 	sts	0x03F5, r1
		OCR4A = 0;
    3a4e:	10 92 a9 00 	sts	0x00A9, r1
    3a52:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    3a56:	10 92 ab 00 	sts	0x00AB, r1
    3a5a:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    3a5e:	10 92 e0 03 	sts	0x03E0, r1
    3a62:	10 92 df 03 	sts	0x03DF, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    3a66:	80 91 f5 03 	lds	r24, 0x03F5
    3a6a:	90 91 f6 03 	lds	r25, 0x03F6
    3a6e:	00 97       	sbiw	r24, 0x00	; 0
    3a70:	41 f5       	brne	.+80     	; 0x3ac2 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    3a72:	80 91 e9 03 	lds	r24, 0x03E9
    3a76:	90 91 ea 03 	lds	r25, 0x03EA
    3a7a:	97 fd       	sbrc	r25, 7
    3a7c:	69 c0       	rjmp	.+210    	; 0x3b50 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 14;
    3a84:	8e e0       	ldi	r24, 0x0E	; 14
    3a86:	80 93 2b 03 	sts	0x032B, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3a90:	80 91 a0 00 	lds	r24, 0x00A0
    3a94:	8f 75       	andi	r24, 0x5F	; 95
    3a96:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3a9a:	80 91 02 01 	lds	r24, 0x0102
    3a9e:	87 7e       	andi	r24, 0xE7	; 231
    3aa0:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    3aa4:	80 91 72 00 	lds	r24, 0x0072
    3aa8:	89 7f       	andi	r24, 0xF9	; 249
    3aaa:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    3aae:	89 b3       	in	r24, 0x19	; 25
    3ab0:	86 60       	ori	r24, 0x06	; 6
    3ab2:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    3ab4:	9f 91       	pop	r25
    3ab6:	8f 91       	pop	r24
    3ab8:	0f 90       	pop	r0
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	0f 90       	pop	r0
    3abe:	1f 90       	pop	r1
    3ac0:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    3ac2:	18 16       	cp	r1, r24
    3ac4:	19 06       	cpc	r1, r25
    3ac6:	2c f5       	brge	.+74     	; 0x3b12 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    3ac8:	10 92 2e 03 	sts	0x032E, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    3acc:	8f e0       	ldi	r24, 0x0F	; 15
    3ace:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    3ad2:	80 91 a0 00 	lds	r24, 0x00A0
    3ad6:	8f 7d       	andi	r24, 0xDF	; 223
    3ad8:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    3adc:	80 91 72 00 	lds	r24, 0x0072
    3ae0:	8b 7f       	andi	r24, 0xFB	; 251
    3ae2:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    3ae6:	80 91 02 01 	lds	r24, 0x0102
    3aea:	8f 7e       	andi	r24, 0xEF	; 239
    3aec:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    3af0:	80 91 a0 00 	lds	r24, 0x00A0
    3af4:	80 68       	ori	r24, 0x80	; 128
    3af6:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    3afa:	80 91 72 00 	lds	r24, 0x0072
    3afe:	82 60       	ori	r24, 0x02	; 2
    3b00:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    3b04:	9f 91       	pop	r25
    3b06:	8f 91       	pop	r24
    3b08:	0f 90       	pop	r0
    3b0a:	0f be       	out	0x3f, r0	; 63
    3b0c:	0f 90       	pop	r0
    3b0e:	1f 90       	pop	r1
    3b10:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    3b12:	10 92 2e 03 	sts	0x032E, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    3b16:	8e e0       	ldi	r24, 0x0E	; 14
    3b18:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    3b1c:	80 91 a0 00 	lds	r24, 0x00A0
    3b20:	8f 77       	andi	r24, 0x7F	; 127
    3b22:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    3b26:	80 91 72 00 	lds	r24, 0x0072
    3b2a:	8d 7f       	andi	r24, 0xFD	; 253
    3b2c:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    3b30:	80 91 02 01 	lds	r24, 0x0102
    3b34:	87 7f       	andi	r24, 0xF7	; 247
    3b36:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    3b3a:	80 91 a0 00 	lds	r24, 0x00A0
    3b3e:	80 62       	ori	r24, 0x20	; 32
    3b40:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    3b44:	80 91 72 00 	lds	r24, 0x0072
    3b48:	84 60       	ori	r24, 0x04	; 4
    3b4a:	80 93 72 00 	sts	0x0072, r24
    3b4e:	b2 cf       	rjmp	.-156    	; 0x3ab4 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 15;
    3b56:	8f e0       	ldi	r24, 0x0F	; 15
    3b58:	80 93 2b 03 	sts	0x032B, r24
    3b5c:	96 cf       	rjmp	.-212    	; 0x3a8a <__vector_45+0x5a>

00003b5e <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    3b5e:	1f 92       	push	r1
    3b60:	0f 92       	push	r0
    3b62:	0f b6       	in	r0, 0x3f	; 63
    3b64:	0f 92       	push	r0
    3b66:	11 24       	eor	r1, r1
    3b68:	8f 93       	push	r24
    3b6a:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	80 93 2e 03 	sts	0x032E, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    3b72:	9e e0       	ldi	r25, 0x0E	; 14
    3b74:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    3b78:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    3b7c:	9f 91       	pop	r25
    3b7e:	8f 91       	pop	r24
    3b80:	0f 90       	pop	r0
    3b82:	0f be       	out	0x3f, r0	; 63
    3b84:	0f 90       	pop	r0
    3b86:	1f 90       	pop	r1
    3b88:	18 95       	reti

00003b8a <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    3b8a:	1f 92       	push	r1
    3b8c:	0f 92       	push	r0
    3b8e:	0f b6       	in	r0, 0x3f	; 63
    3b90:	0f 92       	push	r0
    3b92:	11 24       	eor	r1, r1
    3b94:	8f 93       	push	r24
    3b96:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	80 93 2e 03 	sts	0x032E, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    3b9e:	9f e0       	ldi	r25, 0x0F	; 15
    3ba0:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    3ba4:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    3ba8:	9f 91       	pop	r25
    3baa:	8f 91       	pop	r24
    3bac:	0f 90       	pop	r0
    3bae:	0f be       	out	0x3f, r0	; 63
    3bb0:	0f 90       	pop	r0
    3bb2:	1f 90       	pop	r1
    3bb4:	18 95       	reti

00003bb6 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    3bb6:	1f 92       	push	r1
    3bb8:	0f 92       	push	r0
    3bba:	0f b6       	in	r0, 0x3f	; 63
    3bbc:	0f 92       	push	r0
    3bbe:	11 24       	eor	r1, r1
    3bc0:	8f 93       	push	r24
    3bc2:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    3bc4:	80 91 51 05 	lds	r24, 0x0551
    3bc8:	88 23       	and	r24, r24
    3bca:	61 f0       	breq	.+24     	; 0x3be4 <__vector_35+0x2e>
		pwm_right = 0;
    3bcc:	10 92 f4 03 	sts	0x03F4, r1
    3bd0:	10 92 f3 03 	sts	0x03F3, r1
		OCR3A = 0;
    3bd4:	10 92 99 00 	sts	0x0099, r1
    3bd8:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    3bdc:	10 92 9b 00 	sts	0x009B, r1
    3be0:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    3be4:	10 92 e2 03 	sts	0x03E2, r1
    3be8:	10 92 e1 03 	sts	0x03E1, r1


	if(pwm_right == 0) {
    3bec:	80 91 f3 03 	lds	r24, 0x03F3
    3bf0:	90 91 f4 03 	lds	r25, 0x03F4
    3bf4:	00 97       	sbiw	r24, 0x00	; 0
    3bf6:	31 f5       	brne	.+76     	; 0x3c44 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    3bf8:	80 91 e7 03 	lds	r24, 0x03E7
    3bfc:	90 91 e8 03 	lds	r25, 0x03E8
    3c00:	97 fd       	sbrc	r25, 7
    3c02:	5f c0       	rjmp	.+190    	; 0x3cc2 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	80 93 2d 03 	sts	0x032D, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    3c0a:	8c e0       	ldi	r24, 0x0C	; 12
    3c0c:	80 93 2c 03 	sts	0x032C, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3c16:	80 91 90 00 	lds	r24, 0x0090
    3c1a:	8f 75       	andi	r24, 0x5F	; 95
    3c1c:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3c20:	8e b1       	in	r24, 0x0e	; 14
    3c22:	87 7e       	andi	r24, 0xE7	; 231
    3c24:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    3c26:	80 91 71 00 	lds	r24, 0x0071
    3c2a:	89 7f       	andi	r24, 0xF9	; 249
    3c2c:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    3c30:	88 b3       	in	r24, 0x18	; 24
    3c32:	86 60       	ori	r24, 0x06	; 6
    3c34:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    3c36:	9f 91       	pop	r25
    3c38:	8f 91       	pop	r24
    3c3a:	0f 90       	pop	r0
    3c3c:	0f be       	out	0x3f, r0	; 63
    3c3e:	0f 90       	pop	r0
    3c40:	1f 90       	pop	r1
    3c42:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    3c44:	18 16       	cp	r1, r24
    3c46:	19 06       	cpc	r1, r25
    3c48:	0c f5       	brge	.+66     	; 0x3c8c <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    3c4a:	10 92 2d 03 	sts	0x032D, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    3c4e:	8d e0       	ldi	r24, 0x0D	; 13
    3c50:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    3c54:	80 91 90 00 	lds	r24, 0x0090
    3c58:	8f 7d       	andi	r24, 0xDF	; 223
    3c5a:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    3c5e:	80 91 71 00 	lds	r24, 0x0071
    3c62:	8b 7f       	andi	r24, 0xFB	; 251
    3c64:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    3c68:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    3c6a:	80 91 90 00 	lds	r24, 0x0090
    3c6e:	80 68       	ori	r24, 0x80	; 128
    3c70:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    3c74:	80 91 71 00 	lds	r24, 0x0071
    3c78:	82 60       	ori	r24, 0x02	; 2
    3c7a:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    3c7e:	9f 91       	pop	r25
    3c80:	8f 91       	pop	r24
    3c82:	0f 90       	pop	r0
    3c84:	0f be       	out	0x3f, r0	; 63
    3c86:	0f 90       	pop	r0
    3c88:	1f 90       	pop	r1
    3c8a:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    3c8c:	10 92 2d 03 	sts	0x032D, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    3c90:	8c e0       	ldi	r24, 0x0C	; 12
    3c92:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    3c96:	80 91 90 00 	lds	r24, 0x0090
    3c9a:	8f 77       	andi	r24, 0x7F	; 127
    3c9c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    3ca0:	80 91 71 00 	lds	r24, 0x0071
    3ca4:	8d 7f       	andi	r24, 0xFD	; 253
    3ca6:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    3caa:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    3cac:	80 91 90 00 	lds	r24, 0x0090
    3cb0:	80 62       	ori	r24, 0x20	; 32
    3cb2:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    3cb6:	80 91 71 00 	lds	r24, 0x0071
    3cba:	84 60       	ori	r24, 0x04	; 4
    3cbc:	80 93 71 00 	sts	0x0071, r24
    3cc0:	ba cf       	rjmp	.-140    	; 0x3c36 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	80 93 2d 03 	sts	0x032D, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    3cc8:	8d e0       	ldi	r24, 0x0D	; 13
    3cca:	80 93 2c 03 	sts	0x032C, r24
    3cce:	a0 cf       	rjmp	.-192    	; 0x3c10 <__vector_35+0x5a>

00003cd0 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    3cd0:	1f 92       	push	r1
    3cd2:	0f 92       	push	r0
    3cd4:	0f b6       	in	r0, 0x3f	; 63
    3cd6:	0f 92       	push	r0
    3cd8:	11 24       	eor	r1, r1
    3cda:	8f 93       	push	r24
    3cdc:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3cde:	81 e0       	ldi	r24, 0x01	; 1
    3ce0:	80 93 2d 03 	sts	0x032D, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    3ce4:	9c e0       	ldi	r25, 0x0C	; 12
    3ce6:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    3cea:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    3cee:	9f 91       	pop	r25
    3cf0:	8f 91       	pop	r24
    3cf2:	0f 90       	pop	r0
    3cf4:	0f be       	out	0x3f, r0	; 63
    3cf6:	0f 90       	pop	r0
    3cf8:	1f 90       	pop	r1
    3cfa:	18 95       	reti

00003cfc <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    3cfc:	1f 92       	push	r1
    3cfe:	0f 92       	push	r0
    3d00:	0f b6       	in	r0, 0x3f	; 63
    3d02:	0f 92       	push	r0
    3d04:	11 24       	eor	r1, r1
    3d06:	8f 93       	push	r24
    3d08:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	80 93 2d 03 	sts	0x032D, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    3d10:	9d e0       	ldi	r25, 0x0D	; 13
    3d12:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    3d16:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    3d1a:	9f 91       	pop	r25
    3d1c:	8f 91       	pop	r24
    3d1e:	0f 90       	pop	r0
    3d20:	0f be       	out	0x3f, r0	; 63
    3d22:	0f 90       	pop	r0
    3d24:	1f 90       	pop	r1
    3d26:	18 95       	reti

00003d28 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    3d28:	80 91 94 00 	lds	r24, 0x0094
    3d2c:	90 91 95 00 	lds	r25, 0x0095
    3d30:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <srand>

}
    3d34:	08 95       	ret

00003d36 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    3d36:	2f 92       	push	r2
    3d38:	3f 92       	push	r3
    3d3a:	4f 92       	push	r4
    3d3c:	5f 92       	push	r5
    3d3e:	6f 92       	push	r6
    3d40:	7f 92       	push	r7
    3d42:	8f 92       	push	r8
    3d44:	9f 92       	push	r9
    3d46:	af 92       	push	r10
    3d48:	bf 92       	push	r11
    3d4a:	cf 92       	push	r12
    3d4c:	df 92       	push	r13
    3d4e:	ef 92       	push	r14
    3d50:	ff 92       	push	r15
    3d52:	0f 93       	push	r16
    3d54:	1f 93       	push	r17
    3d56:	df 93       	push	r29
    3d58:	cf 93       	push	r28
    3d5a:	cd b7       	in	r28, 0x3d	; 61
    3d5c:	de b7       	in	r29, 0x3e	; 62
    3d5e:	28 97       	sbiw	r28, 0x08	; 8
    3d60:	0f b6       	in	r0, 0x3f	; 63
    3d62:	f8 94       	cli
    3d64:	de bf       	out	0x3e, r29	; 62
    3d66:	0f be       	out	0x3f, r0	; 63
    3d68:	cd bf       	out	0x3d, r28	; 61
    3d6a:	2c 01       	movw	r4, r24
    3d6c:	7a 83       	std	Y+2, r23	; 0x02
    3d6e:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    3d70:	fc 01       	movw	r30, r24
    3d72:	01 90       	ld	r0, Z+
    3d74:	f0 81       	ld	r31, Z
    3d76:	e0 2d       	mov	r30, r0
    3d78:	fc 83       	std	Y+4, r31	; 0x04
    3d7a:	eb 83       	std	Y+3, r30	; 0x03
    3d7c:	fb 01       	movw	r30, r22
    3d7e:	01 90       	ld	r0, Z+
    3d80:	f0 81       	ld	r31, Z
    3d82:	e0 2d       	mov	r30, r0
    3d84:	fe 83       	std	Y+6, r31	; 0x06
    3d86:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3d88:	60 91 c7 03 	lds	r22, 0x03C7
    3d8c:	70 91 c8 03 	lds	r23, 0x03C8
    3d90:	65 30       	cpi	r22, 0x05	; 5
    3d92:	71 05       	cpc	r23, r1
    3d94:	34 f4       	brge	.+12     	; 0x3da2 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    3d96:	10 92 c8 03 	sts	0x03C8, r1
    3d9a:	10 92 c7 03 	sts	0x03C7, r1
    3d9e:	60 e0       	ldi	r22, 0x00	; 0
    3da0:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3da2:	40 91 c9 03 	lds	r20, 0x03C9
    3da6:	50 91 ca 03 	lds	r21, 0x03CA
    3daa:	45 30       	cpi	r20, 0x05	; 5
    3dac:	51 05       	cpc	r21, r1
    3dae:	34 f4       	brge	.+12     	; 0x3dbc <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    3db0:	10 92 ca 03 	sts	0x03CA, r1
    3db4:	10 92 c9 03 	sts	0x03C9, r1
    3db8:	40 e0       	ldi	r20, 0x00	; 0
    3dba:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3dbc:	80 91 cb 03 	lds	r24, 0x03CB
    3dc0:	90 91 cc 03 	lds	r25, 0x03CC
    3dc4:	85 30       	cpi	r24, 0x05	; 5
    3dc6:	91 05       	cpc	r25, r1
    3dc8:	24 f4       	brge	.+8      	; 0x3dd2 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    3dca:	10 92 cc 03 	sts	0x03CC, r1
    3dce:	10 92 cb 03 	sts	0x03CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3dd2:	00 91 cd 03 	lds	r16, 0x03CD
    3dd6:	10 91 ce 03 	lds	r17, 0x03CE
    3dda:	05 30       	cpi	r16, 0x05	; 5
    3ddc:	11 05       	cpc	r17, r1
    3dde:	34 f4       	brge	.+12     	; 0x3dec <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    3de0:	10 92 ce 03 	sts	0x03CE, r1
    3de4:	10 92 cd 03 	sts	0x03CD, r1
    3de8:	00 e0       	ldi	r16, 0x00	; 0
    3dea:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3dec:	60 90 cf 03 	lds	r6, 0x03CF
    3df0:	70 90 d0 03 	lds	r7, 0x03D0
    3df4:	f5 e0       	ldi	r31, 0x05	; 5
    3df6:	6f 16       	cp	r6, r31
    3df8:	71 04       	cpc	r7, r1
    3dfa:	34 f4       	brge	.+12     	; 0x3e08 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    3dfc:	10 92 d0 03 	sts	0x03D0, r1
    3e00:	10 92 cf 03 	sts	0x03CF, r1
    3e04:	66 24       	eor	r6, r6
    3e06:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3e08:	20 91 d1 03 	lds	r18, 0x03D1
    3e0c:	30 91 d2 03 	lds	r19, 0x03D2
    3e10:	25 30       	cpi	r18, 0x05	; 5
    3e12:	31 05       	cpc	r19, r1
    3e14:	34 f4       	brge	.+12     	; 0x3e22 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    3e16:	10 92 d2 03 	sts	0x03D2, r1
    3e1a:	10 92 d1 03 	sts	0x03D1, r1
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3e22:	80 91 d3 03 	lds	r24, 0x03D3
    3e26:	90 91 d4 03 	lds	r25, 0x03D4
    3e2a:	85 30       	cpi	r24, 0x05	; 5
    3e2c:	91 05       	cpc	r25, r1
    3e2e:	24 f4       	brge	.+8      	; 0x3e38 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    3e30:	10 92 d4 03 	sts	0x03D4, r1
    3e34:	10 92 d3 03 	sts	0x03D3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3e38:	80 91 d5 03 	lds	r24, 0x03D5
    3e3c:	90 91 d6 03 	lds	r25, 0x03D6
    3e40:	85 30       	cpi	r24, 0x05	; 5
    3e42:	91 05       	cpc	r25, r1
    3e44:	34 f4       	brge	.+12     	; 0x3e52 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    3e46:	10 92 d6 03 	sts	0x03D6, r1
    3e4a:	10 92 d5 03 	sts	0x03D5, r1
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    3e52:	ee 24       	eor	r14, r14
    3e54:	ff 24       	eor	r15, r15
    3e56:	e6 1a       	sub	r14, r22
    3e58:	f7 0a       	sbc	r15, r23
    3e5a:	5a 01       	movw	r10, r20
    3e5c:	b5 94       	asr	r11
    3e5e:	a7 94       	ror	r10
    3e60:	15 95       	asr	r17
    3e62:	07 95       	ror	r16
    3e64:	69 01       	movw	r12, r18
    3e66:	d5 94       	asr	r13
    3e68:	c7 94       	ror	r12
    3e6a:	4c 01       	movw	r8, r24
    3e6c:	95 94       	asr	r9
    3e6e:	87 94       	ror	r8
    3e70:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <rand>
    3e74:	93 01       	movw	r18, r6
    3e76:	2e 51       	subi	r18, 0x1E	; 30
    3e78:	30 40       	sbci	r19, 0x00	; 0
    3e7a:	2e 0d       	add	r18, r14
    3e7c:	3f 1d       	adc	r19, r15
    3e7e:	20 0f       	add	r18, r16
    3e80:	31 1f       	adc	r19, r17
    3e82:	2c 0d       	add	r18, r12
    3e84:	3d 1d       	adc	r19, r13
    3e86:	2a 19       	sub	r18, r10
    3e88:	3b 09       	sbc	r19, r11
    3e8a:	28 19       	sub	r18, r8
    3e8c:	39 09       	sbc	r19, r9
    3e8e:	4c e3       	ldi	r20, 0x3C	; 60
    3e90:	24 2e       	mov	r2, r20
    3e92:	31 2c       	mov	r3, r1
    3e94:	b1 01       	movw	r22, r2
    3e96:	0e 94 49 2c 	call	0x5892	; 0x5892 <__divmodhi4>
    3e9a:	28 0f       	add	r18, r24
    3e9c:	39 1f       	adc	r19, r25
    3e9e:	38 87       	std	Y+8, r19	; 0x08
    3ea0:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    3ea2:	e0 90 c9 03 	lds	r14, 0x03C9
    3ea6:	f0 90 ca 03 	lds	r15, 0x03CA
    3eaa:	f5 94       	asr	r15
    3eac:	e7 94       	ror	r14
    3eae:	00 91 cb 03 	lds	r16, 0x03CB
    3eb2:	10 91 cc 03 	lds	r17, 0x03CC
    3eb6:	15 95       	asr	r17
    3eb8:	07 95       	ror	r16
    3eba:	15 95       	asr	r17
    3ebc:	07 95       	ror	r16
    3ebe:	c0 90 cd 03 	lds	r12, 0x03CD
    3ec2:	d0 90 ce 03 	lds	r13, 0x03CE
    3ec6:	d5 94       	asr	r13
    3ec8:	c7 94       	ror	r12
    3eca:	80 90 d1 03 	lds	r8, 0x03D1
    3ece:	90 90 d2 03 	lds	r9, 0x03D2
    3ed2:	95 94       	asr	r9
    3ed4:	87 94       	ror	r8
    3ed6:	60 90 d3 03 	lds	r6, 0x03D3
    3eda:	70 90 d4 03 	lds	r7, 0x03D4
    3ede:	75 94       	asr	r7
    3ee0:	67 94       	ror	r6
    3ee2:	75 94       	asr	r7
    3ee4:	67 94       	ror	r6
    3ee6:	a0 90 d5 03 	lds	r10, 0x03D5
    3eea:	b0 90 d6 03 	lds	r11, 0x03D6
    3eee:	b5 94       	asr	r11
    3ef0:	a7 94       	ror	r10
    3ef2:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <rand>
    3ef6:	97 01       	movw	r18, r14
    3ef8:	20 0f       	add	r18, r16
    3efa:	31 1f       	adc	r19, r17
    3efc:	2e 51       	subi	r18, 0x1E	; 30
    3efe:	30 40       	sbci	r19, 0x00	; 0
    3f00:	2c 0d       	add	r18, r12
    3f02:	3d 1d       	adc	r19, r13
    3f04:	2a 19       	sub	r18, r10
    3f06:	3b 09       	sbc	r19, r11
    3f08:	28 19       	sub	r18, r8
    3f0a:	39 09       	sbc	r19, r9
    3f0c:	26 19       	sub	r18, r6
    3f0e:	37 09       	sbc	r19, r7
    3f10:	b1 01       	movw	r22, r2
    3f12:	0e 94 49 2c 	call	0x5892	; 0x5892 <__divmodhi4>
    3f16:	28 0f       	add	r18, r24
    3f18:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    3f1a:	4b 81       	ldd	r20, Y+3	; 0x03
    3f1c:	5c 81       	ldd	r21, Y+4	; 0x04
    3f1e:	57 fd       	sbrc	r21, 7
    3f20:	97 c0       	rjmp	.+302    	; 0x4050 <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    3f22:	5a 01       	movw	r10, r20
    3f24:	cc 24       	eor	r12, r12
    3f26:	b7 fc       	sbrc	r11, 7
    3f28:	c0 94       	com	r12
    3f2a:	dc 2c       	mov	r13, r12
    3f2c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f2e:	98 85       	ldd	r25, Y+8	; 0x08
    3f30:	3c 01       	movw	r6, r24
    3f32:	88 24       	eor	r8, r8
    3f34:	77 fc       	sbrc	r7, 7
    3f36:	80 94       	com	r8
    3f38:	98 2c       	mov	r9, r8
    3f3a:	79 01       	movw	r14, r18
    3f3c:	00 27       	eor	r16, r16
    3f3e:	f7 fc       	sbrc	r15, 7
    3f40:	00 95       	com	r16
    3f42:	10 2f       	mov	r17, r16
    3f44:	c4 01       	movw	r24, r8
    3f46:	b3 01       	movw	r22, r6
    3f48:	6e 19       	sub	r22, r14
    3f4a:	7f 09       	sbc	r23, r15
    3f4c:	80 0b       	sbc	r24, r16
    3f4e:	91 0b       	sbc	r25, r17
    3f50:	a6 01       	movw	r20, r12
    3f52:	95 01       	movw	r18, r10
    3f54:	0e 94 16 2c 	call	0x582c	; 0x582c <__mulsi3>
    3f58:	f7 e0       	ldi	r31, 0x07	; 7
    3f5a:	95 95       	asr	r25
    3f5c:	87 95       	ror	r24
    3f5e:	77 95       	ror	r23
    3f60:	67 95       	ror	r22
    3f62:	fa 95       	dec	r31
    3f64:	d1 f7       	brne	.-12     	; 0x3f5a <obstacleAvoidance+0x224>
    3f66:	6a 0d       	add	r22, r10
    3f68:	7b 1d       	adc	r23, r11
    3f6a:	8c 1d       	adc	r24, r12
    3f6c:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    3f6e:	f2 01       	movw	r30, r4
    3f70:	71 83       	std	Z+1, r23	; 0x01
    3f72:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    3f74:	2d 81       	ldd	r18, Y+5	; 0x05
    3f76:	3e 81       	ldd	r19, Y+6	; 0x06
    3f78:	37 fd       	sbrc	r19, 7
    3f7a:	99 c0       	rjmp	.+306    	; 0x40ae <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    3f7c:	59 01       	movw	r10, r18
    3f7e:	cc 24       	eor	r12, r12
    3f80:	b7 fc       	sbrc	r11, 7
    3f82:	c0 94       	com	r12
    3f84:	dc 2c       	mov	r13, r12
    3f86:	c8 01       	movw	r24, r16
    3f88:	b7 01       	movw	r22, r14
    3f8a:	66 0d       	add	r22, r6
    3f8c:	77 1d       	adc	r23, r7
    3f8e:	88 1d       	adc	r24, r8
    3f90:	99 1d       	adc	r25, r9
    3f92:	a6 01       	movw	r20, r12
    3f94:	95 01       	movw	r18, r10
    3f96:	0e 94 16 2c 	call	0x582c	; 0x582c <__mulsi3>
    3f9a:	37 e0       	ldi	r19, 0x07	; 7
    3f9c:	95 95       	asr	r25
    3f9e:	87 95       	ror	r24
    3fa0:	77 95       	ror	r23
    3fa2:	67 95       	ror	r22
    3fa4:	3a 95       	dec	r19
    3fa6:	d1 f7       	brne	.-12     	; 0x3f9c <obstacleAvoidance+0x266>
    3fa8:	6a 0d       	add	r22, r10
    3faa:	7b 1d       	adc	r23, r11
    3fac:	8c 1d       	adc	r24, r12
    3fae:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    3fb0:	9b 01       	movw	r18, r22
    3fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    3fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    3fb6:	71 83       	std	Z+1, r23	; 0x01
    3fb8:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    3fba:	f2 e0       	ldi	r31, 0x02	; 2
    3fbc:	21 30       	cpi	r18, 0x01	; 1
    3fbe:	3f 07       	cpc	r19, r31
    3fc0:	44 f0       	brlt	.+16     	; 0x3fd2 <obstacleAvoidance+0x29c>
    3fc2:	80 e0       	ldi	r24, 0x00	; 0
    3fc4:	92 e0       	ldi	r25, 0x02	; 2
    3fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    3fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    3fca:	91 83       	std	Z+1, r25	; 0x01
    3fcc:	80 83       	st	Z, r24
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    3fd2:	f2 01       	movw	r30, r4
    3fd4:	80 81       	ld	r24, Z
    3fd6:	91 81       	ldd	r25, Z+1	; 0x01
    3fd8:	f2 e0       	ldi	r31, 0x02	; 2
    3fda:	81 30       	cpi	r24, 0x01	; 1
    3fdc:	9f 07       	cpc	r25, r31
    3fde:	4c f0       	brlt	.+18     	; 0x3ff2 <obstacleAvoidance+0x2bc>
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
    3fe2:	92 e0       	ldi	r25, 0x02	; 2
    3fe4:	f2 01       	movw	r30, r4
    3fe6:	91 83       	std	Z+1, r25	; 0x01
    3fe8:	80 83       	st	Z, r24
    3fea:	e9 81       	ldd	r30, Y+1	; 0x01
    3fec:	fa 81       	ldd	r31, Y+2	; 0x02
    3fee:	20 81       	ld	r18, Z
    3ff0:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    3ff2:	fe ef       	ldi	r31, 0xFE	; 254
    3ff4:	20 30       	cpi	r18, 0x00	; 0
    3ff6:	3f 07       	cpc	r19, r31
    3ff8:	4c f4       	brge	.+18     	; 0x400c <obstacleAvoidance+0x2d6>
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
    3ffc:	9e ef       	ldi	r25, 0xFE	; 254
    3ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    4000:	fa 81       	ldd	r31, Y+2	; 0x02
    4002:	91 83       	std	Z+1, r25	; 0x01
    4004:	80 83       	st	Z, r24
    4006:	f2 01       	movw	r30, r4
    4008:	80 81       	ld	r24, Z
    400a:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    400c:	fe ef       	ldi	r31, 0xFE	; 254
    400e:	80 30       	cpi	r24, 0x00	; 0
    4010:	9f 07       	cpc	r25, r31
    4012:	2c f4       	brge	.+10     	; 0x401e <obstacleAvoidance+0x2e8>
    4014:	80 e0       	ldi	r24, 0x00	; 0
    4016:	9e ef       	ldi	r25, 0xFE	; 254
    4018:	f2 01       	movw	r30, r4
    401a:	91 83       	std	Z+1, r25	; 0x01
    401c:	80 83       	st	Z, r24

}
    401e:	28 96       	adiw	r28, 0x08	; 8
    4020:	0f b6       	in	r0, 0x3f	; 63
    4022:	f8 94       	cli
    4024:	de bf       	out	0x3e, r29	; 62
    4026:	0f be       	out	0x3f, r0	; 63
    4028:	cd bf       	out	0x3d, r28	; 61
    402a:	cf 91       	pop	r28
    402c:	df 91       	pop	r29
    402e:	1f 91       	pop	r17
    4030:	0f 91       	pop	r16
    4032:	ff 90       	pop	r15
    4034:	ef 90       	pop	r14
    4036:	df 90       	pop	r13
    4038:	cf 90       	pop	r12
    403a:	bf 90       	pop	r11
    403c:	af 90       	pop	r10
    403e:	9f 90       	pop	r9
    4040:	8f 90       	pop	r8
    4042:	7f 90       	pop	r7
    4044:	6f 90       	pop	r6
    4046:	5f 90       	pop	r5
    4048:	4f 90       	pop	r4
    404a:	3f 90       	pop	r3
    404c:	2f 90       	pop	r2
    404e:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    4050:	4d 81       	ldd	r20, Y+5	; 0x05
    4052:	5e 81       	ldd	r21, Y+6	; 0x06
    4054:	5a 01       	movw	r10, r20
    4056:	cc 24       	eor	r12, r12
    4058:	b7 fc       	sbrc	r11, 7
    405a:	c0 94       	com	r12
    405c:	dc 2c       	mov	r13, r12
    405e:	8f 81       	ldd	r24, Y+7	; 0x07
    4060:	98 85       	ldd	r25, Y+8	; 0x08
    4062:	3c 01       	movw	r6, r24
    4064:	88 24       	eor	r8, r8
    4066:	77 fc       	sbrc	r7, 7
    4068:	80 94       	com	r8
    406a:	98 2c       	mov	r9, r8
    406c:	79 01       	movw	r14, r18
    406e:	00 27       	eor	r16, r16
    4070:	f7 fc       	sbrc	r15, 7
    4072:	00 95       	com	r16
    4074:	10 2f       	mov	r17, r16
    4076:	c8 01       	movw	r24, r16
    4078:	b7 01       	movw	r22, r14
    407a:	66 0d       	add	r22, r6
    407c:	77 1d       	adc	r23, r7
    407e:	88 1d       	adc	r24, r8
    4080:	99 1d       	adc	r25, r9
    4082:	a6 01       	movw	r20, r12
    4084:	95 01       	movw	r18, r10
    4086:	0e 94 16 2c 	call	0x582c	; 0x582c <__mulsi3>
    408a:	e7 e0       	ldi	r30, 0x07	; 7
    408c:	95 95       	asr	r25
    408e:	87 95       	ror	r24
    4090:	77 95       	ror	r23
    4092:	67 95       	ror	r22
    4094:	ea 95       	dec	r30
    4096:	d1 f7       	brne	.-12     	; 0x408c <obstacleAvoidance+0x356>
    4098:	26 1b       	sub	r18, r22
    409a:	37 0b       	sbc	r19, r23
    409c:	48 0b       	sbc	r20, r24
    409e:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    40a0:	f2 01       	movw	r30, r4
    40a2:	31 83       	std	Z+1, r19	; 0x01
    40a4:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    40a6:	2d 81       	ldd	r18, Y+5	; 0x05
    40a8:	3e 81       	ldd	r19, Y+6	; 0x06
    40aa:	37 ff       	sbrs	r19, 7
    40ac:	67 cf       	rjmp	.-306    	; 0x3f7c <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    40ae:	2b 81       	ldd	r18, Y+3	; 0x03
    40b0:	3c 81       	ldd	r19, Y+4	; 0x04
    40b2:	59 01       	movw	r10, r18
    40b4:	cc 24       	eor	r12, r12
    40b6:	b7 fc       	sbrc	r11, 7
    40b8:	c0 94       	com	r12
    40ba:	dc 2c       	mov	r13, r12
    40bc:	c4 01       	movw	r24, r8
    40be:	b3 01       	movw	r22, r6
    40c0:	6e 19       	sub	r22, r14
    40c2:	7f 09       	sbc	r23, r15
    40c4:	80 0b       	sbc	r24, r16
    40c6:	91 0b       	sbc	r25, r17
    40c8:	a6 01       	movw	r20, r12
    40ca:	95 01       	movw	r18, r10
    40cc:	0e 94 16 2c 	call	0x582c	; 0x582c <__mulsi3>
    40d0:	27 e0       	ldi	r18, 0x07	; 7
    40d2:	95 95       	asr	r25
    40d4:	87 95       	ror	r24
    40d6:	77 95       	ror	r23
    40d8:	67 95       	ror	r22
    40da:	2a 95       	dec	r18
    40dc:	d1 f7       	brne	.-12     	; 0x40d2 <obstacleAvoidance+0x39c>
    40de:	a6 1a       	sub	r10, r22
    40e0:	b7 0a       	sbc	r11, r23
    40e2:	c8 0a       	sbc	r12, r24
    40e4:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    40e6:	95 01       	movw	r18, r10
    40e8:	e9 81       	ldd	r30, Y+1	; 0x01
    40ea:	fa 81       	ldd	r31, Y+2	; 0x02
    40ec:	b1 82       	std	Z+1, r11	; 0x01
    40ee:	a0 82       	st	Z, r10
    40f0:	64 cf       	rjmp	.-312    	; 0x3fba <obstacleAvoidance+0x284>

000040f2 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    40f2:	80 91 6f 03 	lds	r24, 0x036F
    40f6:	90 91 70 03 	lds	r25, 0x0370
    40fa:	21 e0       	ldi	r18, 0x01	; 1
    40fc:	84 3a       	cpi	r24, 0xA4	; 164
    40fe:	92 07       	cpc	r25, r18
    4100:	d4 f0       	brlt	.+52     	; 0x4136 <cliffDetected+0x44>
    4102:	80 91 71 03 	lds	r24, 0x0371
    4106:	90 91 72 03 	lds	r25, 0x0372
    410a:	21 e0       	ldi	r18, 0x01	; 1
    410c:	84 3a       	cpi	r24, 0xA4	; 164
    410e:	92 07       	cpc	r25, r18
    4110:	94 f0       	brlt	.+36     	; 0x4136 <cliffDetected+0x44>
    4112:	80 91 73 03 	lds	r24, 0x0373
    4116:	90 91 74 03 	lds	r25, 0x0374
    411a:	21 e0       	ldi	r18, 0x01	; 1
    411c:	84 3a       	cpi	r24, 0xA4	; 164
    411e:	92 07       	cpc	r25, r18
    4120:	74 f0       	brlt	.+28     	; 0x413e <cliffDetected+0x4c>
		return 1;
    4122:	81 e0       	ldi	r24, 0x01	; 1
    4124:	20 91 75 03 	lds	r18, 0x0375
    4128:	30 91 76 03 	lds	r19, 0x0376
    412c:	91 e0       	ldi	r25, 0x01	; 1
    412e:	24 3a       	cpi	r18, 0xA4	; 164
    4130:	39 07       	cpc	r19, r25
    4132:	1c f4       	brge	.+6      	; 0x413a <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    4134:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	08 95       	ret
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	08 95       	ret
    413e:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    4140:	08 95       	ret

00004142 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	80 93 4f 05 	sts	0x054F, r24
}
    4148:	08 95       	ret

0000414a <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    414a:	10 92 4f 05 	sts	0x054F, r1
}
    414e:	08 95       	ret

00004150 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	80 93 50 05 	sts	0x0550, r24
}
    4156:	08 95       	ret

00004158 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    4158:	10 92 50 05 	sts	0x0550, r1
}
    415c:	08 95       	ret

0000415e <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    415e:	a0 e8       	ldi	r26, 0x80	; 128
    4160:	b0 e0       	ldi	r27, 0x00	; 0
    4162:	1c 92       	st	X, r1
	TCCR1B = 0;
    4164:	e1 e8       	ldi	r30, 0x81	; 129
    4166:	f0 e0       	ldi	r31, 0x00	; 0
    4168:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    416a:	8c 91       	ld	r24, X
    416c:	89 6a       	ori	r24, 0xA9	; 169
    416e:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    4170:	80 81       	ld	r24, Z
    4172:	89 60       	ori	r24, 0x09	; 9
    4174:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    4176:	80 91 0c 02 	lds	r24, 0x020C
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	90 93 89 00 	sts	0x0089, r25
    4180:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    4184:	80 91 0d 02 	lds	r24, 0x020D
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	90 93 8b 00 	sts	0x008B, r25
    418e:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    4192:	80 91 0e 02 	lds	r24, 0x020E
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	90 93 8d 00 	sts	0x008D, r25
    419c:	80 93 8c 00 	sts	0x008C, r24

}
    41a0:	08 95       	ret

000041a2 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	90 91 0f 04 	lds	r25, 0x040F
    41a8:	89 1b       	sub	r24, r25
    41aa:	80 93 0f 04 	sts	0x040F, r24

	if(blinkState) {
    41ae:	88 23       	and	r24, r24
    41b0:	39 f4       	brne	.+14     	; 0x41c0 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    41b2:	80 91 80 00 	lds	r24, 0x0080
    41b6:	87 7f       	andi	r24, 0xF7	; 247
    41b8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    41bc:	2f 98       	cbi	0x05, 7	; 5
    41be:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    41c0:	80 91 80 00 	lds	r24, 0x0080
    41c4:	88 60       	ori	r24, 0x08	; 8
    41c6:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    41ca:	8f ef       	ldi	r24, 0xFF	; 255
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	90 93 8d 00 	sts	0x008D, r25
    41d2:	80 93 8c 00 	sts	0x008C, r24
    41d6:	08 95       	ret

000041d8 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    41d8:	88 23       	and	r24, r24
    41da:	59 f0       	breq	.+22     	; 0x41f2 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    41dc:	90 91 80 00 	lds	r25, 0x0080
    41e0:	90 68       	ori	r25, 0x80	; 128
    41e2:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	90 93 89 00 	sts	0x0089, r25
    41ec:	80 93 88 00 	sts	0x0088, r24
    41f0:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    41f2:	80 91 80 00 	lds	r24, 0x0080
    41f6:	8f 77       	andi	r24, 0x7F	; 127
    41f8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    41fc:	2d 98       	cbi	0x05, 5	; 5
    41fe:	08 95       	ret

00004200 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    4200:	88 23       	and	r24, r24
    4202:	59 f0       	breq	.+22     	; 0x421a <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    4204:	90 91 80 00 	lds	r25, 0x0080
    4208:	90 62       	ori	r25, 0x20	; 32
    420a:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	90 93 8b 00 	sts	0x008B, r25
    4214:	80 93 8a 00 	sts	0x008A, r24
    4218:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    421a:	80 91 80 00 	lds	r24, 0x0080
    421e:	8f 7d       	andi	r24, 0xDF	; 223
    4220:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    4224:	2e 98       	cbi	0x05, 6	; 5
    4226:	08 95       	ret

00004228 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    4228:	88 23       	and	r24, r24
    422a:	59 f0       	breq	.+22     	; 0x4242 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    422c:	90 91 80 00 	lds	r25, 0x0080
    4230:	98 60       	ori	r25, 0x08	; 8
    4232:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	90 93 8d 00 	sts	0x008D, r25
    423c:	80 93 8c 00 	sts	0x008C, r24
    4240:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    4242:	80 91 80 00 	lds	r24, 0x0080
    4246:	87 7f       	andi	r24, 0xF7	; 247
    4248:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    424c:	2f 98       	cbi	0x05, 7	; 5
    424e:	08 95       	ret

00004250 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    4250:	83 30       	cpi	r24, 0x03	; 3
    4252:	09 f4       	brne	.+2      	; 0x4256 <setGreenLed+0x6>
    4254:	5a c0       	rjmp	.+180    	; 0x430a <setGreenLed+0xba>
    4256:	84 30       	cpi	r24, 0x04	; 4
    4258:	80 f0       	brcs	.+32     	; 0x427a <setGreenLed+0x2a>
    425a:	85 30       	cpi	r24, 0x05	; 5
    425c:	09 f4       	brne	.+2      	; 0x4260 <setGreenLed+0x10>
    425e:	41 c0       	rjmp	.+130    	; 0x42e2 <setGreenLed+0x92>
    4260:	85 30       	cpi	r24, 0x05	; 5
    4262:	d0 f4       	brcc	.+52     	; 0x4298 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    4264:	66 23       	and	r22, r22
    4266:	09 f4       	brne	.+2      	; 0x426a <setGreenLed+0x1a>
    4268:	68 c0       	rjmp	.+208    	; 0x433a <setGreenLed+0xea>
    426a:	80 91 0b 01 	lds	r24, 0x010B
    426e:	8f 7e       	andi	r24, 0xEF	; 239
    4270:	80 93 0b 01 	sts	0x010B, r24
    4274:	80 91 0b 01 	lds	r24, 0x010B
    4278:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    427a:	81 30       	cpi	r24, 0x01	; 1
    427c:	e1 f1       	breq	.+120    	; 0x42f6 <setGreenLed+0xa6>
    427e:	82 30       	cpi	r24, 0x02	; 2
    4280:	80 f0       	brcs	.+32     	; 0x42a2 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    4282:	66 23       	and	r22, r22
    4284:	09 f4       	brne	.+2      	; 0x4288 <setGreenLed+0x38>
    4286:	46 c0       	rjmp	.+140    	; 0x4314 <setGreenLed+0xc4>
    4288:	80 91 0b 01 	lds	r24, 0x010B
    428c:	8b 7f       	andi	r24, 0xFB	; 251
    428e:	80 93 0b 01 	sts	0x010B, r24
    4292:	80 91 0b 01 	lds	r24, 0x010B
    4296:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    4298:	86 30       	cpi	r24, 0x06	; 6
    429a:	c9 f0       	breq	.+50     	; 0x42ce <setGreenLed+0x7e>
    429c:	87 30       	cpi	r24, 0x07	; 7
    429e:	61 f0       	breq	.+24     	; 0x42b8 <setGreenLed+0x68>
    42a0:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    42a2:	66 23       	and	r22, r22
    42a4:	09 f4       	brne	.+2      	; 0x42a8 <setGreenLed+0x58>
    42a6:	51 c0       	rjmp	.+162    	; 0x434a <setGreenLed+0xfa>
    42a8:	80 91 0b 01 	lds	r24, 0x010B
    42ac:	8e 7f       	andi	r24, 0xFE	; 254
    42ae:	80 93 0b 01 	sts	0x010B, r24
    42b2:	80 91 0b 01 	lds	r24, 0x010B
    42b6:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    42b8:	66 23       	and	r22, r22
    42ba:	09 f0       	breq	.+2      	; 0x42be <setGreenLed+0x6e>
    42bc:	5e c0       	rjmp	.+188    	; 0x437a <setGreenLed+0x12a>
    42be:	80 91 0b 01 	lds	r24, 0x010B
    42c2:	80 68       	ori	r24, 0x80	; 128
    42c4:	80 93 0b 01 	sts	0x010B, r24
    42c8:	80 91 0b 01 	lds	r24, 0x010B
    42cc:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    42ce:	66 23       	and	r22, r22
    42d0:	49 f1       	breq	.+82     	; 0x4324 <setGreenLed+0xd4>
    42d2:	80 91 0b 01 	lds	r24, 0x010B
    42d6:	8f 7b       	andi	r24, 0xBF	; 191
    42d8:	80 93 0b 01 	sts	0x010B, r24
    42dc:	80 91 0b 01 	lds	r24, 0x010B
    42e0:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    42e2:	66 23       	and	r22, r22
    42e4:	d1 f1       	breq	.+116    	; 0x435a <setGreenLed+0x10a>
    42e6:	80 91 0b 01 	lds	r24, 0x010B
    42ea:	8f 7d       	andi	r24, 0xDF	; 223
    42ec:	80 93 0b 01 	sts	0x010B, r24
    42f0:	80 91 0b 01 	lds	r24, 0x010B
    42f4:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    42f6:	66 23       	and	r22, r22
    42f8:	c1 f1       	breq	.+112    	; 0x436a <setGreenLed+0x11a>
    42fa:	80 91 0b 01 	lds	r24, 0x010B
    42fe:	8d 7f       	andi	r24, 0xFD	; 253
    4300:	80 93 0b 01 	sts	0x010B, r24
    4304:	80 91 0b 01 	lds	r24, 0x010B
    4308:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    430a:	66 23       	and	r22, r22
    430c:	99 f0       	breq	.+38     	; 0x4334 <setGreenLed+0xe4>
    430e:	a3 98       	cbi	0x14, 3	; 20
    4310:	84 b3       	in	r24, 0x14	; 20
    4312:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    4314:	80 91 0b 01 	lds	r24, 0x010B
    4318:	84 60       	ori	r24, 0x04	; 4
    431a:	80 93 0b 01 	sts	0x010B, r24
    431e:	80 91 0b 01 	lds	r24, 0x010B
    4322:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    4324:	80 91 0b 01 	lds	r24, 0x010B
    4328:	80 64       	ori	r24, 0x40	; 64
    432a:	80 93 0b 01 	sts	0x010B, r24
    432e:	80 91 0b 01 	lds	r24, 0x010B
    4332:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    4334:	a3 9a       	sbi	0x14, 3	; 20
    4336:	84 b3       	in	r24, 0x14	; 20
    4338:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    433a:	80 91 0b 01 	lds	r24, 0x010B
    433e:	80 61       	ori	r24, 0x10	; 16
    4340:	80 93 0b 01 	sts	0x010B, r24
    4344:	80 91 0b 01 	lds	r24, 0x010B
    4348:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    434a:	80 91 0b 01 	lds	r24, 0x010B
    434e:	81 60       	ori	r24, 0x01	; 1
    4350:	80 93 0b 01 	sts	0x010B, r24
    4354:	80 91 0b 01 	lds	r24, 0x010B
    4358:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    435a:	80 91 0b 01 	lds	r24, 0x010B
    435e:	80 62       	ori	r24, 0x20	; 32
    4360:	80 93 0b 01 	sts	0x010B, r24
    4364:	80 91 0b 01 	lds	r24, 0x010B
    4368:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    436a:	80 91 0b 01 	lds	r24, 0x010B
    436e:	82 60       	ori	r24, 0x02	; 2
    4370:	80 93 0b 01 	sts	0x010B, r24
    4374:	80 91 0b 01 	lds	r24, 0x010B
    4378:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    437a:	80 91 0b 01 	lds	r24, 0x010B
    437e:	8f 77       	andi	r24, 0x7F	; 127
    4380:	80 93 0b 01 	sts	0x010B, r24
    4384:	80 91 0b 01 	lds	r24, 0x010B
    4388:	08 95       	ret

0000438a <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    438a:	eb e0       	ldi	r30, 0x0B	; 11
    438c:	f1 e0       	ldi	r31, 0x01	; 1
    438e:	80 81       	ld	r24, Z
    4390:	81 60       	ori	r24, 0x01	; 1
    4392:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    4394:	80 81       	ld	r24, Z
    4396:	82 60       	ori	r24, 0x02	; 2
    4398:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    439a:	80 81       	ld	r24, Z
    439c:	84 60       	ori	r24, 0x04	; 4
    439e:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    43a0:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    43a2:	80 81       	ld	r24, Z
    43a4:	80 61       	ori	r24, 0x10	; 16
    43a6:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    43a8:	80 81       	ld	r24, Z
    43aa:	80 62       	ori	r24, 0x20	; 32
    43ac:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    43ae:	80 81       	ld	r24, Z
    43b0:	80 64       	ori	r24, 0x40	; 64
    43b2:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    43b4:	80 81       	ld	r24, Z
    43b6:	80 68       	ori	r24, 0x80	; 128
    43b8:	80 83       	st	Z, r24

}
    43ba:	08 95       	ret

000043bc <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    43bc:	eb e0       	ldi	r30, 0x0B	; 11
    43be:	f1 e0       	ldi	r31, 0x01	; 1
    43c0:	80 81       	ld	r24, Z
    43c2:	8e 7f       	andi	r24, 0xFE	; 254
    43c4:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    43c6:	80 81       	ld	r24, Z
    43c8:	8d 7f       	andi	r24, 0xFD	; 253
    43ca:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    43cc:	80 81       	ld	r24, Z
    43ce:	8b 7f       	andi	r24, 0xFB	; 251
    43d0:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    43d2:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    43d4:	80 81       	ld	r24, Z
    43d6:	8f 7e       	andi	r24, 0xEF	; 239
    43d8:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    43da:	80 81       	ld	r24, Z
    43dc:	8f 7d       	andi	r24, 0xDF	; 223
    43de:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    43e0:	80 81       	ld	r24, Z
    43e2:	8f 7b       	andi	r24, 0xBF	; 191
    43e4:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    43e6:	80 81       	ld	r24, Z
    43e8:	8f 77       	andi	r24, 0x7F	; 127
    43ea:	80 83       	st	Z, r24

}
    43ec:	08 95       	ret

000043ee <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    43ee:	0e 94 6f 14 	call	0x28de	; 0x28de <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    43f2:	80 91 14 02 	lds	r24, 0x0214
    43f6:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    43fa:	88 23       	and	r24, r24
    43fc:	49 f4       	brne	.+18     	; 0x4410 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    43fe:	86 e1       	ldi	r24, 0x16	; 22
    4400:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    4404:	85 e4       	ldi	r24, 0x45	; 69
    4406:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    440a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>
    440e:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4410:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    4414:	86 ea       	ldi	r24, 0xA6	; 166
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	90 93 15 02 	sts	0x0215, r25
    441c:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4420:	86 ea       	ldi	r24, 0xA6	; 166
    4422:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4426:	88 23       	and	r24, r24
    4428:	41 f5       	brne	.+80     	; 0x447a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    442a:	8d e2       	ldi	r24, 0x2D	; 45
    442c:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_write(0x08);	// measurement mode
    4430:	88 e0       	ldi	r24, 0x08	; 8
    4432:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4436:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    443a:	80 91 14 02 	lds	r24, 0x0214
    443e:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4442:	88 23       	and	r24, r24
    4444:	d1 f4       	brne	.+52     	; 0x447a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    4446:	81 e3       	ldi	r24, 0x31	; 49
    4448:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    444c:	80 e0       	ldi	r24, 0x00	; 0
    444e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4452:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4456:	80 91 14 02 	lds	r24, 0x0214
    445a:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    445e:	88 23       	and	r24, r24
    4460:	61 f4       	brne	.+24     	; 0x447a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    4462:	8c e2       	ldi	r24, 0x2C	; 44
    4464:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    4468:	89 e0       	ldi	r24, 0x09	; 9
    446a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    446e:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    4472:	81 e0       	ldi	r24, 0x01	; 1
    4474:	80 93 1f 05 	sts	0x051F, r24
    4478:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    447a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    447e:	82 e0       	ldi	r24, 0x02	; 2
    4480:	80 93 1f 05 	sts	0x051F, r24
    4484:	08 95       	ret

00004486 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4486:	80 91 14 02 	lds	r24, 0x0214
    448a:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    448e:	88 23       	and	r24, r24
    4490:	51 f4       	brne	.+20     	; 0x44a6 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    4492:	86 e1       	ldi	r24, 0x16	; 22
    4494:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    4498:	85 e4       	ldi	r24, 0x45	; 69
    449a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    449e:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>
    }

	return 0;				// configuration ok
    44a2:	80 e0       	ldi	r24, 0x00	; 0

}
    44a4:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    44a6:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>
		return 1;
    44aa:	81 e0       	ldi	r24, 0x01	; 1
    44ac:	08 95       	ret

000044ae <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    44ae:	80 91 14 02 	lds	r24, 0x0214
    44b2:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    44b6:	88 23       	and	r24, r24
    44b8:	31 f5       	brne	.+76     	; 0x4506 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    44ba:	8d e2       	ldi	r24, 0x2D	; 45
    44bc:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_write(0x08);	// measurement mode
    44c0:	88 e0       	ldi	r24, 0x08	; 8
    44c2:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    44c6:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    44ca:	80 91 14 02 	lds	r24, 0x0214
    44ce:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    44d2:	88 23       	and	r24, r24
    44d4:	c1 f4       	brne	.+48     	; 0x4506 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    44d6:	81 e3       	ldi	r24, 0x31	; 49
    44d8:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    44dc:	80 e0       	ldi	r24, 0x00	; 0
    44de:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    44e2:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    44e6:	80 91 14 02 	lds	r24, 0x0214
    44ea:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    44ee:	88 23       	and	r24, r24
    44f0:	51 f4       	brne	.+20     	; 0x4506 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    44f2:	8c e2       	ldi	r24, 0x2C	; 44
    44f4:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    44f8:	89 e0       	ldi	r24, 0x09	; 9
    44fa:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    44fe:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>
    }

	return 0;
    4502:	80 e0       	ldi	r24, 0x00	; 0

}
    4504:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4506:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>
		return 1;
    450a:	81 e0       	ldi	r24, 0x01	; 1
    450c:	08 95       	ret

0000450e <readAccelXY>:

	return 0;

}

void readAccelXY() {
    450e:	ff 92       	push	r15
    4510:	0f 93       	push	r16
    4512:	1f 93       	push	r17
    4514:	df 93       	push	r29
    4516:	cf 93       	push	r28
    4518:	0f 92       	push	r0
    451a:	cd b7       	in	r28, 0x3d	; 61
    451c:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    451e:	80 91 1f 05 	lds	r24, 0x051F
    4522:	88 23       	and	r24, r24
    4524:	91 f0       	breq	.+36     	; 0x454a <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    4526:	81 30       	cpi	r24, 0x01	; 1
    4528:	09 f4       	brne	.+2      	; 0x452c <readAccelXY+0x1e>
    452a:	88 c0       	rjmp	.+272    	; 0x463c <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    452c:	10 92 21 05 	sts	0x0521, r1
    4530:	10 92 20 05 	sts	0x0520, r1
		accY = 0;
    4534:	10 92 23 05 	sts	0x0523, r1
    4538:	10 92 22 05 	sts	0x0522, r1

	}

}
    453c:	0f 90       	pop	r0
    453e:	cf 91       	pop	r28
    4540:	df 91       	pop	r29
    4542:	1f 91       	pop	r17
    4544:	0f 91       	pop	r16
    4546:	ff 90       	pop	r15
    4548:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    454a:	80 91 14 02 	lds	r24, 0x0214
    454e:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    4552:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    4554:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    4558:	80 91 14 02 	lds	r24, 0x0214
    455c:	8f 5f       	subi	r24, 0xFF	; 255
    455e:	0e 94 c4 14 	call	0x2988	; 0x2988 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    4562:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    4566:	08 2f       	mov	r16, r24
    4568:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    456c:	f8 2e       	mov	r15, r24
    456e:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    4572:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    4574:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    4578:	89 83       	std	Y+1, r24	; 0x01
    457a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    457e:	90 91 7e 05 	lds	r25, 0x057E
    4582:	89 81       	ldd	r24, Y+1	; 0x01
    4584:	99 23       	and	r25, r25
    4586:	39 f1       	breq	.+78     	; 0x45d6 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    4588:	4f 2d       	mov	r20, r15
    458a:	55 27       	eor	r21, r21
    458c:	47 fd       	sbrc	r20, 7
    458e:	50 95       	com	r21
    4590:	54 2f       	mov	r21, r20
    4592:	44 27       	eor	r20, r20
    4594:	60 2f       	mov	r22, r16
    4596:	77 27       	eor	r23, r23
    4598:	67 fd       	sbrc	r22, 7
    459a:	70 95       	com	r23
    459c:	46 2b       	or	r20, r22
    459e:	57 2b       	or	r21, r23
    45a0:	50 93 21 05 	sts	0x0521, r21
    45a4:	40 93 20 05 	sts	0x0520, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    45a8:	28 2f       	mov	r18, r24
    45aa:	33 27       	eor	r19, r19
    45ac:	27 fd       	sbrc	r18, 7
    45ae:	30 95       	com	r19
    45b0:	32 2f       	mov	r19, r18
    45b2:	22 27       	eor	r18, r18
    45b4:	81 2f       	mov	r24, r17
    45b6:	99 27       	eor	r25, r25
    45b8:	87 fd       	sbrc	r24, 7
    45ba:	90 95       	com	r25
    45bc:	28 2b       	or	r18, r24
    45be:	39 2b       	or	r19, r25
    45c0:	30 93 23 05 	sts	0x0523, r19
    45c4:	20 93 22 05 	sts	0x0522, r18
		accX = 0;
		accY = 0;

	}

}
    45c8:	0f 90       	pop	r0
    45ca:	cf 91       	pop	r28
    45cc:	df 91       	pop	r29
    45ce:	1f 91       	pop	r17
    45d0:	0f 91       	pop	r16
    45d2:	ff 90       	pop	r15
    45d4:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    45d6:	4f 2d       	mov	r20, r15
    45d8:	55 27       	eor	r21, r21
    45da:	47 fd       	sbrc	r20, 7
    45dc:	50 95       	com	r21
    45de:	54 2f       	mov	r21, r20
    45e0:	44 27       	eor	r20, r20
    45e2:	60 2f       	mov	r22, r16
    45e4:	77 27       	eor	r23, r23
    45e6:	67 fd       	sbrc	r22, 7
    45e8:	70 95       	com	r23
    45ea:	46 2b       	or	r20, r22
    45ec:	57 2b       	or	r21, r23
    45ee:	60 91 26 05 	lds	r22, 0x0526
    45f2:	70 91 27 05 	lds	r23, 0x0527
    45f6:	46 1b       	sub	r20, r22
    45f8:	57 0b       	sbc	r21, r23
    45fa:	50 93 21 05 	sts	0x0521, r21
    45fe:	40 93 20 05 	sts	0x0520, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    4602:	28 2f       	mov	r18, r24
    4604:	33 27       	eor	r19, r19
    4606:	27 fd       	sbrc	r18, 7
    4608:	30 95       	com	r19
    460a:	32 2f       	mov	r19, r18
    460c:	22 27       	eor	r18, r18
    460e:	81 2f       	mov	r24, r17
    4610:	99 27       	eor	r25, r25
    4612:	87 fd       	sbrc	r24, 7
    4614:	90 95       	com	r25
    4616:	28 2b       	or	r18, r24
    4618:	39 2b       	or	r19, r25
    461a:	80 91 28 05 	lds	r24, 0x0528
    461e:	90 91 29 05 	lds	r25, 0x0529
    4622:	28 1b       	sub	r18, r24
    4624:	39 0b       	sbc	r19, r25
    4626:	30 93 23 05 	sts	0x0523, r19
    462a:	20 93 22 05 	sts	0x0522, r18
		accX = 0;
		accY = 0;

	}

}
    462e:	0f 90       	pop	r0
    4630:	cf 91       	pop	r28
    4632:	df 91       	pop	r29
    4634:	1f 91       	pop	r17
    4636:	0f 91       	pop	r16
    4638:	ff 90       	pop	r15
    463a:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    463c:	80 91 14 02 	lds	r24, 0x0214
    4640:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    4644:	82 e3       	ldi	r24, 0x32	; 50
    4646:	86 cf       	rjmp	.-244    	; 0x4554 <readAccelXY+0x46>

00004648 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    4648:	df 93       	push	r29
    464a:	cf 93       	push	r28
    464c:	00 d0       	rcall	.+0      	; 0x464e <readAccelXYZ+0x6>
    464e:	00 d0       	rcall	.+0      	; 0x4650 <readAccelXYZ+0x8>
    4650:	cd b7       	in	r28, 0x3d	; 61
    4652:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    4654:	80 91 1f 05 	lds	r24, 0x051F
    4658:	88 23       	and	r24, r24
    465a:	c1 f0       	breq	.+48     	; 0x468c <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    465c:	81 30       	cpi	r24, 0x01	; 1
    465e:	09 f4       	brne	.+2      	; 0x4662 <readAccelXYZ+0x1a>
    4660:	ad c0       	rjmp	.+346    	; 0x47bc <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    4662:	10 92 21 05 	sts	0x0521, r1
    4666:	10 92 20 05 	sts	0x0520, r1
		accY = 0;
    466a:	10 92 23 05 	sts	0x0523, r1
    466e:	10 92 22 05 	sts	0x0522, r1
		accZ = 0;
    4672:	10 92 25 05 	sts	0x0525, r1
    4676:	10 92 24 05 	sts	0x0524, r1

	}

}
    467a:	26 96       	adiw	r28, 0x06	; 6
    467c:	0f b6       	in	r0, 0x3f	; 63
    467e:	f8 94       	cli
    4680:	de bf       	out	0x3e, r29	; 62
    4682:	0f be       	out	0x3f, r0	; 63
    4684:	cd bf       	out	0x3d, r28	; 61
    4686:	cf 91       	pop	r28
    4688:	df 91       	pop	r29
    468a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    468c:	80 91 14 02 	lds	r24, 0x0214
    4690:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    4694:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    4696:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    469a:	80 91 14 02 	lds	r24, 0x0214
    469e:	8f 5f       	subi	r24, 0xFF	; 255
    46a0:	0e 94 c4 14 	call	0x2988	; 0x2988 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    46a4:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    46a8:	89 83       	std	Y+1, r24	; 0x01
    46aa:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    46ae:	8a 83       	std	Y+2, r24	; 0x02
    46b0:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    46b4:	8b 83       	std	Y+3, r24	; 0x03
    46b6:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    46ba:	8c 83       	std	Y+4, r24	; 0x04
    46bc:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    46c0:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    46c2:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <i2c_readNak>
    46c6:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    46c8:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    46cc:	80 91 7e 05 	lds	r24, 0x057E
    46d0:	88 23       	and	r24, r24
    46d2:	89 f1       	breq	.+98     	; 0x4736 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    46d4:	8a 81       	ldd	r24, Y+2	; 0x02
    46d6:	99 27       	eor	r25, r25
    46d8:	87 fd       	sbrc	r24, 7
    46da:	90 95       	com	r25
    46dc:	98 2f       	mov	r25, r24
    46de:	88 27       	eor	r24, r24
    46e0:	29 81       	ldd	r18, Y+1	; 0x01
    46e2:	33 27       	eor	r19, r19
    46e4:	27 fd       	sbrc	r18, 7
    46e6:	30 95       	com	r19
    46e8:	82 2b       	or	r24, r18
    46ea:	93 2b       	or	r25, r19
    46ec:	90 93 21 05 	sts	0x0521, r25
    46f0:	80 93 20 05 	sts	0x0520, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    46f4:	8c 81       	ldd	r24, Y+4	; 0x04
    46f6:	99 27       	eor	r25, r25
    46f8:	87 fd       	sbrc	r24, 7
    46fa:	90 95       	com	r25
    46fc:	98 2f       	mov	r25, r24
    46fe:	88 27       	eor	r24, r24
    4700:	2b 81       	ldd	r18, Y+3	; 0x03
    4702:	33 27       	eor	r19, r19
    4704:	27 fd       	sbrc	r18, 7
    4706:	30 95       	com	r19
    4708:	82 2b       	or	r24, r18
    470a:	93 2b       	or	r25, r19
    470c:	90 93 23 05 	sts	0x0523, r25
    4710:	80 93 22 05 	sts	0x0522, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    4714:	8e 81       	ldd	r24, Y+6	; 0x06
    4716:	99 27       	eor	r25, r25
    4718:	87 fd       	sbrc	r24, 7
    471a:	90 95       	com	r25
    471c:	98 2f       	mov	r25, r24
    471e:	88 27       	eor	r24, r24
    4720:	2d 81       	ldd	r18, Y+5	; 0x05
    4722:	33 27       	eor	r19, r19
    4724:	27 fd       	sbrc	r18, 7
    4726:	30 95       	com	r19
    4728:	82 2b       	or	r24, r18
    472a:	93 2b       	or	r25, r19
    472c:	90 93 25 05 	sts	0x0525, r25
    4730:	80 93 24 05 	sts	0x0524, r24
    4734:	a2 cf       	rjmp	.-188    	; 0x467a <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    4736:	8a 81       	ldd	r24, Y+2	; 0x02
    4738:	99 27       	eor	r25, r25
    473a:	87 fd       	sbrc	r24, 7
    473c:	90 95       	com	r25
    473e:	98 2f       	mov	r25, r24
    4740:	88 27       	eor	r24, r24
    4742:	29 81       	ldd	r18, Y+1	; 0x01
    4744:	33 27       	eor	r19, r19
    4746:	27 fd       	sbrc	r18, 7
    4748:	30 95       	com	r19
    474a:	82 2b       	or	r24, r18
    474c:	93 2b       	or	r25, r19
    474e:	20 91 26 05 	lds	r18, 0x0526
    4752:	30 91 27 05 	lds	r19, 0x0527
    4756:	82 1b       	sub	r24, r18
    4758:	93 0b       	sbc	r25, r19
    475a:	90 93 21 05 	sts	0x0521, r25
    475e:	80 93 20 05 	sts	0x0520, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    4762:	8c 81       	ldd	r24, Y+4	; 0x04
    4764:	99 27       	eor	r25, r25
    4766:	87 fd       	sbrc	r24, 7
    4768:	90 95       	com	r25
    476a:	98 2f       	mov	r25, r24
    476c:	88 27       	eor	r24, r24
    476e:	2b 81       	ldd	r18, Y+3	; 0x03
    4770:	33 27       	eor	r19, r19
    4772:	27 fd       	sbrc	r18, 7
    4774:	30 95       	com	r19
    4776:	82 2b       	or	r24, r18
    4778:	93 2b       	or	r25, r19
    477a:	20 91 28 05 	lds	r18, 0x0528
    477e:	30 91 29 05 	lds	r19, 0x0529
    4782:	82 1b       	sub	r24, r18
    4784:	93 0b       	sbc	r25, r19
    4786:	90 93 23 05 	sts	0x0523, r25
    478a:	80 93 22 05 	sts	0x0522, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    478e:	8e 81       	ldd	r24, Y+6	; 0x06
    4790:	99 27       	eor	r25, r25
    4792:	87 fd       	sbrc	r24, 7
    4794:	90 95       	com	r25
    4796:	98 2f       	mov	r25, r24
    4798:	88 27       	eor	r24, r24
    479a:	2d 81       	ldd	r18, Y+5	; 0x05
    479c:	33 27       	eor	r19, r19
    479e:	27 fd       	sbrc	r18, 7
    47a0:	30 95       	com	r19
    47a2:	82 2b       	or	r24, r18
    47a4:	93 2b       	or	r25, r19
    47a6:	20 91 2a 05 	lds	r18, 0x052A
    47aa:	30 91 2b 05 	lds	r19, 0x052B
    47ae:	82 1b       	sub	r24, r18
    47b0:	93 0b       	sbc	r25, r19
    47b2:	90 93 25 05 	sts	0x0525, r25
    47b6:	80 93 24 05 	sts	0x0524, r24
    47ba:	5f cf       	rjmp	.-322    	; 0x467a <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    47bc:	80 91 14 02 	lds	r24, 0x0214
    47c0:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    47c4:	82 e3       	ldi	r24, 0x32	; 50
    47c6:	67 cf       	rjmp	.-306    	; 0x4696 <readAccelXYZ+0x4e>

000047c8 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    47c8:	cf 93       	push	r28
    47ca:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    47cc:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    47d0:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    47d4:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <updateRedLed>
	updateGreenLed(pwm_green);
    47de:	80 91 0d 02 	lds	r24, 0x020D
    47e2:	0e 94 00 21 	call	0x4200	; 0x4200 <updateGreenLed>
	updateBlueLed(pwm_blue);
    47e6:	80 91 0e 02 	lds	r24, 0x020E
    47ea:	0e 94 14 21 	call	0x4228	; 0x4228 <updateBlueLed>

	calibrationCycle = 0;
    47ee:	10 92 41 05 	sts	0x0541, r1
    47f2:	10 92 40 05 	sts	0x0540, r1
	startCalibration = 1;
    47f6:	81 e0       	ldi	r24, 0x01	; 1
    47f8:	80 93 7e 05 	sts	0x057E, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    47fc:	c1 e0       	ldi	r28, 0x01	; 1
    47fe:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    4800:	0e 94 24 23 	call	0x4648	; 0x4648 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    4804:	20 91 40 05 	lds	r18, 0x0540
    4808:	30 91 41 05 	lds	r19, 0x0541
    480c:	21 31       	cpi	r18, 0x11	; 17
    480e:	31 05       	cpc	r19, r1
    4810:	0c f4       	brge	.+2      	; 0x4814 <calibrateSensors+0x4c>
    4812:	35 c1       	rjmp	.+618    	; 0x4a7e <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    4814:	80 91 8f 03 	lds	r24, 0x038F
    4818:	90 91 90 03 	lds	r25, 0x0390
    481c:	a0 91 91 03 	lds	r26, 0x0391
    4820:	b0 91 92 03 	lds	r27, 0x0392
    4824:	54 e0       	ldi	r21, 0x04	; 4
    4826:	b6 95       	lsr	r27
    4828:	a7 95       	ror	r26
    482a:	97 95       	ror	r25
    482c:	87 95       	ror	r24
    482e:	5a 95       	dec	r21
    4830:	d1 f7       	brne	.-12     	; 0x4826 <calibrateSensors+0x5e>
    4832:	90 93 78 03 	sts	0x0378, r25
    4836:	80 93 77 03 	sts	0x0377, r24
    483a:	80 91 93 03 	lds	r24, 0x0393
    483e:	90 91 94 03 	lds	r25, 0x0394
    4842:	a0 91 95 03 	lds	r26, 0x0395
    4846:	b0 91 96 03 	lds	r27, 0x0396
    484a:	44 e0       	ldi	r20, 0x04	; 4
    484c:	b6 95       	lsr	r27
    484e:	a7 95       	ror	r26
    4850:	97 95       	ror	r25
    4852:	87 95       	ror	r24
    4854:	4a 95       	dec	r20
    4856:	d1 f7       	brne	.-12     	; 0x484c <calibrateSensors+0x84>
    4858:	90 93 7a 03 	sts	0x037A, r25
    485c:	80 93 79 03 	sts	0x0379, r24
    4860:	80 91 97 03 	lds	r24, 0x0397
    4864:	90 91 98 03 	lds	r25, 0x0398
    4868:	a0 91 99 03 	lds	r26, 0x0399
    486c:	b0 91 9a 03 	lds	r27, 0x039A
    4870:	34 e0       	ldi	r19, 0x04	; 4
    4872:	b6 95       	lsr	r27
    4874:	a7 95       	ror	r26
    4876:	97 95       	ror	r25
    4878:	87 95       	ror	r24
    487a:	3a 95       	dec	r19
    487c:	d1 f7       	brne	.-12     	; 0x4872 <calibrateSensors+0xaa>
    487e:	90 93 7c 03 	sts	0x037C, r25
    4882:	80 93 7b 03 	sts	0x037B, r24
    4886:	80 91 9b 03 	lds	r24, 0x039B
    488a:	90 91 9c 03 	lds	r25, 0x039C
    488e:	a0 91 9d 03 	lds	r26, 0x039D
    4892:	b0 91 9e 03 	lds	r27, 0x039E
    4896:	24 e0       	ldi	r18, 0x04	; 4
    4898:	b6 95       	lsr	r27
    489a:	a7 95       	ror	r26
    489c:	97 95       	ror	r25
    489e:	87 95       	ror	r24
    48a0:	2a 95       	dec	r18
    48a2:	d1 f7       	brne	.-12     	; 0x4898 <calibrateSensors+0xd0>
    48a4:	90 93 7e 03 	sts	0x037E, r25
    48a8:	80 93 7d 03 	sts	0x037D, r24
    48ac:	80 91 9f 03 	lds	r24, 0x039F
    48b0:	90 91 a0 03 	lds	r25, 0x03A0
    48b4:	a0 91 a1 03 	lds	r26, 0x03A1
    48b8:	b0 91 a2 03 	lds	r27, 0x03A2
    48bc:	f4 e0       	ldi	r31, 0x04	; 4
    48be:	b6 95       	lsr	r27
    48c0:	a7 95       	ror	r26
    48c2:	97 95       	ror	r25
    48c4:	87 95       	ror	r24
    48c6:	fa 95       	dec	r31
    48c8:	d1 f7       	brne	.-12     	; 0x48be <calibrateSensors+0xf6>
    48ca:	90 93 80 03 	sts	0x0380, r25
    48ce:	80 93 7f 03 	sts	0x037F, r24
    48d2:	80 91 a3 03 	lds	r24, 0x03A3
    48d6:	90 91 a4 03 	lds	r25, 0x03A4
    48da:	a0 91 a5 03 	lds	r26, 0x03A5
    48de:	b0 91 a6 03 	lds	r27, 0x03A6
    48e2:	e4 e0       	ldi	r30, 0x04	; 4
    48e4:	b6 95       	lsr	r27
    48e6:	a7 95       	ror	r26
    48e8:	97 95       	ror	r25
    48ea:	87 95       	ror	r24
    48ec:	ea 95       	dec	r30
    48ee:	d1 f7       	brne	.-12     	; 0x48e4 <calibrateSensors+0x11c>
    48f0:	90 93 82 03 	sts	0x0382, r25
    48f4:	80 93 81 03 	sts	0x0381, r24
    48f8:	80 91 a7 03 	lds	r24, 0x03A7
    48fc:	90 91 a8 03 	lds	r25, 0x03A8
    4900:	a0 91 a9 03 	lds	r26, 0x03A9
    4904:	b0 91 aa 03 	lds	r27, 0x03AA
    4908:	74 e0       	ldi	r23, 0x04	; 4
    490a:	b6 95       	lsr	r27
    490c:	a7 95       	ror	r26
    490e:	97 95       	ror	r25
    4910:	87 95       	ror	r24
    4912:	7a 95       	dec	r23
    4914:	d1 f7       	brne	.-12     	; 0x490a <calibrateSensors+0x142>
    4916:	90 93 84 03 	sts	0x0384, r25
    491a:	80 93 83 03 	sts	0x0383, r24
    491e:	80 91 ab 03 	lds	r24, 0x03AB
    4922:	90 91 ac 03 	lds	r25, 0x03AC
    4926:	a0 91 ad 03 	lds	r26, 0x03AD
    492a:	b0 91 ae 03 	lds	r27, 0x03AE
    492e:	64 e0       	ldi	r22, 0x04	; 4
    4930:	b6 95       	lsr	r27
    4932:	a7 95       	ror	r26
    4934:	97 95       	ror	r25
    4936:	87 95       	ror	r24
    4938:	6a 95       	dec	r22
    493a:	d1 f7       	brne	.-12     	; 0x4930 <calibrateSensors+0x168>
    493c:	90 93 86 03 	sts	0x0386, r25
    4940:	80 93 85 03 	sts	0x0385, r24
    4944:	80 91 b3 03 	lds	r24, 0x03B3
    4948:	90 91 b4 03 	lds	r25, 0x03B4
    494c:	a0 91 b5 03 	lds	r26, 0x03B5
    4950:	b0 91 b6 03 	lds	r27, 0x03B6
    4954:	54 e0       	ldi	r21, 0x04	; 4
    4956:	b6 95       	lsr	r27
    4958:	a7 95       	ror	r26
    495a:	97 95       	ror	r25
    495c:	87 95       	ror	r24
    495e:	5a 95       	dec	r21
    4960:	d1 f7       	brne	.-12     	; 0x4956 <calibrateSensors+0x18e>
    4962:	9c 01       	movw	r18, r24
    4964:	80 91 b7 03 	lds	r24, 0x03B7
    4968:	90 91 b8 03 	lds	r25, 0x03B8
    496c:	a0 91 b9 03 	lds	r26, 0x03B9
    4970:	b0 91 ba 03 	lds	r27, 0x03BA
    4974:	44 e0       	ldi	r20, 0x04	; 4
    4976:	b6 95       	lsr	r27
    4978:	a7 95       	ror	r26
    497a:	97 95       	ror	r25
    497c:	87 95       	ror	r24
    497e:	4a 95       	dec	r20
    4980:	d1 f7       	brne	.-12     	; 0x4976 <calibrateSensors+0x1ae>
    4982:	bc 01       	movw	r22, r24
    4984:	80 91 bb 03 	lds	r24, 0x03BB
    4988:	90 91 bc 03 	lds	r25, 0x03BC
    498c:	a0 91 bd 03 	lds	r26, 0x03BD
    4990:	b0 91 be 03 	lds	r27, 0x03BE
    4994:	f4 e0       	ldi	r31, 0x04	; 4
    4996:	b6 95       	lsr	r27
    4998:	a7 95       	ror	r26
    499a:	97 95       	ror	r25
    499c:	87 95       	ror	r24
    499e:	fa 95       	dec	r31
    49a0:	d1 f7       	brne	.-12     	; 0x4996 <calibrateSensors+0x1ce>
    49a2:	ac 01       	movw	r20, r24
    49a4:	80 91 af 03 	lds	r24, 0x03AF
    49a8:	90 91 b0 03 	lds	r25, 0x03B0
    49ac:	a0 91 b1 03 	lds	r26, 0x03B1
    49b0:	b0 91 b2 03 	lds	r27, 0x03B2
    49b4:	e4 e0       	ldi	r30, 0x04	; 4
    49b6:	b6 95       	lsr	r27
    49b8:	a7 95       	ror	r26
    49ba:	97 95       	ror	r25
    49bc:	87 95       	ror	r24
    49be:	ea 95       	dec	r30
    49c0:	d1 f7       	brne	.-12     	; 0x49b6 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    49c2:	80 50       	subi	r24, 0x00	; 0
    49c4:	92 40       	sbci	r25, 0x02	; 2
    49c6:	90 93 88 03 	sts	0x0388, r25
    49ca:	80 93 87 03 	sts	0x0387, r24
    49ce:	20 50       	subi	r18, 0x00	; 0
    49d0:	32 40       	sbci	r19, 0x02	; 2
    49d2:	30 93 8a 03 	sts	0x038A, r19
    49d6:	20 93 89 03 	sts	0x0389, r18
    49da:	60 50       	subi	r22, 0x00	; 0
    49dc:	72 40       	sbci	r23, 0x02	; 2
    49de:	70 93 8c 03 	sts	0x038C, r23
    49e2:	60 93 8b 03 	sts	0x038B, r22
    49e6:	40 50       	subi	r20, 0x00	; 0
    49e8:	52 40       	sbci	r21, 0x02	; 2
    49ea:	50 93 8e 03 	sts	0x038E, r21
    49ee:	40 93 8d 03 	sts	0x038D, r20
			}

			accOffsetX = accOffsetXSum>>4;
    49f2:	80 91 2c 05 	lds	r24, 0x052C
    49f6:	90 91 2d 05 	lds	r25, 0x052D
    49fa:	95 95       	asr	r25
    49fc:	87 95       	ror	r24
    49fe:	95 95       	asr	r25
    4a00:	87 95       	ror	r24
    4a02:	95 95       	asr	r25
    4a04:	87 95       	ror	r24
    4a06:	95 95       	asr	r25
    4a08:	87 95       	ror	r24
    4a0a:	90 93 27 05 	sts	0x0527, r25
    4a0e:	80 93 26 05 	sts	0x0526, r24
			accOffsetY = accOffsetYSum>>4;
    4a12:	80 91 2e 05 	lds	r24, 0x052E
    4a16:	90 91 2f 05 	lds	r25, 0x052F
    4a1a:	95 95       	asr	r25
    4a1c:	87 95       	ror	r24
    4a1e:	95 95       	asr	r25
    4a20:	87 95       	ror	r24
    4a22:	95 95       	asr	r25
    4a24:	87 95       	ror	r24
    4a26:	95 95       	asr	r25
    4a28:	87 95       	ror	r24
    4a2a:	90 93 29 05 	sts	0x0529, r25
    4a2e:	80 93 28 05 	sts	0x0528, r24
			accOffsetZ = accOffsetZSum>>4;
    4a32:	80 91 30 05 	lds	r24, 0x0530
    4a36:	90 91 31 05 	lds	r25, 0x0531
    4a3a:	95 95       	asr	r25
    4a3c:	87 95       	ror	r24
    4a3e:	95 95       	asr	r25
    4a40:	87 95       	ror	r24
    4a42:	95 95       	asr	r25
    4a44:	87 95       	ror	r24
    4a46:	95 95       	asr	r25
    4a48:	87 95       	ror	r24
    4a4a:	90 93 2b 05 	sts	0x052B, r25
    4a4e:	80 93 2a 05 	sts	0x052A, r24

			startCalibration = 0;
    4a52:	10 92 7e 05 	sts	0x057E, r1

		}

	}

	pwm_red = 255;
    4a56:	8f ef       	ldi	r24, 0xFF	; 255
    4a58:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    4a5c:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    4a60:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    4a64:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <updateRedLed>
	updateGreenLed(pwm_green);
    4a68:	80 91 0d 02 	lds	r24, 0x020D
    4a6c:	0e 94 00 21 	call	0x4200	; 0x4200 <updateGreenLed>
	updateBlueLed(pwm_blue);
    4a70:	80 91 0e 02 	lds	r24, 0x020E
    4a74:	0e 94 14 21 	call	0x4228	; 0x4228 <updateBlueLed>

}
    4a78:	df 91       	pop	r29
    4a7a:	cf 91       	pop	r28
    4a7c:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    4a7e:	80 91 c6 03 	lds	r24, 0x03C6
    4a82:	88 23       	and	r24, r24
    4a84:	09 f4       	brne	.+2      	; 0x4a88 <calibrateSensors+0x2c0>
    4a86:	86 c1       	rjmp	.+780    	; 0x4d94 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    4a88:	10 92 c6 03 	sts	0x03C6, r1

				if(calibrationCycle==0) {		// reset all variables
    4a8c:	21 15       	cp	r18, r1
    4a8e:	31 05       	cpc	r19, r1
    4a90:	09 f4       	brne	.+2      	; 0x4a94 <calibrateSensors+0x2cc>
    4a92:	86 c1       	rjmp	.+780    	; 0x4da0 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    4a94:	80 91 5f 03 	lds	r24, 0x035F
    4a98:	90 91 60 03 	lds	r25, 0x0360
    4a9c:	aa 27       	eor	r26, r26
    4a9e:	97 fd       	sbrc	r25, 7
    4aa0:	a0 95       	com	r26
    4aa2:	ba 2f       	mov	r27, r26
    4aa4:	40 91 8f 03 	lds	r20, 0x038F
    4aa8:	50 91 90 03 	lds	r21, 0x0390
    4aac:	60 91 91 03 	lds	r22, 0x0391
    4ab0:	70 91 92 03 	lds	r23, 0x0392
    4ab4:	84 0f       	add	r24, r20
    4ab6:	95 1f       	adc	r25, r21
    4ab8:	a6 1f       	adc	r26, r22
    4aba:	b7 1f       	adc	r27, r23
    4abc:	80 93 8f 03 	sts	0x038F, r24
    4ac0:	90 93 90 03 	sts	0x0390, r25
    4ac4:	a0 93 91 03 	sts	0x0391, r26
    4ac8:	b0 93 92 03 	sts	0x0392, r27
    4acc:	80 91 61 03 	lds	r24, 0x0361
    4ad0:	90 91 62 03 	lds	r25, 0x0362
    4ad4:	aa 27       	eor	r26, r26
    4ad6:	97 fd       	sbrc	r25, 7
    4ad8:	a0 95       	com	r26
    4ada:	ba 2f       	mov	r27, r26
    4adc:	40 91 93 03 	lds	r20, 0x0393
    4ae0:	50 91 94 03 	lds	r21, 0x0394
    4ae4:	60 91 95 03 	lds	r22, 0x0395
    4ae8:	70 91 96 03 	lds	r23, 0x0396
    4aec:	84 0f       	add	r24, r20
    4aee:	95 1f       	adc	r25, r21
    4af0:	a6 1f       	adc	r26, r22
    4af2:	b7 1f       	adc	r27, r23
    4af4:	80 93 93 03 	sts	0x0393, r24
    4af8:	90 93 94 03 	sts	0x0394, r25
    4afc:	a0 93 95 03 	sts	0x0395, r26
    4b00:	b0 93 96 03 	sts	0x0396, r27
    4b04:	80 91 63 03 	lds	r24, 0x0363
    4b08:	90 91 64 03 	lds	r25, 0x0364
    4b0c:	aa 27       	eor	r26, r26
    4b0e:	97 fd       	sbrc	r25, 7
    4b10:	a0 95       	com	r26
    4b12:	ba 2f       	mov	r27, r26
    4b14:	40 91 97 03 	lds	r20, 0x0397
    4b18:	50 91 98 03 	lds	r21, 0x0398
    4b1c:	60 91 99 03 	lds	r22, 0x0399
    4b20:	70 91 9a 03 	lds	r23, 0x039A
    4b24:	84 0f       	add	r24, r20
    4b26:	95 1f       	adc	r25, r21
    4b28:	a6 1f       	adc	r26, r22
    4b2a:	b7 1f       	adc	r27, r23
    4b2c:	80 93 97 03 	sts	0x0397, r24
    4b30:	90 93 98 03 	sts	0x0398, r25
    4b34:	a0 93 99 03 	sts	0x0399, r26
    4b38:	b0 93 9a 03 	sts	0x039A, r27
    4b3c:	80 91 65 03 	lds	r24, 0x0365
    4b40:	90 91 66 03 	lds	r25, 0x0366
    4b44:	aa 27       	eor	r26, r26
    4b46:	97 fd       	sbrc	r25, 7
    4b48:	a0 95       	com	r26
    4b4a:	ba 2f       	mov	r27, r26
    4b4c:	40 91 9b 03 	lds	r20, 0x039B
    4b50:	50 91 9c 03 	lds	r21, 0x039C
    4b54:	60 91 9d 03 	lds	r22, 0x039D
    4b58:	70 91 9e 03 	lds	r23, 0x039E
    4b5c:	84 0f       	add	r24, r20
    4b5e:	95 1f       	adc	r25, r21
    4b60:	a6 1f       	adc	r26, r22
    4b62:	b7 1f       	adc	r27, r23
    4b64:	80 93 9b 03 	sts	0x039B, r24
    4b68:	90 93 9c 03 	sts	0x039C, r25
    4b6c:	a0 93 9d 03 	sts	0x039D, r26
    4b70:	b0 93 9e 03 	sts	0x039E, r27
    4b74:	80 91 67 03 	lds	r24, 0x0367
    4b78:	90 91 68 03 	lds	r25, 0x0368
    4b7c:	aa 27       	eor	r26, r26
    4b7e:	97 fd       	sbrc	r25, 7
    4b80:	a0 95       	com	r26
    4b82:	ba 2f       	mov	r27, r26
    4b84:	40 91 9f 03 	lds	r20, 0x039F
    4b88:	50 91 a0 03 	lds	r21, 0x03A0
    4b8c:	60 91 a1 03 	lds	r22, 0x03A1
    4b90:	70 91 a2 03 	lds	r23, 0x03A2
    4b94:	84 0f       	add	r24, r20
    4b96:	95 1f       	adc	r25, r21
    4b98:	a6 1f       	adc	r26, r22
    4b9a:	b7 1f       	adc	r27, r23
    4b9c:	80 93 9f 03 	sts	0x039F, r24
    4ba0:	90 93 a0 03 	sts	0x03A0, r25
    4ba4:	a0 93 a1 03 	sts	0x03A1, r26
    4ba8:	b0 93 a2 03 	sts	0x03A2, r27
    4bac:	80 91 69 03 	lds	r24, 0x0369
    4bb0:	90 91 6a 03 	lds	r25, 0x036A
    4bb4:	aa 27       	eor	r26, r26
    4bb6:	97 fd       	sbrc	r25, 7
    4bb8:	a0 95       	com	r26
    4bba:	ba 2f       	mov	r27, r26
    4bbc:	40 91 a3 03 	lds	r20, 0x03A3
    4bc0:	50 91 a4 03 	lds	r21, 0x03A4
    4bc4:	60 91 a5 03 	lds	r22, 0x03A5
    4bc8:	70 91 a6 03 	lds	r23, 0x03A6
    4bcc:	84 0f       	add	r24, r20
    4bce:	95 1f       	adc	r25, r21
    4bd0:	a6 1f       	adc	r26, r22
    4bd2:	b7 1f       	adc	r27, r23
    4bd4:	80 93 a3 03 	sts	0x03A3, r24
    4bd8:	90 93 a4 03 	sts	0x03A4, r25
    4bdc:	a0 93 a5 03 	sts	0x03A5, r26
    4be0:	b0 93 a6 03 	sts	0x03A6, r27
    4be4:	80 91 6b 03 	lds	r24, 0x036B
    4be8:	90 91 6c 03 	lds	r25, 0x036C
    4bec:	aa 27       	eor	r26, r26
    4bee:	97 fd       	sbrc	r25, 7
    4bf0:	a0 95       	com	r26
    4bf2:	ba 2f       	mov	r27, r26
    4bf4:	40 91 a7 03 	lds	r20, 0x03A7
    4bf8:	50 91 a8 03 	lds	r21, 0x03A8
    4bfc:	60 91 a9 03 	lds	r22, 0x03A9
    4c00:	70 91 aa 03 	lds	r23, 0x03AA
    4c04:	84 0f       	add	r24, r20
    4c06:	95 1f       	adc	r25, r21
    4c08:	a6 1f       	adc	r26, r22
    4c0a:	b7 1f       	adc	r27, r23
    4c0c:	80 93 a7 03 	sts	0x03A7, r24
    4c10:	90 93 a8 03 	sts	0x03A8, r25
    4c14:	a0 93 a9 03 	sts	0x03A9, r26
    4c18:	b0 93 aa 03 	sts	0x03AA, r27
    4c1c:	80 91 6d 03 	lds	r24, 0x036D
    4c20:	90 91 6e 03 	lds	r25, 0x036E
    4c24:	aa 27       	eor	r26, r26
    4c26:	97 fd       	sbrc	r25, 7
    4c28:	a0 95       	com	r26
    4c2a:	ba 2f       	mov	r27, r26
    4c2c:	40 91 ab 03 	lds	r20, 0x03AB
    4c30:	50 91 ac 03 	lds	r21, 0x03AC
    4c34:	60 91 ad 03 	lds	r22, 0x03AD
    4c38:	70 91 ae 03 	lds	r23, 0x03AE
    4c3c:	84 0f       	add	r24, r20
    4c3e:	95 1f       	adc	r25, r21
    4c40:	a6 1f       	adc	r26, r22
    4c42:	b7 1f       	adc	r27, r23
    4c44:	80 93 ab 03 	sts	0x03AB, r24
    4c48:	90 93 ac 03 	sts	0x03AC, r25
    4c4c:	a0 93 ad 03 	sts	0x03AD, r26
    4c50:	b0 93 ae 03 	sts	0x03AE, r27
    4c54:	80 91 6f 03 	lds	r24, 0x036F
    4c58:	90 91 70 03 	lds	r25, 0x0370
    4c5c:	aa 27       	eor	r26, r26
    4c5e:	97 fd       	sbrc	r25, 7
    4c60:	a0 95       	com	r26
    4c62:	ba 2f       	mov	r27, r26
    4c64:	40 91 af 03 	lds	r20, 0x03AF
    4c68:	50 91 b0 03 	lds	r21, 0x03B0
    4c6c:	60 91 b1 03 	lds	r22, 0x03B1
    4c70:	70 91 b2 03 	lds	r23, 0x03B2
    4c74:	84 0f       	add	r24, r20
    4c76:	95 1f       	adc	r25, r21
    4c78:	a6 1f       	adc	r26, r22
    4c7a:	b7 1f       	adc	r27, r23
    4c7c:	80 93 af 03 	sts	0x03AF, r24
    4c80:	90 93 b0 03 	sts	0x03B0, r25
    4c84:	a0 93 b1 03 	sts	0x03B1, r26
    4c88:	b0 93 b2 03 	sts	0x03B2, r27
    4c8c:	80 91 71 03 	lds	r24, 0x0371
    4c90:	90 91 72 03 	lds	r25, 0x0372
    4c94:	aa 27       	eor	r26, r26
    4c96:	97 fd       	sbrc	r25, 7
    4c98:	a0 95       	com	r26
    4c9a:	ba 2f       	mov	r27, r26
    4c9c:	40 91 b3 03 	lds	r20, 0x03B3
    4ca0:	50 91 b4 03 	lds	r21, 0x03B4
    4ca4:	60 91 b5 03 	lds	r22, 0x03B5
    4ca8:	70 91 b6 03 	lds	r23, 0x03B6
    4cac:	84 0f       	add	r24, r20
    4cae:	95 1f       	adc	r25, r21
    4cb0:	a6 1f       	adc	r26, r22
    4cb2:	b7 1f       	adc	r27, r23
    4cb4:	80 93 b3 03 	sts	0x03B3, r24
    4cb8:	90 93 b4 03 	sts	0x03B4, r25
    4cbc:	a0 93 b5 03 	sts	0x03B5, r26
    4cc0:	b0 93 b6 03 	sts	0x03B6, r27
    4cc4:	80 91 73 03 	lds	r24, 0x0373
    4cc8:	90 91 74 03 	lds	r25, 0x0374
    4ccc:	aa 27       	eor	r26, r26
    4cce:	97 fd       	sbrc	r25, 7
    4cd0:	a0 95       	com	r26
    4cd2:	ba 2f       	mov	r27, r26
    4cd4:	40 91 b7 03 	lds	r20, 0x03B7
    4cd8:	50 91 b8 03 	lds	r21, 0x03B8
    4cdc:	60 91 b9 03 	lds	r22, 0x03B9
    4ce0:	70 91 ba 03 	lds	r23, 0x03BA
    4ce4:	84 0f       	add	r24, r20
    4ce6:	95 1f       	adc	r25, r21
    4ce8:	a6 1f       	adc	r26, r22
    4cea:	b7 1f       	adc	r27, r23
    4cec:	80 93 b7 03 	sts	0x03B7, r24
    4cf0:	90 93 b8 03 	sts	0x03B8, r25
    4cf4:	a0 93 b9 03 	sts	0x03B9, r26
    4cf8:	b0 93 ba 03 	sts	0x03BA, r27
    4cfc:	80 91 75 03 	lds	r24, 0x0375
    4d00:	90 91 76 03 	lds	r25, 0x0376
    4d04:	aa 27       	eor	r26, r26
    4d06:	97 fd       	sbrc	r25, 7
    4d08:	a0 95       	com	r26
    4d0a:	ba 2f       	mov	r27, r26
    4d0c:	40 91 bb 03 	lds	r20, 0x03BB
    4d10:	50 91 bc 03 	lds	r21, 0x03BC
    4d14:	60 91 bd 03 	lds	r22, 0x03BD
    4d18:	70 91 be 03 	lds	r23, 0x03BE
    4d1c:	84 0f       	add	r24, r20
    4d1e:	95 1f       	adc	r25, r21
    4d20:	a6 1f       	adc	r26, r22
    4d22:	b7 1f       	adc	r27, r23
    4d24:	80 93 bb 03 	sts	0x03BB, r24
    4d28:	90 93 bc 03 	sts	0x03BC, r25
    4d2c:	a0 93 bd 03 	sts	0x03BD, r26
    4d30:	b0 93 be 03 	sts	0x03BE, r27
				}

				accOffsetXSum += accX;
    4d34:	80 91 2c 05 	lds	r24, 0x052C
    4d38:	90 91 2d 05 	lds	r25, 0x052D
    4d3c:	40 91 20 05 	lds	r20, 0x0520
    4d40:	50 91 21 05 	lds	r21, 0x0521
    4d44:	84 0f       	add	r24, r20
    4d46:	95 1f       	adc	r25, r21
    4d48:	90 93 2d 05 	sts	0x052D, r25
    4d4c:	80 93 2c 05 	sts	0x052C, r24
				accOffsetYSum += accY;
    4d50:	80 91 2e 05 	lds	r24, 0x052E
    4d54:	90 91 2f 05 	lds	r25, 0x052F
    4d58:	40 91 22 05 	lds	r20, 0x0522
    4d5c:	50 91 23 05 	lds	r21, 0x0523
    4d60:	84 0f       	add	r24, r20
    4d62:	95 1f       	adc	r25, r21
    4d64:	90 93 2f 05 	sts	0x052F, r25
    4d68:	80 93 2e 05 	sts	0x052E, r24
				accOffsetZSum += accZ;
    4d6c:	80 91 30 05 	lds	r24, 0x0530
    4d70:	90 91 31 05 	lds	r25, 0x0531
    4d74:	40 91 24 05 	lds	r20, 0x0524
    4d78:	50 91 25 05 	lds	r21, 0x0525
    4d7c:	84 0f       	add	r24, r20
    4d7e:	95 1f       	adc	r25, r21
    4d80:	90 93 31 05 	sts	0x0531, r25
    4d84:	80 93 30 05 	sts	0x0530, r24

				calibrationCycle++;
    4d88:	2f 5f       	subi	r18, 0xFF	; 255
    4d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d8c:	30 93 41 05 	sts	0x0541, r19
    4d90:	20 93 40 05 	sts	0x0540, r18
    4d94:	80 91 7e 05 	lds	r24, 0x057E
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    4d98:	88 23       	and	r24, r24
    4d9a:	09 f0       	breq	.+2      	; 0x4d9e <calibrateSensors+0x5d6>
    4d9c:	31 cd       	rjmp	.-1438   	; 0x4800 <calibrateSensors+0x38>
    4d9e:	5b ce       	rjmp	.-842    	; 0x4a56 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4da0:	10 92 8f 03 	sts	0x038F, r1
    4da4:	10 92 90 03 	sts	0x0390, r1
    4da8:	10 92 91 03 	sts	0x0391, r1
    4dac:	10 92 92 03 	sts	0x0392, r1
						proximityOffset[i] = 0;
    4db0:	10 92 78 03 	sts	0x0378, r1
    4db4:	10 92 77 03 	sts	0x0377, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4db8:	10 92 93 03 	sts	0x0393, r1
    4dbc:	10 92 94 03 	sts	0x0394, r1
    4dc0:	10 92 95 03 	sts	0x0395, r1
    4dc4:	10 92 96 03 	sts	0x0396, r1
						proximityOffset[i] = 0;
    4dc8:	10 92 7a 03 	sts	0x037A, r1
    4dcc:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4dd0:	10 92 97 03 	sts	0x0397, r1
    4dd4:	10 92 98 03 	sts	0x0398, r1
    4dd8:	10 92 99 03 	sts	0x0399, r1
    4ddc:	10 92 9a 03 	sts	0x039A, r1
						proximityOffset[i] = 0;
    4de0:	10 92 7c 03 	sts	0x037C, r1
    4de4:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4de8:	10 92 9b 03 	sts	0x039B, r1
    4dec:	10 92 9c 03 	sts	0x039C, r1
    4df0:	10 92 9d 03 	sts	0x039D, r1
    4df4:	10 92 9e 03 	sts	0x039E, r1
						proximityOffset[i] = 0;
    4df8:	10 92 7e 03 	sts	0x037E, r1
    4dfc:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4e00:	10 92 9f 03 	sts	0x039F, r1
    4e04:	10 92 a0 03 	sts	0x03A0, r1
    4e08:	10 92 a1 03 	sts	0x03A1, r1
    4e0c:	10 92 a2 03 	sts	0x03A2, r1
						proximityOffset[i] = 0;
    4e10:	10 92 80 03 	sts	0x0380, r1
    4e14:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4e18:	10 92 a3 03 	sts	0x03A3, r1
    4e1c:	10 92 a4 03 	sts	0x03A4, r1
    4e20:	10 92 a5 03 	sts	0x03A5, r1
    4e24:	10 92 a6 03 	sts	0x03A6, r1
						proximityOffset[i] = 0;
    4e28:	10 92 82 03 	sts	0x0382, r1
    4e2c:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4e30:	10 92 a7 03 	sts	0x03A7, r1
    4e34:	10 92 a8 03 	sts	0x03A8, r1
    4e38:	10 92 a9 03 	sts	0x03A9, r1
    4e3c:	10 92 aa 03 	sts	0x03AA, r1
						proximityOffset[i] = 0;
    4e40:	10 92 84 03 	sts	0x0384, r1
    4e44:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4e48:	10 92 ab 03 	sts	0x03AB, r1
    4e4c:	10 92 ac 03 	sts	0x03AC, r1
    4e50:	10 92 ad 03 	sts	0x03AD, r1
    4e54:	10 92 ae 03 	sts	0x03AE, r1
						proximityOffset[i] = 0;
    4e58:	10 92 86 03 	sts	0x0386, r1
    4e5c:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4e60:	10 92 af 03 	sts	0x03AF, r1
    4e64:	10 92 b0 03 	sts	0x03B0, r1
    4e68:	10 92 b1 03 	sts	0x03B1, r1
    4e6c:	10 92 b2 03 	sts	0x03B2, r1
						proximityOffset[i] = 0;
    4e70:	10 92 88 03 	sts	0x0388, r1
    4e74:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4e78:	10 92 b3 03 	sts	0x03B3, r1
    4e7c:	10 92 b4 03 	sts	0x03B4, r1
    4e80:	10 92 b5 03 	sts	0x03B5, r1
    4e84:	10 92 b6 03 	sts	0x03B6, r1
						proximityOffset[i] = 0;
    4e88:	10 92 8a 03 	sts	0x038A, r1
    4e8c:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4e90:	10 92 b7 03 	sts	0x03B7, r1
    4e94:	10 92 b8 03 	sts	0x03B8, r1
    4e98:	10 92 b9 03 	sts	0x03B9, r1
    4e9c:	10 92 ba 03 	sts	0x03BA, r1
						proximityOffset[i] = 0;
    4ea0:	10 92 8c 03 	sts	0x038C, r1
    4ea4:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4ea8:	10 92 bb 03 	sts	0x03BB, r1
    4eac:	10 92 bc 03 	sts	0x03BC, r1
    4eb0:	10 92 bd 03 	sts	0x03BD, r1
    4eb4:	10 92 be 03 	sts	0x03BE, r1
						proximityOffset[i] = 0;
    4eb8:	10 92 8e 03 	sts	0x038E, r1
    4ebc:	10 92 8d 03 	sts	0x038D, r1
					}
					accOffsetXSum = 0;
    4ec0:	10 92 2d 05 	sts	0x052D, r1
    4ec4:	10 92 2c 05 	sts	0x052C, r1
					accOffsetYSum = 0;
    4ec8:	10 92 2f 05 	sts	0x052F, r1
    4ecc:	10 92 2e 05 	sts	0x052E, r1
					accOffsetZSum = 0;
    4ed0:	10 92 31 05 	sts	0x0531, r1
    4ed4:	10 92 30 05 	sts	0x0530, r1

					calibrationCycle++;
    4ed8:	d0 93 41 05 	sts	0x0541, r29
    4edc:	c0 93 40 05 	sts	0x0540, r28
    4ee0:	80 91 7e 05 	lds	r24, 0x057E

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    4ee4:	59 cf       	rjmp	.-334    	; 0x4d98 <calibrateSensors+0x5d0>

00004ee6 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    4ee6:	80 91 1f 05 	lds	r24, 0x051F
    4eea:	88 23       	and	r24, r24
    4eec:	79 f0       	breq	.+30     	; 0x4f0c <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    4eee:	81 30       	cpi	r24, 0x01	; 1
    4ef0:	11 f1       	breq	.+68     	; 0x4f36 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    4ef2:	10 92 21 05 	sts	0x0521, r1
    4ef6:	10 92 20 05 	sts	0x0520, r1
		accY = 0;
    4efa:	10 92 23 05 	sts	0x0523, r1
    4efe:	10 92 22 05 	sts	0x0522, r1
		accZ = 0;
    4f02:	10 92 25 05 	sts	0x0525, r1
    4f06:	10 92 24 05 	sts	0x0524, r1
    4f0a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    4f0c:	80 91 14 02 	lds	r24, 0x0214
    4f10:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    4f14:	80 e0       	ldi	r24, 0x00	; 0
    4f16:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    4f1a:	80 91 14 02 	lds	r24, 0x0214
    4f1e:	8f 5f       	subi	r24, 0xFF	; 255
    4f20:	0e 94 c4 14 	call	0x2988	; 0x2988 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    4f24:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    4f28:	80 93 35 05 	sts	0x0535, r24
    4f2c:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    4f30:	80 93 36 05 	sts	0x0536, r24
    4f34:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    4f36:	80 91 14 02 	lds	r24, 0x0214
    4f3a:	0e 94 77 14 	call	0x28ee	; 0x28ee <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    4f3e:	82 e3       	ldi	r24, 0x32	; 50
    4f40:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    4f44:	80 91 14 02 	lds	r24, 0x0214
    4f48:	8f 5f       	subi	r24, 0xFF	; 255
    4f4a:	0e 94 c4 14 	call	0x2988	; 0x2988 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    4f4e:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    4f52:	80 93 35 05 	sts	0x0535, r24
    4f56:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    4f5a:	80 93 36 05 	sts	0x0536, r24
    4f5e:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    4f62:	80 93 37 05 	sts	0x0537, r24
    4f66:	08 95       	ret

00004f68 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    4f68:	80 91 1f 05 	lds	r24, 0x051F
    4f6c:	88 23       	and	r24, r24
    4f6e:	09 f0       	breq	.+2      	; 0x4f72 <readAccelXYZ_2+0xa>
    4f70:	4e c0       	rjmp	.+156    	; 0x500e <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    4f72:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    4f76:	80 93 37 05 	sts	0x0537, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    4f7a:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    4f7e:	80 93 38 05 	sts	0x0538, r24
    4f82:	0e 94 04 15 	call	0x2a08	; 0x2a08 <i2c_readAck>
    4f86:	80 93 39 05 	sts	0x0539, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    4f8a:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <i2c_readNak>
    4f8e:	80 93 3a 05 	sts	0x053A, r24
		i2c_stop();													// set stop conditon = release bus
    4f92:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    4f96:	80 91 7e 05 	lds	r24, 0x057E
    4f9a:	88 23       	and	r24, r24
    4f9c:	09 f4       	brne	.+2      	; 0x4fa0 <readAccelXYZ_2+0x38>
    4f9e:	47 c0       	rjmp	.+142    	; 0x502e <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    4fa0:	80 91 36 05 	lds	r24, 0x0536
    4fa4:	99 27       	eor	r25, r25
    4fa6:	87 fd       	sbrc	r24, 7
    4fa8:	90 95       	com	r25
    4faa:	98 2f       	mov	r25, r24
    4fac:	88 27       	eor	r24, r24
    4fae:	20 91 35 05 	lds	r18, 0x0535
    4fb2:	33 27       	eor	r19, r19
    4fb4:	27 fd       	sbrc	r18, 7
    4fb6:	30 95       	com	r19
    4fb8:	82 2b       	or	r24, r18
    4fba:	93 2b       	or	r25, r19
    4fbc:	90 93 21 05 	sts	0x0521, r25
    4fc0:	80 93 20 05 	sts	0x0520, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    4fc4:	80 91 38 05 	lds	r24, 0x0538
    4fc8:	99 27       	eor	r25, r25
    4fca:	87 fd       	sbrc	r24, 7
    4fcc:	90 95       	com	r25
    4fce:	98 2f       	mov	r25, r24
    4fd0:	88 27       	eor	r24, r24
    4fd2:	20 91 37 05 	lds	r18, 0x0537
    4fd6:	33 27       	eor	r19, r19
    4fd8:	27 fd       	sbrc	r18, 7
    4fda:	30 95       	com	r19
    4fdc:	82 2b       	or	r24, r18
    4fde:	93 2b       	or	r25, r19
    4fe0:	90 93 23 05 	sts	0x0523, r25
    4fe4:	80 93 22 05 	sts	0x0522, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    4fe8:	80 91 3a 05 	lds	r24, 0x053A
    4fec:	99 27       	eor	r25, r25
    4fee:	87 fd       	sbrc	r24, 7
    4ff0:	90 95       	com	r25
    4ff2:	98 2f       	mov	r25, r24
    4ff4:	88 27       	eor	r24, r24
    4ff6:	20 91 39 05 	lds	r18, 0x0539
    4ffa:	33 27       	eor	r19, r19
    4ffc:	27 fd       	sbrc	r18, 7
    4ffe:	30 95       	com	r19
    5000:	82 2b       	or	r24, r18
    5002:	93 2b       	or	r25, r19
    5004:	90 93 25 05 	sts	0x0525, r25
    5008:	80 93 24 05 	sts	0x0524, r24
    500c:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    500e:	81 30       	cpi	r24, 0x01	; 1
    5010:	09 f4       	brne	.+2      	; 0x5014 <readAccelXYZ_2+0xac>
    5012:	b3 cf       	rjmp	.-154    	; 0x4f7a <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    5014:	10 92 21 05 	sts	0x0521, r1
    5018:	10 92 20 05 	sts	0x0520, r1
		accY = 0;
    501c:	10 92 23 05 	sts	0x0523, r1
    5020:	10 92 22 05 	sts	0x0522, r1
		accZ = 0;
    5024:	10 92 25 05 	sts	0x0525, r1
    5028:	10 92 24 05 	sts	0x0524, r1
    502c:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    502e:	80 91 36 05 	lds	r24, 0x0536
    5032:	99 27       	eor	r25, r25
    5034:	87 fd       	sbrc	r24, 7
    5036:	90 95       	com	r25
    5038:	98 2f       	mov	r25, r24
    503a:	88 27       	eor	r24, r24
    503c:	20 91 35 05 	lds	r18, 0x0535
    5040:	33 27       	eor	r19, r19
    5042:	27 fd       	sbrc	r18, 7
    5044:	30 95       	com	r19
    5046:	82 2b       	or	r24, r18
    5048:	93 2b       	or	r25, r19
    504a:	20 91 26 05 	lds	r18, 0x0526
    504e:	30 91 27 05 	lds	r19, 0x0527
    5052:	82 1b       	sub	r24, r18
    5054:	93 0b       	sbc	r25, r19
    5056:	90 93 21 05 	sts	0x0521, r25
    505a:	80 93 20 05 	sts	0x0520, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    505e:	80 91 38 05 	lds	r24, 0x0538
    5062:	99 27       	eor	r25, r25
    5064:	87 fd       	sbrc	r24, 7
    5066:	90 95       	com	r25
    5068:	98 2f       	mov	r25, r24
    506a:	88 27       	eor	r24, r24
    506c:	20 91 37 05 	lds	r18, 0x0537
    5070:	33 27       	eor	r19, r19
    5072:	27 fd       	sbrc	r18, 7
    5074:	30 95       	com	r19
    5076:	82 2b       	or	r24, r18
    5078:	93 2b       	or	r25, r19
    507a:	20 91 28 05 	lds	r18, 0x0528
    507e:	30 91 29 05 	lds	r19, 0x0529
    5082:	82 1b       	sub	r24, r18
    5084:	93 0b       	sbc	r25, r19
    5086:	90 93 23 05 	sts	0x0523, r25
    508a:	80 93 22 05 	sts	0x0522, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    508e:	80 91 3a 05 	lds	r24, 0x053A
    5092:	99 27       	eor	r25, r25
    5094:	87 fd       	sbrc	r24, 7
    5096:	90 95       	com	r25
    5098:	98 2f       	mov	r25, r24
    509a:	88 27       	eor	r24, r24
    509c:	20 91 39 05 	lds	r18, 0x0539
    50a0:	33 27       	eor	r19, r19
    50a2:	27 fd       	sbrc	r18, 7
    50a4:	30 95       	com	r19
    50a6:	82 2b       	or	r24, r18
    50a8:	93 2b       	or	r25, r19
    50aa:	20 91 2a 05 	lds	r18, 0x052A
    50ae:	30 91 2b 05 	lds	r19, 0x052B
    50b2:	82 1b       	sub	r24, r18
    50b4:	93 0b       	sbc	r25, r19
    50b6:	90 93 25 05 	sts	0x0525, r25
    50ba:	80 93 24 05 	sts	0x0524, r24
    50be:	08 95       	ret

000050c0 <computeAngle>:

	}

}

void computeAngle() {
    50c0:	ef 92       	push	r14
    50c2:	ff 92       	push	r15
    50c4:	0f 93       	push	r16
    50c6:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    50c8:	80 91 24 05 	lds	r24, 0x0524
    50cc:	90 91 25 05 	lds	r25, 0x0525
    50d0:	97 fd       	sbrc	r25, 7
    50d2:	5b c0       	rjmp	.+182    	; 0x518a <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    50d4:	80 31       	cpi	r24, 0x10	; 16
    50d6:	91 05       	cpc	r25, r1
    50d8:	08 f0       	brcs	.+2      	; 0x50dc <computeAngle+0x1c>
    50da:	42 c0       	rjmp	.+132    	; 0x5160 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    50dc:	81 e0       	ldi	r24, 0x01	; 1
    50de:	80 93 16 02 	sts	0x0216, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    50e2:	90 91 15 02 	lds	r25, 0x0215
    50e6:	98 17       	cp	r25, r24
    50e8:	09 f4       	brne	.+2      	; 0x50ec <computeAngle+0x2c>
    50ea:	42 c0       	rjmp	.+132    	; 0x5170 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    50ec:	10 92 34 05 	sts	0x0534, r1
	}
	prevPosition = currPosition;
    50f0:	80 93 15 02 	sts	0x0215, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2((float)accX, (float)accY)*RAD_2_DEG);
    50f4:	60 91 20 05 	lds	r22, 0x0520
    50f8:	70 91 21 05 	lds	r23, 0x0521
    50fc:	88 27       	eor	r24, r24
    50fe:	77 fd       	sbrc	r23, 7
    5100:	80 95       	com	r24
    5102:	98 2f       	mov	r25, r24
    5104:	0e 94 c8 29 	call	0x5390	; 0x5390 <__floatsisf>
    5108:	7b 01       	movw	r14, r22
    510a:	8c 01       	movw	r16, r24
    510c:	60 91 22 05 	lds	r22, 0x0522
    5110:	70 91 23 05 	lds	r23, 0x0523
    5114:	88 27       	eor	r24, r24
    5116:	77 fd       	sbrc	r23, 7
    5118:	80 95       	com	r24
    511a:	98 2f       	mov	r25, r24
    511c:	0e 94 c8 29 	call	0x5390	; 0x5390 <__floatsisf>
    5120:	9b 01       	movw	r18, r22
    5122:	ac 01       	movw	r20, r24
    5124:	c8 01       	movw	r24, r16
    5126:	b7 01       	movw	r22, r14
    5128:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <atan2>
    512c:	21 ee       	ldi	r18, 0xE1	; 225
    512e:	3e e2       	ldi	r19, 0x2E	; 46
    5130:	45 e6       	ldi	r20, 0x65	; 101
    5132:	52 e4       	ldi	r21, 0x42	; 66
    5134:	0e 94 c9 28 	call	0x5192	; 0x5192 <__mulsf3>
    5138:	0e 94 26 2a 	call	0x544c	; 0x544c <__fixsfsi>
    513c:	9b 01       	movw	r18, r22
    513e:	70 93 33 05 	sts	0x0533, r23
    5142:	60 93 32 05 	sts	0x0532, r22

	if(currentAngle < 0) {
    5146:	77 ff       	sbrs	r23, 7
    5148:	06 c0       	rjmp	.+12     	; 0x5156 <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    514a:	28 59       	subi	r18, 0x98	; 152
    514c:	3e 4f       	sbci	r19, 0xFE	; 254
    514e:	30 93 33 05 	sts	0x0533, r19
    5152:	20 93 32 05 	sts	0x0532, r18
	}

}
    5156:	1f 91       	pop	r17
    5158:	0f 91       	pop	r16
    515a:	ff 90       	pop	r15
    515c:	ef 90       	pop	r14
    515e:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    5160:	10 92 16 02 	sts	0x0216, r1
    5164:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    5166:	90 91 15 02 	lds	r25, 0x0215
    516a:	98 17       	cp	r25, r24
    516c:	09 f0       	breq	.+2      	; 0x5170 <computeAngle+0xb0>
    516e:	be cf       	rjmp	.-132    	; 0x50ec <computeAngle+0x2c>
		timesInSamePos++;
    5170:	90 91 34 05 	lds	r25, 0x0534
    5174:	9f 5f       	subi	r25, 0xFF	; 255
    5176:	90 93 34 05 	sts	0x0534, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    517a:	95 30       	cpi	r25, 0x05	; 5
    517c:	08 f4       	brcc	.+2      	; 0x5180 <computeAngle+0xc0>
    517e:	b8 cf       	rjmp	.-144    	; 0x50f0 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    5180:	10 92 34 05 	sts	0x0534, r1
			robotPosition = currPosition;
    5184:	80 93 17 02 	sts	0x0217, r24
    5188:	b3 cf       	rjmp	.-154    	; 0x50f0 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    518a:	90 95       	com	r25
    518c:	81 95       	neg	r24
    518e:	9f 4f       	sbci	r25, 0xFF	; 255
    5190:	a1 cf       	rjmp	.-190    	; 0x50d4 <computeAngle+0x14>

00005192 <__mulsf3>:
    5192:	a0 e2       	ldi	r26, 0x20	; 32
    5194:	b0 e0       	ldi	r27, 0x00	; 0
    5196:	ef ec       	ldi	r30, 0xCF	; 207
    5198:	f8 e2       	ldi	r31, 0x28	; 40
    519a:	0c 94 5e 2c 	jmp	0x58bc	; 0x58bc <__prologue_saves__+0x4>
    519e:	69 83       	std	Y+1, r22	; 0x01
    51a0:	7a 83       	std	Y+2, r23	; 0x02
    51a2:	8b 83       	std	Y+3, r24	; 0x03
    51a4:	9c 83       	std	Y+4, r25	; 0x04
    51a6:	2d 83       	std	Y+5, r18	; 0x05
    51a8:	3e 83       	std	Y+6, r19	; 0x06
    51aa:	4f 83       	std	Y+7, r20	; 0x07
    51ac:	58 87       	std	Y+8, r21	; 0x08
    51ae:	99 e0       	ldi	r25, 0x09	; 9
    51b0:	e9 2e       	mov	r14, r25
    51b2:	f1 2c       	mov	r15, r1
    51b4:	ec 0e       	add	r14, r28
    51b6:	fd 1e       	adc	r15, r29
    51b8:	b7 01       	movw	r22, r14
    51ba:	ce 01       	movw	r24, r28
    51bc:	01 96       	adiw	r24, 0x01	; 1
    51be:	0e 94 a6 2b 	call	0x574c	; 0x574c <__unpack_f>
    51c2:	8e 01       	movw	r16, r28
    51c4:	0f 5e       	subi	r16, 0xEF	; 239
    51c6:	1f 4f       	sbci	r17, 0xFF	; 255
    51c8:	b8 01       	movw	r22, r16
    51ca:	ce 01       	movw	r24, r28
    51cc:	05 96       	adiw	r24, 0x05	; 5
    51ce:	0e 94 a6 2b 	call	0x574c	; 0x574c <__unpack_f>
    51d2:	99 85       	ldd	r25, Y+9	; 0x09
    51d4:	92 30       	cpi	r25, 0x02	; 2
    51d6:	88 f0       	brcs	.+34     	; 0x51fa <__mulsf3+0x68>
    51d8:	89 89       	ldd	r24, Y+17	; 0x11
    51da:	82 30       	cpi	r24, 0x02	; 2
    51dc:	c0 f0       	brcs	.+48     	; 0x520e <__mulsf3+0x7c>
    51de:	94 30       	cpi	r25, 0x04	; 4
    51e0:	19 f4       	brne	.+6      	; 0x51e8 <__mulsf3+0x56>
    51e2:	82 30       	cpi	r24, 0x02	; 2
    51e4:	29 f0       	breq	.+10     	; 0x51f0 <__mulsf3+0x5e>
    51e6:	09 c0       	rjmp	.+18     	; 0x51fa <__mulsf3+0x68>
    51e8:	84 30       	cpi	r24, 0x04	; 4
    51ea:	29 f4       	brne	.+10     	; 0x51f6 <__mulsf3+0x64>
    51ec:	92 30       	cpi	r25, 0x02	; 2
    51ee:	79 f4       	brne	.+30     	; 0x520e <__mulsf3+0x7c>
    51f0:	68 e1       	ldi	r22, 0x18	; 24
    51f2:	72 e0       	ldi	r23, 0x02	; 2
    51f4:	c6 c0       	rjmp	.+396    	; 0x5382 <__mulsf3+0x1f0>
    51f6:	92 30       	cpi	r25, 0x02	; 2
    51f8:	41 f4       	brne	.+16     	; 0x520a <__mulsf3+0x78>
    51fa:	20 e0       	ldi	r18, 0x00	; 0
    51fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    51fe:	8a 89       	ldd	r24, Y+18	; 0x12
    5200:	98 13       	cpse	r25, r24
    5202:	21 e0       	ldi	r18, 0x01	; 1
    5204:	2a 87       	std	Y+10, r18	; 0x0a
    5206:	b7 01       	movw	r22, r14
    5208:	bc c0       	rjmp	.+376    	; 0x5382 <__mulsf3+0x1f0>
    520a:	82 30       	cpi	r24, 0x02	; 2
    520c:	41 f4       	brne	.+16     	; 0x521e <__mulsf3+0x8c>
    520e:	20 e0       	ldi	r18, 0x00	; 0
    5210:	9a 85       	ldd	r25, Y+10	; 0x0a
    5212:	8a 89       	ldd	r24, Y+18	; 0x12
    5214:	98 13       	cpse	r25, r24
    5216:	21 e0       	ldi	r18, 0x01	; 1
    5218:	2a 8b       	std	Y+18, r18	; 0x12
    521a:	b8 01       	movw	r22, r16
    521c:	b2 c0       	rjmp	.+356    	; 0x5382 <__mulsf3+0x1f0>
    521e:	cd 84       	ldd	r12, Y+13	; 0x0d
    5220:	de 84       	ldd	r13, Y+14	; 0x0e
    5222:	ef 84       	ldd	r14, Y+15	; 0x0f
    5224:	f8 88       	ldd	r15, Y+16	; 0x10
    5226:	0d 89       	ldd	r16, Y+21	; 0x15
    5228:	1e 89       	ldd	r17, Y+22	; 0x16
    522a:	2f 89       	ldd	r18, Y+23	; 0x17
    522c:	38 8d       	ldd	r19, Y+24	; 0x18
    522e:	88 24       	eor	r8, r8
    5230:	99 24       	eor	r9, r9
    5232:	54 01       	movw	r10, r8
    5234:	40 e0       	ldi	r20, 0x00	; 0
    5236:	50 e0       	ldi	r21, 0x00	; 0
    5238:	60 e0       	ldi	r22, 0x00	; 0
    523a:	70 e0       	ldi	r23, 0x00	; 0
    523c:	44 24       	eor	r4, r4
    523e:	55 24       	eor	r5, r5
    5240:	32 01       	movw	r6, r4
    5242:	e0 e0       	ldi	r30, 0x00	; 0
    5244:	f0 e0       	ldi	r31, 0x00	; 0
    5246:	c6 01       	movw	r24, r12
    5248:	81 70       	andi	r24, 0x01	; 1
    524a:	90 70       	andi	r25, 0x00	; 0
    524c:	89 2b       	or	r24, r25
    524e:	d9 f0       	breq	.+54     	; 0x5286 <__mulsf3+0xf4>
    5250:	80 0e       	add	r8, r16
    5252:	91 1e       	adc	r9, r17
    5254:	a2 1e       	adc	r10, r18
    5256:	b3 1e       	adc	r11, r19
    5258:	db 01       	movw	r26, r22
    525a:	ca 01       	movw	r24, r20
    525c:	84 0d       	add	r24, r4
    525e:	95 1d       	adc	r25, r5
    5260:	a6 1d       	adc	r26, r6
    5262:	b7 1d       	adc	r27, r7
    5264:	40 e0       	ldi	r20, 0x00	; 0
    5266:	50 e0       	ldi	r21, 0x00	; 0
    5268:	60 e0       	ldi	r22, 0x00	; 0
    526a:	70 e0       	ldi	r23, 0x00	; 0
    526c:	80 16       	cp	r8, r16
    526e:	91 06       	cpc	r9, r17
    5270:	a2 06       	cpc	r10, r18
    5272:	b3 06       	cpc	r11, r19
    5274:	20 f4       	brcc	.+8      	; 0x527e <__mulsf3+0xec>
    5276:	41 e0       	ldi	r20, 0x01	; 1
    5278:	50 e0       	ldi	r21, 0x00	; 0
    527a:	60 e0       	ldi	r22, 0x00	; 0
    527c:	70 e0       	ldi	r23, 0x00	; 0
    527e:	48 0f       	add	r20, r24
    5280:	59 1f       	adc	r21, r25
    5282:	6a 1f       	adc	r22, r26
    5284:	7b 1f       	adc	r23, r27
    5286:	44 0c       	add	r4, r4
    5288:	55 1c       	adc	r5, r5
    528a:	66 1c       	adc	r6, r6
    528c:	77 1c       	adc	r7, r7
    528e:	37 ff       	sbrs	r19, 7
    5290:	08 c0       	rjmp	.+16     	; 0x52a2 <__mulsf3+0x110>
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	a0 e0       	ldi	r26, 0x00	; 0
    5298:	b0 e0       	ldi	r27, 0x00	; 0
    529a:	48 2a       	or	r4, r24
    529c:	59 2a       	or	r5, r25
    529e:	6a 2a       	or	r6, r26
    52a0:	7b 2a       	or	r7, r27
    52a2:	31 96       	adiw	r30, 0x01	; 1
    52a4:	e0 32       	cpi	r30, 0x20	; 32
    52a6:	f1 05       	cpc	r31, r1
    52a8:	49 f0       	breq	.+18     	; 0x52bc <__mulsf3+0x12a>
    52aa:	00 0f       	add	r16, r16
    52ac:	11 1f       	adc	r17, r17
    52ae:	22 1f       	adc	r18, r18
    52b0:	33 1f       	adc	r19, r19
    52b2:	f6 94       	lsr	r15
    52b4:	e7 94       	ror	r14
    52b6:	d7 94       	ror	r13
    52b8:	c7 94       	ror	r12
    52ba:	c5 cf       	rjmp	.-118    	; 0x5246 <__mulsf3+0xb4>
    52bc:	8b 89       	ldd	r24, Y+19	; 0x13
    52be:	9c 89       	ldd	r25, Y+20	; 0x14
    52c0:	2b 85       	ldd	r18, Y+11	; 0x0b
    52c2:	3c 85       	ldd	r19, Y+12	; 0x0c
    52c4:	82 0f       	add	r24, r18
    52c6:	93 1f       	adc	r25, r19
    52c8:	02 96       	adiw	r24, 0x02	; 2
    52ca:	9c 8f       	std	Y+28, r25	; 0x1c
    52cc:	8b 8f       	std	Y+27, r24	; 0x1b
    52ce:	1a 8e       	std	Y+26, r1	; 0x1a
    52d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    52d2:	8a 89       	ldd	r24, Y+18	; 0x12
    52d4:	98 17       	cp	r25, r24
    52d6:	11 f0       	breq	.+4      	; 0x52dc <__mulsf3+0x14a>
    52d8:	81 e0       	ldi	r24, 0x01	; 1
    52da:	8a 8f       	std	Y+26, r24	; 0x1a
    52dc:	2b 8d       	ldd	r18, Y+27	; 0x1b
    52de:	3c 8d       	ldd	r19, Y+28	; 0x1c
    52e0:	17 c0       	rjmp	.+46     	; 0x5310 <__mulsf3+0x17e>
    52e2:	ca 01       	movw	r24, r20
    52e4:	81 70       	andi	r24, 0x01	; 1
    52e6:	90 70       	andi	r25, 0x00	; 0
    52e8:	89 2b       	or	r24, r25
    52ea:	61 f0       	breq	.+24     	; 0x5304 <__mulsf3+0x172>
    52ec:	b6 94       	lsr	r11
    52ee:	a7 94       	ror	r10
    52f0:	97 94       	ror	r9
    52f2:	87 94       	ror	r8
    52f4:	80 e0       	ldi	r24, 0x00	; 0
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	a0 e0       	ldi	r26, 0x00	; 0
    52fa:	b0 e8       	ldi	r27, 0x80	; 128
    52fc:	88 2a       	or	r8, r24
    52fe:	99 2a       	or	r9, r25
    5300:	aa 2a       	or	r10, r26
    5302:	bb 2a       	or	r11, r27
    5304:	76 95       	lsr	r23
    5306:	67 95       	ror	r22
    5308:	57 95       	ror	r21
    530a:	47 95       	ror	r20
    530c:	2f 5f       	subi	r18, 0xFF	; 255
    530e:	3f 4f       	sbci	r19, 0xFF	; 255
    5310:	77 fd       	sbrc	r23, 7
    5312:	e7 cf       	rjmp	.-50     	; 0x52e2 <__mulsf3+0x150>
    5314:	c9 01       	movw	r24, r18
    5316:	0b c0       	rjmp	.+22     	; 0x532e <__mulsf3+0x19c>
    5318:	44 0f       	add	r20, r20
    531a:	55 1f       	adc	r21, r21
    531c:	66 1f       	adc	r22, r22
    531e:	77 1f       	adc	r23, r23
    5320:	b7 fc       	sbrc	r11, 7
    5322:	41 60       	ori	r20, 0x01	; 1
    5324:	88 0c       	add	r8, r8
    5326:	99 1c       	adc	r9, r9
    5328:	aa 1c       	adc	r10, r10
    532a:	bb 1c       	adc	r11, r11
    532c:	01 97       	sbiw	r24, 0x01	; 1
    532e:	40 30       	cpi	r20, 0x00	; 0
    5330:	a0 e0       	ldi	r26, 0x00	; 0
    5332:	5a 07       	cpc	r21, r26
    5334:	a0 e0       	ldi	r26, 0x00	; 0
    5336:	6a 07       	cpc	r22, r26
    5338:	a0 e4       	ldi	r26, 0x40	; 64
    533a:	7a 07       	cpc	r23, r26
    533c:	68 f3       	brcs	.-38     	; 0x5318 <__mulsf3+0x186>
    533e:	9c 8f       	std	Y+28, r25	; 0x1c
    5340:	8b 8f       	std	Y+27, r24	; 0x1b
    5342:	db 01       	movw	r26, r22
    5344:	ca 01       	movw	r24, r20
    5346:	8f 77       	andi	r24, 0x7F	; 127
    5348:	90 70       	andi	r25, 0x00	; 0
    534a:	a0 70       	andi	r26, 0x00	; 0
    534c:	b0 70       	andi	r27, 0x00	; 0
    534e:	80 34       	cpi	r24, 0x40	; 64
    5350:	91 05       	cpc	r25, r1
    5352:	a1 05       	cpc	r26, r1
    5354:	b1 05       	cpc	r27, r1
    5356:	61 f4       	brne	.+24     	; 0x5370 <__mulsf3+0x1de>
    5358:	47 fd       	sbrc	r20, 7
    535a:	0a c0       	rjmp	.+20     	; 0x5370 <__mulsf3+0x1de>
    535c:	81 14       	cp	r8, r1
    535e:	91 04       	cpc	r9, r1
    5360:	a1 04       	cpc	r10, r1
    5362:	b1 04       	cpc	r11, r1
    5364:	29 f0       	breq	.+10     	; 0x5370 <__mulsf3+0x1de>
    5366:	40 5c       	subi	r20, 0xC0	; 192
    5368:	5f 4f       	sbci	r21, 0xFF	; 255
    536a:	6f 4f       	sbci	r22, 0xFF	; 255
    536c:	7f 4f       	sbci	r23, 0xFF	; 255
    536e:	40 78       	andi	r20, 0x80	; 128
    5370:	4d 8f       	std	Y+29, r20	; 0x1d
    5372:	5e 8f       	std	Y+30, r21	; 0x1e
    5374:	6f 8f       	std	Y+31, r22	; 0x1f
    5376:	78 a3       	std	Y+32, r23	; 0x20
    5378:	83 e0       	ldi	r24, 0x03	; 3
    537a:	89 8f       	std	Y+25, r24	; 0x19
    537c:	be 01       	movw	r22, r28
    537e:	67 5e       	subi	r22, 0xE7	; 231
    5380:	7f 4f       	sbci	r23, 0xFF	; 255
    5382:	cb 01       	movw	r24, r22
    5384:	0e 94 c6 2a 	call	0x558c	; 0x558c <__pack_f>
    5388:	e0 e1       	ldi	r30, 0x10	; 16
    538a:	a0 96       	adiw	r28, 0x20	; 32
    538c:	0c 94 7a 2c 	jmp	0x58f4	; 0x58f4 <__epilogue_restores__+0x4>

00005390 <__floatsisf>:
    5390:	a8 e0       	ldi	r26, 0x08	; 8
    5392:	b0 e0       	ldi	r27, 0x00	; 0
    5394:	ee ec       	ldi	r30, 0xCE	; 206
    5396:	f9 e2       	ldi	r31, 0x29	; 41
    5398:	0c 94 65 2c 	jmp	0x58ca	; 0x58ca <__prologue_saves__+0x12>
    539c:	9b 01       	movw	r18, r22
    539e:	ac 01       	movw	r20, r24
    53a0:	83 e0       	ldi	r24, 0x03	; 3
    53a2:	89 83       	std	Y+1, r24	; 0x01
    53a4:	da 01       	movw	r26, r20
    53a6:	c9 01       	movw	r24, r18
    53a8:	88 27       	eor	r24, r24
    53aa:	b7 fd       	sbrc	r27, 7
    53ac:	83 95       	inc	r24
    53ae:	99 27       	eor	r25, r25
    53b0:	aa 27       	eor	r26, r26
    53b2:	bb 27       	eor	r27, r27
    53b4:	b8 2e       	mov	r11, r24
    53b6:	21 15       	cp	r18, r1
    53b8:	31 05       	cpc	r19, r1
    53ba:	41 05       	cpc	r20, r1
    53bc:	51 05       	cpc	r21, r1
    53be:	19 f4       	brne	.+6      	; 0x53c6 <__floatsisf+0x36>
    53c0:	82 e0       	ldi	r24, 0x02	; 2
    53c2:	89 83       	std	Y+1, r24	; 0x01
    53c4:	3a c0       	rjmp	.+116    	; 0x543a <__floatsisf+0xaa>
    53c6:	88 23       	and	r24, r24
    53c8:	a9 f0       	breq	.+42     	; 0x53f4 <__floatsisf+0x64>
    53ca:	20 30       	cpi	r18, 0x00	; 0
    53cc:	80 e0       	ldi	r24, 0x00	; 0
    53ce:	38 07       	cpc	r19, r24
    53d0:	80 e0       	ldi	r24, 0x00	; 0
    53d2:	48 07       	cpc	r20, r24
    53d4:	80 e8       	ldi	r24, 0x80	; 128
    53d6:	58 07       	cpc	r21, r24
    53d8:	29 f4       	brne	.+10     	; 0x53e4 <__floatsisf+0x54>
    53da:	60 e0       	ldi	r22, 0x00	; 0
    53dc:	70 e0       	ldi	r23, 0x00	; 0
    53de:	80 e0       	ldi	r24, 0x00	; 0
    53e0:	9f ec       	ldi	r25, 0xCF	; 207
    53e2:	30 c0       	rjmp	.+96     	; 0x5444 <__floatsisf+0xb4>
    53e4:	ee 24       	eor	r14, r14
    53e6:	ff 24       	eor	r15, r15
    53e8:	87 01       	movw	r16, r14
    53ea:	e2 1a       	sub	r14, r18
    53ec:	f3 0a       	sbc	r15, r19
    53ee:	04 0b       	sbc	r16, r20
    53f0:	15 0b       	sbc	r17, r21
    53f2:	02 c0       	rjmp	.+4      	; 0x53f8 <__floatsisf+0x68>
    53f4:	79 01       	movw	r14, r18
    53f6:	8a 01       	movw	r16, r20
    53f8:	8e e1       	ldi	r24, 0x1E	; 30
    53fa:	c8 2e       	mov	r12, r24
    53fc:	d1 2c       	mov	r13, r1
    53fe:	dc 82       	std	Y+4, r13	; 0x04
    5400:	cb 82       	std	Y+3, r12	; 0x03
    5402:	ed 82       	std	Y+5, r14	; 0x05
    5404:	fe 82       	std	Y+6, r15	; 0x06
    5406:	0f 83       	std	Y+7, r16	; 0x07
    5408:	18 87       	std	Y+8, r17	; 0x08
    540a:	c8 01       	movw	r24, r16
    540c:	b7 01       	movw	r22, r14
    540e:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__clzsi2>
    5412:	01 97       	sbiw	r24, 0x01	; 1
    5414:	18 16       	cp	r1, r24
    5416:	19 06       	cpc	r1, r25
    5418:	84 f4       	brge	.+32     	; 0x543a <__floatsisf+0xaa>
    541a:	08 2e       	mov	r0, r24
    541c:	04 c0       	rjmp	.+8      	; 0x5426 <__floatsisf+0x96>
    541e:	ee 0c       	add	r14, r14
    5420:	ff 1c       	adc	r15, r15
    5422:	00 1f       	adc	r16, r16
    5424:	11 1f       	adc	r17, r17
    5426:	0a 94       	dec	r0
    5428:	d2 f7       	brpl	.-12     	; 0x541e <__floatsisf+0x8e>
    542a:	ed 82       	std	Y+5, r14	; 0x05
    542c:	fe 82       	std	Y+6, r15	; 0x06
    542e:	0f 83       	std	Y+7, r16	; 0x07
    5430:	18 87       	std	Y+8, r17	; 0x08
    5432:	c8 1a       	sub	r12, r24
    5434:	d9 0a       	sbc	r13, r25
    5436:	dc 82       	std	Y+4, r13	; 0x04
    5438:	cb 82       	std	Y+3, r12	; 0x03
    543a:	ba 82       	std	Y+2, r11	; 0x02
    543c:	ce 01       	movw	r24, r28
    543e:	01 96       	adiw	r24, 0x01	; 1
    5440:	0e 94 c6 2a 	call	0x558c	; 0x558c <__pack_f>
    5444:	e9 e0       	ldi	r30, 0x09	; 9
    5446:	28 96       	adiw	r28, 0x08	; 8
    5448:	0c 94 81 2c 	jmp	0x5902	; 0x5902 <__epilogue_restores__+0x12>

0000544c <__fixsfsi>:
    544c:	ac e0       	ldi	r26, 0x0C	; 12
    544e:	b0 e0       	ldi	r27, 0x00	; 0
    5450:	ec e2       	ldi	r30, 0x2C	; 44
    5452:	fa e2       	ldi	r31, 0x2A	; 42
    5454:	0c 94 6c 2c 	jmp	0x58d8	; 0x58d8 <__prologue_saves__+0x20>
    5458:	69 83       	std	Y+1, r22	; 0x01
    545a:	7a 83       	std	Y+2, r23	; 0x02
    545c:	8b 83       	std	Y+3, r24	; 0x03
    545e:	9c 83       	std	Y+4, r25	; 0x04
    5460:	be 01       	movw	r22, r28
    5462:	6b 5f       	subi	r22, 0xFB	; 251
    5464:	7f 4f       	sbci	r23, 0xFF	; 255
    5466:	ce 01       	movw	r24, r28
    5468:	01 96       	adiw	r24, 0x01	; 1
    546a:	0e 94 a6 2b 	call	0x574c	; 0x574c <__unpack_f>
    546e:	8d 81       	ldd	r24, Y+5	; 0x05
    5470:	82 30       	cpi	r24, 0x02	; 2
    5472:	a9 f1       	breq	.+106    	; 0x54de <__fixsfsi+0x92>
    5474:	82 30       	cpi	r24, 0x02	; 2
    5476:	98 f1       	brcs	.+102    	; 0x54de <__fixsfsi+0x92>
    5478:	84 30       	cpi	r24, 0x04	; 4
    547a:	21 f4       	brne	.+8      	; 0x5484 <__fixsfsi+0x38>
    547c:	8e 81       	ldd	r24, Y+6	; 0x06
    547e:	88 23       	and	r24, r24
    5480:	59 f4       	brne	.+22     	; 0x5498 <__fixsfsi+0x4c>
    5482:	0f c0       	rjmp	.+30     	; 0x54a2 <__fixsfsi+0x56>
    5484:	2f 81       	ldd	r18, Y+7	; 0x07
    5486:	38 85       	ldd	r19, Y+8	; 0x08
    5488:	37 fd       	sbrc	r19, 7
    548a:	29 c0       	rjmp	.+82     	; 0x54de <__fixsfsi+0x92>
    548c:	6e 81       	ldd	r22, Y+6	; 0x06
    548e:	2f 31       	cpi	r18, 0x1F	; 31
    5490:	31 05       	cpc	r19, r1
    5492:	64 f0       	brlt	.+24     	; 0x54ac <__fixsfsi+0x60>
    5494:	66 23       	and	r22, r22
    5496:	29 f0       	breq	.+10     	; 0x54a2 <__fixsfsi+0x56>
    5498:	20 e0       	ldi	r18, 0x00	; 0
    549a:	30 e0       	ldi	r19, 0x00	; 0
    549c:	40 e0       	ldi	r20, 0x00	; 0
    549e:	50 e8       	ldi	r21, 0x80	; 128
    54a0:	22 c0       	rjmp	.+68     	; 0x54e6 <__fixsfsi+0x9a>
    54a2:	2f ef       	ldi	r18, 0xFF	; 255
    54a4:	3f ef       	ldi	r19, 0xFF	; 255
    54a6:	4f ef       	ldi	r20, 0xFF	; 255
    54a8:	5f e7       	ldi	r21, 0x7F	; 127
    54aa:	1d c0       	rjmp	.+58     	; 0x54e6 <__fixsfsi+0x9a>
    54ac:	8e e1       	ldi	r24, 0x1E	; 30
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	82 1b       	sub	r24, r18
    54b2:	93 0b       	sbc	r25, r19
    54b4:	29 85       	ldd	r18, Y+9	; 0x09
    54b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    54b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    54ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    54bc:	04 c0       	rjmp	.+8      	; 0x54c6 <__fixsfsi+0x7a>
    54be:	56 95       	lsr	r21
    54c0:	47 95       	ror	r20
    54c2:	37 95       	ror	r19
    54c4:	27 95       	ror	r18
    54c6:	8a 95       	dec	r24
    54c8:	d2 f7       	brpl	.-12     	; 0x54be <__fixsfsi+0x72>
    54ca:	66 23       	and	r22, r22
    54cc:	61 f0       	breq	.+24     	; 0x54e6 <__fixsfsi+0x9a>
    54ce:	50 95       	com	r21
    54d0:	40 95       	com	r20
    54d2:	30 95       	com	r19
    54d4:	21 95       	neg	r18
    54d6:	3f 4f       	sbci	r19, 0xFF	; 255
    54d8:	4f 4f       	sbci	r20, 0xFF	; 255
    54da:	5f 4f       	sbci	r21, 0xFF	; 255
    54dc:	04 c0       	rjmp	.+8      	; 0x54e6 <__fixsfsi+0x9a>
    54de:	20 e0       	ldi	r18, 0x00	; 0
    54e0:	30 e0       	ldi	r19, 0x00	; 0
    54e2:	40 e0       	ldi	r20, 0x00	; 0
    54e4:	50 e0       	ldi	r21, 0x00	; 0
    54e6:	ca 01       	movw	r24, r20
    54e8:	b9 01       	movw	r22, r18
    54ea:	e2 e0       	ldi	r30, 0x02	; 2
    54ec:	2c 96       	adiw	r28, 0x0c	; 12
    54ee:	0c 94 88 2c 	jmp	0x5910	; 0x5910 <__epilogue_restores__+0x20>

000054f2 <__clzsi2>:
    54f2:	ef 92       	push	r14
    54f4:	ff 92       	push	r15
    54f6:	0f 93       	push	r16
    54f8:	1f 93       	push	r17
    54fa:	9b 01       	movw	r18, r22
    54fc:	ac 01       	movw	r20, r24
    54fe:	20 30       	cpi	r18, 0x00	; 0
    5500:	80 e0       	ldi	r24, 0x00	; 0
    5502:	38 07       	cpc	r19, r24
    5504:	81 e0       	ldi	r24, 0x01	; 1
    5506:	48 07       	cpc	r20, r24
    5508:	80 e0       	ldi	r24, 0x00	; 0
    550a:	58 07       	cpc	r21, r24
    550c:	80 f4       	brcc	.+32     	; 0x552e <__clzsi2+0x3c>
    550e:	2f 3f       	cpi	r18, 0xFF	; 255
    5510:	31 05       	cpc	r19, r1
    5512:	41 05       	cpc	r20, r1
    5514:	51 05       	cpc	r21, r1
    5516:	09 f0       	breq	.+2      	; 0x551a <__clzsi2+0x28>
    5518:	20 f4       	brcc	.+8      	; 0x5522 <__clzsi2+0x30>
    551a:	ee 24       	eor	r14, r14
    551c:	ff 24       	eor	r15, r15
    551e:	87 01       	movw	r16, r14
    5520:	19 c0       	rjmp	.+50     	; 0x5554 <__clzsi2+0x62>
    5522:	68 e0       	ldi	r22, 0x08	; 8
    5524:	e6 2e       	mov	r14, r22
    5526:	f1 2c       	mov	r15, r1
    5528:	01 2d       	mov	r16, r1
    552a:	11 2d       	mov	r17, r1
    552c:	13 c0       	rjmp	.+38     	; 0x5554 <__clzsi2+0x62>
    552e:	20 30       	cpi	r18, 0x00	; 0
    5530:	80 e0       	ldi	r24, 0x00	; 0
    5532:	38 07       	cpc	r19, r24
    5534:	80 e0       	ldi	r24, 0x00	; 0
    5536:	48 07       	cpc	r20, r24
    5538:	81 e0       	ldi	r24, 0x01	; 1
    553a:	58 07       	cpc	r21, r24
    553c:	30 f4       	brcc	.+12     	; 0x554a <__clzsi2+0x58>
    553e:	90 e1       	ldi	r25, 0x10	; 16
    5540:	e9 2e       	mov	r14, r25
    5542:	f1 2c       	mov	r15, r1
    5544:	01 2d       	mov	r16, r1
    5546:	11 2d       	mov	r17, r1
    5548:	05 c0       	rjmp	.+10     	; 0x5554 <__clzsi2+0x62>
    554a:	88 e1       	ldi	r24, 0x18	; 24
    554c:	e8 2e       	mov	r14, r24
    554e:	f1 2c       	mov	r15, r1
    5550:	01 2d       	mov	r16, r1
    5552:	11 2d       	mov	r17, r1
    5554:	80 e2       	ldi	r24, 0x20	; 32
    5556:	90 e0       	ldi	r25, 0x00	; 0
    5558:	a0 e0       	ldi	r26, 0x00	; 0
    555a:	b0 e0       	ldi	r27, 0x00	; 0
    555c:	8e 19       	sub	r24, r14
    555e:	9f 09       	sbc	r25, r15
    5560:	a0 0b       	sbc	r26, r16
    5562:	b1 0b       	sbc	r27, r17
    5564:	04 c0       	rjmp	.+8      	; 0x556e <__clzsi2+0x7c>
    5566:	56 95       	lsr	r21
    5568:	47 95       	ror	r20
    556a:	37 95       	ror	r19
    556c:	27 95       	ror	r18
    556e:	ea 94       	dec	r14
    5570:	d2 f7       	brpl	.-12     	; 0x5566 <__clzsi2+0x74>
    5572:	f9 01       	movw	r30, r18
    5574:	e0 5e       	subi	r30, 0xE0	; 224
    5576:	fd 4f       	sbci	r31, 0xFD	; 253
    5578:	20 81       	ld	r18, Z
    557a:	82 1b       	sub	r24, r18
    557c:	91 09       	sbc	r25, r1
    557e:	a1 09       	sbc	r26, r1
    5580:	b1 09       	sbc	r27, r1
    5582:	1f 91       	pop	r17
    5584:	0f 91       	pop	r16
    5586:	ff 90       	pop	r15
    5588:	ef 90       	pop	r14
    558a:	08 95       	ret

0000558c <__pack_f>:
    558c:	9f 92       	push	r9
    558e:	af 92       	push	r10
    5590:	bf 92       	push	r11
    5592:	cf 92       	push	r12
    5594:	df 92       	push	r13
    5596:	ef 92       	push	r14
    5598:	ff 92       	push	r15
    559a:	0f 93       	push	r16
    559c:	1f 93       	push	r17
    559e:	ee 24       	eor	r14, r14
    55a0:	ff 24       	eor	r15, r15
    55a2:	87 01       	movw	r16, r14
    55a4:	fc 01       	movw	r30, r24
    55a6:	24 81       	ldd	r18, Z+4	; 0x04
    55a8:	35 81       	ldd	r19, Z+5	; 0x05
    55aa:	46 81       	ldd	r20, Z+6	; 0x06
    55ac:	57 81       	ldd	r21, Z+7	; 0x07
    55ae:	91 80       	ldd	r9, Z+1	; 0x01
    55b0:	80 81       	ld	r24, Z
    55b2:	82 30       	cpi	r24, 0x02	; 2
    55b4:	10 f4       	brcc	.+4      	; 0x55ba <__pack_f+0x2e>
    55b6:	40 61       	ori	r20, 0x10	; 16
    55b8:	a2 c0       	rjmp	.+324    	; 0x56fe <__pack_f+0x172>
    55ba:	84 30       	cpi	r24, 0x04	; 4
    55bc:	09 f4       	brne	.+2      	; 0x55c0 <__pack_f+0x34>
    55be:	9b c0       	rjmp	.+310    	; 0x56f6 <__pack_f+0x16a>
    55c0:	82 30       	cpi	r24, 0x02	; 2
    55c2:	29 f4       	brne	.+10     	; 0x55ce <__pack_f+0x42>
    55c4:	20 e0       	ldi	r18, 0x00	; 0
    55c6:	30 e0       	ldi	r19, 0x00	; 0
    55c8:	40 e0       	ldi	r20, 0x00	; 0
    55ca:	50 e0       	ldi	r21, 0x00	; 0
    55cc:	05 c0       	rjmp	.+10     	; 0x55d8 <__pack_f+0x4c>
    55ce:	21 15       	cp	r18, r1
    55d0:	31 05       	cpc	r19, r1
    55d2:	41 05       	cpc	r20, r1
    55d4:	51 05       	cpc	r21, r1
    55d6:	19 f4       	brne	.+6      	; 0x55de <__pack_f+0x52>
    55d8:	e0 e0       	ldi	r30, 0x00	; 0
    55da:	f0 e0       	ldi	r31, 0x00	; 0
    55dc:	92 c0       	rjmp	.+292    	; 0x5702 <__pack_f+0x176>
    55de:	82 81       	ldd	r24, Z+2	; 0x02
    55e0:	93 81       	ldd	r25, Z+3	; 0x03
    55e2:	6f ef       	ldi	r22, 0xFF	; 255
    55e4:	82 38       	cpi	r24, 0x82	; 130
    55e6:	96 07       	cpc	r25, r22
    55e8:	0c f0       	brlt	.+2      	; 0x55ec <__pack_f+0x60>
    55ea:	5a c0       	rjmp	.+180    	; 0x56a0 <__pack_f+0x114>
    55ec:	62 e8       	ldi	r22, 0x82	; 130
    55ee:	7f ef       	ldi	r23, 0xFF	; 255
    55f0:	68 1b       	sub	r22, r24
    55f2:	79 0b       	sbc	r23, r25
    55f4:	6a 31       	cpi	r22, 0x1A	; 26
    55f6:	71 05       	cpc	r23, r1
    55f8:	2c f0       	brlt	.+10     	; 0x5604 <__pack_f+0x78>
    55fa:	20 e0       	ldi	r18, 0x00	; 0
    55fc:	30 e0       	ldi	r19, 0x00	; 0
    55fe:	40 e0       	ldi	r20, 0x00	; 0
    5600:	50 e0       	ldi	r21, 0x00	; 0
    5602:	2a c0       	rjmp	.+84     	; 0x5658 <__pack_f+0xcc>
    5604:	aa 24       	eor	r10, r10
    5606:	bb 24       	eor	r11, r11
    5608:	65 01       	movw	r12, r10
    560a:	81 e0       	ldi	r24, 0x01	; 1
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	a0 e0       	ldi	r26, 0x00	; 0
    5610:	b0 e0       	ldi	r27, 0x00	; 0
    5612:	06 2e       	mov	r0, r22
    5614:	04 c0       	rjmp	.+8      	; 0x561e <__pack_f+0x92>
    5616:	88 0f       	add	r24, r24
    5618:	99 1f       	adc	r25, r25
    561a:	aa 1f       	adc	r26, r26
    561c:	bb 1f       	adc	r27, r27
    561e:	0a 94       	dec	r0
    5620:	d2 f7       	brpl	.-12     	; 0x5616 <__pack_f+0x8a>
    5622:	01 97       	sbiw	r24, 0x01	; 1
    5624:	a1 09       	sbc	r26, r1
    5626:	b1 09       	sbc	r27, r1
    5628:	82 23       	and	r24, r18
    562a:	93 23       	and	r25, r19
    562c:	a4 23       	and	r26, r20
    562e:	b5 23       	and	r27, r21
    5630:	00 97       	sbiw	r24, 0x00	; 0
    5632:	a1 05       	cpc	r26, r1
    5634:	b1 05       	cpc	r27, r1
    5636:	29 f0       	breq	.+10     	; 0x5642 <__pack_f+0xb6>
    5638:	71 e0       	ldi	r23, 0x01	; 1
    563a:	a7 2e       	mov	r10, r23
    563c:	b1 2c       	mov	r11, r1
    563e:	c1 2c       	mov	r12, r1
    5640:	d1 2c       	mov	r13, r1
    5642:	04 c0       	rjmp	.+8      	; 0x564c <__pack_f+0xc0>
    5644:	56 95       	lsr	r21
    5646:	47 95       	ror	r20
    5648:	37 95       	ror	r19
    564a:	27 95       	ror	r18
    564c:	6a 95       	dec	r22
    564e:	d2 f7       	brpl	.-12     	; 0x5644 <__pack_f+0xb8>
    5650:	2a 29       	or	r18, r10
    5652:	3b 29       	or	r19, r11
    5654:	4c 29       	or	r20, r12
    5656:	5d 29       	or	r21, r13
    5658:	da 01       	movw	r26, r20
    565a:	c9 01       	movw	r24, r18
    565c:	8f 77       	andi	r24, 0x7F	; 127
    565e:	90 70       	andi	r25, 0x00	; 0
    5660:	a0 70       	andi	r26, 0x00	; 0
    5662:	b0 70       	andi	r27, 0x00	; 0
    5664:	80 34       	cpi	r24, 0x40	; 64
    5666:	91 05       	cpc	r25, r1
    5668:	a1 05       	cpc	r26, r1
    566a:	b1 05       	cpc	r27, r1
    566c:	39 f4       	brne	.+14     	; 0x567c <__pack_f+0xf0>
    566e:	27 ff       	sbrs	r18, 7
    5670:	09 c0       	rjmp	.+18     	; 0x5684 <__pack_f+0xf8>
    5672:	20 5c       	subi	r18, 0xC0	; 192
    5674:	3f 4f       	sbci	r19, 0xFF	; 255
    5676:	4f 4f       	sbci	r20, 0xFF	; 255
    5678:	5f 4f       	sbci	r21, 0xFF	; 255
    567a:	04 c0       	rjmp	.+8      	; 0x5684 <__pack_f+0xf8>
    567c:	21 5c       	subi	r18, 0xC1	; 193
    567e:	3f 4f       	sbci	r19, 0xFF	; 255
    5680:	4f 4f       	sbci	r20, 0xFF	; 255
    5682:	5f 4f       	sbci	r21, 0xFF	; 255
    5684:	80 e0       	ldi	r24, 0x00	; 0
    5686:	90 e0       	ldi	r25, 0x00	; 0
    5688:	20 30       	cpi	r18, 0x00	; 0
    568a:	60 e0       	ldi	r22, 0x00	; 0
    568c:	36 07       	cpc	r19, r22
    568e:	60 e0       	ldi	r22, 0x00	; 0
    5690:	46 07       	cpc	r20, r22
    5692:	60 e4       	ldi	r22, 0x40	; 64
    5694:	56 07       	cpc	r21, r22
    5696:	10 f0       	brcs	.+4      	; 0x569c <__pack_f+0x110>
    5698:	81 e0       	ldi	r24, 0x01	; 1
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	fc 01       	movw	r30, r24
    569e:	23 c0       	rjmp	.+70     	; 0x56e6 <__pack_f+0x15a>
    56a0:	80 38       	cpi	r24, 0x80	; 128
    56a2:	91 05       	cpc	r25, r1
    56a4:	44 f5       	brge	.+80     	; 0x56f6 <__pack_f+0x16a>
    56a6:	fc 01       	movw	r30, r24
    56a8:	e1 58       	subi	r30, 0x81	; 129
    56aa:	ff 4f       	sbci	r31, 0xFF	; 255
    56ac:	da 01       	movw	r26, r20
    56ae:	c9 01       	movw	r24, r18
    56b0:	8f 77       	andi	r24, 0x7F	; 127
    56b2:	90 70       	andi	r25, 0x00	; 0
    56b4:	a0 70       	andi	r26, 0x00	; 0
    56b6:	b0 70       	andi	r27, 0x00	; 0
    56b8:	80 34       	cpi	r24, 0x40	; 64
    56ba:	91 05       	cpc	r25, r1
    56bc:	a1 05       	cpc	r26, r1
    56be:	b1 05       	cpc	r27, r1
    56c0:	39 f4       	brne	.+14     	; 0x56d0 <__pack_f+0x144>
    56c2:	27 ff       	sbrs	r18, 7
    56c4:	09 c0       	rjmp	.+18     	; 0x56d8 <__pack_f+0x14c>
    56c6:	20 5c       	subi	r18, 0xC0	; 192
    56c8:	3f 4f       	sbci	r19, 0xFF	; 255
    56ca:	4f 4f       	sbci	r20, 0xFF	; 255
    56cc:	5f 4f       	sbci	r21, 0xFF	; 255
    56ce:	04 c0       	rjmp	.+8      	; 0x56d8 <__pack_f+0x14c>
    56d0:	21 5c       	subi	r18, 0xC1	; 193
    56d2:	3f 4f       	sbci	r19, 0xFF	; 255
    56d4:	4f 4f       	sbci	r20, 0xFF	; 255
    56d6:	5f 4f       	sbci	r21, 0xFF	; 255
    56d8:	57 ff       	sbrs	r21, 7
    56da:	05 c0       	rjmp	.+10     	; 0x56e6 <__pack_f+0x15a>
    56dc:	56 95       	lsr	r21
    56de:	47 95       	ror	r20
    56e0:	37 95       	ror	r19
    56e2:	27 95       	ror	r18
    56e4:	31 96       	adiw	r30, 0x01	; 1
    56e6:	87 e0       	ldi	r24, 0x07	; 7
    56e8:	56 95       	lsr	r21
    56ea:	47 95       	ror	r20
    56ec:	37 95       	ror	r19
    56ee:	27 95       	ror	r18
    56f0:	8a 95       	dec	r24
    56f2:	d1 f7       	brne	.-12     	; 0x56e8 <__pack_f+0x15c>
    56f4:	06 c0       	rjmp	.+12     	; 0x5702 <__pack_f+0x176>
    56f6:	20 e0       	ldi	r18, 0x00	; 0
    56f8:	30 e0       	ldi	r19, 0x00	; 0
    56fa:	40 e0       	ldi	r20, 0x00	; 0
    56fc:	50 e0       	ldi	r21, 0x00	; 0
    56fe:	ef ef       	ldi	r30, 0xFF	; 255
    5700:	f0 e0       	ldi	r31, 0x00	; 0
    5702:	e2 2e       	mov	r14, r18
    5704:	f3 2e       	mov	r15, r19
    5706:	94 2f       	mov	r25, r20
    5708:	9f 77       	andi	r25, 0x7F	; 127
    570a:	80 2f       	mov	r24, r16
    570c:	80 78       	andi	r24, 0x80	; 128
    570e:	89 2b       	or	r24, r25
    5710:	9e 2f       	mov	r25, r30
    5712:	97 95       	ror	r25
    5714:	99 27       	eor	r25, r25
    5716:	97 95       	ror	r25
    5718:	8f 77       	andi	r24, 0x7F	; 127
    571a:	08 2f       	mov	r16, r24
    571c:	09 2b       	or	r16, r25
    571e:	9e 2f       	mov	r25, r30
    5720:	96 95       	lsr	r25
    5722:	81 2f       	mov	r24, r17
    5724:	80 78       	andi	r24, 0x80	; 128
    5726:	89 2b       	or	r24, r25
    5728:	97 94       	ror	r9
    572a:	99 24       	eor	r9, r9
    572c:	97 94       	ror	r9
    572e:	8f 77       	andi	r24, 0x7F	; 127
    5730:	18 2f       	mov	r17, r24
    5732:	19 29       	or	r17, r9
    5734:	c8 01       	movw	r24, r16
    5736:	b7 01       	movw	r22, r14
    5738:	1f 91       	pop	r17
    573a:	0f 91       	pop	r16
    573c:	ff 90       	pop	r15
    573e:	ef 90       	pop	r14
    5740:	df 90       	pop	r13
    5742:	cf 90       	pop	r12
    5744:	bf 90       	pop	r11
    5746:	af 90       	pop	r10
    5748:	9f 90       	pop	r9
    574a:	08 95       	ret

0000574c <__unpack_f>:
    574c:	cf 93       	push	r28
    574e:	df 93       	push	r29
    5750:	fc 01       	movw	r30, r24
    5752:	db 01       	movw	r26, r22
    5754:	20 81       	ld	r18, Z
    5756:	31 81       	ldd	r19, Z+1	; 0x01
    5758:	92 81       	ldd	r25, Z+2	; 0x02
    575a:	49 2f       	mov	r20, r25
    575c:	4f 77       	andi	r20, 0x7F	; 127
    575e:	50 e0       	ldi	r21, 0x00	; 0
    5760:	99 1f       	adc	r25, r25
    5762:	99 27       	eor	r25, r25
    5764:	99 1f       	adc	r25, r25
    5766:	83 81       	ldd	r24, Z+3	; 0x03
    5768:	e8 2f       	mov	r30, r24
    576a:	ee 0f       	add	r30, r30
    576c:	e9 2b       	or	r30, r25
    576e:	6e 2f       	mov	r22, r30
    5770:	70 e0       	ldi	r23, 0x00	; 0
    5772:	88 1f       	adc	r24, r24
    5774:	88 27       	eor	r24, r24
    5776:	88 1f       	adc	r24, r24
    5778:	ed 01       	movw	r28, r26
    577a:	89 83       	std	Y+1, r24	; 0x01
    577c:	ee 23       	and	r30, r30
    577e:	71 f5       	brne	.+92     	; 0x57dc <__unpack_f+0x90>
    5780:	21 15       	cp	r18, r1
    5782:	31 05       	cpc	r19, r1
    5784:	41 05       	cpc	r20, r1
    5786:	51 05       	cpc	r21, r1
    5788:	11 f4       	brne	.+4      	; 0x578e <__unpack_f+0x42>
    578a:	82 e0       	ldi	r24, 0x02	; 2
    578c:	2f c0       	rjmp	.+94     	; 0x57ec <__unpack_f+0xa0>
    578e:	6e 57       	subi	r22, 0x7E	; 126
    5790:	70 40       	sbci	r23, 0x00	; 0
    5792:	fd 01       	movw	r30, r26
    5794:	73 83       	std	Z+3, r23	; 0x03
    5796:	62 83       	std	Z+2, r22	; 0x02
    5798:	67 e0       	ldi	r22, 0x07	; 7
    579a:	22 0f       	add	r18, r18
    579c:	33 1f       	adc	r19, r19
    579e:	44 1f       	adc	r20, r20
    57a0:	55 1f       	adc	r21, r21
    57a2:	6a 95       	dec	r22
    57a4:	d1 f7       	brne	.-12     	; 0x579a <__unpack_f+0x4e>
    57a6:	83 e0       	ldi	r24, 0x03	; 3
    57a8:	8c 93       	st	X, r24
    57aa:	0a c0       	rjmp	.+20     	; 0x57c0 <__unpack_f+0x74>
    57ac:	22 0f       	add	r18, r18
    57ae:	33 1f       	adc	r19, r19
    57b0:	44 1f       	adc	r20, r20
    57b2:	55 1f       	adc	r21, r21
    57b4:	ed 01       	movw	r28, r26
    57b6:	8a 81       	ldd	r24, Y+2	; 0x02
    57b8:	9b 81       	ldd	r25, Y+3	; 0x03
    57ba:	01 97       	sbiw	r24, 0x01	; 1
    57bc:	9b 83       	std	Y+3, r25	; 0x03
    57be:	8a 83       	std	Y+2, r24	; 0x02
    57c0:	20 30       	cpi	r18, 0x00	; 0
    57c2:	e0 e0       	ldi	r30, 0x00	; 0
    57c4:	3e 07       	cpc	r19, r30
    57c6:	e0 e0       	ldi	r30, 0x00	; 0
    57c8:	4e 07       	cpc	r20, r30
    57ca:	e0 e4       	ldi	r30, 0x40	; 64
    57cc:	5e 07       	cpc	r21, r30
    57ce:	70 f3       	brcs	.-36     	; 0x57ac <__unpack_f+0x60>
    57d0:	ed 01       	movw	r28, r26
    57d2:	2c 83       	std	Y+4, r18	; 0x04
    57d4:	3d 83       	std	Y+5, r19	; 0x05
    57d6:	4e 83       	std	Y+6, r20	; 0x06
    57d8:	5f 83       	std	Y+7, r21	; 0x07
    57da:	25 c0       	rjmp	.+74     	; 0x5826 <__unpack_f+0xda>
    57dc:	ef 3f       	cpi	r30, 0xFF	; 255
    57de:	79 f4       	brne	.+30     	; 0x57fe <__unpack_f+0xb2>
    57e0:	21 15       	cp	r18, r1
    57e2:	31 05       	cpc	r19, r1
    57e4:	41 05       	cpc	r20, r1
    57e6:	51 05       	cpc	r21, r1
    57e8:	19 f4       	brne	.+6      	; 0x57f0 <__unpack_f+0xa4>
    57ea:	84 e0       	ldi	r24, 0x04	; 4
    57ec:	8c 93       	st	X, r24
    57ee:	1b c0       	rjmp	.+54     	; 0x5826 <__unpack_f+0xda>
    57f0:	44 ff       	sbrs	r20, 4
    57f2:	03 c0       	rjmp	.+6      	; 0x57fa <__unpack_f+0xae>
    57f4:	81 e0       	ldi	r24, 0x01	; 1
    57f6:	8c 93       	st	X, r24
    57f8:	11 c0       	rjmp	.+34     	; 0x581c <__unpack_f+0xd0>
    57fa:	1c 92       	st	X, r1
    57fc:	0f c0       	rjmp	.+30     	; 0x581c <__unpack_f+0xd0>
    57fe:	6f 57       	subi	r22, 0x7F	; 127
    5800:	70 40       	sbci	r23, 0x00	; 0
    5802:	ed 01       	movw	r28, r26
    5804:	7b 83       	std	Y+3, r23	; 0x03
    5806:	6a 83       	std	Y+2, r22	; 0x02
    5808:	83 e0       	ldi	r24, 0x03	; 3
    580a:	8c 93       	st	X, r24
    580c:	87 e0       	ldi	r24, 0x07	; 7
    580e:	22 0f       	add	r18, r18
    5810:	33 1f       	adc	r19, r19
    5812:	44 1f       	adc	r20, r20
    5814:	55 1f       	adc	r21, r21
    5816:	8a 95       	dec	r24
    5818:	d1 f7       	brne	.-12     	; 0x580e <__unpack_f+0xc2>
    581a:	50 64       	ori	r21, 0x40	; 64
    581c:	fd 01       	movw	r30, r26
    581e:	24 83       	std	Z+4, r18	; 0x04
    5820:	35 83       	std	Z+5, r19	; 0x05
    5822:	46 83       	std	Z+6, r20	; 0x06
    5824:	57 83       	std	Z+7, r21	; 0x07
    5826:	df 91       	pop	r29
    5828:	cf 91       	pop	r28
    582a:	08 95       	ret

0000582c <__mulsi3>:
    582c:	62 9f       	mul	r22, r18
    582e:	d0 01       	movw	r26, r0
    5830:	73 9f       	mul	r23, r19
    5832:	f0 01       	movw	r30, r0
    5834:	82 9f       	mul	r24, r18
    5836:	e0 0d       	add	r30, r0
    5838:	f1 1d       	adc	r31, r1
    583a:	64 9f       	mul	r22, r20
    583c:	e0 0d       	add	r30, r0
    583e:	f1 1d       	adc	r31, r1
    5840:	92 9f       	mul	r25, r18
    5842:	f0 0d       	add	r31, r0
    5844:	83 9f       	mul	r24, r19
    5846:	f0 0d       	add	r31, r0
    5848:	74 9f       	mul	r23, r20
    584a:	f0 0d       	add	r31, r0
    584c:	65 9f       	mul	r22, r21
    584e:	f0 0d       	add	r31, r0
    5850:	99 27       	eor	r25, r25
    5852:	72 9f       	mul	r23, r18
    5854:	b0 0d       	add	r27, r0
    5856:	e1 1d       	adc	r30, r1
    5858:	f9 1f       	adc	r31, r25
    585a:	63 9f       	mul	r22, r19
    585c:	b0 0d       	add	r27, r0
    585e:	e1 1d       	adc	r30, r1
    5860:	f9 1f       	adc	r31, r25
    5862:	bd 01       	movw	r22, r26
    5864:	cf 01       	movw	r24, r30
    5866:	11 24       	eor	r1, r1
    5868:	08 95       	ret

0000586a <__udivmodhi4>:
    586a:	aa 1b       	sub	r26, r26
    586c:	bb 1b       	sub	r27, r27
    586e:	51 e1       	ldi	r21, 0x11	; 17
    5870:	07 c0       	rjmp	.+14     	; 0x5880 <__udivmodhi4_ep>

00005872 <__udivmodhi4_loop>:
    5872:	aa 1f       	adc	r26, r26
    5874:	bb 1f       	adc	r27, r27
    5876:	a6 17       	cp	r26, r22
    5878:	b7 07       	cpc	r27, r23
    587a:	10 f0       	brcs	.+4      	; 0x5880 <__udivmodhi4_ep>
    587c:	a6 1b       	sub	r26, r22
    587e:	b7 0b       	sbc	r27, r23

00005880 <__udivmodhi4_ep>:
    5880:	88 1f       	adc	r24, r24
    5882:	99 1f       	adc	r25, r25
    5884:	5a 95       	dec	r21
    5886:	a9 f7       	brne	.-22     	; 0x5872 <__udivmodhi4_loop>
    5888:	80 95       	com	r24
    588a:	90 95       	com	r25
    588c:	bc 01       	movw	r22, r24
    588e:	cd 01       	movw	r24, r26
    5890:	08 95       	ret

00005892 <__divmodhi4>:
    5892:	97 fb       	bst	r25, 7
    5894:	09 2e       	mov	r0, r25
    5896:	07 26       	eor	r0, r23
    5898:	0a d0       	rcall	.+20     	; 0x58ae <__divmodhi4_neg1>
    589a:	77 fd       	sbrc	r23, 7
    589c:	04 d0       	rcall	.+8      	; 0x58a6 <__divmodhi4_neg2>
    589e:	e5 df       	rcall	.-54     	; 0x586a <__udivmodhi4>
    58a0:	06 d0       	rcall	.+12     	; 0x58ae <__divmodhi4_neg1>
    58a2:	00 20       	and	r0, r0
    58a4:	1a f4       	brpl	.+6      	; 0x58ac <__divmodhi4_exit>

000058a6 <__divmodhi4_neg2>:
    58a6:	70 95       	com	r23
    58a8:	61 95       	neg	r22
    58aa:	7f 4f       	sbci	r23, 0xFF	; 255

000058ac <__divmodhi4_exit>:
    58ac:	08 95       	ret

000058ae <__divmodhi4_neg1>:
    58ae:	f6 f7       	brtc	.-4      	; 0x58ac <__divmodhi4_exit>
    58b0:	90 95       	com	r25
    58b2:	81 95       	neg	r24
    58b4:	9f 4f       	sbci	r25, 0xFF	; 255
    58b6:	08 95       	ret

000058b8 <__prologue_saves__>:
    58b8:	2f 92       	push	r2
    58ba:	3f 92       	push	r3
    58bc:	4f 92       	push	r4
    58be:	5f 92       	push	r5
    58c0:	6f 92       	push	r6
    58c2:	7f 92       	push	r7
    58c4:	8f 92       	push	r8
    58c6:	9f 92       	push	r9
    58c8:	af 92       	push	r10
    58ca:	bf 92       	push	r11
    58cc:	cf 92       	push	r12
    58ce:	df 92       	push	r13
    58d0:	ef 92       	push	r14
    58d2:	ff 92       	push	r15
    58d4:	0f 93       	push	r16
    58d6:	1f 93       	push	r17
    58d8:	cf 93       	push	r28
    58da:	df 93       	push	r29
    58dc:	cd b7       	in	r28, 0x3d	; 61
    58de:	de b7       	in	r29, 0x3e	; 62
    58e0:	ca 1b       	sub	r28, r26
    58e2:	db 0b       	sbc	r29, r27
    58e4:	0f b6       	in	r0, 0x3f	; 63
    58e6:	f8 94       	cli
    58e8:	de bf       	out	0x3e, r29	; 62
    58ea:	0f be       	out	0x3f, r0	; 63
    58ec:	cd bf       	out	0x3d, r28	; 61
    58ee:	19 94       	eijmp

000058f0 <__epilogue_restores__>:
    58f0:	2a 88       	ldd	r2, Y+18	; 0x12
    58f2:	39 88       	ldd	r3, Y+17	; 0x11
    58f4:	48 88       	ldd	r4, Y+16	; 0x10
    58f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    58f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    58fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    58fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    58fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    5900:	aa 84       	ldd	r10, Y+10	; 0x0a
    5902:	b9 84       	ldd	r11, Y+9	; 0x09
    5904:	c8 84       	ldd	r12, Y+8	; 0x08
    5906:	df 80       	ldd	r13, Y+7	; 0x07
    5908:	ee 80       	ldd	r14, Y+6	; 0x06
    590a:	fd 80       	ldd	r15, Y+5	; 0x05
    590c:	0c 81       	ldd	r16, Y+4	; 0x04
    590e:	1b 81       	ldd	r17, Y+3	; 0x03
    5910:	aa 81       	ldd	r26, Y+2	; 0x02
    5912:	b9 81       	ldd	r27, Y+1	; 0x01
    5914:	ce 0f       	add	r28, r30
    5916:	d1 1d       	adc	r29, r1
    5918:	0f b6       	in	r0, 0x3f	; 63
    591a:	f8 94       	cli
    591c:	de bf       	out	0x3e, r29	; 62
    591e:	0f be       	out	0x3f, r0	; 63
    5920:	cd bf       	out	0x3d, r28	; 61
    5922:	ed 01       	movw	r28, r26
    5924:	08 95       	ret

00005926 <do_rand>:
    5926:	af 92       	push	r10
    5928:	bf 92       	push	r11
    592a:	cf 92       	push	r12
    592c:	df 92       	push	r13
    592e:	ef 92       	push	r14
    5930:	ff 92       	push	r15
    5932:	0f 93       	push	r16
    5934:	1f 93       	push	r17
    5936:	cf 93       	push	r28
    5938:	df 93       	push	r29
    593a:	ec 01       	movw	r28, r24
    593c:	68 81       	ld	r22, Y
    593e:	79 81       	ldd	r23, Y+1	; 0x01
    5940:	8a 81       	ldd	r24, Y+2	; 0x02
    5942:	9b 81       	ldd	r25, Y+3	; 0x03
    5944:	61 15       	cp	r22, r1
    5946:	71 05       	cpc	r23, r1
    5948:	81 05       	cpc	r24, r1
    594a:	91 05       	cpc	r25, r1
    594c:	21 f4       	brne	.+8      	; 0x5956 <do_rand+0x30>
    594e:	64 e2       	ldi	r22, 0x24	; 36
    5950:	79 ed       	ldi	r23, 0xD9	; 217
    5952:	8b e5       	ldi	r24, 0x5B	; 91
    5954:	97 e0       	ldi	r25, 0x07	; 7
    5956:	2d e1       	ldi	r18, 0x1D	; 29
    5958:	33 ef       	ldi	r19, 0xF3	; 243
    595a:	41 e0       	ldi	r20, 0x01	; 1
    595c:	50 e0       	ldi	r21, 0x00	; 0
    595e:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__divmodsi4>
    5962:	79 01       	movw	r14, r18
    5964:	8a 01       	movw	r16, r20
    5966:	27 ea       	ldi	r18, 0xA7	; 167
    5968:	31 e4       	ldi	r19, 0x41	; 65
    596a:	40 e0       	ldi	r20, 0x00	; 0
    596c:	50 e0       	ldi	r21, 0x00	; 0
    596e:	0e 94 16 2c 	call	0x582c	; 0x582c <__mulsi3>
    5972:	5b 01       	movw	r10, r22
    5974:	6c 01       	movw	r12, r24
    5976:	c8 01       	movw	r24, r16
    5978:	b7 01       	movw	r22, r14
    597a:	2c ee       	ldi	r18, 0xEC	; 236
    597c:	34 ef       	ldi	r19, 0xF4	; 244
    597e:	4f ef       	ldi	r20, 0xFF	; 255
    5980:	5f ef       	ldi	r21, 0xFF	; 255
    5982:	0e 94 16 2c 	call	0x582c	; 0x582c <__mulsi3>
    5986:	6a 0d       	add	r22, r10
    5988:	7b 1d       	adc	r23, r11
    598a:	8c 1d       	adc	r24, r12
    598c:	9d 1d       	adc	r25, r13
    598e:	97 ff       	sbrs	r25, 7
    5990:	04 c0       	rjmp	.+8      	; 0x599a <do_rand+0x74>
    5992:	61 50       	subi	r22, 0x01	; 1
    5994:	70 40       	sbci	r23, 0x00	; 0
    5996:	80 40       	sbci	r24, 0x00	; 0
    5998:	90 48       	sbci	r25, 0x80	; 128
    599a:	68 83       	st	Y, r22
    599c:	79 83       	std	Y+1, r23	; 0x01
    599e:	8a 83       	std	Y+2, r24	; 0x02
    59a0:	9b 83       	std	Y+3, r25	; 0x03
    59a2:	7f 77       	andi	r23, 0x7F	; 127
    59a4:	cb 01       	movw	r24, r22
    59a6:	df 91       	pop	r29
    59a8:	cf 91       	pop	r28
    59aa:	1f 91       	pop	r17
    59ac:	0f 91       	pop	r16
    59ae:	ff 90       	pop	r15
    59b0:	ef 90       	pop	r14
    59b2:	df 90       	pop	r13
    59b4:	cf 90       	pop	r12
    59b6:	bf 90       	pop	r11
    59b8:	af 90       	pop	r10
    59ba:	08 95       	ret

000059bc <rand_r>:
    59bc:	0e 94 93 2c 	call	0x5926	; 0x5926 <do_rand>
    59c0:	08 95       	ret

000059c2 <rand>:
    59c2:	80 e2       	ldi	r24, 0x20	; 32
    59c4:	93 e0       	ldi	r25, 0x03	; 3
    59c6:	0e 94 93 2c 	call	0x5926	; 0x5926 <do_rand>
    59ca:	08 95       	ret

000059cc <srand>:
    59cc:	a0 e0       	ldi	r26, 0x00	; 0
    59ce:	b0 e0       	ldi	r27, 0x00	; 0
    59d0:	80 93 20 03 	sts	0x0320, r24
    59d4:	90 93 21 03 	sts	0x0321, r25
    59d8:	a0 93 22 03 	sts	0x0322, r26
    59dc:	b0 93 23 03 	sts	0x0323, r27
    59e0:	08 95       	ret
    59e2:	f5 d0       	rcall	.+490    	; 0x5bce <__fp_pscA>
    59e4:	58 f0       	brcs	.+22     	; 0x59fc <srand+0x30>
    59e6:	80 e8       	ldi	r24, 0x80	; 128
    59e8:	91 e0       	ldi	r25, 0x01	; 1
    59ea:	09 f4       	brne	.+2      	; 0x59ee <srand+0x22>
    59ec:	9e ef       	ldi	r25, 0xFE	; 254
    59ee:	f6 d0       	rcall	.+492    	; 0x5bdc <__fp_pscB>
    59f0:	28 f0       	brcs	.+10     	; 0x59fc <srand+0x30>
    59f2:	40 e8       	ldi	r20, 0x80	; 128
    59f4:	51 e0       	ldi	r21, 0x01	; 1
    59f6:	59 f4       	brne	.+22     	; 0x5a0e <atan2+0xe>
    59f8:	5e ef       	ldi	r21, 0xFE	; 254
    59fa:	09 c0       	rjmp	.+18     	; 0x5a0e <atan2+0xe>
    59fc:	c0 c0       	rjmp	.+384    	; 0x5b7e <__fp_nan>
    59fe:	28 c1       	rjmp	.+592    	; 0x5c50 <__fp_zero>

00005a00 <atan2>:
    5a00:	e9 2f       	mov	r30, r25
    5a02:	e0 78       	andi	r30, 0x80	; 128
    5a04:	03 d1       	rcall	.+518    	; 0x5c0c <__fp_split3>
    5a06:	68 f3       	brcs	.-38     	; 0x59e2 <srand+0x16>
    5a08:	09 2e       	mov	r0, r25
    5a0a:	05 2a       	or	r0, r21
    5a0c:	c1 f3       	breq	.-16     	; 0x59fe <srand+0x32>
    5a0e:	26 17       	cp	r18, r22
    5a10:	37 07       	cpc	r19, r23
    5a12:	48 07       	cpc	r20, r24
    5a14:	59 07       	cpc	r21, r25
    5a16:	38 f0       	brcs	.+14     	; 0x5a26 <atan2+0x26>
    5a18:	0e 2e       	mov	r0, r30
    5a1a:	07 f8       	bld	r0, 7
    5a1c:	e0 25       	eor	r30, r0
    5a1e:	69 f0       	breq	.+26     	; 0x5a3a <atan2+0x3a>
    5a20:	e0 25       	eor	r30, r0
    5a22:	e0 64       	ori	r30, 0x40	; 64
    5a24:	0a c0       	rjmp	.+20     	; 0x5a3a <atan2+0x3a>
    5a26:	ef 63       	ori	r30, 0x3F	; 63
    5a28:	07 f8       	bld	r0, 7
    5a2a:	00 94       	com	r0
    5a2c:	07 fa       	bst	r0, 7
    5a2e:	db 01       	movw	r26, r22
    5a30:	b9 01       	movw	r22, r18
    5a32:	9d 01       	movw	r18, r26
    5a34:	dc 01       	movw	r26, r24
    5a36:	ca 01       	movw	r24, r20
    5a38:	ad 01       	movw	r20, r26
    5a3a:	ef 93       	push	r30
    5a3c:	41 d0       	rcall	.+130    	; 0x5ac0 <__divsf3_pse>
    5a3e:	d5 d0       	rcall	.+426    	; 0x5bea <__fp_round>
    5a40:	0a d0       	rcall	.+20     	; 0x5a56 <atan>
    5a42:	5f 91       	pop	r21
    5a44:	55 23       	and	r21, r21
    5a46:	31 f0       	breq	.+12     	; 0x5a54 <atan2+0x54>
    5a48:	2b ed       	ldi	r18, 0xDB	; 219
    5a4a:	3f e0       	ldi	r19, 0x0F	; 15
    5a4c:	49 e4       	ldi	r20, 0x49	; 73
    5a4e:	50 fd       	sbrc	r21, 0
    5a50:	49 ec       	ldi	r20, 0xC9	; 201
    5a52:	7c c1       	rjmp	.+760    	; 0x5d4c <__addsf3>
    5a54:	08 95       	ret

00005a56 <atan>:
    5a56:	df 93       	push	r29
    5a58:	dd 27       	eor	r29, r29
    5a5a:	b9 2f       	mov	r27, r25
    5a5c:	bf 77       	andi	r27, 0x7F	; 127
    5a5e:	40 e8       	ldi	r20, 0x80	; 128
    5a60:	5f e3       	ldi	r21, 0x3F	; 63
    5a62:	16 16       	cp	r1, r22
    5a64:	17 06       	cpc	r1, r23
    5a66:	48 07       	cpc	r20, r24
    5a68:	5b 07       	cpc	r21, r27
    5a6a:	10 f4       	brcc	.+4      	; 0x5a70 <atan+0x1a>
    5a6c:	d9 2f       	mov	r29, r25
    5a6e:	f7 d0       	rcall	.+494    	; 0x5c5e <inverse>
    5a70:	9f 93       	push	r25
    5a72:	8f 93       	push	r24
    5a74:	7f 93       	push	r23
    5a76:	6f 93       	push	r22
    5a78:	5a d1       	rcall	.+692    	; 0x5d2e <square>
    5a7a:	ee e4       	ldi	r30, 0x4E	; 78
    5a7c:	f1 e0       	ldi	r31, 0x01	; 1
    5a7e:	82 d0       	rcall	.+260    	; 0x5b84 <__fp_powser>
    5a80:	b4 d0       	rcall	.+360    	; 0x5bea <__fp_round>
    5a82:	2f 91       	pop	r18
    5a84:	3f 91       	pop	r19
    5a86:	4f 91       	pop	r20
    5a88:	5f 91       	pop	r21
    5a8a:	fa d0       	rcall	.+500    	; 0x5c80 <__mulsf3x>
    5a8c:	dd 23       	and	r29, r29
    5a8e:	49 f0       	breq	.+18     	; 0x5aa2 <atan+0x4c>
    5a90:	90 58       	subi	r25, 0x80	; 128
    5a92:	a2 ea       	ldi	r26, 0xA2	; 162
    5a94:	2a ed       	ldi	r18, 0xDA	; 218
    5a96:	3f e0       	ldi	r19, 0x0F	; 15
    5a98:	49 ec       	ldi	r20, 0xC9	; 201
    5a9a:	5f e3       	ldi	r21, 0x3F	; 63
    5a9c:	d0 78       	andi	r29, 0x80	; 128
    5a9e:	5d 27       	eor	r21, r29
    5aa0:	66 d1       	rcall	.+716    	; 0x5d6e <__addsf3x>
    5aa2:	df 91       	pop	r29
    5aa4:	a2 c0       	rjmp	.+324    	; 0x5bea <__fp_round>
    5aa6:	9a d0       	rcall	.+308    	; 0x5bdc <__fp_pscB>
    5aa8:	40 f0       	brcs	.+16     	; 0x5aba <atan+0x64>
    5aaa:	91 d0       	rcall	.+290    	; 0x5bce <__fp_pscA>
    5aac:	30 f0       	brcs	.+12     	; 0x5aba <atan+0x64>
    5aae:	21 f4       	brne	.+8      	; 0x5ab8 <atan+0x62>
    5ab0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ab2:	19 f0       	breq	.+6      	; 0x5aba <atan+0x64>
    5ab4:	5e c0       	rjmp	.+188    	; 0x5b72 <__fp_inf>
    5ab6:	51 11       	cpse	r21, r1
    5ab8:	cc c0       	rjmp	.+408    	; 0x5c52 <__fp_szero>
    5aba:	61 c0       	rjmp	.+194    	; 0x5b7e <__fp_nan>

00005abc <__divsf3x>:
    5abc:	a7 d0       	rcall	.+334    	; 0x5c0c <__fp_split3>
    5abe:	98 f3       	brcs	.-26     	; 0x5aa6 <atan+0x50>

00005ac0 <__divsf3_pse>:
    5ac0:	99 23       	and	r25, r25
    5ac2:	c9 f3       	breq	.-14     	; 0x5ab6 <atan+0x60>
    5ac4:	55 23       	and	r21, r21
    5ac6:	b1 f3       	breq	.-20     	; 0x5ab4 <atan+0x5e>
    5ac8:	95 1b       	sub	r25, r21
    5aca:	55 0b       	sbc	r21, r21
    5acc:	bb 27       	eor	r27, r27
    5ace:	aa 27       	eor	r26, r26
    5ad0:	62 17       	cp	r22, r18
    5ad2:	73 07       	cpc	r23, r19
    5ad4:	84 07       	cpc	r24, r20
    5ad6:	38 f0       	brcs	.+14     	; 0x5ae6 <__divsf3_pse+0x26>
    5ad8:	9f 5f       	subi	r25, 0xFF	; 255
    5ada:	5f 4f       	sbci	r21, 0xFF	; 255
    5adc:	22 0f       	add	r18, r18
    5ade:	33 1f       	adc	r19, r19
    5ae0:	44 1f       	adc	r20, r20
    5ae2:	aa 1f       	adc	r26, r26
    5ae4:	a9 f3       	breq	.-22     	; 0x5ad0 <__divsf3_pse+0x10>
    5ae6:	33 d0       	rcall	.+102    	; 0x5b4e <__divsf3_pse+0x8e>
    5ae8:	0e 2e       	mov	r0, r30
    5aea:	3a f0       	brmi	.+14     	; 0x5afa <__divsf3_pse+0x3a>
    5aec:	e0 e8       	ldi	r30, 0x80	; 128
    5aee:	30 d0       	rcall	.+96     	; 0x5b50 <__divsf3_pse+0x90>
    5af0:	91 50       	subi	r25, 0x01	; 1
    5af2:	50 40       	sbci	r21, 0x00	; 0
    5af4:	e6 95       	lsr	r30
    5af6:	00 1c       	adc	r0, r0
    5af8:	ca f7       	brpl	.-14     	; 0x5aec <__divsf3_pse+0x2c>
    5afa:	29 d0       	rcall	.+82     	; 0x5b4e <__divsf3_pse+0x8e>
    5afc:	fe 2f       	mov	r31, r30
    5afe:	27 d0       	rcall	.+78     	; 0x5b4e <__divsf3_pse+0x8e>
    5b00:	66 0f       	add	r22, r22
    5b02:	77 1f       	adc	r23, r23
    5b04:	88 1f       	adc	r24, r24
    5b06:	bb 1f       	adc	r27, r27
    5b08:	26 17       	cp	r18, r22
    5b0a:	37 07       	cpc	r19, r23
    5b0c:	48 07       	cpc	r20, r24
    5b0e:	ab 07       	cpc	r26, r27
    5b10:	b0 e8       	ldi	r27, 0x80	; 128
    5b12:	09 f0       	breq	.+2      	; 0x5b16 <__divsf3_pse+0x56>
    5b14:	bb 0b       	sbc	r27, r27
    5b16:	80 2d       	mov	r24, r0
    5b18:	bf 01       	movw	r22, r30
    5b1a:	ff 27       	eor	r31, r31
    5b1c:	93 58       	subi	r25, 0x83	; 131
    5b1e:	5f 4f       	sbci	r21, 0xFF	; 255
    5b20:	2a f0       	brmi	.+10     	; 0x5b2c <__divsf3_pse+0x6c>
    5b22:	9e 3f       	cpi	r25, 0xFE	; 254
    5b24:	51 05       	cpc	r21, r1
    5b26:	68 f0       	brcs	.+26     	; 0x5b42 <__divsf3_pse+0x82>
    5b28:	24 c0       	rjmp	.+72     	; 0x5b72 <__fp_inf>
    5b2a:	93 c0       	rjmp	.+294    	; 0x5c52 <__fp_szero>
    5b2c:	5f 3f       	cpi	r21, 0xFF	; 255
    5b2e:	ec f3       	brlt	.-6      	; 0x5b2a <__divsf3_pse+0x6a>
    5b30:	98 3e       	cpi	r25, 0xE8	; 232
    5b32:	dc f3       	brlt	.-10     	; 0x5b2a <__divsf3_pse+0x6a>
    5b34:	86 95       	lsr	r24
    5b36:	77 95       	ror	r23
    5b38:	67 95       	ror	r22
    5b3a:	b7 95       	ror	r27
    5b3c:	f7 95       	ror	r31
    5b3e:	9f 5f       	subi	r25, 0xFF	; 255
    5b40:	c9 f7       	brne	.-14     	; 0x5b34 <__divsf3_pse+0x74>
    5b42:	88 0f       	add	r24, r24
    5b44:	91 1d       	adc	r25, r1
    5b46:	96 95       	lsr	r25
    5b48:	87 95       	ror	r24
    5b4a:	97 f9       	bld	r25, 7
    5b4c:	08 95       	ret
    5b4e:	e1 e0       	ldi	r30, 0x01	; 1
    5b50:	66 0f       	add	r22, r22
    5b52:	77 1f       	adc	r23, r23
    5b54:	88 1f       	adc	r24, r24
    5b56:	bb 1f       	adc	r27, r27
    5b58:	62 17       	cp	r22, r18
    5b5a:	73 07       	cpc	r23, r19
    5b5c:	84 07       	cpc	r24, r20
    5b5e:	ba 07       	cpc	r27, r26
    5b60:	20 f0       	brcs	.+8      	; 0x5b6a <__divsf3_pse+0xaa>
    5b62:	62 1b       	sub	r22, r18
    5b64:	73 0b       	sbc	r23, r19
    5b66:	84 0b       	sbc	r24, r20
    5b68:	ba 0b       	sbc	r27, r26
    5b6a:	ee 1f       	adc	r30, r30
    5b6c:	88 f7       	brcc	.-30     	; 0x5b50 <__divsf3_pse+0x90>
    5b6e:	e0 95       	com	r30
    5b70:	08 95       	ret

00005b72 <__fp_inf>:
    5b72:	97 f9       	bld	r25, 7
    5b74:	9f 67       	ori	r25, 0x7F	; 127
    5b76:	80 e8       	ldi	r24, 0x80	; 128
    5b78:	70 e0       	ldi	r23, 0x00	; 0
    5b7a:	60 e0       	ldi	r22, 0x00	; 0
    5b7c:	08 95       	ret

00005b7e <__fp_nan>:
    5b7e:	9f ef       	ldi	r25, 0xFF	; 255
    5b80:	80 ec       	ldi	r24, 0xC0	; 192
    5b82:	08 95       	ret

00005b84 <__fp_powser>:
    5b84:	df 93       	push	r29
    5b86:	cf 93       	push	r28
    5b88:	1f 93       	push	r17
    5b8a:	0f 93       	push	r16
    5b8c:	ff 92       	push	r15
    5b8e:	ef 92       	push	r14
    5b90:	df 92       	push	r13
    5b92:	7b 01       	movw	r14, r22
    5b94:	8c 01       	movw	r16, r24
    5b96:	68 94       	set
    5b98:	05 c0       	rjmp	.+10     	; 0x5ba4 <__fp_powser+0x20>
    5b9a:	da 2e       	mov	r13, r26
    5b9c:	ef 01       	movw	r28, r30
    5b9e:	70 d0       	rcall	.+224    	; 0x5c80 <__mulsf3x>
    5ba0:	fe 01       	movw	r30, r28
    5ba2:	e8 94       	clt
    5ba4:	a5 91       	lpm	r26, Z+
    5ba6:	25 91       	lpm	r18, Z+
    5ba8:	35 91       	lpm	r19, Z+
    5baa:	45 91       	lpm	r20, Z+
    5bac:	55 91       	lpm	r21, Z+
    5bae:	ae f3       	brts	.-22     	; 0x5b9a <__fp_powser+0x16>
    5bb0:	ef 01       	movw	r28, r30
    5bb2:	dd d0       	rcall	.+442    	; 0x5d6e <__addsf3x>
    5bb4:	fe 01       	movw	r30, r28
    5bb6:	97 01       	movw	r18, r14
    5bb8:	a8 01       	movw	r20, r16
    5bba:	da 94       	dec	r13
    5bbc:	79 f7       	brne	.-34     	; 0x5b9c <__fp_powser+0x18>
    5bbe:	df 90       	pop	r13
    5bc0:	ef 90       	pop	r14
    5bc2:	ff 90       	pop	r15
    5bc4:	0f 91       	pop	r16
    5bc6:	1f 91       	pop	r17
    5bc8:	cf 91       	pop	r28
    5bca:	df 91       	pop	r29
    5bcc:	08 95       	ret

00005bce <__fp_pscA>:
    5bce:	00 24       	eor	r0, r0
    5bd0:	0a 94       	dec	r0
    5bd2:	16 16       	cp	r1, r22
    5bd4:	17 06       	cpc	r1, r23
    5bd6:	18 06       	cpc	r1, r24
    5bd8:	09 06       	cpc	r0, r25
    5bda:	08 95       	ret

00005bdc <__fp_pscB>:
    5bdc:	00 24       	eor	r0, r0
    5bde:	0a 94       	dec	r0
    5be0:	12 16       	cp	r1, r18
    5be2:	13 06       	cpc	r1, r19
    5be4:	14 06       	cpc	r1, r20
    5be6:	05 06       	cpc	r0, r21
    5be8:	08 95       	ret

00005bea <__fp_round>:
    5bea:	09 2e       	mov	r0, r25
    5bec:	03 94       	inc	r0
    5bee:	00 0c       	add	r0, r0
    5bf0:	11 f4       	brne	.+4      	; 0x5bf6 <__fp_round+0xc>
    5bf2:	88 23       	and	r24, r24
    5bf4:	52 f0       	brmi	.+20     	; 0x5c0a <__fp_round+0x20>
    5bf6:	bb 0f       	add	r27, r27
    5bf8:	40 f4       	brcc	.+16     	; 0x5c0a <__fp_round+0x20>
    5bfa:	bf 2b       	or	r27, r31
    5bfc:	11 f4       	brne	.+4      	; 0x5c02 <__fp_round+0x18>
    5bfe:	60 ff       	sbrs	r22, 0
    5c00:	04 c0       	rjmp	.+8      	; 0x5c0a <__fp_round+0x20>
    5c02:	6f 5f       	subi	r22, 0xFF	; 255
    5c04:	7f 4f       	sbci	r23, 0xFF	; 255
    5c06:	8f 4f       	sbci	r24, 0xFF	; 255
    5c08:	9f 4f       	sbci	r25, 0xFF	; 255
    5c0a:	08 95       	ret

00005c0c <__fp_split3>:
    5c0c:	57 fd       	sbrc	r21, 7
    5c0e:	90 58       	subi	r25, 0x80	; 128
    5c10:	44 0f       	add	r20, r20
    5c12:	55 1f       	adc	r21, r21
    5c14:	59 f0       	breq	.+22     	; 0x5c2c <__fp_splitA+0x10>
    5c16:	5f 3f       	cpi	r21, 0xFF	; 255
    5c18:	71 f0       	breq	.+28     	; 0x5c36 <__fp_splitA+0x1a>
    5c1a:	47 95       	ror	r20

00005c1c <__fp_splitA>:
    5c1c:	88 0f       	add	r24, r24
    5c1e:	97 fb       	bst	r25, 7
    5c20:	99 1f       	adc	r25, r25
    5c22:	61 f0       	breq	.+24     	; 0x5c3c <__fp_splitA+0x20>
    5c24:	9f 3f       	cpi	r25, 0xFF	; 255
    5c26:	79 f0       	breq	.+30     	; 0x5c46 <__fp_splitA+0x2a>
    5c28:	87 95       	ror	r24
    5c2a:	08 95       	ret
    5c2c:	12 16       	cp	r1, r18
    5c2e:	13 06       	cpc	r1, r19
    5c30:	14 06       	cpc	r1, r20
    5c32:	55 1f       	adc	r21, r21
    5c34:	f2 cf       	rjmp	.-28     	; 0x5c1a <__fp_split3+0xe>
    5c36:	46 95       	lsr	r20
    5c38:	f1 df       	rcall	.-30     	; 0x5c1c <__fp_splitA>
    5c3a:	08 c0       	rjmp	.+16     	; 0x5c4c <__fp_splitA+0x30>
    5c3c:	16 16       	cp	r1, r22
    5c3e:	17 06       	cpc	r1, r23
    5c40:	18 06       	cpc	r1, r24
    5c42:	99 1f       	adc	r25, r25
    5c44:	f1 cf       	rjmp	.-30     	; 0x5c28 <__fp_splitA+0xc>
    5c46:	86 95       	lsr	r24
    5c48:	71 05       	cpc	r23, r1
    5c4a:	61 05       	cpc	r22, r1
    5c4c:	08 94       	sec
    5c4e:	08 95       	ret

00005c50 <__fp_zero>:
    5c50:	e8 94       	clt

00005c52 <__fp_szero>:
    5c52:	bb 27       	eor	r27, r27
    5c54:	66 27       	eor	r22, r22
    5c56:	77 27       	eor	r23, r23
    5c58:	cb 01       	movw	r24, r22
    5c5a:	97 f9       	bld	r25, 7
    5c5c:	08 95       	ret

00005c5e <inverse>:
    5c5e:	9b 01       	movw	r18, r22
    5c60:	ac 01       	movw	r20, r24
    5c62:	60 e0       	ldi	r22, 0x00	; 0
    5c64:	70 e0       	ldi	r23, 0x00	; 0
    5c66:	80 e8       	ldi	r24, 0x80	; 128
    5c68:	9f e3       	ldi	r25, 0x3F	; 63
    5c6a:	d4 c0       	rjmp	.+424    	; 0x5e14 <__divsf3>
    5c6c:	b0 df       	rcall	.-160    	; 0x5bce <__fp_pscA>
    5c6e:	28 f0       	brcs	.+10     	; 0x5c7a <inverse+0x1c>
    5c70:	b5 df       	rcall	.-150    	; 0x5bdc <__fp_pscB>
    5c72:	18 f0       	brcs	.+6      	; 0x5c7a <inverse+0x1c>
    5c74:	95 23       	and	r25, r21
    5c76:	09 f0       	breq	.+2      	; 0x5c7a <inverse+0x1c>
    5c78:	7c cf       	rjmp	.-264    	; 0x5b72 <__fp_inf>
    5c7a:	81 cf       	rjmp	.-254    	; 0x5b7e <__fp_nan>
    5c7c:	11 24       	eor	r1, r1
    5c7e:	e9 cf       	rjmp	.-46     	; 0x5c52 <__fp_szero>

00005c80 <__mulsf3x>:
    5c80:	c5 df       	rcall	.-118    	; 0x5c0c <__fp_split3>
    5c82:	a0 f3       	brcs	.-24     	; 0x5c6c <inverse+0xe>

00005c84 <__mulsf3_pse>:
    5c84:	95 9f       	mul	r25, r21
    5c86:	d1 f3       	breq	.-12     	; 0x5c7c <inverse+0x1e>
    5c88:	95 0f       	add	r25, r21
    5c8a:	50 e0       	ldi	r21, 0x00	; 0
    5c8c:	55 1f       	adc	r21, r21
    5c8e:	62 9f       	mul	r22, r18
    5c90:	f0 01       	movw	r30, r0
    5c92:	72 9f       	mul	r23, r18
    5c94:	bb 27       	eor	r27, r27
    5c96:	f0 0d       	add	r31, r0
    5c98:	b1 1d       	adc	r27, r1
    5c9a:	63 9f       	mul	r22, r19
    5c9c:	aa 27       	eor	r26, r26
    5c9e:	f0 0d       	add	r31, r0
    5ca0:	b1 1d       	adc	r27, r1
    5ca2:	aa 1f       	adc	r26, r26
    5ca4:	64 9f       	mul	r22, r20
    5ca6:	66 27       	eor	r22, r22
    5ca8:	b0 0d       	add	r27, r0
    5caa:	a1 1d       	adc	r26, r1
    5cac:	66 1f       	adc	r22, r22
    5cae:	82 9f       	mul	r24, r18
    5cb0:	22 27       	eor	r18, r18
    5cb2:	b0 0d       	add	r27, r0
    5cb4:	a1 1d       	adc	r26, r1
    5cb6:	62 1f       	adc	r22, r18
    5cb8:	73 9f       	mul	r23, r19
    5cba:	b0 0d       	add	r27, r0
    5cbc:	a1 1d       	adc	r26, r1
    5cbe:	62 1f       	adc	r22, r18
    5cc0:	83 9f       	mul	r24, r19
    5cc2:	a0 0d       	add	r26, r0
    5cc4:	61 1d       	adc	r22, r1
    5cc6:	22 1f       	adc	r18, r18
    5cc8:	74 9f       	mul	r23, r20
    5cca:	33 27       	eor	r19, r19
    5ccc:	a0 0d       	add	r26, r0
    5cce:	61 1d       	adc	r22, r1
    5cd0:	23 1f       	adc	r18, r19
    5cd2:	84 9f       	mul	r24, r20
    5cd4:	60 0d       	add	r22, r0
    5cd6:	21 1d       	adc	r18, r1
    5cd8:	82 2f       	mov	r24, r18
    5cda:	76 2f       	mov	r23, r22
    5cdc:	6a 2f       	mov	r22, r26
    5cde:	11 24       	eor	r1, r1
    5ce0:	9f 57       	subi	r25, 0x7F	; 127
    5ce2:	50 40       	sbci	r21, 0x00	; 0
    5ce4:	8a f0       	brmi	.+34     	; 0x5d08 <__mulsf3_pse+0x84>
    5ce6:	e1 f0       	breq	.+56     	; 0x5d20 <__mulsf3_pse+0x9c>
    5ce8:	88 23       	and	r24, r24
    5cea:	4a f0       	brmi	.+18     	; 0x5cfe <__mulsf3_pse+0x7a>
    5cec:	ee 0f       	add	r30, r30
    5cee:	ff 1f       	adc	r31, r31
    5cf0:	bb 1f       	adc	r27, r27
    5cf2:	66 1f       	adc	r22, r22
    5cf4:	77 1f       	adc	r23, r23
    5cf6:	88 1f       	adc	r24, r24
    5cf8:	91 50       	subi	r25, 0x01	; 1
    5cfa:	50 40       	sbci	r21, 0x00	; 0
    5cfc:	a9 f7       	brne	.-22     	; 0x5ce8 <__mulsf3_pse+0x64>
    5cfe:	9e 3f       	cpi	r25, 0xFE	; 254
    5d00:	51 05       	cpc	r21, r1
    5d02:	70 f0       	brcs	.+28     	; 0x5d20 <__mulsf3_pse+0x9c>
    5d04:	36 cf       	rjmp	.-404    	; 0x5b72 <__fp_inf>
    5d06:	a5 cf       	rjmp	.-182    	; 0x5c52 <__fp_szero>
    5d08:	5f 3f       	cpi	r21, 0xFF	; 255
    5d0a:	ec f3       	brlt	.-6      	; 0x5d06 <__mulsf3_pse+0x82>
    5d0c:	98 3e       	cpi	r25, 0xE8	; 232
    5d0e:	dc f3       	brlt	.-10     	; 0x5d06 <__mulsf3_pse+0x82>
    5d10:	86 95       	lsr	r24
    5d12:	77 95       	ror	r23
    5d14:	67 95       	ror	r22
    5d16:	b7 95       	ror	r27
    5d18:	f7 95       	ror	r31
    5d1a:	e7 95       	ror	r30
    5d1c:	9f 5f       	subi	r25, 0xFF	; 255
    5d1e:	c1 f7       	brne	.-16     	; 0x5d10 <__mulsf3_pse+0x8c>
    5d20:	fe 2b       	or	r31, r30
    5d22:	88 0f       	add	r24, r24
    5d24:	91 1d       	adc	r25, r1
    5d26:	96 95       	lsr	r25
    5d28:	87 95       	ror	r24
    5d2a:	97 f9       	bld	r25, 7
    5d2c:	08 95       	ret

00005d2e <square>:
    5d2e:	9b 01       	movw	r18, r22
    5d30:	ac 01       	movw	r20, r24
    5d32:	2f ca       	rjmp	.-2978   	; 0x5192 <__mulsf3>

00005d34 <__eerd_word_m2560>:
    5d34:	a8 e1       	ldi	r26, 0x18	; 24
    5d36:	b0 e0       	ldi	r27, 0x00	; 0
    5d38:	42 e0       	ldi	r20, 0x02	; 2
    5d3a:	50 e0       	ldi	r21, 0x00	; 0
    5d3c:	0c 94 0e 2f 	jmp	0x5e1c	; 0x5e1c <__eerd_blraw_m2560>

00005d40 <__eewr_word_m2560>:
    5d40:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__eewr_byte_m2560>
    5d44:	27 2f       	mov	r18, r23
    5d46:	0c 94 1d 2f 	jmp	0x5e3a	; 0x5e3a <__eewr_r18_m2560>

00005d4a <__subsf3>:
    5d4a:	50 58       	subi	r21, 0x80	; 128

00005d4c <__addsf3>:
    5d4c:	bb 27       	eor	r27, r27
    5d4e:	aa 27       	eor	r26, r26
    5d50:	0e d0       	rcall	.+28     	; 0x5d6e <__addsf3x>
    5d52:	4b cf       	rjmp	.-362    	; 0x5bea <__fp_round>
    5d54:	3c df       	rcall	.-392    	; 0x5bce <__fp_pscA>
    5d56:	30 f0       	brcs	.+12     	; 0x5d64 <__addsf3+0x18>
    5d58:	41 df       	rcall	.-382    	; 0x5bdc <__fp_pscB>
    5d5a:	20 f0       	brcs	.+8      	; 0x5d64 <__addsf3+0x18>
    5d5c:	31 f4       	brne	.+12     	; 0x5d6a <__addsf3+0x1e>
    5d5e:	9f 3f       	cpi	r25, 0xFF	; 255
    5d60:	11 f4       	brne	.+4      	; 0x5d66 <__addsf3+0x1a>
    5d62:	1e f4       	brtc	.+6      	; 0x5d6a <__addsf3+0x1e>
    5d64:	0c cf       	rjmp	.-488    	; 0x5b7e <__fp_nan>
    5d66:	0e f4       	brtc	.+2      	; 0x5d6a <__addsf3+0x1e>
    5d68:	e0 95       	com	r30
    5d6a:	e7 fb       	bst	r30, 7
    5d6c:	02 cf       	rjmp	.-508    	; 0x5b72 <__fp_inf>

00005d6e <__addsf3x>:
    5d6e:	e9 2f       	mov	r30, r25
    5d70:	4d df       	rcall	.-358    	; 0x5c0c <__fp_split3>
    5d72:	80 f3       	brcs	.-32     	; 0x5d54 <__addsf3+0x8>
    5d74:	ba 17       	cp	r27, r26
    5d76:	62 07       	cpc	r22, r18
    5d78:	73 07       	cpc	r23, r19
    5d7a:	84 07       	cpc	r24, r20
    5d7c:	95 07       	cpc	r25, r21
    5d7e:	18 f0       	brcs	.+6      	; 0x5d86 <__addsf3x+0x18>
    5d80:	71 f4       	brne	.+28     	; 0x5d9e <__addsf3x+0x30>
    5d82:	9e f5       	brtc	.+102    	; 0x5dea <__addsf3x+0x7c>
    5d84:	65 cf       	rjmp	.-310    	; 0x5c50 <__fp_zero>
    5d86:	0e f4       	brtc	.+2      	; 0x5d8a <__addsf3x+0x1c>
    5d88:	e0 95       	com	r30
    5d8a:	0b 2e       	mov	r0, r27
    5d8c:	ba 2f       	mov	r27, r26
    5d8e:	a0 2d       	mov	r26, r0
    5d90:	0b 01       	movw	r0, r22
    5d92:	b9 01       	movw	r22, r18
    5d94:	90 01       	movw	r18, r0
    5d96:	0c 01       	movw	r0, r24
    5d98:	ca 01       	movw	r24, r20
    5d9a:	a0 01       	movw	r20, r0
    5d9c:	11 24       	eor	r1, r1
    5d9e:	ff 27       	eor	r31, r31
    5da0:	59 1b       	sub	r21, r25
    5da2:	99 f0       	breq	.+38     	; 0x5dca <__addsf3x+0x5c>
    5da4:	59 3f       	cpi	r21, 0xF9	; 249
    5da6:	50 f4       	brcc	.+20     	; 0x5dbc <__addsf3x+0x4e>
    5da8:	50 3e       	cpi	r21, 0xE0	; 224
    5daa:	68 f1       	brcs	.+90     	; 0x5e06 <__addsf3x+0x98>
    5dac:	1a 16       	cp	r1, r26
    5dae:	f0 40       	sbci	r31, 0x00	; 0
    5db0:	a2 2f       	mov	r26, r18
    5db2:	23 2f       	mov	r18, r19
    5db4:	34 2f       	mov	r19, r20
    5db6:	44 27       	eor	r20, r20
    5db8:	58 5f       	subi	r21, 0xF8	; 248
    5dba:	f3 cf       	rjmp	.-26     	; 0x5da2 <__addsf3x+0x34>
    5dbc:	46 95       	lsr	r20
    5dbe:	37 95       	ror	r19
    5dc0:	27 95       	ror	r18
    5dc2:	a7 95       	ror	r26
    5dc4:	f0 40       	sbci	r31, 0x00	; 0
    5dc6:	53 95       	inc	r21
    5dc8:	c9 f7       	brne	.-14     	; 0x5dbc <__addsf3x+0x4e>
    5dca:	7e f4       	brtc	.+30     	; 0x5dea <__addsf3x+0x7c>
    5dcc:	1f 16       	cp	r1, r31
    5dce:	ba 0b       	sbc	r27, r26
    5dd0:	62 0b       	sbc	r22, r18
    5dd2:	73 0b       	sbc	r23, r19
    5dd4:	84 0b       	sbc	r24, r20
    5dd6:	ba f0       	brmi	.+46     	; 0x5e06 <__addsf3x+0x98>
    5dd8:	91 50       	subi	r25, 0x01	; 1
    5dda:	a1 f0       	breq	.+40     	; 0x5e04 <__addsf3x+0x96>
    5ddc:	ff 0f       	add	r31, r31
    5dde:	bb 1f       	adc	r27, r27
    5de0:	66 1f       	adc	r22, r22
    5de2:	77 1f       	adc	r23, r23
    5de4:	88 1f       	adc	r24, r24
    5de6:	c2 f7       	brpl	.-16     	; 0x5dd8 <__addsf3x+0x6a>
    5de8:	0e c0       	rjmp	.+28     	; 0x5e06 <__addsf3x+0x98>
    5dea:	ba 0f       	add	r27, r26
    5dec:	62 1f       	adc	r22, r18
    5dee:	73 1f       	adc	r23, r19
    5df0:	84 1f       	adc	r24, r20
    5df2:	48 f4       	brcc	.+18     	; 0x5e06 <__addsf3x+0x98>
    5df4:	87 95       	ror	r24
    5df6:	77 95       	ror	r23
    5df8:	67 95       	ror	r22
    5dfa:	b7 95       	ror	r27
    5dfc:	f7 95       	ror	r31
    5dfe:	9e 3f       	cpi	r25, 0xFE	; 254
    5e00:	08 f0       	brcs	.+2      	; 0x5e04 <__addsf3x+0x96>
    5e02:	b3 cf       	rjmp	.-154    	; 0x5d6a <__addsf3+0x1e>
    5e04:	93 95       	inc	r25
    5e06:	88 0f       	add	r24, r24
    5e08:	08 f0       	brcs	.+2      	; 0x5e0c <__addsf3x+0x9e>
    5e0a:	99 27       	eor	r25, r25
    5e0c:	ee 0f       	add	r30, r30
    5e0e:	97 95       	ror	r25
    5e10:	87 95       	ror	r24
    5e12:	08 95       	ret

00005e14 <__divsf3>:
    5e14:	53 de       	rcall	.-858    	; 0x5abc <__divsf3x>
    5e16:	e9 ce       	rjmp	.-558    	; 0x5bea <__fp_round>

00005e18 <__eerd_block_m2560>:
    5e18:	dc 01       	movw	r26, r24
    5e1a:	cb 01       	movw	r24, r22

00005e1c <__eerd_blraw_m2560>:
    5e1c:	fc 01       	movw	r30, r24
    5e1e:	f9 99       	sbic	0x1f, 1	; 31
    5e20:	fe cf       	rjmp	.-4      	; 0x5e1e <__eerd_blraw_m2560+0x2>
    5e22:	06 c0       	rjmp	.+12     	; 0x5e30 <__eerd_blraw_m2560+0x14>
    5e24:	f2 bd       	out	0x22, r31	; 34
    5e26:	e1 bd       	out	0x21, r30	; 33
    5e28:	f8 9a       	sbi	0x1f, 0	; 31
    5e2a:	31 96       	adiw	r30, 0x01	; 1
    5e2c:	00 b4       	in	r0, 0x20	; 32
    5e2e:	0d 92       	st	X+, r0
    5e30:	41 50       	subi	r20, 0x01	; 1
    5e32:	50 40       	sbci	r21, 0x00	; 0
    5e34:	b8 f7       	brcc	.-18     	; 0x5e24 <__eerd_blraw_m2560+0x8>
    5e36:	08 95       	ret

00005e38 <__eewr_byte_m2560>:
    5e38:	26 2f       	mov	r18, r22

00005e3a <__eewr_r18_m2560>:
    5e3a:	f9 99       	sbic	0x1f, 1	; 31
    5e3c:	fe cf       	rjmp	.-4      	; 0x5e3a <__eewr_r18_m2560>
    5e3e:	1f ba       	out	0x1f, r1	; 31
    5e40:	92 bd       	out	0x22, r25	; 34
    5e42:	81 bd       	out	0x21, r24	; 33
    5e44:	20 bd       	out	0x20, r18	; 32
    5e46:	0f b6       	in	r0, 0x3f	; 63
    5e48:	f8 94       	cli
    5e4a:	fa 9a       	sbi	0x1f, 2	; 31
    5e4c:	f9 9a       	sbi	0x1f, 1	; 31
    5e4e:	0f be       	out	0x3f, r0	; 63
    5e50:	01 96       	adiw	r24, 0x01	; 1
    5e52:	08 95       	ret

00005e54 <__divmodsi4>:
    5e54:	97 fb       	bst	r25, 7
    5e56:	09 2e       	mov	r0, r25
    5e58:	05 26       	eor	r0, r21
    5e5a:	0e d0       	rcall	.+28     	; 0x5e78 <__divmodsi4_neg1>
    5e5c:	57 fd       	sbrc	r21, 7
    5e5e:	04 d0       	rcall	.+8      	; 0x5e68 <__divmodsi4_neg2>
    5e60:	14 d0       	rcall	.+40     	; 0x5e8a <__udivmodsi4>
    5e62:	0a d0       	rcall	.+20     	; 0x5e78 <__divmodsi4_neg1>
    5e64:	00 1c       	adc	r0, r0
    5e66:	38 f4       	brcc	.+14     	; 0x5e76 <__divmodsi4_exit>

00005e68 <__divmodsi4_neg2>:
    5e68:	50 95       	com	r21
    5e6a:	40 95       	com	r20
    5e6c:	30 95       	com	r19
    5e6e:	21 95       	neg	r18
    5e70:	3f 4f       	sbci	r19, 0xFF	; 255
    5e72:	4f 4f       	sbci	r20, 0xFF	; 255
    5e74:	5f 4f       	sbci	r21, 0xFF	; 255

00005e76 <__divmodsi4_exit>:
    5e76:	08 95       	ret

00005e78 <__divmodsi4_neg1>:
    5e78:	f6 f7       	brtc	.-4      	; 0x5e76 <__divmodsi4_exit>
    5e7a:	90 95       	com	r25
    5e7c:	80 95       	com	r24
    5e7e:	70 95       	com	r23
    5e80:	61 95       	neg	r22
    5e82:	7f 4f       	sbci	r23, 0xFF	; 255
    5e84:	8f 4f       	sbci	r24, 0xFF	; 255
    5e86:	9f 4f       	sbci	r25, 0xFF	; 255
    5e88:	08 95       	ret

00005e8a <__udivmodsi4>:
    5e8a:	a1 e2       	ldi	r26, 0x21	; 33
    5e8c:	1a 2e       	mov	r1, r26
    5e8e:	aa 1b       	sub	r26, r26
    5e90:	bb 1b       	sub	r27, r27
    5e92:	fd 01       	movw	r30, r26
    5e94:	0d c0       	rjmp	.+26     	; 0x5eb0 <__udivmodsi4_ep>

00005e96 <__udivmodsi4_loop>:
    5e96:	aa 1f       	adc	r26, r26
    5e98:	bb 1f       	adc	r27, r27
    5e9a:	ee 1f       	adc	r30, r30
    5e9c:	ff 1f       	adc	r31, r31
    5e9e:	a2 17       	cp	r26, r18
    5ea0:	b3 07       	cpc	r27, r19
    5ea2:	e4 07       	cpc	r30, r20
    5ea4:	f5 07       	cpc	r31, r21
    5ea6:	20 f0       	brcs	.+8      	; 0x5eb0 <__udivmodsi4_ep>
    5ea8:	a2 1b       	sub	r26, r18
    5eaa:	b3 0b       	sbc	r27, r19
    5eac:	e4 0b       	sbc	r30, r20
    5eae:	f5 0b       	sbc	r31, r21

00005eb0 <__udivmodsi4_ep>:
    5eb0:	66 1f       	adc	r22, r22
    5eb2:	77 1f       	adc	r23, r23
    5eb4:	88 1f       	adc	r24, r24
    5eb6:	99 1f       	adc	r25, r25
    5eb8:	1a 94       	dec	r1
    5eba:	69 f7       	brne	.-38     	; 0x5e96 <__udivmodsi4_loop>
    5ebc:	60 95       	com	r22
    5ebe:	70 95       	com	r23
    5ec0:	80 95       	com	r24
    5ec2:	90 95       	com	r25
    5ec4:	9b 01       	movw	r18, r22
    5ec6:	ac 01       	movw	r20, r24
    5ec8:	bd 01       	movw	r22, r26
    5eca:	cf 01       	movw	r24, r30
    5ecc:	08 95       	ret

00005ece <_exit>:
    5ece:	ff cf       	rjmp	.-2      	; 0x5ece <_exit>
