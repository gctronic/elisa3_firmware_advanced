
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  000081e4  00008278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000081e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000366  0080021e  0080021e  00008296  2**0
                  ALLOC
  3 .stab         00003714  00000000  00000000  00008298  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eb9  00000000  00000000  0000b9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000218  00000000  00000000  0000c865  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001917  00000000  00000000  0000ca7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000049a1  00000000  00000000  0000e394  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000109e  00000000  00000000  00012d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005d98  00000000  00000000  00013dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007d0  00000000  00000000  00019b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000124c  00000000  00000000  0001a33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022bd  00000000  00000000  0001b588  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000244  00000000  00000000  0001d845  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  0001da89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 36 10 	jmp	0x206c	; 0x206c <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 31 32 	jmp	0x6462	; 0x6462 <__vector_32>
      84:	0c 94 47 32 	jmp	0x648e	; 0x648e <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 a4 31 	jmp	0x6348	; 0x6348 <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 78 31 	jmp	0x62f0	; 0x62f0 <__vector_42>
      ac:	0c 94 8e 31 	jmp	0x631c	; 0x631c <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 e1 30 	jmp	0x61c2	; 0x61c2 <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	13 13       	cpse	r17, r19
      e6:	f7 12       	cpse	r15, r23
      e8:	c5 12       	cpse	r12, r21
      ea:	b0 12       	cpse	r11, r16
      ec:	87 12       	cpse	r8, r23
      ee:	75 12       	cpse	r7, r21
      f0:	4c 12       	cpse	r4, r28
      f2:	30 12       	cpse	r3, r16
      f4:	f7 11       	cpse	r31, r7
      f6:	df 11       	cpse	r29, r15
      f8:	78 11       	cpse	r23, r8
      fa:	78 11       	cpse	r23, r8
      fc:	78 11       	cpse	r23, r8
      fe:	78 11       	cpse	r23, r8
     100:	78 11       	cpse	r23, r8
     102:	78 11       	cpse	r23, r8
     104:	24 12       	cpse	r2, r20
     106:	d4 11       	cpse	r29, r4
     108:	78 11       	cpse	r23, r8
     10a:	78 11       	cpse	r23, r8
     10c:	78 11       	cpse	r23, r8
     10e:	78 11       	cpse	r23, r8
     110:	78 11       	cpse	r23, r8
     112:	78 11       	cpse	r23, r8
     114:	78 11       	cpse	r23, r8
     116:	78 11       	cpse	r23, r8
     118:	78 11       	cpse	r23, r8
     11a:	78 11       	cpse	r23, r8
     11c:	78 11       	cpse	r23, r8
     11e:	78 11       	cpse	r23, r8
     120:	f7 11       	cpse	r31, r7
     122:	c5 12       	cpse	r12, r21
     124:	ac 11       	cpse	r26, r12
     126:	9f 11       	cpse	r25, r15
     128:	78 11       	cpse	r23, r8
     12a:	78 11       	cpse	r23, r8
     12c:	78 11       	cpse	r23, r8
     12e:	78 11       	cpse	r23, r8
     130:	78 11       	cpse	r23, r8
     132:	78 11       	cpse	r23, r8
     134:	78 11       	cpse	r23, r8
     136:	78 11       	cpse	r23, r8
     138:	78 11       	cpse	r23, r8
     13a:	78 11       	cpse	r23, r8
     13c:	78 11       	cpse	r23, r8
     13e:	78 11       	cpse	r23, r8
     140:	87 12       	cpse	r8, r23
     142:	4c 12       	cpse	r4, r28
     144:	78 11       	cpse	r23, r8
     146:	78 11       	cpse	r23, r8
     148:	13 13       	cpse	r17, r19
     14a:	75 12       	cpse	r7, r21
     14c:	b8 11       	cpse	r27, r8
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e4 ee       	ldi	r30, 0xE4	; 228
     1b2:	f1 e8       	ldi	r31, 0x81	; 129
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ae 31       	cpi	r26, 0x1E	; 30
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	15 e0       	ldi	r17, 0x05	; 5
     1c2:	ae e1       	ldi	r26, 0x1E	; 30
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a4 38       	cpi	r26, 0x84	; 132
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 f1 40 	jmp	0x81e2	; 0x81e2 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <main+0x26>
     202:	0f 92       	push	r0
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     208:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <initPeripherals>

	calibrateSensors();
     20c:	0e 94 a9 37 	call	0x6f52	; 0x6f52 <calibrateSensors>

	initBehaviors();
     210:	0e 94 5d 32 	call	0x64ba	; 0x64ba <initBehaviors>

	startTime = getTime100MicroSec();
     214:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     21c:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
     220:	9b 01       	movw	r18, r22
     222:	ac 01       	movw	r20, r24
     224:	60 93 5b 04 	sts	0x045B, r22
     228:	30 93 5c 04 	sts	0x045C, r19
     22c:	40 93 5d 04 	sts	0x045D, r20
     230:	50 93 5e 04 	sts	0x045E, r21
     234:	10 92 5f 04 	sts	0x045F, r1
     238:	10 92 60 04 	sts	0x0460, r1
     23c:	10 92 61 04 	sts	0x0461, r1
     240:	10 92 62 04 	sts	0x0462, r1
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     244:	aa 24       	eor	r10, r10
     246:	bb 24       	eor	r11, r11


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
     24e:	1b 82       	std	Y+3, r1	; 0x03
     250:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     252:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     254:	22 24       	eor	r2, r2
     256:	23 94       	inc	r2
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     258:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <getSelector>
     25c:	80 93 4b 04 	sts	0x044B, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     260:	0e 94 e9 36 	call	0x6dd2	; 0x6dd2 <readAccelXYZ>

		computeAngle();
     264:	0e 94 25 3c 	call	0x784a	; 0x784a <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     268:	80 91 4b 04 	lds	r24, 0x044B
     26c:	87 30       	cpi	r24, 0x07	; 7
     26e:	09 f4       	brne	.+2      	; 0x272 <main+0x96>
     270:	b3 c1       	rjmp	.+870    	; 0x5d8 <main+0x3fc>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     272:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     276:	6c 19       	sub	r22, r12
     278:	7d 09       	sbc	r23, r13
     27a:	8e 09       	sbc	r24, r14
     27c:	9f 09       	sbc	r25, r15
     27e:	6e 31       	cpi	r22, 0x1E	; 30
     280:	4b e4       	ldi	r20, 0x4B	; 75
     282:	74 07       	cpc	r23, r20
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	84 07       	cpc	r24, r20
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	94 07       	cpc	r25, r20
     28c:	08 f0       	brcs	.+2      	; 0x290 <main+0xb4>
     28e:	90 c1       	rjmp	.+800    	; 0x5b0 <main+0x3d4>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     290:	0e 94 66 11 	call	0x22cc	; 0x22cc <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     294:	0e 94 2b 0c 	call	0x1856	; 0x1856 <handleRFCommands>
		//}


		if(calibrateOdomFlag==0) {
     298:	80 91 bf 04 	lds	r24, 0x04BF
     29c:	88 23       	and	r24, r24
     29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0xc6>
     2a0:	72 c0       	rjmp	.+228    	; 0x386 <main+0x1aa>
				}

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
     2a2:	80 91 4b 04 	lds	r24, 0x044B
     2a6:	86 30       	cpi	r24, 0x06	; 6
     2a8:	09 f4       	brne	.+2      	; 0x2ac <main+0xd0>
     2aa:	5c c1       	rjmp	.+696    	; 0x564 <main+0x388>
     2ac:	8f 30       	cpi	r24, 0x0F	; 15
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <main+0xd6>
     2b0:	4a c0       	rjmp	.+148    	; 0x346 <main+0x16a>
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
     2b2:	0e 94 2f 2c 	call	0x585e	; 0x585e <handleMotorsWithSpeedController>
     2b6:	80 91 4b 04 	lds	r24, 0x044B
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     2ba:	08 17       	cp	r16, r24
     2bc:	69 f2       	breq	.-102    	; 0x258 <main+0x7c>
			disableObstacleAvoidance();
     2be:	0e 94 6a 34 	call	0x68d4	; 0x68d4 <disableObstacleAvoidance>
			disableCliffAvoidance();
     2c2:	0e 94 71 34 	call	0x68e2	; 0x68e2 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     2c6:	80 91 0b 01 	lds	r24, 0x010B
     2ca:	81 60       	ori	r24, 0x01	; 1
     2cc:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     2d0:	80 91 0b 01 	lds	r24, 0x010B
     2d4:	82 60       	ori	r24, 0x02	; 2
     2d6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     2da:	80 91 0b 01 	lds	r24, 0x010B
     2de:	84 60       	ori	r24, 0x04	; 4
     2e0:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     2e4:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     2e6:	80 91 0b 01 	lds	r24, 0x010B
     2ea:	80 61       	ori	r24, 0x10	; 16
     2ec:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     2f0:	80 91 0b 01 	lds	r24, 0x010B
     2f4:	80 62       	ori	r24, 0x20	; 32
     2f6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     2fa:	80 91 0b 01 	lds	r24, 0x010B
     2fe:	80 64       	ori	r24, 0x40	; 64
     300:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     304:	80 91 0b 01 	lds	r24, 0x010B
     308:	80 68       	ori	r24, 0x80	; 128
     30a:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     30e:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     312:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     316:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	0e 94 b1 34 	call	0x6962	; 0x6962 <updateRedLed>
			updateGreenLed(pwm_green);
     320:	80 91 0d 02 	lds	r24, 0x020D
     324:	0e 94 c5 34 	call	0x698a	; 0x698a <updateGreenLed>
			updateBlueLed(pwm_blue);
     328:	80 91 0e 02 	lds	r24, 0x020E
     32c:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <updateBlueLed>
			setRightSpeed(0);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
			setLeftSpeed(0);
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
			rgbState = 0;
     33c:	10 92 18 03 	sts	0x0318, r1
     340:	00 91 4b 04 	lds	r16, 0x044B
     344:	89 cf       	rjmp	.-238    	; 0x258 <main+0x7c>

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
		}

		switch(currentSelector) {
     34c:	90 91 4b 04 	lds	r25, 0x044B
     350:	89 2f       	mov	r24, r25
     352:	96 30       	cpi	r25, 0x06	; 6
     354:	09 f4       	brne	.+2      	; 0x358 <main+0x17c>
     356:	06 c1       	rjmp	.+524    	; 0x564 <main+0x388>
     358:	97 30       	cpi	r25, 0x07	; 7
     35a:	08 f0       	brcs	.+2      	; 0x35e <main+0x182>
     35c:	5e c1       	rjmp	.+700    	; 0x61a <main+0x43e>
     35e:	92 30       	cpi	r25, 0x02	; 2
     360:	09 f4       	brne	.+2      	; 0x364 <main+0x188>
     362:	56 c1       	rjmp	.+684    	; 0x610 <main+0x434>
     364:	93 30       	cpi	r25, 0x03	; 3
     366:	08 f0       	brcs	.+2      	; 0x36a <main+0x18e>
     368:	63 c2       	rjmp	.+1222   	; 0x830 <main+0x654>
     36a:	99 23       	and	r25, r25
     36c:	09 f4       	brne	.+2      	; 0x370 <main+0x194>
     36e:	9b c1       	rjmp	.+822    	; 0x6a6 <main+0x4ca>
     370:	91 30       	cpi	r25, 0x01	; 1
     372:	21 f4       	brne	.+8      	; 0x37c <main+0x1a0>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     374:	0e 94 66 34 	call	0x68cc	; 0x68cc <enableObstacleAvoidance>
     378:	90 91 4b 04 	lds	r25, 0x044B
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     37c:	99 23       	and	r25, r25
     37e:	09 f0       	breq	.+2      	; 0x382 <main+0x1a6>
     380:	98 cf       	rjmp	.-208    	; 0x2b2 <main+0xd6>
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	9a cf       	rjmp	.-204    	; 0x2ba <main+0xde>
			handleRFCommands();
		//}


		if(calibrateOdomFlag==0) {
			if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     386:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
     38a:	9b 01       	movw	r18, r22
     38c:	ac 01       	movw	r20, r24
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	cb 01       	movw	r24, r22
     394:	f0 91 5b 04 	lds	r31, 0x045B
     398:	e0 91 5c 04 	lds	r30, 0x045C
     39c:	80 90 5d 04 	lds	r8, 0x045D
     3a0:	40 90 5e 04 	lds	r4, 0x045E
     3a4:	30 90 5f 04 	lds	r3, 0x045F
     3a8:	50 90 60 04 	lds	r5, 0x0460
     3ac:	60 90 61 04 	lds	r6, 0x0461
     3b0:	70 90 62 04 	lds	r7, 0x0462
     3b4:	b2 2f       	mov	r27, r18
     3b6:	bf 1b       	sub	r27, r31
     3b8:	a1 e0       	ldi	r26, 0x01	; 1
     3ba:	2b 17       	cp	r18, r27
     3bc:	08 f0       	brcs	.+2      	; 0x3c0 <main+0x1e4>
     3be:	a0 e0       	ldi	r26, 0x00	; 0
     3c0:	f3 2f       	mov	r31, r19
     3c2:	fe 1b       	sub	r31, r30
     3c4:	ef 2f       	mov	r30, r31
     3c6:	f1 e0       	ldi	r31, 0x01	; 1
     3c8:	3e 17       	cp	r19, r30
     3ca:	08 f0       	brcs	.+2      	; 0x3ce <main+0x1f2>
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	9e 2e       	mov	r9, r30
     3d0:	9a 1a       	sub	r9, r26
     3d2:	a9 2d       	mov	r26, r9
     3d4:	99 24       	eor	r9, r9
     3d6:	93 94       	inc	r9
     3d8:	ea 17       	cp	r30, r26
     3da:	08 f0       	brcs	.+2      	; 0x3de <main+0x202>
     3dc:	99 24       	eor	r9, r9
     3de:	f9 29       	or	r31, r9
     3e0:	e4 2f       	mov	r30, r20
     3e2:	e8 19       	sub	r30, r8
     3e4:	8e 2e       	mov	r8, r30
     3e6:	e1 e0       	ldi	r30, 0x01	; 1
     3e8:	48 15       	cp	r20, r8
     3ea:	08 f0       	brcs	.+2      	; 0x3ee <main+0x212>
     3ec:	e0 e0       	ldi	r30, 0x00	; 0
     3ee:	98 2c       	mov	r9, r8
     3f0:	9f 1a       	sub	r9, r31
     3f2:	f1 e0       	ldi	r31, 0x01	; 1
     3f4:	89 14       	cp	r8, r9
     3f6:	08 f0       	brcs	.+2      	; 0x3fa <main+0x21e>
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	ef 2b       	or	r30, r31
     3fc:	f5 2f       	mov	r31, r21
     3fe:	f4 19       	sub	r31, r4
     400:	4f 2e       	mov	r4, r31
     402:	f1 e0       	ldi	r31, 0x01	; 1
     404:	54 15       	cp	r21, r4
     406:	08 f0       	brcs	.+2      	; 0x40a <main+0x22e>
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	84 2c       	mov	r8, r4
     40c:	8e 1a       	sub	r8, r30
     40e:	e1 e0       	ldi	r30, 0x01	; 1
     410:	48 14       	cp	r4, r8
     412:	08 f0       	brcs	.+2      	; 0x416 <main+0x23a>
     414:	e0 e0       	ldi	r30, 0x00	; 0
     416:	fe 2b       	or	r31, r30
     418:	31 94       	neg	r3
     41a:	e1 e0       	ldi	r30, 0x01	; 1
     41c:	63 15       	cp	r22, r3
     41e:	08 f0       	brcs	.+2      	; 0x422 <main+0x246>
     420:	e0 e0       	ldi	r30, 0x00	; 0
     422:	43 2c       	mov	r4, r3
     424:	4f 1a       	sub	r4, r31
     426:	f1 e0       	ldi	r31, 0x01	; 1
     428:	34 14       	cp	r3, r4
     42a:	08 f0       	brcs	.+2      	; 0x42e <main+0x252>
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	ef 2b       	or	r30, r31
     430:	51 94       	neg	r5
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	75 15       	cp	r23, r5
     436:	08 f0       	brcs	.+2      	; 0x43a <main+0x25e>
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	35 2c       	mov	r3, r5
     43c:	3e 1a       	sub	r3, r30
     43e:	e1 e0       	ldi	r30, 0x01	; 1
     440:	53 14       	cp	r5, r3
     442:	08 f0       	brcs	.+2      	; 0x446 <main+0x26a>
     444:	e0 e0       	ldi	r30, 0x00	; 0
     446:	fe 2b       	or	r31, r30
     448:	61 94       	neg	r6
     44a:	e1 e0       	ldi	r30, 0x01	; 1
     44c:	86 15       	cp	r24, r6
     44e:	08 f0       	brcs	.+2      	; 0x452 <main+0x276>
     450:	e0 e0       	ldi	r30, 0x00	; 0
     452:	96 2d       	mov	r25, r6
     454:	9f 1b       	sub	r25, r31
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	69 16       	cp	r6, r25
     45a:	08 f0       	brcs	.+2      	; 0x45e <main+0x282>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	e8 2b       	or	r30, r24
     460:	71 94       	neg	r7
     462:	7e 16       	cp	r7, r30
     464:	91 f4       	brne	.+36     	; 0x48a <main+0x2ae>
     466:	99 23       	and	r25, r25
     468:	81 f4       	brne	.+32     	; 0x48a <main+0x2ae>
     46a:	33 20       	and	r3, r3
     46c:	71 f4       	brne	.+28     	; 0x48a <main+0x2ae>
     46e:	44 20       	and	r4, r4
     470:	61 f4       	brne	.+24     	; 0x48a <main+0x2ae>
     472:	88 20       	and	r8, r8
     474:	51 f4       	brne	.+20     	; 0x48a <main+0x2ae>
     476:	99 20       	and	r9, r9
     478:	41 f4       	brne	.+16     	; 0x48a <main+0x2ae>
     47a:	a2 30       	cpi	r26, 0x02	; 2
     47c:	30 f4       	brcc	.+12     	; 0x48a <main+0x2ae>
     47e:	a1 30       	cpi	r26, 0x01	; 1
     480:	09 f0       	breq	.+2      	; 0x484 <main+0x2a8>
     482:	0f cf       	rjmp	.-482    	; 0x2a2 <main+0xc6>
     484:	b0 39       	cpi	r27, 0x90	; 144
     486:	08 f4       	brcc	.+2      	; 0x48a <main+0x2ae>
     488:	0c cf       	rjmp	.-488    	; 0x2a2 <main+0xc6>
				speedStepCounter = getTime100MicroSec();
     48a:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
     48e:	9b 01       	movw	r18, r22
     490:	ac 01       	movw	r20, r24
     492:	60 93 5b 04 	sts	0x045B, r22
     496:	30 93 5c 04 	sts	0x045C, r19
     49a:	40 93 5d 04 	sts	0x045D, r20
     49e:	50 93 5e 04 	sts	0x045E, r21
     4a2:	10 92 5f 04 	sts	0x045F, r1
     4a6:	10 92 60 04 	sts	0x0460, r1
     4aa:	10 92 61 04 	sts	0x0461, r1
     4ae:	10 92 62 04 	sts	0x0462, r1

				if(softAccEnabled) {
     4b2:	80 91 63 04 	lds	r24, 0x0463
     4b6:	88 23       	and	r24, r24
     4b8:	09 f4       	brne	.+2      	; 0x4bc <main+0x2e0>
     4ba:	fb c1       	rjmp	.+1014   	; 0x8b2 <main+0x6d6>
					if(pwm_right_desired == 0) {
     4bc:	80 91 f9 02 	lds	r24, 0x02F9
     4c0:	90 91 fa 02 	lds	r25, 0x02FA
     4c4:	00 97       	sbiw	r24, 0x00	; 0
     4c6:	09 f4       	brne	.+2      	; 0x4ca <main+0x2ee>
     4c8:	8c c2       	rjmp	.+1304   	; 0x9e2 <main+0x806>
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     4ca:	20 91 fd 02 	lds	r18, 0x02FD
     4ce:	30 91 fe 02 	lds	r19, 0x02FE
     4d2:	28 9f       	mul	r18, r24
     4d4:	a0 01       	movw	r20, r0
     4d6:	29 9f       	mul	r18, r25
     4d8:	50 0d       	add	r21, r0
     4da:	38 9f       	mul	r19, r24
     4dc:	50 0d       	add	r21, r0
     4de:	11 24       	eor	r1, r1
     4e0:	57 fd       	sbrc	r21, 7
     4e2:	7f c2       	rjmp	.+1278   	; 0x9e2 <main+0x806>
						pwm_intermediate_right_desired = 0;
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     4e4:	28 17       	cp	r18, r24
     4e6:	39 07       	cpc	r19, r25
     4e8:	0c f0       	brlt	.+2      	; 0x4ec <main+0x310>
     4ea:	e6 c6       	rjmp	.+3532   	; 0x12b8 <main+0x10dc>
						pwm_intermediate_right_desired += speedStep;
     4ec:	40 91 18 02 	lds	r20, 0x0218
     4f0:	24 0f       	add	r18, r20
     4f2:	31 1d       	adc	r19, r1
     4f4:	30 93 fe 02 	sts	0x02FE, r19
     4f8:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_right_desired > pwm_right_desired) {
     4fc:	82 17       	cp	r24, r18
     4fe:	93 07       	cpc	r25, r19
     500:	24 f4       	brge	.+8      	; 0x50a <main+0x32e>
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired -= speedStep;
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
     502:	90 93 fe 02 	sts	0x02FE, r25
     506:	80 93 fd 02 	sts	0x02FD, r24
						}					
					}
	
					if(pwm_left_desired == 0) {
     50a:	80 91 fb 02 	lds	r24, 0x02FB
     50e:	90 91 fc 02 	lds	r25, 0x02FC
     512:	00 97       	sbiw	r24, 0x00	; 0
     514:	09 f4       	brne	.+2      	; 0x518 <main+0x33c>
     516:	60 c2       	rjmp	.+1216   	; 0x9d8 <main+0x7fc>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     518:	20 91 ff 02 	lds	r18, 0x02FF
     51c:	30 91 00 03 	lds	r19, 0x0300
     520:	28 9f       	mul	r18, r24
     522:	a0 01       	movw	r20, r0
     524:	29 9f       	mul	r18, r25
     526:	50 0d       	add	r21, r0
     528:	38 9f       	mul	r19, r24
     52a:	50 0d       	add	r21, r0
     52c:	11 24       	eor	r1, r1
     52e:	57 fd       	sbrc	r21, 7
     530:	53 c2       	rjmp	.+1190   	; 0x9d8 <main+0x7fc>
						pwm_intermediate_left_desired = 0;
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     532:	28 17       	cp	r18, r24
     534:	39 07       	cpc	r19, r25
     536:	0c f0       	brlt	.+2      	; 0x53a <main+0x35e>
     538:	d0 c6       	rjmp	.+3488   	; 0x12da <main+0x10fe>
						pwm_intermediate_left_desired += speedStep;
     53a:	40 91 18 02 	lds	r20, 0x0218
     53e:	24 0f       	add	r18, r20
     540:	31 1d       	adc	r19, r1
     542:	30 93 00 03 	sts	0x0300, r19
     546:	20 93 ff 02 	sts	0x02FF, r18
						if(pwm_intermediate_left_desired > pwm_left_desired) {
     54a:	82 17       	cp	r24, r18
     54c:	93 07       	cpc	r25, r19
     54e:	0c f0       	brlt	.+2      	; 0x552 <main+0x376>
     550:	a8 ce       	rjmp	.-688    	; 0x2a2 <main+0xc6>
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
					pwm_intermediate_left_desired = pwm_left_desired;
     552:	90 93 00 03 	sts	0x0300, r25
     556:	80 93 ff 02 	sts	0x02FF, r24
				}

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
     55a:	80 91 4b 04 	lds	r24, 0x044B
     55e:	86 30       	cpi	r24, 0x06	; 6
     560:	09 f0       	breq	.+2      	; 0x564 <main+0x388>
     562:	a4 ce       	rjmp	.-696    	; 0x2ac <main+0xd0>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     564:	90 91 1f 04 	lds	r25, 0x041F
     568:	91 30       	cpi	r25, 0x01	; 1
     56a:	09 f4       	brne	.+2      	; 0x56e <main+0x392>
     56c:	ba c2       	rjmp	.+1396   	; 0xae2 <main+0x906>
     56e:	91 30       	cpi	r25, 0x01	; 1
     570:	08 f0       	brcs	.+2      	; 0x574 <main+0x398>
     572:	3c c2       	rjmp	.+1144   	; 0x9ec <main+0x810>
						case 0:
							setRightSpeed(0);
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
							setLeftSpeed(0);
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
							turnOffGreenLeds();
     580:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <turnOffGreenLeds>
							pwm_red=255;
     584:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     588:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     58c:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	0e 94 b1 34 	call	0x6962	; 0x6962 <updateRedLed>
							updateGreenLed(pwm_green);
     596:	80 91 0d 02 	lds	r24, 0x020D
     59a:	0e 94 c5 34 	call	0x698a	; 0x698a <updateGreenLed>
							updateBlueLed(pwm_blue);
     59e:	80 91 0e 02 	lds	r24, 0x020E
     5a2:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <updateBlueLed>
							LED_IR1_HIGH;
     5a6:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     5a8:	45 9a       	sbi	0x08, 5	; 8
     5aa:	90 91 4b 04 	lds	r25, 0x044B
							break;
     5ae:	e6 ce       	rjmp	.-564    	; 0x37c <main+0x1a0>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     5b0:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     5b4:	80 91 4b 04 	lds	r24, 0x044B
     5b8:	98 2f       	mov	r25, r24
     5ba:	94 50       	subi	r25, 0x04	; 4
     5bc:	92 30       	cpi	r25, 0x02	; 2
     5be:	08 f4       	brcc	.+2      	; 0x5c2 <main+0x3e6>
     5c0:	85 c1       	rjmp	.+778    	; 0x8cc <main+0x6f0>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     5c2:	87 30       	cpi	r24, 0x07	; 7
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <main+0x3ec>
     5c6:	ad c1       	rjmp	.+858    	; 0x922 <main+0x746>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     5c8:	86 30       	cpi	r24, 0x06	; 6
     5ca:	09 f4       	brne	.+2      	; 0x5ce <main+0x3f2>
     5cc:	e4 c0       	rjmp	.+456    	; 0x796 <main+0x5ba>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     5ce:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
     5d2:	6b 01       	movw	r12, r22
     5d4:	7c 01       	movw	r14, r24
     5d6:	5c ce       	rjmp	.-840    	; 0x290 <main+0xb4>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     5d8:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
     5dc:	29 81       	ldd	r18, Y+1	; 0x01
     5de:	3a 81       	ldd	r19, Y+2	; 0x02
     5e0:	4b 81       	ldd	r20, Y+3	; 0x03
     5e2:	5c 81       	ldd	r21, Y+4	; 0x04
     5e4:	62 1b       	sub	r22, r18
     5e6:	73 0b       	sbc	r23, r19
     5e8:	84 0b       	sbc	r24, r20
     5ea:	95 0b       	sbc	r25, r21
     5ec:	68 3c       	cpi	r22, 0xC8	; 200
     5ee:	32 e1       	ldi	r19, 0x12	; 18
     5f0:	73 07       	cpc	r23, r19
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	83 07       	cpc	r24, r19
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	93 07       	cpc	r25, r19
     5fa:	08 f4       	brcc	.+2      	; 0x5fe <main+0x422>
     5fc:	3a ce       	rjmp	.-908    	; 0x272 <main+0x96>
				pwm_red = 255;
     5fe:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     602:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     606:	10 93 0e 02 	sts	0x020E, r17
     60a:	33 ce       	rjmp	.-922    	; 0x272 <main+0x96>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     60c:	0e 94 66 34 	call	0x68cc	; 0x68cc <enableObstacleAvoidance>
					enableCliffAvoidance();
     610:	0e 94 6d 34 	call	0x68da	; 0x68da <enableCliffAvoidance>
     614:	90 91 4b 04 	lds	r25, 0x044B
					break;
     618:	b1 ce       	rjmp	.-670    	; 0x37c <main+0x1a0>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     61a:	9a 30       	cpi	r25, 0x0A	; 10
     61c:	09 f4       	brne	.+2      	; 0x620 <main+0x444>
     61e:	a1 c0       	rjmp	.+322    	; 0x762 <main+0x586>
     620:	9b 30       	cpi	r25, 0x0B	; 11
     622:	f8 f4       	brcc	.+62     	; 0x662 <main+0x486>
     624:	98 30       	cpi	r25, 0x08	; 8
     626:	09 f4       	brne	.+2      	; 0x62a <main+0x44e>
     628:	90 c0       	rjmp	.+288    	; 0x74a <main+0x56e>
     62a:	99 30       	cpi	r25, 0x09	; 9
     62c:	08 f4       	brcc	.+2      	; 0x630 <main+0x454>
     62e:	40 c0       	rjmp	.+128    	; 0x6b0 <main+0x4d4>
					if(calibrateOdomFlag==1) {
						handleCalibration();
					}
					break;

			case 9:	if(leftMotSteps <= 3000) {
     630:	60 91 d5 02 	lds	r22, 0x02D5
     634:	70 91 d6 02 	lds	r23, 0x02D6
     638:	80 91 d7 02 	lds	r24, 0x02D7
     63c:	90 91 d8 02 	lds	r25, 0x02D8
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e8       	ldi	r19, 0x80	; 128
     644:	4b e3       	ldi	r20, 0x3B	; 59
     646:	55 e4       	ldi	r21, 0x45	; 69
     648:	0e 94 75 3d 	call	0x7aea	; 0x7aea <__cmpsf2>
     64c:	18 16       	cp	r1, r24
     64e:	14 f5       	brge	.+68     	; 0x694 <main+0x4b8>

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
						setRightSpeed(0);
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
     65c:	90 91 4b 04 	lds	r25, 0x044B
     660:	8d ce       	rjmp	.-742    	; 0x37c <main+0x1a0>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     662:	9c 30       	cpi	r25, 0x0C	; 12
     664:	09 f4       	brne	.+2      	; 0x668 <main+0x48c>
     666:	ca c0       	rjmp	.+404    	; 0x7fc <main+0x620>
     668:	9c 30       	cpi	r25, 0x0C	; 12
     66a:	08 f4       	brcc	.+2      	; 0x66e <main+0x492>
     66c:	ad c0       	rjmp	.+346    	; 0x7c8 <main+0x5ec>
     66e:	9d 30       	cpi	r25, 0x0D	; 13
     670:	09 f0       	breq	.+2      	; 0x674 <main+0x498>
     672:	84 ce       	rjmp	.-760    	; 0x37c <main+0x1a0>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
     674:	60 91 d5 02 	lds	r22, 0x02D5
     678:	70 91 d6 02 	lds	r23, 0x02D6
     67c:	80 91 d7 02 	lds	r24, 0x02D7
     680:	90 91 d8 02 	lds	r25, 0x02D8
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 ec       	ldi	r19, 0xC0	; 192
     688:	4a ed       	ldi	r20, 0xDA	; 218
     68a:	55 e4       	ldi	r21, 0x45	; 69
     68c:	0e 94 75 3d 	call	0x7aea	; 0x7aea <__cmpsf2>
     690:	18 16       	cp	r1, r24
     692:	f4 f2       	brlt	.-68     	; 0x650 <main+0x474>
						setLeftSpeed(40);
     694:	88 e2       	ldi	r24, 0x28	; 40
     696:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
						setRightSpeed(40);
     69a:	88 e2       	ldi	r24, 0x28	; 40
     69c:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
     6a0:	90 91 4b 04 	lds	r25, 0x044B
     6a4:	6b ce       	rjmp	.-810    	; 0x37c <main+0x1a0>
		}

		switch(currentSelector) {
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     6a6:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <handleMotorsWithNoController>
     6aa:	90 91 4b 04 	lds	r25, 0x044B
					break;
     6ae:	66 ce       	rjmp	.-820    	; 0x37c <main+0x1a0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     6b0:	80 91 4f 04 	lds	r24, 0x044F
     6b4:	82 30       	cpi	r24, 0x02	; 2
     6b6:	09 f4       	brne	.+2      	; 0x6ba <main+0x4de>
     6b8:	50 c5       	rjmp	.+2720   	; 0x115a <main+0xf7e>
     6ba:	83 30       	cpi	r24, 0x03	; 3
     6bc:	08 f0       	brcs	.+2      	; 0x6c0 <main+0x4e4>
     6be:	b5 c1       	rjmp	.+874    	; 0xa2a <main+0x84e>
     6c0:	88 23       	and	r24, r24
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <main+0x4ea>
     6c4:	81 c4       	rjmp	.+2306   	; 0xfc8 <main+0xdec>
						case 0:	// move around
							turnOffGreenLeds();
     6c6:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <turnOffGreenLeds>
							GREEN_LED0_ON;
     6ca:	80 91 0b 01 	lds	r24, 0x010B
     6ce:	8e 7f       	andi	r24, 0xFE	; 254
     6d0:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     6d4:	10 92 50 04 	sts	0x0450, r1
							enableObstacleAvoidance();
     6d8:	0e 94 66 34 	call	0x68cc	; 0x68cc <enableObstacleAvoidance>
							setRightSpeed(20);
     6dc:	84 e1       	ldi	r24, 0x14	; 20
     6de:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
							setLeftSpeed(20);
     6e2:	84 e1       	ldi	r24, 0x14	; 20
     6e4:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     6e8:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
     6ec:	9b 01       	movw	r18, r22
     6ee:	ac 01       	movw	r20, r24
     6f0:	60 93 57 04 	sts	0x0457, r22
     6f4:	70 93 58 04 	sts	0x0458, r23
     6f8:	80 93 59 04 	sts	0x0459, r24
     6fc:	90 93 5a 04 	sts	0x045A, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     700:	80 91 53 04 	lds	r24, 0x0453
     704:	90 91 54 04 	lds	r25, 0x0454
     708:	a0 91 55 04 	lds	r26, 0x0455
     70c:	b0 91 56 04 	lds	r27, 0x0456
     710:	28 1b       	sub	r18, r24
     712:	39 0b       	sbc	r19, r25
     714:	4a 0b       	sbc	r20, r26
     716:	5b 0b       	sbc	r21, r27
     718:	23 33       	cpi	r18, 0x33	; 51
     71a:	6f ee       	ldi	r22, 0xEF	; 239
     71c:	36 07       	cpc	r19, r22
     71e:	62 e0       	ldi	r22, 0x02	; 2
     720:	46 07       	cpc	r20, r22
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	56 07       	cpc	r21, r22
     726:	10 f0       	brcs	.+4      	; 0x72c <main+0x550>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     728:	20 92 4f 04 	sts	0x044F, r2
							//pwm_green = 0;
							//pwm_blue = 0;													
							break;							
					}

					updateRedLed(pwm_red);
     72c:	80 91 0c 02 	lds	r24, 0x020C
     730:	0e 94 b1 34 	call	0x6962	; 0x6962 <updateRedLed>
					updateGreenLed(pwm_green);
     734:	80 91 0d 02 	lds	r24, 0x020D
     738:	0e 94 c5 34 	call	0x698a	; 0x698a <updateGreenLed>
					updateBlueLed(pwm_blue);
     73c:	80 91 0e 02 	lds	r24, 0x020E
     740:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <updateBlueLed>
     744:	90 91 4b 04 	lds	r25, 0x044B

					break;
     748:	19 ce       	rjmp	.-974    	; 0x37c <main+0x1a0>
  
			case 8:	// motors calibration
					irEnabled = 1;
     74a:	20 92 12 02 	sts	0x0212, r2
					if(calibrateOdomFlag==1) {
     74e:	80 91 bf 04 	lds	r24, 0x04BF
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	09 f0       	breq	.+2      	; 0x758 <main+0x57c>
     756:	ad cd       	rjmp	.-1190   	; 0x2b2 <main+0xd6>
						handleCalibration();
     758:	0e 94 d6 21 	call	0x43ac	; 0x43ac <handleCalibration>
     75c:	90 91 4b 04 	lds	r25, 0x044B
     760:	0d ce       	rjmp	.-998    	; 0x37c <main+0x1a0>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 10:if(leftMotSteps <= 4000) {
     762:	60 91 d5 02 	lds	r22, 0x02D5
     766:	70 91 d6 02 	lds	r23, 0x02D6
     76a:	80 91 d7 02 	lds	r24, 0x02D7
     76e:	90 91 d8 02 	lds	r25, 0x02D8
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	4a e7       	ldi	r20, 0x7A	; 122
     778:	55 e4       	ldi	r21, 0x45	; 69
     77a:	0e 94 75 3d 	call	0x7aea	; 0x7aea <__cmpsf2>
     77e:	18 16       	cp	r1, r24
     780:	0c f4       	brge	.+2      	; 0x784 <main+0x5a8>
     782:	66 cf       	rjmp	.-308    	; 0x650 <main+0x474>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     784:	88 e2       	ldi	r24, 0x28	; 40
     786:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
						setRightSpeed(40);
     78a:	88 e2       	ldi	r24, 0x28	; 40
     78c:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
     790:	90 91 4b 04 	lds	r25, 0x044B
     794:	f3 cd       	rjmp	.-1050   	; 0x37c <main+0x1a0>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     796:	80 91 1f 04 	lds	r24, 0x041F
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	09 f0       	breq	.+2      	; 0x7a0 <main+0x5c4>
     79e:	17 cf       	rjmp	.-466    	; 0x5ce <main+0x3f2>
     7a0:	90 91 15 03 	lds	r25, 0x0315
     7a4:	92 30       	cpi	r25, 0x02	; 2
     7a6:	08 f0       	brcs	.+2      	; 0x7aa <main+0x5ce>
     7a8:	12 cf       	rjmp	.-476    	; 0x5ce <main+0x3f2>
					if(rgbState == 0) {
     7aa:	90 91 18 03 	lds	r25, 0x0318
     7ae:	99 23       	and	r25, r25
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <main+0x5d8>
     7b2:	04 c6       	rjmp	.+3080   	; 0x13bc <main+0x11e0>
						pwm_red = 254;
     7b4:	4e ef       	ldi	r20, 0xFE	; 254
     7b6:	40 93 0c 02 	sts	0x020C, r20
						pwm_green = 255;
     7ba:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     7be:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     7c2:	80 93 18 03 	sts	0x0318, r24
     7c6:	03 cf       	rjmp	.-506    	; 0x5ce <main+0x3f2>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 11:if(leftMotSteps <= 5000) {
     7c8:	60 91 d5 02 	lds	r22, 0x02D5
     7cc:	70 91 d6 02 	lds	r23, 0x02D6
     7d0:	80 91 d7 02 	lds	r24, 0x02D7
     7d4:	90 91 d8 02 	lds	r25, 0x02D8
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e4       	ldi	r19, 0x40	; 64
     7dc:	4c e9       	ldi	r20, 0x9C	; 156
     7de:	55 e4       	ldi	r21, 0x45	; 69
     7e0:	0e 94 75 3d 	call	0x7aea	; 0x7aea <__cmpsf2>
     7e4:	18 16       	cp	r1, r24
     7e6:	0c f4       	brge	.+2      	; 0x7ea <main+0x60e>
     7e8:	33 cf       	rjmp	.-410    	; 0x650 <main+0x474>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     7ea:	88 e2       	ldi	r24, 0x28	; 40
     7ec:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
						setRightSpeed(40);
     7f0:	88 e2       	ldi	r24, 0x28	; 40
     7f2:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
     7f6:	90 91 4b 04 	lds	r25, 0x044B
     7fa:	c0 cd       	rjmp	.-1152   	; 0x37c <main+0x1a0>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     7fc:	60 91 d5 02 	lds	r22, 0x02D5
     800:	70 91 d6 02 	lds	r23, 0x02D6
     804:	80 91 d7 02 	lds	r24, 0x02D7
     808:	90 91 d8 02 	lds	r25, 0x02D8
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e8       	ldi	r19, 0x80	; 128
     810:	4b eb       	ldi	r20, 0xBB	; 187
     812:	55 e4       	ldi	r21, 0x45	; 69
     814:	0e 94 75 3d 	call	0x7aea	; 0x7aea <__cmpsf2>
     818:	18 16       	cp	r1, r24
     81a:	0c f0       	brlt	.+2      	; 0x81e <main+0x642>
     81c:	3b cf       	rjmp	.-394    	; 0x694 <main+0x4b8>
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
						setRightSpeed(0);
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
     82a:	90 91 4b 04 	lds	r25, 0x044B
     82e:	a6 cd       	rjmp	.-1204   	; 0x37c <main+0x1a0>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     830:	94 30       	cpi	r25, 0x04	; 4
     832:	d1 f0       	breq	.+52     	; 0x868 <main+0x68c>
     834:	95 30       	cpi	r25, 0x05	; 5
     836:	08 f4       	brcc	.+2      	; 0x83a <main+0x65e>
     838:	e9 ce       	rjmp	.-558    	; 0x60c <main+0x430>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     83a:	80 91 0c 02 	lds	r24, 0x020C
     83e:	0e 94 b1 34 	call	0x6962	; 0x6962 <updateRedLed>
					updateGreenLed(pwm_green);
     842:	80 91 0d 02 	lds	r24, 0x020D
     846:	0e 94 c5 34 	call	0x698a	; 0x698a <updateGreenLed>
					updateBlueLed(pwm_blue);
     84a:	80 91 0e 02 	lds	r24, 0x020E
     84e:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <updateBlueLed>
					enableObstacleAvoidance();
     852:	0e 94 66 34 	call	0x68cc	; 0x68cc <enableObstacleAvoidance>
					setLeftSpeed(25);
     856:	89 e1       	ldi	r24, 0x19	; 25
     858:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
					setRightSpeed(25);
     85c:	89 e1       	ldi	r24, 0x19	; 25
     85e:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
     862:	90 91 4b 04 	lds	r25, 0x044B
					break;
     866:	8a cd       	rjmp	.-1260   	; 0x37c <main+0x1a0>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     868:	80 91 0b 01 	lds	r24, 0x010B
     86c:	8e 7f       	andi	r24, 0xFE	; 254
     86e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     872:	80 91 0b 01 	lds	r24, 0x010B
     876:	8d 7f       	andi	r24, 0xFD	; 253
     878:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     87c:	80 91 0b 01 	lds	r24, 0x010B
     880:	8b 7f       	andi	r24, 0xFB	; 251
     882:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     886:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     888:	80 91 0b 01 	lds	r24, 0x010B
     88c:	8f 7e       	andi	r24, 0xEF	; 239
     88e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     892:	80 91 0b 01 	lds	r24, 0x010B
     896:	8f 7d       	andi	r24, 0xDF	; 223
     898:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     89c:	80 91 0b 01 	lds	r24, 0x010B
     8a0:	8f 7b       	andi	r24, 0xBF	; 191
     8a2:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     8a6:	80 91 0b 01 	lds	r24, 0x010B
     8aa:	8f 77       	andi	r24, 0x7F	; 127
     8ac:	80 93 0b 01 	sts	0x010B, r24
     8b0:	3d cf       	rjmp	.-390    	; 0x72c <main+0x550>
						if(pwm_intermediate_left_desired < pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
     8b2:	80 91 f9 02 	lds	r24, 0x02F9
     8b6:	90 91 fa 02 	lds	r25, 0x02FA
     8ba:	90 93 fe 02 	sts	0x02FE, r25
     8be:	80 93 fd 02 	sts	0x02FD, r24
					pwm_intermediate_left_desired = pwm_left_desired;
     8c2:	80 91 fb 02 	lds	r24, 0x02FB
     8c6:	90 91 fc 02 	lds	r25, 0x02FC
     8ca:	43 ce       	rjmp	.-890    	; 0x552 <main+0x376>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     8cc:	0e 94 88 40 	call	0x8110	; 0x8110 <rand>
     8d0:	6e e1       	ldi	r22, 0x1E	; 30
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
     8d8:	a8 0e       	add	r10, r24
     8da:	b9 1e       	adc	r11, r25
     8dc:	5f e7       	ldi	r21, 0x7F	; 127
     8de:	a5 22       	and	r10, r21
     8e0:	bb 24       	eor	r11, r11

				switch(rgbState) {
     8e2:	80 91 18 03 	lds	r24, 0x0318
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	09 f4       	brne	.+2      	; 0x8ec <main+0x710>
     8ea:	ee c3       	rjmp	.+2012   	; 0x10c8 <main+0xeec>
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <main+0x716>
     8f0:	61 c3       	rjmp	.+1730   	; 0xfb4 <main+0xdd8>
					case 0:
						pwm_red = 255 - currRand;	
     8f2:	8a 2d       	mov	r24, r10
     8f4:	80 95       	com	r24
     8f6:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     8fa:	20 92 18 03 	sts	0x0318, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     8fe:	80 e2       	ldi	r24, 0x20	; 32
     900:	a8 16       	cp	r10, r24
     902:	b1 04       	cpc	r11, r1
     904:	08 f0       	brcs	.+2      	; 0x908 <main+0x72c>
     906:	d4 c0       	rjmp	.+424    	; 0xab0 <main+0x8d4>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     908:	80 91 0d 02 	lds	r24, 0x020D
     90c:	8f 3f       	cpi	r24, 0xFF	; 255
     90e:	09 f4       	brne	.+2      	; 0x912 <main+0x736>
     910:	5e ce       	rjmp	.-836    	; 0x5ce <main+0x3f2>
     912:	80 91 0e 02 	lds	r24, 0x020E
     916:	8f 3f       	cpi	r24, 0xFF	; 255
     918:	09 f4       	brne	.+2      	; 0x91c <main+0x740>
     91a:	59 ce       	rjmp	.-846    	; 0x5ce <main+0x3f2>
						pwm_red = 255;
     91c:	10 93 0c 02 	sts	0x020C, r17
     920:	56 ce       	rjmp	.-852    	; 0x5ce <main+0x3f2>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     922:	80 91 94 00 	lds	r24, 0x0094
     926:	90 91 95 00 	lds	r25, 0x0095
     92a:	0e 94 8d 40 	call	0x811a	; 0x811a <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     92e:	0e 94 88 40 	call	0x8110	; 0x8110 <rand>
     932:	6e e1       	ldi	r22, 0x1E	; 30
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
     93a:	4c 01       	movw	r8, r24
     93c:	8a 0c       	add	r8, r10
     93e:	9b 1c       	adc	r9, r11
     940:	ff e7       	ldi	r31, 0x7F	; 127
     942:	8f 22       	and	r8, r31
     944:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     946:	88 2d       	mov	r24, r8
     948:	80 95       	com	r24
     94a:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     94e:	80 91 94 00 	lds	r24, 0x0094
     952:	90 91 95 00 	lds	r25, 0x0095
     956:	0e 94 8d 40 	call	0x811a	; 0x811a <srand>
				currRand = (currRand + rand()%30) % 128;	
     95a:	0e 94 88 40 	call	0x8110	; 0x8110 <rand>
     95e:	6e e1       	ldi	r22, 0x1E	; 30
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
     966:	6c 01       	movw	r12, r24
     968:	c8 0c       	add	r12, r8
     96a:	d9 1c       	adc	r13, r9
     96c:	2f e7       	ldi	r18, 0x7F	; 127
     96e:	c2 22       	and	r12, r18
     970:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     972:	8c 2d       	mov	r24, r12
     974:	80 95       	com	r24
     976:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     97a:	80 91 94 00 	lds	r24, 0x0094
     97e:	90 91 95 00 	lds	r25, 0x0095
     982:	0e 94 8d 40 	call	0x811a	; 0x811a <srand>
				currRand = (currRand + rand()%30) % 128;
     986:	0e 94 88 40 	call	0x8110	; 0x8110 <rand>
     98a:	6e e1       	ldi	r22, 0x1E	; 30
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
     992:	5c 01       	movw	r10, r24
     994:	ac 0c       	add	r10, r12
     996:	bd 1c       	adc	r11, r13
     998:	3f e7       	ldi	r19, 0x7F	; 127
     99a:	a3 22       	and	r10, r19
     99c:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     99e:	8a 2d       	mov	r24, r10
     9a0:	80 95       	com	r24
     9a2:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     9a6:	80 91 94 00 	lds	r24, 0x0094
     9aa:	90 91 95 00 	lds	r25, 0x0095
     9ae:	0e 94 8d 40 	call	0x811a	; 0x811a <srand>
				currRand2 = rand()%128;
     9b2:	0e 94 88 40 	call	0x8110	; 0x8110 <rand>
     9b6:	60 e8       	ldi	r22, 0x80	; 128
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
				if(currRand2<32) {
     9be:	80 32       	cpi	r24, 0x20	; 32
     9c0:	91 05       	cpc	r25, r1
     9c2:	08 f0       	brcs	.+2      	; 0x9c6 <main+0x7ea>
     9c4:	87 c0       	rjmp	.+270    	; 0xad4 <main+0x8f8>
					pwm_red = 255;
     9c6:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     9ca:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	fb cd       	rjmp	.-1034   	; 0x5ce <main+0x3f2>
					}
	
					if(pwm_left_desired == 0) {
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
						pwm_intermediate_left_desired = 0;
     9d8:	10 92 00 03 	sts	0x0300, r1
     9dc:	10 92 ff 02 	sts	0x02FF, r1
     9e0:	60 cc       	rjmp	.-1856   	; 0x2a2 <main+0xc6>

				if(softAccEnabled) {
					if(pwm_right_desired == 0) {
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
						pwm_intermediate_right_desired = 0;
     9e2:	10 92 fe 02 	sts	0x02FE, r1
     9e6:	10 92 fd 02 	sts	0x02FD, r1
     9ea:	8f cd       	rjmp	.-1250   	; 0x50a <main+0x32e>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     9ec:	92 30       	cpi	r25, 0x02	; 2
     9ee:	11 f0       	breq	.+4      	; 0x9f4 <main+0x818>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     9f0:	98 2f       	mov	r25, r24
     9f2:	c4 cc       	rjmp	.-1656   	; 0x37c <main+0x1a0>
     9f4:	90 91 20 04 	lds	r25, 0x0420
     9f8:	99 23       	and	r25, r25
     9fa:	d1 f3       	breq	.-12     	; 0x9f0 <main+0x814>
								turnOnGreenLeds();
     9fc:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     a00:	60 91 13 03 	lds	r22, 0x0313
     a04:	70 91 14 03 	lds	r23, 0x0314
     a08:	8e ef       	ldi	r24, 0xFE	; 254
     a0a:	9f e0       	ldi	r25, 0x0F	; 15
     a0c:	0e 94 ec 40 	call	0x81d8	; 0x81d8 <__eewr_word_m2560>
								turnOffGreenLeds();
     a10:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     a14:	8a ea       	ldi	r24, 0xAA	; 170
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								addressReceived = 0;
     a1c:	10 92 20 04 	sts	0x0420, r1
								menuChoice = 0;
     a20:	10 92 1f 04 	sts	0x041F, r1
     a24:	90 91 4b 04 	lds	r25, 0x044B
     a28:	a9 cc       	rjmp	.-1710   	; 0x37c <main+0x1a0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     a2a:	84 30       	cpi	r24, 0x04	; 4
     a2c:	09 f4       	brne	.+2      	; 0xa30 <main+0x854>
     a2e:	54 c3       	rjmp	.+1704   	; 0x10d8 <main+0xefc>
     a30:	84 30       	cpi	r24, 0x04	; 4
     a32:	08 f4       	brcc	.+2      	; 0xa36 <main+0x85a>
     a34:	04 c3       	rjmp	.+1544   	; 0x103e <main+0xe62>
     a36:	85 30       	cpi	r24, 0x05	; 5
     a38:	09 f0       	breq	.+2      	; 0xa3c <main+0x860>
     a3a:	78 ce       	rjmp	.-784    	; 0x72c <main+0x550>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     a3c:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <turnOffGreenLeds>
							GREEN_LED6_ON;
     a40:	80 91 0b 01 	lds	r24, 0x010B
     a44:	8f 7b       	andi	r24, 0xBF	; 191
     a46:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     a4a:	80 91 0b 01 	lds	r24, 0x010B
     a4e:	8f 77       	andi	r24, 0x7F	; 127
     a50:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     a54:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
     a58:	9b 01       	movw	r18, r22
     a5a:	ac 01       	movw	r20, r24
     a5c:	60 93 57 04 	sts	0x0457, r22
     a60:	70 93 58 04 	sts	0x0458, r23
     a64:	80 93 59 04 	sts	0x0459, r24
     a68:	90 93 5a 04 	sts	0x045A, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     a6c:	80 91 53 04 	lds	r24, 0x0453
     a70:	90 91 54 04 	lds	r25, 0x0454
     a74:	a0 91 55 04 	lds	r26, 0x0455
     a78:	b0 91 56 04 	lds	r27, 0x0456
     a7c:	28 1b       	sub	r18, r24
     a7e:	39 0b       	sbc	r19, r25
     a80:	4a 0b       	sbc	r20, r26
     a82:	5b 0b       	sbc	r21, r27
     a84:	2b 32       	cpi	r18, 0x2B	; 43
     a86:	9c e1       	ldi	r25, 0x1C	; 28
     a88:	39 07       	cpc	r19, r25
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	49 07       	cpc	r20, r25
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	59 07       	cpc	r21, r25
     a92:	08 f4       	brcc	.+2      	; 0xa96 <main+0x8ba>
     a94:	4b ce       	rjmp	.-874    	; 0x72c <main+0x550>
								demoStartTime = getTime100MicroSec();
     a96:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
     a9a:	60 93 53 04 	sts	0x0453, r22
     a9e:	70 93 54 04 	sts	0x0454, r23
     aa2:	80 93 55 04 	sts	0x0455, r24
     aa6:	90 93 56 04 	sts	0x0456, r25
								demoState = 0;							
     aaa:	10 92 4f 04 	sts	0x044F, r1
     aae:	3e ce       	rjmp	.-900    	; 0x72c <main+0x550>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     ab0:	90 e4       	ldi	r25, 0x40	; 64
     ab2:	a9 16       	cp	r10, r25
     ab4:	b1 04       	cpc	r11, r1
     ab6:	08 f0       	brcs	.+2      	; 0xaba <main+0x8de>
     ab8:	cc c3       	rjmp	.+1944   	; 0x1252 <main+0x1076>
					if(pwm_red!=255 && pwm_blue!=255) {
     aba:	80 91 0c 02 	lds	r24, 0x020C
     abe:	8f 3f       	cpi	r24, 0xFF	; 255
     ac0:	09 f4       	brne	.+2      	; 0xac4 <main+0x8e8>
     ac2:	85 cd       	rjmp	.-1270   	; 0x5ce <main+0x3f2>
     ac4:	80 91 0e 02 	lds	r24, 0x020E
     ac8:	8f 3f       	cpi	r24, 0xFF	; 255
     aca:	09 f4       	brne	.+2      	; 0xace <main+0x8f2>
     acc:	80 cd       	rjmp	.-1280   	; 0x5ce <main+0x3f2>
						pwm_green = 255;
     ace:	10 93 0d 02 	sts	0x020D, r17
     ad2:	7d cd       	rjmp	.-1286   	; 0x5ce <main+0x3f2>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     ad4:	80 34       	cpi	r24, 0x40	; 64
     ad6:	91 05       	cpc	r25, r1
     ad8:	08 f0       	brcs	.+2      	; 0xadc <main+0x900>
     ada:	e7 c3       	rjmp	.+1998   	; 0x12aa <main+0x10ce>
					pwm_green = 255;
     adc:	10 93 0d 02 	sts	0x020D, r17
     ae0:	74 cf       	rjmp	.-280    	; 0x9ca <main+0x7ee>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     ae2:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <turnOnGreenLeds>
							updateRedLed(pwm_red);
     ae6:	80 91 0c 02 	lds	r24, 0x020C
     aea:	0e 94 b1 34 	call	0x6962	; 0x6962 <updateRedLed>
							updateGreenLed(pwm_green);
     aee:	80 91 0d 02 	lds	r24, 0x020D
     af2:	0e 94 c5 34 	call	0x698a	; 0x698a <updateGreenLed>
							updateBlueLed(pwm_blue);
     af6:	80 91 0e 02 	lds	r24, 0x020E
     afa:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <updateBlueLed>
							LED_IR1_LOW;
     afe:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     b00:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     b02:	80 91 22 04 	lds	r24, 0x0422
     b06:	88 23       	and	r24, r24
     b08:	09 f4       	brne	.+2      	; 0xb0c <main+0x930>
     b0a:	a8 cd       	rjmp	.-1200   	; 0x65c <main+0x480>
								getDataNow = 0;	
     b0c:	10 92 22 04 	sts	0x0422, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b10:	80 91 59 02 	lds	r24, 0x0259
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     b1a:	80 91 5a 02 	lds	r24, 0x025A
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     b24:	80 91 29 02 	lds	r24, 0x0229
     b28:	90 91 2a 02 	lds	r25, 0x022A
     b2c:	61 e0       	ldi	r22, 0x01	; 1
     b2e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     b32:	80 91 29 02 	lds	r24, 0x0229
     b36:	90 91 2a 02 	lds	r25, 0x022A
     b3a:	89 2f       	mov	r24, r25
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b42:	80 91 5b 02 	lds	r24, 0x025B
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     b4c:	80 91 5c 02 	lds	r24, 0x025C
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     b56:	80 91 2d 02 	lds	r24, 0x022D
     b5a:	90 91 2e 02 	lds	r25, 0x022E
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     b64:	80 91 2d 02 	lds	r24, 0x022D
     b68:	90 91 2e 02 	lds	r25, 0x022E
     b6c:	89 2f       	mov	r24, r25
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b74:	80 91 5d 02 	lds	r24, 0x025D
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     b7e:	80 91 5e 02 	lds	r24, 0x025E
     b82:	61 e0       	ldi	r22, 0x01	; 1
     b84:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     b88:	80 91 31 02 	lds	r24, 0x0231
     b8c:	90 91 32 02 	lds	r25, 0x0232
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     b96:	80 91 31 02 	lds	r24, 0x0231
     b9a:	90 91 32 02 	lds	r25, 0x0232
     b9e:	89 2f       	mov	r24, r25
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ba6:	80 91 5f 02 	lds	r24, 0x025F
     baa:	61 e0       	ldi	r22, 0x01	; 1
     bac:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     bb0:	80 91 60 02 	lds	r24, 0x0260
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     bba:	80 91 35 02 	lds	r24, 0x0235
     bbe:	90 91 36 02 	lds	r25, 0x0236
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     bc8:	80 91 35 02 	lds	r24, 0x0235
     bcc:	90 91 36 02 	lds	r25, 0x0236
     bd0:	89 2f       	mov	r24, r25
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     bd8:	80 91 61 02 	lds	r24, 0x0261
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     be2:	80 91 62 02 	lds	r24, 0x0262
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     bec:	80 91 39 02 	lds	r24, 0x0239
     bf0:	90 91 3a 02 	lds	r25, 0x023A
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     bfa:	80 91 39 02 	lds	r24, 0x0239
     bfe:	90 91 3a 02 	lds	r25, 0x023A
     c02:	89 2f       	mov	r24, r25
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c0a:	80 91 63 02 	lds	r24, 0x0263
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c14:	80 91 64 02 	lds	r24, 0x0264
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c1e:	80 91 3d 02 	lds	r24, 0x023D
     c22:	90 91 3e 02 	lds	r25, 0x023E
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c2c:	80 91 3d 02 	lds	r24, 0x023D
     c30:	90 91 3e 02 	lds	r25, 0x023E
     c34:	89 2f       	mov	r24, r25
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c3c:	80 91 65 02 	lds	r24, 0x0265
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c46:	80 91 66 02 	lds	r24, 0x0266
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c50:	80 91 41 02 	lds	r24, 0x0241
     c54:	90 91 42 02 	lds	r25, 0x0242
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c5e:	80 91 41 02 	lds	r24, 0x0241
     c62:	90 91 42 02 	lds	r25, 0x0242
     c66:	89 2f       	mov	r24, r25
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c6e:	80 91 67 02 	lds	r24, 0x0267
     c72:	61 e0       	ldi	r22, 0x01	; 1
     c74:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c78:	80 91 68 02 	lds	r24, 0x0268
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c82:	80 91 45 02 	lds	r24, 0x0245
     c86:	90 91 46 02 	lds	r25, 0x0246
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c90:	80 91 45 02 	lds	r24, 0x0245
     c94:	90 91 46 02 	lds	r25, 0x0246
     c98:	89 2f       	mov	r24, r25
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ca0:	80 91 69 02 	lds	r24, 0x0269
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     caa:	80 91 6a 02 	lds	r24, 0x026A
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     cb4:	80 91 49 02 	lds	r24, 0x0249
     cb8:	90 91 4a 02 	lds	r25, 0x024A
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     cc2:	80 91 49 02 	lds	r24, 0x0249
     cc6:	90 91 4a 02 	lds	r25, 0x024A
     cca:	89 2f       	mov	r24, r25
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     cd2:	80 91 6b 02 	lds	r24, 0x026B
     cd6:	61 e0       	ldi	r22, 0x01	; 1
     cd8:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     cdc:	80 91 6c 02 	lds	r24, 0x026C
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ce6:	80 91 4d 02 	lds	r24, 0x024D
     cea:	90 91 4e 02 	lds	r25, 0x024E
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     cf4:	80 91 4d 02 	lds	r24, 0x024D
     cf8:	90 91 4e 02 	lds	r25, 0x024E
     cfc:	89 2f       	mov	r24, r25
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d04:	80 91 6d 02 	lds	r24, 0x026D
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d0e:	80 91 6e 02 	lds	r24, 0x026E
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d18:	80 91 51 02 	lds	r24, 0x0251
     d1c:	90 91 52 02 	lds	r25, 0x0252
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d26:	80 91 51 02 	lds	r24, 0x0251
     d2a:	90 91 52 02 	lds	r25, 0x0252
     d2e:	89 2f       	mov	r24, r25
     d30:	61 e0       	ldi	r22, 0x01	; 1
     d32:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d36:	80 91 6f 02 	lds	r24, 0x026F
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d40:	80 91 70 02 	lds	r24, 0x0270
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d4a:	80 91 55 02 	lds	r24, 0x0255
     d4e:	90 91 56 02 	lds	r25, 0x0256
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d58:	80 91 55 02 	lds	r24, 0x0255
     d5c:	90 91 56 02 	lds	r25, 0x0256
     d60:	89 2f       	mov	r24, r25
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     d68:	80 91 28 04 	lds	r24, 0x0428
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(accX>>8,1);
     d72:	80 91 29 04 	lds	r24, 0x0429
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     d7c:	80 91 2a 04 	lds	r24, 0x042A
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(accY>>8,1);
     d86:	80 91 2b 04 	lds	r24, 0x042B
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     d90:	80 91 2c 04 	lds	r24, 0x042C
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     d9a:	80 91 2d 04 	lds	r24, 0x042D
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(irCommand,1);
     da4:	80 91 23 04 	lds	r24, 0x0423
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(currentSelector,1);
     dae:	80 91 4b 04 	lds	r24, 0x044B
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     db8:	80 91 03 01 	lds	r24, 0x0103
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	80 72       	andi	r24, 0x20	; 32
     dc0:	90 70       	andi	r25, 0x00	; 0
     dc2:	95 95       	asr	r25
     dc4:	87 95       	ror	r24
     dc6:	95 95       	asr	r25
     dc8:	87 95       	ror	r24
     dca:	95 95       	asr	r25
     dcc:	87 95       	ror	r24
     dce:	95 95       	asr	r25
     dd0:	87 95       	ror	r24
     dd2:	95 95       	asr	r25
     dd4:	87 95       	ror	r24
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(rfFlags,1);
     ddc:	80 91 15 03 	lds	r24, 0x0315
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
     de6:	60 91 67 04 	lds	r22, 0x0467
     dea:	70 91 68 04 	lds	r23, 0x0468
     dee:	80 91 69 04 	lds	r24, 0x0469
     df2:	90 91 6a 04 	lds	r25, 0x046A
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e4       	ldi	r19, 0x40	; 64
     dfa:	4f e0       	ldi	r20, 0x0F	; 15
     dfc:	54 e4       	ldi	r21, 0x44	; 68
     dfe:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
     e02:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <__fixunssfsi>
     e06:	86 2f       	mov	r24, r22
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
     e0e:	60 91 67 04 	lds	r22, 0x0467
     e12:	70 91 68 04 	lds	r23, 0x0468
     e16:	80 91 69 04 	lds	r24, 0x0469
     e1a:	90 91 6a 04 	lds	r25, 0x046A
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e4       	ldi	r19, 0x40	; 64
     e22:	4f e0       	ldi	r20, 0x0F	; 15
     e24:	54 e4       	ldi	r21, 0x44	; 68
     e26:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
     e2a:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <__fixunssfsi>
     e2e:	87 2f       	mov	r24, r23
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
     e36:	60 91 6b 04 	lds	r22, 0x046B
     e3a:	70 91 6c 04 	lds	r23, 0x046C
     e3e:	80 91 6d 04 	lds	r24, 0x046D
     e42:	90 91 6e 04 	lds	r25, 0x046E
     e46:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <__fixunssfsi>
     e4a:	86 2f       	mov	r24, r22
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
     e52:	60 91 6b 04 	lds	r22, 0x046B
     e56:	70 91 6c 04 	lds	r23, 0x046C
     e5a:	80 91 6d 04 	lds	r24, 0x046D
     e5e:	90 91 6e 04 	lds	r25, 0x046E
     e62:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <__fixunssfsi>
     e66:	87 2f       	mov	r24, r23
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
     e6e:	60 91 6f 04 	lds	r22, 0x046F
     e72:	70 91 70 04 	lds	r23, 0x0470
     e76:	80 91 71 04 	lds	r24, 0x0471
     e7a:	90 91 72 04 	lds	r25, 0x0472
     e7e:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <__fixunssfsi>
     e82:	86 2f       	mov	r24, r22
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
     e8a:	60 91 6f 04 	lds	r22, 0x046F
     e8e:	70 91 70 04 	lds	r23, 0x0470
     e92:	80 91 71 04 	lds	r24, 0x0471
     e96:	90 91 72 04 	lds	r25, 0x0472
     e9a:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <__fixunssfsi>
     e9e:	87 2f       	mov	r24, r23
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
     ea6:	60 91 d5 02 	lds	r22, 0x02D5
     eaa:	70 91 d6 02 	lds	r23, 0x02D6
     eae:	80 91 d7 02 	lds	r24, 0x02D7
     eb2:	90 91 d8 02 	lds	r25, 0x02D8
     eb6:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
     eba:	86 2f       	mov	r24, r22
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
     ec2:	60 91 d5 02 	lds	r22, 0x02D5
     ec6:	70 91 d6 02 	lds	r23, 0x02D6
     eca:	80 91 d7 02 	lds	r24, 0x02D7
     ece:	90 91 d8 02 	lds	r25, 0x02D8
     ed2:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
     ed6:	87 2f       	mov	r24, r23
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
     ede:	60 91 d5 02 	lds	r22, 0x02D5
     ee2:	70 91 d6 02 	lds	r23, 0x02D6
     ee6:	80 91 d7 02 	lds	r24, 0x02D7
     eea:	90 91 d8 02 	lds	r25, 0x02D8
     eee:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
     ef8:	60 91 d5 02 	lds	r22, 0x02D5
     efc:	70 91 d6 02 	lds	r23, 0x02D6
     f00:	80 91 d7 02 	lds	r24, 0x02D7
     f04:	90 91 d8 02 	lds	r25, 0x02D8
     f08:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
     f0c:	89 2f       	mov	r24, r25
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
     f14:	60 91 d1 02 	lds	r22, 0x02D1
     f18:	70 91 d2 02 	lds	r23, 0x02D2
     f1c:	80 91 d3 02 	lds	r24, 0x02D3
     f20:	90 91 d4 02 	lds	r25, 0x02D4
     f24:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
     f28:	86 2f       	mov	r24, r22
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
     f30:	60 91 d1 02 	lds	r22, 0x02D1
     f34:	70 91 d2 02 	lds	r23, 0x02D2
     f38:	80 91 d3 02 	lds	r24, 0x02D3
     f3c:	90 91 d4 02 	lds	r25, 0x02D4
     f40:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
     f44:	87 2f       	mov	r24, r23
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
     f4c:	60 91 d1 02 	lds	r22, 0x02D1
     f50:	70 91 d2 02 	lds	r23, 0x02D2
     f54:	80 91 d3 02 	lds	r24, 0x02D3
     f58:	90 91 d4 02 	lds	r25, 0x02D4
     f5c:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
     f66:	60 91 d1 02 	lds	r22, 0x02D1
     f6a:	70 91 d2 02 	lds	r23, 0x02D2
     f6e:	80 91 d3 02 	lds	r24, 0x02D3
     f72:	90 91 d4 02 	lds	r25, 0x02D4
     f76:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
     f7a:	89 2f       	mov	r24, r25
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
     f82:	80 91 fb 02 	lds	r24, 0x02FB
     f86:	90 91 fc 02 	lds	r25, 0x02FC
     f8a:	95 95       	asr	r25
     f8c:	87 95       	ror	r24
     f8e:	95 95       	asr	r25
     f90:	87 95       	ror	r24
     f92:	61 e0       	ldi	r22, 0x01	; 1
     f94:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
     f98:	80 91 f9 02 	lds	r24, 0x02F9
     f9c:	90 91 fa 02 	lds	r25, 0x02FA
     fa0:	95 95       	asr	r25
     fa2:	87 95       	ror	r24
     fa4:	95 95       	asr	r25
     fa6:	87 95       	ror	r24
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <usart0Transmit>
     fae:	90 91 4b 04 	lds	r25, 0x044B
     fb2:	e4 c9       	rjmp	.-3128   	; 0x37c <main+0x1a0>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	09 f0       	breq	.+2      	; 0xfba <main+0xdde>
     fb8:	a2 cc       	rjmp	.-1724   	; 0x8fe <main+0x722>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
     fba:	8a 2d       	mov	r24, r10
     fbc:	80 95       	com	r24
     fbe:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
     fc2:	10 92 18 03 	sts	0x0318, r1
						break;
     fc6:	9b cc       	rjmp	.-1738   	; 0x8fe <main+0x722>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	09 f0       	breq	.+2      	; 0xfce <main+0xdf2>
     fcc:	af cb       	rjmp	.-2210   	; 0x72c <main+0x550>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
     fce:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <turnOffGreenLeds>
							GREEN_LED2_ON;
     fd2:	80 91 0b 01 	lds	r24, 0x010B
     fd6:	8b 7f       	andi	r24, 0xFB	; 251
     fd8:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
     fdc:	10 92 51 04 	sts	0x0451, r1
							enableObstacleAvoidance();
     fe0:	0e 94 66 34 	call	0x68cc	; 0x68cc <enableObstacleAvoidance>
							setRightSpeed(20);
     fe4:	84 e1       	ldi	r24, 0x14	; 20
     fe6:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
							setLeftSpeed(20);
     fea:	84 e1       	ldi	r24, 0x14	; 20
     fec:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
     ff0:	80 91 6b 02 	lds	r24, 0x026B
     ff4:	90 91 6c 02 	lds	r25, 0x026C
     ff8:	e1 e0       	ldi	r30, 0x01	; 1
     ffa:	80 39       	cpi	r24, 0x90	; 144
     ffc:	9e 07       	cpc	r25, r30
     ffe:	0c f4       	brge	.+2      	; 0x1002 <main+0xe26>
    1000:	3a c1       	rjmp	.+628    	; 0x1276 <main+0x109a>
    1002:	80 91 6d 02 	lds	r24, 0x026D
    1006:	90 91 6e 02 	lds	r25, 0x026E
    100a:	f1 e0       	ldi	r31, 0x01	; 1
    100c:	80 39       	cpi	r24, 0x90	; 144
    100e:	9f 07       	cpc	r25, r31
    1010:	0c f4       	brge	.+2      	; 0x1014 <main+0xe38>
    1012:	31 c1       	rjmp	.+610    	; 0x1276 <main+0x109a>
    1014:	80 91 69 02 	lds	r24, 0x0269
    1018:	90 91 6a 02 	lds	r25, 0x026A
    101c:	21 e0       	ldi	r18, 0x01	; 1
    101e:	80 39       	cpi	r24, 0x90	; 144
    1020:	92 07       	cpc	r25, r18
    1022:	0c f4       	brge	.+2      	; 0x1026 <main+0xe4a>
    1024:	28 c1       	rjmp	.+592    	; 0x1276 <main+0x109a>
    1026:	80 91 6f 02 	lds	r24, 0x026F
    102a:	90 91 70 02 	lds	r25, 0x0270
    102e:	31 e0       	ldi	r19, 0x01	; 1
    1030:	80 39       	cpi	r24, 0x90	; 144
    1032:	93 07       	cpc	r25, r19
    1034:	0c f4       	brge	.+2      	; 0x1038 <main+0xe5c>
    1036:	1f c1       	rjmp	.+574    	; 0x1276 <main+0x109a>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    1038:	10 92 50 04 	sts	0x0450, r1
    103c:	77 cb       	rjmp	.-2322   	; 0x72c <main+0x550>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    103e:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <turnOffGreenLeds>
							GREEN_LED6_ON;
    1042:	80 91 0b 01 	lds	r24, 0x010B
    1046:	8f 7b       	andi	r24, 0xBF	; 191
    1048:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    104c:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    1050:	9b 01       	movw	r18, r22
    1052:	ac 01       	movw	r20, r24
    1054:	60 93 57 04 	sts	0x0457, r22
    1058:	70 93 58 04 	sts	0x0458, r23
    105c:	80 93 59 04 	sts	0x0459, r24
    1060:	90 93 5a 04 	sts	0x045A, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    1064:	80 91 53 04 	lds	r24, 0x0453
    1068:	90 91 54 04 	lds	r25, 0x0454
    106c:	a0 91 55 04 	lds	r26, 0x0455
    1070:	b0 91 56 04 	lds	r27, 0x0456
    1074:	28 1b       	sub	r18, r24
    1076:	39 0b       	sbc	r19, r25
    1078:	4a 0b       	sbc	r20, r26
    107a:	5b 0b       	sbc	r21, r27
    107c:	2d 3c       	cpi	r18, 0xCD	; 205
    107e:	66 e6       	ldi	r22, 0x66	; 102
    1080:	36 07       	cpc	r19, r22
    1082:	64 e0       	ldi	r22, 0x04	; 4
    1084:	46 07       	cpc	r20, r22
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	56 07       	cpc	r21, r22
    108a:	08 f4       	brcc	.+2      	; 0x108e <main+0xeb2>
    108c:	39 c1       	rjmp	.+626    	; 0x1300 <main+0x1124>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    108e:	80 91 bd 02 	lds	r24, 0x02BD
    1092:	90 91 be 02 	lds	r25, 0x02BE
    1096:	e3 e0       	ldi	r30, 0x03	; 3
    1098:	8a 37       	cpi	r24, 0x7A	; 122
    109a:	9e 07       	cpc	r25, r30
    109c:	08 f4       	brcc	.+2      	; 0x10a0 <main+0xec4>
    109e:	3c c1       	rjmp	.+632    	; 0x1318 <main+0x113c>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    10a0:	83 ef       	ldi	r24, 0xF3	; 243
    10a2:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
									setLeftSpeed(-13);
    10a6:	83 ef       	ldi	r24, 0xF3	; 243
    10a8:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    10ac:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    10b0:	60 93 53 04 	sts	0x0453, r22
    10b4:	70 93 54 04 	sts	0x0454, r23
    10b8:	80 93 55 04 	sts	0x0455, r24
    10bc:	90 93 56 04 	sts	0x0456, r25
									demoState = 4;
    10c0:	f4 e0       	ldi	r31, 0x04	; 4
    10c2:	f0 93 4f 04 	sts	0x044F, r31
									break;
    10c6:	32 cb       	rjmp	.-2460   	; 0x72c <main+0x550>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    10c8:	8a 2d       	mov	r24, r10
    10ca:	80 95       	com	r24
    10cc:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    10d0:	62 e0       	ldi	r22, 0x02	; 2
    10d2:	60 93 18 03 	sts	0x0318, r22
						break;
    10d6:	13 cc       	rjmp	.-2010   	; 0x8fe <main+0x722>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    10d8:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <turnOffGreenLeds>
							GREEN_LED6_ON;
    10dc:	80 91 0b 01 	lds	r24, 0x010B
    10e0:	8f 7b       	andi	r24, 0xBF	; 191
    10e2:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    10e6:	80 91 0b 01 	lds	r24, 0x010B
    10ea:	8f 77       	andi	r24, 0x7F	; 127
    10ec:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    10f0:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    10f4:	9b 01       	movw	r18, r22
    10f6:	ac 01       	movw	r20, r24
    10f8:	60 93 57 04 	sts	0x0457, r22
    10fc:	70 93 58 04 	sts	0x0458, r23
    1100:	80 93 59 04 	sts	0x0459, r24
    1104:	90 93 5a 04 	sts	0x045A, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    1108:	80 91 53 04 	lds	r24, 0x0453
    110c:	90 91 54 04 	lds	r25, 0x0454
    1110:	a0 91 55 04 	lds	r26, 0x0455
    1114:	b0 91 56 04 	lds	r27, 0x0456
    1118:	28 1b       	sub	r18, r24
    111a:	39 0b       	sbc	r19, r25
    111c:	4a 0b       	sbc	r20, r26
    111e:	5b 0b       	sbc	r21, r27
    1120:	2f 38       	cpi	r18, 0x8F	; 143
    1122:	65 e2       	ldi	r22, 0x25	; 37
    1124:	36 07       	cpc	r19, r22
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	46 07       	cpc	r20, r22
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	56 07       	cpc	r21, r22
    112e:	08 f4       	brcc	.+2      	; 0x1132 <main+0xf56>
    1130:	fd ca       	rjmp	.-2566   	; 0x72c <main+0x550>
								setRightSpeed(20);
    1132:	84 e1       	ldi	r24, 0x14	; 20
    1134:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
								setLeftSpeed(-20);								
    1138:	8c ee       	ldi	r24, 0xEC	; 236
    113a:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    113e:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    1142:	60 93 53 04 	sts	0x0453, r22
    1146:	70 93 54 04 	sts	0x0454, r23
    114a:	80 93 55 04 	sts	0x0455, r24
    114e:	90 93 56 04 	sts	0x0456, r25
								demoState = 5;							
    1152:	85 e0       	ldi	r24, 0x05	; 5
    1154:	80 93 4f 04 	sts	0x044F, r24
    1158:	e9 ca       	rjmp	.-2606   	; 0x72c <main+0x550>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    115a:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <turnOffGreenLeds>
							GREEN_LED4_ON;
    115e:	80 91 0b 01 	lds	r24, 0x010B
    1162:	8f 7e       	andi	r24, 0xEF	; 239
    1164:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    1168:	0e 94 6a 34 	call	0x68d4	; 0x68d4 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    116c:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    1170:	9b 01       	movw	r18, r22
    1172:	ac 01       	movw	r20, r24
    1174:	60 93 57 04 	sts	0x0457, r22
    1178:	70 93 58 04 	sts	0x0458, r23
    117c:	80 93 59 04 	sts	0x0459, r24
    1180:	90 93 5a 04 	sts	0x045A, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    1184:	80 91 53 04 	lds	r24, 0x0453
    1188:	90 91 54 04 	lds	r25, 0x0454
    118c:	a0 91 55 04 	lds	r26, 0x0455
    1190:	b0 91 56 04 	lds	r27, 0x0456
    1194:	28 1b       	sub	r18, r24
    1196:	39 0b       	sbc	r19, r25
    1198:	4a 0b       	sbc	r20, r26
    119a:	5b 0b       	sbc	r21, r27
    119c:	23 33       	cpi	r18, 0x33	; 51
    119e:	6f ee       	ldi	r22, 0xEF	; 239
    11a0:	36 07       	cpc	r19, r22
    11a2:	62 e0       	ldi	r22, 0x02	; 2
    11a4:	46 07       	cpc	r20, r22
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	56 07       	cpc	r21, r22
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <main+0xfd2>
    11ac:	f0 c0       	rjmp	.+480    	; 0x138e <main+0x11b2>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    11ae:	80 91 03 01 	lds	r24, 0x0103
    11b2:	84 ff       	sbrs	r24, 4
    11b4:	d1 c0       	rjmp	.+418    	; 0x1358 <main+0x117c>
								outOfLine = 0;
    11b6:	10 92 51 04 	sts	0x0451, r1
								chargeContact++;
    11ba:	80 91 52 04 	lds	r24, 0x0452
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	80 93 52 04 	sts	0x0452, r24
								if(chargeContact > 20) {
    11c4:	85 31       	cpi	r24, 0x15	; 21
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <main+0xfee>
    11c8:	0f c1       	rjmp	.+542    	; 0x13e8 <main+0x120c>
    11ca:	80 91 6b 02 	lds	r24, 0x026B
    11ce:	90 91 6c 02 	lds	r25, 0x026C
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    11d2:	20 91 69 02 	lds	r18, 0x0269
    11d6:	30 91 6a 02 	lds	r19, 0x026A
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	22 3c       	cpi	r18, 0xC2	; 194
    11de:	34 07       	cpc	r19, r20
    11e0:	ac f4       	brge	.+42     	; 0x120c <main+0x1030>
    11e2:	51 e0       	ldi	r21, 0x01	; 1
    11e4:	83 3c       	cpi	r24, 0xC3	; 195
    11e6:	95 07       	cpc	r25, r21
    11e8:	8c f0       	brlt	.+34     	; 0x120c <main+0x1030>
    11ea:	40 91 6d 02 	lds	r20, 0x026D
    11ee:	50 91 6e 02 	lds	r21, 0x026E
    11f2:	61 e0       	ldi	r22, 0x01	; 1
    11f4:	43 3c       	cpi	r20, 0xC3	; 195
    11f6:	56 07       	cpc	r21, r22
    11f8:	4c f0       	brlt	.+18     	; 0x120c <main+0x1030>
    11fa:	40 91 6f 02 	lds	r20, 0x026F
    11fe:	50 91 70 02 	lds	r21, 0x0270
    1202:	e1 e0       	ldi	r30, 0x01	; 1
    1204:	43 3c       	cpi	r20, 0xC3	; 195
    1206:	5e 07       	cpc	r21, r30
    1208:	0c f0       	brlt	.+2      	; 0x120c <main+0x1030>
    120a:	0d c1       	rjmp	.+538    	; 0x1426 <main+0x124a>
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    120c:	40 91 6f 02 	lds	r20, 0x026F
    1210:	50 91 70 02 	lds	r21, 0x0270
    1214:	f1 e0       	ldi	r31, 0x01	; 1
    1216:	42 3c       	cpi	r20, 0xC2	; 194
    1218:	5f 07       	cpc	r21, r31
    121a:	0c f0       	brlt	.+2      	; 0x121e <main+0x1042>
    121c:	88 c0       	rjmp	.+272    	; 0x132e <main+0x1152>
    121e:	41 e0       	ldi	r20, 0x01	; 1
    1220:	23 3c       	cpi	r18, 0xC3	; 195
    1222:	34 07       	cpc	r19, r20
    1224:	0c f4       	brge	.+2      	; 0x1228 <main+0x104c>
    1226:	83 c0       	rjmp	.+262    	; 0x132e <main+0x1152>
    1228:	51 e0       	ldi	r21, 0x01	; 1
    122a:	83 3c       	cpi	r24, 0xC3	; 195
    122c:	95 07       	cpc	r25, r21
    122e:	0c f4       	brge	.+2      	; 0x1232 <main+0x1056>
    1230:	83 c0       	rjmp	.+262    	; 0x1338 <main+0x115c>
    1232:	80 91 6d 02 	lds	r24, 0x026D
    1236:	90 91 6e 02 	lds	r25, 0x026E
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	83 3c       	cpi	r24, 0xC3	; 195
    123e:	96 07       	cpc	r25, r22
    1240:	0c f0       	brlt	.+2      	; 0x1244 <main+0x1068>
    1242:	f8 c0       	rjmp	.+496    	; 0x1434 <main+0x1258>
								setLeftSpeed(20);
								setRightSpeed(-15);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(20);
    1244:	84 e1       	ldi	r24, 0x14	; 20
    1246:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
								setRightSpeed(-10);
    124a:	86 ef       	ldi	r24, 0xF6	; 246
    124c:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
    1250:	6d ca       	rjmp	.-2854   	; 0x72c <main+0x550>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    1252:	e0 e6       	ldi	r30, 0x60	; 96
    1254:	ae 16       	cp	r10, r30
    1256:	b1 04       	cpc	r11, r1
    1258:	08 f0       	brcs	.+2      	; 0x125c <main+0x1080>
    125a:	b9 c9       	rjmp	.-3214   	; 0x5ce <main+0x3f2>
					if(pwm_red!=255 && pwm_green!=255) {
    125c:	80 91 0c 02 	lds	r24, 0x020C
    1260:	8f 3f       	cpi	r24, 0xFF	; 255
    1262:	09 f4       	brne	.+2      	; 0x1266 <main+0x108a>
    1264:	b4 c9       	rjmp	.-3224   	; 0x5ce <main+0x3f2>
    1266:	80 91 0d 02 	lds	r24, 0x020D
    126a:	8f 3f       	cpi	r24, 0xFF	; 255
    126c:	09 f4       	brne	.+2      	; 0x1270 <main+0x1094>
    126e:	af c9       	rjmp	.-3234   	; 0x5ce <main+0x3f2>
						pwm_blue = 255;
    1270:	10 93 0e 02 	sts	0x020E, r17
    1274:	ac c9       	rjmp	.-3240   	; 0x5ce <main+0x3f2>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(20);
							setLeftSpeed(20);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    1276:	80 91 50 04 	lds	r24, 0x0450
    127a:	8f 5f       	subi	r24, 0xFF	; 255
    127c:	80 93 50 04 	sts	0x0450, r24
								if(lineFound > 10) {
    1280:	8b 30       	cpi	r24, 0x0B	; 11
    1282:	08 f4       	brcc	.+2      	; 0x1286 <main+0x10aa>
    1284:	53 ca       	rjmp	.-2906   	; 0x72c <main+0x550>
									outOfLine = 0;
    1286:	10 92 51 04 	sts	0x0451, r1
									chargeContact = 0;
    128a:	10 92 52 04 	sts	0x0452, r1
									demoStartTime = getTime100MicroSec();
    128e:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    1292:	60 93 53 04 	sts	0x0453, r22
    1296:	70 93 54 04 	sts	0x0454, r23
    129a:	80 93 55 04 	sts	0x0455, r24
    129e:	90 93 56 04 	sts	0x0456, r25
									demoState = 2;
    12a2:	42 e0       	ldi	r20, 0x02	; 2
    12a4:	40 93 4f 04 	sts	0x044F, r20
									break;
    12a8:	41 ca       	rjmp	.-2942   	; 0x72c <main+0x550>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    12aa:	80 36       	cpi	r24, 0x60	; 96
    12ac:	91 05       	cpc	r25, r1
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <main+0x10d6>
    12b0:	8c cb       	rjmp	.-2280   	; 0x9ca <main+0x7ee>
					pwm_blue = 255;
    12b2:	10 93 0e 02 	sts	0x020E, r17
    12b6:	89 cb       	rjmp	.-2286   	; 0x9ca <main+0x7ee>
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired += speedStep;
						if(pwm_intermediate_right_desired > pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    12b8:	82 17       	cp	r24, r18
    12ba:	93 07       	cpc	r25, r19
    12bc:	0c f0       	brlt	.+2      	; 0x12c0 <main+0x10e4>
    12be:	25 c9       	rjmp	.-3510   	; 0x50a <main+0x32e>
						pwm_intermediate_right_desired -= speedStep;
    12c0:	40 91 18 02 	lds	r20, 0x0218
    12c4:	24 1b       	sub	r18, r20
    12c6:	31 09       	sbc	r19, r1
    12c8:	30 93 fe 02 	sts	0x02FE, r19
    12cc:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_right_desired < pwm_right_desired) {
    12d0:	28 17       	cp	r18, r24
    12d2:	39 07       	cpc	r19, r25
    12d4:	0c f0       	brlt	.+2      	; 0x12d8 <main+0x10fc>
    12d6:	19 c9       	rjmp	.-3534   	; 0x50a <main+0x32e>
    12d8:	14 c9       	rjmp	.-3544   	; 0x502 <main+0x326>
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
						pwm_intermediate_left_desired += speedStep;
						if(pwm_intermediate_left_desired > pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}
					} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    12da:	82 17       	cp	r24, r18
    12dc:	93 07       	cpc	r25, r19
    12de:	14 f0       	brlt	.+4      	; 0x12e4 <main+0x1108>
    12e0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
						pwm_intermediate_left_desired -= speedStep;
    12e4:	40 91 18 02 	lds	r20, 0x0218
    12e8:	24 1b       	sub	r18, r20
    12ea:	31 09       	sbc	r19, r1
    12ec:	30 93 00 03 	sts	0x0300, r19
    12f0:	20 93 ff 02 	sts	0x02FF, r18
						if(pwm_intermediate_left_desired < pwm_left_desired) {
    12f4:	28 17       	cp	r18, r24
    12f6:	39 07       	cpc	r19, r25
    12f8:	14 f0       	brlt	.+4      	; 0x12fe <main+0x1122>
    12fa:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
    12fe:	29 c9       	rjmp	.-3502   	; 0x552 <main+0x376>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    1300:	80 91 03 01 	lds	r24, 0x0103
    1304:	84 fd       	sbrc	r24, 4
    1306:	12 ca       	rjmp	.-3036   	; 0x72c <main+0x550>
								chargeContact = 0;
    1308:	10 92 52 04 	sts	0x0452, r1
								outOfLine = 0;
    130c:	10 92 51 04 	sts	0x0451, r1
								demoState = 2;
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	98 2e       	mov	r9, r24
    1314:	90 92 4f 04 	sts	0x044F, r9
								demoStartTime = getTime100MicroSec();
    1318:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    131c:	60 93 53 04 	sts	0x0453, r22
    1320:	70 93 54 04 	sts	0x0454, r23
    1324:	80 93 55 04 	sts	0x0455, r24
    1328:	90 93 56 04 	sts	0x0456, r25
								break;						
    132c:	ff c9       	rjmp	.-3074   	; 0x72c <main+0x550>
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(20);
								setRightSpeed(-15);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    132e:	e1 e0       	ldi	r30, 0x01	; 1
    1330:	83 3c       	cpi	r24, 0xC3	; 195
    1332:	9e 07       	cpc	r25, r30
    1334:	0c f0       	brlt	.+2      	; 0x1338 <main+0x115c>
    1336:	86 cf       	rjmp	.-244    	; 0x1244 <main+0x1068>
								setRightSpeed(-10);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    1338:	80 91 6d 02 	lds	r24, 0x026D
    133c:	90 91 6e 02 	lds	r25, 0x026E
    1340:	f1 e0       	ldi	r31, 0x01	; 1
    1342:	83 3c       	cpi	r24, 0xC3	; 195
    1344:	9f 07       	cpc	r25, r31
    1346:	0c f4       	brge	.+2      	; 0x134a <main+0x116e>
    1348:	48 c0       	rjmp	.+144    	; 0x13da <main+0x11fe>
								setLeftSpeed(-10);
    134a:	86 ef       	ldi	r24, 0xF6	; 246
    134c:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
								setRightSpeed(20);
    1350:	84 e1       	ldi	r24, 0x14	; 20
    1352:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
    1356:	ea c9       	rjmp	.-3116   	; 0x72c <main+0x550>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    1358:	10 92 52 04 	sts	0x0452, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    135c:	80 91 6b 02 	lds	r24, 0x026B
    1360:	90 91 6c 02 	lds	r25, 0x026C
    1364:	e1 e0       	ldi	r30, 0x01	; 1
    1366:	83 3c       	cpi	r24, 0xC3	; 195
    1368:	9e 07       	cpc	r25, r30
    136a:	2c f1       	brlt	.+74     	; 0x13b6 <main+0x11da>
    136c:	20 91 6d 02 	lds	r18, 0x026D
    1370:	30 91 6e 02 	lds	r19, 0x026E
    1374:	f1 e0       	ldi	r31, 0x01	; 1
    1376:	23 3c       	cpi	r18, 0xC3	; 195
    1378:	3f 07       	cpc	r19, r31
    137a:	ec f0       	brlt	.+58     	; 0x13b6 <main+0x11da>
									outOfLine++;
    137c:	20 91 51 04 	lds	r18, 0x0451
    1380:	2f 5f       	subi	r18, 0xFF	; 255
    1382:	20 93 51 04 	sts	0x0451, r18
									if(outOfLine > 250) {
    1386:	2b 3f       	cpi	r18, 0xFB	; 251
    1388:	08 f4       	brcc	.+2      	; 0x138c <main+0x11b0>
    138a:	23 cf       	rjmp	.-442    	; 0x11d2 <main+0xff6>
    138c:	cd c9       	rjmp	.-3174   	; 0x728 <main+0x54c>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    138e:	8c ee       	ldi	r24, 0xEC	; 236
    1390:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
								setLeftSpeed(-20);
    1394:	8c ee       	ldi	r24, 0xEC	; 236
    1396:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    139a:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    139e:	60 93 53 04 	sts	0x0453, r22
    13a2:	70 93 54 04 	sts	0x0454, r23
    13a6:	80 93 55 04 	sts	0x0455, r24
    13aa:	90 93 56 04 	sts	0x0456, r25
								demoState = 4;
    13ae:	84 e0       	ldi	r24, 0x04	; 4
    13b0:	80 93 4f 04 	sts	0x044F, r24
								break;
    13b4:	bb c9       	rjmp	.-3210   	; 0x72c <main+0x550>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    13b6:	10 92 51 04 	sts	0x0451, r1
    13ba:	0b cf       	rjmp	.-490    	; 0x11d2 <main+0xff6>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    13bc:	91 30       	cpi	r25, 0x01	; 1
    13be:	41 f1       	breq	.+80     	; 0x1410 <main+0x1234>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    13c0:	92 30       	cpi	r25, 0x02	; 2
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <main+0x11ea>
    13c4:	04 c9       	rjmp	.-3576   	; 0x5ce <main+0x3f2>
						pwm_red = 255;
    13c6:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    13ca:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    13ce:	8e ef       	ldi	r24, 0xFE	; 254
    13d0:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    13d4:	10 92 18 03 	sts	0x0318, r1
    13d8:	fa c8       	rjmp	.-3596   	; 0x5ce <main+0x3f2>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(20);
    13da:	84 e1       	ldi	r24, 0x14	; 20
    13dc:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
								setLeftSpeed(20);
    13e0:	84 e1       	ldi	r24, 0x14	; 20
    13e2:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
    13e6:	a2 c9       	rjmp	.-3260   	; 0x72c <main+0x550>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
									setRightSpeed(0);
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    13f4:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    13f8:	60 93 53 04 	sts	0x0453, r22
    13fc:	70 93 54 04 	sts	0x0454, r23
    1400:	80 93 55 04 	sts	0x0455, r24
    1404:	90 93 56 04 	sts	0x0456, r25
									demoState = 3;
    1408:	93 e0       	ldi	r25, 0x03	; 3
    140a:	90 93 4f 04 	sts	0x044F, r25
									break;
    140e:	8e c9       	rjmp	.-3300   	; 0x72c <main+0x550>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1410:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1414:	5e ef       	ldi	r21, 0xFE	; 254
    1416:	50 93 0d 02 	sts	0x020D, r21
						pwm_blue = 255;
    141a:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    141e:	62 e0       	ldi	r22, 0x02	; 2
    1420:	60 93 18 03 	sts	0x0318, r22
    1424:	d4 c8       	rjmp	.-3672   	; 0x5ce <main+0x3f2>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-15);
    1426:	81 ef       	ldi	r24, 0xF1	; 241
    1428:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
								setRightSpeed(20);
    142c:	84 e1       	ldi	r24, 0x14	; 20
    142e:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
    1432:	7c c9       	rjmp	.-3336   	; 0x72c <main+0x550>
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(20);
    1434:	84 e1       	ldi	r24, 0x14	; 20
    1436:	0e 94 b5 20 	call	0x416a	; 0x416a <setLeftSpeed>
								setRightSpeed(-15);
    143a:	81 ef       	ldi	r24, 0xF1	; 241
    143c:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <setRightSpeed>
    1440:	75 c9       	rjmp	.-3350   	; 0x72c <main+0x550>

00001442 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1446:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1448:	0d b4       	in	r0, 0x2d	; 45
    144a:	07 fc       	sbrc	r0, 7
    144c:	0a c0       	rjmp	.+20     	; 0x1462 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    144e:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1450:	37 e2       	ldi	r19, 0x27	; 39
    1452:	80 31       	cpi	r24, 0x10	; 16
    1454:	93 07       	cpc	r25, r19
    1456:	c0 f3       	brcs	.-16     	; 0x1448 <SPI_WAIT+0x6>
			spiCommError = 1;
    1458:	20 93 16 03 	sts	0x0316, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    145c:	0d b4       	in	r0, 0x2d	; 45
    145e:	07 fe       	sbrs	r0, 7
    1460:	f6 cf       	rjmp	.-20     	; 0x144e <SPI_WAIT+0xc>
			return;
		}
	}
}
    1462:	08 95       	ret

00001464 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1464:	84 b1       	in	r24, 0x04	; 4
    1466:	80 7f       	andi	r24, 0xF0	; 240
    1468:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    146a:	84 b1       	in	r24, 0x04	; 4
    146c:	87 60       	ori	r24, 0x07	; 7
    146e:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1470:	80 e5       	ldi	r24, 0x50	; 80
    1472:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1474:	8d b5       	in	r24, 0x2d	; 45
    1476:	81 60       	ori	r24, 0x01	; 1
    1478:	8d bd       	out	0x2d, r24	; 45

}
    147a:	08 95       	ret

0000147c <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    147c:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    147e:	1d bc       	out	0x2d, r1	; 45
}
    1480:	08 95       	ret

00001482 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1482:	44 23       	and	r20, r20
    1484:	09 f1       	breq	.+66     	; 0x14c8 <SPI_ReadWrite_Block+0x46>
    1486:	a6 2f       	mov	r26, r22
    1488:	b7 2f       	mov	r27, r23
    148a:	e8 2f       	mov	r30, r24
    148c:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    148e:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1490:	21 91       	ld	r18, Z+
    1492:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1494:	21 e0       	ldi	r18, 0x01	; 1
    1496:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1498:	0d b4       	in	r0, 0x2d	; 45
    149a:	07 fc       	sbrc	r0, 7
    149c:	0b c0       	rjmp	.+22     	; 0x14b4 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    149e:	2f 5f       	subi	r18, 0xFF	; 255
    14a0:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    14a2:	57 e2       	ldi	r21, 0x27	; 39
    14a4:	20 31       	cpi	r18, 0x10	; 16
    14a6:	35 07       	cpc	r19, r21
    14a8:	b8 f3       	brcs	.-18     	; 0x1498 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    14aa:	90 93 16 03 	sts	0x0316, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    14ae:	0d b4       	in	r0, 0x2d	; 45
    14b0:	07 fe       	sbrs	r0, 7
    14b2:	f5 cf       	rjmp	.-22     	; 0x149e <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    14b4:	20 91 16 03 	lds	r18, 0x0316
    14b8:	22 23       	and	r18, r18
    14ba:	31 f4       	brne	.+12     	; 0x14c8 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    14bc:	2e b5       	in	r18, 0x2e	; 46
    14be:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    14c0:	2e 2f       	mov	r18, r30
    14c2:	28 1b       	sub	r18, r24
    14c4:	24 17       	cp	r18, r20
    14c6:	20 f3       	brcs	.-56     	; 0x1490 <SPI_ReadWrite_Block+0xe>
    14c8:	08 95       	ret

000014ca <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    14ca:	66 23       	and	r22, r22
    14cc:	e9 f0       	breq	.+58     	; 0x1508 <SPI_Write_Block+0x3e>
    14ce:	e8 2f       	mov	r30, r24
    14d0:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    14d2:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    14d4:	21 91       	ld	r18, Z+
    14d6:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    14d8:	21 e0       	ldi	r18, 0x01	; 1
    14da:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    14dc:	0d b4       	in	r0, 0x2d	; 45
    14de:	07 fc       	sbrc	r0, 7
    14e0:	0b c0       	rjmp	.+22     	; 0x14f8 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    14e2:	2f 5f       	subi	r18, 0xFF	; 255
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    14e6:	47 e2       	ldi	r20, 0x27	; 39
    14e8:	20 31       	cpi	r18, 0x10	; 16
    14ea:	34 07       	cpc	r19, r20
    14ec:	b8 f3       	brcs	.-18     	; 0x14dc <SPI_Write_Block+0x12>
			spiCommError = 1;
    14ee:	90 93 16 03 	sts	0x0316, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    14f2:	0d b4       	in	r0, 0x2d	; 45
    14f4:	07 fe       	sbrs	r0, 7
    14f6:	f5 cf       	rjmp	.-22     	; 0x14e2 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    14f8:	20 91 16 03 	lds	r18, 0x0316
    14fc:	22 23       	and	r18, r18
    14fe:	21 f4       	brne	.+8      	; 0x1508 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1500:	2e 2f       	mov	r18, r30
    1502:	28 1b       	sub	r18, r24
    1504:	26 17       	cp	r18, r22
    1506:	30 f3       	brcs	.-52     	; 0x14d4 <SPI_Write_Block+0xa>
    1508:	08 95       	ret

0000150a <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    150a:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1510:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1512:	0d b4       	in	r0, 0x2d	; 45
    1514:	07 fc       	sbrc	r0, 7
    1516:	0a c0       	rjmp	.+20     	; 0x152c <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1518:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    151a:	37 e2       	ldi	r19, 0x27	; 39
    151c:	80 31       	cpi	r24, 0x10	; 16
    151e:	93 07       	cpc	r25, r19
    1520:	c0 f3       	brcs	.-16     	; 0x1512 <SPI_Write_Byte+0x8>
			spiCommError = 1;
    1522:	20 93 16 03 	sts	0x0316, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1526:	0d b4       	in	r0, 0x2d	; 45
    1528:	07 fe       	sbrs	r0, 7
    152a:	f6 cf       	rjmp	.-20     	; 0x1518 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    152c:	8e b5       	in	r24, 0x2e	; 46
}
    152e:	08 95       	ret

00001530 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <mirf_config+0xa>
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    153e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1540:	80 e2       	ldi	r24, 0x20	; 32
    1542:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1546:	8d e0       	ldi	r24, 0x0D	; 13
    1548:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    154c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    154e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1550:	83 e2       	ldi	r24, 0x23	; 35
    1552:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    155c:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    155e:	80 91 13 03 	lds	r24, 0x0313
    1562:	90 91 14 03 	lds	r25, 0x0314
    1566:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    1568:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    156a:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    156c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    156e:	80 e3       	ldi	r24, 0x30	; 48
    1570:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1574:	8e 01       	movw	r16, r28
    1576:	0f 5f       	subi	r16, 0xFF	; 255
    1578:	1f 4f       	sbci	r17, 0xFF	; 255
    157a:	c8 01       	movw	r24, r16
    157c:	63 e0       	ldi	r22, 0x03	; 3
    157e:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1582:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1584:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1586:	8a e2       	ldi	r24, 0x2A	; 42
    1588:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    158c:	c8 01       	movw	r24, r16
    158e:	63 e0       	ldi	r22, 0x03	; 3
    1590:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1594:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1596:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1598:	81 e2       	ldi	r24, 0x21	; 33
    159a:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15a4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15a8:	82 e2       	ldi	r24, 0x22	; 34
    15aa:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15b4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15b6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15b8:	84 e2       	ldi	r24, 0x24	; 36
    15ba:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15be:	82 e1       	ldi	r24, 0x12	; 18
    15c0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15c4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15c6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15c8:	85 e2       	ldi	r24, 0x25	; 37
    15ca:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15ce:	88 e2       	ldi	r24, 0x28	; 40
    15d0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15d4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15d6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15d8:	81 e3       	ldi	r24, 0x31	; 49
    15da:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15de:	8d e0       	ldi	r24, 0x0D	; 13
    15e0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15e4:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    15e6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    15e8:	80 e5       	ldi	r24, 0x50	; 80
    15ea:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    15ee:	83 e7       	ldi	r24, 0x73	; 115
    15f0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15f4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15f6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15f8:	8c e3       	ldi	r24, 0x3C	; 60
    15fa:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1604:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1606:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1608:	8d e3       	ldi	r24, 0x3D	; 61
    160a:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    160e:	86 e0       	ldi	r24, 0x06	; 6
    1610:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1614:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1616:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1618:	80 e2       	ldi	r24, 0x20	; 32
    161a:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    161e:	8f e0       	ldi	r24, 0x0F	; 15
    1620:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1624:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	1f 91       	pop	r17
    1632:	0f 91       	pop	r16
    1634:	08 95       	ret

00001636 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1636:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1638:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    163a:	0e 94 98 0a 	call	0x1530	; 0x1530 <mirf_config>
}
    163e:	08 95       	ret

00001640 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1646:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1648:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    164a:	8a e2       	ldi	r24, 0x2A	; 42
    164c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1650:	ce 01       	movw	r24, r28
    1652:	65 e0       	ldi	r22, 0x05	; 5
    1654:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1658:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    165a:	2c 9a       	sbi	0x05, 4	; 5
}
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	08 95       	ret

00001662 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1668:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    166a:	80 e3       	ldi	r24, 0x30	; 48
    166c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1670:	ce 01       	movw	r24, r28
    1672:	65 e0       	ldi	r22, 0x05	; 5
    1674:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1678:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	08 95       	ret

00001680 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1680:	80 91 b8 04 	lds	r24, 0x04B8
    1684:	88 23       	and	r24, r24
    1686:	11 f0       	breq	.+4      	; 0x168c <mirf_data_ready+0xc>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    168a:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    168c:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    168e:	8f ef       	ldi	r24, 0xFF	; 255
    1690:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1694:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1696:	80 74       	andi	r24, 0x40	; 64
    1698:	08 95       	ret

0000169a <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	0f 92       	push	r0
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    16a4:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    16a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    16a8:	87 e1       	ldi	r24, 0x17	; 23
    16aa:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    16ae:	be 01       	movw	r22, r28
    16b0:	6f 5f       	subi	r22, 0xFF	; 255
    16b2:	7f 4f       	sbci	r23, 0xFF	; 255
    16b4:	cb 01       	movw	r24, r22
    16b6:	41 e0       	ldi	r20, 0x01	; 1
    16b8:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    16bc:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    16be:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c0:	81 70       	andi	r24, 0x01	; 1
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    16ca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    16cc:	82 ee       	ldi	r24, 0xE2	; 226
    16ce:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    16d2:	28 9a       	sbi	0x05, 0	; 5

}
    16d4:	08 95       	ret

000016d6 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    16dc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    16de:	81 e6       	ldi	r24, 0x61	; 97
    16e0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    16e4:	ce 01       	movw	r24, r28
    16e6:	be 01       	movw	r22, r28
    16e8:	4d e0       	ldi	r20, 0x0D	; 13
    16ea:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    16ee:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    16f0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    16f2:	87 e2       	ldi	r24, 0x27	; 39
    16f4:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    16f8:	80 e4       	ldi	r24, 0x40	; 64
    16fa:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    16fe:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	0f 92       	push	r0
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1710:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1712:	8f 71       	andi	r24, 0x1F	; 31
    1714:	80 62       	ori	r24, 0x20	; 32
    1716:	69 83       	std	Y+1, r22	; 0x01
    1718:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    171c:	69 81       	ldd	r22, Y+1	; 0x01
    171e:	86 2f       	mov	r24, r22
    1720:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1724:	28 9a       	sbi	0x05, 0	; 5
}
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	0f 92       	push	r0
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    173e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1740:	8f 71       	andi	r24, 0x1F	; 31
    1742:	49 83       	std	Y+1, r20	; 0x01
    1744:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1748:	c8 01       	movw	r24, r16
    174a:	b8 01       	movw	r22, r16
    174c:	49 81       	ldd	r20, Y+1	; 0x01
    174e:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1752:	28 9a       	sbi	0x05, 0	; 5
}
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	08 95       	ret

00001760 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	0f 92       	push	r0
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1770:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1772:	8f 71       	andi	r24, 0x1F	; 31
    1774:	80 62       	ori	r24, 0x20	; 32
    1776:	49 83       	std	Y+1, r20	; 0x01
    1778:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    177c:	c8 01       	movw	r24, r16
    177e:	49 81       	ldd	r20, Y+1	; 0x01
    1780:	64 2f       	mov	r22, r20
    1782:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1786:	28 9a       	sbi	0x05, 0	; 5
}
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	08 95       	ret

00001794 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	0f 92       	push	r0
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    17a4:	80 91 b8 04 	lds	r24, 0x04B8
    17a8:	88 23       	and	r24, r24
    17aa:	e1 f7       	brne	.-8      	; 0x17a4 <mirf_send+0x10>

    mirf_CE_lo;
    17ac:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	80 93 b8 04 	sts	0x04B8, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    17b4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    17b6:	80 e2       	ldi	r24, 0x20	; 32
    17b8:	69 83       	std	Y+1, r22	; 0x01
    17ba:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    17be:	8a e4       	ldi	r24, 0x4A	; 74
    17c0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    17c4:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    17c6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    17c8:	81 ee       	ldi	r24, 0xE1	; 225
    17ca:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    17ce:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    17d0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    17d2:	80 ea       	ldi	r24, 0xA0	; 160
    17d4:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    17d8:	c8 01       	movw	r24, r16
    17da:	69 81       	ldd	r22, Y+1	; 0x01
    17dc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    17e0:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    17e2:	2c 9a       	sbi	0x05, 4	; 5
}
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	08 95       	ret

000017f0 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	0f 92       	push	r0
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	18 2f       	mov	r17, r24
    1804:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    1806:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1808:	81 ee       	ldi	r24, 0xE1	; 225
    180a:	99 83       	std	Y+1, r25	; 0x01
    180c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1810:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1812:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1814:	88 ea       	ldi	r24, 0xA8	; 168
    1816:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    181a:	99 81       	ldd	r25, Y+1	; 0x01
    181c:	00 23       	and	r16, r16
    181e:	61 f0       	breq	.+24     	; 0x1838 <writeAckPayload+0x48>
    1820:	61 2f       	mov	r22, r17
    1822:	79 2f       	mov	r23, r25
    1824:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1826:	f7 01       	movw	r30, r14
    1828:	81 91       	ld	r24, Z+
    182a:	7f 01       	movw	r14, r30
    182c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1830:	8e 2d       	mov	r24, r14
    1832:	81 1b       	sub	r24, r17
    1834:	80 17       	cp	r24, r16
    1836:	b8 f3       	brcs	.-18     	; 0x1826 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1838:	28 9a       	sbi	0x05, 0	; 5


}
    183a:	0f 90       	pop	r0
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	ff 90       	pop	r15
    1846:	ef 90       	pop	r14
    1848:	08 95       	ret

0000184a <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    184a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    184c:	81 ee       	ldi	r24, 0xE1	; 225
    184e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1852:	28 9a       	sbi	0x05, 0	; 5

}
    1854:	08 95       	ret

00001856 <handleRFCommands>:

void handleRFCommands() {
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    185c:	80 91 b8 04 	lds	r24, 0x04B8
    1860:	88 23       	and	r24, r24
    1862:	21 f0       	breq	.+8      	; 0x186c <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    186c:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    186e:	8f ef       	ldi	r24, 0xFF	; 255
    1870:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1874:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
    1876:	86 ff       	sbrs	r24, 6
    1878:	f5 cf       	rjmp	.-22     	; 0x1864 <handleRFCommands+0xe>

		rfFlags |= 0x02;
    187a:	80 91 15 03 	lds	r24, 0x0315
    187e:	82 60       	ori	r24, 0x02	; 2
    1880:	80 93 15 03 	sts	0x0315, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1884:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1886:	87 e2       	ldi	r24, 0x27	; 39
    1888:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    188c:	80 e7       	ldi	r24, 0x70	; 112
    188e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1892:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    1894:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1896:	81 e6       	ldi	r24, 0x61	; 97
    1898:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    189c:	8d e6       	ldi	r24, 0x6D	; 109
    189e:	95 e0       	ldi	r25, 0x05	; 5
    18a0:	bc 01       	movw	r22, r24
    18a2:	4d e0       	ldi	r20, 0x0D	; 13
    18a4:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    18a8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18aa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18ac:	87 e2       	ldi	r24, 0x27	; 39
    18ae:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18b2:	80 e4       	ldi	r24, 0x40	; 64
    18b4:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    18b8:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    18ba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    18bc:	82 ee       	ldi	r24, 0xE2	; 226
    18be:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    18c2:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    18c4:	40 91 6d 05 	lds	r20, 0x056D
    18c8:	24 2f       	mov	r18, r20
    18ca:	44 23       	and	r20, r20
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <handleRFCommands+0x7a>
    18ce:	71 c1       	rjmp	.+738    	; 0x1bb2 <handleRFCommands+0x35c>

			sleep(60);
    18d0:	50 91 6e 05 	lds	r21, 0x056E
    18d4:	e5 2f       	mov	r30, r21
    18d6:	60 91 6f 05 	lds	r22, 0x056F

		}

		if(calibrateOdomFlag==0) { 
    18da:	80 91 bf 04 	lds	r24, 0x04BF
    18de:	88 23       	and	r24, r24
    18e0:	41 f5       	brne	.+80     	; 0x1932 <handleRFCommands+0xdc>
			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    18e2:	e0 91 71 05 	lds	r30, 0x0571
    18e6:	2e 2f       	mov	r18, r30
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	2f 77       	andi	r18, 0x7F	; 127
    18ec:	30 70       	andi	r19, 0x00	; 0
    18ee:	30 93 12 03 	sts	0x0312, r19
    18f2:	20 93 11 03 	sts	0x0311, r18
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    18f6:	70 91 72 05 	lds	r23, 0x0572
    18fa:	87 2f       	mov	r24, r23
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	8f 77       	andi	r24, 0x7F	; 127
    1900:	90 70       	andi	r25, 0x00	; 0
    1902:	90 93 10 03 	sts	0x0310, r25
    1906:	80 93 0f 03 	sts	0x030F, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    190a:	e7 fd       	sbrc	r30, 7
    190c:	03 c0       	rjmp	.+6      	; 0x1914 <handleRFCommands+0xbe>
				pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
			} else {								// backward
				pwm_right_desired = -(speedr);
    190e:	30 95       	com	r19
    1910:	21 95       	neg	r18
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
    1914:	30 93 fa 02 	sts	0x02FA, r19
    1918:	20 93 f9 02 	sts	0x02F9, r18
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    191c:	77 fd       	sbrc	r23, 7
    191e:	03 c0       	rjmp	.+6      	; 0x1926 <handleRFCommands+0xd0>
				pwm_left_desired = speedl;
			} else {								// backward
				pwm_left_desired = -(speedl);
    1920:	90 95       	com	r25
    1922:	81 95       	neg	r24
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	90 93 fc 02 	sts	0x02FC, r25
    192a:	80 93 fb 02 	sts	0x02FB, r24
    192e:	24 2f       	mov	r18, r20
    1930:	e5 2f       	mov	r30, r21

		}


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	30 93 66 05 	sts	0x0566, r19
    1938:	20 93 65 05 	sts	0x0565, r18
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	f0 93 68 05 	sts	0x0568, r31
    1942:	e0 93 67 05 	sts	0x0567, r30
    1946:	c6 2f       	mov	r28, r22
    1948:	d0 e0       	ldi	r29, 0x00	; 0
    194a:	d0 93 6a 05 	sts	0x056A, r29
    194e:	c0 93 69 05 	sts	0x0569, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1952:	92 2f       	mov	r25, r18
    1954:	88 27       	eor	r24, r24
    1956:	82 1b       	sub	r24, r18
    1958:	93 0b       	sbc	r25, r19
    195a:	24 e6       	ldi	r18, 0x64	; 100
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	b9 01       	movw	r22, r18
    1960:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <__udivmodhi4>
    1964:	16 2f       	mov	r17, r22
    1966:	10 95       	com	r17
    1968:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    196c:	5e 2f       	mov	r21, r30
    196e:	44 27       	eor	r20, r20
    1970:	4e 1b       	sub	r20, r30
    1972:	5f 0b       	sbc	r21, r31
    1974:	ca 01       	movw	r24, r20
    1976:	b9 01       	movw	r22, r18
    1978:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <__udivmodhi4>
    197c:	60 95       	com	r22
    197e:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1982:	5c 2f       	mov	r21, r28
    1984:	44 27       	eor	r20, r20
    1986:	4c 1b       	sub	r20, r28
    1988:	5d 0b       	sbc	r21, r29
    198a:	ca 01       	movw	r24, r20
    198c:	b9 01       	movw	r22, r18
    198e:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <__udivmodhi4>
    1992:	60 95       	com	r22
    1994:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    1998:	81 2f       	mov	r24, r17
    199a:	0e 94 b1 34 	call	0x6962	; 0x6962 <updateRedLed>
		updateGreenLed(pwm_green);
    199e:	80 91 0d 02 	lds	r24, 0x020D
    19a2:	0e 94 c5 34 	call	0x698a	; 0x698a <updateGreenLed>
		updateBlueLed(pwm_blue);
    19a6:	80 91 0e 02 	lds	r24, 0x020E
    19aa:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    19ae:	80 91 70 05 	lds	r24, 0x0570
    19b2:	80 ff       	sbrs	r24, 0
    19b4:	6e c1       	rjmp	.+732    	; 0x1c92 <handleRFCommands+0x43c>
			LED_IR1_LOW;
    19b6:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    19b8:	81 ff       	sbrs	r24, 1
    19ba:	0e c1       	rjmp	.+540    	; 0x1bd8 <handleRFCommands+0x382>
			LED_IR2_LOW;
    19bc:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    19be:	98 2f       	mov	r25, r24
    19c0:	82 ff       	sbrs	r24, 2
    19c2:	0e c1       	rjmp	.+540    	; 0x1be0 <handleRFCommands+0x38a>
			irEnabled = 1;
    19c4:	21 e0       	ldi	r18, 0x01	; 1
    19c6:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    19ca:	84 fd       	sbrc	r24, 4
    19cc:	0d c1       	rjmp	.+538    	; 0x1be8 <handleRFCommands+0x392>
			calibrateSensors();
			resetOdometry();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    19ce:	86 ff       	sbrs	r24, 6
    19d0:	14 c1       	rjmp	.+552    	; 0x1bfa <handleRFCommands+0x3a4>
			obstacleAvoidanceEnabled = 1;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	80 93 64 04 	sts	0x0464, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    19d8:	97 fd       	sbrc	r25, 7
    19da:	13 c1       	rjmp	.+550    	; 0x1c02 <handleRFCommands+0x3ac>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    19dc:	10 92 65 04 	sts	0x0465, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    19e0:	80 91 73 05 	lds	r24, 0x0573
    19e4:	80 ff       	sbrs	r24, 0
    19e6:	14 c1       	rjmp	.+552    	; 0x1c10 <handleRFCommands+0x3ba>
				GREEN_LED0_ON;
    19e8:	80 91 0b 01 	lds	r24, 0x010B
    19ec:	8e 7f       	andi	r24, 0xFE	; 254
    19ee:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    19f2:	80 91 73 05 	lds	r24, 0x0573
    19f6:	81 ff       	sbrs	r24, 1
    19f8:	14 c1       	rjmp	.+552    	; 0x1c22 <handleRFCommands+0x3cc>
				GREEN_LED1_ON;
    19fa:	80 91 0b 01 	lds	r24, 0x010B
    19fe:	8d 7f       	andi	r24, 0xFD	; 253
    1a00:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1a04:	80 91 73 05 	lds	r24, 0x0573
    1a08:	82 ff       	sbrs	r24, 2
    1a0a:	14 c1       	rjmp	.+552    	; 0x1c34 <handleRFCommands+0x3de>
				GREEN_LED2_ON;
    1a0c:	80 91 0b 01 	lds	r24, 0x010B
    1a10:	8b 7f       	andi	r24, 0xFB	; 251
    1a12:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1a16:	80 91 73 05 	lds	r24, 0x0573
    1a1a:	83 ff       	sbrs	r24, 3
    1a1c:	14 c1       	rjmp	.+552    	; 0x1c46 <handleRFCommands+0x3f0>
				GREEN_LED3_ON;
    1a1e:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    1a20:	80 91 73 05 	lds	r24, 0x0573
    1a24:	84 ff       	sbrs	r24, 4
    1a26:	14 c1       	rjmp	.+552    	; 0x1c50 <handleRFCommands+0x3fa>
				GREEN_LED4_ON;
    1a28:	80 91 0b 01 	lds	r24, 0x010B
    1a2c:	8f 7e       	andi	r24, 0xEF	; 239
    1a2e:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    1a32:	80 91 73 05 	lds	r24, 0x0573
    1a36:	85 ff       	sbrs	r24, 5
    1a38:	14 c1       	rjmp	.+552    	; 0x1c62 <handleRFCommands+0x40c>
				GREEN_LED5_ON;
    1a3a:	80 91 0b 01 	lds	r24, 0x010B
    1a3e:	8f 7d       	andi	r24, 0xDF	; 223
    1a40:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    1a44:	80 91 73 05 	lds	r24, 0x0573
    1a48:	86 ff       	sbrs	r24, 6
    1a4a:	14 c1       	rjmp	.+552    	; 0x1c74 <handleRFCommands+0x41e>
				GREEN_LED6_ON;
    1a4c:	80 91 0b 01 	lds	r24, 0x010B
    1a50:	8f 7b       	andi	r24, 0xBF	; 191
    1a52:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    1a56:	80 91 73 05 	lds	r24, 0x0573
    1a5a:	87 fd       	sbrc	r24, 7
    1a5c:	14 c1       	rjmp	.+552    	; 0x1c86 <handleRFCommands+0x430>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    1a5e:	80 91 0b 01 	lds	r24, 0x010B
    1a62:	80 68       	ori	r24, 0x80	; 128
    1a64:	80 93 0b 01 	sts	0x010B, r24
			}

		#endif
		
		if(calibrateOdomFlag==0) {
    1a68:	80 91 bf 04 	lds	r24, 0x04BF
    1a6c:	88 23       	and	r24, r24
    1a6e:	21 f4       	brne	.+8      	; 0x1a78 <handleRFCommands+0x222>
			if((rfData[7]&0b00000001)==0b00000001) {
    1a70:	80 91 74 05 	lds	r24, 0x0574
    1a74:	80 fd       	sbrc	r24, 0
    1a76:	83 c2       	rjmp	.+1286   	; 0x1f7e <handleRFCommands+0x728>
		}

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1a78:	80 91 0b 02 	lds	r24, 0x020B
    1a7c:	80 93 c5 04 	sts	0x04C5, r24

		switch(packetId) {
    1a80:	85 30       	cpi	r24, 0x05	; 5
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <handleRFCommands+0x230>
    1a84:	ba c1       	rjmp	.+884    	; 0x1dfa <handleRFCommands+0x5a4>
    1a86:	86 30       	cpi	r24, 0x06	; 6
    1a88:	08 f0       	brcs	.+2      	; 0x1a8c <handleRFCommands+0x236>
    1a8a:	05 c1       	rjmp	.+522    	; 0x1c96 <handleRFCommands+0x440>
    1a8c:	83 30       	cpi	r24, 0x03	; 3
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <handleRFCommands+0x23c>
    1a90:	10 c2       	rjmp	.+1056   	; 0x1eb2 <handleRFCommands+0x65c>
    1a92:	84 30       	cpi	r24, 0x04	; 4
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <handleRFCommands+0x242>
    1a96:	3f c0       	rjmp	.+126    	; 0x1b16 <handleRFCommands+0x2c0>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    1a98:	90 91 61 02 	lds	r25, 0x0261
    1a9c:	80 91 62 02 	lds	r24, 0x0262
    1aa0:	90 93 c6 04 	sts	0x04C6, r25
				ackPayload[2] = proximityResult[4]>>8;
    1aa4:	80 93 c7 04 	sts	0x04C7, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    1aa8:	90 91 69 02 	lds	r25, 0x0269
    1aac:	80 91 6a 02 	lds	r24, 0x026A
    1ab0:	90 93 c8 04 	sts	0x04C8, r25
				ackPayload[4] = proximityResult[8]>>8;
    1ab4:	80 93 c9 04 	sts	0x04C9, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    1ab8:	90 91 6b 02 	lds	r25, 0x026B
    1abc:	80 91 6c 02 	lds	r24, 0x026C
    1ac0:	90 93 ca 04 	sts	0x04CA, r25
				ackPayload[6] = proximityResult[9]>>8;
    1ac4:	80 93 cb 04 	sts	0x04CB, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    1ac8:	90 91 6d 02 	lds	r25, 0x026D
    1acc:	80 91 6e 02 	lds	r24, 0x026E
    1ad0:	90 93 cc 04 	sts	0x04CC, r25
				ackPayload[8] = proximityResult[10]>>8;
    1ad4:	80 93 cd 04 	sts	0x04CD, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    1ad8:	90 91 6f 02 	lds	r25, 0x026F
    1adc:	80 91 70 02 	lds	r24, 0x0270
    1ae0:	90 93 ce 04 	sts	0x04CE, r25
				ackPayload[10] = proximityResult[11]>>8;
    1ae4:	80 93 cf 04 	sts	0x04CF, r24
				ackPayload[11] = accX&0xFF;
    1ae8:	90 91 28 04 	lds	r25, 0x0428
    1aec:	80 91 29 04 	lds	r24, 0x0429
    1af0:	90 93 d0 04 	sts	0x04D0, r25
				ackPayload[12] = accX>>8;
    1af4:	80 93 d1 04 	sts	0x04D1, r24
				ackPayload[13] = accY&0xFF;
    1af8:	90 91 2a 04 	lds	r25, 0x042A
    1afc:	80 91 2b 04 	lds	r24, 0x042B
    1b00:	90 93 d2 04 	sts	0x04D2, r25
				ackPayload[14] = accY>>8;
    1b04:	80 93 d3 04 	sts	0x04D3, r24
				ackPayload[15] = irCommand;
    1b08:	80 91 23 04 	lds	r24, 0x0423
    1b0c:	80 93 d4 04 	sts	0x04D4, r24
				packetId = 5;
    1b10:	85 e0       	ldi	r24, 0x05	; 5
    1b12:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
    1b16:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1b18:	81 ee       	ldi	r24, 0xE1	; 225
    1b1a:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1b1e:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1b20:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1b22:	88 ea       	ldi	r24, 0xA8	; 168
    1b24:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    1b28:	80 91 c5 04 	lds	r24, 0x04C5
    1b2c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b30:	80 91 c6 04 	lds	r24, 0x04C6
    1b34:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b38:	80 91 c7 04 	lds	r24, 0x04C7
    1b3c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b40:	80 91 c8 04 	lds	r24, 0x04C8
    1b44:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b48:	80 91 c9 04 	lds	r24, 0x04C9
    1b4c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b50:	80 91 ca 04 	lds	r24, 0x04CA
    1b54:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b58:	80 91 cb 04 	lds	r24, 0x04CB
    1b5c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b60:	80 91 cc 04 	lds	r24, 0x04CC
    1b64:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b68:	80 91 cd 04 	lds	r24, 0x04CD
    1b6c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b70:	80 91 ce 04 	lds	r24, 0x04CE
    1b74:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b78:	80 91 cf 04 	lds	r24, 0x04CF
    1b7c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b80:	80 91 d0 04 	lds	r24, 0x04D0
    1b84:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b88:	80 91 d1 04 	lds	r24, 0x04D1
    1b8c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b90:	80 91 d2 04 	lds	r24, 0x04D2
    1b94:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1b98:	80 91 d3 04 	lds	r24, 0x04D3
    1b9c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1ba0:	80 91 d4 04 	lds	r24, 0x04D4
    1ba4:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    1ba8:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	1f 91       	pop	r17
    1bb0:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1bb2:	50 91 6e 05 	lds	r21, 0x056E
    1bb6:	e5 2f       	mov	r30, r21
    1bb8:	55 23       	and	r21, r21
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <handleRFCommands+0x368>
    1bbc:	8c ce       	rjmp	.-744    	; 0x18d6 <handleRFCommands+0x80>
    1bbe:	60 91 6f 05 	lds	r22, 0x056F
    1bc2:	66 23       	and	r22, r22
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <handleRFCommands+0x372>
    1bc6:	ef c1       	rjmp	.+990    	; 0x1fa6 <handleRFCommands+0x750>
    1bc8:	80 91 70 05 	lds	r24, 0x0570
    1bcc:	88 30       	cpi	r24, 0x08	; 8
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <handleRFCommands+0x37c>
    1bd0:	ec c1       	rjmp	.+984    	; 0x1faa <handleRFCommands+0x754>
    1bd2:	e6 2f       	mov	r30, r22
    1bd4:	26 2f       	mov	r18, r22
    1bd6:	81 ce       	rjmp	.-766    	; 0x18da <handleRFCommands+0x84>
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    1bd8:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1bda:	98 2f       	mov	r25, r24
    1bdc:	82 fd       	sbrc	r24, 2
    1bde:	f2 ce       	rjmp	.-540    	; 0x19c4 <handleRFCommands+0x16e>
			irEnabled = 1;
		} else {
			irEnabled = 0;
    1be0:	10 92 12 02 	sts	0x0212, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1be4:	84 ff       	sbrs	r24, 4
    1be6:	f3 ce       	rjmp	.-538    	; 0x19ce <handleRFCommands+0x178>
			calibrateSensors();
    1be8:	0e 94 a9 37 	call	0x6f52	; 0x6f52 <calibrateSensors>
			resetOdometry();
    1bec:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <resetOdometry>
    1bf0:	90 91 70 05 	lds	r25, 0x0570
    1bf4:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1bf6:	86 fd       	sbrc	r24, 6
    1bf8:	ec ce       	rjmp	.-552    	; 0x19d2 <handleRFCommands+0x17c>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    1bfa:	10 92 64 04 	sts	0x0464, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1bfe:	97 ff       	sbrs	r25, 7
    1c00:	ed ce       	rjmp	.-550    	; 0x19dc <handleRFCommands+0x186>
			cliffAvoidanceEnabled = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	80 93 65 04 	sts	0x0465, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1c08:	80 91 73 05 	lds	r24, 0x0573
    1c0c:	80 fd       	sbrc	r24, 0
    1c0e:	ec ce       	rjmp	.-552    	; 0x19e8 <handleRFCommands+0x192>
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    1c10:	80 91 0b 01 	lds	r24, 0x010B
    1c14:	81 60       	ori	r24, 0x01	; 1
    1c16:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1c1a:	80 91 73 05 	lds	r24, 0x0573
    1c1e:	81 fd       	sbrc	r24, 1
    1c20:	ec ce       	rjmp	.-552    	; 0x19fa <handleRFCommands+0x1a4>
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    1c22:	80 91 0b 01 	lds	r24, 0x010B
    1c26:	82 60       	ori	r24, 0x02	; 2
    1c28:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1c2c:	80 91 73 05 	lds	r24, 0x0573
    1c30:	82 fd       	sbrc	r24, 2
    1c32:	ec ce       	rjmp	.-552    	; 0x1a0c <handleRFCommands+0x1b6>
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    1c34:	80 91 0b 01 	lds	r24, 0x010B
    1c38:	84 60       	ori	r24, 0x04	; 4
    1c3a:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1c3e:	80 91 73 05 	lds	r24, 0x0573
    1c42:	83 fd       	sbrc	r24, 3
    1c44:	ec ce       	rjmp	.-552    	; 0x1a1e <handleRFCommands+0x1c8>
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    1c46:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
    1c48:	80 91 73 05 	lds	r24, 0x0573
    1c4c:	84 fd       	sbrc	r24, 4
    1c4e:	ec ce       	rjmp	.-552    	; 0x1a28 <handleRFCommands+0x1d2>
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    1c50:	80 91 0b 01 	lds	r24, 0x010B
    1c54:	80 61       	ori	r24, 0x10	; 16
    1c56:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
    1c5a:	80 91 73 05 	lds	r24, 0x0573
    1c5e:	85 fd       	sbrc	r24, 5
    1c60:	ec ce       	rjmp	.-552    	; 0x1a3a <handleRFCommands+0x1e4>
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    1c62:	80 91 0b 01 	lds	r24, 0x010B
    1c66:	80 62       	ori	r24, 0x20	; 32
    1c68:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
    1c6c:	80 91 73 05 	lds	r24, 0x0573
    1c70:	86 fd       	sbrc	r24, 6
    1c72:	ec ce       	rjmp	.-552    	; 0x1a4c <handleRFCommands+0x1f6>
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    1c74:	80 91 0b 01 	lds	r24, 0x010B
    1c78:	80 64       	ori	r24, 0x40	; 64
    1c7a:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
    1c7e:	80 91 73 05 	lds	r24, 0x0573
    1c82:	87 ff       	sbrs	r24, 7
    1c84:	ec ce       	rjmp	.-552    	; 0x1a5e <handleRFCommands+0x208>
				GREEN_LED7_ON;
    1c86:	80 91 0b 01 	lds	r24, 0x010B
    1c8a:	8f 77       	andi	r24, 0x7F	; 127
    1c8c:	80 93 0b 01 	sts	0x010B, r24
    1c90:	eb ce       	rjmp	.-554    	; 0x1a68 <handleRFCommands+0x212>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    1c92:	44 9a       	sbi	0x08, 4	; 8
    1c94:	91 ce       	rjmp	.-734    	; 0x19b8 <handleRFCommands+0x162>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    1c96:	86 30       	cpi	r24, 0x06	; 6
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <handleRFCommands+0x446>
    1c9a:	5d c0       	rjmp	.+186    	; 0x1d56 <handleRFCommands+0x500>
    1c9c:	87 30       	cpi	r24, 0x07	; 7
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <handleRFCommands+0x44c>
    1ca0:	3a cf       	rjmp	.-396    	; 0x1b16 <handleRFCommands+0x2c0>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    1ca2:	60 91 d5 02 	lds	r22, 0x02D5
    1ca6:	70 91 d6 02 	lds	r23, 0x02D6
    1caa:	80 91 d7 02 	lds	r24, 0x02D7
    1cae:	90 91 d8 02 	lds	r25, 0x02D8
    1cb2:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    1cb6:	60 93 c6 04 	sts	0x04C6, r22
				ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    1cba:	70 93 c7 04 	sts	0x04C7, r23
				ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    1cbe:	80 93 c8 04 	sts	0x04C8, r24
				ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    1cc2:	90 93 c9 04 	sts	0x04C9, r25
				ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    1cc6:	60 91 d1 02 	lds	r22, 0x02D1
    1cca:	70 91 d2 02 	lds	r23, 0x02D2
    1cce:	80 91 d3 02 	lds	r24, 0x02D3
    1cd2:	90 91 d4 02 	lds	r25, 0x02D4
    1cd6:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    1cda:	60 93 ca 04 	sts	0x04CA, r22
				ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    1cde:	70 93 cb 04 	sts	0x04CB, r23
				ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    1ce2:	80 93 cc 04 	sts	0x04CC, r24
				ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    1ce6:	90 93 cd 04 	sts	0x04CD, r25
				ackPayload[9] = ((unsigned int)(theta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    1cea:	60 91 67 04 	lds	r22, 0x0467
    1cee:	70 91 68 04 	lds	r23, 0x0468
    1cf2:	80 91 69 04 	lds	r24, 0x0469
    1cf6:	90 91 6a 04 	lds	r25, 0x046A
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e4       	ldi	r19, 0x40	; 64
    1cfe:	4f e0       	ldi	r20, 0x0F	; 15
    1d00:	54 e4       	ldi	r21, 0x44	; 68
    1d02:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    1d06:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <__fixunssfsi>
    1d0a:	60 93 ce 04 	sts	0x04CE, r22
				ackPayload[10] = ((unsigned int)(theta*573.0))>>8;
    1d0e:	70 93 cf 04 	sts	0x04CF, r23
				ackPayload[11] = ((unsigned int)xPos)&0xFF;
    1d12:	60 91 6b 04 	lds	r22, 0x046B
    1d16:	70 91 6c 04 	lds	r23, 0x046C
    1d1a:	80 91 6d 04 	lds	r24, 0x046D
    1d1e:	90 91 6e 04 	lds	r25, 0x046E
    1d22:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <__fixunssfsi>
    1d26:	60 93 d0 04 	sts	0x04D0, r22
				ackPayload[12] = ((unsigned int)xPos)>>8;
    1d2a:	70 93 d1 04 	sts	0x04D1, r23
				ackPayload[13] = ((unsigned int)yPos)&0xFF;
    1d2e:	60 91 6f 04 	lds	r22, 0x046F
    1d32:	70 91 70 04 	lds	r23, 0x0470
    1d36:	80 91 71 04 	lds	r24, 0x0471
    1d3a:	90 91 72 04 	lds	r25, 0x0472
    1d3e:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <__fixunssfsi>
    1d42:	60 93 d2 04 	sts	0x04D2, r22
				ackPayload[14] = ((unsigned int)yPos)>>8;
    1d46:	70 93 d3 04 	sts	0x04D3, r23
				//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
				//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
				//ackPayload[12] = ((unsigned int)xPosOld)>>8;
				//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
				//ackPayload[14] = ((unsigned int)yPosOld)>>8;
				ackPayload[15] = 0;
    1d4a:	10 92 d4 04 	sts	0x04D4, r1
				packetId = 3;
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	80 93 0b 02 	sts	0x020B, r24
				break;
    1d54:	e0 ce       	rjmp	.-576    	; 0x1b16 <handleRFCommands+0x2c0>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    1d56:	80 91 39 02 	lds	r24, 0x0239
    1d5a:	90 91 3a 02 	lds	r25, 0x023A
    1d5e:	80 93 c6 04 	sts	0x04C6, r24
				ackPayload[2] = proximityValue[8]>>8;
    1d62:	80 91 39 02 	lds	r24, 0x0239
    1d66:	90 91 3a 02 	lds	r25, 0x023A
    1d6a:	90 93 c7 04 	sts	0x04C7, r25
				ackPayload[3] = proximityValue[16]&0xFF;
    1d6e:	80 91 49 02 	lds	r24, 0x0249
    1d72:	90 91 4a 02 	lds	r25, 0x024A
    1d76:	80 93 c8 04 	sts	0x04C8, r24
				ackPayload[4] = proximityValue[16]>>8;
    1d7a:	80 91 49 02 	lds	r24, 0x0249
    1d7e:	90 91 4a 02 	lds	r25, 0x024A
    1d82:	90 93 c9 04 	sts	0x04C9, r25
				ackPayload[5] = proximityValue[18]&0xFF;
    1d86:	80 91 4d 02 	lds	r24, 0x024D
    1d8a:	90 91 4e 02 	lds	r25, 0x024E
    1d8e:	80 93 ca 04 	sts	0x04CA, r24
				ackPayload[6] = proximityValue[18]>>8;
    1d92:	80 91 4d 02 	lds	r24, 0x024D
    1d96:	90 91 4e 02 	lds	r25, 0x024E
    1d9a:	90 93 cb 04 	sts	0x04CB, r25
				ackPayload[7] = proximityValue[20]&0xFF;
    1d9e:	80 91 51 02 	lds	r24, 0x0251
    1da2:	90 91 52 02 	lds	r25, 0x0252
    1da6:	80 93 cc 04 	sts	0x04CC, r24
				ackPayload[8] = proximityValue[20]>>8;
    1daa:	80 91 51 02 	lds	r24, 0x0251
    1dae:	90 91 52 02 	lds	r25, 0x0252
    1db2:	90 93 cd 04 	sts	0x04CD, r25
				ackPayload[9] = proximityValue[22]&0xFF;
    1db6:	80 91 55 02 	lds	r24, 0x0255
    1dba:	90 91 56 02 	lds	r25, 0x0256
    1dbe:	80 93 ce 04 	sts	0x04CE, r24
				ackPayload[10] = proximityValue[22]>>8;
    1dc2:	80 91 55 02 	lds	r24, 0x0255
    1dc6:	90 91 56 02 	lds	r25, 0x0256
    1dca:	90 93 cf 04 	sts	0x04CF, r25
				ackPayload[11] = accZ&0xFF;
    1dce:	90 91 2c 04 	lds	r25, 0x042C
    1dd2:	80 91 2d 04 	lds	r24, 0x042D
    1dd6:	90 93 d0 04 	sts	0x04D0, r25
				ackPayload[12] = accZ>>8;	
    1dda:	80 93 d1 04 	sts	0x04D1, r24
				ackPayload[13] = batteryLevel&0xFF;
    1dde:	90 91 bd 02 	lds	r25, 0x02BD
    1de2:	80 91 be 02 	lds	r24, 0x02BE
    1de6:	90 93 d2 04 	sts	0x04D2, r25
				ackPayload[14] = batteryLevel>>8;
    1dea:	80 93 d3 04 	sts	0x04D3, r24
				ackPayload[15] = 0;
    1dee:	10 92 d4 04 	sts	0x04D4, r1
				packetId = 7;
    1df2:	87 e0       	ldi	r24, 0x07	; 7
    1df4:	80 93 0b 02 	sts	0x020B, r24
				break;
    1df8:	8e ce       	rjmp	.-740    	; 0x1b16 <handleRFCommands+0x2c0>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    1dfa:	80 91 29 02 	lds	r24, 0x0229
    1dfe:	90 91 2a 02 	lds	r25, 0x022A
    1e02:	80 93 c6 04 	sts	0x04C6, r24
				ackPayload[2] = proximityValue[0]>>8;
    1e06:	80 91 29 02 	lds	r24, 0x0229
    1e0a:	90 91 2a 02 	lds	r25, 0x022A
    1e0e:	90 93 c7 04 	sts	0x04C7, r25
				ackPayload[3] = proximityValue[2]&0xFF;
    1e12:	80 91 2d 02 	lds	r24, 0x022D
    1e16:	90 91 2e 02 	lds	r25, 0x022E
    1e1a:	80 93 c8 04 	sts	0x04C8, r24
				ackPayload[4] = proximityValue[2]>>8;
    1e1e:	80 91 2d 02 	lds	r24, 0x022D
    1e22:	90 91 2e 02 	lds	r25, 0x022E
    1e26:	90 93 c9 04 	sts	0x04C9, r25
				ackPayload[5] = proximityValue[4]&0xFF;
    1e2a:	80 91 31 02 	lds	r24, 0x0231
    1e2e:	90 91 32 02 	lds	r25, 0x0232
    1e32:	80 93 ca 04 	sts	0x04CA, r24
				ackPayload[6] = proximityValue[4]>>8;
    1e36:	80 91 31 02 	lds	r24, 0x0231
    1e3a:	90 91 32 02 	lds	r25, 0x0232
    1e3e:	90 93 cb 04 	sts	0x04CB, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    1e42:	80 91 35 02 	lds	r24, 0x0235
    1e46:	90 91 36 02 	lds	r25, 0x0236
    1e4a:	80 93 cc 04 	sts	0x04CC, r24
				ackPayload[8] = proximityValue[6]>>8;
    1e4e:	80 91 35 02 	lds	r24, 0x0235
    1e52:	90 91 36 02 	lds	r25, 0x0236
    1e56:	90 93 cd 04 	sts	0x04CD, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    1e5a:	80 91 3d 02 	lds	r24, 0x023D
    1e5e:	90 91 3e 02 	lds	r25, 0x023E
    1e62:	80 93 ce 04 	sts	0x04CE, r24
				ackPayload[10] = proximityValue[10]>>8;
    1e66:	80 91 3d 02 	lds	r24, 0x023D
    1e6a:	90 91 3e 02 	lds	r25, 0x023E
    1e6e:	90 93 cf 04 	sts	0x04CF, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    1e72:	80 91 41 02 	lds	r24, 0x0241
    1e76:	90 91 42 02 	lds	r25, 0x0242
    1e7a:	80 93 d0 04 	sts	0x04D0, r24
				ackPayload[12] = proximityValue[12]>>8;
    1e7e:	80 91 41 02 	lds	r24, 0x0241
    1e82:	90 91 42 02 	lds	r25, 0x0242
    1e86:	90 93 d1 04 	sts	0x04D1, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    1e8a:	80 91 45 02 	lds	r24, 0x0245
    1e8e:	90 91 46 02 	lds	r25, 0x0246
    1e92:	80 93 d2 04 	sts	0x04D2, r24
				ackPayload[14] = proximityValue[14]>>8;
    1e96:	80 91 45 02 	lds	r24, 0x0245
    1e9a:	90 91 46 02 	lds	r25, 0x0246
    1e9e:	90 93 d3 04 	sts	0x04D3, r25
				ackPayload[15] = currentSelector;
    1ea2:	80 91 4b 04 	lds	r24, 0x044B
    1ea6:	80 93 d4 04 	sts	0x04D4, r24
				packetId = 6;
    1eaa:	86 e0       	ldi	r24, 0x06	; 6
    1eac:	80 93 0b 02 	sts	0x020B, r24
				break;
    1eb0:	32 ce       	rjmp	.-924    	; 0x1b16 <handleRFCommands+0x2c0>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
    1eb2:	90 91 59 02 	lds	r25, 0x0259
    1eb6:	80 91 5a 02 	lds	r24, 0x025A
    1eba:	90 93 c6 04 	sts	0x04C6, r25
				ackPayload[2] = proximityResult[0]>>8;
    1ebe:	80 93 c7 04 	sts	0x04C7, r24
				ackPayload[3] = proximityResult[1]&0xFF;
    1ec2:	90 91 5b 02 	lds	r25, 0x025B
    1ec6:	80 91 5c 02 	lds	r24, 0x025C
    1eca:	90 93 c8 04 	sts	0x04C8, r25
				ackPayload[4] = proximityResult[1]>>8;
    1ece:	80 93 c9 04 	sts	0x04C9, r24
				ackPayload[5] = proximityResult[2]&0xFF;
    1ed2:	90 91 5d 02 	lds	r25, 0x025D
    1ed6:	80 91 5e 02 	lds	r24, 0x025E
    1eda:	90 93 ca 04 	sts	0x04CA, r25
				ackPayload[6] = proximityResult[2]>>8;
    1ede:	80 93 cb 04 	sts	0x04CB, r24
				ackPayload[7] = proximityResult[3]&0xFF;
    1ee2:	90 91 5f 02 	lds	r25, 0x025F
    1ee6:	80 91 60 02 	lds	r24, 0x0260
    1eea:	90 93 cc 04 	sts	0x04CC, r25
				ackPayload[8] = proximityResult[3]>>8;
    1eee:	80 93 cd 04 	sts	0x04CD, r24
				ackPayload[9] = proximityResult[5]&0xFF;
    1ef2:	90 91 63 02 	lds	r25, 0x0263
    1ef6:	80 91 64 02 	lds	r24, 0x0264
    1efa:	90 93 ce 04 	sts	0x04CE, r25
				ackPayload[10] = proximityResult[5]>>8;
    1efe:	80 93 cf 04 	sts	0x04CF, r24
				ackPayload[11] = proximityResult[6]&0xFF;
    1f02:	90 91 65 02 	lds	r25, 0x0265
    1f06:	80 91 66 02 	lds	r24, 0x0266
    1f0a:	90 93 d0 04 	sts	0x04D0, r25
				ackPayload[12] = proximityResult[6]>>8;
    1f0e:	80 93 d1 04 	sts	0x04D1, r24
				ackPayload[13] = proximityResult[7]&0xFF;
    1f12:	90 91 67 02 	lds	r25, 0x0267
    1f16:	80 91 68 02 	lds	r24, 0x0268
    1f1a:	90 93 d2 04 	sts	0x04D2, r25
				ackPayload[14] = proximityResult[7]>>8;
    1f1e:	80 93 d3 04 	sts	0x04D3, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    1f22:	30 91 03 01 	lds	r19, 0x0103
    1f26:	80 91 03 01 	lds	r24, 0x0103
    1f2a:	20 91 03 01 	lds	r18, 0x0103
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	80 72       	andi	r24, 0x20	; 32
    1f32:	90 70       	andi	r25, 0x00	; 0
    1f34:	95 95       	asr	r25
    1f36:	87 95       	ror	r24
    1f38:	95 95       	asr	r25
    1f3a:	87 95       	ror	r24
    1f3c:	95 95       	asr	r25
    1f3e:	87 95       	ror	r24
    1f40:	95 95       	asr	r25
    1f42:	87 95       	ror	r24
    1f44:	95 95       	asr	r25
    1f46:	87 95       	ror	r24
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	22 1f       	adc	r18, r18
    1f4e:	22 27       	eor	r18, r18
    1f50:	22 1f       	adc	r18, r18
    1f52:	22 0f       	add	r18, r18
    1f54:	22 0f       	add	r18, r18
    1f56:	28 2b       	or	r18, r24
    1f58:	83 2f       	mov	r24, r19
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	80 71       	andi	r24, 0x10	; 16
    1f5e:	90 70       	andi	r25, 0x00	; 0
    1f60:	95 95       	asr	r25
    1f62:	87 95       	ror	r24
    1f64:	95 95       	asr	r25
    1f66:	87 95       	ror	r24
    1f68:	95 95       	asr	r25
    1f6a:	87 95       	ror	r24
    1f6c:	95 95       	asr	r25
    1f6e:	87 95       	ror	r24
    1f70:	28 2b       	or	r18, r24
    1f72:	20 93 d4 04 	sts	0x04D4, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    1f76:	84 e0       	ldi	r24, 0x04	; 4
    1f78:	80 93 0b 02 	sts	0x020B, r24
				break;
    1f7c:	cc cd       	rjmp	.-1128   	; 0x1b16 <handleRFCommands+0x2c0>

		#endif
		
		if(calibrateOdomFlag==0) {
			if((rfData[7]&0b00000001)==0b00000001) {
				calibrateSensors();
    1f7e:	0e 94 a9 37 	call	0x6f52	; 0x6f52 <calibrateSensors>
				proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    1f82:	8f ef       	ldi	r24, 0xFF	; 255
    1f84:	93 e0       	ldi	r25, 0x03	; 3
    1f86:	90 93 6a 02 	sts	0x026A, r25
    1f8a:	80 93 69 02 	sts	0x0269, r24
				proximityResult[11] = 1023;	// and in that case a false black line will be detected
    1f8e:	90 93 70 02 	sts	0x0270, r25
    1f92:	80 93 6f 02 	sts	0x026F, r24
				calibState = 0;
    1f96:	10 92 80 05 	sts	0x0580, r1
				calibVelIndex = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	80 93 c2 04 	sts	0x04C2, r24
				calibrateOdomFlag = 1;
    1fa0:	80 93 bf 04 	sts	0x04BF, r24
    1fa4:	69 cd       	rjmp	.-1326   	; 0x1a78 <handleRFCommands+0x222>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1fa6:	25 2f       	mov	r18, r21
    1fa8:	98 cc       	rjmp	.-1744   	; 0x18da <handleRFCommands+0x84>
    1faa:	80 91 71 05 	lds	r24, 0x0571
    1fae:	88 23       	and	r24, r24
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <handleRFCommands+0x75e>
    1fb2:	0f ce       	rjmp	.-994    	; 0x1bd2 <handleRFCommands+0x37c>
    1fb4:	80 91 72 05 	lds	r24, 0x0572
    1fb8:	88 23       	and	r24, r24
    1fba:	11 f0       	breq	.+4      	; 0x1fc0 <handleRFCommands+0x76a>
    1fbc:	25 2f       	mov	r18, r21
    1fbe:	8d cc       	rjmp	.-1766   	; 0x18da <handleRFCommands+0x84>

			sleep(60);
    1fc0:	8c e3       	ldi	r24, 0x3C	; 60
    1fc2:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <sleep>
    1fc6:	40 91 6d 05 	lds	r20, 0x056D
    1fca:	24 2f       	mov	r18, r20
    1fcc:	81 cc       	rjmp	.-1790   	; 0x18d0 <handleRFCommands+0x7a>

00001fce <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29

	PCICR = 0;
    1fd2:	c8 e6       	ldi	r28, 0x68	; 104
    1fd4:	d0 e0       	ldi	r29, 0x00	; 0
    1fd6:	18 82       	st	Y, r1
	PCMSK1 = 0;
    1fd8:	ac e6       	ldi	r26, 0x6C	; 108
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	1c 92       	st	X, r1
	TCCR2A = 0;
    1fde:	e0 eb       	ldi	r30, 0xB0	; 176
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	10 82       	st	Z, r1
	TCCR2B = 0;
    1fe4:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    1fe8:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    1fec:	88 81       	ld	r24, Y
    1fee:	82 60       	ori	r24, 0x02	; 2
    1ff0:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    1ff2:	8c 91       	ld	r24, X
    1ff4:	80 68       	ori	r24, 0x80	; 128
    1ff6:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    1ff8:	80 81       	ld	r24, Z
    1ffa:	82 60       	ori	r24, 0x02	; 2
    1ffc:	80 83       	st	Z, r24

}
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	08 95       	ret

00002004 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    2004:	1f 92       	push	r1
    2006:	0f 92       	push	r0
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	0f 92       	push	r0
    200c:	11 24       	eor	r1, r1
    200e:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    2010:	80 91 12 02 	lds	r24, 0x0212
    2014:	88 23       	and	r24, r24
    2016:	21 f1       	breq	.+72     	; 0x2060 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    2018:	80 91 03 01 	lds	r24, 0x0103
    201c:	86 fd       	sbrc	r24, 6
    201e:	20 c0       	rjmp	.+64     	; 0x2060 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    2020:	80 91 68 00 	lds	r24, 0x0068
    2024:	8d 7f       	andi	r24, 0xFD	; 253
    2026:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    202a:	80 91 6c 00 	lds	r24, 0x006C
    202e:	8f 77       	andi	r24, 0x7F	; 127
    2030:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    203a:	8d e0       	ldi	r24, 0x0D	; 13
    203c:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2040:	80 91 b1 00 	lds	r24, 0x00B1
    2044:	86 60       	ori	r24, 0x06	; 6
    2046:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    204a:	80 91 70 00 	lds	r24, 0x0070
    204e:	82 60       	ori	r24, 0x02	; 2
    2050:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2054:	10 92 20 02 	sts	0x0220, r1
    2058:	10 92 21 02 	sts	0x0221, r1
    205c:	10 92 22 02 	sts	0x0222, r1

		}

	}
	
}
    2060:	8f 91       	pop	r24
    2062:	0f 90       	pop	r0
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	0f 90       	pop	r0
    2068:	1f 90       	pop	r1
    206a:	18 95       	reti

0000206c <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    206c:	1f 92       	push	r1
    206e:	0f 92       	push	r0
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	0f 92       	push	r0
    2074:	11 24       	eor	r1, r1
    2076:	2f 93       	push	r18
    2078:	3f 93       	push	r19
    207a:	4f 93       	push	r20
    207c:	5f 93       	push	r21
    207e:	8f 93       	push	r24
    2080:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    2082:	80 91 b1 00 	lds	r24, 0x00B1
    2086:	88 7f       	andi	r24, 0xF8	; 248
    2088:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    208c:	80 91 13 02 	lds	r24, 0x0213
    2090:	88 23       	and	r24, r24
    2092:	a9 f0       	breq	.+42     	; 0x20be <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    2094:	80 91 03 01 	lds	r24, 0x0103
    2098:	86 ff       	sbrs	r24, 6
    209a:	65 c0       	rjmp	.+202    	; 0x2166 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    209c:	80 91 68 00 	lds	r24, 0x0068
    20a0:	82 60       	ori	r24, 0x02	; 2
    20a2:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    20a6:	80 91 6c 00 	lds	r24, 0x006C
    20aa:	80 68       	ori	r24, 0x80	; 128
    20ac:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    20b0:	8f ef       	ldi	r24, 0xFF	; 255
    20b2:	9f ef       	ldi	r25, 0xFF	; 255
    20b4:	90 93 02 02 	sts	0x0202, r25
    20b8:	80 93 01 02 	sts	0x0201, r24
    20bc:	49 c0       	rjmp	.+146    	; 0x2150 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    20be:	80 91 01 02 	lds	r24, 0x0201
    20c2:	90 91 02 02 	lds	r25, 0x0202
    20c6:	2f ef       	ldi	r18, 0xFF	; 255
    20c8:	8f 3f       	cpi	r24, 0xFF	; 255
    20ca:	92 07       	cpc	r25, r18
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <__vector_13+0x64>
    20ce:	63 c0       	rjmp	.+198    	; 0x2196 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    20d0:	81 30       	cpi	r24, 0x01	; 1
    20d2:	91 05       	cpc	r25, r1
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <__vector_13+0x6c>
    20d6:	98 c0       	rjmp	.+304    	; 0x2208 <__stack+0x9>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    20d8:	9c 01       	movw	r18, r24
    20da:	22 50       	subi	r18, 0x02	; 2
    20dc:	30 40       	sbci	r19, 0x00	; 0
    20de:	25 30       	cpi	r18, 0x05	; 5
    20e0:	31 05       	cpc	r19, r1
    20e2:	08 f4       	brcc	.+2      	; 0x20e6 <__vector_13+0x7a>
    20e4:	67 c0       	rjmp	.+206    	; 0x21b4 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    20e6:	9c 01       	movw	r18, r24
    20e8:	27 50       	subi	r18, 0x07	; 7
    20ea:	30 40       	sbci	r19, 0x00	; 0
    20ec:	26 30       	cpi	r18, 0x06	; 6
    20ee:	31 05       	cpc	r19, r1
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <__vector_13+0x88>
    20f2:	bd c0       	rjmp	.+378    	; 0x226e <__stack+0x6f>

				OCR2A = 54;
    20f4:	26 e3       	ldi	r18, 0x36	; 54
    20f6:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    20fa:	20 91 b1 00 	lds	r18, 0x00B1
    20fe:	26 60       	ori	r18, 0x06	; 6
    2100:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2104:	20 91 70 00 	lds	r18, 0x0070
    2108:	22 60       	ori	r18, 0x02	; 2
    210a:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    210e:	20 91 03 01 	lds	r18, 0x0103
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	20 74       	andi	r18, 0x40	; 64
    2116:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    2118:	00 24       	eor	r0, r0
    211a:	22 0f       	add	r18, r18
    211c:	33 1f       	adc	r19, r19
    211e:	00 1c       	adc	r0, r0
    2120:	22 0f       	add	r18, r18
    2122:	33 1f       	adc	r19, r19
    2124:	00 1c       	adc	r0, r0
    2126:	23 2f       	mov	r18, r19
    2128:	30 2d       	mov	r19, r0
    212a:	4c e0       	ldi	r20, 0x0C	; 12
    212c:	50 e0       	ldi	r21, 0x00	; 0
    212e:	48 1b       	sub	r20, r24
    2130:	59 0b       	sbc	r21, r25
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <__vector_13+0xcc>
    2134:	22 0f       	add	r18, r18
    2136:	33 1f       	adc	r19, r19
    2138:	4a 95       	dec	r20
    213a:	e2 f7       	brpl	.-8      	; 0x2134 <__vector_13+0xc8>
				data_temp += temp;
    213c:	40 91 20 02 	lds	r20, 0x0220
    2140:	42 0f       	add	r20, r18
    2142:	40 93 20 02 	sts	0x0220, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    2146:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    2148:	90 93 02 02 	sts	0x0202, r25
    214c:	80 93 01 02 	sts	0x0201, r24

		}

}
    2150:	9f 91       	pop	r25
    2152:	8f 91       	pop	r24
    2154:	5f 91       	pop	r21
    2156:	4f 91       	pop	r20
    2158:	3f 91       	pop	r19
    215a:	2f 91       	pop	r18
    215c:	0f 90       	pop	r0
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	0f 90       	pop	r0
    2162:	1f 90       	pop	r1
    2164:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    2166:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    216a:	83 e3       	ldi	r24, 0x33	; 51
    216c:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2170:	80 91 b1 00 	lds	r24, 0x00B1
    2174:	86 60       	ori	r24, 0x06	; 6
    2176:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    217a:	80 91 70 00 	lds	r24, 0x0070
    217e:	82 60       	ori	r24, 0x02	; 2
    2180:	80 93 70 00 	sts	0x0070, r24
    2184:	80 91 01 02 	lds	r24, 0x0201
    2188:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    218c:	2f ef       	ldi	r18, 0xFF	; 255
    218e:	8f 3f       	cpi	r24, 0xFF	; 255
    2190:	92 07       	cpc	r25, r18
    2192:	c9 f6       	brne	.-78     	; 0x2146 <__vector_13+0xda>
    2194:	dd cf       	rjmp	.-70     	; 0x2150 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    2196:	20 91 03 01 	lds	r18, 0x0103
    219a:	26 ff       	sbrs	r18, 6
    219c:	52 c0       	rjmp	.+164    	; 0x2242 <__stack+0x43>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    219e:	20 91 68 00 	lds	r18, 0x0068
    21a2:	22 60       	ori	r18, 0x02	; 2
    21a4:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    21a8:	20 91 6c 00 	lds	r18, 0x006C
    21ac:	20 68       	ori	r18, 0x80	; 128
    21ae:	20 93 6c 00 	sts	0x006C, r18
    21b2:	ce cf       	rjmp	.-100    	; 0x2150 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    21b4:	26 e3       	ldi	r18, 0x36	; 54
    21b6:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    21ba:	20 91 b1 00 	lds	r18, 0x00B1
    21be:	26 60       	ori	r18, 0x06	; 6
    21c0:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    21c4:	20 91 70 00 	lds	r18, 0x0070
    21c8:	22 60       	ori	r18, 0x02	; 2
    21ca:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    21ce:	20 91 03 01 	lds	r18, 0x0103
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	20 74       	andi	r18, 0x40	; 64
    21d6:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    21d8:	00 24       	eor	r0, r0
    21da:	22 0f       	add	r18, r18
    21dc:	33 1f       	adc	r19, r19
    21de:	00 1c       	adc	r0, r0
    21e0:	22 0f       	add	r18, r18
    21e2:	33 1f       	adc	r19, r19
    21e4:	00 1c       	adc	r0, r0
    21e6:	23 2f       	mov	r18, r19
    21e8:	30 2d       	mov	r19, r0
    21ea:	46 e0       	ldi	r20, 0x06	; 6
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	48 1b       	sub	r20, r24
    21f0:	59 0b       	sbc	r21, r25
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <__vector_13+0x18c>
    21f4:	22 0f       	add	r18, r18
    21f6:	33 1f       	adc	r19, r19
    21f8:	4a 95       	dec	r20
    21fa:	e2 f7       	brpl	.-8      	; 0x21f4 <__vector_13+0x188>
				address_temp += temp;
    21fc:	40 91 21 02 	lds	r20, 0x0221
    2200:	42 0f       	add	r20, r18
    2202:	40 93 21 02 	sts	0x0221, r20
    2206:	9f cf       	rjmp	.-194    	; 0x2146 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2208:	20 91 03 01 	lds	r18, 0x0103
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	20 74       	andi	r18, 0x40	; 64
    2210:	30 70       	andi	r19, 0x00	; 0
    2212:	02 2e       	mov	r0, r18
    2214:	23 2f       	mov	r18, r19
    2216:	00 0c       	add	r0, r0
    2218:	22 1f       	adc	r18, r18
    221a:	33 0b       	sbc	r19, r19
    221c:	00 0c       	add	r0, r0
    221e:	22 1f       	adc	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	20 93 22 02 	sts	0x0222, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    2226:	26 e3       	ldi	r18, 0x36	; 54
    2228:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    222c:	20 91 b1 00 	lds	r18, 0x00B1
    2230:	26 60       	ori	r18, 0x06	; 6
    2232:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2236:	20 91 70 00 	lds	r18, 0x0070
    223a:	22 60       	ori	r18, 0x02	; 2
    223c:	20 93 70 00 	sts	0x0070, r18
    2240:	82 cf       	rjmp	.-252    	; 0x2146 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    2242:	8c e1       	ldi	r24, 0x1C	; 28
    2244:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2248:	80 91 b1 00 	lds	r24, 0x00B1
    224c:	86 60       	ori	r24, 0x06	; 6
    224e:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    2252:	80 91 70 00 	lds	r24, 0x0070
    2256:	82 60       	ori	r24, 0x02	; 2
    2258:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    225c:	10 92 20 02 	sts	0x0220, r1
    2260:	10 92 21 02 	sts	0x0221, r1
    2264:	10 92 22 02 	sts	0x0222, r1
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	6d cf       	rjmp	.-294    	; 0x2148 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    226e:	8d 30       	cpi	r24, 0x0D	; 13
    2270:	91 05       	cpc	r25, r1
    2272:	09 f0       	breq	.+2      	; 0x2276 <__stack+0x77>
    2274:	68 cf       	rjmp	.-304    	; 0x2146 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    2276:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    227a:	80 91 68 00 	lds	r24, 0x0068
    227e:	82 60       	ori	r24, 0x02	; 2
    2280:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    2284:	80 91 6c 00 	lds	r24, 0x006C
    2288:	80 68       	ori	r24, 0x80	; 128
    228a:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    228e:	8f ef       	ldi	r24, 0xFF	; 255
    2290:	9f ef       	ldi	r25, 0xFF	; 255
    2292:	90 93 02 02 	sts	0x0202, r25
    2296:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    229a:	80 91 22 02 	lds	r24, 0x0222
    229e:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    22a2:	80 91 21 02 	lds	r24, 0x0221
    22a6:	80 93 1e 02 	sts	0x021E, r24
				data_ir = data_temp;
    22aa:	80 91 20 02 	lds	r24, 0x0220
    22ae:	80 93 1f 02 	sts	0x021F, r24
				command_received=1;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	80 93 24 04 	sts	0x0424, r24
    22b8:	4b cf       	rjmp	.-362    	; 0x2150 <__vector_13+0xe4>

000022ba <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    22ba:	80 91 00 02 	lds	r24, 0x0200
    22be:	08 95       	ret

000022c0 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    22c0:	80 91 1e 02 	lds	r24, 0x021E
    22c4:	08 95       	ret

000022c6 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    22c6:	80 91 1f 02 	lds	r24, 0x021F
    22ca:	08 95       	ret

000022cc <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    22cc:	80 91 12 02 	lds	r24, 0x0212
    22d0:	88 23       	and	r24, r24
    22d2:	51 f1       	breq	.+84     	; 0x2328 <handleIRRemoteCommands+0x5c>

		if(command_received) {
    22d4:	80 91 24 04 	lds	r24, 0x0424
    22d8:	88 23       	and	r24, r24
    22da:	31 f1       	breq	.+76     	; 0x2328 <handleIRRemoteCommands+0x5c>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    22dc:	e0 91 1f 02 	lds	r30, 0x021F

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    22e0:	e0 93 23 04 	sts	0x0423, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    22e4:	10 92 24 04 	sts	0x0424, r1

			switch(irCommand) {
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	e5 33       	cpi	r30, 0x35	; 53
    22ec:	f1 05       	cpc	r31, r1
    22ee:	e8 f0       	brcs	.+58     	; 0x232a <handleIRRemoteCommands+0x5e>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    22f0:	20 91 f9 02 	lds	r18, 0x02F9
    22f4:	30 91 fa 02 	lds	r19, 0x02FA
    22f8:	80 91 fb 02 	lds	r24, 0x02FB
    22fc:	90 91 fc 02 	lds	r25, 0x02FC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2300:	37 fd       	sbrc	r19, 7
    2302:	b9 c1       	rjmp	.+882    	; 0x2676 <handleIRRemoteCommands+0x3aa>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    2304:	30 93 12 03 	sts	0x0312, r19
    2308:	20 93 11 03 	sts	0x0311, r18
			}
			if(pwm_left_desired >= 0) {
    230c:	97 fd       	sbrc	r25, 7
    230e:	05 c0       	rjmp	.+10     	; 0x231a <handleIRRemoteCommands+0x4e>
				speedl = pwm_left_desired;
    2310:	90 93 10 03 	sts	0x0310, r25
    2314:	80 93 0f 03 	sts	0x030F, r24
    2318:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired);
    231a:	90 95       	com	r25
    231c:	81 95       	neg	r24
    231e:	9f 4f       	sbci	r25, 0xFF	; 255
    2320:	90 93 10 03 	sts	0x0310, r25
    2324:	80 93 0f 03 	sts	0x030F, r24
    2328:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    232a:	ee 58       	subi	r30, 0x8E	; 142
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	ee 0f       	add	r30, r30
    2330:	ff 1f       	adc	r31, r31
    2332:	05 90       	lpm	r0, Z+
    2334:	f4 91       	lpm	r31, Z+
    2336:	e0 2d       	mov	r30, r0
    2338:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    233a:	80 93 64 04 	sts	0x0464, r24
							cliffAvoidanceEnabled = 0;
    233e:	10 92 65 04 	sts	0x0465, r1
    2342:	20 91 f9 02 	lds	r18, 0x02F9
    2346:	30 91 fa 02 	lds	r19, 0x02FA
    234a:	80 91 fb 02 	lds	r24, 0x02FB
    234e:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    2352:	d6 cf       	rjmp	.-84     	; 0x2300 <handleIRRemoteCommands+0x34>
						case 2:
							obstacleAvoidanceEnabled = 0;
    2354:	10 92 64 04 	sts	0x0464, r1
							cliffAvoidanceEnabled = 1;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	80 93 65 04 	sts	0x0465, r24
    235e:	20 91 f9 02 	lds	r18, 0x02F9
    2362:	30 91 fa 02 	lds	r19, 0x02FA
    2366:	80 91 fb 02 	lds	r24, 0x02FB
    236a:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    236e:	c8 cf       	rjmp	.-112    	; 0x2300 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    2370:	80 91 26 04 	lds	r24, 0x0426
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	01 96       	adiw	r24, 0x01	; 1
    2378:	83 70       	andi	r24, 0x03	; 3
    237a:	90 70       	andi	r25, 0x00	; 0
    237c:	80 93 26 04 	sts	0x0426, r24
					switch(behaviorState) {
    2380:	82 30       	cpi	r24, 0x02	; 2
    2382:	41 f3       	breq	.-48     	; 0x2354 <handleIRRemoteCommands+0x88>
    2384:	83 30       	cpi	r24, 0x03	; 3
    2386:	09 f4       	brne	.+2      	; 0x238a <handleIRRemoteCommands+0xbe>
    2388:	8a c1       	rjmp	.+788    	; 0x269e <handleIRRemoteCommands+0x3d2>
    238a:	81 30       	cpi	r24, 0x01	; 1
    238c:	b1 f2       	breq	.-84     	; 0x233a <handleIRRemoteCommands+0x6e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    238e:	10 92 64 04 	sts	0x0464, r1
							cliffAvoidanceEnabled = 0;
    2392:	10 92 65 04 	sts	0x0465, r1
    2396:	20 91 f9 02 	lds	r18, 0x02F9
    239a:	30 91 fa 02 	lds	r19, 0x02FA
    239e:	80 91 fb 02 	lds	r24, 0x02FB
    23a2:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    23a6:	ac cf       	rjmp	.-168    	; 0x2300 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    23a8:	10 92 64 04 	sts	0x0464, r1
    23ac:	20 91 f9 02 	lds	r18, 0x02F9
    23b0:	30 91 fa 02 	lds	r19, 0x02FA
    23b4:	80 91 fb 02 	lds	r24, 0x02FB
    23b8:	90 91 fc 02 	lds	r25, 0x02FC
					break;
    23bc:	a1 cf       	rjmp	.-190    	; 0x2300 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    23be:	80 91 fb 02 	lds	r24, 0x02FB
    23c2:	90 91 fc 02 	lds	r25, 0x02FC
    23c6:	02 97       	sbiw	r24, 0x02	; 2
    23c8:	90 93 fc 02 	sts	0x02FC, r25
    23cc:	80 93 fb 02 	sts	0x02FB, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    23d0:	2e ef       	ldi	r18, 0xFE	; 254
    23d2:	80 30       	cpi	r24, 0x00	; 0
    23d4:	92 07       	cpc	r25, r18
    23d6:	9c f5       	brge	.+102    	; 0x243e <handleIRRemoteCommands+0x172>
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	9e ef       	ldi	r25, 0xFE	; 254
    23dc:	90 93 fc 02 	sts	0x02FC, r25
    23e0:	80 93 fb 02 	sts	0x02FB, r24
    23e4:	20 91 f9 02 	lds	r18, 0x02F9
    23e8:	30 91 fa 02 	lds	r19, 0x02FA
    23ec:	89 cf       	rjmp	.-238    	; 0x2300 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    23ee:	20 91 f9 02 	lds	r18, 0x02F9
    23f2:	30 91 fa 02 	lds	r19, 0x02FA
    23f6:	80 91 f7 02 	lds	r24, 0x02F7
    23fa:	90 91 f8 02 	lds	r25, 0x02F8
    23fe:	28 17       	cp	r18, r24
    2400:	39 07       	cpc	r19, r25
    2402:	24 f0       	brlt	.+8      	; 0x240c <handleIRRemoteCommands+0x140>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    2404:	20 91 fb 02 	lds	r18, 0x02FB
    2408:	30 91 fc 02 	lds	r19, 0x02FC
					}
					pwm_right_desired -= STEP_MOTORS;
    240c:	22 50       	subi	r18, 0x02	; 2
    240e:	30 40       	sbci	r19, 0x00	; 0
    2410:	30 93 fa 02 	sts	0x02FA, r19
    2414:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired -= STEP_MOTORS;
    2418:	c9 01       	movw	r24, r18
    241a:	30 93 fc 02 	sts	0x02FC, r19
    241e:	20 93 fb 02 	sts	0x02FB, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    2422:	4e ef       	ldi	r20, 0xFE	; 254
    2424:	20 30       	cpi	r18, 0x00	; 0
    2426:	34 07       	cpc	r19, r20
    2428:	34 f4       	brge	.+12     	; 0x2436 <handleIRRemoteCommands+0x16a>
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	5e ef       	ldi	r21, 0xFE	; 254
    242e:	50 93 fa 02 	sts	0x02FA, r21
    2432:	40 93 f9 02 	sts	0x02F9, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    2436:	4e ef       	ldi	r20, 0xFE	; 254
    2438:	20 30       	cpi	r18, 0x00	; 0
    243a:	34 07       	cpc	r19, r20
    243c:	6c f2       	brlt	.-102    	; 0x23d8 <handleIRRemoteCommands+0x10c>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    243e:	20 91 f9 02 	lds	r18, 0x02F9
    2442:	30 91 fa 02 	lds	r19, 0x02FA
    2446:	5c cf       	rjmp	.-328    	; 0x2300 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	80 93 64 04 	sts	0x0464, r24
    244e:	20 91 f9 02 	lds	r18, 0x02F9
    2452:	30 91 fa 02 	lds	r19, 0x02FA
    2456:	80 91 fb 02 	lds	r24, 0x02FB
    245a:	90 91 fc 02 	lds	r25, 0x02FC
					break;
    245e:	50 cf       	rjmp	.-352    	; 0x2300 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    2460:	20 91 f9 02 	lds	r18, 0x02F9
    2464:	30 91 fa 02 	lds	r19, 0x02FA
    2468:	22 50       	subi	r18, 0x02	; 2
    246a:	30 40       	sbci	r19, 0x00	; 0
    246c:	30 93 fa 02 	sts	0x02FA, r19
    2470:	20 93 f9 02 	sts	0x02F9, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2474:	4e ef       	ldi	r20, 0xFE	; 254
    2476:	20 30       	cpi	r18, 0x00	; 0
    2478:	34 07       	cpc	r19, r20
    247a:	0c f0       	brlt	.+2      	; 0x247e <handleIRRemoteCommands+0x1b2>
    247c:	3d cf       	rjmp	.-390    	; 0x22f8 <handleIRRemoteCommands+0x2c>
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	9e ef       	ldi	r25, 0xFE	; 254
    2482:	90 93 fa 02 	sts	0x02FA, r25
    2486:	80 93 f9 02 	sts	0x02F9, r24
    248a:	80 91 fb 02 	lds	r24, 0x02FB
    248e:	90 91 fc 02 	lds	r25, 0x02FC
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	32 e0       	ldi	r19, 0x02	; 2
    2496:	36 cf       	rjmp	.-404    	; 0x2304 <handleIRRemoteCommands+0x38>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    2498:	20 91 f9 02 	lds	r18, 0x02F9
    249c:	30 91 fa 02 	lds	r19, 0x02FA
    24a0:	22 50       	subi	r18, 0x02	; 2
    24a2:	30 40       	sbci	r19, 0x00	; 0
    24a4:	30 93 fa 02 	sts	0x02FA, r19
    24a8:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired += STEP_MOTORS;
    24ac:	80 91 fb 02 	lds	r24, 0x02FB
    24b0:	90 91 fc 02 	lds	r25, 0x02FC
    24b4:	02 96       	adiw	r24, 0x02	; 2
    24b6:	90 93 fc 02 	sts	0x02FC, r25
    24ba:	80 93 fb 02 	sts	0x02FB, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    24be:	4e ef       	ldi	r20, 0xFE	; 254
    24c0:	20 30       	cpi	r18, 0x00	; 0
    24c2:	34 07       	cpc	r19, r20
    24c4:	34 f4       	brge	.+12     	; 0x24d2 <handleIRRemoteCommands+0x206>
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	3e ef       	ldi	r19, 0xFE	; 254
    24ca:	30 93 fa 02 	sts	0x02FA, r19
    24ce:	20 93 f9 02 	sts	0x02F9, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    24d2:	42 e0       	ldi	r20, 0x02	; 2
    24d4:	81 30       	cpi	r24, 0x01	; 1
    24d6:	94 07       	cpc	r25, r20
    24d8:	0c f4       	brge	.+2      	; 0x24dc <handleIRRemoteCommands+0x210>
    24da:	12 cf       	rjmp	.-476    	; 0x2300 <handleIRRemoteCommands+0x34>
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	92 e0       	ldi	r25, 0x02	; 2
    24e0:	90 93 fc 02 	sts	0x02FC, r25
    24e4:	80 93 fb 02 	sts	0x02FB, r24
    24e8:	0b cf       	rjmp	.-490    	; 0x2300 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    24ea:	10 92 fa 02 	sts	0x02FA, r1
    24ee:	10 92 f9 02 	sts	0x02F9, r1
					pwm_left_desired = 0;
    24f2:	10 92 fc 02 	sts	0x02FC, r1
    24f6:	10 92 fb 02 	sts	0x02FB, r1
					if(currentSelector == 8) {
    24fa:	80 91 4b 04 	lds	r24, 0x044B
    24fe:	88 30       	cpi	r24, 0x08	; 8
    2500:	09 f4       	brne	.+2      	; 0x2504 <handleIRRemoteCommands+0x238>
    2502:	db c0       	rjmp	.+438    	; 0x26ba <handleIRRemoteCommands+0x3ee>
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	fb ce       	rjmp	.-522    	; 0x2304 <handleIRRemoteCommands+0x38>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    250e:	20 91 f9 02 	lds	r18, 0x02F9
    2512:	30 91 fa 02 	lds	r19, 0x02FA
    2516:	2e 5f       	subi	r18, 0xFE	; 254
    2518:	3f 4f       	sbci	r19, 0xFF	; 255
    251a:	30 93 fa 02 	sts	0x02FA, r19
    251e:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired -= STEP_MOTORS;
    2522:	80 91 fb 02 	lds	r24, 0x02FB
    2526:	90 91 fc 02 	lds	r25, 0x02FC
    252a:	02 97       	sbiw	r24, 0x02	; 2
    252c:	90 93 fc 02 	sts	0x02FC, r25
    2530:	80 93 fb 02 	sts	0x02FB, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2534:	42 e0       	ldi	r20, 0x02	; 2
    2536:	21 30       	cpi	r18, 0x01	; 1
    2538:	34 07       	cpc	r19, r20
    253a:	34 f0       	brlt	.+12     	; 0x2548 <handleIRRemoteCommands+0x27c>
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	32 e0       	ldi	r19, 0x02	; 2
    2540:	30 93 fa 02 	sts	0x02FA, r19
    2544:	20 93 f9 02 	sts	0x02F9, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2548:	4e ef       	ldi	r20, 0xFE	; 254
    254a:	80 30       	cpi	r24, 0x00	; 0
    254c:	94 07       	cpc	r25, r20
    254e:	0c f0       	brlt	.+2      	; 0x2552 <handleIRRemoteCommands+0x286>
    2550:	d7 ce       	rjmp	.-594    	; 0x2300 <handleIRRemoteCommands+0x34>
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	9e ef       	ldi	r25, 0xFE	; 254
    2556:	90 93 fc 02 	sts	0x02FC, r25
    255a:	80 93 fb 02 	sts	0x02FB, r24
    255e:	d0 ce       	rjmp	.-608    	; 0x2300 <handleIRRemoteCommands+0x34>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    2560:	80 91 fb 02 	lds	r24, 0x02FB
    2564:	90 91 fc 02 	lds	r25, 0x02FC
    2568:	02 96       	adiw	r24, 0x02	; 2
    256a:	90 93 fc 02 	sts	0x02FC, r25
    256e:	80 93 fb 02 	sts	0x02FB, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2572:	22 e0       	ldi	r18, 0x02	; 2
    2574:	81 30       	cpi	r24, 0x01	; 1
    2576:	92 07       	cpc	r25, r18
    2578:	0c f4       	brge	.+2      	; 0x257c <handleIRRemoteCommands+0x2b0>
    257a:	61 cf       	rjmp	.-318    	; 0x243e <handleIRRemoteCommands+0x172>
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	92 e0       	ldi	r25, 0x02	; 2
    2580:	90 93 fc 02 	sts	0x02FC, r25
    2584:	80 93 fb 02 	sts	0x02FB, r24
    2588:	5a cf       	rjmp	.-332    	; 0x243e <handleIRRemoteCommands+0x172>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    258a:	20 91 f9 02 	lds	r18, 0x02F9
    258e:	30 91 fa 02 	lds	r19, 0x02FA
    2592:	80 91 fb 02 	lds	r24, 0x02FB
    2596:	90 91 fc 02 	lds	r25, 0x02FC
    259a:	82 17       	cp	r24, r18
    259c:	93 07       	cpc	r25, r19
    259e:	0c f4       	brge	.+2      	; 0x25a2 <handleIRRemoteCommands+0x2d6>
    25a0:	6e c0       	rjmp	.+220    	; 0x267e <handleIRRemoteCommands+0x3b2>
    25a2:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    25a4:	2e 5f       	subi	r18, 0xFE	; 254
    25a6:	3f 4f       	sbci	r19, 0xFF	; 255
    25a8:	30 93 fa 02 	sts	0x02FA, r19
    25ac:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired += STEP_MOTORS;
    25b0:	02 96       	adiw	r24, 0x02	; 2
    25b2:	90 93 fc 02 	sts	0x02FC, r25
    25b6:	80 93 fb 02 	sts	0x02FB, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    25ba:	42 e0       	ldi	r20, 0x02	; 2
    25bc:	21 30       	cpi	r18, 0x01	; 1
    25be:	34 07       	cpc	r19, r20
    25c0:	34 f0       	brlt	.+12     	; 0x25ce <handleIRRemoteCommands+0x302>
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	32 e0       	ldi	r19, 0x02	; 2
    25c6:	30 93 fa 02 	sts	0x02FA, r19
    25ca:	20 93 f9 02 	sts	0x02F9, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    25ce:	22 e0       	ldi	r18, 0x02	; 2
    25d0:	81 30       	cpi	r24, 0x01	; 1
    25d2:	92 07       	cpc	r25, r18
    25d4:	0c f4       	brge	.+2      	; 0x25d8 <handleIRRemoteCommands+0x30c>
    25d6:	33 cf       	rjmp	.-410    	; 0x243e <handleIRRemoteCommands+0x172>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	92 e0       	ldi	r25, 0x02	; 2
    25dc:	90 93 fc 02 	sts	0x02FC, r25
    25e0:	80 93 fb 02 	sts	0x02FB, r24
    25e4:	20 91 f9 02 	lds	r18, 0x02F9
    25e8:	30 91 fa 02 	lds	r19, 0x02FA
    25ec:	89 ce       	rjmp	.-750    	; 0x2300 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    25ee:	20 91 f9 02 	lds	r18, 0x02F9
    25f2:	30 91 fa 02 	lds	r19, 0x02FA
    25f6:	2e 5f       	subi	r18, 0xFE	; 254
    25f8:	3f 4f       	sbci	r19, 0xFF	; 255
    25fa:	30 93 fa 02 	sts	0x02FA, r19
    25fe:	20 93 f9 02 	sts	0x02F9, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2602:	42 e0       	ldi	r20, 0x02	; 2
    2604:	21 30       	cpi	r18, 0x01	; 1
    2606:	34 07       	cpc	r19, r20
    2608:	0c f4       	brge	.+2      	; 0x260c <handleIRRemoteCommands+0x340>
    260a:	76 ce       	rjmp	.-788    	; 0x22f8 <handleIRRemoteCommands+0x2c>
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	92 e0       	ldi	r25, 0x02	; 2
    2610:	90 93 fa 02 	sts	0x02FA, r25
    2614:	80 93 f9 02 	sts	0x02F9, r24
    2618:	80 91 fb 02 	lds	r24, 0x02FB
    261c:	90 91 fc 02 	lds	r25, 0x02FC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	32 e0       	ldi	r19, 0x02	; 2
    2624:	6f ce       	rjmp	.-802    	; 0x2304 <handleIRRemoteCommands+0x38>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    2626:	80 91 25 04 	lds	r24, 0x0425
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	65 e0       	ldi	r22, 0x05	; 5
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
    2636:	80 93 25 04 	sts	0x0425, r24

					if(colorState==0) {			// turn on blue and off all IRs
    263a:	88 23       	and	r24, r24
    263c:	11 f5       	brne	.+68     	; 0x2682 <handleIRRemoteCommands+0x3b6>
						LED_IR1_HIGH;
    263e:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    2640:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    2642:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    2646:	8f ef       	ldi	r24, 0xFF	; 255
    2648:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    264c:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    2650:	0e 94 b1 34 	call	0x6962	; 0x6962 <updateRedLed>
					updateGreenLed(pwm_green);
    2654:	80 91 0d 02 	lds	r24, 0x020D
    2658:	0e 94 c5 34 	call	0x698a	; 0x698a <updateGreenLed>
					updateBlueLed(pwm_blue);
    265c:	80 91 0e 02 	lds	r24, 0x020E
    2660:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <updateBlueLed>
    2664:	20 91 f9 02 	lds	r18, 0x02F9
    2668:	30 91 fa 02 	lds	r19, 0x02FA
    266c:	80 91 fb 02 	lds	r24, 0x02FB
    2670:	90 91 fc 02 	lds	r25, 0x02FC

	               	break;
    2674:	45 ce       	rjmp	.-886    	; 0x2300 <handleIRRemoteCommands+0x34>

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    2676:	30 95       	com	r19
    2678:	21 95       	neg	r18
    267a:	3f 4f       	sbci	r19, 0xFF	; 255
    267c:	43 ce       	rjmp	.-890    	; 0x2304 <handleIRRemoteCommands+0x38>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    267e:	c9 01       	movw	r24, r18
    2680:	91 cf       	rjmp	.-222    	; 0x25a4 <handleIRRemoteCommands+0x2d8>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    2682:	81 30       	cpi	r24, 0x01	; 1
    2684:	91 f0       	breq	.+36     	; 0x26aa <handleIRRemoteCommands+0x3de>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    2686:	82 30       	cpi	r24, 0x02	; 2
    2688:	a1 f1       	breq	.+104    	; 0x26f2 <handleIRRemoteCommands+0x426>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    268a:	83 30       	cpi	r24, 0x03	; 3
    268c:	e9 f1       	breq	.+122    	; 0x2708 <handleIRRemoteCommands+0x43c>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    268e:	8f ef       	ldi	r24, 0xFF	; 255
    2690:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2694:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2698:	80 93 0c 02 	sts	0x020C, r24
    269c:	d9 cf       	rjmp	.-78     	; 0x2650 <handleIRRemoteCommands+0x384>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	80 93 64 04 	sts	0x0464, r24
							cliffAvoidanceEnabled = 1;
    26a4:	80 93 65 04 	sts	0x0465, r24
    26a8:	23 ce       	rjmp	.-954    	; 0x22f0 <handleIRRemoteCommands+0x24>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    26aa:	8f ef       	ldi	r24, 0xFF	; 255
    26ac:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    26b0:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    26b4:	80 93 0c 02 	sts	0x020C, r24
    26b8:	cb cf       	rjmp	.-106    	; 0x2650 <handleIRRemoteCommands+0x384>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    26ba:	0e 94 a9 37 	call	0x6f52	; 0x6f52 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    26be:	8f ef       	ldi	r24, 0xFF	; 255
    26c0:	93 e0       	ldi	r25, 0x03	; 3
    26c2:	90 93 6a 02 	sts	0x026A, r25
    26c6:	80 93 69 02 	sts	0x0269, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    26ca:	90 93 70 02 	sts	0x0270, r25
    26ce:	80 93 6f 02 	sts	0x026F, r24
						calibState = 0;
    26d2:	10 92 80 05 	sts	0x0580, r1
						calibVelIndex = 1;
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	80 93 c2 04 	sts	0x04C2, r24
						calibrateOdomFlag = 1;
    26dc:	80 93 bf 04 	sts	0x04BF, r24
    26e0:	20 91 f9 02 	lds	r18, 0x02F9
    26e4:	30 91 fa 02 	lds	r19, 0x02FA
    26e8:	80 91 fb 02 	lds	r24, 0x02FB
    26ec:	90 91 fc 02 	lds	r25, 0x02FC
    26f0:	07 ce       	rjmp	.-1010   	; 0x2300 <handleIRRemoteCommands+0x34>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    26f2:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    26f4:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    26f6:	8f ef       	ldi	r24, 0xFF	; 255
    26f8:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    26fc:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    2700:	10 92 0c 02 	sts	0x020C, r1
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	a4 cf       	rjmp	.-184    	; 0x2650 <handleIRRemoteCommands+0x384>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    2708:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    270c:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    2710:	10 92 0c 02 	sts	0x020C, r1
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	9c cf       	rjmp	.-200    	; 0x2650 <handleIRRemoteCommands+0x384>

00002718 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    2718:	08 95       	ret

0000271a <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    271a:	0f 93       	push	r16
    271c:	1f 93       	push	r17
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    2724:	80 81       	ld	r24, Z
    2726:	91 81       	ldd	r25, Z+1	; 0x01
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	09 f4       	brne	.+2      	; 0x272e <start_vertical_speed_control_left+0x14>
    272c:	ce c0       	rjmp	.+412    	; 0x28ca <start_vertical_speed_control_left+0x1b0>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    272e:	20 91 3a 04 	lds	r18, 0x043A
    2732:	30 91 3b 04 	lds	r19, 0x043B
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	2e 30       	cpi	r18, 0x0E	; 14
    273a:	34 07       	cpc	r19, r20
    273c:	0c f4       	brge	.+2      	; 0x2740 <start_vertical_speed_control_left+0x26>
    273e:	9e c0       	rjmp	.+316    	; 0x287c <start_vertical_speed_control_left+0x162>
		if(*pwm_left > 0) {
    2740:	18 16       	cp	r1, r24
    2742:	19 06       	cpc	r1, r25
    2744:	0c f0       	brlt	.+2      	; 0x2748 <start_vertical_speed_control_left+0x2e>
    2746:	2c c1       	rjmp	.+600    	; 0x29a0 <start_vertical_speed_control_left+0x286>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    2748:	88 e6       	ldi	r24, 0x68	; 104
    274a:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    274c:	82 1b       	sub	r24, r18
    274e:	93 0b       	sbc	r25, r19
    2750:	95 95       	asr	r25
    2752:	87 95       	ror	r24
    2754:	95 95       	asr	r25
    2756:	87 95       	ror	r24
    2758:	29 e1       	ldi	r18, 0x19	; 25
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	28 1b       	sub	r18, r24
    275e:	39 0b       	sbc	r19, r25
    2760:	30 93 04 02 	sts	0x0204, r19
    2764:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2768:	40 91 c0 04 	lds	r20, 0x04C0
    276c:	50 91 c1 04 	lds	r21, 0x04C1
    2770:	50 93 6c 05 	sts	0x056C, r21
    2774:	40 93 6b 05 	sts	0x056B, r20
	if(*pwm_left >= 0) {
    2778:	20 81       	ld	r18, Z
    277a:	31 81       	ldd	r19, Z+1	; 0x01
    277c:	37 fd       	sbrc	r19, 7
    277e:	f6 c0       	rjmp	.+492    	; 0x296c <start_vertical_speed_control_left+0x252>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2780:	80 91 f1 02 	lds	r24, 0x02F1
    2784:	90 91 f2 02 	lds	r25, 0x02F2
    2788:	b9 01       	movw	r22, r18
    278a:	68 1b       	sub	r22, r24
    278c:	79 0b       	sbc	r23, r25
    278e:	cb 01       	movw	r24, r22
    2790:	70 93 c1 04 	sts	0x04C1, r23
    2794:	60 93 c0 04 	sts	0x04C0, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    2798:	20 91 07 03 	lds	r18, 0x0307
    279c:	30 91 08 03 	lds	r19, 0x0308
    27a0:	28 0f       	add	r18, r24
    27a2:	39 1f       	adc	r19, r25
    27a4:	30 93 08 03 	sts	0x0308, r19
    27a8:	20 93 07 03 	sts	0x0307, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    27ac:	76 e0       	ldi	r23, 0x06	; 6
    27ae:	21 34       	cpi	r18, 0x41	; 65
    27b0:	37 07       	cpc	r19, r23
    27b2:	0c f4       	brge	.+2      	; 0x27b6 <start_vertical_speed_control_left+0x9c>
    27b4:	a9 c0       	rjmp	.+338    	; 0x2908 <start_vertical_speed_control_left+0x1ee>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    27b6:	20 e4       	ldi	r18, 0x40	; 64
    27b8:	36 e0       	ldi	r19, 0x06	; 6
    27ba:	30 93 08 03 	sts	0x0308, r19
    27be:	20 93 07 03 	sts	0x0307, r18
    27c2:	60 ec       	ldi	r22, 0xC0	; 192
    27c4:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    27c6:	9c 01       	movw	r18, r24
    27c8:	22 0f       	add	r18, r18
    27ca:	33 1f       	adc	r19, r19
    27cc:	28 0f       	add	r18, r24
    27ce:	39 1f       	adc	r19, r25
    27d0:	22 0f       	add	r18, r18
    27d2:	33 1f       	adc	r19, r19
    27d4:	22 0f       	add	r18, r18
    27d6:	33 1f       	adc	r19, r19
    27d8:	22 0f       	add	r18, r18
    27da:	33 1f       	adc	r19, r19
    27dc:	28 0f       	add	r18, r24
    27de:	39 1f       	adc	r19, r25
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    27e0:	00 81       	ld	r16, Z
    27e2:	11 81       	ldd	r17, Z+1	; 0x01
    27e4:	c0 91 03 02 	lds	r28, 0x0203
    27e8:	d0 91 04 02 	lds	r29, 0x0204
    27ec:	0c 9f       	mul	r16, r28
    27ee:	d0 01       	movw	r26, r0
    27f0:	0d 9f       	mul	r16, r29
    27f2:	b0 0d       	add	r27, r0
    27f4:	1c 9f       	mul	r17, r28
    27f6:	b0 0d       	add	r27, r0
    27f8:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    27fa:	2a 0f       	add	r18, r26
    27fc:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller += (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    27fe:	84 1b       	sub	r24, r20
    2800:	95 0b       	sbc	r25, r21
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	28 0f       	add	r18, r24
    2808:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    280a:	26 0f       	add	r18, r22
    280c:	37 1f       	adc	r19, r23
    280e:	30 93 06 03 	sts	0x0306, r19
    2812:	20 93 05 03 	sts	0x0305, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2816:	37 fd       	sbrc	r19, 7
    2818:	8d c0       	rjmp	.+282    	; 0x2934 <start_vertical_speed_control_left+0x21a>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    281a:	12 16       	cp	r1, r18
    281c:	13 06       	cpc	r1, r19
    281e:	0c f0       	brlt	.+2      	; 0x2822 <start_vertical_speed_control_left+0x108>
    2820:	93 c0       	rjmp	.+294    	; 0x2948 <start_vertical_speed_control_left+0x22e>
    2822:	80 81       	ld	r24, Z
    2824:	91 81       	ldd	r25, Z+1	; 0x01
    2826:	97 fd       	sbrc	r25, 7
    2828:	ac c0       	rjmp	.+344    	; 0x2982 <start_vertical_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    282a:	7d e5       	ldi	r23, 0x5D	; 93
    282c:	21 3c       	cpi	r18, 0xC1	; 193
    282e:	37 07       	cpc	r19, r23
    2830:	0c f4       	brge	.+2      	; 0x2834 <start_vertical_speed_control_left+0x11a>
    2832:	8a c0       	rjmp	.+276    	; 0x2948 <start_vertical_speed_control_left+0x22e>
    2834:	80 ec       	ldi	r24, 0xC0	; 192
    2836:	9d e5       	ldi	r25, 0x5D	; 93
    2838:	90 93 06 03 	sts	0x0306, r25
    283c:	80 93 05 03 	sts	0x0305, r24
    2840:	2c ed       	ldi	r18, 0xDC	; 220
    2842:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2844:	31 83       	std	Z+1, r19	; 0x01
    2846:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    2848:	80 91 eb 02 	lds	r24, 0x02EB
    284c:	90 91 ec 02 	lds	r25, 0x02EC
    2850:	18 16       	cp	r1, r24
    2852:	19 06       	cpc	r1, r25
    2854:	0c f0       	brlt	.+2      	; 0x2858 <start_vertical_speed_control_left+0x13e>
    2856:	85 c0       	rjmp	.+266    	; 0x2962 <start_vertical_speed_control_left+0x248>
		*pwm_left += 1;
    2858:	2f 5f       	subi	r18, 0xFF	; 255
    285a:	3f 4f       	sbci	r19, 0xFF	; 255
    285c:	31 83       	std	Z+1, r19	; 0x01
    285e:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2860:	42 e0       	ldi	r20, 0x02	; 2
    2862:	21 30       	cpi	r18, 0x01	; 1
    2864:	34 07       	cpc	r19, r20
    2866:	0c f4       	brge	.+2      	; 0x286a <start_vertical_speed_control_left+0x150>
    2868:	41 c0       	rjmp	.+130    	; 0x28ec <start_vertical_speed_control_left+0x1d2>
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	92 e0       	ldi	r25, 0x02	; 2
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    287c:	24 3b       	cpi	r18, 0xB4	; 180
    287e:	31 05       	cpc	r19, r1
    2880:	94 f4       	brge	.+36     	; 0x28a6 <start_vertical_speed_control_left+0x18c>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2882:	2a 35       	cpi	r18, 0x5A	; 90
    2884:	31 05       	cpc	r19, r1
    2886:	7c f4       	brge	.+30     	; 0x28a6 <start_vertical_speed_control_left+0x18c>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    2888:	18 16       	cp	r1, r24
    288a:	19 06       	cpc	r1, r25
    288c:	0c f0       	brlt	.+2      	; 0x2890 <start_vertical_speed_control_left+0x176>
    288e:	96 c0       	rjmp	.+300    	; 0x29bc <start_vertical_speed_control_left+0x2a2>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2890:	35 95       	asr	r19
    2892:	27 95       	ror	r18
    2894:	35 95       	asr	r19
    2896:	27 95       	ror	r18
    2898:	27 5e       	subi	r18, 0xE7	; 231
    289a:	3f 4f       	sbci	r19, 0xFF	; 255
    289c:	30 93 04 02 	sts	0x0204, r19
    28a0:	20 93 03 02 	sts	0x0203, r18
    28a4:	61 cf       	rjmp	.-318    	; 0x2768 <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    28a6:	18 16       	cp	r1, r24
    28a8:	19 06       	cpc	r1, r25
    28aa:	0c f0       	brlt	.+2      	; 0x28ae <start_vertical_speed_control_left+0x194>
    28ac:	40 c0       	rjmp	.+128    	; 0x292e <start_vertical_speed_control_left+0x214>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    28ae:	84 eb       	ldi	r24, 0xB4	; 180
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	82 1b       	sub	r24, r18
    28b4:	93 0b       	sbc	r25, r19
    28b6:	95 95       	asr	r25
    28b8:	87 95       	ror	r24
    28ba:	95 95       	asr	r25
    28bc:	87 95       	ror	r24
    28be:	49 96       	adiw	r24, 0x19	; 25
    28c0:	90 93 04 02 	sts	0x0204, r25
    28c4:	80 93 03 02 	sts	0x0203, r24
    28c8:	4f cf       	rjmp	.-354    	; 0x2768 <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    28ca:	10 92 08 03 	sts	0x0308, r1
    28ce:	10 92 07 03 	sts	0x0307, r1
		delta_left_speed_current = 0;
    28d2:	10 92 c1 04 	sts	0x04C1, r1
    28d6:	10 92 c0 04 	sts	0x04C0, r1
		delta_left_speed_prev = 0;
    28da:	10 92 6c 05 	sts	0x056C, r1
    28de:	10 92 6b 05 	sts	0x056B, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	08 95       	ret
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    28ec:	6e ef       	ldi	r22, 0xFE	; 254
    28ee:	20 30       	cpi	r18, 0x00	; 0
    28f0:	36 07       	cpc	r19, r22
    28f2:	0c f0       	brlt	.+2      	; 0x28f6 <start_vertical_speed_control_left+0x1dc>
    28f4:	be cf       	rjmp	.-132    	; 0x2872 <start_vertical_speed_control_left+0x158>
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	9e ef       	ldi	r25, 0xFE	; 254
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	80 83       	st	Z, r24


}
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2908:	69 ef       	ldi	r22, 0xF9	; 249
    290a:	20 3c       	cpi	r18, 0xC0	; 192
    290c:	36 07       	cpc	r19, r22
    290e:	4c f4       	brge	.+18     	; 0x2922 <start_vertical_speed_control_left+0x208>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    2910:	20 ec       	ldi	r18, 0xC0	; 192
    2912:	39 ef       	ldi	r19, 0xF9	; 249
    2914:	30 93 08 03 	sts	0x0308, r19
    2918:	20 93 07 03 	sts	0x0307, r18
    291c:	60 e4       	ldi	r22, 0x40	; 64
    291e:	7d ee       	ldi	r23, 0xED	; 237
    2920:	52 cf       	rjmp	.-348    	; 0x27c6 <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2922:	b9 01       	movw	r22, r18
    2924:	66 0f       	add	r22, r22
    2926:	77 1f       	adc	r23, r23
    2928:	62 0f       	add	r22, r18
    292a:	73 1f       	adc	r23, r19
    292c:	4c cf       	rjmp	.-360    	; 0x27c6 <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    292e:	84 eb       	ldi	r24, 0xB4	; 180
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	0c cf       	rjmp	.-488    	; 0x274c <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2934:	80 81       	ld	r24, Z
    2936:	91 81       	ldd	r25, Z+1	; 0x01
    2938:	97 fd       	sbrc	r25, 7
    293a:	06 c0       	rjmp	.+12     	; 0x2948 <start_vertical_speed_control_left+0x22e>
		pwm_left_speed_controller = 0;
    293c:	10 92 06 03 	sts	0x0306, r1
    2940:	10 92 05 03 	sts	0x0305, r1
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2948:	82 ea       	ldi	r24, 0xA2	; 162
    294a:	20 34       	cpi	r18, 0x40	; 64
    294c:	38 07       	cpc	r19, r24
    294e:	fc f4       	brge	.+62     	; 0x298e <start_vertical_speed_control_left+0x274>
    2950:	80 e4       	ldi	r24, 0x40	; 64
    2952:	92 ea       	ldi	r25, 0xA2	; 162
    2954:	90 93 06 03 	sts	0x0306, r25
    2958:	80 93 05 03 	sts	0x0305, r24
    295c:	24 e2       	ldi	r18, 0x24	; 36
    295e:	3a ef       	ldi	r19, 0xFA	; 250
    2960:	71 cf       	rjmp	.-286    	; 0x2844 <start_vertical_speed_control_left+0x12a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    2962:	21 50       	subi	r18, 0x01	; 1
    2964:	30 40       	sbci	r19, 0x00	; 0
    2966:	31 83       	std	Z+1, r19	; 0x01
    2968:	20 83       	st	Z, r18
    296a:	7a cf       	rjmp	.-268    	; 0x2860 <start_vertical_speed_control_left+0x146>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    296c:	80 91 f1 02 	lds	r24, 0x02F1
    2970:	90 91 f2 02 	lds	r25, 0x02F2
    2974:	82 0f       	add	r24, r18
    2976:	93 1f       	adc	r25, r19
    2978:	90 93 c1 04 	sts	0x04C1, r25
    297c:	80 93 c0 04 	sts	0x04C0, r24
    2980:	0b cf       	rjmp	.-490    	; 0x2798 <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2982:	10 92 06 03 	sts	0x0306, r1
    2986:	10 92 05 03 	sts	0x0305, r1
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    298e:	35 95       	asr	r19
    2990:	27 95       	ror	r18
    2992:	35 95       	asr	r19
    2994:	27 95       	ror	r18
    2996:	35 95       	asr	r19
    2998:	27 95       	ror	r18
    299a:	35 95       	asr	r19
    299c:	27 95       	ror	r18
    299e:	52 cf       	rjmp	.-348    	; 0x2844 <start_vertical_speed_control_left+0x12a>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    29a0:	88 e6       	ldi	r24, 0x68	; 104
    29a2:	91 e0       	ldi	r25, 0x01	; 1
    29a4:	82 1b       	sub	r24, r18
    29a6:	93 0b       	sbc	r25, r19
    29a8:	95 95       	asr	r25
    29aa:	87 95       	ror	r24
    29ac:	95 95       	asr	r25
    29ae:	87 95       	ror	r24
    29b0:	49 96       	adiw	r24, 0x19	; 25
    29b2:	90 93 04 02 	sts	0x0204, r25
    29b6:	80 93 03 02 	sts	0x0203, r24
    29ba:	d6 ce       	rjmp	.-596    	; 0x2768 <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    29bc:	35 95       	asr	r19
    29be:	27 95       	ror	r18
    29c0:	35 95       	asr	r19
    29c2:	27 95       	ror	r18
    29c4:	89 e1       	ldi	r24, 0x19	; 25
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	82 1b       	sub	r24, r18
    29ca:	93 0b       	sbc	r25, r19
    29cc:	90 93 04 02 	sts	0x0204, r25
    29d0:	80 93 03 02 	sts	0x0203, r24
    29d4:	c9 ce       	rjmp	.-622    	; 0x2768 <start_vertical_speed_control_left+0x4e>

000029d6 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    29d6:	cf 92       	push	r12
    29d8:	df 92       	push	r13
    29da:	ef 92       	push	r14
    29dc:	ff 92       	push	r15
    29de:	0f 93       	push	r16
    29e0:	1f 93       	push	r17
    29e2:	cf 93       	push	r28
    29e4:	df 93       	push	r29
    29e6:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    29e8:	80 81       	ld	r24, Z
    29ea:	91 81       	ldd	r25, Z+1	; 0x01
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	09 f4       	brne	.+2      	; 0x29f2 <start_vertical_speed_control_right+0x1c>
    29f0:	f7 c0       	rjmp	.+494    	; 0x2be0 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    29f2:	20 91 3a 04 	lds	r18, 0x043A
    29f6:	30 91 3b 04 	lds	r19, 0x043B
    29fa:	41 e0       	ldi	r20, 0x01	; 1
    29fc:	2e 30       	cpi	r18, 0x0E	; 14
    29fe:	34 07       	cpc	r19, r20
    2a00:	0c f4       	brge	.+2      	; 0x2a04 <start_vertical_speed_control_right+0x2e>
    2a02:	c7 c0       	rjmp	.+398    	; 0x2b92 <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    2a04:	18 16       	cp	r1, r24
    2a06:	19 06       	cpc	r1, r25
    2a08:	0c f0       	brlt	.+2      	; 0x2a0c <start_vertical_speed_control_right+0x36>
    2a0a:	69 c1       	rjmp	.+722    	; 0x2cde <start_vertical_speed_control_right+0x308>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    2a0c:	88 e6       	ldi	r24, 0x68	; 104
    2a0e:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2a10:	82 1b       	sub	r24, r18
    2a12:	93 0b       	sbc	r25, r19
    2a14:	95 95       	asr	r25
    2a16:	87 95       	ror	r24
    2a18:	95 95       	asr	r25
    2a1a:	87 95       	ror	r24
    2a1c:	29 e1       	ldi	r18, 0x19	; 25
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	28 1b       	sub	r18, r24
    2a22:	39 0b       	sbc	r19, r25
    2a24:	30 93 06 02 	sts	0x0206, r19
    2a28:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2a2c:	c0 91 7a 05 	lds	r28, 0x057A
    2a30:	d0 91 7b 05 	lds	r29, 0x057B
    2a34:	d0 93 c4 04 	sts	0x04C4, r29
    2a38:	c0 93 c3 04 	sts	0x04C3, r28
	if(*pwm_right >= 0) {
    2a3c:	80 81       	ld	r24, Z
    2a3e:	91 81       	ldd	r25, Z+1	; 0x01
    2a40:	97 fd       	sbrc	r25, 7
    2a42:	2e c1       	rjmp	.+604    	; 0x2ca0 <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2a44:	20 91 f3 02 	lds	r18, 0x02F3
    2a48:	30 91 f4 02 	lds	r19, 0x02F4
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	a2 1b       	sub	r26, r18
    2a50:	b3 0b       	sbc	r27, r19
    2a52:	b0 93 7b 05 	sts	0x057B, r27
    2a56:	a0 93 7a 05 	sts	0x057A, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2a5a:	80 91 09 03 	lds	r24, 0x0309
    2a5e:	90 91 0a 03 	lds	r25, 0x030A
    2a62:	8a 0f       	add	r24, r26
    2a64:	9b 1f       	adc	r25, r27
    2a66:	90 93 0a 03 	sts	0x030A, r25
    2a6a:	80 93 09 03 	sts	0x0309, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2a6e:	66 e0       	ldi	r22, 0x06	; 6
    2a70:	81 34       	cpi	r24, 0x41	; 65
    2a72:	96 07       	cpc	r25, r22
    2a74:	0c f4       	brge	.+2      	; 0x2a78 <start_vertical_speed_control_right+0xa2>
    2a76:	cb c0       	rjmp	.+406    	; 0x2c0e <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    2a78:	80 e4       	ldi	r24, 0x40	; 64
    2a7a:	96 e0       	ldi	r25, 0x06	; 6
    2a7c:	90 93 0a 03 	sts	0x030A, r25
    2a80:	80 93 09 03 	sts	0x0309, r24
    2a84:	30 ec       	ldi	r19, 0xC0	; 192
    2a86:	c3 2e       	mov	r12, r19
    2a88:	32 e1       	ldi	r19, 0x12	; 18
    2a8a:	d3 2e       	mov	r13, r19
    2a8c:	e1 2c       	mov	r14, r1
    2a8e:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2a90:	00 81       	ld	r16, Z
    2a92:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    2a94:	9d 01       	movw	r18, r26
    2a96:	22 0f       	add	r18, r18
    2a98:	33 1f       	adc	r19, r19
    2a9a:	2a 0f       	add	r18, r26
    2a9c:	3b 1f       	adc	r19, r27
    2a9e:	22 0f       	add	r18, r18
    2aa0:	33 1f       	adc	r19, r19
    2aa2:	22 0f       	add	r18, r18
    2aa4:	33 1f       	adc	r19, r19
    2aa6:	22 0f       	add	r18, r18
    2aa8:	33 1f       	adc	r19, r19
    2aaa:	2a 0f       	add	r18, r26
    2aac:	3b 1f       	adc	r19, r27
    2aae:	44 27       	eor	r20, r20
    2ab0:	37 fd       	sbrc	r19, 7
    2ab2:	40 95       	com	r20
    2ab4:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2ab6:	80 91 05 02 	lds	r24, 0x0205
    2aba:	90 91 06 02 	lds	r25, 0x0206
    2abe:	08 9f       	mul	r16, r24
    2ac0:	b0 01       	movw	r22, r0
    2ac2:	09 9f       	mul	r16, r25
    2ac4:	70 0d       	add	r23, r0
    2ac6:	18 9f       	mul	r17, r24
    2ac8:	70 0d       	add	r23, r0
    2aca:	11 24       	eor	r1, r1
    2acc:	88 27       	eor	r24, r24
    2ace:	77 fd       	sbrc	r23, 7
    2ad0:	80 95       	com	r24
    2ad2:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    2ad4:	26 0f       	add	r18, r22
    2ad6:	37 1f       	adc	r19, r23
    2ad8:	48 1f       	adc	r20, r24
    2ada:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2adc:	ac 1b       	sub	r26, r28
    2ade:	bd 0b       	sbc	r27, r29
    2ae0:	aa 0f       	add	r26, r26
    2ae2:	bb 1f       	adc	r27, r27
    2ae4:	bd 01       	movw	r22, r26
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	aa 27       	eor	r26, r26
    2aea:	97 fd       	sbrc	r25, 7
    2aec:	a0 95       	com	r26
    2aee:	ba 2f       	mov	r27, r26
    2af0:	28 0f       	add	r18, r24
    2af2:	39 1f       	adc	r19, r25
    2af4:	4a 1f       	adc	r20, r26
    2af6:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    2af8:	2c 0d       	add	r18, r12
    2afa:	3d 1d       	adc	r19, r13
    2afc:	4e 1d       	adc	r20, r14
    2afe:	5f 1d       	adc	r21, r15
    2b00:	20 93 01 03 	sts	0x0301, r18
    2b04:	30 93 02 03 	sts	0x0302, r19
    2b08:	40 93 03 03 	sts	0x0303, r20
    2b0c:	50 93 04 03 	sts	0x0304, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2b10:	57 fd       	sbrc	r21, 7
    2b12:	9d c0       	rjmp	.+314    	; 0x2c4e <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2b14:	12 16       	cp	r1, r18
    2b16:	13 06       	cpc	r1, r19
    2b18:	14 06       	cpc	r1, r20
    2b1a:	15 06       	cpc	r1, r21
    2b1c:	0c f0       	brlt	.+2      	; 0x2b20 <start_vertical_speed_control_right+0x14a>
    2b1e:	a4 c0       	rjmp	.+328    	; 0x2c68 <start_vertical_speed_control_right+0x292>
    2b20:	17 fd       	sbrc	r17, 7
    2b22:	c9 c0       	rjmp	.+402    	; 0x2cb6 <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2b24:	21 3c       	cpi	r18, 0xC1	; 193
    2b26:	7d e5       	ldi	r23, 0x5D	; 93
    2b28:	37 07       	cpc	r19, r23
    2b2a:	70 e0       	ldi	r23, 0x00	; 0
    2b2c:	47 07       	cpc	r20, r23
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	57 07       	cpc	r21, r23
    2b32:	0c f4       	brge	.+2      	; 0x2b36 <start_vertical_speed_control_right+0x160>
    2b34:	99 c0       	rjmp	.+306    	; 0x2c68 <start_vertical_speed_control_right+0x292>
    2b36:	80 ec       	ldi	r24, 0xC0	; 192
    2b38:	9d e5       	ldi	r25, 0x5D	; 93
    2b3a:	a0 e0       	ldi	r26, 0x00	; 0
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	80 93 01 03 	sts	0x0301, r24
    2b42:	90 93 02 03 	sts	0x0302, r25
    2b46:	a0 93 03 03 	sts	0x0303, r26
    2b4a:	b0 93 04 03 	sts	0x0304, r27
    2b4e:	2c ed       	ldi	r18, 0xDC	; 220
    2b50:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2b52:	31 83       	std	Z+1, r19	; 0x01
    2b54:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    2b56:	80 91 e9 02 	lds	r24, 0x02E9
    2b5a:	90 91 ea 02 	lds	r25, 0x02EA
    2b5e:	18 16       	cp	r1, r24
    2b60:	19 06       	cpc	r1, r25
    2b62:	0c f0       	brlt	.+2      	; 0x2b66 <start_vertical_speed_control_right+0x190>
    2b64:	98 c0       	rjmp	.+304    	; 0x2c96 <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    2b66:	2f 5f       	subi	r18, 0xFF	; 255
    2b68:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6a:	31 83       	std	Z+1, r19	; 0x01
    2b6c:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2b6e:	42 e0       	ldi	r20, 0x02	; 2
    2b70:	21 30       	cpi	r18, 0x01	; 1
    2b72:	34 07       	cpc	r19, r20
    2b74:	0c f4       	brge	.+2      	; 0x2b78 <start_vertical_speed_control_right+0x1a2>
    2b76:	41 c0       	rjmp	.+130    	; 0x2bfa <start_vertical_speed_control_right+0x224>
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	92 e0       	ldi	r25, 0x02	; 2
    2b7c:	91 83       	std	Z+1, r25	; 0x01
    2b7e:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2b80:	df 91       	pop	r29
    2b82:	cf 91       	pop	r28
    2b84:	1f 91       	pop	r17
    2b86:	0f 91       	pop	r16
    2b88:	ff 90       	pop	r15
    2b8a:	ef 90       	pop	r14
    2b8c:	df 90       	pop	r13
    2b8e:	cf 90       	pop	r12
    2b90:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2b92:	24 3b       	cpi	r18, 0xB4	; 180
    2b94:	31 05       	cpc	r19, r1
    2b96:	94 f4       	brge	.+36     	; 0x2bbc <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2b98:	2a 35       	cpi	r18, 0x5A	; 90
    2b9a:	31 05       	cpc	r19, r1
    2b9c:	7c f4       	brge	.+30     	; 0x2bbc <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    2b9e:	18 16       	cp	r1, r24
    2ba0:	19 06       	cpc	r1, r25
    2ba2:	0c f0       	brlt	.+2      	; 0x2ba6 <start_vertical_speed_control_right+0x1d0>
    2ba4:	aa c0       	rjmp	.+340    	; 0x2cfa <start_vertical_speed_control_right+0x324>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    2ba6:	35 95       	asr	r19
    2ba8:	27 95       	ror	r18
    2baa:	35 95       	asr	r19
    2bac:	27 95       	ror	r18
    2bae:	27 5e       	subi	r18, 0xE7	; 231
    2bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb2:	30 93 06 02 	sts	0x0206, r19
    2bb6:	20 93 05 02 	sts	0x0205, r18
    2bba:	38 cf       	rjmp	.-400    	; 0x2a2c <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    2bbc:	18 16       	cp	r1, r24
    2bbe:	19 06       	cpc	r1, r25
    2bc0:	0c f0       	brlt	.+2      	; 0x2bc4 <start_vertical_speed_control_right+0x1ee>
    2bc2:	42 c0       	rjmp	.+132    	; 0x2c48 <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    2bc4:	84 eb       	ldi	r24, 0xB4	; 180
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	82 1b       	sub	r24, r18
    2bca:	93 0b       	sbc	r25, r19
    2bcc:	95 95       	asr	r25
    2bce:	87 95       	ror	r24
    2bd0:	95 95       	asr	r25
    2bd2:	87 95       	ror	r24
    2bd4:	49 96       	adiw	r24, 0x19	; 25
    2bd6:	90 93 06 02 	sts	0x0206, r25
    2bda:	80 93 05 02 	sts	0x0205, r24
    2bde:	26 cf       	rjmp	.-436    	; 0x2a2c <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    2be0:	10 92 0a 03 	sts	0x030A, r1
    2be4:	10 92 09 03 	sts	0x0309, r1
		delta_right_speed_current = 0;
    2be8:	10 92 7b 05 	sts	0x057B, r1
    2bec:	10 92 7a 05 	sts	0x057A, r1
		delta_right_speed_prev = 0;
    2bf0:	10 92 c4 04 	sts	0x04C4, r1
    2bf4:	10 92 c3 04 	sts	0x04C3, r1
		return;
    2bf8:	c3 cf       	rjmp	.-122    	; 0x2b80 <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2bfa:	6e ef       	ldi	r22, 0xFE	; 254
    2bfc:	20 30       	cpi	r18, 0x00	; 0
    2bfe:	36 07       	cpc	r19, r22
    2c00:	0c f0       	brlt	.+2      	; 0x2c04 <start_vertical_speed_control_right+0x22e>
    2c02:	be cf       	rjmp	.-132    	; 0x2b80 <start_vertical_speed_control_right+0x1aa>
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	9e ef       	ldi	r25, 0xFE	; 254
    2c08:	91 83       	std	Z+1, r25	; 0x01
    2c0a:	80 83       	st	Z, r24
    2c0c:	b9 cf       	rjmp	.-142    	; 0x2b80 <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2c0e:	79 ef       	ldi	r23, 0xF9	; 249
    2c10:	80 3c       	cpi	r24, 0xC0	; 192
    2c12:	97 07       	cpc	r25, r23
    2c14:	7c f4       	brge	.+30     	; 0x2c34 <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    2c16:	80 ec       	ldi	r24, 0xC0	; 192
    2c18:	99 ef       	ldi	r25, 0xF9	; 249
    2c1a:	90 93 0a 03 	sts	0x030A, r25
    2c1e:	80 93 09 03 	sts	0x0309, r24
    2c22:	90 e4       	ldi	r25, 0x40	; 64
    2c24:	c9 2e       	mov	r12, r25
    2c26:	9d ee       	ldi	r25, 0xED	; 237
    2c28:	d9 2e       	mov	r13, r25
    2c2a:	9f ef       	ldi	r25, 0xFF	; 255
    2c2c:	e9 2e       	mov	r14, r25
    2c2e:	9f ef       	ldi	r25, 0xFF	; 255
    2c30:	f9 2e       	mov	r15, r25
    2c32:	2e cf       	rjmp	.-420    	; 0x2a90 <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2c34:	6c 01       	movw	r12, r24
    2c36:	cc 0c       	add	r12, r12
    2c38:	dd 1c       	adc	r13, r13
    2c3a:	c8 0e       	add	r12, r24
    2c3c:	d9 1e       	adc	r13, r25
    2c3e:	ee 24       	eor	r14, r14
    2c40:	d7 fc       	sbrc	r13, 7
    2c42:	e0 94       	com	r14
    2c44:	fe 2c       	mov	r15, r14
    2c46:	24 cf       	rjmp	.-440    	; 0x2a90 <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2c48:	84 eb       	ldi	r24, 0xB4	; 180
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	e1 ce       	rjmp	.-574    	; 0x2a10 <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2c4e:	17 fd       	sbrc	r17, 7
    2c50:	0b c0       	rjmp	.+22     	; 0x2c68 <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    2c52:	10 92 01 03 	sts	0x0301, r1
    2c56:	10 92 02 03 	sts	0x0302, r1
    2c5a:	10 92 03 03 	sts	0x0303, r1
    2c5e:	10 92 04 03 	sts	0x0304, r1
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2c68:	20 34       	cpi	r18, 0x40	; 64
    2c6a:	82 ea       	ldi	r24, 0xA2	; 162
    2c6c:	38 07       	cpc	r19, r24
    2c6e:	8f ef       	ldi	r24, 0xFF	; 255
    2c70:	48 07       	cpc	r20, r24
    2c72:	8f ef       	ldi	r24, 0xFF	; 255
    2c74:	58 07       	cpc	r21, r24
    2c76:	54 f5       	brge	.+84     	; 0x2ccc <start_vertical_speed_control_right+0x2f6>
    2c78:	80 e4       	ldi	r24, 0x40	; 64
    2c7a:	92 ea       	ldi	r25, 0xA2	; 162
    2c7c:	af ef       	ldi	r26, 0xFF	; 255
    2c7e:	bf ef       	ldi	r27, 0xFF	; 255
    2c80:	80 93 01 03 	sts	0x0301, r24
    2c84:	90 93 02 03 	sts	0x0302, r25
    2c88:	a0 93 03 03 	sts	0x0303, r26
    2c8c:	b0 93 04 03 	sts	0x0304, r27
    2c90:	24 e2       	ldi	r18, 0x24	; 36
    2c92:	3a ef       	ldi	r19, 0xFA	; 250
    2c94:	5e cf       	rjmp	.-324    	; 0x2b52 <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    2c96:	21 50       	subi	r18, 0x01	; 1
    2c98:	30 40       	sbci	r19, 0x00	; 0
    2c9a:	31 83       	std	Z+1, r19	; 0x01
    2c9c:	20 83       	st	Z, r18
    2c9e:	67 cf       	rjmp	.-306    	; 0x2b6e <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2ca0:	a0 91 f3 02 	lds	r26, 0x02F3
    2ca4:	b0 91 f4 02 	lds	r27, 0x02F4
    2ca8:	a8 0f       	add	r26, r24
    2caa:	b9 1f       	adc	r27, r25
    2cac:	b0 93 7b 05 	sts	0x057B, r27
    2cb0:	a0 93 7a 05 	sts	0x057A, r26
    2cb4:	d2 ce       	rjmp	.-604    	; 0x2a5a <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2cb6:	10 92 01 03 	sts	0x0301, r1
    2cba:	10 92 02 03 	sts	0x0302, r1
    2cbe:	10 92 03 03 	sts	0x0303, r1
    2cc2:	10 92 04 03 	sts	0x0304, r1
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2ccc:	35 95       	asr	r19
    2cce:	27 95       	ror	r18
    2cd0:	35 95       	asr	r19
    2cd2:	27 95       	ror	r18
    2cd4:	35 95       	asr	r19
    2cd6:	27 95       	ror	r18
    2cd8:	35 95       	asr	r19
    2cda:	27 95       	ror	r18
    2cdc:	3a cf       	rjmp	.-396    	; 0x2b52 <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    2cde:	88 e6       	ldi	r24, 0x68	; 104
    2ce0:	91 e0       	ldi	r25, 0x01	; 1
    2ce2:	82 1b       	sub	r24, r18
    2ce4:	93 0b       	sbc	r25, r19
    2ce6:	95 95       	asr	r25
    2ce8:	87 95       	ror	r24
    2cea:	95 95       	asr	r25
    2cec:	87 95       	ror	r24
    2cee:	49 96       	adiw	r24, 0x19	; 25
    2cf0:	90 93 06 02 	sts	0x0206, r25
    2cf4:	80 93 05 02 	sts	0x0205, r24
    2cf8:	99 ce       	rjmp	.-718    	; 0x2a2c <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    2cfa:	35 95       	asr	r19
    2cfc:	27 95       	ror	r18
    2cfe:	35 95       	asr	r19
    2d00:	27 95       	ror	r18
    2d02:	89 e1       	ldi	r24, 0x19	; 25
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	82 1b       	sub	r24, r18
    2d08:	93 0b       	sbc	r25, r19
    2d0a:	90 93 06 02 	sts	0x0206, r25
    2d0e:	80 93 05 02 	sts	0x0205, r24
    2d12:	8c ce       	rjmp	.-744    	; 0x2a2c <start_vertical_speed_control_right+0x56>

00002d14 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    2d14:	cf 92       	push	r12
    2d16:	df 92       	push	r13
    2d18:	ef 92       	push	r14
    2d1a:	ff 92       	push	r15
    2d1c:	0f 93       	push	r16
    2d1e:	1f 93       	push	r17
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2d26:	80 81       	ld	r24, Z
    2d28:	91 81       	ldd	r25, Z+1	; 0x01
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	09 f4       	brne	.+2      	; 0x2d30 <start_horizontal_speed_control_right+0x1c>
    2d2e:	b8 c0       	rjmp	.+368    	; 0x2ea0 <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2d30:	c0 91 7a 05 	lds	r28, 0x057A
    2d34:	d0 91 7b 05 	lds	r29, 0x057B
    2d38:	d0 93 c4 04 	sts	0x04C4, r29
    2d3c:	c0 93 c3 04 	sts	0x04C3, r28
	if(*pwm_right >= 0) {
    2d40:	80 81       	ld	r24, Z
    2d42:	91 81       	ldd	r25, Z+1	; 0x01
    2d44:	97 fd       	sbrc	r25, 7
    2d46:	cd c0       	rjmp	.+410    	; 0x2ee2 <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2d48:	20 91 f3 02 	lds	r18, 0x02F3
    2d4c:	30 91 f4 02 	lds	r19, 0x02F4
    2d50:	dc 01       	movw	r26, r24
    2d52:	a2 1b       	sub	r26, r18
    2d54:	b3 0b       	sbc	r27, r19
    2d56:	b0 93 7b 05 	sts	0x057B, r27
    2d5a:	a0 93 7a 05 	sts	0x057A, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2d5e:	c0 90 09 03 	lds	r12, 0x0309
    2d62:	d0 90 0a 03 	lds	r13, 0x030A
    2d66:	ca 0e       	add	r12, r26
    2d68:	db 1e       	adc	r13, r27
    2d6a:	d0 92 0a 03 	sts	0x030A, r13
    2d6e:	c0 92 09 03 	sts	0x0309, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    2d72:	81 e4       	ldi	r24, 0x41	; 65
    2d74:	c8 16       	cp	r12, r24
    2d76:	86 e0       	ldi	r24, 0x06	; 6
    2d78:	d8 06       	cpc	r13, r24
    2d7a:	0c f4       	brge	.+2      	; 0x2d7e <start_horizontal_speed_control_right+0x6a>
    2d7c:	9e c0       	rjmp	.+316    	; 0x2eba <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    2d7e:	80 e4       	ldi	r24, 0x40	; 64
    2d80:	96 e0       	ldi	r25, 0x06	; 6
    2d82:	90 93 0a 03 	sts	0x030A, r25
    2d86:	80 93 09 03 	sts	0x0309, r24
    2d8a:	10 e8       	ldi	r17, 0x80	; 128
    2d8c:	c1 2e       	mov	r12, r17
    2d8e:	1c e0       	ldi	r17, 0x0C	; 12
    2d90:	d1 2e       	mov	r13, r17
    2d92:	e1 2c       	mov	r14, r1
    2d94:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    2d96:	00 81       	ld	r16, Z
    2d98:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    2d9a:	cd 01       	movw	r24, r26
    2d9c:	88 0f       	add	r24, r24
    2d9e:	99 1f       	adc	r25, r25
    2da0:	8a 0f       	add	r24, r26
    2da2:	9b 1f       	adc	r25, r27
    2da4:	9c 01       	movw	r18, r24
    2da6:	22 0f       	add	r18, r18
    2da8:	33 1f       	adc	r19, r19
    2daa:	22 0f       	add	r18, r18
    2dac:	33 1f       	adc	r19, r19
    2dae:	28 0f       	add	r18, r24
    2db0:	39 1f       	adc	r19, r25
    2db2:	44 27       	eor	r20, r20
    2db4:	37 fd       	sbrc	r19, 7
    2db6:	40 95       	com	r20
    2db8:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    2dba:	b8 01       	movw	r22, r16
    2dbc:	66 0f       	add	r22, r22
    2dbe:	77 1f       	adc	r23, r23
    2dc0:	66 0f       	add	r22, r22
    2dc2:	77 1f       	adc	r23, r23
    2dc4:	66 0f       	add	r22, r22
    2dc6:	77 1f       	adc	r23, r23
    2dc8:	88 27       	eor	r24, r24
    2dca:	77 fd       	sbrc	r23, 7
    2dcc:	80 95       	com	r24
    2dce:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    2dd0:	26 0f       	add	r18, r22
    2dd2:	37 1f       	adc	r19, r23
    2dd4:	48 1f       	adc	r20, r24
    2dd6:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    2dd8:	ac 1b       	sub	r26, r28
    2dda:	bd 0b       	sbc	r27, r29
    2ddc:	cd 01       	movw	r24, r26
    2dde:	88 0f       	add	r24, r24
    2de0:	99 1f       	adc	r25, r25
    2de2:	8a 0f       	add	r24, r26
    2de4:	9b 1f       	adc	r25, r27
    2de6:	aa 27       	eor	r26, r26
    2de8:	97 fd       	sbrc	r25, 7
    2dea:	a0 95       	com	r26
    2dec:	ba 2f       	mov	r27, r26
    2dee:	28 0f       	add	r18, r24
    2df0:	39 1f       	adc	r19, r25
    2df2:	4a 1f       	adc	r20, r26
    2df4:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    2df6:	2c 0d       	add	r18, r12
    2df8:	3d 1d       	adc	r19, r13
    2dfa:	4e 1d       	adc	r20, r14
    2dfc:	5f 1d       	adc	r21, r15
    2dfe:	20 93 01 03 	sts	0x0301, r18
    2e02:	30 93 02 03 	sts	0x0302, r19
    2e06:	40 93 03 03 	sts	0x0303, r20
    2e0a:	50 93 04 03 	sts	0x0304, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2e0e:	57 fd       	sbrc	r21, 7
    2e10:	7a c0       	rjmp	.+244    	; 0x2f06 <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2e12:	12 16       	cp	r1, r18
    2e14:	13 06       	cpc	r1, r19
    2e16:	14 06       	cpc	r1, r20
    2e18:	15 06       	cpc	r1, r21
    2e1a:	0c f0       	brlt	.+2      	; 0x2e1e <start_horizontal_speed_control_right+0x10a>
    2e1c:	81 c0       	rjmp	.+258    	; 0x2f20 <start_horizontal_speed_control_right+0x20c>
    2e1e:	17 fd       	sbrc	r17, 7
    2e20:	ad c0       	rjmp	.+346    	; 0x2f7c <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2e22:	21 3c       	cpi	r18, 0xC1	; 193
    2e24:	8d e5       	ldi	r24, 0x5D	; 93
    2e26:	38 07       	cpc	r19, r24
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	48 07       	cpc	r20, r24
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	58 07       	cpc	r21, r24
    2e30:	0c f4       	brge	.+2      	; 0x2e34 <start_horizontal_speed_control_right+0x120>
    2e32:	76 c0       	rjmp	.+236    	; 0x2f20 <start_horizontal_speed_control_right+0x20c>
    2e34:	80 ec       	ldi	r24, 0xC0	; 192
    2e36:	9d e5       	ldi	r25, 0x5D	; 93
    2e38:	a0 e0       	ldi	r26, 0x00	; 0
    2e3a:	b0 e0       	ldi	r27, 0x00	; 0
    2e3c:	80 93 01 03 	sts	0x0301, r24
    2e40:	90 93 02 03 	sts	0x0302, r25
    2e44:	a0 93 03 03 	sts	0x0303, r26
    2e48:	b0 93 04 03 	sts	0x0304, r27
    2e4c:	2c ed       	ldi	r18, 0xDC	; 220
    2e4e:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2e50:	31 83       	std	Z+1, r19	; 0x01
    2e52:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    2e54:	80 91 e9 02 	lds	r24, 0x02E9
    2e58:	90 91 ea 02 	lds	r25, 0x02EA
    2e5c:	18 16       	cp	r1, r24
    2e5e:	19 06       	cpc	r1, r25
    2e60:	0c f0       	brlt	.+2      	; 0x2e64 <start_horizontal_speed_control_right+0x150>
    2e62:	87 c0       	rjmp	.+270    	; 0x2f72 <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    2e64:	2f 5f       	subi	r18, 0xFF	; 255
    2e66:	3f 4f       	sbci	r19, 0xFF	; 255
    2e68:	31 83       	std	Z+1, r19	; 0x01
    2e6a:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    2e6c:	12 16       	cp	r1, r18
    2e6e:	13 06       	cpc	r1, r19
    2e70:	0c f0       	brlt	.+2      	; 0x2e74 <start_horizontal_speed_control_right+0x160>
    2e72:	6d c0       	rjmp	.+218    	; 0x2f4e <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    2e74:	22 5e       	subi	r18, 0xE2	; 226
    2e76:	3f 4f       	sbci	r19, 0xFF	; 255
    2e78:	31 83       	std	Z+1, r19	; 0x01
    2e7a:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2e7c:	82 e0       	ldi	r24, 0x02	; 2
    2e7e:	21 30       	cpi	r18, 0x01	; 1
    2e80:	38 07       	cpc	r19, r24
    2e82:	0c f4       	brge	.+2      	; 0x2e86 <start_horizontal_speed_control_right+0x172>
    2e84:	6c c0       	rjmp	.+216    	; 0x2f5e <start_horizontal_speed_control_right+0x24a>
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	92 e0       	ldi	r25, 0x02	; 2
    2e8a:	91 83       	std	Z+1, r25	; 0x01
    2e8c:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2e8e:	df 91       	pop	r29
    2e90:	cf 91       	pop	r28
    2e92:	1f 91       	pop	r17
    2e94:	0f 91       	pop	r16
    2e96:	ff 90       	pop	r15
    2e98:	ef 90       	pop	r14
    2e9a:	df 90       	pop	r13
    2e9c:	cf 90       	pop	r12
    2e9e:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    2ea0:	10 92 0a 03 	sts	0x030A, r1
    2ea4:	10 92 09 03 	sts	0x0309, r1
		delta_right_speed_current = 0;
    2ea8:	10 92 7b 05 	sts	0x057B, r1
    2eac:	10 92 7a 05 	sts	0x057A, r1
		delta_right_speed_prev = 0;
    2eb0:	10 92 c4 04 	sts	0x04C4, r1
    2eb4:	10 92 c3 04 	sts	0x04C3, r1
		return;
    2eb8:	ea cf       	rjmp	.-44     	; 0x2e8e <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2eba:	80 ec       	ldi	r24, 0xC0	; 192
    2ebc:	c8 16       	cp	r12, r24
    2ebe:	89 ef       	ldi	r24, 0xF9	; 249
    2ec0:	d8 06       	cpc	r13, r24
    2ec2:	d4 f4       	brge	.+52     	; 0x2ef8 <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    2ec4:	80 ec       	ldi	r24, 0xC0	; 192
    2ec6:	99 ef       	ldi	r25, 0xF9	; 249
    2ec8:	90 93 0a 03 	sts	0x030A, r25
    2ecc:	80 93 09 03 	sts	0x0309, r24
    2ed0:	60 e8       	ldi	r22, 0x80	; 128
    2ed2:	c6 2e       	mov	r12, r22
    2ed4:	63 ef       	ldi	r22, 0xF3	; 243
    2ed6:	d6 2e       	mov	r13, r22
    2ed8:	6f ef       	ldi	r22, 0xFF	; 255
    2eda:	e6 2e       	mov	r14, r22
    2edc:	6f ef       	ldi	r22, 0xFF	; 255
    2ede:	f6 2e       	mov	r15, r22
    2ee0:	5a cf       	rjmp	.-332    	; 0x2d96 <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2ee2:	a0 91 f3 02 	lds	r26, 0x02F3
    2ee6:	b0 91 f4 02 	lds	r27, 0x02F4
    2eea:	a8 0f       	add	r26, r24
    2eec:	b9 1f       	adc	r27, r25
    2eee:	b0 93 7b 05 	sts	0x057B, r27
    2ef2:	a0 93 7a 05 	sts	0x057A, r26
    2ef6:	33 cf       	rjmp	.-410    	; 0x2d5e <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2ef8:	cc 0c       	add	r12, r12
    2efa:	dd 1c       	adc	r13, r13
    2efc:	ee 24       	eor	r14, r14
    2efe:	d7 fc       	sbrc	r13, 7
    2f00:	e0 94       	com	r14
    2f02:	fe 2c       	mov	r15, r14
    2f04:	48 cf       	rjmp	.-368    	; 0x2d96 <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2f06:	17 fd       	sbrc	r17, 7
    2f08:	0b c0       	rjmp	.+22     	; 0x2f20 <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    2f0a:	10 92 01 03 	sts	0x0301, r1
    2f0e:	10 92 02 03 	sts	0x0302, r1
    2f12:	10 92 03 03 	sts	0x0303, r1
    2f16:	10 92 04 03 	sts	0x0304, r1
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2f20:	20 34       	cpi	r18, 0x40	; 64
    2f22:	82 ea       	ldi	r24, 0xA2	; 162
    2f24:	38 07       	cpc	r19, r24
    2f26:	8f ef       	ldi	r24, 0xFF	; 255
    2f28:	48 07       	cpc	r20, r24
    2f2a:	8f ef       	ldi	r24, 0xFF	; 255
    2f2c:	58 07       	cpc	r21, r24
    2f2e:	8c f5       	brge	.+98     	; 0x2f92 <start_horizontal_speed_control_right+0x27e>
    2f30:	80 e4       	ldi	r24, 0x40	; 64
    2f32:	92 ea       	ldi	r25, 0xA2	; 162
    2f34:	af ef       	ldi	r26, 0xFF	; 255
    2f36:	bf ef       	ldi	r27, 0xFF	; 255
    2f38:	80 93 01 03 	sts	0x0301, r24
    2f3c:	90 93 02 03 	sts	0x0302, r25
    2f40:	a0 93 03 03 	sts	0x0303, r26
    2f44:	b0 93 04 03 	sts	0x0304, r27
    2f48:	24 e2       	ldi	r18, 0x24	; 36
    2f4a:	3a ef       	ldi	r19, 0xFA	; 250
    2f4c:	81 cf       	rjmp	.-254    	; 0x2e50 <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    2f4e:	21 15       	cp	r18, r1
    2f50:	31 05       	cpc	r19, r1
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <start_horizontal_speed_control_right+0x242>
    2f54:	9c cf       	rjmp	.-200    	; 0x2e8e <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    2f56:	2e 51       	subi	r18, 0x1E	; 30
    2f58:	30 40       	sbci	r19, 0x00	; 0
    2f5a:	31 83       	std	Z+1, r19	; 0x01
    2f5c:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2f5e:	8e ef       	ldi	r24, 0xFE	; 254
    2f60:	20 30       	cpi	r18, 0x00	; 0
    2f62:	38 07       	cpc	r19, r24
    2f64:	0c f0       	brlt	.+2      	; 0x2f68 <start_horizontal_speed_control_right+0x254>
    2f66:	93 cf       	rjmp	.-218    	; 0x2e8e <start_horizontal_speed_control_right+0x17a>
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	9e ef       	ldi	r25, 0xFE	; 254
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	80 83       	st	Z, r24
    2f70:	8e cf       	rjmp	.-228    	; 0x2e8e <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    2f72:	21 50       	subi	r18, 0x01	; 1
    2f74:	30 40       	sbci	r19, 0x00	; 0
    2f76:	31 83       	std	Z+1, r19	; 0x01
    2f78:	20 83       	st	Z, r18
    2f7a:	78 cf       	rjmp	.-272    	; 0x2e6c <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2f7c:	10 92 01 03 	sts	0x0301, r1
    2f80:	10 92 02 03 	sts	0x0302, r1
    2f84:	10 92 03 03 	sts	0x0303, r1
    2f88:	10 92 04 03 	sts	0x0304, r1
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2f92:	35 95       	asr	r19
    2f94:	27 95       	ror	r18
    2f96:	35 95       	asr	r19
    2f98:	27 95       	ror	r18
    2f9a:	35 95       	asr	r19
    2f9c:	27 95       	ror	r18
    2f9e:	35 95       	asr	r19
    2fa0:	27 95       	ror	r18
    2fa2:	56 cf       	rjmp	.-340    	; 0x2e50 <start_horizontal_speed_control_right+0x13c>

00002fa4 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    2fa4:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    2fa6:	80 81       	ld	r24, Z
    2fa8:	91 81       	ldd	r25, Z+1	; 0x01
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <start_horizontal_speed_control_left+0xc>
    2fae:	8b c0       	rjmp	.+278    	; 0x30c6 <start_horizontal_speed_control_left+0x122>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2fb0:	60 91 c0 04 	lds	r22, 0x04C0
    2fb4:	70 91 c1 04 	lds	r23, 0x04C1
    2fb8:	70 93 6c 05 	sts	0x056C, r23
    2fbc:	60 93 6b 05 	sts	0x056B, r22
	if(*pwm_left >= 0) {
    2fc0:	20 81       	ld	r18, Z
    2fc2:	31 81       	ldd	r19, Z+1	; 0x01
    2fc4:	37 fd       	sbrc	r19, 7
    2fc6:	99 c0       	rjmp	.+306    	; 0x30fa <start_horizontal_speed_control_left+0x156>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2fc8:	80 91 f1 02 	lds	r24, 0x02F1
    2fcc:	90 91 f2 02 	lds	r25, 0x02F2
    2fd0:	a9 01       	movw	r20, r18
    2fd2:	48 1b       	sub	r20, r24
    2fd4:	59 0b       	sbc	r21, r25
    2fd6:	ca 01       	movw	r24, r20
    2fd8:	50 93 c1 04 	sts	0x04C1, r21
    2fdc:	40 93 c0 04 	sts	0x04C0, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    2fe0:	20 91 07 03 	lds	r18, 0x0307
    2fe4:	30 91 08 03 	lds	r19, 0x0308
    2fe8:	28 0f       	add	r18, r24
    2fea:	39 1f       	adc	r19, r25
    2fec:	30 93 08 03 	sts	0x0308, r19
    2ff0:	20 93 07 03 	sts	0x0307, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    2ff4:	56 e0       	ldi	r21, 0x06	; 6
    2ff6:	21 34       	cpi	r18, 0x41	; 65
    2ff8:	35 07       	cpc	r19, r21
    2ffa:	0c f4       	brge	.+2      	; 0x2ffe <start_horizontal_speed_control_left+0x5a>
    2ffc:	71 c0       	rjmp	.+226    	; 0x30e0 <start_horizontal_speed_control_left+0x13c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    2ffe:	20 e4       	ldi	r18, 0x40	; 64
    3000:	36 e0       	ldi	r19, 0x06	; 6
    3002:	30 93 08 03 	sts	0x0308, r19
    3006:	20 93 07 03 	sts	0x0307, r18
    300a:	a0 e8       	ldi	r26, 0x80	; 128
    300c:	bc e0       	ldi	r27, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    300e:	ac 01       	movw	r20, r24
    3010:	44 0f       	add	r20, r20
    3012:	55 1f       	adc	r21, r21
    3014:	48 0f       	add	r20, r24
    3016:	59 1f       	adc	r21, r25
    3018:	9a 01       	movw	r18, r20
    301a:	22 0f       	add	r18, r18
    301c:	33 1f       	adc	r19, r19
    301e:	22 0f       	add	r18, r18
    3020:	33 1f       	adc	r19, r19
    3022:	24 0f       	add	r18, r20
    3024:	35 1f       	adc	r19, r21
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    3026:	40 81       	ld	r20, Z
    3028:	51 81       	ldd	r21, Z+1	; 0x01
    302a:	44 0f       	add	r20, r20
    302c:	55 1f       	adc	r21, r21
    302e:	44 0f       	add	r20, r20
    3030:	55 1f       	adc	r21, r21
    3032:	44 0f       	add	r20, r20
    3034:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    3036:	24 0f       	add	r18, r20
    3038:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    303a:	86 1b       	sub	r24, r22
    303c:	97 0b       	sbc	r25, r23
    303e:	ac 01       	movw	r20, r24
    3040:	44 0f       	add	r20, r20
    3042:	55 1f       	adc	r21, r21
    3044:	48 0f       	add	r20, r24
    3046:	59 1f       	adc	r21, r25
    3048:	24 0f       	add	r18, r20
    304a:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    304c:	2a 0f       	add	r18, r26
    304e:	3b 1f       	adc	r19, r27
    3050:	30 93 06 03 	sts	0x0306, r19
    3054:	20 93 05 03 	sts	0x0305, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3058:	37 fd       	sbrc	r19, 7
    305a:	5e c0       	rjmp	.+188    	; 0x3118 <start_horizontal_speed_control_left+0x174>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    305c:	12 16       	cp	r1, r18
    305e:	13 06       	cpc	r1, r19
    3060:	0c f0       	brlt	.+2      	; 0x3064 <start_horizontal_speed_control_left+0xc0>
    3062:	64 c0       	rjmp	.+200    	; 0x312c <start_horizontal_speed_control_left+0x188>
    3064:	80 81       	ld	r24, Z
    3066:	91 81       	ldd	r25, Z+1	; 0x01
    3068:	97 fd       	sbrc	r25, 7
    306a:	82 c0       	rjmp	.+260    	; 0x3170 <start_horizontal_speed_control_left+0x1cc>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    306c:	5d e5       	ldi	r21, 0x5D	; 93
    306e:	21 3c       	cpi	r18, 0xC1	; 193
    3070:	35 07       	cpc	r19, r21
    3072:	0c f4       	brge	.+2      	; 0x3076 <start_horizontal_speed_control_left+0xd2>
    3074:	5b c0       	rjmp	.+182    	; 0x312c <start_horizontal_speed_control_left+0x188>
    3076:	80 ec       	ldi	r24, 0xC0	; 192
    3078:	9d e5       	ldi	r25, 0x5D	; 93
    307a:	90 93 06 03 	sts	0x0306, r25
    307e:	80 93 05 03 	sts	0x0305, r24
    3082:	2c ed       	ldi	r18, 0xDC	; 220
    3084:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    3086:	31 83       	std	Z+1, r19	; 0x01
    3088:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    308a:	80 91 eb 02 	lds	r24, 0x02EB
    308e:	90 91 ec 02 	lds	r25, 0x02EC
    3092:	18 16       	cp	r1, r24
    3094:	19 06       	cpc	r1, r25
    3096:	0c f0       	brlt	.+2      	; 0x309a <start_horizontal_speed_control_left+0xf6>
    3098:	66 c0       	rjmp	.+204    	; 0x3166 <start_horizontal_speed_control_left+0x1c2>
		*pwm_left += 1;
    309a:	2f 5f       	subi	r18, 0xFF	; 255
    309c:	3f 4f       	sbci	r19, 0xFF	; 255
    309e:	31 83       	std	Z+1, r19	; 0x01
    30a0:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    30a2:	12 16       	cp	r1, r18
    30a4:	13 06       	cpc	r1, r19
    30a6:	0c f0       	brlt	.+2      	; 0x30aa <start_horizontal_speed_control_left+0x106>
    30a8:	4e c0       	rjmp	.+156    	; 0x3146 <start_horizontal_speed_control_left+0x1a2>
		*pwm_left += 30;
    30aa:	22 5e       	subi	r18, 0xE2	; 226
    30ac:	3f 4f       	sbci	r19, 0xFF	; 255
    30ae:	31 83       	std	Z+1, r19	; 0x01
    30b0:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    30b2:	42 e0       	ldi	r20, 0x02	; 2
    30b4:	21 30       	cpi	r18, 0x01	; 1
    30b6:	34 07       	cpc	r19, r20
    30b8:	0c f4       	brge	.+2      	; 0x30bc <start_horizontal_speed_control_left+0x118>
    30ba:	4c c0       	rjmp	.+152    	; 0x3154 <start_horizontal_speed_control_left+0x1b0>
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	92 e0       	ldi	r25, 0x02	; 2
    30c0:	91 83       	std	Z+1, r25	; 0x01
    30c2:	80 83       	st	Z, r24
    30c4:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    30c6:	10 92 08 03 	sts	0x0308, r1
    30ca:	10 92 07 03 	sts	0x0307, r1
		delta_left_speed_current = 0;
    30ce:	10 92 c1 04 	sts	0x04C1, r1
    30d2:	10 92 c0 04 	sts	0x04C0, r1
		delta_left_speed_prev = 0;
    30d6:	10 92 6c 05 	sts	0x056C, r1
    30da:	10 92 6b 05 	sts	0x056B, r1
		return;
    30de:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    30e0:	49 ef       	ldi	r20, 0xF9	; 249
    30e2:	20 3c       	cpi	r18, 0xC0	; 192
    30e4:	34 07       	cpc	r19, r20
    30e6:	a4 f4       	brge	.+40     	; 0x3110 <start_horizontal_speed_control_left+0x16c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    30e8:	20 ec       	ldi	r18, 0xC0	; 192
    30ea:	39 ef       	ldi	r19, 0xF9	; 249
    30ec:	30 93 08 03 	sts	0x0308, r19
    30f0:	20 93 07 03 	sts	0x0307, r18
    30f4:	a0 e8       	ldi	r26, 0x80	; 128
    30f6:	b3 ef       	ldi	r27, 0xF3	; 243
    30f8:	8a cf       	rjmp	.-236    	; 0x300e <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    30fa:	80 91 f1 02 	lds	r24, 0x02F1
    30fe:	90 91 f2 02 	lds	r25, 0x02F2
    3102:	82 0f       	add	r24, r18
    3104:	93 1f       	adc	r25, r19
    3106:	90 93 c1 04 	sts	0x04C1, r25
    310a:	80 93 c0 04 	sts	0x04C0, r24
    310e:	68 cf       	rjmp	.-304    	; 0x2fe0 <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3110:	d9 01       	movw	r26, r18
    3112:	aa 0f       	add	r26, r26
    3114:	bb 1f       	adc	r27, r27
    3116:	7b cf       	rjmp	.-266    	; 0x300e <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3118:	80 81       	ld	r24, Z
    311a:	91 81       	ldd	r25, Z+1	; 0x01
    311c:	97 fd       	sbrc	r25, 7
    311e:	06 c0       	rjmp	.+12     	; 0x312c <start_horizontal_speed_control_left+0x188>
		pwm_left_speed_controller = 0;
    3120:	10 92 06 03 	sts	0x0306, r1
    3124:	10 92 05 03 	sts	0x0305, r1
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    312c:	82 ea       	ldi	r24, 0xA2	; 162
    312e:	20 34       	cpi	r18, 0x40	; 64
    3130:	38 07       	cpc	r19, r24
    3132:	24 f5       	brge	.+72     	; 0x317c <start_horizontal_speed_control_left+0x1d8>
    3134:	80 e4       	ldi	r24, 0x40	; 64
    3136:	92 ea       	ldi	r25, 0xA2	; 162
    3138:	90 93 06 03 	sts	0x0306, r25
    313c:	80 93 05 03 	sts	0x0305, r24
    3140:	24 e2       	ldi	r18, 0x24	; 36
    3142:	3a ef       	ldi	r19, 0xFA	; 250
    3144:	a0 cf       	rjmp	.-192    	; 0x3086 <start_horizontal_speed_control_left+0xe2>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    3146:	21 15       	cp	r18, r1
    3148:	31 05       	cpc	r19, r1
    314a:	61 f0       	breq	.+24     	; 0x3164 <start_horizontal_speed_control_left+0x1c0>
		*pwm_left -= 30;
    314c:	2e 51       	subi	r18, 0x1E	; 30
    314e:	30 40       	sbci	r19, 0x00	; 0
    3150:	31 83       	std	Z+1, r19	; 0x01
    3152:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3154:	5e ef       	ldi	r21, 0xFE	; 254
    3156:	20 30       	cpi	r18, 0x00	; 0
    3158:	35 07       	cpc	r19, r21
    315a:	24 f4       	brge	.+8      	; 0x3164 <start_horizontal_speed_control_left+0x1c0>
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	9e ef       	ldi	r25, 0xFE	; 254
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24
    3164:	08 95       	ret

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    3166:	21 50       	subi	r18, 0x01	; 1
    3168:	30 40       	sbci	r19, 0x00	; 0
    316a:	31 83       	std	Z+1, r19	; 0x01
    316c:	20 83       	st	Z, r18
    316e:	99 cf       	rjmp	.-206    	; 0x30a2 <start_horizontal_speed_control_left+0xfe>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3170:	10 92 06 03 	sts	0x0306, r1
    3174:	10 92 05 03 	sts	0x0305, r1
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    317c:	35 95       	asr	r19
    317e:	27 95       	ror	r18
    3180:	35 95       	asr	r19
    3182:	27 95       	ror	r18
    3184:	35 95       	asr	r19
    3186:	27 95       	ror	r18
    3188:	35 95       	asr	r19
    318a:	27 95       	ror	r18
    318c:	7c cf       	rjmp	.-264    	; 0x3086 <start_horizontal_speed_control_left+0xe2>

0000318e <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    318e:	85 b7       	in	r24, 0x35	; 53
    3190:	80 61       	ori	r24, 0x10	; 16
    3192:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    3194:	8f ef       	ldi	r24, 0xFF	; 255
    3196:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    3198:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    319a:	97 ef       	ldi	r25, 0xF7	; 247
    319c:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    319e:	90 ee       	ldi	r25, 0xE0	; 224
    31a0:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    31a2:	90 ef       	ldi	r25, 0xF0	; 240
    31a4:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    31a6:	90 eb       	ldi	r25, 0xB0	; 176
    31a8:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    31aa:	9c ef       	ldi	r25, 0xFC	; 252
    31ac:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    31ae:	93 e0       	ldi	r25, 0x03	; 3
    31b0:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    31b2:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    31b4:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    31b6:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    31b8:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    31ba:	80 91 4e 04 	lds	r24, 0x044E
    31be:	88 23       	and	r24, r24
    31c0:	e1 f0       	breq	.+56     	; 0x31fa <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    31c2:	81 30       	cpi	r24, 0x01	; 1
    31c4:	d1 f0       	breq	.+52     	; 0x31fa <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    31c6:	82 30       	cpi	r24, 0x02	; 2
    31c8:	51 f1       	breq	.+84     	; 0x321e <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    31ca:	9f ef       	ldi	r25, 0xFF	; 255
    31cc:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    31d0:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    31d4:	9f e0       	ldi	r25, 0x0F	; 15
    31d6:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    31da:	88 23       	and	r24, r24
    31dc:	a9 f4       	brne	.+42     	; 0x3208 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    31de:	90 91 05 01 	lds	r25, 0x0105
    31e2:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    31e6:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    31ea:	9f ef       	ldi	r25, 0xFF	; 255
    31ec:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    31f0:	88 23       	and	r24, r24
    31f2:	29 f4       	brne	.+10     	; 0x31fe <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    31f4:	10 92 0b 01 	sts	0x010B, r1
    31f8:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    31fa:	14 ba       	out	0x14, r1	; 20
    31fc:	e6 cf       	rjmp	.-52     	; 0x31ca <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    31fe:	81 30       	cpi	r24, 0x01	; 1
    3200:	c9 f3       	breq	.-14     	; 0x31f4 <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3202:	82 30       	cpi	r24, 0x02	; 2
    3204:	41 f0       	breq	.+16     	; 0x3216 <initPortsIO+0x88>
    3206:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3208:	81 30       	cpi	r24, 0x01	; 1
    320a:	11 f0       	breq	.+4      	; 0x3210 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    320c:	82 30       	cpi	r24, 0x02	; 2
    320e:	59 f7       	brne	.-42     	; 0x31e6 <initPortsIO+0x58>
		PORTJ = 0x0F;
    3210:	90 93 05 01 	sts	0x0105, r25
    3214:	e8 cf       	rjmp	.-48     	; 0x31e6 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    3216:	87 ef       	ldi	r24, 0xF7	; 247
    3218:	80 93 0b 01 	sts	0x010B, r24
    321c:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    321e:	98 e0       	ldi	r25, 0x08	; 8
    3220:	94 bb       	out	0x14, r25	; 20
    3222:	d3 cf       	rjmp	.-90     	; 0x31ca <initPortsIO+0x3c>

00003224 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    3224:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    3228:	10 92 bc 00 	sts	0x00BC, r1
}
    322c:	08 95       	ret

0000322e <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    322e:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    3230:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3232:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    323c:	08 95       	ret

0000323e <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    323e:	94 ea       	ldi	r25, 0xA4	; 164
    3240:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3244:	90 91 bc 00 	lds	r25, 0x00BC
    3248:	97 ff       	sbrs	r25, 7
    324a:	fc cf       	rjmp	.-8      	; 0x3244 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    324c:	90 91 b9 00 	lds	r25, 0x00B9
    3250:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3252:	98 30       	cpi	r25, 0x08	; 8
    3254:	21 f0       	breq	.+8      	; 0x325e <i2c_start+0x20>
    3256:	90 31       	cpi	r25, 0x10	; 16
    3258:	11 f0       	breq	.+4      	; 0x325e <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	08 95       	ret
	}

	// send device address
	TWDR = address;
    325e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3262:	84 e8       	ldi	r24, 0x84	; 132
    3264:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3268:	80 91 bc 00 	lds	r24, 0x00BC
    326c:	87 ff       	sbrs	r24, 7
    326e:	fc cf       	rjmp	.-8      	; 0x3268 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3270:	90 91 b9 00 	lds	r25, 0x00B9
    3274:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3276:	98 31       	cpi	r25, 0x18	; 24
    3278:	21 f0       	breq	.+8      	; 0x3282 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	90 34       	cpi	r25, 0x40	; 64
    327e:	19 f0       	breq	.+6      	; 0x3286 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    3280:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3282:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    3284:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	08 95       	ret

0000328a <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    328a:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    328c:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    328e:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3290:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3294:	90 91 bc 00 	lds	r25, 0x00BC
    3298:	97 ff       	sbrs	r25, 7
    329a:	fc cf       	rjmp	.-8      	; 0x3294 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    329c:	90 91 b9 00 	lds	r25, 0x00B9
    32a0:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    32a2:	98 30       	cpi	r25, 0x08	; 8
    32a4:	11 f0       	breq	.+4      	; 0x32aa <i2c_start_wait+0x20>
    32a6:	90 31       	cpi	r25, 0x10	; 16
    32a8:	99 f7       	brne	.-26     	; 0x3290 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    32aa:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    32ae:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    32b2:	90 91 bc 00 	lds	r25, 0x00BC
    32b6:	97 ff       	sbrs	r25, 7
    32b8:	fc cf       	rjmp	.-8      	; 0x32b2 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    32ba:	90 91 b9 00 	lds	r25, 0x00B9
    32be:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    32c0:	90 32       	cpi	r25, 0x20	; 32
    32c2:	19 f0       	breq	.+6      	; 0x32ca <i2c_start_wait+0x40>
    32c4:	98 35       	cpi	r25, 0x58	; 88
    32c6:	09 f0       	breq	.+2      	; 0x32ca <i2c_start_wait+0x40>
    32c8:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    32ca:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    32ce:	90 91 bc 00 	lds	r25, 0x00BC
    32d2:	94 fd       	sbrc	r25, 4
    32d4:	fc cf       	rjmp	.-8      	; 0x32ce <i2c_start_wait+0x44>
    32d6:	dc cf       	rjmp	.-72     	; 0x3290 <i2c_start_wait+0x6>

000032d8 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    32d8:	94 ea       	ldi	r25, 0xA4	; 164
    32da:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    32de:	90 91 bc 00 	lds	r25, 0x00BC
    32e2:	97 ff       	sbrs	r25, 7
    32e4:	fc cf       	rjmp	.-8      	; 0x32de <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    32e6:	90 91 b9 00 	lds	r25, 0x00B9
    32ea:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    32ec:	98 30       	cpi	r25, 0x08	; 8
    32ee:	21 f0       	breq	.+8      	; 0x32f8 <i2c_rep_start+0x20>
    32f0:	90 31       	cpi	r25, 0x10	; 16
    32f2:	11 f0       	breq	.+4      	; 0x32f8 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	08 95       	ret
	}

	// send device address
	TWDR = address;
    32f8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    32fc:	84 e8       	ldi	r24, 0x84	; 132
    32fe:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3302:	80 91 bc 00 	lds	r24, 0x00BC
    3306:	87 ff       	sbrs	r24, 7
    3308:	fc cf       	rjmp	.-8      	; 0x3302 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    330a:	90 91 b9 00 	lds	r25, 0x00B9
    330e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3310:	98 31       	cpi	r25, 0x18	; 24
    3312:	21 f0       	breq	.+8      	; 0x331c <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	90 34       	cpi	r25, 0x40	; 64
    3318:	19 f0       	breq	.+6      	; 0x3320 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    331a:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    331c:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    331e:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	08 95       	ret

00003324 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3324:	84 e9       	ldi	r24, 0x94	; 148
    3326:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    332a:	80 91 bc 00 	lds	r24, 0x00BC
    332e:	84 fd       	sbrc	r24, 4
    3330:	fc cf       	rjmp	.-8      	; 0x332a <i2c_stop+0x6>

}/* i2c_stop */
    3332:	08 95       	ret

00003334 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3334:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3338:	84 e8       	ldi	r24, 0x84	; 132
    333a:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    333e:	80 91 bc 00 	lds	r24, 0x00BC
    3342:	87 ff       	sbrs	r24, 7
    3344:	fc cf       	rjmp	.-8      	; 0x333e <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3346:	90 91 b9 00 	lds	r25, 0x00B9
    334a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	98 32       	cpi	r25, 0x28	; 40
    3350:	09 f0       	breq	.+2      	; 0x3354 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    3352:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    3354:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    3356:	08 95       	ret

00003358 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3358:	84 ec       	ldi	r24, 0xC4	; 196
    335a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    335e:	80 91 bc 00 	lds	r24, 0x00BC
    3362:	87 ff       	sbrs	r24, 7
    3364:	fc cf       	rjmp	.-8      	; 0x335e <i2c_readAck+0x6>

    return TWDR;
    3366:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    336a:	08 95       	ret

0000336c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    336c:	84 e8       	ldi	r24, 0x84	; 132
    336e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3372:	80 91 bc 00 	lds	r24, 0x00BC
    3376:	87 ff       	sbrs	r24, 7
    3378:	fc cf       	rjmp	.-8      	; 0x3372 <i2c_readNak+0x6>
	
    return TWDR;
    337a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    337e:	08 95       	ret

00003380 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    3380:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    3384:	80 e1       	ldi	r24, 0x10	; 16
    3386:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    338a:	e0 ec       	ldi	r30, 0xC0	; 192
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	82 60       	ori	r24, 0x02	; 2
    3392:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    3394:	e1 ec       	ldi	r30, 0xC1	; 193
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	88 69       	ori	r24, 0x98	; 152
    339c:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    339e:	e2 ec       	ldi	r30, 0xC2	; 194
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	80 81       	ld	r24, Z
    33a4:	86 60       	ori	r24, 0x06	; 6
    33a6:	80 83       	st	Z, r24



}
    33a8:	08 95       	ret

000033aa <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    33aa:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    33ae:	80 e1       	ldi	r24, 0x10	; 16
    33b0:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    33b4:	e8 ec       	ldi	r30, 0xC8	; 200
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	82 60       	ori	r24, 0x02	; 2
    33bc:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    33be:	e9 ec       	ldi	r30, 0xC9	; 201
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	88 61       	ori	r24, 0x18	; 24
    33c6:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    33c8:	ea ec       	ldi	r30, 0xCA	; 202
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	80 81       	ld	r24, Z
    33ce:	86 60       	ori	r24, 0x06	; 6
    33d0:	80 83       	st	Z, r24

}
    33d2:	08 95       	ret

000033d4 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    33d4:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    33d8:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    33dc:	10 92 c2 00 	sts	0x00C2, r1

}
    33e0:	08 95       	ret

000033e2 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    33e2:	90 91 c0 00 	lds	r25, 0x00C0
    33e6:	95 ff       	sbrs	r25, 5
    33e8:	fc cf       	rjmp	.-8      	; 0x33e2 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    33ea:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    33ee:	66 23       	and	r22, r22
    33f0:	21 f0       	breq	.+8      	; 0x33fa <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    33f2:	80 91 c0 00 	lds	r24, 0x00C0
    33f6:	86 ff       	sbrs	r24, 6
    33f8:	fc cf       	rjmp	.-8      	; 0x33f2 <usart0Transmit+0x10>
    33fa:	08 95       	ret

000033fc <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    33fc:	90 91 c8 00 	lds	r25, 0x00C8
    3400:	95 ff       	sbrs	r25, 5
    3402:	fc cf       	rjmp	.-8      	; 0x33fc <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    3404:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    3408:	66 23       	and	r22, r22
    340a:	21 f0       	breq	.+8      	; 0x3414 <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    340c:	80 91 c8 00 	lds	r24, 0x00C8
    3410:	86 ff       	sbrs	r24, 6
    3412:	fc cf       	rjmp	.-8      	; 0x340c <usart1Transmit+0x10>
    3414:	08 95       	ret

00003416 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3416:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    341a:	80 95       	com	r24
	} else {
		return 1;
	}

}
    341c:	88 1f       	adc	r24, r24
    341e:	88 27       	eor	r24, r24
    3420:	88 1f       	adc	r24, r24
    3422:	08 95       	ret

00003424 <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    3424:	87 e9       	ldi	r24, 0x97	; 151
    3426:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3428:	20 91 c0 00 	lds	r18, 0x00C0
    342c:	27 fd       	sbrc	r18, 7
    342e:	07 c0       	rjmp	.+14     	; 0x343e <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    3430:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    3432:	d1 f7       	brne	.-12     	; 0x3428 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	80 93 1a 03 	sts	0x031A, r24
			return 0;				// timeout
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    343e:	80 91 c6 00 	lds	r24, 0x00C6

}
    3442:	08 95       	ret

00003444 <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    3444:	1f 92       	push	r1
    3446:	0f 92       	push	r0
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	0f 92       	push	r0
    344c:	0b b6       	in	r0, 0x3b	; 59
    344e:	0f 92       	push	r0
    3450:	11 24       	eor	r1, r1
    3452:	2f 93       	push	r18
    3454:	3f 93       	push	r19
    3456:	4f 93       	push	r20
    3458:	5f 93       	push	r21
    345a:	6f 93       	push	r22
    345c:	7f 93       	push	r23
    345e:	8f 93       	push	r24
    3460:	9f 93       	push	r25
    3462:	af 93       	push	r26
    3464:	bf 93       	push	r27
    3466:	ef 93       	push	r30
    3468:	ff 93       	push	r31

	char receivedByte = UDR0;
    346a:	80 91 c6 00 	lds	r24, 0x00C6

	if(currentSelector==15) {
    346e:	90 91 4b 04 	lds	r25, 0x044B
    3472:	9f 30       	cpi	r25, 0x0F	; 15
    3474:	21 f1       	breq	.+72     	; 0x34be <__vector_25+0x7a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    3476:	90 91 11 02 	lds	r25, 0x0211
    347a:	99 23       	and	r25, r25
    347c:	d9 f4       	brne	.+54     	; 0x34b4 <__vector_25+0x70>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    347e:	90 91 1f 04 	lds	r25, 0x041F
    3482:	91 30       	cpi	r25, 0x01	; 1
    3484:	09 f4       	brne	.+2      	; 0x3488 <__vector_25+0x44>
    3486:	60 c0       	rjmp	.+192    	; 0x3548 <__vector_25+0x104>
    3488:	92 30       	cpi	r25, 0x02	; 2
    348a:	09 f4       	brne	.+2      	; 0x348e <__vector_25+0x4a>
    348c:	43 c0       	rjmp	.+134    	; 0x3514 <__vector_25+0xd0>
			}
		}

	}

}
    348e:	ff 91       	pop	r31
    3490:	ef 91       	pop	r30
    3492:	bf 91       	pop	r27
    3494:	af 91       	pop	r26
    3496:	9f 91       	pop	r25
    3498:	8f 91       	pop	r24
    349a:	7f 91       	pop	r23
    349c:	6f 91       	pop	r22
    349e:	5f 91       	pop	r21
    34a0:	4f 91       	pop	r20
    34a2:	3f 91       	pop	r19
    34a4:	2f 91       	pop	r18
    34a6:	0f 90       	pop	r0
    34a8:	0b be       	out	0x3b, r0	; 59
    34aa:	0f 90       	pop	r0
    34ac:	0f be       	out	0x3f, r0	; 63
    34ae:	0f 90       	pop	r0
    34b0:	1f 90       	pop	r1
    34b2:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    34b4:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    34b8:	80 93 1f 04 	sts	0x041F, r24
    34bc:	e8 cf       	rjmp	.-48     	; 0x348e <__vector_25+0x4a>

	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
    34be:	8b 32       	cpi	r24, 0x2B	; 43
    34c0:	09 f4       	brne	.+2      	; 0x34c4 <__vector_25+0x80>
    34c2:	4c c0       	rjmp	.+152    	; 0x355c <__vector_25+0x118>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    34c4:	8d 32       	cpi	r24, 0x2D	; 45
    34c6:	f1 f0       	breq	.+60     	; 0x3504 <__vector_25+0xc0>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    34c8:	87 36       	cpi	r24, 0x67	; 103
    34ca:	09 f0       	breq	.+2      	; 0x34ce <__vector_25+0x8a>
    34cc:	5b c0       	rjmp	.+182    	; 0x3584 <__vector_25+0x140>
			usart0Transmit(irCommand,1);
    34ce:	90 91 23 04 	lds	r25, 0x0423

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    34d2:	80 91 c0 00 	lds	r24, 0x00C0
    34d6:	85 ff       	sbrs	r24, 5
    34d8:	fc cf       	rjmp	.-8      	; 0x34d2 <__vector_25+0x8e>
	UDR0 = data;						// put data into buffer, sends the data
    34da:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    34de:	80 91 c0 00 	lds	r24, 0x00C0
    34e2:	86 ff       	sbrs	r24, 6
    34e4:	fc cf       	rjmp	.-8      	; 0x34de <__vector_25+0x9a>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    34e6:	90 91 66 00 	lds	r25, 0x0066
    34ea:	90 93 bd 04 	sts	0x04BD, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    34ee:	80 91 c0 00 	lds	r24, 0x00C0
    34f2:	85 ff       	sbrs	r24, 5
    34f4:	fc cf       	rjmp	.-8      	; 0x34ee <__vector_25+0xaa>
	UDR0 = data;						// put data into buffer, sends the data
    34f6:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    34fa:	80 91 c0 00 	lds	r24, 0x00C0
    34fe:	86 ff       	sbrs	r24, 6
    3500:	fc cf       	rjmp	.-8      	; 0x34fa <__vector_25+0xb6>
    3502:	c5 cf       	rjmp	.-118    	; 0x348e <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3504:	80 91 bd 04 	lds	r24, 0x04BD
    3508:	88 23       	and	r24, r24
    350a:	d1 f1       	breq	.+116    	; 0x3580 <__vector_25+0x13c>
				currentOsccal--;	
    350c:	81 50       	subi	r24, 0x01	; 1
    350e:	80 93 bd 04 	sts	0x04BD, r24
    3512:	2b c0       	rjmp	.+86     	; 0x356a <__vector_25+0x126>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    3514:	40 91 21 04 	lds	r20, 0x0421
    3518:	44 23       	and	r20, r20
    351a:	51 f1       	breq	.+84     	; 0x3570 <__vector_25+0x12c>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    351c:	41 30       	cpi	r20, 0x01	; 1
    351e:	09 f0       	breq	.+2      	; 0x3522 <__vector_25+0xde>
    3520:	b6 cf       	rjmp	.-148    	; 0x348e <__vector_25+0x4a>
						rfAddress |= ((unsigned int)receivedByte<<8);
    3522:	38 2f       	mov	r19, r24
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	80 91 13 03 	lds	r24, 0x0313
    352a:	90 91 14 03 	lds	r25, 0x0314
    352e:	82 2b       	or	r24, r18
    3530:	93 2b       	or	r25, r19
    3532:	90 93 14 03 	sts	0x0314, r25
    3536:	80 93 13 03 	sts	0x0313, r24
						addressReceived = 1;
    353a:	40 93 20 04 	sts	0x0420, r20
						menuState = 0;
    353e:	10 92 21 04 	sts	0x0421, r1
						chooseMenu = 1;
    3542:	40 93 11 02 	sts	0x0211, r20
    3546:	a3 cf       	rjmp	.-186    	; 0x348e <__vector_25+0x4a>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    3548:	8a 3a       	cpi	r24, 0xAA	; 170
    354a:	31 f1       	breq	.+76     	; 0x3598 <__vector_25+0x154>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    354c:	85 35       	cpi	r24, 0x55	; 85
    354e:	09 f0       	breq	.+2      	; 0x3552 <__vector_25+0x10e>
    3550:	9e cf       	rjmp	.-196    	; 0x348e <__vector_25+0x4a>
						chooseMenu = 1;
    3552:	90 93 11 02 	sts	0x0211, r25
						menuChoice = 0;
    3556:	10 92 1f 04 	sts	0x041F, r1
    355a:	99 cf       	rjmp	.-206    	; 0x348e <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    355c:	80 91 bd 04 	lds	r24, 0x04BD
    3560:	8f 3f       	cpi	r24, 0xFF	; 255
    3562:	e9 f0       	breq	.+58     	; 0x359e <__vector_25+0x15a>
				currentOsccal++;
    3564:	8f 5f       	subi	r24, 0xFF	; 255
    3566:	80 93 bd 04 	sts	0x04BD, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    356a:	80 93 66 00 	sts	0x0066, r24
    356e:	8f cf       	rjmp	.-226    	; 0x348e <__vector_25+0x4a>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    3570:	80 93 13 03 	sts	0x0313, r24
    3574:	10 92 14 03 	sts	0x0314, r1
						menuState = 1;
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	80 93 21 04 	sts	0x0421, r24
    357e:	87 cf       	rjmp	.-242    	; 0x348e <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3580:	80 e0       	ldi	r24, 0x00	; 0
    3582:	f3 cf       	rjmp	.-26     	; 0x356a <__vector_25+0x126>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    3584:	83 37       	cpi	r24, 0x73	; 115
    3586:	09 f0       	breq	.+2      	; 0x358a <__vector_25+0x146>
    3588:	82 cf       	rjmp	.-252    	; 0x348e <__vector_25+0x4a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    358a:	8d ef       	ldi	r24, 0xFD	; 253
    358c:	9f e0       	ldi	r25, 0x0F	; 15
    358e:	60 91 bd 04 	lds	r22, 0x04BD
    3592:	0e 94 de 40 	call	0x81bc	; 0x81bc <__eewr_byte_m2560>
    3596:	7b cf       	rjmp	.-266    	; 0x348e <__vector_25+0x4a>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    3598:	90 93 22 04 	sts	0x0422, r25
    359c:	78 cf       	rjmp	.-272    	; 0x348e <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    359e:	8f ef       	ldi	r24, 0xFF	; 255
    35a0:	e4 cf       	rjmp	.-56     	; 0x356a <__vector_25+0x126>

000035a2 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    35a2:	86 b1       	in	r24, 0x06	; 6
    35a4:	66 b1       	in	r22, 0x06	; 6
    35a6:	26 b1       	in	r18, 0x06	; 6
    35a8:	46 b1       	in	r20, 0x06	; 6
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	28 70       	andi	r18, 0x08	; 8
    35ae:	30 70       	andi	r19, 0x00	; 0
    35b0:	35 95       	asr	r19
    35b2:	27 95       	ror	r18
    35b4:	35 95       	asr	r19
    35b6:	27 95       	ror	r18
    35b8:	35 95       	asr	r19
    35ba:	27 95       	ror	r18
    35bc:	22 0f       	add	r18, r18
    35be:	33 1f       	adc	r19, r19
    35c0:	70 e0       	ldi	r23, 0x00	; 0
    35c2:	64 70       	andi	r22, 0x04	; 4
    35c4:	70 70       	andi	r23, 0x00	; 0
    35c6:	75 95       	asr	r23
    35c8:	67 95       	ror	r22
    35ca:	75 95       	asr	r23
    35cc:	67 95       	ror	r22
    35ce:	26 0f       	add	r18, r22
    35d0:	37 1f       	adc	r19, r23
    35d2:	22 0f       	add	r18, r18
    35d4:	33 1f       	adc	r19, r19
    35d6:	50 e0       	ldi	r21, 0x00	; 0
    35d8:	42 70       	andi	r20, 0x02	; 2
    35da:	50 70       	andi	r21, 0x00	; 0
    35dc:	55 95       	asr	r21
    35de:	47 95       	ror	r20
    35e0:	24 0f       	add	r18, r20
    35e2:	35 1f       	adc	r19, r21
    35e4:	22 0f       	add	r18, r18
    35e6:	81 70       	andi	r24, 0x01	; 1
}
    35e8:	82 0f       	add	r24, r18
    35ea:	08 95       	ret

000035ec <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    35ec:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    35ee:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    35f0:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    35f2:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    35f6:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    35fa:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    35fe:	8e ef       	ldi	r24, 0xFE	; 254
    3600:	9f e0       	ldi	r25, 0x0F	; 15
    3602:	0e 94 b0 40 	call	0x8160	; 0x8160 <__eerd_word_m2560>
    3606:	90 93 14 03 	sts	0x0314, r25
    360a:	80 93 13 03 	sts	0x0313, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    360e:	8d ef       	ldi	r24, 0xFD	; 253
    3610:	9f e0       	ldi	r25, 0x0F	; 15
    3612:	0e 94 a8 40 	call	0x8150	; 0x8150 <__eerd_byte_m2560>
    3616:	80 93 bd 04 	sts	0x04BD, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    361a:	98 2f       	mov	r25, r24
    361c:	91 50       	subi	r25, 0x01	; 1
    361e:	9e 3f       	cpi	r25, 0xFE	; 254
    3620:	e8 f5       	brcc	.+122    	; 0x369c <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    3622:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    3626:	80 91 13 03 	lds	r24, 0x0313
    362a:	90 91 14 03 	lds	r25, 0x0314
    362e:	9c 01       	movw	r18, r24
    3630:	21 58       	subi	r18, 0x81	; 129
    3632:	3c 40       	sbci	r19, 0x0C	; 12
    3634:	23 30       	cpi	r18, 0x03	; 3
    3636:	31 05       	cpc	r19, r1
    3638:	08 f5       	brcc	.+66     	; 0x367c <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    363a:	10 92 4e 04 	sts	0x044E, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    363e:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <initCalibration>
	initPortsIO();
    3642:	0e 94 c7 18 	call	0x318e	; 0x318e <initPortsIO>
	initAdc();
    3646:	0e 94 06 1c 	call	0x380c	; 0x380c <initAdc>
	initMotors();
    364a:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <initMotors>
	initRGBleds();
    364e:	0e 94 74 34 	call	0x68e8	; 0x68e8 <initRGBleds>
	initSPI();
    3652:	0e 94 32 0a 	call	0x1464	; 0x1464 <initSPI>
	mirf_init();
    3656:	0e 94 1b 0b 	call	0x1636	; 0x1636 <mirf_init>
	if(spiCommError==0) {
    365a:	80 91 16 03 	lds	r24, 0x0316
    365e:	88 23       	and	r24, r24
    3660:	29 f4       	brne	.+10     	; 0x366c <initPeripherals+0x80>
		rfFlags |= 1;
    3662:	80 91 15 03 	lds	r24, 0x0315
    3666:	81 60       	ori	r24, 0x01	; 1
    3668:	80 93 15 03 	sts	0x0315, r24
	}
	initUsart0();
    366c:	0e 94 c0 19 	call	0x3380	; 0x3380 <initUsart0>
	initAccelerometer();
    3670:	0e 94 bc 35 	call	0x6b78	; 0x6b78 <initAccelerometer>
	init_ir_remote_control();
    3674:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <init_ir_remote_control>

	sei();			// enable global interrupts
    3678:	78 94       	sei

	
}
    367a:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    367c:	2c e0       	ldi	r18, 0x0C	; 12
    367e:	80 38       	cpi	r24, 0x80	; 128
    3680:	92 07       	cpc	r25, r18
    3682:	21 f4       	brne	.+8      	; 0x368c <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	80 93 4e 04 	sts	0x044E, r24
    368a:	d9 cf       	rjmp	.-78     	; 0x363e <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    368c:	2c e0       	ldi	r18, 0x0C	; 12
    368e:	84 38       	cpi	r24, 0x84	; 132
    3690:	92 07       	cpc	r25, r18
    3692:	a8 f2       	brcs	.-86     	; 0x363e <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    3694:	82 e0       	ldi	r24, 0x02	; 2
    3696:	80 93 4e 04 	sts	0x044E, r24
    369a:	d1 cf       	rjmp	.-94     	; 0x363e <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    369c:	60 91 66 00 	lds	r22, 0x0066
    36a0:	60 93 bd 04 	sts	0x04BD, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    36a4:	8d ef       	ldi	r24, 0xFD	; 253
    36a6:	9f e0       	ldi	r25, 0x0F	; 15
    36a8:	0e 94 de 40 	call	0x81bc	; 0x81bc <__eewr_byte_m2560>
    36ac:	bc cf       	rjmp	.-136    	; 0x3626 <initPeripherals+0x3a>

000036ae <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    36ae:	1f 92       	push	r1
    36b0:	0f 92       	push	r0
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	0f 92       	push	r0
    36b6:	11 24       	eor	r1, r1

}
    36b8:	0f 90       	pop	r0
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	0f 90       	pop	r0
    36be:	1f 90       	pop	r1
    36c0:	18 95       	reti

000036c2 <sleep>:

void sleep(unsigned char seconds) {
    36c2:	cf 93       	push	r28
    36c4:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    36c6:	9e e1       	ldi	r25, 0x1E	; 30
    36c8:	89 9f       	mul	r24, r25
    36ca:	e0 01       	movw	r28, r0
    36cc:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    36ce:	80 91 68 00 	lds	r24, 0x0068
    36d2:	8d 7f       	andi	r24, 0xFD	; 253
    36d4:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    36d8:	80 91 6c 00 	lds	r24, 0x006C
    36dc:	8f 77       	andi	r24, 0x7F	; 127
    36de:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    36e2:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    36e4:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    36e8:	80 91 7a 00 	lds	r24, 0x007A
    36ec:	80 61       	ori	r24, 0x10	; 16
    36ee:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    36f2:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    36f6:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    36fa:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    36fe:	88 b3       	in	r24, 0x18	; 24
    3700:	87 60       	ori	r24, 0x07	; 7
    3702:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    3704:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    3708:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    370c:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    3710:	89 b3       	in	r24, 0x19	; 25
    3712:	87 60       	ori	r24, 0x07	; 7
    3714:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    3716:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    371a:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    371e:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <closeUsart>
	closeSPI();
    3722:	0e 94 3e 0a 	call	0x147c	; 0x147c <closeSPI>
	i2c_close();
    3726:	0e 94 12 19 	call	0x3224	; 0x3224 <i2c_close>

	// set port pins
	initPortsIO();
    372a:	0e 94 c7 18 	call	0x318e	; 0x318e <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    372e:	83 b7       	in	r24, 0x33	; 51
    3730:	8f 60       	ori	r24, 0x0F	; 15
    3732:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    373a:	80 91 b0 00 	lds	r24, 0x00B0
    373e:	8d 7f       	andi	r24, 0xFD	; 253
    3740:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    3744:	80 91 b1 00 	lds	r24, 0x00B1
    3748:	87 60       	ori	r24, 0x07	; 7
    374a:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    374e:	20 97       	sbiw	r28, 0x00	; 0
    3750:	19 f0       	breq	.+6      	; 0x3758 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3752:	88 95       	sleep
		pause--;
    3754:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    3756:	e9 f7       	brne	.-6      	; 0x3752 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    3758:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    375a:	80 91 b1 00 	lds	r24, 0x00B1
    375e:	88 7f       	andi	r24, 0xF8	; 248
    3760:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    3764:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    3768:	80 91 b0 00 	lds	r24, 0x00B0
    376c:	82 60       	ori	r24, 0x02	; 2
    376e:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3772:	8f ef       	ldi	r24, 0xFF	; 255
    3774:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3778:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    377c:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    3780:	10 92 f6 02 	sts	0x02F6, r1
    3784:	10 92 f5 02 	sts	0x02F5, r1
	pwm_left = 0;
    3788:	10 92 f8 02 	sts	0x02F8, r1
    378c:	10 92 f7 02 	sts	0x02F7, r1
	initPeripherals();
    3790:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <initPeripherals>

}
    3794:	df 91       	pop	r29
    3796:	cf 91       	pop	r28
    3798:	08 95       	ret

0000379a <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
	return clockTick;
    379a:	60 91 43 04 	lds	r22, 0x0443
    379e:	70 91 44 04 	lds	r23, 0x0444
}
    37a2:	80 91 45 04 	lds	r24, 0x0445
    37a6:	90 91 46 04 	lds	r25, 0x0446
    37aa:	08 95       	ret

000037ac <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	80 93 bf 02 	sts	0x02BF, r24
}
    37b2:	08 95       	ret

000037b4 <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	dc 01       	movw	r26, r24
    37ba:	80 93 d5 02 	sts	0x02D5, r24
    37be:	90 93 d6 02 	sts	0x02D6, r25
    37c2:	a0 93 d7 02 	sts	0x02D7, r26
    37c6:	b0 93 d8 02 	sts	0x02D8, r27
	rightMotSteps = 0;
    37ca:	80 93 d1 02 	sts	0x02D1, r24
    37ce:	90 93 d2 02 	sts	0x02D2, r25
    37d2:	a0 93 d3 02 	sts	0x02D3, r26
    37d6:	b0 93 d4 02 	sts	0x02D4, r27
	theta = 0;
    37da:	80 93 67 04 	sts	0x0467, r24
    37de:	90 93 68 04 	sts	0x0468, r25
    37e2:	a0 93 69 04 	sts	0x0469, r26
    37e6:	b0 93 6a 04 	sts	0x046A, r27
	xPos = 0;
    37ea:	80 93 6b 04 	sts	0x046B, r24
    37ee:	90 93 6c 04 	sts	0x046C, r25
    37f2:	a0 93 6d 04 	sts	0x046D, r26
    37f6:	b0 93 6e 04 	sts	0x046E, r27
	yPos = 0;
    37fa:	80 93 6f 04 	sts	0x046F, r24
    37fe:	90 93 70 04 	sts	0x0470, r25
    3802:	a0 93 71 04 	sts	0x0471, r26
    3806:	b0 93 72 04 	sts	0x0472, r27
}
    380a:	08 95       	ret

0000380c <initAdc>:

#include "adc.h"


void initAdc(void) {
    380c:	cf 93       	push	r28
    380e:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    3810:	ea e7       	ldi	r30, 0x7A	; 122
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	10 82       	st	Z, r1
	ADCSRB = 0;
    3816:	ab e7       	ldi	r26, 0x7B	; 123
    3818:	b0 e0       	ldi	r27, 0x00	; 0
    381a:	1c 92       	st	X, r1
	ADMUX = 0;
    381c:	cc e7       	ldi	r28, 0x7C	; 124
    381e:	d0 e0       	ldi	r29, 0x00	; 0
    3820:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    3822:	80 81       	ld	r24, Z
    3824:	86 60       	ori	r24, 0x06	; 6
    3826:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3828:	88 81       	ld	r24, Y
    382a:	80 64       	ori	r24, 0x40	; 64
    382c:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    382e:	80 81       	ld	r24, Z
    3830:	80 62       	ori	r24, 0x20	; 32
    3832:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    3834:	8c 91       	ld	r24, X
    3836:	88 7f       	andi	r24, 0xF8	; 248
    3838:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    383a:	80 81       	ld	r24, Z
    383c:	88 60       	ori	r24, 0x08	; 8
    383e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3840:	80 81       	ld	r24, Z
    3842:	80 68       	ori	r24, 0x80	; 128
    3844:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    3846:	80 81       	ld	r24, Z
    3848:	80 64       	ori	r24, 0x40	; 64
    384a:	80 83       	st	Z, r24

}
    384c:	df 91       	pop	r29
    384e:	cf 91       	pop	r28
    3850:	08 95       	ret

00003852 <__vector_29>:

ISR(ADC_vect) {
    3852:	1f 92       	push	r1
    3854:	0f 92       	push	r0
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	0f 92       	push	r0
    385a:	0b b6       	in	r0, 0x3b	; 59
    385c:	0f 92       	push	r0
    385e:	11 24       	eor	r1, r1
    3860:	2f 93       	push	r18
    3862:	3f 93       	push	r19
    3864:	4f 93       	push	r20
    3866:	5f 93       	push	r21
    3868:	6f 93       	push	r22
    386a:	7f 93       	push	r23
    386c:	8f 93       	push	r24
    386e:	9f 93       	push	r25
    3870:	ef 93       	push	r30
    3872:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    3874:	40 91 43 04 	lds	r20, 0x0443
    3878:	30 91 44 04 	lds	r19, 0x0444
    387c:	20 91 45 04 	lds	r18, 0x0445
    3880:	90 91 46 04 	lds	r25, 0x0446
    3884:	80 91 47 04 	lds	r24, 0x0447
    3888:	e0 91 48 04 	lds	r30, 0x0448
    388c:	70 91 49 04 	lds	r23, 0x0449
    3890:	f0 91 4a 04 	lds	r31, 0x044A
    3894:	64 2f       	mov	r22, r20
    3896:	6f 5f       	subi	r22, 0xFF	; 255
    3898:	51 e0       	ldi	r21, 0x01	; 1
    389a:	64 17       	cp	r22, r20
    389c:	08 f0       	brcs	.+2      	; 0x38a0 <__vector_29+0x4e>
    389e:	50 e0       	ldi	r21, 0x00	; 0
    38a0:	53 0f       	add	r21, r19
    38a2:	41 e0       	ldi	r20, 0x01	; 1
    38a4:	53 17       	cp	r21, r19
    38a6:	08 f0       	brcs	.+2      	; 0x38aa <__vector_29+0x58>
    38a8:	40 e0       	ldi	r20, 0x00	; 0
    38aa:	42 0f       	add	r20, r18
    38ac:	31 e0       	ldi	r19, 0x01	; 1
    38ae:	42 17       	cp	r20, r18
    38b0:	08 f0       	brcs	.+2      	; 0x38b4 <__vector_29+0x62>
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	39 0f       	add	r19, r25
    38b6:	21 e0       	ldi	r18, 0x01	; 1
    38b8:	39 17       	cp	r19, r25
    38ba:	08 f0       	brcs	.+2      	; 0x38be <__vector_29+0x6c>
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	28 0f       	add	r18, r24
    38c0:	91 e0       	ldi	r25, 0x01	; 1
    38c2:	28 17       	cp	r18, r24
    38c4:	08 f0       	brcs	.+2      	; 0x38c8 <__vector_29+0x76>
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	9e 0f       	add	r25, r30
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	9e 17       	cp	r25, r30
    38ce:	08 f0       	brcs	.+2      	; 0x38d2 <__vector_29+0x80>
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	87 0f       	add	r24, r23
    38d4:	e1 e0       	ldi	r30, 0x01	; 1
    38d6:	87 17       	cp	r24, r23
    38d8:	08 f0       	brcs	.+2      	; 0x38dc <__vector_29+0x8a>
    38da:	e0 e0       	ldi	r30, 0x00	; 0
    38dc:	ef 0f       	add	r30, r31
    38de:	60 93 43 04 	sts	0x0443, r22
    38e2:	50 93 44 04 	sts	0x0444, r21
    38e6:	40 93 45 04 	sts	0x0445, r20
    38ea:	30 93 46 04 	sts	0x0446, r19
    38ee:	20 93 47 04 	sts	0x0447, r18
    38f2:	90 93 48 04 	sts	0x0448, r25
    38f6:	80 93 49 04 	sts	0x0449, r24
    38fa:	e0 93 4a 04 	sts	0x044A, r30
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    38fe:	20 91 78 00 	lds	r18, 0x0078
    3902:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    3904:	40 91 79 00 	lds	r20, 0x0079
    3908:	94 2f       	mov	r25, r20
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	28 2b       	or	r18, r24
    390e:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3910:	80 91 b9 02 	lds	r24, 0x02B9
    3914:	82 30       	cpi	r24, 0x02	; 2
    3916:	09 f4       	brne	.+2      	; 0x391a <__vector_29+0xc8>
    3918:	b1 c1       	rjmp	.+866    	; 0x3c7c <__vector_29+0x42a>
    391a:	83 30       	cpi	r24, 0x03	; 3
    391c:	08 f4       	brcc	.+2      	; 0x3920 <__vector_29+0xce>
    391e:	44 c0       	rjmp	.+136    	; 0x39a8 <__vector_29+0x156>
    3920:	83 30       	cpi	r24, 0x03	; 3
    3922:	09 f4       	brne	.+2      	; 0x3926 <__vector_29+0xd4>
    3924:	d4 c1       	rjmp	.+936    	; 0x3cce <__vector_29+0x47c>
    3926:	84 30       	cpi	r24, 0x04	; 4
    3928:	09 f4       	brne	.+2      	; 0x392c <__vector_29+0xda>
    392a:	67 c1       	rjmp	.+718    	; 0x3bfa <__vector_29+0x3a8>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    392c:	80 91 ba 02 	lds	r24, 0x02BA
    3930:	82 30       	cpi	r24, 0x02	; 2
    3932:	09 f4       	brne	.+2      	; 0x3936 <__vector_29+0xe4>
    3934:	4e c1       	rjmp	.+668    	; 0x3bd2 <__vector_29+0x380>
    3936:	83 30       	cpi	r24, 0x03	; 3
    3938:	08 f0       	brcs	.+2      	; 0x393c <__vector_29+0xea>
    393a:	cc c0       	rjmp	.+408    	; 0x3ad4 <__vector_29+0x282>
    393c:	88 23       	and	r24, r24
    393e:	09 f0       	breq	.+2      	; 0x3942 <__vector_29+0xf0>
    3940:	23 c1       	rjmp	.+582    	; 0x3b88 <__vector_29+0x336>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    3942:	80 91 24 02 	lds	r24, 0x0224
    3946:	86 95       	lsr	r24
    3948:	80 93 23 02 	sts	0x0223, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    394c:	80 91 bb 02 	lds	r24, 0x02BB
    3950:	88 23       	and	r24, r24
    3952:	09 f0       	breq	.+2      	; 0x3956 <__vector_29+0x104>
    3954:	ec c1       	rjmp	.+984    	; 0x3d2e <__vector_29+0x4dc>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	80 93 b9 02 	sts	0x02B9, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	80 93 ba 02 	sts	0x02BA, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    3962:	90 91 23 02 	lds	r25, 0x0223
    3966:	98 30       	cpi	r25, 0x08	; 8
    3968:	08 f0       	brcs	.+2      	; 0x396c <__vector_29+0x11a>
    396a:	ec c0       	rjmp	.+472    	; 0x3b44 <__vector_29+0x2f2>
		ADCSRB &= ~(1 << MUX5);
    396c:	90 91 7b 00 	lds	r25, 0x007B
    3970:	97 7f       	andi	r25, 0xF7	; 247
    3972:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    3976:	90 91 23 02 	lds	r25, 0x0223
    397a:	90 5c       	subi	r25, 0xC0	; 192
    397c:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3980:	82 30       	cpi	r24, 0x02	; 2
    3982:	09 f4       	brne	.+2      	; 0x3986 <__vector_29+0x134>
    3984:	ec c0       	rjmp	.+472    	; 0x3b5e <__vector_29+0x30c>

	}

	//LED_BLUE_OFF;

}
    3986:	ff 91       	pop	r31
    3988:	ef 91       	pop	r30
    398a:	9f 91       	pop	r25
    398c:	8f 91       	pop	r24
    398e:	7f 91       	pop	r23
    3990:	6f 91       	pop	r22
    3992:	5f 91       	pop	r21
    3994:	4f 91       	pop	r20
    3996:	3f 91       	pop	r19
    3998:	2f 91       	pop	r18
    399a:	0f 90       	pop	r0
    399c:	0b be       	out	0x3b, r0	; 59
    399e:	0f 90       	pop	r0
    39a0:	0f be       	out	0x3f, r0	; 63
    39a2:	0f 90       	pop	r0
    39a4:	1f 90       	pop	r1
    39a6:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    39a8:	88 23       	and	r24, r24
    39aa:	09 f0       	breq	.+2      	; 0x39ae <__vector_29+0x15c>
    39ac:	fe c0       	rjmp	.+508    	; 0x3baa <__vector_29+0x358>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    39ae:	60 91 24 02 	lds	r22, 0x0224
    39b2:	6e 30       	cpi	r22, 0x0E	; 14
    39b4:	09 f4       	brne	.+2      	; 0x39b8 <__vector_29+0x166>
    39b6:	dc c1       	rjmp	.+952    	; 0x3d70 <__vector_29+0x51e>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    39b8:	46 2f       	mov	r20, r22
    39ba:	50 e0       	ldi	r21, 0x00	; 0
    39bc:	fa 01       	movw	r30, r20
    39be:	ee 0f       	add	r30, r30
    39c0:	ff 1f       	adc	r31, r31
    39c2:	e7 5d       	subi	r30, 0xD7	; 215
    39c4:	fd 4f       	sbci	r31, 0xFD	; 253
    39c6:	31 83       	std	Z+1, r19	; 0x01
    39c8:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    39ca:	40 ff       	sbrs	r20, 0
    39cc:	77 c0       	rjmp	.+238    	; 0x3abc <__vector_29+0x26a>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    39ce:	fa 01       	movw	r30, r20
    39d0:	ee 0f       	add	r30, r30
    39d2:	ff 1f       	adc	r31, r31
    39d4:	e9 5d       	subi	r30, 0xD9	; 217
    39d6:	fd 4f       	sbci	r31, 0xFD	; 253
    39d8:	80 81       	ld	r24, Z
    39da:	91 81       	ldd	r25, Z+1	; 0x01
    39dc:	fa 01       	movw	r30, r20
    39de:	ee 0f       	add	r30, r30
    39e0:	ff 1f       	adc	r31, r31
    39e2:	e7 5d       	subi	r30, 0xD7	; 215
    39e4:	fd 4f       	sbci	r31, 0xFD	; 253
    39e6:	40 81       	ld	r20, Z
    39e8:	51 81       	ldd	r21, Z+1	; 0x01
    39ea:	26 2f       	mov	r18, r22
    39ec:	26 95       	lsr	r18
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	84 1b       	sub	r24, r20
    39f2:	95 0b       	sbc	r25, r21
    39f4:	22 0f       	add	r18, r18
    39f6:	33 1f       	adc	r19, r19
    39f8:	f9 01       	movw	r30, r18
    39fa:	ef 58       	subi	r30, 0x8F	; 143
    39fc:	fd 4f       	sbci	r31, 0xFD	; 253
    39fe:	40 81       	ld	r20, Z
    3a00:	51 81       	ldd	r21, Z+1	; 0x01
    3a02:	84 1b       	sub	r24, r20
    3a04:	95 0b       	sbc	r25, r21
    3a06:	f9 01       	movw	r30, r18
    3a08:	e7 5a       	subi	r30, 0xA7	; 167
    3a0a:	fd 4f       	sbci	r31, 0xFD	; 253
    3a0c:	91 83       	std	Z+1, r25	; 0x01
    3a0e:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    3a10:	97 fd       	sbrc	r25, 7
    3a12:	c9 c1       	rjmp	.+914    	; 0x3da6 <__vector_29+0x554>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    3a14:	44 e0       	ldi	r20, 0x04	; 4
    3a16:	81 30       	cpi	r24, 0x01	; 1
    3a18:	94 07       	cpc	r25, r20
    3a1a:	24 f0       	brlt	.+8      	; 0x3a24 <__vector_29+0x1d2>
					proximityResult[currentProx>>1] = 1024;
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	94 e0       	ldi	r25, 0x04	; 4
    3a20:	91 83       	std	Z+1, r25	; 0x01
    3a22:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    3a24:	60 31       	cpi	r22, 0x10	; 16
    3a26:	48 f4       	brcc	.+18     	; 0x3a3a <__vector_29+0x1e8>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    3a28:	8c 33       	cpi	r24, 0x3C	; 60
    3a2a:	91 05       	cpc	r25, r1
    3a2c:	0c f0       	brlt	.+2      	; 0x3a30 <__vector_29+0x1de>
    3a2e:	c0 c1       	rjmp	.+896    	; 0x3db0 <__vector_29+0x55e>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    3a30:	2f 53       	subi	r18, 0x3F	; 63
    3a32:	3d 4f       	sbci	r19, 0xFD	; 253
    3a34:	f9 01       	movw	r30, r18
    3a36:	91 83       	std	Z+1, r25	; 0x01
    3a38:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    3a3a:	80 91 65 04 	lds	r24, 0x0465
    3a3e:	88 23       	and	r24, r24
    3a40:	09 f4       	brne	.+2      	; 0x3a44 <__vector_29+0x1f2>
    3a42:	81 c1       	rjmp	.+770    	; 0x3d46 <__vector_29+0x4f4>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3a44:	80 91 69 02 	lds	r24, 0x0269
    3a48:	90 91 6a 02 	lds	r25, 0x026A
    3a4c:	f1 e0       	ldi	r31, 0x01	; 1
    3a4e:	84 3a       	cpi	r24, 0xA4	; 164
    3a50:	9f 07       	cpc	r25, r31
    3a52:	cc f0       	brlt	.+50     	; 0x3a86 <__vector_29+0x234>
    3a54:	80 91 6b 02 	lds	r24, 0x026B
    3a58:	90 91 6c 02 	lds	r25, 0x026C
    3a5c:	21 e0       	ldi	r18, 0x01	; 1
    3a5e:	84 3a       	cpi	r24, 0xA4	; 164
    3a60:	92 07       	cpc	r25, r18
    3a62:	8c f0       	brlt	.+34     	; 0x3a86 <__vector_29+0x234>
    3a64:	80 91 6d 02 	lds	r24, 0x026D
    3a68:	90 91 6e 02 	lds	r25, 0x026E
    3a6c:	41 e0       	ldi	r20, 0x01	; 1
    3a6e:	84 3a       	cpi	r24, 0xA4	; 164
    3a70:	94 07       	cpc	r25, r20
    3a72:	4c f0       	brlt	.+18     	; 0x3a86 <__vector_29+0x234>
    3a74:	80 91 6f 02 	lds	r24, 0x026F
    3a78:	90 91 70 02 	lds	r25, 0x0270
    3a7c:	e1 e0       	ldi	r30, 0x01	; 1
    3a7e:	84 3a       	cpi	r24, 0xA4	; 164
    3a80:	9e 07       	cpc	r25, r30
    3a82:	0c f0       	brlt	.+2      	; 0x3a86 <__vector_29+0x234>
    3a84:	60 c1       	rjmp	.+704    	; 0x3d46 <__vector_29+0x4f4>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	80 93 66 04 	sts	0x0466, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    3a8c:	10 92 f8 02 	sts	0x02F8, r1
    3a90:	10 92 f7 02 	sts	0x02F7, r1
						OCR4A = 0;
    3a94:	10 92 a9 00 	sts	0x00A9, r1
    3a98:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    3a9c:	10 92 ab 00 	sts	0x00AB, r1
    3aa0:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    3aa4:	10 92 f6 02 	sts	0x02F6, r1
    3aa8:	10 92 f5 02 	sts	0x02F5, r1
						OCR3A = 0;
    3aac:	10 92 99 00 	sts	0x0099, r1
    3ab0:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    3ab4:	10 92 9b 00 	sts	0x009B, r1
    3ab8:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    3abc:	6f 5f       	subi	r22, 0xFF	; 255
    3abe:	60 93 24 02 	sts	0x0224, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    3ac2:	68 31       	cpi	r22, 0x18	; 24
    3ac4:	08 f4       	brcc	.+2      	; 0x3ac8 <__vector_29+0x276>
    3ac6:	32 cf       	rjmp	.-412    	; 0x392c <__vector_29+0xda>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    3ac8:	10 92 24 02 	sts	0x0224, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	80 93 c0 02 	sts	0x02C0, r24
    3ad2:	2c cf       	rjmp	.-424    	; 0x392c <__vector_29+0xda>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3ad4:	83 30       	cpi	r24, 0x03	; 3
    3ad6:	09 f4       	brne	.+2      	; 0x3ada <__vector_29+0x288>
    3ad8:	bd c0       	rjmp	.+378    	; 0x3c54 <__vector_29+0x402>
    3ada:	84 30       	cpi	r24, 0x04	; 4
    3adc:	09 f0       	breq	.+2      	; 0x3ae0 <__vector_29+0x28e>
    3ade:	41 cf       	rjmp	.-382    	; 0x3962 <__vector_29+0x110>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    3ae0:	90 91 26 02 	lds	r25, 0x0226
    3ae4:	90 93 23 02 	sts	0x0223, r25
			rightChannelPhase = rightMotorPhase;
    3ae8:	90 91 27 02 	lds	r25, 0x0227
    3aec:	90 93 bb 02 	sts	0x02BB, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    3af0:	90 91 bc 02 	lds	r25, 0x02BC
    3af4:	99 23       	and	r25, r25
    3af6:	09 f0       	breq	.+2      	; 0x3afa <__vector_29+0x2a8>
    3af8:	14 c1       	rjmp	.+552    	; 0x3d22 <__vector_29+0x4d0>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3afa:	83 e0       	ldi	r24, 0x03	; 3
    3afc:	80 93 b9 02 	sts	0x02B9, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    3b00:	10 92 ba 02 	sts	0x02BA, r1

			if(currentProx==14 && measBattery==1) {
    3b04:	60 91 24 02 	lds	r22, 0x0224
    3b08:	6e 30       	cpi	r22, 0x0E	; 14
    3b0a:	09 f4       	brne	.+2      	; 0x3b0e <__vector_29+0x2bc>
    3b0c:	2b c1       	rjmp	.+598    	; 0x3d64 <__vector_29+0x512>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    3b0e:	86 2f       	mov	r24, r22
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	60 ff       	sbrs	r22, 0
    3b14:	fd c0       	rjmp	.+506    	; 0x3d10 <__vector_29+0x4be>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    3b16:	60 31       	cpi	r22, 0x10	; 16
    3b18:	08 f4       	brcc	.+2      	; 0x3b1c <__vector_29+0x2ca>
    3b1a:	18 c1       	rjmp	.+560    	; 0x3d4c <__vector_29+0x4fa>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    3b1c:	20 91 4e 04 	lds	r18, 0x044E
    3b20:	22 23       	and	r18, r18
    3b22:	09 f0       	breq	.+2      	; 0x3b26 <__vector_29+0x2d4>
    3b24:	e1 c0       	rjmp	.+450    	; 0x3ce8 <__vector_29+0x496>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    3b26:	40 97       	sbiw	r24, 0x10	; 16
    3b28:	95 95       	asr	r25
    3b2a:	87 95       	ror	r24
    3b2c:	21 e0       	ldi	r18, 0x01	; 1
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	02 c0       	rjmp	.+4      	; 0x3b36 <__vector_29+0x2e4>
    3b32:	22 0f       	add	r18, r18
    3b34:	33 1f       	adc	r19, r19
    3b36:	8a 95       	dec	r24
    3b38:	e2 f7       	brpl	.-8      	; 0x3b32 <__vector_29+0x2e0>
    3b3a:	20 93 05 01 	sts	0x0105, r18
    3b3e:	80 91 ba 02 	lds	r24, 0x02BA
    3b42:	0f cf       	rjmp	.-482    	; 0x3962 <__vector_29+0x110>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    3b44:	90 91 7b 00 	lds	r25, 0x007B
    3b48:	98 60       	ori	r25, 0x08	; 8
    3b4a:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    3b4e:	90 91 23 02 	lds	r25, 0x0223
    3b52:	98 5c       	subi	r25, 0xC8	; 200
    3b54:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3b58:	82 30       	cpi	r24, 0x02	; 2
    3b5a:	09 f0       	breq	.+2      	; 0x3b5e <__vector_29+0x30c>
    3b5c:	14 cf       	rjmp	.-472    	; 0x3986 <__vector_29+0x134>

		if(hardwareRevision == HW_REV_3_0) {
    3b5e:	20 91 4e 04 	lds	r18, 0x044E
    3b62:	22 23       	and	r18, r18
    3b64:	51 f0       	breq	.+20     	; 0x3b7a <__vector_29+0x328>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    3b66:	21 30       	cpi	r18, 0x01	; 1
    3b68:	19 f0       	breq	.+6      	; 0x3b70 <__vector_29+0x31e>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    3b6a:	22 30       	cpi	r18, 0x02	; 2
    3b6c:	09 f0       	breq	.+2      	; 0x3b70 <__vector_29+0x31e>
    3b6e:	0b cf       	rjmp	.-490    	; 0x3986 <__vector_29+0x134>
			PORTJ = 0xFF;
    3b70:	8f ef       	ldi	r24, 0xFF	; 255
    3b72:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    3b76:	12 b8       	out	0x02, r1	; 2
    3b78:	06 cf       	rjmp	.-500    	; 0x3986 <__vector_29+0x134>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    3b7a:	80 91 05 01 	lds	r24, 0x0105
    3b7e:	80 7f       	andi	r24, 0xF0	; 240
    3b80:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    3b84:	12 b8       	out	0x02, r1	; 2
    3b86:	ff ce       	rjmp	.-514    	; 0x3986 <__vector_29+0x134>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3b88:	81 30       	cpi	r24, 0x01	; 1
    3b8a:	09 f0       	breq	.+2      	; 0x3b8e <__vector_29+0x33c>
    3b8c:	ea ce       	rjmp	.-556    	; 0x3962 <__vector_29+0x110>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    3b8e:	80 91 25 02 	lds	r24, 0x0225
    3b92:	80 93 23 02 	sts	0x0223, r24
			leftChannelPhase = leftMotorPhase;
    3b96:	80 91 28 02 	lds	r24, 0x0228
    3b9a:	80 93 bc 02 	sts	0x02BC, r24
			adcSaveDataTo = SAVE_TO_PROX;
    3b9e:	10 92 b9 02 	sts	0x02B9, r1
			adcSamplingState = 2;
    3ba2:	82 e0       	ldi	r24, 0x02	; 2
    3ba4:	80 93 ba 02 	sts	0x02BA, r24
			break;
    3ba8:	dc ce       	rjmp	.-584    	; 0x3962 <__vector_29+0x110>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3baa:	81 30       	cpi	r24, 0x01	; 1
    3bac:	09 f0       	breq	.+2      	; 0x3bb0 <__vector_29+0x35e>
    3bae:	be ce       	rjmp	.-644    	; 0x392c <__vector_29+0xda>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    3bb0:	80 91 e3 02 	lds	r24, 0x02E3
    3bb4:	90 91 e4 02 	lds	r25, 0x02E4
    3bb8:	82 0f       	add	r24, r18
    3bba:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    3bbc:	96 95       	lsr	r25
    3bbe:	87 95       	ror	r24
    3bc0:	90 93 e4 02 	sts	0x02E4, r25
    3bc4:	80 93 e3 02 	sts	0x02E3, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3bc8:	80 91 ba 02 	lds	r24, 0x02BA
    3bcc:	82 30       	cpi	r24, 0x02	; 2
    3bce:	09 f0       	breq	.+2      	; 0x3bd2 <__vector_29+0x380>
    3bd0:	b2 ce       	rjmp	.-668    	; 0x3936 <__vector_29+0xe4>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    3bd2:	80 91 26 02 	lds	r24, 0x0226
    3bd6:	80 93 23 02 	sts	0x0223, r24
			rightChannelPhase = rightMotorPhase;
    3bda:	80 91 27 02 	lds	r24, 0x0227
    3bde:	80 93 bb 02 	sts	0x02BB, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3be2:	80 91 bc 02 	lds	r24, 0x02BC
    3be6:	88 23       	and	r24, r24
    3be8:	09 f0       	breq	.+2      	; 0x3bec <__vector_29+0x39a>
    3bea:	a7 c0       	rjmp	.+334    	; 0x3d3a <__vector_29+0x4e8>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3bec:	83 e0       	ldi	r24, 0x03	; 3
    3bee:	80 93 b9 02 	sts	0x02B9, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3bf2:	83 e0       	ldi	r24, 0x03	; 3
    3bf4:	80 93 ba 02 	sts	0x02BA, r24
			break;
    3bf8:	b4 ce       	rjmp	.-664    	; 0x3962 <__vector_29+0x110>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    3bfa:	80 91 0a 02 	lds	r24, 0x020A
    3bfe:	88 23       	and	r24, r24
    3c00:	09 f4       	brne	.+2      	; 0x3c04 <__vector_29+0x3b2>
    3c02:	94 ce       	rjmp	.-728    	; 0x392c <__vector_29+0xda>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    3c04:	90 91 00 01 	lds	r25, 0x0100
    3c08:	93 fd       	sbrc	r25, 3
    3c0a:	90 ce       	rjmp	.-736    	; 0x392c <__vector_29+0xda>
    3c0c:	90 91 00 01 	lds	r25, 0x0100
    3c10:	94 fd       	sbrc	r25, 4
    3c12:	8c ce       	rjmp	.-744    	; 0x392c <__vector_29+0xda>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    3c14:	48 2f       	mov	r20, r24
    3c16:	4f 5f       	subi	r20, 0xFF	; 255
    3c18:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    3c1c:	45 30       	cpi	r20, 0x05	; 5
    3c1e:	08 f4       	brcc	.+2      	; 0x3c22 <__vector_29+0x3d0>
    3c20:	85 ce       	rjmp	.-758    	; 0x392c <__vector_29+0xda>
					if(pwm_left != 0) {
    3c22:	80 91 f7 02 	lds	r24, 0x02F7
    3c26:	90 91 f8 02 	lds	r25, 0x02F8
    3c2a:	00 97       	sbiw	r24, 0x00	; 0
    3c2c:	51 f0       	breq	.+20     	; 0x3c42 <__vector_29+0x3f0>
						left_vel_sum += value;
    3c2e:	80 91 ed 02 	lds	r24, 0x02ED
    3c32:	90 91 ee 02 	lds	r25, 0x02EE
    3c36:	82 0f       	add	r24, r18
    3c38:	93 1f       	adc	r25, r19
    3c3a:	90 93 ee 02 	sts	0x02EE, r25
    3c3e:	80 93 ed 02 	sts	0x02ED, r24
					}
					if(firstSampleLeft==8) {
    3c42:	48 30       	cpi	r20, 0x08	; 8
    3c44:	09 f0       	breq	.+2      	; 0x3c48 <__vector_29+0x3f6>
    3c46:	72 ce       	rjmp	.-796    	; 0x392c <__vector_29+0xda>
						firstSampleLeft = 0;
    3c48:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	80 93 07 02 	sts	0x0207, r24
    3c52:	6c ce       	rjmp	.-808    	; 0x392c <__vector_29+0xda>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    3c54:	80 91 25 02 	lds	r24, 0x0225
    3c58:	80 93 23 02 	sts	0x0223, r24
			leftChannelPhase = leftMotorPhase;
    3c5c:	80 91 28 02 	lds	r24, 0x0228
    3c60:	80 93 bc 02 	sts	0x02BC, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    3c64:	80 91 bb 02 	lds	r24, 0x02BB
    3c68:	88 23       	and	r24, r24
    3c6a:	09 f0       	breq	.+2      	; 0x3c6e <__vector_29+0x41c>
    3c6c:	54 c0       	rjmp	.+168    	; 0x3d16 <__vector_29+0x4c4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3c6e:	81 e0       	ldi	r24, 0x01	; 1
    3c70:	80 93 b9 02 	sts	0x02B9, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    3c74:	84 e0       	ldi	r24, 0x04	; 4
    3c76:	80 93 ba 02 	sts	0x02BA, r24
			break;
    3c7a:	73 ce       	rjmp	.-794    	; 0x3962 <__vector_29+0x110>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    3c7c:	80 91 09 02 	lds	r24, 0x0209
    3c80:	88 23       	and	r24, r24
    3c82:	09 f4       	brne	.+2      	; 0x3c86 <__vector_29+0x434>
    3c84:	53 ce       	rjmp	.-858    	; 0x392c <__vector_29+0xda>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    3c86:	63 99       	sbic	0x0c, 3	; 12
    3c88:	51 ce       	rjmp	.-862    	; 0x392c <__vector_29+0xda>
    3c8a:	64 99       	sbic	0x0c, 4	; 12
    3c8c:	4f ce       	rjmp	.-866    	; 0x392c <__vector_29+0xda>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    3c8e:	48 2f       	mov	r20, r24
    3c90:	4f 5f       	subi	r20, 0xFF	; 255
    3c92:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    3c96:	45 30       	cpi	r20, 0x05	; 5
    3c98:	08 f4       	brcc	.+2      	; 0x3c9c <__vector_29+0x44a>
    3c9a:	48 ce       	rjmp	.-880    	; 0x392c <__vector_29+0xda>
					if(pwm_right != 0) {
    3c9c:	80 91 f5 02 	lds	r24, 0x02F5
    3ca0:	90 91 f6 02 	lds	r25, 0x02F6
    3ca4:	00 97       	sbiw	r24, 0x00	; 0
    3ca6:	51 f0       	breq	.+20     	; 0x3cbc <__vector_29+0x46a>
						right_vel_sum += value;
    3ca8:	80 91 ef 02 	lds	r24, 0x02EF
    3cac:	90 91 f0 02 	lds	r25, 0x02F0
    3cb0:	82 0f       	add	r24, r18
    3cb2:	93 1f       	adc	r25, r19
    3cb4:	90 93 f0 02 	sts	0x02F0, r25
    3cb8:	80 93 ef 02 	sts	0x02EF, r24
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    3cbc:	48 30       	cpi	r20, 0x08	; 8
    3cbe:	09 f0       	breq	.+2      	; 0x3cc2 <__vector_29+0x470>
    3cc0:	35 ce       	rjmp	.-918    	; 0x392c <__vector_29+0xda>
						firstSampleRight = 0;
    3cc2:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	80 93 08 02 	sts	0x0208, r24
    3ccc:	2f ce       	rjmp	.-930    	; 0x392c <__vector_29+0xda>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    3cce:	80 91 e1 02 	lds	r24, 0x02E1
    3cd2:	90 91 e2 02 	lds	r25, 0x02E2
    3cd6:	82 0f       	add	r24, r18
    3cd8:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    3cda:	96 95       	lsr	r25
    3cdc:	87 95       	ror	r24
    3cde:	90 93 e2 02 	sts	0x02E2, r25
    3ce2:	80 93 e1 02 	sts	0x02E1, r24
			break;
    3ce6:	22 ce       	rjmp	.-956    	; 0x392c <__vector_29+0xda>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    3ce8:	21 30       	cpi	r18, 0x01	; 1
    3cea:	11 f0       	breq	.+4      	; 0x3cf0 <__vector_29+0x49e>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    3cec:	22 30       	cpi	r18, 0x02	; 2
    3cee:	81 f4       	brne	.+32     	; 0x3d10 <__vector_29+0x4be>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    3cf0:	40 91 05 01 	lds	r20, 0x0105
    3cf4:	40 97       	sbiw	r24, 0x10	; 16
    3cf6:	95 95       	asr	r25
    3cf8:	87 95       	ror	r24
    3cfa:	21 e0       	ldi	r18, 0x01	; 1
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	02 c0       	rjmp	.+4      	; 0x3d04 <__vector_29+0x4b2>
    3d00:	22 0f       	add	r18, r18
    3d02:	33 1f       	adc	r19, r19
    3d04:	8a 95       	dec	r24
    3d06:	e2 f7       	brpl	.-8      	; 0x3d00 <__vector_29+0x4ae>
    3d08:	20 95       	com	r18
    3d0a:	24 23       	and	r18, r20
    3d0c:	20 93 05 01 	sts	0x0105, r18
    3d10:	80 91 ba 02 	lds	r24, 0x02BA
    3d14:	26 ce       	rjmp	.-948    	; 0x3962 <__vector_29+0x110>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3d16:	81 30       	cpi	r24, 0x01	; 1
    3d18:	d1 f1       	breq	.+116    	; 0x3d8e <__vector_29+0x53c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3d1a:	85 e0       	ldi	r24, 0x05	; 5
    3d1c:	80 93 b9 02 	sts	0x02B9, r24
    3d20:	a9 cf       	rjmp	.-174    	; 0x3c74 <__vector_29+0x422>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3d22:	91 30       	cpi	r25, 0x01	; 1
    3d24:	09 f0       	breq	.+2      	; 0x3d28 <__vector_29+0x4d6>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3d26:	85 e0       	ldi	r24, 0x05	; 5
    3d28:	80 93 b9 02 	sts	0x02B9, r24
    3d2c:	e9 ce       	rjmp	.-558    	; 0x3b00 <__vector_29+0x2ae>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3d2e:	81 30       	cpi	r24, 0x01	; 1
    3d30:	b1 f1       	breq	.+108    	; 0x3d9e <__vector_29+0x54c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3d32:	85 e0       	ldi	r24, 0x05	; 5
    3d34:	80 93 b9 02 	sts	0x02B9, r24
    3d38:	11 ce       	rjmp	.-990    	; 0x395c <__vector_29+0x10a>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3d3a:	81 30       	cpi	r24, 0x01	; 1
    3d3c:	61 f1       	breq	.+88     	; 0x3d96 <__vector_29+0x544>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3d3e:	85 e0       	ldi	r24, 0x05	; 5
    3d40:	80 93 b9 02 	sts	0x02B9, r24
    3d44:	56 cf       	rjmp	.-340    	; 0x3bf2 <__vector_29+0x3a0>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    3d46:	10 92 66 04 	sts	0x0466, r1
    3d4a:	b8 ce       	rjmp	.-656    	; 0x3abc <__vector_29+0x26a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    3d4c:	66 95       	lsr	r22
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	02 c0       	rjmp	.+4      	; 0x3d58 <__vector_29+0x506>
    3d54:	88 0f       	add	r24, r24
    3d56:	99 1f       	adc	r25, r25
    3d58:	6a 95       	dec	r22
    3d5a:	e2 f7       	brpl	.-8      	; 0x3d54 <__vector_29+0x502>
    3d5c:	82 b9       	out	0x02, r24	; 2
    3d5e:	80 91 ba 02 	lds	r24, 0x02BA
    3d62:	ff cd       	rjmp	.-1026   	; 0x3962 <__vector_29+0x110>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    3d64:	80 91 bf 02 	lds	r24, 0x02BF
    3d68:	81 30       	cpi	r24, 0x01	; 1
    3d6a:	a1 f1       	breq	.+104    	; 0x3dd4 <__vector_29+0x582>
    3d6c:	80 e0       	ldi	r24, 0x00	; 0
    3d6e:	f9 cd       	rjmp	.-1038   	; 0x3962 <__vector_29+0x110>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3d70:	80 91 bf 02 	lds	r24, 0x02BF
    3d74:	82 30       	cpi	r24, 0x02	; 2
    3d76:	09 f0       	breq	.+2      	; 0x3d7a <__vector_29+0x528>
    3d78:	1f ce       	rjmp	.-962    	; 0x39b8 <__vector_29+0x166>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    3d7a:	30 93 be 02 	sts	0x02BE, r19
    3d7e:	20 93 bd 02 	sts	0x02BD, r18
				measBattery = 0;
    3d82:	10 92 bf 02 	sts	0x02BF, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    3d86:	46 98       	cbi	0x08, 6	; 8
    3d88:	4e e0       	ldi	r20, 0x0E	; 14
    3d8a:	50 e0       	ldi	r21, 0x00	; 0
    3d8c:	1e ce       	rjmp	.-964    	; 0x39ca <__vector_29+0x178>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3d8e:	82 e0       	ldi	r24, 0x02	; 2
    3d90:	80 93 b9 02 	sts	0x02B9, r24
    3d94:	6f cf       	rjmp	.-290    	; 0x3c74 <__vector_29+0x422>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    3d96:	84 e0       	ldi	r24, 0x04	; 4
    3d98:	80 93 b9 02 	sts	0x02B9, r24
    3d9c:	2a cf       	rjmp	.-428    	; 0x3bf2 <__vector_29+0x3a0>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3d9e:	82 e0       	ldi	r24, 0x02	; 2
    3da0:	80 93 b9 02 	sts	0x02B9, r24
    3da4:	db cd       	rjmp	.-1098   	; 0x395c <__vector_29+0x10a>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    3da6:	11 82       	std	Z+1, r1	; 0x01
    3da8:	10 82       	st	Z, r1
    3daa:	80 e0       	ldi	r24, 0x00	; 0
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	3a ce       	rjmp	.-908    	; 0x3a24 <__vector_29+0x1d2>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    3db0:	ac 01       	movw	r20, r24
    3db2:	44 5c       	subi	r20, 0xC4	; 196
    3db4:	5f 4f       	sbci	r21, 0xFF	; 255
    3db6:	55 95       	asr	r21
    3db8:	47 95       	ror	r20
    3dba:	48 37       	cpi	r20, 0x78	; 120
    3dbc:	51 05       	cpc	r21, r1
    3dbe:	7c f4       	brge	.+30     	; 0x3dde <__vector_29+0x58c>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    3dc0:	2f 53       	subi	r18, 0x3F	; 63
    3dc2:	3d 4f       	sbci	r19, 0xFD	; 253
    3dc4:	cc 97       	sbiw	r24, 0x3c	; 60
    3dc6:	95 95       	asr	r25
    3dc8:	87 95       	ror	r24
    3dca:	cc 96       	adiw	r24, 0x3c	; 60
    3dcc:	f9 01       	movw	r30, r18
    3dce:	91 83       	std	Z+1, r25	; 0x01
    3dd0:	80 83       	st	Z, r24
    3dd2:	33 ce       	rjmp	.-922    	; 0x3a3a <__vector_29+0x1e8>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    3dd4:	82 e0       	ldi	r24, 0x02	; 2
    3dd6:	80 93 bf 02 	sts	0x02BF, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    3dda:	46 9a       	sbi	0x08, 6	; 8
    3ddc:	98 ce       	rjmp	.-720    	; 0x3b0e <__vector_29+0x2bc>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    3dde:	ac 01       	movw	r20, r24
    3de0:	44 5d       	subi	r20, 0xD4	; 212
    3de2:	5e 4f       	sbci	r21, 0xFE	; 254
    3de4:	55 95       	asr	r21
    3de6:	47 95       	ror	r20
    3de8:	55 95       	asr	r21
    3dea:	47 95       	ror	r20
    3dec:	44 3b       	cpi	r20, 0xB4	; 180
    3dee:	51 05       	cpc	r21, r1
    3df0:	74 f4       	brge	.+28     	; 0x3e0e <__vector_29+0x5bc>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    3df2:	2f 53       	subi	r18, 0x3F	; 63
    3df4:	3d 4f       	sbci	r19, 0xFD	; 253
    3df6:	84 5b       	subi	r24, 0xB4	; 180
    3df8:	90 40       	sbci	r25, 0x00	; 0
    3dfa:	95 95       	asr	r25
    3dfc:	87 95       	ror	r24
    3dfe:	95 95       	asr	r25
    3e00:	87 95       	ror	r24
    3e02:	88 58       	subi	r24, 0x88	; 136
    3e04:	9f 4f       	sbci	r25, 0xFF	; 255
    3e06:	f9 01       	movw	r30, r18
    3e08:	91 83       	std	Z+1, r25	; 0x01
    3e0a:	80 83       	st	Z, r24
    3e0c:	16 ce       	rjmp	.-980    	; 0x3a3a <__vector_29+0x1e8>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    3e0e:	2f 53       	subi	r18, 0x3F	; 63
    3e10:	3d 4f       	sbci	r19, 0xFD	; 253
    3e12:	84 5a       	subi	r24, 0xA4	; 164
    3e14:	91 40       	sbci	r25, 0x01	; 1
    3e16:	95 95       	asr	r25
    3e18:	87 95       	ror	r24
    3e1a:	95 95       	asr	r25
    3e1c:	87 95       	ror	r24
    3e1e:	95 95       	asr	r25
    3e20:	87 95       	ror	r24
    3e22:	8c 54       	subi	r24, 0x4C	; 76
    3e24:	9f 4f       	sbci	r25, 0xFF	; 255
    3e26:	f9 01       	movw	r30, r18
    3e28:	91 83       	std	Z+1, r25	; 0x01
    3e2a:	80 83       	st	Z, r24
    3e2c:	06 ce       	rjmp	.-1012   	; 0x3a3a <__vector_29+0x1e8>

00003e2e <initMotors>:

#include "motors.h"

void initMotors() {
    3e2e:	0f 93       	push	r16
    3e30:	1f 93       	push	r17
    3e32:	cf 93       	push	r28
    3e34:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    3e36:	e0 e9       	ldi	r30, 0x90	; 144
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	10 82       	st	Z, r1
	TCCR3B = 0;
    3e3c:	41 e9       	ldi	r20, 0x91	; 145
    3e3e:	50 e0       	ldi	r21, 0x00	; 0
    3e40:	da 01       	movw	r26, r20
    3e42:	1c 92       	st	X, r1
	TIMSK3 = 0;
    3e44:	21 e7       	ldi	r18, 0x71	; 113
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	e9 01       	movw	r28, r18
    3e4a:	18 82       	st	Y, r1
	TCCR4A = 0;
    3e4c:	a0 ea       	ldi	r26, 0xA0	; 160
    3e4e:	b0 e0       	ldi	r27, 0x00	; 0
    3e50:	1c 92       	st	X, r1
	TCCR4B = 0;
    3e52:	81 ea       	ldi	r24, 0xA1	; 161
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	ec 01       	movw	r28, r24
    3e58:	18 82       	st	Y, r1
	TIMSK4 = 0;
    3e5a:	02 e7       	ldi	r16, 0x72	; 114
    3e5c:	10 e0       	ldi	r17, 0x00	; 0
    3e5e:	e8 01       	movw	r28, r16
    3e60:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    3e62:	60 81       	ld	r22, Z
    3e64:	63 68       	ori	r22, 0x83	; 131
    3e66:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    3e68:	60 81       	ld	r22, Z
    3e6a:	63 60       	ori	r22, 0x03	; 3
    3e6c:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3e6e:	ea 01       	movw	r28, r20
    3e70:	68 81       	ld	r22, Y
    3e72:	6b 60       	ori	r22, 0x0B	; 11
    3e74:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    3e76:	40 91 f5 02 	lds	r20, 0x02F5
    3e7a:	50 91 f6 02 	lds	r21, 0x02F6
    3e7e:	50 93 99 00 	sts	0x0099, r21
    3e82:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    3e86:	10 92 9b 00 	sts	0x009B, r1
    3e8a:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    3e8e:	e9 01       	movw	r28, r18
    3e90:	48 81       	ld	r20, Y
    3e92:	41 60       	ori	r20, 0x01	; 1
    3e94:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3e96:	20 81       	ld	r18, Z
    3e98:	2f 75       	andi	r18, 0x5F	; 95
    3e9a:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3e9c:	2e b1       	in	r18, 0x0e	; 14
    3e9e:	27 7e       	andi	r18, 0xE7	; 231
    3ea0:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    3ea2:	2c 91       	ld	r18, X
    3ea4:	23 68       	ori	r18, 0x83	; 131
    3ea6:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	20 81       	ld	r18, Z
    3eac:	2b 60       	ori	r18, 0x0B	; 11
    3eae:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    3eb0:	80 91 f7 02 	lds	r24, 0x02F7
    3eb4:	90 91 f8 02 	lds	r25, 0x02F8
    3eb8:	90 93 a9 00 	sts	0x00A9, r25
    3ebc:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    3ec0:	10 92 ab 00 	sts	0x00AB, r1
    3ec4:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    3ec8:	e8 01       	movw	r28, r16
    3eca:	88 81       	ld	r24, Y
    3ecc:	81 60       	ori	r24, 0x01	; 1
    3ece:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3ed0:	8c 91       	ld	r24, X
    3ed2:	8f 75       	andi	r24, 0x5F	; 95
    3ed4:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3ed6:	e2 e0       	ldi	r30, 0x02	; 2
    3ed8:	f1 e0       	ldi	r31, 0x01	; 1
    3eda:	80 81       	ld	r24, Z
    3edc:	87 7e       	andi	r24, 0xE7	; 231
    3ede:	80 83       	st	Z, r24


}
    3ee0:	df 91       	pop	r29
    3ee2:	cf 91       	pop	r28
    3ee4:	1f 91       	pop	r17
    3ee6:	0f 91       	pop	r16
    3ee8:	08 95       	ret

00003eea <cast_speed>:

signed int cast_speed(signed int vel) {
    3eea:	28 2f       	mov	r18, r24
    3eec:	39 2f       	mov	r19, r25
    3eee:	8e ef       	ldi	r24, 0xFE	; 254
    3ef0:	20 30       	cpi	r18, 0x00	; 0
    3ef2:	38 07       	cpc	r19, r24
    3ef4:	14 f4       	brge	.+4      	; 0x3efa <cast_speed+0x10>
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	3e ef       	ldi	r19, 0xFE	; 254
    3efa:	82 e0       	ldi	r24, 0x02	; 2
    3efc:	21 30       	cpi	r18, 0x01	; 1
    3efe:	38 07       	cpc	r19, r24
    3f00:	14 f0       	brlt	.+4      	; 0x3f06 <cast_speed+0x1c>
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	32 e0       	ldi	r19, 0x02	; 2
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    3f06:	c9 01       	movw	r24, r18
    3f08:	08 95       	ret

00003f0a <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    3f0a:	80 91 07 02 	lds	r24, 0x0207
    3f0e:	88 23       	and	r24, r24
    3f10:	c1 f1       	breq	.+112    	; 0x3f82 <handleMotorsWithNoController+0x78>
		last_left_vel = left_vel_sum>>2;
    3f12:	60 91 ed 02 	lds	r22, 0x02ED
    3f16:	70 91 ee 02 	lds	r23, 0x02EE
    3f1a:	76 95       	lsr	r23
    3f1c:	67 95       	ror	r22
    3f1e:	76 95       	lsr	r23
    3f20:	67 95       	ror	r22
    3f22:	70 93 f2 02 	sts	0x02F2, r23
    3f26:	60 93 f1 02 	sts	0x02F1, r22
		compute_left_vel = 0;
    3f2a:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    3f2e:	10 92 ee 02 	sts	0x02EE, r1
    3f32:	10 92 ed 02 	sts	0x02ED, r1

		if(pwm_left_desired >= 0) {
    3f36:	80 91 fb 02 	lds	r24, 0x02FB
    3f3a:	90 91 fc 02 	lds	r25, 0x02FC
    3f3e:	97 fd       	sbrc	r25, 7
    3f40:	e3 c0       	rjmp	.+454    	; 0x4108 <handleMotorsWithNoController+0x1fe>
			leftMotSteps += (last_left_vel>>3);
    3f42:	75 95       	asr	r23
    3f44:	67 95       	ror	r22
    3f46:	75 95       	asr	r23
    3f48:	67 95       	ror	r22
    3f4a:	75 95       	asr	r23
    3f4c:	67 95       	ror	r22
    3f4e:	88 27       	eor	r24, r24
    3f50:	77 fd       	sbrc	r23, 7
    3f52:	80 95       	com	r24
    3f54:	98 2f       	mov	r25, r24
    3f56:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    3f5a:	9b 01       	movw	r18, r22
    3f5c:	ac 01       	movw	r20, r24
    3f5e:	60 91 d5 02 	lds	r22, 0x02D5
    3f62:	70 91 d6 02 	lds	r23, 0x02D6
    3f66:	80 91 d7 02 	lds	r24, 0x02D7
    3f6a:	90 91 d8 02 	lds	r25, 0x02D8
    3f6e:	0e 94 af 3c 	call	0x795e	; 0x795e <__addsf3>
    3f72:	60 93 d5 02 	sts	0x02D5, r22
    3f76:	70 93 d6 02 	sts	0x02D6, r23
    3f7a:	80 93 d7 02 	sts	0x02D7, r24
    3f7e:	90 93 d8 02 	sts	0x02D8, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    3f82:	80 91 08 02 	lds	r24, 0x0208
    3f86:	88 23       	and	r24, r24
    3f88:	c1 f1       	breq	.+112    	; 0x3ffa <handleMotorsWithNoController+0xf0>
		last_right_vel = right_vel_sum>>2;
    3f8a:	60 91 ef 02 	lds	r22, 0x02EF
    3f8e:	70 91 f0 02 	lds	r23, 0x02F0
    3f92:	76 95       	lsr	r23
    3f94:	67 95       	ror	r22
    3f96:	76 95       	lsr	r23
    3f98:	67 95       	ror	r22
    3f9a:	70 93 f4 02 	sts	0x02F4, r23
    3f9e:	60 93 f3 02 	sts	0x02F3, r22
		compute_right_vel = 0;
    3fa2:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    3fa6:	10 92 f0 02 	sts	0x02F0, r1
    3faa:	10 92 ef 02 	sts	0x02EF, r1

		if(pwm_right_desired >= 0) {
    3fae:	80 91 f9 02 	lds	r24, 0x02F9
    3fb2:	90 91 fa 02 	lds	r25, 0x02FA
    3fb6:	97 fd       	sbrc	r25, 7
    3fb8:	86 c0       	rjmp	.+268    	; 0x40c6 <handleMotorsWithNoController+0x1bc>
			rightMotSteps += (last_right_vel>>3);
    3fba:	75 95       	asr	r23
    3fbc:	67 95       	ror	r22
    3fbe:	75 95       	asr	r23
    3fc0:	67 95       	ror	r22
    3fc2:	75 95       	asr	r23
    3fc4:	67 95       	ror	r22
    3fc6:	88 27       	eor	r24, r24
    3fc8:	77 fd       	sbrc	r23, 7
    3fca:	80 95       	com	r24
    3fcc:	98 2f       	mov	r25, r24
    3fce:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    3fd2:	9b 01       	movw	r18, r22
    3fd4:	ac 01       	movw	r20, r24
    3fd6:	60 91 d1 02 	lds	r22, 0x02D1
    3fda:	70 91 d2 02 	lds	r23, 0x02D2
    3fde:	80 91 d3 02 	lds	r24, 0x02D3
    3fe2:	90 91 d4 02 	lds	r25, 0x02D4
    3fe6:	0e 94 af 3c 	call	0x795e	; 0x795e <__addsf3>
    3fea:	60 93 d1 02 	sts	0x02D1, r22
    3fee:	70 93 d2 02 	sts	0x02D2, r23
    3ff2:	80 93 d3 02 	sts	0x02D3, r24
    3ff6:	90 93 d4 02 	sts	0x02D4, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    3ffa:	20 91 fd 02 	lds	r18, 0x02FD
    3ffe:	30 91 fe 02 	lds	r19, 0x02FE
    4002:	c9 01       	movw	r24, r18
    4004:	88 0f       	add	r24, r24
    4006:	99 1f       	adc	r25, r25
    4008:	88 0f       	add	r24, r24
    400a:	99 1f       	adc	r25, r25
    400c:	82 0f       	add	r24, r18
    400e:	93 1f       	adc	r25, r19
    4010:	90 93 0c 03 	sts	0x030C, r25
    4014:	80 93 0b 03 	sts	0x030B, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    4018:	40 91 ff 02 	lds	r20, 0x02FF
    401c:	50 91 00 03 	lds	r21, 0x0300
    4020:	9a 01       	movw	r18, r20
    4022:	22 0f       	add	r18, r18
    4024:	33 1f       	adc	r19, r19
    4026:	22 0f       	add	r18, r18
    4028:	33 1f       	adc	r19, r19
    402a:	24 0f       	add	r18, r20
    402c:	35 1f       	adc	r19, r21
    402e:	52 2f       	mov	r21, r18
    4030:	43 2f       	mov	r20, r19
    4032:	20 93 0d 03 	sts	0x030D, r18
    4036:	30 93 0e 03 	sts	0x030E, r19
	if(obstacleAvoidanceEnabled) {
    403a:	20 91 64 04 	lds	r18, 0x0464
    403e:	22 23       	and	r18, r18
    4040:	39 f5       	brne	.+78     	; 0x4090 <handleMotorsWithNoController+0x186>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    4042:	50 93 f7 02 	sts	0x02F7, r21
    4046:	40 93 f8 02 	sts	0x02F8, r20
	pwm_right = pwm_right_working;
    404a:	90 93 f6 02 	sts	0x02F6, r25
    404e:	80 93 f5 02 	sts	0x02F5, r24

	if(pwm_right > 0) {
    4052:	18 16       	cp	r1, r24
    4054:	19 06       	cpc	r1, r25
    4056:	5c f5       	brge	.+86     	; 0x40ae <handleMotorsWithNoController+0x1a4>
		OCR3A = (unsigned int)pwm_right;
    4058:	90 93 99 00 	sts	0x0099, r25
    405c:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    4060:	80 91 f7 02 	lds	r24, 0x02F7
    4064:	90 91 f8 02 	lds	r25, 0x02F8
    4068:	18 16       	cp	r1, r24
    406a:	19 06       	cpc	r1, r25
    406c:	2c f4       	brge	.+10     	; 0x4078 <handleMotorsWithNoController+0x16e>
		OCR4A = (unsigned int)pwm_left;
    406e:	90 93 a9 00 	sts	0x00A9, r25
    4072:	80 93 a8 00 	sts	0x00A8, r24
    4076:	08 95       	ret
	} else if(pwm_left < 0) {
    4078:	00 97       	sbiw	r24, 0x00	; 0
    407a:	09 f0       	breq	.+2      	; 0x407e <handleMotorsWithNoController+0x174>
    407c:	6e c0       	rjmp	.+220    	; 0x415a <handleMotorsWithNoController+0x250>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    407e:	10 92 a9 00 	sts	0x00A9, r1
    4082:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    4086:	10 92 ab 00 	sts	0x00AB, r1
    408a:	10 92 aa 00 	sts	0x00AA, r1
    408e:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    4090:	8d e0       	ldi	r24, 0x0D	; 13
    4092:	93 e0       	ldi	r25, 0x03	; 3
    4094:	6b e0       	ldi	r22, 0x0B	; 11
    4096:	73 e0       	ldi	r23, 0x03	; 3
    4098:	0e 94 64 32 	call	0x64c8	; 0x64c8 <obstacleAvoidance>
    409c:	50 91 0d 03 	lds	r21, 0x030D
    40a0:	40 91 0e 03 	lds	r20, 0x030E
    40a4:	80 91 0b 03 	lds	r24, 0x030B
    40a8:	90 91 0c 03 	lds	r25, 0x030C
    40ac:	ca cf       	rjmp	.-108    	; 0x4042 <handleMotorsWithNoController+0x138>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    40ae:	00 97       	sbiw	r24, 0x00	; 0
    40b0:	09 f0       	breq	.+2      	; 0x40b4 <handleMotorsWithNoController+0x1aa>
    40b2:	4b c0       	rjmp	.+150    	; 0x414a <handleMotorsWithNoController+0x240>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    40b4:	10 92 99 00 	sts	0x0099, r1
    40b8:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    40bc:	10 92 9b 00 	sts	0x009B, r1
    40c0:	10 92 9a 00 	sts	0x009A, r1
    40c4:	cd cf       	rjmp	.-102    	; 0x4060 <handleMotorsWithNoController+0x156>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    40c6:	75 95       	asr	r23
    40c8:	67 95       	ror	r22
    40ca:	75 95       	asr	r23
    40cc:	67 95       	ror	r22
    40ce:	75 95       	asr	r23
    40d0:	67 95       	ror	r22
    40d2:	88 27       	eor	r24, r24
    40d4:	77 fd       	sbrc	r23, 7
    40d6:	80 95       	com	r24
    40d8:	98 2f       	mov	r25, r24
    40da:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    40de:	9b 01       	movw	r18, r22
    40e0:	ac 01       	movw	r20, r24
    40e2:	60 91 d1 02 	lds	r22, 0x02D1
    40e6:	70 91 d2 02 	lds	r23, 0x02D2
    40ea:	80 91 d3 02 	lds	r24, 0x02D3
    40ee:	90 91 d4 02 	lds	r25, 0x02D4
    40f2:	0e 94 ae 3c 	call	0x795c	; 0x795c <__subsf3>
    40f6:	60 93 d1 02 	sts	0x02D1, r22
    40fa:	70 93 d2 02 	sts	0x02D2, r23
    40fe:	80 93 d3 02 	sts	0x02D3, r24
    4102:	90 93 d4 02 	sts	0x02D4, r25
    4106:	79 cf       	rjmp	.-270    	; 0x3ffa <handleMotorsWithNoController+0xf0>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    4108:	75 95       	asr	r23
    410a:	67 95       	ror	r22
    410c:	75 95       	asr	r23
    410e:	67 95       	ror	r22
    4110:	75 95       	asr	r23
    4112:	67 95       	ror	r22
    4114:	88 27       	eor	r24, r24
    4116:	77 fd       	sbrc	r23, 7
    4118:	80 95       	com	r24
    411a:	98 2f       	mov	r25, r24
    411c:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4120:	9b 01       	movw	r18, r22
    4122:	ac 01       	movw	r20, r24
    4124:	60 91 d5 02 	lds	r22, 0x02D5
    4128:	70 91 d6 02 	lds	r23, 0x02D6
    412c:	80 91 d7 02 	lds	r24, 0x02D7
    4130:	90 91 d8 02 	lds	r25, 0x02D8
    4134:	0e 94 ae 3c 	call	0x795c	; 0x795c <__subsf3>
    4138:	60 93 d5 02 	sts	0x02D5, r22
    413c:	70 93 d6 02 	sts	0x02D6, r23
    4140:	80 93 d7 02 	sts	0x02D7, r24
    4144:	90 93 d8 02 	sts	0x02D8, r25
    4148:	1c cf       	rjmp	.-456    	; 0x3f82 <handleMotorsWithNoController+0x78>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    414a:	90 95       	com	r25
    414c:	81 95       	neg	r24
    414e:	9f 4f       	sbci	r25, 0xFF	; 255
    4150:	90 93 9b 00 	sts	0x009B, r25
    4154:	80 93 9a 00 	sts	0x009A, r24
    4158:	83 cf       	rjmp	.-250    	; 0x4060 <handleMotorsWithNoController+0x156>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    415a:	90 95       	com	r25
    415c:	81 95       	neg	r24
    415e:	9f 4f       	sbci	r25, 0xFF	; 255
    4160:	90 93 ab 00 	sts	0x00AB, r25
    4164:	80 93 aa 00 	sts	0x00AA, r24
    4168:	08 95       	ret

0000416a <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    416a:	28 2f       	mov	r18, r24
    416c:	33 27       	eor	r19, r19
    416e:	27 fd       	sbrc	r18, 7
    4170:	30 95       	com	r19
    4172:	37 fd       	sbrc	r19, 7
    4174:	13 c0       	rjmp	.+38     	; 0x419c <setLeftSpeed+0x32>
    4176:	30 93 10 03 	sts	0x0310, r19
    417a:	20 93 0f 03 	sts	0x030F, r18

    if(vel >= 0) {
    417e:	87 fd       	sbrc	r24, 7
    4180:	05 c0       	rjmp	.+10     	; 0x418c <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    4182:	30 93 fc 02 	sts	0x02FC, r19
    4186:	20 93 fb 02 	sts	0x02FB, r18
    418a:	08 95       	ret
    418c:	30 95       	com	r19
    418e:	21 95       	neg	r18
    4190:	3f 4f       	sbci	r19, 0xFF	; 255
    4192:	30 93 fc 02 	sts	0x02FC, r19
    4196:	20 93 fb 02 	sts	0x02FB, r18
    419a:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    419c:	30 95       	com	r19
    419e:	21 95       	neg	r18
    41a0:	3f 4f       	sbci	r19, 0xFF	; 255
    41a2:	e9 cf       	rjmp	.-46     	; 0x4176 <setLeftSpeed+0xc>

000041a4 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    41a4:	28 2f       	mov	r18, r24
    41a6:	33 27       	eor	r19, r19
    41a8:	27 fd       	sbrc	r18, 7
    41aa:	30 95       	com	r19
    41ac:	37 fd       	sbrc	r19, 7
    41ae:	13 c0       	rjmp	.+38     	; 0x41d6 <setRightSpeed+0x32>
    41b0:	30 93 12 03 	sts	0x0312, r19
    41b4:	20 93 11 03 	sts	0x0311, r18

    if(vel >= 0) {
    41b8:	87 fd       	sbrc	r24, 7
    41ba:	05 c0       	rjmp	.+10     	; 0x41c6 <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    41bc:	30 93 fa 02 	sts	0x02FA, r19
    41c0:	20 93 f9 02 	sts	0x02F9, r18
    41c4:	08 95       	ret
    41c6:	30 95       	com	r19
    41c8:	21 95       	neg	r18
    41ca:	3f 4f       	sbci	r19, 0xFF	; 255
    41cc:	30 93 fa 02 	sts	0x02FA, r19
    41d0:	20 93 f9 02 	sts	0x02F9, r18
    41d4:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    41d6:	30 95       	com	r19
    41d8:	21 95       	neg	r18
    41da:	3f 4f       	sbci	r19, 0xFF	; 255
    41dc:	e9 cf       	rjmp	.-46     	; 0x41b0 <setRightSpeed+0xc>

000041de <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    41de:	80 91 be 04 	lds	r24, 0x04BE
    41e2:	88 23       	and	r24, r24
    41e4:	89 f5       	brne	.+98     	; 0x4248 <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    41e6:	e0 91 c2 04 	lds	r30, 0x04C2
    41ea:	e2 30       	cpi	r30, 0x02	; 2
    41ec:	08 f4       	brcc	.+2      	; 0x41f0 <updateOdomData+0x12>
    41ee:	96 c0       	rjmp	.+300    	; 0x431c <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    41f0:	f0 e0       	ldi	r31, 0x00	; 0
    41f2:	df 01       	movw	r26, r30
    41f4:	a2 95       	swap	r26
    41f6:	b2 95       	swap	r27
    41f8:	b0 7f       	andi	r27, 0xF0	; 240
    41fa:	ba 27       	eor	r27, r26
    41fc:	a0 7f       	andi	r26, 0xF0	; 240
    41fe:	ba 27       	eor	r27, r26
    4200:	ab 54       	subi	r26, 0x4B	; 75
    4202:	bb 4f       	sbci	r27, 0xFB	; 251
    4204:	12 96       	adiw	r26, 0x02	; 2
    4206:	2d 91       	ld	r18, X+
    4208:	3c 91       	ld	r19, X
    420a:	13 97       	sbiw	r26, 0x03	; 3
    420c:	80 91 81 05 	lds	r24, 0x0581
    4210:	90 91 82 05 	lds	r25, 0x0582
    4214:	28 17       	cp	r18, r24
    4216:	39 07       	cpc	r19, r25
    4218:	34 f0       	brlt	.+12     	; 0x4226 <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    421a:	c9 01       	movw	r24, r18
    421c:	01 96       	adiw	r24, 0x01	; 1
    421e:	90 93 82 05 	sts	0x0582, r25
    4222:	80 93 81 05 	sts	0x0581, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    4226:	e2 95       	swap	r30
    4228:	f2 95       	swap	r31
    422a:	f0 7f       	andi	r31, 0xF0	; 240
    422c:	fe 27       	eor	r31, r30
    422e:	e0 7f       	andi	r30, 0xF0	; 240
    4230:	fe 27       	eor	r31, r30
    4232:	eb 53       	subi	r30, 0x3B	; 59
    4234:	fb 4f       	sbci	r31, 0xFB	; 251
    4236:	20 91 a8 04 	lds	r18, 0x04A8
    423a:	30 91 a9 04 	lds	r19, 0x04A9
    423e:	31 83       	std	Z+1, r19	; 0x01
    4240:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    4242:	93 83       	std	Z+3, r25	; 0x03
    4244:	82 83       	std	Z+2, r24	; 0x02
    4246:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4248:	81 30       	cpi	r24, 0x01	; 1
    424a:	31 f0       	breq	.+12     	; 0x4258 <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    424c:	82 30       	cpi	r24, 0x02	; 2
    424e:	09 f4       	brne	.+2      	; 0x4252 <updateOdomData+0x74>
    4250:	6b c0       	rjmp	.+214    	; 0x4328 <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    4252:	83 30       	cpi	r24, 0x03	; 3
    4254:	91 f1       	breq	.+100    	; 0x42ba <updateOdomData+0xdc>
    4256:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4258:	e0 91 c2 04 	lds	r30, 0x04C2
    425c:	e2 30       	cpi	r30, 0x02	; 2
    425e:	08 f4       	brcc	.+2      	; 0x4262 <updateOdomData+0x84>
    4260:	93 c0       	rjmp	.+294    	; 0x4388 <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    4262:	f0 e0       	ldi	r31, 0x00	; 0
    4264:	df 01       	movw	r26, r30
    4266:	a2 95       	swap	r26
    4268:	b2 95       	swap	r27
    426a:	b0 7f       	andi	r27, 0xF0	; 240
    426c:	ba 27       	eor	r27, r26
    426e:	a0 7f       	andi	r26, 0xF0	; 240
    4270:	ba 27       	eor	r27, r26
    4272:	ab 54       	subi	r26, 0x4B	; 75
    4274:	bb 4f       	sbci	r27, 0xFB	; 251
    4276:	16 96       	adiw	r26, 0x06	; 6
    4278:	2d 91       	ld	r18, X+
    427a:	3c 91       	ld	r19, X
    427c:	17 97       	sbiw	r26, 0x07	; 7
    427e:	80 91 81 05 	lds	r24, 0x0581
    4282:	90 91 82 05 	lds	r25, 0x0582
    4286:	28 17       	cp	r18, r24
    4288:	39 07       	cpc	r19, r25
    428a:	34 f0       	brlt	.+12     	; 0x4298 <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    428c:	c9 01       	movw	r24, r18
    428e:	01 96       	adiw	r24, 0x01	; 1
    4290:	90 93 82 05 	sts	0x0582, r25
    4294:	80 93 81 05 	sts	0x0581, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    4298:	e2 95       	swap	r30
    429a:	f2 95       	swap	r31
    429c:	f0 7f       	andi	r31, 0xF0	; 240
    429e:	fe 27       	eor	r31, r30
    42a0:	e0 7f       	andi	r30, 0xF0	; 240
    42a2:	fe 27       	eor	r31, r30
    42a4:	eb 53       	subi	r30, 0x3B	; 59
    42a6:	fb 4f       	sbci	r31, 0xFB	; 251
    42a8:	20 91 aa 04 	lds	r18, 0x04AA
    42ac:	30 91 ab 04 	lds	r19, 0x04AB
    42b0:	35 83       	std	Z+5, r19	; 0x05
    42b2:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    42b4:	97 83       	std	Z+7, r25	; 0x07
    42b6:	86 83       	std	Z+6, r24	; 0x06
    42b8:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    42ba:	e0 91 c2 04 	lds	r30, 0x04C2
    42be:	e2 30       	cpi	r30, 0x02	; 2
    42c0:	08 f4       	brcc	.+2      	; 0x42c4 <updateOdomData+0xe6>
    42c2:	68 c0       	rjmp	.+208    	; 0x4394 <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    42c4:	f0 e0       	ldi	r31, 0x00	; 0
    42c6:	df 01       	movw	r26, r30
    42c8:	a2 95       	swap	r26
    42ca:	b2 95       	swap	r27
    42cc:	b0 7f       	andi	r27, 0xF0	; 240
    42ce:	ba 27       	eor	r27, r26
    42d0:	a0 7f       	andi	r26, 0xF0	; 240
    42d2:	ba 27       	eor	r27, r26
    42d4:	ab 54       	subi	r26, 0x4B	; 75
    42d6:	bb 4f       	sbci	r27, 0xFB	; 251
    42d8:	1e 96       	adiw	r26, 0x0e	; 14
    42da:	2d 91       	ld	r18, X+
    42dc:	3c 91       	ld	r19, X
    42de:	1f 97       	sbiw	r26, 0x0f	; 15
    42e0:	80 91 81 05 	lds	r24, 0x0581
    42e4:	90 91 82 05 	lds	r25, 0x0582
    42e8:	28 17       	cp	r18, r24
    42ea:	39 07       	cpc	r19, r25
    42ec:	34 f0       	brlt	.+12     	; 0x42fa <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    42ee:	c9 01       	movw	r24, r18
    42f0:	01 96       	adiw	r24, 0x01	; 1
    42f2:	90 93 82 05 	sts	0x0582, r25
    42f6:	80 93 81 05 	sts	0x0581, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    42fa:	e2 95       	swap	r30
    42fc:	f2 95       	swap	r31
    42fe:	f0 7f       	andi	r31, 0xF0	; 240
    4300:	fe 27       	eor	r31, r30
    4302:	e0 7f       	andi	r30, 0xF0	; 240
    4304:	fe 27       	eor	r31, r30
    4306:	eb 53       	subi	r30, 0x3B	; 59
    4308:	fb 4f       	sbci	r31, 0xFB	; 251
    430a:	20 91 aa 04 	lds	r18, 0x04AA
    430e:	30 91 ab 04 	lds	r19, 0x04AB
    4312:	35 87       	std	Z+13, r19	; 0x0d
    4314:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    4316:	97 87       	std	Z+15, r25	; 0x0f
    4318:	86 87       	std	Z+14, r24	; 0x0e
    431a:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    431c:	f0 e0       	ldi	r31, 0x00	; 0
    431e:	80 91 81 05 	lds	r24, 0x0581
    4322:	90 91 82 05 	lds	r25, 0x0582
    4326:	7f cf       	rjmp	.-258    	; 0x4226 <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4328:	e0 91 c2 04 	lds	r30, 0x04C2
    432c:	e2 30       	cpi	r30, 0x02	; 2
    432e:	c0 f1       	brcs	.+112    	; 0x43a0 <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    4330:	f0 e0       	ldi	r31, 0x00	; 0
    4332:	df 01       	movw	r26, r30
    4334:	a2 95       	swap	r26
    4336:	b2 95       	swap	r27
    4338:	b0 7f       	andi	r27, 0xF0	; 240
    433a:	ba 27       	eor	r27, r26
    433c:	a0 7f       	andi	r26, 0xF0	; 240
    433e:	ba 27       	eor	r27, r26
    4340:	ab 54       	subi	r26, 0x4B	; 75
    4342:	bb 4f       	sbci	r27, 0xFB	; 251
    4344:	1a 96       	adiw	r26, 0x0a	; 10
    4346:	2d 91       	ld	r18, X+
    4348:	3c 91       	ld	r19, X
    434a:	1b 97       	sbiw	r26, 0x0b	; 11
    434c:	80 91 81 05 	lds	r24, 0x0581
    4350:	90 91 82 05 	lds	r25, 0x0582
    4354:	28 17       	cp	r18, r24
    4356:	39 07       	cpc	r19, r25
    4358:	34 f0       	brlt	.+12     	; 0x4366 <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    435a:	c9 01       	movw	r24, r18
    435c:	01 96       	adiw	r24, 0x01	; 1
    435e:	90 93 82 05 	sts	0x0582, r25
    4362:	80 93 81 05 	sts	0x0581, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    4366:	e2 95       	swap	r30
    4368:	f2 95       	swap	r31
    436a:	f0 7f       	andi	r31, 0xF0	; 240
    436c:	fe 27       	eor	r31, r30
    436e:	e0 7f       	andi	r30, 0xF0	; 240
    4370:	fe 27       	eor	r31, r30
    4372:	eb 53       	subi	r30, 0x3B	; 59
    4374:	fb 4f       	sbci	r31, 0xFB	; 251
    4376:	20 91 a8 04 	lds	r18, 0x04A8
    437a:	30 91 a9 04 	lds	r19, 0x04A9
    437e:	31 87       	std	Z+9, r19	; 0x09
    4380:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    4382:	93 87       	std	Z+11, r25	; 0x0b
    4384:	82 87       	std	Z+10, r24	; 0x0a
    4386:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4388:	f0 e0       	ldi	r31, 0x00	; 0
    438a:	80 91 81 05 	lds	r24, 0x0581
    438e:	90 91 82 05 	lds	r25, 0x0582
    4392:	82 cf       	rjmp	.-252    	; 0x4298 <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4394:	f0 e0       	ldi	r31, 0x00	; 0
    4396:	80 91 81 05 	lds	r24, 0x0581
    439a:	90 91 82 05 	lds	r25, 0x0582
    439e:	ad cf       	rjmp	.-166    	; 0x42fa <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    43a0:	f0 e0       	ldi	r31, 0x00	; 0
    43a2:	80 91 81 05 	lds	r24, 0x0581
    43a6:	90 91 82 05 	lds	r25, 0x0582
    43aa:	dd cf       	rjmp	.-70     	; 0x4366 <updateOdomData+0x188>

000043ac <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    43ac:	80 91 80 05 	lds	r24, 0x0580
    43b0:	82 30       	cpi	r24, 0x02	; 2
    43b2:	09 f4       	brne	.+2      	; 0x43b6 <handleCalibration+0xa>
    43b4:	d0 c0       	rjmp	.+416    	; 0x4556 <handleCalibration+0x1aa>
    43b6:	83 30       	cpi	r24, 0x03	; 3
    43b8:	08 f4       	brcc	.+2      	; 0x43bc <handleCalibration+0x10>
    43ba:	3f c0       	rjmp	.+126    	; 0x443a <handleCalibration+0x8e>
    43bc:	84 30       	cpi	r24, 0x04	; 4
    43be:	09 f4       	brne	.+2      	; 0x43c2 <handleCalibration+0x16>
    43c0:	91 c0       	rjmp	.+290    	; 0x44e4 <handleCalibration+0x138>
    43c2:	84 30       	cpi	r24, 0x04	; 4
    43c4:	08 f0       	brcs	.+2      	; 0x43c8 <handleCalibration+0x1c>
    43c6:	63 c0       	rjmp	.+198    	; 0x448e <handleCalibration+0xe2>
                calibState = 5;
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    43c8:	80 91 be 04 	lds	r24, 0x04BE
    43cc:	88 23       	and	r24, r24
    43ce:	09 f4       	brne	.+2      	; 0x43d2 <handleCalibration+0x26>
    43d0:	e1 c0       	rjmp	.+450    	; 0x4594 <handleCalibration+0x1e8>
    43d2:	82 30       	cpi	r24, 0x02	; 2
    43d4:	09 f4       	brne	.+2      	; 0x43d8 <handleCalibration+0x2c>
    43d6:	de c0       	rjmp	.+444    	; 0x4594 <handleCalibration+0x1e8>
                    updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<480) {
    43d8:	80 91 6f 02 	lds	r24, 0x026F
    43dc:	90 91 70 02 	lds	r25, 0x0270
    43e0:	21 e0       	ldi	r18, 0x01	; 1
    43e2:	80 3e       	cpi	r24, 0xE0	; 224
    43e4:	92 07       	cpc	r25, r18
    43e6:	0c f4       	brge	.+2      	; 0x43ea <handleCalibration+0x3e>
    43e8:	8a c1       	rjmp	.+788    	; 0x46fe <handleCalibration+0x352>
					updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    43ea:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    43ee:	20 91 7c 05 	lds	r18, 0x057C
    43f2:	30 91 7d 05 	lds	r19, 0x057D
    43f6:	40 91 7e 05 	lds	r20, 0x057E
    43fa:	50 91 7f 05 	lds	r21, 0x057F
    43fe:	62 1b       	sub	r22, r18
    4400:	73 0b       	sbc	r23, r19
    4402:	84 0b       	sbc	r24, r20
    4404:	95 0b       	sbc	r25, r21
    4406:	6c 39       	cpi	r22, 0x9C	; 156
    4408:	2d ec       	ldi	r18, 0xCD	; 205
    440a:	72 07       	cpc	r23, r18
    440c:	28 e0       	ldi	r18, 0x08	; 8
    440e:	82 07       	cpc	r24, r18
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	92 07       	cpc	r25, r18
    4414:	d8 f1       	brcs	.+118    	; 0x448c <handleCalibration+0xe0>
            	tempVel = 0;
    4416:	10 92 82 05 	sts	0x0582, r1
    441a:	10 92 81 05 	sts	0x0581, r1
				avgLeftSpeed = 0;
    441e:	10 92 a9 04 	sts	0x04A9, r1
    4422:	10 92 a8 04 	sts	0x04A8, r1
				avgRightSpeed = 0;
    4426:	10 92 ab 04 	sts	0x04AB, r1
    442a:	10 92 aa 04 	sts	0x04AA, r1
                updateOdomData();
    442e:	0e 94 ef 20 	call	0x41de	; 0x41de <updateOdomData>
                calibState = 5;
    4432:	85 e0       	ldi	r24, 0x05	; 5
    4434:	80 93 80 05 	sts	0x0580, r24
    4438:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    443a:	88 23       	and	r24, r24
    443c:	29 f5       	brne	.+74     	; 0x4488 <handleCalibration+0xdc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    443e:	80 91 be 04 	lds	r24, 0x04BE
    4442:	88 23       	and	r24, r24
    4444:	09 f0       	breq	.+2      	; 0x4448 <handleCalibration+0x9c>
    4446:	3c c1       	rjmp	.+632    	; 0x46c0 <handleCalibration+0x314>
				pwm_intermediate_right_desired = 0;
    4448:	10 92 fe 02 	sts	0x02FE, r1
    444c:	10 92 fd 02 	sts	0x02FD, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    4450:	90 91 c2 04 	lds	r25, 0x04C2
    4454:	85 e0       	ldi	r24, 0x05	; 5
    4456:	98 9f       	mul	r25, r24
    4458:	c0 01       	movw	r24, r0
    445a:	11 24       	eor	r1, r1
    445c:	88 0f       	add	r24, r24
    445e:	99 1f       	adc	r25, r25
    4460:	88 0f       	add	r24, r24
    4462:	99 1f       	adc	r25, r25
    4464:	90 93 00 03 	sts	0x0300, r25
    4468:	80 93 ff 02 	sts	0x02FF, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = 1;
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	80 93 80 05 	sts	0x0580, r24
            timeoutOdometry = getTime100MicroSec();
    4472:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    4476:	60 93 7c 05 	sts	0x057C, r22
    447a:	70 93 7d 05 	sts	0x057D, r23
    447e:	80 93 7e 05 	sts	0x057E, r24
    4482:	90 93 7f 05 	sts	0x057F, r25
            break;
    4486:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4488:	81 30       	cpi	r24, 0x01	; 1
    448a:	71 f0       	breq	.+28     	; 0x44a8 <handleCalibration+0xfc>
    448c:	08 95       	ret
    448e:	85 30       	cpi	r24, 0x05	; 5
    4490:	e9 f7       	brne	.-6      	; 0x448c <handleCalibration+0xe0>
                calibState = 5;
			}
            break;

		case 5:
        	calibVelIndex++;
    4492:	80 91 c2 04 	lds	r24, 0x04C2
    4496:	8f 5f       	subi	r24, 0xFF	; 255
    4498:	80 93 c2 04 	sts	0x04C2, r24
            if(calibVelIndex == 10) {
    449c:	8a 30       	cpi	r24, 0x0A	; 10
    449e:	09 f4       	brne	.+2      	; 0x44a2 <handleCalibration+0xf6>
    44a0:	8b c1       	rjmp	.+790    	; 0x47b8 <handleCalibration+0x40c>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = 0;
    44a2:	10 92 80 05 	sts	0x0580, r1
    44a6:	08 95       	ret
            calibState = 1;
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    44a8:	80 91 be 04 	lds	r24, 0x04BE
    44ac:	88 23       	and	r24, r24
    44ae:	09 f4       	brne	.+2      	; 0x44b2 <handleCalibration+0x106>
    44b0:	d0 c0       	rjmp	.+416    	; 0x4652 <handleCalibration+0x2a6>
    44b2:	82 30       	cpi	r24, 0x02	; 2
    44b4:	09 f4       	brne	.+2      	; 0x44b8 <handleCalibration+0x10c>
    44b6:	cd c0       	rjmp	.+410    	; 0x4652 <handleCalibration+0x2a6>
                    timeOdometry = getTime100MicroSec();;
                    calibState = 2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<480) {
    44b8:	80 91 6f 02 	lds	r24, 0x026F
    44bc:	90 91 70 02 	lds	r25, 0x0270
    44c0:	21 e0       	ldi	r18, 0x01	; 1
    44c2:	80 3e       	cpi	r24, 0xE0	; 224
    44c4:	92 07       	cpc	r25, r18
    44c6:	0c f0       	brlt	.+2      	; 0x44ca <handleCalibration+0x11e>
    44c8:	90 cf       	rjmp	.-224    	; 0x43ea <handleCalibration+0x3e>
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
    44ca:	10 92 a7 04 	sts	0x04A7, r1
    44ce:	10 92 a6 04 	sts	0x04A6, r1
					rightSpeedSumOdom = 0;
    44d2:	10 92 a0 04 	sts	0x04A0, r1
    44d6:	10 92 a1 04 	sts	0x04A1, r1
    44da:	10 92 a2 04 	sts	0x04A2, r1
    44de:	10 92 a3 04 	sts	0x04A3, r1
    44e2:	cc c0       	rjmp	.+408    	; 0x467c <handleCalibration+0x2d0>
                calibState = 5;
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    44e4:	80 91 be 04 	lds	r24, 0x04BE
    44e8:	88 23       	and	r24, r24
    44ea:	49 f1       	breq	.+82     	; 0x453e <handleCalibration+0x192>
    44ec:	82 30       	cpi	r24, 0x02	; 2
    44ee:	39 f1       	breq	.+78     	; 0x453e <handleCalibration+0x192>
            	if(proximityResult[8]>480) {
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>480) {
    44f0:	80 91 6f 02 	lds	r24, 0x026F
    44f4:	90 91 70 02 	lds	r25, 0x0270
    44f8:	21 e0       	ldi	r18, 0x01	; 1
    44fa:	81 3e       	cpi	r24, 0xE1	; 225
    44fc:	92 07       	cpc	r25, r18
    44fe:	3c f5       	brge	.+78     	; 0x454e <handleCalibration+0x1a2>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    4500:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    4504:	20 91 7c 05 	lds	r18, 0x057C
    4508:	30 91 7d 05 	lds	r19, 0x057D
    450c:	40 91 7e 05 	lds	r20, 0x057E
    4510:	50 91 7f 05 	lds	r21, 0x057F
    4514:	62 1b       	sub	r22, r18
    4516:	73 0b       	sbc	r23, r19
    4518:	84 0b       	sbc	r24, r20
    451a:	95 0b       	sbc	r25, r21
    451c:	6c 39       	cpi	r22, 0x9C	; 156
    451e:	2d ec       	ldi	r18, 0xCD	; 205
    4520:	72 07       	cpc	r23, r18
    4522:	28 e0       	ldi	r18, 0x08	; 8
    4524:	82 07       	cpc	r24, r18
    4526:	20 e0       	ldi	r18, 0x00	; 0
    4528:	92 07       	cpc	r25, r18
    452a:	08 f4       	brcc	.+2      	; 0x452e <handleCalibration+0x182>
    452c:	af cf       	rjmp	.-162    	; 0x448c <handleCalibration+0xe0>
            	tempVel = 0;
    452e:	10 92 82 05 	sts	0x0582, r1
    4532:	10 92 81 05 	sts	0x0581, r1
                //updateOdomData();
                calibState = 5;
    4536:	85 e0       	ldi	r24, 0x05	; 5
    4538:	80 93 80 05 	sts	0x0580, r24
    453c:	08 95       	ret
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>480) {
    453e:	80 91 69 02 	lds	r24, 0x0269
    4542:	90 91 6a 02 	lds	r25, 0x026A
    4546:	21 e0       	ldi	r18, 0x01	; 1
    4548:	81 3e       	cpi	r24, 0xE1	; 225
    454a:	92 07       	cpc	r25, r18
    454c:	cc f2       	brlt	.-78     	; 0x4500 <handleCalibration+0x154>
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>480) {
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
    454e:	85 e0       	ldi	r24, 0x05	; 5
    4550:	80 93 80 05 	sts	0x0580, r24
    4554:	d5 cf       	rjmp	.-86     	; 0x4500 <handleCalibration+0x154>
                calibState = 5;
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4556:	80 91 be 04 	lds	r24, 0x04BE
    455a:	88 23       	and	r24, r24
    455c:	09 f4       	brne	.+2      	; 0x4560 <handleCalibration+0x1b4>
    455e:	a6 c0       	rjmp	.+332    	; 0x46ac <handleCalibration+0x300>
    4560:	82 30       	cpi	r24, 0x02	; 2
    4562:	09 f4       	brne	.+2      	; 0x4566 <handleCalibration+0x1ba>
    4564:	a3 c0       	rjmp	.+326    	; 0x46ac <handleCalibration+0x300>
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 3;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]>480) {
    4566:	80 91 6f 02 	lds	r24, 0x026F
    456a:	90 91 70 02 	lds	r25, 0x0270
    456e:	21 e0       	ldi	r18, 0x01	; 1
    4570:	81 3e       	cpi	r24, 0xE1	; 225
    4572:	92 07       	cpc	r25, r18
    4574:	0c f4       	brge	.+2      	; 0x4578 <handleCalibration+0x1cc>
    4576:	39 cf       	rjmp	.-398    	; 0x43ea <handleCalibration+0x3e>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
                	calibState = 3;
    4578:	83 e0       	ldi	r24, 0x03	; 3
    457a:	80 93 80 05 	sts	0x0580, r24
                    timeoutOdometry = getTime100MicroSec();;
    457e:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    4582:	60 93 7c 05 	sts	0x057C, r22
    4586:	70 93 7d 05 	sts	0x057D, r23
    458a:	80 93 7e 05 	sts	0x057E, r24
    458e:	90 93 7f 05 	sts	0x057F, r25
    4592:	2b cf       	rjmp	.-426    	; 0x43ea <handleCalibration+0x3e>
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<480) {
    4594:	80 91 69 02 	lds	r24, 0x0269
    4598:	90 91 6a 02 	lds	r25, 0x026A
    459c:	21 e0       	ldi	r18, 0x01	; 1
    459e:	80 3e       	cpi	r24, 0xE0	; 224
    45a0:	92 07       	cpc	r25, r18
    45a2:	0c f0       	brlt	.+2      	; 0x45a6 <handleCalibration+0x1fa>
    45a4:	22 cf       	rjmp	.-444    	; 0x43ea <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    45a6:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    45aa:	20 91 b9 04 	lds	r18, 0x04B9
    45ae:	30 91 ba 04 	lds	r19, 0x04BA
    45b2:	40 91 bb 04 	lds	r20, 0x04BB
    45b6:	50 91 bc 04 	lds	r21, 0x04BC
    45ba:	62 1b       	sub	r22, r18
    45bc:	73 0b       	sbc	r23, r19
    45be:	84 0b       	sbc	r24, r20
    45c0:	95 0b       	sbc	r25, r21
    45c2:	60 93 b9 04 	sts	0x04B9, r22
    45c6:	70 93 ba 04 	sts	0x04BA, r23
    45ca:	80 93 bb 04 	sts	0x04BB, r24
    45ce:	90 93 bc 04 	sts	0x04BC, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    45d2:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__floatunsisf>
    45d6:	20 e0       	ldi	r18, 0x00	; 0
    45d8:	30 e0       	ldi	r19, 0x00	; 0
    45da:	40 ed       	ldi	r20, 0xD0	; 208
    45dc:	52 e4       	ldi	r21, 0x42	; 66
    45de:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    45e2:	20 e0       	ldi	r18, 0x00	; 0
    45e4:	34 e2       	ldi	r19, 0x24	; 36
    45e6:	44 e7       	ldi	r20, 0x74	; 116
    45e8:	59 e4       	ldi	r21, 0x49	; 73
    45ea:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    45ee:	9b 01       	movw	r18, r22
    45f0:	ac 01       	movw	r20, r24
    45f2:	64 e1       	ldi	r22, 0x14	; 20
    45f4:	7e e2       	ldi	r23, 0x2E	; 46
    45f6:	88 e7       	ldi	r24, 0x78	; 120
    45f8:	93 e4       	ldi	r25, 0x43	; 67
    45fa:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    45fe:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <__fixunssfsi>
    4602:	70 93 82 05 	sts	0x0582, r23
    4606:	60 93 81 05 	sts	0x0581, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    460a:	20 91 a4 04 	lds	r18, 0x04A4
    460e:	30 91 a5 04 	lds	r19, 0x04A5
    4612:	40 e0       	ldi	r20, 0x00	; 0
    4614:	50 e0       	ldi	r21, 0x00	; 0
    4616:	60 91 9c 04 	lds	r22, 0x049C
    461a:	70 91 9d 04 	lds	r23, 0x049D
    461e:	80 91 9e 04 	lds	r24, 0x049E
    4622:	90 91 9f 04 	lds	r25, 0x049F
    4626:	0e 94 fd 3f 	call	0x7ffa	; 0x7ffa <__divmodsi4>
    462a:	30 93 a9 04 	sts	0x04A9, r19
    462e:	20 93 a8 04 	sts	0x04A8, r18
            	if(proximityResult[11]<480) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
					updateOdomData();
    4632:	0e 94 ef 20 	call	0x41de	; 0x41de <updateOdomData>
                    calibState = 4;
    4636:	84 e0       	ldi	r24, 0x04	; 4
    4638:	80 93 80 05 	sts	0x0580, r24
                    timeoutOdometry = getTime100MicroSec();;
    463c:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    4640:	60 93 7c 05 	sts	0x057C, r22
    4644:	70 93 7d 05 	sts	0x057D, r23
    4648:	80 93 7e 05 	sts	0x057E, r24
    464c:	90 93 7f 05 	sts	0x057F, r25
    4650:	cc ce       	rjmp	.-616    	; 0x43ea <handleCalibration+0x3e>
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<480) {
    4652:	80 91 69 02 	lds	r24, 0x0269
    4656:	90 91 6a 02 	lds	r25, 0x026A
    465a:	21 e0       	ldi	r18, 0x01	; 1
    465c:	80 3e       	cpi	r24, 0xE0	; 224
    465e:	92 07       	cpc	r25, r18
    4660:	0c f0       	brlt	.+2      	; 0x4664 <handleCalibration+0x2b8>
    4662:	c3 ce       	rjmp	.-634    	; 0x43ea <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {				
                	leftSumCount = 0;
    4664:	10 92 a5 04 	sts	0x04A5, r1
    4668:	10 92 a4 04 	sts	0x04A4, r1
                    leftSpeedSumOdom = 0;
    466c:	10 92 9c 04 	sts	0x049C, r1
    4670:	10 92 9d 04 	sts	0x049D, r1
    4674:	10 92 9e 04 	sts	0x049E, r1
    4678:	10 92 9f 04 	sts	0x049F, r1
			} else {
            	if(proximityResult[11]<480) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
					rightSpeedSumOdom = 0;
                    timeOdometry = getTime100MicroSec();;
    467c:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    4680:	60 93 b9 04 	sts	0x04B9, r22
    4684:	70 93 ba 04 	sts	0x04BA, r23
    4688:	80 93 bb 04 	sts	0x04BB, r24
    468c:	90 93 bc 04 	sts	0x04BC, r25
                    calibState = 2;
    4690:	82 e0       	ldi	r24, 0x02	; 2
    4692:	80 93 80 05 	sts	0x0580, r24
                    timeoutOdometry = getTime100MicroSec();;
    4696:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    469a:	60 93 7c 05 	sts	0x057C, r22
    469e:	70 93 7d 05 	sts	0x057D, r23
    46a2:	80 93 7e 05 	sts	0x057E, r24
    46a6:	90 93 7f 05 	sts	0x057F, r25
    46aa:	9f ce       	rjmp	.-706    	; 0x43ea <handleCalibration+0x3e>
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>480) {
    46ac:	80 91 69 02 	lds	r24, 0x0269
    46b0:	90 91 6a 02 	lds	r25, 0x026A
    46b4:	21 e0       	ldi	r18, 0x01	; 1
    46b6:	81 3e       	cpi	r24, 0xE1	; 225
    46b8:	92 07       	cpc	r25, r18
    46ba:	0c f4       	brge	.+2      	; 0x46be <handleCalibration+0x312>
    46bc:	96 ce       	rjmp	.-724    	; 0x43ea <handleCalibration+0x3e>
    46be:	5c cf       	rjmp	.-328    	; 0x4578 <handleCalibration+0x1cc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    46c0:	81 30       	cpi	r24, 0x01	; 1
    46c2:	09 f4       	brne	.+2      	; 0x46c6 <handleCalibration+0x31a>
    46c4:	84 c0       	rjmp	.+264    	; 0x47ce <handleCalibration+0x422>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    46c6:	82 30       	cpi	r24, 0x02	; 2
    46c8:	09 f4       	brne	.+2      	; 0x46cc <handleCalibration+0x320>
    46ca:	60 c0       	rjmp	.+192    	; 0x478c <handleCalibration+0x3e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    46cc:	83 30       	cpi	r24, 0x03	; 3
    46ce:	09 f0       	breq	.+2      	; 0x46d2 <handleCalibration+0x326>
    46d0:	cd ce       	rjmp	.-614    	; 0x446c <handleCalibration+0xc0>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    46d2:	90 91 c2 04 	lds	r25, 0x04C2
    46d6:	85 e0       	ldi	r24, 0x05	; 5
    46d8:	98 9f       	mul	r25, r24
    46da:	c0 01       	movw	r24, r0
    46dc:	11 24       	eor	r1, r1
    46de:	88 0f       	add	r24, r24
    46e0:	99 1f       	adc	r25, r25
    46e2:	88 0f       	add	r24, r24
    46e4:	99 1f       	adc	r25, r25
    46e6:	90 95       	com	r25
    46e8:	81 95       	neg	r24
    46ea:	9f 4f       	sbci	r25, 0xFF	; 255
    46ec:	90 93 fe 02 	sts	0x02FE, r25
    46f0:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = 0;
    46f4:	10 92 00 03 	sts	0x0300, r1
    46f8:	10 92 ff 02 	sts	0x02FF, r1
    46fc:	b7 ce       	rjmp	.-658    	; 0x446c <handleCalibration+0xc0>
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<480) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    46fe:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    4702:	20 91 b9 04 	lds	r18, 0x04B9
    4706:	30 91 ba 04 	lds	r19, 0x04BA
    470a:	40 91 bb 04 	lds	r20, 0x04BB
    470e:	50 91 bc 04 	lds	r21, 0x04BC
    4712:	62 1b       	sub	r22, r18
    4714:	73 0b       	sbc	r23, r19
    4716:	84 0b       	sbc	r24, r20
    4718:	95 0b       	sbc	r25, r21
    471a:	60 93 b9 04 	sts	0x04B9, r22
    471e:	70 93 ba 04 	sts	0x04BA, r23
    4722:	80 93 bb 04 	sts	0x04BB, r24
    4726:	90 93 bc 04 	sts	0x04BC, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    472a:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__floatunsisf>
    472e:	20 e0       	ldi	r18, 0x00	; 0
    4730:	30 e0       	ldi	r19, 0x00	; 0
    4732:	40 ed       	ldi	r20, 0xD0	; 208
    4734:	52 e4       	ldi	r21, 0x42	; 66
    4736:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    473a:	20 e0       	ldi	r18, 0x00	; 0
    473c:	34 e2       	ldi	r19, 0x24	; 36
    473e:	44 e7       	ldi	r20, 0x74	; 116
    4740:	59 e4       	ldi	r21, 0x49	; 73
    4742:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    4746:	9b 01       	movw	r18, r22
    4748:	ac 01       	movw	r20, r24
    474a:	64 e1       	ldi	r22, 0x14	; 20
    474c:	7e e2       	ldi	r23, 0x2E	; 46
    474e:	88 e7       	ldi	r24, 0x78	; 120
    4750:	93 e4       	ldi	r25, 0x43	; 67
    4752:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    4756:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <__fixunssfsi>
    475a:	70 93 82 05 	sts	0x0582, r23
    475e:	60 93 81 05 	sts	0x0581, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    4762:	20 91 a6 04 	lds	r18, 0x04A6
    4766:	30 91 a7 04 	lds	r19, 0x04A7
    476a:	40 e0       	ldi	r20, 0x00	; 0
    476c:	50 e0       	ldi	r21, 0x00	; 0
    476e:	60 91 a0 04 	lds	r22, 0x04A0
    4772:	70 91 a1 04 	lds	r23, 0x04A1
    4776:	80 91 a2 04 	lds	r24, 0x04A2
    477a:	90 91 a3 04 	lds	r25, 0x04A3
    477e:	0e 94 fd 3f 	call	0x7ffa	; 0x7ffa <__divmodsi4>
    4782:	30 93 ab 04 	sts	0x04AB, r19
    4786:	20 93 aa 04 	sts	0x04AA, r18
    478a:	53 cf       	rjmp	.-346    	; 0x4632 <handleCalibration+0x286>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    478c:	10 92 fe 02 	sts	0x02FE, r1
    4790:	10 92 fd 02 	sts	0x02FD, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    4794:	90 91 c2 04 	lds	r25, 0x04C2
    4798:	85 e0       	ldi	r24, 0x05	; 5
    479a:	98 9f       	mul	r25, r24
    479c:	c0 01       	movw	r24, r0
    479e:	11 24       	eor	r1, r1
    47a0:	88 0f       	add	r24, r24
    47a2:	99 1f       	adc	r25, r25
    47a4:	88 0f       	add	r24, r24
    47a6:	99 1f       	adc	r25, r25
    47a8:	90 95       	com	r25
    47aa:	81 95       	neg	r24
    47ac:	9f 4f       	sbci	r25, 0xFF	; 255
    47ae:	90 93 00 03 	sts	0x0300, r25
    47b2:	80 93 ff 02 	sts	0x02FF, r24
    47b6:	5a ce       	rjmp	.-844    	; 0x446c <handleCalibration+0xc0>
            break;

		case 5:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    47b8:	91 e0       	ldi	r25, 0x01	; 1
    47ba:	90 93 c2 04 	sts	0x04C2, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    47be:	80 91 be 04 	lds	r24, 0x04BE
    47c2:	88 23       	and	r24, r24
    47c4:	b9 f4       	brne	.+46     	; 0x47f4 <handleCalibration+0x448>
                	calibWheel = LEFT_WHEEL_BW_SC;
    47c6:	82 e0       	ldi	r24, 0x02	; 2
    47c8:	80 93 be 04 	sts	0x04BE, r24
    47cc:	6a ce       	rjmp	.-812    	; 0x44a2 <handleCalibration+0xf6>
    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    47ce:	90 91 c2 04 	lds	r25, 0x04C2
    47d2:	85 e0       	ldi	r24, 0x05	; 5
    47d4:	98 9f       	mul	r25, r24
    47d6:	c0 01       	movw	r24, r0
    47d8:	11 24       	eor	r1, r1
    47da:	88 0f       	add	r24, r24
    47dc:	99 1f       	adc	r25, r25
    47de:	88 0f       	add	r24, r24
    47e0:	99 1f       	adc	r25, r25
    47e2:	90 93 fe 02 	sts	0x02FE, r25
    47e6:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = 0;
    47ea:	10 92 00 03 	sts	0x0300, r1
    47ee:	10 92 ff 02 	sts	0x02FF, r1
    47f2:	3c ce       	rjmp	.-904    	; 0x446c <handleCalibration+0xc0>
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    47f4:	81 30       	cpi	r24, 0x01	; 1
    47f6:	61 f0       	breq	.+24     	; 0x4810 <handleCalibration+0x464>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    47f8:	82 30       	cpi	r24, 0x02	; 2
    47fa:	71 f0       	breq	.+28     	; 0x4818 <handleCalibration+0x46c>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    47fc:	83 30       	cpi	r24, 0x03	; 3
    47fe:	09 f0       	breq	.+2      	; 0x4802 <handleCalibration+0x456>
    4800:	50 ce       	rjmp	.-864    	; 0x44a2 <handleCalibration+0xf6>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    4802:	10 92 be 04 	sts	0x04BE, r1
					// red off
					writeCalibrationToFlash();
    4806:	0e 94 96 3c 	call	0x792c	; 0x792c <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    480a:	10 92 bf 04 	sts	0x04BF, r1
    480e:	49 ce       	rjmp	.-878    	; 0x44a2 <handleCalibration+0xf6>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    4810:	83 e0       	ldi	r24, 0x03	; 3
    4812:	80 93 be 04 	sts	0x04BE, r24
    4816:	45 ce       	rjmp	.-886    	; 0x44a2 <handleCalibration+0xf6>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    4818:	90 93 be 04 	sts	0x04BE, r25
					calibrateOdomFlag = 0;
    481c:	10 92 bf 04 	sts	0x04BF, r1
    4820:	40 ce       	rjmp	.-896    	; 0x44a2 <handleCalibration+0xf6>

00004822 <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    4822:	af 92       	push	r10
    4824:	bf 92       	push	r11
    4826:	cf 92       	push	r12
    4828:	df 92       	push	r13
    482a:	ef 92       	push	r14
    482c:	ff 92       	push	r15
    482e:	0f 93       	push	r16
    4830:	1f 93       	push	r17
    4832:	cf 93       	push	r28
    4834:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    4836:	9c 01       	movw	r18, r24
    4838:	22 0f       	add	r18, r18
    483a:	33 1f       	adc	r19, r19
    483c:	22 0f       	add	r18, r18
    483e:	33 1f       	adc	r19, r19
    4840:	28 0f       	add	r18, r24
    4842:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    4844:	21 15       	cp	r18, r1
    4846:	31 05       	cpc	r19, r1
    4848:	09 f4       	brne	.+2      	; 0x484c <getInputFromSpeed+0x2a>
    484a:	7b c0       	rjmp	.+246    	; 0x4942 <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    484c:	86 2f       	mov	r24, r22
    484e:	82 50       	subi	r24, 0x02	; 2
    4850:	82 30       	cpi	r24, 0x02	; 2
    4852:	08 f4       	brcc	.+2      	; 0x4856 <getInputFromSpeed+0x34>
    4854:	84 c0       	rjmp	.+264    	; 0x495e <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    4856:	66 23       	and	r22, r22
    4858:	09 f0       	breq	.+2      	; 0x485c <getInputFromSpeed+0x3a>
    485a:	84 c0       	rjmp	.+264    	; 0x4964 <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    485c:	80 91 d7 04 	lds	r24, 0x04D7
    4860:	90 91 d8 04 	lds	r25, 0x04D8
    4864:	82 17       	cp	r24, r18
    4866:	93 07       	cpc	r25, r19
    4868:	0c f0       	brlt	.+2      	; 0x486c <getInputFromSpeed+0x4a>
    486a:	1b c2       	rjmp	.+1078   	; 0x4ca2 <getInputFromSpeed+0x480>
    486c:	80 91 e7 04 	lds	r24, 0x04E7
    4870:	90 91 e8 04 	lds	r25, 0x04E8
    4874:	82 17       	cp	r24, r18
    4876:	93 07       	cpc	r25, r19
    4878:	0c f0       	brlt	.+2      	; 0x487c <getInputFromSpeed+0x5a>
    487a:	1c c2       	rjmp	.+1080   	; 0x4cb4 <getInputFromSpeed+0x492>
    487c:	80 91 f7 04 	lds	r24, 0x04F7
    4880:	90 91 f8 04 	lds	r25, 0x04F8
    4884:	82 17       	cp	r24, r18
    4886:	93 07       	cpc	r25, r19
    4888:	0c f0       	brlt	.+2      	; 0x488c <getInputFromSpeed+0x6a>
    488a:	17 c2       	rjmp	.+1070   	; 0x4cba <getInputFromSpeed+0x498>
    488c:	80 91 07 05 	lds	r24, 0x0507
    4890:	90 91 08 05 	lds	r25, 0x0508
    4894:	82 17       	cp	r24, r18
    4896:	93 07       	cpc	r25, r19
    4898:	0c f0       	brlt	.+2      	; 0x489c <getInputFromSpeed+0x7a>
    489a:	12 c2       	rjmp	.+1060   	; 0x4cc0 <getInputFromSpeed+0x49e>
    489c:	80 91 17 05 	lds	r24, 0x0517
    48a0:	90 91 18 05 	lds	r25, 0x0518
    48a4:	82 17       	cp	r24, r18
    48a6:	93 07       	cpc	r25, r19
    48a8:	0c f0       	brlt	.+2      	; 0x48ac <getInputFromSpeed+0x8a>
    48aa:	fe c1       	rjmp	.+1020   	; 0x4ca8 <getInputFromSpeed+0x486>
    48ac:	80 91 27 05 	lds	r24, 0x0527
    48b0:	90 91 28 05 	lds	r25, 0x0528
    48b4:	82 17       	cp	r24, r18
    48b6:	93 07       	cpc	r25, r19
    48b8:	0c f0       	brlt	.+2      	; 0x48bc <getInputFromSpeed+0x9a>
    48ba:	f9 c1       	rjmp	.+1010   	; 0x4cae <getInputFromSpeed+0x48c>
    48bc:	80 91 37 05 	lds	r24, 0x0537
    48c0:	90 91 38 05 	lds	r25, 0x0538
    48c4:	82 17       	cp	r24, r18
    48c6:	93 07       	cpc	r25, r19
    48c8:	0c f0       	brlt	.+2      	; 0x48cc <getInputFromSpeed+0xaa>
    48ca:	02 c2       	rjmp	.+1028   	; 0x4cd0 <getInputFromSpeed+0x4ae>
    48cc:	80 91 47 05 	lds	r24, 0x0547
    48d0:	90 91 48 05 	lds	r25, 0x0548
    48d4:	82 17       	cp	r24, r18
    48d6:	93 07       	cpc	r25, r19
    48d8:	0c f0       	brlt	.+2      	; 0x48dc <getInputFromSpeed+0xba>
    48da:	fd c1       	rjmp	.+1018   	; 0x4cd6 <getInputFromSpeed+0x4b4>
    48dc:	c0 91 57 05 	lds	r28, 0x0557
    48e0:	d0 91 58 05 	lds	r29, 0x0558
    48e4:	c2 17       	cp	r28, r18
    48e6:	d3 07       	cpc	r29, r19
    48e8:	0c f0       	brlt	.+2      	; 0x48ec <getInputFromSpeed+0xca>
    48ea:	7a c1       	rjmp	.+756    	; 0x4be0 <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    48ec:	b9 01       	movw	r22, r18
    48ee:	88 27       	eor	r24, r24
    48f0:	77 fd       	sbrc	r23, 7
    48f2:	80 95       	com	r24
    48f4:	98 2f       	mov	r25, r24
    48f6:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    48fa:	7b 01       	movw	r14, r22
    48fc:	8c 01       	movw	r16, r24
    48fe:	60 91 55 05 	lds	r22, 0x0555
    4902:	70 91 56 05 	lds	r23, 0x0556
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    4906:	88 27       	eor	r24, r24
    4908:	77 fd       	sbrc	r23, 7
    490a:	80 95       	com	r24
    490c:	98 2f       	mov	r25, r24
    490e:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4912:	9b 01       	movw	r18, r22
    4914:	ac 01       	movw	r20, r24
    4916:	c8 01       	movw	r24, r16
    4918:	b7 01       	movw	r22, r14
    491a:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    491e:	7b 01       	movw	r14, r22
    4920:	8c 01       	movw	r16, r24
    4922:	be 01       	movw	r22, r28
    4924:	88 27       	eor	r24, r24
    4926:	77 fd       	sbrc	r23, 7
    4928:	80 95       	com	r24
    492a:	98 2f       	mov	r25, r24
    492c:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4930:	9b 01       	movw	r18, r22
    4932:	ac 01       	movw	r20, r24
    4934:	c8 01       	movw	r24, r16
    4936:	b7 01       	movw	r22, r14
    4938:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    493c:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    4940:	02 c0       	rjmp	.+4      	; 0x4946 <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    4942:	60 e0       	ldi	r22, 0x00	; 0
    4944:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    4946:	cb 01       	movw	r24, r22
    4948:	df 91       	pop	r29
    494a:	cf 91       	pop	r28
    494c:	1f 91       	pop	r17
    494e:	0f 91       	pop	r16
    4950:	ff 90       	pop	r15
    4952:	ef 90       	pop	r14
    4954:	df 90       	pop	r13
    4956:	cf 90       	pop	r12
    4958:	bf 90       	pop	r11
    495a:	af 90       	pop	r10
    495c:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    495e:	30 95       	com	r19
    4960:	21 95       	neg	r18
    4962:	3f 4f       	sbci	r19, 0xFF	; 255
    4964:	63 30       	cpi	r22, 0x03	; 3
    4966:	09 f4       	brne	.+2      	; 0x496a <getInputFromSpeed+0x148>
    4968:	f3 c0       	rjmp	.+486    	; 0x4b50 <getInputFromSpeed+0x32e>
    496a:	62 30       	cpi	r22, 0x02	; 2
    496c:	01 f1       	breq	.+64     	; 0x49ae <getInputFromSpeed+0x18c>
    496e:	61 30       	cpi	r22, 0x01	; 1
    4970:	09 f4       	brne	.+2      	; 0x4974 <getInputFromSpeed+0x152>
    4972:	98 c0       	rjmp	.+304    	; 0x4aa4 <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    4974:	66 23       	and	r22, r22
    4976:	09 f4       	brne	.+2      	; 0x497a <getInputFromSpeed+0x158>
    4978:	90 c0       	rjmp	.+288    	; 0x4a9a <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    497a:	61 30       	cpi	r22, 0x01	; 1
    497c:	09 f4       	brne	.+2      	; 0x4980 <getInputFromSpeed+0x15e>
    497e:	8c c1       	rjmp	.+792    	; 0x4c98 <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    4980:	62 30       	cpi	r22, 0x02	; 2
    4982:	09 f4       	brne	.+2      	; 0x4986 <getInputFromSpeed+0x164>
    4984:	a0 c1       	rjmp	.+832    	; 0x4cc6 <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    4986:	63 30       	cpi	r22, 0x03	; 3
    4988:	e1 f6       	brne	.-72     	; 0x4942 <getInputFromSpeed+0x120>
    498a:	c0 91 63 05 	lds	r28, 0x0563
    498e:	d0 91 64 05 	lds	r29, 0x0564
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    4992:	b9 01       	movw	r22, r18
    4994:	88 27       	eor	r24, r24
    4996:	77 fd       	sbrc	r23, 7
    4998:	80 95       	com	r24
    499a:	98 2f       	mov	r25, r24
    499c:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    49a0:	7b 01       	movw	r14, r22
    49a2:	8c 01       	movw	r16, r24
    49a4:	60 91 61 05 	lds	r22, 0x0561
    49a8:	70 91 62 05 	lds	r23, 0x0562
    49ac:	55 c0       	rjmp	.+170    	; 0x4a58 <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    49ae:	80 91 df 04 	lds	r24, 0x04DF
    49b2:	90 91 e0 04 	lds	r25, 0x04E0
    49b6:	82 17       	cp	r24, r18
    49b8:	93 07       	cpc	r25, r19
    49ba:	0c f0       	brlt	.+2      	; 0x49be <getInputFromSpeed+0x19c>
    49bc:	72 c1       	rjmp	.+740    	; 0x4ca2 <getInputFromSpeed+0x480>
    49be:	80 91 ef 04 	lds	r24, 0x04EF
    49c2:	90 91 f0 04 	lds	r25, 0x04F0
    49c6:	82 17       	cp	r24, r18
    49c8:	93 07       	cpc	r25, r19
    49ca:	0c f0       	brlt	.+2      	; 0x49ce <getInputFromSpeed+0x1ac>
    49cc:	73 c1       	rjmp	.+742    	; 0x4cb4 <getInputFromSpeed+0x492>
    49ce:	80 91 ff 04 	lds	r24, 0x04FF
    49d2:	90 91 00 05 	lds	r25, 0x0500
    49d6:	82 17       	cp	r24, r18
    49d8:	93 07       	cpc	r25, r19
    49da:	0c f0       	brlt	.+2      	; 0x49de <getInputFromSpeed+0x1bc>
    49dc:	6e c1       	rjmp	.+732    	; 0x4cba <getInputFromSpeed+0x498>
    49de:	80 91 0f 05 	lds	r24, 0x050F
    49e2:	90 91 10 05 	lds	r25, 0x0510
    49e6:	82 17       	cp	r24, r18
    49e8:	93 07       	cpc	r25, r19
    49ea:	0c f0       	brlt	.+2      	; 0x49ee <getInputFromSpeed+0x1cc>
    49ec:	69 c1       	rjmp	.+722    	; 0x4cc0 <getInputFromSpeed+0x49e>
    49ee:	80 91 1f 05 	lds	r24, 0x051F
    49f2:	90 91 20 05 	lds	r25, 0x0520
    49f6:	82 17       	cp	r24, r18
    49f8:	93 07       	cpc	r25, r19
    49fa:	0c f0       	brlt	.+2      	; 0x49fe <getInputFromSpeed+0x1dc>
    49fc:	55 c1       	rjmp	.+682    	; 0x4ca8 <getInputFromSpeed+0x486>
    49fe:	80 91 2f 05 	lds	r24, 0x052F
    4a02:	90 91 30 05 	lds	r25, 0x0530
    4a06:	82 17       	cp	r24, r18
    4a08:	93 07       	cpc	r25, r19
    4a0a:	0c f0       	brlt	.+2      	; 0x4a0e <getInputFromSpeed+0x1ec>
    4a0c:	50 c1       	rjmp	.+672    	; 0x4cae <getInputFromSpeed+0x48c>
    4a0e:	80 91 3f 05 	lds	r24, 0x053F
    4a12:	90 91 40 05 	lds	r25, 0x0540
    4a16:	82 17       	cp	r24, r18
    4a18:	93 07       	cpc	r25, r19
    4a1a:	0c f0       	brlt	.+2      	; 0x4a1e <getInputFromSpeed+0x1fc>
    4a1c:	59 c1       	rjmp	.+690    	; 0x4cd0 <getInputFromSpeed+0x4ae>
    4a1e:	80 91 4f 05 	lds	r24, 0x054F
    4a22:	90 91 50 05 	lds	r25, 0x0550
    4a26:	82 17       	cp	r24, r18
    4a28:	93 07       	cpc	r25, r19
    4a2a:	0c f0       	brlt	.+2      	; 0x4a2e <getInputFromSpeed+0x20c>
    4a2c:	54 c1       	rjmp	.+680    	; 0x4cd6 <getInputFromSpeed+0x4b4>
    4a2e:	c0 91 5f 05 	lds	r28, 0x055F
    4a32:	d0 91 60 05 	lds	r29, 0x0560
    4a36:	c2 17       	cp	r28, r18
    4a38:	d3 07       	cpc	r29, r19
    4a3a:	0c f0       	brlt	.+2      	; 0x4a3e <getInputFromSpeed+0x21c>
    4a3c:	d1 c0       	rjmp	.+418    	; 0x4be0 <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    4a3e:	b9 01       	movw	r22, r18
    4a40:	88 27       	eor	r24, r24
    4a42:	77 fd       	sbrc	r23, 7
    4a44:	80 95       	com	r24
    4a46:	98 2f       	mov	r25, r24
    4a48:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4a4c:	7b 01       	movw	r14, r22
    4a4e:	8c 01       	movw	r16, r24
    4a50:	60 91 5d 05 	lds	r22, 0x055D
    4a54:	70 91 5e 05 	lds	r23, 0x055E
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    4a58:	88 27       	eor	r24, r24
    4a5a:	77 fd       	sbrc	r23, 7
    4a5c:	80 95       	com	r24
    4a5e:	98 2f       	mov	r25, r24
    4a60:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4a64:	9b 01       	movw	r18, r22
    4a66:	ac 01       	movw	r20, r24
    4a68:	c8 01       	movw	r24, r16
    4a6a:	b7 01       	movw	r22, r14
    4a6c:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    4a70:	7b 01       	movw	r14, r22
    4a72:	8c 01       	movw	r16, r24
    4a74:	be 01       	movw	r22, r28
    4a76:	88 27       	eor	r24, r24
    4a78:	77 fd       	sbrc	r23, 7
    4a7a:	80 95       	com	r24
    4a7c:	98 2f       	mov	r25, r24
    4a7e:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4a82:	9b 01       	movw	r18, r22
    4a84:	ac 01       	movw	r20, r24
    4a86:	c8 01       	movw	r24, r16
    4a88:	b7 01       	movw	r22, r14
    4a8a:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    4a8e:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
            temp = -temp;
    4a92:	70 95       	com	r23
    4a94:	61 95       	neg	r22
    4a96:	7f 4f       	sbci	r23, 0xFF	; 255
    4a98:	56 cf       	rjmp	.-340    	; 0x4946 <getInputFromSpeed+0x124>
    4a9a:	c0 91 57 05 	lds	r28, 0x0557
    4a9e:	d0 91 58 05 	lds	r29, 0x0558
    4aa2:	24 cf       	rjmp	.-440    	; 0x48ec <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    4aa4:	80 91 db 04 	lds	r24, 0x04DB
    4aa8:	90 91 dc 04 	lds	r25, 0x04DC
    4aac:	82 17       	cp	r24, r18
    4aae:	93 07       	cpc	r25, r19
    4ab0:	0c f0       	brlt	.+2      	; 0x4ab4 <getInputFromSpeed+0x292>
    4ab2:	f7 c0       	rjmp	.+494    	; 0x4ca2 <getInputFromSpeed+0x480>
    4ab4:	80 91 eb 04 	lds	r24, 0x04EB
    4ab8:	90 91 ec 04 	lds	r25, 0x04EC
    4abc:	82 17       	cp	r24, r18
    4abe:	93 07       	cpc	r25, r19
    4ac0:	0c f0       	brlt	.+2      	; 0x4ac4 <getInputFromSpeed+0x2a2>
    4ac2:	f8 c0       	rjmp	.+496    	; 0x4cb4 <getInputFromSpeed+0x492>
    4ac4:	80 91 fb 04 	lds	r24, 0x04FB
    4ac8:	90 91 fc 04 	lds	r25, 0x04FC
    4acc:	82 17       	cp	r24, r18
    4ace:	93 07       	cpc	r25, r19
    4ad0:	0c f0       	brlt	.+2      	; 0x4ad4 <getInputFromSpeed+0x2b2>
    4ad2:	f3 c0       	rjmp	.+486    	; 0x4cba <getInputFromSpeed+0x498>
    4ad4:	80 91 0b 05 	lds	r24, 0x050B
    4ad8:	90 91 0c 05 	lds	r25, 0x050C
    4adc:	82 17       	cp	r24, r18
    4ade:	93 07       	cpc	r25, r19
    4ae0:	0c f0       	brlt	.+2      	; 0x4ae4 <getInputFromSpeed+0x2c2>
    4ae2:	ee c0       	rjmp	.+476    	; 0x4cc0 <getInputFromSpeed+0x49e>
    4ae4:	80 91 1b 05 	lds	r24, 0x051B
    4ae8:	90 91 1c 05 	lds	r25, 0x051C
    4aec:	82 17       	cp	r24, r18
    4aee:	93 07       	cpc	r25, r19
    4af0:	0c f0       	brlt	.+2      	; 0x4af4 <getInputFromSpeed+0x2d2>
    4af2:	da c0       	rjmp	.+436    	; 0x4ca8 <getInputFromSpeed+0x486>
    4af4:	80 91 2b 05 	lds	r24, 0x052B
    4af8:	90 91 2c 05 	lds	r25, 0x052C
    4afc:	82 17       	cp	r24, r18
    4afe:	93 07       	cpc	r25, r19
    4b00:	0c f0       	brlt	.+2      	; 0x4b04 <getInputFromSpeed+0x2e2>
    4b02:	d5 c0       	rjmp	.+426    	; 0x4cae <getInputFromSpeed+0x48c>
    4b04:	80 91 3b 05 	lds	r24, 0x053B
    4b08:	90 91 3c 05 	lds	r25, 0x053C
    4b0c:	82 17       	cp	r24, r18
    4b0e:	93 07       	cpc	r25, r19
    4b10:	0c f0       	brlt	.+2      	; 0x4b14 <getInputFromSpeed+0x2f2>
    4b12:	de c0       	rjmp	.+444    	; 0x4cd0 <getInputFromSpeed+0x4ae>
    4b14:	80 91 4b 05 	lds	r24, 0x054B
    4b18:	90 91 4c 05 	lds	r25, 0x054C
    4b1c:	82 17       	cp	r24, r18
    4b1e:	93 07       	cpc	r25, r19
    4b20:	0c f0       	brlt	.+2      	; 0x4b24 <getInputFromSpeed+0x302>
    4b22:	d9 c0       	rjmp	.+434    	; 0x4cd6 <getInputFromSpeed+0x4b4>
    4b24:	c0 91 5b 05 	lds	r28, 0x055B
    4b28:	d0 91 5c 05 	lds	r29, 0x055C
    4b2c:	c2 17       	cp	r28, r18
    4b2e:	d3 07       	cpc	r29, r19
    4b30:	0c f0       	brlt	.+2      	; 0x4b34 <getInputFromSpeed+0x312>
    4b32:	56 c0       	rjmp	.+172    	; 0x4be0 <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    4b34:	b9 01       	movw	r22, r18
    4b36:	88 27       	eor	r24, r24
    4b38:	77 fd       	sbrc	r23, 7
    4b3a:	80 95       	com	r24
    4b3c:	98 2f       	mov	r25, r24
    4b3e:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4b42:	7b 01       	movw	r14, r22
    4b44:	8c 01       	movw	r16, r24
    4b46:	60 91 59 05 	lds	r22, 0x0559
    4b4a:	70 91 5a 05 	lds	r23, 0x055A
    4b4e:	db ce       	rjmp	.-586    	; 0x4906 <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    4b50:	80 91 e3 04 	lds	r24, 0x04E3
    4b54:	90 91 e4 04 	lds	r25, 0x04E4
    4b58:	82 17       	cp	r24, r18
    4b5a:	93 07       	cpc	r25, r19
    4b5c:	0c f0       	brlt	.+2      	; 0x4b60 <getInputFromSpeed+0x33e>
    4b5e:	a1 c0       	rjmp	.+322    	; 0x4ca2 <getInputFromSpeed+0x480>
    4b60:	80 91 f3 04 	lds	r24, 0x04F3
    4b64:	90 91 f4 04 	lds	r25, 0x04F4
    4b68:	82 17       	cp	r24, r18
    4b6a:	93 07       	cpc	r25, r19
    4b6c:	0c f0       	brlt	.+2      	; 0x4b70 <getInputFromSpeed+0x34e>
    4b6e:	a2 c0       	rjmp	.+324    	; 0x4cb4 <getInputFromSpeed+0x492>
    4b70:	80 91 03 05 	lds	r24, 0x0503
    4b74:	90 91 04 05 	lds	r25, 0x0504
    4b78:	82 17       	cp	r24, r18
    4b7a:	93 07       	cpc	r25, r19
    4b7c:	0c f0       	brlt	.+2      	; 0x4b80 <getInputFromSpeed+0x35e>
    4b7e:	9d c0       	rjmp	.+314    	; 0x4cba <getInputFromSpeed+0x498>
    4b80:	80 91 13 05 	lds	r24, 0x0513
    4b84:	90 91 14 05 	lds	r25, 0x0514
    4b88:	82 17       	cp	r24, r18
    4b8a:	93 07       	cpc	r25, r19
    4b8c:	0c f0       	brlt	.+2      	; 0x4b90 <getInputFromSpeed+0x36e>
    4b8e:	98 c0       	rjmp	.+304    	; 0x4cc0 <getInputFromSpeed+0x49e>
    4b90:	80 91 23 05 	lds	r24, 0x0523
    4b94:	90 91 24 05 	lds	r25, 0x0524
    4b98:	82 17       	cp	r24, r18
    4b9a:	93 07       	cpc	r25, r19
    4b9c:	0c f0       	brlt	.+2      	; 0x4ba0 <getInputFromSpeed+0x37e>
    4b9e:	84 c0       	rjmp	.+264    	; 0x4ca8 <getInputFromSpeed+0x486>
    4ba0:	80 91 33 05 	lds	r24, 0x0533
    4ba4:	90 91 34 05 	lds	r25, 0x0534
    4ba8:	82 17       	cp	r24, r18
    4baa:	93 07       	cpc	r25, r19
    4bac:	0c f0       	brlt	.+2      	; 0x4bb0 <getInputFromSpeed+0x38e>
    4bae:	7f c0       	rjmp	.+254    	; 0x4cae <getInputFromSpeed+0x48c>
    4bb0:	80 91 43 05 	lds	r24, 0x0543
    4bb4:	90 91 44 05 	lds	r25, 0x0544
    4bb8:	82 17       	cp	r24, r18
    4bba:	93 07       	cpc	r25, r19
    4bbc:	0c f0       	brlt	.+2      	; 0x4bc0 <getInputFromSpeed+0x39e>
    4bbe:	88 c0       	rjmp	.+272    	; 0x4cd0 <getInputFromSpeed+0x4ae>
    4bc0:	80 91 53 05 	lds	r24, 0x0553
    4bc4:	90 91 54 05 	lds	r25, 0x0554
    4bc8:	82 17       	cp	r24, r18
    4bca:	93 07       	cpc	r25, r19
    4bcc:	0c f0       	brlt	.+2      	; 0x4bd0 <getInputFromSpeed+0x3ae>
    4bce:	83 c0       	rjmp	.+262    	; 0x4cd6 <getInputFromSpeed+0x4b4>
    4bd0:	c0 91 63 05 	lds	r28, 0x0563
    4bd4:	d0 91 64 05 	lds	r29, 0x0564
    4bd8:	c2 17       	cp	r28, r18
    4bda:	d3 07       	cpc	r29, r19
    4bdc:	0c f4       	brge	.+2      	; 0x4be0 <getInputFromSpeed+0x3be>
    4bde:	d9 ce       	rjmp	.-590    	; 0x4992 <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    4be0:	c8 e0       	ldi	r28, 0x08	; 8
    4be2:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    4be4:	20 97       	sbiw	r28, 0x00	; 0
    4be6:	09 f0       	breq	.+2      	; 0x4bea <getInputFromSpeed+0x3c8>
    4be8:	79 c0       	rjmp	.+242    	; 0x4cdc <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    4bea:	66 23       	and	r22, r22
    4bec:	91 f4       	brne	.+36     	; 0x4c12 <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    4bee:	40 91 d5 04 	lds	r20, 0x04D5
    4bf2:	50 91 d6 04 	lds	r21, 0x04D6
    4bf6:	24 9f       	mul	r18, r20
    4bf8:	c0 01       	movw	r24, r0
    4bfa:	25 9f       	mul	r18, r21
    4bfc:	90 0d       	add	r25, r0
    4bfe:	34 9f       	mul	r19, r20
    4c00:	90 0d       	add	r25, r0
    4c02:	11 24       	eor	r1, r1
    4c04:	60 91 d7 04 	lds	r22, 0x04D7
    4c08:	70 91 d8 04 	lds	r23, 0x04D8
    4c0c:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
    4c10:	9a ce       	rjmp	.-716    	; 0x4946 <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    4c12:	61 30       	cpi	r22, 0x01	; 1
    4c14:	d1 f0       	breq	.+52     	; 0x4c4a <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    4c16:	62 30       	cpi	r22, 0x02	; 2
    4c18:	51 f1       	breq	.+84     	; 0x4c6e <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    4c1a:	63 30       	cpi	r22, 0x03	; 3
    4c1c:	09 f0       	breq	.+2      	; 0x4c20 <getInputFromSpeed+0x3fe>
    4c1e:	91 ce       	rjmp	.-734    	; 0x4942 <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    4c20:	40 91 e1 04 	lds	r20, 0x04E1
    4c24:	50 91 e2 04 	lds	r21, 0x04E2
    4c28:	24 9f       	mul	r18, r20
    4c2a:	c0 01       	movw	r24, r0
    4c2c:	25 9f       	mul	r18, r21
    4c2e:	90 0d       	add	r25, r0
    4c30:	34 9f       	mul	r19, r20
    4c32:	90 0d       	add	r25, r0
    4c34:	11 24       	eor	r1, r1
    4c36:	60 91 e3 04 	lds	r22, 0x04E3
    4c3a:	70 91 e4 04 	lds	r23, 0x04E4
    4c3e:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
            temp = -temp;
    4c42:	70 95       	com	r23
    4c44:	61 95       	neg	r22
    4c46:	7f 4f       	sbci	r23, 0xFF	; 255
    4c48:	7e ce       	rjmp	.-772    	; 0x4946 <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    4c4a:	40 91 d9 04 	lds	r20, 0x04D9
    4c4e:	50 91 da 04 	lds	r21, 0x04DA
    4c52:	24 9f       	mul	r18, r20
    4c54:	c0 01       	movw	r24, r0
    4c56:	25 9f       	mul	r18, r21
    4c58:	90 0d       	add	r25, r0
    4c5a:	34 9f       	mul	r19, r20
    4c5c:	90 0d       	add	r25, r0
    4c5e:	11 24       	eor	r1, r1
    4c60:	60 91 db 04 	lds	r22, 0x04DB
    4c64:	70 91 dc 04 	lds	r23, 0x04DC
    4c68:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
    4c6c:	6c ce       	rjmp	.-808    	; 0x4946 <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    4c6e:	40 91 dd 04 	lds	r20, 0x04DD
    4c72:	50 91 de 04 	lds	r21, 0x04DE
    4c76:	24 9f       	mul	r18, r20
    4c78:	c0 01       	movw	r24, r0
    4c7a:	25 9f       	mul	r18, r21
    4c7c:	90 0d       	add	r25, r0
    4c7e:	34 9f       	mul	r19, r20
    4c80:	90 0d       	add	r25, r0
    4c82:	11 24       	eor	r1, r1
    4c84:	60 91 df 04 	lds	r22, 0x04DF
    4c88:	70 91 e0 04 	lds	r23, 0x04E0
    4c8c:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
            temp = -temp;
    4c90:	70 95       	com	r23
    4c92:	61 95       	neg	r22
    4c94:	7f 4f       	sbci	r23, 0xFF	; 255
    4c96:	57 ce       	rjmp	.-850    	; 0x4946 <getInputFromSpeed+0x124>
    4c98:	c0 91 5b 05 	lds	r28, 0x055B
    4c9c:	d0 91 5c 05 	lds	r29, 0x055C
    4ca0:	49 cf       	rjmp	.-366    	; 0x4b34 <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4ca2:	c0 e0       	ldi	r28, 0x00	; 0
    4ca4:	d0 e0       	ldi	r29, 0x00	; 0
    4ca6:	9e cf       	rjmp	.-196    	; 0x4be4 <getInputFromSpeed+0x3c2>
    4ca8:	c4 e0       	ldi	r28, 0x04	; 4
    4caa:	d0 e0       	ldi	r29, 0x00	; 0
    4cac:	9b cf       	rjmp	.-202    	; 0x4be4 <getInputFromSpeed+0x3c2>
    4cae:	c5 e0       	ldi	r28, 0x05	; 5
    4cb0:	d0 e0       	ldi	r29, 0x00	; 0
    4cb2:	98 cf       	rjmp	.-208    	; 0x4be4 <getInputFromSpeed+0x3c2>
    4cb4:	c1 e0       	ldi	r28, 0x01	; 1
    4cb6:	d0 e0       	ldi	r29, 0x00	; 0
    4cb8:	95 cf       	rjmp	.-214    	; 0x4be4 <getInputFromSpeed+0x3c2>
    4cba:	c2 e0       	ldi	r28, 0x02	; 2
    4cbc:	d0 e0       	ldi	r29, 0x00	; 0
    4cbe:	92 cf       	rjmp	.-220    	; 0x4be4 <getInputFromSpeed+0x3c2>
    4cc0:	c3 e0       	ldi	r28, 0x03	; 3
    4cc2:	d0 e0       	ldi	r29, 0x00	; 0
    4cc4:	8f cf       	rjmp	.-226    	; 0x4be4 <getInputFromSpeed+0x3c2>
    4cc6:	c0 91 5f 05 	lds	r28, 0x055F
    4cca:	d0 91 60 05 	lds	r29, 0x0560
    4cce:	b7 ce       	rjmp	.-658    	; 0x4a3e <getInputFromSpeed+0x21c>
    4cd0:	c6 e0       	ldi	r28, 0x06	; 6
    4cd2:	d0 e0       	ldi	r29, 0x00	; 0
    4cd4:	87 cf       	rjmp	.-242    	; 0x4be4 <getInputFromSpeed+0x3c2>
    4cd6:	c7 e0       	ldi	r28, 0x07	; 7
    4cd8:	d0 e0       	ldi	r29, 0x00	; 0
    4cda:	84 cf       	rjmp	.-248    	; 0x4be4 <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    4cdc:	c9 30       	cpi	r28, 0x09	; 9
    4cde:	d1 05       	cpc	r29, r1
    4ce0:	09 f4       	brne	.+2      	; 0x4ce4 <getInputFromSpeed+0x4c2>
    4ce2:	48 ce       	rjmp	.-880    	; 0x4974 <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    4ce4:	66 23       	and	r22, r22
    4ce6:	09 f0       	breq	.+2      	; 0x4cea <getInputFromSpeed+0x4c8>
    4ce8:	47 c0       	rjmp	.+142    	; 0x4d78 <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    4cea:	fe 01       	movw	r30, r28
    4cec:	e2 95       	swap	r30
    4cee:	f2 95       	swap	r31
    4cf0:	f0 7f       	andi	r31, 0xF0	; 240
    4cf2:	fe 27       	eor	r31, r30
    4cf4:	e0 7f       	andi	r30, 0xF0	; 240
    4cf6:	fe 27       	eor	r31, r30
    4cf8:	eb 53       	subi	r30, 0x3B	; 59
    4cfa:	fb 4f       	sbci	r31, 0xFB	; 251
    4cfc:	c2 80       	ldd	r12, Z+2	; 0x02
    4cfe:	d3 80       	ldd	r13, Z+3	; 0x03
    4d00:	a0 80       	ld	r10, Z
    4d02:	b1 80       	ldd	r11, Z+1	; 0x01
    4d04:	2c 19       	sub	r18, r12
    4d06:	3d 09       	sbc	r19, r13
    4d08:	b9 01       	movw	r22, r18
    4d0a:	88 27       	eor	r24, r24
    4d0c:	77 fd       	sbrc	r23, 7
    4d0e:	80 95       	com	r24
    4d10:	98 2f       	mov	r25, r24
    4d12:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4d16:	7b 01       	movw	r14, r22
    4d18:	8c 01       	movw	r16, r24
    4d1a:	c2 95       	swap	r28
    4d1c:	d2 95       	swap	r29
    4d1e:	d0 7f       	andi	r29, 0xF0	; 240
    4d20:	dc 27       	eor	r29, r28
    4d22:	c0 7f       	andi	r28, 0xF0	; 240
    4d24:	dc 27       	eor	r29, r28
    4d26:	cb 52       	subi	r28, 0x2B	; 43
    4d28:	db 4f       	sbci	r29, 0xFB	; 251
    4d2a:	68 81       	ld	r22, Y
    4d2c:	79 81       	ldd	r23, Y+1	; 0x01
    4d2e:	6a 19       	sub	r22, r10
    4d30:	7b 09       	sbc	r23, r11
    4d32:	88 27       	eor	r24, r24
    4d34:	77 fd       	sbrc	r23, 7
    4d36:	80 95       	com	r24
    4d38:	98 2f       	mov	r25, r24
    4d3a:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4d3e:	9b 01       	movw	r18, r22
    4d40:	ac 01       	movw	r20, r24
    4d42:	c8 01       	movw	r24, r16
    4d44:	b7 01       	movw	r22, r14
    4d46:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    4d4a:	7b 01       	movw	r14, r22
    4d4c:	8c 01       	movw	r16, r24
    4d4e:	6a 81       	ldd	r22, Y+2	; 0x02
    4d50:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    4d52:	6c 19       	sub	r22, r12
    4d54:	7d 09       	sbc	r23, r13
    4d56:	88 27       	eor	r24, r24
    4d58:	77 fd       	sbrc	r23, 7
    4d5a:	80 95       	com	r24
    4d5c:	98 2f       	mov	r25, r24
    4d5e:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4d62:	9b 01       	movw	r18, r22
    4d64:	ac 01       	movw	r20, r24
    4d66:	c8 01       	movw	r24, r16
    4d68:	b7 01       	movw	r22, r14
    4d6a:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    4d6e:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    4d72:	6a 0d       	add	r22, r10
    4d74:	7b 1d       	adc	r23, r11
    4d76:	e7 cd       	rjmp	.-1074   	; 0x4946 <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    4d78:	61 30       	cpi	r22, 0x01	; 1
    4d7a:	09 f4       	brne	.+2      	; 0x4d7e <getInputFromSpeed+0x55c>
    4d7c:	50 c0       	rjmp	.+160    	; 0x4e1e <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    4d7e:	62 30       	cpi	r22, 0x02	; 2
    4d80:	09 f4       	brne	.+2      	; 0x4d84 <getInputFromSpeed+0x562>
    4d82:	82 c0       	rjmp	.+260    	; 0x4e88 <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    4d84:	63 30       	cpi	r22, 0x03	; 3
    4d86:	09 f0       	breq	.+2      	; 0x4d8a <getInputFromSpeed+0x568>
    4d88:	dc cd       	rjmp	.-1096   	; 0x4942 <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    4d8a:	fe 01       	movw	r30, r28
    4d8c:	e2 95       	swap	r30
    4d8e:	f2 95       	swap	r31
    4d90:	f0 7f       	andi	r31, 0xF0	; 240
    4d92:	fe 27       	eor	r31, r30
    4d94:	e0 7f       	andi	r30, 0xF0	; 240
    4d96:	fe 27       	eor	r31, r30
    4d98:	eb 53       	subi	r30, 0x3B	; 59
    4d9a:	fb 4f       	sbci	r31, 0xFB	; 251
    4d9c:	c6 84       	ldd	r12, Z+14	; 0x0e
    4d9e:	d7 84       	ldd	r13, Z+15	; 0x0f
    4da0:	a4 84       	ldd	r10, Z+12	; 0x0c
    4da2:	b5 84       	ldd	r11, Z+13	; 0x0d
    4da4:	2c 19       	sub	r18, r12
    4da6:	3d 09       	sbc	r19, r13
    4da8:	b9 01       	movw	r22, r18
    4daa:	88 27       	eor	r24, r24
    4dac:	77 fd       	sbrc	r23, 7
    4dae:	80 95       	com	r24
    4db0:	98 2f       	mov	r25, r24
    4db2:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4db6:	7b 01       	movw	r14, r22
    4db8:	8c 01       	movw	r16, r24
    4dba:	c2 95       	swap	r28
    4dbc:	d2 95       	swap	r29
    4dbe:	d0 7f       	andi	r29, 0xF0	; 240
    4dc0:	dc 27       	eor	r29, r28
    4dc2:	c0 7f       	andi	r28, 0xF0	; 240
    4dc4:	dc 27       	eor	r29, r28
    4dc6:	cb 52       	subi	r28, 0x2B	; 43
    4dc8:	db 4f       	sbci	r29, 0xFB	; 251
    4dca:	6c 85       	ldd	r22, Y+12	; 0x0c
    4dcc:	7d 85       	ldd	r23, Y+13	; 0x0d
    4dce:	6a 19       	sub	r22, r10
    4dd0:	7b 09       	sbc	r23, r11
    4dd2:	88 27       	eor	r24, r24
    4dd4:	77 fd       	sbrc	r23, 7
    4dd6:	80 95       	com	r24
    4dd8:	98 2f       	mov	r25, r24
    4dda:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4dde:	9b 01       	movw	r18, r22
    4de0:	ac 01       	movw	r20, r24
    4de2:	c8 01       	movw	r24, r16
    4de4:	b7 01       	movw	r22, r14
    4de6:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    4dea:	7b 01       	movw	r14, r22
    4dec:	8c 01       	movw	r16, r24
    4dee:	6e 85       	ldd	r22, Y+14	; 0x0e
    4df0:	7f 85       	ldd	r23, Y+15	; 0x0f
    4df2:	6c 19       	sub	r22, r12
    4df4:	7d 09       	sbc	r23, r13
    4df6:	88 27       	eor	r24, r24
    4df8:	77 fd       	sbrc	r23, 7
    4dfa:	80 95       	com	r24
    4dfc:	98 2f       	mov	r25, r24
    4dfe:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4e02:	9b 01       	movw	r18, r22
    4e04:	ac 01       	movw	r20, r24
    4e06:	c8 01       	movw	r24, r16
    4e08:	b7 01       	movw	r22, r14
    4e0a:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    4e0e:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    4e12:	6a 0d       	add	r22, r10
    4e14:	7b 1d       	adc	r23, r11
            temp = -temp;
    4e16:	70 95       	com	r23
    4e18:	61 95       	neg	r22
    4e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e1c:	94 cd       	rjmp	.-1240   	; 0x4946 <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    4e1e:	fe 01       	movw	r30, r28
    4e20:	e2 95       	swap	r30
    4e22:	f2 95       	swap	r31
    4e24:	f0 7f       	andi	r31, 0xF0	; 240
    4e26:	fe 27       	eor	r31, r30
    4e28:	e0 7f       	andi	r30, 0xF0	; 240
    4e2a:	fe 27       	eor	r31, r30
    4e2c:	eb 53       	subi	r30, 0x3B	; 59
    4e2e:	fb 4f       	sbci	r31, 0xFB	; 251
    4e30:	c6 80       	ldd	r12, Z+6	; 0x06
    4e32:	d7 80       	ldd	r13, Z+7	; 0x07
    4e34:	a4 80       	ldd	r10, Z+4	; 0x04
    4e36:	b5 80       	ldd	r11, Z+5	; 0x05
    4e38:	2c 19       	sub	r18, r12
    4e3a:	3d 09       	sbc	r19, r13
    4e3c:	b9 01       	movw	r22, r18
    4e3e:	88 27       	eor	r24, r24
    4e40:	77 fd       	sbrc	r23, 7
    4e42:	80 95       	com	r24
    4e44:	98 2f       	mov	r25, r24
    4e46:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4e4a:	7b 01       	movw	r14, r22
    4e4c:	8c 01       	movw	r16, r24
    4e4e:	c2 95       	swap	r28
    4e50:	d2 95       	swap	r29
    4e52:	d0 7f       	andi	r29, 0xF0	; 240
    4e54:	dc 27       	eor	r29, r28
    4e56:	c0 7f       	andi	r28, 0xF0	; 240
    4e58:	dc 27       	eor	r29, r28
    4e5a:	cb 52       	subi	r28, 0x2B	; 43
    4e5c:	db 4f       	sbci	r29, 0xFB	; 251
    4e5e:	6c 81       	ldd	r22, Y+4	; 0x04
    4e60:	7d 81       	ldd	r23, Y+5	; 0x05
    4e62:	6a 19       	sub	r22, r10
    4e64:	7b 09       	sbc	r23, r11
    4e66:	88 27       	eor	r24, r24
    4e68:	77 fd       	sbrc	r23, 7
    4e6a:	80 95       	com	r24
    4e6c:	98 2f       	mov	r25, r24
    4e6e:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4e72:	9b 01       	movw	r18, r22
    4e74:	ac 01       	movw	r20, r24
    4e76:	c8 01       	movw	r24, r16
    4e78:	b7 01       	movw	r22, r14
    4e7a:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    4e7e:	7b 01       	movw	r14, r22
    4e80:	8c 01       	movw	r16, r24
    4e82:	6e 81       	ldd	r22, Y+6	; 0x06
    4e84:	7f 81       	ldd	r23, Y+7	; 0x07
    4e86:	65 cf       	rjmp	.-310    	; 0x4d52 <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    4e88:	fe 01       	movw	r30, r28
    4e8a:	e2 95       	swap	r30
    4e8c:	f2 95       	swap	r31
    4e8e:	f0 7f       	andi	r31, 0xF0	; 240
    4e90:	fe 27       	eor	r31, r30
    4e92:	e0 7f       	andi	r30, 0xF0	; 240
    4e94:	fe 27       	eor	r31, r30
    4e96:	eb 53       	subi	r30, 0x3B	; 59
    4e98:	fb 4f       	sbci	r31, 0xFB	; 251
    4e9a:	c2 84       	ldd	r12, Z+10	; 0x0a
    4e9c:	d3 84       	ldd	r13, Z+11	; 0x0b
    4e9e:	a0 84       	ldd	r10, Z+8	; 0x08
    4ea0:	b1 84       	ldd	r11, Z+9	; 0x09
    4ea2:	2c 19       	sub	r18, r12
    4ea4:	3d 09       	sbc	r19, r13
    4ea6:	b9 01       	movw	r22, r18
    4ea8:	88 27       	eor	r24, r24
    4eaa:	77 fd       	sbrc	r23, 7
    4eac:	80 95       	com	r24
    4eae:	98 2f       	mov	r25, r24
    4eb0:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4eb4:	7b 01       	movw	r14, r22
    4eb6:	8c 01       	movw	r16, r24
    4eb8:	c2 95       	swap	r28
    4eba:	d2 95       	swap	r29
    4ebc:	d0 7f       	andi	r29, 0xF0	; 240
    4ebe:	dc 27       	eor	r29, r28
    4ec0:	c0 7f       	andi	r28, 0xF0	; 240
    4ec2:	dc 27       	eor	r29, r28
    4ec4:	cb 52       	subi	r28, 0x2B	; 43
    4ec6:	db 4f       	sbci	r29, 0xFB	; 251
    4ec8:	68 85       	ldd	r22, Y+8	; 0x08
    4eca:	79 85       	ldd	r23, Y+9	; 0x09
    4ecc:	6a 19       	sub	r22, r10
    4ece:	7b 09       	sbc	r23, r11
    4ed0:	88 27       	eor	r24, r24
    4ed2:	77 fd       	sbrc	r23, 7
    4ed4:	80 95       	com	r24
    4ed6:	98 2f       	mov	r25, r24
    4ed8:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    4edc:	9b 01       	movw	r18, r22
    4ede:	ac 01       	movw	r20, r24
    4ee0:	c8 01       	movw	r24, r16
    4ee2:	b7 01       	movw	r22, r14
    4ee4:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    4ee8:	7b 01       	movw	r14, r22
    4eea:	8c 01       	movw	r16, r24
    4eec:	6a 85       	ldd	r22, Y+10	; 0x0a
    4eee:	7b 85       	ldd	r23, Y+11	; 0x0b
    4ef0:	80 cf       	rjmp	.-256    	; 0x4df2 <getInputFromSpeed+0x5d0>

00004ef2 <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    4ef2:	8f 92       	push	r8
    4ef4:	9f 92       	push	r9
    4ef6:	af 92       	push	r10
    4ef8:	bf 92       	push	r11
    4efa:	cf 92       	push	r12
    4efc:	df 92       	push	r13
    4efe:	ef 92       	push	r14
    4f00:	ff 92       	push	r15
    4f02:	0f 93       	push	r16
    4f04:	1f 93       	push	r17
    4f06:	cf 93       	push	r28
    4f08:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    4f0a:	c0 91 f3 02 	lds	r28, 0x02F3
    4f0e:	d0 91 f4 02 	lds	r29, 0x02F4
    4f12:	80 91 f5 02 	lds	r24, 0x02F5
    4f16:	90 91 f6 02 	lds	r25, 0x02F6
    4f1a:	97 fd       	sbrc	r25, 7
    4f1c:	d9 c0       	rjmp	.+434    	; 0x50d0 <getRightSpeedFromInput+0x1de>
    4f1e:	60 91 d9 04 	lds	r22, 0x04D9
    4f22:	70 91 da 04 	lds	r23, 0x04DA
    4f26:	6c 17       	cp	r22, r28
    4f28:	7d 07       	cpc	r23, r29
    4f2a:	0c f0       	brlt	.+2      	; 0x4f2e <getRightSpeedFromInput+0x3c>
    4f2c:	bd c0       	rjmp	.+378    	; 0x50a8 <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    4f2e:	0f ef       	ldi	r16, 0xFF	; 255
    4f30:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    4f32:	80 91 e9 04 	lds	r24, 0x04E9
    4f36:	90 91 ea 04 	lds	r25, 0x04EA
    4f3a:	8c 17       	cp	r24, r28
    4f3c:	9d 07       	cpc	r25, r29
    4f3e:	44 f0       	brlt	.+16     	; 0x4f50 <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    4f40:	81 e0       	ldi	r24, 0x01	; 1
    4f42:	9f ef       	ldi	r25, 0xFF	; 255
    4f44:	0f 3f       	cpi	r16, 0xFF	; 255
    4f46:	19 07       	cpc	r17, r25
    4f48:	09 f0       	breq	.+2      	; 0x4f4c <getRightSpeedFromInput+0x5a>
    4f4a:	80 e0       	ldi	r24, 0x00	; 0
    4f4c:	08 2f       	mov	r16, r24
    4f4e:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    4f50:	80 91 f9 04 	lds	r24, 0x04F9
    4f54:	90 91 fa 04 	lds	r25, 0x04FA
    4f58:	8c 17       	cp	r24, r28
    4f5a:	9d 07       	cpc	r25, r29
    4f5c:	2c f0       	brlt	.+10     	; 0x4f68 <getRightSpeedFromInput+0x76>
    4f5e:	8f ef       	ldi	r24, 0xFF	; 255
    4f60:	0f 3f       	cpi	r16, 0xFF	; 255
    4f62:	18 07       	cpc	r17, r24
    4f64:	09 f4       	brne	.+2      	; 0x4f68 <getRightSpeedFromInput+0x76>
    4f66:	6c c1       	rjmp	.+728    	; 0x5240 <getRightSpeedFromInput+0x34e>
    4f68:	80 91 09 05 	lds	r24, 0x0509
    4f6c:	90 91 0a 05 	lds	r25, 0x050A
    4f70:	8c 17       	cp	r24, r28
    4f72:	9d 07       	cpc	r25, r29
    4f74:	2c f0       	brlt	.+10     	; 0x4f80 <getRightSpeedFromInput+0x8e>
    4f76:	9f ef       	ldi	r25, 0xFF	; 255
    4f78:	0f 3f       	cpi	r16, 0xFF	; 255
    4f7a:	19 07       	cpc	r17, r25
    4f7c:	09 f4       	brne	.+2      	; 0x4f80 <getRightSpeedFromInput+0x8e>
    4f7e:	72 c1       	rjmp	.+740    	; 0x5264 <getRightSpeedFromInput+0x372>
    4f80:	80 91 19 05 	lds	r24, 0x0519
    4f84:	90 91 1a 05 	lds	r25, 0x051A
    4f88:	8c 17       	cp	r24, r28
    4f8a:	9d 07       	cpc	r25, r29
    4f8c:	2c f0       	brlt	.+10     	; 0x4f98 <getRightSpeedFromInput+0xa6>
    4f8e:	8f ef       	ldi	r24, 0xFF	; 255
    4f90:	0f 3f       	cpi	r16, 0xFF	; 255
    4f92:	18 07       	cpc	r17, r24
    4f94:	09 f4       	brne	.+2      	; 0x4f98 <getRightSpeedFromInput+0xa6>
    4f96:	63 c1       	rjmp	.+710    	; 0x525e <getRightSpeedFromInput+0x36c>
    4f98:	80 91 29 05 	lds	r24, 0x0529
    4f9c:	90 91 2a 05 	lds	r25, 0x052A
    4fa0:	8c 17       	cp	r24, r28
    4fa2:	9d 07       	cpc	r25, r29
    4fa4:	2c f0       	brlt	.+10     	; 0x4fb0 <getRightSpeedFromInput+0xbe>
    4fa6:	9f ef       	ldi	r25, 0xFF	; 255
    4fa8:	0f 3f       	cpi	r16, 0xFF	; 255
    4faa:	19 07       	cpc	r17, r25
    4fac:	09 f4       	brne	.+2      	; 0x4fb0 <getRightSpeedFromInput+0xbe>
    4fae:	54 c1       	rjmp	.+680    	; 0x5258 <getRightSpeedFromInput+0x366>
    4fb0:	80 91 39 05 	lds	r24, 0x0539
    4fb4:	90 91 3a 05 	lds	r25, 0x053A
    4fb8:	8c 17       	cp	r24, r28
    4fba:	9d 07       	cpc	r25, r29
    4fbc:	2c f0       	brlt	.+10     	; 0x4fc8 <getRightSpeedFromInput+0xd6>
    4fbe:	8f ef       	ldi	r24, 0xFF	; 255
    4fc0:	0f 3f       	cpi	r16, 0xFF	; 255
    4fc2:	18 07       	cpc	r17, r24
    4fc4:	09 f4       	brne	.+2      	; 0x4fc8 <getRightSpeedFromInput+0xd6>
    4fc6:	45 c1       	rjmp	.+650    	; 0x5252 <getRightSpeedFromInput+0x360>
    4fc8:	80 91 49 05 	lds	r24, 0x0549
    4fcc:	90 91 4a 05 	lds	r25, 0x054A
    4fd0:	8c 17       	cp	r24, r28
    4fd2:	9d 07       	cpc	r25, r29
    4fd4:	2c f0       	brlt	.+10     	; 0x4fe0 <getRightSpeedFromInput+0xee>
    4fd6:	9f ef       	ldi	r25, 0xFF	; 255
    4fd8:	0f 3f       	cpi	r16, 0xFF	; 255
    4fda:	19 07       	cpc	r17, r25
    4fdc:	09 f4       	brne	.+2      	; 0x4fe0 <getRightSpeedFromInput+0xee>
    4fde:	36 c1       	rjmp	.+620    	; 0x524c <getRightSpeedFromInput+0x35a>
    4fe0:	e0 90 59 05 	lds	r14, 0x0559
    4fe4:	f0 90 5a 05 	lds	r15, 0x055A
    4fe8:	ec 16       	cp	r14, r28
    4fea:	fd 06       	cpc	r15, r29
    4fec:	2c f0       	brlt	.+10     	; 0x4ff8 <getRightSpeedFromInput+0x106>
    4fee:	8f ef       	ldi	r24, 0xFF	; 255
    4ff0:	0f 3f       	cpi	r16, 0xFF	; 255
    4ff2:	18 07       	cpc	r17, r24
    4ff4:	09 f4       	brne	.+2      	; 0x4ff8 <getRightSpeedFromInput+0x106>
    4ff6:	27 c1       	rjmp	.+590    	; 0x5246 <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    4ff8:	20 97       	sbiw	r28, 0x00	; 0
    4ffa:	09 f4       	brne	.+2      	; 0x4ffe <getRightSpeedFromInput+0x10c>
    4ffc:	58 c0       	rjmp	.+176    	; 0x50ae <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    4ffe:	01 15       	cp	r16, r1
    5000:	11 05       	cpc	r17, r1
    5002:	09 f4       	brne	.+2      	; 0x5006 <getRightSpeedFromInput+0x114>
    5004:	32 c1       	rjmp	.+612    	; 0x526a <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5006:	9f ef       	ldi	r25, 0xFF	; 255
    5008:	0f 3f       	cpi	r16, 0xFF	; 255
    500a:	19 07       	cpc	r17, r25
    500c:	09 f4       	brne	.+2      	; 0x5010 <getRightSpeedFromInput+0x11e>
    500e:	e9 c0       	rjmp	.+466    	; 0x51e2 <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    5010:	f8 01       	movw	r30, r16
    5012:	e2 95       	swap	r30
    5014:	f2 95       	swap	r31
    5016:	f0 7f       	andi	r31, 0xF0	; 240
    5018:	fe 27       	eor	r31, r30
    501a:	e0 7f       	andi	r30, 0xF0	; 240
    501c:	fe 27       	eor	r31, r30
    501e:	eb 53       	subi	r30, 0x3B	; 59
    5020:	fb 4f       	sbci	r31, 0xFB	; 251
    5022:	a4 80       	ldd	r10, Z+4	; 0x04
    5024:	b5 80       	ldd	r11, Z+5	; 0x05
    5026:	86 80       	ldd	r8, Z+6	; 0x06
    5028:	97 80       	ldd	r9, Z+7	; 0x07
    502a:	ca 19       	sub	r28, r10
    502c:	db 09       	sbc	r29, r11
    502e:	be 01       	movw	r22, r28
    5030:	88 27       	eor	r24, r24
    5032:	77 fd       	sbrc	r23, 7
    5034:	80 95       	com	r24
    5036:	98 2f       	mov	r25, r24
    5038:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    503c:	6b 01       	movw	r12, r22
    503e:	7c 01       	movw	r14, r24
    5040:	e8 01       	movw	r28, r16
    5042:	c2 95       	swap	r28
    5044:	d2 95       	swap	r29
    5046:	d0 7f       	andi	r29, 0xF0	; 240
    5048:	dc 27       	eor	r29, r28
    504a:	c0 7f       	andi	r28, 0xF0	; 240
    504c:	dc 27       	eor	r29, r28
    504e:	cb 52       	subi	r28, 0x2B	; 43
    5050:	db 4f       	sbci	r29, 0xFB	; 251
    5052:	6e 81       	ldd	r22, Y+6	; 0x06
    5054:	7f 81       	ldd	r23, Y+7	; 0x07
    5056:	68 19       	sub	r22, r8
    5058:	79 09       	sbc	r23, r9
    505a:	88 27       	eor	r24, r24
    505c:	77 fd       	sbrc	r23, 7
    505e:	80 95       	com	r24
    5060:	98 2f       	mov	r25, r24
    5062:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    5066:	9b 01       	movw	r18, r22
    5068:	ac 01       	movw	r20, r24
    506a:	c7 01       	movw	r24, r14
    506c:	b6 01       	movw	r22, r12
    506e:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    5072:	7b 01       	movw	r14, r22
    5074:	8c 01       	movw	r16, r24
    5076:	6c 81       	ldd	r22, Y+4	; 0x04
    5078:	7d 81       	ldd	r23, Y+5	; 0x05
    507a:	6a 19       	sub	r22, r10
    507c:	7b 09       	sbc	r23, r11
    507e:	88 27       	eor	r24, r24
    5080:	77 fd       	sbrc	r23, 7
    5082:	80 95       	com	r24
    5084:	98 2f       	mov	r25, r24
    5086:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    508a:	9b 01       	movw	r18, r22
    508c:	ac 01       	movw	r20, r24
    508e:	c8 01       	movw	r24, r16
    5090:	b7 01       	movw	r22, r14
    5092:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    5096:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    509a:	68 0d       	add	r22, r8
    509c:	79 1d       	adc	r23, r9
    509e:	70 93 af 04 	sts	0x04AF, r23
    50a2:	60 93 ae 04 	sts	0x04AE, r22
    50a6:	07 c0       	rjmp	.+14     	; 0x50b6 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    50a8:	00 e0       	ldi	r16, 0x00	; 0
    50aa:	10 e0       	ldi	r17, 0x00	; 0
    50ac:	42 cf       	rjmp	.-380    	; 0x4f32 <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    50ae:	10 92 af 04 	sts	0x04AF, r1
    50b2:	10 92 ae 04 	sts	0x04AE, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    50b6:	df 91       	pop	r29
    50b8:	cf 91       	pop	r28
    50ba:	1f 91       	pop	r17
    50bc:	0f 91       	pop	r16
    50be:	ff 90       	pop	r15
    50c0:	ef 90       	pop	r14
    50c2:	df 90       	pop	r13
    50c4:	cf 90       	pop	r12
    50c6:	bf 90       	pop	r11
    50c8:	af 90       	pop	r10
    50ca:	9f 90       	pop	r9
    50cc:	8f 90       	pop	r8
    50ce:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    50d0:	60 91 e1 04 	lds	r22, 0x04E1
    50d4:	70 91 e2 04 	lds	r23, 0x04E2
    50d8:	6c 17       	cp	r22, r28
    50da:	7d 07       	cpc	r23, r29
    50dc:	0c f0       	brlt	.+2      	; 0x50e0 <getRightSpeedFromInput+0x1ee>
    50de:	7e c0       	rjmp	.+252    	; 0x51dc <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    50e0:	0f ef       	ldi	r16, 0xFF	; 255
    50e2:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    50e4:	80 91 f1 04 	lds	r24, 0x04F1
    50e8:	90 91 f2 04 	lds	r25, 0x04F2
    50ec:	8c 17       	cp	r24, r28
    50ee:	9d 07       	cpc	r25, r29
    50f0:	44 f0       	brlt	.+16     	; 0x5102 <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    50f2:	81 e0       	ldi	r24, 0x01	; 1
    50f4:	9f ef       	ldi	r25, 0xFF	; 255
    50f6:	0f 3f       	cpi	r16, 0xFF	; 255
    50f8:	19 07       	cpc	r17, r25
    50fa:	09 f0       	breq	.+2      	; 0x50fe <getRightSpeedFromInput+0x20c>
    50fc:	80 e0       	ldi	r24, 0x00	; 0
    50fe:	08 2f       	mov	r16, r24
    5100:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5102:	80 91 01 05 	lds	r24, 0x0501
    5106:	90 91 02 05 	lds	r25, 0x0502
    510a:	8c 17       	cp	r24, r28
    510c:	9d 07       	cpc	r25, r29
    510e:	2c f0       	brlt	.+10     	; 0x511a <getRightSpeedFromInput+0x228>
    5110:	8f ef       	ldi	r24, 0xFF	; 255
    5112:	0f 3f       	cpi	r16, 0xFF	; 255
    5114:	18 07       	cpc	r17, r24
    5116:	09 f4       	brne	.+2      	; 0x511a <getRightSpeedFromInput+0x228>
    5118:	19 c1       	rjmp	.+562    	; 0x534c <getRightSpeedFromInput+0x45a>
    511a:	80 91 11 05 	lds	r24, 0x0511
    511e:	90 91 12 05 	lds	r25, 0x0512
    5122:	8c 17       	cp	r24, r28
    5124:	9d 07       	cpc	r25, r29
    5126:	2c f0       	brlt	.+10     	; 0x5132 <getRightSpeedFromInput+0x240>
    5128:	9f ef       	ldi	r25, 0xFF	; 255
    512a:	0f 3f       	cpi	r16, 0xFF	; 255
    512c:	19 07       	cpc	r17, r25
    512e:	09 f4       	brne	.+2      	; 0x5132 <getRightSpeedFromInput+0x240>
    5130:	0a c1       	rjmp	.+532    	; 0x5346 <getRightSpeedFromInput+0x454>
    5132:	80 91 21 05 	lds	r24, 0x0521
    5136:	90 91 22 05 	lds	r25, 0x0522
    513a:	8c 17       	cp	r24, r28
    513c:	9d 07       	cpc	r25, r29
    513e:	2c f0       	brlt	.+10     	; 0x514a <getRightSpeedFromInput+0x258>
    5140:	8f ef       	ldi	r24, 0xFF	; 255
    5142:	0f 3f       	cpi	r16, 0xFF	; 255
    5144:	18 07       	cpc	r17, r24
    5146:	09 f4       	brne	.+2      	; 0x514a <getRightSpeedFromInput+0x258>
    5148:	fb c0       	rjmp	.+502    	; 0x5340 <getRightSpeedFromInput+0x44e>
    514a:	80 91 31 05 	lds	r24, 0x0531
    514e:	90 91 32 05 	lds	r25, 0x0532
    5152:	8c 17       	cp	r24, r28
    5154:	9d 07       	cpc	r25, r29
    5156:	2c f0       	brlt	.+10     	; 0x5162 <getRightSpeedFromInput+0x270>
    5158:	9f ef       	ldi	r25, 0xFF	; 255
    515a:	0f 3f       	cpi	r16, 0xFF	; 255
    515c:	19 07       	cpc	r17, r25
    515e:	09 f4       	brne	.+2      	; 0x5162 <getRightSpeedFromInput+0x270>
    5160:	ec c0       	rjmp	.+472    	; 0x533a <getRightSpeedFromInput+0x448>
    5162:	80 91 41 05 	lds	r24, 0x0541
    5166:	90 91 42 05 	lds	r25, 0x0542
    516a:	8c 17       	cp	r24, r28
    516c:	9d 07       	cpc	r25, r29
    516e:	2c f0       	brlt	.+10     	; 0x517a <getRightSpeedFromInput+0x288>
    5170:	8f ef       	ldi	r24, 0xFF	; 255
    5172:	0f 3f       	cpi	r16, 0xFF	; 255
    5174:	18 07       	cpc	r17, r24
    5176:	09 f4       	brne	.+2      	; 0x517a <getRightSpeedFromInput+0x288>
    5178:	dd c0       	rjmp	.+442    	; 0x5334 <getRightSpeedFromInput+0x442>
    517a:	80 91 51 05 	lds	r24, 0x0551
    517e:	90 91 52 05 	lds	r25, 0x0552
    5182:	8c 17       	cp	r24, r28
    5184:	9d 07       	cpc	r25, r29
    5186:	2c f0       	brlt	.+10     	; 0x5192 <getRightSpeedFromInput+0x2a0>
    5188:	9f ef       	ldi	r25, 0xFF	; 255
    518a:	0f 3f       	cpi	r16, 0xFF	; 255
    518c:	19 07       	cpc	r17, r25
    518e:	09 f4       	brne	.+2      	; 0x5192 <getRightSpeedFromInput+0x2a0>
    5190:	ce c0       	rjmp	.+412    	; 0x532e <getRightSpeedFromInput+0x43c>
    5192:	e0 90 61 05 	lds	r14, 0x0561
    5196:	f0 90 62 05 	lds	r15, 0x0562
    519a:	ec 16       	cp	r14, r28
    519c:	fd 06       	cpc	r15, r29
    519e:	2c f0       	brlt	.+10     	; 0x51aa <getRightSpeedFromInput+0x2b8>
    51a0:	8f ef       	ldi	r24, 0xFF	; 255
    51a2:	0f 3f       	cpi	r16, 0xFF	; 255
    51a4:	18 07       	cpc	r17, r24
    51a6:	09 f4       	brne	.+2      	; 0x51aa <getRightSpeedFromInput+0x2b8>
    51a8:	bf c0       	rjmp	.+382    	; 0x5328 <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    51aa:	01 15       	cp	r16, r1
    51ac:	11 05       	cpc	r17, r1
    51ae:	09 f0       	breq	.+2      	; 0x51b2 <getRightSpeedFromInput+0x2c0>
    51b0:	6e c0       	rjmp	.+220    	; 0x528e <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    51b2:	20 91 e3 04 	lds	r18, 0x04E3
    51b6:	30 91 e4 04 	lds	r19, 0x04E4
    51ba:	c2 9f       	mul	r28, r18
    51bc:	c0 01       	movw	r24, r0
    51be:	c3 9f       	mul	r28, r19
    51c0:	90 0d       	add	r25, r0
    51c2:	d2 9f       	mul	r29, r18
    51c4:	90 0d       	add	r25, r0
    51c6:	11 24       	eor	r1, r1
    51c8:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    51cc:	70 95       	com	r23
    51ce:	61 95       	neg	r22
    51d0:	7f 4f       	sbci	r23, 0xFF	; 255
    51d2:	70 93 af 04 	sts	0x04AF, r23
    51d6:	60 93 ae 04 	sts	0x04AE, r22
    51da:	6d cf       	rjmp	.-294    	; 0x50b6 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    51dc:	00 e0       	ldi	r16, 0x00	; 0
    51de:	10 e0       	ldi	r17, 0x00	; 0
    51e0:	81 cf       	rjmp	.-254    	; 0x50e4 <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    51e2:	60 91 5b 05 	lds	r22, 0x055B
    51e6:	70 91 5c 05 	lds	r23, 0x055C
    51ea:	88 27       	eor	r24, r24
    51ec:	77 fd       	sbrc	r23, 7
    51ee:	80 95       	com	r24
    51f0:	98 2f       	mov	r25, r24
    51f2:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    51f6:	5b 01       	movw	r10, r22
    51f8:	6c 01       	movw	r12, r24
    51fa:	be 01       	movw	r22, r28
    51fc:	88 27       	eor	r24, r24
    51fe:	77 fd       	sbrc	r23, 7
    5200:	80 95       	com	r24
    5202:	98 2f       	mov	r25, r24
    5204:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    5208:	9b 01       	movw	r18, r22
    520a:	ac 01       	movw	r20, r24
    520c:	c6 01       	movw	r24, r12
    520e:	b5 01       	movw	r22, r10
    5210:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    5214:	5b 01       	movw	r10, r22
    5216:	6c 01       	movw	r12, r24
    5218:	b7 01       	movw	r22, r14
    521a:	88 27       	eor	r24, r24
    521c:	77 fd       	sbrc	r23, 7
    521e:	80 95       	com	r24
    5220:	98 2f       	mov	r25, r24
    5222:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    5226:	9b 01       	movw	r18, r22
    5228:	ac 01       	movw	r20, r24
    522a:	c6 01       	movw	r24, r12
    522c:	b5 01       	movw	r22, r10
    522e:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    5232:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    5236:	70 93 af 04 	sts	0x04AF, r23
    523a:	60 93 ae 04 	sts	0x04AE, r22
    523e:	3b cf       	rjmp	.-394    	; 0x50b6 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5240:	02 e0       	ldi	r16, 0x02	; 2
    5242:	10 e0       	ldi	r17, 0x00	; 0
    5244:	91 ce       	rjmp	.-734    	; 0x4f68 <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5246:	08 e0       	ldi	r16, 0x08	; 8
    5248:	10 e0       	ldi	r17, 0x00	; 0
    524a:	d6 ce       	rjmp	.-596    	; 0x4ff8 <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    524c:	07 e0       	ldi	r16, 0x07	; 7
    524e:	10 e0       	ldi	r17, 0x00	; 0
    5250:	c7 ce       	rjmp	.-626    	; 0x4fe0 <getRightSpeedFromInput+0xee>
    5252:	06 e0       	ldi	r16, 0x06	; 6
    5254:	10 e0       	ldi	r17, 0x00	; 0
    5256:	b8 ce       	rjmp	.-656    	; 0x4fc8 <getRightSpeedFromInput+0xd6>
    5258:	05 e0       	ldi	r16, 0x05	; 5
    525a:	10 e0       	ldi	r17, 0x00	; 0
    525c:	a9 ce       	rjmp	.-686    	; 0x4fb0 <getRightSpeedFromInput+0xbe>
    525e:	04 e0       	ldi	r16, 0x04	; 4
    5260:	10 e0       	ldi	r17, 0x00	; 0
    5262:	9a ce       	rjmp	.-716    	; 0x4f98 <getRightSpeedFromInput+0xa6>
    5264:	03 e0       	ldi	r16, 0x03	; 3
    5266:	10 e0       	ldi	r17, 0x00	; 0
    5268:	8b ce       	rjmp	.-746    	; 0x4f80 <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    526a:	20 91 db 04 	lds	r18, 0x04DB
    526e:	30 91 dc 04 	lds	r19, 0x04DC
    5272:	c2 9f       	mul	r28, r18
    5274:	c0 01       	movw	r24, r0
    5276:	c3 9f       	mul	r28, r19
    5278:	90 0d       	add	r25, r0
    527a:	d2 9f       	mul	r29, r18
    527c:	90 0d       	add	r25, r0
    527e:	11 24       	eor	r1, r1
    5280:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
    5284:	70 93 af 04 	sts	0x04AF, r23
    5288:	60 93 ae 04 	sts	0x04AE, r22
    528c:	14 cf       	rjmp	.-472    	; 0x50b6 <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    528e:	8f ef       	ldi	r24, 0xFF	; 255
    5290:	0f 3f       	cpi	r16, 0xFF	; 255
    5292:	18 07       	cpc	r17, r24
    5294:	09 f4       	brne	.+2      	; 0x5298 <getRightSpeedFromInput+0x3a6>
    5296:	5d c0       	rjmp	.+186    	; 0x5352 <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    5298:	f8 01       	movw	r30, r16
    529a:	e2 95       	swap	r30
    529c:	f2 95       	swap	r31
    529e:	f0 7f       	andi	r31, 0xF0	; 240
    52a0:	fe 27       	eor	r31, r30
    52a2:	e0 7f       	andi	r30, 0xF0	; 240
    52a4:	fe 27       	eor	r31, r30
    52a6:	eb 53       	subi	r30, 0x3B	; 59
    52a8:	fb 4f       	sbci	r31, 0xFB	; 251
    52aa:	a4 84       	ldd	r10, Z+12	; 0x0c
    52ac:	b5 84       	ldd	r11, Z+13	; 0x0d
    52ae:	86 84       	ldd	r8, Z+14	; 0x0e
    52b0:	97 84       	ldd	r9, Z+15	; 0x0f
    52b2:	ca 19       	sub	r28, r10
    52b4:	db 09       	sbc	r29, r11
    52b6:	be 01       	movw	r22, r28
    52b8:	88 27       	eor	r24, r24
    52ba:	77 fd       	sbrc	r23, 7
    52bc:	80 95       	com	r24
    52be:	98 2f       	mov	r25, r24
    52c0:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    52c4:	6b 01       	movw	r12, r22
    52c6:	7c 01       	movw	r14, r24
    52c8:	e8 01       	movw	r28, r16
    52ca:	c2 95       	swap	r28
    52cc:	d2 95       	swap	r29
    52ce:	d0 7f       	andi	r29, 0xF0	; 240
    52d0:	dc 27       	eor	r29, r28
    52d2:	c0 7f       	andi	r28, 0xF0	; 240
    52d4:	dc 27       	eor	r29, r28
    52d6:	cb 52       	subi	r28, 0x2B	; 43
    52d8:	db 4f       	sbci	r29, 0xFB	; 251
    52da:	6e 85       	ldd	r22, Y+14	; 0x0e
    52dc:	7f 85       	ldd	r23, Y+15	; 0x0f
    52de:	68 19       	sub	r22, r8
    52e0:	79 09       	sbc	r23, r9
    52e2:	88 27       	eor	r24, r24
    52e4:	77 fd       	sbrc	r23, 7
    52e6:	80 95       	com	r24
    52e8:	98 2f       	mov	r25, r24
    52ea:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    52ee:	9b 01       	movw	r18, r22
    52f0:	ac 01       	movw	r20, r24
    52f2:	c7 01       	movw	r24, r14
    52f4:	b6 01       	movw	r22, r12
    52f6:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    52fa:	7b 01       	movw	r14, r22
    52fc:	8c 01       	movw	r16, r24
    52fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    5300:	7d 85       	ldd	r23, Y+13	; 0x0d
    5302:	6a 19       	sub	r22, r10
    5304:	7b 09       	sbc	r23, r11
    5306:	88 27       	eor	r24, r24
    5308:	77 fd       	sbrc	r23, 7
    530a:	80 95       	com	r24
    530c:	98 2f       	mov	r25, r24
    530e:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    5312:	9b 01       	movw	r18, r22
    5314:	ac 01       	movw	r20, r24
    5316:	c8 01       	movw	r24, r16
    5318:	b7 01       	movw	r22, r14
    531a:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    531e:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    5322:	68 0d       	add	r22, r8
    5324:	79 1d       	adc	r23, r9
    5326:	52 cf       	rjmp	.-348    	; 0x51cc <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5328:	08 e0       	ldi	r16, 0x08	; 8
    532a:	10 e0       	ldi	r17, 0x00	; 0
    532c:	3e cf       	rjmp	.-388    	; 0x51aa <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    532e:	07 e0       	ldi	r16, 0x07	; 7
    5330:	10 e0       	ldi	r17, 0x00	; 0
    5332:	2f cf       	rjmp	.-418    	; 0x5192 <getRightSpeedFromInput+0x2a0>
    5334:	06 e0       	ldi	r16, 0x06	; 6
    5336:	10 e0       	ldi	r17, 0x00	; 0
    5338:	20 cf       	rjmp	.-448    	; 0x517a <getRightSpeedFromInput+0x288>
    533a:	05 e0       	ldi	r16, 0x05	; 5
    533c:	10 e0       	ldi	r17, 0x00	; 0
    533e:	11 cf       	rjmp	.-478    	; 0x5162 <getRightSpeedFromInput+0x270>
    5340:	04 e0       	ldi	r16, 0x04	; 4
    5342:	10 e0       	ldi	r17, 0x00	; 0
    5344:	02 cf       	rjmp	.-508    	; 0x514a <getRightSpeedFromInput+0x258>
    5346:	03 e0       	ldi	r16, 0x03	; 3
    5348:	10 e0       	ldi	r17, 0x00	; 0
    534a:	f3 ce       	rjmp	.-538    	; 0x5132 <getRightSpeedFromInput+0x240>
    534c:	02 e0       	ldi	r16, 0x02	; 2
    534e:	10 e0       	ldi	r17, 0x00	; 0
    5350:	e4 ce       	rjmp	.-568    	; 0x511a <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    5352:	60 91 63 05 	lds	r22, 0x0563
    5356:	70 91 64 05 	lds	r23, 0x0564
    535a:	88 27       	eor	r24, r24
    535c:	77 fd       	sbrc	r23, 7
    535e:	80 95       	com	r24
    5360:	98 2f       	mov	r25, r24
    5362:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    5366:	5b 01       	movw	r10, r22
    5368:	6c 01       	movw	r12, r24
    536a:	be 01       	movw	r22, r28
    536c:	88 27       	eor	r24, r24
    536e:	77 fd       	sbrc	r23, 7
    5370:	80 95       	com	r24
    5372:	98 2f       	mov	r25, r24
    5374:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    5378:	9b 01       	movw	r18, r22
    537a:	ac 01       	movw	r20, r24
    537c:	c6 01       	movw	r24, r12
    537e:	b5 01       	movw	r22, r10
    5380:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    5384:	5b 01       	movw	r10, r22
    5386:	6c 01       	movw	r12, r24
    5388:	b7 01       	movw	r22, r14
    538a:	88 27       	eor	r24, r24
    538c:	77 fd       	sbrc	r23, 7
    538e:	80 95       	com	r24
    5390:	98 2f       	mov	r25, r24
    5392:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    5396:	9b 01       	movw	r18, r22
    5398:	ac 01       	movw	r20, r24
    539a:	c6 01       	movw	r24, r12
    539c:	b5 01       	movw	r22, r10
    539e:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    53a2:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    53a6:	12 cf       	rjmp	.-476    	; 0x51cc <getRightSpeedFromInput+0x2da>

000053a8 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    53a8:	8f 92       	push	r8
    53aa:	9f 92       	push	r9
    53ac:	af 92       	push	r10
    53ae:	bf 92       	push	r11
    53b0:	cf 92       	push	r12
    53b2:	df 92       	push	r13
    53b4:	ef 92       	push	r14
    53b6:	ff 92       	push	r15
    53b8:	0f 93       	push	r16
    53ba:	1f 93       	push	r17
    53bc:	cf 93       	push	r28
    53be:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    53c0:	c0 91 f1 02 	lds	r28, 0x02F1
    53c4:	d0 91 f2 02 	lds	r29, 0x02F2
    53c8:	80 91 f7 02 	lds	r24, 0x02F7
    53cc:	90 91 f8 02 	lds	r25, 0x02F8
    53d0:	97 fd       	sbrc	r25, 7
    53d2:	d9 c0       	rjmp	.+434    	; 0x5586 <getLeftSpeedFromInput+0x1de>
    53d4:	60 91 d5 04 	lds	r22, 0x04D5
    53d8:	70 91 d6 04 	lds	r23, 0x04D6
    53dc:	6c 17       	cp	r22, r28
    53de:	7d 07       	cpc	r23, r29
    53e0:	0c f0       	brlt	.+2      	; 0x53e4 <getLeftSpeedFromInput+0x3c>
    53e2:	bd c0       	rjmp	.+378    	; 0x555e <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    53e4:	0f ef       	ldi	r16, 0xFF	; 255
    53e6:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    53e8:	80 91 e5 04 	lds	r24, 0x04E5
    53ec:	90 91 e6 04 	lds	r25, 0x04E6
    53f0:	8c 17       	cp	r24, r28
    53f2:	9d 07       	cpc	r25, r29
    53f4:	44 f0       	brlt	.+16     	; 0x5406 <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    53f6:	81 e0       	ldi	r24, 0x01	; 1
    53f8:	9f ef       	ldi	r25, 0xFF	; 255
    53fa:	0f 3f       	cpi	r16, 0xFF	; 255
    53fc:	19 07       	cpc	r17, r25
    53fe:	09 f0       	breq	.+2      	; 0x5402 <getLeftSpeedFromInput+0x5a>
    5400:	80 e0       	ldi	r24, 0x00	; 0
    5402:	08 2f       	mov	r16, r24
    5404:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5406:	80 91 f5 04 	lds	r24, 0x04F5
    540a:	90 91 f6 04 	lds	r25, 0x04F6
    540e:	8c 17       	cp	r24, r28
    5410:	9d 07       	cpc	r25, r29
    5412:	2c f0       	brlt	.+10     	; 0x541e <getLeftSpeedFromInput+0x76>
    5414:	8f ef       	ldi	r24, 0xFF	; 255
    5416:	0f 3f       	cpi	r16, 0xFF	; 255
    5418:	18 07       	cpc	r17, r24
    541a:	09 f4       	brne	.+2      	; 0x541e <getLeftSpeedFromInput+0x76>
    541c:	6c c1       	rjmp	.+728    	; 0x56f6 <getLeftSpeedFromInput+0x34e>
    541e:	80 91 05 05 	lds	r24, 0x0505
    5422:	90 91 06 05 	lds	r25, 0x0506
    5426:	8c 17       	cp	r24, r28
    5428:	9d 07       	cpc	r25, r29
    542a:	2c f0       	brlt	.+10     	; 0x5436 <getLeftSpeedFromInput+0x8e>
    542c:	9f ef       	ldi	r25, 0xFF	; 255
    542e:	0f 3f       	cpi	r16, 0xFF	; 255
    5430:	19 07       	cpc	r17, r25
    5432:	09 f4       	brne	.+2      	; 0x5436 <getLeftSpeedFromInput+0x8e>
    5434:	72 c1       	rjmp	.+740    	; 0x571a <getLeftSpeedFromInput+0x372>
    5436:	80 91 15 05 	lds	r24, 0x0515
    543a:	90 91 16 05 	lds	r25, 0x0516
    543e:	8c 17       	cp	r24, r28
    5440:	9d 07       	cpc	r25, r29
    5442:	2c f0       	brlt	.+10     	; 0x544e <getLeftSpeedFromInput+0xa6>
    5444:	8f ef       	ldi	r24, 0xFF	; 255
    5446:	0f 3f       	cpi	r16, 0xFF	; 255
    5448:	18 07       	cpc	r17, r24
    544a:	09 f4       	brne	.+2      	; 0x544e <getLeftSpeedFromInput+0xa6>
    544c:	63 c1       	rjmp	.+710    	; 0x5714 <getLeftSpeedFromInput+0x36c>
    544e:	80 91 25 05 	lds	r24, 0x0525
    5452:	90 91 26 05 	lds	r25, 0x0526
    5456:	8c 17       	cp	r24, r28
    5458:	9d 07       	cpc	r25, r29
    545a:	2c f0       	brlt	.+10     	; 0x5466 <getLeftSpeedFromInput+0xbe>
    545c:	9f ef       	ldi	r25, 0xFF	; 255
    545e:	0f 3f       	cpi	r16, 0xFF	; 255
    5460:	19 07       	cpc	r17, r25
    5462:	09 f4       	brne	.+2      	; 0x5466 <getLeftSpeedFromInput+0xbe>
    5464:	54 c1       	rjmp	.+680    	; 0x570e <getLeftSpeedFromInput+0x366>
    5466:	80 91 35 05 	lds	r24, 0x0535
    546a:	90 91 36 05 	lds	r25, 0x0536
    546e:	8c 17       	cp	r24, r28
    5470:	9d 07       	cpc	r25, r29
    5472:	2c f0       	brlt	.+10     	; 0x547e <getLeftSpeedFromInput+0xd6>
    5474:	8f ef       	ldi	r24, 0xFF	; 255
    5476:	0f 3f       	cpi	r16, 0xFF	; 255
    5478:	18 07       	cpc	r17, r24
    547a:	09 f4       	brne	.+2      	; 0x547e <getLeftSpeedFromInput+0xd6>
    547c:	45 c1       	rjmp	.+650    	; 0x5708 <getLeftSpeedFromInput+0x360>
    547e:	80 91 45 05 	lds	r24, 0x0545
    5482:	90 91 46 05 	lds	r25, 0x0546
    5486:	8c 17       	cp	r24, r28
    5488:	9d 07       	cpc	r25, r29
    548a:	2c f0       	brlt	.+10     	; 0x5496 <getLeftSpeedFromInput+0xee>
    548c:	9f ef       	ldi	r25, 0xFF	; 255
    548e:	0f 3f       	cpi	r16, 0xFF	; 255
    5490:	19 07       	cpc	r17, r25
    5492:	09 f4       	brne	.+2      	; 0x5496 <getLeftSpeedFromInput+0xee>
    5494:	36 c1       	rjmp	.+620    	; 0x5702 <getLeftSpeedFromInput+0x35a>
    5496:	e0 90 55 05 	lds	r14, 0x0555
    549a:	f0 90 56 05 	lds	r15, 0x0556
    549e:	ec 16       	cp	r14, r28
    54a0:	fd 06       	cpc	r15, r29
    54a2:	2c f0       	brlt	.+10     	; 0x54ae <getLeftSpeedFromInput+0x106>
    54a4:	8f ef       	ldi	r24, 0xFF	; 255
    54a6:	0f 3f       	cpi	r16, 0xFF	; 255
    54a8:	18 07       	cpc	r17, r24
    54aa:	09 f4       	brne	.+2      	; 0x54ae <getLeftSpeedFromInput+0x106>
    54ac:	27 c1       	rjmp	.+590    	; 0x56fc <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    54ae:	20 97       	sbiw	r28, 0x00	; 0
    54b0:	09 f4       	brne	.+2      	; 0x54b4 <getLeftSpeedFromInput+0x10c>
    54b2:	58 c0       	rjmp	.+176    	; 0x5564 <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    54b4:	01 15       	cp	r16, r1
    54b6:	11 05       	cpc	r17, r1
    54b8:	09 f4       	brne	.+2      	; 0x54bc <getLeftSpeedFromInput+0x114>
    54ba:	32 c1       	rjmp	.+612    	; 0x5720 <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    54bc:	9f ef       	ldi	r25, 0xFF	; 255
    54be:	0f 3f       	cpi	r16, 0xFF	; 255
    54c0:	19 07       	cpc	r17, r25
    54c2:	09 f4       	brne	.+2      	; 0x54c6 <getLeftSpeedFromInput+0x11e>
    54c4:	e9 c0       	rjmp	.+466    	; 0x5698 <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    54c6:	f8 01       	movw	r30, r16
    54c8:	e2 95       	swap	r30
    54ca:	f2 95       	swap	r31
    54cc:	f0 7f       	andi	r31, 0xF0	; 240
    54ce:	fe 27       	eor	r31, r30
    54d0:	e0 7f       	andi	r30, 0xF0	; 240
    54d2:	fe 27       	eor	r31, r30
    54d4:	eb 53       	subi	r30, 0x3B	; 59
    54d6:	fb 4f       	sbci	r31, 0xFB	; 251
    54d8:	a0 80       	ld	r10, Z
    54da:	b1 80       	ldd	r11, Z+1	; 0x01
    54dc:	82 80       	ldd	r8, Z+2	; 0x02
    54de:	93 80       	ldd	r9, Z+3	; 0x03
    54e0:	ca 19       	sub	r28, r10
    54e2:	db 09       	sbc	r29, r11
    54e4:	be 01       	movw	r22, r28
    54e6:	88 27       	eor	r24, r24
    54e8:	77 fd       	sbrc	r23, 7
    54ea:	80 95       	com	r24
    54ec:	98 2f       	mov	r25, r24
    54ee:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    54f2:	6b 01       	movw	r12, r22
    54f4:	7c 01       	movw	r14, r24
    54f6:	e8 01       	movw	r28, r16
    54f8:	c2 95       	swap	r28
    54fa:	d2 95       	swap	r29
    54fc:	d0 7f       	andi	r29, 0xF0	; 240
    54fe:	dc 27       	eor	r29, r28
    5500:	c0 7f       	andi	r28, 0xF0	; 240
    5502:	dc 27       	eor	r29, r28
    5504:	cb 52       	subi	r28, 0x2B	; 43
    5506:	db 4f       	sbci	r29, 0xFB	; 251
    5508:	6a 81       	ldd	r22, Y+2	; 0x02
    550a:	7b 81       	ldd	r23, Y+3	; 0x03
    550c:	68 19       	sub	r22, r8
    550e:	79 09       	sbc	r23, r9
    5510:	88 27       	eor	r24, r24
    5512:	77 fd       	sbrc	r23, 7
    5514:	80 95       	com	r24
    5516:	98 2f       	mov	r25, r24
    5518:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    551c:	9b 01       	movw	r18, r22
    551e:	ac 01       	movw	r20, r24
    5520:	c7 01       	movw	r24, r14
    5522:	b6 01       	movw	r22, r12
    5524:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    5528:	7b 01       	movw	r14, r22
    552a:	8c 01       	movw	r16, r24
    552c:	68 81       	ld	r22, Y
    552e:	79 81       	ldd	r23, Y+1	; 0x01
    5530:	6a 19       	sub	r22, r10
    5532:	7b 09       	sbc	r23, r11
    5534:	88 27       	eor	r24, r24
    5536:	77 fd       	sbrc	r23, 7
    5538:	80 95       	com	r24
    553a:	98 2f       	mov	r25, r24
    553c:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    5540:	9b 01       	movw	r18, r22
    5542:	ac 01       	movw	r20, r24
    5544:	c8 01       	movw	r24, r16
    5546:	b7 01       	movw	r22, r14
    5548:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    554c:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    5550:	68 0d       	add	r22, r8
    5552:	79 1d       	adc	r23, r9
    5554:	70 93 ad 04 	sts	0x04AD, r23
    5558:	60 93 ac 04 	sts	0x04AC, r22
    555c:	07 c0       	rjmp	.+14     	; 0x556c <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    555e:	00 e0       	ldi	r16, 0x00	; 0
    5560:	10 e0       	ldi	r17, 0x00	; 0
    5562:	42 cf       	rjmp	.-380    	; 0x53e8 <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    5564:	10 92 ad 04 	sts	0x04AD, r1
    5568:	10 92 ac 04 	sts	0x04AC, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    556c:	df 91       	pop	r29
    556e:	cf 91       	pop	r28
    5570:	1f 91       	pop	r17
    5572:	0f 91       	pop	r16
    5574:	ff 90       	pop	r15
    5576:	ef 90       	pop	r14
    5578:	df 90       	pop	r13
    557a:	cf 90       	pop	r12
    557c:	bf 90       	pop	r11
    557e:	af 90       	pop	r10
    5580:	9f 90       	pop	r9
    5582:	8f 90       	pop	r8
    5584:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    5586:	60 91 dd 04 	lds	r22, 0x04DD
    558a:	70 91 de 04 	lds	r23, 0x04DE
    558e:	6c 17       	cp	r22, r28
    5590:	7d 07       	cpc	r23, r29
    5592:	0c f0       	brlt	.+2      	; 0x5596 <getLeftSpeedFromInput+0x1ee>
    5594:	7e c0       	rjmp	.+252    	; 0x5692 <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    5596:	0f ef       	ldi	r16, 0xFF	; 255
    5598:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    559a:	80 91 ed 04 	lds	r24, 0x04ED
    559e:	90 91 ee 04 	lds	r25, 0x04EE
    55a2:	8c 17       	cp	r24, r28
    55a4:	9d 07       	cpc	r25, r29
    55a6:	44 f0       	brlt	.+16     	; 0x55b8 <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    55a8:	81 e0       	ldi	r24, 0x01	; 1
    55aa:	9f ef       	ldi	r25, 0xFF	; 255
    55ac:	0f 3f       	cpi	r16, 0xFF	; 255
    55ae:	19 07       	cpc	r17, r25
    55b0:	09 f0       	breq	.+2      	; 0x55b4 <getLeftSpeedFromInput+0x20c>
    55b2:	80 e0       	ldi	r24, 0x00	; 0
    55b4:	08 2f       	mov	r16, r24
    55b6:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    55b8:	80 91 fd 04 	lds	r24, 0x04FD
    55bc:	90 91 fe 04 	lds	r25, 0x04FE
    55c0:	8c 17       	cp	r24, r28
    55c2:	9d 07       	cpc	r25, r29
    55c4:	2c f0       	brlt	.+10     	; 0x55d0 <getLeftSpeedFromInput+0x228>
    55c6:	8f ef       	ldi	r24, 0xFF	; 255
    55c8:	0f 3f       	cpi	r16, 0xFF	; 255
    55ca:	18 07       	cpc	r17, r24
    55cc:	09 f4       	brne	.+2      	; 0x55d0 <getLeftSpeedFromInput+0x228>
    55ce:	19 c1       	rjmp	.+562    	; 0x5802 <getLeftSpeedFromInput+0x45a>
    55d0:	80 91 0d 05 	lds	r24, 0x050D
    55d4:	90 91 0e 05 	lds	r25, 0x050E
    55d8:	8c 17       	cp	r24, r28
    55da:	9d 07       	cpc	r25, r29
    55dc:	2c f0       	brlt	.+10     	; 0x55e8 <getLeftSpeedFromInput+0x240>
    55de:	9f ef       	ldi	r25, 0xFF	; 255
    55e0:	0f 3f       	cpi	r16, 0xFF	; 255
    55e2:	19 07       	cpc	r17, r25
    55e4:	09 f4       	brne	.+2      	; 0x55e8 <getLeftSpeedFromInput+0x240>
    55e6:	0a c1       	rjmp	.+532    	; 0x57fc <getLeftSpeedFromInput+0x454>
    55e8:	80 91 1d 05 	lds	r24, 0x051D
    55ec:	90 91 1e 05 	lds	r25, 0x051E
    55f0:	8c 17       	cp	r24, r28
    55f2:	9d 07       	cpc	r25, r29
    55f4:	2c f0       	brlt	.+10     	; 0x5600 <getLeftSpeedFromInput+0x258>
    55f6:	8f ef       	ldi	r24, 0xFF	; 255
    55f8:	0f 3f       	cpi	r16, 0xFF	; 255
    55fa:	18 07       	cpc	r17, r24
    55fc:	09 f4       	brne	.+2      	; 0x5600 <getLeftSpeedFromInput+0x258>
    55fe:	fb c0       	rjmp	.+502    	; 0x57f6 <getLeftSpeedFromInput+0x44e>
    5600:	80 91 2d 05 	lds	r24, 0x052D
    5604:	90 91 2e 05 	lds	r25, 0x052E
    5608:	8c 17       	cp	r24, r28
    560a:	9d 07       	cpc	r25, r29
    560c:	2c f0       	brlt	.+10     	; 0x5618 <getLeftSpeedFromInput+0x270>
    560e:	9f ef       	ldi	r25, 0xFF	; 255
    5610:	0f 3f       	cpi	r16, 0xFF	; 255
    5612:	19 07       	cpc	r17, r25
    5614:	09 f4       	brne	.+2      	; 0x5618 <getLeftSpeedFromInput+0x270>
    5616:	ec c0       	rjmp	.+472    	; 0x57f0 <getLeftSpeedFromInput+0x448>
    5618:	80 91 3d 05 	lds	r24, 0x053D
    561c:	90 91 3e 05 	lds	r25, 0x053E
    5620:	8c 17       	cp	r24, r28
    5622:	9d 07       	cpc	r25, r29
    5624:	2c f0       	brlt	.+10     	; 0x5630 <getLeftSpeedFromInput+0x288>
    5626:	8f ef       	ldi	r24, 0xFF	; 255
    5628:	0f 3f       	cpi	r16, 0xFF	; 255
    562a:	18 07       	cpc	r17, r24
    562c:	09 f4       	brne	.+2      	; 0x5630 <getLeftSpeedFromInput+0x288>
    562e:	dd c0       	rjmp	.+442    	; 0x57ea <getLeftSpeedFromInput+0x442>
    5630:	80 91 4d 05 	lds	r24, 0x054D
    5634:	90 91 4e 05 	lds	r25, 0x054E
    5638:	8c 17       	cp	r24, r28
    563a:	9d 07       	cpc	r25, r29
    563c:	2c f0       	brlt	.+10     	; 0x5648 <getLeftSpeedFromInput+0x2a0>
    563e:	9f ef       	ldi	r25, 0xFF	; 255
    5640:	0f 3f       	cpi	r16, 0xFF	; 255
    5642:	19 07       	cpc	r17, r25
    5644:	09 f4       	brne	.+2      	; 0x5648 <getLeftSpeedFromInput+0x2a0>
    5646:	ce c0       	rjmp	.+412    	; 0x57e4 <getLeftSpeedFromInput+0x43c>
    5648:	e0 90 5d 05 	lds	r14, 0x055D
    564c:	f0 90 5e 05 	lds	r15, 0x055E
    5650:	ec 16       	cp	r14, r28
    5652:	fd 06       	cpc	r15, r29
    5654:	2c f0       	brlt	.+10     	; 0x5660 <getLeftSpeedFromInput+0x2b8>
    5656:	8f ef       	ldi	r24, 0xFF	; 255
    5658:	0f 3f       	cpi	r16, 0xFF	; 255
    565a:	18 07       	cpc	r17, r24
    565c:	09 f4       	brne	.+2      	; 0x5660 <getLeftSpeedFromInput+0x2b8>
    565e:	bf c0       	rjmp	.+382    	; 0x57de <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    5660:	01 15       	cp	r16, r1
    5662:	11 05       	cpc	r17, r1
    5664:	09 f0       	breq	.+2      	; 0x5668 <getLeftSpeedFromInput+0x2c0>
    5666:	6e c0       	rjmp	.+220    	; 0x5744 <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    5668:	20 91 df 04 	lds	r18, 0x04DF
    566c:	30 91 e0 04 	lds	r19, 0x04E0
    5670:	c2 9f       	mul	r28, r18
    5672:	c0 01       	movw	r24, r0
    5674:	c3 9f       	mul	r28, r19
    5676:	90 0d       	add	r25, r0
    5678:	d2 9f       	mul	r29, r18
    567a:	90 0d       	add	r25, r0
    567c:	11 24       	eor	r1, r1
    567e:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    5682:	70 95       	com	r23
    5684:	61 95       	neg	r22
    5686:	7f 4f       	sbci	r23, 0xFF	; 255
    5688:	70 93 ad 04 	sts	0x04AD, r23
    568c:	60 93 ac 04 	sts	0x04AC, r22
    5690:	6d cf       	rjmp	.-294    	; 0x556c <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5692:	00 e0       	ldi	r16, 0x00	; 0
    5694:	10 e0       	ldi	r17, 0x00	; 0
    5696:	81 cf       	rjmp	.-254    	; 0x559a <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    5698:	60 91 57 05 	lds	r22, 0x0557
    569c:	70 91 58 05 	lds	r23, 0x0558
    56a0:	88 27       	eor	r24, r24
    56a2:	77 fd       	sbrc	r23, 7
    56a4:	80 95       	com	r24
    56a6:	98 2f       	mov	r25, r24
    56a8:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    56ac:	5b 01       	movw	r10, r22
    56ae:	6c 01       	movw	r12, r24
    56b0:	be 01       	movw	r22, r28
    56b2:	88 27       	eor	r24, r24
    56b4:	77 fd       	sbrc	r23, 7
    56b6:	80 95       	com	r24
    56b8:	98 2f       	mov	r25, r24
    56ba:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    56be:	9b 01       	movw	r18, r22
    56c0:	ac 01       	movw	r20, r24
    56c2:	c6 01       	movw	r24, r12
    56c4:	b5 01       	movw	r22, r10
    56c6:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    56ca:	5b 01       	movw	r10, r22
    56cc:	6c 01       	movw	r12, r24
    56ce:	b7 01       	movw	r22, r14
    56d0:	88 27       	eor	r24, r24
    56d2:	77 fd       	sbrc	r23, 7
    56d4:	80 95       	com	r24
    56d6:	98 2f       	mov	r25, r24
    56d8:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    56dc:	9b 01       	movw	r18, r22
    56de:	ac 01       	movw	r20, r24
    56e0:	c6 01       	movw	r24, r12
    56e2:	b5 01       	movw	r22, r10
    56e4:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    56e8:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    56ec:	70 93 ad 04 	sts	0x04AD, r23
    56f0:	60 93 ac 04 	sts	0x04AC, r22
    56f4:	3b cf       	rjmp	.-394    	; 0x556c <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    56f6:	02 e0       	ldi	r16, 0x02	; 2
    56f8:	10 e0       	ldi	r17, 0x00	; 0
    56fa:	91 ce       	rjmp	.-734    	; 0x541e <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    56fc:	08 e0       	ldi	r16, 0x08	; 8
    56fe:	10 e0       	ldi	r17, 0x00	; 0
    5700:	d6 ce       	rjmp	.-596    	; 0x54ae <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5702:	07 e0       	ldi	r16, 0x07	; 7
    5704:	10 e0       	ldi	r17, 0x00	; 0
    5706:	c7 ce       	rjmp	.-626    	; 0x5496 <getLeftSpeedFromInput+0xee>
    5708:	06 e0       	ldi	r16, 0x06	; 6
    570a:	10 e0       	ldi	r17, 0x00	; 0
    570c:	b8 ce       	rjmp	.-656    	; 0x547e <getLeftSpeedFromInput+0xd6>
    570e:	05 e0       	ldi	r16, 0x05	; 5
    5710:	10 e0       	ldi	r17, 0x00	; 0
    5712:	a9 ce       	rjmp	.-686    	; 0x5466 <getLeftSpeedFromInput+0xbe>
    5714:	04 e0       	ldi	r16, 0x04	; 4
    5716:	10 e0       	ldi	r17, 0x00	; 0
    5718:	9a ce       	rjmp	.-716    	; 0x544e <getLeftSpeedFromInput+0xa6>
    571a:	03 e0       	ldi	r16, 0x03	; 3
    571c:	10 e0       	ldi	r17, 0x00	; 0
    571e:	8b ce       	rjmp	.-746    	; 0x5436 <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    5720:	20 91 d7 04 	lds	r18, 0x04D7
    5724:	30 91 d8 04 	lds	r19, 0x04D8
    5728:	c2 9f       	mul	r28, r18
    572a:	c0 01       	movw	r24, r0
    572c:	c3 9f       	mul	r28, r19
    572e:	90 0d       	add	r25, r0
    5730:	d2 9f       	mul	r29, r18
    5732:	90 0d       	add	r25, r0
    5734:	11 24       	eor	r1, r1
    5736:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
    573a:	70 93 ad 04 	sts	0x04AD, r23
    573e:	60 93 ac 04 	sts	0x04AC, r22
    5742:	14 cf       	rjmp	.-472    	; 0x556c <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5744:	8f ef       	ldi	r24, 0xFF	; 255
    5746:	0f 3f       	cpi	r16, 0xFF	; 255
    5748:	18 07       	cpc	r17, r24
    574a:	09 f4       	brne	.+2      	; 0x574e <getLeftSpeedFromInput+0x3a6>
    574c:	5d c0       	rjmp	.+186    	; 0x5808 <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    574e:	f8 01       	movw	r30, r16
    5750:	e2 95       	swap	r30
    5752:	f2 95       	swap	r31
    5754:	f0 7f       	andi	r31, 0xF0	; 240
    5756:	fe 27       	eor	r31, r30
    5758:	e0 7f       	andi	r30, 0xF0	; 240
    575a:	fe 27       	eor	r31, r30
    575c:	eb 53       	subi	r30, 0x3B	; 59
    575e:	fb 4f       	sbci	r31, 0xFB	; 251
    5760:	a0 84       	ldd	r10, Z+8	; 0x08
    5762:	b1 84       	ldd	r11, Z+9	; 0x09
    5764:	82 84       	ldd	r8, Z+10	; 0x0a
    5766:	93 84       	ldd	r9, Z+11	; 0x0b
    5768:	ca 19       	sub	r28, r10
    576a:	db 09       	sbc	r29, r11
    576c:	be 01       	movw	r22, r28
    576e:	88 27       	eor	r24, r24
    5770:	77 fd       	sbrc	r23, 7
    5772:	80 95       	com	r24
    5774:	98 2f       	mov	r25, r24
    5776:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    577a:	6b 01       	movw	r12, r22
    577c:	7c 01       	movw	r14, r24
    577e:	e8 01       	movw	r28, r16
    5780:	c2 95       	swap	r28
    5782:	d2 95       	swap	r29
    5784:	d0 7f       	andi	r29, 0xF0	; 240
    5786:	dc 27       	eor	r29, r28
    5788:	c0 7f       	andi	r28, 0xF0	; 240
    578a:	dc 27       	eor	r29, r28
    578c:	cb 52       	subi	r28, 0x2B	; 43
    578e:	db 4f       	sbci	r29, 0xFB	; 251
    5790:	6a 85       	ldd	r22, Y+10	; 0x0a
    5792:	7b 85       	ldd	r23, Y+11	; 0x0b
    5794:	68 19       	sub	r22, r8
    5796:	79 09       	sbc	r23, r9
    5798:	88 27       	eor	r24, r24
    579a:	77 fd       	sbrc	r23, 7
    579c:	80 95       	com	r24
    579e:	98 2f       	mov	r25, r24
    57a0:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    57a4:	9b 01       	movw	r18, r22
    57a6:	ac 01       	movw	r20, r24
    57a8:	c7 01       	movw	r24, r14
    57aa:	b6 01       	movw	r22, r12
    57ac:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    57b0:	7b 01       	movw	r14, r22
    57b2:	8c 01       	movw	r16, r24
    57b4:	68 85       	ldd	r22, Y+8	; 0x08
    57b6:	79 85       	ldd	r23, Y+9	; 0x09
    57b8:	6a 19       	sub	r22, r10
    57ba:	7b 09       	sbc	r23, r11
    57bc:	88 27       	eor	r24, r24
    57be:	77 fd       	sbrc	r23, 7
    57c0:	80 95       	com	r24
    57c2:	98 2f       	mov	r25, r24
    57c4:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    57c8:	9b 01       	movw	r18, r22
    57ca:	ac 01       	movw	r20, r24
    57cc:	c8 01       	movw	r24, r16
    57ce:	b7 01       	movw	r22, r14
    57d0:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    57d4:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    57d8:	68 0d       	add	r22, r8
    57da:	79 1d       	adc	r23, r9
    57dc:	52 cf       	rjmp	.-348    	; 0x5682 <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    57de:	08 e0       	ldi	r16, 0x08	; 8
    57e0:	10 e0       	ldi	r17, 0x00	; 0
    57e2:	3e cf       	rjmp	.-388    	; 0x5660 <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    57e4:	07 e0       	ldi	r16, 0x07	; 7
    57e6:	10 e0       	ldi	r17, 0x00	; 0
    57e8:	2f cf       	rjmp	.-418    	; 0x5648 <getLeftSpeedFromInput+0x2a0>
    57ea:	06 e0       	ldi	r16, 0x06	; 6
    57ec:	10 e0       	ldi	r17, 0x00	; 0
    57ee:	20 cf       	rjmp	.-448    	; 0x5630 <getLeftSpeedFromInput+0x288>
    57f0:	05 e0       	ldi	r16, 0x05	; 5
    57f2:	10 e0       	ldi	r17, 0x00	; 0
    57f4:	11 cf       	rjmp	.-478    	; 0x5618 <getLeftSpeedFromInput+0x270>
    57f6:	04 e0       	ldi	r16, 0x04	; 4
    57f8:	10 e0       	ldi	r17, 0x00	; 0
    57fa:	02 cf       	rjmp	.-508    	; 0x5600 <getLeftSpeedFromInput+0x258>
    57fc:	03 e0       	ldi	r16, 0x03	; 3
    57fe:	10 e0       	ldi	r17, 0x00	; 0
    5800:	f3 ce       	rjmp	.-538    	; 0x55e8 <getLeftSpeedFromInput+0x240>
    5802:	02 e0       	ldi	r16, 0x02	; 2
    5804:	10 e0       	ldi	r17, 0x00	; 0
    5806:	e4 ce       	rjmp	.-568    	; 0x55d0 <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    5808:	60 91 5f 05 	lds	r22, 0x055F
    580c:	70 91 60 05 	lds	r23, 0x0560
    5810:	88 27       	eor	r24, r24
    5812:	77 fd       	sbrc	r23, 7
    5814:	80 95       	com	r24
    5816:	98 2f       	mov	r25, r24
    5818:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    581c:	5b 01       	movw	r10, r22
    581e:	6c 01       	movw	r12, r24
    5820:	be 01       	movw	r22, r28
    5822:	88 27       	eor	r24, r24
    5824:	77 fd       	sbrc	r23, 7
    5826:	80 95       	com	r24
    5828:	98 2f       	mov	r25, r24
    582a:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    582e:	9b 01       	movw	r18, r22
    5830:	ac 01       	movw	r20, r24
    5832:	c6 01       	movw	r24, r12
    5834:	b5 01       	movw	r22, r10
    5836:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    583a:	5b 01       	movw	r10, r22
    583c:	6c 01       	movw	r12, r24
    583e:	b7 01       	movw	r22, r14
    5840:	88 27       	eor	r24, r24
    5842:	77 fd       	sbrc	r23, 7
    5844:	80 95       	com	r24
    5846:	98 2f       	mov	r25, r24
    5848:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    584c:	9b 01       	movw	r18, r22
    584e:	ac 01       	movw	r20, r24
    5850:	c6 01       	movw	r24, r12
    5852:	b5 01       	movw	r22, r10
    5854:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    5858:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    585c:	12 cf       	rjmp	.-476    	; 0x5682 <getLeftSpeedFromInput+0x2da>

0000585e <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    585e:	2f 92       	push	r2
    5860:	3f 92       	push	r3
    5862:	4f 92       	push	r4
    5864:	5f 92       	push	r5
    5866:	6f 92       	push	r6
    5868:	7f 92       	push	r7
    586a:	8f 92       	push	r8
    586c:	9f 92       	push	r9
    586e:	af 92       	push	r10
    5870:	bf 92       	push	r11
    5872:	cf 92       	push	r12
    5874:	df 92       	push	r13
    5876:	ef 92       	push	r14
    5878:	ff 92       	push	r15
    587a:	0f 93       	push	r16
    587c:	1f 93       	push	r17

	if(calibrateOdomFlag==1) {
    587e:	80 91 bf 04 	lds	r24, 0x04BF
    5882:	81 30       	cpi	r24, 0x01	; 1
    5884:	09 f4       	brne	.+2      	; 0x5888 <handleMotorsWithSpeedController+0x2a>
    5886:	28 c2       	rjmp	.+1104   	; 0x5cd8 <handleMotorsWithSpeedController+0x47a>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    5888:	80 91 fd 02 	lds	r24, 0x02FD
    588c:	90 91 fe 02 	lds	r25, 0x02FE
    5890:	97 fd       	sbrc	r25, 7
    5892:	9a c2       	rjmp	.+1332   	; 0x5dc8 <handleMotorsWithSpeedController+0x56a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    5894:	61 e0       	ldi	r22, 0x01	; 1
    5896:	0e 94 11 24 	call	0x4822	; 0x4822 <getInputFromSpeed>
    589a:	90 93 0c 03 	sts	0x030C, r25
    589e:	80 93 0b 03 	sts	0x030B, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    58a2:	80 91 ff 02 	lds	r24, 0x02FF
    58a6:	90 91 00 03 	lds	r25, 0x0300
    58aa:	97 fd       	sbrc	r25, 7
    58ac:	85 c2       	rjmp	.+1290   	; 0x5db8 <handleMotorsWithSpeedController+0x55a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    58ae:	60 e0       	ldi	r22, 0x00	; 0
    58b0:	0e 94 11 24 	call	0x4822	; 0x4822 <getInputFromSpeed>
    58b4:	90 93 0e 03 	sts	0x030E, r25
    58b8:	80 93 0d 03 	sts	0x030D, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    58bc:	20 91 64 04 	lds	r18, 0x0464
    58c0:	22 23       	and	r18, r18
    58c2:	09 f0       	breq	.+2      	; 0x58c6 <handleMotorsWithSpeedController+0x68>
    58c4:	fe c1       	rjmp	.+1020   	; 0x5cc2 <handleMotorsWithSpeedController+0x464>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    58c6:	90 93 ec 02 	sts	0x02EC, r25
    58ca:	80 93 eb 02 	sts	0x02EB, r24
	pwm_right_desired_to_control = pwm_right_working;
    58ce:	80 91 0b 03 	lds	r24, 0x030B
    58d2:	90 91 0c 03 	lds	r25, 0x030C
    58d6:	90 93 ea 02 	sts	0x02EA, r25
    58da:	80 93 e9 02 	sts	0x02E9, r24

	if(compute_left_vel) {
    58de:	80 91 07 02 	lds	r24, 0x0207
    58e2:	88 23       	and	r24, r24
    58e4:	09 f4       	brne	.+2      	; 0x58e8 <handleMotorsWithSpeedController+0x8a>
    58e6:	93 c0       	rjmp	.+294    	; 0x5a0e <handleMotorsWithSpeedController+0x1b0>

		last_left_vel = left_vel_sum>>2;
    58e8:	20 91 ed 02 	lds	r18, 0x02ED
    58ec:	30 91 ee 02 	lds	r19, 0x02EE
    58f0:	36 95       	lsr	r19
    58f2:	27 95       	ror	r18
    58f4:	36 95       	lsr	r19
    58f6:	27 95       	ror	r18
    58f8:	30 93 f2 02 	sts	0x02F2, r19
    58fc:	20 93 f1 02 	sts	0x02F1, r18
		compute_left_vel = 0;
    5900:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    5904:	10 92 ee 02 	sts	0x02EE, r1
    5908:	10 92 ed 02 	sts	0x02ED, r1
		
		if(calibrateOdomFlag==1) {
    590c:	80 91 bf 04 	lds	r24, 0x04BF
    5910:	81 30       	cpi	r24, 0x01	; 1
    5912:	09 f4       	brne	.+2      	; 0x5916 <handleMotorsWithSpeedController+0xb8>
    5914:	08 c2       	rjmp	.+1040   	; 0x5d26 <handleMotorsWithSpeedController+0x4c8>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    5916:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    591a:	80 91 87 04 	lds	r24, 0x0487
    591e:	90 91 88 04 	lds	r25, 0x0488
    5922:	a0 91 89 04 	lds	r26, 0x0489
    5926:	b0 91 8a 04 	lds	r27, 0x048A
    592a:	80 93 8f 04 	sts	0x048F, r24
    592e:	90 93 90 04 	sts	0x0490, r25
    5932:	a0 93 91 04 	sts	0x0491, r26
    5936:	b0 93 92 04 	sts	0x0492, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    593a:	60 91 ac 04 	lds	r22, 0x04AC
    593e:	70 91 ad 04 	lds	r23, 0x04AD
    5942:	88 27       	eor	r24, r24
    5944:	77 fd       	sbrc	r23, 7
    5946:	80 95       	com	r24
    5948:	98 2f       	mov	r25, r24
    594a:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    594e:	7b 01       	movw	r14, r22
    5950:	8c 01       	movw	r16, r24
    5952:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    5956:	20 91 b0 04 	lds	r18, 0x04B0
    595a:	30 91 b1 04 	lds	r19, 0x04B1
    595e:	40 91 b2 04 	lds	r20, 0x04B2
    5962:	50 91 b3 04 	lds	r21, 0x04B3
    5966:	62 1b       	sub	r22, r18
    5968:	73 0b       	sbc	r23, r19
    596a:	84 0b       	sbc	r24, r20
    596c:	95 0b       	sbc	r25, r21
    596e:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__floatunsisf>
    5972:	20 e0       	ldi	r18, 0x00	; 0
    5974:	30 e0       	ldi	r19, 0x00	; 0
    5976:	40 ed       	ldi	r20, 0xD0	; 208
    5978:	52 e4       	ldi	r21, 0x42	; 66
    597a:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    597e:	9b 01       	movw	r18, r22
    5980:	ac 01       	movw	r20, r24
    5982:	c8 01       	movw	r24, r16
    5984:	b7 01       	movw	r22, r14
    5986:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    598a:	20 e0       	ldi	r18, 0x00	; 0
    598c:	34 e2       	ldi	r19, 0x24	; 36
    598e:	44 e7       	ldi	r20, 0x74	; 116
    5990:	59 e4       	ldi	r21, 0x49	; 73
    5992:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    5996:	9b 01       	movw	r18, r22
    5998:	ac 01       	movw	r20, r24
    599a:	60 91 87 04 	lds	r22, 0x0487
    599e:	70 91 88 04 	lds	r23, 0x0488
    59a2:	80 91 89 04 	lds	r24, 0x0489
    59a6:	90 91 8a 04 	lds	r25, 0x048A
    59aa:	0e 94 af 3c 	call	0x795e	; 0x795e <__addsf3>
    59ae:	60 93 87 04 	sts	0x0487, r22
    59b2:	70 93 88 04 	sts	0x0488, r23
    59b6:	80 93 89 04 	sts	0x0489, r24
    59ba:	90 93 8a 04 	sts	0x048A, r25
		timeLeftOdom = getTime100MicroSec();
    59be:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    59c2:	60 93 b0 04 	sts	0x04B0, r22
    59c6:	70 93 b1 04 	sts	0x04B1, r23
    59ca:	80 93 b2 04 	sts	0x04B2, r24
    59ce:	90 93 b3 04 	sts	0x04B3, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    59d2:	80 91 17 02 	lds	r24, 0x0217
    59d6:	81 30       	cpi	r24, 0x01	; 1
    59d8:	09 f4       	brne	.+2      	; 0x59dc <handleMotorsWithSpeedController+0x17e>
    59da:	c7 c1       	rjmp	.+910    	; 0x5d6a <handleMotorsWithSpeedController+0x50c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    59dc:	8d e0       	ldi	r24, 0x0D	; 13
    59de:	93 e0       	ldi	r25, 0x03	; 3
    59e0:	0e 94 8d 13 	call	0x271a	; 0x271a <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    59e4:	80 91 0d 03 	lds	r24, 0x030D
    59e8:	90 91 0e 03 	lds	r25, 0x030E
    59ec:	90 93 f8 02 	sts	0x02F8, r25
    59f0:	80 93 f7 02 	sts	0x02F7, r24

		if(pwm_left > 0) {
    59f4:	18 16       	cp	r1, r24
    59f6:	19 06       	cpc	r1, r25
    59f8:	0c f0       	brlt	.+2      	; 0x59fc <handleMotorsWithSpeedController+0x19e>
    59fa:	f9 c1       	rjmp	.+1010   	; 0x5dee <handleMotorsWithSpeedController+0x590>
			OCR4A = (unsigned int)pwm_left;
    59fc:	90 93 a9 00 	sts	0x00A9, r25
    5a00:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    5a04:	80 91 97 04 	lds	r24, 0x0497
    5a08:	8f 5f       	subi	r24, 0xFF	; 255
    5a0a:	80 93 97 04 	sts	0x0497, r24

	}

	if(compute_right_vel) {
    5a0e:	80 91 08 02 	lds	r24, 0x0208
    5a12:	88 23       	and	r24, r24
    5a14:	09 f0       	breq	.+2      	; 0x5a18 <handleMotorsWithSpeedController+0x1ba>
    5a16:	c1 c0       	rjmp	.+386    	; 0x5b9a <handleMotorsWithSpeedController+0x33c>
    5a18:	80 91 97 04 	lds	r24, 0x0497

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    5a1c:	82 30       	cpi	r24, 0x02	; 2
    5a1e:	08 f4       	brcc	.+2      	; 0x5a22 <handleMotorsWithSpeedController+0x1c4>
    5a20:	ab c0       	rjmp	.+342    	; 0x5b78 <handleMotorsWithSpeedController+0x31a>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    5a22:	10 92 97 04 	sts	0x0497, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    5a26:	60 90 8b 04 	lds	r6, 0x048B
    5a2a:	70 90 8c 04 	lds	r7, 0x048C
    5a2e:	80 90 8d 04 	lds	r8, 0x048D
    5a32:	90 90 8e 04 	lds	r9, 0x048E
    5a36:	20 90 87 04 	lds	r2, 0x0487
    5a3a:	30 90 88 04 	lds	r3, 0x0488
    5a3e:	40 90 89 04 	lds	r4, 0x0489
    5a42:	50 90 8a 04 	lds	r5, 0x048A
    5a46:	c4 01       	movw	r24, r8
    5a48:	b3 01       	movw	r22, r6
    5a4a:	20 91 93 04 	lds	r18, 0x0493
    5a4e:	30 91 94 04 	lds	r19, 0x0494
    5a52:	40 91 95 04 	lds	r20, 0x0495
    5a56:	50 91 96 04 	lds	r21, 0x0496
    5a5a:	0e 94 ae 3c 	call	0x795c	; 0x795c <__subsf3>
    5a5e:	7b 01       	movw	r14, r22
    5a60:	8c 01       	movw	r16, r24
    5a62:	c2 01       	movw	r24, r4
    5a64:	b1 01       	movw	r22, r2
    5a66:	20 91 8f 04 	lds	r18, 0x048F
    5a6a:	30 91 90 04 	lds	r19, 0x0490
    5a6e:	40 91 91 04 	lds	r20, 0x0491
    5a72:	50 91 92 04 	lds	r21, 0x0492
    5a76:	0e 94 ae 3c 	call	0x795c	; 0x795c <__subsf3>
    5a7a:	9b 01       	movw	r18, r22
    5a7c:	ac 01       	movw	r20, r24
    5a7e:	c8 01       	movw	r24, r16
    5a80:	b7 01       	movw	r22, r14
    5a82:	0e 94 af 3c 	call	0x795e	; 0x795e <__addsf3>
    5a86:	20 e0       	ldi	r18, 0x00	; 0
    5a88:	30 e0       	ldi	r19, 0x00	; 0
    5a8a:	40 e0       	ldi	r20, 0x00	; 0
    5a8c:	5f e3       	ldi	r21, 0x3F	; 63
    5a8e:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    5a92:	d6 2e       	mov	r13, r22
    5a94:	c7 2e       	mov	r12, r23
    5a96:	b8 2e       	mov	r11, r24
    5a98:	a9 2e       	mov	r10, r25
    5a9a:	a6 01       	movw	r20, r12
    5a9c:	95 01       	movw	r18, r10
    5a9e:	85 2f       	mov	r24, r21
    5aa0:	94 2f       	mov	r25, r20
    5aa2:	a3 2f       	mov	r26, r19
    5aa4:	b2 2f       	mov	r27, r18
    5aa6:	80 93 73 04 	sts	0x0473, r24
    5aaa:	90 93 74 04 	sts	0x0474, r25
    5aae:	a0 93 75 04 	sts	0x0475, r26
    5ab2:	b0 93 76 04 	sts	0x0476, r27

		if(robotPosition == HORIZONTAL_POS) {
    5ab6:	80 91 17 02 	lds	r24, 0x0217
    5aba:	81 30       	cpi	r24, 0x01	; 1
    5abc:	09 f4       	brne	.+2      	; 0x5ac0 <handleMotorsWithSpeedController+0x262>
    5abe:	1d c1       	rjmp	.+570    	; 0x5cfa <handleMotorsWithSpeedController+0x49c>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    5ac0:	f0 90 98 04 	lds	r15, 0x0498
    5ac4:	00 91 99 04 	lds	r16, 0x0499
    5ac8:	10 91 9a 04 	lds	r17, 0x049A
    5acc:	e0 90 9b 04 	lds	r14, 0x049B
    5ad0:	8f 2d       	mov	r24, r15
    5ad2:	90 2f       	mov	r25, r16
    5ad4:	a1 2f       	mov	r26, r17
    5ad6:	be 2d       	mov	r27, r14
    5ad8:	80 93 67 04 	sts	0x0467, r24
    5adc:	90 93 68 04 	sts	0x0468, r25
    5ae0:	a0 93 69 04 	sts	0x0469, r26
    5ae4:	b0 93 6a 04 	sts	0x046A, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    5ae8:	6f 2d       	mov	r22, r15
    5aea:	70 2f       	mov	r23, r16
    5aec:	81 2f       	mov	r24, r17
    5aee:	9e 2d       	mov	r25, r14
    5af0:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <cos>
    5af4:	9b 01       	movw	r18, r22
    5af6:	ac 01       	movw	r20, r24
    5af8:	d6 01       	movw	r26, r12
    5afa:	f5 01       	movw	r30, r10
    5afc:	6b 2f       	mov	r22, r27
    5afe:	7c 2d       	mov	r23, r12
    5b00:	8f 2f       	mov	r24, r31
    5b02:	9a 2d       	mov	r25, r10
    5b04:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    5b08:	9b 01       	movw	r18, r22
    5b0a:	ac 01       	movw	r20, r24
    5b0c:	60 91 6b 04 	lds	r22, 0x046B
    5b10:	70 91 6c 04 	lds	r23, 0x046C
    5b14:	80 91 6d 04 	lds	r24, 0x046D
    5b18:	90 91 6e 04 	lds	r25, 0x046E
    5b1c:	0e 94 af 3c 	call	0x795e	; 0x795e <__addsf3>
    5b20:	60 93 6b 04 	sts	0x046B, r22
    5b24:	70 93 6c 04 	sts	0x046C, r23
    5b28:	80 93 6d 04 	sts	0x046D, r24
    5b2c:	90 93 6e 04 	sts	0x046E, r25
		yPos = yPos + sin(theta)*deltaDist;
    5b30:	6f 2d       	mov	r22, r15
    5b32:	70 2f       	mov	r23, r16
    5b34:	81 2f       	mov	r24, r17
    5b36:	9e 2d       	mov	r25, r14
    5b38:	0e 94 8f 3f 	call	0x7f1e	; 0x7f1e <sin>
    5b3c:	9b 01       	movw	r18, r22
    5b3e:	ac 01       	movw	r20, r24
    5b40:	d6 01       	movw	r26, r12
    5b42:	f5 01       	movw	r30, r10
    5b44:	6b 2f       	mov	r22, r27
    5b46:	7c 2d       	mov	r23, r12
    5b48:	8f 2f       	mov	r24, r31
    5b4a:	9a 2d       	mov	r25, r10
    5b4c:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    5b50:	9b 01       	movw	r18, r22
    5b52:	ac 01       	movw	r20, r24
    5b54:	60 91 6f 04 	lds	r22, 0x046F
    5b58:	70 91 70 04 	lds	r23, 0x0470
    5b5c:	80 91 71 04 	lds	r24, 0x0471
    5b60:	90 91 72 04 	lds	r25, 0x0472
    5b64:	0e 94 af 3c 	call	0x795e	; 0x795e <__addsf3>
    5b68:	60 93 6f 04 	sts	0x046F, r22
    5b6c:	70 93 70 04 	sts	0x0470, r23
    5b70:	80 93 71 04 	sts	0x0471, r24
    5b74:	90 93 72 04 	sts	0x0472, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    5b78:	1f 91       	pop	r17
    5b7a:	0f 91       	pop	r16
    5b7c:	ff 90       	pop	r15
    5b7e:	ef 90       	pop	r14
    5b80:	df 90       	pop	r13
    5b82:	cf 90       	pop	r12
    5b84:	bf 90       	pop	r11
    5b86:	af 90       	pop	r10
    5b88:	9f 90       	pop	r9
    5b8a:	8f 90       	pop	r8
    5b8c:	7f 90       	pop	r7
    5b8e:	6f 90       	pop	r6
    5b90:	5f 90       	pop	r5
    5b92:	4f 90       	pop	r4
    5b94:	3f 90       	pop	r3
    5b96:	2f 90       	pop	r2
    5b98:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    5b9a:	20 91 ef 02 	lds	r18, 0x02EF
    5b9e:	30 91 f0 02 	lds	r19, 0x02F0
    5ba2:	36 95       	lsr	r19
    5ba4:	27 95       	ror	r18
    5ba6:	36 95       	lsr	r19
    5ba8:	27 95       	ror	r18
    5baa:	30 93 f4 02 	sts	0x02F4, r19
    5bae:	20 93 f3 02 	sts	0x02F3, r18
		compute_right_vel = 0;
    5bb2:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    5bb6:	10 92 f0 02 	sts	0x02F0, r1
    5bba:	10 92 ef 02 	sts	0x02EF, r1

		if(calibrateOdomFlag==1) {
    5bbe:	80 91 bf 04 	lds	r24, 0x04BF
    5bc2:	81 30       	cpi	r24, 0x01	; 1
    5bc4:	09 f4       	brne	.+2      	; 0x5bc8 <handleMotorsWithSpeedController+0x36a>
    5bc6:	d6 c0       	rjmp	.+428    	; 0x5d74 <handleMotorsWithSpeedController+0x516>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    5bc8:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    5bcc:	80 91 8b 04 	lds	r24, 0x048B
    5bd0:	90 91 8c 04 	lds	r25, 0x048C
    5bd4:	a0 91 8d 04 	lds	r26, 0x048D
    5bd8:	b0 91 8e 04 	lds	r27, 0x048E
    5bdc:	80 93 93 04 	sts	0x0493, r24
    5be0:	90 93 94 04 	sts	0x0494, r25
    5be4:	a0 93 95 04 	sts	0x0495, r26
    5be8:	b0 93 96 04 	sts	0x0496, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    5bec:	60 91 ae 04 	lds	r22, 0x04AE
    5bf0:	70 91 af 04 	lds	r23, 0x04AF
    5bf4:	88 27       	eor	r24, r24
    5bf6:	77 fd       	sbrc	r23, 7
    5bf8:	80 95       	com	r24
    5bfa:	98 2f       	mov	r25, r24
    5bfc:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    5c00:	7b 01       	movw	r14, r22
    5c02:	8c 01       	movw	r16, r24
    5c04:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    5c08:	20 91 b4 04 	lds	r18, 0x04B4
    5c0c:	30 91 b5 04 	lds	r19, 0x04B5
    5c10:	40 91 b6 04 	lds	r20, 0x04B6
    5c14:	50 91 b7 04 	lds	r21, 0x04B7
    5c18:	62 1b       	sub	r22, r18
    5c1a:	73 0b       	sbc	r23, r19
    5c1c:	84 0b       	sbc	r24, r20
    5c1e:	95 0b       	sbc	r25, r21
    5c20:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__floatunsisf>
    5c24:	20 e0       	ldi	r18, 0x00	; 0
    5c26:	30 e0       	ldi	r19, 0x00	; 0
    5c28:	40 ed       	ldi	r20, 0xD0	; 208
    5c2a:	52 e4       	ldi	r21, 0x42	; 66
    5c2c:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    5c30:	9b 01       	movw	r18, r22
    5c32:	ac 01       	movw	r20, r24
    5c34:	c8 01       	movw	r24, r16
    5c36:	b7 01       	movw	r22, r14
    5c38:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    5c3c:	20 e0       	ldi	r18, 0x00	; 0
    5c3e:	34 e2       	ldi	r19, 0x24	; 36
    5c40:	44 e7       	ldi	r20, 0x74	; 116
    5c42:	59 e4       	ldi	r21, 0x49	; 73
    5c44:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    5c48:	9b 01       	movw	r18, r22
    5c4a:	ac 01       	movw	r20, r24
    5c4c:	60 91 8b 04 	lds	r22, 0x048B
    5c50:	70 91 8c 04 	lds	r23, 0x048C
    5c54:	80 91 8d 04 	lds	r24, 0x048D
    5c58:	90 91 8e 04 	lds	r25, 0x048E
    5c5c:	0e 94 af 3c 	call	0x795e	; 0x795e <__addsf3>
    5c60:	60 93 8b 04 	sts	0x048B, r22
    5c64:	70 93 8c 04 	sts	0x048C, r23
    5c68:	80 93 8d 04 	sts	0x048D, r24
    5c6c:	90 93 8e 04 	sts	0x048E, r25
		timeRightOdom = getTime100MicroSec();
    5c70:	0e 94 cd 1b 	call	0x379a	; 0x379a <getTime100MicroSec>
    5c74:	60 93 b4 04 	sts	0x04B4, r22
    5c78:	70 93 b5 04 	sts	0x04B5, r23
    5c7c:	80 93 b6 04 	sts	0x04B6, r24
    5c80:	90 93 b7 04 	sts	0x04B7, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    5c84:	80 91 17 02 	lds	r24, 0x0217
    5c88:	81 30       	cpi	r24, 0x01	; 1
    5c8a:	09 f4       	brne	.+2      	; 0x5c8e <handleMotorsWithSpeedController+0x430>
    5c8c:	47 c0       	rjmp	.+142    	; 0x5d1c <handleMotorsWithSpeedController+0x4be>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    5c8e:	8b e0       	ldi	r24, 0x0B	; 11
    5c90:	93 e0       	ldi	r25, 0x03	; 3
    5c92:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    5c96:	80 91 0b 03 	lds	r24, 0x030B
    5c9a:	90 91 0c 03 	lds	r25, 0x030C
    5c9e:	90 93 f6 02 	sts	0x02F6, r25
    5ca2:	80 93 f5 02 	sts	0x02F5, r24

		if(pwm_right > 0) {
    5ca6:	18 16       	cp	r1, r24
    5ca8:	19 06       	cpc	r1, r25
    5caa:	0c f0       	brlt	.+2      	; 0x5cae <handleMotorsWithSpeedController+0x450>
    5cac:	95 c0       	rjmp	.+298    	; 0x5dd8 <handleMotorsWithSpeedController+0x57a>
			OCR3A = (unsigned int)pwm_right;
    5cae:	90 93 99 00 	sts	0x0099, r25
    5cb2:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    5cb6:	80 91 97 04 	lds	r24, 0x0497
    5cba:	8f 5f       	subi	r24, 0xFF	; 255
    5cbc:	80 93 97 04 	sts	0x0497, r24
    5cc0:	ad ce       	rjmp	.-678    	; 0x5a1c <handleMotorsWithSpeedController+0x1be>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    5cc2:	8d e0       	ldi	r24, 0x0D	; 13
    5cc4:	93 e0       	ldi	r25, 0x03	; 3
    5cc6:	6b e0       	ldi	r22, 0x0B	; 11
    5cc8:	73 e0       	ldi	r23, 0x03	; 3
    5cca:	0e 94 64 32 	call	0x64c8	; 0x64c8 <obstacleAvoidance>
    5cce:	80 91 0d 03 	lds	r24, 0x030D
    5cd2:	90 91 0e 03 	lds	r25, 0x030E
    5cd6:	f7 cd       	rjmp	.-1042   	; 0x58c6 <handleMotorsWithSpeedController+0x68>
}

void handleMotorsWithSpeedController() {

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    5cd8:	80 91 fd 02 	lds	r24, 0x02FD
    5cdc:	90 91 fe 02 	lds	r25, 0x02FE
    5ce0:	90 93 0c 03 	sts	0x030C, r25
    5ce4:	80 93 0b 03 	sts	0x030B, r24
		pwm_left_working = pwm_intermediate_left_desired;
    5ce8:	80 91 ff 02 	lds	r24, 0x02FF
    5cec:	90 91 00 03 	lds	r25, 0x0300
    5cf0:	90 93 0e 03 	sts	0x030E, r25
    5cf4:	80 93 0d 03 	sts	0x030D, r24
    5cf8:	e1 cd       	rjmp	.-1086   	; 0x58bc <handleMotorsWithSpeedController+0x5e>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    5cfa:	c4 01       	movw	r24, r8
    5cfc:	b3 01       	movw	r22, r6
    5cfe:	a2 01       	movw	r20, r4
    5d00:	91 01       	movw	r18, r2
    5d02:	0e 94 ae 3c 	call	0x795c	; 0x795c <__subsf3>
    5d06:	20 e0       	ldi	r18, 0x00	; 0
    5d08:	30 e0       	ldi	r19, 0x00	; 0
    5d0a:	4e e1       	ldi	r20, 0x1E	; 30
    5d0c:	52 e4       	ldi	r21, 0x42	; 66
    5d0e:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <__divsf3>
    5d12:	f6 2e       	mov	r15, r22
    5d14:	07 2f       	mov	r16, r23
    5d16:	18 2f       	mov	r17, r24
    5d18:	e9 2e       	mov	r14, r25
    5d1a:	da ce       	rjmp	.-588    	; 0x5ad0 <handleMotorsWithSpeedController+0x272>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    5d1c:	8b e0       	ldi	r24, 0x0B	; 11
    5d1e:	93 e0       	ldi	r25, 0x03	; 3
    5d20:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <start_horizontal_speed_control_right>
    5d24:	b8 cf       	rjmp	.-144    	; 0x5c96 <handleMotorsWithSpeedController+0x438>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    5d26:	44 27       	eor	r20, r20
    5d28:	37 fd       	sbrc	r19, 7
    5d2a:	40 95       	com	r20
    5d2c:	54 2f       	mov	r21, r20
    5d2e:	80 91 9c 04 	lds	r24, 0x049C
    5d32:	90 91 9d 04 	lds	r25, 0x049D
    5d36:	a0 91 9e 04 	lds	r26, 0x049E
    5d3a:	b0 91 9f 04 	lds	r27, 0x049F
    5d3e:	82 0f       	add	r24, r18
    5d40:	93 1f       	adc	r25, r19
    5d42:	a4 1f       	adc	r26, r20
    5d44:	b5 1f       	adc	r27, r21
    5d46:	80 93 9c 04 	sts	0x049C, r24
    5d4a:	90 93 9d 04 	sts	0x049D, r25
    5d4e:	a0 93 9e 04 	sts	0x049E, r26
    5d52:	b0 93 9f 04 	sts	0x049F, r27
			leftSumCount++;
    5d56:	80 91 a4 04 	lds	r24, 0x04A4
    5d5a:	90 91 a5 04 	lds	r25, 0x04A5
    5d5e:	01 96       	adiw	r24, 0x01	; 1
    5d60:	90 93 a5 04 	sts	0x04A5, r25
    5d64:	80 93 a4 04 	sts	0x04A4, r24
    5d68:	d6 cd       	rjmp	.-1108   	; 0x5916 <handleMotorsWithSpeedController+0xb8>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    5d6a:	8d e0       	ldi	r24, 0x0D	; 13
    5d6c:	93 e0       	ldi	r25, 0x03	; 3
    5d6e:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <start_horizontal_speed_control_left>
    5d72:	38 ce       	rjmp	.-912    	; 0x59e4 <handleMotorsWithSpeedController+0x186>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    5d74:	44 27       	eor	r20, r20
    5d76:	37 fd       	sbrc	r19, 7
    5d78:	40 95       	com	r20
    5d7a:	54 2f       	mov	r21, r20
    5d7c:	80 91 a0 04 	lds	r24, 0x04A0
    5d80:	90 91 a1 04 	lds	r25, 0x04A1
    5d84:	a0 91 a2 04 	lds	r26, 0x04A2
    5d88:	b0 91 a3 04 	lds	r27, 0x04A3
    5d8c:	82 0f       	add	r24, r18
    5d8e:	93 1f       	adc	r25, r19
    5d90:	a4 1f       	adc	r26, r20
    5d92:	b5 1f       	adc	r27, r21
    5d94:	80 93 a0 04 	sts	0x04A0, r24
    5d98:	90 93 a1 04 	sts	0x04A1, r25
    5d9c:	a0 93 a2 04 	sts	0x04A2, r26
    5da0:	b0 93 a3 04 	sts	0x04A3, r27
			rightSumCount++;
    5da4:	80 91 a6 04 	lds	r24, 0x04A6
    5da8:	90 91 a7 04 	lds	r25, 0x04A7
    5dac:	01 96       	adiw	r24, 0x01	; 1
    5dae:	90 93 a7 04 	sts	0x04A7, r25
    5db2:	80 93 a6 04 	sts	0x04A6, r24
    5db6:	08 cf       	rjmp	.-496    	; 0x5bc8 <handleMotorsWithSpeedController+0x36a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    5db8:	62 e0       	ldi	r22, 0x02	; 2
    5dba:	0e 94 11 24 	call	0x4822	; 0x4822 <getInputFromSpeed>
    5dbe:	90 93 0e 03 	sts	0x030E, r25
    5dc2:	80 93 0d 03 	sts	0x030D, r24
    5dc6:	7a cd       	rjmp	.-1292   	; 0x58bc <handleMotorsWithSpeedController+0x5e>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    5dc8:	63 e0       	ldi	r22, 0x03	; 3
    5dca:	0e 94 11 24 	call	0x4822	; 0x4822 <getInputFromSpeed>
    5dce:	90 93 0c 03 	sts	0x030C, r25
    5dd2:	80 93 0b 03 	sts	0x030B, r24
    5dd6:	65 cd       	rjmp	.-1334   	; 0x58a2 <handleMotorsWithSpeedController+0x44>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    5dd8:	00 97       	sbiw	r24, 0x00	; 0
    5dda:	a1 f4       	brne	.+40     	; 0x5e04 <handleMotorsWithSpeedController+0x5a6>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    5ddc:	10 92 99 00 	sts	0x0099, r1
    5de0:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    5de4:	10 92 9b 00 	sts	0x009B, r1
    5de8:	10 92 9a 00 	sts	0x009A, r1
    5dec:	64 cf       	rjmp	.-312    	; 0x5cb6 <handleMotorsWithSpeedController+0x458>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    5dee:	00 97       	sbiw	r24, 0x00	; 0
    5df0:	89 f4       	brne	.+34     	; 0x5e14 <handleMotorsWithSpeedController+0x5b6>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    5df2:	10 92 a9 00 	sts	0x00A9, r1
    5df6:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    5dfa:	10 92 ab 00 	sts	0x00AB, r1
    5dfe:	10 92 aa 00 	sts	0x00AA, r1
    5e02:	00 ce       	rjmp	.-1024   	; 0x5a04 <handleMotorsWithSpeedController+0x1a6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    5e04:	90 95       	com	r25
    5e06:	81 95       	neg	r24
    5e08:	9f 4f       	sbci	r25, 0xFF	; 255
    5e0a:	90 93 9b 00 	sts	0x009B, r25
    5e0e:	80 93 9a 00 	sts	0x009A, r24
    5e12:	51 cf       	rjmp	.-350    	; 0x5cb6 <handleMotorsWithSpeedController+0x458>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    5e14:	90 95       	com	r25
    5e16:	81 95       	neg	r24
    5e18:	9f 4f       	sbci	r25, 0xFF	; 255
    5e1a:	90 93 ab 00 	sts	0x00AB, r25
    5e1e:	80 93 aa 00 	sts	0x00AA, r24
    5e22:	f0 cd       	rjmp	.-1056   	; 0x5a04 <handleMotorsWithSpeedController+0x1a6>

00005e24 <initCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void initCalibration() {
    5e24:	2f 92       	push	r2
    5e26:	3f 92       	push	r3
    5e28:	4f 92       	push	r4
    5e2a:	5f 92       	push	r5
    5e2c:	6f 92       	push	r6
    5e2e:	7f 92       	push	r7
    5e30:	8f 92       	push	r8
    5e32:	9f 92       	push	r9
    5e34:	af 92       	push	r10
    5e36:	bf 92       	push	r11
    5e38:	cf 92       	push	r12
    5e3a:	df 92       	push	r13
    5e3c:	ef 92       	push	r14
    5e3e:	ff 92       	push	r15
    5e40:	0f 93       	push	r16
    5e42:	1f 93       	push	r17
    5e44:	cf 93       	push	r28
    5e46:	df 93       	push	r29

    unsigned int temp=0;
    unsigned int i=0;

	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    5e48:	8a e6       	ldi	r24, 0x6A	; 106
    5e4a:	9f e0       	ldi	r25, 0x0F	; 15
    5e4c:	0e 94 b0 40 	call	0x8160	; 0x8160 <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    5e50:	2a ea       	ldi	r18, 0xAA	; 170
    5e52:	85 35       	cpi	r24, 0x55	; 85
    5e54:	92 07       	cpc	r25, r18
    5e56:	09 f4       	brne	.+2      	; 0x5e5a <initCalibration+0x36>
    5e58:	b1 c1       	rjmp	.+866    	; 0x61bc <initCalibration+0x398>
        for(i=0; i<CALIBRATION_SAMPLES; i++) {
            calibration[i][0] = i+1;
        }
        // the following values are taken from a field test
        // forward left, speed control enabled
        calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    5e5a:	a4 e1       	ldi	r26, 0x14	; 20
    5e5c:	b0 e0       	ldi	r27, 0x00	; 0
    5e5e:	b0 93 d6 04 	sts	0x04D6, r27
    5e62:	a0 93 d5 04 	sts	0x04D5, r26
        calibration[1][0] = 40;
    5e66:	88 e2       	ldi	r24, 0x28	; 40
    5e68:	90 e0       	ldi	r25, 0x00	; 0
    5e6a:	90 93 e6 04 	sts	0x04E6, r25
    5e6e:	80 93 e5 04 	sts	0x04E5, r24
        calibration[2][0] = 59;
    5e72:	8b e3       	ldi	r24, 0x3B	; 59
    5e74:	90 e0       	ldi	r25, 0x00	; 0
    5e76:	90 93 f6 04 	sts	0x04F6, r25
    5e7a:	80 93 f5 04 	sts	0x04F5, r24
        calibration[3][0] = 79;
    5e7e:	0f e4       	ldi	r16, 0x4F	; 79
    5e80:	10 e0       	ldi	r17, 0x00	; 0
    5e82:	10 93 06 05 	sts	0x0506, r17
    5e86:	00 93 05 05 	sts	0x0505, r16
        calibration[4][0] = 100;
    5e8a:	e4 e6       	ldi	r30, 0x64	; 100
    5e8c:	f0 e0       	ldi	r31, 0x00	; 0
    5e8e:	f0 93 16 05 	sts	0x0516, r31
    5e92:	e0 93 15 05 	sts	0x0515, r30
        calibration[5][0] = 120;
    5e96:	f8 e7       	ldi	r31, 0x78	; 120
    5e98:	af 2e       	mov	r10, r31
    5e9a:	b1 2c       	mov	r11, r1
    5e9c:	b0 92 26 05 	sts	0x0526, r11
    5ea0:	a0 92 25 05 	sts	0x0525, r10
        calibration[6][0] = 139;
    5ea4:	8b e8       	ldi	r24, 0x8B	; 139
    5ea6:	90 e0       	ldi	r25, 0x00	; 0
    5ea8:	90 93 36 05 	sts	0x0536, r25
    5eac:	80 93 35 05 	sts	0x0535, r24
        calibration[7][0] = 159;
    5eb0:	2f e9       	ldi	r18, 0x9F	; 159
    5eb2:	30 e0       	ldi	r19, 0x00	; 0
    5eb4:	30 93 46 05 	sts	0x0546, r19
    5eb8:	20 93 45 05 	sts	0x0545, r18
		calibration[8][0] = 180;
    5ebc:	44 eb       	ldi	r20, 0xB4	; 180
    5ebe:	50 e0       	ldi	r21, 0x00	; 0
    5ec0:	50 93 56 05 	sts	0x0556, r21
    5ec4:	40 93 55 05 	sts	0x0555, r20
        calibration[0][1] = 19;    	// real speed measured in mm/s
    5ec8:	63 e1       	ldi	r22, 0x13	; 19
    5eca:	70 e0       	ldi	r23, 0x00	; 0
    5ecc:	70 93 d8 04 	sts	0x04D8, r23
    5ed0:	60 93 d7 04 	sts	0x04D7, r22
        calibration[1][1] = 47;
    5ed4:	2f e2       	ldi	r18, 0x2F	; 47
    5ed6:	30 e0       	ldi	r19, 0x00	; 0
    5ed8:	30 93 e8 04 	sts	0x04E8, r19
    5edc:	20 93 e7 04 	sts	0x04E7, r18
        calibration[2][1] = 72;
    5ee0:	28 e4       	ldi	r18, 0x48	; 72
    5ee2:	30 e0       	ldi	r19, 0x00	; 0
    5ee4:	30 93 f8 04 	sts	0x04F8, r19
    5ee8:	20 93 f7 04 	sts	0x04F7, r18
        calibration[3][1] = 91;
    5eec:	2b e5       	ldi	r18, 0x5B	; 91
    5eee:	30 e0       	ldi	r19, 0x00	; 0
    5ef0:	30 93 08 05 	sts	0x0508, r19
    5ef4:	20 93 07 05 	sts	0x0507, r18
        calibration[4][1] = 109;
    5ef8:	2d e6       	ldi	r18, 0x6D	; 109
    5efa:	30 e0       	ldi	r19, 0x00	; 0
    5efc:	30 93 18 05 	sts	0x0518, r19
    5f00:	20 93 17 05 	sts	0x0517, r18
        calibration[5][1] = 125;
    5f04:	ed e7       	ldi	r30, 0x7D	; 125
    5f06:	6e 2e       	mov	r6, r30
    5f08:	71 2c       	mov	r7, r1
    5f0a:	70 92 28 05 	sts	0x0528, r7
    5f0e:	60 92 27 05 	sts	0x0527, r6
        calibration[6][1] = 143;
    5f12:	2f e8       	ldi	r18, 0x8F	; 143
    5f14:	30 e0       	ldi	r19, 0x00	; 0
    5f16:	30 93 38 05 	sts	0x0538, r19
    5f1a:	20 93 37 05 	sts	0x0537, r18
        calibration[7][1] = 160;
    5f1e:	20 ea       	ldi	r18, 0xA0	; 160
    5f20:	30 e0       	ldi	r19, 0x00	; 0
    5f22:	30 93 48 05 	sts	0x0548, r19
    5f26:	20 93 47 05 	sts	0x0547, r18
		calibration[8][1] = 174;
    5f2a:	ee ea       	ldi	r30, 0xAE	; 174
    5f2c:	f0 e0       	ldi	r31, 0x00	; 0
    5f2e:	f0 93 58 05 	sts	0x0558, r31
    5f32:	e0 93 57 05 	sts	0x0557, r30
        // forward right, speed control enabled
        calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    5f36:	70 93 da 04 	sts	0x04DA, r23
    5f3a:	60 93 d9 04 	sts	0x04D9, r22
        calibration[1][2] = 39;
    5f3e:	e7 e2       	ldi	r30, 0x27	; 39
    5f40:	f0 e0       	ldi	r31, 0x00	; 0
    5f42:	f0 93 ea 04 	sts	0x04EA, r31
    5f46:	e0 93 e9 04 	sts	0x04E9, r30
        calibration[2][2] = 60;
    5f4a:	cc e3       	ldi	r28, 0x3C	; 60
    5f4c:	d0 e0       	ldi	r29, 0x00	; 0
    5f4e:	d0 93 fa 04 	sts	0x04FA, r29
    5f52:	c0 93 f9 04 	sts	0x04F9, r28
        calibration[3][2] = 80;
    5f56:	70 e5       	ldi	r23, 0x50	; 80
    5f58:	27 2e       	mov	r2, r23
    5f5a:	31 2c       	mov	r3, r1
    5f5c:	30 92 0a 05 	sts	0x050A, r3
    5f60:	20 92 09 05 	sts	0x0509, r2
        calibration[4][2] = 99;
    5f64:	63 e6       	ldi	r22, 0x63	; 99
    5f66:	e6 2e       	mov	r14, r22
    5f68:	f1 2c       	mov	r15, r1
    5f6a:	f0 92 1a 05 	sts	0x051A, r15
    5f6e:	e0 92 19 05 	sts	0x0519, r14
        calibration[5][2] = 119;
    5f72:	67 e7       	ldi	r22, 0x77	; 119
    5f74:	70 e0       	ldi	r23, 0x00	; 0
    5f76:	70 93 2a 05 	sts	0x052A, r23
    5f7a:	60 93 29 05 	sts	0x0529, r22
        calibration[6][2] = 140;
    5f7e:	0f 2e       	mov	r0, r31
    5f80:	fc e8       	ldi	r31, 0x8C	; 140
    5f82:	cf 2e       	mov	r12, r31
    5f84:	dd 24       	eor	r13, r13
    5f86:	f0 2d       	mov	r31, r0
    5f88:	d0 92 3a 05 	sts	0x053A, r13
    5f8c:	c0 92 39 05 	sts	0x0539, r12
        calibration[7][2] = 160;
    5f90:	30 93 4a 05 	sts	0x054A, r19
    5f94:	20 93 49 05 	sts	0x0549, r18
		calibration[8][2] = 180;
    5f98:	50 93 5a 05 	sts	0x055A, r21
    5f9c:	40 93 59 05 	sts	0x0559, r20
        calibration[0][3] = 23;    	// real speed measured in mm/s
    5fa0:	0f 2e       	mov	r0, r31
    5fa2:	f7 e1       	ldi	r31, 0x17	; 23
    5fa4:	8f 2e       	mov	r8, r31
    5fa6:	99 24       	eor	r9, r9
    5fa8:	f0 2d       	mov	r31, r0
    5faa:	90 92 dc 04 	sts	0x04DC, r9
    5fae:	80 92 db 04 	sts	0x04DB, r8
        calibration[1][3] = 46;
    5fb2:	0f 2e       	mov	r0, r31
    5fb4:	fe e2       	ldi	r31, 0x2E	; 46
    5fb6:	8f 2e       	mov	r8, r31
    5fb8:	99 24       	eor	r9, r9
    5fba:	f0 2d       	mov	r31, r0
    5fbc:	90 92 ec 04 	sts	0x04EC, r9
    5fc0:	80 92 eb 04 	sts	0x04EB, r8
        calibration[2][3] = 64;
    5fc4:	88 24       	eor	r8, r8
    5fc6:	99 24       	eor	r9, r9
    5fc8:	68 94       	set
    5fca:	86 f8       	bld	r8, 6
    5fcc:	90 92 fc 04 	sts	0x04FC, r9
    5fd0:	80 92 fb 04 	sts	0x04FB, r8
        calibration[3][3] = 81;
    5fd4:	0f 2e       	mov	r0, r31
    5fd6:	f1 e5       	ldi	r31, 0x51	; 81
    5fd8:	4f 2e       	mov	r4, r31
    5fda:	55 24       	eor	r5, r5
    5fdc:	f0 2d       	mov	r31, r0
    5fde:	50 92 0c 05 	sts	0x050C, r5
    5fe2:	40 92 0b 05 	sts	0x050B, r4
        calibration[4][3] = 97;
    5fe6:	0f 2e       	mov	r0, r31
    5fe8:	f1 e6       	ldi	r31, 0x61	; 97
    5fea:	8f 2e       	mov	r8, r31
    5fec:	99 24       	eor	r9, r9
    5fee:	f0 2d       	mov	r31, r0
    5ff0:	90 92 1c 05 	sts	0x051C, r9
    5ff4:	80 92 1b 05 	sts	0x051B, r8
        calibration[5][3] = 112;
    5ff8:	0f 2e       	mov	r0, r31
    5ffa:	f0 e7       	ldi	r31, 0x70	; 112
    5ffc:	8f 2e       	mov	r8, r31
    5ffe:	99 24       	eor	r9, r9
    6000:	f0 2d       	mov	r31, r0
    6002:	90 92 2c 05 	sts	0x052C, r9
    6006:	80 92 2b 05 	sts	0x052B, r8
        calibration[6][3] = 125;
    600a:	70 92 3c 05 	sts	0x053C, r7
    600e:	60 92 3b 05 	sts	0x053B, r6
        calibration[7][3] = 139;
    6012:	90 93 4c 05 	sts	0x054C, r25
    6016:	80 93 4b 05 	sts	0x054B, r24
		calibration[8][3] = 152;
    601a:	0f 2e       	mov	r0, r31
    601c:	f8 e9       	ldi	r31, 0x98	; 152
    601e:	8f 2e       	mov	r8, r31
    6020:	99 24       	eor	r9, r9
    6022:	f0 2d       	mov	r31, r0
    6024:	90 92 5c 05 	sts	0x055C, r9
    6028:	80 92 5b 05 	sts	0x055B, r8
        // backward left, speed control enabled
        calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    602c:	b0 93 de 04 	sts	0x04DE, r27
    6030:	a0 93 dd 04 	sts	0x04DD, r26
        calibration[1][4] = 39;
    6034:	f0 93 ee 04 	sts	0x04EE, r31
    6038:	e0 93 ed 04 	sts	0x04ED, r30
        calibration[2][4] = 60;
    603c:	d0 93 fe 04 	sts	0x04FE, r29
    6040:	c0 93 fd 04 	sts	0x04FD, r28
        calibration[3][4] = 79;
    6044:	10 93 0e 05 	sts	0x050E, r17
    6048:	00 93 0d 05 	sts	0x050D, r16
        calibration[4][4] = 99;
    604c:	f0 92 1e 05 	sts	0x051E, r15
    6050:	e0 92 1d 05 	sts	0x051D, r14
        calibration[5][4] = 120;
    6054:	b0 92 2e 05 	sts	0x052E, r11
    6058:	a0 92 2d 05 	sts	0x052D, r10
        calibration[6][4] = 140;
    605c:	d0 92 3e 05 	sts	0x053E, r13
    6060:	c0 92 3d 05 	sts	0x053D, r12
        calibration[7][4] = 160;
    6064:	30 93 4e 05 	sts	0x054E, r19
    6068:	20 93 4d 05 	sts	0x054D, r18
		calibration[8][4] = 179;
    606c:	c3 eb       	ldi	r28, 0xB3	; 179
    606e:	d0 e0       	ldi	r29, 0x00	; 0
    6070:	d0 93 5e 05 	sts	0x055E, r29
    6074:	c0 93 5d 05 	sts	0x055D, r28
        calibration[0][5] = 18;    	// real speed measured in mm/s
    6078:	c2 e1       	ldi	r28, 0x12	; 18
    607a:	d0 e0       	ldi	r29, 0x00	; 0
    607c:	d0 93 e0 04 	sts	0x04E0, r29
    6080:	c0 93 df 04 	sts	0x04DF, r28
        calibration[1][5] = 45;
    6084:	cd e2       	ldi	r28, 0x2D	; 45
    6086:	d0 e0       	ldi	r29, 0x00	; 0
    6088:	d0 93 f0 04 	sts	0x04F0, r29
    608c:	c0 93 ef 04 	sts	0x04EF, r28
        calibration[2][5] = 68;
    6090:	c4 e4       	ldi	r28, 0x44	; 68
    6092:	d0 e0       	ldi	r29, 0x00	; 0
    6094:	d0 93 00 05 	sts	0x0500, r29
    6098:	c0 93 ff 04 	sts	0x04FF, r28
        calibration[3][5] = 87;
    609c:	c7 e5       	ldi	r28, 0x57	; 87
    609e:	d0 e0       	ldi	r29, 0x00	; 0
    60a0:	d0 93 10 05 	sts	0x0510, r29
    60a4:	c0 93 0f 05 	sts	0x050F, r28
        calibration[4][5] = 105;
    60a8:	c9 e6       	ldi	r28, 0x69	; 105
    60aa:	d0 e0       	ldi	r29, 0x00	; 0
    60ac:	d0 93 20 05 	sts	0x0520, r29
    60b0:	c0 93 1f 05 	sts	0x051F, r28
        calibration[5][5] = 119;
    60b4:	70 93 30 05 	sts	0x0530, r23
    60b8:	60 93 2f 05 	sts	0x052F, r22
        calibration[6][5] = 137;
    60bc:	c9 e8       	ldi	r28, 0x89	; 137
    60be:	d0 e0       	ldi	r29, 0x00	; 0
    60c0:	d0 93 40 05 	sts	0x0540, r29
    60c4:	c0 93 3f 05 	sts	0x053F, r28
        calibration[7][5] = 151;
    60c8:	c7 e9       	ldi	r28, 0x97	; 151
    60ca:	d0 e0       	ldi	r29, 0x00	; 0
    60cc:	d0 93 50 05 	sts	0x0550, r29
    60d0:	c0 93 4f 05 	sts	0x054F, r28
		calibration[8][5] = 168;
    60d4:	c8 ea       	ldi	r28, 0xA8	; 168
    60d6:	d0 e0       	ldi	r29, 0x00	; 0
    60d8:	d0 93 60 05 	sts	0x0560, r29
    60dc:	c0 93 5f 05 	sts	0x055F, r28
        // backward right, speed control enabled
        calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    60e0:	b0 93 e2 04 	sts	0x04E2, r27
    60e4:	a0 93 e1 04 	sts	0x04E1, r26
        calibration[1][6] = 39;
    60e8:	f0 93 f2 04 	sts	0x04F2, r31
    60ec:	e0 93 f1 04 	sts	0x04F1, r30
        calibration[2][6] = 59;
    60f0:	eb e3       	ldi	r30, 0x3B	; 59
    60f2:	f0 e0       	ldi	r31, 0x00	; 0
    60f4:	f0 93 02 05 	sts	0x0502, r31
    60f8:	e0 93 01 05 	sts	0x0501, r30
        calibration[3][6] = 80;
    60fc:	30 92 12 05 	sts	0x0512, r3
    6100:	20 92 11 05 	sts	0x0511, r2
        calibration[4][6] = 100;
    6104:	e4 e6       	ldi	r30, 0x64	; 100
    6106:	8e 2e       	mov	r8, r30
    6108:	91 2c       	mov	r9, r1
    610a:	90 92 22 05 	sts	0x0522, r9
    610e:	80 92 21 05 	sts	0x0521, r8
        calibration[5][6] = 119;
    6112:	70 93 32 05 	sts	0x0532, r23
    6116:	60 93 31 05 	sts	0x0531, r22
        calibration[6][6] = 139;
    611a:	90 93 42 05 	sts	0x0542, r25
    611e:	80 93 41 05 	sts	0x0541, r24
        calibration[7][6] = 160;
    6122:	30 93 52 05 	sts	0x0552, r19
    6126:	20 93 51 05 	sts	0x0551, r18
		calibration[8][6] = 180;
    612a:	50 93 62 05 	sts	0x0562, r21
    612e:	40 93 61 05 	sts	0x0561, r20
        calibration[0][7] = 22;    	// real speed measured in mm/s
    6132:	26 e1       	ldi	r18, 0x16	; 22
    6134:	30 e0       	ldi	r19, 0x00	; 0
    6136:	30 93 e4 04 	sts	0x04E4, r19
    613a:	20 93 e3 04 	sts	0x04E3, r18
        calibration[1][7] = 46;
    613e:	2e e2       	ldi	r18, 0x2E	; 46
    6140:	30 e0       	ldi	r19, 0x00	; 0
    6142:	30 93 f4 04 	sts	0x04F4, r19
    6146:	20 93 f3 04 	sts	0x04F3, r18
        calibration[2][7] = 65;
    614a:	21 e4       	ldi	r18, 0x41	; 65
    614c:	30 e0       	ldi	r19, 0x00	; 0
    614e:	30 93 04 05 	sts	0x0504, r19
    6152:	20 93 03 05 	sts	0x0503, r18
        calibration[3][7] = 81;
    6156:	50 92 14 05 	sts	0x0514, r5
    615a:	40 92 13 05 	sts	0x0513, r4
        calibration[4][7] = 96;
    615e:	20 e6       	ldi	r18, 0x60	; 96
    6160:	30 e0       	ldi	r19, 0x00	; 0
    6162:	30 93 24 05 	sts	0x0524, r19
    6166:	20 93 23 05 	sts	0x0523, r18
        calibration[5][7] = 111;
    616a:	2f e6       	ldi	r18, 0x6F	; 111
    616c:	30 e0       	ldi	r19, 0x00	; 0
    616e:	30 93 34 05 	sts	0x0534, r19
    6172:	20 93 33 05 	sts	0x0533, r18
        calibration[6][7] = 125;
    6176:	70 92 44 05 	sts	0x0544, r7
    617a:	60 92 43 05 	sts	0x0543, r6
        calibration[7][7] = 139;
    617e:	90 93 54 05 	sts	0x0554, r25
    6182:	80 93 53 05 	sts	0x0553, r24
		calibration[8][7] = 153;
    6186:	89 e9       	ldi	r24, 0x99	; 153
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	90 93 64 05 	sts	0x0564, r25
    618e:	80 93 63 05 	sts	0x0563, r24

        writeCalibrationToFlash();
    6192:	0e 94 96 3c 	call	0x792c	; 0x792c <writeCalibrationToFlash>

    }

}
    6196:	df 91       	pop	r29
    6198:	cf 91       	pop	r28
    619a:	1f 91       	pop	r17
    619c:	0f 91       	pop	r16
    619e:	ff 90       	pop	r15
    61a0:	ef 90       	pop	r14
    61a2:	df 90       	pop	r13
    61a4:	cf 90       	pop	r12
    61a6:	bf 90       	pop	r11
    61a8:	af 90       	pop	r10
    61aa:	9f 90       	pop	r9
    61ac:	8f 90       	pop	r8
    61ae:	7f 90       	pop	r7
    61b0:	6f 90       	pop	r6
    61b2:	5f 90       	pop	r5
    61b4:	4f 90       	pop	r4
    61b6:	3f 90       	pop	r3
    61b8:	2f 90       	pop	r2
    61ba:	08 95       	ret
    unsigned int i=0;

	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    61bc:	0e 94 a5 3c 	call	0x794a	; 0x794a <readCalibrationFromFlash>
    61c0:	ea cf       	rjmp	.-44     	; 0x6196 <initCalibration+0x372>

000061c2 <__vector_45>:
    }

}

// Motor left
ISR(TIMER4_OVF_vect) {
    61c2:	1f 92       	push	r1
    61c4:	0f 92       	push	r0
    61c6:	0f b6       	in	r0, 0x3f	; 63
    61c8:	0f 92       	push	r0
    61ca:	11 24       	eor	r1, r1
    61cc:	8f 93       	push	r24
    61ce:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    61d0:	80 91 66 04 	lds	r24, 0x0466
    61d4:	88 23       	and	r24, r24
    61d6:	61 f0       	breq	.+24     	; 0x61f0 <__vector_45+0x2e>
		pwm_left = 0;
    61d8:	10 92 f8 02 	sts	0x02F8, r1
    61dc:	10 92 f7 02 	sts	0x02F7, r1
		OCR4A = 0;
    61e0:	10 92 a9 00 	sts	0x00A9, r1
    61e4:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    61e8:	10 92 ab 00 	sts	0x00AB, r1
    61ec:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    61f0:	10 92 e2 02 	sts	0x02E2, r1
    61f4:	10 92 e1 02 	sts	0x02E1, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    61f8:	80 91 f7 02 	lds	r24, 0x02F7
    61fc:	90 91 f8 02 	lds	r25, 0x02F8
    6200:	00 97       	sbiw	r24, 0x00	; 0
    6202:	41 f5       	brne	.+80     	; 0x6254 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    6204:	80 91 eb 02 	lds	r24, 0x02EB
    6208:	90 91 ec 02 	lds	r25, 0x02EC
    620c:	97 fd       	sbrc	r25, 7
    620e:	69 c0       	rjmp	.+210    	; 0x62e2 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    6210:	81 e0       	ldi	r24, 0x01	; 1
    6212:	80 93 28 02 	sts	0x0228, r24
			currentMotLeftChannel = 14;
    6216:	8e e0       	ldi	r24, 0x0E	; 14
    6218:	80 93 25 02 	sts	0x0225, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    621c:	81 e0       	ldi	r24, 0x01	; 1
    621e:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    6222:	80 91 a0 00 	lds	r24, 0x00A0
    6226:	8f 75       	andi	r24, 0x5F	; 95
    6228:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    622c:	80 91 02 01 	lds	r24, 0x0102
    6230:	87 7e       	andi	r24, 0xE7	; 231
    6232:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    6236:	80 91 72 00 	lds	r24, 0x0072
    623a:	89 7f       	andi	r24, 0xF9	; 249
    623c:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    6240:	89 b3       	in	r24, 0x19	; 25
    6242:	86 60       	ori	r24, 0x06	; 6
    6244:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    6246:	9f 91       	pop	r25
    6248:	8f 91       	pop	r24
    624a:	0f 90       	pop	r0
    624c:	0f be       	out	0x3f, r0	; 63
    624e:	0f 90       	pop	r0
    6250:	1f 90       	pop	r1
    6252:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    6254:	18 16       	cp	r1, r24
    6256:	19 06       	cpc	r1, r25
    6258:	2c f5       	brge	.+74     	; 0x62a4 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    625a:	10 92 28 02 	sts	0x0228, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    625e:	8f e0       	ldi	r24, 0x0F	; 15
    6260:	80 93 25 02 	sts	0x0225, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    6264:	80 91 a0 00 	lds	r24, 0x00A0
    6268:	8f 7d       	andi	r24, 0xDF	; 223
    626a:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    626e:	80 91 72 00 	lds	r24, 0x0072
    6272:	8b 7f       	andi	r24, 0xFB	; 251
    6274:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    6278:	80 91 02 01 	lds	r24, 0x0102
    627c:	8f 7e       	andi	r24, 0xEF	; 239
    627e:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    6282:	80 91 a0 00 	lds	r24, 0x00A0
    6286:	80 68       	ori	r24, 0x80	; 128
    6288:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    628c:	80 91 72 00 	lds	r24, 0x0072
    6290:	82 60       	ori	r24, 0x02	; 2
    6292:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    6296:	9f 91       	pop	r25
    6298:	8f 91       	pop	r24
    629a:	0f 90       	pop	r0
    629c:	0f be       	out	0x3f, r0	; 63
    629e:	0f 90       	pop	r0
    62a0:	1f 90       	pop	r1
    62a2:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    62a4:	10 92 28 02 	sts	0x0228, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    62a8:	8e e0       	ldi	r24, 0x0E	; 14
    62aa:	80 93 25 02 	sts	0x0225, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    62ae:	80 91 a0 00 	lds	r24, 0x00A0
    62b2:	8f 77       	andi	r24, 0x7F	; 127
    62b4:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    62b8:	80 91 72 00 	lds	r24, 0x0072
    62bc:	8d 7f       	andi	r24, 0xFD	; 253
    62be:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    62c2:	80 91 02 01 	lds	r24, 0x0102
    62c6:	87 7f       	andi	r24, 0xF7	; 247
    62c8:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    62cc:	80 91 a0 00 	lds	r24, 0x00A0
    62d0:	80 62       	ori	r24, 0x20	; 32
    62d2:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    62d6:	80 91 72 00 	lds	r24, 0x0072
    62da:	84 60       	ori	r24, 0x04	; 4
    62dc:	80 93 72 00 	sts	0x0072, r24
    62e0:	b2 cf       	rjmp	.-156    	; 0x6246 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    62e2:	81 e0       	ldi	r24, 0x01	; 1
    62e4:	80 93 28 02 	sts	0x0228, r24
			currentMotLeftChannel = 15;
    62e8:	8f e0       	ldi	r24, 0x0F	; 15
    62ea:	80 93 25 02 	sts	0x0225, r24
    62ee:	96 cf       	rjmp	.-212    	; 0x621c <__vector_45+0x5a>

000062f0 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    62f0:	1f 92       	push	r1
    62f2:	0f 92       	push	r0
    62f4:	0f b6       	in	r0, 0x3f	; 63
    62f6:	0f 92       	push	r0
    62f8:	11 24       	eor	r1, r1
    62fa:	8f 93       	push	r24
    62fc:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    62fe:	81 e0       	ldi	r24, 0x01	; 1
    6300:	80 93 28 02 	sts	0x0228, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    6304:	9e e0       	ldi	r25, 0x0E	; 14
    6306:	90 93 25 02 	sts	0x0225, r25

	firstSampleLeft = 1;
    630a:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    630e:	9f 91       	pop	r25
    6310:	8f 91       	pop	r24
    6312:	0f 90       	pop	r0
    6314:	0f be       	out	0x3f, r0	; 63
    6316:	0f 90       	pop	r0
    6318:	1f 90       	pop	r1
    631a:	18 95       	reti

0000631c <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    631c:	1f 92       	push	r1
    631e:	0f 92       	push	r0
    6320:	0f b6       	in	r0, 0x3f	; 63
    6322:	0f 92       	push	r0
    6324:	11 24       	eor	r1, r1
    6326:	8f 93       	push	r24
    6328:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    632a:	81 e0       	ldi	r24, 0x01	; 1
    632c:	80 93 28 02 	sts	0x0228, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    6330:	9f e0       	ldi	r25, 0x0F	; 15
    6332:	90 93 25 02 	sts	0x0225, r25

	firstSampleLeft = 1;
    6336:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    633a:	9f 91       	pop	r25
    633c:	8f 91       	pop	r24
    633e:	0f 90       	pop	r0
    6340:	0f be       	out	0x3f, r0	; 63
    6342:	0f 90       	pop	r0
    6344:	1f 90       	pop	r1
    6346:	18 95       	reti

00006348 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    6348:	1f 92       	push	r1
    634a:	0f 92       	push	r0
    634c:	0f b6       	in	r0, 0x3f	; 63
    634e:	0f 92       	push	r0
    6350:	11 24       	eor	r1, r1
    6352:	8f 93       	push	r24
    6354:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    6356:	80 91 66 04 	lds	r24, 0x0466
    635a:	88 23       	and	r24, r24
    635c:	61 f0       	breq	.+24     	; 0x6376 <__vector_35+0x2e>
		pwm_right = 0;
    635e:	10 92 f6 02 	sts	0x02F6, r1
    6362:	10 92 f5 02 	sts	0x02F5, r1
		OCR3A = 0;
    6366:	10 92 99 00 	sts	0x0099, r1
    636a:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    636e:	10 92 9b 00 	sts	0x009B, r1
    6372:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    6376:	10 92 e4 02 	sts	0x02E4, r1
    637a:	10 92 e3 02 	sts	0x02E3, r1


	if(pwm_right == 0) {
    637e:	80 91 f5 02 	lds	r24, 0x02F5
    6382:	90 91 f6 02 	lds	r25, 0x02F6
    6386:	00 97       	sbiw	r24, 0x00	; 0
    6388:	31 f5       	brne	.+76     	; 0x63d6 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    638a:	80 91 e9 02 	lds	r24, 0x02E9
    638e:	90 91 ea 02 	lds	r25, 0x02EA
    6392:	97 fd       	sbrc	r25, 7
    6394:	5f c0       	rjmp	.+190    	; 0x6454 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    6396:	81 e0       	ldi	r24, 0x01	; 1
    6398:	80 93 27 02 	sts	0x0227, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    639c:	8c e0       	ldi	r24, 0x0C	; 12
    639e:	80 93 26 02 	sts	0x0226, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    63a2:	81 e0       	ldi	r24, 0x01	; 1
    63a4:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    63a8:	80 91 90 00 	lds	r24, 0x0090
    63ac:	8f 75       	andi	r24, 0x5F	; 95
    63ae:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    63b2:	8e b1       	in	r24, 0x0e	; 14
    63b4:	87 7e       	andi	r24, 0xE7	; 231
    63b6:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    63b8:	80 91 71 00 	lds	r24, 0x0071
    63bc:	89 7f       	andi	r24, 0xF9	; 249
    63be:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    63c2:	88 b3       	in	r24, 0x18	; 24
    63c4:	86 60       	ori	r24, 0x06	; 6
    63c6:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    63c8:	9f 91       	pop	r25
    63ca:	8f 91       	pop	r24
    63cc:	0f 90       	pop	r0
    63ce:	0f be       	out	0x3f, r0	; 63
    63d0:	0f 90       	pop	r0
    63d2:	1f 90       	pop	r1
    63d4:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    63d6:	18 16       	cp	r1, r24
    63d8:	19 06       	cpc	r1, r25
    63da:	0c f5       	brge	.+66     	; 0x641e <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    63dc:	10 92 27 02 	sts	0x0227, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    63e0:	8d e0       	ldi	r24, 0x0D	; 13
    63e2:	80 93 26 02 	sts	0x0226, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    63e6:	80 91 90 00 	lds	r24, 0x0090
    63ea:	8f 7d       	andi	r24, 0xDF	; 223
    63ec:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    63f0:	80 91 71 00 	lds	r24, 0x0071
    63f4:	8b 7f       	andi	r24, 0xFB	; 251
    63f6:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    63fa:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    63fc:	80 91 90 00 	lds	r24, 0x0090
    6400:	80 68       	ori	r24, 0x80	; 128
    6402:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    6406:	80 91 71 00 	lds	r24, 0x0071
    640a:	82 60       	ori	r24, 0x02	; 2
    640c:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    6410:	9f 91       	pop	r25
    6412:	8f 91       	pop	r24
    6414:	0f 90       	pop	r0
    6416:	0f be       	out	0x3f, r0	; 63
    6418:	0f 90       	pop	r0
    641a:	1f 90       	pop	r1
    641c:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    641e:	10 92 27 02 	sts	0x0227, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    6422:	8c e0       	ldi	r24, 0x0C	; 12
    6424:	80 93 26 02 	sts	0x0226, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    6428:	80 91 90 00 	lds	r24, 0x0090
    642c:	8f 77       	andi	r24, 0x7F	; 127
    642e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    6432:	80 91 71 00 	lds	r24, 0x0071
    6436:	8d 7f       	andi	r24, 0xFD	; 253
    6438:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    643c:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    643e:	80 91 90 00 	lds	r24, 0x0090
    6442:	80 62       	ori	r24, 0x20	; 32
    6444:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    6448:	80 91 71 00 	lds	r24, 0x0071
    644c:	84 60       	ori	r24, 0x04	; 4
    644e:	80 93 71 00 	sts	0x0071, r24
    6452:	ba cf       	rjmp	.-140    	; 0x63c8 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    6454:	81 e0       	ldi	r24, 0x01	; 1
    6456:	80 93 27 02 	sts	0x0227, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    645a:	8d e0       	ldi	r24, 0x0D	; 13
    645c:	80 93 26 02 	sts	0x0226, r24
    6460:	a0 cf       	rjmp	.-192    	; 0x63a2 <__vector_35+0x5a>

00006462 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    6462:	1f 92       	push	r1
    6464:	0f 92       	push	r0
    6466:	0f b6       	in	r0, 0x3f	; 63
    6468:	0f 92       	push	r0
    646a:	11 24       	eor	r1, r1
    646c:	8f 93       	push	r24
    646e:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    6470:	81 e0       	ldi	r24, 0x01	; 1
    6472:	80 93 27 02 	sts	0x0227, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    6476:	9c e0       	ldi	r25, 0x0C	; 12
    6478:	90 93 26 02 	sts	0x0226, r25

	firstSampleRight = 1;
    647c:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    6480:	9f 91       	pop	r25
    6482:	8f 91       	pop	r24
    6484:	0f 90       	pop	r0
    6486:	0f be       	out	0x3f, r0	; 63
    6488:	0f 90       	pop	r0
    648a:	1f 90       	pop	r1
    648c:	18 95       	reti

0000648e <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    648e:	1f 92       	push	r1
    6490:	0f 92       	push	r0
    6492:	0f b6       	in	r0, 0x3f	; 63
    6494:	0f 92       	push	r0
    6496:	11 24       	eor	r1, r1
    6498:	8f 93       	push	r24
    649a:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    649c:	81 e0       	ldi	r24, 0x01	; 1
    649e:	80 93 27 02 	sts	0x0227, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    64a2:	9d e0       	ldi	r25, 0x0D	; 13
    64a4:	90 93 26 02 	sts	0x0226, r25

	firstSampleRight = 1;
    64a8:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    64ac:	9f 91       	pop	r25
    64ae:	8f 91       	pop	r24
    64b0:	0f 90       	pop	r0
    64b2:	0f be       	out	0x3f, r0	; 63
    64b4:	0f 90       	pop	r0
    64b6:	1f 90       	pop	r1
    64b8:	18 95       	reti

000064ba <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    64ba:	80 91 94 00 	lds	r24, 0x0094
    64be:	90 91 95 00 	lds	r25, 0x0095
    64c2:	0e 94 8d 40 	call	0x811a	; 0x811a <srand>

}
    64c6:	08 95       	ret

000064c8 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    64c8:	2f 92       	push	r2
    64ca:	3f 92       	push	r3
    64cc:	4f 92       	push	r4
    64ce:	5f 92       	push	r5
    64d0:	6f 92       	push	r6
    64d2:	7f 92       	push	r7
    64d4:	8f 92       	push	r8
    64d6:	9f 92       	push	r9
    64d8:	af 92       	push	r10
    64da:	bf 92       	push	r11
    64dc:	cf 92       	push	r12
    64de:	df 92       	push	r13
    64e0:	ef 92       	push	r14
    64e2:	ff 92       	push	r15
    64e4:	0f 93       	push	r16
    64e6:	1f 93       	push	r17
    64e8:	df 93       	push	r29
    64ea:	cf 93       	push	r28
    64ec:	cd b7       	in	r28, 0x3d	; 61
    64ee:	de b7       	in	r29, 0x3e	; 62
    64f0:	28 97       	sbiw	r28, 0x08	; 8
    64f2:	0f b6       	in	r0, 0x3f	; 63
    64f4:	f8 94       	cli
    64f6:	de bf       	out	0x3e, r29	; 62
    64f8:	0f be       	out	0x3f, r0	; 63
    64fa:	cd bf       	out	0x3d, r28	; 61
    64fc:	2c 01       	movw	r4, r24
    64fe:	7a 83       	std	Y+2, r23	; 0x02
    6500:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    6502:	fc 01       	movw	r30, r24
    6504:	01 90       	ld	r0, Z+
    6506:	f0 81       	ld	r31, Z
    6508:	e0 2d       	mov	r30, r0
    650a:	fc 83       	std	Y+4, r31	; 0x04
    650c:	eb 83       	std	Y+3, r30	; 0x03
    650e:	fb 01       	movw	r30, r22
    6510:	01 90       	ld	r0, Z+
    6512:	f0 81       	ld	r31, Z
    6514:	e0 2d       	mov	r30, r0
    6516:	fe 83       	std	Y+6, r31	; 0x06
    6518:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    651a:	60 91 c1 02 	lds	r22, 0x02C1
    651e:	70 91 c2 02 	lds	r23, 0x02C2
    6522:	65 30       	cpi	r22, 0x05	; 5
    6524:	71 05       	cpc	r23, r1
    6526:	34 f4       	brge	.+12     	; 0x6534 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    6528:	10 92 c2 02 	sts	0x02C2, r1
    652c:	10 92 c1 02 	sts	0x02C1, r1
    6530:	60 e0       	ldi	r22, 0x00	; 0
    6532:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6534:	40 91 c3 02 	lds	r20, 0x02C3
    6538:	50 91 c4 02 	lds	r21, 0x02C4
    653c:	45 30       	cpi	r20, 0x05	; 5
    653e:	51 05       	cpc	r21, r1
    6540:	34 f4       	brge	.+12     	; 0x654e <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    6542:	10 92 c4 02 	sts	0x02C4, r1
    6546:	10 92 c3 02 	sts	0x02C3, r1
    654a:	40 e0       	ldi	r20, 0x00	; 0
    654c:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    654e:	80 91 c5 02 	lds	r24, 0x02C5
    6552:	90 91 c6 02 	lds	r25, 0x02C6
    6556:	85 30       	cpi	r24, 0x05	; 5
    6558:	91 05       	cpc	r25, r1
    655a:	24 f4       	brge	.+8      	; 0x6564 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    655c:	10 92 c6 02 	sts	0x02C6, r1
    6560:	10 92 c5 02 	sts	0x02C5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6564:	00 91 c7 02 	lds	r16, 0x02C7
    6568:	10 91 c8 02 	lds	r17, 0x02C8
    656c:	05 30       	cpi	r16, 0x05	; 5
    656e:	11 05       	cpc	r17, r1
    6570:	34 f4       	brge	.+12     	; 0x657e <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    6572:	10 92 c8 02 	sts	0x02C8, r1
    6576:	10 92 c7 02 	sts	0x02C7, r1
    657a:	00 e0       	ldi	r16, 0x00	; 0
    657c:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    657e:	60 90 c9 02 	lds	r6, 0x02C9
    6582:	70 90 ca 02 	lds	r7, 0x02CA
    6586:	f5 e0       	ldi	r31, 0x05	; 5
    6588:	6f 16       	cp	r6, r31
    658a:	71 04       	cpc	r7, r1
    658c:	34 f4       	brge	.+12     	; 0x659a <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    658e:	10 92 ca 02 	sts	0x02CA, r1
    6592:	10 92 c9 02 	sts	0x02C9, r1
    6596:	66 24       	eor	r6, r6
    6598:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    659a:	20 91 cb 02 	lds	r18, 0x02CB
    659e:	30 91 cc 02 	lds	r19, 0x02CC
    65a2:	25 30       	cpi	r18, 0x05	; 5
    65a4:	31 05       	cpc	r19, r1
    65a6:	34 f4       	brge	.+12     	; 0x65b4 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    65a8:	10 92 cc 02 	sts	0x02CC, r1
    65ac:	10 92 cb 02 	sts	0x02CB, r1
    65b0:	20 e0       	ldi	r18, 0x00	; 0
    65b2:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    65b4:	80 91 cd 02 	lds	r24, 0x02CD
    65b8:	90 91 ce 02 	lds	r25, 0x02CE
    65bc:	85 30       	cpi	r24, 0x05	; 5
    65be:	91 05       	cpc	r25, r1
    65c0:	24 f4       	brge	.+8      	; 0x65ca <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    65c2:	10 92 ce 02 	sts	0x02CE, r1
    65c6:	10 92 cd 02 	sts	0x02CD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    65ca:	80 91 cf 02 	lds	r24, 0x02CF
    65ce:	90 91 d0 02 	lds	r25, 0x02D0
    65d2:	85 30       	cpi	r24, 0x05	; 5
    65d4:	91 05       	cpc	r25, r1
    65d6:	34 f4       	brge	.+12     	; 0x65e4 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    65d8:	10 92 d0 02 	sts	0x02D0, r1
    65dc:	10 92 cf 02 	sts	0x02CF, r1
    65e0:	80 e0       	ldi	r24, 0x00	; 0
    65e2:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    65e4:	ee 24       	eor	r14, r14
    65e6:	ff 24       	eor	r15, r15
    65e8:	e6 1a       	sub	r14, r22
    65ea:	f7 0a       	sbc	r15, r23
    65ec:	5a 01       	movw	r10, r20
    65ee:	b5 94       	asr	r11
    65f0:	a7 94       	ror	r10
    65f2:	15 95       	asr	r17
    65f4:	07 95       	ror	r16
    65f6:	69 01       	movw	r12, r18
    65f8:	d5 94       	asr	r13
    65fa:	c7 94       	ror	r12
    65fc:	4c 01       	movw	r8, r24
    65fe:	95 94       	asr	r9
    6600:	87 94       	ror	r8
    6602:	0e 94 88 40 	call	0x8110	; 0x8110 <rand>
    6606:	93 01       	movw	r18, r6
    6608:	2e 51       	subi	r18, 0x1E	; 30
    660a:	30 40       	sbci	r19, 0x00	; 0
    660c:	2e 0d       	add	r18, r14
    660e:	3f 1d       	adc	r19, r15
    6610:	20 0f       	add	r18, r16
    6612:	31 1f       	adc	r19, r17
    6614:	2c 0d       	add	r18, r12
    6616:	3d 1d       	adc	r19, r13
    6618:	2a 19       	sub	r18, r10
    661a:	3b 09       	sbc	r19, r11
    661c:	28 19       	sub	r18, r8
    661e:	39 09       	sbc	r19, r9
    6620:	1c e3       	ldi	r17, 0x3C	; 60
    6622:	21 2e       	mov	r2, r17
    6624:	31 2c       	mov	r3, r1
    6626:	b1 01       	movw	r22, r2
    6628:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
    662c:	28 0f       	add	r18, r24
    662e:	39 1f       	adc	r19, r25
    6630:	38 87       	std	Y+8, r19	; 0x08
    6632:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    6634:	e0 90 c3 02 	lds	r14, 0x02C3
    6638:	f0 90 c4 02 	lds	r15, 0x02C4
    663c:	f5 94       	asr	r15
    663e:	e7 94       	ror	r14
    6640:	00 91 c5 02 	lds	r16, 0x02C5
    6644:	10 91 c6 02 	lds	r17, 0x02C6
    6648:	15 95       	asr	r17
    664a:	07 95       	ror	r16
    664c:	15 95       	asr	r17
    664e:	07 95       	ror	r16
    6650:	c0 90 c7 02 	lds	r12, 0x02C7
    6654:	d0 90 c8 02 	lds	r13, 0x02C8
    6658:	d5 94       	asr	r13
    665a:	c7 94       	ror	r12
    665c:	a0 90 cb 02 	lds	r10, 0x02CB
    6660:	b0 90 cc 02 	lds	r11, 0x02CC
    6664:	b5 94       	asr	r11
    6666:	a7 94       	ror	r10
    6668:	60 90 cd 02 	lds	r6, 0x02CD
    666c:	70 90 ce 02 	lds	r7, 0x02CE
    6670:	75 94       	asr	r7
    6672:	67 94       	ror	r6
    6674:	75 94       	asr	r7
    6676:	67 94       	ror	r6
    6678:	80 90 cf 02 	lds	r8, 0x02CF
    667c:	90 90 d0 02 	lds	r9, 0x02D0
    6680:	95 94       	asr	r9
    6682:	87 94       	ror	r8
    6684:	0e 94 88 40 	call	0x8110	; 0x8110 <rand>
    6688:	97 01       	movw	r18, r14
    668a:	20 0f       	add	r18, r16
    668c:	31 1f       	adc	r19, r17
    668e:	2e 51       	subi	r18, 0x1E	; 30
    6690:	30 40       	sbci	r19, 0x00	; 0
    6692:	2c 0d       	add	r18, r12
    6694:	3d 1d       	adc	r19, r13
    6696:	2a 19       	sub	r18, r10
    6698:	3b 09       	sbc	r19, r11
    669a:	28 19       	sub	r18, r8
    669c:	39 09       	sbc	r19, r9
    669e:	26 19       	sub	r18, r6
    66a0:	37 09       	sbc	r19, r7
    66a2:	b1 01       	movw	r22, r2
    66a4:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <__divmodhi4>
    66a8:	28 0f       	add	r18, r24
    66aa:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    66ac:	8b 81       	ldd	r24, Y+3	; 0x03
    66ae:	9c 81       	ldd	r25, Y+4	; 0x04
    66b0:	97 fd       	sbrc	r25, 7
    66b2:	97 c0       	rjmp	.+302    	; 0x67e2 <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    66b4:	5c 01       	movw	r10, r24
    66b6:	cc 24       	eor	r12, r12
    66b8:	b7 fc       	sbrc	r11, 7
    66ba:	c0 94       	com	r12
    66bc:	dc 2c       	mov	r13, r12
    66be:	ef 81       	ldd	r30, Y+7	; 0x07
    66c0:	f8 85       	ldd	r31, Y+8	; 0x08
    66c2:	3f 01       	movw	r6, r30
    66c4:	88 24       	eor	r8, r8
    66c6:	77 fc       	sbrc	r7, 7
    66c8:	80 94       	com	r8
    66ca:	98 2c       	mov	r9, r8
    66cc:	79 01       	movw	r14, r18
    66ce:	00 27       	eor	r16, r16
    66d0:	f7 fc       	sbrc	r15, 7
    66d2:	00 95       	com	r16
    66d4:	10 2f       	mov	r17, r16
    66d6:	c4 01       	movw	r24, r8
    66d8:	b3 01       	movw	r22, r6
    66da:	6e 19       	sub	r22, r14
    66dc:	7f 09       	sbc	r23, r15
    66de:	80 0b       	sbc	r24, r16
    66e0:	91 0b       	sbc	r25, r17
    66e2:	a6 01       	movw	r20, r12
    66e4:	95 01       	movw	r18, r10
    66e6:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <__mulsi3>
    66ea:	56 e0       	ldi	r21, 0x06	; 6
    66ec:	95 95       	asr	r25
    66ee:	87 95       	ror	r24
    66f0:	77 95       	ror	r23
    66f2:	67 95       	ror	r22
    66f4:	5a 95       	dec	r21
    66f6:	d1 f7       	brne	.-12     	; 0x66ec <obstacleAvoidance+0x224>
    66f8:	6a 0d       	add	r22, r10
    66fa:	7b 1d       	adc	r23, r11
    66fc:	8c 1d       	adc	r24, r12
    66fe:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    6700:	f2 01       	movw	r30, r4
    6702:	71 83       	std	Z+1, r23	; 0x01
    6704:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    6706:	2d 81       	ldd	r18, Y+5	; 0x05
    6708:	3e 81       	ldd	r19, Y+6	; 0x06
    670a:	37 fd       	sbrc	r19, 7
    670c:	97 c0       	rjmp	.+302    	; 0x683c <obstacleAvoidance+0x374>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    670e:	59 01       	movw	r10, r18
    6710:	cc 24       	eor	r12, r12
    6712:	b7 fc       	sbrc	r11, 7
    6714:	c0 94       	com	r12
    6716:	dc 2c       	mov	r13, r12
    6718:	c8 01       	movw	r24, r16
    671a:	b7 01       	movw	r22, r14
    671c:	66 0d       	add	r22, r6
    671e:	77 1d       	adc	r23, r7
    6720:	88 1d       	adc	r24, r8
    6722:	99 1d       	adc	r25, r9
    6724:	a6 01       	movw	r20, r12
    6726:	95 01       	movw	r18, r10
    6728:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <__mulsi3>
    672c:	36 e0       	ldi	r19, 0x06	; 6
    672e:	95 95       	asr	r25
    6730:	87 95       	ror	r24
    6732:	77 95       	ror	r23
    6734:	67 95       	ror	r22
    6736:	3a 95       	dec	r19
    6738:	d1 f7       	brne	.-12     	; 0x672e <obstacleAvoidance+0x266>
    673a:	6a 0d       	add	r22, r10
    673c:	7b 1d       	adc	r23, r11
    673e:	8c 1d       	adc	r24, r12
    6740:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    6742:	9b 01       	movw	r18, r22
    6744:	e9 81       	ldd	r30, Y+1	; 0x01
    6746:	fa 81       	ldd	r31, Y+2	; 0x02
    6748:	71 83       	std	Z+1, r23	; 0x01
    674a:	60 83       	st	Z, r22
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    674c:	f2 e0       	ldi	r31, 0x02	; 2
    674e:	21 30       	cpi	r18, 0x01	; 1
    6750:	3f 07       	cpc	r19, r31
    6752:	44 f0       	brlt	.+16     	; 0x6764 <obstacleAvoidance+0x29c>
    6754:	80 e0       	ldi	r24, 0x00	; 0
    6756:	92 e0       	ldi	r25, 0x02	; 2
    6758:	e9 81       	ldd	r30, Y+1	; 0x01
    675a:	fa 81       	ldd	r31, Y+2	; 0x02
    675c:	91 83       	std	Z+1, r25	; 0x01
    675e:	80 83       	st	Z, r24
    6760:	20 e0       	ldi	r18, 0x00	; 0
    6762:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    6764:	f2 01       	movw	r30, r4
    6766:	80 81       	ld	r24, Z
    6768:	91 81       	ldd	r25, Z+1	; 0x01
    676a:	f2 e0       	ldi	r31, 0x02	; 2
    676c:	81 30       	cpi	r24, 0x01	; 1
    676e:	9f 07       	cpc	r25, r31
    6770:	4c f0       	brlt	.+18     	; 0x6784 <obstacleAvoidance+0x2bc>
    6772:	80 e0       	ldi	r24, 0x00	; 0
    6774:	92 e0       	ldi	r25, 0x02	; 2
    6776:	f2 01       	movw	r30, r4
    6778:	91 83       	std	Z+1, r25	; 0x01
    677a:	80 83       	st	Z, r24
    677c:	e9 81       	ldd	r30, Y+1	; 0x01
    677e:	fa 81       	ldd	r31, Y+2	; 0x02
    6780:	20 81       	ld	r18, Z
    6782:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    6784:	fe ef       	ldi	r31, 0xFE	; 254
    6786:	20 30       	cpi	r18, 0x00	; 0
    6788:	3f 07       	cpc	r19, r31
    678a:	4c f4       	brge	.+18     	; 0x679e <obstacleAvoidance+0x2d6>
    678c:	80 e0       	ldi	r24, 0x00	; 0
    678e:	9e ef       	ldi	r25, 0xFE	; 254
    6790:	e9 81       	ldd	r30, Y+1	; 0x01
    6792:	fa 81       	ldd	r31, Y+2	; 0x02
    6794:	91 83       	std	Z+1, r25	; 0x01
    6796:	80 83       	st	Z, r24
    6798:	f2 01       	movw	r30, r4
    679a:	80 81       	ld	r24, Z
    679c:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    679e:	fe ef       	ldi	r31, 0xFE	; 254
    67a0:	80 30       	cpi	r24, 0x00	; 0
    67a2:	9f 07       	cpc	r25, r31
    67a4:	2c f4       	brge	.+10     	; 0x67b0 <obstacleAvoidance+0x2e8>
    67a6:	80 e0       	ldi	r24, 0x00	; 0
    67a8:	9e ef       	ldi	r25, 0xFE	; 254
    67aa:	f2 01       	movw	r30, r4
    67ac:	91 83       	std	Z+1, r25	; 0x01
    67ae:	80 83       	st	Z, r24

}
    67b0:	28 96       	adiw	r28, 0x08	; 8
    67b2:	0f b6       	in	r0, 0x3f	; 63
    67b4:	f8 94       	cli
    67b6:	de bf       	out	0x3e, r29	; 62
    67b8:	0f be       	out	0x3f, r0	; 63
    67ba:	cd bf       	out	0x3d, r28	; 61
    67bc:	cf 91       	pop	r28
    67be:	df 91       	pop	r29
    67c0:	1f 91       	pop	r17
    67c2:	0f 91       	pop	r16
    67c4:	ff 90       	pop	r15
    67c6:	ef 90       	pop	r14
    67c8:	df 90       	pop	r13
    67ca:	cf 90       	pop	r12
    67cc:	bf 90       	pop	r11
    67ce:	af 90       	pop	r10
    67d0:	9f 90       	pop	r9
    67d2:	8f 90       	pop	r8
    67d4:	7f 90       	pop	r7
    67d6:	6f 90       	pop	r6
    67d8:	5f 90       	pop	r5
    67da:	4f 90       	pop	r4
    67dc:	3f 90       	pop	r3
    67de:	2f 90       	pop	r2
    67e0:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    67e2:	5c 01       	movw	r10, r24
    67e4:	cc 24       	eor	r12, r12
    67e6:	b7 fc       	sbrc	r11, 7
    67e8:	c0 94       	com	r12
    67ea:	dc 2c       	mov	r13, r12
    67ec:	ef 81       	ldd	r30, Y+7	; 0x07
    67ee:	f8 85       	ldd	r31, Y+8	; 0x08
    67f0:	3f 01       	movw	r6, r30
    67f2:	88 24       	eor	r8, r8
    67f4:	77 fc       	sbrc	r7, 7
    67f6:	80 94       	com	r8
    67f8:	98 2c       	mov	r9, r8
    67fa:	79 01       	movw	r14, r18
    67fc:	00 27       	eor	r16, r16
    67fe:	f7 fc       	sbrc	r15, 7
    6800:	00 95       	com	r16
    6802:	10 2f       	mov	r17, r16
    6804:	c8 01       	movw	r24, r16
    6806:	b7 01       	movw	r22, r14
    6808:	66 0d       	add	r22, r6
    680a:	77 1d       	adc	r23, r7
    680c:	88 1d       	adc	r24, r8
    680e:	99 1d       	adc	r25, r9
    6810:	a6 01       	movw	r20, r12
    6812:	95 01       	movw	r18, r10
    6814:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <__mulsi3>
    6818:	46 e0       	ldi	r20, 0x06	; 6
    681a:	95 95       	asr	r25
    681c:	87 95       	ror	r24
    681e:	77 95       	ror	r23
    6820:	67 95       	ror	r22
    6822:	4a 95       	dec	r20
    6824:	d1 f7       	brne	.-12     	; 0x681a <obstacleAvoidance+0x352>
    6826:	a6 1a       	sub	r10, r22
    6828:	b7 0a       	sbc	r11, r23
    682a:	c8 0a       	sbc	r12, r24
    682c:	d9 0a       	sbc	r13, r25
		*pwmLeft = (signed int)res;
    682e:	f2 01       	movw	r30, r4
    6830:	b1 82       	std	Z+1, r11	; 0x01
    6832:	a0 82       	st	Z, r10
	}
	if(desR >=0) {
    6834:	2d 81       	ldd	r18, Y+5	; 0x05
    6836:	3e 81       	ldd	r19, Y+6	; 0x06
    6838:	37 ff       	sbrs	r19, 7
    683a:	69 cf       	rjmp	.-302    	; 0x670e <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    683c:	59 01       	movw	r10, r18
    683e:	cc 24       	eor	r12, r12
    6840:	b7 fc       	sbrc	r11, 7
    6842:	c0 94       	com	r12
    6844:	dc 2c       	mov	r13, r12
    6846:	c4 01       	movw	r24, r8
    6848:	b3 01       	movw	r22, r6
    684a:	6e 19       	sub	r22, r14
    684c:	7f 09       	sbc	r23, r15
    684e:	80 0b       	sbc	r24, r16
    6850:	91 0b       	sbc	r25, r17
    6852:	a6 01       	movw	r20, r12
    6854:	95 01       	movw	r18, r10
    6856:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <__mulsi3>
    685a:	26 e0       	ldi	r18, 0x06	; 6
    685c:	95 95       	asr	r25
    685e:	87 95       	ror	r24
    6860:	77 95       	ror	r23
    6862:	67 95       	ror	r22
    6864:	2a 95       	dec	r18
    6866:	d1 f7       	brne	.-12     	; 0x685c <obstacleAvoidance+0x394>
    6868:	a6 1a       	sub	r10, r22
    686a:	b7 0a       	sbc	r11, r23
    686c:	c8 0a       	sbc	r12, r24
    686e:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    6870:	95 01       	movw	r18, r10
    6872:	e9 81       	ldd	r30, Y+1	; 0x01
    6874:	fa 81       	ldd	r31, Y+2	; 0x02
    6876:	b1 82       	std	Z+1, r11	; 0x01
    6878:	a0 82       	st	Z, r10
    687a:	68 cf       	rjmp	.-304    	; 0x674c <obstacleAvoidance+0x284>

0000687c <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    687c:	80 91 69 02 	lds	r24, 0x0269
    6880:	90 91 6a 02 	lds	r25, 0x026A
    6884:	21 e0       	ldi	r18, 0x01	; 1
    6886:	84 3a       	cpi	r24, 0xA4	; 164
    6888:	92 07       	cpc	r25, r18
    688a:	d4 f0       	brlt	.+52     	; 0x68c0 <cliffDetected+0x44>
    688c:	80 91 6b 02 	lds	r24, 0x026B
    6890:	90 91 6c 02 	lds	r25, 0x026C
    6894:	21 e0       	ldi	r18, 0x01	; 1
    6896:	84 3a       	cpi	r24, 0xA4	; 164
    6898:	92 07       	cpc	r25, r18
    689a:	94 f0       	brlt	.+36     	; 0x68c0 <cliffDetected+0x44>
    689c:	80 91 6d 02 	lds	r24, 0x026D
    68a0:	90 91 6e 02 	lds	r25, 0x026E
    68a4:	21 e0       	ldi	r18, 0x01	; 1
    68a6:	84 3a       	cpi	r24, 0xA4	; 164
    68a8:	92 07       	cpc	r25, r18
    68aa:	74 f0       	brlt	.+28     	; 0x68c8 <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    68ac:	81 e0       	ldi	r24, 0x01	; 1
    68ae:	20 91 6f 02 	lds	r18, 0x026F
    68b2:	30 91 70 02 	lds	r19, 0x0270
    68b6:	91 e0       	ldi	r25, 0x01	; 1
    68b8:	24 3a       	cpi	r18, 0xA4	; 164
    68ba:	39 07       	cpc	r19, r25
    68bc:	1c f4       	brge	.+6      	; 0x68c4 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    68be:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    68c0:	81 e0       	ldi	r24, 0x01	; 1
    68c2:	08 95       	ret
    68c4:	80 e0       	ldi	r24, 0x00	; 0
    68c6:	08 95       	ret
    68c8:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    68ca:	08 95       	ret

000068cc <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    68cc:	81 e0       	ldi	r24, 0x01	; 1
    68ce:	80 93 64 04 	sts	0x0464, r24
}
    68d2:	08 95       	ret

000068d4 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    68d4:	10 92 64 04 	sts	0x0464, r1
}
    68d8:	08 95       	ret

000068da <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    68da:	81 e0       	ldi	r24, 0x01	; 1
    68dc:	80 93 65 04 	sts	0x0465, r24
}
    68e0:	08 95       	ret

000068e2 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    68e2:	10 92 65 04 	sts	0x0465, r1
}
    68e6:	08 95       	ret

000068e8 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    68e8:	a0 e8       	ldi	r26, 0x80	; 128
    68ea:	b0 e0       	ldi	r27, 0x00	; 0
    68ec:	1c 92       	st	X, r1
	TCCR1B = 0;
    68ee:	e1 e8       	ldi	r30, 0x81	; 129
    68f0:	f0 e0       	ldi	r31, 0x00	; 0
    68f2:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    68f4:	8c 91       	ld	r24, X
    68f6:	89 6a       	ori	r24, 0xA9	; 169
    68f8:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    68fa:	80 81       	ld	r24, Z
    68fc:	89 60       	ori	r24, 0x09	; 9
    68fe:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    6900:	80 91 0c 02 	lds	r24, 0x020C
    6904:	90 e0       	ldi	r25, 0x00	; 0
    6906:	90 93 89 00 	sts	0x0089, r25
    690a:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    690e:	80 91 0d 02 	lds	r24, 0x020D
    6912:	90 e0       	ldi	r25, 0x00	; 0
    6914:	90 93 8b 00 	sts	0x008B, r25
    6918:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    691c:	80 91 0e 02 	lds	r24, 0x020E
    6920:	90 e0       	ldi	r25, 0x00	; 0
    6922:	90 93 8d 00 	sts	0x008D, r25
    6926:	80 93 8c 00 	sts	0x008C, r24

}
    692a:	08 95       	ret

0000692c <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    692c:	81 e0       	ldi	r24, 0x01	; 1
    692e:	90 91 17 03 	lds	r25, 0x0317
    6932:	89 1b       	sub	r24, r25
    6934:	80 93 17 03 	sts	0x0317, r24

	if(blinkState) {
    6938:	88 23       	and	r24, r24
    693a:	39 f4       	brne	.+14     	; 0x694a <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    693c:	80 91 80 00 	lds	r24, 0x0080
    6940:	87 7f       	andi	r24, 0xF7	; 247
    6942:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    6946:	2f 98       	cbi	0x05, 7	; 5
    6948:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    694a:	80 91 80 00 	lds	r24, 0x0080
    694e:	88 60       	ori	r24, 0x08	; 8
    6950:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    6954:	8f ef       	ldi	r24, 0xFF	; 255
    6956:	90 e0       	ldi	r25, 0x00	; 0
    6958:	90 93 8d 00 	sts	0x008D, r25
    695c:	80 93 8c 00 	sts	0x008C, r24
    6960:	08 95       	ret

00006962 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    6962:	88 23       	and	r24, r24
    6964:	59 f0       	breq	.+22     	; 0x697c <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    6966:	90 91 80 00 	lds	r25, 0x0080
    696a:	90 68       	ori	r25, 0x80	; 128
    696c:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    6970:	90 e0       	ldi	r25, 0x00	; 0
    6972:	90 93 89 00 	sts	0x0089, r25
    6976:	80 93 88 00 	sts	0x0088, r24
    697a:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    697c:	80 91 80 00 	lds	r24, 0x0080
    6980:	8f 77       	andi	r24, 0x7F	; 127
    6982:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    6986:	2d 98       	cbi	0x05, 5	; 5
    6988:	08 95       	ret

0000698a <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    698a:	88 23       	and	r24, r24
    698c:	59 f0       	breq	.+22     	; 0x69a4 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    698e:	90 91 80 00 	lds	r25, 0x0080
    6992:	90 62       	ori	r25, 0x20	; 32
    6994:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    6998:	90 e0       	ldi	r25, 0x00	; 0
    699a:	90 93 8b 00 	sts	0x008B, r25
    699e:	80 93 8a 00 	sts	0x008A, r24
    69a2:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    69a4:	80 91 80 00 	lds	r24, 0x0080
    69a8:	8f 7d       	andi	r24, 0xDF	; 223
    69aa:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    69ae:	2e 98       	cbi	0x05, 6	; 5
    69b0:	08 95       	ret

000069b2 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    69b2:	88 23       	and	r24, r24
    69b4:	59 f0       	breq	.+22     	; 0x69cc <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    69b6:	90 91 80 00 	lds	r25, 0x0080
    69ba:	98 60       	ori	r25, 0x08	; 8
    69bc:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    69c0:	90 e0       	ldi	r25, 0x00	; 0
    69c2:	90 93 8d 00 	sts	0x008D, r25
    69c6:	80 93 8c 00 	sts	0x008C, r24
    69ca:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    69cc:	80 91 80 00 	lds	r24, 0x0080
    69d0:	87 7f       	andi	r24, 0xF7	; 247
    69d2:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    69d6:	2f 98       	cbi	0x05, 7	; 5
    69d8:	08 95       	ret

000069da <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    69da:	83 30       	cpi	r24, 0x03	; 3
    69dc:	09 f4       	brne	.+2      	; 0x69e0 <setGreenLed+0x6>
    69de:	5a c0       	rjmp	.+180    	; 0x6a94 <setGreenLed+0xba>
    69e0:	84 30       	cpi	r24, 0x04	; 4
    69e2:	80 f0       	brcs	.+32     	; 0x6a04 <setGreenLed+0x2a>
    69e4:	85 30       	cpi	r24, 0x05	; 5
    69e6:	09 f4       	brne	.+2      	; 0x69ea <setGreenLed+0x10>
    69e8:	41 c0       	rjmp	.+130    	; 0x6a6c <setGreenLed+0x92>
    69ea:	85 30       	cpi	r24, 0x05	; 5
    69ec:	d0 f4       	brcc	.+52     	; 0x6a22 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    69ee:	66 23       	and	r22, r22
    69f0:	09 f4       	brne	.+2      	; 0x69f4 <setGreenLed+0x1a>
    69f2:	68 c0       	rjmp	.+208    	; 0x6ac4 <setGreenLed+0xea>
    69f4:	80 91 0b 01 	lds	r24, 0x010B
    69f8:	8f 7e       	andi	r24, 0xEF	; 239
    69fa:	80 93 0b 01 	sts	0x010B, r24
    69fe:	80 91 0b 01 	lds	r24, 0x010B
    6a02:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6a04:	81 30       	cpi	r24, 0x01	; 1
    6a06:	e1 f1       	breq	.+120    	; 0x6a80 <setGreenLed+0xa6>
    6a08:	82 30       	cpi	r24, 0x02	; 2
    6a0a:	80 f0       	brcs	.+32     	; 0x6a2c <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6a0c:	66 23       	and	r22, r22
    6a0e:	09 f4       	brne	.+2      	; 0x6a12 <setGreenLed+0x38>
    6a10:	46 c0       	rjmp	.+140    	; 0x6a9e <setGreenLed+0xc4>
    6a12:	80 91 0b 01 	lds	r24, 0x010B
    6a16:	8b 7f       	andi	r24, 0xFB	; 251
    6a18:	80 93 0b 01 	sts	0x010B, r24
    6a1c:	80 91 0b 01 	lds	r24, 0x010B
    6a20:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6a22:	86 30       	cpi	r24, 0x06	; 6
    6a24:	c9 f0       	breq	.+50     	; 0x6a58 <setGreenLed+0x7e>
    6a26:	87 30       	cpi	r24, 0x07	; 7
    6a28:	61 f0       	breq	.+24     	; 0x6a42 <setGreenLed+0x68>
    6a2a:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6a2c:	66 23       	and	r22, r22
    6a2e:	09 f4       	brne	.+2      	; 0x6a32 <setGreenLed+0x58>
    6a30:	51 c0       	rjmp	.+162    	; 0x6ad4 <setGreenLed+0xfa>
    6a32:	80 91 0b 01 	lds	r24, 0x010B
    6a36:	8e 7f       	andi	r24, 0xFE	; 254
    6a38:	80 93 0b 01 	sts	0x010B, r24
    6a3c:	80 91 0b 01 	lds	r24, 0x010B
    6a40:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6a42:	66 23       	and	r22, r22
    6a44:	09 f0       	breq	.+2      	; 0x6a48 <setGreenLed+0x6e>
    6a46:	5e c0       	rjmp	.+188    	; 0x6b04 <setGreenLed+0x12a>
    6a48:	80 91 0b 01 	lds	r24, 0x010B
    6a4c:	80 68       	ori	r24, 0x80	; 128
    6a4e:	80 93 0b 01 	sts	0x010B, r24
    6a52:	80 91 0b 01 	lds	r24, 0x010B
    6a56:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6a58:	66 23       	and	r22, r22
    6a5a:	49 f1       	breq	.+82     	; 0x6aae <setGreenLed+0xd4>
    6a5c:	80 91 0b 01 	lds	r24, 0x010B
    6a60:	8f 7b       	andi	r24, 0xBF	; 191
    6a62:	80 93 0b 01 	sts	0x010B, r24
    6a66:	80 91 0b 01 	lds	r24, 0x010B
    6a6a:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6a6c:	66 23       	and	r22, r22
    6a6e:	d1 f1       	breq	.+116    	; 0x6ae4 <setGreenLed+0x10a>
    6a70:	80 91 0b 01 	lds	r24, 0x010B
    6a74:	8f 7d       	andi	r24, 0xDF	; 223
    6a76:	80 93 0b 01 	sts	0x010B, r24
    6a7a:	80 91 0b 01 	lds	r24, 0x010B
    6a7e:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6a80:	66 23       	and	r22, r22
    6a82:	c1 f1       	breq	.+112    	; 0x6af4 <setGreenLed+0x11a>
    6a84:	80 91 0b 01 	lds	r24, 0x010B
    6a88:	8d 7f       	andi	r24, 0xFD	; 253
    6a8a:	80 93 0b 01 	sts	0x010B, r24
    6a8e:	80 91 0b 01 	lds	r24, 0x010B
    6a92:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6a94:	66 23       	and	r22, r22
    6a96:	99 f0       	breq	.+38     	; 0x6abe <setGreenLed+0xe4>
    6a98:	a3 98       	cbi	0x14, 3	; 20
    6a9a:	84 b3       	in	r24, 0x14	; 20
    6a9c:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6a9e:	80 91 0b 01 	lds	r24, 0x010B
    6aa2:	84 60       	ori	r24, 0x04	; 4
    6aa4:	80 93 0b 01 	sts	0x010B, r24
    6aa8:	80 91 0b 01 	lds	r24, 0x010B
    6aac:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6aae:	80 91 0b 01 	lds	r24, 0x010B
    6ab2:	80 64       	ori	r24, 0x40	; 64
    6ab4:	80 93 0b 01 	sts	0x010B, r24
    6ab8:	80 91 0b 01 	lds	r24, 0x010B
    6abc:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6abe:	a3 9a       	sbi	0x14, 3	; 20
    6ac0:	84 b3       	in	r24, 0x14	; 20
    6ac2:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6ac4:	80 91 0b 01 	lds	r24, 0x010B
    6ac8:	80 61       	ori	r24, 0x10	; 16
    6aca:	80 93 0b 01 	sts	0x010B, r24
    6ace:	80 91 0b 01 	lds	r24, 0x010B
    6ad2:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6ad4:	80 91 0b 01 	lds	r24, 0x010B
    6ad8:	81 60       	ori	r24, 0x01	; 1
    6ada:	80 93 0b 01 	sts	0x010B, r24
    6ade:	80 91 0b 01 	lds	r24, 0x010B
    6ae2:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6ae4:	80 91 0b 01 	lds	r24, 0x010B
    6ae8:	80 62       	ori	r24, 0x20	; 32
    6aea:	80 93 0b 01 	sts	0x010B, r24
    6aee:	80 91 0b 01 	lds	r24, 0x010B
    6af2:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6af4:	80 91 0b 01 	lds	r24, 0x010B
    6af8:	82 60       	ori	r24, 0x02	; 2
    6afa:	80 93 0b 01 	sts	0x010B, r24
    6afe:	80 91 0b 01 	lds	r24, 0x010B
    6b02:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6b04:	80 91 0b 01 	lds	r24, 0x010B
    6b08:	8f 77       	andi	r24, 0x7F	; 127
    6b0a:	80 93 0b 01 	sts	0x010B, r24
    6b0e:	80 91 0b 01 	lds	r24, 0x010B
    6b12:	08 95       	ret

00006b14 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    6b14:	eb e0       	ldi	r30, 0x0B	; 11
    6b16:	f1 e0       	ldi	r31, 0x01	; 1
    6b18:	80 81       	ld	r24, Z
    6b1a:	81 60       	ori	r24, 0x01	; 1
    6b1c:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    6b1e:	80 81       	ld	r24, Z
    6b20:	82 60       	ori	r24, 0x02	; 2
    6b22:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    6b24:	80 81       	ld	r24, Z
    6b26:	84 60       	ori	r24, 0x04	; 4
    6b28:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    6b2a:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    6b2c:	80 81       	ld	r24, Z
    6b2e:	80 61       	ori	r24, 0x10	; 16
    6b30:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    6b32:	80 81       	ld	r24, Z
    6b34:	80 62       	ori	r24, 0x20	; 32
    6b36:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    6b38:	80 81       	ld	r24, Z
    6b3a:	80 64       	ori	r24, 0x40	; 64
    6b3c:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    6b3e:	80 81       	ld	r24, Z
    6b40:	80 68       	ori	r24, 0x80	; 128
    6b42:	80 83       	st	Z, r24

}
    6b44:	08 95       	ret

00006b46 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    6b46:	eb e0       	ldi	r30, 0x0B	; 11
    6b48:	f1 e0       	ldi	r31, 0x01	; 1
    6b4a:	80 81       	ld	r24, Z
    6b4c:	8e 7f       	andi	r24, 0xFE	; 254
    6b4e:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    6b50:	80 81       	ld	r24, Z
    6b52:	8d 7f       	andi	r24, 0xFD	; 253
    6b54:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    6b56:	80 81       	ld	r24, Z
    6b58:	8b 7f       	andi	r24, 0xFB	; 251
    6b5a:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    6b5c:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    6b5e:	80 81       	ld	r24, Z
    6b60:	8f 7e       	andi	r24, 0xEF	; 239
    6b62:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    6b64:	80 81       	ld	r24, Z
    6b66:	8f 7d       	andi	r24, 0xDF	; 223
    6b68:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    6b6a:	80 81       	ld	r24, Z
    6b6c:	8f 7b       	andi	r24, 0xBF	; 191
    6b6e:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    6b70:	80 81       	ld	r24, Z
    6b72:	8f 77       	andi	r24, 0x7F	; 127
    6b74:	80 83       	st	Z, r24

}
    6b76:	08 95       	ret

00006b78 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    6b78:	0e 94 17 19 	call	0x322e	; 0x322e <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6b7c:	80 91 14 02 	lds	r24, 0x0214
    6b80:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6b84:	88 23       	and	r24, r24
    6b86:	49 f4       	brne	.+18     	; 0x6b9a <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    6b88:	86 e1       	ldi	r24, 0x16	; 22
    6b8a:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    6b8e:	85 e4       	ldi	r24, 0x45	; 69
    6b90:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6b94:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>
    6b98:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    6b9a:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    6b9e:	86 ea       	ldi	r24, 0xA6	; 166
    6ba0:	90 e0       	ldi	r25, 0x00	; 0
    6ba2:	90 93 15 02 	sts	0x0215, r25
    6ba6:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6baa:	86 ea       	ldi	r24, 0xA6	; 166
    6bac:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6bb0:	88 23       	and	r24, r24
    6bb2:	41 f5       	brne	.+80     	; 0x6c04 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    6bb4:	8d e2       	ldi	r24, 0x2D	; 45
    6bb6:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_write(0x08);	// measurement mode
    6bba:	88 e0       	ldi	r24, 0x08	; 8
    6bbc:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6bc0:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6bc4:	80 91 14 02 	lds	r24, 0x0214
    6bc8:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6bcc:	88 23       	and	r24, r24
    6bce:	d1 f4       	brne	.+52     	; 0x6c04 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    6bd0:	81 e3       	ldi	r24, 0x31	; 49
    6bd2:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    6bd6:	80 e0       	ldi	r24, 0x00	; 0
    6bd8:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6bdc:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6be0:	80 91 14 02 	lds	r24, 0x0214
    6be4:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6be8:	88 23       	and	r24, r24
    6bea:	61 f4       	brne	.+24     	; 0x6c04 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    6bec:	8c e2       	ldi	r24, 0x2C	; 44
    6bee:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    6bf2:	89 e0       	ldi	r24, 0x09	; 9
    6bf4:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6bf8:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    6bfc:	81 e0       	ldi	r24, 0x01	; 1
    6bfe:	80 93 27 04 	sts	0x0427, r24
    6c02:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    6c04:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    6c08:	82 e0       	ldi	r24, 0x02	; 2
    6c0a:	80 93 27 04 	sts	0x0427, r24
    6c0e:	08 95       	ret

00006c10 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6c10:	80 91 14 02 	lds	r24, 0x0214
    6c14:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6c18:	88 23       	and	r24, r24
    6c1a:	51 f4       	brne	.+20     	; 0x6c30 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    6c1c:	86 e1       	ldi	r24, 0x16	; 22
    6c1e:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    6c22:	85 e4       	ldi	r24, 0x45	; 69
    6c24:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6c28:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>
    }

	return 0;				// configuration ok
    6c2c:	80 e0       	ldi	r24, 0x00	; 0

}
    6c2e:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    6c30:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>
		return 1;
    6c34:	81 e0       	ldi	r24, 0x01	; 1
    6c36:	08 95       	ret

00006c38 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6c38:	80 91 14 02 	lds	r24, 0x0214
    6c3c:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6c40:	88 23       	and	r24, r24
    6c42:	31 f5       	brne	.+76     	; 0x6c90 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    6c44:	8d e2       	ldi	r24, 0x2D	; 45
    6c46:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_write(0x08);	// measurement mode
    6c4a:	88 e0       	ldi	r24, 0x08	; 8
    6c4c:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6c50:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6c54:	80 91 14 02 	lds	r24, 0x0214
    6c58:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6c5c:	88 23       	and	r24, r24
    6c5e:	c1 f4       	brne	.+48     	; 0x6c90 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    6c60:	81 e3       	ldi	r24, 0x31	; 49
    6c62:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    6c66:	80 e0       	ldi	r24, 0x00	; 0
    6c68:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6c6c:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6c70:	80 91 14 02 	lds	r24, 0x0214
    6c74:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6c78:	88 23       	and	r24, r24
    6c7a:	51 f4       	brne	.+20     	; 0x6c90 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    6c7c:	8c e2       	ldi	r24, 0x2C	; 44
    6c7e:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    6c82:	89 e0       	ldi	r24, 0x09	; 9
    6c84:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6c88:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>
    }

	return 0;
    6c8c:	80 e0       	ldi	r24, 0x00	; 0

}
    6c8e:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    6c90:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>
		return 1;
    6c94:	81 e0       	ldi	r24, 0x01	; 1
    6c96:	08 95       	ret

00006c98 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    6c98:	ff 92       	push	r15
    6c9a:	0f 93       	push	r16
    6c9c:	1f 93       	push	r17
    6c9e:	df 93       	push	r29
    6ca0:	cf 93       	push	r28
    6ca2:	0f 92       	push	r0
    6ca4:	cd b7       	in	r28, 0x3d	; 61
    6ca6:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    6ca8:	80 91 27 04 	lds	r24, 0x0427
    6cac:	88 23       	and	r24, r24
    6cae:	91 f0       	breq	.+36     	; 0x6cd4 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    6cb0:	81 30       	cpi	r24, 0x01	; 1
    6cb2:	09 f4       	brne	.+2      	; 0x6cb6 <readAccelXY+0x1e>
    6cb4:	88 c0       	rjmp	.+272    	; 0x6dc6 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    6cb6:	10 92 29 04 	sts	0x0429, r1
    6cba:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    6cbe:	10 92 2b 04 	sts	0x042B, r1
    6cc2:	10 92 2a 04 	sts	0x042A, r1

	}

}
    6cc6:	0f 90       	pop	r0
    6cc8:	cf 91       	pop	r28
    6cca:	df 91       	pop	r29
    6ccc:	1f 91       	pop	r17
    6cce:	0f 91       	pop	r16
    6cd0:	ff 90       	pop	r15
    6cd2:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    6cd4:	80 91 14 02 	lds	r24, 0x0214
    6cd8:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    6cdc:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    6cde:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    6ce2:	80 91 14 02 	lds	r24, 0x0214
    6ce6:	8f 5f       	subi	r24, 0xFF	; 255
    6ce8:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    6cec:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    6cf0:	08 2f       	mov	r16, r24
    6cf2:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    6cf6:	f8 2e       	mov	r15, r24
    6cf8:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    6cfc:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    6cfe:	0e 94 b6 19 	call	0x336c	; 0x336c <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    6d02:	89 83       	std	Y+1, r24	; 0x01
    6d04:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    6d08:	90 91 83 05 	lds	r25, 0x0583
    6d0c:	89 81       	ldd	r24, Y+1	; 0x01
    6d0e:	99 23       	and	r25, r25
    6d10:	39 f1       	breq	.+78     	; 0x6d60 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    6d12:	4f 2d       	mov	r20, r15
    6d14:	55 27       	eor	r21, r21
    6d16:	47 fd       	sbrc	r20, 7
    6d18:	50 95       	com	r21
    6d1a:	54 2f       	mov	r21, r20
    6d1c:	44 27       	eor	r20, r20
    6d1e:	60 2f       	mov	r22, r16
    6d20:	77 27       	eor	r23, r23
    6d22:	67 fd       	sbrc	r22, 7
    6d24:	70 95       	com	r23
    6d26:	46 2b       	or	r20, r22
    6d28:	57 2b       	or	r21, r23
    6d2a:	50 93 29 04 	sts	0x0429, r21
    6d2e:	40 93 28 04 	sts	0x0428, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    6d32:	28 2f       	mov	r18, r24
    6d34:	33 27       	eor	r19, r19
    6d36:	27 fd       	sbrc	r18, 7
    6d38:	30 95       	com	r19
    6d3a:	32 2f       	mov	r19, r18
    6d3c:	22 27       	eor	r18, r18
    6d3e:	81 2f       	mov	r24, r17
    6d40:	99 27       	eor	r25, r25
    6d42:	87 fd       	sbrc	r24, 7
    6d44:	90 95       	com	r25
    6d46:	28 2b       	or	r18, r24
    6d48:	39 2b       	or	r19, r25
    6d4a:	30 93 2b 04 	sts	0x042B, r19
    6d4e:	20 93 2a 04 	sts	0x042A, r18
		accX = 0;
		accY = 0;

	}

}
    6d52:	0f 90       	pop	r0
    6d54:	cf 91       	pop	r28
    6d56:	df 91       	pop	r29
    6d58:	1f 91       	pop	r17
    6d5a:	0f 91       	pop	r16
    6d5c:	ff 90       	pop	r15
    6d5e:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    6d60:	4f 2d       	mov	r20, r15
    6d62:	55 27       	eor	r21, r21
    6d64:	47 fd       	sbrc	r20, 7
    6d66:	50 95       	com	r21
    6d68:	54 2f       	mov	r21, r20
    6d6a:	44 27       	eor	r20, r20
    6d6c:	60 2f       	mov	r22, r16
    6d6e:	77 27       	eor	r23, r23
    6d70:	67 fd       	sbrc	r22, 7
    6d72:	70 95       	com	r23
    6d74:	46 2b       	or	r20, r22
    6d76:	57 2b       	or	r21, r23
    6d78:	60 91 2e 04 	lds	r22, 0x042E
    6d7c:	70 91 2f 04 	lds	r23, 0x042F
    6d80:	46 1b       	sub	r20, r22
    6d82:	57 0b       	sbc	r21, r23
    6d84:	50 93 29 04 	sts	0x0429, r21
    6d88:	40 93 28 04 	sts	0x0428, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    6d8c:	28 2f       	mov	r18, r24
    6d8e:	33 27       	eor	r19, r19
    6d90:	27 fd       	sbrc	r18, 7
    6d92:	30 95       	com	r19
    6d94:	32 2f       	mov	r19, r18
    6d96:	22 27       	eor	r18, r18
    6d98:	81 2f       	mov	r24, r17
    6d9a:	99 27       	eor	r25, r25
    6d9c:	87 fd       	sbrc	r24, 7
    6d9e:	90 95       	com	r25
    6da0:	28 2b       	or	r18, r24
    6da2:	39 2b       	or	r19, r25
    6da4:	80 91 30 04 	lds	r24, 0x0430
    6da8:	90 91 31 04 	lds	r25, 0x0431
    6dac:	28 1b       	sub	r18, r24
    6dae:	39 0b       	sbc	r19, r25
    6db0:	30 93 2b 04 	sts	0x042B, r19
    6db4:	20 93 2a 04 	sts	0x042A, r18
		accX = 0;
		accY = 0;

	}

}
    6db8:	0f 90       	pop	r0
    6dba:	cf 91       	pop	r28
    6dbc:	df 91       	pop	r29
    6dbe:	1f 91       	pop	r17
    6dc0:	0f 91       	pop	r16
    6dc2:	ff 90       	pop	r15
    6dc4:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    6dc6:	80 91 14 02 	lds	r24, 0x0214
    6dca:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    6dce:	82 e3       	ldi	r24, 0x32	; 50
    6dd0:	86 cf       	rjmp	.-244    	; 0x6cde <readAccelXY+0x46>

00006dd2 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    6dd2:	df 93       	push	r29
    6dd4:	cf 93       	push	r28
    6dd6:	00 d0       	rcall	.+0      	; 0x6dd8 <readAccelXYZ+0x6>
    6dd8:	00 d0       	rcall	.+0      	; 0x6dda <readAccelXYZ+0x8>
    6dda:	cd b7       	in	r28, 0x3d	; 61
    6ddc:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    6dde:	80 91 27 04 	lds	r24, 0x0427
    6de2:	88 23       	and	r24, r24
    6de4:	c1 f0       	breq	.+48     	; 0x6e16 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    6de6:	81 30       	cpi	r24, 0x01	; 1
    6de8:	09 f4       	brne	.+2      	; 0x6dec <readAccelXYZ+0x1a>
    6dea:	ad c0       	rjmp	.+346    	; 0x6f46 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    6dec:	10 92 29 04 	sts	0x0429, r1
    6df0:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    6df4:	10 92 2b 04 	sts	0x042B, r1
    6df8:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    6dfc:	10 92 2d 04 	sts	0x042D, r1
    6e00:	10 92 2c 04 	sts	0x042C, r1

	}

}
    6e04:	26 96       	adiw	r28, 0x06	; 6
    6e06:	0f b6       	in	r0, 0x3f	; 63
    6e08:	f8 94       	cli
    6e0a:	de bf       	out	0x3e, r29	; 62
    6e0c:	0f be       	out	0x3f, r0	; 63
    6e0e:	cd bf       	out	0x3d, r28	; 61
    6e10:	cf 91       	pop	r28
    6e12:	df 91       	pop	r29
    6e14:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    6e16:	80 91 14 02 	lds	r24, 0x0214
    6e1a:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    6e1e:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    6e20:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    6e24:	80 91 14 02 	lds	r24, 0x0214
    6e28:	8f 5f       	subi	r24, 0xFF	; 255
    6e2a:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    6e2e:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    6e32:	89 83       	std	Y+1, r24	; 0x01
    6e34:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    6e38:	8a 83       	std	Y+2, r24	; 0x02
    6e3a:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    6e3e:	8b 83       	std	Y+3, r24	; 0x03
    6e40:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    6e44:	8c 83       	std	Y+4, r24	; 0x04
    6e46:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    6e4a:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    6e4c:	0e 94 b6 19 	call	0x336c	; 0x336c <i2c_readNak>
    6e50:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    6e52:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    6e56:	80 91 83 05 	lds	r24, 0x0583
    6e5a:	88 23       	and	r24, r24
    6e5c:	89 f1       	breq	.+98     	; 0x6ec0 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    6e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    6e60:	99 27       	eor	r25, r25
    6e62:	87 fd       	sbrc	r24, 7
    6e64:	90 95       	com	r25
    6e66:	98 2f       	mov	r25, r24
    6e68:	88 27       	eor	r24, r24
    6e6a:	29 81       	ldd	r18, Y+1	; 0x01
    6e6c:	33 27       	eor	r19, r19
    6e6e:	27 fd       	sbrc	r18, 7
    6e70:	30 95       	com	r19
    6e72:	82 2b       	or	r24, r18
    6e74:	93 2b       	or	r25, r19
    6e76:	90 93 29 04 	sts	0x0429, r25
    6e7a:	80 93 28 04 	sts	0x0428, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    6e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    6e80:	99 27       	eor	r25, r25
    6e82:	87 fd       	sbrc	r24, 7
    6e84:	90 95       	com	r25
    6e86:	98 2f       	mov	r25, r24
    6e88:	88 27       	eor	r24, r24
    6e8a:	2b 81       	ldd	r18, Y+3	; 0x03
    6e8c:	33 27       	eor	r19, r19
    6e8e:	27 fd       	sbrc	r18, 7
    6e90:	30 95       	com	r19
    6e92:	82 2b       	or	r24, r18
    6e94:	93 2b       	or	r25, r19
    6e96:	90 93 2b 04 	sts	0x042B, r25
    6e9a:	80 93 2a 04 	sts	0x042A, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    6e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    6ea0:	99 27       	eor	r25, r25
    6ea2:	87 fd       	sbrc	r24, 7
    6ea4:	90 95       	com	r25
    6ea6:	98 2f       	mov	r25, r24
    6ea8:	88 27       	eor	r24, r24
    6eaa:	2d 81       	ldd	r18, Y+5	; 0x05
    6eac:	33 27       	eor	r19, r19
    6eae:	27 fd       	sbrc	r18, 7
    6eb0:	30 95       	com	r19
    6eb2:	82 2b       	or	r24, r18
    6eb4:	93 2b       	or	r25, r19
    6eb6:	90 93 2d 04 	sts	0x042D, r25
    6eba:	80 93 2c 04 	sts	0x042C, r24
    6ebe:	a2 cf       	rjmp	.-188    	; 0x6e04 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    6ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ec2:	99 27       	eor	r25, r25
    6ec4:	87 fd       	sbrc	r24, 7
    6ec6:	90 95       	com	r25
    6ec8:	98 2f       	mov	r25, r24
    6eca:	88 27       	eor	r24, r24
    6ecc:	29 81       	ldd	r18, Y+1	; 0x01
    6ece:	33 27       	eor	r19, r19
    6ed0:	27 fd       	sbrc	r18, 7
    6ed2:	30 95       	com	r19
    6ed4:	82 2b       	or	r24, r18
    6ed6:	93 2b       	or	r25, r19
    6ed8:	20 91 2e 04 	lds	r18, 0x042E
    6edc:	30 91 2f 04 	lds	r19, 0x042F
    6ee0:	82 1b       	sub	r24, r18
    6ee2:	93 0b       	sbc	r25, r19
    6ee4:	90 93 29 04 	sts	0x0429, r25
    6ee8:	80 93 28 04 	sts	0x0428, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    6eec:	8c 81       	ldd	r24, Y+4	; 0x04
    6eee:	99 27       	eor	r25, r25
    6ef0:	87 fd       	sbrc	r24, 7
    6ef2:	90 95       	com	r25
    6ef4:	98 2f       	mov	r25, r24
    6ef6:	88 27       	eor	r24, r24
    6ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    6efa:	33 27       	eor	r19, r19
    6efc:	27 fd       	sbrc	r18, 7
    6efe:	30 95       	com	r19
    6f00:	82 2b       	or	r24, r18
    6f02:	93 2b       	or	r25, r19
    6f04:	20 91 30 04 	lds	r18, 0x0430
    6f08:	30 91 31 04 	lds	r19, 0x0431
    6f0c:	82 1b       	sub	r24, r18
    6f0e:	93 0b       	sbc	r25, r19
    6f10:	90 93 2b 04 	sts	0x042B, r25
    6f14:	80 93 2a 04 	sts	0x042A, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    6f18:	8e 81       	ldd	r24, Y+6	; 0x06
    6f1a:	99 27       	eor	r25, r25
    6f1c:	87 fd       	sbrc	r24, 7
    6f1e:	90 95       	com	r25
    6f20:	98 2f       	mov	r25, r24
    6f22:	88 27       	eor	r24, r24
    6f24:	2d 81       	ldd	r18, Y+5	; 0x05
    6f26:	33 27       	eor	r19, r19
    6f28:	27 fd       	sbrc	r18, 7
    6f2a:	30 95       	com	r19
    6f2c:	82 2b       	or	r24, r18
    6f2e:	93 2b       	or	r25, r19
    6f30:	20 91 32 04 	lds	r18, 0x0432
    6f34:	30 91 33 04 	lds	r19, 0x0433
    6f38:	82 1b       	sub	r24, r18
    6f3a:	93 0b       	sbc	r25, r19
    6f3c:	90 93 2d 04 	sts	0x042D, r25
    6f40:	80 93 2c 04 	sts	0x042C, r24
    6f44:	5f cf       	rjmp	.-322    	; 0x6e04 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    6f46:	80 91 14 02 	lds	r24, 0x0214
    6f4a:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    6f4e:	82 e3       	ldi	r24, 0x32	; 50
    6f50:	67 cf       	rjmp	.-306    	; 0x6e20 <readAccelXYZ+0x4e>

00006f52 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    6f52:	cf 93       	push	r28
    6f54:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    6f56:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    6f5a:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    6f5e:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    6f62:	80 e0       	ldi	r24, 0x00	; 0
    6f64:	0e 94 b1 34 	call	0x6962	; 0x6962 <updateRedLed>
	updateGreenLed(pwm_green);
    6f68:	80 91 0d 02 	lds	r24, 0x020D
    6f6c:	0e 94 c5 34 	call	0x698a	; 0x698a <updateGreenLed>
	updateBlueLed(pwm_blue);
    6f70:	80 91 0e 02 	lds	r24, 0x020E
    6f74:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <updateBlueLed>

	calibrationCycle = 0;
    6f78:	10 92 4d 04 	sts	0x044D, r1
    6f7c:	10 92 4c 04 	sts	0x044C, r1
	startCalibration = 1;
    6f80:	81 e0       	ldi	r24, 0x01	; 1
    6f82:	80 93 83 05 	sts	0x0583, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    6f86:	c1 e0       	ldi	r28, 0x01	; 1
    6f88:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    6f8a:	0e 94 e9 36 	call	0x6dd2	; 0x6dd2 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    6f8e:	20 91 4c 04 	lds	r18, 0x044C
    6f92:	30 91 4d 04 	lds	r19, 0x044D
    6f96:	21 31       	cpi	r18, 0x11	; 17
    6f98:	31 05       	cpc	r19, r1
    6f9a:	0c f4       	brge	.+2      	; 0x6f9e <calibrateSensors+0x4c>
    6f9c:	35 c1       	rjmp	.+618    	; 0x7208 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    6f9e:	80 91 89 02 	lds	r24, 0x0289
    6fa2:	90 91 8a 02 	lds	r25, 0x028A
    6fa6:	a0 91 8b 02 	lds	r26, 0x028B
    6faa:	b0 91 8c 02 	lds	r27, 0x028C
    6fae:	54 e0       	ldi	r21, 0x04	; 4
    6fb0:	b6 95       	lsr	r27
    6fb2:	a7 95       	ror	r26
    6fb4:	97 95       	ror	r25
    6fb6:	87 95       	ror	r24
    6fb8:	5a 95       	dec	r21
    6fba:	d1 f7       	brne	.-12     	; 0x6fb0 <calibrateSensors+0x5e>
    6fbc:	90 93 72 02 	sts	0x0272, r25
    6fc0:	80 93 71 02 	sts	0x0271, r24
    6fc4:	80 91 8d 02 	lds	r24, 0x028D
    6fc8:	90 91 8e 02 	lds	r25, 0x028E
    6fcc:	a0 91 8f 02 	lds	r26, 0x028F
    6fd0:	b0 91 90 02 	lds	r27, 0x0290
    6fd4:	44 e0       	ldi	r20, 0x04	; 4
    6fd6:	b6 95       	lsr	r27
    6fd8:	a7 95       	ror	r26
    6fda:	97 95       	ror	r25
    6fdc:	87 95       	ror	r24
    6fde:	4a 95       	dec	r20
    6fe0:	d1 f7       	brne	.-12     	; 0x6fd6 <calibrateSensors+0x84>
    6fe2:	90 93 74 02 	sts	0x0274, r25
    6fe6:	80 93 73 02 	sts	0x0273, r24
    6fea:	80 91 91 02 	lds	r24, 0x0291
    6fee:	90 91 92 02 	lds	r25, 0x0292
    6ff2:	a0 91 93 02 	lds	r26, 0x0293
    6ff6:	b0 91 94 02 	lds	r27, 0x0294
    6ffa:	34 e0       	ldi	r19, 0x04	; 4
    6ffc:	b6 95       	lsr	r27
    6ffe:	a7 95       	ror	r26
    7000:	97 95       	ror	r25
    7002:	87 95       	ror	r24
    7004:	3a 95       	dec	r19
    7006:	d1 f7       	brne	.-12     	; 0x6ffc <calibrateSensors+0xaa>
    7008:	90 93 76 02 	sts	0x0276, r25
    700c:	80 93 75 02 	sts	0x0275, r24
    7010:	80 91 95 02 	lds	r24, 0x0295
    7014:	90 91 96 02 	lds	r25, 0x0296
    7018:	a0 91 97 02 	lds	r26, 0x0297
    701c:	b0 91 98 02 	lds	r27, 0x0298
    7020:	24 e0       	ldi	r18, 0x04	; 4
    7022:	b6 95       	lsr	r27
    7024:	a7 95       	ror	r26
    7026:	97 95       	ror	r25
    7028:	87 95       	ror	r24
    702a:	2a 95       	dec	r18
    702c:	d1 f7       	brne	.-12     	; 0x7022 <calibrateSensors+0xd0>
    702e:	90 93 78 02 	sts	0x0278, r25
    7032:	80 93 77 02 	sts	0x0277, r24
    7036:	80 91 99 02 	lds	r24, 0x0299
    703a:	90 91 9a 02 	lds	r25, 0x029A
    703e:	a0 91 9b 02 	lds	r26, 0x029B
    7042:	b0 91 9c 02 	lds	r27, 0x029C
    7046:	f4 e0       	ldi	r31, 0x04	; 4
    7048:	b6 95       	lsr	r27
    704a:	a7 95       	ror	r26
    704c:	97 95       	ror	r25
    704e:	87 95       	ror	r24
    7050:	fa 95       	dec	r31
    7052:	d1 f7       	brne	.-12     	; 0x7048 <calibrateSensors+0xf6>
    7054:	90 93 7a 02 	sts	0x027A, r25
    7058:	80 93 79 02 	sts	0x0279, r24
    705c:	80 91 9d 02 	lds	r24, 0x029D
    7060:	90 91 9e 02 	lds	r25, 0x029E
    7064:	a0 91 9f 02 	lds	r26, 0x029F
    7068:	b0 91 a0 02 	lds	r27, 0x02A0
    706c:	e4 e0       	ldi	r30, 0x04	; 4
    706e:	b6 95       	lsr	r27
    7070:	a7 95       	ror	r26
    7072:	97 95       	ror	r25
    7074:	87 95       	ror	r24
    7076:	ea 95       	dec	r30
    7078:	d1 f7       	brne	.-12     	; 0x706e <calibrateSensors+0x11c>
    707a:	90 93 7c 02 	sts	0x027C, r25
    707e:	80 93 7b 02 	sts	0x027B, r24
    7082:	80 91 a1 02 	lds	r24, 0x02A1
    7086:	90 91 a2 02 	lds	r25, 0x02A2
    708a:	a0 91 a3 02 	lds	r26, 0x02A3
    708e:	b0 91 a4 02 	lds	r27, 0x02A4
    7092:	74 e0       	ldi	r23, 0x04	; 4
    7094:	b6 95       	lsr	r27
    7096:	a7 95       	ror	r26
    7098:	97 95       	ror	r25
    709a:	87 95       	ror	r24
    709c:	7a 95       	dec	r23
    709e:	d1 f7       	brne	.-12     	; 0x7094 <calibrateSensors+0x142>
    70a0:	90 93 7e 02 	sts	0x027E, r25
    70a4:	80 93 7d 02 	sts	0x027D, r24
    70a8:	80 91 a5 02 	lds	r24, 0x02A5
    70ac:	90 91 a6 02 	lds	r25, 0x02A6
    70b0:	a0 91 a7 02 	lds	r26, 0x02A7
    70b4:	b0 91 a8 02 	lds	r27, 0x02A8
    70b8:	64 e0       	ldi	r22, 0x04	; 4
    70ba:	b6 95       	lsr	r27
    70bc:	a7 95       	ror	r26
    70be:	97 95       	ror	r25
    70c0:	87 95       	ror	r24
    70c2:	6a 95       	dec	r22
    70c4:	d1 f7       	brne	.-12     	; 0x70ba <calibrateSensors+0x168>
    70c6:	90 93 80 02 	sts	0x0280, r25
    70ca:	80 93 7f 02 	sts	0x027F, r24
    70ce:	80 91 ad 02 	lds	r24, 0x02AD
    70d2:	90 91 ae 02 	lds	r25, 0x02AE
    70d6:	a0 91 af 02 	lds	r26, 0x02AF
    70da:	b0 91 b0 02 	lds	r27, 0x02B0
    70de:	54 e0       	ldi	r21, 0x04	; 4
    70e0:	b6 95       	lsr	r27
    70e2:	a7 95       	ror	r26
    70e4:	97 95       	ror	r25
    70e6:	87 95       	ror	r24
    70e8:	5a 95       	dec	r21
    70ea:	d1 f7       	brne	.-12     	; 0x70e0 <calibrateSensors+0x18e>
    70ec:	9c 01       	movw	r18, r24
    70ee:	80 91 b1 02 	lds	r24, 0x02B1
    70f2:	90 91 b2 02 	lds	r25, 0x02B2
    70f6:	a0 91 b3 02 	lds	r26, 0x02B3
    70fa:	b0 91 b4 02 	lds	r27, 0x02B4
    70fe:	44 e0       	ldi	r20, 0x04	; 4
    7100:	b6 95       	lsr	r27
    7102:	a7 95       	ror	r26
    7104:	97 95       	ror	r25
    7106:	87 95       	ror	r24
    7108:	4a 95       	dec	r20
    710a:	d1 f7       	brne	.-12     	; 0x7100 <calibrateSensors+0x1ae>
    710c:	bc 01       	movw	r22, r24
    710e:	80 91 b5 02 	lds	r24, 0x02B5
    7112:	90 91 b6 02 	lds	r25, 0x02B6
    7116:	a0 91 b7 02 	lds	r26, 0x02B7
    711a:	b0 91 b8 02 	lds	r27, 0x02B8
    711e:	f4 e0       	ldi	r31, 0x04	; 4
    7120:	b6 95       	lsr	r27
    7122:	a7 95       	ror	r26
    7124:	97 95       	ror	r25
    7126:	87 95       	ror	r24
    7128:	fa 95       	dec	r31
    712a:	d1 f7       	brne	.-12     	; 0x7120 <calibrateSensors+0x1ce>
    712c:	ac 01       	movw	r20, r24
    712e:	80 91 a9 02 	lds	r24, 0x02A9
    7132:	90 91 aa 02 	lds	r25, 0x02AA
    7136:	a0 91 ab 02 	lds	r26, 0x02AB
    713a:	b0 91 ac 02 	lds	r27, 0x02AC
    713e:	e4 e0       	ldi	r30, 0x04	; 4
    7140:	b6 95       	lsr	r27
    7142:	a7 95       	ror	r26
    7144:	97 95       	ror	r25
    7146:	87 95       	ror	r24
    7148:	ea 95       	dec	r30
    714a:	d1 f7       	brne	.-12     	; 0x7140 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    714c:	80 50       	subi	r24, 0x00	; 0
    714e:	92 40       	sbci	r25, 0x02	; 2
    7150:	90 93 82 02 	sts	0x0282, r25
    7154:	80 93 81 02 	sts	0x0281, r24
    7158:	20 50       	subi	r18, 0x00	; 0
    715a:	32 40       	sbci	r19, 0x02	; 2
    715c:	30 93 84 02 	sts	0x0284, r19
    7160:	20 93 83 02 	sts	0x0283, r18
    7164:	60 50       	subi	r22, 0x00	; 0
    7166:	72 40       	sbci	r23, 0x02	; 2
    7168:	70 93 86 02 	sts	0x0286, r23
    716c:	60 93 85 02 	sts	0x0285, r22
    7170:	40 50       	subi	r20, 0x00	; 0
    7172:	52 40       	sbci	r21, 0x02	; 2
    7174:	50 93 88 02 	sts	0x0288, r21
    7178:	40 93 87 02 	sts	0x0287, r20
			}

			accOffsetX = accOffsetXSum>>4;
    717c:	80 91 34 04 	lds	r24, 0x0434
    7180:	90 91 35 04 	lds	r25, 0x0435
    7184:	95 95       	asr	r25
    7186:	87 95       	ror	r24
    7188:	95 95       	asr	r25
    718a:	87 95       	ror	r24
    718c:	95 95       	asr	r25
    718e:	87 95       	ror	r24
    7190:	95 95       	asr	r25
    7192:	87 95       	ror	r24
    7194:	90 93 2f 04 	sts	0x042F, r25
    7198:	80 93 2e 04 	sts	0x042E, r24
			accOffsetY = accOffsetYSum>>4;
    719c:	80 91 36 04 	lds	r24, 0x0436
    71a0:	90 91 37 04 	lds	r25, 0x0437
    71a4:	95 95       	asr	r25
    71a6:	87 95       	ror	r24
    71a8:	95 95       	asr	r25
    71aa:	87 95       	ror	r24
    71ac:	95 95       	asr	r25
    71ae:	87 95       	ror	r24
    71b0:	95 95       	asr	r25
    71b2:	87 95       	ror	r24
    71b4:	90 93 31 04 	sts	0x0431, r25
    71b8:	80 93 30 04 	sts	0x0430, r24
			accOffsetZ = accOffsetZSum>>4;
    71bc:	80 91 38 04 	lds	r24, 0x0438
    71c0:	90 91 39 04 	lds	r25, 0x0439
    71c4:	95 95       	asr	r25
    71c6:	87 95       	ror	r24
    71c8:	95 95       	asr	r25
    71ca:	87 95       	ror	r24
    71cc:	95 95       	asr	r25
    71ce:	87 95       	ror	r24
    71d0:	95 95       	asr	r25
    71d2:	87 95       	ror	r24
    71d4:	90 93 33 04 	sts	0x0433, r25
    71d8:	80 93 32 04 	sts	0x0432, r24

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    71dc:	10 92 83 05 	sts	0x0583, r1

		}

	}

	pwm_red = 255;
    71e0:	8f ef       	ldi	r24, 0xFF	; 255
    71e2:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    71e6:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    71ea:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    71ee:	0e 94 b1 34 	call	0x6962	; 0x6962 <updateRedLed>
	updateGreenLed(pwm_green);
    71f2:	80 91 0d 02 	lds	r24, 0x020D
    71f6:	0e 94 c5 34 	call	0x698a	; 0x698a <updateGreenLed>
	updateBlueLed(pwm_blue);
    71fa:	80 91 0e 02 	lds	r24, 0x020E
    71fe:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <updateBlueLed>

}
    7202:	df 91       	pop	r29
    7204:	cf 91       	pop	r28
    7206:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    7208:	80 91 c0 02 	lds	r24, 0x02C0
    720c:	88 23       	and	r24, r24
    720e:	09 f4       	brne	.+2      	; 0x7212 <calibrateSensors+0x2c0>
    7210:	86 c1       	rjmp	.+780    	; 0x751e <calibrateSensors+0x5cc>

				proxUpdated = 0;
    7212:	10 92 c0 02 	sts	0x02C0, r1

				if(calibrationCycle==0) {		// reset all variables
    7216:	21 15       	cp	r18, r1
    7218:	31 05       	cpc	r19, r1
    721a:	09 f4       	brne	.+2      	; 0x721e <calibrateSensors+0x2cc>
    721c:	86 c1       	rjmp	.+780    	; 0x752a <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    721e:	80 91 59 02 	lds	r24, 0x0259
    7222:	90 91 5a 02 	lds	r25, 0x025A
    7226:	aa 27       	eor	r26, r26
    7228:	97 fd       	sbrc	r25, 7
    722a:	a0 95       	com	r26
    722c:	ba 2f       	mov	r27, r26
    722e:	40 91 89 02 	lds	r20, 0x0289
    7232:	50 91 8a 02 	lds	r21, 0x028A
    7236:	60 91 8b 02 	lds	r22, 0x028B
    723a:	70 91 8c 02 	lds	r23, 0x028C
    723e:	84 0f       	add	r24, r20
    7240:	95 1f       	adc	r25, r21
    7242:	a6 1f       	adc	r26, r22
    7244:	b7 1f       	adc	r27, r23
    7246:	80 93 89 02 	sts	0x0289, r24
    724a:	90 93 8a 02 	sts	0x028A, r25
    724e:	a0 93 8b 02 	sts	0x028B, r26
    7252:	b0 93 8c 02 	sts	0x028C, r27
    7256:	80 91 5b 02 	lds	r24, 0x025B
    725a:	90 91 5c 02 	lds	r25, 0x025C
    725e:	aa 27       	eor	r26, r26
    7260:	97 fd       	sbrc	r25, 7
    7262:	a0 95       	com	r26
    7264:	ba 2f       	mov	r27, r26
    7266:	40 91 8d 02 	lds	r20, 0x028D
    726a:	50 91 8e 02 	lds	r21, 0x028E
    726e:	60 91 8f 02 	lds	r22, 0x028F
    7272:	70 91 90 02 	lds	r23, 0x0290
    7276:	84 0f       	add	r24, r20
    7278:	95 1f       	adc	r25, r21
    727a:	a6 1f       	adc	r26, r22
    727c:	b7 1f       	adc	r27, r23
    727e:	80 93 8d 02 	sts	0x028D, r24
    7282:	90 93 8e 02 	sts	0x028E, r25
    7286:	a0 93 8f 02 	sts	0x028F, r26
    728a:	b0 93 90 02 	sts	0x0290, r27
    728e:	80 91 5d 02 	lds	r24, 0x025D
    7292:	90 91 5e 02 	lds	r25, 0x025E
    7296:	aa 27       	eor	r26, r26
    7298:	97 fd       	sbrc	r25, 7
    729a:	a0 95       	com	r26
    729c:	ba 2f       	mov	r27, r26
    729e:	40 91 91 02 	lds	r20, 0x0291
    72a2:	50 91 92 02 	lds	r21, 0x0292
    72a6:	60 91 93 02 	lds	r22, 0x0293
    72aa:	70 91 94 02 	lds	r23, 0x0294
    72ae:	84 0f       	add	r24, r20
    72b0:	95 1f       	adc	r25, r21
    72b2:	a6 1f       	adc	r26, r22
    72b4:	b7 1f       	adc	r27, r23
    72b6:	80 93 91 02 	sts	0x0291, r24
    72ba:	90 93 92 02 	sts	0x0292, r25
    72be:	a0 93 93 02 	sts	0x0293, r26
    72c2:	b0 93 94 02 	sts	0x0294, r27
    72c6:	80 91 5f 02 	lds	r24, 0x025F
    72ca:	90 91 60 02 	lds	r25, 0x0260
    72ce:	aa 27       	eor	r26, r26
    72d0:	97 fd       	sbrc	r25, 7
    72d2:	a0 95       	com	r26
    72d4:	ba 2f       	mov	r27, r26
    72d6:	40 91 95 02 	lds	r20, 0x0295
    72da:	50 91 96 02 	lds	r21, 0x0296
    72de:	60 91 97 02 	lds	r22, 0x0297
    72e2:	70 91 98 02 	lds	r23, 0x0298
    72e6:	84 0f       	add	r24, r20
    72e8:	95 1f       	adc	r25, r21
    72ea:	a6 1f       	adc	r26, r22
    72ec:	b7 1f       	adc	r27, r23
    72ee:	80 93 95 02 	sts	0x0295, r24
    72f2:	90 93 96 02 	sts	0x0296, r25
    72f6:	a0 93 97 02 	sts	0x0297, r26
    72fa:	b0 93 98 02 	sts	0x0298, r27
    72fe:	80 91 61 02 	lds	r24, 0x0261
    7302:	90 91 62 02 	lds	r25, 0x0262
    7306:	aa 27       	eor	r26, r26
    7308:	97 fd       	sbrc	r25, 7
    730a:	a0 95       	com	r26
    730c:	ba 2f       	mov	r27, r26
    730e:	40 91 99 02 	lds	r20, 0x0299
    7312:	50 91 9a 02 	lds	r21, 0x029A
    7316:	60 91 9b 02 	lds	r22, 0x029B
    731a:	70 91 9c 02 	lds	r23, 0x029C
    731e:	84 0f       	add	r24, r20
    7320:	95 1f       	adc	r25, r21
    7322:	a6 1f       	adc	r26, r22
    7324:	b7 1f       	adc	r27, r23
    7326:	80 93 99 02 	sts	0x0299, r24
    732a:	90 93 9a 02 	sts	0x029A, r25
    732e:	a0 93 9b 02 	sts	0x029B, r26
    7332:	b0 93 9c 02 	sts	0x029C, r27
    7336:	80 91 63 02 	lds	r24, 0x0263
    733a:	90 91 64 02 	lds	r25, 0x0264
    733e:	aa 27       	eor	r26, r26
    7340:	97 fd       	sbrc	r25, 7
    7342:	a0 95       	com	r26
    7344:	ba 2f       	mov	r27, r26
    7346:	40 91 9d 02 	lds	r20, 0x029D
    734a:	50 91 9e 02 	lds	r21, 0x029E
    734e:	60 91 9f 02 	lds	r22, 0x029F
    7352:	70 91 a0 02 	lds	r23, 0x02A0
    7356:	84 0f       	add	r24, r20
    7358:	95 1f       	adc	r25, r21
    735a:	a6 1f       	adc	r26, r22
    735c:	b7 1f       	adc	r27, r23
    735e:	80 93 9d 02 	sts	0x029D, r24
    7362:	90 93 9e 02 	sts	0x029E, r25
    7366:	a0 93 9f 02 	sts	0x029F, r26
    736a:	b0 93 a0 02 	sts	0x02A0, r27
    736e:	80 91 65 02 	lds	r24, 0x0265
    7372:	90 91 66 02 	lds	r25, 0x0266
    7376:	aa 27       	eor	r26, r26
    7378:	97 fd       	sbrc	r25, 7
    737a:	a0 95       	com	r26
    737c:	ba 2f       	mov	r27, r26
    737e:	40 91 a1 02 	lds	r20, 0x02A1
    7382:	50 91 a2 02 	lds	r21, 0x02A2
    7386:	60 91 a3 02 	lds	r22, 0x02A3
    738a:	70 91 a4 02 	lds	r23, 0x02A4
    738e:	84 0f       	add	r24, r20
    7390:	95 1f       	adc	r25, r21
    7392:	a6 1f       	adc	r26, r22
    7394:	b7 1f       	adc	r27, r23
    7396:	80 93 a1 02 	sts	0x02A1, r24
    739a:	90 93 a2 02 	sts	0x02A2, r25
    739e:	a0 93 a3 02 	sts	0x02A3, r26
    73a2:	b0 93 a4 02 	sts	0x02A4, r27
    73a6:	80 91 67 02 	lds	r24, 0x0267
    73aa:	90 91 68 02 	lds	r25, 0x0268
    73ae:	aa 27       	eor	r26, r26
    73b0:	97 fd       	sbrc	r25, 7
    73b2:	a0 95       	com	r26
    73b4:	ba 2f       	mov	r27, r26
    73b6:	40 91 a5 02 	lds	r20, 0x02A5
    73ba:	50 91 a6 02 	lds	r21, 0x02A6
    73be:	60 91 a7 02 	lds	r22, 0x02A7
    73c2:	70 91 a8 02 	lds	r23, 0x02A8
    73c6:	84 0f       	add	r24, r20
    73c8:	95 1f       	adc	r25, r21
    73ca:	a6 1f       	adc	r26, r22
    73cc:	b7 1f       	adc	r27, r23
    73ce:	80 93 a5 02 	sts	0x02A5, r24
    73d2:	90 93 a6 02 	sts	0x02A6, r25
    73d6:	a0 93 a7 02 	sts	0x02A7, r26
    73da:	b0 93 a8 02 	sts	0x02A8, r27
    73de:	80 91 69 02 	lds	r24, 0x0269
    73e2:	90 91 6a 02 	lds	r25, 0x026A
    73e6:	aa 27       	eor	r26, r26
    73e8:	97 fd       	sbrc	r25, 7
    73ea:	a0 95       	com	r26
    73ec:	ba 2f       	mov	r27, r26
    73ee:	40 91 a9 02 	lds	r20, 0x02A9
    73f2:	50 91 aa 02 	lds	r21, 0x02AA
    73f6:	60 91 ab 02 	lds	r22, 0x02AB
    73fa:	70 91 ac 02 	lds	r23, 0x02AC
    73fe:	84 0f       	add	r24, r20
    7400:	95 1f       	adc	r25, r21
    7402:	a6 1f       	adc	r26, r22
    7404:	b7 1f       	adc	r27, r23
    7406:	80 93 a9 02 	sts	0x02A9, r24
    740a:	90 93 aa 02 	sts	0x02AA, r25
    740e:	a0 93 ab 02 	sts	0x02AB, r26
    7412:	b0 93 ac 02 	sts	0x02AC, r27
    7416:	80 91 6b 02 	lds	r24, 0x026B
    741a:	90 91 6c 02 	lds	r25, 0x026C
    741e:	aa 27       	eor	r26, r26
    7420:	97 fd       	sbrc	r25, 7
    7422:	a0 95       	com	r26
    7424:	ba 2f       	mov	r27, r26
    7426:	40 91 ad 02 	lds	r20, 0x02AD
    742a:	50 91 ae 02 	lds	r21, 0x02AE
    742e:	60 91 af 02 	lds	r22, 0x02AF
    7432:	70 91 b0 02 	lds	r23, 0x02B0
    7436:	84 0f       	add	r24, r20
    7438:	95 1f       	adc	r25, r21
    743a:	a6 1f       	adc	r26, r22
    743c:	b7 1f       	adc	r27, r23
    743e:	80 93 ad 02 	sts	0x02AD, r24
    7442:	90 93 ae 02 	sts	0x02AE, r25
    7446:	a0 93 af 02 	sts	0x02AF, r26
    744a:	b0 93 b0 02 	sts	0x02B0, r27
    744e:	80 91 6d 02 	lds	r24, 0x026D
    7452:	90 91 6e 02 	lds	r25, 0x026E
    7456:	aa 27       	eor	r26, r26
    7458:	97 fd       	sbrc	r25, 7
    745a:	a0 95       	com	r26
    745c:	ba 2f       	mov	r27, r26
    745e:	40 91 b1 02 	lds	r20, 0x02B1
    7462:	50 91 b2 02 	lds	r21, 0x02B2
    7466:	60 91 b3 02 	lds	r22, 0x02B3
    746a:	70 91 b4 02 	lds	r23, 0x02B4
    746e:	84 0f       	add	r24, r20
    7470:	95 1f       	adc	r25, r21
    7472:	a6 1f       	adc	r26, r22
    7474:	b7 1f       	adc	r27, r23
    7476:	80 93 b1 02 	sts	0x02B1, r24
    747a:	90 93 b2 02 	sts	0x02B2, r25
    747e:	a0 93 b3 02 	sts	0x02B3, r26
    7482:	b0 93 b4 02 	sts	0x02B4, r27
    7486:	80 91 6f 02 	lds	r24, 0x026F
    748a:	90 91 70 02 	lds	r25, 0x0270
    748e:	aa 27       	eor	r26, r26
    7490:	97 fd       	sbrc	r25, 7
    7492:	a0 95       	com	r26
    7494:	ba 2f       	mov	r27, r26
    7496:	40 91 b5 02 	lds	r20, 0x02B5
    749a:	50 91 b6 02 	lds	r21, 0x02B6
    749e:	60 91 b7 02 	lds	r22, 0x02B7
    74a2:	70 91 b8 02 	lds	r23, 0x02B8
    74a6:	84 0f       	add	r24, r20
    74a8:	95 1f       	adc	r25, r21
    74aa:	a6 1f       	adc	r26, r22
    74ac:	b7 1f       	adc	r27, r23
    74ae:	80 93 b5 02 	sts	0x02B5, r24
    74b2:	90 93 b6 02 	sts	0x02B6, r25
    74b6:	a0 93 b7 02 	sts	0x02B7, r26
    74ba:	b0 93 b8 02 	sts	0x02B8, r27
				}

				accOffsetXSum += accX;
    74be:	80 91 34 04 	lds	r24, 0x0434
    74c2:	90 91 35 04 	lds	r25, 0x0435
    74c6:	40 91 28 04 	lds	r20, 0x0428
    74ca:	50 91 29 04 	lds	r21, 0x0429
    74ce:	84 0f       	add	r24, r20
    74d0:	95 1f       	adc	r25, r21
    74d2:	90 93 35 04 	sts	0x0435, r25
    74d6:	80 93 34 04 	sts	0x0434, r24
				accOffsetYSum += accY;
    74da:	80 91 36 04 	lds	r24, 0x0436
    74de:	90 91 37 04 	lds	r25, 0x0437
    74e2:	40 91 2a 04 	lds	r20, 0x042A
    74e6:	50 91 2b 04 	lds	r21, 0x042B
    74ea:	84 0f       	add	r24, r20
    74ec:	95 1f       	adc	r25, r21
    74ee:	90 93 37 04 	sts	0x0437, r25
    74f2:	80 93 36 04 	sts	0x0436, r24
				accOffsetZSum += accZ;
    74f6:	80 91 38 04 	lds	r24, 0x0438
    74fa:	90 91 39 04 	lds	r25, 0x0439
    74fe:	40 91 2c 04 	lds	r20, 0x042C
    7502:	50 91 2d 04 	lds	r21, 0x042D
    7506:	84 0f       	add	r24, r20
    7508:	95 1f       	adc	r25, r21
    750a:	90 93 39 04 	sts	0x0439, r25
    750e:	80 93 38 04 	sts	0x0438, r24

				calibrationCycle++;
    7512:	2f 5f       	subi	r18, 0xFF	; 255
    7514:	3f 4f       	sbci	r19, 0xFF	; 255
    7516:	30 93 4d 04 	sts	0x044D, r19
    751a:	20 93 4c 04 	sts	0x044C, r18
    751e:	80 91 83 05 	lds	r24, 0x0583
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    7522:	88 23       	and	r24, r24
    7524:	09 f0       	breq	.+2      	; 0x7528 <calibrateSensors+0x5d6>
    7526:	31 cd       	rjmp	.-1438   	; 0x6f8a <calibrateSensors+0x38>
    7528:	5b ce       	rjmp	.-842    	; 0x71e0 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    752a:	10 92 89 02 	sts	0x0289, r1
    752e:	10 92 8a 02 	sts	0x028A, r1
    7532:	10 92 8b 02 	sts	0x028B, r1
    7536:	10 92 8c 02 	sts	0x028C, r1
						proximityOffset[i] = 0;
    753a:	10 92 72 02 	sts	0x0272, r1
    753e:	10 92 71 02 	sts	0x0271, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7542:	10 92 8d 02 	sts	0x028D, r1
    7546:	10 92 8e 02 	sts	0x028E, r1
    754a:	10 92 8f 02 	sts	0x028F, r1
    754e:	10 92 90 02 	sts	0x0290, r1
						proximityOffset[i] = 0;
    7552:	10 92 74 02 	sts	0x0274, r1
    7556:	10 92 73 02 	sts	0x0273, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    755a:	10 92 91 02 	sts	0x0291, r1
    755e:	10 92 92 02 	sts	0x0292, r1
    7562:	10 92 93 02 	sts	0x0293, r1
    7566:	10 92 94 02 	sts	0x0294, r1
						proximityOffset[i] = 0;
    756a:	10 92 76 02 	sts	0x0276, r1
    756e:	10 92 75 02 	sts	0x0275, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7572:	10 92 95 02 	sts	0x0295, r1
    7576:	10 92 96 02 	sts	0x0296, r1
    757a:	10 92 97 02 	sts	0x0297, r1
    757e:	10 92 98 02 	sts	0x0298, r1
						proximityOffset[i] = 0;
    7582:	10 92 78 02 	sts	0x0278, r1
    7586:	10 92 77 02 	sts	0x0277, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    758a:	10 92 99 02 	sts	0x0299, r1
    758e:	10 92 9a 02 	sts	0x029A, r1
    7592:	10 92 9b 02 	sts	0x029B, r1
    7596:	10 92 9c 02 	sts	0x029C, r1
						proximityOffset[i] = 0;
    759a:	10 92 7a 02 	sts	0x027A, r1
    759e:	10 92 79 02 	sts	0x0279, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    75a2:	10 92 9d 02 	sts	0x029D, r1
    75a6:	10 92 9e 02 	sts	0x029E, r1
    75aa:	10 92 9f 02 	sts	0x029F, r1
    75ae:	10 92 a0 02 	sts	0x02A0, r1
						proximityOffset[i] = 0;
    75b2:	10 92 7c 02 	sts	0x027C, r1
    75b6:	10 92 7b 02 	sts	0x027B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    75ba:	10 92 a1 02 	sts	0x02A1, r1
    75be:	10 92 a2 02 	sts	0x02A2, r1
    75c2:	10 92 a3 02 	sts	0x02A3, r1
    75c6:	10 92 a4 02 	sts	0x02A4, r1
						proximityOffset[i] = 0;
    75ca:	10 92 7e 02 	sts	0x027E, r1
    75ce:	10 92 7d 02 	sts	0x027D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    75d2:	10 92 a5 02 	sts	0x02A5, r1
    75d6:	10 92 a6 02 	sts	0x02A6, r1
    75da:	10 92 a7 02 	sts	0x02A7, r1
    75de:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    75e2:	10 92 80 02 	sts	0x0280, r1
    75e6:	10 92 7f 02 	sts	0x027F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    75ea:	10 92 a9 02 	sts	0x02A9, r1
    75ee:	10 92 aa 02 	sts	0x02AA, r1
    75f2:	10 92 ab 02 	sts	0x02AB, r1
    75f6:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    75fa:	10 92 82 02 	sts	0x0282, r1
    75fe:	10 92 81 02 	sts	0x0281, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7602:	10 92 ad 02 	sts	0x02AD, r1
    7606:	10 92 ae 02 	sts	0x02AE, r1
    760a:	10 92 af 02 	sts	0x02AF, r1
    760e:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    7612:	10 92 84 02 	sts	0x0284, r1
    7616:	10 92 83 02 	sts	0x0283, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    761a:	10 92 b1 02 	sts	0x02B1, r1
    761e:	10 92 b2 02 	sts	0x02B2, r1
    7622:	10 92 b3 02 	sts	0x02B3, r1
    7626:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    762a:	10 92 86 02 	sts	0x0286, r1
    762e:	10 92 85 02 	sts	0x0285, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7632:	10 92 b5 02 	sts	0x02B5, r1
    7636:	10 92 b6 02 	sts	0x02B6, r1
    763a:	10 92 b7 02 	sts	0x02B7, r1
    763e:	10 92 b8 02 	sts	0x02B8, r1
						proximityOffset[i] = 0;
    7642:	10 92 88 02 	sts	0x0288, r1
    7646:	10 92 87 02 	sts	0x0287, r1
					}
					accOffsetXSum = 0;
    764a:	10 92 35 04 	sts	0x0435, r1
    764e:	10 92 34 04 	sts	0x0434, r1
					accOffsetYSum = 0;
    7652:	10 92 37 04 	sts	0x0437, r1
    7656:	10 92 36 04 	sts	0x0436, r1
					accOffsetZSum = 0;
    765a:	10 92 39 04 	sts	0x0439, r1
    765e:	10 92 38 04 	sts	0x0438, r1

					calibrationCycle++;
    7662:	d0 93 4d 04 	sts	0x044D, r29
    7666:	c0 93 4c 04 	sts	0x044C, r28
    766a:	80 91 83 05 	lds	r24, 0x0583

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    766e:	59 cf       	rjmp	.-334    	; 0x7522 <calibrateSensors+0x5d0>

00007670 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    7670:	80 91 27 04 	lds	r24, 0x0427
    7674:	88 23       	and	r24, r24
    7676:	79 f0       	breq	.+30     	; 0x7696 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    7678:	81 30       	cpi	r24, 0x01	; 1
    767a:	11 f1       	breq	.+68     	; 0x76c0 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    767c:	10 92 29 04 	sts	0x0429, r1
    7680:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    7684:	10 92 2b 04 	sts	0x042B, r1
    7688:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    768c:	10 92 2d 04 	sts	0x042D, r1
    7690:	10 92 2c 04 	sts	0x042C, r1
    7694:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7696:	80 91 14 02 	lds	r24, 0x0214
    769a:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    769e:	80 e0       	ldi	r24, 0x00	; 0
    76a0:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    76a4:	80 91 14 02 	lds	r24, 0x0214
    76a8:	8f 5f       	subi	r24, 0xFF	; 255
    76aa:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    76ae:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    76b2:	80 93 3d 04 	sts	0x043D, r24
    76b6:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    76ba:	80 93 3e 04 	sts	0x043E, r24
    76be:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    76c0:	80 91 14 02 	lds	r24, 0x0214
    76c4:	0e 94 1f 19 	call	0x323e	; 0x323e <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    76c8:	82 e3       	ldi	r24, 0x32	; 50
    76ca:	0e 94 9a 19 	call	0x3334	; 0x3334 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    76ce:	80 91 14 02 	lds	r24, 0x0214
    76d2:	8f 5f       	subi	r24, 0xFF	; 255
    76d4:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    76d8:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    76dc:	80 93 3d 04 	sts	0x043D, r24
    76e0:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    76e4:	80 93 3e 04 	sts	0x043E, r24
    76e8:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    76ec:	80 93 3f 04 	sts	0x043F, r24
    76f0:	08 95       	ret

000076f2 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    76f2:	80 91 27 04 	lds	r24, 0x0427
    76f6:	88 23       	and	r24, r24
    76f8:	09 f0       	breq	.+2      	; 0x76fc <readAccelXYZ_2+0xa>
    76fa:	4e c0       	rjmp	.+156    	; 0x7798 <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    76fc:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    7700:	80 93 3f 04 	sts	0x043F, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7704:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    7708:	80 93 40 04 	sts	0x0440, r24
    770c:	0e 94 ac 19 	call	0x3358	; 0x3358 <i2c_readAck>
    7710:	80 93 41 04 	sts	0x0441, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    7714:	0e 94 b6 19 	call	0x336c	; 0x336c <i2c_readNak>
    7718:	80 93 42 04 	sts	0x0442, r24
		i2c_stop();													// set stop conditon = release bus
    771c:	0e 94 92 19 	call	0x3324	; 0x3324 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7720:	80 91 83 05 	lds	r24, 0x0583
    7724:	88 23       	and	r24, r24
    7726:	09 f4       	brne	.+2      	; 0x772a <readAccelXYZ_2+0x38>
    7728:	47 c0       	rjmp	.+142    	; 0x77b8 <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    772a:	80 91 3e 04 	lds	r24, 0x043E
    772e:	99 27       	eor	r25, r25
    7730:	87 fd       	sbrc	r24, 7
    7732:	90 95       	com	r25
    7734:	98 2f       	mov	r25, r24
    7736:	88 27       	eor	r24, r24
    7738:	20 91 3d 04 	lds	r18, 0x043D
    773c:	33 27       	eor	r19, r19
    773e:	27 fd       	sbrc	r18, 7
    7740:	30 95       	com	r19
    7742:	82 2b       	or	r24, r18
    7744:	93 2b       	or	r25, r19
    7746:	90 93 29 04 	sts	0x0429, r25
    774a:	80 93 28 04 	sts	0x0428, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    774e:	80 91 40 04 	lds	r24, 0x0440
    7752:	99 27       	eor	r25, r25
    7754:	87 fd       	sbrc	r24, 7
    7756:	90 95       	com	r25
    7758:	98 2f       	mov	r25, r24
    775a:	88 27       	eor	r24, r24
    775c:	20 91 3f 04 	lds	r18, 0x043F
    7760:	33 27       	eor	r19, r19
    7762:	27 fd       	sbrc	r18, 7
    7764:	30 95       	com	r19
    7766:	82 2b       	or	r24, r18
    7768:	93 2b       	or	r25, r19
    776a:	90 93 2b 04 	sts	0x042B, r25
    776e:	80 93 2a 04 	sts	0x042A, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    7772:	80 91 42 04 	lds	r24, 0x0442
    7776:	99 27       	eor	r25, r25
    7778:	87 fd       	sbrc	r24, 7
    777a:	90 95       	com	r25
    777c:	98 2f       	mov	r25, r24
    777e:	88 27       	eor	r24, r24
    7780:	20 91 41 04 	lds	r18, 0x0441
    7784:	33 27       	eor	r19, r19
    7786:	27 fd       	sbrc	r18, 7
    7788:	30 95       	com	r19
    778a:	82 2b       	or	r24, r18
    778c:	93 2b       	or	r25, r19
    778e:	90 93 2d 04 	sts	0x042D, r25
    7792:	80 93 2c 04 	sts	0x042C, r24
    7796:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    7798:	81 30       	cpi	r24, 0x01	; 1
    779a:	09 f4       	brne	.+2      	; 0x779e <readAccelXYZ_2+0xac>
    779c:	b3 cf       	rjmp	.-154    	; 0x7704 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    779e:	10 92 29 04 	sts	0x0429, r1
    77a2:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    77a6:	10 92 2b 04 	sts	0x042B, r1
    77aa:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    77ae:	10 92 2d 04 	sts	0x042D, r1
    77b2:	10 92 2c 04 	sts	0x042C, r1
    77b6:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    77b8:	80 91 3e 04 	lds	r24, 0x043E
    77bc:	99 27       	eor	r25, r25
    77be:	87 fd       	sbrc	r24, 7
    77c0:	90 95       	com	r25
    77c2:	98 2f       	mov	r25, r24
    77c4:	88 27       	eor	r24, r24
    77c6:	20 91 3d 04 	lds	r18, 0x043D
    77ca:	33 27       	eor	r19, r19
    77cc:	27 fd       	sbrc	r18, 7
    77ce:	30 95       	com	r19
    77d0:	82 2b       	or	r24, r18
    77d2:	93 2b       	or	r25, r19
    77d4:	20 91 2e 04 	lds	r18, 0x042E
    77d8:	30 91 2f 04 	lds	r19, 0x042F
    77dc:	82 1b       	sub	r24, r18
    77de:	93 0b       	sbc	r25, r19
    77e0:	90 93 29 04 	sts	0x0429, r25
    77e4:	80 93 28 04 	sts	0x0428, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    77e8:	80 91 40 04 	lds	r24, 0x0440
    77ec:	99 27       	eor	r25, r25
    77ee:	87 fd       	sbrc	r24, 7
    77f0:	90 95       	com	r25
    77f2:	98 2f       	mov	r25, r24
    77f4:	88 27       	eor	r24, r24
    77f6:	20 91 3f 04 	lds	r18, 0x043F
    77fa:	33 27       	eor	r19, r19
    77fc:	27 fd       	sbrc	r18, 7
    77fe:	30 95       	com	r19
    7800:	82 2b       	or	r24, r18
    7802:	93 2b       	or	r25, r19
    7804:	20 91 30 04 	lds	r18, 0x0430
    7808:	30 91 31 04 	lds	r19, 0x0431
    780c:	82 1b       	sub	r24, r18
    780e:	93 0b       	sbc	r25, r19
    7810:	90 93 2b 04 	sts	0x042B, r25
    7814:	80 93 2a 04 	sts	0x042A, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    7818:	80 91 42 04 	lds	r24, 0x0442
    781c:	99 27       	eor	r25, r25
    781e:	87 fd       	sbrc	r24, 7
    7820:	90 95       	com	r25
    7822:	98 2f       	mov	r25, r24
    7824:	88 27       	eor	r24, r24
    7826:	20 91 41 04 	lds	r18, 0x0441
    782a:	33 27       	eor	r19, r19
    782c:	27 fd       	sbrc	r18, 7
    782e:	30 95       	com	r19
    7830:	82 2b       	or	r24, r18
    7832:	93 2b       	or	r25, r19
    7834:	20 91 32 04 	lds	r18, 0x0432
    7838:	30 91 33 04 	lds	r19, 0x0433
    783c:	82 1b       	sub	r24, r18
    783e:	93 0b       	sbc	r25, r19
    7840:	90 93 2d 04 	sts	0x042D, r25
    7844:	80 93 2c 04 	sts	0x042C, r24
    7848:	08 95       	ret

0000784a <computeAngle>:

	}

}

void computeAngle() {
    784a:	ef 92       	push	r14
    784c:	ff 92       	push	r15
    784e:	0f 93       	push	r16
    7850:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    7852:	80 91 2c 04 	lds	r24, 0x042C
    7856:	90 91 2d 04 	lds	r25, 0x042D
    785a:	97 fd       	sbrc	r25, 7
    785c:	63 c0       	rjmp	.+198    	; 0x7924 <computeAngle+0xda>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    785e:	80 31       	cpi	r24, 0x10	; 16
    7860:	91 05       	cpc	r25, r1
    7862:	08 f0       	brcs	.+2      	; 0x7866 <computeAngle+0x1c>
    7864:	4a c0       	rjmp	.+148    	; 0x78fa <computeAngle+0xb0>
		currPosition = HORIZONTAL_POS;
    7866:	81 e0       	ldi	r24, 0x01	; 1
    7868:	80 93 16 02 	sts	0x0216, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    786c:	90 91 15 02 	lds	r25, 0x0215
    7870:	98 17       	cp	r25, r24
    7872:	09 f4       	brne	.+2      	; 0x7876 <computeAngle+0x2c>
    7874:	4a c0       	rjmp	.+148    	; 0x790a <computeAngle+0xc0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    7876:	10 92 3c 04 	sts	0x043C, r1
	}
	prevPosition = currPosition;
    787a:	80 93 15 02 	sts	0x0215, r24

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    787e:	60 91 28 04 	lds	r22, 0x0428
    7882:	70 91 29 04 	lds	r23, 0x0429
    7886:	88 27       	eor	r24, r24
    7888:	77 fd       	sbrc	r23, 7
    788a:	80 95       	com	r24
    788c:	98 2f       	mov	r25, r24
    788e:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    7892:	7b 01       	movw	r14, r22
    7894:	8c 01       	movw	r16, r24
    7896:	60 91 2a 04 	lds	r22, 0x042A
    789a:	70 91 2b 04 	lds	r23, 0x042B
    789e:	88 27       	eor	r24, r24
    78a0:	77 fd       	sbrc	r23, 7
    78a2:	80 95       	com	r24
    78a4:	98 2f       	mov	r25, r24
    78a6:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <__floatsisf>
    78aa:	9b 01       	movw	r18, r22
    78ac:	ac 01       	movw	r20, r24
    78ae:	c8 01       	movw	r24, r16
    78b0:	b7 01       	movw	r22, r14
    78b2:	0e 94 22 3d 	call	0x7a44	; 0x7a44 <atan2>
    78b6:	60 93 98 04 	sts	0x0498, r22
    78ba:	70 93 99 04 	sts	0x0499, r23
    78be:	80 93 9a 04 	sts	0x049A, r24
    78c2:	90 93 9b 04 	sts	0x049B, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    78c6:	21 ee       	ldi	r18, 0xE1	; 225
    78c8:	3e e2       	ldi	r19, 0x2E	; 46
    78ca:	45 e6       	ldi	r20, 0x65	; 101
    78cc:	52 e4       	ldi	r21, 0x42	; 66
    78ce:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <__mulsf3>
    78d2:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <__fixsfsi>
    78d6:	9b 01       	movw	r18, r22
    78d8:	70 93 3b 04 	sts	0x043B, r23
    78dc:	60 93 3a 04 	sts	0x043A, r22

	if(currentAngle < 0) {
    78e0:	77 ff       	sbrs	r23, 7
    78e2:	06 c0       	rjmp	.+12     	; 0x78f0 <computeAngle+0xa6>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    78e4:	28 59       	subi	r18, 0x98	; 152
    78e6:	3e 4f       	sbci	r19, 0xFE	; 254
    78e8:	30 93 3b 04 	sts	0x043B, r19
    78ec:	20 93 3a 04 	sts	0x043A, r18
	}

}
    78f0:	1f 91       	pop	r17
    78f2:	0f 91       	pop	r16
    78f4:	ff 90       	pop	r15
    78f6:	ef 90       	pop	r14
    78f8:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    78fa:	10 92 16 02 	sts	0x0216, r1
    78fe:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    7900:	90 91 15 02 	lds	r25, 0x0215
    7904:	98 17       	cp	r25, r24
    7906:	09 f0       	breq	.+2      	; 0x790a <computeAngle+0xc0>
    7908:	b6 cf       	rjmp	.-148    	; 0x7876 <computeAngle+0x2c>
		timesInSamePos++;
    790a:	90 91 3c 04 	lds	r25, 0x043C
    790e:	9f 5f       	subi	r25, 0xFF	; 255
    7910:	90 93 3c 04 	sts	0x043C, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    7914:	95 30       	cpi	r25, 0x05	; 5
    7916:	08 f4       	brcc	.+2      	; 0x791a <computeAngle+0xd0>
    7918:	b0 cf       	rjmp	.-160    	; 0x787a <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    791a:	10 92 3c 04 	sts	0x043C, r1
			robotPosition = currPosition;
    791e:	80 93 17 02 	sts	0x0217, r24
    7922:	ab cf       	rjmp	.-170    	; 0x787a <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    7924:	90 95       	com	r25
    7926:	81 95       	neg	r24
    7928:	9f 4f       	sbci	r25, 0xFF	; 255
    792a:	99 cf       	rjmp	.-206    	; 0x785e <computeAngle+0x14>

0000792c <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    792c:	85 ed       	ldi	r24, 0xD5	; 213
    792e:	94 e0       	ldi	r25, 0x04	; 4
    7930:	6c e6       	ldi	r22, 0x6C	; 108
    7932:	7f e0       	ldi	r23, 0x0F	; 15
    7934:	40 e9       	ldi	r20, 0x90	; 144
    7936:	50 e0       	ldi	r21, 0x00	; 0
    7938:	0e 94 b6 40 	call	0x816c	; 0x816c <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    793c:	8a e6       	ldi	r24, 0x6A	; 106
    793e:	9f e0       	ldi	r25, 0x0F	; 15
    7940:	65 e5       	ldi	r22, 0x55	; 85
    7942:	7a ea       	ldi	r23, 0xAA	; 170
    7944:	0e 94 d8 40 	call	0x81b0	; 0x81b0 <__eeupd_word_m2560>
}
    7948:	08 95       	ret

0000794a <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    794a:	85 ed       	ldi	r24, 0xD5	; 213
    794c:	94 e0       	ldi	r25, 0x04	; 4
    794e:	6c e6       	ldi	r22, 0x6C	; 108
    7950:	7f e0       	ldi	r23, 0x0F	; 15
    7952:	40 e9       	ldi	r20, 0x90	; 144
    7954:	50 e0       	ldi	r21, 0x00	; 0
    7956:	0e 94 98 40 	call	0x8130	; 0x8130 <__eerd_block_m2560>
}
    795a:	08 95       	ret

0000795c <__subsf3>:
    795c:	50 58       	subi	r21, 0x80	; 128

0000795e <__addsf3>:
    795e:	bb 27       	eor	r27, r27
    7960:	aa 27       	eor	r26, r26
    7962:	0e d0       	rcall	.+28     	; 0x7980 <__addsf3x>
    7964:	27 c2       	rjmp	.+1102   	; 0x7db4 <__fp_round>
    7966:	f0 d1       	rcall	.+992    	; 0x7d48 <__fp_pscA>
    7968:	30 f0       	brcs	.+12     	; 0x7976 <__addsf3+0x18>
    796a:	f5 d1       	rcall	.+1002   	; 0x7d56 <__fp_pscB>
    796c:	20 f0       	brcs	.+8      	; 0x7976 <__addsf3+0x18>
    796e:	31 f4       	brne	.+12     	; 0x797c <__addsf3+0x1e>
    7970:	9f 3f       	cpi	r25, 0xFF	; 255
    7972:	11 f4       	brne	.+4      	; 0x7978 <__addsf3+0x1a>
    7974:	1e f4       	brtc	.+6      	; 0x797c <__addsf3+0x1e>
    7976:	c0 c1       	rjmp	.+896    	; 0x7cf8 <__fp_nan>
    7978:	0e f4       	brtc	.+2      	; 0x797c <__addsf3+0x1e>
    797a:	e0 95       	com	r30
    797c:	e7 fb       	bst	r30, 7
    797e:	b6 c1       	rjmp	.+876    	; 0x7cec <__fp_inf>

00007980 <__addsf3x>:
    7980:	e9 2f       	mov	r30, r25
    7982:	3a d2       	rcall	.+1140   	; 0x7df8 <__fp_split3>
    7984:	80 f3       	brcs	.-32     	; 0x7966 <__addsf3+0x8>
    7986:	ba 17       	cp	r27, r26
    7988:	62 07       	cpc	r22, r18
    798a:	73 07       	cpc	r23, r19
    798c:	84 07       	cpc	r24, r20
    798e:	95 07       	cpc	r25, r21
    7990:	18 f0       	brcs	.+6      	; 0x7998 <__addsf3x+0x18>
    7992:	71 f4       	brne	.+28     	; 0x79b0 <__addsf3x+0x30>
    7994:	9e f5       	brtc	.+102    	; 0x79fc <__addsf3x+0x7c>
    7996:	52 c2       	rjmp	.+1188   	; 0x7e3c <__fp_zero>
    7998:	0e f4       	brtc	.+2      	; 0x799c <__addsf3x+0x1c>
    799a:	e0 95       	com	r30
    799c:	0b 2e       	mov	r0, r27
    799e:	ba 2f       	mov	r27, r26
    79a0:	a0 2d       	mov	r26, r0
    79a2:	0b 01       	movw	r0, r22
    79a4:	b9 01       	movw	r22, r18
    79a6:	90 01       	movw	r18, r0
    79a8:	0c 01       	movw	r0, r24
    79aa:	ca 01       	movw	r24, r20
    79ac:	a0 01       	movw	r20, r0
    79ae:	11 24       	eor	r1, r1
    79b0:	ff 27       	eor	r31, r31
    79b2:	59 1b       	sub	r21, r25
    79b4:	99 f0       	breq	.+38     	; 0x79dc <__addsf3x+0x5c>
    79b6:	59 3f       	cpi	r21, 0xF9	; 249
    79b8:	50 f4       	brcc	.+20     	; 0x79ce <__addsf3x+0x4e>
    79ba:	50 3e       	cpi	r21, 0xE0	; 224
    79bc:	68 f1       	brcs	.+90     	; 0x7a18 <__addsf3x+0x98>
    79be:	1a 16       	cp	r1, r26
    79c0:	f0 40       	sbci	r31, 0x00	; 0
    79c2:	a2 2f       	mov	r26, r18
    79c4:	23 2f       	mov	r18, r19
    79c6:	34 2f       	mov	r19, r20
    79c8:	44 27       	eor	r20, r20
    79ca:	58 5f       	subi	r21, 0xF8	; 248
    79cc:	f3 cf       	rjmp	.-26     	; 0x79b4 <__addsf3x+0x34>
    79ce:	46 95       	lsr	r20
    79d0:	37 95       	ror	r19
    79d2:	27 95       	ror	r18
    79d4:	a7 95       	ror	r26
    79d6:	f0 40       	sbci	r31, 0x00	; 0
    79d8:	53 95       	inc	r21
    79da:	c9 f7       	brne	.-14     	; 0x79ce <__addsf3x+0x4e>
    79dc:	7e f4       	brtc	.+30     	; 0x79fc <__addsf3x+0x7c>
    79de:	1f 16       	cp	r1, r31
    79e0:	ba 0b       	sbc	r27, r26
    79e2:	62 0b       	sbc	r22, r18
    79e4:	73 0b       	sbc	r23, r19
    79e6:	84 0b       	sbc	r24, r20
    79e8:	ba f0       	brmi	.+46     	; 0x7a18 <__addsf3x+0x98>
    79ea:	91 50       	subi	r25, 0x01	; 1
    79ec:	a1 f0       	breq	.+40     	; 0x7a16 <__addsf3x+0x96>
    79ee:	ff 0f       	add	r31, r31
    79f0:	bb 1f       	adc	r27, r27
    79f2:	66 1f       	adc	r22, r22
    79f4:	77 1f       	adc	r23, r23
    79f6:	88 1f       	adc	r24, r24
    79f8:	c2 f7       	brpl	.-16     	; 0x79ea <__addsf3x+0x6a>
    79fa:	0e c0       	rjmp	.+28     	; 0x7a18 <__addsf3x+0x98>
    79fc:	ba 0f       	add	r27, r26
    79fe:	62 1f       	adc	r22, r18
    7a00:	73 1f       	adc	r23, r19
    7a02:	84 1f       	adc	r24, r20
    7a04:	48 f4       	brcc	.+18     	; 0x7a18 <__addsf3x+0x98>
    7a06:	87 95       	ror	r24
    7a08:	77 95       	ror	r23
    7a0a:	67 95       	ror	r22
    7a0c:	b7 95       	ror	r27
    7a0e:	f7 95       	ror	r31
    7a10:	9e 3f       	cpi	r25, 0xFE	; 254
    7a12:	08 f0       	brcs	.+2      	; 0x7a16 <__addsf3x+0x96>
    7a14:	b3 cf       	rjmp	.-154    	; 0x797c <__addsf3+0x1e>
    7a16:	93 95       	inc	r25
    7a18:	88 0f       	add	r24, r24
    7a1a:	08 f0       	brcs	.+2      	; 0x7a1e <__addsf3x+0x9e>
    7a1c:	99 27       	eor	r25, r25
    7a1e:	ee 0f       	add	r30, r30
    7a20:	97 95       	ror	r25
    7a22:	87 95       	ror	r24
    7a24:	08 95       	ret
    7a26:	90 d1       	rcall	.+800    	; 0x7d48 <__fp_pscA>
    7a28:	58 f0       	brcs	.+22     	; 0x7a40 <__addsf3x+0xc0>
    7a2a:	80 e8       	ldi	r24, 0x80	; 128
    7a2c:	91 e0       	ldi	r25, 0x01	; 1
    7a2e:	09 f4       	brne	.+2      	; 0x7a32 <__addsf3x+0xb2>
    7a30:	9e ef       	ldi	r25, 0xFE	; 254
    7a32:	91 d1       	rcall	.+802    	; 0x7d56 <__fp_pscB>
    7a34:	28 f0       	brcs	.+10     	; 0x7a40 <__addsf3x+0xc0>
    7a36:	40 e8       	ldi	r20, 0x80	; 128
    7a38:	51 e0       	ldi	r21, 0x01	; 1
    7a3a:	59 f4       	brne	.+22     	; 0x7a52 <atan2+0xe>
    7a3c:	5e ef       	ldi	r21, 0xFE	; 254
    7a3e:	09 c0       	rjmp	.+18     	; 0x7a52 <atan2+0xe>
    7a40:	5b c1       	rjmp	.+694    	; 0x7cf8 <__fp_nan>
    7a42:	fc c1       	rjmp	.+1016   	; 0x7e3c <__fp_zero>

00007a44 <atan2>:
    7a44:	e9 2f       	mov	r30, r25
    7a46:	e0 78       	andi	r30, 0x80	; 128
    7a48:	d7 d1       	rcall	.+942    	; 0x7df8 <__fp_split3>
    7a4a:	68 f3       	brcs	.-38     	; 0x7a26 <__addsf3x+0xa6>
    7a4c:	09 2e       	mov	r0, r25
    7a4e:	05 2a       	or	r0, r21
    7a50:	c1 f3       	breq	.-16     	; 0x7a42 <__addsf3x+0xc2>
    7a52:	26 17       	cp	r18, r22
    7a54:	37 07       	cpc	r19, r23
    7a56:	48 07       	cpc	r20, r24
    7a58:	59 07       	cpc	r21, r25
    7a5a:	38 f0       	brcs	.+14     	; 0x7a6a <atan2+0x26>
    7a5c:	0e 2e       	mov	r0, r30
    7a5e:	07 f8       	bld	r0, 7
    7a60:	e0 25       	eor	r30, r0
    7a62:	69 f0       	breq	.+26     	; 0x7a7e <atan2+0x3a>
    7a64:	e0 25       	eor	r30, r0
    7a66:	e0 64       	ori	r30, 0x40	; 64
    7a68:	0a c0       	rjmp	.+20     	; 0x7a7e <atan2+0x3a>
    7a6a:	ef 63       	ori	r30, 0x3F	; 63
    7a6c:	07 f8       	bld	r0, 7
    7a6e:	00 94       	com	r0
    7a70:	07 fa       	bst	r0, 7
    7a72:	db 01       	movw	r26, r22
    7a74:	b9 01       	movw	r22, r18
    7a76:	9d 01       	movw	r18, r26
    7a78:	dc 01       	movw	r26, r24
    7a7a:	ca 01       	movw	r24, r20
    7a7c:	ad 01       	movw	r20, r26
    7a7e:	ef 93       	push	r30
    7a80:	4a d0       	rcall	.+148    	; 0x7b16 <__divsf3_pse>
    7a82:	98 d1       	rcall	.+816    	; 0x7db4 <__fp_round>
    7a84:	0a d0       	rcall	.+20     	; 0x7a9a <atan>
    7a86:	5f 91       	pop	r21
    7a88:	55 23       	and	r21, r21
    7a8a:	31 f0       	breq	.+12     	; 0x7a98 <atan2+0x54>
    7a8c:	2b ed       	ldi	r18, 0xDB	; 219
    7a8e:	3f e0       	ldi	r19, 0x0F	; 15
    7a90:	49 e4       	ldi	r20, 0x49	; 73
    7a92:	50 fd       	sbrc	r21, 0
    7a94:	49 ec       	ldi	r20, 0xC9	; 201
    7a96:	63 cf       	rjmp	.-314    	; 0x795e <__addsf3>
    7a98:	08 95       	ret

00007a9a <atan>:
    7a9a:	df 93       	push	r29
    7a9c:	dd 27       	eor	r29, r29
    7a9e:	b9 2f       	mov	r27, r25
    7aa0:	bf 77       	andi	r27, 0x7F	; 127
    7aa2:	40 e8       	ldi	r20, 0x80	; 128
    7aa4:	5f e3       	ldi	r21, 0x3F	; 63
    7aa6:	16 16       	cp	r1, r22
    7aa8:	17 06       	cpc	r1, r23
    7aaa:	48 07       	cpc	r20, r24
    7aac:	5b 07       	cpc	r21, r27
    7aae:	10 f4       	brcc	.+4      	; 0x7ab4 <atan+0x1a>
    7ab0:	d9 2f       	mov	r29, r25
    7ab2:	cb d1       	rcall	.+918    	; 0x7e4a <inverse>
    7ab4:	9f 93       	push	r25
    7ab6:	8f 93       	push	r24
    7ab8:	7f 93       	push	r23
    7aba:	6f 93       	push	r22
    7abc:	36 d2       	rcall	.+1132   	; 0x7f2a <square>
    7abe:	ee e4       	ldi	r30, 0x4E	; 78
    7ac0:	f1 e0       	ldi	r31, 0x01	; 1
    7ac2:	1d d1       	rcall	.+570    	; 0x7cfe <__fp_powser>
    7ac4:	77 d1       	rcall	.+750    	; 0x7db4 <__fp_round>
    7ac6:	2f 91       	pop	r18
    7ac8:	3f 91       	pop	r19
    7aca:	4f 91       	pop	r20
    7acc:	5f 91       	pop	r21
    7ace:	d0 d1       	rcall	.+928    	; 0x7e70 <__mulsf3x>
    7ad0:	dd 23       	and	r29, r29
    7ad2:	49 f0       	breq	.+18     	; 0x7ae6 <atan+0x4c>
    7ad4:	90 58       	subi	r25, 0x80	; 128
    7ad6:	a2 ea       	ldi	r26, 0xA2	; 162
    7ad8:	2a ed       	ldi	r18, 0xDA	; 218
    7ada:	3f e0       	ldi	r19, 0x0F	; 15
    7adc:	49 ec       	ldi	r20, 0xC9	; 201
    7ade:	5f e3       	ldi	r21, 0x3F	; 63
    7ae0:	d0 78       	andi	r29, 0x80	; 128
    7ae2:	5d 27       	eor	r21, r29
    7ae4:	4d df       	rcall	.-358    	; 0x7980 <__addsf3x>
    7ae6:	df 91       	pop	r29
    7ae8:	65 c1       	rjmp	.+714    	; 0x7db4 <__fp_round>

00007aea <__cmpsf2>:
    7aea:	dc d0       	rcall	.+440    	; 0x7ca4 <__fp_cmp>
    7aec:	08 f4       	brcc	.+2      	; 0x7af0 <__cmpsf2+0x6>
    7aee:	81 e0       	ldi	r24, 0x01	; 1
    7af0:	08 95       	ret

00007af2 <cos>:
    7af2:	39 d1       	rcall	.+626    	; 0x7d66 <__fp_rempio2>
    7af4:	e3 95       	inc	r30
    7af6:	6f c1       	rjmp	.+734    	; 0x7dd6 <__fp_sinus>

00007af8 <__divsf3>:
    7af8:	0c d0       	rcall	.+24     	; 0x7b12 <__divsf3x>
    7afa:	5c c1       	rjmp	.+696    	; 0x7db4 <__fp_round>
    7afc:	2c d1       	rcall	.+600    	; 0x7d56 <__fp_pscB>
    7afe:	40 f0       	brcs	.+16     	; 0x7b10 <__divsf3+0x18>
    7b00:	23 d1       	rcall	.+582    	; 0x7d48 <__fp_pscA>
    7b02:	30 f0       	brcs	.+12     	; 0x7b10 <__divsf3+0x18>
    7b04:	21 f4       	brne	.+8      	; 0x7b0e <__divsf3+0x16>
    7b06:	5f 3f       	cpi	r21, 0xFF	; 255
    7b08:	19 f0       	breq	.+6      	; 0x7b10 <__divsf3+0x18>
    7b0a:	f0 c0       	rjmp	.+480    	; 0x7cec <__fp_inf>
    7b0c:	51 11       	cpse	r21, r1
    7b0e:	97 c1       	rjmp	.+814    	; 0x7e3e <__fp_szero>
    7b10:	f3 c0       	rjmp	.+486    	; 0x7cf8 <__fp_nan>

00007b12 <__divsf3x>:
    7b12:	72 d1       	rcall	.+740    	; 0x7df8 <__fp_split3>
    7b14:	98 f3       	brcs	.-26     	; 0x7afc <__divsf3+0x4>

00007b16 <__divsf3_pse>:
    7b16:	99 23       	and	r25, r25
    7b18:	c9 f3       	breq	.-14     	; 0x7b0c <__divsf3+0x14>
    7b1a:	55 23       	and	r21, r21
    7b1c:	b1 f3       	breq	.-20     	; 0x7b0a <__divsf3+0x12>
    7b1e:	95 1b       	sub	r25, r21
    7b20:	55 0b       	sbc	r21, r21
    7b22:	bb 27       	eor	r27, r27
    7b24:	aa 27       	eor	r26, r26
    7b26:	62 17       	cp	r22, r18
    7b28:	73 07       	cpc	r23, r19
    7b2a:	84 07       	cpc	r24, r20
    7b2c:	38 f0       	brcs	.+14     	; 0x7b3c <__divsf3_pse+0x26>
    7b2e:	9f 5f       	subi	r25, 0xFF	; 255
    7b30:	5f 4f       	sbci	r21, 0xFF	; 255
    7b32:	22 0f       	add	r18, r18
    7b34:	33 1f       	adc	r19, r19
    7b36:	44 1f       	adc	r20, r20
    7b38:	aa 1f       	adc	r26, r26
    7b3a:	a9 f3       	breq	.-22     	; 0x7b26 <__divsf3_pse+0x10>
    7b3c:	33 d0       	rcall	.+102    	; 0x7ba4 <__divsf3_pse+0x8e>
    7b3e:	0e 2e       	mov	r0, r30
    7b40:	3a f0       	brmi	.+14     	; 0x7b50 <__divsf3_pse+0x3a>
    7b42:	e0 e8       	ldi	r30, 0x80	; 128
    7b44:	30 d0       	rcall	.+96     	; 0x7ba6 <__divsf3_pse+0x90>
    7b46:	91 50       	subi	r25, 0x01	; 1
    7b48:	50 40       	sbci	r21, 0x00	; 0
    7b4a:	e6 95       	lsr	r30
    7b4c:	00 1c       	adc	r0, r0
    7b4e:	ca f7       	brpl	.-14     	; 0x7b42 <__divsf3_pse+0x2c>
    7b50:	29 d0       	rcall	.+82     	; 0x7ba4 <__divsf3_pse+0x8e>
    7b52:	fe 2f       	mov	r31, r30
    7b54:	27 d0       	rcall	.+78     	; 0x7ba4 <__divsf3_pse+0x8e>
    7b56:	66 0f       	add	r22, r22
    7b58:	77 1f       	adc	r23, r23
    7b5a:	88 1f       	adc	r24, r24
    7b5c:	bb 1f       	adc	r27, r27
    7b5e:	26 17       	cp	r18, r22
    7b60:	37 07       	cpc	r19, r23
    7b62:	48 07       	cpc	r20, r24
    7b64:	ab 07       	cpc	r26, r27
    7b66:	b0 e8       	ldi	r27, 0x80	; 128
    7b68:	09 f0       	breq	.+2      	; 0x7b6c <__divsf3_pse+0x56>
    7b6a:	bb 0b       	sbc	r27, r27
    7b6c:	80 2d       	mov	r24, r0
    7b6e:	bf 01       	movw	r22, r30
    7b70:	ff 27       	eor	r31, r31
    7b72:	93 58       	subi	r25, 0x83	; 131
    7b74:	5f 4f       	sbci	r21, 0xFF	; 255
    7b76:	2a f0       	brmi	.+10     	; 0x7b82 <__divsf3_pse+0x6c>
    7b78:	9e 3f       	cpi	r25, 0xFE	; 254
    7b7a:	51 05       	cpc	r21, r1
    7b7c:	68 f0       	brcs	.+26     	; 0x7b98 <__divsf3_pse+0x82>
    7b7e:	b6 c0       	rjmp	.+364    	; 0x7cec <__fp_inf>
    7b80:	5e c1       	rjmp	.+700    	; 0x7e3e <__fp_szero>
    7b82:	5f 3f       	cpi	r21, 0xFF	; 255
    7b84:	ec f3       	brlt	.-6      	; 0x7b80 <__divsf3_pse+0x6a>
    7b86:	98 3e       	cpi	r25, 0xE8	; 232
    7b88:	dc f3       	brlt	.-10     	; 0x7b80 <__divsf3_pse+0x6a>
    7b8a:	86 95       	lsr	r24
    7b8c:	77 95       	ror	r23
    7b8e:	67 95       	ror	r22
    7b90:	b7 95       	ror	r27
    7b92:	f7 95       	ror	r31
    7b94:	9f 5f       	subi	r25, 0xFF	; 255
    7b96:	c9 f7       	brne	.-14     	; 0x7b8a <__divsf3_pse+0x74>
    7b98:	88 0f       	add	r24, r24
    7b9a:	91 1d       	adc	r25, r1
    7b9c:	96 95       	lsr	r25
    7b9e:	87 95       	ror	r24
    7ba0:	97 f9       	bld	r25, 7
    7ba2:	08 95       	ret
    7ba4:	e1 e0       	ldi	r30, 0x01	; 1
    7ba6:	66 0f       	add	r22, r22
    7ba8:	77 1f       	adc	r23, r23
    7baa:	88 1f       	adc	r24, r24
    7bac:	bb 1f       	adc	r27, r27
    7bae:	62 17       	cp	r22, r18
    7bb0:	73 07       	cpc	r23, r19
    7bb2:	84 07       	cpc	r24, r20
    7bb4:	ba 07       	cpc	r27, r26
    7bb6:	20 f0       	brcs	.+8      	; 0x7bc0 <__divsf3_pse+0xaa>
    7bb8:	62 1b       	sub	r22, r18
    7bba:	73 0b       	sbc	r23, r19
    7bbc:	84 0b       	sbc	r24, r20
    7bbe:	ba 0b       	sbc	r27, r26
    7bc0:	ee 1f       	adc	r30, r30
    7bc2:	88 f7       	brcc	.-30     	; 0x7ba6 <__divsf3_pse+0x90>
    7bc4:	e0 95       	com	r30
    7bc6:	08 95       	ret

00007bc8 <__fixsfsi>:
    7bc8:	04 d0       	rcall	.+8      	; 0x7bd2 <__fixunssfsi>
    7bca:	68 94       	set
    7bcc:	b1 11       	cpse	r27, r1
    7bce:	37 c1       	rjmp	.+622    	; 0x7e3e <__fp_szero>
    7bd0:	08 95       	ret

00007bd2 <__fixunssfsi>:
    7bd2:	1a d1       	rcall	.+564    	; 0x7e08 <__fp_splitA>
    7bd4:	88 f0       	brcs	.+34     	; 0x7bf8 <__fixunssfsi+0x26>
    7bd6:	9f 57       	subi	r25, 0x7F	; 127
    7bd8:	90 f0       	brcs	.+36     	; 0x7bfe <__fixunssfsi+0x2c>
    7bda:	b9 2f       	mov	r27, r25
    7bdc:	99 27       	eor	r25, r25
    7bde:	b7 51       	subi	r27, 0x17	; 23
    7be0:	a0 f0       	brcs	.+40     	; 0x7c0a <__fixunssfsi+0x38>
    7be2:	d1 f0       	breq	.+52     	; 0x7c18 <__fixunssfsi+0x46>
    7be4:	66 0f       	add	r22, r22
    7be6:	77 1f       	adc	r23, r23
    7be8:	88 1f       	adc	r24, r24
    7bea:	99 1f       	adc	r25, r25
    7bec:	1a f0       	brmi	.+6      	; 0x7bf4 <__fixunssfsi+0x22>
    7bee:	ba 95       	dec	r27
    7bf0:	c9 f7       	brne	.-14     	; 0x7be4 <__fixunssfsi+0x12>
    7bf2:	12 c0       	rjmp	.+36     	; 0x7c18 <__fixunssfsi+0x46>
    7bf4:	b1 30       	cpi	r27, 0x01	; 1
    7bf6:	81 f0       	breq	.+32     	; 0x7c18 <__fixunssfsi+0x46>
    7bf8:	21 d1       	rcall	.+578    	; 0x7e3c <__fp_zero>
    7bfa:	b1 e0       	ldi	r27, 0x01	; 1
    7bfc:	08 95       	ret
    7bfe:	1e c1       	rjmp	.+572    	; 0x7e3c <__fp_zero>
    7c00:	67 2f       	mov	r22, r23
    7c02:	78 2f       	mov	r23, r24
    7c04:	88 27       	eor	r24, r24
    7c06:	b8 5f       	subi	r27, 0xF8	; 248
    7c08:	39 f0       	breq	.+14     	; 0x7c18 <__fixunssfsi+0x46>
    7c0a:	b9 3f       	cpi	r27, 0xF9	; 249
    7c0c:	cc f3       	brlt	.-14     	; 0x7c00 <__fixunssfsi+0x2e>
    7c0e:	86 95       	lsr	r24
    7c10:	77 95       	ror	r23
    7c12:	67 95       	ror	r22
    7c14:	b3 95       	inc	r27
    7c16:	d9 f7       	brne	.-10     	; 0x7c0e <__fixunssfsi+0x3c>
    7c18:	3e f4       	brtc	.+14     	; 0x7c28 <__fixunssfsi+0x56>
    7c1a:	90 95       	com	r25
    7c1c:	80 95       	com	r24
    7c1e:	70 95       	com	r23
    7c20:	61 95       	neg	r22
    7c22:	7f 4f       	sbci	r23, 0xFF	; 255
    7c24:	8f 4f       	sbci	r24, 0xFF	; 255
    7c26:	9f 4f       	sbci	r25, 0xFF	; 255
    7c28:	08 95       	ret

00007c2a <__floatunsisf>:
    7c2a:	e8 94       	clt
    7c2c:	09 c0       	rjmp	.+18     	; 0x7c40 <__floatsisf+0x12>

00007c2e <__floatsisf>:
    7c2e:	97 fb       	bst	r25, 7
    7c30:	3e f4       	brtc	.+14     	; 0x7c40 <__floatsisf+0x12>
    7c32:	90 95       	com	r25
    7c34:	80 95       	com	r24
    7c36:	70 95       	com	r23
    7c38:	61 95       	neg	r22
    7c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    7c3c:	8f 4f       	sbci	r24, 0xFF	; 255
    7c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    7c40:	99 23       	and	r25, r25
    7c42:	a9 f0       	breq	.+42     	; 0x7c6e <__floatsisf+0x40>
    7c44:	f9 2f       	mov	r31, r25
    7c46:	96 e9       	ldi	r25, 0x96	; 150
    7c48:	bb 27       	eor	r27, r27
    7c4a:	93 95       	inc	r25
    7c4c:	f6 95       	lsr	r31
    7c4e:	87 95       	ror	r24
    7c50:	77 95       	ror	r23
    7c52:	67 95       	ror	r22
    7c54:	b7 95       	ror	r27
    7c56:	f1 11       	cpse	r31, r1
    7c58:	f8 cf       	rjmp	.-16     	; 0x7c4a <__floatsisf+0x1c>
    7c5a:	fa f4       	brpl	.+62     	; 0x7c9a <__floatsisf+0x6c>
    7c5c:	bb 0f       	add	r27, r27
    7c5e:	11 f4       	brne	.+4      	; 0x7c64 <__floatsisf+0x36>
    7c60:	60 ff       	sbrs	r22, 0
    7c62:	1b c0       	rjmp	.+54     	; 0x7c9a <__floatsisf+0x6c>
    7c64:	6f 5f       	subi	r22, 0xFF	; 255
    7c66:	7f 4f       	sbci	r23, 0xFF	; 255
    7c68:	8f 4f       	sbci	r24, 0xFF	; 255
    7c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    7c6c:	16 c0       	rjmp	.+44     	; 0x7c9a <__floatsisf+0x6c>
    7c6e:	88 23       	and	r24, r24
    7c70:	11 f0       	breq	.+4      	; 0x7c76 <__floatsisf+0x48>
    7c72:	96 e9       	ldi	r25, 0x96	; 150
    7c74:	11 c0       	rjmp	.+34     	; 0x7c98 <__floatsisf+0x6a>
    7c76:	77 23       	and	r23, r23
    7c78:	21 f0       	breq	.+8      	; 0x7c82 <__floatsisf+0x54>
    7c7a:	9e e8       	ldi	r25, 0x8E	; 142
    7c7c:	87 2f       	mov	r24, r23
    7c7e:	76 2f       	mov	r23, r22
    7c80:	05 c0       	rjmp	.+10     	; 0x7c8c <__floatsisf+0x5e>
    7c82:	66 23       	and	r22, r22
    7c84:	71 f0       	breq	.+28     	; 0x7ca2 <__floatsisf+0x74>
    7c86:	96 e8       	ldi	r25, 0x86	; 134
    7c88:	86 2f       	mov	r24, r22
    7c8a:	70 e0       	ldi	r23, 0x00	; 0
    7c8c:	60 e0       	ldi	r22, 0x00	; 0
    7c8e:	2a f0       	brmi	.+10     	; 0x7c9a <__floatsisf+0x6c>
    7c90:	9a 95       	dec	r25
    7c92:	66 0f       	add	r22, r22
    7c94:	77 1f       	adc	r23, r23
    7c96:	88 1f       	adc	r24, r24
    7c98:	da f7       	brpl	.-10     	; 0x7c90 <__floatsisf+0x62>
    7c9a:	88 0f       	add	r24, r24
    7c9c:	96 95       	lsr	r25
    7c9e:	87 95       	ror	r24
    7ca0:	97 f9       	bld	r25, 7
    7ca2:	08 95       	ret

00007ca4 <__fp_cmp>:
    7ca4:	99 0f       	add	r25, r25
    7ca6:	00 08       	sbc	r0, r0
    7ca8:	55 0f       	add	r21, r21
    7caa:	aa 0b       	sbc	r26, r26
    7cac:	e0 e8       	ldi	r30, 0x80	; 128
    7cae:	fe ef       	ldi	r31, 0xFE	; 254
    7cb0:	16 16       	cp	r1, r22
    7cb2:	17 06       	cpc	r1, r23
    7cb4:	e8 07       	cpc	r30, r24
    7cb6:	f9 07       	cpc	r31, r25
    7cb8:	c0 f0       	brcs	.+48     	; 0x7cea <__fp_cmp+0x46>
    7cba:	12 16       	cp	r1, r18
    7cbc:	13 06       	cpc	r1, r19
    7cbe:	e4 07       	cpc	r30, r20
    7cc0:	f5 07       	cpc	r31, r21
    7cc2:	98 f0       	brcs	.+38     	; 0x7cea <__fp_cmp+0x46>
    7cc4:	62 1b       	sub	r22, r18
    7cc6:	73 0b       	sbc	r23, r19
    7cc8:	84 0b       	sbc	r24, r20
    7cca:	95 0b       	sbc	r25, r21
    7ccc:	39 f4       	brne	.+14     	; 0x7cdc <__fp_cmp+0x38>
    7cce:	0a 26       	eor	r0, r26
    7cd0:	61 f0       	breq	.+24     	; 0x7cea <__fp_cmp+0x46>
    7cd2:	23 2b       	or	r18, r19
    7cd4:	24 2b       	or	r18, r20
    7cd6:	25 2b       	or	r18, r21
    7cd8:	21 f4       	brne	.+8      	; 0x7ce2 <__fp_cmp+0x3e>
    7cda:	08 95       	ret
    7cdc:	0a 26       	eor	r0, r26
    7cde:	09 f4       	brne	.+2      	; 0x7ce2 <__fp_cmp+0x3e>
    7ce0:	a1 40       	sbci	r26, 0x01	; 1
    7ce2:	a6 95       	lsr	r26
    7ce4:	8f ef       	ldi	r24, 0xFF	; 255
    7ce6:	81 1d       	adc	r24, r1
    7ce8:	81 1d       	adc	r24, r1
    7cea:	08 95       	ret

00007cec <__fp_inf>:
    7cec:	97 f9       	bld	r25, 7
    7cee:	9f 67       	ori	r25, 0x7F	; 127
    7cf0:	80 e8       	ldi	r24, 0x80	; 128
    7cf2:	70 e0       	ldi	r23, 0x00	; 0
    7cf4:	60 e0       	ldi	r22, 0x00	; 0
    7cf6:	08 95       	ret

00007cf8 <__fp_nan>:
    7cf8:	9f ef       	ldi	r25, 0xFF	; 255
    7cfa:	80 ec       	ldi	r24, 0xC0	; 192
    7cfc:	08 95       	ret

00007cfe <__fp_powser>:
    7cfe:	df 93       	push	r29
    7d00:	cf 93       	push	r28
    7d02:	1f 93       	push	r17
    7d04:	0f 93       	push	r16
    7d06:	ff 92       	push	r15
    7d08:	ef 92       	push	r14
    7d0a:	df 92       	push	r13
    7d0c:	7b 01       	movw	r14, r22
    7d0e:	8c 01       	movw	r16, r24
    7d10:	68 94       	set
    7d12:	05 c0       	rjmp	.+10     	; 0x7d1e <__fp_powser+0x20>
    7d14:	da 2e       	mov	r13, r26
    7d16:	ef 01       	movw	r28, r30
    7d18:	ab d0       	rcall	.+342    	; 0x7e70 <__mulsf3x>
    7d1a:	fe 01       	movw	r30, r28
    7d1c:	e8 94       	clt
    7d1e:	a5 91       	lpm	r26, Z+
    7d20:	25 91       	lpm	r18, Z+
    7d22:	35 91       	lpm	r19, Z+
    7d24:	45 91       	lpm	r20, Z+
    7d26:	55 91       	lpm	r21, Z+
    7d28:	ae f3       	brts	.-22     	; 0x7d14 <__fp_powser+0x16>
    7d2a:	ef 01       	movw	r28, r30
    7d2c:	29 de       	rcall	.-942    	; 0x7980 <__addsf3x>
    7d2e:	fe 01       	movw	r30, r28
    7d30:	97 01       	movw	r18, r14
    7d32:	a8 01       	movw	r20, r16
    7d34:	da 94       	dec	r13
    7d36:	79 f7       	brne	.-34     	; 0x7d16 <__fp_powser+0x18>
    7d38:	df 90       	pop	r13
    7d3a:	ef 90       	pop	r14
    7d3c:	ff 90       	pop	r15
    7d3e:	0f 91       	pop	r16
    7d40:	1f 91       	pop	r17
    7d42:	cf 91       	pop	r28
    7d44:	df 91       	pop	r29
    7d46:	08 95       	ret

00007d48 <__fp_pscA>:
    7d48:	00 24       	eor	r0, r0
    7d4a:	0a 94       	dec	r0
    7d4c:	16 16       	cp	r1, r22
    7d4e:	17 06       	cpc	r1, r23
    7d50:	18 06       	cpc	r1, r24
    7d52:	09 06       	cpc	r0, r25
    7d54:	08 95       	ret

00007d56 <__fp_pscB>:
    7d56:	00 24       	eor	r0, r0
    7d58:	0a 94       	dec	r0
    7d5a:	12 16       	cp	r1, r18
    7d5c:	13 06       	cpc	r1, r19
    7d5e:	14 06       	cpc	r1, r20
    7d60:	05 06       	cpc	r0, r21
    7d62:	08 95       	ret
    7d64:	c9 cf       	rjmp	.-110    	; 0x7cf8 <__fp_nan>

00007d66 <__fp_rempio2>:
    7d66:	50 d0       	rcall	.+160    	; 0x7e08 <__fp_splitA>
    7d68:	e8 f3       	brcs	.-6      	; 0x7d64 <__fp_pscB+0xe>
    7d6a:	e8 94       	clt
    7d6c:	e0 e0       	ldi	r30, 0x00	; 0
    7d6e:	bb 27       	eor	r27, r27
    7d70:	9f 57       	subi	r25, 0x7F	; 127
    7d72:	f0 f0       	brcs	.+60     	; 0x7db0 <__fp_rempio2+0x4a>
    7d74:	2a ed       	ldi	r18, 0xDA	; 218
    7d76:	3f e0       	ldi	r19, 0x0F	; 15
    7d78:	49 ec       	ldi	r20, 0xC9	; 201
    7d7a:	06 c0       	rjmp	.+12     	; 0x7d88 <__fp_rempio2+0x22>
    7d7c:	ee 0f       	add	r30, r30
    7d7e:	bb 0f       	add	r27, r27
    7d80:	66 1f       	adc	r22, r22
    7d82:	77 1f       	adc	r23, r23
    7d84:	88 1f       	adc	r24, r24
    7d86:	28 f0       	brcs	.+10     	; 0x7d92 <__fp_rempio2+0x2c>
    7d88:	b2 3a       	cpi	r27, 0xA2	; 162
    7d8a:	62 07       	cpc	r22, r18
    7d8c:	73 07       	cpc	r23, r19
    7d8e:	84 07       	cpc	r24, r20
    7d90:	28 f0       	brcs	.+10     	; 0x7d9c <__fp_rempio2+0x36>
    7d92:	b2 5a       	subi	r27, 0xA2	; 162
    7d94:	62 0b       	sbc	r22, r18
    7d96:	73 0b       	sbc	r23, r19
    7d98:	84 0b       	sbc	r24, r20
    7d9a:	e3 95       	inc	r30
    7d9c:	9a 95       	dec	r25
    7d9e:	72 f7       	brpl	.-36     	; 0x7d7c <__fp_rempio2+0x16>
    7da0:	80 38       	cpi	r24, 0x80	; 128
    7da2:	30 f4       	brcc	.+12     	; 0x7db0 <__fp_rempio2+0x4a>
    7da4:	9a 95       	dec	r25
    7da6:	bb 0f       	add	r27, r27
    7da8:	66 1f       	adc	r22, r22
    7daa:	77 1f       	adc	r23, r23
    7dac:	88 1f       	adc	r24, r24
    7dae:	d2 f7       	brpl	.-12     	; 0x7da4 <__fp_rempio2+0x3e>
    7db0:	90 48       	sbci	r25, 0x80	; 128
    7db2:	c0 c0       	rjmp	.+384    	; 0x7f34 <__fp_mpack_finite>

00007db4 <__fp_round>:
    7db4:	09 2e       	mov	r0, r25
    7db6:	03 94       	inc	r0
    7db8:	00 0c       	add	r0, r0
    7dba:	11 f4       	brne	.+4      	; 0x7dc0 <__fp_round+0xc>
    7dbc:	88 23       	and	r24, r24
    7dbe:	52 f0       	brmi	.+20     	; 0x7dd4 <__fp_round+0x20>
    7dc0:	bb 0f       	add	r27, r27
    7dc2:	40 f4       	brcc	.+16     	; 0x7dd4 <__fp_round+0x20>
    7dc4:	bf 2b       	or	r27, r31
    7dc6:	11 f4       	brne	.+4      	; 0x7dcc <__fp_round+0x18>
    7dc8:	60 ff       	sbrs	r22, 0
    7dca:	04 c0       	rjmp	.+8      	; 0x7dd4 <__fp_round+0x20>
    7dcc:	6f 5f       	subi	r22, 0xFF	; 255
    7dce:	7f 4f       	sbci	r23, 0xFF	; 255
    7dd0:	8f 4f       	sbci	r24, 0xFF	; 255
    7dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    7dd4:	08 95       	ret

00007dd6 <__fp_sinus>:
    7dd6:	ef 93       	push	r30
    7dd8:	e0 ff       	sbrs	r30, 0
    7dda:	06 c0       	rjmp	.+12     	; 0x7de8 <__fp_sinus+0x12>
    7ddc:	a2 ea       	ldi	r26, 0xA2	; 162
    7dde:	2a ed       	ldi	r18, 0xDA	; 218
    7de0:	3f e0       	ldi	r19, 0x0F	; 15
    7de2:	49 ec       	ldi	r20, 0xC9	; 201
    7de4:	5f eb       	ldi	r21, 0xBF	; 191
    7de6:	cc dd       	rcall	.-1128   	; 0x7980 <__addsf3x>
    7de8:	e5 df       	rcall	.-54     	; 0x7db4 <__fp_round>
    7dea:	0f 90       	pop	r0
    7dec:	03 94       	inc	r0
    7dee:	01 fc       	sbrc	r0, 1
    7df0:	90 58       	subi	r25, 0x80	; 128
    7df2:	eb e7       	ldi	r30, 0x7B	; 123
    7df4:	f1 e0       	ldi	r31, 0x01	; 1
    7df6:	aa c0       	rjmp	.+340    	; 0x7f4c <__fp_powsodd>

00007df8 <__fp_split3>:
    7df8:	57 fd       	sbrc	r21, 7
    7dfa:	90 58       	subi	r25, 0x80	; 128
    7dfc:	44 0f       	add	r20, r20
    7dfe:	55 1f       	adc	r21, r21
    7e00:	59 f0       	breq	.+22     	; 0x7e18 <__fp_splitA+0x10>
    7e02:	5f 3f       	cpi	r21, 0xFF	; 255
    7e04:	71 f0       	breq	.+28     	; 0x7e22 <__fp_splitA+0x1a>
    7e06:	47 95       	ror	r20

00007e08 <__fp_splitA>:
    7e08:	88 0f       	add	r24, r24
    7e0a:	97 fb       	bst	r25, 7
    7e0c:	99 1f       	adc	r25, r25
    7e0e:	61 f0       	breq	.+24     	; 0x7e28 <__fp_splitA+0x20>
    7e10:	9f 3f       	cpi	r25, 0xFF	; 255
    7e12:	79 f0       	breq	.+30     	; 0x7e32 <__fp_splitA+0x2a>
    7e14:	87 95       	ror	r24
    7e16:	08 95       	ret
    7e18:	12 16       	cp	r1, r18
    7e1a:	13 06       	cpc	r1, r19
    7e1c:	14 06       	cpc	r1, r20
    7e1e:	55 1f       	adc	r21, r21
    7e20:	f2 cf       	rjmp	.-28     	; 0x7e06 <__fp_split3+0xe>
    7e22:	46 95       	lsr	r20
    7e24:	f1 df       	rcall	.-30     	; 0x7e08 <__fp_splitA>
    7e26:	08 c0       	rjmp	.+16     	; 0x7e38 <__fp_splitA+0x30>
    7e28:	16 16       	cp	r1, r22
    7e2a:	17 06       	cpc	r1, r23
    7e2c:	18 06       	cpc	r1, r24
    7e2e:	99 1f       	adc	r25, r25
    7e30:	f1 cf       	rjmp	.-30     	; 0x7e14 <__fp_splitA+0xc>
    7e32:	86 95       	lsr	r24
    7e34:	71 05       	cpc	r23, r1
    7e36:	61 05       	cpc	r22, r1
    7e38:	08 94       	sec
    7e3a:	08 95       	ret

00007e3c <__fp_zero>:
    7e3c:	e8 94       	clt

00007e3e <__fp_szero>:
    7e3e:	bb 27       	eor	r27, r27
    7e40:	66 27       	eor	r22, r22
    7e42:	77 27       	eor	r23, r23
    7e44:	cb 01       	movw	r24, r22
    7e46:	97 f9       	bld	r25, 7
    7e48:	08 95       	ret

00007e4a <inverse>:
    7e4a:	9b 01       	movw	r18, r22
    7e4c:	ac 01       	movw	r20, r24
    7e4e:	60 e0       	ldi	r22, 0x00	; 0
    7e50:	70 e0       	ldi	r23, 0x00	; 0
    7e52:	80 e8       	ldi	r24, 0x80	; 128
    7e54:	9f e3       	ldi	r25, 0x3F	; 63
    7e56:	50 ce       	rjmp	.-864    	; 0x7af8 <__divsf3>

00007e58 <__mulsf3>:
    7e58:	0b d0       	rcall	.+22     	; 0x7e70 <__mulsf3x>
    7e5a:	ac cf       	rjmp	.-168    	; 0x7db4 <__fp_round>
    7e5c:	75 df       	rcall	.-278    	; 0x7d48 <__fp_pscA>
    7e5e:	28 f0       	brcs	.+10     	; 0x7e6a <__mulsf3+0x12>
    7e60:	7a df       	rcall	.-268    	; 0x7d56 <__fp_pscB>
    7e62:	18 f0       	brcs	.+6      	; 0x7e6a <__mulsf3+0x12>
    7e64:	95 23       	and	r25, r21
    7e66:	09 f0       	breq	.+2      	; 0x7e6a <__mulsf3+0x12>
    7e68:	41 cf       	rjmp	.-382    	; 0x7cec <__fp_inf>
    7e6a:	46 cf       	rjmp	.-372    	; 0x7cf8 <__fp_nan>
    7e6c:	11 24       	eor	r1, r1
    7e6e:	e7 cf       	rjmp	.-50     	; 0x7e3e <__fp_szero>

00007e70 <__mulsf3x>:
    7e70:	c3 df       	rcall	.-122    	; 0x7df8 <__fp_split3>
    7e72:	a0 f3       	brcs	.-24     	; 0x7e5c <__mulsf3+0x4>

00007e74 <__mulsf3_pse>:
    7e74:	95 9f       	mul	r25, r21
    7e76:	d1 f3       	breq	.-12     	; 0x7e6c <__mulsf3+0x14>
    7e78:	95 0f       	add	r25, r21
    7e7a:	50 e0       	ldi	r21, 0x00	; 0
    7e7c:	55 1f       	adc	r21, r21
    7e7e:	62 9f       	mul	r22, r18
    7e80:	f0 01       	movw	r30, r0
    7e82:	72 9f       	mul	r23, r18
    7e84:	bb 27       	eor	r27, r27
    7e86:	f0 0d       	add	r31, r0
    7e88:	b1 1d       	adc	r27, r1
    7e8a:	63 9f       	mul	r22, r19
    7e8c:	aa 27       	eor	r26, r26
    7e8e:	f0 0d       	add	r31, r0
    7e90:	b1 1d       	adc	r27, r1
    7e92:	aa 1f       	adc	r26, r26
    7e94:	64 9f       	mul	r22, r20
    7e96:	66 27       	eor	r22, r22
    7e98:	b0 0d       	add	r27, r0
    7e9a:	a1 1d       	adc	r26, r1
    7e9c:	66 1f       	adc	r22, r22
    7e9e:	82 9f       	mul	r24, r18
    7ea0:	22 27       	eor	r18, r18
    7ea2:	b0 0d       	add	r27, r0
    7ea4:	a1 1d       	adc	r26, r1
    7ea6:	62 1f       	adc	r22, r18
    7ea8:	73 9f       	mul	r23, r19
    7eaa:	b0 0d       	add	r27, r0
    7eac:	a1 1d       	adc	r26, r1
    7eae:	62 1f       	adc	r22, r18
    7eb0:	83 9f       	mul	r24, r19
    7eb2:	a0 0d       	add	r26, r0
    7eb4:	61 1d       	adc	r22, r1
    7eb6:	22 1f       	adc	r18, r18
    7eb8:	74 9f       	mul	r23, r20
    7eba:	33 27       	eor	r19, r19
    7ebc:	a0 0d       	add	r26, r0
    7ebe:	61 1d       	adc	r22, r1
    7ec0:	23 1f       	adc	r18, r19
    7ec2:	84 9f       	mul	r24, r20
    7ec4:	60 0d       	add	r22, r0
    7ec6:	21 1d       	adc	r18, r1
    7ec8:	82 2f       	mov	r24, r18
    7eca:	76 2f       	mov	r23, r22
    7ecc:	6a 2f       	mov	r22, r26
    7ece:	11 24       	eor	r1, r1
    7ed0:	9f 57       	subi	r25, 0x7F	; 127
    7ed2:	50 40       	sbci	r21, 0x00	; 0
    7ed4:	8a f0       	brmi	.+34     	; 0x7ef8 <__mulsf3_pse+0x84>
    7ed6:	e1 f0       	breq	.+56     	; 0x7f10 <__mulsf3_pse+0x9c>
    7ed8:	88 23       	and	r24, r24
    7eda:	4a f0       	brmi	.+18     	; 0x7eee <__mulsf3_pse+0x7a>
    7edc:	ee 0f       	add	r30, r30
    7ede:	ff 1f       	adc	r31, r31
    7ee0:	bb 1f       	adc	r27, r27
    7ee2:	66 1f       	adc	r22, r22
    7ee4:	77 1f       	adc	r23, r23
    7ee6:	88 1f       	adc	r24, r24
    7ee8:	91 50       	subi	r25, 0x01	; 1
    7eea:	50 40       	sbci	r21, 0x00	; 0
    7eec:	a9 f7       	brne	.-22     	; 0x7ed8 <__mulsf3_pse+0x64>
    7eee:	9e 3f       	cpi	r25, 0xFE	; 254
    7ef0:	51 05       	cpc	r21, r1
    7ef2:	70 f0       	brcs	.+28     	; 0x7f10 <__mulsf3_pse+0x9c>
    7ef4:	fb ce       	rjmp	.-522    	; 0x7cec <__fp_inf>
    7ef6:	a3 cf       	rjmp	.-186    	; 0x7e3e <__fp_szero>
    7ef8:	5f 3f       	cpi	r21, 0xFF	; 255
    7efa:	ec f3       	brlt	.-6      	; 0x7ef6 <__mulsf3_pse+0x82>
    7efc:	98 3e       	cpi	r25, 0xE8	; 232
    7efe:	dc f3       	brlt	.-10     	; 0x7ef6 <__mulsf3_pse+0x82>
    7f00:	86 95       	lsr	r24
    7f02:	77 95       	ror	r23
    7f04:	67 95       	ror	r22
    7f06:	b7 95       	ror	r27
    7f08:	f7 95       	ror	r31
    7f0a:	e7 95       	ror	r30
    7f0c:	9f 5f       	subi	r25, 0xFF	; 255
    7f0e:	c1 f7       	brne	.-16     	; 0x7f00 <__mulsf3_pse+0x8c>
    7f10:	fe 2b       	or	r31, r30
    7f12:	88 0f       	add	r24, r24
    7f14:	91 1d       	adc	r25, r1
    7f16:	96 95       	lsr	r25
    7f18:	87 95       	ror	r24
    7f1a:	97 f9       	bld	r25, 7
    7f1c:	08 95       	ret

00007f1e <sin>:
    7f1e:	9f 93       	push	r25
    7f20:	22 df       	rcall	.-444    	; 0x7d66 <__fp_rempio2>
    7f22:	0f 90       	pop	r0
    7f24:	07 fc       	sbrc	r0, 7
    7f26:	ee 5f       	subi	r30, 0xFE	; 254
    7f28:	56 cf       	rjmp	.-340    	; 0x7dd6 <__fp_sinus>

00007f2a <square>:
    7f2a:	9b 01       	movw	r18, r22
    7f2c:	ac 01       	movw	r20, r24
    7f2e:	94 cf       	rjmp	.-216    	; 0x7e58 <__mulsf3>

00007f30 <__fp_mpack>:
    7f30:	9f 3f       	cpi	r25, 0xFF	; 255
    7f32:	31 f0       	breq	.+12     	; 0x7f40 <__fp_mpack_finite+0xc>

00007f34 <__fp_mpack_finite>:
    7f34:	91 50       	subi	r25, 0x01	; 1
    7f36:	20 f4       	brcc	.+8      	; 0x7f40 <__fp_mpack_finite+0xc>
    7f38:	87 95       	ror	r24
    7f3a:	77 95       	ror	r23
    7f3c:	67 95       	ror	r22
    7f3e:	b7 95       	ror	r27
    7f40:	88 0f       	add	r24, r24
    7f42:	91 1d       	adc	r25, r1
    7f44:	96 95       	lsr	r25
    7f46:	87 95       	ror	r24
    7f48:	97 f9       	bld	r25, 7
    7f4a:	08 95       	ret

00007f4c <__fp_powsodd>:
    7f4c:	9f 93       	push	r25
    7f4e:	8f 93       	push	r24
    7f50:	7f 93       	push	r23
    7f52:	6f 93       	push	r22
    7f54:	ff 93       	push	r31
    7f56:	ef 93       	push	r30
    7f58:	9b 01       	movw	r18, r22
    7f5a:	ac 01       	movw	r20, r24
    7f5c:	7d df       	rcall	.-262    	; 0x7e58 <__mulsf3>
    7f5e:	ef 91       	pop	r30
    7f60:	ff 91       	pop	r31
    7f62:	cd de       	rcall	.-614    	; 0x7cfe <__fp_powser>
    7f64:	2f 91       	pop	r18
    7f66:	3f 91       	pop	r19
    7f68:	4f 91       	pop	r20
    7f6a:	5f 91       	pop	r21
    7f6c:	75 cf       	rjmp	.-278    	; 0x7e58 <__mulsf3>

00007f6e <__mulsi3>:
    7f6e:	62 9f       	mul	r22, r18
    7f70:	d0 01       	movw	r26, r0
    7f72:	73 9f       	mul	r23, r19
    7f74:	f0 01       	movw	r30, r0
    7f76:	82 9f       	mul	r24, r18
    7f78:	e0 0d       	add	r30, r0
    7f7a:	f1 1d       	adc	r31, r1
    7f7c:	64 9f       	mul	r22, r20
    7f7e:	e0 0d       	add	r30, r0
    7f80:	f1 1d       	adc	r31, r1
    7f82:	92 9f       	mul	r25, r18
    7f84:	f0 0d       	add	r31, r0
    7f86:	83 9f       	mul	r24, r19
    7f88:	f0 0d       	add	r31, r0
    7f8a:	74 9f       	mul	r23, r20
    7f8c:	f0 0d       	add	r31, r0
    7f8e:	65 9f       	mul	r22, r21
    7f90:	f0 0d       	add	r31, r0
    7f92:	99 27       	eor	r25, r25
    7f94:	72 9f       	mul	r23, r18
    7f96:	b0 0d       	add	r27, r0
    7f98:	e1 1d       	adc	r30, r1
    7f9a:	f9 1f       	adc	r31, r25
    7f9c:	63 9f       	mul	r22, r19
    7f9e:	b0 0d       	add	r27, r0
    7fa0:	e1 1d       	adc	r30, r1
    7fa2:	f9 1f       	adc	r31, r25
    7fa4:	bd 01       	movw	r22, r26
    7fa6:	cf 01       	movw	r24, r30
    7fa8:	11 24       	eor	r1, r1
    7faa:	08 95       	ret

00007fac <__udivmodhi4>:
    7fac:	aa 1b       	sub	r26, r26
    7fae:	bb 1b       	sub	r27, r27
    7fb0:	51 e1       	ldi	r21, 0x11	; 17
    7fb2:	07 c0       	rjmp	.+14     	; 0x7fc2 <__udivmodhi4_ep>

00007fb4 <__udivmodhi4_loop>:
    7fb4:	aa 1f       	adc	r26, r26
    7fb6:	bb 1f       	adc	r27, r27
    7fb8:	a6 17       	cp	r26, r22
    7fba:	b7 07       	cpc	r27, r23
    7fbc:	10 f0       	brcs	.+4      	; 0x7fc2 <__udivmodhi4_ep>
    7fbe:	a6 1b       	sub	r26, r22
    7fc0:	b7 0b       	sbc	r27, r23

00007fc2 <__udivmodhi4_ep>:
    7fc2:	88 1f       	adc	r24, r24
    7fc4:	99 1f       	adc	r25, r25
    7fc6:	5a 95       	dec	r21
    7fc8:	a9 f7       	brne	.-22     	; 0x7fb4 <__udivmodhi4_loop>
    7fca:	80 95       	com	r24
    7fcc:	90 95       	com	r25
    7fce:	bc 01       	movw	r22, r24
    7fd0:	cd 01       	movw	r24, r26
    7fd2:	08 95       	ret

00007fd4 <__divmodhi4>:
    7fd4:	97 fb       	bst	r25, 7
    7fd6:	09 2e       	mov	r0, r25
    7fd8:	07 26       	eor	r0, r23
    7fda:	0a d0       	rcall	.+20     	; 0x7ff0 <__divmodhi4_neg1>
    7fdc:	77 fd       	sbrc	r23, 7
    7fde:	04 d0       	rcall	.+8      	; 0x7fe8 <__divmodhi4_neg2>
    7fe0:	e5 df       	rcall	.-54     	; 0x7fac <__udivmodhi4>
    7fe2:	06 d0       	rcall	.+12     	; 0x7ff0 <__divmodhi4_neg1>
    7fe4:	00 20       	and	r0, r0
    7fe6:	1a f4       	brpl	.+6      	; 0x7fee <__divmodhi4_exit>

00007fe8 <__divmodhi4_neg2>:
    7fe8:	70 95       	com	r23
    7fea:	61 95       	neg	r22
    7fec:	7f 4f       	sbci	r23, 0xFF	; 255

00007fee <__divmodhi4_exit>:
    7fee:	08 95       	ret

00007ff0 <__divmodhi4_neg1>:
    7ff0:	f6 f7       	brtc	.-4      	; 0x7fee <__divmodhi4_exit>
    7ff2:	90 95       	com	r25
    7ff4:	81 95       	neg	r24
    7ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    7ff8:	08 95       	ret

00007ffa <__divmodsi4>:
    7ffa:	97 fb       	bst	r25, 7
    7ffc:	09 2e       	mov	r0, r25
    7ffe:	05 26       	eor	r0, r21
    8000:	0e d0       	rcall	.+28     	; 0x801e <__divmodsi4_neg1>
    8002:	57 fd       	sbrc	r21, 7
    8004:	04 d0       	rcall	.+8      	; 0x800e <__divmodsi4_neg2>
    8006:	14 d0       	rcall	.+40     	; 0x8030 <__udivmodsi4>
    8008:	0a d0       	rcall	.+20     	; 0x801e <__divmodsi4_neg1>
    800a:	00 1c       	adc	r0, r0
    800c:	38 f4       	brcc	.+14     	; 0x801c <__divmodsi4_exit>

0000800e <__divmodsi4_neg2>:
    800e:	50 95       	com	r21
    8010:	40 95       	com	r20
    8012:	30 95       	com	r19
    8014:	21 95       	neg	r18
    8016:	3f 4f       	sbci	r19, 0xFF	; 255
    8018:	4f 4f       	sbci	r20, 0xFF	; 255
    801a:	5f 4f       	sbci	r21, 0xFF	; 255

0000801c <__divmodsi4_exit>:
    801c:	08 95       	ret

0000801e <__divmodsi4_neg1>:
    801e:	f6 f7       	brtc	.-4      	; 0x801c <__divmodsi4_exit>
    8020:	90 95       	com	r25
    8022:	80 95       	com	r24
    8024:	70 95       	com	r23
    8026:	61 95       	neg	r22
    8028:	7f 4f       	sbci	r23, 0xFF	; 255
    802a:	8f 4f       	sbci	r24, 0xFF	; 255
    802c:	9f 4f       	sbci	r25, 0xFF	; 255
    802e:	08 95       	ret

00008030 <__udivmodsi4>:
    8030:	a1 e2       	ldi	r26, 0x21	; 33
    8032:	1a 2e       	mov	r1, r26
    8034:	aa 1b       	sub	r26, r26
    8036:	bb 1b       	sub	r27, r27
    8038:	fd 01       	movw	r30, r26
    803a:	0d c0       	rjmp	.+26     	; 0x8056 <__udivmodsi4_ep>

0000803c <__udivmodsi4_loop>:
    803c:	aa 1f       	adc	r26, r26
    803e:	bb 1f       	adc	r27, r27
    8040:	ee 1f       	adc	r30, r30
    8042:	ff 1f       	adc	r31, r31
    8044:	a2 17       	cp	r26, r18
    8046:	b3 07       	cpc	r27, r19
    8048:	e4 07       	cpc	r30, r20
    804a:	f5 07       	cpc	r31, r21
    804c:	20 f0       	brcs	.+8      	; 0x8056 <__udivmodsi4_ep>
    804e:	a2 1b       	sub	r26, r18
    8050:	b3 0b       	sbc	r27, r19
    8052:	e4 0b       	sbc	r30, r20
    8054:	f5 0b       	sbc	r31, r21

00008056 <__udivmodsi4_ep>:
    8056:	66 1f       	adc	r22, r22
    8058:	77 1f       	adc	r23, r23
    805a:	88 1f       	adc	r24, r24
    805c:	99 1f       	adc	r25, r25
    805e:	1a 94       	dec	r1
    8060:	69 f7       	brne	.-38     	; 0x803c <__udivmodsi4_loop>
    8062:	60 95       	com	r22
    8064:	70 95       	com	r23
    8066:	80 95       	com	r24
    8068:	90 95       	com	r25
    806a:	9b 01       	movw	r18, r22
    806c:	ac 01       	movw	r20, r24
    806e:	bd 01       	movw	r22, r26
    8070:	cf 01       	movw	r24, r30
    8072:	08 95       	ret

00008074 <do_rand>:
    8074:	af 92       	push	r10
    8076:	bf 92       	push	r11
    8078:	cf 92       	push	r12
    807a:	df 92       	push	r13
    807c:	ef 92       	push	r14
    807e:	ff 92       	push	r15
    8080:	0f 93       	push	r16
    8082:	1f 93       	push	r17
    8084:	cf 93       	push	r28
    8086:	df 93       	push	r29
    8088:	ec 01       	movw	r28, r24
    808a:	68 81       	ld	r22, Y
    808c:	79 81       	ldd	r23, Y+1	; 0x01
    808e:	8a 81       	ldd	r24, Y+2	; 0x02
    8090:	9b 81       	ldd	r25, Y+3	; 0x03
    8092:	61 15       	cp	r22, r1
    8094:	71 05       	cpc	r23, r1
    8096:	81 05       	cpc	r24, r1
    8098:	91 05       	cpc	r25, r1
    809a:	21 f4       	brne	.+8      	; 0x80a4 <do_rand+0x30>
    809c:	64 e2       	ldi	r22, 0x24	; 36
    809e:	79 ed       	ldi	r23, 0xD9	; 217
    80a0:	8b e5       	ldi	r24, 0x5B	; 91
    80a2:	97 e0       	ldi	r25, 0x07	; 7
    80a4:	2d e1       	ldi	r18, 0x1D	; 29
    80a6:	33 ef       	ldi	r19, 0xF3	; 243
    80a8:	41 e0       	ldi	r20, 0x01	; 1
    80aa:	50 e0       	ldi	r21, 0x00	; 0
    80ac:	0e 94 fd 3f 	call	0x7ffa	; 0x7ffa <__divmodsi4>
    80b0:	79 01       	movw	r14, r18
    80b2:	8a 01       	movw	r16, r20
    80b4:	27 ea       	ldi	r18, 0xA7	; 167
    80b6:	31 e4       	ldi	r19, 0x41	; 65
    80b8:	40 e0       	ldi	r20, 0x00	; 0
    80ba:	50 e0       	ldi	r21, 0x00	; 0
    80bc:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <__mulsi3>
    80c0:	5b 01       	movw	r10, r22
    80c2:	6c 01       	movw	r12, r24
    80c4:	c8 01       	movw	r24, r16
    80c6:	b7 01       	movw	r22, r14
    80c8:	2c ee       	ldi	r18, 0xEC	; 236
    80ca:	34 ef       	ldi	r19, 0xF4	; 244
    80cc:	4f ef       	ldi	r20, 0xFF	; 255
    80ce:	5f ef       	ldi	r21, 0xFF	; 255
    80d0:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <__mulsi3>
    80d4:	6a 0d       	add	r22, r10
    80d6:	7b 1d       	adc	r23, r11
    80d8:	8c 1d       	adc	r24, r12
    80da:	9d 1d       	adc	r25, r13
    80dc:	97 ff       	sbrs	r25, 7
    80de:	04 c0       	rjmp	.+8      	; 0x80e8 <do_rand+0x74>
    80e0:	61 50       	subi	r22, 0x01	; 1
    80e2:	70 40       	sbci	r23, 0x00	; 0
    80e4:	80 40       	sbci	r24, 0x00	; 0
    80e6:	90 48       	sbci	r25, 0x80	; 128
    80e8:	68 83       	st	Y, r22
    80ea:	79 83       	std	Y+1, r23	; 0x01
    80ec:	8a 83       	std	Y+2, r24	; 0x02
    80ee:	9b 83       	std	Y+3, r25	; 0x03
    80f0:	7f 77       	andi	r23, 0x7F	; 127
    80f2:	cb 01       	movw	r24, r22
    80f4:	df 91       	pop	r29
    80f6:	cf 91       	pop	r28
    80f8:	1f 91       	pop	r17
    80fa:	0f 91       	pop	r16
    80fc:	ff 90       	pop	r15
    80fe:	ef 90       	pop	r14
    8100:	df 90       	pop	r13
    8102:	cf 90       	pop	r12
    8104:	bf 90       	pop	r11
    8106:	af 90       	pop	r10
    8108:	08 95       	ret

0000810a <rand_r>:
    810a:	0e 94 3a 40 	call	0x8074	; 0x8074 <do_rand>
    810e:	08 95       	ret

00008110 <rand>:
    8110:	89 e1       	ldi	r24, 0x19	; 25
    8112:	92 e0       	ldi	r25, 0x02	; 2
    8114:	0e 94 3a 40 	call	0x8074	; 0x8074 <do_rand>
    8118:	08 95       	ret

0000811a <srand>:
    811a:	a0 e0       	ldi	r26, 0x00	; 0
    811c:	b0 e0       	ldi	r27, 0x00	; 0
    811e:	80 93 19 02 	sts	0x0219, r24
    8122:	90 93 1a 02 	sts	0x021A, r25
    8126:	a0 93 1b 02 	sts	0x021B, r26
    812a:	b0 93 1c 02 	sts	0x021C, r27
    812e:	08 95       	ret

00008130 <__eerd_block_m2560>:
    8130:	dc 01       	movw	r26, r24
    8132:	cb 01       	movw	r24, r22

00008134 <__eerd_blraw_m2560>:
    8134:	fc 01       	movw	r30, r24
    8136:	f9 99       	sbic	0x1f, 1	; 31
    8138:	fe cf       	rjmp	.-4      	; 0x8136 <__eerd_blraw_m2560+0x2>
    813a:	06 c0       	rjmp	.+12     	; 0x8148 <__eerd_blraw_m2560+0x14>
    813c:	f2 bd       	out	0x22, r31	; 34
    813e:	e1 bd       	out	0x21, r30	; 33
    8140:	f8 9a       	sbi	0x1f, 0	; 31
    8142:	31 96       	adiw	r30, 0x01	; 1
    8144:	00 b4       	in	r0, 0x20	; 32
    8146:	0d 92       	st	X+, r0
    8148:	41 50       	subi	r20, 0x01	; 1
    814a:	50 40       	sbci	r21, 0x00	; 0
    814c:	b8 f7       	brcc	.-18     	; 0x813c <__eerd_blraw_m2560+0x8>
    814e:	08 95       	ret

00008150 <__eerd_byte_m2560>:
    8150:	f9 99       	sbic	0x1f, 1	; 31
    8152:	fe cf       	rjmp	.-4      	; 0x8150 <__eerd_byte_m2560>
    8154:	92 bd       	out	0x22, r25	; 34
    8156:	81 bd       	out	0x21, r24	; 33
    8158:	f8 9a       	sbi	0x1f, 0	; 31
    815a:	99 27       	eor	r25, r25
    815c:	80 b5       	in	r24, 0x20	; 32
    815e:	08 95       	ret

00008160 <__eerd_word_m2560>:
    8160:	a8 e1       	ldi	r26, 0x18	; 24
    8162:	b0 e0       	ldi	r27, 0x00	; 0
    8164:	42 e0       	ldi	r20, 0x02	; 2
    8166:	50 e0       	ldi	r21, 0x00	; 0
    8168:	0c 94 9a 40 	jmp	0x8134	; 0x8134 <__eerd_blraw_m2560>

0000816c <__eeupd_block_m2560>:
    816c:	dc 01       	movw	r26, r24
    816e:	a4 0f       	add	r26, r20
    8170:	b5 1f       	adc	r27, r21
    8172:	41 50       	subi	r20, 0x01	; 1
    8174:	50 40       	sbci	r21, 0x00	; 0
    8176:	48 f0       	brcs	.+18     	; 0x818a <__eeupd_block_m2560+0x1e>
    8178:	cb 01       	movw	r24, r22
    817a:	84 0f       	add	r24, r20
    817c:	95 1f       	adc	r25, r21
    817e:	2e 91       	ld	r18, -X
    8180:	0e 94 c7 40 	call	0x818e	; 0x818e <__eeupd_r18_m2560>
    8184:	41 50       	subi	r20, 0x01	; 1
    8186:	50 40       	sbci	r21, 0x00	; 0
    8188:	d0 f7       	brcc	.-12     	; 0x817e <__eeupd_block_m2560+0x12>
    818a:	08 95       	ret

0000818c <__eeupd_byte_m2560>:
    818c:	26 2f       	mov	r18, r22

0000818e <__eeupd_r18_m2560>:
    818e:	f9 99       	sbic	0x1f, 1	; 31
    8190:	fe cf       	rjmp	.-4      	; 0x818e <__eeupd_r18_m2560>
    8192:	92 bd       	out	0x22, r25	; 34
    8194:	81 bd       	out	0x21, r24	; 33
    8196:	f8 9a       	sbi	0x1f, 0	; 31
    8198:	01 97       	sbiw	r24, 0x01	; 1
    819a:	00 b4       	in	r0, 0x20	; 32
    819c:	02 16       	cp	r0, r18
    819e:	39 f0       	breq	.+14     	; 0x81ae <__eeupd_r18_m2560+0x20>
    81a0:	1f ba       	out	0x1f, r1	; 31
    81a2:	20 bd       	out	0x20, r18	; 32
    81a4:	0f b6       	in	r0, 0x3f	; 63
    81a6:	f8 94       	cli
    81a8:	fa 9a       	sbi	0x1f, 2	; 31
    81aa:	f9 9a       	sbi	0x1f, 1	; 31
    81ac:	0f be       	out	0x3f, r0	; 63
    81ae:	08 95       	ret

000081b0 <__eeupd_word_m2560>:
    81b0:	01 96       	adiw	r24, 0x01	; 1
    81b2:	27 2f       	mov	r18, r23
    81b4:	0e 94 c7 40 	call	0x818e	; 0x818e <__eeupd_r18_m2560>
    81b8:	0c 94 c6 40 	jmp	0x818c	; 0x818c <__eeupd_byte_m2560>

000081bc <__eewr_byte_m2560>:
    81bc:	26 2f       	mov	r18, r22

000081be <__eewr_r18_m2560>:
    81be:	f9 99       	sbic	0x1f, 1	; 31
    81c0:	fe cf       	rjmp	.-4      	; 0x81be <__eewr_r18_m2560>
    81c2:	1f ba       	out	0x1f, r1	; 31
    81c4:	92 bd       	out	0x22, r25	; 34
    81c6:	81 bd       	out	0x21, r24	; 33
    81c8:	20 bd       	out	0x20, r18	; 32
    81ca:	0f b6       	in	r0, 0x3f	; 63
    81cc:	f8 94       	cli
    81ce:	fa 9a       	sbi	0x1f, 2	; 31
    81d0:	f9 9a       	sbi	0x1f, 1	; 31
    81d2:	0f be       	out	0x3f, r0	; 63
    81d4:	01 96       	adiw	r24, 0x01	; 1
    81d6:	08 95       	ret

000081d8 <__eewr_word_m2560>:
    81d8:	0e 94 de 40 	call	0x81bc	; 0x81bc <__eewr_byte_m2560>
    81dc:	27 2f       	mov	r18, r23
    81de:	0c 94 df 40 	jmp	0x81be	; 0x81be <__eewr_r18_m2560>

000081e2 <_exit>:
    81e2:	ff cf       	rjmp	.-2      	; 0x81e2 <_exit>
