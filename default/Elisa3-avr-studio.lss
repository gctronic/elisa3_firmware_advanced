
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00005b20  00005bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005b20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000253  00800324  00800324  00005cd8  2**0
                  ALLOC
  3 .stab         000025ec  00000000  00000000  00005cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000088f  00000000  00000000  000082c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b8  00000000  00000000  00008b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000011d3  00000000  00000000  00008e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000048df  00000000  00000000  00009fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000017df  00000000  00000000  0000e8bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000055d7  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007e0  00000000  00000000  00015674  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001142  00000000  00000000  00015e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001754  00000000  00000000  00016f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000219  00000000  00000000  000186ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000190  00000000  00000000  00018903  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__vector_32>
      84:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 03 1c 	jmp	0x3806	; 0x3806 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 d7 1b 	jmp	0x37ae	; 0x37ae <__vector_42>
      ac:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	52 0e       	add	r5, r18
      e6:	36 0e       	add	r3, r22
      e8:	04 0e       	add	r0, r20
      ea:	c7 0e       	add	r12, r23
      ec:	91 0e       	add	r9, r17
      ee:	ba 0e       	add	r11, r26
      f0:	db 0d       	add	r29, r11
      f2:	bf 0d       	add	r27, r15
      f4:	92 0d       	add	r25, r2
      f6:	7a 0d       	add	r23, r10
      f8:	1b 0d       	add	r17, r11
      fa:	1b 0d       	add	r17, r11
      fc:	1b 0d       	add	r17, r11
      fe:	1b 0d       	add	r17, r11
     100:	1b 0d       	add	r17, r11
     102:	1b 0d       	add	r17, r11
     104:	6e 0d       	add	r22, r14
     106:	63 0d       	add	r22, r3
     108:	1b 0d       	add	r17, r11
     10a:	1b 0d       	add	r17, r11
     10c:	1b 0d       	add	r17, r11
     10e:	1b 0d       	add	r17, r11
     110:	1b 0d       	add	r17, r11
     112:	1b 0d       	add	r17, r11
     114:	1b 0d       	add	r17, r11
     116:	1b 0d       	add	r17, r11
     118:	1b 0d       	add	r17, r11
     11a:	1b 0d       	add	r17, r11
     11c:	1b 0d       	add	r17, r11
     11e:	1b 0d       	add	r17, r11
     120:	92 0d       	add	r25, r2
     122:	04 0e       	add	r0, r20
     124:	57 0d       	add	r21, r7
     126:	52 0d       	add	r21, r2
     128:	1b 0d       	add	r17, r11
     12a:	1b 0d       	add	r17, r11
     12c:	1b 0d       	add	r17, r11
     12e:	1b 0d       	add	r17, r11
     130:	1b 0d       	add	r17, r11
     132:	1b 0d       	add	r17, r11
     134:	1b 0d       	add	r17, r11
     136:	1b 0d       	add	r17, r11
     138:	1b 0d       	add	r17, r11
     13a:	1b 0d       	add	r17, r11
     13c:	1b 0d       	add	r17, r11
     13e:	1b 0d       	add	r17, r11
     140:	91 0e       	add	r9, r17
     142:	db 0d       	add	r29, r11
     144:	1b 0d       	add	r17, r11
     146:	1b 0d       	add	r17, r11
     148:	52 0e       	add	r5, r18
     14a:	ba 0e       	add	r11, r26
     14c:	7b 0e       	add	r7, r27
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e0 e2       	ldi	r30, 0x20	; 32
     194:	fb e5       	ldi	r31, 0x5B	; 91
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a4 32       	cpi	r26, 0x24	; 36
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	15 e0       	ldi	r17, 0x05	; 5
     1a4:	a4 e2       	ldi	r26, 0x24	; 36
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a7 37       	cpi	r26, 0x77	; 119
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 8f 2d 	jmp	0x5b1e	; 0x5b1e <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	8f 92       	push	r8
     1c0:	9f 92       	push	r9
     1c2:	af 92       	push	r10
     1c4:	bf 92       	push	r11
     1c6:	cf 92       	push	r12
     1c8:	df 92       	push	r13
     1ca:	ef 92       	push	r14
     1cc:	ff 92       	push	r15
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;

	initPeripherals();
     1d6:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <initPeripherals>

	calibrateSensors();
     1da:	0e 94 0c 22 	call	0x4418	; 0x4418 <calibrateSensors>

	initBehaviors();
     1de:	0e 94 bc 1c 	call	0x3978	; 0x3978 <initBehaviors>

	startTime = getTime100MicroSec();
     1e2:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
     1e6:	7b 01       	movw	r14, r22
     1e8:	8c 01       	movw	r16, r24


int main(void) {

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;
     1ea:	cc 24       	eor	r12, r12
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5 || currentSelector==7) {
				pwm_red = rand() % 255;
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d0 e0       	ldi	r29, 0x00	; 0
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
						pwm_red = 255;
     1f0:	dd 24       	eor	r13, r13
     1f2:	da 94       	dec	r13
						pwm_green = 255;
						pwm_blue = 254;
     1f4:	6e ef       	ldi	r22, 0xFE	; 254
     1f6:	86 2e       	mov	r8, r22
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
     1f8:	52 e0       	ldi	r21, 0x02	; 2
     1fa:	a5 2e       	mov	r10, r21
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
								setLeftSpeed(-20);
								demoStartTime = getTime100MicroSec();
								demoState = 4;
     1fc:	44 e0       	ldi	r20, 0x04	; 4
     1fe:	b4 2e       	mov	r11, r20
							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
								setRightSpeed(20);
								setLeftSpeed(-20);								
								demoStartTime = getTime100MicroSec();
								demoState = 5;							
     200:	35 e0       	ldi	r19, 0x05	; 5
     202:	93 2e       	mov	r9, r19
	startTime = getTime100MicroSec();


	while(1) {

		currentSelector = getSelector();	// update selector position
     204:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <getSelector>
     208:	80 93 37 05 	sts	0x0537, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     20c:	0e 94 4c 21 	call	0x4298	; 0x4298 <readAccelXYZ>

		computeAngle();
     210:	0e 94 88 26 	call	0x4d10	; 0x4d10 <computeAngle>
	
		endTime = getTime100MicroSec();
     214:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     218:	6e 19       	sub	r22, r14
     21a:	7f 09       	sbc	r23, r15
     21c:	80 0b       	sbc	r24, r16
     21e:	91 0b       	sbc	r25, r17
     220:	6e 31       	cpi	r22, 0x1E	; 30
     222:	2b e4       	ldi	r18, 0x4B	; 75
     224:	72 07       	cpc	r23, r18
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	82 07       	cpc	r24, r18
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	92 07       	cpc	r25, r18
     22e:	08 f0       	brcs	.+2      	; 0x232 <main+0x74>
     230:	92 c0       	rjmp	.+292    	; 0x356 <main+0x198>

			startTime = getTime100MicroSec();
		}


		handleIRRemoteCommands();
     232:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <handleIRRemoteCommands>


		handleRFCommands();
     236:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <handleRFCommands>

		if(currentSelector != 6) {
     23a:	80 91 37 05 	lds	r24, 0x0537
     23e:	86 30       	cpi	r24, 0x06	; 6
     240:	09 f0       	breq	.+2      	; 0x244 <main+0x86>
     242:	6e c0       	rjmp	.+220    	; 0x320 <main+0x162>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     244:	90 91 0f 05 	lds	r25, 0x050F
     248:	91 30       	cpi	r25, 0x01	; 1
     24a:	09 f4       	brne	.+2      	; 0x24e <main+0x90>
     24c:	c9 c1       	rjmp	.+914    	; 0x5e0 <main+0x422>
     24e:	91 30       	cpi	r25, 0x01	; 1
     250:	08 f0       	brcs	.+2      	; 0x254 <main+0x96>
     252:	a7 c1       	rjmp	.+846    	; 0x5a2 <main+0x3e4>
						case 0:
							setRightSpeed(0);
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	0e 94 06 1b 	call	0x360c	; 0x360c <setRightSpeed>
							setLeftSpeed(0);
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	0e 94 cc 1a 	call	0x3598	; 0x3598 <setLeftSpeed>
							turnOffGreenLeds();
     260:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <turnOffGreenLeds>
							pwm_red=255;
     264:	d0 92 0c 02 	sts	0x020C, r13
							pwm_green=255;
     268:	d0 92 0d 02 	sts	0x020D, r13
							pwm_blue=255;
     26c:	d0 92 0e 02 	sts	0x020E, r13
							updateRedLed(pwm_red);
     270:	8f ef       	ldi	r24, 0xFF	; 255
     272:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <updateRedLed>
							updateGreenLed(pwm_green);
     276:	80 91 0d 02 	lds	r24, 0x020D
     27a:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <updateGreenLed>
							updateBlueLed(pwm_blue);
     27e:	80 91 0e 02 	lds	r24, 0x020E
     282:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <updateBlueLed>
							LED_IR1_HIGH;
     286:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     288:	45 9a       	sbi	0x08, 5	; 8
     28a:	90 91 37 05 	lds	r25, 0x0537

					break;
  
		}

		if(currentSelector != 0) {
     28e:	99 23       	and	r25, r25
     290:	09 f0       	breq	.+2      	; 0x294 <main+0xd6>
     292:	5c c0       	rjmp	.+184    	; 0x34c <main+0x18e>
     294:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     296:	c8 16       	cp	r12, r24
     298:	09 f4       	brne	.+2      	; 0x29c <main+0xde>
     29a:	b4 cf       	rjmp	.-152    	; 0x204 <main+0x46>
			disableObstacleAvoidance();
     29c:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <disableObstacleAvoidance>
			disableCliffAvoidance();
     2a0:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     2a4:	80 91 0b 01 	lds	r24, 0x010B
     2a8:	81 60       	ori	r24, 0x01	; 1
     2aa:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     2ae:	80 91 0b 01 	lds	r24, 0x010B
     2b2:	82 60       	ori	r24, 0x02	; 2
     2b4:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     2b8:	80 91 0b 01 	lds	r24, 0x010B
     2bc:	84 60       	ori	r24, 0x04	; 4
     2be:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     2c2:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     2c4:	80 91 0b 01 	lds	r24, 0x010B
     2c8:	80 61       	ori	r24, 0x10	; 16
     2ca:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     2ce:	80 91 0b 01 	lds	r24, 0x010B
     2d2:	80 62       	ori	r24, 0x20	; 32
     2d4:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     2d8:	80 91 0b 01 	lds	r24, 0x010B
     2dc:	80 64       	ori	r24, 0x40	; 64
     2de:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     2e2:	80 91 0b 01 	lds	r24, 0x010B
     2e6:	80 68       	ori	r24, 0x80	; 128
     2e8:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     2ec:	d0 92 0c 02 	sts	0x020C, r13
			pwm_green = 255;
     2f0:	d0 92 0d 02 	sts	0x020D, r13
			pwm_blue = 255;
     2f4:	d0 92 0e 02 	sts	0x020E, r13
			updateRedLed(pwm_red);
     2f8:	8f ef       	ldi	r24, 0xFF	; 255
     2fa:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <updateRedLed>
			updateGreenLed(pwm_green);
     2fe:	80 91 0d 02 	lds	r24, 0x020D
     302:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <updateGreenLed>
			updateBlueLed(pwm_blue);
     306:	80 91 0e 02 	lds	r24, 0x020E
     30a:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <updateBlueLed>
			setRightSpeed(0);
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 06 1b 	call	0x360c	; 0x360c <setRightSpeed>
			setLeftSpeed(0);
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 cc 1a 	call	0x3598	; 0x3598 <setLeftSpeed>
     31a:	c0 90 37 05 	lds	r12, 0x0537
     31e:	72 cf       	rjmp	.-284    	; 0x204 <main+0x46>


		handleRFCommands();

		if(currentSelector != 6) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
		}

		switch(currentSelector) {
     326:	90 91 37 05 	lds	r25, 0x0537
     32a:	89 2f       	mov	r24, r25
     32c:	93 30       	cpi	r25, 0x03	; 3
     32e:	39 f1       	breq	.+78     	; 0x37e <main+0x1c0>
     330:	94 30       	cpi	r25, 0x04	; 4
     332:	60 f5       	brcc	.+88     	; 0x38c <main+0x1ce>
     334:	91 30       	cpi	r25, 0x01	; 1
     336:	09 f4       	brne	.+2      	; 0x33a <main+0x17c>
     338:	c8 c0       	rjmp	.+400    	; 0x4ca <main+0x30c>
     33a:	92 30       	cpi	r25, 0x02	; 2
     33c:	10 f5       	brcc	.+68     	; 0x382 <main+0x1c4>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     33e:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <handleMotorsWithNoController>
     342:	90 91 37 05 	lds	r25, 0x0537

					break;
  
		}

		if(currentSelector != 0) {
     346:	99 23       	and	r25, r25
     348:	09 f4       	brne	.+2      	; 0x34c <main+0x18e>
     34a:	a4 cf       	rjmp	.-184    	; 0x294 <main+0xd6>
			handleMotorsWithSpeedController();  
     34c:	0e 94 13 1a 	call	0x3426	; 0x3426 <handleMotorsWithSpeedController>
     350:	80 91 37 05 	lds	r24, 0x0537
     354:	a0 cf       	rjmp	.-192    	; 0x296 <main+0xd8>

		computeAngle();
	
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     356:	0e 94 44 16 	call	0x2c88	; 0x2c88 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5 || currentSelector==7) {
     35a:	80 91 37 05 	lds	r24, 0x0537
     35e:	98 2f       	mov	r25, r24
     360:	94 50       	subi	r25, 0x04	; 4
     362:	92 30       	cpi	r25, 0x02	; 2
     364:	08 f4       	brcc	.+2      	; 0x368 <main+0x1aa>
     366:	b6 c0       	rjmp	.+364    	; 0x4d4 <main+0x316>
     368:	87 30       	cpi	r24, 0x07	; 7
     36a:	09 f4       	brne	.+2      	; 0x36e <main+0x1b0>
     36c:	b3 c0       	rjmp	.+358    	; 0x4d4 <main+0x316>
				pwm_red = rand() % 255;
				pwm_green = rand() % 255;
				pwm_blue = rand() % 255;
			} else if(currentSelector==6) {
     36e:	86 30       	cpi	r24, 0x06	; 6
     370:	09 f4       	brne	.+2      	; 0x374 <main+0x1b6>
     372:	c6 c0       	rjmp	.+396    	; 0x500 <main+0x342>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     374:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
     378:	7b 01       	movw	r14, r22
     37a:	8c 01       	movw	r16, r24
     37c:	5a cf       	rjmp	.-332    	; 0x232 <main+0x74>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     37e:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <enableObstacleAvoidance>
					enableCliffAvoidance();
     382:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <enableCliffAvoidance>
     386:	90 91 37 05 	lds	r25, 0x0537
					break;
     38a:	81 cf       	rjmp	.-254    	; 0x28e <main+0xd0>

		if(currentSelector != 6) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     38c:	95 30       	cpi	r25, 0x05	; 5
     38e:	09 f4       	brne	.+2      	; 0x392 <main+0x1d4>
     390:	85 c0       	rjmp	.+266    	; 0x49c <main+0x2de>
     392:	95 30       	cpi	r25, 0x05	; 5
     394:	08 f4       	brcc	.+2      	; 0x398 <main+0x1da>
     396:	4f c0       	rjmp	.+158    	; 0x436 <main+0x278>
     398:	96 30       	cpi	r25, 0x06	; 6
     39a:	09 f4       	brne	.+2      	; 0x39e <main+0x1e0>
     39c:	53 cf       	rjmp	.-346    	; 0x244 <main+0x86>
     39e:	97 30       	cpi	r25, 0x07	; 7
     3a0:	09 f0       	breq	.+2      	; 0x3a4 <main+0x1e6>
     3a2:	75 cf       	rjmp	.-278    	; 0x28e <main+0xd0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     3a4:	80 91 3b 05 	lds	r24, 0x053B
     3a8:	82 30       	cpi	r24, 0x02	; 2
     3aa:	09 f4       	brne	.+2      	; 0x3ae <main+0x1f0>
     3ac:	f9 c2       	rjmp	.+1522   	; 0x9a0 <main+0x7e2>
     3ae:	83 30       	cpi	r24, 0x03	; 3
     3b0:	08 f0       	brcs	.+2      	; 0x3b4 <main+0x1f6>
     3b2:	be c0       	rjmp	.+380    	; 0x530 <main+0x372>
     3b4:	88 23       	and	r24, r24
     3b6:	09 f0       	breq	.+2      	; 0x3ba <main+0x1fc>
     3b8:	98 c2       	rjmp	.+1328   	; 0x8ea <main+0x72c>
						case 0:	// move around
							turnOnGreenLeds();
     3ba:	0e 94 06 20 	call	0x400c	; 0x400c <turnOnGreenLeds>
							lineFound = 0;
     3be:	10 92 3c 05 	sts	0x053C, r1
							enableObstacleAvoidance();
     3c2:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <enableObstacleAvoidance>
							setRightSpeed(20);
     3c6:	84 e1       	ldi	r24, 0x14	; 20
     3c8:	0e 94 06 1b 	call	0x360c	; 0x360c <setRightSpeed>
							setLeftSpeed(20);
     3cc:	84 e1       	ldi	r24, 0x14	; 20
     3ce:	0e 94 cc 1a 	call	0x3598	; 0x3598 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     3d2:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
     3d6:	9b 01       	movw	r18, r22
     3d8:	ac 01       	movw	r20, r24
     3da:	60 93 43 05 	sts	0x0543, r22
     3de:	70 93 44 05 	sts	0x0544, r23
     3e2:	80 93 45 05 	sts	0x0545, r24
     3e6:	90 93 46 05 	sts	0x0546, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     3ea:	80 91 3f 05 	lds	r24, 0x053F
     3ee:	90 91 40 05 	lds	r25, 0x0540
     3f2:	a0 91 41 05 	lds	r26, 0x0541
     3f6:	b0 91 42 05 	lds	r27, 0x0542
     3fa:	28 1b       	sub	r18, r24
     3fc:	39 0b       	sbc	r19, r25
     3fe:	4a 0b       	sbc	r20, r26
     400:	5b 0b       	sbc	r21, r27
     402:	23 33       	cpi	r18, 0x33	; 51
     404:	8f ee       	ldi	r24, 0xEF	; 239
     406:	38 07       	cpc	r19, r24
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	48 07       	cpc	r20, r24
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	58 07       	cpc	r21, r24
     410:	18 f0       	brcs	.+6      	; 0x418 <main+0x25a>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 3b 05 	sts	0x053B, r24
							//pwm_green = 0;
							//pwm_blue = 0;													
							break;							
					}

					updateRedLed(pwm_red);
     418:	80 91 0c 02 	lds	r24, 0x020C
     41c:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <updateRedLed>
					updateGreenLed(pwm_green);
     420:	80 91 0d 02 	lds	r24, 0x020D
     424:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <updateGreenLed>
					updateBlueLed(pwm_blue);
     428:	80 91 0e 02 	lds	r24, 0x020E
     42c:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <updateBlueLed>
     430:	90 91 37 05 	lds	r25, 0x0537

					break;
     434:	2c cf       	rjmp	.-424    	; 0x28e <main+0xd0>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     436:	80 91 0b 01 	lds	r24, 0x010B
     43a:	8e 7f       	andi	r24, 0xFE	; 254
     43c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     440:	80 91 0b 01 	lds	r24, 0x010B
     444:	8d 7f       	andi	r24, 0xFD	; 253
     446:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     44a:	80 91 0b 01 	lds	r24, 0x010B
     44e:	8b 7f       	andi	r24, 0xFB	; 251
     450:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     454:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     456:	80 91 0b 01 	lds	r24, 0x010B
     45a:	8f 7e       	andi	r24, 0xEF	; 239
     45c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     460:	80 91 0b 01 	lds	r24, 0x010B
     464:	8f 7d       	andi	r24, 0xDF	; 223
     466:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     46a:	80 91 0b 01 	lds	r24, 0x010B
     46e:	8f 7b       	andi	r24, 0xBF	; 191
     470:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     474:	80 91 0b 01 	lds	r24, 0x010B
     478:	8f 77       	andi	r24, 0x7F	; 127
     47a:	80 93 0b 01 	sts	0x010B, r24
					updateRedLed(pwm_red);
     47e:	80 91 0c 02 	lds	r24, 0x020C
     482:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <updateRedLed>
					updateGreenLed(pwm_green);
     486:	80 91 0d 02 	lds	r24, 0x020D
     48a:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <updateGreenLed>
					updateBlueLed(pwm_blue);
     48e:	80 91 0e 02 	lds	r24, 0x020E
     492:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <updateBlueLed>
     496:	90 91 37 05 	lds	r25, 0x0537
					break;
     49a:	f9 ce       	rjmp	.-526    	; 0x28e <main+0xd0>
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     49c:	80 91 0c 02 	lds	r24, 0x020C
     4a0:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <updateRedLed>
					updateGreenLed(pwm_green);
     4a4:	80 91 0d 02 	lds	r24, 0x020D
     4a8:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <updateGreenLed>
					updateBlueLed(pwm_blue);
     4ac:	80 91 0e 02 	lds	r24, 0x020E
     4b0:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <updateBlueLed>
					enableObstacleAvoidance();
     4b4:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <enableObstacleAvoidance>
					setLeftSpeed(25);
     4b8:	89 e1       	ldi	r24, 0x19	; 25
     4ba:	0e 94 cc 1a 	call	0x3598	; 0x3598 <setLeftSpeed>
					setRightSpeed(25);
     4be:	89 e1       	ldi	r24, 0x19	; 25
     4c0:	0e 94 06 1b 	call	0x360c	; 0x360c <setRightSpeed>
     4c4:	90 91 37 05 	lds	r25, 0x0537
					break;
     4c8:	e2 ce       	rjmp	.-572    	; 0x28e <main+0xd0>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     4ca:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <enableObstacleAvoidance>
     4ce:	90 91 37 05 	lds	r25, 0x0537
					break;
     4d2:	dd ce       	rjmp	.-582    	; 0x28e <main+0xd0>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5 || currentSelector==7) {
				pwm_red = rand() % 255;
     4d4:	0e 94 09 2b 	call	0x5612	; 0x5612 <rand>
     4d8:	be 01       	movw	r22, r28
     4da:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__divmodhi4>
     4de:	80 93 0c 02 	sts	0x020C, r24
				pwm_green = rand() % 255;
     4e2:	0e 94 09 2b 	call	0x5612	; 0x5612 <rand>
     4e6:	be 01       	movw	r22, r28
     4e8:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__divmodhi4>
     4ec:	80 93 0d 02 	sts	0x020D, r24
				pwm_blue = rand() % 255;
     4f0:	0e 94 09 2b 	call	0x5612	; 0x5612 <rand>
     4f4:	be 01       	movw	r22, r28
     4f6:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__divmodhi4>
     4fa:	80 93 0e 02 	sts	0x020E, r24
     4fe:	3a cf       	rjmp	.-396    	; 0x374 <main+0x1b6>
			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     500:	80 91 0f 05 	lds	r24, 0x050F
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	09 f0       	breq	.+2      	; 0x50a <main+0x34c>
     508:	35 cf       	rjmp	.-406    	; 0x374 <main+0x1b6>
     50a:	90 91 05 04 	lds	r25, 0x0405
     50e:	92 30       	cpi	r25, 0x02	; 2
     510:	08 f0       	brcs	.+2      	; 0x514 <main+0x356>
     512:	30 cf       	rjmp	.-416    	; 0x374 <main+0x1b6>
					if(rgbState == 0) {
     514:	90 91 08 04 	lds	r25, 0x0408
     518:	99 23       	and	r25, r25
     51a:	09 f0       	breq	.+2      	; 0x51e <main+0x360>
     51c:	25 c3       	rjmp	.+1610   	; 0xb68 <main+0x9aa>
						pwm_red = 254;
     51e:	80 92 0c 02 	sts	0x020C, r8
						pwm_green = 255;
     522:	d0 92 0d 02 	sts	0x020D, r13
						pwm_blue = 255;
     526:	d0 92 0e 02 	sts	0x020E, r13
						rgbState = 1;
     52a:	80 93 08 04 	sts	0x0408, r24
     52e:	22 cf       	rjmp	.-444    	; 0x374 <main+0x1b6>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     530:	84 30       	cpi	r24, 0x04	; 4
     532:	09 f4       	brne	.+2      	; 0x536 <main+0x378>
     534:	81 c2       	rjmp	.+1282   	; 0xa38 <main+0x87a>
     536:	84 30       	cpi	r24, 0x04	; 4
     538:	08 f4       	brcc	.+2      	; 0x53c <main+0x37e>
     53a:	fb c1       	rjmp	.+1014   	; 0x932 <main+0x774>
     53c:	85 30       	cpi	r24, 0x05	; 5
     53e:	09 f0       	breq	.+2      	; 0x542 <main+0x384>
     540:	6b cf       	rjmp	.-298    	; 0x418 <main+0x25a>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     542:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <turnOffGreenLeds>
							demoEndTime = getTime100MicroSec();
     546:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
     54a:	9b 01       	movw	r18, r22
     54c:	ac 01       	movw	r20, r24
     54e:	60 93 43 05 	sts	0x0543, r22
     552:	70 93 44 05 	sts	0x0544, r23
     556:	80 93 45 05 	sts	0x0545, r24
     55a:	90 93 46 05 	sts	0x0546, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     55e:	80 91 3f 05 	lds	r24, 0x053F
     562:	90 91 40 05 	lds	r25, 0x0540
     566:	a0 91 41 05 	lds	r26, 0x0541
     56a:	b0 91 42 05 	lds	r27, 0x0542
     56e:	28 1b       	sub	r18, r24
     570:	39 0b       	sbc	r19, r25
     572:	4a 0b       	sbc	r20, r26
     574:	5b 0b       	sbc	r21, r27
     576:	2b 32       	cpi	r18, 0x2B	; 43
     578:	8c e1       	ldi	r24, 0x1C	; 28
     57a:	38 07       	cpc	r19, r24
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	48 07       	cpc	r20, r24
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	58 07       	cpc	r21, r24
     584:	08 f4       	brcc	.+2      	; 0x588 <main+0x3ca>
     586:	48 cf       	rjmp	.-368    	; 0x418 <main+0x25a>
								demoStartTime = getTime100MicroSec();
     588:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
     58c:	60 93 3f 05 	sts	0x053F, r22
     590:	70 93 40 05 	sts	0x0540, r23
     594:	80 93 41 05 	sts	0x0541, r24
     598:	90 93 42 05 	sts	0x0542, r25
								demoState = 0;							
     59c:	10 92 3b 05 	sts	0x053B, r1
     5a0:	3b cf       	rjmp	.-394    	; 0x418 <main+0x25a>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     5a2:	92 30       	cpi	r25, 0x02	; 2
     5a4:	11 f0       	breq	.+4      	; 0x5aa <main+0x3ec>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     5a6:	98 2f       	mov	r25, r24
     5a8:	72 ce       	rjmp	.-796    	; 0x28e <main+0xd0>
     5aa:	90 91 10 05 	lds	r25, 0x0510
     5ae:	99 23       	and	r25, r25
     5b0:	d1 f3       	breq	.-12     	; 0x5a6 <main+0x3e8>
								turnOnGreenLeds();
     5b2:	0e 94 06 20 	call	0x400c	; 0x400c <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     5b6:	60 91 03 04 	lds	r22, 0x0403
     5ba:	70 91 04 04 	lds	r23, 0x0404
     5be:	8e ef       	ldi	r24, 0xFE	; 254
     5c0:	9f e0       	ldi	r25, 0x0F	; 15
     5c2:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__eewr_word_m2560>
								turnOffGreenLeds();
     5c6:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     5ca:	8a ea       	ldi	r24, 0xAA	; 170
     5cc:	61 e0       	ldi	r22, 0x01	; 1
     5ce:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
								addressReceived = 0;
     5d2:	10 92 10 05 	sts	0x0510, r1
								menuChoice = 0;
     5d6:	10 92 0f 05 	sts	0x050F, r1
     5da:	90 91 37 05 	lds	r25, 0x0537
     5de:	57 ce       	rjmp	.-850    	; 0x28e <main+0xd0>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     5e0:	0e 94 06 20 	call	0x400c	; 0x400c <turnOnGreenLeds>
							updateRedLed(pwm_red);
     5e4:	80 91 0c 02 	lds	r24, 0x020C
     5e8:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <updateRedLed>
							updateGreenLed(pwm_green);
     5ec:	80 91 0d 02 	lds	r24, 0x020D
     5f0:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <updateGreenLed>
							updateBlueLed(pwm_blue);
     5f4:	80 91 0e 02 	lds	r24, 0x020E
     5f8:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <updateBlueLed>
							LED_IR1_LOW;
     5fc:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     5fe:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     600:	80 91 12 05 	lds	r24, 0x0512
     604:	88 23       	and	r24, r24
     606:	09 f4       	brne	.+2      	; 0x60a <main+0x44c>
     608:	13 cf       	rjmp	.-474    	; 0x430 <main+0x272>
								getDataNow = 0;	
     60a:	10 92 12 05 	sts	0x0512, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     60e:	80 91 5f 03 	lds	r24, 0x035F
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     618:	80 91 60 03 	lds	r24, 0x0360
     61c:	61 e0       	ldi	r22, 0x01	; 1
     61e:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     622:	80 91 2f 03 	lds	r24, 0x032F
     626:	90 91 30 03 	lds	r25, 0x0330
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     630:	80 91 2f 03 	lds	r24, 0x032F
     634:	90 91 30 03 	lds	r25, 0x0330
     638:	89 2f       	mov	r24, r25
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     640:	80 91 61 03 	lds	r24, 0x0361
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     64a:	80 91 62 03 	lds	r24, 0x0362
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     654:	80 91 33 03 	lds	r24, 0x0333
     658:	90 91 34 03 	lds	r25, 0x0334
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     662:	80 91 33 03 	lds	r24, 0x0333
     666:	90 91 34 03 	lds	r25, 0x0334
     66a:	89 2f       	mov	r24, r25
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     672:	80 91 63 03 	lds	r24, 0x0363
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     67c:	80 91 64 03 	lds	r24, 0x0364
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     686:	80 91 37 03 	lds	r24, 0x0337
     68a:	90 91 38 03 	lds	r25, 0x0338
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     694:	80 91 37 03 	lds	r24, 0x0337
     698:	90 91 38 03 	lds	r25, 0x0338
     69c:	89 2f       	mov	r24, r25
     69e:	61 e0       	ldi	r22, 0x01	; 1
     6a0:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     6a4:	80 91 65 03 	lds	r24, 0x0365
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     6ae:	80 91 66 03 	lds	r24, 0x0366
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     6b8:	80 91 3b 03 	lds	r24, 0x033B
     6bc:	90 91 3c 03 	lds	r25, 0x033C
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     6c6:	80 91 3b 03 	lds	r24, 0x033B
     6ca:	90 91 3c 03 	lds	r25, 0x033C
     6ce:	89 2f       	mov	r24, r25
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     6d6:	80 91 67 03 	lds	r24, 0x0367
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     6e0:	80 91 68 03 	lds	r24, 0x0368
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     6ea:	80 91 3f 03 	lds	r24, 0x033F
     6ee:	90 91 40 03 	lds	r25, 0x0340
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     6f8:	80 91 3f 03 	lds	r24, 0x033F
     6fc:	90 91 40 03 	lds	r25, 0x0340
     700:	89 2f       	mov	r24, r25
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     708:	80 91 69 03 	lds	r24, 0x0369
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     712:	80 91 6a 03 	lds	r24, 0x036A
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     71c:	80 91 43 03 	lds	r24, 0x0343
     720:	90 91 44 03 	lds	r25, 0x0344
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     72a:	80 91 43 03 	lds	r24, 0x0343
     72e:	90 91 44 03 	lds	r25, 0x0344
     732:	89 2f       	mov	r24, r25
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     73a:	80 91 6b 03 	lds	r24, 0x036B
     73e:	61 e0       	ldi	r22, 0x01	; 1
     740:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     744:	80 91 6c 03 	lds	r24, 0x036C
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     74e:	80 91 47 03 	lds	r24, 0x0347
     752:	90 91 48 03 	lds	r25, 0x0348
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     75c:	80 91 47 03 	lds	r24, 0x0347
     760:	90 91 48 03 	lds	r25, 0x0348
     764:	89 2f       	mov	r24, r25
     766:	61 e0       	ldi	r22, 0x01	; 1
     768:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     76c:	80 91 6d 03 	lds	r24, 0x036D
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     776:	80 91 6e 03 	lds	r24, 0x036E
     77a:	61 e0       	ldi	r22, 0x01	; 1
     77c:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     780:	80 91 4b 03 	lds	r24, 0x034B
     784:	90 91 4c 03 	lds	r25, 0x034C
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     78e:	80 91 4b 03 	lds	r24, 0x034B
     792:	90 91 4c 03 	lds	r25, 0x034C
     796:	89 2f       	mov	r24, r25
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     79e:	80 91 6f 03 	lds	r24, 0x036F
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     7a8:	80 91 70 03 	lds	r24, 0x0370
     7ac:	61 e0       	ldi	r22, 0x01	; 1
     7ae:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     7b2:	80 91 4f 03 	lds	r24, 0x034F
     7b6:	90 91 50 03 	lds	r25, 0x0350
     7ba:	61 e0       	ldi	r22, 0x01	; 1
     7bc:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     7c0:	80 91 4f 03 	lds	r24, 0x034F
     7c4:	90 91 50 03 	lds	r25, 0x0350
     7c8:	89 2f       	mov	r24, r25
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     7d0:	80 91 71 03 	lds	r24, 0x0371
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     7da:	80 91 72 03 	lds	r24, 0x0372
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     7e4:	80 91 53 03 	lds	r24, 0x0353
     7e8:	90 91 54 03 	lds	r25, 0x0354
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     7f2:	80 91 53 03 	lds	r24, 0x0353
     7f6:	90 91 54 03 	lds	r25, 0x0354
     7fa:	89 2f       	mov	r24, r25
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     802:	80 91 73 03 	lds	r24, 0x0373
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     80c:	80 91 74 03 	lds	r24, 0x0374
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     816:	80 91 57 03 	lds	r24, 0x0357
     81a:	90 91 58 03 	lds	r25, 0x0358
     81e:	61 e0       	ldi	r22, 0x01	; 1
     820:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     824:	80 91 57 03 	lds	r24, 0x0357
     828:	90 91 58 03 	lds	r25, 0x0358
     82c:	89 2f       	mov	r24, r25
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     834:	80 91 75 03 	lds	r24, 0x0375
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     83e:	80 91 76 03 	lds	r24, 0x0376
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     848:	80 91 5b 03 	lds	r24, 0x035B
     84c:	90 91 5c 03 	lds	r25, 0x035C
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     856:	80 91 5b 03 	lds	r24, 0x035B
     85a:	90 91 5c 03 	lds	r25, 0x035C
     85e:	89 2f       	mov	r24, r25
     860:	61 e0       	ldi	r22, 0x01	; 1
     862:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     866:	80 91 18 05 	lds	r24, 0x0518
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
								usart0Transmit(accX>>8,1);
     870:	80 91 19 05 	lds	r24, 0x0519
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     87a:	80 91 1a 05 	lds	r24, 0x051A
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
								usart0Transmit(accY>>8,1);
     884:	80 91 1b 05 	lds	r24, 0x051B
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     88e:	80 91 1c 05 	lds	r24, 0x051C
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     898:	80 91 1d 05 	lds	r24, 0x051D
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
								usart0Transmit(irCommand,1);
     8a2:	80 91 13 05 	lds	r24, 0x0513
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
								usart0Transmit(currentSelector,1);
     8ac:	80 91 37 05 	lds	r24, 0x0537
     8b0:	61 e0       	ldi	r22, 0x01	; 1
     8b2:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     8b6:	80 91 03 01 	lds	r24, 0x0103
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	80 72       	andi	r24, 0x20	; 32
     8be:	90 70       	andi	r25, 0x00	; 0
     8c0:	95 95       	asr	r25
     8c2:	87 95       	ror	r24
     8c4:	95 95       	asr	r25
     8c6:	87 95       	ror	r24
     8c8:	95 95       	asr	r25
     8ca:	87 95       	ror	r24
     8cc:	95 95       	asr	r25
     8ce:	87 95       	ror	r24
     8d0:	95 95       	asr	r25
     8d2:	87 95       	ror	r24
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
								usart0Transmit(rfFlags,1);
     8da:	80 91 05 04 	lds	r24, 0x0405
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	0e 94 94 14 	call	0x2928	; 0x2928 <usart0Transmit>
     8e4:	90 91 37 05 	lds	r25, 0x0537
     8e8:	d2 cc       	rjmp	.-1628   	; 0x28e <main+0xd0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <main+0x732>
     8ee:	94 cd       	rjmp	.-1240   	; 0x418 <main+0x25a>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
     8f0:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <turnOffGreenLeds>
							outOfLine = 0;
     8f4:	10 92 3d 05 	sts	0x053D, r1
							enableObstacleAvoidance();
     8f8:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <enableObstacleAvoidance>
							setRightSpeed(20);
     8fc:	84 e1       	ldi	r24, 0x14	; 20
     8fe:	0e 94 06 1b 	call	0x360c	; 0x360c <setRightSpeed>
							setLeftSpeed(20);
     902:	84 e1       	ldi	r24, 0x14	; 20
     904:	0e 94 cc 1a 	call	0x3598	; 0x3598 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR) {
     908:	80 91 71 03 	lds	r24, 0x0371
     90c:	90 91 72 03 	lds	r25, 0x0372
     910:	21 e0       	ldi	r18, 0x01	; 1
     912:	80 39       	cpi	r24, 0x90	; 144
     914:	92 07       	cpc	r25, r18
     916:	0c f4       	brge	.+2      	; 0x91a <main+0x75c>
     918:	c5 c0       	rjmp	.+394    	; 0xaa4 <main+0x8e6>
     91a:	80 91 73 03 	lds	r24, 0x0373
     91e:	90 91 74 03 	lds	r25, 0x0374
     922:	41 e0       	ldi	r20, 0x01	; 1
     924:	80 39       	cpi	r24, 0x90	; 144
     926:	94 07       	cpc	r25, r20
     928:	0c f4       	brge	.+2      	; 0x92c <main+0x76e>
     92a:	bc c0       	rjmp	.+376    	; 0xaa4 <main+0x8e6>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
     92c:	10 92 3c 05 	sts	0x053C, r1
     930:	73 cd       	rjmp	.-1306   	; 0x418 <main+0x25a>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
     932:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <turnOffGreenLeds>
							demoEndTime = getTime100MicroSec();
     936:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
     93a:	9b 01       	movw	r18, r22
     93c:	ac 01       	movw	r20, r24
     93e:	60 93 43 05 	sts	0x0543, r22
     942:	70 93 44 05 	sts	0x0544, r23
     946:	80 93 45 05 	sts	0x0545, r24
     94a:	90 93 46 05 	sts	0x0546, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
     94e:	80 91 3f 05 	lds	r24, 0x053F
     952:	90 91 40 05 	lds	r25, 0x0540
     956:	a0 91 41 05 	lds	r26, 0x0541
     95a:	b0 91 42 05 	lds	r27, 0x0542
     95e:	28 1b       	sub	r18, r24
     960:	39 0b       	sbc	r19, r25
     962:	4a 0b       	sbc	r20, r26
     964:	5b 0b       	sbc	r21, r27
     966:	2d 3c       	cpi	r18, 0xCD	; 205
     968:	86 e6       	ldi	r24, 0x66	; 102
     96a:	38 07       	cpc	r19, r24
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	48 07       	cpc	r20, r24
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	58 07       	cpc	r21, r24
     974:	08 f4       	brcc	.+2      	; 0x978 <main+0x7ba>
     976:	c2 c0       	rjmp	.+388    	; 0xafc <main+0x93e>
								if(batteryLevel<800) {	// stay in charge if too much discharged
     978:	80 91 c3 03 	lds	r24, 0x03C3
     97c:	90 91 c4 03 	lds	r25, 0x03C4
     980:	23 e0       	ldi	r18, 0x03	; 3
     982:	80 32       	cpi	r24, 0x20	; 32
     984:	92 07       	cpc	r25, r18
     986:	08 f0       	brcs	.+2      	; 0x98a <main+0x7cc>
     988:	a6 c0       	rjmp	.+332    	; 0xad6 <main+0x918>
							}
							if(!CHARGE_ON) {
								chargeContact = 0;
								outOfLine = 0;
								demoState = 2;
								demoStartTime = getTime100MicroSec();
     98a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
     98e:	60 93 3f 05 	sts	0x053F, r22
     992:	70 93 40 05 	sts	0x0540, r23
     996:	80 93 41 05 	sts	0x0541, r24
     99a:	90 93 42 05 	sts	0x0542, r25
								break;						
     99e:	3c cd       	rjmp	.-1416   	; 0x418 <main+0x25a>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOnGreenLeds();
     9a0:	0e 94 06 20 	call	0x400c	; 0x400c <turnOnGreenLeds>
							disableObstacleAvoidance();
     9a4:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
     9a8:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
     9ac:	9b 01       	movw	r18, r22
     9ae:	ac 01       	movw	r20, r24
     9b0:	60 93 43 05 	sts	0x0543, r22
     9b4:	70 93 44 05 	sts	0x0544, r23
     9b8:	80 93 45 05 	sts	0x0545, r24
     9bc:	90 93 46 05 	sts	0x0546, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
     9c0:	80 91 3f 05 	lds	r24, 0x053F
     9c4:	90 91 40 05 	lds	r25, 0x0540
     9c8:	a0 91 41 05 	lds	r26, 0x0541
     9cc:	b0 91 42 05 	lds	r27, 0x0542
     9d0:	28 1b       	sub	r18, r24
     9d2:	39 0b       	sbc	r19, r25
     9d4:	4a 0b       	sbc	r20, r26
     9d6:	5b 0b       	sbc	r21, r27
     9d8:	23 33       	cpi	r18, 0x33	; 51
     9da:	8f ee       	ldi	r24, 0xEF	; 239
     9dc:	38 07       	cpc	r19, r24
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	48 07       	cpc	r20, r24
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	58 07       	cpc	r21, r24
     9e6:	08 f0       	brcs	.+2      	; 0x9ea <main+0x82c>
     9e8:	76 c0       	rjmp	.+236    	; 0xad6 <main+0x918>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
     9ea:	80 91 03 01 	lds	r24, 0x0103
     9ee:	84 ff       	sbrs	r24, 4
     9f0:	90 c0       	rjmp	.+288    	; 0xb12 <main+0x954>
								outOfLine = 0;
     9f2:	10 92 3d 05 	sts	0x053D, r1
								chargeContact++;
     9f6:	80 91 3e 05 	lds	r24, 0x053E
     9fa:	8f 5f       	subi	r24, 0xFF	; 255
     9fc:	80 93 3e 05 	sts	0x053E, r24
								if(chargeContact > 20) {
     a00:	85 31       	cpi	r24, 0x15	; 21
     a02:	08 f0       	brcs	.+2      	; 0xa06 <main+0x848>
     a04:	bf c0       	rjmp	.+382    	; 0xb84 <main+0x9c6>
     a06:	80 91 71 03 	lds	r24, 0x0371
     a0a:	90 91 72 03 	lds	r25, 0x0372
								} else {
									outOfLine = 0;
								}
							}
	
							if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
     a0e:	21 e0       	ldi	r18, 0x01	; 1
     a10:	83 3c       	cpi	r24, 0xC3	; 195
     a12:	92 07       	cpc	r25, r18
     a14:	0c f0       	brlt	.+2      	; 0xa18 <main+0x85a>
     a16:	97 c0       	rjmp	.+302    	; 0xb46 <main+0x988>
								setRightSpeed(-10);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
     a18:	80 91 73 03 	lds	r24, 0x0373
     a1c:	90 91 74 03 	lds	r25, 0x0374
     a20:	41 e0       	ldi	r20, 0x01	; 1
     a22:	83 3c       	cpi	r24, 0xC3	; 195
     a24:	94 07       	cpc	r25, r20
     a26:	0c f4       	brge	.+2      	; 0xa2a <main+0x86c>
     a28:	98 c0       	rjmp	.+304    	; 0xb5a <main+0x99c>
								setLeftSpeed(-10);
     a2a:	86 ef       	ldi	r24, 0xF6	; 246
     a2c:	0e 94 cc 1a 	call	0x3598	; 0x3598 <setLeftSpeed>
								setRightSpeed(20);
     a30:	84 e1       	ldi	r24, 0x14	; 20
     a32:	0e 94 06 1b 	call	0x360c	; 0x360c <setRightSpeed>
     a36:	f0 cc       	rjmp	.-1568   	; 0x418 <main+0x25a>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOnGreenLeds();
     a38:	0e 94 06 20 	call	0x400c	; 0x400c <turnOnGreenLeds>
							demoEndTime = getTime100MicroSec();
     a3c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
     a40:	9b 01       	movw	r18, r22
     a42:	ac 01       	movw	r20, r24
     a44:	60 93 43 05 	sts	0x0543, r22
     a48:	70 93 44 05 	sts	0x0544, r23
     a4c:	80 93 45 05 	sts	0x0545, r24
     a50:	90 93 46 05 	sts	0x0546, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
     a54:	80 91 3f 05 	lds	r24, 0x053F
     a58:	90 91 40 05 	lds	r25, 0x0540
     a5c:	a0 91 41 05 	lds	r26, 0x0541
     a60:	b0 91 42 05 	lds	r27, 0x0542
     a64:	28 1b       	sub	r18, r24
     a66:	39 0b       	sbc	r19, r25
     a68:	4a 0b       	sbc	r20, r26
     a6a:	5b 0b       	sbc	r21, r27
     a6c:	2f 38       	cpi	r18, 0x8F	; 143
     a6e:	85 e2       	ldi	r24, 0x25	; 37
     a70:	38 07       	cpc	r19, r24
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	48 07       	cpc	r20, r24
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	58 07       	cpc	r21, r24
     a7a:	08 f4       	brcc	.+2      	; 0xa7e <main+0x8c0>
     a7c:	cd cc       	rjmp	.-1638   	; 0x418 <main+0x25a>
								setRightSpeed(20);
     a7e:	84 e1       	ldi	r24, 0x14	; 20
     a80:	0e 94 06 1b 	call	0x360c	; 0x360c <setRightSpeed>
								setLeftSpeed(-20);								
     a84:	8c ee       	ldi	r24, 0xEC	; 236
     a86:	0e 94 cc 1a 	call	0x3598	; 0x3598 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
     a8a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
     a8e:	60 93 3f 05 	sts	0x053F, r22
     a92:	70 93 40 05 	sts	0x0540, r23
     a96:	80 93 41 05 	sts	0x0541, r24
     a9a:	90 93 42 05 	sts	0x0542, r25
								demoState = 5;							
     a9e:	90 92 3b 05 	sts	0x053B, r9
     aa2:	ba cc       	rjmp	.-1676   	; 0x418 <main+0x25a>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(20);
							setLeftSpeed(20);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR) {
								lineFound++;
     aa4:	80 91 3c 05 	lds	r24, 0x053C
     aa8:	8f 5f       	subi	r24, 0xFF	; 255
     aaa:	80 93 3c 05 	sts	0x053C, r24
								if(lineFound > 10) {
     aae:	8b 30       	cpi	r24, 0x0B	; 11
     ab0:	08 f4       	brcc	.+2      	; 0xab4 <main+0x8f6>
     ab2:	b2 cc       	rjmp	.-1692   	; 0x418 <main+0x25a>
									outOfLine = 0;
     ab4:	10 92 3d 05 	sts	0x053D, r1
									chargeContact = 0;
     ab8:	10 92 3e 05 	sts	0x053E, r1
									demoStartTime = getTime100MicroSec();
     abc:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
     ac0:	60 93 3f 05 	sts	0x053F, r22
     ac4:	70 93 40 05 	sts	0x0540, r23
     ac8:	80 93 41 05 	sts	0x0541, r24
     acc:	90 93 42 05 	sts	0x0542, r25
									demoState = 2;
     ad0:	a0 92 3b 05 	sts	0x053B, r10
									break;
     ad4:	a1 cc       	rjmp	.-1726   	; 0x418 <main+0x25a>
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
								if(batteryLevel<800) {	// stay in charge if too much discharged
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-20);
     ad6:	8c ee       	ldi	r24, 0xEC	; 236
     ad8:	0e 94 06 1b 	call	0x360c	; 0x360c <setRightSpeed>
									setLeftSpeed(-20);
     adc:	8c ee       	ldi	r24, 0xEC	; 236
     ade:	0e 94 cc 1a 	call	0x3598	; 0x3598 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
     ae2:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
     ae6:	60 93 3f 05 	sts	0x053F, r22
     aea:	70 93 40 05 	sts	0x0540, r23
     aee:	80 93 41 05 	sts	0x0541, r24
     af2:	90 93 42 05 	sts	0x0542, r25
									demoState = 4;
     af6:	b0 92 3b 05 	sts	0x053B, r11
									break;
     afa:	8e cc       	rjmp	.-1764   	; 0x418 <main+0x25a>
								}
							}
							if(!CHARGE_ON) {
     afc:	80 91 03 01 	lds	r24, 0x0103
     b00:	84 fd       	sbrc	r24, 4
     b02:	8a cc       	rjmp	.-1772   	; 0x418 <main+0x25a>
								chargeContact = 0;
     b04:	10 92 3e 05 	sts	0x053E, r1
								outOfLine = 0;
     b08:	10 92 3d 05 	sts	0x053D, r1
								demoState = 2;
     b0c:	a0 92 3b 05 	sts	0x053B, r10
     b10:	3c cf       	rjmp	.-392    	; 0x98a <main+0x7cc>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
     b12:	10 92 3e 05 	sts	0x053E, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
     b16:	80 91 71 03 	lds	r24, 0x0371
     b1a:	90 91 72 03 	lds	r25, 0x0372
     b1e:	41 e0       	ldi	r20, 0x01	; 1
     b20:	83 3c       	cpi	r24, 0xC3	; 195
     b22:	94 07       	cpc	r25, r20
     b24:	bc f0       	brlt	.+46     	; 0xb54 <main+0x996>
     b26:	20 91 73 03 	lds	r18, 0x0373
     b2a:	30 91 74 03 	lds	r19, 0x0374
     b2e:	41 e0       	ldi	r20, 0x01	; 1
     b30:	23 3c       	cpi	r18, 0xC3	; 195
     b32:	34 07       	cpc	r19, r20
     b34:	7c f0       	brlt	.+30     	; 0xb54 <main+0x996>
									outOfLine++;
     b36:	80 91 3d 05 	lds	r24, 0x053D
     b3a:	8f 5f       	subi	r24, 0xFF	; 255
     b3c:	80 93 3d 05 	sts	0x053D, r24
									if(outOfLine > 250) {
     b40:	8b 3f       	cpi	r24, 0xFB	; 251
     b42:	08 f0       	brcs	.+2      	; 0xb46 <main+0x988>
     b44:	66 cc       	rjmp	.-1844   	; 0x412 <main+0x254>
									outOfLine = 0;
								}
							}
	
							if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(20);
     b46:	84 e1       	ldi	r24, 0x14	; 20
     b48:	0e 94 cc 1a 	call	0x3598	; 0x3598 <setLeftSpeed>
								setRightSpeed(-10);
     b4c:	86 ef       	ldi	r24, 0xF6	; 246
     b4e:	0e 94 06 1b 	call	0x360c	; 0x360c <setRightSpeed>
     b52:	62 cc       	rjmp	.-1852   	; 0x418 <main+0x25a>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
     b54:	10 92 3d 05 	sts	0x053D, r1
     b58:	5a cf       	rjmp	.-332    	; 0xa0e <main+0x850>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(20);
     b5a:	84 e1       	ldi	r24, 0x14	; 20
     b5c:	0e 94 06 1b 	call	0x360c	; 0x360c <setRightSpeed>
								setLeftSpeed(20);
     b60:	84 e1       	ldi	r24, 0x14	; 20
     b62:	0e 94 cc 1a 	call	0x3598	; 0x3598 <setLeftSpeed>
     b66:	58 cc       	rjmp	.-1872   	; 0x418 <main+0x25a>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
     b68:	91 30       	cpi	r25, 0x01	; 1
     b6a:	01 f1       	breq	.+64     	; 0xbac <main+0x9ee>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
     b6c:	92 30       	cpi	r25, 0x02	; 2
     b6e:	09 f0       	breq	.+2      	; 0xb72 <main+0x9b4>
     b70:	01 cc       	rjmp	.-2046   	; 0x374 <main+0x1b6>
						pwm_red = 255;
     b72:	d0 92 0c 02 	sts	0x020C, r13
						pwm_green = 255;
     b76:	d0 92 0d 02 	sts	0x020D, r13
						pwm_blue = 254;
     b7a:	80 92 0e 02 	sts	0x020E, r8
						rgbState = 0;
     b7e:	10 92 08 04 	sts	0x0408, r1
     b82:	f8 cb       	rjmp	.-2064   	; 0x374 <main+0x1b6>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	0e 94 cc 1a 	call	0x3598	; 0x3598 <setLeftSpeed>
									setRightSpeed(0);
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	0e 94 06 1b 	call	0x360c	; 0x360c <setRightSpeed>
									demoStartTime = getTime100MicroSec();
     b90:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <getTime100MicroSec>
     b94:	60 93 3f 05 	sts	0x053F, r22
     b98:	70 93 40 05 	sts	0x0540, r23
     b9c:	80 93 41 05 	sts	0x0541, r24
     ba0:	90 93 42 05 	sts	0x0542, r25
									demoState = 3;
     ba4:	23 e0       	ldi	r18, 0x03	; 3
     ba6:	20 93 3b 05 	sts	0x053B, r18
									break;
     baa:	36 cc       	rjmp	.-1940   	; 0x418 <main+0x25a>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
     bac:	d0 92 0c 02 	sts	0x020C, r13
						pwm_green = 254;
     bb0:	80 92 0d 02 	sts	0x020D, r8
						pwm_blue = 255;
     bb4:	d0 92 0e 02 	sts	0x020E, r13
						rgbState = 2;
     bb8:	a0 92 08 04 	sts	0x0408, r10
     bbc:	db cb       	rjmp	.-2122   	; 0x374 <main+0x1b6>

00000bbe <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
     bc2:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
     bc4:	0d b4       	in	r0, 0x2d	; 45
     bc6:	07 fc       	sbrc	r0, 7
     bc8:	0a c0       	rjmp	.+20     	; 0xbde <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     bca:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     bcc:	37 e2       	ldi	r19, 0x27	; 39
     bce:	80 31       	cpi	r24, 0x10	; 16
     bd0:	93 07       	cpc	r25, r19
     bd2:	c0 f3       	brcs	.-16     	; 0xbc4 <SPI_WAIT+0x6>
			spiCommError = 1;
     bd4:	20 93 06 04 	sts	0x0406, r18
		}
	
		if(SPSR & _BV(SPIF)) {
     bd8:	0d b4       	in	r0, 0x2d	; 45
     bda:	07 fe       	sbrs	r0, 7
     bdc:	f6 cf       	rjmp	.-20     	; 0xbca <SPI_WAIT+0xc>
			return;
		}
	}
}
     bde:	08 95       	ret

00000be0 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     be0:	84 b1       	in	r24, 0x04	; 4
     be2:	80 7f       	andi	r24, 0xF0	; 240
     be4:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     be6:	84 b1       	in	r24, 0x04	; 4
     be8:	87 60       	ori	r24, 0x07	; 7
     bea:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     bec:	80 e5       	ldi	r24, 0x50	; 80
     bee:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     bf0:	8d b5       	in	r24, 0x2d	; 45
     bf2:	81 60       	ori	r24, 0x01	; 1
     bf4:	8d bd       	out	0x2d, r24	; 45

}
     bf6:	08 95       	ret

00000bf8 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     bf8:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     bfa:	1d bc       	out	0x2d, r1	; 45
}
     bfc:	08 95       	ret

00000bfe <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     bfe:	44 23       	and	r20, r20
     c00:	09 f1       	breq	.+66     	; 0xc44 <SPI_ReadWrite_Block+0x46>
     c02:	a6 2f       	mov	r26, r22
     c04:	b7 2f       	mov	r27, r23
     c06:	e8 2f       	mov	r30, r24
     c08:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
     c0a:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
     c0c:	21 91       	ld	r18, Z+
     c0e:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     c10:	21 e0       	ldi	r18, 0x01	; 1
     c12:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     c14:	0d b4       	in	r0, 0x2d	; 45
     c16:	07 fc       	sbrc	r0, 7
     c18:	0b c0       	rjmp	.+22     	; 0xc30 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     c1a:	2f 5f       	subi	r18, 0xFF	; 255
     c1c:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
     c1e:	57 e2       	ldi	r21, 0x27	; 39
     c20:	20 31       	cpi	r18, 0x10	; 16
     c22:	35 07       	cpc	r19, r21
     c24:	b8 f3       	brcs	.-18     	; 0xc14 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
     c26:	90 93 06 04 	sts	0x0406, r25
		}
	
		if(SPSR & _BV(SPIF)) {
     c2a:	0d b4       	in	r0, 0x2d	; 45
     c2c:	07 fe       	sbrs	r0, 7
     c2e:	f5 cf       	rjmp	.-22     	; 0xc1a <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     c30:	20 91 06 04 	lds	r18, 0x0406
     c34:	22 23       	and	r18, r18
     c36:	31 f4       	brne	.+12     	; 0xc44 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
     c38:	2e b5       	in	r18, 0x2e	; 46
     c3a:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     c3c:	2e 2f       	mov	r18, r30
     c3e:	28 1b       	sub	r18, r24
     c40:	24 17       	cp	r18, r20
     c42:	20 f3       	brcs	.-56     	; 0xc0c <SPI_ReadWrite_Block+0xe>
     c44:	08 95       	ret

00000c46 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     c46:	66 23       	and	r22, r22
     c48:	e9 f0       	breq	.+58     	; 0xc84 <SPI_Write_Block+0x3e>
     c4a:	e8 2f       	mov	r30, r24
     c4c:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
     c4e:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
     c50:	21 91       	ld	r18, Z+
     c52:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     c54:	21 e0       	ldi	r18, 0x01	; 1
     c56:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     c58:	0d b4       	in	r0, 0x2d	; 45
     c5a:	07 fc       	sbrc	r0, 7
     c5c:	0b c0       	rjmp	.+22     	; 0xc74 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     c5e:	2f 5f       	subi	r18, 0xFF	; 255
     c60:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
     c62:	47 e2       	ldi	r20, 0x27	; 39
     c64:	20 31       	cpi	r18, 0x10	; 16
     c66:	34 07       	cpc	r19, r20
     c68:	b8 f3       	brcs	.-18     	; 0xc58 <SPI_Write_Block+0x12>
			spiCommError = 1;
     c6a:	90 93 06 04 	sts	0x0406, r25
		}
	
		if(SPSR & _BV(SPIF)) {
     c6e:	0d b4       	in	r0, 0x2d	; 45
     c70:	07 fe       	sbrs	r0, 7
     c72:	f5 cf       	rjmp	.-22     	; 0xc5e <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     c74:	20 91 06 04 	lds	r18, 0x0406
     c78:	22 23       	and	r18, r18
     c7a:	21 f4       	brne	.+8      	; 0xc84 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     c7c:	2e 2f       	mov	r18, r30
     c7e:	28 1b       	sub	r18, r24
     c80:	26 17       	cp	r18, r22
     c82:	30 f3       	brcs	.-52     	; 0xc50 <SPI_Write_Block+0xa>
     c84:	08 95       	ret

00000c86 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     c86:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
     c8c:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
     c8e:	0d b4       	in	r0, 0x2d	; 45
     c90:	07 fc       	sbrc	r0, 7
     c92:	0a c0       	rjmp	.+20     	; 0xca8 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     c94:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     c96:	37 e2       	ldi	r19, 0x27	; 39
     c98:	80 31       	cpi	r24, 0x10	; 16
     c9a:	93 07       	cpc	r25, r19
     c9c:	c0 f3       	brcs	.-16     	; 0xc8e <SPI_Write_Byte+0x8>
			spiCommError = 1;
     c9e:	20 93 06 04 	sts	0x0406, r18
		}
	
		if(SPSR & _BV(SPIF)) {
     ca2:	0d b4       	in	r0, 0x2d	; 45
     ca4:	07 fe       	sbrs	r0, 7
     ca6:	f6 cf       	rjmp	.-20     	; 0xc94 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
     ca8:	8e b5       	in	r24, 0x2e	; 46
}
     caa:	08 95       	ret

00000cac <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <mirf_config+0xa>
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     cba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     cbc:	80 e2       	ldi	r24, 0x20	; 32
     cbe:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     cc2:	8d e0       	ldi	r24, 0x0D	; 13
     cc4:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     cc8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     cca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     ccc:	83 e2       	ldi	r24, 0x23	; 35
     cce:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     cd8:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
     cda:	80 91 03 04 	lds	r24, 0x0403
     cde:	90 91 04 04 	lds	r25, 0x0404
     ce2:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
     ce4:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     ce6:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     ce8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     cea:	80 e3       	ldi	r24, 0x30	; 48
     cec:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     cf0:	8e 01       	movw	r16, r28
     cf2:	0f 5f       	subi	r16, 0xFF	; 255
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	c8 01       	movw	r24, r16
     cf8:	63 e0       	ldi	r22, 0x03	; 3
     cfa:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_Write_Block>
    mirf_CSN_hi;
     cfe:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     d00:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     d02:	8a e2       	ldi	r24, 0x2A	; 42
     d04:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     d08:	c8 01       	movw	r24, r16
     d0a:	63 e0       	ldi	r22, 0x03	; 3
     d0c:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_Write_Block>
    mirf_CSN_hi;
     d10:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     d12:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     d14:	81 e2       	ldi	r24, 0x21	; 33
     d16:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     d20:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     d22:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     d24:	82 e2       	ldi	r24, 0x22	; 34
     d26:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     d30:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     d32:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     d34:	84 e2       	ldi	r24, 0x24	; 36
     d36:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     d3a:	82 e1       	ldi	r24, 0x12	; 18
     d3c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     d40:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     d42:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     d44:	85 e2       	ldi	r24, 0x25	; 37
     d46:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     d4a:	88 e2       	ldi	r24, 0x28	; 40
     d4c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     d50:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     d52:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     d54:	81 e3       	ldi	r24, 0x31	; 49
     d56:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     d5a:	8d e0       	ldi	r24, 0x0D	; 13
     d5c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     d60:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     d62:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     d64:	80 e5       	ldi	r24, 0x50	; 80
     d66:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     d6a:	83 e7       	ldi	r24, 0x73	; 115
     d6c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     d70:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     d72:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     d74:	8c e3       	ldi	r24, 0x3C	; 60
     d76:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     d80:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     d82:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     d84:	8d e3       	ldi	r24, 0x3D	; 61
     d86:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     d8a:	86 e0       	ldi	r24, 0x06	; 6
     d8c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     d90:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     d92:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     d94:	80 e2       	ldi	r24, 0x20	; 32
     d96:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     d9a:	8f e0       	ldi	r24, 0x0F	; 15
     d9c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     da0:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	08 95       	ret

00000db2 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     db2:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     db4:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     db6:	0e 94 56 06 	call	0xcac	; 0xcac <mirf_config>
}
     dba:	08 95       	ret

00000dbc <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	ec 01       	movw	r28, r24
    mirf_CE_lo;
     dc2:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     dc4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     dc6:	8a e2       	ldi	r24, 0x2A	; 42
     dc8:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     dcc:	ce 01       	movw	r24, r28
     dce:	65 e0       	ldi	r22, 0x05	; 5
     dd0:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_Write_Block>
    mirf_CSN_hi;
     dd4:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     dd6:	2c 9a       	sbi	0x05, 4	; 5
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     de4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     de6:	80 e3       	ldi	r24, 0x30	; 48
     de8:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     dec:	ce 01       	movw	r24, r28
     dee:	65 e0       	ldi	r22, 0x05	; 5
     df0:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_Write_Block>
    mirf_CSN_hi;
     df4:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     dfc:	80 91 4a 05 	lds	r24, 0x054A
     e00:	88 23       	and	r24, r24
     e02:	11 f0       	breq	.+4      	; 0xe08 <mirf_data_ready+0xc>
     e04:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
     e06:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     e08:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     e0a:	8f ef       	ldi	r24, 0xFF	; 255
     e0c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     e10:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     e12:	80 74       	andi	r24, 0x40	; 64
     e14:	08 95       	ret

00000e16 <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	0f 92       	push	r0
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     e20:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     e22:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     e24:	87 e1       	ldi	r24, 0x17	; 23
     e26:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     e2a:	be 01       	movw	r22, r28
     e2c:	6f 5f       	subi	r22, 0xFF	; 255
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	cb 01       	movw	r24, r22
     e32:	41 e0       	ldi	r20, 0x01	; 1
     e34:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     e38:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e3c:	81 70       	andi	r24, 0x01	; 1
     e3e:	0f 90       	pop	r0
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
     e46:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     e48:	82 ee       	ldi	r24, 0xE2	; 226
     e4a:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     e4e:	28 9a       	sbi	0x05, 0	; 5

}
     e50:	08 95       	ret

00000e52 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
     e58:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     e5a:	81 e6       	ldi	r24, 0x61	; 97
     e5c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     e60:	ce 01       	movw	r24, r28
     e62:	be 01       	movw	r22, r28
     e64:	4d e0       	ldi	r20, 0x0D	; 13
     e66:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     e6a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e6c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e6e:	87 e2       	ldi	r24, 0x27	; 39
     e70:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e74:	80 e4       	ldi	r24, 0x40	; 64
     e76:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     e7a:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	0f 92       	push	r0
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
     e8c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e8e:	8f 71       	andi	r24, 0x1F	; 31
     e90:	80 62       	ori	r24, 0x20	; 32
     e92:	69 83       	std	Y+1, r22	; 0x01
     e94:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e98:	69 81       	ldd	r22, Y+1	; 0x01
     e9a:	86 2f       	mov	r24, r22
     e9c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     ea0:	28 9a       	sbi	0x05, 0	; 5
}
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	0f 92       	push	r0
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     eba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     ebc:	8f 71       	andi	r24, 0x1F	; 31
     ebe:	49 83       	std	Y+1, r20	; 0x01
     ec0:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     ec4:	c8 01       	movw	r24, r16
     ec6:	b8 01       	movw	r22, r16
     ec8:	49 81       	ldd	r20, Y+1	; 0x01
     eca:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     ece:	28 9a       	sbi	0x05, 0	; 5
}
     ed0:	0f 90       	pop	r0
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	08 95       	ret

00000edc <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	0f 92       	push	r0
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     eec:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     eee:	8f 71       	andi	r24, 0x1F	; 31
     ef0:	80 62       	ori	r24, 0x20	; 32
     ef2:	49 83       	std	Y+1, r20	; 0x01
     ef4:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     ef8:	c8 01       	movw	r24, r16
     efa:	49 81       	ldd	r20, Y+1	; 0x01
     efc:	64 2f       	mov	r22, r20
     efe:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_Write_Block>
    mirf_CSN_hi;
     f02:	28 9a       	sbi	0x05, 0	; 5
}
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	08 95       	ret

00000f10 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
     f20:	80 91 4a 05 	lds	r24, 0x054A
     f24:	88 23       	and	r24, r24
     f26:	e1 f7       	brne	.-8      	; 0xf20 <mirf_send+0x10>

    mirf_CE_lo;
     f28:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 4a 05 	sts	0x054A, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     f30:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     f32:	80 e2       	ldi	r24, 0x20	; 32
     f34:	69 83       	std	Y+1, r22	; 0x01
     f36:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     f3a:	8a e4       	ldi	r24, 0x4A	; 74
     f3c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     f40:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
     f42:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
     f44:	81 ee       	ldi	r24, 0xE1	; 225
     f46:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
     f4a:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
     f4c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
     f4e:	80 ea       	ldi	r24, 0xA0	; 160
     f50:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
     f54:	c8 01       	movw	r24, r16
     f56:	69 81       	ldd	r22, Y+1	; 0x01
     f58:	0e 94 23 06 	call	0xc46	; 0xc46 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
     f5c:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
     f5e:	2c 9a       	sbi	0x05, 4	; 5
}
     f60:	0f 90       	pop	r0
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	08 95       	ret

00000f6c <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	18 2f       	mov	r17, r24
     f80:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
     f82:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     f84:	81 ee       	ldi	r24, 0xE1	; 225
     f86:	99 83       	std	Y+1, r25	; 0x01
     f88:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     f8c:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     f8e:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     f90:	88 ea       	ldi	r24, 0xA8	; 168
     f92:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
     f96:	99 81       	ldd	r25, Y+1	; 0x01
     f98:	00 23       	and	r16, r16
     f9a:	61 f0       	breq	.+24     	; 0xfb4 <writeAckPayload+0x48>
     f9c:	61 2f       	mov	r22, r17
     f9e:	79 2f       	mov	r23, r25
     fa0:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
     fa2:	f7 01       	movw	r30, r14
     fa4:	81 91       	ld	r24, Z+
     fa6:	7f 01       	movw	r14, r30
     fa8:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
     fac:	8e 2d       	mov	r24, r14
     fae:	81 1b       	sub	r24, r17
     fb0:	80 17       	cp	r24, r16
     fb2:	b8 f3       	brcs	.-18     	; 0xfa2 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
     fb4:	28 9a       	sbi	0x05, 0	; 5


}
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	ef 90       	pop	r14
     fc4:	08 95       	ret

00000fc6 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
     fc6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     fc8:	81 ee       	ldi	r24, 0xE1	; 225
     fca:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
     fce:	28 9a       	sbi	0x05, 0	; 5

}
     fd0:	08 95       	ret

00000fd2 <handleRFCommands>:

void handleRFCommands() {
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     fd8:	80 91 4a 05 	lds	r24, 0x054A
     fdc:	88 23       	and	r24, r24
     fde:	21 f0       	breq	.+8      	; 0xfe8 <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     fe8:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     ff0:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
     ff2:	86 ff       	sbrs	r24, 6
     ff4:	f5 cf       	rjmp	.-22     	; 0xfe0 <handleRFCommands+0xe>

		rfFlags |= 0x02;
     ff6:	80 91 05 04 	lds	r24, 0x0405
     ffa:	82 60       	ori	r24, 0x02	; 2
     ffc:	80 93 05 04 	sts	0x0405, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1000:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1002:	87 e2       	ldi	r24, 0x27	; 39
    1004:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1008:	80 e7       	ldi	r24, 0x70	; 112
    100a:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
    100e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    1010:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1012:	81 e6       	ldi	r24, 0x61	; 97
    1014:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1018:	87 e6       	ldi	r24, 0x67	; 103
    101a:	95 e0       	ldi	r25, 0x05	; 5
    101c:	bc 01       	movw	r22, r24
    101e:	4d e0       	ldi	r20, 0x0D	; 13
    1020:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1024:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1026:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1028:	87 e2       	ldi	r24, 0x27	; 39
    102a:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    102e:	80 e4       	ldi	r24, 0x40	; 64
    1030:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
    1034:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    1036:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1038:	82 ee       	ldi	r24, 0xE2	; 226
    103a:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
    103e:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1040:	60 91 67 05 	lds	r22, 0x0567
    1044:	66 23       	and	r22, r22
    1046:	09 f4       	brne	.+2      	; 0x104a <handleRFCommands+0x78>
    1048:	b8 c1       	rjmp	.+880    	; 0x13ba <handleRFCommands+0x3e8>
    104a:	50 91 6b 05 	lds	r21, 0x056B
    104e:	40 91 6c 05 	lds	r20, 0x056C
    1052:	e0 91 68 05 	lds	r30, 0x0568
    1056:	70 91 69 05 	lds	r23, 0x0569

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    105a:	25 2f       	mov	r18, r21
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	2f 77       	andi	r18, 0x7F	; 127
    1060:	30 70       	andi	r19, 0x00	; 0
    1062:	30 93 02 04 	sts	0x0402, r19
    1066:	20 93 01 04 	sts	0x0401, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    106a:	84 2f       	mov	r24, r20
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	8f 77       	andi	r24, 0x7F	; 127
    1070:	90 70       	andi	r25, 0x00	; 0
    1072:	90 93 00 04 	sts	0x0400, r25
    1076:	80 93 ff 03 	sts	0x03FF, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
    107a:	57 fd       	sbrc	r21, 7
    107c:	a6 c2       	rjmp	.+1356   	; 0x15ca <handleRFCommands+0x5f8>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
    107e:	22 0f       	add	r18, r18
    1080:	33 1f       	adc	r19, r19
    1082:	22 0f       	add	r18, r18
    1084:	33 1f       	adc	r19, r19
    1086:	30 95       	com	r19
    1088:	21 95       	neg	r18
    108a:	3f 4f       	sbci	r19, 0xFF	; 255
    108c:	30 93 f0 03 	sts	0x03F0, r19
    1090:	20 93 ef 03 	sts	0x03EF, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    1094:	47 fd       	sbrc	r20, 7
    1096:	a3 c2       	rjmp	.+1350   	; 0x15de <handleRFCommands+0x60c>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	90 95       	com	r25
    10a2:	81 95       	neg	r24
    10a4:	9f 4f       	sbci	r25, 0xFF	; 255
    10a6:	90 93 f2 03 	sts	0x03F2, r25
    10aa:	80 93 f1 03 	sts	0x03F1, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    10ae:	42 e0       	ldi	r20, 0x02	; 2
    10b0:	21 30       	cpi	r18, 0x01	; 1
    10b2:	34 07       	cpc	r19, r20
    10b4:	44 f0       	brlt	.+16     	; 0x10c6 <handleRFCommands+0xf4>
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	52 e0       	ldi	r21, 0x02	; 2
    10ba:	50 93 f0 03 	sts	0x03F0, r21
    10be:	40 93 ef 03 	sts	0x03EF, r20
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    10c6:	42 e0       	ldi	r20, 0x02	; 2
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	94 07       	cpc	r25, r20
    10cc:	34 f0       	brlt	.+12     	; 0x10da <handleRFCommands+0x108>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	92 e0       	ldi	r25, 0x02	; 2
    10d2:	90 93 f2 03 	sts	0x03F2, r25
    10d6:	80 93 f1 03 	sts	0x03F1, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    10da:	4e ef       	ldi	r20, 0xFE	; 254
    10dc:	20 30       	cpi	r18, 0x00	; 0
    10de:	34 07       	cpc	r19, r20
    10e0:	34 f4       	brge	.+12     	; 0x10ee <handleRFCommands+0x11c>
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	5e ef       	ldi	r21, 0xFE	; 254
    10e6:	50 93 f0 03 	sts	0x03F0, r21
    10ea:	40 93 ef 03 	sts	0x03EF, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    10ee:	2e ef       	ldi	r18, 0xFE	; 254
    10f0:	80 30       	cpi	r24, 0x00	; 0
    10f2:	92 07       	cpc	r25, r18
    10f4:	34 f4       	brge	.+12     	; 0x1102 <handleRFCommands+0x130>
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	9e ef       	ldi	r25, 0xFE	; 254
    10fa:	90 93 f2 03 	sts	0x03F2, r25
    10fe:	80 93 f1 03 	sts	0x03F1, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    1102:	26 2f       	mov	r18, r22
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	30 93 60 05 	sts	0x0560, r19
    110a:	20 93 5f 05 	sts	0x055F, r18
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	f0 93 62 05 	sts	0x0562, r31
    1114:	e0 93 61 05 	sts	0x0561, r30
    1118:	c7 2f       	mov	r28, r23
    111a:	d0 e0       	ldi	r29, 0x00	; 0
    111c:	d0 93 64 05 	sts	0x0564, r29
    1120:	c0 93 63 05 	sts	0x0563, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1124:	92 2f       	mov	r25, r18
    1126:	88 27       	eor	r24, r24
    1128:	82 1b       	sub	r24, r18
    112a:	93 0b       	sbc	r25, r19
    112c:	24 e6       	ldi	r18, 0x64	; 100
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	b9 01       	movw	r22, r18
    1132:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <__udivmodhi4>
    1136:	16 2f       	mov	r17, r22
    1138:	10 95       	com	r17
    113a:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    113e:	5e 2f       	mov	r21, r30
    1140:	44 27       	eor	r20, r20
    1142:	4e 1b       	sub	r20, r30
    1144:	5f 0b       	sbc	r21, r31
    1146:	ca 01       	movw	r24, r20
    1148:	b9 01       	movw	r22, r18
    114a:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <__udivmodhi4>
    114e:	60 95       	com	r22
    1150:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1154:	5c 2f       	mov	r21, r28
    1156:	44 27       	eor	r20, r20
    1158:	4c 1b       	sub	r20, r28
    115a:	5d 0b       	sbc	r21, r29
    115c:	ca 01       	movw	r24, r20
    115e:	b9 01       	movw	r22, r18
    1160:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <__udivmodhi4>
    1164:	60 95       	com	r22
    1166:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    116a:	81 2f       	mov	r24, r17
    116c:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <updateRedLed>
		updateGreenLed(pwm_green);
    1170:	80 91 0d 02 	lds	r24, 0x020D
    1174:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <updateGreenLed>
		updateBlueLed(pwm_blue);
    1178:	80 91 0e 02 	lds	r24, 0x020E
    117c:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    1180:	80 91 6a 05 	lds	r24, 0x056A
    1184:	80 ff       	sbrs	r24, 0
    1186:	25 c1       	rjmp	.+586    	; 0x13d2 <handleRFCommands+0x400>
			LED_IR1_LOW;
    1188:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    118a:	81 ff       	sbrs	r24, 1
    118c:	25 c1       	rjmp	.+586    	; 0x13d8 <handleRFCommands+0x406>
			LED_IR2_LOW;
    118e:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1190:	98 2f       	mov	r25, r24
    1192:	82 ff       	sbrs	r24, 2
    1194:	25 c1       	rjmp	.+586    	; 0x13e0 <handleRFCommands+0x40e>
			irEnabled = 1;
    1196:	21 e0       	ldi	r18, 0x01	; 1
    1198:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    119c:	84 fd       	sbrc	r24, 4
    119e:	24 c1       	rjmp	.+584    	; 0x13e8 <handleRFCommands+0x416>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    11a0:	86 ff       	sbrs	r24, 6
    11a2:	29 c1       	rjmp	.+594    	; 0x13f6 <handleRFCommands+0x424>
			obstacleAvoidanceEnabled = 1;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	80 93 47 05 	sts	0x0547, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    11aa:	97 fd       	sbrc	r25, 7
    11ac:	28 c1       	rjmp	.+592    	; 0x13fe <handleRFCommands+0x42c>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    11ae:	10 92 48 05 	sts	0x0548, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    11b2:	80 91 6d 05 	lds	r24, 0x056D
    11b6:	80 ff       	sbrs	r24, 0
    11b8:	29 c1       	rjmp	.+594    	; 0x140c <handleRFCommands+0x43a>
				GREEN_LED0_ON;
    11ba:	80 91 0b 01 	lds	r24, 0x010B
    11be:	8e 7f       	andi	r24, 0xFE	; 254
    11c0:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    11c4:	80 91 6d 05 	lds	r24, 0x056D
    11c8:	81 ff       	sbrs	r24, 1
    11ca:	29 c1       	rjmp	.+594    	; 0x141e <handleRFCommands+0x44c>
				GREEN_LED1_ON;
    11cc:	80 91 0b 01 	lds	r24, 0x010B
    11d0:	8d 7f       	andi	r24, 0xFD	; 253
    11d2:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    11d6:	80 91 6d 05 	lds	r24, 0x056D
    11da:	82 ff       	sbrs	r24, 2
    11dc:	29 c1       	rjmp	.+594    	; 0x1430 <handleRFCommands+0x45e>
				GREEN_LED2_ON;
    11de:	80 91 0b 01 	lds	r24, 0x010B
    11e2:	8b 7f       	andi	r24, 0xFB	; 251
    11e4:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    11e8:	80 91 6d 05 	lds	r24, 0x056D
    11ec:	83 ff       	sbrs	r24, 3
    11ee:	29 c1       	rjmp	.+594    	; 0x1442 <handleRFCommands+0x470>
				GREEN_LED3_ON;
    11f0:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    11f2:	80 91 6d 05 	lds	r24, 0x056D
    11f6:	84 ff       	sbrs	r24, 4
    11f8:	29 c1       	rjmp	.+594    	; 0x144c <handleRFCommands+0x47a>
				GREEN_LED4_ON;
    11fa:	80 91 0b 01 	lds	r24, 0x010B
    11fe:	8f 7e       	andi	r24, 0xEF	; 239
    1200:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    1204:	80 91 6d 05 	lds	r24, 0x056D
    1208:	85 ff       	sbrs	r24, 5
    120a:	29 c1       	rjmp	.+594    	; 0x145e <handleRFCommands+0x48c>
				GREEN_LED5_ON;
    120c:	80 91 0b 01 	lds	r24, 0x010B
    1210:	8f 7d       	andi	r24, 0xDF	; 223
    1212:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    1216:	80 91 6d 05 	lds	r24, 0x056D
    121a:	86 ff       	sbrs	r24, 6
    121c:	29 c1       	rjmp	.+594    	; 0x1470 <handleRFCommands+0x49e>
				GREEN_LED6_ON;
    121e:	80 91 0b 01 	lds	r24, 0x010B
    1222:	8f 7b       	andi	r24, 0xBF	; 191
    1224:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    1228:	80 91 6d 05 	lds	r24, 0x056D
    122c:	87 fd       	sbrc	r24, 7
    122e:	29 c1       	rjmp	.+594    	; 0x1482 <handleRFCommands+0x4b0>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    1230:	80 91 0b 01 	lds	r24, 0x010B
    1234:	80 68       	ori	r24, 0x80	; 128
    1236:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    123a:	80 91 0b 02 	lds	r24, 0x020B
    123e:	80 93 4f 05 	sts	0x054F, r24

		switch(packetId) {
    1242:	84 30       	cpi	r24, 0x04	; 4
    1244:	09 f4       	brne	.+2      	; 0x1248 <handleRFCommands+0x276>
    1246:	29 c1       	rjmp	.+594    	; 0x149a <handleRFCommands+0x4c8>
    1248:	85 30       	cpi	r24, 0x05	; 5
    124a:	08 f0       	brcs	.+2      	; 0x124e <handleRFCommands+0x27c>
    124c:	66 c1       	rjmp	.+716    	; 0x151a <handleRFCommands+0x548>
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	09 f0       	breq	.+2      	; 0x1254 <handleRFCommands+0x282>
    1252:	65 c0       	rjmp	.+202    	; 0x131e <handleRFCommands+0x34c>
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
    1254:	90 91 5f 03 	lds	r25, 0x035F
    1258:	80 91 60 03 	lds	r24, 0x0360
    125c:	90 93 50 05 	sts	0x0550, r25
				ackPayload[2] = proximityResult[0]>>8;
    1260:	80 93 51 05 	sts	0x0551, r24
				ackPayload[3] = proximityResult[1]&0xFF;
    1264:	90 91 61 03 	lds	r25, 0x0361
    1268:	80 91 62 03 	lds	r24, 0x0362
    126c:	90 93 52 05 	sts	0x0552, r25
				ackPayload[4] = proximityResult[1]>>8;
    1270:	80 93 53 05 	sts	0x0553, r24
				ackPayload[5] = proximityResult[2]&0xFF;
    1274:	90 91 63 03 	lds	r25, 0x0363
    1278:	80 91 64 03 	lds	r24, 0x0364
    127c:	90 93 54 05 	sts	0x0554, r25
				ackPayload[6] = proximityResult[2]>>8;
    1280:	80 93 55 05 	sts	0x0555, r24
				ackPayload[7] = proximityResult[3]&0xFF;
    1284:	90 91 65 03 	lds	r25, 0x0365
    1288:	80 91 66 03 	lds	r24, 0x0366
    128c:	90 93 56 05 	sts	0x0556, r25
				ackPayload[8] = proximityResult[3]>>8;
    1290:	80 93 57 05 	sts	0x0557, r24
				ackPayload[9] = proximityResult[5]&0xFF;
    1294:	90 91 69 03 	lds	r25, 0x0369
    1298:	80 91 6a 03 	lds	r24, 0x036A
    129c:	90 93 58 05 	sts	0x0558, r25
				ackPayload[10] = proximityResult[5]>>8;
    12a0:	80 93 59 05 	sts	0x0559, r24
				ackPayload[11] = proximityResult[6]&0xFF;
    12a4:	90 91 6b 03 	lds	r25, 0x036B
    12a8:	80 91 6c 03 	lds	r24, 0x036C
    12ac:	90 93 5a 05 	sts	0x055A, r25
				ackPayload[12] = proximityResult[6]>>8;
    12b0:	80 93 5b 05 	sts	0x055B, r24
				ackPayload[13] = proximityResult[7]&0xFF;
    12b4:	90 91 6d 03 	lds	r25, 0x036D
    12b8:	80 91 6e 03 	lds	r24, 0x036E
    12bc:	90 93 5c 05 	sts	0x055C, r25
				ackPayload[14] = proximityResult[7]>>8;
    12c0:	80 93 5d 05 	sts	0x055D, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    12c4:	30 91 03 01 	lds	r19, 0x0103
    12c8:	80 91 03 01 	lds	r24, 0x0103
    12cc:	20 91 03 01 	lds	r18, 0x0103
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	80 72       	andi	r24, 0x20	; 32
    12d4:	90 70       	andi	r25, 0x00	; 0
    12d6:	95 95       	asr	r25
    12d8:	87 95       	ror	r24
    12da:	95 95       	asr	r25
    12dc:	87 95       	ror	r24
    12de:	95 95       	asr	r25
    12e0:	87 95       	ror	r24
    12e2:	95 95       	asr	r25
    12e4:	87 95       	ror	r24
    12e6:	95 95       	asr	r25
    12e8:	87 95       	ror	r24
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	22 1f       	adc	r18, r18
    12f0:	22 27       	eor	r18, r18
    12f2:	22 1f       	adc	r18, r18
    12f4:	22 0f       	add	r18, r18
    12f6:	22 0f       	add	r18, r18
    12f8:	28 2b       	or	r18, r24
    12fa:	83 2f       	mov	r24, r19
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	80 71       	andi	r24, 0x10	; 16
    1300:	90 70       	andi	r25, 0x00	; 0
    1302:	95 95       	asr	r25
    1304:	87 95       	ror	r24
    1306:	95 95       	asr	r25
    1308:	87 95       	ror	r24
    130a:	95 95       	asr	r25
    130c:	87 95       	ror	r24
    130e:	95 95       	asr	r25
    1310:	87 95       	ror	r24
    1312:	28 2b       	or	r18, r24
    1314:	20 93 5e 05 	sts	0x055E, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    1318:	84 e0       	ldi	r24, 0x04	; 4
    131a:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
    131e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1320:	81 ee       	ldi	r24, 0xE1	; 225
    1322:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    mirf_CSN_hi;
    1326:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1328:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    132a:	88 ea       	ldi	r24, 0xA8	; 168
    132c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    1330:	80 91 4f 05 	lds	r24, 0x054F
    1334:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    1338:	80 91 50 05 	lds	r24, 0x0550
    133c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    1340:	80 91 51 05 	lds	r24, 0x0551
    1344:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    1348:	80 91 52 05 	lds	r24, 0x0552
    134c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    1350:	80 91 53 05 	lds	r24, 0x0553
    1354:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    1358:	80 91 54 05 	lds	r24, 0x0554
    135c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    1360:	80 91 55 05 	lds	r24, 0x0555
    1364:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    1368:	80 91 56 05 	lds	r24, 0x0556
    136c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    1370:	80 91 57 05 	lds	r24, 0x0557
    1374:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    1378:	80 91 58 05 	lds	r24, 0x0558
    137c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    1380:	80 91 59 05 	lds	r24, 0x0559
    1384:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    1388:	80 91 5a 05 	lds	r24, 0x055A
    138c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    1390:	80 91 5b 05 	lds	r24, 0x055B
    1394:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    1398:	80 91 5c 05 	lds	r24, 0x055C
    139c:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    13a0:	80 91 5d 05 	lds	r24, 0x055D
    13a4:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
    13a8:	80 91 5e 05 	lds	r24, 0x055E
    13ac:	0e 94 43 06 	call	0xc86	; 0xc86 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    13b0:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    13ba:	e0 91 68 05 	lds	r30, 0x0568
    13be:	ee 23       	and	r30, r30
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <handleRFCommands+0x3f2>
    13c2:	16 c1       	rjmp	.+556    	; 0x15f0 <handleRFCommands+0x61e>
    13c4:	50 91 6b 05 	lds	r21, 0x056B
    13c8:	40 91 6c 05 	lds	r20, 0x056C
    13cc:	70 91 69 05 	lds	r23, 0x0569
    13d0:	44 ce       	rjmp	.-888    	; 0x105a <handleRFCommands+0x88>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    13d2:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    13d4:	81 fd       	sbrc	r24, 1
    13d6:	db ce       	rjmp	.-586    	; 0x118e <handleRFCommands+0x1bc>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    13d8:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    13da:	98 2f       	mov	r25, r24
    13dc:	82 fd       	sbrc	r24, 2
    13de:	db ce       	rjmp	.-586    	; 0x1196 <handleRFCommands+0x1c4>
			irEnabled = 1;
		} else {
			irEnabled = 0;
    13e0:	10 92 12 02 	sts	0x0212, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    13e4:	84 ff       	sbrs	r24, 4
    13e6:	dc ce       	rjmp	.-584    	; 0x11a0 <handleRFCommands+0x1ce>
			calibrateSensors();
    13e8:	0e 94 0c 22 	call	0x4418	; 0x4418 <calibrateSensors>
    13ec:	90 91 6a 05 	lds	r25, 0x056A
    13f0:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    13f2:	86 fd       	sbrc	r24, 6
    13f4:	d7 ce       	rjmp	.-594    	; 0x11a4 <handleRFCommands+0x1d2>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    13f6:	10 92 47 05 	sts	0x0547, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    13fa:	97 ff       	sbrs	r25, 7
    13fc:	d8 ce       	rjmp	.-592    	; 0x11ae <handleRFCommands+0x1dc>
			cliffAvoidanceEnabled = 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	80 93 48 05 	sts	0x0548, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1404:	80 91 6d 05 	lds	r24, 0x056D
    1408:	80 fd       	sbrc	r24, 0
    140a:	d7 ce       	rjmp	.-594    	; 0x11ba <handleRFCommands+0x1e8>
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    140c:	80 91 0b 01 	lds	r24, 0x010B
    1410:	81 60       	ori	r24, 0x01	; 1
    1412:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1416:	80 91 6d 05 	lds	r24, 0x056D
    141a:	81 fd       	sbrc	r24, 1
    141c:	d7 ce       	rjmp	.-594    	; 0x11cc <handleRFCommands+0x1fa>
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    141e:	80 91 0b 01 	lds	r24, 0x010B
    1422:	82 60       	ori	r24, 0x02	; 2
    1424:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1428:	80 91 6d 05 	lds	r24, 0x056D
    142c:	82 fd       	sbrc	r24, 2
    142e:	d7 ce       	rjmp	.-594    	; 0x11de <handleRFCommands+0x20c>
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    1430:	80 91 0b 01 	lds	r24, 0x010B
    1434:	84 60       	ori	r24, 0x04	; 4
    1436:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
    143a:	80 91 6d 05 	lds	r24, 0x056D
    143e:	83 fd       	sbrc	r24, 3
    1440:	d7 ce       	rjmp	.-594    	; 0x11f0 <handleRFCommands+0x21e>
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    1442:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
    1444:	80 91 6d 05 	lds	r24, 0x056D
    1448:	84 fd       	sbrc	r24, 4
    144a:	d7 ce       	rjmp	.-594    	; 0x11fa <handleRFCommands+0x228>
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    144c:	80 91 0b 01 	lds	r24, 0x010B
    1450:	80 61       	ori	r24, 0x10	; 16
    1452:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
    1456:	80 91 6d 05 	lds	r24, 0x056D
    145a:	85 fd       	sbrc	r24, 5
    145c:	d7 ce       	rjmp	.-594    	; 0x120c <handleRFCommands+0x23a>
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    145e:	80 91 0b 01 	lds	r24, 0x010B
    1462:	80 62       	ori	r24, 0x20	; 32
    1464:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
    1468:	80 91 6d 05 	lds	r24, 0x056D
    146c:	86 fd       	sbrc	r24, 6
    146e:	d7 ce       	rjmp	.-594    	; 0x121e <handleRFCommands+0x24c>
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    1470:	80 91 0b 01 	lds	r24, 0x010B
    1474:	80 64       	ori	r24, 0x40	; 64
    1476:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
    147a:	80 91 6d 05 	lds	r24, 0x056D
    147e:	87 ff       	sbrs	r24, 7
    1480:	d7 ce       	rjmp	.-594    	; 0x1230 <handleRFCommands+0x25e>
				GREEN_LED7_ON;
    1482:	80 91 0b 01 	lds	r24, 0x010B
    1486:	8f 77       	andi	r24, 0x7F	; 127
    1488:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    148c:	80 91 0b 02 	lds	r24, 0x020B
    1490:	80 93 4f 05 	sts	0x054F, r24

		switch(packetId) {
    1494:	84 30       	cpi	r24, 0x04	; 4
    1496:	09 f0       	breq	.+2      	; 0x149a <handleRFCommands+0x4c8>
    1498:	d7 ce       	rjmp	.-594    	; 0x1248 <handleRFCommands+0x276>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    149a:	90 91 67 03 	lds	r25, 0x0367
    149e:	80 91 68 03 	lds	r24, 0x0368
    14a2:	90 93 50 05 	sts	0x0550, r25
				ackPayload[2] = proximityResult[4]>>8;
    14a6:	80 93 51 05 	sts	0x0551, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    14aa:	90 91 6f 03 	lds	r25, 0x036F
    14ae:	80 91 70 03 	lds	r24, 0x0370
    14b2:	90 93 52 05 	sts	0x0552, r25
				ackPayload[4] = proximityResult[8]>>8;
    14b6:	80 93 53 05 	sts	0x0553, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    14ba:	90 91 71 03 	lds	r25, 0x0371
    14be:	80 91 72 03 	lds	r24, 0x0372
    14c2:	90 93 54 05 	sts	0x0554, r25
				ackPayload[6] = proximityResult[9]>>8;
    14c6:	80 93 55 05 	sts	0x0555, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    14ca:	90 91 73 03 	lds	r25, 0x0373
    14ce:	80 91 74 03 	lds	r24, 0x0374
    14d2:	90 93 56 05 	sts	0x0556, r25
				ackPayload[8] = proximityResult[10]>>8;
    14d6:	80 93 57 05 	sts	0x0557, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    14da:	90 91 75 03 	lds	r25, 0x0375
    14de:	80 91 76 03 	lds	r24, 0x0376
    14e2:	90 93 58 05 	sts	0x0558, r25
				ackPayload[10] = proximityResult[11]>>8;
    14e6:	80 93 59 05 	sts	0x0559, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    14ea:	90 91 18 05 	lds	r25, 0x0518
    14ee:	80 91 19 05 	lds	r24, 0x0519
    14f2:	90 93 5a 05 	sts	0x055A, r25
				ackPayload[12] = accX>>8;
    14f6:	80 93 5b 05 	sts	0x055B, r24
				ackPayload[13] = accY&0xFF;
    14fa:	90 91 1a 05 	lds	r25, 0x051A
    14fe:	80 91 1b 05 	lds	r24, 0x051B
    1502:	90 93 5c 05 	sts	0x055C, r25
				ackPayload[14] = accY>>8;
    1506:	80 93 5d 05 	sts	0x055D, r24
				ackPayload[15] = irCommand;
    150a:	80 91 13 05 	lds	r24, 0x0513
    150e:	80 93 5e 05 	sts	0x055E, r24
				packetId = 5;
    1512:	85 e0       	ldi	r24, 0x05	; 5
    1514:	80 93 0b 02 	sts	0x020B, r24
				break;
    1518:	02 cf       	rjmp	.-508    	; 0x131e <handleRFCommands+0x34c>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    151a:	85 30       	cpi	r24, 0x05	; 5
    151c:	09 f4       	brne	.+2      	; 0x1520 <handleRFCommands+0x54e>
    151e:	7d c0       	rjmp	.+250    	; 0x161a <handleRFCommands+0x648>
    1520:	86 30       	cpi	r24, 0x06	; 6
    1522:	09 f0       	breq	.+2      	; 0x1526 <handleRFCommands+0x554>
    1524:	fc ce       	rjmp	.-520    	; 0x131e <handleRFCommands+0x34c>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    1526:	80 91 3f 03 	lds	r24, 0x033F
    152a:	90 91 40 03 	lds	r25, 0x0340
    152e:	80 93 50 05 	sts	0x0550, r24
				ackPayload[2] = proximityValue[8]>>8;
    1532:	80 91 3f 03 	lds	r24, 0x033F
    1536:	90 91 40 03 	lds	r25, 0x0340
    153a:	90 93 51 05 	sts	0x0551, r25
				ackPayload[3] = proximityValue[16]&0xFF;
    153e:	80 91 4f 03 	lds	r24, 0x034F
    1542:	90 91 50 03 	lds	r25, 0x0350
    1546:	80 93 52 05 	sts	0x0552, r24
				ackPayload[4] = proximityValue[16]>>8;
    154a:	80 91 4f 03 	lds	r24, 0x034F
    154e:	90 91 50 03 	lds	r25, 0x0350
    1552:	90 93 53 05 	sts	0x0553, r25
				ackPayload[5] = proximityValue[18]&0xFF;
    1556:	80 91 53 03 	lds	r24, 0x0353
    155a:	90 91 54 03 	lds	r25, 0x0354
    155e:	80 93 54 05 	sts	0x0554, r24
				ackPayload[6] = proximityValue[18]>>8;
    1562:	80 91 53 03 	lds	r24, 0x0353
    1566:	90 91 54 03 	lds	r25, 0x0354
    156a:	90 93 55 05 	sts	0x0555, r25
				ackPayload[7] = proximityValue[20]&0xFF;
    156e:	80 91 57 03 	lds	r24, 0x0357
    1572:	90 91 58 03 	lds	r25, 0x0358
    1576:	80 93 56 05 	sts	0x0556, r24
				ackPayload[8] = proximityValue[20]>>8;
    157a:	80 91 57 03 	lds	r24, 0x0357
    157e:	90 91 58 03 	lds	r25, 0x0358
    1582:	90 93 57 05 	sts	0x0557, r25
				ackPayload[9] = proximityValue[22]&0xFF;
    1586:	80 91 5b 03 	lds	r24, 0x035B
    158a:	90 91 5c 03 	lds	r25, 0x035C
    158e:	80 93 58 05 	sts	0x0558, r24
				ackPayload[10] = proximityValue[22]>>8;
    1592:	80 91 5b 03 	lds	r24, 0x035B
    1596:	90 91 5c 03 	lds	r25, 0x035C
    159a:	90 93 59 05 	sts	0x0559, r25
				ackPayload[11] = accZ&0xFF;
    159e:	90 91 1c 05 	lds	r25, 0x051C
    15a2:	80 91 1d 05 	lds	r24, 0x051D
    15a6:	90 93 5a 05 	sts	0x055A, r25
				ackPayload[12] = accZ>>8;
    15aa:	80 93 5b 05 	sts	0x055B, r24
				ackPayload[13] = batteryLevel&0xFF;
    15ae:	90 91 c3 03 	lds	r25, 0x03C3
    15b2:	80 91 c4 03 	lds	r24, 0x03C4
    15b6:	90 93 5c 05 	sts	0x055C, r25
				ackPayload[14] = batteryLevel>>8;
    15ba:	80 93 5d 05 	sts	0x055D, r24
				ackPayload[15] = 0;
    15be:	10 92 5e 05 	sts	0x055E, r1
				packetId = 3;
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	80 93 0b 02 	sts	0x020B, r24
				break;
    15c8:	aa ce       	rjmp	.-684    	; 0x131e <handleRFCommands+0x34c>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    15ca:	22 0f       	add	r18, r18
    15cc:	33 1f       	adc	r19, r19
    15ce:	22 0f       	add	r18, r18
    15d0:	33 1f       	adc	r19, r19
    15d2:	30 93 f0 03 	sts	0x03F0, r19
    15d6:	20 93 ef 03 	sts	0x03EF, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    15da:	47 ff       	sbrs	r20, 7
    15dc:	5d cd       	rjmp	.-1350   	; 0x1098 <handleRFCommands+0xc6>
			pwm_left_desired = speedl<<2;
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	90 93 f2 03 	sts	0x03F2, r25
    15ea:	80 93 f1 03 	sts	0x03F1, r24
    15ee:	5f cd       	rjmp	.-1346   	; 0x10ae <handleRFCommands+0xdc>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    15f0:	70 91 69 05 	lds	r23, 0x0569
    15f4:	77 23       	and	r23, r23
    15f6:	61 f4       	brne	.+24     	; 0x1610 <handleRFCommands+0x63e>
    15f8:	80 91 6a 05 	lds	r24, 0x056A
    15fc:	88 30       	cpi	r24, 0x08	; 8
    15fe:	41 f4       	brne	.+16     	; 0x1610 <handleRFCommands+0x63e>
    1600:	50 91 6b 05 	lds	r21, 0x056B
    1604:	55 23       	and	r21, r21
    1606:	09 f4       	brne	.+2      	; 0x160a <handleRFCommands+0x638>
    1608:	64 c0       	rjmp	.+200    	; 0x16d2 <handleRFCommands+0x700>
    160a:	40 91 6c 05 	lds	r20, 0x056C
    160e:	25 cd       	rjmp	.-1462   	; 0x105a <handleRFCommands+0x88>
    1610:	50 91 6b 05 	lds	r21, 0x056B
    1614:	40 91 6c 05 	lds	r20, 0x056C
    1618:	20 cd       	rjmp	.-1472   	; 0x105a <handleRFCommands+0x88>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    161a:	80 91 2f 03 	lds	r24, 0x032F
    161e:	90 91 30 03 	lds	r25, 0x0330
    1622:	80 93 50 05 	sts	0x0550, r24
				ackPayload[2] = proximityValue[0]>>8;
    1626:	80 91 2f 03 	lds	r24, 0x032F
    162a:	90 91 30 03 	lds	r25, 0x0330
    162e:	90 93 51 05 	sts	0x0551, r25
				ackPayload[3] = proximityValue[2]&0xFF;
    1632:	80 91 33 03 	lds	r24, 0x0333
    1636:	90 91 34 03 	lds	r25, 0x0334
    163a:	80 93 52 05 	sts	0x0552, r24
				ackPayload[4] = proximityValue[2]>>8;
    163e:	80 91 33 03 	lds	r24, 0x0333
    1642:	90 91 34 03 	lds	r25, 0x0334
    1646:	90 93 53 05 	sts	0x0553, r25
				ackPayload[5] = proximityValue[4]&0xFF;
    164a:	80 91 37 03 	lds	r24, 0x0337
    164e:	90 91 38 03 	lds	r25, 0x0338
    1652:	80 93 54 05 	sts	0x0554, r24
				ackPayload[6] = proximityValue[4]>>8;
    1656:	80 91 37 03 	lds	r24, 0x0337
    165a:	90 91 38 03 	lds	r25, 0x0338
    165e:	90 93 55 05 	sts	0x0555, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    1662:	80 91 3b 03 	lds	r24, 0x033B
    1666:	90 91 3c 03 	lds	r25, 0x033C
    166a:	80 93 56 05 	sts	0x0556, r24
				ackPayload[8] = proximityValue[6]>>8;
    166e:	80 91 3b 03 	lds	r24, 0x033B
    1672:	90 91 3c 03 	lds	r25, 0x033C
    1676:	90 93 57 05 	sts	0x0557, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    167a:	80 91 43 03 	lds	r24, 0x0343
    167e:	90 91 44 03 	lds	r25, 0x0344
    1682:	80 93 58 05 	sts	0x0558, r24
				ackPayload[10] = proximityValue[10]>>8;
    1686:	80 91 43 03 	lds	r24, 0x0343
    168a:	90 91 44 03 	lds	r25, 0x0344
    168e:	90 93 59 05 	sts	0x0559, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    1692:	80 91 47 03 	lds	r24, 0x0347
    1696:	90 91 48 03 	lds	r25, 0x0348
    169a:	80 93 5a 05 	sts	0x055A, r24
				ackPayload[12] = proximityValue[12]>>8;
    169e:	80 91 47 03 	lds	r24, 0x0347
    16a2:	90 91 48 03 	lds	r25, 0x0348
    16a6:	90 93 5b 05 	sts	0x055B, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    16aa:	80 91 4b 03 	lds	r24, 0x034B
    16ae:	90 91 4c 03 	lds	r25, 0x034C
    16b2:	80 93 5c 05 	sts	0x055C, r24
				ackPayload[14] = proximityValue[14]>>8;
    16b6:	80 91 4b 03 	lds	r24, 0x034B
    16ba:	90 91 4c 03 	lds	r25, 0x034C
    16be:	90 93 5d 05 	sts	0x055D, r25
				ackPayload[15] = currentSelector;
    16c2:	80 91 37 05 	lds	r24, 0x0537
    16c6:	80 93 5e 05 	sts	0x055E, r24
				packetId = 6;
    16ca:	86 e0       	ldi	r24, 0x06	; 6
    16cc:	80 93 0b 02 	sts	0x020B, r24
				break;
    16d0:	26 ce       	rjmp	.-948    	; 0x131e <handleRFCommands+0x34c>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    16d2:	40 91 6c 05 	lds	r20, 0x056C
    16d6:	44 23       	and	r20, r20
    16d8:	79 f0       	breq	.+30     	; 0x16f8 <handleRFCommands+0x726>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    16da:	10 92 02 04 	sts	0x0402, r1
    16de:	10 92 01 04 	sts	0x0401, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    16e2:	84 2f       	mov	r24, r20
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	8f 77       	andi	r24, 0x7F	; 127
    16e8:	90 70       	andi	r25, 0x00	; 0
    16ea:	90 93 00 04 	sts	0x0400, r25
    16ee:	80 93 ff 03 	sts	0x03FF, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	c3 cc       	rjmp	.-1658   	; 0x107e <handleRFCommands+0xac>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    16f8:	8c e3       	ldi	r24, 0x3C	; 60
    16fa:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <sleep>
    16fe:	50 91 6b 05 	lds	r21, 0x056B
    1702:	40 91 6c 05 	lds	r20, 0x056C
    1706:	60 91 67 05 	lds	r22, 0x0567
    170a:	e0 91 68 05 	lds	r30, 0x0568
    170e:	70 91 69 05 	lds	r23, 0x0569
    1712:	a3 cc       	rjmp	.-1722   	; 0x105a <handleRFCommands+0x88>

00001714 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29

	PCICR = 0;
    1718:	c8 e6       	ldi	r28, 0x68	; 104
    171a:	d0 e0       	ldi	r29, 0x00	; 0
    171c:	18 82       	st	Y, r1
	PCMSK1 = 0;
    171e:	ac e6       	ldi	r26, 0x6C	; 108
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	1c 92       	st	X, r1
	TCCR2A = 0;
    1724:	e0 eb       	ldi	r30, 0xB0	; 176
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	10 82       	st	Z, r1
	TCCR2B = 0;
    172a:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    172e:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    1732:	88 81       	ld	r24, Y
    1734:	82 60       	ori	r24, 0x02	; 2
    1736:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    1738:	8c 91       	ld	r24, X
    173a:	80 68       	ori	r24, 0x80	; 128
    173c:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    173e:	80 81       	ld	r24, Z
    1740:	82 60       	ori	r24, 0x02	; 2
    1742:	80 83       	st	Z, r24

}
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	08 95       	ret

0000174a <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    174a:	1f 92       	push	r1
    174c:	0f 92       	push	r0
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	0f 92       	push	r0
    1752:	11 24       	eor	r1, r1
    1754:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    1756:	80 91 12 02 	lds	r24, 0x0212
    175a:	88 23       	and	r24, r24
    175c:	21 f1       	breq	.+72     	; 0x17a6 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    175e:	80 91 03 01 	lds	r24, 0x0103
    1762:	86 fd       	sbrc	r24, 6
    1764:	20 c0       	rjmp	.+64     	; 0x17a6 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    1766:	80 91 68 00 	lds	r24, 0x0068
    176a:	8d 7f       	andi	r24, 0xFD	; 253
    176c:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    1770:	80 91 6c 00 	lds	r24, 0x006C
    1774:	8f 77       	andi	r24, 0x7F	; 127
    1776:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    1780:	8d e0       	ldi	r24, 0x0D	; 13
    1782:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1786:	80 91 b1 00 	lds	r24, 0x00B1
    178a:	86 60       	ori	r24, 0x06	; 6
    178c:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    1790:	80 91 70 00 	lds	r24, 0x0070
    1794:	82 60       	ori	r24, 0x02	; 2
    1796:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    179a:	10 92 26 03 	sts	0x0326, r1
    179e:	10 92 27 03 	sts	0x0327, r1
    17a2:	10 92 28 03 	sts	0x0328, r1

		}

	}
	
}
    17a6:	8f 91       	pop	r24
    17a8:	0f 90       	pop	r0
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	0f 90       	pop	r0
    17ae:	1f 90       	pop	r1
    17b0:	18 95       	reti

000017b2 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    17b2:	1f 92       	push	r1
    17b4:	0f 92       	push	r0
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	0f 92       	push	r0
    17ba:	11 24       	eor	r1, r1
    17bc:	2f 93       	push	r18
    17be:	3f 93       	push	r19
    17c0:	4f 93       	push	r20
    17c2:	5f 93       	push	r21
    17c4:	8f 93       	push	r24
    17c6:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    17c8:	80 91 b1 00 	lds	r24, 0x00B1
    17cc:	88 7f       	andi	r24, 0xF8	; 248
    17ce:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    17d2:	80 91 13 02 	lds	r24, 0x0213
    17d6:	88 23       	and	r24, r24
    17d8:	a9 f0       	breq	.+42     	; 0x1804 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    17da:	80 91 03 01 	lds	r24, 0x0103
    17de:	86 ff       	sbrs	r24, 6
    17e0:	65 c0       	rjmp	.+202    	; 0x18ac <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    17e2:	80 91 68 00 	lds	r24, 0x0068
    17e6:	82 60       	ori	r24, 0x02	; 2
    17e8:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    17ec:	80 91 6c 00 	lds	r24, 0x006C
    17f0:	80 68       	ori	r24, 0x80	; 128
    17f2:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    17f6:	8f ef       	ldi	r24, 0xFF	; 255
    17f8:	9f ef       	ldi	r25, 0xFF	; 255
    17fa:	90 93 02 02 	sts	0x0202, r25
    17fe:	80 93 01 02 	sts	0x0201, r24
    1802:	49 c0       	rjmp	.+146    	; 0x1896 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    1804:	80 91 01 02 	lds	r24, 0x0201
    1808:	90 91 02 02 	lds	r25, 0x0202
    180c:	2f ef       	ldi	r18, 0xFF	; 255
    180e:	8f 3f       	cpi	r24, 0xFF	; 255
    1810:	92 07       	cpc	r25, r18
    1812:	09 f4       	brne	.+2      	; 0x1816 <__vector_13+0x64>
    1814:	63 c0       	rjmp	.+198    	; 0x18dc <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	91 05       	cpc	r25, r1
    181a:	09 f4       	brne	.+2      	; 0x181e <__vector_13+0x6c>
    181c:	98 c0       	rjmp	.+304    	; 0x194e <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    181e:	9c 01       	movw	r18, r24
    1820:	22 50       	subi	r18, 0x02	; 2
    1822:	30 40       	sbci	r19, 0x00	; 0
    1824:	25 30       	cpi	r18, 0x05	; 5
    1826:	31 05       	cpc	r19, r1
    1828:	08 f4       	brcc	.+2      	; 0x182c <__vector_13+0x7a>
    182a:	67 c0       	rjmp	.+206    	; 0x18fa <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    182c:	9c 01       	movw	r18, r24
    182e:	27 50       	subi	r18, 0x07	; 7
    1830:	30 40       	sbci	r19, 0x00	; 0
    1832:	26 30       	cpi	r18, 0x06	; 6
    1834:	31 05       	cpc	r19, r1
    1836:	08 f0       	brcs	.+2      	; 0x183a <__vector_13+0x88>
    1838:	bd c0       	rjmp	.+378    	; 0x19b4 <__vector_13+0x202>

				OCR2A = 54;
    183a:	26 e3       	ldi	r18, 0x36	; 54
    183c:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1840:	20 91 b1 00 	lds	r18, 0x00B1
    1844:	26 60       	ori	r18, 0x06	; 6
    1846:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    184a:	20 91 70 00 	lds	r18, 0x0070
    184e:	22 60       	ori	r18, 0x02	; 2
    1850:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1854:	20 91 03 01 	lds	r18, 0x0103
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	20 74       	andi	r18, 0x40	; 64
    185c:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    185e:	00 24       	eor	r0, r0
    1860:	22 0f       	add	r18, r18
    1862:	33 1f       	adc	r19, r19
    1864:	00 1c       	adc	r0, r0
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	00 1c       	adc	r0, r0
    186c:	23 2f       	mov	r18, r19
    186e:	30 2d       	mov	r19, r0
    1870:	4c e0       	ldi	r20, 0x0C	; 12
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	48 1b       	sub	r20, r24
    1876:	59 0b       	sbc	r21, r25
    1878:	02 c0       	rjmp	.+4      	; 0x187e <__vector_13+0xcc>
    187a:	22 0f       	add	r18, r18
    187c:	33 1f       	adc	r19, r19
    187e:	4a 95       	dec	r20
    1880:	e2 f7       	brpl	.-8      	; 0x187a <__vector_13+0xc8>
				data_temp += temp;
    1882:	40 91 26 03 	lds	r20, 0x0326
    1886:	42 0f       	add	r20, r18
    1888:	40 93 26 03 	sts	0x0326, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    188c:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    188e:	90 93 02 02 	sts	0x0202, r25
    1892:	80 93 01 02 	sts	0x0201, r24

		}

}
    1896:	9f 91       	pop	r25
    1898:	8f 91       	pop	r24
    189a:	5f 91       	pop	r21
    189c:	4f 91       	pop	r20
    189e:	3f 91       	pop	r19
    18a0:	2f 91       	pop	r18
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	0f 90       	pop	r0
    18a8:	1f 90       	pop	r1
    18aa:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    18ac:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    18b0:	83 e3       	ldi	r24, 0x33	; 51
    18b2:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    18b6:	80 91 b1 00 	lds	r24, 0x00B1
    18ba:	86 60       	ori	r24, 0x06	; 6
    18bc:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    18c0:	80 91 70 00 	lds	r24, 0x0070
    18c4:	82 60       	ori	r24, 0x02	; 2
    18c6:	80 93 70 00 	sts	0x0070, r24
    18ca:	80 91 01 02 	lds	r24, 0x0201
    18ce:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    18d2:	2f ef       	ldi	r18, 0xFF	; 255
    18d4:	8f 3f       	cpi	r24, 0xFF	; 255
    18d6:	92 07       	cpc	r25, r18
    18d8:	c9 f6       	brne	.-78     	; 0x188c <__vector_13+0xda>
    18da:	dd cf       	rjmp	.-70     	; 0x1896 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    18dc:	20 91 03 01 	lds	r18, 0x0103
    18e0:	26 ff       	sbrs	r18, 6
    18e2:	52 c0       	rjmp	.+164    	; 0x1988 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    18e4:	20 91 68 00 	lds	r18, 0x0068
    18e8:	22 60       	ori	r18, 0x02	; 2
    18ea:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    18ee:	20 91 6c 00 	lds	r18, 0x006C
    18f2:	20 68       	ori	r18, 0x80	; 128
    18f4:	20 93 6c 00 	sts	0x006C, r18
    18f8:	ce cf       	rjmp	.-100    	; 0x1896 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    18fa:	26 e3       	ldi	r18, 0x36	; 54
    18fc:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1900:	20 91 b1 00 	lds	r18, 0x00B1
    1904:	26 60       	ori	r18, 0x06	; 6
    1906:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    190a:	20 91 70 00 	lds	r18, 0x0070
    190e:	22 60       	ori	r18, 0x02	; 2
    1910:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1914:	20 91 03 01 	lds	r18, 0x0103
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	20 74       	andi	r18, 0x40	; 64
    191c:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    191e:	00 24       	eor	r0, r0
    1920:	22 0f       	add	r18, r18
    1922:	33 1f       	adc	r19, r19
    1924:	00 1c       	adc	r0, r0
    1926:	22 0f       	add	r18, r18
    1928:	33 1f       	adc	r19, r19
    192a:	00 1c       	adc	r0, r0
    192c:	23 2f       	mov	r18, r19
    192e:	30 2d       	mov	r19, r0
    1930:	46 e0       	ldi	r20, 0x06	; 6
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	48 1b       	sub	r20, r24
    1936:	59 0b       	sbc	r21, r25
    1938:	02 c0       	rjmp	.+4      	; 0x193e <__vector_13+0x18c>
    193a:	22 0f       	add	r18, r18
    193c:	33 1f       	adc	r19, r19
    193e:	4a 95       	dec	r20
    1940:	e2 f7       	brpl	.-8      	; 0x193a <__vector_13+0x188>
				address_temp += temp;
    1942:	40 91 27 03 	lds	r20, 0x0327
    1946:	42 0f       	add	r20, r18
    1948:	40 93 27 03 	sts	0x0327, r20
    194c:	9f cf       	rjmp	.-194    	; 0x188c <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    194e:	20 91 03 01 	lds	r18, 0x0103
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	20 74       	andi	r18, 0x40	; 64
    1956:	30 70       	andi	r19, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	23 2f       	mov	r18, r19
    195c:	00 0c       	add	r0, r0
    195e:	22 1f       	adc	r18, r18
    1960:	33 0b       	sbc	r19, r19
    1962:	00 0c       	add	r0, r0
    1964:	22 1f       	adc	r18, r18
    1966:	33 1f       	adc	r19, r19
    1968:	20 93 28 03 	sts	0x0328, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    196c:	26 e3       	ldi	r18, 0x36	; 54
    196e:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1972:	20 91 b1 00 	lds	r18, 0x00B1
    1976:	26 60       	ori	r18, 0x06	; 6
    1978:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    197c:	20 91 70 00 	lds	r18, 0x0070
    1980:	22 60       	ori	r18, 0x02	; 2
    1982:	20 93 70 00 	sts	0x0070, r18
    1986:	82 cf       	rjmp	.-252    	; 0x188c <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    1988:	8c e1       	ldi	r24, 0x1C	; 28
    198a:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    198e:	80 91 b1 00 	lds	r24, 0x00B1
    1992:	86 60       	ori	r24, 0x06	; 6
    1994:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    1998:	80 91 70 00 	lds	r24, 0x0070
    199c:	82 60       	ori	r24, 0x02	; 2
    199e:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    19a2:	10 92 26 03 	sts	0x0326, r1
    19a6:	10 92 27 03 	sts	0x0327, r1
    19aa:	10 92 28 03 	sts	0x0328, r1
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	6d cf       	rjmp	.-294    	; 0x188e <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    19b4:	8d 30       	cpi	r24, 0x0D	; 13
    19b6:	91 05       	cpc	r25, r1
    19b8:	09 f0       	breq	.+2      	; 0x19bc <__vector_13+0x20a>
    19ba:	68 cf       	rjmp	.-304    	; 0x188c <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    19bc:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    19c0:	80 91 68 00 	lds	r24, 0x0068
    19c4:	82 60       	ori	r24, 0x02	; 2
    19c6:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    19ca:	80 91 6c 00 	lds	r24, 0x006C
    19ce:	80 68       	ori	r24, 0x80	; 128
    19d0:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	9f ef       	ldi	r25, 0xFF	; 255
    19d8:	90 93 02 02 	sts	0x0202, r25
    19dc:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    19e0:	80 91 28 03 	lds	r24, 0x0328
    19e4:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    19e8:	80 91 27 03 	lds	r24, 0x0327
    19ec:	80 93 24 03 	sts	0x0324, r24
				data_ir = data_temp;
    19f0:	80 91 26 03 	lds	r24, 0x0326
    19f4:	80 93 25 03 	sts	0x0325, r24
				command_received=1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	80 93 14 05 	sts	0x0514, r24
    19fe:	4b cf       	rjmp	.-362    	; 0x1896 <__vector_13+0xe4>

00001a00 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    1a00:	80 91 00 02 	lds	r24, 0x0200
    1a04:	08 95       	ret

00001a06 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    1a06:	80 91 24 03 	lds	r24, 0x0324
    1a0a:	08 95       	ret

00001a0c <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    1a0c:	80 91 25 03 	lds	r24, 0x0325
    1a10:	08 95       	ret

00001a12 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    1a12:	80 91 12 02 	lds	r24, 0x0212
    1a16:	88 23       	and	r24, r24
    1a18:	b1 f1       	breq	.+108    	; 0x1a86 <handleIRRemoteCommands+0x74>

		if(command_received) {
    1a1a:	80 91 14 05 	lds	r24, 0x0514
    1a1e:	88 23       	and	r24, r24
    1a20:	91 f1       	breq	.+100    	; 0x1a86 <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    1a22:	e0 91 25 03 	lds	r30, 0x0325

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    1a26:	e0 93 13 05 	sts	0x0513, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    1a2a:	10 92 14 05 	sts	0x0514, r1

			switch(irCommand) {
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	e5 33       	cpi	r30, 0x35	; 53
    1a32:	f1 05       	cpc	r31, r1
    1a34:	48 f1       	brcs	.+82     	; 0x1a88 <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    1a36:	20 91 ef 03 	lds	r18, 0x03EF
    1a3a:	30 91 f0 03 	lds	r19, 0x03F0
    1a3e:	80 91 f1 03 	lds	r24, 0x03F1
    1a42:	90 91 f2 03 	lds	r25, 0x03F2
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    1a46:	37 fd       	sbrc	r19, 7
    1a48:	27 c0       	rjmp	.+78     	; 0x1a98 <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    1a4a:	35 95       	asr	r19
    1a4c:	27 95       	ror	r18
    1a4e:	35 95       	asr	r19
    1a50:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    1a52:	30 93 02 04 	sts	0x0402, r19
    1a56:	20 93 01 04 	sts	0x0401, r18
			}
			if(pwm_left_desired >= 0) {
    1a5a:	97 fd       	sbrc	r25, 7
    1a5c:	09 c0       	rjmp	.+18     	; 0x1a70 <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    1a5e:	95 95       	asr	r25
    1a60:	87 95       	ror	r24
    1a62:	95 95       	asr	r25
    1a64:	87 95       	ror	r24
    1a66:	90 93 00 04 	sts	0x0400, r25
    1a6a:	80 93 ff 03 	sts	0x03FF, r24
    1a6e:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    1a70:	90 95       	com	r25
    1a72:	81 95       	neg	r24
    1a74:	9f 4f       	sbci	r25, 0xFF	; 255
    1a76:	95 95       	asr	r25
    1a78:	87 95       	ror	r24
    1a7a:	95 95       	asr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	90 93 00 04 	sts	0x0400, r25
    1a82:	80 93 ff 03 	sts	0x03FF, r24
    1a86:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    1a88:	ee 58       	subi	r30, 0x8E	; 142
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	ee 0f       	add	r30, r30
    1a8e:	ff 1f       	adc	r31, r31
    1a90:	05 90       	lpm	r0, Z+
    1a92:	f4 91       	lpm	r31, Z+
    1a94:	e0 2d       	mov	r30, r0
    1a96:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    1a98:	30 95       	com	r19
    1a9a:	21 95       	neg	r18
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	d5 cf       	rjmp	.-86     	; 0x1a4a <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    1aa0:	80 93 47 05 	sts	0x0547, r24
							cliffAvoidanceEnabled = 0;
    1aa4:	10 92 48 05 	sts	0x0548, r1
    1aa8:	c6 cf       	rjmp	.-116    	; 0x1a36 <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    1aaa:	10 92 47 05 	sts	0x0547, r1
							cliffAvoidanceEnabled = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	80 93 48 05 	sts	0x0548, r24
    1ab4:	20 91 ef 03 	lds	r18, 0x03EF
    1ab8:	30 91 f0 03 	lds	r19, 0x03F0
    1abc:	80 91 f1 03 	lds	r24, 0x03F1
    1ac0:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    1ac4:	c0 cf       	rjmp	.-128    	; 0x1a46 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    1ac6:	10 92 47 05 	sts	0x0547, r1
    1aca:	20 91 ef 03 	lds	r18, 0x03EF
    1ace:	30 91 f0 03 	lds	r19, 0x03F0
    1ad2:	80 91 f1 03 	lds	r24, 0x03F1
    1ad6:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    1ada:	b5 cf       	rjmp	.-150    	; 0x1a46 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	80 93 47 05 	sts	0x0547, r24
    1ae2:	20 91 ef 03 	lds	r18, 0x03EF
    1ae6:	30 91 f0 03 	lds	r19, 0x03F0
    1aea:	80 91 f1 03 	lds	r24, 0x03F1
    1aee:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    1af2:	a9 cf       	rjmp	.-174    	; 0x1a46 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    1af4:	80 91 f1 03 	lds	r24, 0x03F1
    1af8:	90 91 f2 03 	lds	r25, 0x03F2
    1afc:	4e 97       	sbiw	r24, 0x1e	; 30
    1afe:	90 93 f2 03 	sts	0x03F2, r25
    1b02:	80 93 f1 03 	sts	0x03F1, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1b06:	2e ef       	ldi	r18, 0xFE	; 254
    1b08:	80 30       	cpi	r24, 0x00	; 0
    1b0a:	92 07       	cpc	r25, r18
    1b0c:	9c f5       	brge	.+102    	; 0x1b74 <handleIRRemoteCommands+0x162>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	9e ef       	ldi	r25, 0xFE	; 254
    1b12:	90 93 f2 03 	sts	0x03F2, r25
    1b16:	80 93 f1 03 	sts	0x03F1, r24
    1b1a:	20 91 ef 03 	lds	r18, 0x03EF
    1b1e:	30 91 f0 03 	lds	r19, 0x03F0
    1b22:	91 cf       	rjmp	.-222    	; 0x1a46 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    1b24:	20 91 ef 03 	lds	r18, 0x03EF
    1b28:	30 91 f0 03 	lds	r19, 0x03F0
    1b2c:	80 91 ed 03 	lds	r24, 0x03ED
    1b30:	90 91 ee 03 	lds	r25, 0x03EE
    1b34:	28 17       	cp	r18, r24
    1b36:	39 07       	cpc	r19, r25
    1b38:	24 f0       	brlt	.+8      	; 0x1b42 <handleIRRemoteCommands+0x130>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    1b3a:	20 91 f1 03 	lds	r18, 0x03F1
    1b3e:	30 91 f2 03 	lds	r19, 0x03F2
					}
					pwm_right_desired -= STEP_MOTORS;
    1b42:	2e 51       	subi	r18, 0x1E	; 30
    1b44:	30 40       	sbci	r19, 0x00	; 0
    1b46:	30 93 f0 03 	sts	0x03F0, r19
    1b4a:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    1b4e:	c9 01       	movw	r24, r18
    1b50:	30 93 f2 03 	sts	0x03F2, r19
    1b54:	20 93 f1 03 	sts	0x03F1, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    1b58:	4e ef       	ldi	r20, 0xFE	; 254
    1b5a:	20 30       	cpi	r18, 0x00	; 0
    1b5c:	34 07       	cpc	r19, r20
    1b5e:	34 f4       	brge	.+12     	; 0x1b6c <handleIRRemoteCommands+0x15a>
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	5e ef       	ldi	r21, 0xFE	; 254
    1b64:	50 93 f0 03 	sts	0x03F0, r21
    1b68:	40 93 ef 03 	sts	0x03EF, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    1b6c:	4e ef       	ldi	r20, 0xFE	; 254
    1b6e:	20 30       	cpi	r18, 0x00	; 0
    1b70:	34 07       	cpc	r19, r20
    1b72:	6c f2       	brlt	.-102    	; 0x1b0e <handleIRRemoteCommands+0xfc>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1b74:	20 91 ef 03 	lds	r18, 0x03EF
    1b78:	30 91 f0 03 	lds	r19, 0x03F0
    1b7c:	64 cf       	rjmp	.-312    	; 0x1a46 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    1b7e:	20 91 ef 03 	lds	r18, 0x03EF
    1b82:	30 91 f0 03 	lds	r19, 0x03F0
    1b86:	2e 51       	subi	r18, 0x1E	; 30
    1b88:	30 40       	sbci	r19, 0x00	; 0
    1b8a:	30 93 f0 03 	sts	0x03F0, r19
    1b8e:	20 93 ef 03 	sts	0x03EF, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1b92:	4e ef       	ldi	r20, 0xFE	; 254
    1b94:	20 30       	cpi	r18, 0x00	; 0
    1b96:	34 07       	cpc	r19, r20
    1b98:	0c f0       	brlt	.+2      	; 0x1b9c <handleIRRemoteCommands+0x18a>
    1b9a:	17 c1       	rjmp	.+558    	; 0x1dca <handleIRRemoteCommands+0x3b8>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	9e ef       	ldi	r25, 0xFE	; 254
    1ba0:	90 93 f0 03 	sts	0x03F0, r25
    1ba4:	80 93 ef 03 	sts	0x03EF, r24
    1ba8:	80 91 f1 03 	lds	r24, 0x03F1
    1bac:	90 91 f2 03 	lds	r25, 0x03F2
    1bb0:	20 e8       	ldi	r18, 0x80	; 128
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4e cf       	rjmp	.-356    	; 0x1a52 <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    1bb6:	20 91 ef 03 	lds	r18, 0x03EF
    1bba:	30 91 f0 03 	lds	r19, 0x03F0
    1bbe:	2e 51       	subi	r18, 0x1E	; 30
    1bc0:	30 40       	sbci	r19, 0x00	; 0
    1bc2:	30 93 f0 03 	sts	0x03F0, r19
    1bc6:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    1bca:	80 91 f1 03 	lds	r24, 0x03F1
    1bce:	90 91 f2 03 	lds	r25, 0x03F2
    1bd2:	4e 96       	adiw	r24, 0x1e	; 30
    1bd4:	90 93 f2 03 	sts	0x03F2, r25
    1bd8:	80 93 f1 03 	sts	0x03F1, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1bdc:	4e ef       	ldi	r20, 0xFE	; 254
    1bde:	20 30       	cpi	r18, 0x00	; 0
    1be0:	34 07       	cpc	r19, r20
    1be2:	34 f4       	brge	.+12     	; 0x1bf0 <handleIRRemoteCommands+0x1de>
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3e ef       	ldi	r19, 0xFE	; 254
    1be8:	30 93 f0 03 	sts	0x03F0, r19
    1bec:	20 93 ef 03 	sts	0x03EF, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1bf0:	42 e0       	ldi	r20, 0x02	; 2
    1bf2:	81 30       	cpi	r24, 0x01	; 1
    1bf4:	94 07       	cpc	r25, r20
    1bf6:	0c f4       	brge	.+2      	; 0x1bfa <handleIRRemoteCommands+0x1e8>
    1bf8:	26 cf       	rjmp	.-436    	; 0x1a46 <handleIRRemoteCommands+0x34>
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	92 e0       	ldi	r25, 0x02	; 2
    1bfe:	90 93 f2 03 	sts	0x03F2, r25
    1c02:	80 93 f1 03 	sts	0x03F1, r24
    1c06:	1f cf       	rjmp	.-450    	; 0x1a46 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1c08:	20 91 ef 03 	lds	r18, 0x03EF
    1c0c:	30 91 f0 03 	lds	r19, 0x03F0
    1c10:	80 91 f1 03 	lds	r24, 0x03F1
    1c14:	90 91 f2 03 	lds	r25, 0x03F2
    1c18:	82 17       	cp	r24, r18
    1c1a:	93 07       	cpc	r25, r19
    1c1c:	0c f4       	brge	.+2      	; 0x1c20 <handleIRRemoteCommands+0x20e>
    1c1e:	da c0       	rjmp	.+436    	; 0x1dd4 <handleIRRemoteCommands+0x3c2>
    1c20:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    1c22:	22 5e       	subi	r18, 0xE2	; 226
    1c24:	3f 4f       	sbci	r19, 0xFF	; 255
    1c26:	30 93 f0 03 	sts	0x03F0, r19
    1c2a:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    1c2e:	4e 96       	adiw	r24, 0x1e	; 30
    1c30:	90 93 f2 03 	sts	0x03F2, r25
    1c34:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    1c38:	42 e0       	ldi	r20, 0x02	; 2
    1c3a:	21 30       	cpi	r18, 0x01	; 1
    1c3c:	34 07       	cpc	r19, r20
    1c3e:	34 f0       	brlt	.+12     	; 0x1c4c <handleIRRemoteCommands+0x23a>
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	32 e0       	ldi	r19, 0x02	; 2
    1c44:	30 93 f0 03 	sts	0x03F0, r19
    1c48:	20 93 ef 03 	sts	0x03EF, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    1c4c:	22 e0       	ldi	r18, 0x02	; 2
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	92 07       	cpc	r25, r18
    1c52:	0c f4       	brge	.+2      	; 0x1c56 <handleIRRemoteCommands+0x244>
    1c54:	8f cf       	rjmp	.-226    	; 0x1b74 <handleIRRemoteCommands+0x162>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	92 e0       	ldi	r25, 0x02	; 2
    1c5a:	90 93 f2 03 	sts	0x03F2, r25
    1c5e:	80 93 f1 03 	sts	0x03F1, r24
    1c62:	20 91 ef 03 	lds	r18, 0x03EF
    1c66:	30 91 f0 03 	lds	r19, 0x03F0
    1c6a:	ed ce       	rjmp	.-550    	; 0x1a46 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    1c6c:	20 91 ef 03 	lds	r18, 0x03EF
    1c70:	30 91 f0 03 	lds	r19, 0x03F0
    1c74:	22 5e       	subi	r18, 0xE2	; 226
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	30 93 f0 03 	sts	0x03F0, r19
    1c7c:	20 93 ef 03 	sts	0x03EF, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1c80:	42 e0       	ldi	r20, 0x02	; 2
    1c82:	21 30       	cpi	r18, 0x01	; 1
    1c84:	34 07       	cpc	r19, r20
    1c86:	0c f4       	brge	.+2      	; 0x1c8a <handleIRRemoteCommands+0x278>
    1c88:	a0 c0       	rjmp	.+320    	; 0x1dca <handleIRRemoteCommands+0x3b8>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	92 e0       	ldi	r25, 0x02	; 2
    1c8e:	90 93 f0 03 	sts	0x03F0, r25
    1c92:	80 93 ef 03 	sts	0x03EF, r24
    1c96:	80 91 f1 03 	lds	r24, 0x03F1
    1c9a:	90 91 f2 03 	lds	r25, 0x03F2
    1c9e:	20 e8       	ldi	r18, 0x80	; 128
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	d7 ce       	rjmp	.-594    	; 0x1a52 <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    1ca4:	80 91 15 05 	lds	r24, 0x0515
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	65 e0       	ldi	r22, 0x05	; 5
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__divmodhi4>
    1cb4:	80 93 15 05 	sts	0x0515, r24

					if(colorState==0) {			// turn on blue and off all IRs
    1cb8:	88 23       	and	r24, r24
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <handleIRRemoteCommands+0x2ac>
    1cbc:	8d c0       	rjmp	.+282    	; 0x1dd8 <handleIRRemoteCommands+0x3c6>
						LED_IR1_HIGH;
    1cbe:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    1cc0:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    1cc2:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    1cc6:	8f ef       	ldi	r24, 0xFF	; 255
    1cc8:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1ccc:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    1cd0:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <updateRedLed>
					updateGreenLed(pwm_green);
    1cd4:	80 91 0d 02 	lds	r24, 0x020D
    1cd8:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <updateGreenLed>
					updateBlueLed(pwm_blue);
    1cdc:	80 91 0e 02 	lds	r24, 0x020E
    1ce0:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <updateBlueLed>
    1ce4:	20 91 ef 03 	lds	r18, 0x03EF
    1ce8:	30 91 f0 03 	lds	r19, 0x03F0
    1cec:	80 91 f1 03 	lds	r24, 0x03F1
    1cf0:	90 91 f2 03 	lds	r25, 0x03F2

	               	break;
    1cf4:	a8 ce       	rjmp	.-688    	; 0x1a46 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    1cf6:	80 91 16 05 	lds	r24, 0x0516
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	83 70       	andi	r24, 0x03	; 3
    1d00:	90 70       	andi	r25, 0x00	; 0
    1d02:	80 93 16 05 	sts	0x0516, r24
					switch(behaviorState) {
    1d06:	82 30       	cpi	r24, 0x02	; 2
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <handleIRRemoteCommands+0x2fa>
    1d0a:	cf ce       	rjmp	.-610    	; 0x1aaa <handleIRRemoteCommands+0x98>
    1d0c:	83 30       	cpi	r24, 0x03	; 3
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <handleIRRemoteCommands+0x300>
    1d10:	53 c0       	rjmp	.+166    	; 0x1db8 <handleIRRemoteCommands+0x3a6>
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <handleIRRemoteCommands+0x306>
    1d16:	c4 ce       	rjmp	.-632    	; 0x1aa0 <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    1d18:	10 92 47 05 	sts	0x0547, r1
							cliffAvoidanceEnabled = 0;
    1d1c:	10 92 48 05 	sts	0x0548, r1
    1d20:	8a ce       	rjmp	.-748    	; 0x1a36 <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    1d22:	20 91 ef 03 	lds	r18, 0x03EF
    1d26:	30 91 f0 03 	lds	r19, 0x03F0
    1d2a:	22 5e       	subi	r18, 0xE2	; 226
    1d2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2e:	30 93 f0 03 	sts	0x03F0, r19
    1d32:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    1d36:	80 91 f1 03 	lds	r24, 0x03F1
    1d3a:	90 91 f2 03 	lds	r25, 0x03F2
    1d3e:	4e 97       	sbiw	r24, 0x1e	; 30
    1d40:	90 93 f2 03 	sts	0x03F2, r25
    1d44:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1d48:	42 e0       	ldi	r20, 0x02	; 2
    1d4a:	21 30       	cpi	r18, 0x01	; 1
    1d4c:	34 07       	cpc	r19, r20
    1d4e:	34 f0       	brlt	.+12     	; 0x1d5c <handleIRRemoteCommands+0x34a>
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	32 e0       	ldi	r19, 0x02	; 2
    1d54:	30 93 f0 03 	sts	0x03F0, r19
    1d58:	20 93 ef 03 	sts	0x03EF, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1d5c:	4e ef       	ldi	r20, 0xFE	; 254
    1d5e:	80 30       	cpi	r24, 0x00	; 0
    1d60:	94 07       	cpc	r25, r20
    1d62:	0c f0       	brlt	.+2      	; 0x1d66 <handleIRRemoteCommands+0x354>
    1d64:	70 ce       	rjmp	.-800    	; 0x1a46 <handleIRRemoteCommands+0x34>
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	9e ef       	ldi	r25, 0xFE	; 254
    1d6a:	90 93 f2 03 	sts	0x03F2, r25
    1d6e:	80 93 f1 03 	sts	0x03F1, r24
    1d72:	69 ce       	rjmp	.-814    	; 0x1a46 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    1d74:	10 92 f0 03 	sts	0x03F0, r1
    1d78:	10 92 ef 03 	sts	0x03EF, r1
					pwm_left_desired = 0;
    1d7c:	10 92 f2 03 	sts	0x03F2, r1
    1d80:	10 92 f1 03 	sts	0x03F1, r1
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	5e ce       	rjmp	.-836    	; 0x1a4a <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    1d8e:	80 91 f1 03 	lds	r24, 0x03F1
    1d92:	90 91 f2 03 	lds	r25, 0x03F2
    1d96:	4e 96       	adiw	r24, 0x1e	; 30
    1d98:	90 93 f2 03 	sts	0x03F2, r25
    1d9c:	80 93 f1 03 	sts	0x03F1, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1da0:	22 e0       	ldi	r18, 0x02	; 2
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	92 07       	cpc	r25, r18
    1da6:	0c f4       	brge	.+2      	; 0x1daa <handleIRRemoteCommands+0x398>
    1da8:	e5 ce       	rjmp	.-566    	; 0x1b74 <handleIRRemoteCommands+0x162>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	92 e0       	ldi	r25, 0x02	; 2
    1dae:	90 93 f2 03 	sts	0x03F2, r25
    1db2:	80 93 f1 03 	sts	0x03F1, r24
    1db6:	de ce       	rjmp	.-580    	; 0x1b74 <handleIRRemoteCommands+0x162>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	80 93 47 05 	sts	0x0547, r24
							cliffAvoidanceEnabled = 1;
    1dbe:	80 93 48 05 	sts	0x0548, r24
    1dc2:	20 91 ef 03 	lds	r18, 0x03EF
    1dc6:	30 91 f0 03 	lds	r19, 0x03F0
    1dca:	80 91 f1 03 	lds	r24, 0x03F1
    1dce:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    1dd2:	39 ce       	rjmp	.-910    	; 0x1a46 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1dd4:	c9 01       	movw	r24, r18
    1dd6:	25 cf       	rjmp	.-438    	; 0x1c22 <handleIRRemoteCommands+0x210>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	61 f0       	breq	.+24     	; 0x1df4 <handleIRRemoteCommands+0x3e2>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    1ddc:	82 30       	cpi	r24, 0x02	; 2
    1dde:	91 f0       	breq	.+36     	; 0x1e04 <handleIRRemoteCommands+0x3f2>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    1de0:	83 30       	cpi	r24, 0x03	; 3
    1de2:	d9 f0       	breq	.+54     	; 0x1e1a <handleIRRemoteCommands+0x408>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1dea:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1dee:	80 93 0c 02 	sts	0x020C, r24
    1df2:	6e cf       	rjmp	.-292    	; 0x1cd0 <handleIRRemoteCommands+0x2be>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    1df4:	8f ef       	ldi	r24, 0xFF	; 255
    1df6:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    1dfa:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    1dfe:	80 93 0c 02 	sts	0x020C, r24
    1e02:	66 cf       	rjmp	.-308    	; 0x1cd0 <handleIRRemoteCommands+0x2be>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    1e04:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    1e06:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    1e08:	8f ef       	ldi	r24, 0xFF	; 255
    1e0a:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1e0e:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    1e12:	10 92 0c 02 	sts	0x020C, r1
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	5b cf       	rjmp	.-330    	; 0x1cd0 <handleIRRemoteCommands+0x2be>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    1e1a:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    1e1e:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    1e22:	10 92 0c 02 	sts	0x020C, r1
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	53 cf       	rjmp	.-346    	; 0x1cd0 <handleIRRemoteCommands+0x2be>

00001e2a <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    1e2a:	08 95       	ret

00001e2c <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    1e36:	80 81       	ld	r24, Z
    1e38:	91 81       	ldd	r25, Z+1	; 0x01
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <start_vertical_speed_control_left+0x14>
    1e3e:	b7 c0       	rjmp	.+366    	; 0x1fae <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1e40:	20 91 2a 05 	lds	r18, 0x052A
    1e44:	30 91 2b 05 	lds	r19, 0x052B
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	2e 30       	cpi	r18, 0x0E	; 14
    1e4c:	34 07       	cpc	r19, r20
    1e4e:	0c f4       	brge	.+2      	; 0x1e52 <start_vertical_speed_control_left+0x26>
    1e50:	88 c0       	rjmp	.+272    	; 0x1f62 <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    1e52:	18 16       	cp	r1, r24
    1e54:	19 06       	cpc	r1, r25
    1e56:	0c f0       	brlt	.+2      	; 0x1e5a <start_vertical_speed_control_left+0x2e>
    1e58:	13 c1       	rjmp	.+550    	; 0x2080 <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    1e5a:	88 e6       	ldi	r24, 0x68	; 104
    1e5c:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    1e5e:	82 1b       	sub	r24, r18
    1e60:	93 0b       	sbc	r25, r19
    1e62:	95 95       	asr	r25
    1e64:	87 95       	ror	r24
    1e66:	95 95       	asr	r25
    1e68:	87 95       	ror	r24
    1e6a:	29 e1       	ldi	r18, 0x19	; 25
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	28 1b       	sub	r18, r24
    1e70:	39 0b       	sbc	r19, r25
    1e72:	30 93 04 02 	sts	0x0204, r19
    1e76:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1e7a:	40 91 4b 05 	lds	r20, 0x054B
    1e7e:	50 91 4c 05 	lds	r21, 0x054C
    1e82:	50 93 66 05 	sts	0x0566, r21
    1e86:	40 93 65 05 	sts	0x0565, r20
	if(*pwm_left >= 0) {
    1e8a:	20 81       	ld	r18, Z
    1e8c:	31 81       	ldd	r19, Z+1	; 0x01
    1e8e:	37 fd       	sbrc	r19, 7
    1e90:	d2 c0       	rjmp	.+420    	; 0x2036 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1e92:	80 91 e7 03 	lds	r24, 0x03E7
    1e96:	90 91 e8 03 	lds	r25, 0x03E8
    1e9a:	b9 01       	movw	r22, r18
    1e9c:	68 1b       	sub	r22, r24
    1e9e:	79 0b       	sbc	r23, r25
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	70 93 4c 05 	sts	0x054C, r23
    1ea6:	60 93 4b 05 	sts	0x054B, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    1eaa:	20 91 f7 03 	lds	r18, 0x03F7
    1eae:	30 91 f8 03 	lds	r19, 0x03F8
    1eb2:	28 0f       	add	r18, r24
    1eb4:	39 1f       	adc	r19, r25
    1eb6:	30 93 f8 03 	sts	0x03F8, r19
    1eba:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    1ebe:	76 e0       	ldi	r23, 0x06	; 6
    1ec0:	21 34       	cpi	r18, 0x41	; 65
    1ec2:	37 07       	cpc	r19, r23
    1ec4:	0c f4       	brge	.+2      	; 0x1ec8 <start_vertical_speed_control_left+0x9c>
    1ec6:	84 c0       	rjmp	.+264    	; 0x1fd0 <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    1ec8:	20 e4       	ldi	r18, 0x40	; 64
    1eca:	36 e0       	ldi	r19, 0x06	; 6
    1ecc:	30 93 f8 03 	sts	0x03F8, r19
    1ed0:	20 93 f7 03 	sts	0x03F7, r18
    1ed4:	60 ec       	ldi	r22, 0xC0	; 192
    1ed6:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1ed8:	9c 01       	movw	r18, r24
    1eda:	22 0f       	add	r18, r18
    1edc:	33 1f       	adc	r19, r19
    1ede:	dc 01       	movw	r26, r24
    1ee0:	aa 0f       	add	r26, r26
    1ee2:	bb 1f       	adc	r27, r27
    1ee4:	aa 0f       	add	r26, r26
    1ee6:	bb 1f       	adc	r27, r27
    1ee8:	aa 0f       	add	r26, r26
    1eea:	bb 1f       	adc	r27, r27
    1eec:	2a 0f       	add	r18, r26
    1eee:	3b 1f       	adc	r19, r27
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    1ef0:	00 81       	ld	r16, Z
    1ef2:	11 81       	ldd	r17, Z+1	; 0x01
    1ef4:	c0 91 03 02 	lds	r28, 0x0203
    1ef8:	d0 91 04 02 	lds	r29, 0x0204
    1efc:	0c 9f       	mul	r16, r28
    1efe:	d0 01       	movw	r26, r0
    1f00:	0d 9f       	mul	r16, r29
    1f02:	b0 0d       	add	r27, r0
    1f04:	1c 9f       	mul	r17, r28
    1f06:	b0 0d       	add	r27, r0
    1f08:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1f0a:	2a 0f       	add	r18, r26
    1f0c:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    1f0e:	48 1b       	sub	r20, r24
    1f10:	59 0b       	sbc	r21, r25
    1f12:	44 0f       	add	r20, r20
    1f14:	55 1f       	adc	r21, r21
    1f16:	24 0f       	add	r18, r20
    1f18:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    1f1a:	26 0f       	add	r18, r22
    1f1c:	37 1f       	adc	r19, r23
    1f1e:	30 93 f6 03 	sts	0x03F6, r19
    1f22:	20 93 f5 03 	sts	0x03F5, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1f26:	37 fd       	sbrc	r19, 7
    1f28:	69 c0       	rjmp	.+210    	; 0x1ffc <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    1f2a:	12 16       	cp	r1, r18
    1f2c:	13 06       	cpc	r1, r19
    1f2e:	0c f0       	brlt	.+2      	; 0x1f32 <start_vertical_speed_control_left+0x106>
    1f30:	6f c0       	rjmp	.+222    	; 0x2010 <start_vertical_speed_control_left+0x1e4>
    1f32:	80 81       	ld	r24, Z
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	97 fd       	sbrc	r25, 7
    1f38:	89 c0       	rjmp	.+274    	; 0x204c <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    1f3a:	7d e5       	ldi	r23, 0x5D	; 93
    1f3c:	21 3c       	cpi	r18, 0xC1	; 193
    1f3e:	37 07       	cpc	r19, r23
    1f40:	0c f4       	brge	.+2      	; 0x1f44 <start_vertical_speed_control_left+0x118>
    1f42:	66 c0       	rjmp	.+204    	; 0x2010 <start_vertical_speed_control_left+0x1e4>
    1f44:	80 ec       	ldi	r24, 0xC0	; 192
    1f46:	9d e5       	ldi	r25, 0x5D	; 93
    1f48:	90 93 f6 03 	sts	0x03F6, r25
    1f4c:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	92 e0       	ldi	r25, 0x02	; 2
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    1f58:	df 91       	pop	r29
    1f5a:	cf 91       	pop	r28
    1f5c:	1f 91       	pop	r17
    1f5e:	0f 91       	pop	r16
    1f60:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    1f62:	24 3b       	cpi	r18, 0xB4	; 180
    1f64:	31 05       	cpc	r19, r1
    1f66:	94 f4       	brge	.+36     	; 0x1f8c <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    1f68:	2a 35       	cpi	r18, 0x5A	; 90
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	7c f4       	brge	.+30     	; 0x1f8c <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    1f6e:	18 16       	cp	r1, r24
    1f70:	19 06       	cpc	r1, r25
    1f72:	0c f0       	brlt	.+2      	; 0x1f76 <start_vertical_speed_control_left+0x14a>
    1f74:	93 c0       	rjmp	.+294    	; 0x209c <start_vertical_speed_control_left+0x270>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    1f76:	35 95       	asr	r19
    1f78:	27 95       	ror	r18
    1f7a:	35 95       	asr	r19
    1f7c:	27 95       	ror	r18
    1f7e:	27 5e       	subi	r18, 0xE7	; 231
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	30 93 04 02 	sts	0x0204, r19
    1f86:	20 93 03 02 	sts	0x0203, r18
    1f8a:	77 cf       	rjmp	.-274    	; 0x1e7a <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    1f8c:	18 16       	cp	r1, r24
    1f8e:	19 06       	cpc	r1, r25
    1f90:	94 f5       	brge	.+100    	; 0x1ff6 <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    1f92:	84 eb       	ldi	r24, 0xB4	; 180
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	82 1b       	sub	r24, r18
    1f98:	93 0b       	sbc	r25, r19
    1f9a:	95 95       	asr	r25
    1f9c:	87 95       	ror	r24
    1f9e:	95 95       	asr	r25
    1fa0:	87 95       	ror	r24
    1fa2:	49 96       	adiw	r24, 0x19	; 25
    1fa4:	90 93 04 02 	sts	0x0204, r25
    1fa8:	80 93 03 02 	sts	0x0203, r24
    1fac:	66 cf       	rjmp	.-308    	; 0x1e7a <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1fae:	10 92 f8 03 	sts	0x03F8, r1
    1fb2:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    1fb6:	10 92 4c 05 	sts	0x054C, r1
    1fba:	10 92 4b 05 	sts	0x054B, r1
		delta_left_speed_prev = 0;
    1fbe:	10 92 66 05 	sts	0x0566, r1
    1fc2:	10 92 65 05 	sts	0x0565, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	1f 91       	pop	r17
    1fcc:	0f 91       	pop	r16
    1fce:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1fd0:	69 ef       	ldi	r22, 0xF9	; 249
    1fd2:	20 3c       	cpi	r18, 0xC0	; 192
    1fd4:	36 07       	cpc	r19, r22
    1fd6:	4c f4       	brge	.+18     	; 0x1fea <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    1fd8:	20 ec       	ldi	r18, 0xC0	; 192
    1fda:	39 ef       	ldi	r19, 0xF9	; 249
    1fdc:	30 93 f8 03 	sts	0x03F8, r19
    1fe0:	20 93 f7 03 	sts	0x03F7, r18
    1fe4:	60 e4       	ldi	r22, 0x40	; 64
    1fe6:	7d ee       	ldi	r23, 0xED	; 237
    1fe8:	77 cf       	rjmp	.-274    	; 0x1ed8 <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1fea:	b9 01       	movw	r22, r18
    1fec:	66 0f       	add	r22, r22
    1fee:	77 1f       	adc	r23, r23
    1ff0:	62 0f       	add	r22, r18
    1ff2:	73 1f       	adc	r23, r19
    1ff4:	71 cf       	rjmp	.-286    	; 0x1ed8 <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    1ff6:	84 eb       	ldi	r24, 0xB4	; 180
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	31 cf       	rjmp	.-414    	; 0x1e5e <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	97 fd       	sbrc	r25, 7
    2002:	06 c0       	rjmp	.+12     	; 0x2010 <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    2004:	10 92 f6 03 	sts	0x03F6, r1
    2008:	10 92 f5 03 	sts	0x03F5, r1
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2010:	82 ea       	ldi	r24, 0xA2	; 162
    2012:	20 34       	cpi	r18, 0x40	; 64
    2014:	38 07       	cpc	r19, r24
    2016:	04 f5       	brge	.+64     	; 0x2058 <start_vertical_speed_control_left+0x22c>
    2018:	80 e4       	ldi	r24, 0x40	; 64
    201a:	92 ea       	ldi	r25, 0xA2	; 162
    201c:	90 93 f6 03 	sts	0x03F6, r25
    2020:	80 93 f5 03 	sts	0x03F5, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	9e ef       	ldi	r25, 0xFE	; 254
    2028:	91 83       	std	Z+1, r25	; 0x01
    202a:	80 83       	st	Z, r24


}
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2036:	80 91 e7 03 	lds	r24, 0x03E7
    203a:	90 91 e8 03 	lds	r25, 0x03E8
    203e:	82 0f       	add	r24, r18
    2040:	93 1f       	adc	r25, r19
    2042:	90 93 4c 05 	sts	0x054C, r25
    2046:	80 93 4b 05 	sts	0x054B, r24
    204a:	2f cf       	rjmp	.-418    	; 0x1eaa <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    204c:	10 92 f6 03 	sts	0x03F6, r1
    2050:	10 92 f5 03 	sts	0x03F5, r1
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2058:	35 95       	asr	r19
    205a:	27 95       	ror	r18
    205c:	35 95       	asr	r19
    205e:	27 95       	ror	r18
    2060:	35 95       	asr	r19
    2062:	27 95       	ror	r18
    2064:	35 95       	asr	r19
    2066:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2068:	31 83       	std	Z+1, r19	; 0x01
    206a:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    206c:	42 e0       	ldi	r20, 0x02	; 2
    206e:	21 30       	cpi	r18, 0x01	; 1
    2070:	34 07       	cpc	r19, r20
    2072:	0c f0       	brlt	.+2      	; 0x2076 <start_vertical_speed_control_left+0x24a>
    2074:	6d cf       	rjmp	.-294    	; 0x1f50 <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2076:	6e ef       	ldi	r22, 0xFE	; 254
    2078:	20 30       	cpi	r18, 0x00	; 0
    207a:	36 07       	cpc	r19, r22
    207c:	9c f2       	brlt	.-90     	; 0x2024 <start_vertical_speed_control_left+0x1f8>
    207e:	6c cf       	rjmp	.-296    	; 0x1f58 <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    2080:	88 e6       	ldi	r24, 0x68	; 104
    2082:	91 e0       	ldi	r25, 0x01	; 1
    2084:	82 1b       	sub	r24, r18
    2086:	93 0b       	sbc	r25, r19
    2088:	95 95       	asr	r25
    208a:	87 95       	ror	r24
    208c:	95 95       	asr	r25
    208e:	87 95       	ror	r24
    2090:	49 96       	adiw	r24, 0x19	; 25
    2092:	90 93 04 02 	sts	0x0204, r25
    2096:	80 93 03 02 	sts	0x0203, r24
    209a:	ef ce       	rjmp	.-546    	; 0x1e7a <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    209c:	35 95       	asr	r19
    209e:	27 95       	ror	r18
    20a0:	35 95       	asr	r19
    20a2:	27 95       	ror	r18
    20a4:	89 e1       	ldi	r24, 0x19	; 25
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	82 1b       	sub	r24, r18
    20aa:	93 0b       	sbc	r25, r19
    20ac:	90 93 04 02 	sts	0x0204, r25
    20b0:	80 93 03 02 	sts	0x0203, r24
    20b4:	e2 ce       	rjmp	.-572    	; 0x1e7a <start_vertical_speed_control_left+0x4e>

000020b6 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    20c0:	80 81       	ld	r24, Z
    20c2:	91 81       	ldd	r25, Z+1	; 0x01
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	09 f4       	brne	.+2      	; 0x20ca <start_vertical_speed_control_right+0x14>
    20c8:	b7 c0       	rjmp	.+366    	; 0x2238 <__stack+0x39>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    20ca:	20 91 2a 05 	lds	r18, 0x052A
    20ce:	30 91 2b 05 	lds	r19, 0x052B
    20d2:	41 e0       	ldi	r20, 0x01	; 1
    20d4:	2e 30       	cpi	r18, 0x0E	; 14
    20d6:	34 07       	cpc	r19, r20
    20d8:	0c f4       	brge	.+2      	; 0x20dc <start_vertical_speed_control_right+0x26>
    20da:	88 c0       	rjmp	.+272    	; 0x21ec <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    20dc:	18 16       	cp	r1, r24
    20de:	19 06       	cpc	r1, r25
    20e0:	0c f0       	brlt	.+2      	; 0x20e4 <start_vertical_speed_control_right+0x2e>
    20e2:	13 c1       	rjmp	.+550    	; 0x230a <__stack+0x10b>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    20e4:	88 e6       	ldi	r24, 0x68	; 104
    20e6:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    20e8:	82 1b       	sub	r24, r18
    20ea:	93 0b       	sbc	r25, r19
    20ec:	95 95       	asr	r25
    20ee:	87 95       	ror	r24
    20f0:	95 95       	asr	r25
    20f2:	87 95       	ror	r24
    20f4:	29 e1       	ldi	r18, 0x19	; 25
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	28 1b       	sub	r18, r24
    20fa:	39 0b       	sbc	r19, r25
    20fc:	30 93 06 02 	sts	0x0206, r19
    2100:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2104:	40 91 74 05 	lds	r20, 0x0574
    2108:	50 91 75 05 	lds	r21, 0x0575
    210c:	50 93 4e 05 	sts	0x054E, r21
    2110:	40 93 4d 05 	sts	0x054D, r20
	if(*pwm_right >= 0) {
    2114:	20 81       	ld	r18, Z
    2116:	31 81       	ldd	r19, Z+1	; 0x01
    2118:	37 fd       	sbrc	r19, 7
    211a:	d2 c0       	rjmp	.+420    	; 0x22c0 <__stack+0xc1>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    211c:	80 91 e9 03 	lds	r24, 0x03E9
    2120:	90 91 ea 03 	lds	r25, 0x03EA
    2124:	b9 01       	movw	r22, r18
    2126:	68 1b       	sub	r22, r24
    2128:	79 0b       	sbc	r23, r25
    212a:	cb 01       	movw	r24, r22
    212c:	70 93 75 05 	sts	0x0575, r23
    2130:	60 93 74 05 	sts	0x0574, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2134:	20 91 f9 03 	lds	r18, 0x03F9
    2138:	30 91 fa 03 	lds	r19, 0x03FA
    213c:	28 0f       	add	r18, r24
    213e:	39 1f       	adc	r19, r25
    2140:	30 93 fa 03 	sts	0x03FA, r19
    2144:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2148:	76 e0       	ldi	r23, 0x06	; 6
    214a:	21 34       	cpi	r18, 0x41	; 65
    214c:	37 07       	cpc	r19, r23
    214e:	0c f4       	brge	.+2      	; 0x2152 <start_vertical_speed_control_right+0x9c>
    2150:	84 c0       	rjmp	.+264    	; 0x225a <__stack+0x5b>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    2152:	20 e4       	ldi	r18, 0x40	; 64
    2154:	36 e0       	ldi	r19, 0x06	; 6
    2156:	30 93 fa 03 	sts	0x03FA, r19
    215a:	20 93 f9 03 	sts	0x03F9, r18
    215e:	60 ec       	ldi	r22, 0xC0	; 192
    2160:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    2162:	9c 01       	movw	r18, r24
    2164:	22 0f       	add	r18, r18
    2166:	33 1f       	adc	r19, r19
    2168:	dc 01       	movw	r26, r24
    216a:	aa 0f       	add	r26, r26
    216c:	bb 1f       	adc	r27, r27
    216e:	aa 0f       	add	r26, r26
    2170:	bb 1f       	adc	r27, r27
    2172:	aa 0f       	add	r26, r26
    2174:	bb 1f       	adc	r27, r27
    2176:	2a 0f       	add	r18, r26
    2178:	3b 1f       	adc	r19, r27
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    217a:	00 81       	ld	r16, Z
    217c:	11 81       	ldd	r17, Z+1	; 0x01
    217e:	c0 91 05 02 	lds	r28, 0x0205
    2182:	d0 91 06 02 	lds	r29, 0x0206
    2186:	0c 9f       	mul	r16, r28
    2188:	d0 01       	movw	r26, r0
    218a:	0d 9f       	mul	r16, r29
    218c:	b0 0d       	add	r27, r0
    218e:	1c 9f       	mul	r17, r28
    2190:	b0 0d       	add	r27, r0
    2192:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    2194:	2a 0f       	add	r18, r26
    2196:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2198:	48 1b       	sub	r20, r24
    219a:	59 0b       	sbc	r21, r25
    219c:	44 0f       	add	r20, r20
    219e:	55 1f       	adc	r21, r21
    21a0:	24 0f       	add	r18, r20
    21a2:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    21a4:	26 0f       	add	r18, r22
    21a6:	37 1f       	adc	r19, r23
    21a8:	30 93 f4 03 	sts	0x03F4, r19
    21ac:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    21b0:	37 fd       	sbrc	r19, 7
    21b2:	69 c0       	rjmp	.+210    	; 0x2286 <__stack+0x87>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    21b4:	12 16       	cp	r1, r18
    21b6:	13 06       	cpc	r1, r19
    21b8:	0c f0       	brlt	.+2      	; 0x21bc <start_vertical_speed_control_right+0x106>
    21ba:	6f c0       	rjmp	.+222    	; 0x229a <__stack+0x9b>
    21bc:	80 81       	ld	r24, Z
    21be:	91 81       	ldd	r25, Z+1	; 0x01
    21c0:	97 fd       	sbrc	r25, 7
    21c2:	89 c0       	rjmp	.+274    	; 0x22d6 <__stack+0xd7>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    21c4:	7d e5       	ldi	r23, 0x5D	; 93
    21c6:	21 3c       	cpi	r18, 0xC1	; 193
    21c8:	37 07       	cpc	r19, r23
    21ca:	0c f4       	brge	.+2      	; 0x21ce <start_vertical_speed_control_right+0x118>
    21cc:	66 c0       	rjmp	.+204    	; 0x229a <__stack+0x9b>
    21ce:	80 ec       	ldi	r24, 0xC0	; 192
    21d0:	9d e5       	ldi	r25, 0x5D	; 93
    21d2:	90 93 f4 03 	sts	0x03F4, r25
    21d6:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	92 e0       	ldi	r25, 0x02	; 2
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    21ec:	24 3b       	cpi	r18, 0xB4	; 180
    21ee:	31 05       	cpc	r19, r1
    21f0:	94 f4       	brge	.+36     	; 0x2216 <__stack+0x17>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    21f2:	2a 35       	cpi	r18, 0x5A	; 90
    21f4:	31 05       	cpc	r19, r1
    21f6:	7c f4       	brge	.+30     	; 0x2216 <__stack+0x17>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    21f8:	18 16       	cp	r1, r24
    21fa:	19 06       	cpc	r1, r25
    21fc:	0c f0       	brlt	.+2      	; 0x2200 <__stack+0x1>
    21fe:	93 c0       	rjmp	.+294    	; 0x2326 <__stack+0x127>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    2200:	35 95       	asr	r19
    2202:	27 95       	ror	r18
    2204:	35 95       	asr	r19
    2206:	27 95       	ror	r18
    2208:	27 5e       	subi	r18, 0xE7	; 231
    220a:	3f 4f       	sbci	r19, 0xFF	; 255
    220c:	30 93 06 02 	sts	0x0206, r19
    2210:	20 93 05 02 	sts	0x0205, r18
    2214:	77 cf       	rjmp	.-274    	; 0x2104 <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    2216:	18 16       	cp	r1, r24
    2218:	19 06       	cpc	r1, r25
    221a:	94 f5       	brge	.+100    	; 0x2280 <__stack+0x81>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    221c:	84 eb       	ldi	r24, 0xB4	; 180
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	82 1b       	sub	r24, r18
    2222:	93 0b       	sbc	r25, r19
    2224:	95 95       	asr	r25
    2226:	87 95       	ror	r24
    2228:	95 95       	asr	r25
    222a:	87 95       	ror	r24
    222c:	49 96       	adiw	r24, 0x19	; 25
    222e:	90 93 06 02 	sts	0x0206, r25
    2232:	80 93 05 02 	sts	0x0205, r24
    2236:	66 cf       	rjmp	.-308    	; 0x2104 <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    2238:	10 92 fa 03 	sts	0x03FA, r1
    223c:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    2240:	10 92 75 05 	sts	0x0575, r1
    2244:	10 92 74 05 	sts	0x0574, r1
		delta_right_speed_prev = 0;
    2248:	10 92 4e 05 	sts	0x054E, r1
    224c:	10 92 4d 05 	sts	0x054D, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    225a:	69 ef       	ldi	r22, 0xF9	; 249
    225c:	20 3c       	cpi	r18, 0xC0	; 192
    225e:	36 07       	cpc	r19, r22
    2260:	4c f4       	brge	.+18     	; 0x2274 <__stack+0x75>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    2262:	20 ec       	ldi	r18, 0xC0	; 192
    2264:	39 ef       	ldi	r19, 0xF9	; 249
    2266:	30 93 fa 03 	sts	0x03FA, r19
    226a:	20 93 f9 03 	sts	0x03F9, r18
    226e:	60 e4       	ldi	r22, 0x40	; 64
    2270:	7d ee       	ldi	r23, 0xED	; 237
    2272:	77 cf       	rjmp	.-274    	; 0x2162 <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2274:	b9 01       	movw	r22, r18
    2276:	66 0f       	add	r22, r22
    2278:	77 1f       	adc	r23, r23
    227a:	62 0f       	add	r22, r18
    227c:	73 1f       	adc	r23, r19
    227e:	71 cf       	rjmp	.-286    	; 0x2162 <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2280:	84 eb       	ldi	r24, 0xB4	; 180
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	31 cf       	rjmp	.-414    	; 0x20e8 <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2286:	80 81       	ld	r24, Z
    2288:	91 81       	ldd	r25, Z+1	; 0x01
    228a:	97 fd       	sbrc	r25, 7
    228c:	06 c0       	rjmp	.+12     	; 0x229a <__stack+0x9b>
		pwm_right_speed_controller = 0;
    228e:	10 92 f4 03 	sts	0x03F4, r1
    2292:	10 92 f3 03 	sts	0x03F3, r1
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    229a:	82 ea       	ldi	r24, 0xA2	; 162
    229c:	20 34       	cpi	r18, 0x40	; 64
    229e:	38 07       	cpc	r19, r24
    22a0:	04 f5       	brge	.+64     	; 0x22e2 <__stack+0xe3>
    22a2:	80 e4       	ldi	r24, 0x40	; 64
    22a4:	92 ea       	ldi	r25, 0xA2	; 162
    22a6:	90 93 f4 03 	sts	0x03F4, r25
    22aa:	80 93 f3 03 	sts	0x03F3, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	9e ef       	ldi	r25, 0xFE	; 254
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	80 83       	st	Z, r24

}
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    22c0:	80 91 e9 03 	lds	r24, 0x03E9
    22c4:	90 91 ea 03 	lds	r25, 0x03EA
    22c8:	82 0f       	add	r24, r18
    22ca:	93 1f       	adc	r25, r19
    22cc:	90 93 75 05 	sts	0x0575, r25
    22d0:	80 93 74 05 	sts	0x0574, r24
    22d4:	2f cf       	rjmp	.-418    	; 0x2134 <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    22d6:	10 92 f4 03 	sts	0x03F4, r1
    22da:	10 92 f3 03 	sts	0x03F3, r1
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    22e2:	35 95       	asr	r19
    22e4:	27 95       	ror	r18
    22e6:	35 95       	asr	r19
    22e8:	27 95       	ror	r18
    22ea:	35 95       	asr	r19
    22ec:	27 95       	ror	r18
    22ee:	35 95       	asr	r19
    22f0:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    22f2:	31 83       	std	Z+1, r19	; 0x01
    22f4:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    22f6:	42 e0       	ldi	r20, 0x02	; 2
    22f8:	21 30       	cpi	r18, 0x01	; 1
    22fa:	34 07       	cpc	r19, r20
    22fc:	0c f0       	brlt	.+2      	; 0x2300 <__stack+0x101>
    22fe:	6d cf       	rjmp	.-294    	; 0x21da <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2300:	6e ef       	ldi	r22, 0xFE	; 254
    2302:	20 30       	cpi	r18, 0x00	; 0
    2304:	36 07       	cpc	r19, r22
    2306:	9c f2       	brlt	.-90     	; 0x22ae <__stack+0xaf>
    2308:	6c cf       	rjmp	.-296    	; 0x21e2 <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    230a:	88 e6       	ldi	r24, 0x68	; 104
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	82 1b       	sub	r24, r18
    2310:	93 0b       	sbc	r25, r19
    2312:	95 95       	asr	r25
    2314:	87 95       	ror	r24
    2316:	95 95       	asr	r25
    2318:	87 95       	ror	r24
    231a:	49 96       	adiw	r24, 0x19	; 25
    231c:	90 93 06 02 	sts	0x0206, r25
    2320:	80 93 05 02 	sts	0x0205, r24
    2324:	ef ce       	rjmp	.-546    	; 0x2104 <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    2326:	35 95       	asr	r19
    2328:	27 95       	ror	r18
    232a:	35 95       	asr	r19
    232c:	27 95       	ror	r18
    232e:	89 e1       	ldi	r24, 0x19	; 25
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	82 1b       	sub	r24, r18
    2334:	93 0b       	sbc	r25, r19
    2336:	90 93 06 02 	sts	0x0206, r25
    233a:	80 93 05 02 	sts	0x0205, r24
    233e:	e2 ce       	rjmp	.-572    	; 0x2104 <start_vertical_speed_control_right+0x4e>

00002340 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    2340:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2342:	80 81       	ld	r24, Z
    2344:	91 81       	ldd	r25, Z+1	; 0x01
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	09 f4       	brne	.+2      	; 0x234c <start_horizontal_speed_control_right+0xc>
    234a:	7b c0       	rjmp	.+246    	; 0x2442 <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    234c:	a0 91 74 05 	lds	r26, 0x0574
    2350:	b0 91 75 05 	lds	r27, 0x0575
    2354:	b0 93 4e 05 	sts	0x054E, r27
    2358:	a0 93 4d 05 	sts	0x054D, r26
	if(*pwm_right >= 0) {
    235c:	20 81       	ld	r18, Z
    235e:	31 81       	ldd	r19, Z+1	; 0x01
    2360:	37 fd       	sbrc	r19, 7
    2362:	89 c0       	rjmp	.+274    	; 0x2476 <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2364:	80 91 e9 03 	lds	r24, 0x03E9
    2368:	90 91 ea 03 	lds	r25, 0x03EA
    236c:	a9 01       	movw	r20, r18
    236e:	48 1b       	sub	r20, r24
    2370:	59 0b       	sbc	r21, r25
    2372:	ca 01       	movw	r24, r20
    2374:	50 93 75 05 	sts	0x0575, r21
    2378:	40 93 74 05 	sts	0x0574, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    237c:	20 91 f9 03 	lds	r18, 0x03F9
    2380:	30 91 fa 03 	lds	r19, 0x03FA
    2384:	28 0f       	add	r18, r24
    2386:	39 1f       	adc	r19, r25
    2388:	30 93 fa 03 	sts	0x03FA, r19
    238c:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    2390:	56 e0       	ldi	r21, 0x06	; 6
    2392:	21 34       	cpi	r18, 0x41	; 65
    2394:	35 07       	cpc	r19, r21
    2396:	0c f4       	brge	.+2      	; 0x239a <start_horizontal_speed_control_right+0x5a>
    2398:	61 c0       	rjmp	.+194    	; 0x245c <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    239a:	20 e4       	ldi	r18, 0x40	; 64
    239c:	36 e0       	ldi	r19, 0x06	; 6
    239e:	30 93 fa 03 	sts	0x03FA, r19
    23a2:	20 93 f9 03 	sts	0x03F9, r18
    23a6:	60 e8       	ldi	r22, 0x80	; 128
    23a8:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    23aa:	9c 01       	movw	r18, r24
    23ac:	22 0f       	add	r18, r18
    23ae:	33 1f       	adc	r19, r19
    23b0:	28 0f       	add	r18, r24
    23b2:	39 1f       	adc	r19, r25
    23b4:	22 0f       	add	r18, r18
    23b6:	33 1f       	adc	r19, r19
    23b8:	22 0f       	add	r18, r18
    23ba:	33 1f       	adc	r19, r19
    23bc:	22 0f       	add	r18, r18
    23be:	33 1f       	adc	r19, r19
    23c0:	28 0f       	add	r18, r24
    23c2:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    23c4:	40 81       	ld	r20, Z
    23c6:	51 81       	ldd	r21, Z+1	; 0x01
    23c8:	44 0f       	add	r20, r20
    23ca:	55 1f       	adc	r21, r21
    23cc:	44 0f       	add	r20, r20
    23ce:	55 1f       	adc	r21, r21
    23d0:	44 0f       	add	r20, r20
    23d2:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    23d4:	24 0f       	add	r18, r20
    23d6:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    23d8:	ad 01       	movw	r20, r26
    23da:	48 1b       	sub	r20, r24
    23dc:	59 0b       	sbc	r21, r25
    23de:	ca 01       	movw	r24, r20
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	84 0f       	add	r24, r20
    23e6:	95 1f       	adc	r25, r21
    23e8:	28 0f       	add	r18, r24
    23ea:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    23ec:	26 0f       	add	r18, r22
    23ee:	37 1f       	adc	r19, r23
    23f0:	30 93 f4 03 	sts	0x03F4, r19
    23f4:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    23f8:	37 fd       	sbrc	r19, 7
    23fa:	4c c0       	rjmp	.+152    	; 0x2494 <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    23fc:	12 16       	cp	r1, r18
    23fe:	13 06       	cpc	r1, r19
    2400:	0c f0       	brlt	.+2      	; 0x2404 <start_horizontal_speed_control_right+0xc4>
    2402:	52 c0       	rjmp	.+164    	; 0x24a8 <start_horizontal_speed_control_right+0x168>
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	97 fd       	sbrc	r25, 7
    240a:	67 c0       	rjmp	.+206    	; 0x24da <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    240c:	5d e5       	ldi	r21, 0x5D	; 93
    240e:	21 3c       	cpi	r18, 0xC1	; 193
    2410:	35 07       	cpc	r19, r21
    2412:	0c f4       	brge	.+2      	; 0x2416 <start_horizontal_speed_control_right+0xd6>
    2414:	49 c0       	rjmp	.+146    	; 0x24a8 <start_horizontal_speed_control_right+0x168>
    2416:	80 ec       	ldi	r24, 0xC0	; 192
    2418:	9d e5       	ldi	r25, 0x5D	; 93
    241a:	90 93 f4 03 	sts	0x03F4, r25
    241e:	80 93 f3 03 	sts	0x03F3, r24
    2422:	2c ed       	ldi	r18, 0xDC	; 220
    2424:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    2426:	22 5e       	subi	r18, 0xE2	; 226
    2428:	3f 4f       	sbci	r19, 0xFF	; 255
    242a:	31 83       	std	Z+1, r19	; 0x01
    242c:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    242e:	42 e0       	ldi	r20, 0x02	; 2
    2430:	21 30       	cpi	r18, 0x01	; 1
    2432:	34 07       	cpc	r19, r20
    2434:	0c f4       	brge	.+2      	; 0x2438 <start_horizontal_speed_control_right+0xf8>
    2436:	48 c0       	rjmp	.+144    	; 0x24c8 <start_horizontal_speed_control_right+0x188>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	92 e0       	ldi	r25, 0x02	; 2
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	80 83       	st	Z, r24
    2440:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    2442:	10 92 fa 03 	sts	0x03FA, r1
    2446:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    244a:	10 92 75 05 	sts	0x0575, r1
    244e:	10 92 74 05 	sts	0x0574, r1
		delta_right_speed_prev = 0;
    2452:	10 92 4e 05 	sts	0x054E, r1
    2456:	10 92 4d 05 	sts	0x054D, r1
		return;
    245a:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    245c:	49 ef       	ldi	r20, 0xF9	; 249
    245e:	20 3c       	cpi	r18, 0xC0	; 192
    2460:	34 07       	cpc	r19, r20
    2462:	a4 f4       	brge	.+40     	; 0x248c <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    2464:	20 ec       	ldi	r18, 0xC0	; 192
    2466:	39 ef       	ldi	r19, 0xF9	; 249
    2468:	30 93 fa 03 	sts	0x03FA, r19
    246c:	20 93 f9 03 	sts	0x03F9, r18
    2470:	60 e8       	ldi	r22, 0x80	; 128
    2472:	73 ef       	ldi	r23, 0xF3	; 243
    2474:	9a cf       	rjmp	.-204    	; 0x23aa <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2476:	80 91 e9 03 	lds	r24, 0x03E9
    247a:	90 91 ea 03 	lds	r25, 0x03EA
    247e:	82 0f       	add	r24, r18
    2480:	93 1f       	adc	r25, r19
    2482:	90 93 75 05 	sts	0x0575, r25
    2486:	80 93 74 05 	sts	0x0574, r24
    248a:	78 cf       	rjmp	.-272    	; 0x237c <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    248c:	b9 01       	movw	r22, r18
    248e:	66 0f       	add	r22, r22
    2490:	77 1f       	adc	r23, r23
    2492:	8b cf       	rjmp	.-234    	; 0x23aa <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2494:	80 81       	ld	r24, Z
    2496:	91 81       	ldd	r25, Z+1	; 0x01
    2498:	97 fd       	sbrc	r25, 7
    249a:	06 c0       	rjmp	.+12     	; 0x24a8 <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    249c:	10 92 f4 03 	sts	0x03F4, r1
    24a0:	10 92 f3 03 	sts	0x03F3, r1
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    24a8:	82 ea       	ldi	r24, 0xA2	; 162
    24aa:	20 34       	cpi	r18, 0x40	; 64
    24ac:	38 07       	cpc	r19, r24
    24ae:	dc f4       	brge	.+54     	; 0x24e6 <start_horizontal_speed_control_right+0x1a6>
    24b0:	80 e4       	ldi	r24, 0x40	; 64
    24b2:	92 ea       	ldi	r25, 0xA2	; 162
    24b4:	90 93 f4 03 	sts	0x03F4, r25
    24b8:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    24bc:	24 e2       	ldi	r18, 0x24	; 36
    24be:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    24c0:	2e 51       	subi	r18, 0x1E	; 30
    24c2:	30 40       	sbci	r19, 0x00	; 0
    24c4:	31 83       	std	Z+1, r19	; 0x01
    24c6:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    24c8:	5e ef       	ldi	r21, 0xFE	; 254
    24ca:	20 30       	cpi	r18, 0x00	; 0
    24cc:	35 07       	cpc	r19, r21
    24ce:	24 f4       	brge	.+8      	; 0x24d8 <start_horizontal_speed_control_right+0x198>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	9e ef       	ldi	r25, 0xFE	; 254
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	80 83       	st	Z, r24
    24d8:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    24da:	10 92 f4 03 	sts	0x03F4, r1
    24de:	10 92 f3 03 	sts	0x03F3, r1
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    24e6:	35 95       	asr	r19
    24e8:	27 95       	ror	r18
    24ea:	35 95       	asr	r19
    24ec:	27 95       	ror	r18
    24ee:	35 95       	asr	r19
    24f0:	27 95       	ror	r18
    24f2:	35 95       	asr	r19
    24f4:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    24f6:	31 83       	std	Z+1, r19	; 0x01
    24f8:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    24fa:	12 16       	cp	r1, r18
    24fc:	13 06       	cpc	r1, r19
    24fe:	0c f4       	brge	.+2      	; 0x2502 <start_horizontal_speed_control_right+0x1c2>
    2500:	92 cf       	rjmp	.-220    	; 0x2426 <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    2502:	21 15       	cp	r18, r1
    2504:	31 05       	cpc	r19, r1
    2506:	e1 f6       	brne	.-72     	; 0x24c0 <start_horizontal_speed_control_right+0x180>
    2508:	08 95       	ret

0000250a <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    250a:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    250c:	80 81       	ld	r24, Z
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	09 f4       	brne	.+2      	; 0x2516 <start_horizontal_speed_control_left+0xc>
    2514:	7b c0       	rjmp	.+246    	; 0x260c <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2516:	a0 91 4b 05 	lds	r26, 0x054B
    251a:	b0 91 4c 05 	lds	r27, 0x054C
    251e:	b0 93 66 05 	sts	0x0566, r27
    2522:	a0 93 65 05 	sts	0x0565, r26
	if(*pwm_left >= 0) {
    2526:	20 81       	ld	r18, Z
    2528:	31 81       	ldd	r19, Z+1	; 0x01
    252a:	37 fd       	sbrc	r19, 7
    252c:	89 c0       	rjmp	.+274    	; 0x2640 <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    252e:	80 91 e7 03 	lds	r24, 0x03E7
    2532:	90 91 e8 03 	lds	r25, 0x03E8
    2536:	a9 01       	movw	r20, r18
    2538:	48 1b       	sub	r20, r24
    253a:	59 0b       	sbc	r21, r25
    253c:	ca 01       	movw	r24, r20
    253e:	50 93 4c 05 	sts	0x054C, r21
    2542:	40 93 4b 05 	sts	0x054B, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    2546:	20 91 f7 03 	lds	r18, 0x03F7
    254a:	30 91 f8 03 	lds	r19, 0x03F8
    254e:	28 0f       	add	r18, r24
    2550:	39 1f       	adc	r19, r25
    2552:	30 93 f8 03 	sts	0x03F8, r19
    2556:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    255a:	56 e0       	ldi	r21, 0x06	; 6
    255c:	21 34       	cpi	r18, 0x41	; 65
    255e:	35 07       	cpc	r19, r21
    2560:	0c f4       	brge	.+2      	; 0x2564 <start_horizontal_speed_control_left+0x5a>
    2562:	61 c0       	rjmp	.+194    	; 0x2626 <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    2564:	20 e4       	ldi	r18, 0x40	; 64
    2566:	36 e0       	ldi	r19, 0x06	; 6
    2568:	30 93 f8 03 	sts	0x03F8, r19
    256c:	20 93 f7 03 	sts	0x03F7, r18
    2570:	60 e8       	ldi	r22, 0x80	; 128
    2572:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    2574:	9c 01       	movw	r18, r24
    2576:	22 0f       	add	r18, r18
    2578:	33 1f       	adc	r19, r19
    257a:	28 0f       	add	r18, r24
    257c:	39 1f       	adc	r19, r25
    257e:	22 0f       	add	r18, r18
    2580:	33 1f       	adc	r19, r19
    2582:	22 0f       	add	r18, r18
    2584:	33 1f       	adc	r19, r19
    2586:	22 0f       	add	r18, r18
    2588:	33 1f       	adc	r19, r19
    258a:	28 0f       	add	r18, r24
    258c:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    258e:	40 81       	ld	r20, Z
    2590:	51 81       	ldd	r21, Z+1	; 0x01
    2592:	44 0f       	add	r20, r20
    2594:	55 1f       	adc	r21, r21
    2596:	44 0f       	add	r20, r20
    2598:	55 1f       	adc	r21, r21
    259a:	44 0f       	add	r20, r20
    259c:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    259e:	24 0f       	add	r18, r20
    25a0:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    25a2:	ad 01       	movw	r20, r26
    25a4:	48 1b       	sub	r20, r24
    25a6:	59 0b       	sbc	r21, r25
    25a8:	ca 01       	movw	r24, r20
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	84 0f       	add	r24, r20
    25b0:	95 1f       	adc	r25, r21
    25b2:	28 0f       	add	r18, r24
    25b4:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    25b6:	26 0f       	add	r18, r22
    25b8:	37 1f       	adc	r19, r23
    25ba:	30 93 f6 03 	sts	0x03F6, r19
    25be:	20 93 f5 03 	sts	0x03F5, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    25c2:	37 fd       	sbrc	r19, 7
    25c4:	4c c0       	rjmp	.+152    	; 0x265e <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    25c6:	12 16       	cp	r1, r18
    25c8:	13 06       	cpc	r1, r19
    25ca:	0c f0       	brlt	.+2      	; 0x25ce <start_horizontal_speed_control_left+0xc4>
    25cc:	52 c0       	rjmp	.+164    	; 0x2672 <start_horizontal_speed_control_left+0x168>
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	97 fd       	sbrc	r25, 7
    25d4:	67 c0       	rjmp	.+206    	; 0x26a4 <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    25d6:	5d e5       	ldi	r21, 0x5D	; 93
    25d8:	21 3c       	cpi	r18, 0xC1	; 193
    25da:	35 07       	cpc	r19, r21
    25dc:	0c f4       	brge	.+2      	; 0x25e0 <start_horizontal_speed_control_left+0xd6>
    25de:	49 c0       	rjmp	.+146    	; 0x2672 <start_horizontal_speed_control_left+0x168>
    25e0:	80 ec       	ldi	r24, 0xC0	; 192
    25e2:	9d e5       	ldi	r25, 0x5D	; 93
    25e4:	90 93 f6 03 	sts	0x03F6, r25
    25e8:	80 93 f5 03 	sts	0x03F5, r24
    25ec:	2c ed       	ldi	r18, 0xDC	; 220
    25ee:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    25f0:	22 5e       	subi	r18, 0xE2	; 226
    25f2:	3f 4f       	sbci	r19, 0xFF	; 255
    25f4:	31 83       	std	Z+1, r19	; 0x01
    25f6:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    25f8:	42 e0       	ldi	r20, 0x02	; 2
    25fa:	21 30       	cpi	r18, 0x01	; 1
    25fc:	34 07       	cpc	r19, r20
    25fe:	0c f4       	brge	.+2      	; 0x2602 <start_horizontal_speed_control_left+0xf8>
    2600:	48 c0       	rjmp	.+144    	; 0x2692 <start_horizontal_speed_control_left+0x188>
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	92 e0       	ldi	r25, 0x02	; 2
    2606:	91 83       	std	Z+1, r25	; 0x01
    2608:	80 83       	st	Z, r24
    260a:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    260c:	10 92 f8 03 	sts	0x03F8, r1
    2610:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    2614:	10 92 4c 05 	sts	0x054C, r1
    2618:	10 92 4b 05 	sts	0x054B, r1
		delta_left_speed_prev = 0;
    261c:	10 92 66 05 	sts	0x0566, r1
    2620:	10 92 65 05 	sts	0x0565, r1
		return;
    2624:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2626:	49 ef       	ldi	r20, 0xF9	; 249
    2628:	20 3c       	cpi	r18, 0xC0	; 192
    262a:	34 07       	cpc	r19, r20
    262c:	a4 f4       	brge	.+40     	; 0x2656 <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    262e:	20 ec       	ldi	r18, 0xC0	; 192
    2630:	39 ef       	ldi	r19, 0xF9	; 249
    2632:	30 93 f8 03 	sts	0x03F8, r19
    2636:	20 93 f7 03 	sts	0x03F7, r18
    263a:	60 e8       	ldi	r22, 0x80	; 128
    263c:	73 ef       	ldi	r23, 0xF3	; 243
    263e:	9a cf       	rjmp	.-204    	; 0x2574 <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2640:	80 91 e7 03 	lds	r24, 0x03E7
    2644:	90 91 e8 03 	lds	r25, 0x03E8
    2648:	82 0f       	add	r24, r18
    264a:	93 1f       	adc	r25, r19
    264c:	90 93 4c 05 	sts	0x054C, r25
    2650:	80 93 4b 05 	sts	0x054B, r24
    2654:	78 cf       	rjmp	.-272    	; 0x2546 <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2656:	b9 01       	movw	r22, r18
    2658:	66 0f       	add	r22, r22
    265a:	77 1f       	adc	r23, r23
    265c:	8b cf       	rjmp	.-234    	; 0x2574 <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    265e:	80 81       	ld	r24, Z
    2660:	91 81       	ldd	r25, Z+1	; 0x01
    2662:	97 fd       	sbrc	r25, 7
    2664:	06 c0       	rjmp	.+12     	; 0x2672 <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    2666:	10 92 f6 03 	sts	0x03F6, r1
    266a:	10 92 f5 03 	sts	0x03F5, r1
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2672:	82 ea       	ldi	r24, 0xA2	; 162
    2674:	20 34       	cpi	r18, 0x40	; 64
    2676:	38 07       	cpc	r19, r24
    2678:	dc f4       	brge	.+54     	; 0x26b0 <start_horizontal_speed_control_left+0x1a6>
    267a:	80 e4       	ldi	r24, 0x40	; 64
    267c:	92 ea       	ldi	r25, 0xA2	; 162
    267e:	90 93 f6 03 	sts	0x03F6, r25
    2682:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2686:	24 e2       	ldi	r18, 0x24	; 36
    2688:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    268a:	2e 51       	subi	r18, 0x1E	; 30
    268c:	30 40       	sbci	r19, 0x00	; 0
    268e:	31 83       	std	Z+1, r19	; 0x01
    2690:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2692:	5e ef       	ldi	r21, 0xFE	; 254
    2694:	20 30       	cpi	r18, 0x00	; 0
    2696:	35 07       	cpc	r19, r21
    2698:	24 f4       	brge	.+8      	; 0x26a2 <start_horizontal_speed_control_left+0x198>
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	9e ef       	ldi	r25, 0xFE	; 254
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	80 83       	st	Z, r24
    26a2:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    26a4:	10 92 f6 03 	sts	0x03F6, r1
    26a8:	10 92 f5 03 	sts	0x03F5, r1
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    26b0:	35 95       	asr	r19
    26b2:	27 95       	ror	r18
    26b4:	35 95       	asr	r19
    26b6:	27 95       	ror	r18
    26b8:	35 95       	asr	r19
    26ba:	27 95       	ror	r18
    26bc:	35 95       	asr	r19
    26be:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    26c0:	31 83       	std	Z+1, r19	; 0x01
    26c2:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    26c4:	12 16       	cp	r1, r18
    26c6:	13 06       	cpc	r1, r19
    26c8:	0c f4       	brge	.+2      	; 0x26cc <start_horizontal_speed_control_left+0x1c2>
    26ca:	92 cf       	rjmp	.-220    	; 0x25f0 <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    26cc:	21 15       	cp	r18, r1
    26ce:	31 05       	cpc	r19, r1
    26d0:	e1 f6       	brne	.-72     	; 0x268a <start_horizontal_speed_control_left+0x180>
    26d2:	08 95       	ret

000026d4 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    26d4:	85 b7       	in	r24, 0x35	; 53
    26d6:	80 61       	ori	r24, 0x10	; 16
    26d8:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    26da:	8f ef       	ldi	r24, 0xFF	; 255
    26dc:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    26de:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    26e0:	97 ef       	ldi	r25, 0xF7	; 247
    26e2:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    26e4:	90 ee       	ldi	r25, 0xE0	; 224
    26e6:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    26e8:	90 ef       	ldi	r25, 0xF0	; 240
    26ea:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    26ec:	90 eb       	ldi	r25, 0xB0	; 176
    26ee:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    26f0:	9c ef       	ldi	r25, 0xFC	; 252
    26f2:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    26f4:	93 e0       	ldi	r25, 0x03	; 3
    26f6:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    26f8:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    26fa:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    26fc:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    26fe:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    2700:	80 91 3a 05 	lds	r24, 0x053A
    2704:	88 23       	and	r24, r24
    2706:	e1 f0       	breq	.+56     	; 0x2740 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    2708:	81 30       	cpi	r24, 0x01	; 1
    270a:	d1 f0       	breq	.+52     	; 0x2740 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    270c:	82 30       	cpi	r24, 0x02	; 2
    270e:	51 f1       	breq	.+84     	; 0x2764 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    2710:	9f ef       	ldi	r25, 0xFF	; 255
    2712:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    2716:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    271a:	9f e0       	ldi	r25, 0x0F	; 15
    271c:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    2720:	88 23       	and	r24, r24
    2722:	a9 f4       	brne	.+42     	; 0x274e <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    2724:	90 91 05 01 	lds	r25, 0x0105
    2728:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    272c:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    2730:	9f ef       	ldi	r25, 0xFF	; 255
    2732:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    2736:	88 23       	and	r24, r24
    2738:	29 f4       	brne	.+10     	; 0x2744 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    273a:	10 92 0b 01 	sts	0x010B, r1
    273e:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    2740:	14 ba       	out	0x14, r1	; 20
    2742:	e6 cf       	rjmp	.-52     	; 0x2710 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    2744:	81 30       	cpi	r24, 0x01	; 1
    2746:	c9 f3       	breq	.-14     	; 0x273a <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    2748:	82 30       	cpi	r24, 0x02	; 2
    274a:	41 f0       	breq	.+16     	; 0x275c <initPortsIO+0x88>
    274c:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	11 f0       	breq	.+4      	; 0x2756 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    2752:	82 30       	cpi	r24, 0x02	; 2
    2754:	59 f7       	brne	.-42     	; 0x272c <initPortsIO+0x58>
		PORTJ = 0x0F;
    2756:	90 93 05 01 	sts	0x0105, r25
    275a:	e8 cf       	rjmp	.-48     	; 0x272c <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    275c:	87 ef       	ldi	r24, 0xF7	; 247
    275e:	80 93 0b 01 	sts	0x010B, r24
    2762:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    2764:	98 e0       	ldi	r25, 0x08	; 8
    2766:	94 bb       	out	0x14, r25	; 20
    2768:	d3 cf       	rjmp	.-90     	; 0x2710 <initPortsIO+0x3c>

0000276a <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    276a:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    276e:	10 92 bc 00 	sts	0x00BC, r1
}
    2772:	08 95       	ret

00002774 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    2774:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    2776:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    2778:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    2782:	08 95       	ret

00002784 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2784:	94 ea       	ldi	r25, 0xA4	; 164
    2786:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    278a:	90 91 bc 00 	lds	r25, 0x00BC
    278e:	97 ff       	sbrs	r25, 7
    2790:	fc cf       	rjmp	.-8      	; 0x278a <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2792:	90 91 b9 00 	lds	r25, 0x00B9
    2796:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2798:	98 30       	cpi	r25, 0x08	; 8
    279a:	21 f0       	breq	.+8      	; 0x27a4 <i2c_start+0x20>
    279c:	90 31       	cpi	r25, 0x10	; 16
    279e:	11 f0       	breq	.+4      	; 0x27a4 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	08 95       	ret
	}

	// send device address
	TWDR = address;
    27a4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    27a8:	84 e8       	ldi	r24, 0x84	; 132
    27aa:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    27ae:	80 91 bc 00 	lds	r24, 0x00BC
    27b2:	87 ff       	sbrs	r24, 7
    27b4:	fc cf       	rjmp	.-8      	; 0x27ae <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    27b6:	90 91 b9 00 	lds	r25, 0x00B9
    27ba:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    27bc:	98 31       	cpi	r25, 0x18	; 24
    27be:	21 f0       	breq	.+8      	; 0x27c8 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 34       	cpi	r25, 0x40	; 64
    27c4:	19 f0       	breq	.+6      	; 0x27cc <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    27c6:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    27c8:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    27ca:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	08 95       	ret

000027d0 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    27d0:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    27d2:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    27d4:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    27d6:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    27da:	90 91 bc 00 	lds	r25, 0x00BC
    27de:	97 ff       	sbrs	r25, 7
    27e0:	fc cf       	rjmp	.-8      	; 0x27da <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    27e2:	90 91 b9 00 	lds	r25, 0x00B9
    27e6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    27e8:	98 30       	cpi	r25, 0x08	; 8
    27ea:	11 f0       	breq	.+4      	; 0x27f0 <i2c_start_wait+0x20>
    27ec:	90 31       	cpi	r25, 0x10	; 16
    27ee:	99 f7       	brne	.-26     	; 0x27d6 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    27f0:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    27f4:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    27f8:	90 91 bc 00 	lds	r25, 0x00BC
    27fc:	97 ff       	sbrs	r25, 7
    27fe:	fc cf       	rjmp	.-8      	; 0x27f8 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2800:	90 91 b9 00 	lds	r25, 0x00B9
    2804:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2806:	90 32       	cpi	r25, 0x20	; 32
    2808:	19 f0       	breq	.+6      	; 0x2810 <i2c_start_wait+0x40>
    280a:	98 35       	cpi	r25, 0x58	; 88
    280c:	09 f0       	breq	.+2      	; 0x2810 <i2c_start_wait+0x40>
    280e:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2810:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2814:	90 91 bc 00 	lds	r25, 0x00BC
    2818:	94 fd       	sbrc	r25, 4
    281a:	fc cf       	rjmp	.-8      	; 0x2814 <i2c_start_wait+0x44>
    281c:	dc cf       	rjmp	.-72     	; 0x27d6 <i2c_start_wait+0x6>

0000281e <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    281e:	94 ea       	ldi	r25, 0xA4	; 164
    2820:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2824:	90 91 bc 00 	lds	r25, 0x00BC
    2828:	97 ff       	sbrs	r25, 7
    282a:	fc cf       	rjmp	.-8      	; 0x2824 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    282c:	90 91 b9 00 	lds	r25, 0x00B9
    2830:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2832:	98 30       	cpi	r25, 0x08	; 8
    2834:	21 f0       	breq	.+8      	; 0x283e <i2c_rep_start+0x20>
    2836:	90 31       	cpi	r25, 0x10	; 16
    2838:	11 f0       	breq	.+4      	; 0x283e <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	08 95       	ret
	}

	// send device address
	TWDR = address;
    283e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2842:	84 e8       	ldi	r24, 0x84	; 132
    2844:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2848:	80 91 bc 00 	lds	r24, 0x00BC
    284c:	87 ff       	sbrs	r24, 7
    284e:	fc cf       	rjmp	.-8      	; 0x2848 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2850:	90 91 b9 00 	lds	r25, 0x00B9
    2854:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2856:	98 31       	cpi	r25, 0x18	; 24
    2858:	21 f0       	breq	.+8      	; 0x2862 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 34       	cpi	r25, 0x40	; 64
    285e:	19 f0       	breq	.+6      	; 0x2866 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    2860:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2862:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2864:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	08 95       	ret

0000286a <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    286a:	84 e9       	ldi	r24, 0x94	; 148
    286c:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2870:	80 91 bc 00 	lds	r24, 0x00BC
    2874:	84 fd       	sbrc	r24, 4
    2876:	fc cf       	rjmp	.-8      	; 0x2870 <i2c_stop+0x6>

}/* i2c_stop */
    2878:	08 95       	ret

0000287a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    287a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    287e:	84 e8       	ldi	r24, 0x84	; 132
    2880:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2884:	80 91 bc 00 	lds	r24, 0x00BC
    2888:	87 ff       	sbrs	r24, 7
    288a:	fc cf       	rjmp	.-8      	; 0x2884 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    288c:	90 91 b9 00 	lds	r25, 0x00B9
    2890:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	98 32       	cpi	r25, 0x28	; 40
    2896:	09 f0       	breq	.+2      	; 0x289a <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2898:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    289a:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    289c:	08 95       	ret

0000289e <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    289e:	84 ec       	ldi	r24, 0xC4	; 196
    28a0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    28a4:	80 91 bc 00 	lds	r24, 0x00BC
    28a8:	87 ff       	sbrs	r24, 7
    28aa:	fc cf       	rjmp	.-8      	; 0x28a4 <i2c_readAck+0x6>

    return TWDR;
    28ac:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    28b0:	08 95       	ret

000028b2 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    28b2:	84 e8       	ldi	r24, 0x84	; 132
    28b4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    28b8:	80 91 bc 00 	lds	r24, 0x00BC
    28bc:	87 ff       	sbrs	r24, 7
    28be:	fc cf       	rjmp	.-8      	; 0x28b8 <i2c_readNak+0x6>
	
    return TWDR;
    28c0:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    28c4:	08 95       	ret

000028c6 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    28c6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    28ca:	80 e1       	ldi	r24, 0x10	; 16
    28cc:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    28d0:	e0 ec       	ldi	r30, 0xC0	; 192
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	82 60       	ori	r24, 0x02	; 2
    28d8:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    28da:	e1 ec       	ldi	r30, 0xC1	; 193
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	88 69       	ori	r24, 0x98	; 152
    28e2:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    28e4:	e2 ec       	ldi	r30, 0xC2	; 194
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
    28ea:	86 60       	ori	r24, 0x06	; 6
    28ec:	80 83       	st	Z, r24



}
    28ee:	08 95       	ret

000028f0 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    28f0:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    28f4:	80 e1       	ldi	r24, 0x10	; 16
    28f6:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    28fa:	e8 ec       	ldi	r30, 0xC8	; 200
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	82 60       	ori	r24, 0x02	; 2
    2902:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    2904:	e9 ec       	ldi	r30, 0xC9	; 201
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	88 61       	ori	r24, 0x18	; 24
    290c:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    290e:	ea ec       	ldi	r30, 0xCA	; 202
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
    2914:	86 60       	ori	r24, 0x06	; 6
    2916:	80 83       	st	Z, r24

}
    2918:	08 95       	ret

0000291a <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    291a:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    291e:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    2922:	10 92 c2 00 	sts	0x00C2, r1

}
    2926:	08 95       	ret

00002928 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    2928:	90 91 c0 00 	lds	r25, 0x00C0
    292c:	95 ff       	sbrs	r25, 5
    292e:	fc cf       	rjmp	.-8      	; 0x2928 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    2930:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    2934:	66 23       	and	r22, r22
    2936:	21 f0       	breq	.+8      	; 0x2940 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    2938:	80 91 c0 00 	lds	r24, 0x00C0
    293c:	86 ff       	sbrs	r24, 6
    293e:	fc cf       	rjmp	.-8      	; 0x2938 <usart0Transmit+0x10>
    2940:	08 95       	ret

00002942 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    2942:	90 91 c8 00 	lds	r25, 0x00C8
    2946:	95 ff       	sbrs	r25, 5
    2948:	fc cf       	rjmp	.-8      	; 0x2942 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    294a:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    294e:	66 23       	and	r22, r22
    2950:	21 f0       	breq	.+8      	; 0x295a <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    2952:	80 91 c8 00 	lds	r24, 0x00C8
    2956:	86 ff       	sbrs	r24, 6
    2958:	fc cf       	rjmp	.-8      	; 0x2952 <usart1Transmit+0x10>
    295a:	08 95       	ret

0000295c <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    295c:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    2960:	80 95       	com	r24
	} else {
		return 1;
	}

}
    2962:	88 1f       	adc	r24, r24
    2964:	88 27       	eor	r24, r24
    2966:	88 1f       	adc	r24, r24
    2968:	08 95       	ret

0000296a <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    296a:	87 e9       	ldi	r24, 0x97	; 151
    296c:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    296e:	20 91 c0 00 	lds	r18, 0x00C0
    2972:	27 fd       	sbrc	r18, 7
    2974:	07 c0       	rjmp	.+14     	; 0x2984 <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    2976:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    2978:	d1 f7       	brne	.-12     	; 0x296e <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	80 93 0a 04 	sts	0x040A, r24
			return 0;				// timeout
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    2984:	80 91 c6 00 	lds	r24, 0x00C6

}
    2988:	08 95       	ret

0000298a <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    298a:	1f 92       	push	r1
    298c:	0f 92       	push	r0
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	0f 92       	push	r0
    2992:	11 24       	eor	r1, r1
    2994:	2f 93       	push	r18
    2996:	3f 93       	push	r19
    2998:	4f 93       	push	r20
    299a:	8f 93       	push	r24
    299c:	9f 93       	push	r25

	char receivedByte = UDR0;
    299e:	90 91 c6 00 	lds	r25, 0x00C6

	if(chooseMenu) {
    29a2:	80 91 11 02 	lds	r24, 0x0211
    29a6:	88 23       	and	r24, r24
    29a8:	c9 f4       	brne	.+50     	; 0x29dc <__vector_25+0x52>
		chooseMenu = 0;
		menuChoice = receivedByte;
	} else {
		switch(menuChoice) {
    29aa:	80 91 0f 05 	lds	r24, 0x050F
    29ae:	81 30       	cpi	r24, 0x01	; 1
    29b0:	61 f0       	breq	.+24     	; 0x29ca <__vector_25+0x40>
    29b2:	82 30       	cpi	r24, 0x02	; 2
    29b4:	c1 f0       	breq	.+48     	; 0x29e6 <__vector_25+0x5c>
				}
				break;
		}
	}

}
    29b6:	9f 91       	pop	r25
    29b8:	8f 91       	pop	r24
    29ba:	4f 91       	pop	r20
    29bc:	3f 91       	pop	r19
    29be:	2f 91       	pop	r18
    29c0:	0f 90       	pop	r0
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	0f 90       	pop	r0
    29c6:	1f 90       	pop	r1
    29c8:	18 95       	reti
		chooseMenu = 0;
		menuChoice = receivedByte;
	} else {
		switch(menuChoice) {
			case 1: // send sensors data and activate actuators
				if(receivedByte == 0xAA) {
    29ca:	9a 3a       	cpi	r25, 0xAA	; 170
    29cc:	69 f1       	breq	.+90     	; 0x2a28 <__vector_25+0x9e>
					getDataNow = 1;
				} else if(receivedByte == 0x55) {
    29ce:	95 35       	cpi	r25, 0x55	; 85
    29d0:	91 f7       	brne	.-28     	; 0x29b6 <__vector_25+0x2c>
					chooseMenu = 1;
    29d2:	80 93 11 02 	sts	0x0211, r24
					menuChoice = 0;
    29d6:	10 92 0f 05 	sts	0x050F, r1
    29da:	ed cf       	rjmp	.-38     	; 0x29b6 <__vector_25+0x2c>
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(chooseMenu) {
		chooseMenu = 0;
    29dc:	10 92 11 02 	sts	0x0211, r1
		menuChoice = receivedByte;
    29e0:	90 93 0f 05 	sts	0x050F, r25
    29e4:	e8 cf       	rjmp	.-48     	; 0x29b6 <__vector_25+0x2c>
					menuChoice = 0;
				}
				break;

			case 2:	// address writing in eeprom
				if(menuState == 0) { // receive rf address LSB:
    29e6:	40 91 11 05 	lds	r20, 0x0511
    29ea:	44 23       	and	r20, r20
    29ec:	a9 f0       	breq	.+42     	; 0x2a18 <__vector_25+0x8e>
					rfAddress = (unsigned int)receivedByte&0x00FF;
					menuState = 1;
				} else if(menuState == 1) { // receive rf address MSB
    29ee:	41 30       	cpi	r20, 0x01	; 1
    29f0:	11 f7       	brne	.-60     	; 0x29b6 <__vector_25+0x2c>
					rfAddress |= ((unsigned int)receivedByte<<8);
    29f2:	39 2f       	mov	r19, r25
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	80 91 03 04 	lds	r24, 0x0403
    29fa:	90 91 04 04 	lds	r25, 0x0404
    29fe:	82 2b       	or	r24, r18
    2a00:	93 2b       	or	r25, r19
    2a02:	90 93 04 04 	sts	0x0404, r25
    2a06:	80 93 03 04 	sts	0x0403, r24
					addressReceived = 1;
    2a0a:	40 93 10 05 	sts	0x0510, r20
					menuState = 0;
    2a0e:	10 92 11 05 	sts	0x0511, r1
					chooseMenu = 1;
    2a12:	40 93 11 02 	sts	0x0211, r20
    2a16:	cf cf       	rjmp	.-98     	; 0x29b6 <__vector_25+0x2c>
				}
				break;

			case 2:	// address writing in eeprom
				if(menuState == 0) { // receive rf address LSB:
					rfAddress = (unsigned int)receivedByte&0x00FF;
    2a18:	90 93 03 04 	sts	0x0403, r25
    2a1c:	10 92 04 04 	sts	0x0404, r1
					menuState = 1;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	80 93 11 05 	sts	0x0511, r24
    2a26:	c7 cf       	rjmp	.-114    	; 0x29b6 <__vector_25+0x2c>
		menuChoice = receivedByte;
	} else {
		switch(menuChoice) {
			case 1: // send sensors data and activate actuators
				if(receivedByte == 0xAA) {
					getDataNow = 1;
    2a28:	80 93 12 05 	sts	0x0512, r24
    2a2c:	c4 cf       	rjmp	.-120    	; 0x29b6 <__vector_25+0x2c>

00002a2e <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    2a2e:	86 b1       	in	r24, 0x06	; 6
    2a30:	66 b1       	in	r22, 0x06	; 6
    2a32:	26 b1       	in	r18, 0x06	; 6
    2a34:	46 b1       	in	r20, 0x06	; 6
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	28 70       	andi	r18, 0x08	; 8
    2a3a:	30 70       	andi	r19, 0x00	; 0
    2a3c:	35 95       	asr	r19
    2a3e:	27 95       	ror	r18
    2a40:	35 95       	asr	r19
    2a42:	27 95       	ror	r18
    2a44:	35 95       	asr	r19
    2a46:	27 95       	ror	r18
    2a48:	22 0f       	add	r18, r18
    2a4a:	33 1f       	adc	r19, r19
    2a4c:	70 e0       	ldi	r23, 0x00	; 0
    2a4e:	64 70       	andi	r22, 0x04	; 4
    2a50:	70 70       	andi	r23, 0x00	; 0
    2a52:	75 95       	asr	r23
    2a54:	67 95       	ror	r22
    2a56:	75 95       	asr	r23
    2a58:	67 95       	ror	r22
    2a5a:	26 0f       	add	r18, r22
    2a5c:	37 1f       	adc	r19, r23
    2a5e:	22 0f       	add	r18, r18
    2a60:	33 1f       	adc	r19, r19
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	42 70       	andi	r20, 0x02	; 2
    2a66:	50 70       	andi	r21, 0x00	; 0
    2a68:	55 95       	asr	r21
    2a6a:	47 95       	ror	r20
    2a6c:	24 0f       	add	r18, r20
    2a6e:	35 1f       	adc	r19, r21
    2a70:	22 0f       	add	r18, r18
    2a72:	81 70       	andi	r24, 0x01	; 1
}
    2a74:	82 0f       	add	r24, r18
    2a76:	08 95       	ret

00002a78 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2a78:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    2a7a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    2a7c:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    2a7e:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    2a82:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    2a86:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    2a8a:	8e ef       	ldi	r24, 0xFE	; 254
    2a8c:	9f e0       	ldi	r25, 0x0F	; 15
    2a8e:	0e 94 c2 2c 	call	0x5984	; 0x5984 <__eerd_word_m2560>
    2a92:	90 93 04 04 	sts	0x0404, r25
    2a96:	80 93 03 04 	sts	0x0403, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    2a9a:	9c 01       	movw	r18, r24
    2a9c:	21 58       	subi	r18, 0x81	; 129
    2a9e:	3c 40       	sbci	r19, 0x0C	; 12
    2aa0:	23 30       	cpi	r18, 0x03	; 3
    2aa2:	31 05       	cpc	r19, r1
    2aa4:	f8 f4       	brcc	.+62     	; 0x2ae4 <initPeripherals+0x6c>
		hardwareRevision = HW_REV_3_0;
    2aa6:	10 92 3a 05 	sts	0x053A, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    2aaa:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <initPortsIO>
	initAdc();
    2aae:	0e 94 48 16 	call	0x2c90	; 0x2c90 <initAdc>
	initMotors();
    2ab2:	0e 94 1d 19 	call	0x323a	; 0x323a <initMotors>
	initRGBleds();
    2ab6:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <initRGBleds>
	initSPI();
    2aba:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <initSPI>
	mirf_init();
    2abe:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <mirf_init>
	if(spiCommError==0) {
    2ac2:	80 91 06 04 	lds	r24, 0x0406
    2ac6:	88 23       	and	r24, r24
    2ac8:	29 f4       	brne	.+10     	; 0x2ad4 <initPeripherals+0x5c>
		rfFlags |= 1;
    2aca:	80 91 05 04 	lds	r24, 0x0405
    2ace:	81 60       	ori	r24, 0x01	; 1
    2ad0:	80 93 05 04 	sts	0x0405, r24
	}
	initUsart0();
    2ad4:	0e 94 63 14 	call	0x28c6	; 0x28c6 <initUsart0>
	initAccelerometer();
    2ad8:	0e 94 1f 20 	call	0x403e	; 0x403e <initAccelerometer>
	init_ir_remote_control();
    2adc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <init_ir_remote_control>

	sei();			// enable global interrupts
    2ae0:	78 94       	sei

	
}
    2ae2:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    2ae4:	2c e0       	ldi	r18, 0x0C	; 12
    2ae6:	80 38       	cpi	r24, 0x80	; 128
    2ae8:	92 07       	cpc	r25, r18
    2aea:	21 f4       	brne	.+8      	; 0x2af4 <initPeripherals+0x7c>
		hardwareRevision = HW_REV_3_0_1;
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	80 93 3a 05 	sts	0x053A, r24
    2af2:	db cf       	rjmp	.-74     	; 0x2aaa <initPeripherals+0x32>
	}

	if(rfAddress > 3203) {
    2af4:	2c e0       	ldi	r18, 0x0C	; 12
    2af6:	84 38       	cpi	r24, 0x84	; 132
    2af8:	92 07       	cpc	r25, r18
    2afa:	b8 f2       	brcs	.-82     	; 0x2aaa <initPeripherals+0x32>
		hardwareRevision = HW_REV_3_1;
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	80 93 3a 05 	sts	0x053A, r24
    2b02:	d3 cf       	rjmp	.-90     	; 0x2aaa <initPeripherals+0x32>

00002b04 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    2b04:	1f 92       	push	r1
    2b06:	0f 92       	push	r0
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	0f 92       	push	r0
    2b0c:	11 24       	eor	r1, r1

}
    2b0e:	0f 90       	pop	r0
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	0f 90       	pop	r0
    2b14:	1f 90       	pop	r1
    2b16:	18 95       	reti

00002b18 <sleep>:

void sleep(unsigned char seconds) {
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    2b1c:	9e e1       	ldi	r25, 0x1E	; 30
    2b1e:	89 9f       	mul	r24, r25
    2b20:	e0 01       	movw	r28, r0
    2b22:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2b24:	80 91 68 00 	lds	r24, 0x0068
    2b28:	8d 7f       	andi	r24, 0xFD	; 253
    2b2a:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    2b2e:	80 91 6c 00 	lds	r24, 0x006C
    2b32:	8f 77       	andi	r24, 0x7F	; 127
    2b34:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    2b38:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    2b3a:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    2b3e:	80 91 7a 00 	lds	r24, 0x007A
    2b42:	80 61       	ori	r24, 0x10	; 16
    2b44:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    2b48:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    2b4c:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2b50:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    2b54:	88 b3       	in	r24, 0x18	; 24
    2b56:	87 60       	ori	r24, 0x07	; 7
    2b58:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    2b5a:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    2b5e:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    2b62:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    2b66:	89 b3       	in	r24, 0x19	; 25
    2b68:	87 60       	ori	r24, 0x07	; 7
    2b6a:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    2b6c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    2b70:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    2b74:	0e 94 8d 14 	call	0x291a	; 0x291a <closeUsart>
	closeSPI();
    2b78:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <closeSPI>
	i2c_close();
    2b7c:	0e 94 b5 13 	call	0x276a	; 0x276a <i2c_close>

	// set port pins
	initPortsIO();
    2b80:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    2b84:	83 b7       	in	r24, 0x33	; 51
    2b86:	8f 60       	ori	r24, 0x0F	; 15
    2b88:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    2b90:	80 91 b0 00 	lds	r24, 0x00B0
    2b94:	8d 7f       	andi	r24, 0xFD	; 253
    2b96:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    2b9a:	80 91 b1 00 	lds	r24, 0x00B1
    2b9e:	87 60       	ori	r24, 0x07	; 7
    2ba0:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    2ba4:	20 97       	sbiw	r28, 0x00	; 0
    2ba6:	19 f0       	breq	.+6      	; 0x2bae <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    2ba8:	88 95       	sleep
		pause--;
    2baa:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    2bac:	e9 f7       	brne	.-6      	; 0x2ba8 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    2bae:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    2bb0:	80 91 b1 00 	lds	r24, 0x00B1
    2bb4:	88 7f       	andi	r24, 0xF8	; 248
    2bb6:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    2bba:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    2bbe:	80 91 b0 00 	lds	r24, 0x00B0
    2bc2:	82 60       	ori	r24, 0x02	; 2
    2bc4:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    2bc8:	8f ef       	ldi	r24, 0xFF	; 255
    2bca:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    2bce:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    2bd2:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    2bd6:	10 92 ec 03 	sts	0x03EC, r1
    2bda:	10 92 eb 03 	sts	0x03EB, r1
	pwm_left = 0;
    2bde:	10 92 ee 03 	sts	0x03EE, r1
    2be2:	10 92 ed 03 	sts	0x03ED, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2be6:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    2be8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    2bea:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    2bec:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    2bf0:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    2bf4:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    2bf8:	8e ef       	ldi	r24, 0xFE	; 254
    2bfa:	9f e0       	ldi	r25, 0x0F	; 15
    2bfc:	0e 94 c2 2c 	call	0x5984	; 0x5984 <__eerd_word_m2560>
    2c00:	90 93 04 04 	sts	0x0404, r25
    2c04:	80 93 03 04 	sts	0x0403, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    2c08:	9c 01       	movw	r18, r24
    2c0a:	21 58       	subi	r18, 0x81	; 129
    2c0c:	3c 40       	sbci	r19, 0x0C	; 12
    2c0e:	23 30       	cpi	r18, 0x03	; 3
    2c10:	31 05       	cpc	r19, r1
    2c12:	08 f5       	brcc	.+66     	; 0x2c56 <sleep+0x13e>
		hardwareRevision = HW_REV_3_0;
    2c14:	10 92 3a 05 	sts	0x053A, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    2c18:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <initPortsIO>
	initAdc();
    2c1c:	0e 94 48 16 	call	0x2c90	; 0x2c90 <initAdc>
	initMotors();
    2c20:	0e 94 1d 19 	call	0x323a	; 0x323a <initMotors>
	initRGBleds();
    2c24:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <initRGBleds>
	initSPI();
    2c28:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <initSPI>
	mirf_init();
    2c2c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <mirf_init>
	if(spiCommError==0) {
    2c30:	80 91 06 04 	lds	r24, 0x0406
    2c34:	88 23       	and	r24, r24
    2c36:	29 f4       	brne	.+10     	; 0x2c42 <sleep+0x12a>
		rfFlags |= 1;
    2c38:	80 91 05 04 	lds	r24, 0x0405
    2c3c:	81 60       	ori	r24, 0x01	; 1
    2c3e:	80 93 05 04 	sts	0x0405, r24
	}
	initUsart0();
    2c42:	0e 94 63 14 	call	0x28c6	; 0x28c6 <initUsart0>
	initAccelerometer();
    2c46:	0e 94 1f 20 	call	0x403e	; 0x403e <initAccelerometer>
	init_ir_remote_control();
    2c4a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <init_ir_remote_control>

	sei();			// enable global interrupts
    2c4e:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    2c56:	2c e0       	ldi	r18, 0x0C	; 12
    2c58:	80 38       	cpi	r24, 0x80	; 128
    2c5a:	92 07       	cpc	r25, r18
    2c5c:	21 f4       	brne	.+8      	; 0x2c66 <sleep+0x14e>
		hardwareRevision = HW_REV_3_0_1;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	80 93 3a 05 	sts	0x053A, r24
    2c64:	d9 cf       	rjmp	.-78     	; 0x2c18 <sleep+0x100>
	}

	if(rfAddress > 3203) {
    2c66:	2c e0       	ldi	r18, 0x0C	; 12
    2c68:	84 38       	cpi	r24, 0x84	; 132
    2c6a:	92 07       	cpc	r25, r18
    2c6c:	a8 f2       	brcs	.-86     	; 0x2c18 <sleep+0x100>
		hardwareRevision = HW_REV_3_1;
    2c6e:	82 e0       	ldi	r24, 0x02	; 2
    2c70:	80 93 3a 05 	sts	0x053A, r24
    2c74:	d1 cf       	rjmp	.-94     	; 0x2c18 <sleep+0x100>

00002c76 <getTime100MicroSec>:
	pwm_left = 0;
	initPeripherals();

}

unsigned long int getTime100MicroSec() {
    2c76:	60 91 33 05 	lds	r22, 0x0533
    2c7a:	70 91 34 05 	lds	r23, 0x0534
	return clockTick;
}
    2c7e:	80 91 35 05 	lds	r24, 0x0535
    2c82:	90 91 36 05 	lds	r25, 0x0536
    2c86:	08 95       	ret

00002c88 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	80 93 c5 03 	sts	0x03C5, r24
}
    2c8e:	08 95       	ret

00002c90 <initAdc>:

#include "adc.h"


void initAdc(void) {
    2c90:	cf 93       	push	r28
    2c92:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    2c94:	ea e7       	ldi	r30, 0x7A	; 122
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	10 82       	st	Z, r1
	ADCSRB = 0;
    2c9a:	ab e7       	ldi	r26, 0x7B	; 123
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	1c 92       	st	X, r1
	ADMUX = 0;
    2ca0:	cc e7       	ldi	r28, 0x7C	; 124
    2ca2:	d0 e0       	ldi	r29, 0x00	; 0
    2ca4:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    2ca6:	80 81       	ld	r24, Z
    2ca8:	86 60       	ori	r24, 0x06	; 6
    2caa:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    2cac:	88 81       	ld	r24, Y
    2cae:	80 64       	ori	r24, 0x40	; 64
    2cb0:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    2cb2:	80 81       	ld	r24, Z
    2cb4:	80 62       	ori	r24, 0x20	; 32
    2cb6:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    2cb8:	8c 91       	ld	r24, X
    2cba:	88 7f       	andi	r24, 0xF8	; 248
    2cbc:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    2cbe:	80 81       	ld	r24, Z
    2cc0:	88 60       	ori	r24, 0x08	; 8
    2cc2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    2cc4:	80 81       	ld	r24, Z
    2cc6:	80 68       	ori	r24, 0x80	; 128
    2cc8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    2cca:	80 81       	ld	r24, Z
    2ccc:	80 64       	ori	r24, 0x40	; 64
    2cce:	80 83       	st	Z, r24

}
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	08 95       	ret

00002cd6 <__vector_29>:

ISR(ADC_vect) {
    2cd6:	1f 92       	push	r1
    2cd8:	0f 92       	push	r0
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	0f 92       	push	r0
    2cde:	0b b6       	in	r0, 0x3b	; 59
    2ce0:	0f 92       	push	r0
    2ce2:	11 24       	eor	r1, r1
    2ce4:	2f 93       	push	r18
    2ce6:	3f 93       	push	r19
    2ce8:	4f 93       	push	r20
    2cea:	5f 93       	push	r21
    2cec:	6f 93       	push	r22
    2cee:	8f 93       	push	r24
    2cf0:	9f 93       	push	r25
    2cf2:	af 93       	push	r26
    2cf4:	bf 93       	push	r27
    2cf6:	ef 93       	push	r30
    2cf8:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    2cfa:	80 91 33 05 	lds	r24, 0x0533
    2cfe:	90 91 34 05 	lds	r25, 0x0534
    2d02:	a0 91 35 05 	lds	r26, 0x0535
    2d06:	b0 91 36 05 	lds	r27, 0x0536
    2d0a:	01 96       	adiw	r24, 0x01	; 1
    2d0c:	a1 1d       	adc	r26, r1
    2d0e:	b1 1d       	adc	r27, r1
    2d10:	80 93 33 05 	sts	0x0533, r24
    2d14:	90 93 34 05 	sts	0x0534, r25
    2d18:	a0 93 35 05 	sts	0x0535, r26
    2d1c:	b0 93 36 05 	sts	0x0536, r27
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    2d20:	20 91 78 00 	lds	r18, 0x0078
    2d24:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    2d26:	40 91 79 00 	lds	r20, 0x0079
    2d2a:	94 2f       	mov	r25, r20
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	28 2b       	or	r18, r24
    2d30:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2d32:	80 91 bf 03 	lds	r24, 0x03BF
    2d36:	82 30       	cpi	r24, 0x02	; 2
    2d38:	09 f4       	brne	.+2      	; 0x2d3c <__vector_29+0x66>
    2d3a:	ac c1       	rjmp	.+856    	; 0x3094 <__vector_29+0x3be>
    2d3c:	83 30       	cpi	r24, 0x03	; 3
    2d3e:	08 f4       	brcc	.+2      	; 0x2d42 <__vector_29+0x6c>
    2d40:	45 c0       	rjmp	.+138    	; 0x2dcc <__vector_29+0xf6>
    2d42:	83 30       	cpi	r24, 0x03	; 3
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <__vector_29+0x72>
    2d46:	c9 c1       	rjmp	.+914    	; 0x30da <__vector_29+0x404>
    2d48:	84 30       	cpi	r24, 0x04	; 4
    2d4a:	09 f4       	brne	.+2      	; 0x2d4e <__vector_29+0x78>
    2d4c:	68 c1       	rjmp	.+720    	; 0x301e <__vector_29+0x348>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2d4e:	80 91 c0 03 	lds	r24, 0x03C0
    2d52:	82 30       	cpi	r24, 0x02	; 2
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <__vector_29+0x82>
    2d56:	4f c1       	rjmp	.+670    	; 0x2ff6 <__vector_29+0x320>
    2d58:	83 30       	cpi	r24, 0x03	; 3
    2d5a:	08 f0       	brcs	.+2      	; 0x2d5e <__vector_29+0x88>
    2d5c:	cd c0       	rjmp	.+410    	; 0x2ef8 <__vector_29+0x222>
    2d5e:	88 23       	and	r24, r24
    2d60:	09 f0       	breq	.+2      	; 0x2d64 <__vector_29+0x8e>
    2d62:	24 c1       	rjmp	.+584    	; 0x2fac <__vector_29+0x2d6>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    2d64:	80 91 2a 03 	lds	r24, 0x032A
    2d68:	86 95       	lsr	r24
    2d6a:	80 93 29 03 	sts	0x0329, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    2d6e:	80 91 c1 03 	lds	r24, 0x03C1
    2d72:	88 23       	and	r24, r24
    2d74:	09 f0       	breq	.+2      	; 0x2d78 <__vector_29+0xa2>
    2d76:	e1 c1       	rjmp	.+962    	; 0x313a <__vector_29+0x464>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	80 93 c0 03 	sts	0x03C0, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    2d84:	90 91 29 03 	lds	r25, 0x0329
    2d88:	98 30       	cpi	r25, 0x08	; 8
    2d8a:	08 f0       	brcs	.+2      	; 0x2d8e <__vector_29+0xb8>
    2d8c:	ed c0       	rjmp	.+474    	; 0x2f68 <__vector_29+0x292>
		ADCSRB &= ~(1 << MUX5);
    2d8e:	90 91 7b 00 	lds	r25, 0x007B
    2d92:	97 7f       	andi	r25, 0xF7	; 247
    2d94:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    2d98:	90 91 29 03 	lds	r25, 0x0329
    2d9c:	90 5c       	subi	r25, 0xC0	; 192
    2d9e:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    2da2:	82 30       	cpi	r24, 0x02	; 2
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <__vector_29+0xd2>
    2da6:	ed c0       	rjmp	.+474    	; 0x2f82 <__vector_29+0x2ac>

	}

	//LED_BLUE_OFF;

}
    2da8:	ff 91       	pop	r31
    2daa:	ef 91       	pop	r30
    2dac:	bf 91       	pop	r27
    2dae:	af 91       	pop	r26
    2db0:	9f 91       	pop	r25
    2db2:	8f 91       	pop	r24
    2db4:	6f 91       	pop	r22
    2db6:	5f 91       	pop	r21
    2db8:	4f 91       	pop	r20
    2dba:	3f 91       	pop	r19
    2dbc:	2f 91       	pop	r18
    2dbe:	0f 90       	pop	r0
    2dc0:	0b be       	out	0x3b, r0	; 59
    2dc2:	0f 90       	pop	r0
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	0f 90       	pop	r0
    2dc8:	1f 90       	pop	r1
    2dca:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2dcc:	88 23       	and	r24, r24
    2dce:	09 f0       	breq	.+2      	; 0x2dd2 <__vector_29+0xfc>
    2dd0:	fe c0       	rjmp	.+508    	; 0x2fce <__vector_29+0x2f8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2dd2:	60 91 2a 03 	lds	r22, 0x032A
    2dd6:	6e 30       	cpi	r22, 0x0E	; 14
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <__vector_29+0x106>
    2dda:	d0 c1       	rjmp	.+928    	; 0x317c <__vector_29+0x4a6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    2ddc:	46 2f       	mov	r20, r22
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	fa 01       	movw	r30, r20
    2de2:	ee 0f       	add	r30, r30
    2de4:	ff 1f       	adc	r31, r31
    2de6:	e1 5d       	subi	r30, 0xD1	; 209
    2de8:	fc 4f       	sbci	r31, 0xFC	; 252
    2dea:	31 83       	std	Z+1, r19	; 0x01
    2dec:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    2dee:	40 ff       	sbrs	r20, 0
    2df0:	77 c0       	rjmp	.+238    	; 0x2ee0 <__vector_29+0x20a>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    2df2:	fa 01       	movw	r30, r20
    2df4:	ee 0f       	add	r30, r30
    2df6:	ff 1f       	adc	r31, r31
    2df8:	e3 5d       	subi	r30, 0xD3	; 211
    2dfa:	fc 4f       	sbci	r31, 0xFC	; 252
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	fa 01       	movw	r30, r20
    2e02:	ee 0f       	add	r30, r30
    2e04:	ff 1f       	adc	r31, r31
    2e06:	e1 5d       	subi	r30, 0xD1	; 209
    2e08:	fc 4f       	sbci	r31, 0xFC	; 252
    2e0a:	40 81       	ld	r20, Z
    2e0c:	51 81       	ldd	r21, Z+1	; 0x01
    2e0e:	26 2f       	mov	r18, r22
    2e10:	26 95       	lsr	r18
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	84 1b       	sub	r24, r20
    2e16:	95 0b       	sbc	r25, r21
    2e18:	22 0f       	add	r18, r18
    2e1a:	33 1f       	adc	r19, r19
    2e1c:	f9 01       	movw	r30, r18
    2e1e:	e9 58       	subi	r30, 0x89	; 137
    2e20:	fc 4f       	sbci	r31, 0xFC	; 252
    2e22:	40 81       	ld	r20, Z
    2e24:	51 81       	ldd	r21, Z+1	; 0x01
    2e26:	84 1b       	sub	r24, r20
    2e28:	95 0b       	sbc	r25, r21
    2e2a:	f9 01       	movw	r30, r18
    2e2c:	e1 5a       	subi	r30, 0xA1	; 161
    2e2e:	fc 4f       	sbci	r31, 0xFC	; 252
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    2e34:	97 fd       	sbrc	r25, 7
    2e36:	bd c1       	rjmp	.+890    	; 0x31b2 <__vector_29+0x4dc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    2e38:	44 e0       	ldi	r20, 0x04	; 4
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	94 07       	cpc	r25, r20
    2e3e:	24 f0       	brlt	.+8      	; 0x2e48 <__vector_29+0x172>
					proximityResult[currentProx>>1] = 1024;
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	94 e0       	ldi	r25, 0x04	; 4
    2e44:	91 83       	std	Z+1, r25	; 0x01
    2e46:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    2e48:	60 31       	cpi	r22, 0x10	; 16
    2e4a:	48 f4       	brcc	.+18     	; 0x2e5e <__vector_29+0x188>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    2e4c:	8c 33       	cpi	r24, 0x3C	; 60
    2e4e:	91 05       	cpc	r25, r1
    2e50:	0c f0       	brlt	.+2      	; 0x2e54 <__vector_29+0x17e>
    2e52:	b4 c1       	rjmp	.+872    	; 0x31bc <__vector_29+0x4e6>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    2e54:	29 53       	subi	r18, 0x39	; 57
    2e56:	3c 4f       	sbci	r19, 0xFC	; 252
    2e58:	f9 01       	movw	r30, r18
    2e5a:	91 83       	std	Z+1, r25	; 0x01
    2e5c:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    2e5e:	80 91 48 05 	lds	r24, 0x0548
    2e62:	88 23       	and	r24, r24
    2e64:	09 f4       	brne	.+2      	; 0x2e68 <__vector_29+0x192>
    2e66:	75 c1       	rjmp	.+746    	; 0x3152 <__vector_29+0x47c>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    2e68:	80 91 6f 03 	lds	r24, 0x036F
    2e6c:	90 91 70 03 	lds	r25, 0x0370
    2e70:	f1 e0       	ldi	r31, 0x01	; 1
    2e72:	84 3a       	cpi	r24, 0xA4	; 164
    2e74:	9f 07       	cpc	r25, r31
    2e76:	cc f0       	brlt	.+50     	; 0x2eaa <__vector_29+0x1d4>
    2e78:	80 91 71 03 	lds	r24, 0x0371
    2e7c:	90 91 72 03 	lds	r25, 0x0372
    2e80:	21 e0       	ldi	r18, 0x01	; 1
    2e82:	84 3a       	cpi	r24, 0xA4	; 164
    2e84:	92 07       	cpc	r25, r18
    2e86:	8c f0       	brlt	.+34     	; 0x2eaa <__vector_29+0x1d4>
    2e88:	80 91 73 03 	lds	r24, 0x0373
    2e8c:	90 91 74 03 	lds	r25, 0x0374
    2e90:	41 e0       	ldi	r20, 0x01	; 1
    2e92:	84 3a       	cpi	r24, 0xA4	; 164
    2e94:	94 07       	cpc	r25, r20
    2e96:	4c f0       	brlt	.+18     	; 0x2eaa <__vector_29+0x1d4>
    2e98:	80 91 75 03 	lds	r24, 0x0375
    2e9c:	90 91 76 03 	lds	r25, 0x0376
    2ea0:	e1 e0       	ldi	r30, 0x01	; 1
    2ea2:	84 3a       	cpi	r24, 0xA4	; 164
    2ea4:	9e 07       	cpc	r25, r30
    2ea6:	0c f0       	brlt	.+2      	; 0x2eaa <__vector_29+0x1d4>
    2ea8:	54 c1       	rjmp	.+680    	; 0x3152 <__vector_29+0x47c>
						cliffDetectedFlag = 1;
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	80 93 49 05 	sts	0x0549, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    2eb0:	10 92 ee 03 	sts	0x03EE, r1
    2eb4:	10 92 ed 03 	sts	0x03ED, r1
						OCR4A = 0;
    2eb8:	10 92 a9 00 	sts	0x00A9, r1
    2ebc:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    2ec0:	10 92 ab 00 	sts	0x00AB, r1
    2ec4:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    2ec8:	10 92 ec 03 	sts	0x03EC, r1
    2ecc:	10 92 eb 03 	sts	0x03EB, r1
						OCR3A = 0;
    2ed0:	10 92 99 00 	sts	0x0099, r1
    2ed4:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    2ed8:	10 92 9b 00 	sts	0x009B, r1
    2edc:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    2ee0:	6f 5f       	subi	r22, 0xFF	; 255
    2ee2:	60 93 2a 03 	sts	0x032A, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    2ee6:	68 31       	cpi	r22, 0x18	; 24
    2ee8:	08 f4       	brcc	.+2      	; 0x2eec <__vector_29+0x216>
    2eea:	31 cf       	rjmp	.-414    	; 0x2d4e <__vector_29+0x78>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    2eec:	10 92 2a 03 	sts	0x032A, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	80 93 c6 03 	sts	0x03C6, r24
    2ef6:	2b cf       	rjmp	.-426    	; 0x2d4e <__vector_29+0x78>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2ef8:	83 30       	cpi	r24, 0x03	; 3
    2efa:	09 f4       	brne	.+2      	; 0x2efe <__vector_29+0x228>
    2efc:	b7 c0       	rjmp	.+366    	; 0x306c <__vector_29+0x396>
    2efe:	84 30       	cpi	r24, 0x04	; 4
    2f00:	09 f0       	breq	.+2      	; 0x2f04 <__vector_29+0x22e>
    2f02:	40 cf       	rjmp	.-384    	; 0x2d84 <__vector_29+0xae>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    2f04:	90 91 2c 03 	lds	r25, 0x032C
    2f08:	90 93 29 03 	sts	0x0329, r25
			rightChannelPhase = rightMotorPhase;
    2f0c:	90 91 2d 03 	lds	r25, 0x032D
    2f10:	90 93 c1 03 	sts	0x03C1, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    2f14:	90 91 c2 03 	lds	r25, 0x03C2
    2f18:	99 23       	and	r25, r25
    2f1a:	09 f0       	breq	.+2      	; 0x2f1e <__vector_29+0x248>
    2f1c:	08 c1       	rjmp	.+528    	; 0x312e <__vector_29+0x458>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2f1e:	83 e0       	ldi	r24, 0x03	; 3
    2f20:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    2f24:	10 92 c0 03 	sts	0x03C0, r1

			if(currentProx==14 && measBattery==1) {
    2f28:	60 91 2a 03 	lds	r22, 0x032A
    2f2c:	6e 30       	cpi	r22, 0x0E	; 14
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <__vector_29+0x25c>
    2f30:	1f c1       	rjmp	.+574    	; 0x3170 <__vector_29+0x49a>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    2f32:	86 2f       	mov	r24, r22
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	60 ff       	sbrs	r22, 0
    2f38:	f1 c0       	rjmp	.+482    	; 0x311c <__vector_29+0x446>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    2f3a:	60 31       	cpi	r22, 0x10	; 16
    2f3c:	08 f4       	brcc	.+2      	; 0x2f40 <__vector_29+0x26a>
    2f3e:	0c c1       	rjmp	.+536    	; 0x3158 <__vector_29+0x482>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    2f40:	20 91 3a 05 	lds	r18, 0x053A
    2f44:	22 23       	and	r18, r18
    2f46:	09 f0       	breq	.+2      	; 0x2f4a <__vector_29+0x274>
    2f48:	d5 c0       	rjmp	.+426    	; 0x30f4 <__vector_29+0x41e>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    2f4a:	40 97       	sbiw	r24, 0x10	; 16
    2f4c:	95 95       	asr	r25
    2f4e:	87 95       	ror	r24
    2f50:	21 e0       	ldi	r18, 0x01	; 1
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	02 c0       	rjmp	.+4      	; 0x2f5a <__vector_29+0x284>
    2f56:	22 0f       	add	r18, r18
    2f58:	33 1f       	adc	r19, r19
    2f5a:	8a 95       	dec	r24
    2f5c:	e2 f7       	brpl	.-8      	; 0x2f56 <__vector_29+0x280>
    2f5e:	20 93 05 01 	sts	0x0105, r18
    2f62:	80 91 c0 03 	lds	r24, 0x03C0
    2f66:	0e cf       	rjmp	.-484    	; 0x2d84 <__vector_29+0xae>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    2f68:	90 91 7b 00 	lds	r25, 0x007B
    2f6c:	98 60       	ori	r25, 0x08	; 8
    2f6e:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    2f72:	90 91 29 03 	lds	r25, 0x0329
    2f76:	98 5c       	subi	r25, 0xC8	; 200
    2f78:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    2f7c:	82 30       	cpi	r24, 0x02	; 2
    2f7e:	09 f0       	breq	.+2      	; 0x2f82 <__vector_29+0x2ac>
    2f80:	13 cf       	rjmp	.-474    	; 0x2da8 <__vector_29+0xd2>

		if(hardwareRevision == HW_REV_3_0) {
    2f82:	20 91 3a 05 	lds	r18, 0x053A
    2f86:	22 23       	and	r18, r18
    2f88:	51 f0       	breq	.+20     	; 0x2f9e <__vector_29+0x2c8>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    2f8a:	21 30       	cpi	r18, 0x01	; 1
    2f8c:	19 f0       	breq	.+6      	; 0x2f94 <__vector_29+0x2be>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    2f8e:	22 30       	cpi	r18, 0x02	; 2
    2f90:	09 f0       	breq	.+2      	; 0x2f94 <__vector_29+0x2be>
    2f92:	0a cf       	rjmp	.-492    	; 0x2da8 <__vector_29+0xd2>
			PORTJ = 0xFF;
    2f94:	8f ef       	ldi	r24, 0xFF	; 255
    2f96:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    2f9a:	12 b8       	out	0x02, r1	; 2
    2f9c:	05 cf       	rjmp	.-502    	; 0x2da8 <__vector_29+0xd2>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    2f9e:	80 91 05 01 	lds	r24, 0x0105
    2fa2:	80 7f       	andi	r24, 0xF0	; 240
    2fa4:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    2fa8:	12 b8       	out	0x02, r1	; 2
    2faa:	fe ce       	rjmp	.-516    	; 0x2da8 <__vector_29+0xd2>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2fac:	81 30       	cpi	r24, 0x01	; 1
    2fae:	09 f0       	breq	.+2      	; 0x2fb2 <__vector_29+0x2dc>
    2fb0:	e9 ce       	rjmp	.-558    	; 0x2d84 <__vector_29+0xae>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    2fb2:	80 91 2b 03 	lds	r24, 0x032B
    2fb6:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    2fba:	80 91 2e 03 	lds	r24, 0x032E
    2fbe:	80 93 c2 03 	sts	0x03C2, r24
			adcSaveDataTo = SAVE_TO_PROX;
    2fc2:	10 92 bf 03 	sts	0x03BF, r1
			adcSamplingState = 2;
    2fc6:	82 e0       	ldi	r24, 0x02	; 2
    2fc8:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2fcc:	db ce       	rjmp	.-586    	; 0x2d84 <__vector_29+0xae>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2fce:	81 30       	cpi	r24, 0x01	; 1
    2fd0:	09 f0       	breq	.+2      	; 0x2fd4 <__vector_29+0x2fe>
    2fd2:	bd ce       	rjmp	.-646    	; 0x2d4e <__vector_29+0x78>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    2fd4:	80 91 d9 03 	lds	r24, 0x03D9
    2fd8:	90 91 da 03 	lds	r25, 0x03DA
    2fdc:	82 0f       	add	r24, r18
    2fde:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    2fe0:	96 95       	lsr	r25
    2fe2:	87 95       	ror	r24
    2fe4:	90 93 da 03 	sts	0x03DA, r25
    2fe8:	80 93 d9 03 	sts	0x03D9, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2fec:	80 91 c0 03 	lds	r24, 0x03C0
    2ff0:	82 30       	cpi	r24, 0x02	; 2
    2ff2:	09 f0       	breq	.+2      	; 0x2ff6 <__vector_29+0x320>
    2ff4:	b1 ce       	rjmp	.-670    	; 0x2d58 <__vector_29+0x82>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    2ff6:	80 91 2c 03 	lds	r24, 0x032C
    2ffa:	80 93 29 03 	sts	0x0329, r24
			rightChannelPhase = rightMotorPhase;
    2ffe:	80 91 2d 03 	lds	r24, 0x032D
    3002:	80 93 c1 03 	sts	0x03C1, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3006:	80 91 c2 03 	lds	r24, 0x03C2
    300a:	88 23       	and	r24, r24
    300c:	09 f0       	breq	.+2      	; 0x3010 <__vector_29+0x33a>
    300e:	9b c0       	rjmp	.+310    	; 0x3146 <__vector_29+0x470>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3010:	83 e0       	ldi	r24, 0x03	; 3
    3012:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3016:	83 e0       	ldi	r24, 0x03	; 3
    3018:	80 93 c0 03 	sts	0x03C0, r24
			break;
    301c:	b3 ce       	rjmp	.-666    	; 0x2d84 <__vector_29+0xae>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    301e:	80 91 0a 02 	lds	r24, 0x020A
    3022:	88 23       	and	r24, r24
    3024:	09 f4       	brne	.+2      	; 0x3028 <__vector_29+0x352>
    3026:	93 ce       	rjmp	.-730    	; 0x2d4e <__vector_29+0x78>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    3028:	90 91 00 01 	lds	r25, 0x0100
    302c:	93 fd       	sbrc	r25, 3
    302e:	8f ce       	rjmp	.-738    	; 0x2d4e <__vector_29+0x78>
    3030:	90 91 00 01 	lds	r25, 0x0100
    3034:	94 fd       	sbrc	r25, 4
    3036:	8b ce       	rjmp	.-746    	; 0x2d4e <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    3038:	48 2f       	mov	r20, r24
    303a:	4f 5f       	subi	r20, 0xFF	; 255
    303c:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    3040:	45 30       	cpi	r20, 0x05	; 5
    3042:	08 f4       	brcc	.+2      	; 0x3046 <__vector_29+0x370>
    3044:	84 ce       	rjmp	.-760    	; 0x2d4e <__vector_29+0x78>
					left_vel_sum += value;
    3046:	80 91 e3 03 	lds	r24, 0x03E3
    304a:	90 91 e4 03 	lds	r25, 0x03E4
    304e:	82 0f       	add	r24, r18
    3050:	93 1f       	adc	r25, r19
    3052:	90 93 e4 03 	sts	0x03E4, r25
    3056:	80 93 e3 03 	sts	0x03E3, r24
					if(firstSampleLeft==8) {
    305a:	48 30       	cpi	r20, 0x08	; 8
    305c:	09 f0       	breq	.+2      	; 0x3060 <__vector_29+0x38a>
    305e:	77 ce       	rjmp	.-786    	; 0x2d4e <__vector_29+0x78>
						firstSampleLeft = 0;
    3060:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	80 93 07 02 	sts	0x0207, r24
    306a:	71 ce       	rjmp	.-798    	; 0x2d4e <__vector_29+0x78>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    306c:	80 91 2b 03 	lds	r24, 0x032B
    3070:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    3074:	80 91 2e 03 	lds	r24, 0x032E
    3078:	80 93 c2 03 	sts	0x03C2, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    307c:	80 91 c1 03 	lds	r24, 0x03C1
    3080:	88 23       	and	r24, r24
    3082:	09 f0       	breq	.+2      	; 0x3086 <__vector_29+0x3b0>
    3084:	4e c0       	rjmp	.+156    	; 0x3122 <__vector_29+0x44c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    308c:	84 e0       	ldi	r24, 0x04	; 4
    308e:	80 93 c0 03 	sts	0x03C0, r24
			break;
    3092:	78 ce       	rjmp	.-784    	; 0x2d84 <__vector_29+0xae>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    3094:	80 91 09 02 	lds	r24, 0x0209
    3098:	88 23       	and	r24, r24
    309a:	09 f4       	brne	.+2      	; 0x309e <__vector_29+0x3c8>
    309c:	58 ce       	rjmp	.-848    	; 0x2d4e <__vector_29+0x78>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    309e:	63 99       	sbic	0x0c, 3	; 12
    30a0:	56 ce       	rjmp	.-852    	; 0x2d4e <__vector_29+0x78>
    30a2:	64 99       	sbic	0x0c, 4	; 12
    30a4:	54 ce       	rjmp	.-856    	; 0x2d4e <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    30a6:	48 2f       	mov	r20, r24
    30a8:	4f 5f       	subi	r20, 0xFF	; 255
    30aa:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    30ae:	45 30       	cpi	r20, 0x05	; 5
    30b0:	08 f4       	brcc	.+2      	; 0x30b4 <__vector_29+0x3de>
    30b2:	4d ce       	rjmp	.-870    	; 0x2d4e <__vector_29+0x78>
					right_vel_sum += value;
    30b4:	80 91 e5 03 	lds	r24, 0x03E5
    30b8:	90 91 e6 03 	lds	r25, 0x03E6
    30bc:	82 0f       	add	r24, r18
    30be:	93 1f       	adc	r25, r19
    30c0:	90 93 e6 03 	sts	0x03E6, r25
    30c4:	80 93 e5 03 	sts	0x03E5, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    30c8:	48 30       	cpi	r20, 0x08	; 8
    30ca:	09 f0       	breq	.+2      	; 0x30ce <__vector_29+0x3f8>
    30cc:	40 ce       	rjmp	.-896    	; 0x2d4e <__vector_29+0x78>
						firstSampleRight = 0;
    30ce:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	80 93 08 02 	sts	0x0208, r24
    30d8:	3a ce       	rjmp	.-908    	; 0x2d4e <__vector_29+0x78>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    30da:	80 91 d7 03 	lds	r24, 0x03D7
    30de:	90 91 d8 03 	lds	r25, 0x03D8
    30e2:	82 0f       	add	r24, r18
    30e4:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    30e6:	96 95       	lsr	r25
    30e8:	87 95       	ror	r24
    30ea:	90 93 d8 03 	sts	0x03D8, r25
    30ee:	80 93 d7 03 	sts	0x03D7, r24
			break;
    30f2:	2d ce       	rjmp	.-934    	; 0x2d4e <__vector_29+0x78>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    30f4:	21 30       	cpi	r18, 0x01	; 1
    30f6:	11 f0       	breq	.+4      	; 0x30fc <__vector_29+0x426>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    30f8:	22 30       	cpi	r18, 0x02	; 2
    30fa:	81 f4       	brne	.+32     	; 0x311c <__vector_29+0x446>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    30fc:	40 91 05 01 	lds	r20, 0x0105
    3100:	40 97       	sbiw	r24, 0x10	; 16
    3102:	95 95       	asr	r25
    3104:	87 95       	ror	r24
    3106:	21 e0       	ldi	r18, 0x01	; 1
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	02 c0       	rjmp	.+4      	; 0x3110 <__vector_29+0x43a>
    310c:	22 0f       	add	r18, r18
    310e:	33 1f       	adc	r19, r19
    3110:	8a 95       	dec	r24
    3112:	e2 f7       	brpl	.-8      	; 0x310c <__vector_29+0x436>
    3114:	20 95       	com	r18
    3116:	24 23       	and	r18, r20
    3118:	20 93 05 01 	sts	0x0105, r18
    311c:	80 91 c0 03 	lds	r24, 0x03C0
    3120:	31 ce       	rjmp	.-926    	; 0x2d84 <__vector_29+0xae>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3122:	81 30       	cpi	r24, 0x01	; 1
    3124:	d1 f1       	breq	.+116    	; 0x319a <__vector_29+0x4c4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3126:	85 e0       	ldi	r24, 0x05	; 5
    3128:	80 93 bf 03 	sts	0x03BF, r24
    312c:	af cf       	rjmp	.-162    	; 0x308c <__vector_29+0x3b6>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    312e:	91 30       	cpi	r25, 0x01	; 1
    3130:	09 f0       	breq	.+2      	; 0x3134 <__vector_29+0x45e>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3132:	85 e0       	ldi	r24, 0x05	; 5
    3134:	80 93 bf 03 	sts	0x03BF, r24
    3138:	f5 ce       	rjmp	.-534    	; 0x2f24 <__vector_29+0x24e>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	b1 f1       	breq	.+108    	; 0x31aa <__vector_29+0x4d4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    313e:	85 e0       	ldi	r24, 0x05	; 5
    3140:	80 93 bf 03 	sts	0x03BF, r24
    3144:	1c ce       	rjmp	.-968    	; 0x2d7e <__vector_29+0xa8>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3146:	81 30       	cpi	r24, 0x01	; 1
    3148:	61 f1       	breq	.+88     	; 0x31a2 <__vector_29+0x4cc>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    314a:	85 e0       	ldi	r24, 0x05	; 5
    314c:	80 93 bf 03 	sts	0x03BF, r24
    3150:	62 cf       	rjmp	.-316    	; 0x3016 <__vector_29+0x340>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    3152:	10 92 49 05 	sts	0x0549, r1
    3156:	c4 ce       	rjmp	.-632    	; 0x2ee0 <__vector_29+0x20a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    3158:	66 95       	lsr	r22
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	02 c0       	rjmp	.+4      	; 0x3164 <__vector_29+0x48e>
    3160:	88 0f       	add	r24, r24
    3162:	99 1f       	adc	r25, r25
    3164:	6a 95       	dec	r22
    3166:	e2 f7       	brpl	.-8      	; 0x3160 <__vector_29+0x48a>
    3168:	82 b9       	out	0x02, r24	; 2
    316a:	80 91 c0 03 	lds	r24, 0x03C0
    316e:	0a ce       	rjmp	.-1004   	; 0x2d84 <__vector_29+0xae>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    3170:	80 91 c5 03 	lds	r24, 0x03C5
    3174:	81 30       	cpi	r24, 0x01	; 1
    3176:	a1 f1       	breq	.+104    	; 0x31e0 <__vector_29+0x50a>
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	04 ce       	rjmp	.-1016   	; 0x2d84 <__vector_29+0xae>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    317c:	80 91 c5 03 	lds	r24, 0x03C5
    3180:	82 30       	cpi	r24, 0x02	; 2
    3182:	09 f0       	breq	.+2      	; 0x3186 <__vector_29+0x4b0>
    3184:	2b ce       	rjmp	.-938    	; 0x2ddc <__vector_29+0x106>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    3186:	30 93 c4 03 	sts	0x03C4, r19
    318a:	20 93 c3 03 	sts	0x03C3, r18
				measBattery = 0;
    318e:	10 92 c5 03 	sts	0x03C5, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    3192:	46 98       	cbi	0x08, 6	; 8
    3194:	4e e0       	ldi	r20, 0x0E	; 14
    3196:	50 e0       	ldi	r21, 0x00	; 0
    3198:	2a ce       	rjmp	.-940    	; 0x2dee <__vector_29+0x118>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    319a:	82 e0       	ldi	r24, 0x02	; 2
    319c:	80 93 bf 03 	sts	0x03BF, r24
    31a0:	75 cf       	rjmp	.-278    	; 0x308c <__vector_29+0x3b6>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    31a2:	84 e0       	ldi	r24, 0x04	; 4
    31a4:	80 93 bf 03 	sts	0x03BF, r24
    31a8:	36 cf       	rjmp	.-404    	; 0x3016 <__vector_29+0x340>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    31aa:	82 e0       	ldi	r24, 0x02	; 2
    31ac:	80 93 bf 03 	sts	0x03BF, r24
    31b0:	e6 cd       	rjmp	.-1076   	; 0x2d7e <__vector_29+0xa8>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    31b2:	11 82       	std	Z+1, r1	; 0x01
    31b4:	10 82       	st	Z, r1
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	46 ce       	rjmp	.-884    	; 0x2e48 <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    31bc:	ac 01       	movw	r20, r24
    31be:	44 5c       	subi	r20, 0xC4	; 196
    31c0:	5f 4f       	sbci	r21, 0xFF	; 255
    31c2:	55 95       	asr	r21
    31c4:	47 95       	ror	r20
    31c6:	48 37       	cpi	r20, 0x78	; 120
    31c8:	51 05       	cpc	r21, r1
    31ca:	7c f4       	brge	.+30     	; 0x31ea <__vector_29+0x514>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    31cc:	29 53       	subi	r18, 0x39	; 57
    31ce:	3c 4f       	sbci	r19, 0xFC	; 252
    31d0:	cc 97       	sbiw	r24, 0x3c	; 60
    31d2:	95 95       	asr	r25
    31d4:	87 95       	ror	r24
    31d6:	cc 96       	adiw	r24, 0x3c	; 60
    31d8:	f9 01       	movw	r30, r18
    31da:	91 83       	std	Z+1, r25	; 0x01
    31dc:	80 83       	st	Z, r24
    31de:	3f ce       	rjmp	.-898    	; 0x2e5e <__vector_29+0x188>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	80 93 c5 03 	sts	0x03C5, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    31e6:	46 9a       	sbi	0x08, 6	; 8
    31e8:	a4 ce       	rjmp	.-696    	; 0x2f32 <__vector_29+0x25c>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    31ea:	ac 01       	movw	r20, r24
    31ec:	44 5d       	subi	r20, 0xD4	; 212
    31ee:	5e 4f       	sbci	r21, 0xFE	; 254
    31f0:	55 95       	asr	r21
    31f2:	47 95       	ror	r20
    31f4:	55 95       	asr	r21
    31f6:	47 95       	ror	r20
    31f8:	44 3b       	cpi	r20, 0xB4	; 180
    31fa:	51 05       	cpc	r21, r1
    31fc:	74 f4       	brge	.+28     	; 0x321a <__vector_29+0x544>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    31fe:	29 53       	subi	r18, 0x39	; 57
    3200:	3c 4f       	sbci	r19, 0xFC	; 252
    3202:	84 5b       	subi	r24, 0xB4	; 180
    3204:	90 40       	sbci	r25, 0x00	; 0
    3206:	95 95       	asr	r25
    3208:	87 95       	ror	r24
    320a:	95 95       	asr	r25
    320c:	87 95       	ror	r24
    320e:	88 58       	subi	r24, 0x88	; 136
    3210:	9f 4f       	sbci	r25, 0xFF	; 255
    3212:	f9 01       	movw	r30, r18
    3214:	91 83       	std	Z+1, r25	; 0x01
    3216:	80 83       	st	Z, r24
    3218:	22 ce       	rjmp	.-956    	; 0x2e5e <__vector_29+0x188>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    321a:	29 53       	subi	r18, 0x39	; 57
    321c:	3c 4f       	sbci	r19, 0xFC	; 252
    321e:	84 5a       	subi	r24, 0xA4	; 164
    3220:	91 40       	sbci	r25, 0x01	; 1
    3222:	95 95       	asr	r25
    3224:	87 95       	ror	r24
    3226:	95 95       	asr	r25
    3228:	87 95       	ror	r24
    322a:	95 95       	asr	r25
    322c:	87 95       	ror	r24
    322e:	8c 54       	subi	r24, 0x4C	; 76
    3230:	9f 4f       	sbci	r25, 0xFF	; 255
    3232:	f9 01       	movw	r30, r18
    3234:	91 83       	std	Z+1, r25	; 0x01
    3236:	80 83       	st	Z, r24
    3238:	12 ce       	rjmp	.-988    	; 0x2e5e <__vector_29+0x188>

0000323a <initMotors>:

#include "motors.h"

void initMotors() {
    323a:	0f 93       	push	r16
    323c:	1f 93       	push	r17
    323e:	cf 93       	push	r28
    3240:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    3242:	e0 e9       	ldi	r30, 0x90	; 144
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	10 82       	st	Z, r1
	TCCR3B = 0;
    3248:	41 e9       	ldi	r20, 0x91	; 145
    324a:	50 e0       	ldi	r21, 0x00	; 0
    324c:	da 01       	movw	r26, r20
    324e:	1c 92       	st	X, r1
	TIMSK3 = 0;
    3250:	21 e7       	ldi	r18, 0x71	; 113
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	e9 01       	movw	r28, r18
    3256:	18 82       	st	Y, r1
	TCCR4A = 0;
    3258:	a0 ea       	ldi	r26, 0xA0	; 160
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	1c 92       	st	X, r1
	TCCR4B = 0;
    325e:	81 ea       	ldi	r24, 0xA1	; 161
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	ec 01       	movw	r28, r24
    3264:	18 82       	st	Y, r1
	TIMSK4 = 0;
    3266:	02 e7       	ldi	r16, 0x72	; 114
    3268:	10 e0       	ldi	r17, 0x00	; 0
    326a:	e8 01       	movw	r28, r16
    326c:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    326e:	60 81       	ld	r22, Z
    3270:	63 68       	ori	r22, 0x83	; 131
    3272:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    3274:	60 81       	ld	r22, Z
    3276:	63 60       	ori	r22, 0x03	; 3
    3278:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    327a:	ea 01       	movw	r28, r20
    327c:	68 81       	ld	r22, Y
    327e:	6b 60       	ori	r22, 0x0B	; 11
    3280:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    3282:	40 91 eb 03 	lds	r20, 0x03EB
    3286:	50 91 ec 03 	lds	r21, 0x03EC
    328a:	50 93 99 00 	sts	0x0099, r21
    328e:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    3292:	10 92 9b 00 	sts	0x009B, r1
    3296:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    329a:	e9 01       	movw	r28, r18
    329c:	48 81       	ld	r20, Y
    329e:	41 60       	ori	r20, 0x01	; 1
    32a0:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    32a2:	20 81       	ld	r18, Z
    32a4:	2f 75       	andi	r18, 0x5F	; 95
    32a6:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    32a8:	2e b1       	in	r18, 0x0e	; 14
    32aa:	27 7e       	andi	r18, 0xE7	; 231
    32ac:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    32ae:	2c 91       	ld	r18, X
    32b0:	23 68       	ori	r18, 0x83	; 131
    32b2:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    32b4:	fc 01       	movw	r30, r24
    32b6:	20 81       	ld	r18, Z
    32b8:	2b 60       	ori	r18, 0x0B	; 11
    32ba:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    32bc:	80 91 ed 03 	lds	r24, 0x03ED
    32c0:	90 91 ee 03 	lds	r25, 0x03EE
    32c4:	90 93 a9 00 	sts	0x00A9, r25
    32c8:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    32cc:	10 92 ab 00 	sts	0x00AB, r1
    32d0:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    32d4:	e8 01       	movw	r28, r16
    32d6:	88 81       	ld	r24, Y
    32d8:	81 60       	ori	r24, 0x01	; 1
    32da:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    32dc:	8c 91       	ld	r24, X
    32de:	8f 75       	andi	r24, 0x5F	; 95
    32e0:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    32e2:	e2 e0       	ldi	r30, 0x02	; 2
    32e4:	f1 e0       	ldi	r31, 0x01	; 1
    32e6:	80 81       	ld	r24, Z
    32e8:	87 7e       	andi	r24, 0xE7	; 231
    32ea:	80 83       	st	Z, r24


}
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	1f 91       	pop	r17
    32f2:	0f 91       	pop	r16
    32f4:	08 95       	ret

000032f6 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    32f6:	80 91 07 02 	lds	r24, 0x0207
    32fa:	88 23       	and	r24, r24
    32fc:	91 f0       	breq	.+36     	; 0x3322 <handleMotorsWithNoController+0x2c>
		last_left_vel = left_vel_sum>>2;
    32fe:	80 91 e3 03 	lds	r24, 0x03E3
    3302:	90 91 e4 03 	lds	r25, 0x03E4
    3306:	96 95       	lsr	r25
    3308:	87 95       	ror	r24
    330a:	96 95       	lsr	r25
    330c:	87 95       	ror	r24
    330e:	90 93 e8 03 	sts	0x03E8, r25
    3312:	80 93 e7 03 	sts	0x03E7, r24
		compute_left_vel = 0;
    3316:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    331a:	10 92 e4 03 	sts	0x03E4, r1
    331e:	10 92 e3 03 	sts	0x03E3, r1
	}

	if(compute_right_vel) {
    3322:	80 91 08 02 	lds	r24, 0x0208
    3326:	88 23       	and	r24, r24
    3328:	91 f0       	breq	.+36     	; 0x334e <handleMotorsWithNoController+0x58>
		last_right_vel = right_vel_sum>>2;
    332a:	80 91 e5 03 	lds	r24, 0x03E5
    332e:	90 91 e6 03 	lds	r25, 0x03E6
    3332:	96 95       	lsr	r25
    3334:	87 95       	ror	r24
    3336:	96 95       	lsr	r25
    3338:	87 95       	ror	r24
    333a:	90 93 ea 03 	sts	0x03EA, r25
    333e:	80 93 e9 03 	sts	0x03E9, r24
		compute_right_vel = 0;
    3342:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    3346:	10 92 e6 03 	sts	0x03E6, r1
    334a:	10 92 e5 03 	sts	0x03E5, r1
	}


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    334e:	80 91 ef 03 	lds	r24, 0x03EF
    3352:	90 91 f0 03 	lds	r25, 0x03F0
    3356:	90 93 fc 03 	sts	0x03FC, r25
    335a:	80 93 fb 03 	sts	0x03FB, r24
	pwm_left_working = pwm_left_desired;
    335e:	20 91 f1 03 	lds	r18, 0x03F1
    3362:	30 91 f2 03 	lds	r19, 0x03F2
    3366:	30 93 fe 03 	sts	0x03FE, r19
    336a:	20 93 fd 03 	sts	0x03FD, r18
	if(obstacleAvoidanceEnabled) {
    336e:	40 91 47 05 	lds	r20, 0x0547
    3372:	44 23       	and	r20, r20
    3374:	71 f5       	brne	.+92     	; 0x33d2 <handleMotorsWithNoController+0xdc>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    3376:	30 93 e2 03 	sts	0x03E2, r19
    337a:	20 93 e1 03 	sts	0x03E1, r18
	pwm_right_desired_to_control = pwm_right_working;
    337e:	90 93 e0 03 	sts	0x03E0, r25
    3382:	80 93 df 03 	sts	0x03DF, r24

	pwm_left = pwm_left_working;
    3386:	30 93 ee 03 	sts	0x03EE, r19
    338a:	20 93 ed 03 	sts	0x03ED, r18
	pwm_right = pwm_right_working;
    338e:	90 93 ec 03 	sts	0x03EC, r25
    3392:	80 93 eb 03 	sts	0x03EB, r24

	if(pwm_right > 0) {
    3396:	18 16       	cp	r1, r24
    3398:	19 06       	cpc	r1, r25
    339a:	54 f5       	brge	.+84     	; 0x33f0 <handleMotorsWithNoController+0xfa>
		OCR3A = (unsigned int)pwm_right;
    339c:	90 93 99 00 	sts	0x0099, r25
    33a0:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    33a4:	80 91 ed 03 	lds	r24, 0x03ED
    33a8:	90 91 ee 03 	lds	r25, 0x03EE
    33ac:	18 16       	cp	r1, r24
    33ae:	19 06       	cpc	r1, r25
    33b0:	2c f4       	brge	.+10     	; 0x33bc <handleMotorsWithNoController+0xc6>
		OCR4A = (unsigned int)pwm_left;
    33b2:	90 93 a9 00 	sts	0x00A9, r25
    33b6:	80 93 a8 00 	sts	0x00A8, r24
    33ba:	08 95       	ret
	} else if(pwm_left < 0) {
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	59 f5       	brne	.+86     	; 0x3416 <handleMotorsWithNoController+0x120>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    33c0:	10 92 a9 00 	sts	0x00A9, r1
    33c4:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    33c8:	10 92 ab 00 	sts	0x00AB, r1
    33cc:	10 92 aa 00 	sts	0x00AA, r1
    33d0:	08 95       	ret


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	pwm_left_working = pwm_left_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    33d2:	8d ef       	ldi	r24, 0xFD	; 253
    33d4:	93 e0       	ldi	r25, 0x03	; 3
    33d6:	6b ef       	ldi	r22, 0xFB	; 251
    33d8:	73 e0       	ldi	r23, 0x03	; 3
    33da:	0e 94 c3 1c 	call	0x3986	; 0x3986 <obstacleAvoidance>
    33de:	20 91 fd 03 	lds	r18, 0x03FD
    33e2:	30 91 fe 03 	lds	r19, 0x03FE
    33e6:	80 91 fb 03 	lds	r24, 0x03FB
    33ea:	90 91 fc 03 	lds	r25, 0x03FC
    33ee:	c3 cf       	rjmp	.-122    	; 0x3376 <handleMotorsWithNoController+0x80>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    33f0:	00 97       	sbiw	r24, 0x00	; 0
    33f2:	49 f4       	brne	.+18     	; 0x3406 <handleMotorsWithNoController+0x110>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    33f4:	10 92 99 00 	sts	0x0099, r1
    33f8:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    33fc:	10 92 9b 00 	sts	0x009B, r1
    3400:	10 92 9a 00 	sts	0x009A, r1
    3404:	cf cf       	rjmp	.-98     	; 0x33a4 <handleMotorsWithNoController+0xae>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    3406:	90 95       	com	r25
    3408:	81 95       	neg	r24
    340a:	9f 4f       	sbci	r25, 0xFF	; 255
    340c:	90 93 9b 00 	sts	0x009B, r25
    3410:	80 93 9a 00 	sts	0x009A, r24
    3414:	c7 cf       	rjmp	.-114    	; 0x33a4 <handleMotorsWithNoController+0xae>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    3416:	90 95       	com	r25
    3418:	81 95       	neg	r24
    341a:	9f 4f       	sbci	r25, 0xFF	; 255
    341c:	90 93 ab 00 	sts	0x00AB, r25
    3420:	80 93 aa 00 	sts	0x00AA, r24
    3424:	08 95       	ret

00003426 <handleMotorsWithSpeedController>:

}

void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
    3426:	20 91 f1 03 	lds	r18, 0x03F1
    342a:	30 91 f2 03 	lds	r19, 0x03F2
    342e:	30 93 fe 03 	sts	0x03FE, r19
    3432:	20 93 fd 03 	sts	0x03FD, r18
	pwm_right_working = pwm_right_desired;
    3436:	80 91 ef 03 	lds	r24, 0x03EF
    343a:	90 91 f0 03 	lds	r25, 0x03F0
    343e:	90 93 fc 03 	sts	0x03FC, r25
    3442:	80 93 fb 03 	sts	0x03FB, r24
	if(obstacleAvoidanceEnabled) {
    3446:	40 91 47 05 	lds	r20, 0x0547
    344a:	44 23       	and	r20, r20
    344c:	09 f0       	breq	.+2      	; 0x3450 <handleMotorsWithSpeedController+0x2a>
    344e:	70 c0       	rjmp	.+224    	; 0x3530 <handleMotorsWithSpeedController+0x10a>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    3450:	30 93 e2 03 	sts	0x03E2, r19
    3454:	20 93 e1 03 	sts	0x03E1, r18
	pwm_right_desired_to_control = pwm_right_working;
    3458:	90 93 e0 03 	sts	0x03E0, r25
    345c:	80 93 df 03 	sts	0x03DF, r24

	if(compute_left_vel) {
    3460:	80 91 07 02 	lds	r24, 0x0207
    3464:	88 23       	and	r24, r24
    3466:	59 f1       	breq	.+86     	; 0x34be <handleMotorsWithSpeedController+0x98>

		last_left_vel = left_vel_sum>>2;
    3468:	80 91 e3 03 	lds	r24, 0x03E3
    346c:	90 91 e4 03 	lds	r25, 0x03E4
    3470:	96 95       	lsr	r25
    3472:	87 95       	ror	r24
    3474:	96 95       	lsr	r25
    3476:	87 95       	ror	r24
    3478:	90 93 e8 03 	sts	0x03E8, r25
    347c:	80 93 e7 03 	sts	0x03E7, r24
		compute_left_vel = 0;
    3480:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    3484:	10 92 e4 03 	sts	0x03E4, r1
    3488:	10 92 e3 03 	sts	0x03E3, r1

		if(robotPosition == HORIZONTAL_POS) {
    348c:	80 91 17 02 	lds	r24, 0x0217
    3490:	81 30       	cpi	r24, 0x01	; 1
    3492:	09 f4       	brne	.+2      	; 0x3496 <handleMotorsWithSpeedController+0x70>
    3494:	61 c0       	rjmp	.+194    	; 0x3558 <handleMotorsWithSpeedController+0x132>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    3496:	8d ef       	ldi	r24, 0xFD	; 253
    3498:	93 e0       	ldi	r25, 0x03	; 3
    349a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    349e:	80 91 fd 03 	lds	r24, 0x03FD
    34a2:	90 91 fe 03 	lds	r25, 0x03FE
    34a6:	90 93 ee 03 	sts	0x03EE, r25
    34aa:	80 93 ed 03 	sts	0x03ED, r24

		if(pwm_left > 0) {
    34ae:	18 16       	cp	r1, r24
    34b0:	19 06       	cpc	r1, r25
    34b2:	0c f0       	brlt	.+2      	; 0x34b6 <handleMotorsWithSpeedController+0x90>
    34b4:	56 c0       	rjmp	.+172    	; 0x3562 <handleMotorsWithSpeedController+0x13c>
			OCR4A = (unsigned int)pwm_left;
    34b6:	90 93 a9 00 	sts	0x00A9, r25
    34ba:	80 93 a8 00 	sts	0x00A8, r24
			OCR4B = 0;
		}

	}

	if(compute_right_vel) {
    34be:	80 91 08 02 	lds	r24, 0x0208
    34c2:	88 23       	and	r24, r24
    34c4:	a1 f1       	breq	.+104    	; 0x352e <handleMotorsWithSpeedController+0x108>

		last_right_vel = right_vel_sum>>2;
    34c6:	80 91 e5 03 	lds	r24, 0x03E5
    34ca:	90 91 e6 03 	lds	r25, 0x03E6
    34ce:	96 95       	lsr	r25
    34d0:	87 95       	ror	r24
    34d2:	96 95       	lsr	r25
    34d4:	87 95       	ror	r24
    34d6:	90 93 ea 03 	sts	0x03EA, r25
    34da:	80 93 e9 03 	sts	0x03E9, r24
		compute_right_vel = 0;
    34de:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    34e2:	10 92 e6 03 	sts	0x03E6, r1
    34e6:	10 92 e5 03 	sts	0x03E5, r1

		if(robotPosition == HORIZONTAL_POS) {
    34ea:	80 91 17 02 	lds	r24, 0x0217
    34ee:	81 30       	cpi	r24, 0x01	; 1
    34f0:	71 f1       	breq	.+92     	; 0x354e <handleMotorsWithSpeedController+0x128>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    34f2:	8b ef       	ldi	r24, 0xFB	; 251
    34f4:	93 e0       	ldi	r25, 0x03	; 3
    34f6:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    34fa:	80 91 fb 03 	lds	r24, 0x03FB
    34fe:	90 91 fc 03 	lds	r25, 0x03FC
    3502:	90 93 ec 03 	sts	0x03EC, r25
    3506:	80 93 eb 03 	sts	0x03EB, r24

		if(pwm_right > 0) {
    350a:	18 16       	cp	r1, r24
    350c:	19 06       	cpc	r1, r25
    350e:	2c f4       	brge	.+10     	; 0x351a <handleMotorsWithSpeedController+0xf4>
			OCR3A = (unsigned int)pwm_right;
    3510:	90 93 99 00 	sts	0x0099, r25
    3514:	80 93 98 00 	sts	0x0098, r24
    3518:	08 95       	ret
		} else if(pwm_right < 0) {
    351a:	00 97       	sbiw	r24, 0x00	; 0
    351c:	69 f5       	brne	.+90     	; 0x3578 <handleMotorsWithSpeedController+0x152>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    351e:	10 92 99 00 	sts	0x0099, r1
    3522:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    3526:	10 92 9b 00 	sts	0x009B, r1
    352a:	10 92 9a 00 	sts	0x009A, r1
    352e:	08 95       	ret
void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
	pwm_right_working = pwm_right_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    3530:	8d ef       	ldi	r24, 0xFD	; 253
    3532:	93 e0       	ldi	r25, 0x03	; 3
    3534:	6b ef       	ldi	r22, 0xFB	; 251
    3536:	73 e0       	ldi	r23, 0x03	; 3
    3538:	0e 94 c3 1c 	call	0x3986	; 0x3986 <obstacleAvoidance>
    353c:	20 91 fd 03 	lds	r18, 0x03FD
    3540:	30 91 fe 03 	lds	r19, 0x03FE
    3544:	80 91 fb 03 	lds	r24, 0x03FB
    3548:	90 91 fc 03 	lds	r25, 0x03FC
    354c:	81 cf       	rjmp	.-254    	; 0x3450 <handleMotorsWithSpeedController+0x2a>
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    354e:	8b ef       	ldi	r24, 0xFB	; 251
    3550:	93 e0       	ldi	r25, 0x03	; 3
    3552:	0e 94 a0 11 	call	0x2340	; 0x2340 <start_horizontal_speed_control_right>
    3556:	d1 cf       	rjmp	.-94     	; 0x34fa <handleMotorsWithSpeedController+0xd4>
		compute_left_vel = 0;
		left_vel_sum = 0;

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    3558:	8d ef       	ldi	r24, 0xFD	; 253
    355a:	93 e0       	ldi	r25, 0x03	; 3
    355c:	0e 94 85 12 	call	0x250a	; 0x250a <start_horizontal_speed_control_left>
    3560:	9e cf       	rjmp	.-196    	; 0x349e <handleMotorsWithSpeedController+0x78>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    3562:	00 97       	sbiw	r24, 0x00	; 0
    3564:	89 f4       	brne	.+34     	; 0x3588 <handleMotorsWithSpeedController+0x162>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    3566:	10 92 a9 00 	sts	0x00A9, r1
    356a:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    356e:	10 92 ab 00 	sts	0x00AB, r1
    3572:	10 92 aa 00 	sts	0x00AA, r1
    3576:	a3 cf       	rjmp	.-186    	; 0x34be <handleMotorsWithSpeedController+0x98>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    3578:	90 95       	com	r25
    357a:	81 95       	neg	r24
    357c:	9f 4f       	sbci	r25, 0xFF	; 255
    357e:	90 93 9b 00 	sts	0x009B, r25
    3582:	80 93 9a 00 	sts	0x009A, r24
    3586:	08 95       	ret
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    3588:	90 95       	com	r25
    358a:	81 95       	neg	r24
    358c:	9f 4f       	sbci	r25, 0xFF	; 255
    358e:	90 93 ab 00 	sts	0x00AB, r25
    3592:	80 93 aa 00 	sts	0x00AA, r24
    3596:	93 cf       	rjmp	.-218    	; 0x34be <handleMotorsWithSpeedController+0x98>

00003598 <setLeftSpeed>:

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    3598:	28 2f       	mov	r18, r24
    359a:	33 27       	eor	r19, r19
    359c:	27 fd       	sbrc	r18, 7
    359e:	30 95       	com	r19
    35a0:	37 fd       	sbrc	r19, 7
    35a2:	30 c0       	rjmp	.+96     	; 0x3604 <setLeftSpeed+0x6c>
    35a4:	30 93 00 04 	sts	0x0400, r19
    35a8:	20 93 ff 03 	sts	0x03FF, r18

    if(vel >= 0) {
    35ac:	87 fd       	sbrc	r24, 7
    35ae:	1e c0       	rjmp	.+60     	; 0x35ec <setLeftSpeed+0x54>
        pwm_left_desired = speedl<<2;
    35b0:	22 0f       	add	r18, r18
    35b2:	33 1f       	adc	r19, r19
    35b4:	22 0f       	add	r18, r18
    35b6:	33 1f       	adc	r19, r19
    35b8:	30 93 f2 03 	sts	0x03F2, r19
    35bc:	20 93 f1 03 	sts	0x03F1, r18
    } else {
        pwm_left_desired = -(speedl<<2);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    35c0:	82 e0       	ldi	r24, 0x02	; 2
    35c2:	21 30       	cpi	r18, 0x01	; 1
    35c4:	38 07       	cpc	r19, r24
    35c6:	3c f0       	brlt	.+14     	; 0x35d6 <setLeftSpeed+0x3e>
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	92 e0       	ldi	r25, 0x02	; 2
    35cc:	90 93 f2 03 	sts	0x03F2, r25
    35d0:	80 93 f1 03 	sts	0x03F1, r24
    35d4:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    35d6:	8e ef       	ldi	r24, 0xFE	; 254
    35d8:	20 30       	cpi	r18, 0x00	; 0
    35da:	38 07       	cpc	r19, r24
    35dc:	34 f4       	brge	.+12     	; 0x35ea <setLeftSpeed+0x52>
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	9e ef       	ldi	r25, 0xFE	; 254
    35e2:	90 93 f2 03 	sts	0x03F2, r25
    35e6:	80 93 f1 03 	sts	0x03F1, r24
    35ea:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl<<2;
    } else {
        pwm_left_desired = -(speedl<<2);
    35ec:	22 0f       	add	r18, r18
    35ee:	33 1f       	adc	r19, r19
    35f0:	22 0f       	add	r18, r18
    35f2:	33 1f       	adc	r19, r19
    35f4:	30 95       	com	r19
    35f6:	21 95       	neg	r18
    35f8:	3f 4f       	sbci	r19, 0xFF	; 255
    35fa:	30 93 f2 03 	sts	0x03F2, r19
    35fe:	20 93 f1 03 	sts	0x03F1, r18
    3602:	de cf       	rjmp	.-68     	; 0x35c0 <setLeftSpeed+0x28>

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    3604:	30 95       	com	r19
    3606:	21 95       	neg	r18
    3608:	3f 4f       	sbci	r19, 0xFF	; 255
    360a:	cc cf       	rjmp	.-104    	; 0x35a4 <setLeftSpeed+0xc>

0000360c <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    360c:	28 2f       	mov	r18, r24
    360e:	33 27       	eor	r19, r19
    3610:	27 fd       	sbrc	r18, 7
    3612:	30 95       	com	r19
    3614:	37 fd       	sbrc	r19, 7
    3616:	30 c0       	rjmp	.+96     	; 0x3678 <setRightSpeed+0x6c>
    3618:	30 93 02 04 	sts	0x0402, r19
    361c:	20 93 01 04 	sts	0x0401, r18

    if(vel >= 0) {
    3620:	87 fd       	sbrc	r24, 7
    3622:	1e c0       	rjmp	.+60     	; 0x3660 <setRightSpeed+0x54>
        pwm_right_desired = speedr<<2;
    3624:	22 0f       	add	r18, r18
    3626:	33 1f       	adc	r19, r19
    3628:	22 0f       	add	r18, r18
    362a:	33 1f       	adc	r19, r19
    362c:	30 93 f0 03 	sts	0x03F0, r19
    3630:	20 93 ef 03 	sts	0x03EF, r18
    } else {
        pwm_right_desired = -(speedr<<2);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    3634:	82 e0       	ldi	r24, 0x02	; 2
    3636:	21 30       	cpi	r18, 0x01	; 1
    3638:	38 07       	cpc	r19, r24
    363a:	3c f0       	brlt	.+14     	; 0x364a <setRightSpeed+0x3e>
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	92 e0       	ldi	r25, 0x02	; 2
    3640:	90 93 f0 03 	sts	0x03F0, r25
    3644:	80 93 ef 03 	sts	0x03EF, r24
    3648:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    364a:	8e ef       	ldi	r24, 0xFE	; 254
    364c:	20 30       	cpi	r18, 0x00	; 0
    364e:	38 07       	cpc	r19, r24
    3650:	34 f4       	brge	.+12     	; 0x365e <setRightSpeed+0x52>
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	9e ef       	ldi	r25, 0xFE	; 254
    3656:	90 93 f0 03 	sts	0x03F0, r25
    365a:	80 93 ef 03 	sts	0x03EF, r24
    365e:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr<<2;
    } else {
        pwm_right_desired = -(speedr<<2);
    3660:	22 0f       	add	r18, r18
    3662:	33 1f       	adc	r19, r19
    3664:	22 0f       	add	r18, r18
    3666:	33 1f       	adc	r19, r19
    3668:	30 95       	com	r19
    366a:	21 95       	neg	r18
    366c:	3f 4f       	sbci	r19, 0xFF	; 255
    366e:	30 93 f0 03 	sts	0x03F0, r19
    3672:	20 93 ef 03 	sts	0x03EF, r18
    3676:	de cf       	rjmp	.-68     	; 0x3634 <setRightSpeed+0x28>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    3678:	30 95       	com	r19
    367a:	21 95       	neg	r18
    367c:	3f 4f       	sbci	r19, 0xFF	; 255
    367e:	cc cf       	rjmp	.-104    	; 0x3618 <setRightSpeed+0xc>

00003680 <__vector_45>:
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);

}

// Motor left
ISR(TIMER4_OVF_vect) {
    3680:	1f 92       	push	r1
    3682:	0f 92       	push	r0
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	0f 92       	push	r0
    3688:	11 24       	eor	r1, r1
    368a:	8f 93       	push	r24
    368c:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    368e:	80 91 49 05 	lds	r24, 0x0549
    3692:	88 23       	and	r24, r24
    3694:	61 f0       	breq	.+24     	; 0x36ae <__vector_45+0x2e>
		pwm_left = 0;
    3696:	10 92 ee 03 	sts	0x03EE, r1
    369a:	10 92 ed 03 	sts	0x03ED, r1
		OCR4A = 0;
    369e:	10 92 a9 00 	sts	0x00A9, r1
    36a2:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    36a6:	10 92 ab 00 	sts	0x00AB, r1
    36aa:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    36ae:	10 92 d8 03 	sts	0x03D8, r1
    36b2:	10 92 d7 03 	sts	0x03D7, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    36b6:	80 91 ed 03 	lds	r24, 0x03ED
    36ba:	90 91 ee 03 	lds	r25, 0x03EE
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	41 f5       	brne	.+80     	; 0x3712 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    36c2:	80 91 e1 03 	lds	r24, 0x03E1
    36c6:	90 91 e2 03 	lds	r25, 0x03E2
    36ca:	97 fd       	sbrc	r25, 7
    36cc:	69 c0       	rjmp	.+210    	; 0x37a0 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 14;
    36d4:	8e e0       	ldi	r24, 0x0E	; 14
    36d6:	80 93 2b 03 	sts	0x032B, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    36e0:	80 91 a0 00 	lds	r24, 0x00A0
    36e4:	8f 75       	andi	r24, 0x5F	; 95
    36e6:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    36ea:	80 91 02 01 	lds	r24, 0x0102
    36ee:	87 7e       	andi	r24, 0xE7	; 231
    36f0:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    36f4:	80 91 72 00 	lds	r24, 0x0072
    36f8:	89 7f       	andi	r24, 0xF9	; 249
    36fa:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    36fe:	89 b3       	in	r24, 0x19	; 25
    3700:	86 60       	ori	r24, 0x06	; 6
    3702:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    3704:	9f 91       	pop	r25
    3706:	8f 91       	pop	r24
    3708:	0f 90       	pop	r0
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	0f 90       	pop	r0
    370e:	1f 90       	pop	r1
    3710:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    3712:	18 16       	cp	r1, r24
    3714:	19 06       	cpc	r1, r25
    3716:	2c f5       	brge	.+74     	; 0x3762 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    3718:	10 92 2e 03 	sts	0x032E, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    371c:	8f e0       	ldi	r24, 0x0F	; 15
    371e:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    3722:	80 91 a0 00 	lds	r24, 0x00A0
    3726:	8f 7d       	andi	r24, 0xDF	; 223
    3728:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    372c:	80 91 72 00 	lds	r24, 0x0072
    3730:	8b 7f       	andi	r24, 0xFB	; 251
    3732:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    3736:	80 91 02 01 	lds	r24, 0x0102
    373a:	8f 7e       	andi	r24, 0xEF	; 239
    373c:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    3740:	80 91 a0 00 	lds	r24, 0x00A0
    3744:	80 68       	ori	r24, 0x80	; 128
    3746:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    374a:	80 91 72 00 	lds	r24, 0x0072
    374e:	82 60       	ori	r24, 0x02	; 2
    3750:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    3754:	9f 91       	pop	r25
    3756:	8f 91       	pop	r24
    3758:	0f 90       	pop	r0
    375a:	0f be       	out	0x3f, r0	; 63
    375c:	0f 90       	pop	r0
    375e:	1f 90       	pop	r1
    3760:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    3762:	10 92 2e 03 	sts	0x032E, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    3766:	8e e0       	ldi	r24, 0x0E	; 14
    3768:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    376c:	80 91 a0 00 	lds	r24, 0x00A0
    3770:	8f 77       	andi	r24, 0x7F	; 127
    3772:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    3776:	80 91 72 00 	lds	r24, 0x0072
    377a:	8d 7f       	andi	r24, 0xFD	; 253
    377c:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    3780:	80 91 02 01 	lds	r24, 0x0102
    3784:	87 7f       	andi	r24, 0xF7	; 247
    3786:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    378a:	80 91 a0 00 	lds	r24, 0x00A0
    378e:	80 62       	ori	r24, 0x20	; 32
    3790:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    3794:	80 91 72 00 	lds	r24, 0x0072
    3798:	84 60       	ori	r24, 0x04	; 4
    379a:	80 93 72 00 	sts	0x0072, r24
    379e:	b2 cf       	rjmp	.-156    	; 0x3704 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 15;
    37a6:	8f e0       	ldi	r24, 0x0F	; 15
    37a8:	80 93 2b 03 	sts	0x032B, r24
    37ac:	96 cf       	rjmp	.-212    	; 0x36da <__vector_45+0x5a>

000037ae <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    37ae:	1f 92       	push	r1
    37b0:	0f 92       	push	r0
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	0f 92       	push	r0
    37b6:	11 24       	eor	r1, r1
    37b8:	8f 93       	push	r24
    37ba:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	80 93 2e 03 	sts	0x032E, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    37c2:	9e e0       	ldi	r25, 0x0E	; 14
    37c4:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    37c8:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    37cc:	9f 91       	pop	r25
    37ce:	8f 91       	pop	r24
    37d0:	0f 90       	pop	r0
    37d2:	0f be       	out	0x3f, r0	; 63
    37d4:	0f 90       	pop	r0
    37d6:	1f 90       	pop	r1
    37d8:	18 95       	reti

000037da <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    37da:	1f 92       	push	r1
    37dc:	0f 92       	push	r0
    37de:	0f b6       	in	r0, 0x3f	; 63
    37e0:	0f 92       	push	r0
    37e2:	11 24       	eor	r1, r1
    37e4:	8f 93       	push	r24
    37e6:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	80 93 2e 03 	sts	0x032E, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    37ee:	9f e0       	ldi	r25, 0x0F	; 15
    37f0:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    37f4:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    37f8:	9f 91       	pop	r25
    37fa:	8f 91       	pop	r24
    37fc:	0f 90       	pop	r0
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	0f 90       	pop	r0
    3802:	1f 90       	pop	r1
    3804:	18 95       	reti

00003806 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    3806:	1f 92       	push	r1
    3808:	0f 92       	push	r0
    380a:	0f b6       	in	r0, 0x3f	; 63
    380c:	0f 92       	push	r0
    380e:	11 24       	eor	r1, r1
    3810:	8f 93       	push	r24
    3812:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    3814:	80 91 49 05 	lds	r24, 0x0549
    3818:	88 23       	and	r24, r24
    381a:	61 f0       	breq	.+24     	; 0x3834 <__vector_35+0x2e>
		pwm_right = 0;
    381c:	10 92 ec 03 	sts	0x03EC, r1
    3820:	10 92 eb 03 	sts	0x03EB, r1
		OCR3A = 0;
    3824:	10 92 99 00 	sts	0x0099, r1
    3828:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    382c:	10 92 9b 00 	sts	0x009B, r1
    3830:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    3834:	10 92 da 03 	sts	0x03DA, r1
    3838:	10 92 d9 03 	sts	0x03D9, r1


	if(pwm_right == 0) {
    383c:	80 91 eb 03 	lds	r24, 0x03EB
    3840:	90 91 ec 03 	lds	r25, 0x03EC
    3844:	00 97       	sbiw	r24, 0x00	; 0
    3846:	31 f5       	brne	.+76     	; 0x3894 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    3848:	80 91 df 03 	lds	r24, 0x03DF
    384c:	90 91 e0 03 	lds	r25, 0x03E0
    3850:	97 fd       	sbrc	r25, 7
    3852:	5f c0       	rjmp	.+190    	; 0x3912 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	80 93 2d 03 	sts	0x032D, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    385a:	8c e0       	ldi	r24, 0x0C	; 12
    385c:	80 93 2c 03 	sts	0x032C, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3866:	80 91 90 00 	lds	r24, 0x0090
    386a:	8f 75       	andi	r24, 0x5F	; 95
    386c:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3870:	8e b1       	in	r24, 0x0e	; 14
    3872:	87 7e       	andi	r24, 0xE7	; 231
    3874:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    3876:	80 91 71 00 	lds	r24, 0x0071
    387a:	89 7f       	andi	r24, 0xF9	; 249
    387c:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    3880:	88 b3       	in	r24, 0x18	; 24
    3882:	86 60       	ori	r24, 0x06	; 6
    3884:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    3886:	9f 91       	pop	r25
    3888:	8f 91       	pop	r24
    388a:	0f 90       	pop	r0
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	0f 90       	pop	r0
    3890:	1f 90       	pop	r1
    3892:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    3894:	18 16       	cp	r1, r24
    3896:	19 06       	cpc	r1, r25
    3898:	0c f5       	brge	.+66     	; 0x38dc <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    389a:	10 92 2d 03 	sts	0x032D, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    389e:	8d e0       	ldi	r24, 0x0D	; 13
    38a0:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    38a4:	80 91 90 00 	lds	r24, 0x0090
    38a8:	8f 7d       	andi	r24, 0xDF	; 223
    38aa:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    38ae:	80 91 71 00 	lds	r24, 0x0071
    38b2:	8b 7f       	andi	r24, 0xFB	; 251
    38b4:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    38b8:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    38ba:	80 91 90 00 	lds	r24, 0x0090
    38be:	80 68       	ori	r24, 0x80	; 128
    38c0:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    38c4:	80 91 71 00 	lds	r24, 0x0071
    38c8:	82 60       	ori	r24, 0x02	; 2
    38ca:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    38ce:	9f 91       	pop	r25
    38d0:	8f 91       	pop	r24
    38d2:	0f 90       	pop	r0
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	0f 90       	pop	r0
    38d8:	1f 90       	pop	r1
    38da:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    38dc:	10 92 2d 03 	sts	0x032D, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    38e0:	8c e0       	ldi	r24, 0x0C	; 12
    38e2:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    38e6:	80 91 90 00 	lds	r24, 0x0090
    38ea:	8f 77       	andi	r24, 0x7F	; 127
    38ec:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    38f0:	80 91 71 00 	lds	r24, 0x0071
    38f4:	8d 7f       	andi	r24, 0xFD	; 253
    38f6:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    38fa:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    38fc:	80 91 90 00 	lds	r24, 0x0090
    3900:	80 62       	ori	r24, 0x20	; 32
    3902:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    3906:	80 91 71 00 	lds	r24, 0x0071
    390a:	84 60       	ori	r24, 0x04	; 4
    390c:	80 93 71 00 	sts	0x0071, r24
    3910:	ba cf       	rjmp	.-140    	; 0x3886 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	80 93 2d 03 	sts	0x032D, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    3918:	8d e0       	ldi	r24, 0x0D	; 13
    391a:	80 93 2c 03 	sts	0x032C, r24
    391e:	a0 cf       	rjmp	.-192    	; 0x3860 <__vector_35+0x5a>

00003920 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    3920:	1f 92       	push	r1
    3922:	0f 92       	push	r0
    3924:	0f b6       	in	r0, 0x3f	; 63
    3926:	0f 92       	push	r0
    3928:	11 24       	eor	r1, r1
    392a:	8f 93       	push	r24
    392c:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	80 93 2d 03 	sts	0x032D, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    3934:	9c e0       	ldi	r25, 0x0C	; 12
    3936:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    393a:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    393e:	9f 91       	pop	r25
    3940:	8f 91       	pop	r24
    3942:	0f 90       	pop	r0
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	0f 90       	pop	r0
    3948:	1f 90       	pop	r1
    394a:	18 95       	reti

0000394c <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    394c:	1f 92       	push	r1
    394e:	0f 92       	push	r0
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	0f 92       	push	r0
    3954:	11 24       	eor	r1, r1
    3956:	8f 93       	push	r24
    3958:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	80 93 2d 03 	sts	0x032D, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    3960:	9d e0       	ldi	r25, 0x0D	; 13
    3962:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    3966:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    396a:	9f 91       	pop	r25
    396c:	8f 91       	pop	r24
    396e:	0f 90       	pop	r0
    3970:	0f be       	out	0x3f, r0	; 63
    3972:	0f 90       	pop	r0
    3974:	1f 90       	pop	r1
    3976:	18 95       	reti

00003978 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    3978:	80 91 94 00 	lds	r24, 0x0094
    397c:	90 91 95 00 	lds	r25, 0x0095
    3980:	0e 94 0e 2b 	call	0x561c	; 0x561c <srand>

}
    3984:	08 95       	ret

00003986 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    3986:	2f 92       	push	r2
    3988:	3f 92       	push	r3
    398a:	4f 92       	push	r4
    398c:	5f 92       	push	r5
    398e:	6f 92       	push	r6
    3990:	7f 92       	push	r7
    3992:	8f 92       	push	r8
    3994:	9f 92       	push	r9
    3996:	af 92       	push	r10
    3998:	bf 92       	push	r11
    399a:	cf 92       	push	r12
    399c:	df 92       	push	r13
    399e:	ef 92       	push	r14
    39a0:	ff 92       	push	r15
    39a2:	0f 93       	push	r16
    39a4:	1f 93       	push	r17
    39a6:	df 93       	push	r29
    39a8:	cf 93       	push	r28
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
    39ae:	28 97       	sbiw	r28, 0x08	; 8
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	de bf       	out	0x3e, r29	; 62
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	cd bf       	out	0x3d, r28	; 61
    39ba:	2c 01       	movw	r4, r24
    39bc:	7a 83       	std	Y+2, r23	; 0x02
    39be:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    39c0:	fc 01       	movw	r30, r24
    39c2:	01 90       	ld	r0, Z+
    39c4:	f0 81       	ld	r31, Z
    39c6:	e0 2d       	mov	r30, r0
    39c8:	fc 83       	std	Y+4, r31	; 0x04
    39ca:	eb 83       	std	Y+3, r30	; 0x03
    39cc:	fb 01       	movw	r30, r22
    39ce:	01 90       	ld	r0, Z+
    39d0:	f0 81       	ld	r31, Z
    39d2:	e0 2d       	mov	r30, r0
    39d4:	fe 83       	std	Y+6, r31	; 0x06
    39d6:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    39d8:	60 91 c7 03 	lds	r22, 0x03C7
    39dc:	70 91 c8 03 	lds	r23, 0x03C8
    39e0:	65 30       	cpi	r22, 0x05	; 5
    39e2:	71 05       	cpc	r23, r1
    39e4:	34 f4       	brge	.+12     	; 0x39f2 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    39e6:	10 92 c8 03 	sts	0x03C8, r1
    39ea:	10 92 c7 03 	sts	0x03C7, r1
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    39f2:	40 91 c9 03 	lds	r20, 0x03C9
    39f6:	50 91 ca 03 	lds	r21, 0x03CA
    39fa:	45 30       	cpi	r20, 0x05	; 5
    39fc:	51 05       	cpc	r21, r1
    39fe:	34 f4       	brge	.+12     	; 0x3a0c <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    3a00:	10 92 ca 03 	sts	0x03CA, r1
    3a04:	10 92 c9 03 	sts	0x03C9, r1
    3a08:	40 e0       	ldi	r20, 0x00	; 0
    3a0a:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3a0c:	80 91 cb 03 	lds	r24, 0x03CB
    3a10:	90 91 cc 03 	lds	r25, 0x03CC
    3a14:	85 30       	cpi	r24, 0x05	; 5
    3a16:	91 05       	cpc	r25, r1
    3a18:	24 f4       	brge	.+8      	; 0x3a22 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    3a1a:	10 92 cc 03 	sts	0x03CC, r1
    3a1e:	10 92 cb 03 	sts	0x03CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3a22:	00 91 cd 03 	lds	r16, 0x03CD
    3a26:	10 91 ce 03 	lds	r17, 0x03CE
    3a2a:	05 30       	cpi	r16, 0x05	; 5
    3a2c:	11 05       	cpc	r17, r1
    3a2e:	34 f4       	brge	.+12     	; 0x3a3c <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    3a30:	10 92 ce 03 	sts	0x03CE, r1
    3a34:	10 92 cd 03 	sts	0x03CD, r1
    3a38:	00 e0       	ldi	r16, 0x00	; 0
    3a3a:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3a3c:	60 90 cf 03 	lds	r6, 0x03CF
    3a40:	70 90 d0 03 	lds	r7, 0x03D0
    3a44:	f5 e0       	ldi	r31, 0x05	; 5
    3a46:	6f 16       	cp	r6, r31
    3a48:	71 04       	cpc	r7, r1
    3a4a:	34 f4       	brge	.+12     	; 0x3a58 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    3a4c:	10 92 d0 03 	sts	0x03D0, r1
    3a50:	10 92 cf 03 	sts	0x03CF, r1
    3a54:	66 24       	eor	r6, r6
    3a56:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3a58:	20 91 d1 03 	lds	r18, 0x03D1
    3a5c:	30 91 d2 03 	lds	r19, 0x03D2
    3a60:	25 30       	cpi	r18, 0x05	; 5
    3a62:	31 05       	cpc	r19, r1
    3a64:	34 f4       	brge	.+12     	; 0x3a72 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    3a66:	10 92 d2 03 	sts	0x03D2, r1
    3a6a:	10 92 d1 03 	sts	0x03D1, r1
    3a6e:	20 e0       	ldi	r18, 0x00	; 0
    3a70:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3a72:	80 91 d3 03 	lds	r24, 0x03D3
    3a76:	90 91 d4 03 	lds	r25, 0x03D4
    3a7a:	85 30       	cpi	r24, 0x05	; 5
    3a7c:	91 05       	cpc	r25, r1
    3a7e:	24 f4       	brge	.+8      	; 0x3a88 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    3a80:	10 92 d4 03 	sts	0x03D4, r1
    3a84:	10 92 d3 03 	sts	0x03D3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3a88:	80 91 d5 03 	lds	r24, 0x03D5
    3a8c:	90 91 d6 03 	lds	r25, 0x03D6
    3a90:	85 30       	cpi	r24, 0x05	; 5
    3a92:	91 05       	cpc	r25, r1
    3a94:	34 f4       	brge	.+12     	; 0x3aa2 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    3a96:	10 92 d6 03 	sts	0x03D6, r1
    3a9a:	10 92 d5 03 	sts	0x03D5, r1
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    3aa2:	ee 24       	eor	r14, r14
    3aa4:	ff 24       	eor	r15, r15
    3aa6:	e6 1a       	sub	r14, r22
    3aa8:	f7 0a       	sbc	r15, r23
    3aaa:	5a 01       	movw	r10, r20
    3aac:	b5 94       	asr	r11
    3aae:	a7 94       	ror	r10
    3ab0:	15 95       	asr	r17
    3ab2:	07 95       	ror	r16
    3ab4:	69 01       	movw	r12, r18
    3ab6:	d5 94       	asr	r13
    3ab8:	c7 94       	ror	r12
    3aba:	4c 01       	movw	r8, r24
    3abc:	95 94       	asr	r9
    3abe:	87 94       	ror	r8
    3ac0:	0e 94 09 2b 	call	0x5612	; 0x5612 <rand>
    3ac4:	93 01       	movw	r18, r6
    3ac6:	2e 51       	subi	r18, 0x1E	; 30
    3ac8:	30 40       	sbci	r19, 0x00	; 0
    3aca:	2e 0d       	add	r18, r14
    3acc:	3f 1d       	adc	r19, r15
    3ace:	20 0f       	add	r18, r16
    3ad0:	31 1f       	adc	r19, r17
    3ad2:	2c 0d       	add	r18, r12
    3ad4:	3d 1d       	adc	r19, r13
    3ad6:	2a 19       	sub	r18, r10
    3ad8:	3b 09       	sbc	r19, r11
    3ada:	28 19       	sub	r18, r8
    3adc:	39 09       	sbc	r19, r9
    3ade:	4c e3       	ldi	r20, 0x3C	; 60
    3ae0:	24 2e       	mov	r2, r20
    3ae2:	31 2c       	mov	r3, r1
    3ae4:	b1 01       	movw	r22, r2
    3ae6:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__divmodhi4>
    3aea:	28 0f       	add	r18, r24
    3aec:	39 1f       	adc	r19, r25
    3aee:	38 87       	std	Y+8, r19	; 0x08
    3af0:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    3af2:	e0 90 c9 03 	lds	r14, 0x03C9
    3af6:	f0 90 ca 03 	lds	r15, 0x03CA
    3afa:	f5 94       	asr	r15
    3afc:	e7 94       	ror	r14
    3afe:	00 91 cb 03 	lds	r16, 0x03CB
    3b02:	10 91 cc 03 	lds	r17, 0x03CC
    3b06:	15 95       	asr	r17
    3b08:	07 95       	ror	r16
    3b0a:	15 95       	asr	r17
    3b0c:	07 95       	ror	r16
    3b0e:	c0 90 cd 03 	lds	r12, 0x03CD
    3b12:	d0 90 ce 03 	lds	r13, 0x03CE
    3b16:	d5 94       	asr	r13
    3b18:	c7 94       	ror	r12
    3b1a:	80 90 d1 03 	lds	r8, 0x03D1
    3b1e:	90 90 d2 03 	lds	r9, 0x03D2
    3b22:	95 94       	asr	r9
    3b24:	87 94       	ror	r8
    3b26:	60 90 d3 03 	lds	r6, 0x03D3
    3b2a:	70 90 d4 03 	lds	r7, 0x03D4
    3b2e:	75 94       	asr	r7
    3b30:	67 94       	ror	r6
    3b32:	75 94       	asr	r7
    3b34:	67 94       	ror	r6
    3b36:	a0 90 d5 03 	lds	r10, 0x03D5
    3b3a:	b0 90 d6 03 	lds	r11, 0x03D6
    3b3e:	b5 94       	asr	r11
    3b40:	a7 94       	ror	r10
    3b42:	0e 94 09 2b 	call	0x5612	; 0x5612 <rand>
    3b46:	97 01       	movw	r18, r14
    3b48:	20 0f       	add	r18, r16
    3b4a:	31 1f       	adc	r19, r17
    3b4c:	2e 51       	subi	r18, 0x1E	; 30
    3b4e:	30 40       	sbci	r19, 0x00	; 0
    3b50:	2c 0d       	add	r18, r12
    3b52:	3d 1d       	adc	r19, r13
    3b54:	2a 19       	sub	r18, r10
    3b56:	3b 09       	sbc	r19, r11
    3b58:	28 19       	sub	r18, r8
    3b5a:	39 09       	sbc	r19, r9
    3b5c:	26 19       	sub	r18, r6
    3b5e:	37 09       	sbc	r19, r7
    3b60:	b1 01       	movw	r22, r2
    3b62:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__divmodhi4>
    3b66:	28 0f       	add	r18, r24
    3b68:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    3b6a:	4b 81       	ldd	r20, Y+3	; 0x03
    3b6c:	5c 81       	ldd	r21, Y+4	; 0x04
    3b6e:	57 fd       	sbrc	r21, 7
    3b70:	97 c0       	rjmp	.+302    	; 0x3ca0 <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    3b72:	5a 01       	movw	r10, r20
    3b74:	cc 24       	eor	r12, r12
    3b76:	b7 fc       	sbrc	r11, 7
    3b78:	c0 94       	com	r12
    3b7a:	dc 2c       	mov	r13, r12
    3b7c:	8f 81       	ldd	r24, Y+7	; 0x07
    3b7e:	98 85       	ldd	r25, Y+8	; 0x08
    3b80:	3c 01       	movw	r6, r24
    3b82:	88 24       	eor	r8, r8
    3b84:	77 fc       	sbrc	r7, 7
    3b86:	80 94       	com	r8
    3b88:	98 2c       	mov	r9, r8
    3b8a:	79 01       	movw	r14, r18
    3b8c:	00 27       	eor	r16, r16
    3b8e:	f7 fc       	sbrc	r15, 7
    3b90:	00 95       	com	r16
    3b92:	10 2f       	mov	r17, r16
    3b94:	c4 01       	movw	r24, r8
    3b96:	b3 01       	movw	r22, r6
    3b98:	6e 19       	sub	r22, r14
    3b9a:	7f 09       	sbc	r23, r15
    3b9c:	80 0b       	sbc	r24, r16
    3b9e:	91 0b       	sbc	r25, r17
    3ba0:	a6 01       	movw	r20, r12
    3ba2:	95 01       	movw	r18, r10
    3ba4:	0e 94 3e 2a 	call	0x547c	; 0x547c <__mulsi3>
    3ba8:	f7 e0       	ldi	r31, 0x07	; 7
    3baa:	95 95       	asr	r25
    3bac:	87 95       	ror	r24
    3bae:	77 95       	ror	r23
    3bb0:	67 95       	ror	r22
    3bb2:	fa 95       	dec	r31
    3bb4:	d1 f7       	brne	.-12     	; 0x3baa <obstacleAvoidance+0x224>
    3bb6:	6a 0d       	add	r22, r10
    3bb8:	7b 1d       	adc	r23, r11
    3bba:	8c 1d       	adc	r24, r12
    3bbc:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    3bbe:	f2 01       	movw	r30, r4
    3bc0:	71 83       	std	Z+1, r23	; 0x01
    3bc2:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    3bc4:	2d 81       	ldd	r18, Y+5	; 0x05
    3bc6:	3e 81       	ldd	r19, Y+6	; 0x06
    3bc8:	37 fd       	sbrc	r19, 7
    3bca:	99 c0       	rjmp	.+306    	; 0x3cfe <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    3bcc:	59 01       	movw	r10, r18
    3bce:	cc 24       	eor	r12, r12
    3bd0:	b7 fc       	sbrc	r11, 7
    3bd2:	c0 94       	com	r12
    3bd4:	dc 2c       	mov	r13, r12
    3bd6:	c8 01       	movw	r24, r16
    3bd8:	b7 01       	movw	r22, r14
    3bda:	66 0d       	add	r22, r6
    3bdc:	77 1d       	adc	r23, r7
    3bde:	88 1d       	adc	r24, r8
    3be0:	99 1d       	adc	r25, r9
    3be2:	a6 01       	movw	r20, r12
    3be4:	95 01       	movw	r18, r10
    3be6:	0e 94 3e 2a 	call	0x547c	; 0x547c <__mulsi3>
    3bea:	37 e0       	ldi	r19, 0x07	; 7
    3bec:	95 95       	asr	r25
    3bee:	87 95       	ror	r24
    3bf0:	77 95       	ror	r23
    3bf2:	67 95       	ror	r22
    3bf4:	3a 95       	dec	r19
    3bf6:	d1 f7       	brne	.-12     	; 0x3bec <obstacleAvoidance+0x266>
    3bf8:	6a 0d       	add	r22, r10
    3bfa:	7b 1d       	adc	r23, r11
    3bfc:	8c 1d       	adc	r24, r12
    3bfe:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    3c00:	9b 01       	movw	r18, r22
    3c02:	e9 81       	ldd	r30, Y+1	; 0x01
    3c04:	fa 81       	ldd	r31, Y+2	; 0x02
    3c06:	71 83       	std	Z+1, r23	; 0x01
    3c08:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    3c0a:	f2 e0       	ldi	r31, 0x02	; 2
    3c0c:	21 30       	cpi	r18, 0x01	; 1
    3c0e:	3f 07       	cpc	r19, r31
    3c10:	44 f0       	brlt	.+16     	; 0x3c22 <obstacleAvoidance+0x29c>
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	92 e0       	ldi	r25, 0x02	; 2
    3c16:	e9 81       	ldd	r30, Y+1	; 0x01
    3c18:	fa 81       	ldd	r31, Y+2	; 0x02
    3c1a:	91 83       	std	Z+1, r25	; 0x01
    3c1c:	80 83       	st	Z, r24
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    3c22:	f2 01       	movw	r30, r4
    3c24:	80 81       	ld	r24, Z
    3c26:	91 81       	ldd	r25, Z+1	; 0x01
    3c28:	f2 e0       	ldi	r31, 0x02	; 2
    3c2a:	81 30       	cpi	r24, 0x01	; 1
    3c2c:	9f 07       	cpc	r25, r31
    3c2e:	4c f0       	brlt	.+18     	; 0x3c42 <obstacleAvoidance+0x2bc>
    3c30:	80 e0       	ldi	r24, 0x00	; 0
    3c32:	92 e0       	ldi	r25, 0x02	; 2
    3c34:	f2 01       	movw	r30, r4
    3c36:	91 83       	std	Z+1, r25	; 0x01
    3c38:	80 83       	st	Z, r24
    3c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c3e:	20 81       	ld	r18, Z
    3c40:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    3c42:	fe ef       	ldi	r31, 0xFE	; 254
    3c44:	20 30       	cpi	r18, 0x00	; 0
    3c46:	3f 07       	cpc	r19, r31
    3c48:	4c f4       	brge	.+18     	; 0x3c5c <obstacleAvoidance+0x2d6>
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	9e ef       	ldi	r25, 0xFE	; 254
    3c4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c50:	fa 81       	ldd	r31, Y+2	; 0x02
    3c52:	91 83       	std	Z+1, r25	; 0x01
    3c54:	80 83       	st	Z, r24
    3c56:	f2 01       	movw	r30, r4
    3c58:	80 81       	ld	r24, Z
    3c5a:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    3c5c:	fe ef       	ldi	r31, 0xFE	; 254
    3c5e:	80 30       	cpi	r24, 0x00	; 0
    3c60:	9f 07       	cpc	r25, r31
    3c62:	2c f4       	brge	.+10     	; 0x3c6e <obstacleAvoidance+0x2e8>
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	9e ef       	ldi	r25, 0xFE	; 254
    3c68:	f2 01       	movw	r30, r4
    3c6a:	91 83       	std	Z+1, r25	; 0x01
    3c6c:	80 83       	st	Z, r24

}
    3c6e:	28 96       	adiw	r28, 0x08	; 8
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	de bf       	out	0x3e, r29	; 62
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	cd bf       	out	0x3d, r28	; 61
    3c7a:	cf 91       	pop	r28
    3c7c:	df 91       	pop	r29
    3c7e:	1f 91       	pop	r17
    3c80:	0f 91       	pop	r16
    3c82:	ff 90       	pop	r15
    3c84:	ef 90       	pop	r14
    3c86:	df 90       	pop	r13
    3c88:	cf 90       	pop	r12
    3c8a:	bf 90       	pop	r11
    3c8c:	af 90       	pop	r10
    3c8e:	9f 90       	pop	r9
    3c90:	8f 90       	pop	r8
    3c92:	7f 90       	pop	r7
    3c94:	6f 90       	pop	r6
    3c96:	5f 90       	pop	r5
    3c98:	4f 90       	pop	r4
    3c9a:	3f 90       	pop	r3
    3c9c:	2f 90       	pop	r2
    3c9e:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    3ca0:	4d 81       	ldd	r20, Y+5	; 0x05
    3ca2:	5e 81       	ldd	r21, Y+6	; 0x06
    3ca4:	5a 01       	movw	r10, r20
    3ca6:	cc 24       	eor	r12, r12
    3ca8:	b7 fc       	sbrc	r11, 7
    3caa:	c0 94       	com	r12
    3cac:	dc 2c       	mov	r13, r12
    3cae:	8f 81       	ldd	r24, Y+7	; 0x07
    3cb0:	98 85       	ldd	r25, Y+8	; 0x08
    3cb2:	3c 01       	movw	r6, r24
    3cb4:	88 24       	eor	r8, r8
    3cb6:	77 fc       	sbrc	r7, 7
    3cb8:	80 94       	com	r8
    3cba:	98 2c       	mov	r9, r8
    3cbc:	79 01       	movw	r14, r18
    3cbe:	00 27       	eor	r16, r16
    3cc0:	f7 fc       	sbrc	r15, 7
    3cc2:	00 95       	com	r16
    3cc4:	10 2f       	mov	r17, r16
    3cc6:	c8 01       	movw	r24, r16
    3cc8:	b7 01       	movw	r22, r14
    3cca:	66 0d       	add	r22, r6
    3ccc:	77 1d       	adc	r23, r7
    3cce:	88 1d       	adc	r24, r8
    3cd0:	99 1d       	adc	r25, r9
    3cd2:	a6 01       	movw	r20, r12
    3cd4:	95 01       	movw	r18, r10
    3cd6:	0e 94 3e 2a 	call	0x547c	; 0x547c <__mulsi3>
    3cda:	e7 e0       	ldi	r30, 0x07	; 7
    3cdc:	95 95       	asr	r25
    3cde:	87 95       	ror	r24
    3ce0:	77 95       	ror	r23
    3ce2:	67 95       	ror	r22
    3ce4:	ea 95       	dec	r30
    3ce6:	d1 f7       	brne	.-12     	; 0x3cdc <obstacleAvoidance+0x356>
    3ce8:	26 1b       	sub	r18, r22
    3cea:	37 0b       	sbc	r19, r23
    3cec:	48 0b       	sbc	r20, r24
    3cee:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    3cf0:	f2 01       	movw	r30, r4
    3cf2:	31 83       	std	Z+1, r19	; 0x01
    3cf4:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    3cf6:	2d 81       	ldd	r18, Y+5	; 0x05
    3cf8:	3e 81       	ldd	r19, Y+6	; 0x06
    3cfa:	37 ff       	sbrs	r19, 7
    3cfc:	67 cf       	rjmp	.-306    	; 0x3bcc <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    3cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    3d00:	3c 81       	ldd	r19, Y+4	; 0x04
    3d02:	59 01       	movw	r10, r18
    3d04:	cc 24       	eor	r12, r12
    3d06:	b7 fc       	sbrc	r11, 7
    3d08:	c0 94       	com	r12
    3d0a:	dc 2c       	mov	r13, r12
    3d0c:	c4 01       	movw	r24, r8
    3d0e:	b3 01       	movw	r22, r6
    3d10:	6e 19       	sub	r22, r14
    3d12:	7f 09       	sbc	r23, r15
    3d14:	80 0b       	sbc	r24, r16
    3d16:	91 0b       	sbc	r25, r17
    3d18:	a6 01       	movw	r20, r12
    3d1a:	95 01       	movw	r18, r10
    3d1c:	0e 94 3e 2a 	call	0x547c	; 0x547c <__mulsi3>
    3d20:	27 e0       	ldi	r18, 0x07	; 7
    3d22:	95 95       	asr	r25
    3d24:	87 95       	ror	r24
    3d26:	77 95       	ror	r23
    3d28:	67 95       	ror	r22
    3d2a:	2a 95       	dec	r18
    3d2c:	d1 f7       	brne	.-12     	; 0x3d22 <obstacleAvoidance+0x39c>
    3d2e:	a6 1a       	sub	r10, r22
    3d30:	b7 0a       	sbc	r11, r23
    3d32:	c8 0a       	sbc	r12, r24
    3d34:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    3d36:	95 01       	movw	r18, r10
    3d38:	e9 81       	ldd	r30, Y+1	; 0x01
    3d3a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d3c:	b1 82       	std	Z+1, r11	; 0x01
    3d3e:	a0 82       	st	Z, r10
    3d40:	64 cf       	rjmp	.-312    	; 0x3c0a <obstacleAvoidance+0x284>

00003d42 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3d42:	80 91 6f 03 	lds	r24, 0x036F
    3d46:	90 91 70 03 	lds	r25, 0x0370
    3d4a:	21 e0       	ldi	r18, 0x01	; 1
    3d4c:	84 3a       	cpi	r24, 0xA4	; 164
    3d4e:	92 07       	cpc	r25, r18
    3d50:	d4 f0       	brlt	.+52     	; 0x3d86 <cliffDetected+0x44>
    3d52:	80 91 71 03 	lds	r24, 0x0371
    3d56:	90 91 72 03 	lds	r25, 0x0372
    3d5a:	21 e0       	ldi	r18, 0x01	; 1
    3d5c:	84 3a       	cpi	r24, 0xA4	; 164
    3d5e:	92 07       	cpc	r25, r18
    3d60:	94 f0       	brlt	.+36     	; 0x3d86 <cliffDetected+0x44>
    3d62:	80 91 73 03 	lds	r24, 0x0373
    3d66:	90 91 74 03 	lds	r25, 0x0374
    3d6a:	21 e0       	ldi	r18, 0x01	; 1
    3d6c:	84 3a       	cpi	r24, 0xA4	; 164
    3d6e:	92 07       	cpc	r25, r18
    3d70:	74 f0       	brlt	.+28     	; 0x3d8e <cliffDetected+0x4c>
		return 1;
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	20 91 75 03 	lds	r18, 0x0375
    3d78:	30 91 76 03 	lds	r19, 0x0376
    3d7c:	91 e0       	ldi	r25, 0x01	; 1
    3d7e:	24 3a       	cpi	r18, 0xA4	; 164
    3d80:	39 07       	cpc	r19, r25
    3d82:	1c f4       	brge	.+6      	; 0x3d8a <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    3d84:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	08 95       	ret
    3d8a:	80 e0       	ldi	r24, 0x00	; 0
    3d8c:	08 95       	ret
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    3d90:	08 95       	ret

00003d92 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	80 93 47 05 	sts	0x0547, r24
}
    3d98:	08 95       	ret

00003d9a <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    3d9a:	10 92 47 05 	sts	0x0547, r1
}
    3d9e:	08 95       	ret

00003da0 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	80 93 48 05 	sts	0x0548, r24
}
    3da6:	08 95       	ret

00003da8 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    3da8:	10 92 48 05 	sts	0x0548, r1
}
    3dac:	08 95       	ret

00003dae <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    3dae:	a0 e8       	ldi	r26, 0x80	; 128
    3db0:	b0 e0       	ldi	r27, 0x00	; 0
    3db2:	1c 92       	st	X, r1
	TCCR1B = 0;
    3db4:	e1 e8       	ldi	r30, 0x81	; 129
    3db6:	f0 e0       	ldi	r31, 0x00	; 0
    3db8:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    3dba:	8c 91       	ld	r24, X
    3dbc:	89 6a       	ori	r24, 0xA9	; 169
    3dbe:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    3dc0:	80 81       	ld	r24, Z
    3dc2:	89 60       	ori	r24, 0x09	; 9
    3dc4:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    3dc6:	80 91 0c 02 	lds	r24, 0x020C
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	90 93 89 00 	sts	0x0089, r25
    3dd0:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    3dd4:	80 91 0d 02 	lds	r24, 0x020D
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	90 93 8b 00 	sts	0x008B, r25
    3dde:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    3de2:	80 91 0e 02 	lds	r24, 0x020E
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	90 93 8d 00 	sts	0x008D, r25
    3dec:	80 93 8c 00 	sts	0x008C, r24

}
    3df0:	08 95       	ret

00003df2 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	90 91 07 04 	lds	r25, 0x0407
    3df8:	89 1b       	sub	r24, r25
    3dfa:	80 93 07 04 	sts	0x0407, r24

	if(blinkState) {
    3dfe:	88 23       	and	r24, r24
    3e00:	39 f4       	brne	.+14     	; 0x3e10 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    3e02:	80 91 80 00 	lds	r24, 0x0080
    3e06:	87 7f       	andi	r24, 0xF7	; 247
    3e08:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    3e0c:	2f 98       	cbi	0x05, 7	; 5
    3e0e:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    3e10:	80 91 80 00 	lds	r24, 0x0080
    3e14:	88 60       	ori	r24, 0x08	; 8
    3e16:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    3e1a:	8f ef       	ldi	r24, 0xFF	; 255
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	90 93 8d 00 	sts	0x008D, r25
    3e22:	80 93 8c 00 	sts	0x008C, r24
    3e26:	08 95       	ret

00003e28 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    3e28:	88 23       	and	r24, r24
    3e2a:	59 f0       	breq	.+22     	; 0x3e42 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    3e2c:	90 91 80 00 	lds	r25, 0x0080
    3e30:	90 68       	ori	r25, 0x80	; 128
    3e32:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	90 93 89 00 	sts	0x0089, r25
    3e3c:	80 93 88 00 	sts	0x0088, r24
    3e40:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    3e42:	80 91 80 00 	lds	r24, 0x0080
    3e46:	8f 77       	andi	r24, 0x7F	; 127
    3e48:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    3e4c:	2d 98       	cbi	0x05, 5	; 5
    3e4e:	08 95       	ret

00003e50 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    3e50:	88 23       	and	r24, r24
    3e52:	59 f0       	breq	.+22     	; 0x3e6a <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    3e54:	90 91 80 00 	lds	r25, 0x0080
    3e58:	90 62       	ori	r25, 0x20	; 32
    3e5a:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	90 93 8b 00 	sts	0x008B, r25
    3e64:	80 93 8a 00 	sts	0x008A, r24
    3e68:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    3e6a:	80 91 80 00 	lds	r24, 0x0080
    3e6e:	8f 7d       	andi	r24, 0xDF	; 223
    3e70:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    3e74:	2e 98       	cbi	0x05, 6	; 5
    3e76:	08 95       	ret

00003e78 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    3e78:	88 23       	and	r24, r24
    3e7a:	59 f0       	breq	.+22     	; 0x3e92 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    3e7c:	90 91 80 00 	lds	r25, 0x0080
    3e80:	98 60       	ori	r25, 0x08	; 8
    3e82:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	90 93 8d 00 	sts	0x008D, r25
    3e8c:	80 93 8c 00 	sts	0x008C, r24
    3e90:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    3e92:	80 91 80 00 	lds	r24, 0x0080
    3e96:	87 7f       	andi	r24, 0xF7	; 247
    3e98:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    3e9c:	2f 98       	cbi	0x05, 7	; 5
    3e9e:	08 95       	ret

00003ea0 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    3ea0:	83 30       	cpi	r24, 0x03	; 3
    3ea2:	09 f4       	brne	.+2      	; 0x3ea6 <setGreenLed+0x6>
    3ea4:	5a c0       	rjmp	.+180    	; 0x3f5a <setGreenLed+0xba>
    3ea6:	84 30       	cpi	r24, 0x04	; 4
    3ea8:	80 f0       	brcs	.+32     	; 0x3eca <setGreenLed+0x2a>
    3eaa:	85 30       	cpi	r24, 0x05	; 5
    3eac:	09 f4       	brne	.+2      	; 0x3eb0 <setGreenLed+0x10>
    3eae:	41 c0       	rjmp	.+130    	; 0x3f32 <setGreenLed+0x92>
    3eb0:	85 30       	cpi	r24, 0x05	; 5
    3eb2:	d0 f4       	brcc	.+52     	; 0x3ee8 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    3eb4:	66 23       	and	r22, r22
    3eb6:	09 f4       	brne	.+2      	; 0x3eba <setGreenLed+0x1a>
    3eb8:	68 c0       	rjmp	.+208    	; 0x3f8a <setGreenLed+0xea>
    3eba:	80 91 0b 01 	lds	r24, 0x010B
    3ebe:	8f 7e       	andi	r24, 0xEF	; 239
    3ec0:	80 93 0b 01 	sts	0x010B, r24
    3ec4:	80 91 0b 01 	lds	r24, 0x010B
    3ec8:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    3eca:	81 30       	cpi	r24, 0x01	; 1
    3ecc:	e1 f1       	breq	.+120    	; 0x3f46 <setGreenLed+0xa6>
    3ece:	82 30       	cpi	r24, 0x02	; 2
    3ed0:	80 f0       	brcs	.+32     	; 0x3ef2 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    3ed2:	66 23       	and	r22, r22
    3ed4:	09 f4       	brne	.+2      	; 0x3ed8 <setGreenLed+0x38>
    3ed6:	46 c0       	rjmp	.+140    	; 0x3f64 <setGreenLed+0xc4>
    3ed8:	80 91 0b 01 	lds	r24, 0x010B
    3edc:	8b 7f       	andi	r24, 0xFB	; 251
    3ede:	80 93 0b 01 	sts	0x010B, r24
    3ee2:	80 91 0b 01 	lds	r24, 0x010B
    3ee6:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    3ee8:	86 30       	cpi	r24, 0x06	; 6
    3eea:	c9 f0       	breq	.+50     	; 0x3f1e <setGreenLed+0x7e>
    3eec:	87 30       	cpi	r24, 0x07	; 7
    3eee:	61 f0       	breq	.+24     	; 0x3f08 <setGreenLed+0x68>
    3ef0:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    3ef2:	66 23       	and	r22, r22
    3ef4:	09 f4       	brne	.+2      	; 0x3ef8 <setGreenLed+0x58>
    3ef6:	51 c0       	rjmp	.+162    	; 0x3f9a <setGreenLed+0xfa>
    3ef8:	80 91 0b 01 	lds	r24, 0x010B
    3efc:	8e 7f       	andi	r24, 0xFE	; 254
    3efe:	80 93 0b 01 	sts	0x010B, r24
    3f02:	80 91 0b 01 	lds	r24, 0x010B
    3f06:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    3f08:	66 23       	and	r22, r22
    3f0a:	09 f0       	breq	.+2      	; 0x3f0e <setGreenLed+0x6e>
    3f0c:	5e c0       	rjmp	.+188    	; 0x3fca <setGreenLed+0x12a>
    3f0e:	80 91 0b 01 	lds	r24, 0x010B
    3f12:	80 68       	ori	r24, 0x80	; 128
    3f14:	80 93 0b 01 	sts	0x010B, r24
    3f18:	80 91 0b 01 	lds	r24, 0x010B
    3f1c:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    3f1e:	66 23       	and	r22, r22
    3f20:	49 f1       	breq	.+82     	; 0x3f74 <setGreenLed+0xd4>
    3f22:	80 91 0b 01 	lds	r24, 0x010B
    3f26:	8f 7b       	andi	r24, 0xBF	; 191
    3f28:	80 93 0b 01 	sts	0x010B, r24
    3f2c:	80 91 0b 01 	lds	r24, 0x010B
    3f30:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    3f32:	66 23       	and	r22, r22
    3f34:	d1 f1       	breq	.+116    	; 0x3faa <setGreenLed+0x10a>
    3f36:	80 91 0b 01 	lds	r24, 0x010B
    3f3a:	8f 7d       	andi	r24, 0xDF	; 223
    3f3c:	80 93 0b 01 	sts	0x010B, r24
    3f40:	80 91 0b 01 	lds	r24, 0x010B
    3f44:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    3f46:	66 23       	and	r22, r22
    3f48:	c1 f1       	breq	.+112    	; 0x3fba <setGreenLed+0x11a>
    3f4a:	80 91 0b 01 	lds	r24, 0x010B
    3f4e:	8d 7f       	andi	r24, 0xFD	; 253
    3f50:	80 93 0b 01 	sts	0x010B, r24
    3f54:	80 91 0b 01 	lds	r24, 0x010B
    3f58:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    3f5a:	66 23       	and	r22, r22
    3f5c:	99 f0       	breq	.+38     	; 0x3f84 <setGreenLed+0xe4>
    3f5e:	a3 98       	cbi	0x14, 3	; 20
    3f60:	84 b3       	in	r24, 0x14	; 20
    3f62:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    3f64:	80 91 0b 01 	lds	r24, 0x010B
    3f68:	84 60       	ori	r24, 0x04	; 4
    3f6a:	80 93 0b 01 	sts	0x010B, r24
    3f6e:	80 91 0b 01 	lds	r24, 0x010B
    3f72:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    3f74:	80 91 0b 01 	lds	r24, 0x010B
    3f78:	80 64       	ori	r24, 0x40	; 64
    3f7a:	80 93 0b 01 	sts	0x010B, r24
    3f7e:	80 91 0b 01 	lds	r24, 0x010B
    3f82:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    3f84:	a3 9a       	sbi	0x14, 3	; 20
    3f86:	84 b3       	in	r24, 0x14	; 20
    3f88:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    3f8a:	80 91 0b 01 	lds	r24, 0x010B
    3f8e:	80 61       	ori	r24, 0x10	; 16
    3f90:	80 93 0b 01 	sts	0x010B, r24
    3f94:	80 91 0b 01 	lds	r24, 0x010B
    3f98:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    3f9a:	80 91 0b 01 	lds	r24, 0x010B
    3f9e:	81 60       	ori	r24, 0x01	; 1
    3fa0:	80 93 0b 01 	sts	0x010B, r24
    3fa4:	80 91 0b 01 	lds	r24, 0x010B
    3fa8:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    3faa:	80 91 0b 01 	lds	r24, 0x010B
    3fae:	80 62       	ori	r24, 0x20	; 32
    3fb0:	80 93 0b 01 	sts	0x010B, r24
    3fb4:	80 91 0b 01 	lds	r24, 0x010B
    3fb8:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    3fba:	80 91 0b 01 	lds	r24, 0x010B
    3fbe:	82 60       	ori	r24, 0x02	; 2
    3fc0:	80 93 0b 01 	sts	0x010B, r24
    3fc4:	80 91 0b 01 	lds	r24, 0x010B
    3fc8:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    3fca:	80 91 0b 01 	lds	r24, 0x010B
    3fce:	8f 77       	andi	r24, 0x7F	; 127
    3fd0:	80 93 0b 01 	sts	0x010B, r24
    3fd4:	80 91 0b 01 	lds	r24, 0x010B
    3fd8:	08 95       	ret

00003fda <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    3fda:	eb e0       	ldi	r30, 0x0B	; 11
    3fdc:	f1 e0       	ldi	r31, 0x01	; 1
    3fde:	80 81       	ld	r24, Z
    3fe0:	81 60       	ori	r24, 0x01	; 1
    3fe2:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    3fe4:	80 81       	ld	r24, Z
    3fe6:	82 60       	ori	r24, 0x02	; 2
    3fe8:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    3fea:	80 81       	ld	r24, Z
    3fec:	84 60       	ori	r24, 0x04	; 4
    3fee:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    3ff0:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    3ff2:	80 81       	ld	r24, Z
    3ff4:	80 61       	ori	r24, 0x10	; 16
    3ff6:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    3ff8:	80 81       	ld	r24, Z
    3ffa:	80 62       	ori	r24, 0x20	; 32
    3ffc:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    3ffe:	80 81       	ld	r24, Z
    4000:	80 64       	ori	r24, 0x40	; 64
    4002:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    4004:	80 81       	ld	r24, Z
    4006:	80 68       	ori	r24, 0x80	; 128
    4008:	80 83       	st	Z, r24

}
    400a:	08 95       	ret

0000400c <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    400c:	eb e0       	ldi	r30, 0x0B	; 11
    400e:	f1 e0       	ldi	r31, 0x01	; 1
    4010:	80 81       	ld	r24, Z
    4012:	8e 7f       	andi	r24, 0xFE	; 254
    4014:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    4016:	80 81       	ld	r24, Z
    4018:	8d 7f       	andi	r24, 0xFD	; 253
    401a:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    401c:	80 81       	ld	r24, Z
    401e:	8b 7f       	andi	r24, 0xFB	; 251
    4020:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    4022:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    4024:	80 81       	ld	r24, Z
    4026:	8f 7e       	andi	r24, 0xEF	; 239
    4028:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    402a:	80 81       	ld	r24, Z
    402c:	8f 7d       	andi	r24, 0xDF	; 223
    402e:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    4030:	80 81       	ld	r24, Z
    4032:	8f 7b       	andi	r24, 0xBF	; 191
    4034:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    4036:	80 81       	ld	r24, Z
    4038:	8f 77       	andi	r24, 0x7F	; 127
    403a:	80 83       	st	Z, r24

}
    403c:	08 95       	ret

0000403e <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    403e:	0e 94 ba 13 	call	0x2774	; 0x2774 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4042:	80 91 14 02 	lds	r24, 0x0214
    4046:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    404a:	88 23       	and	r24, r24
    404c:	49 f4       	brne	.+18     	; 0x4060 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    404e:	86 e1       	ldi	r24, 0x16	; 22
    4050:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    4054:	85 e4       	ldi	r24, 0x45	; 69
    4056:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    405a:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>
    405e:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4060:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    4064:	86 ea       	ldi	r24, 0xA6	; 166
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	90 93 15 02 	sts	0x0215, r25
    406c:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4070:	86 ea       	ldi	r24, 0xA6	; 166
    4072:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4076:	88 23       	and	r24, r24
    4078:	41 f5       	brne	.+80     	; 0x40ca <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    407a:	8d e2       	ldi	r24, 0x2D	; 45
    407c:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_write(0x08);	// measurement mode
    4080:	88 e0       	ldi	r24, 0x08	; 8
    4082:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4086:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    408a:	80 91 14 02 	lds	r24, 0x0214
    408e:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4092:	88 23       	and	r24, r24
    4094:	d1 f4       	brne	.+52     	; 0x40ca <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    4096:	81 e3       	ldi	r24, 0x31	; 49
    4098:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    409c:	80 e0       	ldi	r24, 0x00	; 0
    409e:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    40a2:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    40a6:	80 91 14 02 	lds	r24, 0x0214
    40aa:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    40ae:	88 23       	and	r24, r24
    40b0:	61 f4       	brne	.+24     	; 0x40ca <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    40b2:	8c e2       	ldi	r24, 0x2C	; 44
    40b4:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    40b8:	89 e0       	ldi	r24, 0x09	; 9
    40ba:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    40be:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	80 93 17 05 	sts	0x0517, r24
    40c8:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    40ca:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    40ce:	82 e0       	ldi	r24, 0x02	; 2
    40d0:	80 93 17 05 	sts	0x0517, r24
    40d4:	08 95       	ret

000040d6 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    40d6:	80 91 14 02 	lds	r24, 0x0214
    40da:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    40de:	88 23       	and	r24, r24
    40e0:	51 f4       	brne	.+20     	; 0x40f6 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    40e2:	86 e1       	ldi	r24, 0x16	; 22
    40e4:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    40e8:	85 e4       	ldi	r24, 0x45	; 69
    40ea:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    40ee:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>
    }

	return 0;				// configuration ok
    40f2:	80 e0       	ldi	r24, 0x00	; 0

}
    40f4:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    40f6:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>
		return 1;
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	08 95       	ret

000040fe <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    40fe:	80 91 14 02 	lds	r24, 0x0214
    4102:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4106:	88 23       	and	r24, r24
    4108:	31 f5       	brne	.+76     	; 0x4156 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    410a:	8d e2       	ldi	r24, 0x2D	; 45
    410c:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_write(0x08);	// measurement mode
    4110:	88 e0       	ldi	r24, 0x08	; 8
    4112:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4116:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    411a:	80 91 14 02 	lds	r24, 0x0214
    411e:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4122:	88 23       	and	r24, r24
    4124:	c1 f4       	brne	.+48     	; 0x4156 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    4126:	81 e3       	ldi	r24, 0x31	; 49
    4128:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    412c:	80 e0       	ldi	r24, 0x00	; 0
    412e:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4132:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4136:	80 91 14 02 	lds	r24, 0x0214
    413a:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    413e:	88 23       	and	r24, r24
    4140:	51 f4       	brne	.+20     	; 0x4156 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    4142:	8c e2       	ldi	r24, 0x2C	; 44
    4144:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    4148:	89 e0       	ldi	r24, 0x09	; 9
    414a:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    414e:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>
    }

	return 0;
    4152:	80 e0       	ldi	r24, 0x00	; 0

}
    4154:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4156:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>
		return 1;
    415a:	81 e0       	ldi	r24, 0x01	; 1
    415c:	08 95       	ret

0000415e <readAccelXY>:

	return 0;

}

void readAccelXY() {
    415e:	ff 92       	push	r15
    4160:	0f 93       	push	r16
    4162:	1f 93       	push	r17
    4164:	df 93       	push	r29
    4166:	cf 93       	push	r28
    4168:	0f 92       	push	r0
    416a:	cd b7       	in	r28, 0x3d	; 61
    416c:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    416e:	80 91 17 05 	lds	r24, 0x0517
    4172:	88 23       	and	r24, r24
    4174:	91 f0       	breq	.+36     	; 0x419a <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    4176:	81 30       	cpi	r24, 0x01	; 1
    4178:	09 f4       	brne	.+2      	; 0x417c <readAccelXY+0x1e>
    417a:	88 c0       	rjmp	.+272    	; 0x428c <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    417c:	10 92 19 05 	sts	0x0519, r1
    4180:	10 92 18 05 	sts	0x0518, r1
		accY = 0;
    4184:	10 92 1b 05 	sts	0x051B, r1
    4188:	10 92 1a 05 	sts	0x051A, r1

	}

}
    418c:	0f 90       	pop	r0
    418e:	cf 91       	pop	r28
    4190:	df 91       	pop	r29
    4192:	1f 91       	pop	r17
    4194:	0f 91       	pop	r16
    4196:	ff 90       	pop	r15
    4198:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    419a:	80 91 14 02 	lds	r24, 0x0214
    419e:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    41a2:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    41a4:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    41a8:	80 91 14 02 	lds	r24, 0x0214
    41ac:	8f 5f       	subi	r24, 0xFF	; 255
    41ae:	0e 94 0f 14 	call	0x281e	; 0x281e <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    41b2:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    41b6:	08 2f       	mov	r16, r24
    41b8:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    41bc:	f8 2e       	mov	r15, r24
    41be:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    41c2:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    41c4:	0e 94 59 14 	call	0x28b2	; 0x28b2 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    41c8:	89 83       	std	Y+1, r24	; 0x01
    41ca:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    41ce:	90 91 76 05 	lds	r25, 0x0576
    41d2:	89 81       	ldd	r24, Y+1	; 0x01
    41d4:	99 23       	and	r25, r25
    41d6:	39 f1       	breq	.+78     	; 0x4226 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    41d8:	4f 2d       	mov	r20, r15
    41da:	55 27       	eor	r21, r21
    41dc:	47 fd       	sbrc	r20, 7
    41de:	50 95       	com	r21
    41e0:	54 2f       	mov	r21, r20
    41e2:	44 27       	eor	r20, r20
    41e4:	60 2f       	mov	r22, r16
    41e6:	77 27       	eor	r23, r23
    41e8:	67 fd       	sbrc	r22, 7
    41ea:	70 95       	com	r23
    41ec:	46 2b       	or	r20, r22
    41ee:	57 2b       	or	r21, r23
    41f0:	50 93 19 05 	sts	0x0519, r21
    41f4:	40 93 18 05 	sts	0x0518, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    41f8:	28 2f       	mov	r18, r24
    41fa:	33 27       	eor	r19, r19
    41fc:	27 fd       	sbrc	r18, 7
    41fe:	30 95       	com	r19
    4200:	32 2f       	mov	r19, r18
    4202:	22 27       	eor	r18, r18
    4204:	81 2f       	mov	r24, r17
    4206:	99 27       	eor	r25, r25
    4208:	87 fd       	sbrc	r24, 7
    420a:	90 95       	com	r25
    420c:	28 2b       	or	r18, r24
    420e:	39 2b       	or	r19, r25
    4210:	30 93 1b 05 	sts	0x051B, r19
    4214:	20 93 1a 05 	sts	0x051A, r18
		accX = 0;
		accY = 0;

	}

}
    4218:	0f 90       	pop	r0
    421a:	cf 91       	pop	r28
    421c:	df 91       	pop	r29
    421e:	1f 91       	pop	r17
    4220:	0f 91       	pop	r16
    4222:	ff 90       	pop	r15
    4224:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    4226:	4f 2d       	mov	r20, r15
    4228:	55 27       	eor	r21, r21
    422a:	47 fd       	sbrc	r20, 7
    422c:	50 95       	com	r21
    422e:	54 2f       	mov	r21, r20
    4230:	44 27       	eor	r20, r20
    4232:	60 2f       	mov	r22, r16
    4234:	77 27       	eor	r23, r23
    4236:	67 fd       	sbrc	r22, 7
    4238:	70 95       	com	r23
    423a:	46 2b       	or	r20, r22
    423c:	57 2b       	or	r21, r23
    423e:	60 91 1e 05 	lds	r22, 0x051E
    4242:	70 91 1f 05 	lds	r23, 0x051F
    4246:	46 1b       	sub	r20, r22
    4248:	57 0b       	sbc	r21, r23
    424a:	50 93 19 05 	sts	0x0519, r21
    424e:	40 93 18 05 	sts	0x0518, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    4252:	28 2f       	mov	r18, r24
    4254:	33 27       	eor	r19, r19
    4256:	27 fd       	sbrc	r18, 7
    4258:	30 95       	com	r19
    425a:	32 2f       	mov	r19, r18
    425c:	22 27       	eor	r18, r18
    425e:	81 2f       	mov	r24, r17
    4260:	99 27       	eor	r25, r25
    4262:	87 fd       	sbrc	r24, 7
    4264:	90 95       	com	r25
    4266:	28 2b       	or	r18, r24
    4268:	39 2b       	or	r19, r25
    426a:	80 91 20 05 	lds	r24, 0x0520
    426e:	90 91 21 05 	lds	r25, 0x0521
    4272:	28 1b       	sub	r18, r24
    4274:	39 0b       	sbc	r19, r25
    4276:	30 93 1b 05 	sts	0x051B, r19
    427a:	20 93 1a 05 	sts	0x051A, r18
		accX = 0;
		accY = 0;

	}

}
    427e:	0f 90       	pop	r0
    4280:	cf 91       	pop	r28
    4282:	df 91       	pop	r29
    4284:	1f 91       	pop	r17
    4286:	0f 91       	pop	r16
    4288:	ff 90       	pop	r15
    428a:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    428c:	80 91 14 02 	lds	r24, 0x0214
    4290:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    4294:	82 e3       	ldi	r24, 0x32	; 50
    4296:	86 cf       	rjmp	.-244    	; 0x41a4 <readAccelXY+0x46>

00004298 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    4298:	df 93       	push	r29
    429a:	cf 93       	push	r28
    429c:	00 d0       	rcall	.+0      	; 0x429e <readAccelXYZ+0x6>
    429e:	00 d0       	rcall	.+0      	; 0x42a0 <readAccelXYZ+0x8>
    42a0:	cd b7       	in	r28, 0x3d	; 61
    42a2:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    42a4:	80 91 17 05 	lds	r24, 0x0517
    42a8:	88 23       	and	r24, r24
    42aa:	c1 f0       	breq	.+48     	; 0x42dc <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    42ac:	81 30       	cpi	r24, 0x01	; 1
    42ae:	09 f4       	brne	.+2      	; 0x42b2 <readAccelXYZ+0x1a>
    42b0:	ad c0       	rjmp	.+346    	; 0x440c <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    42b2:	10 92 19 05 	sts	0x0519, r1
    42b6:	10 92 18 05 	sts	0x0518, r1
		accY = 0;
    42ba:	10 92 1b 05 	sts	0x051B, r1
    42be:	10 92 1a 05 	sts	0x051A, r1
		accZ = 0;
    42c2:	10 92 1d 05 	sts	0x051D, r1
    42c6:	10 92 1c 05 	sts	0x051C, r1

	}

}
    42ca:	26 96       	adiw	r28, 0x06	; 6
    42cc:	0f b6       	in	r0, 0x3f	; 63
    42ce:	f8 94       	cli
    42d0:	de bf       	out	0x3e, r29	; 62
    42d2:	0f be       	out	0x3f, r0	; 63
    42d4:	cd bf       	out	0x3d, r28	; 61
    42d6:	cf 91       	pop	r28
    42d8:	df 91       	pop	r29
    42da:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    42dc:	80 91 14 02 	lds	r24, 0x0214
    42e0:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    42e4:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    42e6:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    42ea:	80 91 14 02 	lds	r24, 0x0214
    42ee:	8f 5f       	subi	r24, 0xFF	; 255
    42f0:	0e 94 0f 14 	call	0x281e	; 0x281e <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    42f4:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    42f8:	89 83       	std	Y+1, r24	; 0x01
    42fa:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    42fe:	8a 83       	std	Y+2, r24	; 0x02
    4300:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    4304:	8b 83       	std	Y+3, r24	; 0x03
    4306:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    430a:	8c 83       	std	Y+4, r24	; 0x04
    430c:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    4310:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    4312:	0e 94 59 14 	call	0x28b2	; 0x28b2 <i2c_readNak>
    4316:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    4318:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    431c:	80 91 76 05 	lds	r24, 0x0576
    4320:	88 23       	and	r24, r24
    4322:	89 f1       	breq	.+98     	; 0x4386 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    4324:	8a 81       	ldd	r24, Y+2	; 0x02
    4326:	99 27       	eor	r25, r25
    4328:	87 fd       	sbrc	r24, 7
    432a:	90 95       	com	r25
    432c:	98 2f       	mov	r25, r24
    432e:	88 27       	eor	r24, r24
    4330:	29 81       	ldd	r18, Y+1	; 0x01
    4332:	33 27       	eor	r19, r19
    4334:	27 fd       	sbrc	r18, 7
    4336:	30 95       	com	r19
    4338:	82 2b       	or	r24, r18
    433a:	93 2b       	or	r25, r19
    433c:	90 93 19 05 	sts	0x0519, r25
    4340:	80 93 18 05 	sts	0x0518, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    4344:	8c 81       	ldd	r24, Y+4	; 0x04
    4346:	99 27       	eor	r25, r25
    4348:	87 fd       	sbrc	r24, 7
    434a:	90 95       	com	r25
    434c:	98 2f       	mov	r25, r24
    434e:	88 27       	eor	r24, r24
    4350:	2b 81       	ldd	r18, Y+3	; 0x03
    4352:	33 27       	eor	r19, r19
    4354:	27 fd       	sbrc	r18, 7
    4356:	30 95       	com	r19
    4358:	82 2b       	or	r24, r18
    435a:	93 2b       	or	r25, r19
    435c:	90 93 1b 05 	sts	0x051B, r25
    4360:	80 93 1a 05 	sts	0x051A, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    4364:	8e 81       	ldd	r24, Y+6	; 0x06
    4366:	99 27       	eor	r25, r25
    4368:	87 fd       	sbrc	r24, 7
    436a:	90 95       	com	r25
    436c:	98 2f       	mov	r25, r24
    436e:	88 27       	eor	r24, r24
    4370:	2d 81       	ldd	r18, Y+5	; 0x05
    4372:	33 27       	eor	r19, r19
    4374:	27 fd       	sbrc	r18, 7
    4376:	30 95       	com	r19
    4378:	82 2b       	or	r24, r18
    437a:	93 2b       	or	r25, r19
    437c:	90 93 1d 05 	sts	0x051D, r25
    4380:	80 93 1c 05 	sts	0x051C, r24
    4384:	a2 cf       	rjmp	.-188    	; 0x42ca <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    4386:	8a 81       	ldd	r24, Y+2	; 0x02
    4388:	99 27       	eor	r25, r25
    438a:	87 fd       	sbrc	r24, 7
    438c:	90 95       	com	r25
    438e:	98 2f       	mov	r25, r24
    4390:	88 27       	eor	r24, r24
    4392:	29 81       	ldd	r18, Y+1	; 0x01
    4394:	33 27       	eor	r19, r19
    4396:	27 fd       	sbrc	r18, 7
    4398:	30 95       	com	r19
    439a:	82 2b       	or	r24, r18
    439c:	93 2b       	or	r25, r19
    439e:	20 91 1e 05 	lds	r18, 0x051E
    43a2:	30 91 1f 05 	lds	r19, 0x051F
    43a6:	82 1b       	sub	r24, r18
    43a8:	93 0b       	sbc	r25, r19
    43aa:	90 93 19 05 	sts	0x0519, r25
    43ae:	80 93 18 05 	sts	0x0518, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    43b2:	8c 81       	ldd	r24, Y+4	; 0x04
    43b4:	99 27       	eor	r25, r25
    43b6:	87 fd       	sbrc	r24, 7
    43b8:	90 95       	com	r25
    43ba:	98 2f       	mov	r25, r24
    43bc:	88 27       	eor	r24, r24
    43be:	2b 81       	ldd	r18, Y+3	; 0x03
    43c0:	33 27       	eor	r19, r19
    43c2:	27 fd       	sbrc	r18, 7
    43c4:	30 95       	com	r19
    43c6:	82 2b       	or	r24, r18
    43c8:	93 2b       	or	r25, r19
    43ca:	20 91 20 05 	lds	r18, 0x0520
    43ce:	30 91 21 05 	lds	r19, 0x0521
    43d2:	82 1b       	sub	r24, r18
    43d4:	93 0b       	sbc	r25, r19
    43d6:	90 93 1b 05 	sts	0x051B, r25
    43da:	80 93 1a 05 	sts	0x051A, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    43de:	8e 81       	ldd	r24, Y+6	; 0x06
    43e0:	99 27       	eor	r25, r25
    43e2:	87 fd       	sbrc	r24, 7
    43e4:	90 95       	com	r25
    43e6:	98 2f       	mov	r25, r24
    43e8:	88 27       	eor	r24, r24
    43ea:	2d 81       	ldd	r18, Y+5	; 0x05
    43ec:	33 27       	eor	r19, r19
    43ee:	27 fd       	sbrc	r18, 7
    43f0:	30 95       	com	r19
    43f2:	82 2b       	or	r24, r18
    43f4:	93 2b       	or	r25, r19
    43f6:	20 91 22 05 	lds	r18, 0x0522
    43fa:	30 91 23 05 	lds	r19, 0x0523
    43fe:	82 1b       	sub	r24, r18
    4400:	93 0b       	sbc	r25, r19
    4402:	90 93 1d 05 	sts	0x051D, r25
    4406:	80 93 1c 05 	sts	0x051C, r24
    440a:	5f cf       	rjmp	.-322    	; 0x42ca <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    440c:	80 91 14 02 	lds	r24, 0x0214
    4410:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    4414:	82 e3       	ldi	r24, 0x32	; 50
    4416:	67 cf       	rjmp	.-306    	; 0x42e6 <readAccelXYZ+0x4e>

00004418 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    4418:	cf 93       	push	r28
    441a:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    441c:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    4420:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    4424:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    4428:	80 e0       	ldi	r24, 0x00	; 0
    442a:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <updateRedLed>
	updateGreenLed(pwm_green);
    442e:	80 91 0d 02 	lds	r24, 0x020D
    4432:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <updateGreenLed>
	updateBlueLed(pwm_blue);
    4436:	80 91 0e 02 	lds	r24, 0x020E
    443a:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <updateBlueLed>

	calibrationCycle = 0;
    443e:	10 92 39 05 	sts	0x0539, r1
    4442:	10 92 38 05 	sts	0x0538, r1
	startCalibration = 1;
    4446:	81 e0       	ldi	r24, 0x01	; 1
    4448:	80 93 76 05 	sts	0x0576, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    444c:	c1 e0       	ldi	r28, 0x01	; 1
    444e:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    4450:	0e 94 4c 21 	call	0x4298	; 0x4298 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    4454:	20 91 38 05 	lds	r18, 0x0538
    4458:	30 91 39 05 	lds	r19, 0x0539
    445c:	21 31       	cpi	r18, 0x11	; 17
    445e:	31 05       	cpc	r19, r1
    4460:	0c f4       	brge	.+2      	; 0x4464 <calibrateSensors+0x4c>
    4462:	35 c1       	rjmp	.+618    	; 0x46ce <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    4464:	80 91 8f 03 	lds	r24, 0x038F
    4468:	90 91 90 03 	lds	r25, 0x0390
    446c:	a0 91 91 03 	lds	r26, 0x0391
    4470:	b0 91 92 03 	lds	r27, 0x0392
    4474:	54 e0       	ldi	r21, 0x04	; 4
    4476:	b6 95       	lsr	r27
    4478:	a7 95       	ror	r26
    447a:	97 95       	ror	r25
    447c:	87 95       	ror	r24
    447e:	5a 95       	dec	r21
    4480:	d1 f7       	brne	.-12     	; 0x4476 <calibrateSensors+0x5e>
    4482:	90 93 78 03 	sts	0x0378, r25
    4486:	80 93 77 03 	sts	0x0377, r24
    448a:	80 91 93 03 	lds	r24, 0x0393
    448e:	90 91 94 03 	lds	r25, 0x0394
    4492:	a0 91 95 03 	lds	r26, 0x0395
    4496:	b0 91 96 03 	lds	r27, 0x0396
    449a:	44 e0       	ldi	r20, 0x04	; 4
    449c:	b6 95       	lsr	r27
    449e:	a7 95       	ror	r26
    44a0:	97 95       	ror	r25
    44a2:	87 95       	ror	r24
    44a4:	4a 95       	dec	r20
    44a6:	d1 f7       	brne	.-12     	; 0x449c <calibrateSensors+0x84>
    44a8:	90 93 7a 03 	sts	0x037A, r25
    44ac:	80 93 79 03 	sts	0x0379, r24
    44b0:	80 91 97 03 	lds	r24, 0x0397
    44b4:	90 91 98 03 	lds	r25, 0x0398
    44b8:	a0 91 99 03 	lds	r26, 0x0399
    44bc:	b0 91 9a 03 	lds	r27, 0x039A
    44c0:	34 e0       	ldi	r19, 0x04	; 4
    44c2:	b6 95       	lsr	r27
    44c4:	a7 95       	ror	r26
    44c6:	97 95       	ror	r25
    44c8:	87 95       	ror	r24
    44ca:	3a 95       	dec	r19
    44cc:	d1 f7       	brne	.-12     	; 0x44c2 <calibrateSensors+0xaa>
    44ce:	90 93 7c 03 	sts	0x037C, r25
    44d2:	80 93 7b 03 	sts	0x037B, r24
    44d6:	80 91 9b 03 	lds	r24, 0x039B
    44da:	90 91 9c 03 	lds	r25, 0x039C
    44de:	a0 91 9d 03 	lds	r26, 0x039D
    44e2:	b0 91 9e 03 	lds	r27, 0x039E
    44e6:	24 e0       	ldi	r18, 0x04	; 4
    44e8:	b6 95       	lsr	r27
    44ea:	a7 95       	ror	r26
    44ec:	97 95       	ror	r25
    44ee:	87 95       	ror	r24
    44f0:	2a 95       	dec	r18
    44f2:	d1 f7       	brne	.-12     	; 0x44e8 <calibrateSensors+0xd0>
    44f4:	90 93 7e 03 	sts	0x037E, r25
    44f8:	80 93 7d 03 	sts	0x037D, r24
    44fc:	80 91 9f 03 	lds	r24, 0x039F
    4500:	90 91 a0 03 	lds	r25, 0x03A0
    4504:	a0 91 a1 03 	lds	r26, 0x03A1
    4508:	b0 91 a2 03 	lds	r27, 0x03A2
    450c:	f4 e0       	ldi	r31, 0x04	; 4
    450e:	b6 95       	lsr	r27
    4510:	a7 95       	ror	r26
    4512:	97 95       	ror	r25
    4514:	87 95       	ror	r24
    4516:	fa 95       	dec	r31
    4518:	d1 f7       	brne	.-12     	; 0x450e <calibrateSensors+0xf6>
    451a:	90 93 80 03 	sts	0x0380, r25
    451e:	80 93 7f 03 	sts	0x037F, r24
    4522:	80 91 a3 03 	lds	r24, 0x03A3
    4526:	90 91 a4 03 	lds	r25, 0x03A4
    452a:	a0 91 a5 03 	lds	r26, 0x03A5
    452e:	b0 91 a6 03 	lds	r27, 0x03A6
    4532:	e4 e0       	ldi	r30, 0x04	; 4
    4534:	b6 95       	lsr	r27
    4536:	a7 95       	ror	r26
    4538:	97 95       	ror	r25
    453a:	87 95       	ror	r24
    453c:	ea 95       	dec	r30
    453e:	d1 f7       	brne	.-12     	; 0x4534 <calibrateSensors+0x11c>
    4540:	90 93 82 03 	sts	0x0382, r25
    4544:	80 93 81 03 	sts	0x0381, r24
    4548:	80 91 a7 03 	lds	r24, 0x03A7
    454c:	90 91 a8 03 	lds	r25, 0x03A8
    4550:	a0 91 a9 03 	lds	r26, 0x03A9
    4554:	b0 91 aa 03 	lds	r27, 0x03AA
    4558:	74 e0       	ldi	r23, 0x04	; 4
    455a:	b6 95       	lsr	r27
    455c:	a7 95       	ror	r26
    455e:	97 95       	ror	r25
    4560:	87 95       	ror	r24
    4562:	7a 95       	dec	r23
    4564:	d1 f7       	brne	.-12     	; 0x455a <calibrateSensors+0x142>
    4566:	90 93 84 03 	sts	0x0384, r25
    456a:	80 93 83 03 	sts	0x0383, r24
    456e:	80 91 ab 03 	lds	r24, 0x03AB
    4572:	90 91 ac 03 	lds	r25, 0x03AC
    4576:	a0 91 ad 03 	lds	r26, 0x03AD
    457a:	b0 91 ae 03 	lds	r27, 0x03AE
    457e:	64 e0       	ldi	r22, 0x04	; 4
    4580:	b6 95       	lsr	r27
    4582:	a7 95       	ror	r26
    4584:	97 95       	ror	r25
    4586:	87 95       	ror	r24
    4588:	6a 95       	dec	r22
    458a:	d1 f7       	brne	.-12     	; 0x4580 <calibrateSensors+0x168>
    458c:	90 93 86 03 	sts	0x0386, r25
    4590:	80 93 85 03 	sts	0x0385, r24
    4594:	80 91 b3 03 	lds	r24, 0x03B3
    4598:	90 91 b4 03 	lds	r25, 0x03B4
    459c:	a0 91 b5 03 	lds	r26, 0x03B5
    45a0:	b0 91 b6 03 	lds	r27, 0x03B6
    45a4:	54 e0       	ldi	r21, 0x04	; 4
    45a6:	b6 95       	lsr	r27
    45a8:	a7 95       	ror	r26
    45aa:	97 95       	ror	r25
    45ac:	87 95       	ror	r24
    45ae:	5a 95       	dec	r21
    45b0:	d1 f7       	brne	.-12     	; 0x45a6 <calibrateSensors+0x18e>
    45b2:	9c 01       	movw	r18, r24
    45b4:	80 91 b7 03 	lds	r24, 0x03B7
    45b8:	90 91 b8 03 	lds	r25, 0x03B8
    45bc:	a0 91 b9 03 	lds	r26, 0x03B9
    45c0:	b0 91 ba 03 	lds	r27, 0x03BA
    45c4:	44 e0       	ldi	r20, 0x04	; 4
    45c6:	b6 95       	lsr	r27
    45c8:	a7 95       	ror	r26
    45ca:	97 95       	ror	r25
    45cc:	87 95       	ror	r24
    45ce:	4a 95       	dec	r20
    45d0:	d1 f7       	brne	.-12     	; 0x45c6 <calibrateSensors+0x1ae>
    45d2:	bc 01       	movw	r22, r24
    45d4:	80 91 bb 03 	lds	r24, 0x03BB
    45d8:	90 91 bc 03 	lds	r25, 0x03BC
    45dc:	a0 91 bd 03 	lds	r26, 0x03BD
    45e0:	b0 91 be 03 	lds	r27, 0x03BE
    45e4:	f4 e0       	ldi	r31, 0x04	; 4
    45e6:	b6 95       	lsr	r27
    45e8:	a7 95       	ror	r26
    45ea:	97 95       	ror	r25
    45ec:	87 95       	ror	r24
    45ee:	fa 95       	dec	r31
    45f0:	d1 f7       	brne	.-12     	; 0x45e6 <calibrateSensors+0x1ce>
    45f2:	ac 01       	movw	r20, r24
    45f4:	80 91 af 03 	lds	r24, 0x03AF
    45f8:	90 91 b0 03 	lds	r25, 0x03B0
    45fc:	a0 91 b1 03 	lds	r26, 0x03B1
    4600:	b0 91 b2 03 	lds	r27, 0x03B2
    4604:	e4 e0       	ldi	r30, 0x04	; 4
    4606:	b6 95       	lsr	r27
    4608:	a7 95       	ror	r26
    460a:	97 95       	ror	r25
    460c:	87 95       	ror	r24
    460e:	ea 95       	dec	r30
    4610:	d1 f7       	brne	.-12     	; 0x4606 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    4612:	80 50       	subi	r24, 0x00	; 0
    4614:	92 40       	sbci	r25, 0x02	; 2
    4616:	90 93 88 03 	sts	0x0388, r25
    461a:	80 93 87 03 	sts	0x0387, r24
    461e:	20 50       	subi	r18, 0x00	; 0
    4620:	32 40       	sbci	r19, 0x02	; 2
    4622:	30 93 8a 03 	sts	0x038A, r19
    4626:	20 93 89 03 	sts	0x0389, r18
    462a:	60 50       	subi	r22, 0x00	; 0
    462c:	72 40       	sbci	r23, 0x02	; 2
    462e:	70 93 8c 03 	sts	0x038C, r23
    4632:	60 93 8b 03 	sts	0x038B, r22
    4636:	40 50       	subi	r20, 0x00	; 0
    4638:	52 40       	sbci	r21, 0x02	; 2
    463a:	50 93 8e 03 	sts	0x038E, r21
    463e:	40 93 8d 03 	sts	0x038D, r20
			}

			accOffsetX = accOffsetXSum>>4;
    4642:	80 91 24 05 	lds	r24, 0x0524
    4646:	90 91 25 05 	lds	r25, 0x0525
    464a:	95 95       	asr	r25
    464c:	87 95       	ror	r24
    464e:	95 95       	asr	r25
    4650:	87 95       	ror	r24
    4652:	95 95       	asr	r25
    4654:	87 95       	ror	r24
    4656:	95 95       	asr	r25
    4658:	87 95       	ror	r24
    465a:	90 93 1f 05 	sts	0x051F, r25
    465e:	80 93 1e 05 	sts	0x051E, r24
			accOffsetY = accOffsetYSum>>4;
    4662:	80 91 26 05 	lds	r24, 0x0526
    4666:	90 91 27 05 	lds	r25, 0x0527
    466a:	95 95       	asr	r25
    466c:	87 95       	ror	r24
    466e:	95 95       	asr	r25
    4670:	87 95       	ror	r24
    4672:	95 95       	asr	r25
    4674:	87 95       	ror	r24
    4676:	95 95       	asr	r25
    4678:	87 95       	ror	r24
    467a:	90 93 21 05 	sts	0x0521, r25
    467e:	80 93 20 05 	sts	0x0520, r24
			accOffsetZ = accOffsetZSum>>4;
    4682:	80 91 28 05 	lds	r24, 0x0528
    4686:	90 91 29 05 	lds	r25, 0x0529
    468a:	95 95       	asr	r25
    468c:	87 95       	ror	r24
    468e:	95 95       	asr	r25
    4690:	87 95       	ror	r24
    4692:	95 95       	asr	r25
    4694:	87 95       	ror	r24
    4696:	95 95       	asr	r25
    4698:	87 95       	ror	r24
    469a:	90 93 23 05 	sts	0x0523, r25
    469e:	80 93 22 05 	sts	0x0522, r24

			startCalibration = 0;
    46a2:	10 92 76 05 	sts	0x0576, r1

		}

	}

	pwm_red = 255;
    46a6:	8f ef       	ldi	r24, 0xFF	; 255
    46a8:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    46ac:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    46b0:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    46b4:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <updateRedLed>
	updateGreenLed(pwm_green);
    46b8:	80 91 0d 02 	lds	r24, 0x020D
    46bc:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <updateGreenLed>
	updateBlueLed(pwm_blue);
    46c0:	80 91 0e 02 	lds	r24, 0x020E
    46c4:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <updateBlueLed>

}
    46c8:	df 91       	pop	r29
    46ca:	cf 91       	pop	r28
    46cc:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    46ce:	80 91 c6 03 	lds	r24, 0x03C6
    46d2:	88 23       	and	r24, r24
    46d4:	09 f4       	brne	.+2      	; 0x46d8 <calibrateSensors+0x2c0>
    46d6:	86 c1       	rjmp	.+780    	; 0x49e4 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    46d8:	10 92 c6 03 	sts	0x03C6, r1

				if(calibrationCycle==0) {		// reset all variables
    46dc:	21 15       	cp	r18, r1
    46de:	31 05       	cpc	r19, r1
    46e0:	09 f4       	brne	.+2      	; 0x46e4 <calibrateSensors+0x2cc>
    46e2:	86 c1       	rjmp	.+780    	; 0x49f0 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    46e4:	80 91 5f 03 	lds	r24, 0x035F
    46e8:	90 91 60 03 	lds	r25, 0x0360
    46ec:	aa 27       	eor	r26, r26
    46ee:	97 fd       	sbrc	r25, 7
    46f0:	a0 95       	com	r26
    46f2:	ba 2f       	mov	r27, r26
    46f4:	40 91 8f 03 	lds	r20, 0x038F
    46f8:	50 91 90 03 	lds	r21, 0x0390
    46fc:	60 91 91 03 	lds	r22, 0x0391
    4700:	70 91 92 03 	lds	r23, 0x0392
    4704:	84 0f       	add	r24, r20
    4706:	95 1f       	adc	r25, r21
    4708:	a6 1f       	adc	r26, r22
    470a:	b7 1f       	adc	r27, r23
    470c:	80 93 8f 03 	sts	0x038F, r24
    4710:	90 93 90 03 	sts	0x0390, r25
    4714:	a0 93 91 03 	sts	0x0391, r26
    4718:	b0 93 92 03 	sts	0x0392, r27
    471c:	80 91 61 03 	lds	r24, 0x0361
    4720:	90 91 62 03 	lds	r25, 0x0362
    4724:	aa 27       	eor	r26, r26
    4726:	97 fd       	sbrc	r25, 7
    4728:	a0 95       	com	r26
    472a:	ba 2f       	mov	r27, r26
    472c:	40 91 93 03 	lds	r20, 0x0393
    4730:	50 91 94 03 	lds	r21, 0x0394
    4734:	60 91 95 03 	lds	r22, 0x0395
    4738:	70 91 96 03 	lds	r23, 0x0396
    473c:	84 0f       	add	r24, r20
    473e:	95 1f       	adc	r25, r21
    4740:	a6 1f       	adc	r26, r22
    4742:	b7 1f       	adc	r27, r23
    4744:	80 93 93 03 	sts	0x0393, r24
    4748:	90 93 94 03 	sts	0x0394, r25
    474c:	a0 93 95 03 	sts	0x0395, r26
    4750:	b0 93 96 03 	sts	0x0396, r27
    4754:	80 91 63 03 	lds	r24, 0x0363
    4758:	90 91 64 03 	lds	r25, 0x0364
    475c:	aa 27       	eor	r26, r26
    475e:	97 fd       	sbrc	r25, 7
    4760:	a0 95       	com	r26
    4762:	ba 2f       	mov	r27, r26
    4764:	40 91 97 03 	lds	r20, 0x0397
    4768:	50 91 98 03 	lds	r21, 0x0398
    476c:	60 91 99 03 	lds	r22, 0x0399
    4770:	70 91 9a 03 	lds	r23, 0x039A
    4774:	84 0f       	add	r24, r20
    4776:	95 1f       	adc	r25, r21
    4778:	a6 1f       	adc	r26, r22
    477a:	b7 1f       	adc	r27, r23
    477c:	80 93 97 03 	sts	0x0397, r24
    4780:	90 93 98 03 	sts	0x0398, r25
    4784:	a0 93 99 03 	sts	0x0399, r26
    4788:	b0 93 9a 03 	sts	0x039A, r27
    478c:	80 91 65 03 	lds	r24, 0x0365
    4790:	90 91 66 03 	lds	r25, 0x0366
    4794:	aa 27       	eor	r26, r26
    4796:	97 fd       	sbrc	r25, 7
    4798:	a0 95       	com	r26
    479a:	ba 2f       	mov	r27, r26
    479c:	40 91 9b 03 	lds	r20, 0x039B
    47a0:	50 91 9c 03 	lds	r21, 0x039C
    47a4:	60 91 9d 03 	lds	r22, 0x039D
    47a8:	70 91 9e 03 	lds	r23, 0x039E
    47ac:	84 0f       	add	r24, r20
    47ae:	95 1f       	adc	r25, r21
    47b0:	a6 1f       	adc	r26, r22
    47b2:	b7 1f       	adc	r27, r23
    47b4:	80 93 9b 03 	sts	0x039B, r24
    47b8:	90 93 9c 03 	sts	0x039C, r25
    47bc:	a0 93 9d 03 	sts	0x039D, r26
    47c0:	b0 93 9e 03 	sts	0x039E, r27
    47c4:	80 91 67 03 	lds	r24, 0x0367
    47c8:	90 91 68 03 	lds	r25, 0x0368
    47cc:	aa 27       	eor	r26, r26
    47ce:	97 fd       	sbrc	r25, 7
    47d0:	a0 95       	com	r26
    47d2:	ba 2f       	mov	r27, r26
    47d4:	40 91 9f 03 	lds	r20, 0x039F
    47d8:	50 91 a0 03 	lds	r21, 0x03A0
    47dc:	60 91 a1 03 	lds	r22, 0x03A1
    47e0:	70 91 a2 03 	lds	r23, 0x03A2
    47e4:	84 0f       	add	r24, r20
    47e6:	95 1f       	adc	r25, r21
    47e8:	a6 1f       	adc	r26, r22
    47ea:	b7 1f       	adc	r27, r23
    47ec:	80 93 9f 03 	sts	0x039F, r24
    47f0:	90 93 a0 03 	sts	0x03A0, r25
    47f4:	a0 93 a1 03 	sts	0x03A1, r26
    47f8:	b0 93 a2 03 	sts	0x03A2, r27
    47fc:	80 91 69 03 	lds	r24, 0x0369
    4800:	90 91 6a 03 	lds	r25, 0x036A
    4804:	aa 27       	eor	r26, r26
    4806:	97 fd       	sbrc	r25, 7
    4808:	a0 95       	com	r26
    480a:	ba 2f       	mov	r27, r26
    480c:	40 91 a3 03 	lds	r20, 0x03A3
    4810:	50 91 a4 03 	lds	r21, 0x03A4
    4814:	60 91 a5 03 	lds	r22, 0x03A5
    4818:	70 91 a6 03 	lds	r23, 0x03A6
    481c:	84 0f       	add	r24, r20
    481e:	95 1f       	adc	r25, r21
    4820:	a6 1f       	adc	r26, r22
    4822:	b7 1f       	adc	r27, r23
    4824:	80 93 a3 03 	sts	0x03A3, r24
    4828:	90 93 a4 03 	sts	0x03A4, r25
    482c:	a0 93 a5 03 	sts	0x03A5, r26
    4830:	b0 93 a6 03 	sts	0x03A6, r27
    4834:	80 91 6b 03 	lds	r24, 0x036B
    4838:	90 91 6c 03 	lds	r25, 0x036C
    483c:	aa 27       	eor	r26, r26
    483e:	97 fd       	sbrc	r25, 7
    4840:	a0 95       	com	r26
    4842:	ba 2f       	mov	r27, r26
    4844:	40 91 a7 03 	lds	r20, 0x03A7
    4848:	50 91 a8 03 	lds	r21, 0x03A8
    484c:	60 91 a9 03 	lds	r22, 0x03A9
    4850:	70 91 aa 03 	lds	r23, 0x03AA
    4854:	84 0f       	add	r24, r20
    4856:	95 1f       	adc	r25, r21
    4858:	a6 1f       	adc	r26, r22
    485a:	b7 1f       	adc	r27, r23
    485c:	80 93 a7 03 	sts	0x03A7, r24
    4860:	90 93 a8 03 	sts	0x03A8, r25
    4864:	a0 93 a9 03 	sts	0x03A9, r26
    4868:	b0 93 aa 03 	sts	0x03AA, r27
    486c:	80 91 6d 03 	lds	r24, 0x036D
    4870:	90 91 6e 03 	lds	r25, 0x036E
    4874:	aa 27       	eor	r26, r26
    4876:	97 fd       	sbrc	r25, 7
    4878:	a0 95       	com	r26
    487a:	ba 2f       	mov	r27, r26
    487c:	40 91 ab 03 	lds	r20, 0x03AB
    4880:	50 91 ac 03 	lds	r21, 0x03AC
    4884:	60 91 ad 03 	lds	r22, 0x03AD
    4888:	70 91 ae 03 	lds	r23, 0x03AE
    488c:	84 0f       	add	r24, r20
    488e:	95 1f       	adc	r25, r21
    4890:	a6 1f       	adc	r26, r22
    4892:	b7 1f       	adc	r27, r23
    4894:	80 93 ab 03 	sts	0x03AB, r24
    4898:	90 93 ac 03 	sts	0x03AC, r25
    489c:	a0 93 ad 03 	sts	0x03AD, r26
    48a0:	b0 93 ae 03 	sts	0x03AE, r27
    48a4:	80 91 6f 03 	lds	r24, 0x036F
    48a8:	90 91 70 03 	lds	r25, 0x0370
    48ac:	aa 27       	eor	r26, r26
    48ae:	97 fd       	sbrc	r25, 7
    48b0:	a0 95       	com	r26
    48b2:	ba 2f       	mov	r27, r26
    48b4:	40 91 af 03 	lds	r20, 0x03AF
    48b8:	50 91 b0 03 	lds	r21, 0x03B0
    48bc:	60 91 b1 03 	lds	r22, 0x03B1
    48c0:	70 91 b2 03 	lds	r23, 0x03B2
    48c4:	84 0f       	add	r24, r20
    48c6:	95 1f       	adc	r25, r21
    48c8:	a6 1f       	adc	r26, r22
    48ca:	b7 1f       	adc	r27, r23
    48cc:	80 93 af 03 	sts	0x03AF, r24
    48d0:	90 93 b0 03 	sts	0x03B0, r25
    48d4:	a0 93 b1 03 	sts	0x03B1, r26
    48d8:	b0 93 b2 03 	sts	0x03B2, r27
    48dc:	80 91 71 03 	lds	r24, 0x0371
    48e0:	90 91 72 03 	lds	r25, 0x0372
    48e4:	aa 27       	eor	r26, r26
    48e6:	97 fd       	sbrc	r25, 7
    48e8:	a0 95       	com	r26
    48ea:	ba 2f       	mov	r27, r26
    48ec:	40 91 b3 03 	lds	r20, 0x03B3
    48f0:	50 91 b4 03 	lds	r21, 0x03B4
    48f4:	60 91 b5 03 	lds	r22, 0x03B5
    48f8:	70 91 b6 03 	lds	r23, 0x03B6
    48fc:	84 0f       	add	r24, r20
    48fe:	95 1f       	adc	r25, r21
    4900:	a6 1f       	adc	r26, r22
    4902:	b7 1f       	adc	r27, r23
    4904:	80 93 b3 03 	sts	0x03B3, r24
    4908:	90 93 b4 03 	sts	0x03B4, r25
    490c:	a0 93 b5 03 	sts	0x03B5, r26
    4910:	b0 93 b6 03 	sts	0x03B6, r27
    4914:	80 91 73 03 	lds	r24, 0x0373
    4918:	90 91 74 03 	lds	r25, 0x0374
    491c:	aa 27       	eor	r26, r26
    491e:	97 fd       	sbrc	r25, 7
    4920:	a0 95       	com	r26
    4922:	ba 2f       	mov	r27, r26
    4924:	40 91 b7 03 	lds	r20, 0x03B7
    4928:	50 91 b8 03 	lds	r21, 0x03B8
    492c:	60 91 b9 03 	lds	r22, 0x03B9
    4930:	70 91 ba 03 	lds	r23, 0x03BA
    4934:	84 0f       	add	r24, r20
    4936:	95 1f       	adc	r25, r21
    4938:	a6 1f       	adc	r26, r22
    493a:	b7 1f       	adc	r27, r23
    493c:	80 93 b7 03 	sts	0x03B7, r24
    4940:	90 93 b8 03 	sts	0x03B8, r25
    4944:	a0 93 b9 03 	sts	0x03B9, r26
    4948:	b0 93 ba 03 	sts	0x03BA, r27
    494c:	80 91 75 03 	lds	r24, 0x0375
    4950:	90 91 76 03 	lds	r25, 0x0376
    4954:	aa 27       	eor	r26, r26
    4956:	97 fd       	sbrc	r25, 7
    4958:	a0 95       	com	r26
    495a:	ba 2f       	mov	r27, r26
    495c:	40 91 bb 03 	lds	r20, 0x03BB
    4960:	50 91 bc 03 	lds	r21, 0x03BC
    4964:	60 91 bd 03 	lds	r22, 0x03BD
    4968:	70 91 be 03 	lds	r23, 0x03BE
    496c:	84 0f       	add	r24, r20
    496e:	95 1f       	adc	r25, r21
    4970:	a6 1f       	adc	r26, r22
    4972:	b7 1f       	adc	r27, r23
    4974:	80 93 bb 03 	sts	0x03BB, r24
    4978:	90 93 bc 03 	sts	0x03BC, r25
    497c:	a0 93 bd 03 	sts	0x03BD, r26
    4980:	b0 93 be 03 	sts	0x03BE, r27
				}

				accOffsetXSum += accX;
    4984:	80 91 24 05 	lds	r24, 0x0524
    4988:	90 91 25 05 	lds	r25, 0x0525
    498c:	40 91 18 05 	lds	r20, 0x0518
    4990:	50 91 19 05 	lds	r21, 0x0519
    4994:	84 0f       	add	r24, r20
    4996:	95 1f       	adc	r25, r21
    4998:	90 93 25 05 	sts	0x0525, r25
    499c:	80 93 24 05 	sts	0x0524, r24
				accOffsetYSum += accY;
    49a0:	80 91 26 05 	lds	r24, 0x0526
    49a4:	90 91 27 05 	lds	r25, 0x0527
    49a8:	40 91 1a 05 	lds	r20, 0x051A
    49ac:	50 91 1b 05 	lds	r21, 0x051B
    49b0:	84 0f       	add	r24, r20
    49b2:	95 1f       	adc	r25, r21
    49b4:	90 93 27 05 	sts	0x0527, r25
    49b8:	80 93 26 05 	sts	0x0526, r24
				accOffsetZSum += accZ;
    49bc:	80 91 28 05 	lds	r24, 0x0528
    49c0:	90 91 29 05 	lds	r25, 0x0529
    49c4:	40 91 1c 05 	lds	r20, 0x051C
    49c8:	50 91 1d 05 	lds	r21, 0x051D
    49cc:	84 0f       	add	r24, r20
    49ce:	95 1f       	adc	r25, r21
    49d0:	90 93 29 05 	sts	0x0529, r25
    49d4:	80 93 28 05 	sts	0x0528, r24

				calibrationCycle++;
    49d8:	2f 5f       	subi	r18, 0xFF	; 255
    49da:	3f 4f       	sbci	r19, 0xFF	; 255
    49dc:	30 93 39 05 	sts	0x0539, r19
    49e0:	20 93 38 05 	sts	0x0538, r18
    49e4:	80 91 76 05 	lds	r24, 0x0576
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    49e8:	88 23       	and	r24, r24
    49ea:	09 f0       	breq	.+2      	; 0x49ee <calibrateSensors+0x5d6>
    49ec:	31 cd       	rjmp	.-1438   	; 0x4450 <calibrateSensors+0x38>
    49ee:	5b ce       	rjmp	.-842    	; 0x46a6 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    49f0:	10 92 8f 03 	sts	0x038F, r1
    49f4:	10 92 90 03 	sts	0x0390, r1
    49f8:	10 92 91 03 	sts	0x0391, r1
    49fc:	10 92 92 03 	sts	0x0392, r1
						proximityOffset[i] = 0;
    4a00:	10 92 78 03 	sts	0x0378, r1
    4a04:	10 92 77 03 	sts	0x0377, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4a08:	10 92 93 03 	sts	0x0393, r1
    4a0c:	10 92 94 03 	sts	0x0394, r1
    4a10:	10 92 95 03 	sts	0x0395, r1
    4a14:	10 92 96 03 	sts	0x0396, r1
						proximityOffset[i] = 0;
    4a18:	10 92 7a 03 	sts	0x037A, r1
    4a1c:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4a20:	10 92 97 03 	sts	0x0397, r1
    4a24:	10 92 98 03 	sts	0x0398, r1
    4a28:	10 92 99 03 	sts	0x0399, r1
    4a2c:	10 92 9a 03 	sts	0x039A, r1
						proximityOffset[i] = 0;
    4a30:	10 92 7c 03 	sts	0x037C, r1
    4a34:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4a38:	10 92 9b 03 	sts	0x039B, r1
    4a3c:	10 92 9c 03 	sts	0x039C, r1
    4a40:	10 92 9d 03 	sts	0x039D, r1
    4a44:	10 92 9e 03 	sts	0x039E, r1
						proximityOffset[i] = 0;
    4a48:	10 92 7e 03 	sts	0x037E, r1
    4a4c:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4a50:	10 92 9f 03 	sts	0x039F, r1
    4a54:	10 92 a0 03 	sts	0x03A0, r1
    4a58:	10 92 a1 03 	sts	0x03A1, r1
    4a5c:	10 92 a2 03 	sts	0x03A2, r1
						proximityOffset[i] = 0;
    4a60:	10 92 80 03 	sts	0x0380, r1
    4a64:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4a68:	10 92 a3 03 	sts	0x03A3, r1
    4a6c:	10 92 a4 03 	sts	0x03A4, r1
    4a70:	10 92 a5 03 	sts	0x03A5, r1
    4a74:	10 92 a6 03 	sts	0x03A6, r1
						proximityOffset[i] = 0;
    4a78:	10 92 82 03 	sts	0x0382, r1
    4a7c:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4a80:	10 92 a7 03 	sts	0x03A7, r1
    4a84:	10 92 a8 03 	sts	0x03A8, r1
    4a88:	10 92 a9 03 	sts	0x03A9, r1
    4a8c:	10 92 aa 03 	sts	0x03AA, r1
						proximityOffset[i] = 0;
    4a90:	10 92 84 03 	sts	0x0384, r1
    4a94:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4a98:	10 92 ab 03 	sts	0x03AB, r1
    4a9c:	10 92 ac 03 	sts	0x03AC, r1
    4aa0:	10 92 ad 03 	sts	0x03AD, r1
    4aa4:	10 92 ae 03 	sts	0x03AE, r1
						proximityOffset[i] = 0;
    4aa8:	10 92 86 03 	sts	0x0386, r1
    4aac:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4ab0:	10 92 af 03 	sts	0x03AF, r1
    4ab4:	10 92 b0 03 	sts	0x03B0, r1
    4ab8:	10 92 b1 03 	sts	0x03B1, r1
    4abc:	10 92 b2 03 	sts	0x03B2, r1
						proximityOffset[i] = 0;
    4ac0:	10 92 88 03 	sts	0x0388, r1
    4ac4:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4ac8:	10 92 b3 03 	sts	0x03B3, r1
    4acc:	10 92 b4 03 	sts	0x03B4, r1
    4ad0:	10 92 b5 03 	sts	0x03B5, r1
    4ad4:	10 92 b6 03 	sts	0x03B6, r1
						proximityOffset[i] = 0;
    4ad8:	10 92 8a 03 	sts	0x038A, r1
    4adc:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4ae0:	10 92 b7 03 	sts	0x03B7, r1
    4ae4:	10 92 b8 03 	sts	0x03B8, r1
    4ae8:	10 92 b9 03 	sts	0x03B9, r1
    4aec:	10 92 ba 03 	sts	0x03BA, r1
						proximityOffset[i] = 0;
    4af0:	10 92 8c 03 	sts	0x038C, r1
    4af4:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4af8:	10 92 bb 03 	sts	0x03BB, r1
    4afc:	10 92 bc 03 	sts	0x03BC, r1
    4b00:	10 92 bd 03 	sts	0x03BD, r1
    4b04:	10 92 be 03 	sts	0x03BE, r1
						proximityOffset[i] = 0;
    4b08:	10 92 8e 03 	sts	0x038E, r1
    4b0c:	10 92 8d 03 	sts	0x038D, r1
					}
					accOffsetXSum = 0;
    4b10:	10 92 25 05 	sts	0x0525, r1
    4b14:	10 92 24 05 	sts	0x0524, r1
					accOffsetYSum = 0;
    4b18:	10 92 27 05 	sts	0x0527, r1
    4b1c:	10 92 26 05 	sts	0x0526, r1
					accOffsetZSum = 0;
    4b20:	10 92 29 05 	sts	0x0529, r1
    4b24:	10 92 28 05 	sts	0x0528, r1

					calibrationCycle++;
    4b28:	d0 93 39 05 	sts	0x0539, r29
    4b2c:	c0 93 38 05 	sts	0x0538, r28
    4b30:	80 91 76 05 	lds	r24, 0x0576

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    4b34:	59 cf       	rjmp	.-334    	; 0x49e8 <calibrateSensors+0x5d0>

00004b36 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    4b36:	80 91 17 05 	lds	r24, 0x0517
    4b3a:	88 23       	and	r24, r24
    4b3c:	79 f0       	breq	.+30     	; 0x4b5c <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    4b3e:	81 30       	cpi	r24, 0x01	; 1
    4b40:	11 f1       	breq	.+68     	; 0x4b86 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    4b42:	10 92 19 05 	sts	0x0519, r1
    4b46:	10 92 18 05 	sts	0x0518, r1
		accY = 0;
    4b4a:	10 92 1b 05 	sts	0x051B, r1
    4b4e:	10 92 1a 05 	sts	0x051A, r1
		accZ = 0;
    4b52:	10 92 1d 05 	sts	0x051D, r1
    4b56:	10 92 1c 05 	sts	0x051C, r1
    4b5a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    4b5c:	80 91 14 02 	lds	r24, 0x0214
    4b60:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    4b6a:	80 91 14 02 	lds	r24, 0x0214
    4b6e:	8f 5f       	subi	r24, 0xFF	; 255
    4b70:	0e 94 0f 14 	call	0x281e	; 0x281e <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    4b74:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    4b78:	80 93 2d 05 	sts	0x052D, r24
    4b7c:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    4b80:	80 93 2e 05 	sts	0x052E, r24
    4b84:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    4b86:	80 91 14 02 	lds	r24, 0x0214
    4b8a:	0e 94 c2 13 	call	0x2784	; 0x2784 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    4b8e:	82 e3       	ldi	r24, 0x32	; 50
    4b90:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    4b94:	80 91 14 02 	lds	r24, 0x0214
    4b98:	8f 5f       	subi	r24, 0xFF	; 255
    4b9a:	0e 94 0f 14 	call	0x281e	; 0x281e <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    4b9e:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    4ba2:	80 93 2d 05 	sts	0x052D, r24
    4ba6:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    4baa:	80 93 2e 05 	sts	0x052E, r24
    4bae:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    4bb2:	80 93 2f 05 	sts	0x052F, r24
    4bb6:	08 95       	ret

00004bb8 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    4bb8:	80 91 17 05 	lds	r24, 0x0517
    4bbc:	88 23       	and	r24, r24
    4bbe:	09 f0       	breq	.+2      	; 0x4bc2 <readAccelXYZ_2+0xa>
    4bc0:	4e c0       	rjmp	.+156    	; 0x4c5e <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    4bc2:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    4bc6:	80 93 2f 05 	sts	0x052F, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    4bca:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    4bce:	80 93 30 05 	sts	0x0530, r24
    4bd2:	0e 94 4f 14 	call	0x289e	; 0x289e <i2c_readAck>
    4bd6:	80 93 31 05 	sts	0x0531, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    4bda:	0e 94 59 14 	call	0x28b2	; 0x28b2 <i2c_readNak>
    4bde:	80 93 32 05 	sts	0x0532, r24
		i2c_stop();													// set stop conditon = release bus
    4be2:	0e 94 35 14 	call	0x286a	; 0x286a <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    4be6:	80 91 76 05 	lds	r24, 0x0576
    4bea:	88 23       	and	r24, r24
    4bec:	09 f4       	brne	.+2      	; 0x4bf0 <readAccelXYZ_2+0x38>
    4bee:	47 c0       	rjmp	.+142    	; 0x4c7e <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    4bf0:	80 91 2e 05 	lds	r24, 0x052E
    4bf4:	99 27       	eor	r25, r25
    4bf6:	87 fd       	sbrc	r24, 7
    4bf8:	90 95       	com	r25
    4bfa:	98 2f       	mov	r25, r24
    4bfc:	88 27       	eor	r24, r24
    4bfe:	20 91 2d 05 	lds	r18, 0x052D
    4c02:	33 27       	eor	r19, r19
    4c04:	27 fd       	sbrc	r18, 7
    4c06:	30 95       	com	r19
    4c08:	82 2b       	or	r24, r18
    4c0a:	93 2b       	or	r25, r19
    4c0c:	90 93 19 05 	sts	0x0519, r25
    4c10:	80 93 18 05 	sts	0x0518, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    4c14:	80 91 30 05 	lds	r24, 0x0530
    4c18:	99 27       	eor	r25, r25
    4c1a:	87 fd       	sbrc	r24, 7
    4c1c:	90 95       	com	r25
    4c1e:	98 2f       	mov	r25, r24
    4c20:	88 27       	eor	r24, r24
    4c22:	20 91 2f 05 	lds	r18, 0x052F
    4c26:	33 27       	eor	r19, r19
    4c28:	27 fd       	sbrc	r18, 7
    4c2a:	30 95       	com	r19
    4c2c:	82 2b       	or	r24, r18
    4c2e:	93 2b       	or	r25, r19
    4c30:	90 93 1b 05 	sts	0x051B, r25
    4c34:	80 93 1a 05 	sts	0x051A, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    4c38:	80 91 32 05 	lds	r24, 0x0532
    4c3c:	99 27       	eor	r25, r25
    4c3e:	87 fd       	sbrc	r24, 7
    4c40:	90 95       	com	r25
    4c42:	98 2f       	mov	r25, r24
    4c44:	88 27       	eor	r24, r24
    4c46:	20 91 31 05 	lds	r18, 0x0531
    4c4a:	33 27       	eor	r19, r19
    4c4c:	27 fd       	sbrc	r18, 7
    4c4e:	30 95       	com	r19
    4c50:	82 2b       	or	r24, r18
    4c52:	93 2b       	or	r25, r19
    4c54:	90 93 1d 05 	sts	0x051D, r25
    4c58:	80 93 1c 05 	sts	0x051C, r24
    4c5c:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    4c5e:	81 30       	cpi	r24, 0x01	; 1
    4c60:	09 f4       	brne	.+2      	; 0x4c64 <readAccelXYZ_2+0xac>
    4c62:	b3 cf       	rjmp	.-154    	; 0x4bca <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    4c64:	10 92 19 05 	sts	0x0519, r1
    4c68:	10 92 18 05 	sts	0x0518, r1
		accY = 0;
    4c6c:	10 92 1b 05 	sts	0x051B, r1
    4c70:	10 92 1a 05 	sts	0x051A, r1
		accZ = 0;
    4c74:	10 92 1d 05 	sts	0x051D, r1
    4c78:	10 92 1c 05 	sts	0x051C, r1
    4c7c:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    4c7e:	80 91 2e 05 	lds	r24, 0x052E
    4c82:	99 27       	eor	r25, r25
    4c84:	87 fd       	sbrc	r24, 7
    4c86:	90 95       	com	r25
    4c88:	98 2f       	mov	r25, r24
    4c8a:	88 27       	eor	r24, r24
    4c8c:	20 91 2d 05 	lds	r18, 0x052D
    4c90:	33 27       	eor	r19, r19
    4c92:	27 fd       	sbrc	r18, 7
    4c94:	30 95       	com	r19
    4c96:	82 2b       	or	r24, r18
    4c98:	93 2b       	or	r25, r19
    4c9a:	20 91 1e 05 	lds	r18, 0x051E
    4c9e:	30 91 1f 05 	lds	r19, 0x051F
    4ca2:	82 1b       	sub	r24, r18
    4ca4:	93 0b       	sbc	r25, r19
    4ca6:	90 93 19 05 	sts	0x0519, r25
    4caa:	80 93 18 05 	sts	0x0518, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    4cae:	80 91 30 05 	lds	r24, 0x0530
    4cb2:	99 27       	eor	r25, r25
    4cb4:	87 fd       	sbrc	r24, 7
    4cb6:	90 95       	com	r25
    4cb8:	98 2f       	mov	r25, r24
    4cba:	88 27       	eor	r24, r24
    4cbc:	20 91 2f 05 	lds	r18, 0x052F
    4cc0:	33 27       	eor	r19, r19
    4cc2:	27 fd       	sbrc	r18, 7
    4cc4:	30 95       	com	r19
    4cc6:	82 2b       	or	r24, r18
    4cc8:	93 2b       	or	r25, r19
    4cca:	20 91 20 05 	lds	r18, 0x0520
    4cce:	30 91 21 05 	lds	r19, 0x0521
    4cd2:	82 1b       	sub	r24, r18
    4cd4:	93 0b       	sbc	r25, r19
    4cd6:	90 93 1b 05 	sts	0x051B, r25
    4cda:	80 93 1a 05 	sts	0x051A, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    4cde:	80 91 32 05 	lds	r24, 0x0532
    4ce2:	99 27       	eor	r25, r25
    4ce4:	87 fd       	sbrc	r24, 7
    4ce6:	90 95       	com	r25
    4ce8:	98 2f       	mov	r25, r24
    4cea:	88 27       	eor	r24, r24
    4cec:	20 91 31 05 	lds	r18, 0x0531
    4cf0:	33 27       	eor	r19, r19
    4cf2:	27 fd       	sbrc	r18, 7
    4cf4:	30 95       	com	r19
    4cf6:	82 2b       	or	r24, r18
    4cf8:	93 2b       	or	r25, r19
    4cfa:	20 91 22 05 	lds	r18, 0x0522
    4cfe:	30 91 23 05 	lds	r19, 0x0523
    4d02:	82 1b       	sub	r24, r18
    4d04:	93 0b       	sbc	r25, r19
    4d06:	90 93 1d 05 	sts	0x051D, r25
    4d0a:	80 93 1c 05 	sts	0x051C, r24
    4d0e:	08 95       	ret

00004d10 <computeAngle>:

	}

}

void computeAngle() {
    4d10:	ef 92       	push	r14
    4d12:	ff 92       	push	r15
    4d14:	0f 93       	push	r16
    4d16:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    4d18:	80 91 1c 05 	lds	r24, 0x051C
    4d1c:	90 91 1d 05 	lds	r25, 0x051D
    4d20:	97 fd       	sbrc	r25, 7
    4d22:	5b c0       	rjmp	.+182    	; 0x4dda <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    4d24:	80 31       	cpi	r24, 0x10	; 16
    4d26:	91 05       	cpc	r25, r1
    4d28:	08 f0       	brcs	.+2      	; 0x4d2c <computeAngle+0x1c>
    4d2a:	42 c0       	rjmp	.+132    	; 0x4db0 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    4d2c:	81 e0       	ldi	r24, 0x01	; 1
    4d2e:	80 93 16 02 	sts	0x0216, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    4d32:	90 91 15 02 	lds	r25, 0x0215
    4d36:	98 17       	cp	r25, r24
    4d38:	09 f4       	brne	.+2      	; 0x4d3c <computeAngle+0x2c>
    4d3a:	42 c0       	rjmp	.+132    	; 0x4dc0 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    4d3c:	10 92 2c 05 	sts	0x052C, r1
	}
	prevPosition = currPosition;
    4d40:	80 93 15 02 	sts	0x0215, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2((float)accX, (float)accY)*RAD_2_DEG);
    4d44:	60 91 18 05 	lds	r22, 0x0518
    4d48:	70 91 19 05 	lds	r23, 0x0519
    4d4c:	88 27       	eor	r24, r24
    4d4e:	77 fd       	sbrc	r23, 7
    4d50:	80 95       	com	r24
    4d52:	98 2f       	mov	r25, r24
    4d54:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__floatsisf>
    4d58:	7b 01       	movw	r14, r22
    4d5a:	8c 01       	movw	r16, r24
    4d5c:	60 91 1a 05 	lds	r22, 0x051A
    4d60:	70 91 1b 05 	lds	r23, 0x051B
    4d64:	88 27       	eor	r24, r24
    4d66:	77 fd       	sbrc	r23, 7
    4d68:	80 95       	com	r24
    4d6a:	98 2f       	mov	r25, r24
    4d6c:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__floatsisf>
    4d70:	9b 01       	movw	r18, r22
    4d72:	ac 01       	movw	r20, r24
    4d74:	c8 01       	movw	r24, r16
    4d76:	b7 01       	movw	r22, r14
    4d78:	0e 94 28 2b 	call	0x5650	; 0x5650 <atan2>
    4d7c:	21 ee       	ldi	r18, 0xE1	; 225
    4d7e:	3e e2       	ldi	r19, 0x2E	; 46
    4d80:	45 e6       	ldi	r20, 0x65	; 101
    4d82:	52 e4       	ldi	r21, 0x42	; 66
    4d84:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <__mulsf3>
    4d88:	0e 94 4e 28 	call	0x509c	; 0x509c <__fixsfsi>
    4d8c:	9b 01       	movw	r18, r22
    4d8e:	70 93 2b 05 	sts	0x052B, r23
    4d92:	60 93 2a 05 	sts	0x052A, r22

	if(currentAngle < 0) {
    4d96:	77 ff       	sbrs	r23, 7
    4d98:	06 c0       	rjmp	.+12     	; 0x4da6 <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    4d9a:	28 59       	subi	r18, 0x98	; 152
    4d9c:	3e 4f       	sbci	r19, 0xFE	; 254
    4d9e:	30 93 2b 05 	sts	0x052B, r19
    4da2:	20 93 2a 05 	sts	0x052A, r18
	}

}
    4da6:	1f 91       	pop	r17
    4da8:	0f 91       	pop	r16
    4daa:	ff 90       	pop	r15
    4dac:	ef 90       	pop	r14
    4dae:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    4db0:	10 92 16 02 	sts	0x0216, r1
    4db4:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    4db6:	90 91 15 02 	lds	r25, 0x0215
    4dba:	98 17       	cp	r25, r24
    4dbc:	09 f0       	breq	.+2      	; 0x4dc0 <computeAngle+0xb0>
    4dbe:	be cf       	rjmp	.-132    	; 0x4d3c <computeAngle+0x2c>
		timesInSamePos++;
    4dc0:	90 91 2c 05 	lds	r25, 0x052C
    4dc4:	9f 5f       	subi	r25, 0xFF	; 255
    4dc6:	90 93 2c 05 	sts	0x052C, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    4dca:	95 30       	cpi	r25, 0x05	; 5
    4dcc:	08 f4       	brcc	.+2      	; 0x4dd0 <computeAngle+0xc0>
    4dce:	b8 cf       	rjmp	.-144    	; 0x4d40 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    4dd0:	10 92 2c 05 	sts	0x052C, r1
			robotPosition = currPosition;
    4dd4:	80 93 17 02 	sts	0x0217, r24
    4dd8:	b3 cf       	rjmp	.-154    	; 0x4d40 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    4dda:	90 95       	com	r25
    4ddc:	81 95       	neg	r24
    4dde:	9f 4f       	sbci	r25, 0xFF	; 255
    4de0:	a1 cf       	rjmp	.-190    	; 0x4d24 <computeAngle+0x14>

00004de2 <__mulsf3>:
    4de2:	a0 e2       	ldi	r26, 0x20	; 32
    4de4:	b0 e0       	ldi	r27, 0x00	; 0
    4de6:	e7 ef       	ldi	r30, 0xF7	; 247
    4de8:	f6 e2       	ldi	r31, 0x26	; 38
    4dea:	0c 94 86 2a 	jmp	0x550c	; 0x550c <__prologue_saves__+0x4>
    4dee:	69 83       	std	Y+1, r22	; 0x01
    4df0:	7a 83       	std	Y+2, r23	; 0x02
    4df2:	8b 83       	std	Y+3, r24	; 0x03
    4df4:	9c 83       	std	Y+4, r25	; 0x04
    4df6:	2d 83       	std	Y+5, r18	; 0x05
    4df8:	3e 83       	std	Y+6, r19	; 0x06
    4dfa:	4f 83       	std	Y+7, r20	; 0x07
    4dfc:	58 87       	std	Y+8, r21	; 0x08
    4dfe:	99 e0       	ldi	r25, 0x09	; 9
    4e00:	e9 2e       	mov	r14, r25
    4e02:	f1 2c       	mov	r15, r1
    4e04:	ec 0e       	add	r14, r28
    4e06:	fd 1e       	adc	r15, r29
    4e08:	b7 01       	movw	r22, r14
    4e0a:	ce 01       	movw	r24, r28
    4e0c:	01 96       	adiw	r24, 0x01	; 1
    4e0e:	0e 94 ce 29 	call	0x539c	; 0x539c <__unpack_f>
    4e12:	8e 01       	movw	r16, r28
    4e14:	0f 5e       	subi	r16, 0xEF	; 239
    4e16:	1f 4f       	sbci	r17, 0xFF	; 255
    4e18:	b8 01       	movw	r22, r16
    4e1a:	ce 01       	movw	r24, r28
    4e1c:	05 96       	adiw	r24, 0x05	; 5
    4e1e:	0e 94 ce 29 	call	0x539c	; 0x539c <__unpack_f>
    4e22:	99 85       	ldd	r25, Y+9	; 0x09
    4e24:	92 30       	cpi	r25, 0x02	; 2
    4e26:	88 f0       	brcs	.+34     	; 0x4e4a <__mulsf3+0x68>
    4e28:	89 89       	ldd	r24, Y+17	; 0x11
    4e2a:	82 30       	cpi	r24, 0x02	; 2
    4e2c:	c0 f0       	brcs	.+48     	; 0x4e5e <__mulsf3+0x7c>
    4e2e:	94 30       	cpi	r25, 0x04	; 4
    4e30:	19 f4       	brne	.+6      	; 0x4e38 <__mulsf3+0x56>
    4e32:	82 30       	cpi	r24, 0x02	; 2
    4e34:	29 f0       	breq	.+10     	; 0x4e40 <__mulsf3+0x5e>
    4e36:	09 c0       	rjmp	.+18     	; 0x4e4a <__mulsf3+0x68>
    4e38:	84 30       	cpi	r24, 0x04	; 4
    4e3a:	29 f4       	brne	.+10     	; 0x4e46 <__mulsf3+0x64>
    4e3c:	92 30       	cpi	r25, 0x02	; 2
    4e3e:	79 f4       	brne	.+30     	; 0x4e5e <__mulsf3+0x7c>
    4e40:	68 e1       	ldi	r22, 0x18	; 24
    4e42:	72 e0       	ldi	r23, 0x02	; 2
    4e44:	c6 c0       	rjmp	.+396    	; 0x4fd2 <__mulsf3+0x1f0>
    4e46:	92 30       	cpi	r25, 0x02	; 2
    4e48:	41 f4       	brne	.+16     	; 0x4e5a <__mulsf3+0x78>
    4e4a:	20 e0       	ldi	r18, 0x00	; 0
    4e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e4e:	8a 89       	ldd	r24, Y+18	; 0x12
    4e50:	98 13       	cpse	r25, r24
    4e52:	21 e0       	ldi	r18, 0x01	; 1
    4e54:	2a 87       	std	Y+10, r18	; 0x0a
    4e56:	b7 01       	movw	r22, r14
    4e58:	bc c0       	rjmp	.+376    	; 0x4fd2 <__mulsf3+0x1f0>
    4e5a:	82 30       	cpi	r24, 0x02	; 2
    4e5c:	41 f4       	brne	.+16     	; 0x4e6e <__mulsf3+0x8c>
    4e5e:	20 e0       	ldi	r18, 0x00	; 0
    4e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e62:	8a 89       	ldd	r24, Y+18	; 0x12
    4e64:	98 13       	cpse	r25, r24
    4e66:	21 e0       	ldi	r18, 0x01	; 1
    4e68:	2a 8b       	std	Y+18, r18	; 0x12
    4e6a:	b8 01       	movw	r22, r16
    4e6c:	b2 c0       	rjmp	.+356    	; 0x4fd2 <__mulsf3+0x1f0>
    4e6e:	cd 84       	ldd	r12, Y+13	; 0x0d
    4e70:	de 84       	ldd	r13, Y+14	; 0x0e
    4e72:	ef 84       	ldd	r14, Y+15	; 0x0f
    4e74:	f8 88       	ldd	r15, Y+16	; 0x10
    4e76:	0d 89       	ldd	r16, Y+21	; 0x15
    4e78:	1e 89       	ldd	r17, Y+22	; 0x16
    4e7a:	2f 89       	ldd	r18, Y+23	; 0x17
    4e7c:	38 8d       	ldd	r19, Y+24	; 0x18
    4e7e:	88 24       	eor	r8, r8
    4e80:	99 24       	eor	r9, r9
    4e82:	54 01       	movw	r10, r8
    4e84:	40 e0       	ldi	r20, 0x00	; 0
    4e86:	50 e0       	ldi	r21, 0x00	; 0
    4e88:	60 e0       	ldi	r22, 0x00	; 0
    4e8a:	70 e0       	ldi	r23, 0x00	; 0
    4e8c:	44 24       	eor	r4, r4
    4e8e:	55 24       	eor	r5, r5
    4e90:	32 01       	movw	r6, r4
    4e92:	e0 e0       	ldi	r30, 0x00	; 0
    4e94:	f0 e0       	ldi	r31, 0x00	; 0
    4e96:	c6 01       	movw	r24, r12
    4e98:	81 70       	andi	r24, 0x01	; 1
    4e9a:	90 70       	andi	r25, 0x00	; 0
    4e9c:	89 2b       	or	r24, r25
    4e9e:	d9 f0       	breq	.+54     	; 0x4ed6 <__mulsf3+0xf4>
    4ea0:	80 0e       	add	r8, r16
    4ea2:	91 1e       	adc	r9, r17
    4ea4:	a2 1e       	adc	r10, r18
    4ea6:	b3 1e       	adc	r11, r19
    4ea8:	db 01       	movw	r26, r22
    4eaa:	ca 01       	movw	r24, r20
    4eac:	84 0d       	add	r24, r4
    4eae:	95 1d       	adc	r25, r5
    4eb0:	a6 1d       	adc	r26, r6
    4eb2:	b7 1d       	adc	r27, r7
    4eb4:	40 e0       	ldi	r20, 0x00	; 0
    4eb6:	50 e0       	ldi	r21, 0x00	; 0
    4eb8:	60 e0       	ldi	r22, 0x00	; 0
    4eba:	70 e0       	ldi	r23, 0x00	; 0
    4ebc:	80 16       	cp	r8, r16
    4ebe:	91 06       	cpc	r9, r17
    4ec0:	a2 06       	cpc	r10, r18
    4ec2:	b3 06       	cpc	r11, r19
    4ec4:	20 f4       	brcc	.+8      	; 0x4ece <__mulsf3+0xec>
    4ec6:	41 e0       	ldi	r20, 0x01	; 1
    4ec8:	50 e0       	ldi	r21, 0x00	; 0
    4eca:	60 e0       	ldi	r22, 0x00	; 0
    4ecc:	70 e0       	ldi	r23, 0x00	; 0
    4ece:	48 0f       	add	r20, r24
    4ed0:	59 1f       	adc	r21, r25
    4ed2:	6a 1f       	adc	r22, r26
    4ed4:	7b 1f       	adc	r23, r27
    4ed6:	44 0c       	add	r4, r4
    4ed8:	55 1c       	adc	r5, r5
    4eda:	66 1c       	adc	r6, r6
    4edc:	77 1c       	adc	r7, r7
    4ede:	37 ff       	sbrs	r19, 7
    4ee0:	08 c0       	rjmp	.+16     	; 0x4ef2 <__mulsf3+0x110>
    4ee2:	81 e0       	ldi	r24, 0x01	; 1
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	a0 e0       	ldi	r26, 0x00	; 0
    4ee8:	b0 e0       	ldi	r27, 0x00	; 0
    4eea:	48 2a       	or	r4, r24
    4eec:	59 2a       	or	r5, r25
    4eee:	6a 2a       	or	r6, r26
    4ef0:	7b 2a       	or	r7, r27
    4ef2:	31 96       	adiw	r30, 0x01	; 1
    4ef4:	e0 32       	cpi	r30, 0x20	; 32
    4ef6:	f1 05       	cpc	r31, r1
    4ef8:	49 f0       	breq	.+18     	; 0x4f0c <__mulsf3+0x12a>
    4efa:	00 0f       	add	r16, r16
    4efc:	11 1f       	adc	r17, r17
    4efe:	22 1f       	adc	r18, r18
    4f00:	33 1f       	adc	r19, r19
    4f02:	f6 94       	lsr	r15
    4f04:	e7 94       	ror	r14
    4f06:	d7 94       	ror	r13
    4f08:	c7 94       	ror	r12
    4f0a:	c5 cf       	rjmp	.-118    	; 0x4e96 <__mulsf3+0xb4>
    4f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    4f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    4f10:	2b 85       	ldd	r18, Y+11	; 0x0b
    4f12:	3c 85       	ldd	r19, Y+12	; 0x0c
    4f14:	82 0f       	add	r24, r18
    4f16:	93 1f       	adc	r25, r19
    4f18:	02 96       	adiw	r24, 0x02	; 2
    4f1a:	9c 8f       	std	Y+28, r25	; 0x1c
    4f1c:	8b 8f       	std	Y+27, r24	; 0x1b
    4f1e:	1a 8e       	std	Y+26, r1	; 0x1a
    4f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f22:	8a 89       	ldd	r24, Y+18	; 0x12
    4f24:	98 17       	cp	r25, r24
    4f26:	11 f0       	breq	.+4      	; 0x4f2c <__mulsf3+0x14a>
    4f28:	81 e0       	ldi	r24, 0x01	; 1
    4f2a:	8a 8f       	std	Y+26, r24	; 0x1a
    4f2c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4f2e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4f30:	17 c0       	rjmp	.+46     	; 0x4f60 <__mulsf3+0x17e>
    4f32:	ca 01       	movw	r24, r20
    4f34:	81 70       	andi	r24, 0x01	; 1
    4f36:	90 70       	andi	r25, 0x00	; 0
    4f38:	89 2b       	or	r24, r25
    4f3a:	61 f0       	breq	.+24     	; 0x4f54 <__mulsf3+0x172>
    4f3c:	b6 94       	lsr	r11
    4f3e:	a7 94       	ror	r10
    4f40:	97 94       	ror	r9
    4f42:	87 94       	ror	r8
    4f44:	80 e0       	ldi	r24, 0x00	; 0
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	a0 e0       	ldi	r26, 0x00	; 0
    4f4a:	b0 e8       	ldi	r27, 0x80	; 128
    4f4c:	88 2a       	or	r8, r24
    4f4e:	99 2a       	or	r9, r25
    4f50:	aa 2a       	or	r10, r26
    4f52:	bb 2a       	or	r11, r27
    4f54:	76 95       	lsr	r23
    4f56:	67 95       	ror	r22
    4f58:	57 95       	ror	r21
    4f5a:	47 95       	ror	r20
    4f5c:	2f 5f       	subi	r18, 0xFF	; 255
    4f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f60:	77 fd       	sbrc	r23, 7
    4f62:	e7 cf       	rjmp	.-50     	; 0x4f32 <__mulsf3+0x150>
    4f64:	c9 01       	movw	r24, r18
    4f66:	0b c0       	rjmp	.+22     	; 0x4f7e <__mulsf3+0x19c>
    4f68:	44 0f       	add	r20, r20
    4f6a:	55 1f       	adc	r21, r21
    4f6c:	66 1f       	adc	r22, r22
    4f6e:	77 1f       	adc	r23, r23
    4f70:	b7 fc       	sbrc	r11, 7
    4f72:	41 60       	ori	r20, 0x01	; 1
    4f74:	88 0c       	add	r8, r8
    4f76:	99 1c       	adc	r9, r9
    4f78:	aa 1c       	adc	r10, r10
    4f7a:	bb 1c       	adc	r11, r11
    4f7c:	01 97       	sbiw	r24, 0x01	; 1
    4f7e:	40 30       	cpi	r20, 0x00	; 0
    4f80:	a0 e0       	ldi	r26, 0x00	; 0
    4f82:	5a 07       	cpc	r21, r26
    4f84:	a0 e0       	ldi	r26, 0x00	; 0
    4f86:	6a 07       	cpc	r22, r26
    4f88:	a0 e4       	ldi	r26, 0x40	; 64
    4f8a:	7a 07       	cpc	r23, r26
    4f8c:	68 f3       	brcs	.-38     	; 0x4f68 <__mulsf3+0x186>
    4f8e:	9c 8f       	std	Y+28, r25	; 0x1c
    4f90:	8b 8f       	std	Y+27, r24	; 0x1b
    4f92:	db 01       	movw	r26, r22
    4f94:	ca 01       	movw	r24, r20
    4f96:	8f 77       	andi	r24, 0x7F	; 127
    4f98:	90 70       	andi	r25, 0x00	; 0
    4f9a:	a0 70       	andi	r26, 0x00	; 0
    4f9c:	b0 70       	andi	r27, 0x00	; 0
    4f9e:	80 34       	cpi	r24, 0x40	; 64
    4fa0:	91 05       	cpc	r25, r1
    4fa2:	a1 05       	cpc	r26, r1
    4fa4:	b1 05       	cpc	r27, r1
    4fa6:	61 f4       	brne	.+24     	; 0x4fc0 <__mulsf3+0x1de>
    4fa8:	47 fd       	sbrc	r20, 7
    4faa:	0a c0       	rjmp	.+20     	; 0x4fc0 <__mulsf3+0x1de>
    4fac:	81 14       	cp	r8, r1
    4fae:	91 04       	cpc	r9, r1
    4fb0:	a1 04       	cpc	r10, r1
    4fb2:	b1 04       	cpc	r11, r1
    4fb4:	29 f0       	breq	.+10     	; 0x4fc0 <__mulsf3+0x1de>
    4fb6:	40 5c       	subi	r20, 0xC0	; 192
    4fb8:	5f 4f       	sbci	r21, 0xFF	; 255
    4fba:	6f 4f       	sbci	r22, 0xFF	; 255
    4fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    4fbe:	40 78       	andi	r20, 0x80	; 128
    4fc0:	4d 8f       	std	Y+29, r20	; 0x1d
    4fc2:	5e 8f       	std	Y+30, r21	; 0x1e
    4fc4:	6f 8f       	std	Y+31, r22	; 0x1f
    4fc6:	78 a3       	std	Y+32, r23	; 0x20
    4fc8:	83 e0       	ldi	r24, 0x03	; 3
    4fca:	89 8f       	std	Y+25, r24	; 0x19
    4fcc:	be 01       	movw	r22, r28
    4fce:	67 5e       	subi	r22, 0xE7	; 231
    4fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    4fd2:	cb 01       	movw	r24, r22
    4fd4:	0e 94 ee 28 	call	0x51dc	; 0x51dc <__pack_f>
    4fd8:	e0 e1       	ldi	r30, 0x10	; 16
    4fda:	a0 96       	adiw	r28, 0x20	; 32
    4fdc:	0c 94 a2 2a 	jmp	0x5544	; 0x5544 <__epilogue_restores__+0x4>

00004fe0 <__floatsisf>:
    4fe0:	a8 e0       	ldi	r26, 0x08	; 8
    4fe2:	b0 e0       	ldi	r27, 0x00	; 0
    4fe4:	e6 ef       	ldi	r30, 0xF6	; 246
    4fe6:	f7 e2       	ldi	r31, 0x27	; 39
    4fe8:	0c 94 8d 2a 	jmp	0x551a	; 0x551a <__prologue_saves__+0x12>
    4fec:	9b 01       	movw	r18, r22
    4fee:	ac 01       	movw	r20, r24
    4ff0:	83 e0       	ldi	r24, 0x03	; 3
    4ff2:	89 83       	std	Y+1, r24	; 0x01
    4ff4:	da 01       	movw	r26, r20
    4ff6:	c9 01       	movw	r24, r18
    4ff8:	88 27       	eor	r24, r24
    4ffa:	b7 fd       	sbrc	r27, 7
    4ffc:	83 95       	inc	r24
    4ffe:	99 27       	eor	r25, r25
    5000:	aa 27       	eor	r26, r26
    5002:	bb 27       	eor	r27, r27
    5004:	b8 2e       	mov	r11, r24
    5006:	21 15       	cp	r18, r1
    5008:	31 05       	cpc	r19, r1
    500a:	41 05       	cpc	r20, r1
    500c:	51 05       	cpc	r21, r1
    500e:	19 f4       	brne	.+6      	; 0x5016 <__floatsisf+0x36>
    5010:	82 e0       	ldi	r24, 0x02	; 2
    5012:	89 83       	std	Y+1, r24	; 0x01
    5014:	3a c0       	rjmp	.+116    	; 0x508a <__floatsisf+0xaa>
    5016:	88 23       	and	r24, r24
    5018:	a9 f0       	breq	.+42     	; 0x5044 <__floatsisf+0x64>
    501a:	20 30       	cpi	r18, 0x00	; 0
    501c:	80 e0       	ldi	r24, 0x00	; 0
    501e:	38 07       	cpc	r19, r24
    5020:	80 e0       	ldi	r24, 0x00	; 0
    5022:	48 07       	cpc	r20, r24
    5024:	80 e8       	ldi	r24, 0x80	; 128
    5026:	58 07       	cpc	r21, r24
    5028:	29 f4       	brne	.+10     	; 0x5034 <__floatsisf+0x54>
    502a:	60 e0       	ldi	r22, 0x00	; 0
    502c:	70 e0       	ldi	r23, 0x00	; 0
    502e:	80 e0       	ldi	r24, 0x00	; 0
    5030:	9f ec       	ldi	r25, 0xCF	; 207
    5032:	30 c0       	rjmp	.+96     	; 0x5094 <__floatsisf+0xb4>
    5034:	ee 24       	eor	r14, r14
    5036:	ff 24       	eor	r15, r15
    5038:	87 01       	movw	r16, r14
    503a:	e2 1a       	sub	r14, r18
    503c:	f3 0a       	sbc	r15, r19
    503e:	04 0b       	sbc	r16, r20
    5040:	15 0b       	sbc	r17, r21
    5042:	02 c0       	rjmp	.+4      	; 0x5048 <__floatsisf+0x68>
    5044:	79 01       	movw	r14, r18
    5046:	8a 01       	movw	r16, r20
    5048:	8e e1       	ldi	r24, 0x1E	; 30
    504a:	c8 2e       	mov	r12, r24
    504c:	d1 2c       	mov	r13, r1
    504e:	dc 82       	std	Y+4, r13	; 0x04
    5050:	cb 82       	std	Y+3, r12	; 0x03
    5052:	ed 82       	std	Y+5, r14	; 0x05
    5054:	fe 82       	std	Y+6, r15	; 0x06
    5056:	0f 83       	std	Y+7, r16	; 0x07
    5058:	18 87       	std	Y+8, r17	; 0x08
    505a:	c8 01       	movw	r24, r16
    505c:	b7 01       	movw	r22, r14
    505e:	0e 94 a1 28 	call	0x5142	; 0x5142 <__clzsi2>
    5062:	01 97       	sbiw	r24, 0x01	; 1
    5064:	18 16       	cp	r1, r24
    5066:	19 06       	cpc	r1, r25
    5068:	84 f4       	brge	.+32     	; 0x508a <__floatsisf+0xaa>
    506a:	08 2e       	mov	r0, r24
    506c:	04 c0       	rjmp	.+8      	; 0x5076 <__floatsisf+0x96>
    506e:	ee 0c       	add	r14, r14
    5070:	ff 1c       	adc	r15, r15
    5072:	00 1f       	adc	r16, r16
    5074:	11 1f       	adc	r17, r17
    5076:	0a 94       	dec	r0
    5078:	d2 f7       	brpl	.-12     	; 0x506e <__floatsisf+0x8e>
    507a:	ed 82       	std	Y+5, r14	; 0x05
    507c:	fe 82       	std	Y+6, r15	; 0x06
    507e:	0f 83       	std	Y+7, r16	; 0x07
    5080:	18 87       	std	Y+8, r17	; 0x08
    5082:	c8 1a       	sub	r12, r24
    5084:	d9 0a       	sbc	r13, r25
    5086:	dc 82       	std	Y+4, r13	; 0x04
    5088:	cb 82       	std	Y+3, r12	; 0x03
    508a:	ba 82       	std	Y+2, r11	; 0x02
    508c:	ce 01       	movw	r24, r28
    508e:	01 96       	adiw	r24, 0x01	; 1
    5090:	0e 94 ee 28 	call	0x51dc	; 0x51dc <__pack_f>
    5094:	e9 e0       	ldi	r30, 0x09	; 9
    5096:	28 96       	adiw	r28, 0x08	; 8
    5098:	0c 94 a9 2a 	jmp	0x5552	; 0x5552 <__epilogue_restores__+0x12>

0000509c <__fixsfsi>:
    509c:	ac e0       	ldi	r26, 0x0C	; 12
    509e:	b0 e0       	ldi	r27, 0x00	; 0
    50a0:	e4 e5       	ldi	r30, 0x54	; 84
    50a2:	f8 e2       	ldi	r31, 0x28	; 40
    50a4:	0c 94 94 2a 	jmp	0x5528	; 0x5528 <__prologue_saves__+0x20>
    50a8:	69 83       	std	Y+1, r22	; 0x01
    50aa:	7a 83       	std	Y+2, r23	; 0x02
    50ac:	8b 83       	std	Y+3, r24	; 0x03
    50ae:	9c 83       	std	Y+4, r25	; 0x04
    50b0:	be 01       	movw	r22, r28
    50b2:	6b 5f       	subi	r22, 0xFB	; 251
    50b4:	7f 4f       	sbci	r23, 0xFF	; 255
    50b6:	ce 01       	movw	r24, r28
    50b8:	01 96       	adiw	r24, 0x01	; 1
    50ba:	0e 94 ce 29 	call	0x539c	; 0x539c <__unpack_f>
    50be:	8d 81       	ldd	r24, Y+5	; 0x05
    50c0:	82 30       	cpi	r24, 0x02	; 2
    50c2:	a9 f1       	breq	.+106    	; 0x512e <__fixsfsi+0x92>
    50c4:	82 30       	cpi	r24, 0x02	; 2
    50c6:	98 f1       	brcs	.+102    	; 0x512e <__fixsfsi+0x92>
    50c8:	84 30       	cpi	r24, 0x04	; 4
    50ca:	21 f4       	brne	.+8      	; 0x50d4 <__fixsfsi+0x38>
    50cc:	8e 81       	ldd	r24, Y+6	; 0x06
    50ce:	88 23       	and	r24, r24
    50d0:	59 f4       	brne	.+22     	; 0x50e8 <__fixsfsi+0x4c>
    50d2:	0f c0       	rjmp	.+30     	; 0x50f2 <__fixsfsi+0x56>
    50d4:	2f 81       	ldd	r18, Y+7	; 0x07
    50d6:	38 85       	ldd	r19, Y+8	; 0x08
    50d8:	37 fd       	sbrc	r19, 7
    50da:	29 c0       	rjmp	.+82     	; 0x512e <__fixsfsi+0x92>
    50dc:	6e 81       	ldd	r22, Y+6	; 0x06
    50de:	2f 31       	cpi	r18, 0x1F	; 31
    50e0:	31 05       	cpc	r19, r1
    50e2:	64 f0       	brlt	.+24     	; 0x50fc <__fixsfsi+0x60>
    50e4:	66 23       	and	r22, r22
    50e6:	29 f0       	breq	.+10     	; 0x50f2 <__fixsfsi+0x56>
    50e8:	20 e0       	ldi	r18, 0x00	; 0
    50ea:	30 e0       	ldi	r19, 0x00	; 0
    50ec:	40 e0       	ldi	r20, 0x00	; 0
    50ee:	50 e8       	ldi	r21, 0x80	; 128
    50f0:	22 c0       	rjmp	.+68     	; 0x5136 <__fixsfsi+0x9a>
    50f2:	2f ef       	ldi	r18, 0xFF	; 255
    50f4:	3f ef       	ldi	r19, 0xFF	; 255
    50f6:	4f ef       	ldi	r20, 0xFF	; 255
    50f8:	5f e7       	ldi	r21, 0x7F	; 127
    50fa:	1d c0       	rjmp	.+58     	; 0x5136 <__fixsfsi+0x9a>
    50fc:	8e e1       	ldi	r24, 0x1E	; 30
    50fe:	90 e0       	ldi	r25, 0x00	; 0
    5100:	82 1b       	sub	r24, r18
    5102:	93 0b       	sbc	r25, r19
    5104:	29 85       	ldd	r18, Y+9	; 0x09
    5106:	3a 85       	ldd	r19, Y+10	; 0x0a
    5108:	4b 85       	ldd	r20, Y+11	; 0x0b
    510a:	5c 85       	ldd	r21, Y+12	; 0x0c
    510c:	04 c0       	rjmp	.+8      	; 0x5116 <__fixsfsi+0x7a>
    510e:	56 95       	lsr	r21
    5110:	47 95       	ror	r20
    5112:	37 95       	ror	r19
    5114:	27 95       	ror	r18
    5116:	8a 95       	dec	r24
    5118:	d2 f7       	brpl	.-12     	; 0x510e <__fixsfsi+0x72>
    511a:	66 23       	and	r22, r22
    511c:	61 f0       	breq	.+24     	; 0x5136 <__fixsfsi+0x9a>
    511e:	50 95       	com	r21
    5120:	40 95       	com	r20
    5122:	30 95       	com	r19
    5124:	21 95       	neg	r18
    5126:	3f 4f       	sbci	r19, 0xFF	; 255
    5128:	4f 4f       	sbci	r20, 0xFF	; 255
    512a:	5f 4f       	sbci	r21, 0xFF	; 255
    512c:	04 c0       	rjmp	.+8      	; 0x5136 <__fixsfsi+0x9a>
    512e:	20 e0       	ldi	r18, 0x00	; 0
    5130:	30 e0       	ldi	r19, 0x00	; 0
    5132:	40 e0       	ldi	r20, 0x00	; 0
    5134:	50 e0       	ldi	r21, 0x00	; 0
    5136:	ca 01       	movw	r24, r20
    5138:	b9 01       	movw	r22, r18
    513a:	e2 e0       	ldi	r30, 0x02	; 2
    513c:	2c 96       	adiw	r28, 0x0c	; 12
    513e:	0c 94 b0 2a 	jmp	0x5560	; 0x5560 <__epilogue_restores__+0x20>

00005142 <__clzsi2>:
    5142:	ef 92       	push	r14
    5144:	ff 92       	push	r15
    5146:	0f 93       	push	r16
    5148:	1f 93       	push	r17
    514a:	9b 01       	movw	r18, r22
    514c:	ac 01       	movw	r20, r24
    514e:	20 30       	cpi	r18, 0x00	; 0
    5150:	80 e0       	ldi	r24, 0x00	; 0
    5152:	38 07       	cpc	r19, r24
    5154:	81 e0       	ldi	r24, 0x01	; 1
    5156:	48 07       	cpc	r20, r24
    5158:	80 e0       	ldi	r24, 0x00	; 0
    515a:	58 07       	cpc	r21, r24
    515c:	80 f4       	brcc	.+32     	; 0x517e <__clzsi2+0x3c>
    515e:	2f 3f       	cpi	r18, 0xFF	; 255
    5160:	31 05       	cpc	r19, r1
    5162:	41 05       	cpc	r20, r1
    5164:	51 05       	cpc	r21, r1
    5166:	09 f0       	breq	.+2      	; 0x516a <__clzsi2+0x28>
    5168:	20 f4       	brcc	.+8      	; 0x5172 <__clzsi2+0x30>
    516a:	ee 24       	eor	r14, r14
    516c:	ff 24       	eor	r15, r15
    516e:	87 01       	movw	r16, r14
    5170:	19 c0       	rjmp	.+50     	; 0x51a4 <__clzsi2+0x62>
    5172:	68 e0       	ldi	r22, 0x08	; 8
    5174:	e6 2e       	mov	r14, r22
    5176:	f1 2c       	mov	r15, r1
    5178:	01 2d       	mov	r16, r1
    517a:	11 2d       	mov	r17, r1
    517c:	13 c0       	rjmp	.+38     	; 0x51a4 <__clzsi2+0x62>
    517e:	20 30       	cpi	r18, 0x00	; 0
    5180:	80 e0       	ldi	r24, 0x00	; 0
    5182:	38 07       	cpc	r19, r24
    5184:	80 e0       	ldi	r24, 0x00	; 0
    5186:	48 07       	cpc	r20, r24
    5188:	81 e0       	ldi	r24, 0x01	; 1
    518a:	58 07       	cpc	r21, r24
    518c:	30 f4       	brcc	.+12     	; 0x519a <__clzsi2+0x58>
    518e:	90 e1       	ldi	r25, 0x10	; 16
    5190:	e9 2e       	mov	r14, r25
    5192:	f1 2c       	mov	r15, r1
    5194:	01 2d       	mov	r16, r1
    5196:	11 2d       	mov	r17, r1
    5198:	05 c0       	rjmp	.+10     	; 0x51a4 <__clzsi2+0x62>
    519a:	88 e1       	ldi	r24, 0x18	; 24
    519c:	e8 2e       	mov	r14, r24
    519e:	f1 2c       	mov	r15, r1
    51a0:	01 2d       	mov	r16, r1
    51a2:	11 2d       	mov	r17, r1
    51a4:	80 e2       	ldi	r24, 0x20	; 32
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	a0 e0       	ldi	r26, 0x00	; 0
    51aa:	b0 e0       	ldi	r27, 0x00	; 0
    51ac:	8e 19       	sub	r24, r14
    51ae:	9f 09       	sbc	r25, r15
    51b0:	a0 0b       	sbc	r26, r16
    51b2:	b1 0b       	sbc	r27, r17
    51b4:	04 c0       	rjmp	.+8      	; 0x51be <__clzsi2+0x7c>
    51b6:	56 95       	lsr	r21
    51b8:	47 95       	ror	r20
    51ba:	37 95       	ror	r19
    51bc:	27 95       	ror	r18
    51be:	ea 94       	dec	r14
    51c0:	d2 f7       	brpl	.-12     	; 0x51b6 <__clzsi2+0x74>
    51c2:	f9 01       	movw	r30, r18
    51c4:	e0 5e       	subi	r30, 0xE0	; 224
    51c6:	fd 4f       	sbci	r31, 0xFD	; 253
    51c8:	20 81       	ld	r18, Z
    51ca:	82 1b       	sub	r24, r18
    51cc:	91 09       	sbc	r25, r1
    51ce:	a1 09       	sbc	r26, r1
    51d0:	b1 09       	sbc	r27, r1
    51d2:	1f 91       	pop	r17
    51d4:	0f 91       	pop	r16
    51d6:	ff 90       	pop	r15
    51d8:	ef 90       	pop	r14
    51da:	08 95       	ret

000051dc <__pack_f>:
    51dc:	9f 92       	push	r9
    51de:	af 92       	push	r10
    51e0:	bf 92       	push	r11
    51e2:	cf 92       	push	r12
    51e4:	df 92       	push	r13
    51e6:	ef 92       	push	r14
    51e8:	ff 92       	push	r15
    51ea:	0f 93       	push	r16
    51ec:	1f 93       	push	r17
    51ee:	ee 24       	eor	r14, r14
    51f0:	ff 24       	eor	r15, r15
    51f2:	87 01       	movw	r16, r14
    51f4:	fc 01       	movw	r30, r24
    51f6:	24 81       	ldd	r18, Z+4	; 0x04
    51f8:	35 81       	ldd	r19, Z+5	; 0x05
    51fa:	46 81       	ldd	r20, Z+6	; 0x06
    51fc:	57 81       	ldd	r21, Z+7	; 0x07
    51fe:	91 80       	ldd	r9, Z+1	; 0x01
    5200:	80 81       	ld	r24, Z
    5202:	82 30       	cpi	r24, 0x02	; 2
    5204:	10 f4       	brcc	.+4      	; 0x520a <__pack_f+0x2e>
    5206:	40 61       	ori	r20, 0x10	; 16
    5208:	a2 c0       	rjmp	.+324    	; 0x534e <__pack_f+0x172>
    520a:	84 30       	cpi	r24, 0x04	; 4
    520c:	09 f4       	brne	.+2      	; 0x5210 <__pack_f+0x34>
    520e:	9b c0       	rjmp	.+310    	; 0x5346 <__pack_f+0x16a>
    5210:	82 30       	cpi	r24, 0x02	; 2
    5212:	29 f4       	brne	.+10     	; 0x521e <__pack_f+0x42>
    5214:	20 e0       	ldi	r18, 0x00	; 0
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	40 e0       	ldi	r20, 0x00	; 0
    521a:	50 e0       	ldi	r21, 0x00	; 0
    521c:	05 c0       	rjmp	.+10     	; 0x5228 <__pack_f+0x4c>
    521e:	21 15       	cp	r18, r1
    5220:	31 05       	cpc	r19, r1
    5222:	41 05       	cpc	r20, r1
    5224:	51 05       	cpc	r21, r1
    5226:	19 f4       	brne	.+6      	; 0x522e <__pack_f+0x52>
    5228:	e0 e0       	ldi	r30, 0x00	; 0
    522a:	f0 e0       	ldi	r31, 0x00	; 0
    522c:	92 c0       	rjmp	.+292    	; 0x5352 <__pack_f+0x176>
    522e:	82 81       	ldd	r24, Z+2	; 0x02
    5230:	93 81       	ldd	r25, Z+3	; 0x03
    5232:	6f ef       	ldi	r22, 0xFF	; 255
    5234:	82 38       	cpi	r24, 0x82	; 130
    5236:	96 07       	cpc	r25, r22
    5238:	0c f0       	brlt	.+2      	; 0x523c <__pack_f+0x60>
    523a:	5a c0       	rjmp	.+180    	; 0x52f0 <__pack_f+0x114>
    523c:	62 e8       	ldi	r22, 0x82	; 130
    523e:	7f ef       	ldi	r23, 0xFF	; 255
    5240:	68 1b       	sub	r22, r24
    5242:	79 0b       	sbc	r23, r25
    5244:	6a 31       	cpi	r22, 0x1A	; 26
    5246:	71 05       	cpc	r23, r1
    5248:	2c f0       	brlt	.+10     	; 0x5254 <__pack_f+0x78>
    524a:	20 e0       	ldi	r18, 0x00	; 0
    524c:	30 e0       	ldi	r19, 0x00	; 0
    524e:	40 e0       	ldi	r20, 0x00	; 0
    5250:	50 e0       	ldi	r21, 0x00	; 0
    5252:	2a c0       	rjmp	.+84     	; 0x52a8 <__pack_f+0xcc>
    5254:	aa 24       	eor	r10, r10
    5256:	bb 24       	eor	r11, r11
    5258:	65 01       	movw	r12, r10
    525a:	81 e0       	ldi	r24, 0x01	; 1
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	a0 e0       	ldi	r26, 0x00	; 0
    5260:	b0 e0       	ldi	r27, 0x00	; 0
    5262:	06 2e       	mov	r0, r22
    5264:	04 c0       	rjmp	.+8      	; 0x526e <__pack_f+0x92>
    5266:	88 0f       	add	r24, r24
    5268:	99 1f       	adc	r25, r25
    526a:	aa 1f       	adc	r26, r26
    526c:	bb 1f       	adc	r27, r27
    526e:	0a 94       	dec	r0
    5270:	d2 f7       	brpl	.-12     	; 0x5266 <__pack_f+0x8a>
    5272:	01 97       	sbiw	r24, 0x01	; 1
    5274:	a1 09       	sbc	r26, r1
    5276:	b1 09       	sbc	r27, r1
    5278:	82 23       	and	r24, r18
    527a:	93 23       	and	r25, r19
    527c:	a4 23       	and	r26, r20
    527e:	b5 23       	and	r27, r21
    5280:	00 97       	sbiw	r24, 0x00	; 0
    5282:	a1 05       	cpc	r26, r1
    5284:	b1 05       	cpc	r27, r1
    5286:	29 f0       	breq	.+10     	; 0x5292 <__pack_f+0xb6>
    5288:	71 e0       	ldi	r23, 0x01	; 1
    528a:	a7 2e       	mov	r10, r23
    528c:	b1 2c       	mov	r11, r1
    528e:	c1 2c       	mov	r12, r1
    5290:	d1 2c       	mov	r13, r1
    5292:	04 c0       	rjmp	.+8      	; 0x529c <__pack_f+0xc0>
    5294:	56 95       	lsr	r21
    5296:	47 95       	ror	r20
    5298:	37 95       	ror	r19
    529a:	27 95       	ror	r18
    529c:	6a 95       	dec	r22
    529e:	d2 f7       	brpl	.-12     	; 0x5294 <__pack_f+0xb8>
    52a0:	2a 29       	or	r18, r10
    52a2:	3b 29       	or	r19, r11
    52a4:	4c 29       	or	r20, r12
    52a6:	5d 29       	or	r21, r13
    52a8:	da 01       	movw	r26, r20
    52aa:	c9 01       	movw	r24, r18
    52ac:	8f 77       	andi	r24, 0x7F	; 127
    52ae:	90 70       	andi	r25, 0x00	; 0
    52b0:	a0 70       	andi	r26, 0x00	; 0
    52b2:	b0 70       	andi	r27, 0x00	; 0
    52b4:	80 34       	cpi	r24, 0x40	; 64
    52b6:	91 05       	cpc	r25, r1
    52b8:	a1 05       	cpc	r26, r1
    52ba:	b1 05       	cpc	r27, r1
    52bc:	39 f4       	brne	.+14     	; 0x52cc <__pack_f+0xf0>
    52be:	27 ff       	sbrs	r18, 7
    52c0:	09 c0       	rjmp	.+18     	; 0x52d4 <__pack_f+0xf8>
    52c2:	20 5c       	subi	r18, 0xC0	; 192
    52c4:	3f 4f       	sbci	r19, 0xFF	; 255
    52c6:	4f 4f       	sbci	r20, 0xFF	; 255
    52c8:	5f 4f       	sbci	r21, 0xFF	; 255
    52ca:	04 c0       	rjmp	.+8      	; 0x52d4 <__pack_f+0xf8>
    52cc:	21 5c       	subi	r18, 0xC1	; 193
    52ce:	3f 4f       	sbci	r19, 0xFF	; 255
    52d0:	4f 4f       	sbci	r20, 0xFF	; 255
    52d2:	5f 4f       	sbci	r21, 0xFF	; 255
    52d4:	80 e0       	ldi	r24, 0x00	; 0
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	20 30       	cpi	r18, 0x00	; 0
    52da:	60 e0       	ldi	r22, 0x00	; 0
    52dc:	36 07       	cpc	r19, r22
    52de:	60 e0       	ldi	r22, 0x00	; 0
    52e0:	46 07       	cpc	r20, r22
    52e2:	60 e4       	ldi	r22, 0x40	; 64
    52e4:	56 07       	cpc	r21, r22
    52e6:	10 f0       	brcs	.+4      	; 0x52ec <__pack_f+0x110>
    52e8:	81 e0       	ldi	r24, 0x01	; 1
    52ea:	90 e0       	ldi	r25, 0x00	; 0
    52ec:	fc 01       	movw	r30, r24
    52ee:	23 c0       	rjmp	.+70     	; 0x5336 <__pack_f+0x15a>
    52f0:	80 38       	cpi	r24, 0x80	; 128
    52f2:	91 05       	cpc	r25, r1
    52f4:	44 f5       	brge	.+80     	; 0x5346 <__pack_f+0x16a>
    52f6:	fc 01       	movw	r30, r24
    52f8:	e1 58       	subi	r30, 0x81	; 129
    52fa:	ff 4f       	sbci	r31, 0xFF	; 255
    52fc:	da 01       	movw	r26, r20
    52fe:	c9 01       	movw	r24, r18
    5300:	8f 77       	andi	r24, 0x7F	; 127
    5302:	90 70       	andi	r25, 0x00	; 0
    5304:	a0 70       	andi	r26, 0x00	; 0
    5306:	b0 70       	andi	r27, 0x00	; 0
    5308:	80 34       	cpi	r24, 0x40	; 64
    530a:	91 05       	cpc	r25, r1
    530c:	a1 05       	cpc	r26, r1
    530e:	b1 05       	cpc	r27, r1
    5310:	39 f4       	brne	.+14     	; 0x5320 <__pack_f+0x144>
    5312:	27 ff       	sbrs	r18, 7
    5314:	09 c0       	rjmp	.+18     	; 0x5328 <__pack_f+0x14c>
    5316:	20 5c       	subi	r18, 0xC0	; 192
    5318:	3f 4f       	sbci	r19, 0xFF	; 255
    531a:	4f 4f       	sbci	r20, 0xFF	; 255
    531c:	5f 4f       	sbci	r21, 0xFF	; 255
    531e:	04 c0       	rjmp	.+8      	; 0x5328 <__pack_f+0x14c>
    5320:	21 5c       	subi	r18, 0xC1	; 193
    5322:	3f 4f       	sbci	r19, 0xFF	; 255
    5324:	4f 4f       	sbci	r20, 0xFF	; 255
    5326:	5f 4f       	sbci	r21, 0xFF	; 255
    5328:	57 ff       	sbrs	r21, 7
    532a:	05 c0       	rjmp	.+10     	; 0x5336 <__pack_f+0x15a>
    532c:	56 95       	lsr	r21
    532e:	47 95       	ror	r20
    5330:	37 95       	ror	r19
    5332:	27 95       	ror	r18
    5334:	31 96       	adiw	r30, 0x01	; 1
    5336:	87 e0       	ldi	r24, 0x07	; 7
    5338:	56 95       	lsr	r21
    533a:	47 95       	ror	r20
    533c:	37 95       	ror	r19
    533e:	27 95       	ror	r18
    5340:	8a 95       	dec	r24
    5342:	d1 f7       	brne	.-12     	; 0x5338 <__pack_f+0x15c>
    5344:	06 c0       	rjmp	.+12     	; 0x5352 <__pack_f+0x176>
    5346:	20 e0       	ldi	r18, 0x00	; 0
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	40 e0       	ldi	r20, 0x00	; 0
    534c:	50 e0       	ldi	r21, 0x00	; 0
    534e:	ef ef       	ldi	r30, 0xFF	; 255
    5350:	f0 e0       	ldi	r31, 0x00	; 0
    5352:	e2 2e       	mov	r14, r18
    5354:	f3 2e       	mov	r15, r19
    5356:	94 2f       	mov	r25, r20
    5358:	9f 77       	andi	r25, 0x7F	; 127
    535a:	80 2f       	mov	r24, r16
    535c:	80 78       	andi	r24, 0x80	; 128
    535e:	89 2b       	or	r24, r25
    5360:	9e 2f       	mov	r25, r30
    5362:	97 95       	ror	r25
    5364:	99 27       	eor	r25, r25
    5366:	97 95       	ror	r25
    5368:	8f 77       	andi	r24, 0x7F	; 127
    536a:	08 2f       	mov	r16, r24
    536c:	09 2b       	or	r16, r25
    536e:	9e 2f       	mov	r25, r30
    5370:	96 95       	lsr	r25
    5372:	81 2f       	mov	r24, r17
    5374:	80 78       	andi	r24, 0x80	; 128
    5376:	89 2b       	or	r24, r25
    5378:	97 94       	ror	r9
    537a:	99 24       	eor	r9, r9
    537c:	97 94       	ror	r9
    537e:	8f 77       	andi	r24, 0x7F	; 127
    5380:	18 2f       	mov	r17, r24
    5382:	19 29       	or	r17, r9
    5384:	c8 01       	movw	r24, r16
    5386:	b7 01       	movw	r22, r14
    5388:	1f 91       	pop	r17
    538a:	0f 91       	pop	r16
    538c:	ff 90       	pop	r15
    538e:	ef 90       	pop	r14
    5390:	df 90       	pop	r13
    5392:	cf 90       	pop	r12
    5394:	bf 90       	pop	r11
    5396:	af 90       	pop	r10
    5398:	9f 90       	pop	r9
    539a:	08 95       	ret

0000539c <__unpack_f>:
    539c:	cf 93       	push	r28
    539e:	df 93       	push	r29
    53a0:	fc 01       	movw	r30, r24
    53a2:	db 01       	movw	r26, r22
    53a4:	20 81       	ld	r18, Z
    53a6:	31 81       	ldd	r19, Z+1	; 0x01
    53a8:	92 81       	ldd	r25, Z+2	; 0x02
    53aa:	49 2f       	mov	r20, r25
    53ac:	4f 77       	andi	r20, 0x7F	; 127
    53ae:	50 e0       	ldi	r21, 0x00	; 0
    53b0:	99 1f       	adc	r25, r25
    53b2:	99 27       	eor	r25, r25
    53b4:	99 1f       	adc	r25, r25
    53b6:	83 81       	ldd	r24, Z+3	; 0x03
    53b8:	e8 2f       	mov	r30, r24
    53ba:	ee 0f       	add	r30, r30
    53bc:	e9 2b       	or	r30, r25
    53be:	6e 2f       	mov	r22, r30
    53c0:	70 e0       	ldi	r23, 0x00	; 0
    53c2:	88 1f       	adc	r24, r24
    53c4:	88 27       	eor	r24, r24
    53c6:	88 1f       	adc	r24, r24
    53c8:	ed 01       	movw	r28, r26
    53ca:	89 83       	std	Y+1, r24	; 0x01
    53cc:	ee 23       	and	r30, r30
    53ce:	71 f5       	brne	.+92     	; 0x542c <__unpack_f+0x90>
    53d0:	21 15       	cp	r18, r1
    53d2:	31 05       	cpc	r19, r1
    53d4:	41 05       	cpc	r20, r1
    53d6:	51 05       	cpc	r21, r1
    53d8:	11 f4       	brne	.+4      	; 0x53de <__unpack_f+0x42>
    53da:	82 e0       	ldi	r24, 0x02	; 2
    53dc:	2f c0       	rjmp	.+94     	; 0x543c <__unpack_f+0xa0>
    53de:	6e 57       	subi	r22, 0x7E	; 126
    53e0:	70 40       	sbci	r23, 0x00	; 0
    53e2:	fd 01       	movw	r30, r26
    53e4:	73 83       	std	Z+3, r23	; 0x03
    53e6:	62 83       	std	Z+2, r22	; 0x02
    53e8:	67 e0       	ldi	r22, 0x07	; 7
    53ea:	22 0f       	add	r18, r18
    53ec:	33 1f       	adc	r19, r19
    53ee:	44 1f       	adc	r20, r20
    53f0:	55 1f       	adc	r21, r21
    53f2:	6a 95       	dec	r22
    53f4:	d1 f7       	brne	.-12     	; 0x53ea <__unpack_f+0x4e>
    53f6:	83 e0       	ldi	r24, 0x03	; 3
    53f8:	8c 93       	st	X, r24
    53fa:	0a c0       	rjmp	.+20     	; 0x5410 <__unpack_f+0x74>
    53fc:	22 0f       	add	r18, r18
    53fe:	33 1f       	adc	r19, r19
    5400:	44 1f       	adc	r20, r20
    5402:	55 1f       	adc	r21, r21
    5404:	ed 01       	movw	r28, r26
    5406:	8a 81       	ldd	r24, Y+2	; 0x02
    5408:	9b 81       	ldd	r25, Y+3	; 0x03
    540a:	01 97       	sbiw	r24, 0x01	; 1
    540c:	9b 83       	std	Y+3, r25	; 0x03
    540e:	8a 83       	std	Y+2, r24	; 0x02
    5410:	20 30       	cpi	r18, 0x00	; 0
    5412:	e0 e0       	ldi	r30, 0x00	; 0
    5414:	3e 07       	cpc	r19, r30
    5416:	e0 e0       	ldi	r30, 0x00	; 0
    5418:	4e 07       	cpc	r20, r30
    541a:	e0 e4       	ldi	r30, 0x40	; 64
    541c:	5e 07       	cpc	r21, r30
    541e:	70 f3       	brcs	.-36     	; 0x53fc <__unpack_f+0x60>
    5420:	ed 01       	movw	r28, r26
    5422:	2c 83       	std	Y+4, r18	; 0x04
    5424:	3d 83       	std	Y+5, r19	; 0x05
    5426:	4e 83       	std	Y+6, r20	; 0x06
    5428:	5f 83       	std	Y+7, r21	; 0x07
    542a:	25 c0       	rjmp	.+74     	; 0x5476 <__unpack_f+0xda>
    542c:	ef 3f       	cpi	r30, 0xFF	; 255
    542e:	79 f4       	brne	.+30     	; 0x544e <__unpack_f+0xb2>
    5430:	21 15       	cp	r18, r1
    5432:	31 05       	cpc	r19, r1
    5434:	41 05       	cpc	r20, r1
    5436:	51 05       	cpc	r21, r1
    5438:	19 f4       	brne	.+6      	; 0x5440 <__unpack_f+0xa4>
    543a:	84 e0       	ldi	r24, 0x04	; 4
    543c:	8c 93       	st	X, r24
    543e:	1b c0       	rjmp	.+54     	; 0x5476 <__unpack_f+0xda>
    5440:	44 ff       	sbrs	r20, 4
    5442:	03 c0       	rjmp	.+6      	; 0x544a <__unpack_f+0xae>
    5444:	81 e0       	ldi	r24, 0x01	; 1
    5446:	8c 93       	st	X, r24
    5448:	11 c0       	rjmp	.+34     	; 0x546c <__unpack_f+0xd0>
    544a:	1c 92       	st	X, r1
    544c:	0f c0       	rjmp	.+30     	; 0x546c <__unpack_f+0xd0>
    544e:	6f 57       	subi	r22, 0x7F	; 127
    5450:	70 40       	sbci	r23, 0x00	; 0
    5452:	ed 01       	movw	r28, r26
    5454:	7b 83       	std	Y+3, r23	; 0x03
    5456:	6a 83       	std	Y+2, r22	; 0x02
    5458:	83 e0       	ldi	r24, 0x03	; 3
    545a:	8c 93       	st	X, r24
    545c:	87 e0       	ldi	r24, 0x07	; 7
    545e:	22 0f       	add	r18, r18
    5460:	33 1f       	adc	r19, r19
    5462:	44 1f       	adc	r20, r20
    5464:	55 1f       	adc	r21, r21
    5466:	8a 95       	dec	r24
    5468:	d1 f7       	brne	.-12     	; 0x545e <__unpack_f+0xc2>
    546a:	50 64       	ori	r21, 0x40	; 64
    546c:	fd 01       	movw	r30, r26
    546e:	24 83       	std	Z+4, r18	; 0x04
    5470:	35 83       	std	Z+5, r19	; 0x05
    5472:	46 83       	std	Z+6, r20	; 0x06
    5474:	57 83       	std	Z+7, r21	; 0x07
    5476:	df 91       	pop	r29
    5478:	cf 91       	pop	r28
    547a:	08 95       	ret

0000547c <__mulsi3>:
    547c:	62 9f       	mul	r22, r18
    547e:	d0 01       	movw	r26, r0
    5480:	73 9f       	mul	r23, r19
    5482:	f0 01       	movw	r30, r0
    5484:	82 9f       	mul	r24, r18
    5486:	e0 0d       	add	r30, r0
    5488:	f1 1d       	adc	r31, r1
    548a:	64 9f       	mul	r22, r20
    548c:	e0 0d       	add	r30, r0
    548e:	f1 1d       	adc	r31, r1
    5490:	92 9f       	mul	r25, r18
    5492:	f0 0d       	add	r31, r0
    5494:	83 9f       	mul	r24, r19
    5496:	f0 0d       	add	r31, r0
    5498:	74 9f       	mul	r23, r20
    549a:	f0 0d       	add	r31, r0
    549c:	65 9f       	mul	r22, r21
    549e:	f0 0d       	add	r31, r0
    54a0:	99 27       	eor	r25, r25
    54a2:	72 9f       	mul	r23, r18
    54a4:	b0 0d       	add	r27, r0
    54a6:	e1 1d       	adc	r30, r1
    54a8:	f9 1f       	adc	r31, r25
    54aa:	63 9f       	mul	r22, r19
    54ac:	b0 0d       	add	r27, r0
    54ae:	e1 1d       	adc	r30, r1
    54b0:	f9 1f       	adc	r31, r25
    54b2:	bd 01       	movw	r22, r26
    54b4:	cf 01       	movw	r24, r30
    54b6:	11 24       	eor	r1, r1
    54b8:	08 95       	ret

000054ba <__udivmodhi4>:
    54ba:	aa 1b       	sub	r26, r26
    54bc:	bb 1b       	sub	r27, r27
    54be:	51 e1       	ldi	r21, 0x11	; 17
    54c0:	07 c0       	rjmp	.+14     	; 0x54d0 <__udivmodhi4_ep>

000054c2 <__udivmodhi4_loop>:
    54c2:	aa 1f       	adc	r26, r26
    54c4:	bb 1f       	adc	r27, r27
    54c6:	a6 17       	cp	r26, r22
    54c8:	b7 07       	cpc	r27, r23
    54ca:	10 f0       	brcs	.+4      	; 0x54d0 <__udivmodhi4_ep>
    54cc:	a6 1b       	sub	r26, r22
    54ce:	b7 0b       	sbc	r27, r23

000054d0 <__udivmodhi4_ep>:
    54d0:	88 1f       	adc	r24, r24
    54d2:	99 1f       	adc	r25, r25
    54d4:	5a 95       	dec	r21
    54d6:	a9 f7       	brne	.-22     	; 0x54c2 <__udivmodhi4_loop>
    54d8:	80 95       	com	r24
    54da:	90 95       	com	r25
    54dc:	bc 01       	movw	r22, r24
    54de:	cd 01       	movw	r24, r26
    54e0:	08 95       	ret

000054e2 <__divmodhi4>:
    54e2:	97 fb       	bst	r25, 7
    54e4:	09 2e       	mov	r0, r25
    54e6:	07 26       	eor	r0, r23
    54e8:	0a d0       	rcall	.+20     	; 0x54fe <__divmodhi4_neg1>
    54ea:	77 fd       	sbrc	r23, 7
    54ec:	04 d0       	rcall	.+8      	; 0x54f6 <__divmodhi4_neg2>
    54ee:	e5 df       	rcall	.-54     	; 0x54ba <__udivmodhi4>
    54f0:	06 d0       	rcall	.+12     	; 0x54fe <__divmodhi4_neg1>
    54f2:	00 20       	and	r0, r0
    54f4:	1a f4       	brpl	.+6      	; 0x54fc <__divmodhi4_exit>

000054f6 <__divmodhi4_neg2>:
    54f6:	70 95       	com	r23
    54f8:	61 95       	neg	r22
    54fa:	7f 4f       	sbci	r23, 0xFF	; 255

000054fc <__divmodhi4_exit>:
    54fc:	08 95       	ret

000054fe <__divmodhi4_neg1>:
    54fe:	f6 f7       	brtc	.-4      	; 0x54fc <__divmodhi4_exit>
    5500:	90 95       	com	r25
    5502:	81 95       	neg	r24
    5504:	9f 4f       	sbci	r25, 0xFF	; 255
    5506:	08 95       	ret

00005508 <__prologue_saves__>:
    5508:	2f 92       	push	r2
    550a:	3f 92       	push	r3
    550c:	4f 92       	push	r4
    550e:	5f 92       	push	r5
    5510:	6f 92       	push	r6
    5512:	7f 92       	push	r7
    5514:	8f 92       	push	r8
    5516:	9f 92       	push	r9
    5518:	af 92       	push	r10
    551a:	bf 92       	push	r11
    551c:	cf 92       	push	r12
    551e:	df 92       	push	r13
    5520:	ef 92       	push	r14
    5522:	ff 92       	push	r15
    5524:	0f 93       	push	r16
    5526:	1f 93       	push	r17
    5528:	cf 93       	push	r28
    552a:	df 93       	push	r29
    552c:	cd b7       	in	r28, 0x3d	; 61
    552e:	de b7       	in	r29, 0x3e	; 62
    5530:	ca 1b       	sub	r28, r26
    5532:	db 0b       	sbc	r29, r27
    5534:	0f b6       	in	r0, 0x3f	; 63
    5536:	f8 94       	cli
    5538:	de bf       	out	0x3e, r29	; 62
    553a:	0f be       	out	0x3f, r0	; 63
    553c:	cd bf       	out	0x3d, r28	; 61
    553e:	19 94       	eijmp

00005540 <__epilogue_restores__>:
    5540:	2a 88       	ldd	r2, Y+18	; 0x12
    5542:	39 88       	ldd	r3, Y+17	; 0x11
    5544:	48 88       	ldd	r4, Y+16	; 0x10
    5546:	5f 84       	ldd	r5, Y+15	; 0x0f
    5548:	6e 84       	ldd	r6, Y+14	; 0x0e
    554a:	7d 84       	ldd	r7, Y+13	; 0x0d
    554c:	8c 84       	ldd	r8, Y+12	; 0x0c
    554e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5550:	aa 84       	ldd	r10, Y+10	; 0x0a
    5552:	b9 84       	ldd	r11, Y+9	; 0x09
    5554:	c8 84       	ldd	r12, Y+8	; 0x08
    5556:	df 80       	ldd	r13, Y+7	; 0x07
    5558:	ee 80       	ldd	r14, Y+6	; 0x06
    555a:	fd 80       	ldd	r15, Y+5	; 0x05
    555c:	0c 81       	ldd	r16, Y+4	; 0x04
    555e:	1b 81       	ldd	r17, Y+3	; 0x03
    5560:	aa 81       	ldd	r26, Y+2	; 0x02
    5562:	b9 81       	ldd	r27, Y+1	; 0x01
    5564:	ce 0f       	add	r28, r30
    5566:	d1 1d       	adc	r29, r1
    5568:	0f b6       	in	r0, 0x3f	; 63
    556a:	f8 94       	cli
    556c:	de bf       	out	0x3e, r29	; 62
    556e:	0f be       	out	0x3f, r0	; 63
    5570:	cd bf       	out	0x3d, r28	; 61
    5572:	ed 01       	movw	r28, r26
    5574:	08 95       	ret

00005576 <do_rand>:
    5576:	af 92       	push	r10
    5578:	bf 92       	push	r11
    557a:	cf 92       	push	r12
    557c:	df 92       	push	r13
    557e:	ef 92       	push	r14
    5580:	ff 92       	push	r15
    5582:	0f 93       	push	r16
    5584:	1f 93       	push	r17
    5586:	cf 93       	push	r28
    5588:	df 93       	push	r29
    558a:	ec 01       	movw	r28, r24
    558c:	68 81       	ld	r22, Y
    558e:	79 81       	ldd	r23, Y+1	; 0x01
    5590:	8a 81       	ldd	r24, Y+2	; 0x02
    5592:	9b 81       	ldd	r25, Y+3	; 0x03
    5594:	61 15       	cp	r22, r1
    5596:	71 05       	cpc	r23, r1
    5598:	81 05       	cpc	r24, r1
    559a:	91 05       	cpc	r25, r1
    559c:	21 f4       	brne	.+8      	; 0x55a6 <do_rand+0x30>
    559e:	64 e2       	ldi	r22, 0x24	; 36
    55a0:	79 ed       	ldi	r23, 0xD9	; 217
    55a2:	8b e5       	ldi	r24, 0x5B	; 91
    55a4:	97 e0       	ldi	r25, 0x07	; 7
    55a6:	2d e1       	ldi	r18, 0x1D	; 29
    55a8:	33 ef       	ldi	r19, 0xF3	; 243
    55aa:	41 e0       	ldi	r20, 0x01	; 1
    55ac:	50 e0       	ldi	r21, 0x00	; 0
    55ae:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <__divmodsi4>
    55b2:	79 01       	movw	r14, r18
    55b4:	8a 01       	movw	r16, r20
    55b6:	27 ea       	ldi	r18, 0xA7	; 167
    55b8:	31 e4       	ldi	r19, 0x41	; 65
    55ba:	40 e0       	ldi	r20, 0x00	; 0
    55bc:	50 e0       	ldi	r21, 0x00	; 0
    55be:	0e 94 3e 2a 	call	0x547c	; 0x547c <__mulsi3>
    55c2:	5b 01       	movw	r10, r22
    55c4:	6c 01       	movw	r12, r24
    55c6:	c8 01       	movw	r24, r16
    55c8:	b7 01       	movw	r22, r14
    55ca:	2c ee       	ldi	r18, 0xEC	; 236
    55cc:	34 ef       	ldi	r19, 0xF4	; 244
    55ce:	4f ef       	ldi	r20, 0xFF	; 255
    55d0:	5f ef       	ldi	r21, 0xFF	; 255
    55d2:	0e 94 3e 2a 	call	0x547c	; 0x547c <__mulsi3>
    55d6:	6a 0d       	add	r22, r10
    55d8:	7b 1d       	adc	r23, r11
    55da:	8c 1d       	adc	r24, r12
    55dc:	9d 1d       	adc	r25, r13
    55de:	97 ff       	sbrs	r25, 7
    55e0:	04 c0       	rjmp	.+8      	; 0x55ea <do_rand+0x74>
    55e2:	61 50       	subi	r22, 0x01	; 1
    55e4:	70 40       	sbci	r23, 0x00	; 0
    55e6:	80 40       	sbci	r24, 0x00	; 0
    55e8:	90 48       	sbci	r25, 0x80	; 128
    55ea:	68 83       	st	Y, r22
    55ec:	79 83       	std	Y+1, r23	; 0x01
    55ee:	8a 83       	std	Y+2, r24	; 0x02
    55f0:	9b 83       	std	Y+3, r25	; 0x03
    55f2:	7f 77       	andi	r23, 0x7F	; 127
    55f4:	cb 01       	movw	r24, r22
    55f6:	df 91       	pop	r29
    55f8:	cf 91       	pop	r28
    55fa:	1f 91       	pop	r17
    55fc:	0f 91       	pop	r16
    55fe:	ff 90       	pop	r15
    5600:	ef 90       	pop	r14
    5602:	df 90       	pop	r13
    5604:	cf 90       	pop	r12
    5606:	bf 90       	pop	r11
    5608:	af 90       	pop	r10
    560a:	08 95       	ret

0000560c <rand_r>:
    560c:	0e 94 bb 2a 	call	0x5576	; 0x5576 <do_rand>
    5610:	08 95       	ret

00005612 <rand>:
    5612:	80 e2       	ldi	r24, 0x20	; 32
    5614:	93 e0       	ldi	r25, 0x03	; 3
    5616:	0e 94 bb 2a 	call	0x5576	; 0x5576 <do_rand>
    561a:	08 95       	ret

0000561c <srand>:
    561c:	a0 e0       	ldi	r26, 0x00	; 0
    561e:	b0 e0       	ldi	r27, 0x00	; 0
    5620:	80 93 20 03 	sts	0x0320, r24
    5624:	90 93 21 03 	sts	0x0321, r25
    5628:	a0 93 22 03 	sts	0x0322, r26
    562c:	b0 93 23 03 	sts	0x0323, r27
    5630:	08 95       	ret
    5632:	f5 d0       	rcall	.+490    	; 0x581e <__fp_pscA>
    5634:	58 f0       	brcs	.+22     	; 0x564c <srand+0x30>
    5636:	80 e8       	ldi	r24, 0x80	; 128
    5638:	91 e0       	ldi	r25, 0x01	; 1
    563a:	09 f4       	brne	.+2      	; 0x563e <srand+0x22>
    563c:	9e ef       	ldi	r25, 0xFE	; 254
    563e:	f6 d0       	rcall	.+492    	; 0x582c <__fp_pscB>
    5640:	28 f0       	brcs	.+10     	; 0x564c <srand+0x30>
    5642:	40 e8       	ldi	r20, 0x80	; 128
    5644:	51 e0       	ldi	r21, 0x01	; 1
    5646:	59 f4       	brne	.+22     	; 0x565e <atan2+0xe>
    5648:	5e ef       	ldi	r21, 0xFE	; 254
    564a:	09 c0       	rjmp	.+18     	; 0x565e <atan2+0xe>
    564c:	c0 c0       	rjmp	.+384    	; 0x57ce <__fp_nan>
    564e:	28 c1       	rjmp	.+592    	; 0x58a0 <__fp_zero>

00005650 <atan2>:
    5650:	e9 2f       	mov	r30, r25
    5652:	e0 78       	andi	r30, 0x80	; 128
    5654:	03 d1       	rcall	.+518    	; 0x585c <__fp_split3>
    5656:	68 f3       	brcs	.-38     	; 0x5632 <srand+0x16>
    5658:	09 2e       	mov	r0, r25
    565a:	05 2a       	or	r0, r21
    565c:	c1 f3       	breq	.-16     	; 0x564e <srand+0x32>
    565e:	26 17       	cp	r18, r22
    5660:	37 07       	cpc	r19, r23
    5662:	48 07       	cpc	r20, r24
    5664:	59 07       	cpc	r21, r25
    5666:	38 f0       	brcs	.+14     	; 0x5676 <atan2+0x26>
    5668:	0e 2e       	mov	r0, r30
    566a:	07 f8       	bld	r0, 7
    566c:	e0 25       	eor	r30, r0
    566e:	69 f0       	breq	.+26     	; 0x568a <atan2+0x3a>
    5670:	e0 25       	eor	r30, r0
    5672:	e0 64       	ori	r30, 0x40	; 64
    5674:	0a c0       	rjmp	.+20     	; 0x568a <atan2+0x3a>
    5676:	ef 63       	ori	r30, 0x3F	; 63
    5678:	07 f8       	bld	r0, 7
    567a:	00 94       	com	r0
    567c:	07 fa       	bst	r0, 7
    567e:	db 01       	movw	r26, r22
    5680:	b9 01       	movw	r22, r18
    5682:	9d 01       	movw	r18, r26
    5684:	dc 01       	movw	r26, r24
    5686:	ca 01       	movw	r24, r20
    5688:	ad 01       	movw	r20, r26
    568a:	ef 93       	push	r30
    568c:	41 d0       	rcall	.+130    	; 0x5710 <__divsf3_pse>
    568e:	d5 d0       	rcall	.+426    	; 0x583a <__fp_round>
    5690:	0a d0       	rcall	.+20     	; 0x56a6 <atan>
    5692:	5f 91       	pop	r21
    5694:	55 23       	and	r21, r21
    5696:	31 f0       	breq	.+12     	; 0x56a4 <atan2+0x54>
    5698:	2b ed       	ldi	r18, 0xDB	; 219
    569a:	3f e0       	ldi	r19, 0x0F	; 15
    569c:	49 e4       	ldi	r20, 0x49	; 73
    569e:	50 fd       	sbrc	r21, 0
    56a0:	49 ec       	ldi	r20, 0xC9	; 201
    56a2:	7c c1       	rjmp	.+760    	; 0x599c <__addsf3>
    56a4:	08 95       	ret

000056a6 <atan>:
    56a6:	df 93       	push	r29
    56a8:	dd 27       	eor	r29, r29
    56aa:	b9 2f       	mov	r27, r25
    56ac:	bf 77       	andi	r27, 0x7F	; 127
    56ae:	40 e8       	ldi	r20, 0x80	; 128
    56b0:	5f e3       	ldi	r21, 0x3F	; 63
    56b2:	16 16       	cp	r1, r22
    56b4:	17 06       	cpc	r1, r23
    56b6:	48 07       	cpc	r20, r24
    56b8:	5b 07       	cpc	r21, r27
    56ba:	10 f4       	brcc	.+4      	; 0x56c0 <atan+0x1a>
    56bc:	d9 2f       	mov	r29, r25
    56be:	f7 d0       	rcall	.+494    	; 0x58ae <inverse>
    56c0:	9f 93       	push	r25
    56c2:	8f 93       	push	r24
    56c4:	7f 93       	push	r23
    56c6:	6f 93       	push	r22
    56c8:	5a d1       	rcall	.+692    	; 0x597e <square>
    56ca:	ee e4       	ldi	r30, 0x4E	; 78
    56cc:	f1 e0       	ldi	r31, 0x01	; 1
    56ce:	82 d0       	rcall	.+260    	; 0x57d4 <__fp_powser>
    56d0:	b4 d0       	rcall	.+360    	; 0x583a <__fp_round>
    56d2:	2f 91       	pop	r18
    56d4:	3f 91       	pop	r19
    56d6:	4f 91       	pop	r20
    56d8:	5f 91       	pop	r21
    56da:	fa d0       	rcall	.+500    	; 0x58d0 <__mulsf3x>
    56dc:	dd 23       	and	r29, r29
    56de:	49 f0       	breq	.+18     	; 0x56f2 <atan+0x4c>
    56e0:	90 58       	subi	r25, 0x80	; 128
    56e2:	a2 ea       	ldi	r26, 0xA2	; 162
    56e4:	2a ed       	ldi	r18, 0xDA	; 218
    56e6:	3f e0       	ldi	r19, 0x0F	; 15
    56e8:	49 ec       	ldi	r20, 0xC9	; 201
    56ea:	5f e3       	ldi	r21, 0x3F	; 63
    56ec:	d0 78       	andi	r29, 0x80	; 128
    56ee:	5d 27       	eor	r21, r29
    56f0:	66 d1       	rcall	.+716    	; 0x59be <__addsf3x>
    56f2:	df 91       	pop	r29
    56f4:	a2 c0       	rjmp	.+324    	; 0x583a <__fp_round>
    56f6:	9a d0       	rcall	.+308    	; 0x582c <__fp_pscB>
    56f8:	40 f0       	brcs	.+16     	; 0x570a <atan+0x64>
    56fa:	91 d0       	rcall	.+290    	; 0x581e <__fp_pscA>
    56fc:	30 f0       	brcs	.+12     	; 0x570a <atan+0x64>
    56fe:	21 f4       	brne	.+8      	; 0x5708 <atan+0x62>
    5700:	5f 3f       	cpi	r21, 0xFF	; 255
    5702:	19 f0       	breq	.+6      	; 0x570a <atan+0x64>
    5704:	5e c0       	rjmp	.+188    	; 0x57c2 <__fp_inf>
    5706:	51 11       	cpse	r21, r1
    5708:	cc c0       	rjmp	.+408    	; 0x58a2 <__fp_szero>
    570a:	61 c0       	rjmp	.+194    	; 0x57ce <__fp_nan>

0000570c <__divsf3x>:
    570c:	a7 d0       	rcall	.+334    	; 0x585c <__fp_split3>
    570e:	98 f3       	brcs	.-26     	; 0x56f6 <atan+0x50>

00005710 <__divsf3_pse>:
    5710:	99 23       	and	r25, r25
    5712:	c9 f3       	breq	.-14     	; 0x5706 <atan+0x60>
    5714:	55 23       	and	r21, r21
    5716:	b1 f3       	breq	.-20     	; 0x5704 <atan+0x5e>
    5718:	95 1b       	sub	r25, r21
    571a:	55 0b       	sbc	r21, r21
    571c:	bb 27       	eor	r27, r27
    571e:	aa 27       	eor	r26, r26
    5720:	62 17       	cp	r22, r18
    5722:	73 07       	cpc	r23, r19
    5724:	84 07       	cpc	r24, r20
    5726:	38 f0       	brcs	.+14     	; 0x5736 <__divsf3_pse+0x26>
    5728:	9f 5f       	subi	r25, 0xFF	; 255
    572a:	5f 4f       	sbci	r21, 0xFF	; 255
    572c:	22 0f       	add	r18, r18
    572e:	33 1f       	adc	r19, r19
    5730:	44 1f       	adc	r20, r20
    5732:	aa 1f       	adc	r26, r26
    5734:	a9 f3       	breq	.-22     	; 0x5720 <__divsf3_pse+0x10>
    5736:	33 d0       	rcall	.+102    	; 0x579e <__divsf3_pse+0x8e>
    5738:	0e 2e       	mov	r0, r30
    573a:	3a f0       	brmi	.+14     	; 0x574a <__divsf3_pse+0x3a>
    573c:	e0 e8       	ldi	r30, 0x80	; 128
    573e:	30 d0       	rcall	.+96     	; 0x57a0 <__divsf3_pse+0x90>
    5740:	91 50       	subi	r25, 0x01	; 1
    5742:	50 40       	sbci	r21, 0x00	; 0
    5744:	e6 95       	lsr	r30
    5746:	00 1c       	adc	r0, r0
    5748:	ca f7       	brpl	.-14     	; 0x573c <__divsf3_pse+0x2c>
    574a:	29 d0       	rcall	.+82     	; 0x579e <__divsf3_pse+0x8e>
    574c:	fe 2f       	mov	r31, r30
    574e:	27 d0       	rcall	.+78     	; 0x579e <__divsf3_pse+0x8e>
    5750:	66 0f       	add	r22, r22
    5752:	77 1f       	adc	r23, r23
    5754:	88 1f       	adc	r24, r24
    5756:	bb 1f       	adc	r27, r27
    5758:	26 17       	cp	r18, r22
    575a:	37 07       	cpc	r19, r23
    575c:	48 07       	cpc	r20, r24
    575e:	ab 07       	cpc	r26, r27
    5760:	b0 e8       	ldi	r27, 0x80	; 128
    5762:	09 f0       	breq	.+2      	; 0x5766 <__divsf3_pse+0x56>
    5764:	bb 0b       	sbc	r27, r27
    5766:	80 2d       	mov	r24, r0
    5768:	bf 01       	movw	r22, r30
    576a:	ff 27       	eor	r31, r31
    576c:	93 58       	subi	r25, 0x83	; 131
    576e:	5f 4f       	sbci	r21, 0xFF	; 255
    5770:	2a f0       	brmi	.+10     	; 0x577c <__divsf3_pse+0x6c>
    5772:	9e 3f       	cpi	r25, 0xFE	; 254
    5774:	51 05       	cpc	r21, r1
    5776:	68 f0       	brcs	.+26     	; 0x5792 <__divsf3_pse+0x82>
    5778:	24 c0       	rjmp	.+72     	; 0x57c2 <__fp_inf>
    577a:	93 c0       	rjmp	.+294    	; 0x58a2 <__fp_szero>
    577c:	5f 3f       	cpi	r21, 0xFF	; 255
    577e:	ec f3       	brlt	.-6      	; 0x577a <__divsf3_pse+0x6a>
    5780:	98 3e       	cpi	r25, 0xE8	; 232
    5782:	dc f3       	brlt	.-10     	; 0x577a <__divsf3_pse+0x6a>
    5784:	86 95       	lsr	r24
    5786:	77 95       	ror	r23
    5788:	67 95       	ror	r22
    578a:	b7 95       	ror	r27
    578c:	f7 95       	ror	r31
    578e:	9f 5f       	subi	r25, 0xFF	; 255
    5790:	c9 f7       	brne	.-14     	; 0x5784 <__divsf3_pse+0x74>
    5792:	88 0f       	add	r24, r24
    5794:	91 1d       	adc	r25, r1
    5796:	96 95       	lsr	r25
    5798:	87 95       	ror	r24
    579a:	97 f9       	bld	r25, 7
    579c:	08 95       	ret
    579e:	e1 e0       	ldi	r30, 0x01	; 1
    57a0:	66 0f       	add	r22, r22
    57a2:	77 1f       	adc	r23, r23
    57a4:	88 1f       	adc	r24, r24
    57a6:	bb 1f       	adc	r27, r27
    57a8:	62 17       	cp	r22, r18
    57aa:	73 07       	cpc	r23, r19
    57ac:	84 07       	cpc	r24, r20
    57ae:	ba 07       	cpc	r27, r26
    57b0:	20 f0       	brcs	.+8      	; 0x57ba <__divsf3_pse+0xaa>
    57b2:	62 1b       	sub	r22, r18
    57b4:	73 0b       	sbc	r23, r19
    57b6:	84 0b       	sbc	r24, r20
    57b8:	ba 0b       	sbc	r27, r26
    57ba:	ee 1f       	adc	r30, r30
    57bc:	88 f7       	brcc	.-30     	; 0x57a0 <__divsf3_pse+0x90>
    57be:	e0 95       	com	r30
    57c0:	08 95       	ret

000057c2 <__fp_inf>:
    57c2:	97 f9       	bld	r25, 7
    57c4:	9f 67       	ori	r25, 0x7F	; 127
    57c6:	80 e8       	ldi	r24, 0x80	; 128
    57c8:	70 e0       	ldi	r23, 0x00	; 0
    57ca:	60 e0       	ldi	r22, 0x00	; 0
    57cc:	08 95       	ret

000057ce <__fp_nan>:
    57ce:	9f ef       	ldi	r25, 0xFF	; 255
    57d0:	80 ec       	ldi	r24, 0xC0	; 192
    57d2:	08 95       	ret

000057d4 <__fp_powser>:
    57d4:	df 93       	push	r29
    57d6:	cf 93       	push	r28
    57d8:	1f 93       	push	r17
    57da:	0f 93       	push	r16
    57dc:	ff 92       	push	r15
    57de:	ef 92       	push	r14
    57e0:	df 92       	push	r13
    57e2:	7b 01       	movw	r14, r22
    57e4:	8c 01       	movw	r16, r24
    57e6:	68 94       	set
    57e8:	05 c0       	rjmp	.+10     	; 0x57f4 <__fp_powser+0x20>
    57ea:	da 2e       	mov	r13, r26
    57ec:	ef 01       	movw	r28, r30
    57ee:	70 d0       	rcall	.+224    	; 0x58d0 <__mulsf3x>
    57f0:	fe 01       	movw	r30, r28
    57f2:	e8 94       	clt
    57f4:	a5 91       	lpm	r26, Z+
    57f6:	25 91       	lpm	r18, Z+
    57f8:	35 91       	lpm	r19, Z+
    57fa:	45 91       	lpm	r20, Z+
    57fc:	55 91       	lpm	r21, Z+
    57fe:	ae f3       	brts	.-22     	; 0x57ea <__fp_powser+0x16>
    5800:	ef 01       	movw	r28, r30
    5802:	dd d0       	rcall	.+442    	; 0x59be <__addsf3x>
    5804:	fe 01       	movw	r30, r28
    5806:	97 01       	movw	r18, r14
    5808:	a8 01       	movw	r20, r16
    580a:	da 94       	dec	r13
    580c:	79 f7       	brne	.-34     	; 0x57ec <__fp_powser+0x18>
    580e:	df 90       	pop	r13
    5810:	ef 90       	pop	r14
    5812:	ff 90       	pop	r15
    5814:	0f 91       	pop	r16
    5816:	1f 91       	pop	r17
    5818:	cf 91       	pop	r28
    581a:	df 91       	pop	r29
    581c:	08 95       	ret

0000581e <__fp_pscA>:
    581e:	00 24       	eor	r0, r0
    5820:	0a 94       	dec	r0
    5822:	16 16       	cp	r1, r22
    5824:	17 06       	cpc	r1, r23
    5826:	18 06       	cpc	r1, r24
    5828:	09 06       	cpc	r0, r25
    582a:	08 95       	ret

0000582c <__fp_pscB>:
    582c:	00 24       	eor	r0, r0
    582e:	0a 94       	dec	r0
    5830:	12 16       	cp	r1, r18
    5832:	13 06       	cpc	r1, r19
    5834:	14 06       	cpc	r1, r20
    5836:	05 06       	cpc	r0, r21
    5838:	08 95       	ret

0000583a <__fp_round>:
    583a:	09 2e       	mov	r0, r25
    583c:	03 94       	inc	r0
    583e:	00 0c       	add	r0, r0
    5840:	11 f4       	brne	.+4      	; 0x5846 <__fp_round+0xc>
    5842:	88 23       	and	r24, r24
    5844:	52 f0       	brmi	.+20     	; 0x585a <__fp_round+0x20>
    5846:	bb 0f       	add	r27, r27
    5848:	40 f4       	brcc	.+16     	; 0x585a <__fp_round+0x20>
    584a:	bf 2b       	or	r27, r31
    584c:	11 f4       	brne	.+4      	; 0x5852 <__fp_round+0x18>
    584e:	60 ff       	sbrs	r22, 0
    5850:	04 c0       	rjmp	.+8      	; 0x585a <__fp_round+0x20>
    5852:	6f 5f       	subi	r22, 0xFF	; 255
    5854:	7f 4f       	sbci	r23, 0xFF	; 255
    5856:	8f 4f       	sbci	r24, 0xFF	; 255
    5858:	9f 4f       	sbci	r25, 0xFF	; 255
    585a:	08 95       	ret

0000585c <__fp_split3>:
    585c:	57 fd       	sbrc	r21, 7
    585e:	90 58       	subi	r25, 0x80	; 128
    5860:	44 0f       	add	r20, r20
    5862:	55 1f       	adc	r21, r21
    5864:	59 f0       	breq	.+22     	; 0x587c <__fp_splitA+0x10>
    5866:	5f 3f       	cpi	r21, 0xFF	; 255
    5868:	71 f0       	breq	.+28     	; 0x5886 <__fp_splitA+0x1a>
    586a:	47 95       	ror	r20

0000586c <__fp_splitA>:
    586c:	88 0f       	add	r24, r24
    586e:	97 fb       	bst	r25, 7
    5870:	99 1f       	adc	r25, r25
    5872:	61 f0       	breq	.+24     	; 0x588c <__fp_splitA+0x20>
    5874:	9f 3f       	cpi	r25, 0xFF	; 255
    5876:	79 f0       	breq	.+30     	; 0x5896 <__fp_splitA+0x2a>
    5878:	87 95       	ror	r24
    587a:	08 95       	ret
    587c:	12 16       	cp	r1, r18
    587e:	13 06       	cpc	r1, r19
    5880:	14 06       	cpc	r1, r20
    5882:	55 1f       	adc	r21, r21
    5884:	f2 cf       	rjmp	.-28     	; 0x586a <__fp_split3+0xe>
    5886:	46 95       	lsr	r20
    5888:	f1 df       	rcall	.-30     	; 0x586c <__fp_splitA>
    588a:	08 c0       	rjmp	.+16     	; 0x589c <__fp_splitA+0x30>
    588c:	16 16       	cp	r1, r22
    588e:	17 06       	cpc	r1, r23
    5890:	18 06       	cpc	r1, r24
    5892:	99 1f       	adc	r25, r25
    5894:	f1 cf       	rjmp	.-30     	; 0x5878 <__fp_splitA+0xc>
    5896:	86 95       	lsr	r24
    5898:	71 05       	cpc	r23, r1
    589a:	61 05       	cpc	r22, r1
    589c:	08 94       	sec
    589e:	08 95       	ret

000058a0 <__fp_zero>:
    58a0:	e8 94       	clt

000058a2 <__fp_szero>:
    58a2:	bb 27       	eor	r27, r27
    58a4:	66 27       	eor	r22, r22
    58a6:	77 27       	eor	r23, r23
    58a8:	cb 01       	movw	r24, r22
    58aa:	97 f9       	bld	r25, 7
    58ac:	08 95       	ret

000058ae <inverse>:
    58ae:	9b 01       	movw	r18, r22
    58b0:	ac 01       	movw	r20, r24
    58b2:	60 e0       	ldi	r22, 0x00	; 0
    58b4:	70 e0       	ldi	r23, 0x00	; 0
    58b6:	80 e8       	ldi	r24, 0x80	; 128
    58b8:	9f e3       	ldi	r25, 0x3F	; 63
    58ba:	d4 c0       	rjmp	.+424    	; 0x5a64 <__divsf3>
    58bc:	b0 df       	rcall	.-160    	; 0x581e <__fp_pscA>
    58be:	28 f0       	brcs	.+10     	; 0x58ca <inverse+0x1c>
    58c0:	b5 df       	rcall	.-150    	; 0x582c <__fp_pscB>
    58c2:	18 f0       	brcs	.+6      	; 0x58ca <inverse+0x1c>
    58c4:	95 23       	and	r25, r21
    58c6:	09 f0       	breq	.+2      	; 0x58ca <inverse+0x1c>
    58c8:	7c cf       	rjmp	.-264    	; 0x57c2 <__fp_inf>
    58ca:	81 cf       	rjmp	.-254    	; 0x57ce <__fp_nan>
    58cc:	11 24       	eor	r1, r1
    58ce:	e9 cf       	rjmp	.-46     	; 0x58a2 <__fp_szero>

000058d0 <__mulsf3x>:
    58d0:	c5 df       	rcall	.-118    	; 0x585c <__fp_split3>
    58d2:	a0 f3       	brcs	.-24     	; 0x58bc <inverse+0xe>

000058d4 <__mulsf3_pse>:
    58d4:	95 9f       	mul	r25, r21
    58d6:	d1 f3       	breq	.-12     	; 0x58cc <inverse+0x1e>
    58d8:	95 0f       	add	r25, r21
    58da:	50 e0       	ldi	r21, 0x00	; 0
    58dc:	55 1f       	adc	r21, r21
    58de:	62 9f       	mul	r22, r18
    58e0:	f0 01       	movw	r30, r0
    58e2:	72 9f       	mul	r23, r18
    58e4:	bb 27       	eor	r27, r27
    58e6:	f0 0d       	add	r31, r0
    58e8:	b1 1d       	adc	r27, r1
    58ea:	63 9f       	mul	r22, r19
    58ec:	aa 27       	eor	r26, r26
    58ee:	f0 0d       	add	r31, r0
    58f0:	b1 1d       	adc	r27, r1
    58f2:	aa 1f       	adc	r26, r26
    58f4:	64 9f       	mul	r22, r20
    58f6:	66 27       	eor	r22, r22
    58f8:	b0 0d       	add	r27, r0
    58fa:	a1 1d       	adc	r26, r1
    58fc:	66 1f       	adc	r22, r22
    58fe:	82 9f       	mul	r24, r18
    5900:	22 27       	eor	r18, r18
    5902:	b0 0d       	add	r27, r0
    5904:	a1 1d       	adc	r26, r1
    5906:	62 1f       	adc	r22, r18
    5908:	73 9f       	mul	r23, r19
    590a:	b0 0d       	add	r27, r0
    590c:	a1 1d       	adc	r26, r1
    590e:	62 1f       	adc	r22, r18
    5910:	83 9f       	mul	r24, r19
    5912:	a0 0d       	add	r26, r0
    5914:	61 1d       	adc	r22, r1
    5916:	22 1f       	adc	r18, r18
    5918:	74 9f       	mul	r23, r20
    591a:	33 27       	eor	r19, r19
    591c:	a0 0d       	add	r26, r0
    591e:	61 1d       	adc	r22, r1
    5920:	23 1f       	adc	r18, r19
    5922:	84 9f       	mul	r24, r20
    5924:	60 0d       	add	r22, r0
    5926:	21 1d       	adc	r18, r1
    5928:	82 2f       	mov	r24, r18
    592a:	76 2f       	mov	r23, r22
    592c:	6a 2f       	mov	r22, r26
    592e:	11 24       	eor	r1, r1
    5930:	9f 57       	subi	r25, 0x7F	; 127
    5932:	50 40       	sbci	r21, 0x00	; 0
    5934:	8a f0       	brmi	.+34     	; 0x5958 <__mulsf3_pse+0x84>
    5936:	e1 f0       	breq	.+56     	; 0x5970 <__mulsf3_pse+0x9c>
    5938:	88 23       	and	r24, r24
    593a:	4a f0       	brmi	.+18     	; 0x594e <__mulsf3_pse+0x7a>
    593c:	ee 0f       	add	r30, r30
    593e:	ff 1f       	adc	r31, r31
    5940:	bb 1f       	adc	r27, r27
    5942:	66 1f       	adc	r22, r22
    5944:	77 1f       	adc	r23, r23
    5946:	88 1f       	adc	r24, r24
    5948:	91 50       	subi	r25, 0x01	; 1
    594a:	50 40       	sbci	r21, 0x00	; 0
    594c:	a9 f7       	brne	.-22     	; 0x5938 <__mulsf3_pse+0x64>
    594e:	9e 3f       	cpi	r25, 0xFE	; 254
    5950:	51 05       	cpc	r21, r1
    5952:	70 f0       	brcs	.+28     	; 0x5970 <__mulsf3_pse+0x9c>
    5954:	36 cf       	rjmp	.-404    	; 0x57c2 <__fp_inf>
    5956:	a5 cf       	rjmp	.-182    	; 0x58a2 <__fp_szero>
    5958:	5f 3f       	cpi	r21, 0xFF	; 255
    595a:	ec f3       	brlt	.-6      	; 0x5956 <__mulsf3_pse+0x82>
    595c:	98 3e       	cpi	r25, 0xE8	; 232
    595e:	dc f3       	brlt	.-10     	; 0x5956 <__mulsf3_pse+0x82>
    5960:	86 95       	lsr	r24
    5962:	77 95       	ror	r23
    5964:	67 95       	ror	r22
    5966:	b7 95       	ror	r27
    5968:	f7 95       	ror	r31
    596a:	e7 95       	ror	r30
    596c:	9f 5f       	subi	r25, 0xFF	; 255
    596e:	c1 f7       	brne	.-16     	; 0x5960 <__mulsf3_pse+0x8c>
    5970:	fe 2b       	or	r31, r30
    5972:	88 0f       	add	r24, r24
    5974:	91 1d       	adc	r25, r1
    5976:	96 95       	lsr	r25
    5978:	87 95       	ror	r24
    597a:	97 f9       	bld	r25, 7
    597c:	08 95       	ret

0000597e <square>:
    597e:	9b 01       	movw	r18, r22
    5980:	ac 01       	movw	r20, r24
    5982:	2f ca       	rjmp	.-2978   	; 0x4de2 <__mulsf3>

00005984 <__eerd_word_m2560>:
    5984:	a8 e1       	ldi	r26, 0x18	; 24
    5986:	b0 e0       	ldi	r27, 0x00	; 0
    5988:	42 e0       	ldi	r20, 0x02	; 2
    598a:	50 e0       	ldi	r21, 0x00	; 0
    598c:	0c 94 36 2d 	jmp	0x5a6c	; 0x5a6c <__eerd_blraw_m2560>

00005990 <__eewr_word_m2560>:
    5990:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <__eewr_byte_m2560>
    5994:	27 2f       	mov	r18, r23
    5996:	0c 94 45 2d 	jmp	0x5a8a	; 0x5a8a <__eewr_r18_m2560>

0000599a <__subsf3>:
    599a:	50 58       	subi	r21, 0x80	; 128

0000599c <__addsf3>:
    599c:	bb 27       	eor	r27, r27
    599e:	aa 27       	eor	r26, r26
    59a0:	0e d0       	rcall	.+28     	; 0x59be <__addsf3x>
    59a2:	4b cf       	rjmp	.-362    	; 0x583a <__fp_round>
    59a4:	3c df       	rcall	.-392    	; 0x581e <__fp_pscA>
    59a6:	30 f0       	brcs	.+12     	; 0x59b4 <__addsf3+0x18>
    59a8:	41 df       	rcall	.-382    	; 0x582c <__fp_pscB>
    59aa:	20 f0       	brcs	.+8      	; 0x59b4 <__addsf3+0x18>
    59ac:	31 f4       	brne	.+12     	; 0x59ba <__addsf3+0x1e>
    59ae:	9f 3f       	cpi	r25, 0xFF	; 255
    59b0:	11 f4       	brne	.+4      	; 0x59b6 <__addsf3+0x1a>
    59b2:	1e f4       	brtc	.+6      	; 0x59ba <__addsf3+0x1e>
    59b4:	0c cf       	rjmp	.-488    	; 0x57ce <__fp_nan>
    59b6:	0e f4       	brtc	.+2      	; 0x59ba <__addsf3+0x1e>
    59b8:	e0 95       	com	r30
    59ba:	e7 fb       	bst	r30, 7
    59bc:	02 cf       	rjmp	.-508    	; 0x57c2 <__fp_inf>

000059be <__addsf3x>:
    59be:	e9 2f       	mov	r30, r25
    59c0:	4d df       	rcall	.-358    	; 0x585c <__fp_split3>
    59c2:	80 f3       	brcs	.-32     	; 0x59a4 <__addsf3+0x8>
    59c4:	ba 17       	cp	r27, r26
    59c6:	62 07       	cpc	r22, r18
    59c8:	73 07       	cpc	r23, r19
    59ca:	84 07       	cpc	r24, r20
    59cc:	95 07       	cpc	r25, r21
    59ce:	18 f0       	brcs	.+6      	; 0x59d6 <__addsf3x+0x18>
    59d0:	71 f4       	brne	.+28     	; 0x59ee <__addsf3x+0x30>
    59d2:	9e f5       	brtc	.+102    	; 0x5a3a <__addsf3x+0x7c>
    59d4:	65 cf       	rjmp	.-310    	; 0x58a0 <__fp_zero>
    59d6:	0e f4       	brtc	.+2      	; 0x59da <__addsf3x+0x1c>
    59d8:	e0 95       	com	r30
    59da:	0b 2e       	mov	r0, r27
    59dc:	ba 2f       	mov	r27, r26
    59de:	a0 2d       	mov	r26, r0
    59e0:	0b 01       	movw	r0, r22
    59e2:	b9 01       	movw	r22, r18
    59e4:	90 01       	movw	r18, r0
    59e6:	0c 01       	movw	r0, r24
    59e8:	ca 01       	movw	r24, r20
    59ea:	a0 01       	movw	r20, r0
    59ec:	11 24       	eor	r1, r1
    59ee:	ff 27       	eor	r31, r31
    59f0:	59 1b       	sub	r21, r25
    59f2:	99 f0       	breq	.+38     	; 0x5a1a <__addsf3x+0x5c>
    59f4:	59 3f       	cpi	r21, 0xF9	; 249
    59f6:	50 f4       	brcc	.+20     	; 0x5a0c <__addsf3x+0x4e>
    59f8:	50 3e       	cpi	r21, 0xE0	; 224
    59fa:	68 f1       	brcs	.+90     	; 0x5a56 <__addsf3x+0x98>
    59fc:	1a 16       	cp	r1, r26
    59fe:	f0 40       	sbci	r31, 0x00	; 0
    5a00:	a2 2f       	mov	r26, r18
    5a02:	23 2f       	mov	r18, r19
    5a04:	34 2f       	mov	r19, r20
    5a06:	44 27       	eor	r20, r20
    5a08:	58 5f       	subi	r21, 0xF8	; 248
    5a0a:	f3 cf       	rjmp	.-26     	; 0x59f2 <__addsf3x+0x34>
    5a0c:	46 95       	lsr	r20
    5a0e:	37 95       	ror	r19
    5a10:	27 95       	ror	r18
    5a12:	a7 95       	ror	r26
    5a14:	f0 40       	sbci	r31, 0x00	; 0
    5a16:	53 95       	inc	r21
    5a18:	c9 f7       	brne	.-14     	; 0x5a0c <__addsf3x+0x4e>
    5a1a:	7e f4       	brtc	.+30     	; 0x5a3a <__addsf3x+0x7c>
    5a1c:	1f 16       	cp	r1, r31
    5a1e:	ba 0b       	sbc	r27, r26
    5a20:	62 0b       	sbc	r22, r18
    5a22:	73 0b       	sbc	r23, r19
    5a24:	84 0b       	sbc	r24, r20
    5a26:	ba f0       	brmi	.+46     	; 0x5a56 <__addsf3x+0x98>
    5a28:	91 50       	subi	r25, 0x01	; 1
    5a2a:	a1 f0       	breq	.+40     	; 0x5a54 <__addsf3x+0x96>
    5a2c:	ff 0f       	add	r31, r31
    5a2e:	bb 1f       	adc	r27, r27
    5a30:	66 1f       	adc	r22, r22
    5a32:	77 1f       	adc	r23, r23
    5a34:	88 1f       	adc	r24, r24
    5a36:	c2 f7       	brpl	.-16     	; 0x5a28 <__addsf3x+0x6a>
    5a38:	0e c0       	rjmp	.+28     	; 0x5a56 <__addsf3x+0x98>
    5a3a:	ba 0f       	add	r27, r26
    5a3c:	62 1f       	adc	r22, r18
    5a3e:	73 1f       	adc	r23, r19
    5a40:	84 1f       	adc	r24, r20
    5a42:	48 f4       	brcc	.+18     	; 0x5a56 <__addsf3x+0x98>
    5a44:	87 95       	ror	r24
    5a46:	77 95       	ror	r23
    5a48:	67 95       	ror	r22
    5a4a:	b7 95       	ror	r27
    5a4c:	f7 95       	ror	r31
    5a4e:	9e 3f       	cpi	r25, 0xFE	; 254
    5a50:	08 f0       	brcs	.+2      	; 0x5a54 <__addsf3x+0x96>
    5a52:	b3 cf       	rjmp	.-154    	; 0x59ba <__addsf3+0x1e>
    5a54:	93 95       	inc	r25
    5a56:	88 0f       	add	r24, r24
    5a58:	08 f0       	brcs	.+2      	; 0x5a5c <__addsf3x+0x9e>
    5a5a:	99 27       	eor	r25, r25
    5a5c:	ee 0f       	add	r30, r30
    5a5e:	97 95       	ror	r25
    5a60:	87 95       	ror	r24
    5a62:	08 95       	ret

00005a64 <__divsf3>:
    5a64:	53 de       	rcall	.-858    	; 0x570c <__divsf3x>
    5a66:	e9 ce       	rjmp	.-558    	; 0x583a <__fp_round>

00005a68 <__eerd_block_m2560>:
    5a68:	dc 01       	movw	r26, r24
    5a6a:	cb 01       	movw	r24, r22

00005a6c <__eerd_blraw_m2560>:
    5a6c:	fc 01       	movw	r30, r24
    5a6e:	f9 99       	sbic	0x1f, 1	; 31
    5a70:	fe cf       	rjmp	.-4      	; 0x5a6e <__eerd_blraw_m2560+0x2>
    5a72:	06 c0       	rjmp	.+12     	; 0x5a80 <__eerd_blraw_m2560+0x14>
    5a74:	f2 bd       	out	0x22, r31	; 34
    5a76:	e1 bd       	out	0x21, r30	; 33
    5a78:	f8 9a       	sbi	0x1f, 0	; 31
    5a7a:	31 96       	adiw	r30, 0x01	; 1
    5a7c:	00 b4       	in	r0, 0x20	; 32
    5a7e:	0d 92       	st	X+, r0
    5a80:	41 50       	subi	r20, 0x01	; 1
    5a82:	50 40       	sbci	r21, 0x00	; 0
    5a84:	b8 f7       	brcc	.-18     	; 0x5a74 <__eerd_blraw_m2560+0x8>
    5a86:	08 95       	ret

00005a88 <__eewr_byte_m2560>:
    5a88:	26 2f       	mov	r18, r22

00005a8a <__eewr_r18_m2560>:
    5a8a:	f9 99       	sbic	0x1f, 1	; 31
    5a8c:	fe cf       	rjmp	.-4      	; 0x5a8a <__eewr_r18_m2560>
    5a8e:	1f ba       	out	0x1f, r1	; 31
    5a90:	92 bd       	out	0x22, r25	; 34
    5a92:	81 bd       	out	0x21, r24	; 33
    5a94:	20 bd       	out	0x20, r18	; 32
    5a96:	0f b6       	in	r0, 0x3f	; 63
    5a98:	f8 94       	cli
    5a9a:	fa 9a       	sbi	0x1f, 2	; 31
    5a9c:	f9 9a       	sbi	0x1f, 1	; 31
    5a9e:	0f be       	out	0x3f, r0	; 63
    5aa0:	01 96       	adiw	r24, 0x01	; 1
    5aa2:	08 95       	ret

00005aa4 <__divmodsi4>:
    5aa4:	97 fb       	bst	r25, 7
    5aa6:	09 2e       	mov	r0, r25
    5aa8:	05 26       	eor	r0, r21
    5aaa:	0e d0       	rcall	.+28     	; 0x5ac8 <__divmodsi4_neg1>
    5aac:	57 fd       	sbrc	r21, 7
    5aae:	04 d0       	rcall	.+8      	; 0x5ab8 <__divmodsi4_neg2>
    5ab0:	14 d0       	rcall	.+40     	; 0x5ada <__udivmodsi4>
    5ab2:	0a d0       	rcall	.+20     	; 0x5ac8 <__divmodsi4_neg1>
    5ab4:	00 1c       	adc	r0, r0
    5ab6:	38 f4       	brcc	.+14     	; 0x5ac6 <__divmodsi4_exit>

00005ab8 <__divmodsi4_neg2>:
    5ab8:	50 95       	com	r21
    5aba:	40 95       	com	r20
    5abc:	30 95       	com	r19
    5abe:	21 95       	neg	r18
    5ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ac2:	4f 4f       	sbci	r20, 0xFF	; 255
    5ac4:	5f 4f       	sbci	r21, 0xFF	; 255

00005ac6 <__divmodsi4_exit>:
    5ac6:	08 95       	ret

00005ac8 <__divmodsi4_neg1>:
    5ac8:	f6 f7       	brtc	.-4      	; 0x5ac6 <__divmodsi4_exit>
    5aca:	90 95       	com	r25
    5acc:	80 95       	com	r24
    5ace:	70 95       	com	r23
    5ad0:	61 95       	neg	r22
    5ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ad8:	08 95       	ret

00005ada <__udivmodsi4>:
    5ada:	a1 e2       	ldi	r26, 0x21	; 33
    5adc:	1a 2e       	mov	r1, r26
    5ade:	aa 1b       	sub	r26, r26
    5ae0:	bb 1b       	sub	r27, r27
    5ae2:	fd 01       	movw	r30, r26
    5ae4:	0d c0       	rjmp	.+26     	; 0x5b00 <__udivmodsi4_ep>

00005ae6 <__udivmodsi4_loop>:
    5ae6:	aa 1f       	adc	r26, r26
    5ae8:	bb 1f       	adc	r27, r27
    5aea:	ee 1f       	adc	r30, r30
    5aec:	ff 1f       	adc	r31, r31
    5aee:	a2 17       	cp	r26, r18
    5af0:	b3 07       	cpc	r27, r19
    5af2:	e4 07       	cpc	r30, r20
    5af4:	f5 07       	cpc	r31, r21
    5af6:	20 f0       	brcs	.+8      	; 0x5b00 <__udivmodsi4_ep>
    5af8:	a2 1b       	sub	r26, r18
    5afa:	b3 0b       	sbc	r27, r19
    5afc:	e4 0b       	sbc	r30, r20
    5afe:	f5 0b       	sbc	r31, r21

00005b00 <__udivmodsi4_ep>:
    5b00:	66 1f       	adc	r22, r22
    5b02:	77 1f       	adc	r23, r23
    5b04:	88 1f       	adc	r24, r24
    5b06:	99 1f       	adc	r25, r25
    5b08:	1a 94       	dec	r1
    5b0a:	69 f7       	brne	.-38     	; 0x5ae6 <__udivmodsi4_loop>
    5b0c:	60 95       	com	r22
    5b0e:	70 95       	com	r23
    5b10:	80 95       	com	r24
    5b12:	90 95       	com	r25
    5b14:	9b 01       	movw	r18, r22
    5b16:	ac 01       	movw	r20, r24
    5b18:	bd 01       	movw	r22, r26
    5b1a:	cf 01       	movw	r24, r30
    5b1c:	08 95       	ret

00005b1e <_exit>:
    5b1e:	ff cf       	rjmp	.-2      	; 0x5b1e <_exit>
