
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  0000666c  00006700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000666c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028a  0080021e  0080021e  0000671e  2**0
                  ALLOC
  3 .stab         000034bc  00000000  00000000  00006720  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d8c  00000000  00000000  00009bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001f8  00000000  00000000  0000a968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000162f  00000000  00000000  0000ab60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000415f  00000000  00000000  0000c18f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f31  00000000  00000000  000102ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000526f  00000000  00000000  0001121f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000730  00000000  00000000  00016490  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001074  00000000  00000000  00016bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000014aa  00000000  00000000  00017c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000219  00000000  00000000  000190de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  000192f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <__vector_32>
      84:	0c 94 c7 24 	jmp	0x498e	; 0x498e <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 24 24 	jmp	0x4848	; 0x4848 <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 f8 23 	jmp	0x47f0	; 0x47f0 <__vector_42>
      ac:	0c 94 0e 24 	jmp	0x481c	; 0x481c <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	08 13       	cpse	r16, r24
      e6:	ec 12       	cpse	r14, r28
      e8:	ba 12       	cpse	r11, r26
      ea:	7d 13       	cpse	r23, r29
      ec:	47 13       	cpse	r20, r23
      ee:	70 13       	cpse	r23, r16
      f0:	91 12       	cpse	r9, r17
      f2:	75 12       	cpse	r7, r21
      f4:	48 12       	cpse	r4, r24
      f6:	30 12       	cpse	r3, r16
      f8:	d1 11       	cpse	r29, r1
      fa:	d1 11       	cpse	r29, r1
      fc:	d1 11       	cpse	r29, r1
      fe:	d1 11       	cpse	r29, r1
     100:	d1 11       	cpse	r29, r1
     102:	d1 11       	cpse	r29, r1
     104:	24 12       	cpse	r2, r20
     106:	19 12       	cpse	r1, r25
     108:	d1 11       	cpse	r29, r1
     10a:	d1 11       	cpse	r29, r1
     10c:	d1 11       	cpse	r29, r1
     10e:	d1 11       	cpse	r29, r1
     110:	d1 11       	cpse	r29, r1
     112:	d1 11       	cpse	r29, r1
     114:	d1 11       	cpse	r29, r1
     116:	d1 11       	cpse	r29, r1
     118:	d1 11       	cpse	r29, r1
     11a:	d1 11       	cpse	r29, r1
     11c:	d1 11       	cpse	r29, r1
     11e:	d1 11       	cpse	r29, r1
     120:	48 12       	cpse	r4, r24
     122:	ba 12       	cpse	r11, r26
     124:	0d 12       	cpse	r0, r29
     126:	08 12       	cpse	r0, r24
     128:	d1 11       	cpse	r29, r1
     12a:	d1 11       	cpse	r29, r1
     12c:	d1 11       	cpse	r29, r1
     12e:	d1 11       	cpse	r29, r1
     130:	d1 11       	cpse	r29, r1
     132:	d1 11       	cpse	r29, r1
     134:	d1 11       	cpse	r29, r1
     136:	d1 11       	cpse	r29, r1
     138:	d1 11       	cpse	r29, r1
     13a:	d1 11       	cpse	r29, r1
     13c:	d1 11       	cpse	r29, r1
     13e:	d1 11       	cpse	r29, r1
     140:	47 13       	cpse	r20, r23
     142:	91 12       	cpse	r9, r17
     144:	d1 11       	cpse	r29, r1
     146:	d1 11       	cpse	r29, r1
     148:	08 13       	cpse	r16, r24
     14a:	70 13       	cpse	r23, r16
     14c:	31 13       	cpse	r19, r17
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	ec e6       	ldi	r30, 0x6C	; 108
     1b2:	f6 e6       	ldi	r31, 0x66	; 102
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ae 31       	cpi	r26, 0x1E	; 30
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	14 e0       	ldi	r17, 0x04	; 4
     1c2:	ae e1       	ldi	r26, 0x1E	; 30
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a8 3a       	cpi	r26, 0xA8	; 168
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 35 33 	jmp	0x666a	; 0x666a <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <main+0x26>
     202:	0f 92       	push	r0
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     208:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <initPeripherals>

	calibrateSensors();
     20c:	0e 94 2d 2a 	call	0x545a	; 0x545a <calibrateSensors>

	initBehaviors();
     210:	0e 94 dd 24 	call	0x49ba	; 0x49ba <initBehaviors>

	startTime = getTime100MicroSec();
     214:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     21c:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
     220:	9b 01       	movw	r18, r22
     222:	ac 01       	movw	r20, r24
     224:	60 93 59 04 	sts	0x0459, r22
     228:	30 93 5a 04 	sts	0x045A, r19
     22c:	40 93 5b 04 	sts	0x045B, r20
     230:	50 93 5c 04 	sts	0x045C, r21
     234:	10 92 5d 04 	sts	0x045D, r1
     238:	10 92 5e 04 	sts	0x045E, r1
     23c:	10 92 5f 04 	sts	0x045F, r1
     240:	10 92 60 04 	sts	0x0460, r1
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     244:	aa 24       	eor	r10, r10
     246:	bb 24       	eor	r11, r11


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
     24e:	1b 82       	std	Y+3, r1	; 0x03
     250:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     252:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     254:	22 24       	eor	r2, r2
     256:	23 94       	inc	r2

	speedStepCounter = getTime100MicroSec();

	while(1) {

		currentSelector = getSelector();	// update selector position
     258:	0e 94 2c 1a 	call	0x3458	; 0x3458 <getSelector>
     25c:	80 93 49 04 	sts	0x0449, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     260:	0e 94 6d 29 	call	0x52da	; 0x52da <readAccelXYZ>

		computeAngle();
     264:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     268:	80 91 49 04 	lds	r24, 0x0449
     26c:	87 30       	cpi	r24, 0x07	; 7
     26e:	09 f4       	brne	.+2      	; 0x272 <main+0x96>
     270:	c3 c1       	rjmp	.+902    	; 0x5f8 <main+0x41c>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     272:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     276:	6c 19       	sub	r22, r12
     278:	7d 09       	sbc	r23, r13
     27a:	8e 09       	sbc	r24, r14
     27c:	9f 09       	sbc	r25, r15
     27e:	6e 31       	cpi	r22, 0x1E	; 30
     280:	4b e4       	ldi	r20, 0x4B	; 75
     282:	74 07       	cpc	r23, r20
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	84 07       	cpc	r24, r20
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	94 07       	cpc	r25, r20
     28c:	08 f0       	brcs	.+2      	; 0x290 <main+0xb4>
     28e:	93 c1       	rjmp	.+806    	; 0x5b6 <main+0x3da>

			startTime = getTime100MicroSec();
		}


		handleIRRemoteCommands();
     290:	0e 94 bf 11 	call	0x237e	; 0x237e <handleIRRemoteCommands>


		handleRFCommands();
     294:	0e 94 40 0c 	call	0x1880	; 0x1880 <handleRFCommands>


		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     298:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
     29c:	9b 01       	movw	r18, r22
     29e:	ac 01       	movw	r20, r24
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	cb 01       	movw	r24, r22
     2a6:	f0 91 59 04 	lds	r31, 0x0459
     2aa:	e0 91 5a 04 	lds	r30, 0x045A
     2ae:	80 90 5b 04 	lds	r8, 0x045B
     2b2:	40 90 5c 04 	lds	r4, 0x045C
     2b6:	30 90 5d 04 	lds	r3, 0x045D
     2ba:	50 90 5e 04 	lds	r5, 0x045E
     2be:	60 90 5f 04 	lds	r6, 0x045F
     2c2:	70 90 60 04 	lds	r7, 0x0460
     2c6:	b2 2f       	mov	r27, r18
     2c8:	bf 1b       	sub	r27, r31
     2ca:	a1 e0       	ldi	r26, 0x01	; 1
     2cc:	2b 17       	cp	r18, r27
     2ce:	08 f0       	brcs	.+2      	; 0x2d2 <main+0xf6>
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	f3 2f       	mov	r31, r19
     2d4:	fe 1b       	sub	r31, r30
     2d6:	ef 2f       	mov	r30, r31
     2d8:	f1 e0       	ldi	r31, 0x01	; 1
     2da:	3e 17       	cp	r19, r30
     2dc:	08 f0       	brcs	.+2      	; 0x2e0 <main+0x104>
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	9e 2e       	mov	r9, r30
     2e2:	9a 1a       	sub	r9, r26
     2e4:	a9 2d       	mov	r26, r9
     2e6:	99 24       	eor	r9, r9
     2e8:	93 94       	inc	r9
     2ea:	ea 17       	cp	r30, r26
     2ec:	08 f0       	brcs	.+2      	; 0x2f0 <main+0x114>
     2ee:	99 24       	eor	r9, r9
     2f0:	f9 29       	or	r31, r9
     2f2:	e4 2f       	mov	r30, r20
     2f4:	e8 19       	sub	r30, r8
     2f6:	8e 2e       	mov	r8, r30
     2f8:	e1 e0       	ldi	r30, 0x01	; 1
     2fa:	48 15       	cp	r20, r8
     2fc:	08 f0       	brcs	.+2      	; 0x300 <main+0x124>
     2fe:	e0 e0       	ldi	r30, 0x00	; 0
     300:	98 2c       	mov	r9, r8
     302:	9f 1a       	sub	r9, r31
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	89 14       	cp	r8, r9
     308:	08 f0       	brcs	.+2      	; 0x30c <main+0x130>
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	ef 2b       	or	r30, r31
     30e:	f5 2f       	mov	r31, r21
     310:	f4 19       	sub	r31, r4
     312:	4f 2e       	mov	r4, r31
     314:	f1 e0       	ldi	r31, 0x01	; 1
     316:	54 15       	cp	r21, r4
     318:	08 f0       	brcs	.+2      	; 0x31c <main+0x140>
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	84 2c       	mov	r8, r4
     31e:	8e 1a       	sub	r8, r30
     320:	e1 e0       	ldi	r30, 0x01	; 1
     322:	48 14       	cp	r4, r8
     324:	08 f0       	brcs	.+2      	; 0x328 <main+0x14c>
     326:	e0 e0       	ldi	r30, 0x00	; 0
     328:	fe 2b       	or	r31, r30
     32a:	31 94       	neg	r3
     32c:	e1 e0       	ldi	r30, 0x01	; 1
     32e:	63 15       	cp	r22, r3
     330:	08 f0       	brcs	.+2      	; 0x334 <main+0x158>
     332:	e0 e0       	ldi	r30, 0x00	; 0
     334:	43 2c       	mov	r4, r3
     336:	4f 1a       	sub	r4, r31
     338:	f1 e0       	ldi	r31, 0x01	; 1
     33a:	34 14       	cp	r3, r4
     33c:	08 f0       	brcs	.+2      	; 0x340 <main+0x164>
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	ef 2b       	or	r30, r31
     342:	51 94       	neg	r5
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	75 15       	cp	r23, r5
     348:	08 f0       	brcs	.+2      	; 0x34c <main+0x170>
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	35 2c       	mov	r3, r5
     34e:	3e 1a       	sub	r3, r30
     350:	e1 e0       	ldi	r30, 0x01	; 1
     352:	53 14       	cp	r5, r3
     354:	08 f0       	brcs	.+2      	; 0x358 <main+0x17c>
     356:	e0 e0       	ldi	r30, 0x00	; 0
     358:	fe 2b       	or	r31, r30
     35a:	61 94       	neg	r6
     35c:	e1 e0       	ldi	r30, 0x01	; 1
     35e:	86 15       	cp	r24, r6
     360:	08 f0       	brcs	.+2      	; 0x364 <main+0x188>
     362:	e0 e0       	ldi	r30, 0x00	; 0
     364:	96 2d       	mov	r25, r6
     366:	9f 1b       	sub	r25, r31
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	69 16       	cp	r6, r25
     36c:	08 f0       	brcs	.+2      	; 0x370 <main+0x194>
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	e8 2b       	or	r30, r24
     372:	71 94       	neg	r7
     374:	7e 16       	cp	r7, r30
     376:	09 f0       	breq	.+2      	; 0x37a <main+0x19e>
     378:	8b c0       	rjmp	.+278    	; 0x490 <main+0x2b4>
     37a:	99 23       	and	r25, r25
     37c:	09 f0       	breq	.+2      	; 0x380 <main+0x1a4>
     37e:	88 c0       	rjmp	.+272    	; 0x490 <main+0x2b4>
     380:	33 20       	and	r3, r3
     382:	09 f0       	breq	.+2      	; 0x386 <main+0x1aa>
     384:	85 c0       	rjmp	.+266    	; 0x490 <main+0x2b4>
     386:	44 20       	and	r4, r4
     388:	09 f0       	breq	.+2      	; 0x38c <main+0x1b0>
     38a:	82 c0       	rjmp	.+260    	; 0x490 <main+0x2b4>
     38c:	88 20       	and	r8, r8
     38e:	09 f0       	breq	.+2      	; 0x392 <main+0x1b6>
     390:	7f c0       	rjmp	.+254    	; 0x490 <main+0x2b4>
     392:	99 20       	and	r9, r9
     394:	09 f0       	breq	.+2      	; 0x398 <main+0x1bc>
     396:	7c c0       	rjmp	.+248    	; 0x490 <main+0x2b4>
     398:	a2 30       	cpi	r26, 0x02	; 2
     39a:	08 f0       	brcs	.+2      	; 0x39e <main+0x1c2>
     39c:	79 c0       	rjmp	.+242    	; 0x490 <main+0x2b4>
     39e:	a1 30       	cpi	r26, 0x01	; 1
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <main+0x1c8>
     3a2:	73 c0       	rjmp	.+230    	; 0x48a <main+0x2ae>
				pwm_intermediate_left_desired = pwm_left_desired;
			}

		}

		if(currentSelector!=6 && currentSelector!=15) {
     3a4:	80 91 49 04 	lds	r24, 0x0449
     3a8:	86 30       	cpi	r24, 0x06	; 6
     3aa:	09 f4       	brne	.+2      	; 0x3ae <main+0x1d2>
     3ac:	de c0       	rjmp	.+444    	; 0x56a <main+0x38e>
     3ae:	8f 30       	cpi	r24, 0x0F	; 15
     3b0:	09 f0       	breq	.+2      	; 0x3b4 <main+0x1d8>
     3b2:	4b c0       	rjmp	.+150    	; 0x44a <main+0x26e>
					break;

		}

		if(currentSelector != 0) {
			handleMotorsWithSpeedController();  
     3b4:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <handleMotorsWithSpeedController>
     3b8:	80 91 49 04 	lds	r24, 0x0449
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     3bc:	08 17       	cp	r16, r24
     3be:	09 f4       	brne	.+2      	; 0x3c2 <main+0x1e6>
     3c0:	4b cf       	rjmp	.-362    	; 0x258 <main+0x7c>
			disableObstacleAvoidance();
     3c2:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <disableObstacleAvoidance>
			disableCliffAvoidance();
     3c6:	0e 94 f5 26 	call	0x4dea	; 0x4dea <disableCliffAvoidance>
			GREEN_LED0_OFF;
     3ca:	80 91 0b 01 	lds	r24, 0x010B
     3ce:	81 60       	ori	r24, 0x01	; 1
     3d0:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     3d4:	80 91 0b 01 	lds	r24, 0x010B
     3d8:	82 60       	ori	r24, 0x02	; 2
     3da:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     3de:	80 91 0b 01 	lds	r24, 0x010B
     3e2:	84 60       	ori	r24, 0x04	; 4
     3e4:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     3e8:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     3ea:	80 91 0b 01 	lds	r24, 0x010B
     3ee:	80 61       	ori	r24, 0x10	; 16
     3f0:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     3f4:	80 91 0b 01 	lds	r24, 0x010B
     3f8:	80 62       	ori	r24, 0x20	; 32
     3fa:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     3fe:	80 91 0b 01 	lds	r24, 0x010B
     402:	80 64       	ori	r24, 0x40	; 64
     404:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     408:	80 91 0b 01 	lds	r24, 0x010B
     40c:	80 68       	ori	r24, 0x80	; 128
     40e:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     412:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     416:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     41a:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     41e:	8f ef       	ldi	r24, 0xFF	; 255
     420:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <updateRedLed>
			updateGreenLed(pwm_green);
     424:	80 91 0d 02 	lds	r24, 0x020D
     428:	0e 94 49 27 	call	0x4e92	; 0x4e92 <updateGreenLed>
			updateBlueLed(pwm_blue);
     42c:	80 91 0e 02 	lds	r24, 0x020E
     430:	0e 94 5d 27 	call	0x4eba	; 0x4eba <updateBlueLed>
			setRightSpeed(0);
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
			setLeftSpeed(0);
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
			rgbState = 0;
     440:	10 92 16 03 	sts	0x0316, r1
     444:	00 91 49 04 	lds	r16, 0x0449
     448:	07 cf       	rjmp	.-498    	; 0x258 <main+0x7c>
			}

		}

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
		}

		switch(currentSelector) {
     450:	90 91 49 04 	lds	r25, 0x0449
     454:	89 2f       	mov	r24, r25
     456:	96 30       	cpi	r25, 0x06	; 6
     458:	09 f4       	brne	.+2      	; 0x45c <main+0x280>
     45a:	87 c0       	rjmp	.+270    	; 0x56a <main+0x38e>
     45c:	97 30       	cpi	r25, 0x07	; 7
     45e:	08 f0       	brcs	.+2      	; 0x462 <main+0x286>
     460:	ec c0       	rjmp	.+472    	; 0x63a <main+0x45e>
     462:	92 30       	cpi	r25, 0x02	; 2
     464:	09 f4       	brne	.+2      	; 0x468 <main+0x28c>
     466:	e4 c0       	rjmp	.+456    	; 0x630 <main+0x454>
     468:	93 30       	cpi	r25, 0x03	; 3
     46a:	08 f0       	brcs	.+2      	; 0x46e <main+0x292>
     46c:	db c1       	rjmp	.+950    	; 0x824 <main+0x648>
     46e:	99 23       	and	r25, r25
     470:	09 f4       	brne	.+2      	; 0x474 <main+0x298>
     472:	ba c1       	rjmp	.+884    	; 0x7e8 <main+0x60c>
     474:	91 30       	cpi	r25, 0x01	; 1
     476:	21 f4       	brne	.+8      	; 0x480 <main+0x2a4>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     478:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <enableObstacleAvoidance>
     47c:	90 91 49 04 	lds	r25, 0x0449
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector != 0) {
     480:	99 23       	and	r25, r25
     482:	09 f0       	breq	.+2      	; 0x486 <main+0x2aa>
     484:	97 cf       	rjmp	.-210    	; 0x3b4 <main+0x1d8>
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	99 cf       	rjmp	.-206    	; 0x3bc <main+0x1e0>


		handleRFCommands();


		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     48a:	b0 39       	cpi	r27, 0x90	; 144
     48c:	08 f4       	brcc	.+2      	; 0x490 <main+0x2b4>
     48e:	8a cf       	rjmp	.-236    	; 0x3a4 <main+0x1c8>
			speedStepCounter = getTime100MicroSec();
     490:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
     494:	9b 01       	movw	r18, r22
     496:	ac 01       	movw	r20, r24
     498:	60 93 59 04 	sts	0x0459, r22
     49c:	30 93 5a 04 	sts	0x045A, r19
     4a0:	40 93 5b 04 	sts	0x045B, r20
     4a4:	50 93 5c 04 	sts	0x045C, r21
     4a8:	10 92 5d 04 	sts	0x045D, r1
     4ac:	10 92 5e 04 	sts	0x045E, r1
     4b0:	10 92 5f 04 	sts	0x045F, r1
     4b4:	10 92 60 04 	sts	0x0460, r1

			if(softAccEnabled) {
     4b8:	80 91 61 04 	lds	r24, 0x0461
     4bc:	88 23       	and	r24, r24
     4be:	09 f4       	brne	.+2      	; 0x4c2 <main+0x2e6>
     4c0:	8e c0       	rjmp	.+284    	; 0x5de <main+0x402>
				if(pwm_right_desired == 0) {
     4c2:	80 91 f9 02 	lds	r24, 0x02F9
     4c6:	90 91 fa 02 	lds	r25, 0x02FA
     4ca:	00 97       	sbiw	r24, 0x00	; 0
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <main+0x2f4>
     4ce:	fb c0       	rjmp	.+502    	; 0x6c6 <main+0x4ea>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     4d0:	20 91 fd 02 	lds	r18, 0x02FD
     4d4:	30 91 fe 02 	lds	r19, 0x02FE
     4d8:	28 9f       	mul	r18, r24
     4da:	a0 01       	movw	r20, r0
     4dc:	29 9f       	mul	r18, r25
     4de:	50 0d       	add	r21, r0
     4e0:	38 9f       	mul	r19, r24
     4e2:	50 0d       	add	r21, r0
     4e4:	11 24       	eor	r1, r1
     4e6:	57 fd       	sbrc	r21, 7
     4e8:	ee c0       	rjmp	.+476    	; 0x6c6 <main+0x4ea>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     4ea:	28 17       	cp	r18, r24
     4ec:	39 07       	cpc	r19, r25
     4ee:	0c f0       	brlt	.+2      	; 0x4f2 <main+0x316>
     4f0:	94 c2       	rjmp	.+1320   	; 0xa1a <main+0x83e>
					pwm_intermediate_right_desired += speedStep;
     4f2:	40 91 18 02 	lds	r20, 0x0218
     4f6:	24 0f       	add	r18, r20
     4f8:	31 1d       	adc	r19, r1
     4fa:	30 93 fe 02 	sts	0x02FE, r19
     4fe:	20 93 fd 02 	sts	0x02FD, r18
					if(pwm_intermediate_right_desired > pwm_right_desired) {
     502:	82 17       	cp	r24, r18
     504:	93 07       	cpc	r25, r19
     506:	24 f4       	brge	.+8      	; 0x510 <main+0x334>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
     508:	90 93 fe 02 	sts	0x02FE, r25
     50c:	80 93 fd 02 	sts	0x02FD, r24
					}					
				}
	
				if(pwm_left_desired == 0) {
     510:	80 91 fb 02 	lds	r24, 0x02FB
     514:	90 91 fc 02 	lds	r25, 0x02FC
     518:	00 97       	sbiw	r24, 0x00	; 0
     51a:	09 f4       	brne	.+2      	; 0x51e <main+0x342>
     51c:	df c0       	rjmp	.+446    	; 0x6dc <main+0x500>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     51e:	20 91 ff 02 	lds	r18, 0x02FF
     522:	30 91 00 03 	lds	r19, 0x0300
     526:	28 9f       	mul	r18, r24
     528:	a0 01       	movw	r20, r0
     52a:	29 9f       	mul	r18, r25
     52c:	50 0d       	add	r21, r0
     52e:	38 9f       	mul	r19, r24
     530:	50 0d       	add	r21, r0
     532:	11 24       	eor	r1, r1
     534:	57 fd       	sbrc	r21, 7
     536:	d2 c0       	rjmp	.+420    	; 0x6dc <main+0x500>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     538:	28 17       	cp	r18, r24
     53a:	39 07       	cpc	r19, r25
     53c:	0c f0       	brlt	.+2      	; 0x540 <main+0x364>
     53e:	7e c2       	rjmp	.+1276   	; 0xa3c <main+0x860>
					pwm_intermediate_left_desired += speedStep;
     540:	40 91 18 02 	lds	r20, 0x0218
     544:	24 0f       	add	r18, r20
     546:	31 1d       	adc	r19, r1
     548:	30 93 00 03 	sts	0x0300, r19
     54c:	20 93 ff 02 	sts	0x02FF, r18
					if(pwm_intermediate_left_desired > pwm_left_desired) {
     550:	82 17       	cp	r24, r18
     552:	93 07       	cpc	r25, r19
     554:	0c f0       	brlt	.+2      	; 0x558 <main+0x37c>
     556:	26 cf       	rjmp	.-436    	; 0x3a4 <main+0x1c8>
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
				pwm_intermediate_left_desired = pwm_left_desired;
     558:	90 93 00 03 	sts	0x0300, r25
     55c:	80 93 ff 02 	sts	0x02FF, r24
			}

		}

		if(currentSelector!=6 && currentSelector!=15) {
     560:	80 91 49 04 	lds	r24, 0x0449
     564:	86 30       	cpi	r24, 0x06	; 6
     566:	09 f0       	breq	.+2      	; 0x56a <main+0x38e>
     568:	22 cf       	rjmp	.-444    	; 0x3ae <main+0x1d2>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     56a:	90 91 1d 04 	lds	r25, 0x041D
     56e:	91 30       	cpi	r25, 0x01	; 1
     570:	09 f4       	brne	.+2      	; 0x574 <main+0x398>
     572:	f0 c2       	rjmp	.+1504   	; 0xb54 <main+0x978>
     574:	91 30       	cpi	r25, 0x01	; 1
     576:	08 f0       	brcs	.+2      	; 0x57a <main+0x39e>
     578:	b5 c2       	rjmp	.+1386   	; 0xae4 <main+0x908>
						case 0:
							setRightSpeed(0);
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
							setLeftSpeed(0);
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
							turnOffGreenLeds();
     586:	0e 94 0e 28 	call	0x501c	; 0x501c <turnOffGreenLeds>
							pwm_red=255;
     58a:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     58e:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     592:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     596:	8f ef       	ldi	r24, 0xFF	; 255
     598:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <updateRedLed>
							updateGreenLed(pwm_green);
     59c:	80 91 0d 02 	lds	r24, 0x020D
     5a0:	0e 94 49 27 	call	0x4e92	; 0x4e92 <updateGreenLed>
							updateBlueLed(pwm_blue);
     5a4:	80 91 0e 02 	lds	r24, 0x020E
     5a8:	0e 94 5d 27 	call	0x4eba	; 0x4eba <updateBlueLed>
							LED_IR1_HIGH;
     5ac:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     5ae:	45 9a       	sbi	0x08, 5	; 8
     5b0:	90 91 49 04 	lds	r25, 0x0449
							break;
     5b4:	65 cf       	rjmp	.-310    	; 0x480 <main+0x2a4>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     5b6:	0e 94 2f 1b 	call	0x365e	; 0x365e <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     5ba:	80 91 49 04 	lds	r24, 0x0449
     5be:	98 2f       	mov	r25, r24
     5c0:	94 50       	subi	r25, 0x04	; 4
     5c2:	92 30       	cpi	r25, 0x02	; 2
     5c4:	08 f4       	brcc	.+2      	; 0x5c8 <main+0x3ec>
     5c6:	a3 c1       	rjmp	.+838    	; 0x90e <main+0x732>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     5c8:	87 30       	cpi	r24, 0x07	; 7
     5ca:	09 f4       	brne	.+2      	; 0x5ce <main+0x3f2>
     5cc:	cb c1       	rjmp	.+918    	; 0x964 <main+0x788>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     5ce:	86 30       	cpi	r24, 0x06	; 6
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <main+0x3f8>
     5d2:	0f c1       	rjmp	.+542    	; 0x7f2 <main+0x616>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     5d4:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
     5d8:	6b 01       	movw	r12, r22
     5da:	7c 01       	movw	r14, r24
     5dc:	59 ce       	rjmp	.-846    	; 0x290 <main+0xb4>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
     5de:	80 91 f9 02 	lds	r24, 0x02F9
     5e2:	90 91 fa 02 	lds	r25, 0x02FA
     5e6:	90 93 fe 02 	sts	0x02FE, r25
     5ea:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = pwm_left_desired;
     5ee:	80 91 fb 02 	lds	r24, 0x02FB
     5f2:	90 91 fc 02 	lds	r25, 0x02FC
     5f6:	b0 cf       	rjmp	.-160    	; 0x558 <main+0x37c>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     5f8:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
     5fc:	29 81       	ldd	r18, Y+1	; 0x01
     5fe:	3a 81       	ldd	r19, Y+2	; 0x02
     600:	4b 81       	ldd	r20, Y+3	; 0x03
     602:	5c 81       	ldd	r21, Y+4	; 0x04
     604:	62 1b       	sub	r22, r18
     606:	73 0b       	sbc	r23, r19
     608:	84 0b       	sbc	r24, r20
     60a:	95 0b       	sbc	r25, r21
     60c:	68 3c       	cpi	r22, 0xC8	; 200
     60e:	32 e1       	ldi	r19, 0x12	; 18
     610:	73 07       	cpc	r23, r19
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	83 07       	cpc	r24, r19
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	93 07       	cpc	r25, r19
     61a:	08 f4       	brcc	.+2      	; 0x61e <main+0x442>
     61c:	2a ce       	rjmp	.-940    	; 0x272 <main+0x96>
				pwm_red = 255;
     61e:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     622:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     626:	10 93 0e 02 	sts	0x020E, r17
     62a:	23 ce       	rjmp	.-954    	; 0x272 <main+0x96>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     62c:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <enableObstacleAvoidance>
					enableCliffAvoidance();
     630:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <enableCliffAvoidance>
     634:	90 91 49 04 	lds	r25, 0x0449
					break;
     638:	23 cf       	rjmp	.-442    	; 0x480 <main+0x2a4>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     63a:	9a 30       	cpi	r25, 0x0A	; 10
     63c:	09 f4       	brne	.+2      	; 0x640 <main+0x464>
     63e:	53 c0       	rjmp	.+166    	; 0x6e6 <main+0x50a>
     640:	9b 30       	cpi	r25, 0x0B	; 11
     642:	f8 f4       	brcc	.+62     	; 0x682 <main+0x4a6>
     644:	98 30       	cpi	r25, 0x08	; 8
     646:	09 f4       	brne	.+2      	; 0x64a <main+0x46e>
     648:	68 c0       	rjmp	.+208    	; 0x71a <main+0x53e>
     64a:	99 30       	cpi	r25, 0x09	; 9
     64c:	08 f4       	brcc	.+2      	; 0x650 <main+0x474>
     64e:	7f c0       	rjmp	.+254    	; 0x74e <main+0x572>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 9:	if(leftMotSteps <= 3000) {
     650:	60 91 d5 02 	lds	r22, 0x02D5
     654:	70 91 d6 02 	lds	r23, 0x02D6
     658:	80 91 d7 02 	lds	r24, 0x02D7
     65c:	90 91 d8 02 	lds	r25, 0x02D8
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e8       	ldi	r19, 0x80	; 128
     664:	4b e3       	ldi	r20, 0x3B	; 59
     666:	55 e4       	ldi	r21, 0x45	; 69
     668:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <__cmpsf2>
     66c:	18 16       	cp	r1, r24
     66e:	14 f5       	brge	.+68     	; 0x6b4 <main+0x4d8>

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
						setRightSpeed(0);
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
     67c:	90 91 49 04 	lds	r25, 0x0449
     680:	ff ce       	rjmp	.-514    	; 0x480 <main+0x2a4>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     682:	9c 30       	cpi	r25, 0x0C	; 12
     684:	09 f4       	brne	.+2      	; 0x688 <main+0x4ac>
     686:	29 c1       	rjmp	.+594    	; 0x8da <main+0x6fe>
     688:	9c 30       	cpi	r25, 0x0C	; 12
     68a:	08 f4       	brcc	.+2      	; 0x68e <main+0x4b2>
     68c:	0c c1       	rjmp	.+536    	; 0x8a6 <main+0x6ca>
     68e:	9d 30       	cpi	r25, 0x0D	; 13
     690:	09 f0       	breq	.+2      	; 0x694 <main+0x4b8>
     692:	f6 ce       	rjmp	.-532    	; 0x480 <main+0x2a4>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
     694:	60 91 d5 02 	lds	r22, 0x02D5
     698:	70 91 d6 02 	lds	r23, 0x02D6
     69c:	80 91 d7 02 	lds	r24, 0x02D7
     6a0:	90 91 d8 02 	lds	r25, 0x02D8
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 ec       	ldi	r19, 0xC0	; 192
     6a8:	4a ed       	ldi	r20, 0xDA	; 218
     6aa:	55 e4       	ldi	r21, 0x45	; 69
     6ac:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <__cmpsf2>
     6b0:	18 16       	cp	r1, r24
     6b2:	f4 f2       	brlt	.-68     	; 0x670 <main+0x494>
						setLeftSpeed(40);
     6b4:	88 e2       	ldi	r24, 0x28	; 40
     6b6:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
						setRightSpeed(40);
     6ba:	88 e2       	ldi	r24, 0x28	; 40
     6bc:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
     6c0:	90 91 49 04 	lds	r25, 0x0449
     6c4:	dd ce       	rjmp	.-582    	; 0x480 <main+0x2a4>

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
     6c6:	10 92 fe 02 	sts	0x02FE, r1
     6ca:	10 92 fd 02 	sts	0x02FD, r1
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
     6ce:	80 91 fb 02 	lds	r24, 0x02FB
     6d2:	90 91 fc 02 	lds	r25, 0x02FC
     6d6:	00 97       	sbiw	r24, 0x00	; 0
     6d8:	09 f0       	breq	.+2      	; 0x6dc <main+0x500>
     6da:	21 cf       	rjmp	.-446    	; 0x51e <main+0x342>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
     6dc:	10 92 00 03 	sts	0x0300, r1
     6e0:	10 92 ff 02 	sts	0x02FF, r1
     6e4:	5f ce       	rjmp	.-834    	; 0x3a4 <main+0x1c8>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 10:if(leftMotSteps <= 4000) {
     6e6:	60 91 d5 02 	lds	r22, 0x02D5
     6ea:	70 91 d6 02 	lds	r23, 0x02D6
     6ee:	80 91 d7 02 	lds	r24, 0x02D7
     6f2:	90 91 d8 02 	lds	r25, 0x02D8
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	4a e7       	ldi	r20, 0x7A	; 122
     6fc:	55 e4       	ldi	r21, 0x45	; 69
     6fe:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <__cmpsf2>
     702:	18 16       	cp	r1, r24
     704:	0c f4       	brge	.+2      	; 0x708 <main+0x52c>
     706:	b4 cf       	rjmp	.-152    	; 0x670 <main+0x494>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     708:	88 e2       	ldi	r24, 0x28	; 40
     70a:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
						setRightSpeed(40);
     70e:	88 e2       	ldi	r24, 0x28	; 40
     710:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
     714:	90 91 49 04 	lds	r25, 0x0449
     718:	b3 ce       	rjmp	.-666    	; 0x480 <main+0x2a4>
					updateGreenLed(pwm_green);
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	if(leftMotSteps <= 2000) {
     71a:	60 91 d5 02 	lds	r22, 0x02D5
     71e:	70 91 d6 02 	lds	r23, 0x02D6
     722:	80 91 d7 02 	lds	r24, 0x02D7
     726:	90 91 d8 02 	lds	r25, 0x02D8
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	4a ef       	ldi	r20, 0xFA	; 250
     730:	54 e4       	ldi	r21, 0x44	; 68
     732:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <__cmpsf2>
     736:	18 16       	cp	r1, r24
     738:	0c f4       	brge	.+2      	; 0x73c <main+0x560>
     73a:	9a cf       	rjmp	.-204    	; 0x670 <main+0x494>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     73c:	88 e2       	ldi	r24, 0x28	; 40
     73e:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
						setRightSpeed(40);
     742:	88 e2       	ldi	r24, 0x28	; 40
     744:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
     748:	90 91 49 04 	lds	r25, 0x0449
     74c:	99 ce       	rjmp	.-718    	; 0x480 <main+0x2a4>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     74e:	80 91 4d 04 	lds	r24, 0x044D
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	09 f4       	brne	.+2      	; 0x758 <main+0x57c>
     756:	b4 c4       	rjmp	.+2408   	; 0x10c0 <main+0xee4>
     758:	83 30       	cpi	r24, 0x03	; 3
     75a:	08 f0       	brcs	.+2      	; 0x75e <main+0x582>
     75c:	80 c1       	rjmp	.+768    	; 0xa5e <main+0x882>
     75e:	88 23       	and	r24, r24
     760:	09 f0       	breq	.+2      	; 0x764 <main+0x588>
     762:	6b c4       	rjmp	.+2262   	; 0x103a <main+0xe5e>
						case 0:	// move around
							turnOffGreenLeds();
     764:	0e 94 0e 28 	call	0x501c	; 0x501c <turnOffGreenLeds>
							GREEN_LED0_ON;
     768:	80 91 0b 01 	lds	r24, 0x010B
     76c:	8e 7f       	andi	r24, 0xFE	; 254
     76e:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     772:	10 92 4e 04 	sts	0x044E, r1
							enableObstacleAvoidance();
     776:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <enableObstacleAvoidance>
							setRightSpeed(20);
     77a:	84 e1       	ldi	r24, 0x14	; 20
     77c:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
							setLeftSpeed(20);
     780:	84 e1       	ldi	r24, 0x14	; 20
     782:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     786:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
     78a:	9b 01       	movw	r18, r22
     78c:	ac 01       	movw	r20, r24
     78e:	60 93 55 04 	sts	0x0455, r22
     792:	70 93 56 04 	sts	0x0456, r23
     796:	80 93 57 04 	sts	0x0457, r24
     79a:	90 93 58 04 	sts	0x0458, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     79e:	80 91 51 04 	lds	r24, 0x0451
     7a2:	90 91 52 04 	lds	r25, 0x0452
     7a6:	a0 91 53 04 	lds	r26, 0x0453
     7aa:	b0 91 54 04 	lds	r27, 0x0454
     7ae:	28 1b       	sub	r18, r24
     7b0:	39 0b       	sbc	r19, r25
     7b2:	4a 0b       	sbc	r20, r26
     7b4:	5b 0b       	sbc	r21, r27
     7b6:	23 33       	cpi	r18, 0x33	; 51
     7b8:	6f ee       	ldi	r22, 0xEF	; 239
     7ba:	36 07       	cpc	r19, r22
     7bc:	62 e0       	ldi	r22, 0x02	; 2
     7be:	46 07       	cpc	r20, r22
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	56 07       	cpc	r21, r22
     7c4:	10 f0       	brcs	.+4      	; 0x7ca <main+0x5ee>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     7c6:	20 92 4d 04 	sts	0x044D, r2
							//pwm_green = 0;
							//pwm_blue = 0;													
							break;							
					}

					updateRedLed(pwm_red);
     7ca:	80 91 0c 02 	lds	r24, 0x020C
     7ce:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <updateRedLed>
					updateGreenLed(pwm_green);
     7d2:	80 91 0d 02 	lds	r24, 0x020D
     7d6:	0e 94 49 27 	call	0x4e92	; 0x4e92 <updateGreenLed>
					updateBlueLed(pwm_blue);
     7da:	80 91 0e 02 	lds	r24, 0x020E
     7de:	0e 94 5d 27 	call	0x4eba	; 0x4eba <updateBlueLed>
     7e2:	90 91 49 04 	lds	r25, 0x0449

					break;
     7e6:	4c ce       	rjmp	.-872    	; 0x480 <main+0x2a4>
		}

		switch(currentSelector) {
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     7e8:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <handleMotorsWithNoController>
     7ec:	90 91 49 04 	lds	r25, 0x0449
					break;
     7f0:	47 ce       	rjmp	.-882    	; 0x480 <main+0x2a4>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     7f2:	80 91 1d 04 	lds	r24, 0x041D
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	09 f0       	breq	.+2      	; 0x7fc <main+0x620>
     7fa:	ec ce       	rjmp	.-552    	; 0x5d4 <main+0x3f8>
     7fc:	90 91 13 03 	lds	r25, 0x0313
     800:	92 30       	cpi	r25, 0x02	; 2
     802:	08 f0       	brcs	.+2      	; 0x806 <main+0x62a>
     804:	e7 ce       	rjmp	.-562    	; 0x5d4 <main+0x3f8>
					if(rgbState == 0) {
     806:	90 91 16 03 	lds	r25, 0x0316
     80a:	99 23       	and	r25, r25
     80c:	09 f0       	breq	.+2      	; 0x810 <main+0x634>
     80e:	eb c5       	rjmp	.+3030   	; 0x13e6 <main+0x120a>
						pwm_red = 254;
     810:	4e ef       	ldi	r20, 0xFE	; 254
     812:	40 93 0c 02 	sts	0x020C, r20
						pwm_green = 255;
     816:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     81a:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     81e:	80 93 16 03 	sts	0x0316, r24
     822:	d8 ce       	rjmp	.-592    	; 0x5d4 <main+0x3f8>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     824:	94 30       	cpi	r25, 0x04	; 4
     826:	d1 f0       	breq	.+52     	; 0x85c <main+0x680>
     828:	95 30       	cpi	r25, 0x05	; 5
     82a:	08 f4       	brcc	.+2      	; 0x82e <main+0x652>
     82c:	ff ce       	rjmp	.-514    	; 0x62c <main+0x450>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     82e:	80 91 0c 02 	lds	r24, 0x020C
     832:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <updateRedLed>
					updateGreenLed(pwm_green);
     836:	80 91 0d 02 	lds	r24, 0x020D
     83a:	0e 94 49 27 	call	0x4e92	; 0x4e92 <updateGreenLed>
					updateBlueLed(pwm_blue);
     83e:	80 91 0e 02 	lds	r24, 0x020E
     842:	0e 94 5d 27 	call	0x4eba	; 0x4eba <updateBlueLed>
					enableObstacleAvoidance();
     846:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <enableObstacleAvoidance>
					setLeftSpeed(25);
     84a:	89 e1       	ldi	r24, 0x19	; 25
     84c:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
					setRightSpeed(25);
     850:	89 e1       	ldi	r24, 0x19	; 25
     852:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
     856:	90 91 49 04 	lds	r25, 0x0449
					break;
     85a:	12 ce       	rjmp	.-988    	; 0x480 <main+0x2a4>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     85c:	80 91 0b 01 	lds	r24, 0x010B
     860:	8e 7f       	andi	r24, 0xFE	; 254
     862:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     866:	80 91 0b 01 	lds	r24, 0x010B
     86a:	8d 7f       	andi	r24, 0xFD	; 253
     86c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     870:	80 91 0b 01 	lds	r24, 0x010B
     874:	8b 7f       	andi	r24, 0xFB	; 251
     876:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     87a:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     87c:	80 91 0b 01 	lds	r24, 0x010B
     880:	8f 7e       	andi	r24, 0xEF	; 239
     882:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     886:	80 91 0b 01 	lds	r24, 0x010B
     88a:	8f 7d       	andi	r24, 0xDF	; 223
     88c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     890:	80 91 0b 01 	lds	r24, 0x010B
     894:	8f 7b       	andi	r24, 0xBF	; 191
     896:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     89a:	80 91 0b 01 	lds	r24, 0x010B
     89e:	8f 77       	andi	r24, 0x7F	; 127
     8a0:	80 93 0b 01 	sts	0x010B, r24
     8a4:	92 cf       	rjmp	.-220    	; 0x7ca <main+0x5ee>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 11:if(leftMotSteps <= 5000) {
     8a6:	60 91 d5 02 	lds	r22, 0x02D5
     8aa:	70 91 d6 02 	lds	r23, 0x02D6
     8ae:	80 91 d7 02 	lds	r24, 0x02D7
     8b2:	90 91 d8 02 	lds	r25, 0x02D8
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e4       	ldi	r19, 0x40	; 64
     8ba:	4c e9       	ldi	r20, 0x9C	; 156
     8bc:	55 e4       	ldi	r21, 0x45	; 69
     8be:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <__cmpsf2>
     8c2:	18 16       	cp	r1, r24
     8c4:	0c f4       	brge	.+2      	; 0x8c8 <main+0x6ec>
     8c6:	d4 ce       	rjmp	.-600    	; 0x670 <main+0x494>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     8c8:	88 e2       	ldi	r24, 0x28	; 40
     8ca:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
						setRightSpeed(40);
     8ce:	88 e2       	ldi	r24, 0x28	; 40
     8d0:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
     8d4:	90 91 49 04 	lds	r25, 0x0449
     8d8:	d3 cd       	rjmp	.-1114   	; 0x480 <main+0x2a4>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     8da:	60 91 d5 02 	lds	r22, 0x02D5
     8de:	70 91 d6 02 	lds	r23, 0x02D6
     8e2:	80 91 d7 02 	lds	r24, 0x02D7
     8e6:	90 91 d8 02 	lds	r25, 0x02D8
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e8       	ldi	r19, 0x80	; 128
     8ee:	4b eb       	ldi	r20, 0xBB	; 187
     8f0:	55 e4       	ldi	r21, 0x45	; 69
     8f2:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <__cmpsf2>
     8f6:	18 16       	cp	r1, r24
     8f8:	0c f0       	brlt	.+2      	; 0x8fc <main+0x720>
     8fa:	dc ce       	rjmp	.-584    	; 0x6b4 <main+0x4d8>
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
						setRightSpeed(0);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
     908:	90 91 49 04 	lds	r25, 0x0449
     90c:	b9 cd       	rjmp	.-1166   	; 0x480 <main+0x2a4>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     90e:	0e 94 b7 32 	call	0x656e	; 0x656e <rand>
     912:	6e e1       	ldi	r22, 0x1E	; 30
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	0e 94 56 32 	call	0x64ac	; 0x64ac <__divmodhi4>
     91a:	a8 0e       	add	r10, r24
     91c:	b9 1e       	adc	r11, r25
     91e:	5f e7       	ldi	r21, 0x7F	; 127
     920:	a5 22       	and	r10, r21
     922:	bb 24       	eor	r11, r11

				switch(rgbState) {
     924:	80 91 16 03 	lds	r24, 0x0316
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	09 f4       	brne	.+2      	; 0x92e <main+0x752>
     92c:	c1 c3       	rjmp	.+1922   	; 0x10b0 <main+0xed4>
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	08 f0       	brcs	.+2      	; 0x934 <main+0x758>
     932:	79 c3       	rjmp	.+1778   	; 0x1026 <main+0xe4a>
					case 0:
						pwm_red = 255 - currRand;	
     934:	8a 2d       	mov	r24, r10
     936:	80 95       	com	r24
     938:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     93c:	20 92 16 03 	sts	0x0316, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     940:	80 e2       	ldi	r24, 0x20	; 32
     942:	a8 16       	cp	r10, r24
     944:	b1 04       	cpc	r11, r1
     946:	08 f0       	brcs	.+2      	; 0x94a <main+0x76e>
     948:	ec c0       	rjmp	.+472    	; 0xb22 <main+0x946>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     94a:	80 91 0d 02 	lds	r24, 0x020D
     94e:	8f 3f       	cpi	r24, 0xFF	; 255
     950:	09 f4       	brne	.+2      	; 0x954 <main+0x778>
     952:	40 ce       	rjmp	.-896    	; 0x5d4 <main+0x3f8>
     954:	80 91 0e 02 	lds	r24, 0x020E
     958:	8f 3f       	cpi	r24, 0xFF	; 255
     95a:	09 f4       	brne	.+2      	; 0x95e <main+0x782>
     95c:	3b ce       	rjmp	.-906    	; 0x5d4 <main+0x3f8>
						pwm_red = 255;
     95e:	10 93 0c 02 	sts	0x020C, r17
     962:	38 ce       	rjmp	.-912    	; 0x5d4 <main+0x3f8>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     964:	80 91 94 00 	lds	r24, 0x0094
     968:	90 91 95 00 	lds	r25, 0x0095
     96c:	0e 94 bc 32 	call	0x6578	; 0x6578 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     970:	0e 94 b7 32 	call	0x656e	; 0x656e <rand>
     974:	6e e1       	ldi	r22, 0x1E	; 30
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	0e 94 56 32 	call	0x64ac	; 0x64ac <__divmodhi4>
     97c:	4c 01       	movw	r8, r24
     97e:	8a 0c       	add	r8, r10
     980:	9b 1c       	adc	r9, r11
     982:	ff e7       	ldi	r31, 0x7F	; 127
     984:	8f 22       	and	r8, r31
     986:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     988:	88 2d       	mov	r24, r8
     98a:	80 95       	com	r24
     98c:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     990:	80 91 94 00 	lds	r24, 0x0094
     994:	90 91 95 00 	lds	r25, 0x0095
     998:	0e 94 bc 32 	call	0x6578	; 0x6578 <srand>
				currRand = (currRand + rand()%30) % 128;	
     99c:	0e 94 b7 32 	call	0x656e	; 0x656e <rand>
     9a0:	6e e1       	ldi	r22, 0x1E	; 30
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	0e 94 56 32 	call	0x64ac	; 0x64ac <__divmodhi4>
     9a8:	6c 01       	movw	r12, r24
     9aa:	c8 0c       	add	r12, r8
     9ac:	d9 1c       	adc	r13, r9
     9ae:	2f e7       	ldi	r18, 0x7F	; 127
     9b0:	c2 22       	and	r12, r18
     9b2:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     9b4:	8c 2d       	mov	r24, r12
     9b6:	80 95       	com	r24
     9b8:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     9bc:	80 91 94 00 	lds	r24, 0x0094
     9c0:	90 91 95 00 	lds	r25, 0x0095
     9c4:	0e 94 bc 32 	call	0x6578	; 0x6578 <srand>
				currRand = (currRand + rand()%30) % 128;
     9c8:	0e 94 b7 32 	call	0x656e	; 0x656e <rand>
     9cc:	6e e1       	ldi	r22, 0x1E	; 30
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	0e 94 56 32 	call	0x64ac	; 0x64ac <__divmodhi4>
     9d4:	5c 01       	movw	r10, r24
     9d6:	ac 0c       	add	r10, r12
     9d8:	bd 1c       	adc	r11, r13
     9da:	3f e7       	ldi	r19, 0x7F	; 127
     9dc:	a3 22       	and	r10, r19
     9de:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     9e0:	8a 2d       	mov	r24, r10
     9e2:	80 95       	com	r24
     9e4:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     9e8:	80 91 94 00 	lds	r24, 0x0094
     9ec:	90 91 95 00 	lds	r25, 0x0095
     9f0:	0e 94 bc 32 	call	0x6578	; 0x6578 <srand>
				currRand2 = rand()%128;
     9f4:	0e 94 b7 32 	call	0x656e	; 0x656e <rand>
     9f8:	60 e8       	ldi	r22, 0x80	; 128
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	0e 94 56 32 	call	0x64ac	; 0x64ac <__divmodhi4>
				if(currRand2<32) {
     a00:	80 32       	cpi	r24, 0x20	; 32
     a02:	91 05       	cpc	r25, r1
     a04:	08 f0       	brcs	.+2      	; 0xa08 <main+0x82c>
     a06:	9f c0       	rjmp	.+318    	; 0xb46 <main+0x96a>
					pwm_red = 255;
     a08:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     a0c:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
     a10:	69 83       	std	Y+1, r22	; 0x01
     a12:	7a 83       	std	Y+2, r23	; 0x02
     a14:	8b 83       	std	Y+3, r24	; 0x03
     a16:	9c 83       	std	Y+4, r25	; 0x04
     a18:	dd cd       	rjmp	.-1094   	; 0x5d4 <main+0x3f8>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
     a1a:	82 17       	cp	r24, r18
     a1c:	93 07       	cpc	r25, r19
     a1e:	0c f0       	brlt	.+2      	; 0xa22 <main+0x846>
     a20:	77 cd       	rjmp	.-1298   	; 0x510 <main+0x334>
					pwm_intermediate_right_desired -= speedStep;
     a22:	40 91 18 02 	lds	r20, 0x0218
     a26:	24 1b       	sub	r18, r20
     a28:	31 09       	sbc	r19, r1
     a2a:	30 93 fe 02 	sts	0x02FE, r19
     a2e:	20 93 fd 02 	sts	0x02FD, r18
					if(pwm_intermediate_right_desired < pwm_right_desired) {
     a32:	28 17       	cp	r18, r24
     a34:	39 07       	cpc	r19, r25
     a36:	0c f0       	brlt	.+2      	; 0xa3a <main+0x85e>
     a38:	6b cd       	rjmp	.-1322   	; 0x510 <main+0x334>
     a3a:	66 cd       	rjmp	.-1332   	; 0x508 <main+0x32c>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
     a3c:	82 17       	cp	r24, r18
     a3e:	93 07       	cpc	r25, r19
     a40:	0c f0       	brlt	.+2      	; 0xa44 <main+0x868>
     a42:	b0 cc       	rjmp	.-1696   	; 0x3a4 <main+0x1c8>
					pwm_intermediate_left_desired -= speedStep;
     a44:	40 91 18 02 	lds	r20, 0x0218
     a48:	24 1b       	sub	r18, r20
     a4a:	31 09       	sbc	r19, r1
     a4c:	30 93 00 03 	sts	0x0300, r19
     a50:	20 93 ff 02 	sts	0x02FF, r18
					if(pwm_intermediate_left_desired < pwm_left_desired) {
     a54:	28 17       	cp	r18, r24
     a56:	39 07       	cpc	r19, r25
     a58:	0c f0       	brlt	.+2      	; 0xa5c <main+0x880>
     a5a:	a4 cc       	rjmp	.-1720   	; 0x3a4 <main+0x1c8>
     a5c:	7d cd       	rjmp	.-1286   	; 0x558 <main+0x37c>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     a5e:	84 30       	cpi	r24, 0x04	; 4
     a60:	09 f4       	brne	.+2      	; 0xa64 <main+0x888>
     a62:	01 c4       	rjmp	.+2050   	; 0x1266 <main+0x108a>
     a64:	84 30       	cpi	r24, 0x04	; 4
     a66:	08 f4       	brcc	.+2      	; 0xa6a <main+0x88e>
     a68:	a7 c3       	rjmp	.+1870   	; 0x11b8 <main+0xfdc>
     a6a:	85 30       	cpi	r24, 0x05	; 5
     a6c:	09 f0       	breq	.+2      	; 0xa70 <main+0x894>
     a6e:	ad ce       	rjmp	.-678    	; 0x7ca <main+0x5ee>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     a70:	0e 94 0e 28 	call	0x501c	; 0x501c <turnOffGreenLeds>
							GREEN_LED6_ON;
     a74:	80 91 0b 01 	lds	r24, 0x010B
     a78:	8f 7b       	andi	r24, 0xBF	; 191
     a7a:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     a7e:	80 91 0b 01 	lds	r24, 0x010B
     a82:	8f 77       	andi	r24, 0x7F	; 127
     a84:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     a88:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
     a8c:	9b 01       	movw	r18, r22
     a8e:	ac 01       	movw	r20, r24
     a90:	60 93 55 04 	sts	0x0455, r22
     a94:	70 93 56 04 	sts	0x0456, r23
     a98:	80 93 57 04 	sts	0x0457, r24
     a9c:	90 93 58 04 	sts	0x0458, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     aa0:	80 91 51 04 	lds	r24, 0x0451
     aa4:	90 91 52 04 	lds	r25, 0x0452
     aa8:	a0 91 53 04 	lds	r26, 0x0453
     aac:	b0 91 54 04 	lds	r27, 0x0454
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	2b 32       	cpi	r18, 0x2B	; 43
     aba:	9c e1       	ldi	r25, 0x1C	; 28
     abc:	39 07       	cpc	r19, r25
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	49 07       	cpc	r20, r25
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	59 07       	cpc	r21, r25
     ac6:	08 f4       	brcc	.+2      	; 0xaca <main+0x8ee>
     ac8:	80 ce       	rjmp	.-768    	; 0x7ca <main+0x5ee>
								demoStartTime = getTime100MicroSec();
     aca:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
     ace:	60 93 51 04 	sts	0x0451, r22
     ad2:	70 93 52 04 	sts	0x0452, r23
     ad6:	80 93 53 04 	sts	0x0453, r24
     ada:	90 93 54 04 	sts	0x0454, r25
								demoState = 0;							
     ade:	10 92 4d 04 	sts	0x044D, r1
     ae2:	73 ce       	rjmp	.-794    	; 0x7ca <main+0x5ee>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     ae4:	92 30       	cpi	r25, 0x02	; 2
     ae6:	11 f0       	breq	.+4      	; 0xaec <main+0x910>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     ae8:	98 2f       	mov	r25, r24
     aea:	ca cc       	rjmp	.-1644   	; 0x480 <main+0x2a4>
     aec:	90 91 1e 04 	lds	r25, 0x041E
     af0:	99 23       	and	r25, r25
     af2:	d1 f3       	breq	.-12     	; 0xae8 <main+0x90c>
								turnOnGreenLeds();
     af4:	0e 94 27 28 	call	0x504e	; 0x504e <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     af8:	60 91 11 03 	lds	r22, 0x0311
     afc:	70 91 12 03 	lds	r23, 0x0312
     b00:	8e ef       	ldi	r24, 0xFE	; 254
     b02:	9f e0       	ldi	r25, 0x0F	; 15
     b04:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <__eewr_word_m2560>
								turnOffGreenLeds();
     b08:	0e 94 0e 28 	call	0x501c	; 0x501c <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     b0c:	8a ea       	ldi	r24, 0xAA	; 170
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								addressReceived = 0;
     b14:	10 92 1e 04 	sts	0x041E, r1
								menuChoice = 0;
     b18:	10 92 1d 04 	sts	0x041D, r1
     b1c:	90 91 49 04 	lds	r25, 0x0449
     b20:	af cc       	rjmp	.-1698   	; 0x480 <main+0x2a4>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     b22:	90 e4       	ldi	r25, 0x40	; 64
     b24:	a9 16       	cp	r10, r25
     b26:	b1 04       	cpc	r11, r1
     b28:	08 f0       	brcs	.+2      	; 0xb2c <main+0x950>
     b2a:	8b c3       	rjmp	.+1814   	; 0x1242 <main+0x1066>
					if(pwm_red!=255 && pwm_blue!=255) {
     b2c:	80 91 0c 02 	lds	r24, 0x020C
     b30:	8f 3f       	cpi	r24, 0xFF	; 255
     b32:	09 f4       	brne	.+2      	; 0xb36 <main+0x95a>
     b34:	4f cd       	rjmp	.-1378   	; 0x5d4 <main+0x3f8>
     b36:	80 91 0e 02 	lds	r24, 0x020E
     b3a:	8f 3f       	cpi	r24, 0xFF	; 255
     b3c:	09 f4       	brne	.+2      	; 0xb40 <main+0x964>
     b3e:	4a cd       	rjmp	.-1388   	; 0x5d4 <main+0x3f8>
						pwm_green = 255;
     b40:	10 93 0d 02 	sts	0x020D, r17
     b44:	47 cd       	rjmp	.-1394   	; 0x5d4 <main+0x3f8>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     b46:	80 34       	cpi	r24, 0x40	; 64
     b48:	91 05       	cpc	r25, r1
     b4a:	08 f0       	brcs	.+2      	; 0xb4e <main+0x972>
     b4c:	e7 c3       	rjmp	.+1998   	; 0x131c <main+0x1140>
					pwm_green = 255;
     b4e:	10 93 0d 02 	sts	0x020D, r17
     b52:	5c cf       	rjmp	.-328    	; 0xa0c <main+0x830>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     b54:	0e 94 27 28 	call	0x504e	; 0x504e <turnOnGreenLeds>
							updateRedLed(pwm_red);
     b58:	80 91 0c 02 	lds	r24, 0x020C
     b5c:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <updateRedLed>
							updateGreenLed(pwm_green);
     b60:	80 91 0d 02 	lds	r24, 0x020D
     b64:	0e 94 49 27 	call	0x4e92	; 0x4e92 <updateGreenLed>
							updateBlueLed(pwm_blue);
     b68:	80 91 0e 02 	lds	r24, 0x020E
     b6c:	0e 94 5d 27 	call	0x4eba	; 0x4eba <updateBlueLed>
							LED_IR1_LOW;
     b70:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     b72:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     b74:	80 91 20 04 	lds	r24, 0x0420
     b78:	88 23       	and	r24, r24
     b7a:	09 f4       	brne	.+2      	; 0xb7e <main+0x9a2>
     b7c:	7f cd       	rjmp	.-1282   	; 0x67c <main+0x4a0>
								getDataNow = 0;	
     b7e:	10 92 20 04 	sts	0x0420, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b82:	80 91 59 02 	lds	r24, 0x0259
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     b8c:	80 91 5a 02 	lds	r24, 0x025A
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     b96:	80 91 29 02 	lds	r24, 0x0229
     b9a:	90 91 2a 02 	lds	r25, 0x022A
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ba4:	80 91 29 02 	lds	r24, 0x0229
     ba8:	90 91 2a 02 	lds	r25, 0x022A
     bac:	89 2f       	mov	r24, r25
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     bb4:	80 91 5b 02 	lds	r24, 0x025B
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     bbe:	80 91 5c 02 	lds	r24, 0x025C
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     bc8:	80 91 2d 02 	lds	r24, 0x022D
     bcc:	90 91 2e 02 	lds	r25, 0x022E
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     bd6:	80 91 2d 02 	lds	r24, 0x022D
     bda:	90 91 2e 02 	lds	r25, 0x022E
     bde:	89 2f       	mov	r24, r25
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     be6:	80 91 5d 02 	lds	r24, 0x025D
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     bf0:	80 91 5e 02 	lds	r24, 0x025E
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     bfa:	80 91 31 02 	lds	r24, 0x0231
     bfe:	90 91 32 02 	lds	r25, 0x0232
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c08:	80 91 31 02 	lds	r24, 0x0231
     c0c:	90 91 32 02 	lds	r25, 0x0232
     c10:	89 2f       	mov	r24, r25
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c18:	80 91 5f 02 	lds	r24, 0x025F
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c22:	80 91 60 02 	lds	r24, 0x0260
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c2c:	80 91 35 02 	lds	r24, 0x0235
     c30:	90 91 36 02 	lds	r25, 0x0236
     c34:	61 e0       	ldi	r22, 0x01	; 1
     c36:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c3a:	80 91 35 02 	lds	r24, 0x0235
     c3e:	90 91 36 02 	lds	r25, 0x0236
     c42:	89 2f       	mov	r24, r25
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c4a:	80 91 61 02 	lds	r24, 0x0261
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c54:	80 91 62 02 	lds	r24, 0x0262
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c5e:	80 91 39 02 	lds	r24, 0x0239
     c62:	90 91 3a 02 	lds	r25, 0x023A
     c66:	61 e0       	ldi	r22, 0x01	; 1
     c68:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c6c:	80 91 39 02 	lds	r24, 0x0239
     c70:	90 91 3a 02 	lds	r25, 0x023A
     c74:	89 2f       	mov	r24, r25
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c7c:	80 91 63 02 	lds	r24, 0x0263
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c86:	80 91 64 02 	lds	r24, 0x0264
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c90:	80 91 3d 02 	lds	r24, 0x023D
     c94:	90 91 3e 02 	lds	r25, 0x023E
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c9e:	80 91 3d 02 	lds	r24, 0x023D
     ca2:	90 91 3e 02 	lds	r25, 0x023E
     ca6:	89 2f       	mov	r24, r25
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     cae:	80 91 65 02 	lds	r24, 0x0265
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     cb8:	80 91 66 02 	lds	r24, 0x0266
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     cc2:	80 91 41 02 	lds	r24, 0x0241
     cc6:	90 91 42 02 	lds	r25, 0x0242
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     cd0:	80 91 41 02 	lds	r24, 0x0241
     cd4:	90 91 42 02 	lds	r25, 0x0242
     cd8:	89 2f       	mov	r24, r25
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ce0:	80 91 67 02 	lds	r24, 0x0267
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     cea:	80 91 68 02 	lds	r24, 0x0268
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     cf4:	80 91 45 02 	lds	r24, 0x0245
     cf8:	90 91 46 02 	lds	r25, 0x0246
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d02:	80 91 45 02 	lds	r24, 0x0245
     d06:	90 91 46 02 	lds	r25, 0x0246
     d0a:	89 2f       	mov	r24, r25
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d12:	80 91 69 02 	lds	r24, 0x0269
     d16:	61 e0       	ldi	r22, 0x01	; 1
     d18:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d1c:	80 91 6a 02 	lds	r24, 0x026A
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d26:	80 91 49 02 	lds	r24, 0x0249
     d2a:	90 91 4a 02 	lds	r25, 0x024A
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d34:	80 91 49 02 	lds	r24, 0x0249
     d38:	90 91 4a 02 	lds	r25, 0x024A
     d3c:	89 2f       	mov	r24, r25
     d3e:	61 e0       	ldi	r22, 0x01	; 1
     d40:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d44:	80 91 6b 02 	lds	r24, 0x026B
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d4e:	80 91 6c 02 	lds	r24, 0x026C
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d58:	80 91 4d 02 	lds	r24, 0x024D
     d5c:	90 91 4e 02 	lds	r25, 0x024E
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d66:	80 91 4d 02 	lds	r24, 0x024D
     d6a:	90 91 4e 02 	lds	r25, 0x024E
     d6e:	89 2f       	mov	r24, r25
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d76:	80 91 6d 02 	lds	r24, 0x026D
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d80:	80 91 6e 02 	lds	r24, 0x026E
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d8a:	80 91 51 02 	lds	r24, 0x0251
     d8e:	90 91 52 02 	lds	r25, 0x0252
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d98:	80 91 51 02 	lds	r24, 0x0251
     d9c:	90 91 52 02 	lds	r25, 0x0252
     da0:	89 2f       	mov	r24, r25
     da2:	61 e0       	ldi	r22, 0x01	; 1
     da4:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     da8:	80 91 6f 02 	lds	r24, 0x026F
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     db2:	80 91 70 02 	lds	r24, 0x0270
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     dbc:	80 91 55 02 	lds	r24, 0x0255
     dc0:	90 91 56 02 	lds	r25, 0x0256
     dc4:	61 e0       	ldi	r22, 0x01	; 1
     dc6:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     dca:	80 91 55 02 	lds	r24, 0x0255
     dce:	90 91 56 02 	lds	r25, 0x0256
     dd2:	89 2f       	mov	r24, r25
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     dda:	80 91 26 04 	lds	r24, 0x0426
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(accX>>8,1);
     de4:	80 91 27 04 	lds	r24, 0x0427
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     dee:	80 91 28 04 	lds	r24, 0x0428
     df2:	61 e0       	ldi	r22, 0x01	; 1
     df4:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(accY>>8,1);
     df8:	80 91 29 04 	lds	r24, 0x0429
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     e02:	80 91 2a 04 	lds	r24, 0x042A
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     e0c:	80 91 2b 04 	lds	r24, 0x042B
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(irCommand,1);
     e16:	80 91 21 04 	lds	r24, 0x0421
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(currentSelector,1);
     e20:	80 91 49 04 	lds	r24, 0x0449
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     e2a:	80 91 03 01 	lds	r24, 0x0103
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	80 72       	andi	r24, 0x20	; 32
     e32:	90 70       	andi	r25, 0x00	; 0
     e34:	95 95       	asr	r25
     e36:	87 95       	ror	r24
     e38:	95 95       	asr	r25
     e3a:	87 95       	ror	r24
     e3c:	95 95       	asr	r25
     e3e:	87 95       	ror	r24
     e40:	95 95       	asr	r25
     e42:	87 95       	ror	r24
     e44:	95 95       	asr	r25
     e46:	87 95       	ror	r24
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(rfFlags,1);
     e4e:	80 91 13 03 	lds	r24, 0x0313
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
     e58:	60 91 65 04 	lds	r22, 0x0465
     e5c:	70 91 66 04 	lds	r23, 0x0466
     e60:	80 91 67 04 	lds	r24, 0x0467
     e64:	90 91 68 04 	lds	r25, 0x0468
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e4       	ldi	r19, 0x40	; 64
     e6c:	4f e0       	ldi	r20, 0x0F	; 15
     e6e:	54 e4       	ldi	r21, 0x44	; 68
     e70:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
     e74:	0e 94 55 30 	call	0x60aa	; 0x60aa <__fixunssfsi>
     e78:	86 2f       	mov	r24, r22
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
     e80:	60 91 65 04 	lds	r22, 0x0465
     e84:	70 91 66 04 	lds	r23, 0x0466
     e88:	80 91 67 04 	lds	r24, 0x0467
     e8c:	90 91 68 04 	lds	r25, 0x0468
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e4       	ldi	r19, 0x40	; 64
     e94:	4f e0       	ldi	r20, 0x0F	; 15
     e96:	54 e4       	ldi	r21, 0x44	; 68
     e98:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
     e9c:	0e 94 55 30 	call	0x60aa	; 0x60aa <__fixunssfsi>
     ea0:	87 2f       	mov	r24, r23
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
     ea8:	60 91 69 04 	lds	r22, 0x0469
     eac:	70 91 6a 04 	lds	r23, 0x046A
     eb0:	80 91 6b 04 	lds	r24, 0x046B
     eb4:	90 91 6c 04 	lds	r25, 0x046C
     eb8:	0e 94 55 30 	call	0x60aa	; 0x60aa <__fixunssfsi>
     ebc:	86 2f       	mov	r24, r22
     ebe:	61 e0       	ldi	r22, 0x01	; 1
     ec0:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
     ec4:	60 91 69 04 	lds	r22, 0x0469
     ec8:	70 91 6a 04 	lds	r23, 0x046A
     ecc:	80 91 6b 04 	lds	r24, 0x046B
     ed0:	90 91 6c 04 	lds	r25, 0x046C
     ed4:	0e 94 55 30 	call	0x60aa	; 0x60aa <__fixunssfsi>
     ed8:	87 2f       	mov	r24, r23
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
     ee0:	60 91 6d 04 	lds	r22, 0x046D
     ee4:	70 91 6e 04 	lds	r23, 0x046E
     ee8:	80 91 6f 04 	lds	r24, 0x046F
     eec:	90 91 70 04 	lds	r25, 0x0470
     ef0:	0e 94 55 30 	call	0x60aa	; 0x60aa <__fixunssfsi>
     ef4:	86 2f       	mov	r24, r22
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
     efc:	60 91 6d 04 	lds	r22, 0x046D
     f00:	70 91 6e 04 	lds	r23, 0x046E
     f04:	80 91 6f 04 	lds	r24, 0x046F
     f08:	90 91 70 04 	lds	r25, 0x0470
     f0c:	0e 94 55 30 	call	0x60aa	; 0x60aa <__fixunssfsi>
     f10:	87 2f       	mov	r24, r23
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
     f18:	60 91 d5 02 	lds	r22, 0x02D5
     f1c:	70 91 d6 02 	lds	r23, 0x02D6
     f20:	80 91 d7 02 	lds	r24, 0x02D7
     f24:	90 91 d8 02 	lds	r25, 0x02D8
     f28:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__fixsfsi>
     f2c:	86 2f       	mov	r24, r22
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
     f34:	60 91 d5 02 	lds	r22, 0x02D5
     f38:	70 91 d6 02 	lds	r23, 0x02D6
     f3c:	80 91 d7 02 	lds	r24, 0x02D7
     f40:	90 91 d8 02 	lds	r25, 0x02D8
     f44:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__fixsfsi>
     f48:	87 2f       	mov	r24, r23
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
     f50:	60 91 d5 02 	lds	r22, 0x02D5
     f54:	70 91 d6 02 	lds	r23, 0x02D6
     f58:	80 91 d7 02 	lds	r24, 0x02D7
     f5c:	90 91 d8 02 	lds	r25, 0x02D8
     f60:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__fixsfsi>
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
     f6a:	60 91 d5 02 	lds	r22, 0x02D5
     f6e:	70 91 d6 02 	lds	r23, 0x02D6
     f72:	80 91 d7 02 	lds	r24, 0x02D7
     f76:	90 91 d8 02 	lds	r25, 0x02D8
     f7a:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__fixsfsi>
     f7e:	89 2f       	mov	r24, r25
     f80:	61 e0       	ldi	r22, 0x01	; 1
     f82:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
     f86:	60 91 d1 02 	lds	r22, 0x02D1
     f8a:	70 91 d2 02 	lds	r23, 0x02D2
     f8e:	80 91 d3 02 	lds	r24, 0x02D3
     f92:	90 91 d4 02 	lds	r25, 0x02D4
     f96:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__fixsfsi>
     f9a:	86 2f       	mov	r24, r22
     f9c:	61 e0       	ldi	r22, 0x01	; 1
     f9e:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
     fa2:	60 91 d1 02 	lds	r22, 0x02D1
     fa6:	70 91 d2 02 	lds	r23, 0x02D2
     faa:	80 91 d3 02 	lds	r24, 0x02D3
     fae:	90 91 d4 02 	lds	r25, 0x02D4
     fb2:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__fixsfsi>
     fb6:	87 2f       	mov	r24, r23
     fb8:	61 e0       	ldi	r22, 0x01	; 1
     fba:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
     fbe:	60 91 d1 02 	lds	r22, 0x02D1
     fc2:	70 91 d2 02 	lds	r23, 0x02D2
     fc6:	80 91 d3 02 	lds	r24, 0x02D3
     fca:	90 91 d4 02 	lds	r25, 0x02D4
     fce:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__fixsfsi>
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
     fd8:	60 91 d1 02 	lds	r22, 0x02D1
     fdc:	70 91 d2 02 	lds	r23, 0x02D2
     fe0:	80 91 d3 02 	lds	r24, 0x02D3
     fe4:	90 91 d4 02 	lds	r25, 0x02D4
     fe8:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__fixsfsi>
     fec:	89 2f       	mov	r24, r25
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
     ff4:	80 91 fb 02 	lds	r24, 0x02FB
     ff8:	90 91 fc 02 	lds	r25, 0x02FC
     ffc:	95 95       	asr	r25
     ffe:	87 95       	ror	r24
    1000:	95 95       	asr	r25
    1002:	87 95       	ror	r24
    1004:	61 e0       	ldi	r22, 0x01	; 1
    1006:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    100a:	80 91 f9 02 	lds	r24, 0x02F9
    100e:	90 91 fa 02 	lds	r25, 0x02FA
    1012:	95 95       	asr	r25
    1014:	87 95       	ror	r24
    1016:	95 95       	asr	r25
    1018:	87 95       	ror	r24
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	0e 94 4c 19 	call	0x3298	; 0x3298 <usart0Transmit>
    1020:	90 91 49 04 	lds	r25, 0x0449
    1024:	2d ca       	rjmp	.-2982   	; 0x480 <main+0x2a4>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	09 f0       	breq	.+2      	; 0x102c <main+0xe50>
    102a:	8a cc       	rjmp	.-1772   	; 0x940 <main+0x764>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
    102c:	8a 2d       	mov	r24, r10
    102e:	80 95       	com	r24
    1030:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    1034:	10 92 16 03 	sts	0x0316, r1
						break;
    1038:	83 cc       	rjmp	.-1786   	; 0x940 <main+0x764>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	09 f0       	breq	.+2      	; 0x1040 <main+0xe64>
    103e:	c5 cb       	rjmp	.-2166   	; 0x7ca <main+0x5ee>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    1040:	0e 94 0e 28 	call	0x501c	; 0x501c <turnOffGreenLeds>
							GREEN_LED2_ON;
    1044:	80 91 0b 01 	lds	r24, 0x010B
    1048:	8b 7f       	andi	r24, 0xFB	; 251
    104a:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    104e:	10 92 4f 04 	sts	0x044F, r1
							enableObstacleAvoidance();
    1052:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <enableObstacleAvoidance>
							setRightSpeed(20);
    1056:	84 e1       	ldi	r24, 0x14	; 20
    1058:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
							setLeftSpeed(20);
    105c:	84 e1       	ldi	r24, 0x14	; 20
    105e:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    1062:	80 91 6b 02 	lds	r24, 0x026B
    1066:	90 91 6c 02 	lds	r25, 0x026C
    106a:	e1 e0       	ldi	r30, 0x01	; 1
    106c:	80 39       	cpi	r24, 0x90	; 144
    106e:	9e 07       	cpc	r25, r30
    1070:	0c f4       	brge	.+2      	; 0x1074 <main+0xe98>
    1072:	3a c1       	rjmp	.+628    	; 0x12e8 <main+0x110c>
    1074:	80 91 6d 02 	lds	r24, 0x026D
    1078:	90 91 6e 02 	lds	r25, 0x026E
    107c:	f1 e0       	ldi	r31, 0x01	; 1
    107e:	80 39       	cpi	r24, 0x90	; 144
    1080:	9f 07       	cpc	r25, r31
    1082:	0c f4       	brge	.+2      	; 0x1086 <main+0xeaa>
    1084:	31 c1       	rjmp	.+610    	; 0x12e8 <main+0x110c>
    1086:	80 91 69 02 	lds	r24, 0x0269
    108a:	90 91 6a 02 	lds	r25, 0x026A
    108e:	21 e0       	ldi	r18, 0x01	; 1
    1090:	80 39       	cpi	r24, 0x90	; 144
    1092:	92 07       	cpc	r25, r18
    1094:	0c f4       	brge	.+2      	; 0x1098 <main+0xebc>
    1096:	28 c1       	rjmp	.+592    	; 0x12e8 <main+0x110c>
    1098:	80 91 6f 02 	lds	r24, 0x026F
    109c:	90 91 70 02 	lds	r25, 0x0270
    10a0:	31 e0       	ldi	r19, 0x01	; 1
    10a2:	80 39       	cpi	r24, 0x90	; 144
    10a4:	93 07       	cpc	r25, r19
    10a6:	0c f4       	brge	.+2      	; 0x10aa <main+0xece>
    10a8:	1f c1       	rjmp	.+574    	; 0x12e8 <main+0x110c>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    10aa:	10 92 4e 04 	sts	0x044E, r1
    10ae:	8d cb       	rjmp	.-2278   	; 0x7ca <main+0x5ee>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    10b0:	8a 2d       	mov	r24, r10
    10b2:	80 95       	com	r24
    10b4:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    10b8:	62 e0       	ldi	r22, 0x02	; 2
    10ba:	60 93 16 03 	sts	0x0316, r22
						break;
    10be:	40 cc       	rjmp	.-1920   	; 0x940 <main+0x764>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    10c0:	0e 94 0e 28 	call	0x501c	; 0x501c <turnOffGreenLeds>
							GREEN_LED4_ON;
    10c4:	80 91 0b 01 	lds	r24, 0x010B
    10c8:	8f 7e       	andi	r24, 0xEF	; 239
    10ca:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    10ce:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    10d2:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
    10d6:	9b 01       	movw	r18, r22
    10d8:	ac 01       	movw	r20, r24
    10da:	60 93 55 04 	sts	0x0455, r22
    10de:	70 93 56 04 	sts	0x0456, r23
    10e2:	80 93 57 04 	sts	0x0457, r24
    10e6:	90 93 58 04 	sts	0x0458, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    10ea:	80 91 51 04 	lds	r24, 0x0451
    10ee:	90 91 52 04 	lds	r25, 0x0452
    10f2:	a0 91 53 04 	lds	r26, 0x0453
    10f6:	b0 91 54 04 	lds	r27, 0x0454
    10fa:	28 1b       	sub	r18, r24
    10fc:	39 0b       	sbc	r19, r25
    10fe:	4a 0b       	sbc	r20, r26
    1100:	5b 0b       	sbc	r21, r27
    1102:	23 33       	cpi	r18, 0x33	; 51
    1104:	6f ee       	ldi	r22, 0xEF	; 239
    1106:	36 07       	cpc	r19, r22
    1108:	62 e0       	ldi	r22, 0x02	; 2
    110a:	46 07       	cpc	r20, r22
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	56 07       	cpc	r21, r22
    1110:	08 f0       	brcs	.+2      	; 0x1114 <main+0xf38>
    1112:	52 c1       	rjmp	.+676    	; 0x13b8 <main+0x11dc>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    1114:	80 91 03 01 	lds	r24, 0x0103
    1118:	84 ff       	sbrs	r24, 4
    111a:	33 c1       	rjmp	.+614    	; 0x1382 <main+0x11a6>
								outOfLine = 0;
    111c:	10 92 4f 04 	sts	0x044F, r1
								chargeContact++;
    1120:	80 91 50 04 	lds	r24, 0x0450
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	80 93 50 04 	sts	0x0450, r24
								if(chargeContact > 20) {
    112a:	85 31       	cpi	r24, 0x15	; 21
    112c:	08 f0       	brcs	.+2      	; 0x1130 <main+0xf54>
    112e:	71 c1       	rjmp	.+738    	; 0x1412 <main+0x1236>
    1130:	80 91 6b 02 	lds	r24, 0x026B
    1134:	90 91 6c 02 	lds	r25, 0x026C
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    1138:	20 91 69 02 	lds	r18, 0x0269
    113c:	30 91 6a 02 	lds	r19, 0x026A
    1140:	41 e0       	ldi	r20, 0x01	; 1
    1142:	22 3c       	cpi	r18, 0xC2	; 194
    1144:	34 07       	cpc	r19, r20
    1146:	ac f4       	brge	.+42     	; 0x1172 <main+0xf96>
    1148:	51 e0       	ldi	r21, 0x01	; 1
    114a:	83 3c       	cpi	r24, 0xC3	; 195
    114c:	95 07       	cpc	r25, r21
    114e:	8c f0       	brlt	.+34     	; 0x1172 <main+0xf96>
    1150:	40 91 6d 02 	lds	r20, 0x026D
    1154:	50 91 6e 02 	lds	r21, 0x026E
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	43 3c       	cpi	r20, 0xC3	; 195
    115c:	56 07       	cpc	r21, r22
    115e:	4c f0       	brlt	.+18     	; 0x1172 <main+0xf96>
    1160:	40 91 6f 02 	lds	r20, 0x026F
    1164:	50 91 70 02 	lds	r21, 0x0270
    1168:	e1 e0       	ldi	r30, 0x01	; 1
    116a:	43 3c       	cpi	r20, 0xC3	; 195
    116c:	5e 07       	cpc	r21, r30
    116e:	0c f0       	brlt	.+2      	; 0x1172 <main+0xf96>
    1170:	76 c1       	rjmp	.+748    	; 0x145e <main+0x1282>
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    1172:	40 91 6f 02 	lds	r20, 0x026F
    1176:	50 91 70 02 	lds	r21, 0x0270
    117a:	f1 e0       	ldi	r31, 0x01	; 1
    117c:	42 3c       	cpi	r20, 0xC2	; 194
    117e:	5f 07       	cpc	r21, r31
    1180:	0c f0       	brlt	.+2      	; 0x1184 <main+0xfa8>
    1182:	ea c0       	rjmp	.+468    	; 0x1358 <main+0x117c>
    1184:	41 e0       	ldi	r20, 0x01	; 1
    1186:	23 3c       	cpi	r18, 0xC3	; 195
    1188:	34 07       	cpc	r19, r20
    118a:	0c f4       	brge	.+2      	; 0x118e <main+0xfb2>
    118c:	e5 c0       	rjmp	.+458    	; 0x1358 <main+0x117c>
    118e:	51 e0       	ldi	r21, 0x01	; 1
    1190:	83 3c       	cpi	r24, 0xC3	; 195
    1192:	95 07       	cpc	r25, r21
    1194:	0c f4       	brge	.+2      	; 0x1198 <main+0xfbc>
    1196:	e5 c0       	rjmp	.+458    	; 0x1362 <main+0x1186>
    1198:	80 91 6d 02 	lds	r24, 0x026D
    119c:	90 91 6e 02 	lds	r25, 0x026E
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	83 3c       	cpi	r24, 0xC3	; 195
    11a4:	96 07       	cpc	r25, r22
    11a6:	0c f0       	brlt	.+2      	; 0x11aa <main+0xfce>
    11a8:	53 c1       	rjmp	.+678    	; 0x1450 <main+0x1274>
								setLeftSpeed(20);
								setRightSpeed(-15);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(20);
    11aa:	84 e1       	ldi	r24, 0x14	; 20
    11ac:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
								setRightSpeed(-10);
    11b0:	86 ef       	ldi	r24, 0xF6	; 246
    11b2:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
    11b6:	09 cb       	rjmp	.-2542   	; 0x7ca <main+0x5ee>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    11b8:	0e 94 0e 28 	call	0x501c	; 0x501c <turnOffGreenLeds>
							GREEN_LED6_ON;
    11bc:	80 91 0b 01 	lds	r24, 0x010B
    11c0:	8f 7b       	andi	r24, 0xBF	; 191
    11c2:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    11c6:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
    11ca:	9b 01       	movw	r18, r22
    11cc:	ac 01       	movw	r20, r24
    11ce:	60 93 55 04 	sts	0x0455, r22
    11d2:	70 93 56 04 	sts	0x0456, r23
    11d6:	80 93 57 04 	sts	0x0457, r24
    11da:	90 93 58 04 	sts	0x0458, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    11de:	80 91 51 04 	lds	r24, 0x0451
    11e2:	90 91 52 04 	lds	r25, 0x0452
    11e6:	a0 91 53 04 	lds	r26, 0x0453
    11ea:	b0 91 54 04 	lds	r27, 0x0454
    11ee:	28 1b       	sub	r18, r24
    11f0:	39 0b       	sbc	r19, r25
    11f2:	4a 0b       	sbc	r20, r26
    11f4:	5b 0b       	sbc	r21, r27
    11f6:	2d 3c       	cpi	r18, 0xCD	; 205
    11f8:	66 e6       	ldi	r22, 0x66	; 102
    11fa:	36 07       	cpc	r19, r22
    11fc:	64 e0       	ldi	r22, 0x04	; 4
    11fe:	46 07       	cpc	r20, r22
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	56 07       	cpc	r21, r22
    1204:	08 f4       	brcc	.+2      	; 0x1208 <main+0x102c>
    1206:	91 c0       	rjmp	.+290    	; 0x132a <main+0x114e>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    1208:	80 91 bd 02 	lds	r24, 0x02BD
    120c:	90 91 be 02 	lds	r25, 0x02BE
    1210:	e3 e0       	ldi	r30, 0x03	; 3
    1212:	8a 37       	cpi	r24, 0x7A	; 122
    1214:	9e 07       	cpc	r25, r30
    1216:	08 f4       	brcc	.+2      	; 0x121a <main+0x103e>
    1218:	94 c0       	rjmp	.+296    	; 0x1342 <main+0x1166>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    121a:	83 ef       	ldi	r24, 0xF3	; 243
    121c:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
									setLeftSpeed(-13);
    1220:	83 ef       	ldi	r24, 0xF3	; 243
    1222:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    1226:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
    122a:	60 93 51 04 	sts	0x0451, r22
    122e:	70 93 52 04 	sts	0x0452, r23
    1232:	80 93 53 04 	sts	0x0453, r24
    1236:	90 93 54 04 	sts	0x0454, r25
									demoState = 4;
    123a:	f4 e0       	ldi	r31, 0x04	; 4
    123c:	f0 93 4d 04 	sts	0x044D, r31
									break;
    1240:	c4 ca       	rjmp	.-2680   	; 0x7ca <main+0x5ee>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    1242:	e0 e6       	ldi	r30, 0x60	; 96
    1244:	ae 16       	cp	r10, r30
    1246:	b1 04       	cpc	r11, r1
    1248:	08 f0       	brcs	.+2      	; 0x124c <main+0x1070>
    124a:	c4 c9       	rjmp	.-3192   	; 0x5d4 <main+0x3f8>
					if(pwm_red!=255 && pwm_green!=255) {
    124c:	80 91 0c 02 	lds	r24, 0x020C
    1250:	8f 3f       	cpi	r24, 0xFF	; 255
    1252:	09 f4       	brne	.+2      	; 0x1256 <main+0x107a>
    1254:	bf c9       	rjmp	.-3202   	; 0x5d4 <main+0x3f8>
    1256:	80 91 0d 02 	lds	r24, 0x020D
    125a:	8f 3f       	cpi	r24, 0xFF	; 255
    125c:	09 f4       	brne	.+2      	; 0x1260 <main+0x1084>
    125e:	ba c9       	rjmp	.-3212   	; 0x5d4 <main+0x3f8>
						pwm_blue = 255;
    1260:	10 93 0e 02 	sts	0x020E, r17
    1264:	b7 c9       	rjmp	.-3218   	; 0x5d4 <main+0x3f8>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    1266:	0e 94 0e 28 	call	0x501c	; 0x501c <turnOffGreenLeds>
							GREEN_LED6_ON;
    126a:	80 91 0b 01 	lds	r24, 0x010B
    126e:	8f 7b       	andi	r24, 0xBF	; 191
    1270:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    1274:	80 91 0b 01 	lds	r24, 0x010B
    1278:	8f 77       	andi	r24, 0x7F	; 127
    127a:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    127e:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
    1282:	9b 01       	movw	r18, r22
    1284:	ac 01       	movw	r20, r24
    1286:	60 93 55 04 	sts	0x0455, r22
    128a:	70 93 56 04 	sts	0x0456, r23
    128e:	80 93 57 04 	sts	0x0457, r24
    1292:	90 93 58 04 	sts	0x0458, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    1296:	80 91 51 04 	lds	r24, 0x0451
    129a:	90 91 52 04 	lds	r25, 0x0452
    129e:	a0 91 53 04 	lds	r26, 0x0453
    12a2:	b0 91 54 04 	lds	r27, 0x0454
    12a6:	28 1b       	sub	r18, r24
    12a8:	39 0b       	sbc	r19, r25
    12aa:	4a 0b       	sbc	r20, r26
    12ac:	5b 0b       	sbc	r21, r27
    12ae:	2f 38       	cpi	r18, 0x8F	; 143
    12b0:	65 e2       	ldi	r22, 0x25	; 37
    12b2:	36 07       	cpc	r19, r22
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	46 07       	cpc	r20, r22
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	56 07       	cpc	r21, r22
    12bc:	08 f4       	brcc	.+2      	; 0x12c0 <main+0x10e4>
    12be:	85 ca       	rjmp	.-2806   	; 0x7ca <main+0x5ee>
								setRightSpeed(20);
    12c0:	84 e1       	ldi	r24, 0x14	; 20
    12c2:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
								setLeftSpeed(-20);								
    12c6:	8c ee       	ldi	r24, 0xEC	; 236
    12c8:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    12cc:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
    12d0:	60 93 51 04 	sts	0x0451, r22
    12d4:	70 93 52 04 	sts	0x0452, r23
    12d8:	80 93 53 04 	sts	0x0453, r24
    12dc:	90 93 54 04 	sts	0x0454, r25
								demoState = 5;							
    12e0:	85 e0       	ldi	r24, 0x05	; 5
    12e2:	80 93 4d 04 	sts	0x044D, r24
    12e6:	71 ca       	rjmp	.-2846   	; 0x7ca <main+0x5ee>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(20);
							setLeftSpeed(20);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    12e8:	80 91 4e 04 	lds	r24, 0x044E
    12ec:	8f 5f       	subi	r24, 0xFF	; 255
    12ee:	80 93 4e 04 	sts	0x044E, r24
								if(lineFound > 10) {
    12f2:	8b 30       	cpi	r24, 0x0B	; 11
    12f4:	08 f4       	brcc	.+2      	; 0x12f8 <main+0x111c>
    12f6:	69 ca       	rjmp	.-2862   	; 0x7ca <main+0x5ee>
									outOfLine = 0;
    12f8:	10 92 4f 04 	sts	0x044F, r1
									chargeContact = 0;
    12fc:	10 92 50 04 	sts	0x0450, r1
									demoStartTime = getTime100MicroSec();
    1300:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
    1304:	60 93 51 04 	sts	0x0451, r22
    1308:	70 93 52 04 	sts	0x0452, r23
    130c:	80 93 53 04 	sts	0x0453, r24
    1310:	90 93 54 04 	sts	0x0454, r25
									demoState = 2;
    1314:	42 e0       	ldi	r20, 0x02	; 2
    1316:	40 93 4d 04 	sts	0x044D, r20
									break;
    131a:	57 ca       	rjmp	.-2898   	; 0x7ca <main+0x5ee>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    131c:	80 36       	cpi	r24, 0x60	; 96
    131e:	91 05       	cpc	r25, r1
    1320:	08 f0       	brcs	.+2      	; 0x1324 <main+0x1148>
    1322:	74 cb       	rjmp	.-2328   	; 0xa0c <main+0x830>
					pwm_blue = 255;
    1324:	10 93 0e 02 	sts	0x020E, r17
    1328:	71 cb       	rjmp	.-2334   	; 0xa0c <main+0x830>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    132a:	80 91 03 01 	lds	r24, 0x0103
    132e:	84 fd       	sbrc	r24, 4
    1330:	4c ca       	rjmp	.-2920   	; 0x7ca <main+0x5ee>
								chargeContact = 0;
    1332:	10 92 50 04 	sts	0x0450, r1
								outOfLine = 0;
    1336:	10 92 4f 04 	sts	0x044F, r1
								demoState = 2;
    133a:	82 e0       	ldi	r24, 0x02	; 2
    133c:	98 2e       	mov	r9, r24
    133e:	90 92 4d 04 	sts	0x044D, r9
								demoStartTime = getTime100MicroSec();
    1342:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
    1346:	60 93 51 04 	sts	0x0451, r22
    134a:	70 93 52 04 	sts	0x0452, r23
    134e:	80 93 53 04 	sts	0x0453, r24
    1352:	90 93 54 04 	sts	0x0454, r25
								break;						
    1356:	39 ca       	rjmp	.-2958   	; 0x7ca <main+0x5ee>
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(20);
								setRightSpeed(-15);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    1358:	e1 e0       	ldi	r30, 0x01	; 1
    135a:	83 3c       	cpi	r24, 0xC3	; 195
    135c:	9e 07       	cpc	r25, r30
    135e:	0c f0       	brlt	.+2      	; 0x1362 <main+0x1186>
    1360:	24 cf       	rjmp	.-440    	; 0x11aa <main+0xfce>
								setRightSpeed(-10);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    1362:	80 91 6d 02 	lds	r24, 0x026D
    1366:	90 91 6e 02 	lds	r25, 0x026E
    136a:	f1 e0       	ldi	r31, 0x01	; 1
    136c:	83 3c       	cpi	r24, 0xC3	; 195
    136e:	9f 07       	cpc	r25, r31
    1370:	0c f4       	brge	.+2      	; 0x1374 <main+0x1198>
    1372:	48 c0       	rjmp	.+144    	; 0x1404 <main+0x1228>
								setLeftSpeed(-10);
    1374:	86 ef       	ldi	r24, 0xF6	; 246
    1376:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
								setRightSpeed(20);
    137a:	84 e1       	ldi	r24, 0x14	; 20
    137c:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
    1380:	24 ca       	rjmp	.-3000   	; 0x7ca <main+0x5ee>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    1382:	10 92 50 04 	sts	0x0450, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    1386:	80 91 6b 02 	lds	r24, 0x026B
    138a:	90 91 6c 02 	lds	r25, 0x026C
    138e:	e1 e0       	ldi	r30, 0x01	; 1
    1390:	83 3c       	cpi	r24, 0xC3	; 195
    1392:	9e 07       	cpc	r25, r30
    1394:	2c f1       	brlt	.+74     	; 0x13e0 <main+0x1204>
    1396:	20 91 6d 02 	lds	r18, 0x026D
    139a:	30 91 6e 02 	lds	r19, 0x026E
    139e:	f1 e0       	ldi	r31, 0x01	; 1
    13a0:	23 3c       	cpi	r18, 0xC3	; 195
    13a2:	3f 07       	cpc	r19, r31
    13a4:	ec f0       	brlt	.+58     	; 0x13e0 <main+0x1204>
									outOfLine++;
    13a6:	20 91 4f 04 	lds	r18, 0x044F
    13aa:	2f 5f       	subi	r18, 0xFF	; 255
    13ac:	20 93 4f 04 	sts	0x044F, r18
									if(outOfLine > 250) {
    13b0:	2b 3f       	cpi	r18, 0xFB	; 251
    13b2:	08 f4       	brcc	.+2      	; 0x13b6 <main+0x11da>
    13b4:	c1 ce       	rjmp	.-638    	; 0x1138 <main+0xf5c>
    13b6:	07 ca       	rjmp	.-3058   	; 0x7c6 <main+0x5ea>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    13b8:	8c ee       	ldi	r24, 0xEC	; 236
    13ba:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
								setLeftSpeed(-20);
    13be:	8c ee       	ldi	r24, 0xEC	; 236
    13c0:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    13c4:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
    13c8:	60 93 51 04 	sts	0x0451, r22
    13cc:	70 93 52 04 	sts	0x0452, r23
    13d0:	80 93 53 04 	sts	0x0453, r24
    13d4:	90 93 54 04 	sts	0x0454, r25
								demoState = 4;
    13d8:	84 e0       	ldi	r24, 0x04	; 4
    13da:	80 93 4d 04 	sts	0x044D, r24
								break;
    13de:	f5 c9       	rjmp	.-3094   	; 0x7ca <main+0x5ee>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    13e0:	10 92 4f 04 	sts	0x044F, r1
    13e4:	a9 ce       	rjmp	.-686    	; 0x1138 <main+0xf5c>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    13e6:	91 30       	cpi	r25, 0x01	; 1
    13e8:	41 f1       	breq	.+80     	; 0x143a <main+0x125e>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    13ea:	92 30       	cpi	r25, 0x02	; 2
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <main+0x1214>
    13ee:	f2 c8       	rjmp	.-3612   	; 0x5d4 <main+0x3f8>
						pwm_red = 255;
    13f0:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    13f4:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    13f8:	8e ef       	ldi	r24, 0xFE	; 254
    13fa:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    13fe:	10 92 16 03 	sts	0x0316, r1
    1402:	e8 c8       	rjmp	.-3632   	; 0x5d4 <main+0x3f8>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(20);
    1404:	84 e1       	ldi	r24, 0x14	; 20
    1406:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
								setLeftSpeed(20);
    140a:	84 e1       	ldi	r24, 0x14	; 20
    140c:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
    1410:	dc c9       	rjmp	.-3144   	; 0x7ca <main+0x5ee>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
									setRightSpeed(0);
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    141e:	0e 94 26 1b 	call	0x364c	; 0x364c <getTime100MicroSec>
    1422:	60 93 51 04 	sts	0x0451, r22
    1426:	70 93 52 04 	sts	0x0452, r23
    142a:	80 93 53 04 	sts	0x0453, r24
    142e:	90 93 54 04 	sts	0x0454, r25
									demoState = 3;
    1432:	93 e0       	ldi	r25, 0x03	; 3
    1434:	90 93 4d 04 	sts	0x044D, r25
									break;
    1438:	c8 c9       	rjmp	.-3184   	; 0x7ca <main+0x5ee>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    143a:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    143e:	5e ef       	ldi	r21, 0xFE	; 254
    1440:	50 93 0d 02 	sts	0x020D, r21
						pwm_blue = 255;
    1444:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    1448:	62 e0       	ldi	r22, 0x02	; 2
    144a:	60 93 16 03 	sts	0x0316, r22
    144e:	c2 c8       	rjmp	.-3708   	; 0x5d4 <main+0x3f8>
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(20);
    1450:	84 e1       	ldi	r24, 0x14	; 20
    1452:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
								setRightSpeed(-15);
    1456:	81 ef       	ldi	r24, 0xF1	; 241
    1458:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
    145c:	b6 c9       	rjmp	.-3220   	; 0x7ca <main+0x5ee>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-15);
    145e:	81 ef       	ldi	r24, 0xF1	; 241
    1460:	0e 94 ed 22 	call	0x45da	; 0x45da <setLeftSpeed>
								setRightSpeed(20);
    1464:	84 e1       	ldi	r24, 0x14	; 20
    1466:	0e 94 27 23 	call	0x464e	; 0x464e <setRightSpeed>
    146a:	af c9       	rjmp	.-3234   	; 0x7ca <main+0x5ee>

0000146c <SPI_WAIT>:
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	21 e0       	ldi	r18, 0x01	; 1
    1472:	0d b4       	in	r0, 0x2d	; 45
    1474:	07 fc       	sbrc	r0, 7
    1476:	0a c0       	rjmp	.+20     	; 0x148c <SPI_WAIT+0x20>
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	37 e2       	ldi	r19, 0x27	; 39
    147c:	80 31       	cpi	r24, 0x10	; 16
    147e:	93 07       	cpc	r25, r19
    1480:	c0 f3       	brcs	.-16     	; 0x1472 <SPI_WAIT+0x6>
    1482:	20 93 14 03 	sts	0x0314, r18
    1486:	0d b4       	in	r0, 0x2d	; 45
    1488:	07 fe       	sbrs	r0, 7
    148a:	f6 cf       	rjmp	.-20     	; 0x1478 <SPI_WAIT+0xc>
    148c:	08 95       	ret

0000148e <initSPI>:
    148e:	84 b1       	in	r24, 0x04	; 4
    1490:	80 7f       	andi	r24, 0xF0	; 240
    1492:	84 b9       	out	0x04, r24	; 4
    1494:	84 b1       	in	r24, 0x04	; 4
    1496:	87 60       	ori	r24, 0x07	; 7
    1498:	84 b9       	out	0x04, r24	; 4
    149a:	80 e5       	ldi	r24, 0x50	; 80
    149c:	8c bd       	out	0x2c, r24	; 44
    149e:	8d b5       	in	r24, 0x2d	; 45
    14a0:	81 60       	ori	r24, 0x01	; 1
    14a2:	8d bd       	out	0x2d, r24	; 45
    14a4:	08 95       	ret

000014a6 <closeSPI>:
    14a6:	1c bc       	out	0x2c, r1	; 44
    14a8:	1d bc       	out	0x2d, r1	; 45
    14aa:	08 95       	ret

000014ac <SPI_ReadWrite_Block>:
    14ac:	44 23       	and	r20, r20
    14ae:	09 f1       	breq	.+66     	; 0x14f2 <SPI_ReadWrite_Block+0x46>
    14b0:	a6 2f       	mov	r26, r22
    14b2:	b7 2f       	mov	r27, r23
    14b4:	e8 2f       	mov	r30, r24
    14b6:	f9 2f       	mov	r31, r25
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	21 91       	ld	r18, Z+
    14bc:	2e bd       	out	0x2e, r18	; 46
    14be:	21 e0       	ldi	r18, 0x01	; 1
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	0d b4       	in	r0, 0x2d	; 45
    14c4:	07 fc       	sbrc	r0, 7
    14c6:	0b c0       	rjmp	.+22     	; 0x14de <SPI_ReadWrite_Block+0x32>
    14c8:	2f 5f       	subi	r18, 0xFF	; 255
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	57 e2       	ldi	r21, 0x27	; 39
    14ce:	20 31       	cpi	r18, 0x10	; 16
    14d0:	35 07       	cpc	r19, r21
    14d2:	b8 f3       	brcs	.-18     	; 0x14c2 <SPI_ReadWrite_Block+0x16>
    14d4:	90 93 14 03 	sts	0x0314, r25
    14d8:	0d b4       	in	r0, 0x2d	; 45
    14da:	07 fe       	sbrs	r0, 7
    14dc:	f5 cf       	rjmp	.-22     	; 0x14c8 <SPI_ReadWrite_Block+0x1c>
    14de:	20 91 14 03 	lds	r18, 0x0314
    14e2:	22 23       	and	r18, r18
    14e4:	31 f4       	brne	.+12     	; 0x14f2 <SPI_ReadWrite_Block+0x46>
    14e6:	2e b5       	in	r18, 0x2e	; 46
    14e8:	2d 93       	st	X+, r18
    14ea:	2e 2f       	mov	r18, r30
    14ec:	28 1b       	sub	r18, r24
    14ee:	24 17       	cp	r18, r20
    14f0:	20 f3       	brcs	.-56     	; 0x14ba <SPI_ReadWrite_Block+0xe>
    14f2:	08 95       	ret

000014f4 <SPI_Write_Block>:
    14f4:	66 23       	and	r22, r22
    14f6:	e9 f0       	breq	.+58     	; 0x1532 <SPI_Write_Block+0x3e>
    14f8:	e8 2f       	mov	r30, r24
    14fa:	f9 2f       	mov	r31, r25
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	21 91       	ld	r18, Z+
    1500:	2e bd       	out	0x2e, r18	; 46
    1502:	21 e0       	ldi	r18, 0x01	; 1
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	0d b4       	in	r0, 0x2d	; 45
    1508:	07 fc       	sbrc	r0, 7
    150a:	0b c0       	rjmp	.+22     	; 0x1522 <SPI_Write_Block+0x2e>
    150c:	2f 5f       	subi	r18, 0xFF	; 255
    150e:	3f 4f       	sbci	r19, 0xFF	; 255
    1510:	47 e2       	ldi	r20, 0x27	; 39
    1512:	20 31       	cpi	r18, 0x10	; 16
    1514:	34 07       	cpc	r19, r20
    1516:	b8 f3       	brcs	.-18     	; 0x1506 <SPI_Write_Block+0x12>
    1518:	90 93 14 03 	sts	0x0314, r25
    151c:	0d b4       	in	r0, 0x2d	; 45
    151e:	07 fe       	sbrs	r0, 7
    1520:	f5 cf       	rjmp	.-22     	; 0x150c <SPI_Write_Block+0x18>
    1522:	20 91 14 03 	lds	r18, 0x0314
    1526:	22 23       	and	r18, r18
    1528:	21 f4       	brne	.+8      	; 0x1532 <SPI_Write_Block+0x3e>
    152a:	2e 2f       	mov	r18, r30
    152c:	28 1b       	sub	r18, r24
    152e:	26 17       	cp	r18, r22
    1530:	30 f3       	brcs	.-52     	; 0x14fe <SPI_Write_Block+0xa>
    1532:	08 95       	ret

00001534 <SPI_Write_Byte>:
    1534:	8e bd       	out	0x2e, r24	; 46
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	21 e0       	ldi	r18, 0x01	; 1
    153c:	0d b4       	in	r0, 0x2d	; 45
    153e:	07 fc       	sbrc	r0, 7
    1540:	0a c0       	rjmp	.+20     	; 0x1556 <SPI_Write_Byte+0x22>
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	37 e2       	ldi	r19, 0x27	; 39
    1546:	80 31       	cpi	r24, 0x10	; 16
    1548:	93 07       	cpc	r25, r19
    154a:	c0 f3       	brcs	.-16     	; 0x153c <SPI_Write_Byte+0x8>
    154c:	20 93 14 03 	sts	0x0314, r18
    1550:	0d b4       	in	r0, 0x2d	; 45
    1552:	07 fe       	sbrs	r0, 7
    1554:	f6 cf       	rjmp	.-20     	; 0x1542 <SPI_Write_Byte+0xe>
    1556:	8e b5       	in	r24, 0x2e	; 46
    1558:	08 95       	ret

0000155a <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <mirf_config+0xa>
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1568:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    156a:	80 e2       	ldi	r24, 0x20	; 32
    156c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1570:	8d e0       	ldi	r24, 0x0D	; 13
    1572:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    1576:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1578:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    157a:	83 e2       	ldi	r24, 0x23	; 35
    157c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    1586:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    1588:	80 91 11 03 	lds	r24, 0x0311
    158c:	90 91 12 03 	lds	r25, 0x0312
    1590:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    1592:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1594:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1596:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1598:	80 e3       	ldi	r24, 0x30	; 48
    159a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    159e:	8e 01       	movw	r16, r28
    15a0:	0f 5f       	subi	r16, 0xFF	; 255
    15a2:	1f 4f       	sbci	r17, 0xFF	; 255
    15a4:	c8 01       	movw	r24, r16
    15a6:	63 e0       	ldi	r22, 0x03	; 3
    15a8:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <SPI_Write_Block>
    mirf_CSN_hi;
    15ac:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    15ae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15b0:	8a e2       	ldi	r24, 0x2A	; 42
    15b2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    15b6:	c8 01       	movw	r24, r16
    15b8:	63 e0       	ldi	r22, 0x03	; 3
    15ba:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <SPI_Write_Block>
    mirf_CSN_hi;
    15be:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15c0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15c2:	81 e2       	ldi	r24, 0x21	; 33
    15c4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    15ce:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15d0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15d2:	82 e2       	ldi	r24, 0x22	; 34
    15d4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    15de:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15e0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15e2:	84 e2       	ldi	r24, 0x24	; 36
    15e4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15e8:	82 e1       	ldi	r24, 0x12	; 18
    15ea:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    15ee:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15f0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15f2:	85 e2       	ldi	r24, 0x25	; 37
    15f4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15f8:	88 e2       	ldi	r24, 0x28	; 40
    15fa:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    15fe:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1600:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1602:	81 e3       	ldi	r24, 0x31	; 49
    1604:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1608:	8d e0       	ldi	r24, 0x0D	; 13
    160a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    160e:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    1610:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    1612:	80 e5       	ldi	r24, 0x50	; 80
    1614:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1618:	83 e7       	ldi	r24, 0x73	; 115
    161a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    161e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1620:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1622:	8c e3       	ldi	r24, 0x3C	; 60
    1624:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    162e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1630:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1632:	8d e3       	ldi	r24, 0x3D	; 61
    1634:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1638:	86 e0       	ldi	r24, 0x06	; 6
    163a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    163e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1640:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1642:	80 e2       	ldi	r24, 0x20	; 32
    1644:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1648:	8f e0       	ldi	r24, 0x0F	; 15
    164a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    164e:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	08 95       	ret

00001660 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1660:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1662:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    1664:	0e 94 ad 0a 	call	0x155a	; 0x155a <mirf_config>
}
    1668:	08 95       	ret

0000166a <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1670:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1672:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1674:	8a e2       	ldi	r24, 0x2A	; 42
    1676:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    167a:	ce 01       	movw	r24, r28
    167c:	65 e0       	ldi	r22, 0x05	; 5
    167e:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <SPI_Write_Block>
    mirf_CSN_hi;
    1682:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1684:	2c 9a       	sbi	0x05, 4	; 5
}
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1692:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1694:	80 e3       	ldi	r24, 0x30	; 48
    1696:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    169a:	ce 01       	movw	r24, r28
    169c:	65 e0       	ldi	r22, 0x05	; 5
    169e:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <SPI_Write_Block>
    mirf_CSN_hi;
    16a2:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	08 95       	ret

000016aa <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    16aa:	80 91 7a 04 	lds	r24, 0x047A
    16ae:	88 23       	and	r24, r24
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <mirf_data_ready+0xc>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    16b4:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    16b6:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    16be:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    16c0:	80 74       	andi	r24, 0x40	; 64
    16c2:	08 95       	ret

000016c4 <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	0f 92       	push	r0
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    16ce:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    16d0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    16d2:	87 e1       	ldi	r24, 0x17	; 23
    16d4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    16d8:	be 01       	movw	r22, r28
    16da:	6f 5f       	subi	r22, 0xFF	; 255
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255
    16de:	cb 01       	movw	r24, r22
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    16e6:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ea:	81 70       	andi	r24, 0x01	; 1
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    16f4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    16f6:	82 ee       	ldi	r24, 0xE2	; 226
    16f8:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    16fc:	28 9a       	sbi	0x05, 0	; 5

}
    16fe:	08 95       	ret

00001700 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1706:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1708:	81 e6       	ldi	r24, 0x61	; 97
    170a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    170e:	ce 01       	movw	r24, r28
    1710:	be 01       	movw	r22, r28
    1712:	4d e0       	ldi	r20, 0x0D	; 13
    1714:	0e 94 56 0a 	call	0x14ac	; 0x14ac <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1718:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    171a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    171c:	87 e2       	ldi	r24, 0x27	; 39
    171e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1722:	80 e4       	ldi	r24, 0x40	; 64
    1724:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    1728:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	08 95       	ret

00001730 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	0f 92       	push	r0
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    173a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    173c:	8f 71       	andi	r24, 0x1F	; 31
    173e:	80 62       	ori	r24, 0x20	; 32
    1740:	69 83       	std	Y+1, r22	; 0x01
    1742:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1746:	69 81       	ldd	r22, Y+1	; 0x01
    1748:	86 2f       	mov	r24, r22
    174a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    174e:	28 9a       	sbi	0x05, 0	; 5
}
    1750:	0f 90       	pop	r0
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	0f 92       	push	r0
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1768:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    176a:	8f 71       	andi	r24, 0x1F	; 31
    176c:	49 83       	std	Y+1, r20	; 0x01
    176e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1772:	c8 01       	movw	r24, r16
    1774:	b8 01       	movw	r22, r16
    1776:	49 81       	ldd	r20, Y+1	; 0x01
    1778:	0e 94 56 0a 	call	0x14ac	; 0x14ac <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    177c:	28 9a       	sbi	0x05, 0	; 5
}
    177e:	0f 90       	pop	r0
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	1f 91       	pop	r17
    1786:	0f 91       	pop	r16
    1788:	08 95       	ret

0000178a <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    179a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    179c:	8f 71       	andi	r24, 0x1F	; 31
    179e:	80 62       	ori	r24, 0x20	; 32
    17a0:	49 83       	std	Y+1, r20	; 0x01
    17a2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    17a6:	c8 01       	movw	r24, r16
    17a8:	49 81       	ldd	r20, Y+1	; 0x01
    17aa:	64 2f       	mov	r22, r20
    17ac:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <SPI_Write_Block>
    mirf_CSN_hi;
    17b0:	28 9a       	sbi	0x05, 0	; 5
}
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	0f 92       	push	r0
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    17ce:	80 91 7a 04 	lds	r24, 0x047A
    17d2:	88 23       	and	r24, r24
    17d4:	e1 f7       	brne	.-8      	; 0x17ce <mirf_send+0x10>

    mirf_CE_lo;
    17d6:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	80 93 7a 04 	sts	0x047A, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    17de:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    17e0:	80 e2       	ldi	r24, 0x20	; 32
    17e2:	69 83       	std	Y+1, r22	; 0x01
    17e4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    17e8:	8a e4       	ldi	r24, 0x4A	; 74
    17ea:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    17ee:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    17f0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    17f2:	81 ee       	ldi	r24, 0xE1	; 225
    17f4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    17f8:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    17fa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    17fc:	80 ea       	ldi	r24, 0xA0	; 160
    17fe:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1802:	c8 01       	movw	r24, r16
    1804:	69 81       	ldd	r22, Y+1	; 0x01
    1806:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    180a:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    180c:	2c 9a       	sbi	0x05, 4	; 5
}
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	08 95       	ret

0000181a <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    181a:	ef 92       	push	r14
    181c:	ff 92       	push	r15
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	0f 92       	push	r0
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	18 2f       	mov	r17, r24
    182e:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    1830:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1832:	81 ee       	ldi	r24, 0xE1	; 225
    1834:	99 83       	std	Y+1, r25	; 0x01
    1836:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    183a:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    183c:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    183e:	88 ea       	ldi	r24, 0xA8	; 168
    1840:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1844:	99 81       	ldd	r25, Y+1	; 0x01
    1846:	00 23       	and	r16, r16
    1848:	61 f0       	breq	.+24     	; 0x1862 <writeAckPayload+0x48>
    184a:	61 2f       	mov	r22, r17
    184c:	79 2f       	mov	r23, r25
    184e:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1850:	f7 01       	movw	r30, r14
    1852:	81 91       	ld	r24, Z+
    1854:	7f 01       	movw	r14, r30
    1856:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    185a:	8e 2d       	mov	r24, r14
    185c:	81 1b       	sub	r24, r17
    185e:	80 17       	cp	r24, r16
    1860:	b8 f3       	brcs	.-18     	; 0x1850 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1862:	28 9a       	sbi	0x05, 0	; 5


}
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	08 95       	ret

00001874 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    1874:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1876:	81 ee       	ldi	r24, 0xE1	; 225
    1878:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    187c:	28 9a       	sbi	0x05, 0	; 5

}
    187e:	08 95       	ret

00001880 <handleRFCommands>:

void handleRFCommands() {
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1886:	80 91 7a 04 	lds	r24, 0x047A
    188a:	88 23       	and	r24, r24
    188c:	21 f0       	breq	.+8      	; 0x1896 <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	1f 91       	pop	r17
    1894:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1896:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    189e:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
    18a0:	86 ff       	sbrs	r24, 6
    18a2:	f5 cf       	rjmp	.-22     	; 0x188e <handleRFCommands+0xe>

		rfFlags |= 0x02;
    18a4:	80 91 13 03 	lds	r24, 0x0313
    18a8:	82 60       	ori	r24, 0x02	; 2
    18aa:	80 93 13 03 	sts	0x0313, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18ae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18b0:	87 e2       	ldi	r24, 0x27	; 39
    18b2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18b6:	80 e7       	ldi	r24, 0x70	; 112
    18b8:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    18bc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    18be:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    18c0:	81 e6       	ldi	r24, 0x61	; 97
    18c2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    18c6:	88 e9       	ldi	r24, 0x98	; 152
    18c8:	94 e0       	ldi	r25, 0x04	; 4
    18ca:	bc 01       	movw	r22, r24
    18cc:	4d e0       	ldi	r20, 0x0D	; 13
    18ce:	0e 94 56 0a 	call	0x14ac	; 0x14ac <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    18d2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18d4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18d6:	87 e2       	ldi	r24, 0x27	; 39
    18d8:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18dc:	80 e4       	ldi	r24, 0x40	; 64
    18de:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    18e2:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    18e4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    18e6:	82 ee       	ldi	r24, 0xE2	; 226
    18e8:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    18ec:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    18ee:	60 91 98 04 	lds	r22, 0x0498
    18f2:	66 23       	and	r22, r22
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <handleRFCommands+0x78>
    18f6:	95 c1       	rjmp	.+810    	; 0x1c22 <handleRFCommands+0x3a2>
    18f8:	50 91 9c 04 	lds	r21, 0x049C
    18fc:	40 91 9d 04 	lds	r20, 0x049D
    1900:	e0 91 99 04 	lds	r30, 0x0499
    1904:	70 91 9a 04 	lds	r23, 0x049A

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1908:	25 2f       	mov	r18, r21
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	2f 77       	andi	r18, 0x7F	; 127
    190e:	30 70       	andi	r19, 0x00	; 0
    1910:	30 93 10 03 	sts	0x0310, r19
    1914:	20 93 0f 03 	sts	0x030F, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1918:	84 2f       	mov	r24, r20
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	8f 77       	andi	r24, 0x7F	; 127
    191e:	90 70       	andi	r25, 0x00	; 0
    1920:	90 93 0e 03 	sts	0x030E, r25
    1924:	80 93 0d 03 	sts	0x030D, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
    1928:	57 fd       	sbrc	r21, 7
    192a:	a9 c2       	rjmp	.+1362   	; 0x1e7e <handleRFCommands+0x5fe>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
    192c:	22 0f       	add	r18, r18
    192e:	33 1f       	adc	r19, r19
    1930:	22 0f       	add	r18, r18
    1932:	33 1f       	adc	r19, r19
    1934:	30 95       	com	r19
    1936:	21 95       	neg	r18
    1938:	3f 4f       	sbci	r19, 0xFF	; 255
    193a:	30 93 fa 02 	sts	0x02FA, r19
    193e:	20 93 f9 02 	sts	0x02F9, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    1942:	47 fd       	sbrc	r20, 7
    1944:	a6 c2       	rjmp	.+1356   	; 0x1e92 <handleRFCommands+0x612>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	90 95       	com	r25
    1950:	81 95       	neg	r24
    1952:	9f 4f       	sbci	r25, 0xFF	; 255
    1954:	90 93 fc 02 	sts	0x02FC, r25
    1958:	80 93 fb 02 	sts	0x02FB, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    195c:	42 e0       	ldi	r20, 0x02	; 2
    195e:	21 30       	cpi	r18, 0x01	; 1
    1960:	34 07       	cpc	r19, r20
    1962:	44 f0       	brlt	.+16     	; 0x1974 <handleRFCommands+0xf4>
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	52 e0       	ldi	r21, 0x02	; 2
    1968:	50 93 fa 02 	sts	0x02FA, r21
    196c:	40 93 f9 02 	sts	0x02F9, r20
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1974:	42 e0       	ldi	r20, 0x02	; 2
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	94 07       	cpc	r25, r20
    197a:	34 f0       	brlt	.+12     	; 0x1988 <handleRFCommands+0x108>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	92 e0       	ldi	r25, 0x02	; 2
    1980:	90 93 fc 02 	sts	0x02FC, r25
    1984:	80 93 fb 02 	sts	0x02FB, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1988:	4e ef       	ldi	r20, 0xFE	; 254
    198a:	20 30       	cpi	r18, 0x00	; 0
    198c:	34 07       	cpc	r19, r20
    198e:	34 f4       	brge	.+12     	; 0x199c <handleRFCommands+0x11c>
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	5e ef       	ldi	r21, 0xFE	; 254
    1994:	50 93 fa 02 	sts	0x02FA, r21
    1998:	40 93 f9 02 	sts	0x02F9, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    199c:	2e ef       	ldi	r18, 0xFE	; 254
    199e:	80 30       	cpi	r24, 0x00	; 0
    19a0:	92 07       	cpc	r25, r18
    19a2:	34 f4       	brge	.+12     	; 0x19b0 <handleRFCommands+0x130>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	9e ef       	ldi	r25, 0xFE	; 254
    19a8:	90 93 fc 02 	sts	0x02FC, r25
    19ac:	80 93 fb 02 	sts	0x02FB, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    19b0:	26 2f       	mov	r18, r22
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	30 93 91 04 	sts	0x0491, r19
    19b8:	20 93 90 04 	sts	0x0490, r18
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	f0 93 93 04 	sts	0x0493, r31
    19c2:	e0 93 92 04 	sts	0x0492, r30
    19c6:	c7 2f       	mov	r28, r23
    19c8:	d0 e0       	ldi	r29, 0x00	; 0
    19ca:	d0 93 95 04 	sts	0x0495, r29
    19ce:	c0 93 94 04 	sts	0x0494, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    19d2:	92 2f       	mov	r25, r18
    19d4:	88 27       	eor	r24, r24
    19d6:	82 1b       	sub	r24, r18
    19d8:	93 0b       	sbc	r25, r19
    19da:	24 e6       	ldi	r18, 0x64	; 100
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	b9 01       	movw	r22, r18
    19e0:	0e 94 42 32 	call	0x6484	; 0x6484 <__udivmodhi4>
    19e4:	16 2f       	mov	r17, r22
    19e6:	10 95       	com	r17
    19e8:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    19ec:	5e 2f       	mov	r21, r30
    19ee:	44 27       	eor	r20, r20
    19f0:	4e 1b       	sub	r20, r30
    19f2:	5f 0b       	sbc	r21, r31
    19f4:	ca 01       	movw	r24, r20
    19f6:	b9 01       	movw	r22, r18
    19f8:	0e 94 42 32 	call	0x6484	; 0x6484 <__udivmodhi4>
    19fc:	60 95       	com	r22
    19fe:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1a02:	5c 2f       	mov	r21, r28
    1a04:	44 27       	eor	r20, r20
    1a06:	4c 1b       	sub	r20, r28
    1a08:	5d 0b       	sbc	r21, r29
    1a0a:	ca 01       	movw	r24, r20
    1a0c:	b9 01       	movw	r22, r18
    1a0e:	0e 94 42 32 	call	0x6484	; 0x6484 <__udivmodhi4>
    1a12:	60 95       	com	r22
    1a14:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    1a18:	81 2f       	mov	r24, r17
    1a1a:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <updateRedLed>
		updateGreenLed(pwm_green);
    1a1e:	80 91 0d 02 	lds	r24, 0x020D
    1a22:	0e 94 49 27 	call	0x4e92	; 0x4e92 <updateGreenLed>
		updateBlueLed(pwm_blue);
    1a26:	80 91 0e 02 	lds	r24, 0x020E
    1a2a:	0e 94 5d 27 	call	0x4eba	; 0x4eba <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    1a2e:	80 91 9b 04 	lds	r24, 0x049B
    1a32:	80 ff       	sbrs	r24, 0
    1a34:	02 c1       	rjmp	.+516    	; 0x1c3a <handleRFCommands+0x3ba>
			LED_IR1_LOW;
    1a36:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1a38:	81 ff       	sbrs	r24, 1
    1a3a:	02 c1       	rjmp	.+516    	; 0x1c40 <handleRFCommands+0x3c0>
			LED_IR2_LOW;
    1a3c:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1a3e:	98 2f       	mov	r25, r24
    1a40:	82 ff       	sbrs	r24, 2
    1a42:	02 c1       	rjmp	.+516    	; 0x1c48 <handleRFCommands+0x3c8>
			irEnabled = 1;
    1a44:	21 e0       	ldi	r18, 0x01	; 1
    1a46:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1a4a:	84 fd       	sbrc	r24, 4
    1a4c:	01 c1       	rjmp	.+514    	; 0x1c50 <handleRFCommands+0x3d0>
			calibrateSensors();
			resetOdometry();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1a4e:	86 ff       	sbrs	r24, 6
    1a50:	08 c1       	rjmp	.+528    	; 0x1c62 <handleRFCommands+0x3e2>
			obstacleAvoidanceEnabled = 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 93 62 04 	sts	0x0462, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1a58:	97 fd       	sbrc	r25, 7
    1a5a:	07 c1       	rjmp	.+526    	; 0x1c6a <handleRFCommands+0x3ea>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    1a5c:	10 92 63 04 	sts	0x0463, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1a60:	80 91 9e 04 	lds	r24, 0x049E
    1a64:	80 ff       	sbrs	r24, 0
    1a66:	08 c1       	rjmp	.+528    	; 0x1c78 <handleRFCommands+0x3f8>
				GREEN_LED0_ON;
    1a68:	80 91 0b 01 	lds	r24, 0x010B
    1a6c:	8e 7f       	andi	r24, 0xFE	; 254
    1a6e:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1a72:	80 91 9e 04 	lds	r24, 0x049E
    1a76:	81 ff       	sbrs	r24, 1
    1a78:	08 c1       	rjmp	.+528    	; 0x1c8a <handleRFCommands+0x40a>
				GREEN_LED1_ON;
    1a7a:	80 91 0b 01 	lds	r24, 0x010B
    1a7e:	8d 7f       	andi	r24, 0xFD	; 253
    1a80:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1a84:	80 91 9e 04 	lds	r24, 0x049E
    1a88:	82 ff       	sbrs	r24, 2
    1a8a:	08 c1       	rjmp	.+528    	; 0x1c9c <handleRFCommands+0x41c>
				GREEN_LED2_ON;
    1a8c:	80 91 0b 01 	lds	r24, 0x010B
    1a90:	8b 7f       	andi	r24, 0xFB	; 251
    1a92:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1a96:	80 91 9e 04 	lds	r24, 0x049E
    1a9a:	83 ff       	sbrs	r24, 3
    1a9c:	08 c1       	rjmp	.+528    	; 0x1cae <handleRFCommands+0x42e>
				GREEN_LED3_ON;
    1a9e:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    1aa0:	80 91 9e 04 	lds	r24, 0x049E
    1aa4:	84 ff       	sbrs	r24, 4
    1aa6:	08 c1       	rjmp	.+528    	; 0x1cb8 <handleRFCommands+0x438>
				GREEN_LED4_ON;
    1aa8:	80 91 0b 01 	lds	r24, 0x010B
    1aac:	8f 7e       	andi	r24, 0xEF	; 239
    1aae:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    1ab2:	80 91 9e 04 	lds	r24, 0x049E
    1ab6:	85 ff       	sbrs	r24, 5
    1ab8:	08 c1       	rjmp	.+528    	; 0x1cca <handleRFCommands+0x44a>
				GREEN_LED5_ON;
    1aba:	80 91 0b 01 	lds	r24, 0x010B
    1abe:	8f 7d       	andi	r24, 0xDF	; 223
    1ac0:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    1ac4:	80 91 9e 04 	lds	r24, 0x049E
    1ac8:	86 ff       	sbrs	r24, 6
    1aca:	08 c1       	rjmp	.+528    	; 0x1cdc <handleRFCommands+0x45c>
				GREEN_LED6_ON;
    1acc:	80 91 0b 01 	lds	r24, 0x010B
    1ad0:	8f 7b       	andi	r24, 0xBF	; 191
    1ad2:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    1ad6:	80 91 9e 04 	lds	r24, 0x049E
    1ada:	87 fd       	sbrc	r24, 7
    1adc:	08 c1       	rjmp	.+528    	; 0x1cee <handleRFCommands+0x46e>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    1ade:	80 91 0b 01 	lds	r24, 0x010B
    1ae2:	80 68       	ori	r24, 0x80	; 128
    1ae4:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1ae8:	80 91 0b 02 	lds	r24, 0x020B
    1aec:	80 93 80 04 	sts	0x0480, r24

		switch(packetId) {
    1af0:	85 30       	cpi	r24, 0x05	; 5
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <handleRFCommands+0x276>
    1af4:	08 c1       	rjmp	.+528    	; 0x1d06 <handleRFCommands+0x486>
    1af6:	86 30       	cpi	r24, 0x06	; 6
    1af8:	08 f0       	brcs	.+2      	; 0x1afc <handleRFCommands+0x27c>
    1afa:	61 c1       	rjmp	.+706    	; 0x1dbe <handleRFCommands+0x53e>
    1afc:	83 30       	cpi	r24, 0x03	; 3
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <handleRFCommands+0x282>
    1b00:	38 c2       	rjmp	.+1136   	; 0x1f72 <handleRFCommands+0x6f2>
    1b02:	84 30       	cpi	r24, 0x04	; 4
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <handleRFCommands+0x288>
    1b06:	3f c0       	rjmp	.+126    	; 0x1b86 <handleRFCommands+0x306>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    1b08:	90 91 61 02 	lds	r25, 0x0261
    1b0c:	80 91 62 02 	lds	r24, 0x0262
    1b10:	90 93 81 04 	sts	0x0481, r25
				ackPayload[2] = proximityResult[4]>>8;
    1b14:	80 93 82 04 	sts	0x0482, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    1b18:	90 91 69 02 	lds	r25, 0x0269
    1b1c:	80 91 6a 02 	lds	r24, 0x026A
    1b20:	90 93 83 04 	sts	0x0483, r25
				ackPayload[4] = proximityResult[8]>>8;
    1b24:	80 93 84 04 	sts	0x0484, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    1b28:	90 91 6b 02 	lds	r25, 0x026B
    1b2c:	80 91 6c 02 	lds	r24, 0x026C
    1b30:	90 93 85 04 	sts	0x0485, r25
				ackPayload[6] = proximityResult[9]>>8;
    1b34:	80 93 86 04 	sts	0x0486, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    1b38:	90 91 6d 02 	lds	r25, 0x026D
    1b3c:	80 91 6e 02 	lds	r24, 0x026E
    1b40:	90 93 87 04 	sts	0x0487, r25
				ackPayload[8] = proximityResult[10]>>8;
    1b44:	80 93 88 04 	sts	0x0488, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    1b48:	90 91 6f 02 	lds	r25, 0x026F
    1b4c:	80 91 70 02 	lds	r24, 0x0270
    1b50:	90 93 89 04 	sts	0x0489, r25
				ackPayload[10] = proximityResult[11]>>8;
    1b54:	80 93 8a 04 	sts	0x048A, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    1b58:	90 91 26 04 	lds	r25, 0x0426
    1b5c:	80 91 27 04 	lds	r24, 0x0427
    1b60:	90 93 8b 04 	sts	0x048B, r25
				ackPayload[12] = accX>>8;
    1b64:	80 93 8c 04 	sts	0x048C, r24
				ackPayload[13] = accY&0xFF;
    1b68:	90 91 28 04 	lds	r25, 0x0428
    1b6c:	80 91 29 04 	lds	r24, 0x0429
    1b70:	90 93 8d 04 	sts	0x048D, r25
				ackPayload[14] = accY>>8;
    1b74:	80 93 8e 04 	sts	0x048E, r24
				ackPayload[15] = irCommand;
    1b78:	80 91 21 04 	lds	r24, 0x0421
    1b7c:	80 93 8f 04 	sts	0x048F, r24
				packetId = 5;
    1b80:	85 e0       	ldi	r24, 0x05	; 5
    1b82:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
    1b86:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1b88:	81 ee       	ldi	r24, 0xE1	; 225
    1b8a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b8e:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1b90:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1b92:	88 ea       	ldi	r24, 0xA8	; 168
    1b94:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    1b98:	80 91 80 04 	lds	r24, 0x0480
    1b9c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1ba0:	80 91 81 04 	lds	r24, 0x0481
    1ba4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1ba8:	80 91 82 04 	lds	r24, 0x0482
    1bac:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1bb0:	80 91 83 04 	lds	r24, 0x0483
    1bb4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1bb8:	80 91 84 04 	lds	r24, 0x0484
    1bbc:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1bc0:	80 91 85 04 	lds	r24, 0x0485
    1bc4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1bc8:	80 91 86 04 	lds	r24, 0x0486
    1bcc:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1bd0:	80 91 87 04 	lds	r24, 0x0487
    1bd4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1bd8:	80 91 88 04 	lds	r24, 0x0488
    1bdc:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1be0:	80 91 89 04 	lds	r24, 0x0489
    1be4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1be8:	80 91 8a 04 	lds	r24, 0x048A
    1bec:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1bf0:	80 91 8b 04 	lds	r24, 0x048B
    1bf4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1bf8:	80 91 8c 04 	lds	r24, 0x048C
    1bfc:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1c00:	80 91 8d 04 	lds	r24, 0x048D
    1c04:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1c08:	80 91 8e 04 	lds	r24, 0x048E
    1c0c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
    1c10:	80 91 8f 04 	lds	r24, 0x048F
    1c14:	0e 94 9a 0a 	call	0x1534	; 0x1534 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    1c18:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	1f 91       	pop	r17
    1c20:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1c22:	e0 91 99 04 	lds	r30, 0x0499
    1c26:	ee 23       	and	r30, r30
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <handleRFCommands+0x3ac>
    1c2a:	3c c1       	rjmp	.+632    	; 0x1ea4 <handleRFCommands+0x624>
    1c2c:	50 91 9c 04 	lds	r21, 0x049C
    1c30:	40 91 9d 04 	lds	r20, 0x049D
    1c34:	70 91 9a 04 	lds	r23, 0x049A
    1c38:	67 ce       	rjmp	.-818    	; 0x1908 <handleRFCommands+0x88>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    1c3a:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1c3c:	81 fd       	sbrc	r24, 1
    1c3e:	fe ce       	rjmp	.-516    	; 0x1a3c <handleRFCommands+0x1bc>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    1c40:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1c42:	98 2f       	mov	r25, r24
    1c44:	82 fd       	sbrc	r24, 2
    1c46:	fe ce       	rjmp	.-516    	; 0x1a44 <handleRFCommands+0x1c4>
			irEnabled = 1;
		} else {
			irEnabled = 0;
    1c48:	10 92 12 02 	sts	0x0212, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1c4c:	84 ff       	sbrs	r24, 4
    1c4e:	ff ce       	rjmp	.-514    	; 0x1a4e <handleRFCommands+0x1ce>
			calibrateSensors();
    1c50:	0e 94 2d 2a 	call	0x545a	; 0x545a <calibrateSensors>
			resetOdometry();
    1c54:	0e 94 33 1b 	call	0x3666	; 0x3666 <resetOdometry>
    1c58:	90 91 9b 04 	lds	r25, 0x049B
    1c5c:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1c5e:	86 fd       	sbrc	r24, 6
    1c60:	f8 ce       	rjmp	.-528    	; 0x1a52 <handleRFCommands+0x1d2>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    1c62:	10 92 62 04 	sts	0x0462, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1c66:	97 ff       	sbrs	r25, 7
    1c68:	f9 ce       	rjmp	.-526    	; 0x1a5c <handleRFCommands+0x1dc>
			cliffAvoidanceEnabled = 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	80 93 63 04 	sts	0x0463, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1c70:	80 91 9e 04 	lds	r24, 0x049E
    1c74:	80 fd       	sbrc	r24, 0
    1c76:	f8 ce       	rjmp	.-528    	; 0x1a68 <handleRFCommands+0x1e8>
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    1c78:	80 91 0b 01 	lds	r24, 0x010B
    1c7c:	81 60       	ori	r24, 0x01	; 1
    1c7e:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1c82:	80 91 9e 04 	lds	r24, 0x049E
    1c86:	81 fd       	sbrc	r24, 1
    1c88:	f8 ce       	rjmp	.-528    	; 0x1a7a <handleRFCommands+0x1fa>
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    1c8a:	80 91 0b 01 	lds	r24, 0x010B
    1c8e:	82 60       	ori	r24, 0x02	; 2
    1c90:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1c94:	80 91 9e 04 	lds	r24, 0x049E
    1c98:	82 fd       	sbrc	r24, 2
    1c9a:	f8 ce       	rjmp	.-528    	; 0x1a8c <handleRFCommands+0x20c>
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    1c9c:	80 91 0b 01 	lds	r24, 0x010B
    1ca0:	84 60       	ori	r24, 0x04	; 4
    1ca2:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1ca6:	80 91 9e 04 	lds	r24, 0x049E
    1caa:	83 fd       	sbrc	r24, 3
    1cac:	f8 ce       	rjmp	.-528    	; 0x1a9e <handleRFCommands+0x21e>
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    1cae:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
    1cb0:	80 91 9e 04 	lds	r24, 0x049E
    1cb4:	84 fd       	sbrc	r24, 4
    1cb6:	f8 ce       	rjmp	.-528    	; 0x1aa8 <handleRFCommands+0x228>
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    1cb8:	80 91 0b 01 	lds	r24, 0x010B
    1cbc:	80 61       	ori	r24, 0x10	; 16
    1cbe:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
    1cc2:	80 91 9e 04 	lds	r24, 0x049E
    1cc6:	85 fd       	sbrc	r24, 5
    1cc8:	f8 ce       	rjmp	.-528    	; 0x1aba <handleRFCommands+0x23a>
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    1cca:	80 91 0b 01 	lds	r24, 0x010B
    1cce:	80 62       	ori	r24, 0x20	; 32
    1cd0:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
    1cd4:	80 91 9e 04 	lds	r24, 0x049E
    1cd8:	86 fd       	sbrc	r24, 6
    1cda:	f8 ce       	rjmp	.-528    	; 0x1acc <handleRFCommands+0x24c>
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    1cdc:	80 91 0b 01 	lds	r24, 0x010B
    1ce0:	80 64       	ori	r24, 0x40	; 64
    1ce2:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
    1ce6:	80 91 9e 04 	lds	r24, 0x049E
    1cea:	87 ff       	sbrs	r24, 7
    1cec:	f8 ce       	rjmp	.-528    	; 0x1ade <handleRFCommands+0x25e>
				GREEN_LED7_ON;
    1cee:	80 91 0b 01 	lds	r24, 0x010B
    1cf2:	8f 77       	andi	r24, 0x7F	; 127
    1cf4:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1cf8:	80 91 0b 02 	lds	r24, 0x020B
    1cfc:	80 93 80 04 	sts	0x0480, r24

		switch(packetId) {
    1d00:	85 30       	cpi	r24, 0x05	; 5
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <handleRFCommands+0x486>
    1d04:	f8 ce       	rjmp	.-528    	; 0x1af6 <handleRFCommands+0x276>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    1d06:	80 91 29 02 	lds	r24, 0x0229
    1d0a:	90 91 2a 02 	lds	r25, 0x022A
    1d0e:	80 93 81 04 	sts	0x0481, r24
				ackPayload[2] = proximityValue[0]>>8;
    1d12:	80 91 29 02 	lds	r24, 0x0229
    1d16:	90 91 2a 02 	lds	r25, 0x022A
    1d1a:	90 93 82 04 	sts	0x0482, r25
				ackPayload[3] = proximityValue[2]&0xFF;
    1d1e:	80 91 2d 02 	lds	r24, 0x022D
    1d22:	90 91 2e 02 	lds	r25, 0x022E
    1d26:	80 93 83 04 	sts	0x0483, r24
				ackPayload[4] = proximityValue[2]>>8;
    1d2a:	80 91 2d 02 	lds	r24, 0x022D
    1d2e:	90 91 2e 02 	lds	r25, 0x022E
    1d32:	90 93 84 04 	sts	0x0484, r25
				ackPayload[5] = proximityValue[4]&0xFF;
    1d36:	80 91 31 02 	lds	r24, 0x0231
    1d3a:	90 91 32 02 	lds	r25, 0x0232
    1d3e:	80 93 85 04 	sts	0x0485, r24
				ackPayload[6] = proximityValue[4]>>8;
    1d42:	80 91 31 02 	lds	r24, 0x0231
    1d46:	90 91 32 02 	lds	r25, 0x0232
    1d4a:	90 93 86 04 	sts	0x0486, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    1d4e:	80 91 35 02 	lds	r24, 0x0235
    1d52:	90 91 36 02 	lds	r25, 0x0236
    1d56:	80 93 87 04 	sts	0x0487, r24
				ackPayload[8] = proximityValue[6]>>8;
    1d5a:	80 91 35 02 	lds	r24, 0x0235
    1d5e:	90 91 36 02 	lds	r25, 0x0236
    1d62:	90 93 88 04 	sts	0x0488, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    1d66:	80 91 3d 02 	lds	r24, 0x023D
    1d6a:	90 91 3e 02 	lds	r25, 0x023E
    1d6e:	80 93 89 04 	sts	0x0489, r24
				ackPayload[10] = proximityValue[10]>>8;
    1d72:	80 91 3d 02 	lds	r24, 0x023D
    1d76:	90 91 3e 02 	lds	r25, 0x023E
    1d7a:	90 93 8a 04 	sts	0x048A, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    1d7e:	80 91 41 02 	lds	r24, 0x0241
    1d82:	90 91 42 02 	lds	r25, 0x0242
    1d86:	80 93 8b 04 	sts	0x048B, r24
				ackPayload[12] = proximityValue[12]>>8;
    1d8a:	80 91 41 02 	lds	r24, 0x0241
    1d8e:	90 91 42 02 	lds	r25, 0x0242
    1d92:	90 93 8c 04 	sts	0x048C, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    1d96:	80 91 45 02 	lds	r24, 0x0245
    1d9a:	90 91 46 02 	lds	r25, 0x0246
    1d9e:	80 93 8d 04 	sts	0x048D, r24
				ackPayload[14] = proximityValue[14]>>8;
    1da2:	80 91 45 02 	lds	r24, 0x0245
    1da6:	90 91 46 02 	lds	r25, 0x0246
    1daa:	90 93 8e 04 	sts	0x048E, r25
				ackPayload[15] = currentSelector;
    1dae:	80 91 49 04 	lds	r24, 0x0449
    1db2:	80 93 8f 04 	sts	0x048F, r24
				packetId = 6;
    1db6:	86 e0       	ldi	r24, 0x06	; 6
    1db8:	80 93 0b 02 	sts	0x020B, r24
				break;
    1dbc:	e4 ce       	rjmp	.-568    	; 0x1b86 <handleRFCommands+0x306>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    1dbe:	86 30       	cpi	r24, 0x06	; 6
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <handleRFCommands+0x544>
    1dc2:	85 c0       	rjmp	.+266    	; 0x1ece <handleRFCommands+0x64e>
    1dc4:	87 30       	cpi	r24, 0x07	; 7
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <handleRFCommands+0x54a>
    1dc8:	de ce       	rjmp	.-580    	; 0x1b86 <handleRFCommands+0x306>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    1dca:	60 91 d5 02 	lds	r22, 0x02D5
    1dce:	70 91 d6 02 	lds	r23, 0x02D6
    1dd2:	80 91 d7 02 	lds	r24, 0x02D7
    1dd6:	90 91 d8 02 	lds	r25, 0x02D8
    1dda:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__fixsfsi>
    1dde:	60 93 81 04 	sts	0x0481, r22
				ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    1de2:	70 93 82 04 	sts	0x0482, r23
				ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    1de6:	80 93 83 04 	sts	0x0483, r24
				ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    1dea:	90 93 84 04 	sts	0x0484, r25
				ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    1dee:	60 91 d1 02 	lds	r22, 0x02D1
    1df2:	70 91 d2 02 	lds	r23, 0x02D2
    1df6:	80 91 d3 02 	lds	r24, 0x02D3
    1dfa:	90 91 d4 02 	lds	r25, 0x02D4
    1dfe:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__fixsfsi>
    1e02:	60 93 85 04 	sts	0x0485, r22
				ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    1e06:	70 93 86 04 	sts	0x0486, r23
				ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    1e0a:	80 93 87 04 	sts	0x0487, r24
				ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    1e0e:	90 93 88 04 	sts	0x0488, r25
				ackPayload[9] = ((unsigned int)(theta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    1e12:	60 91 65 04 	lds	r22, 0x0465
    1e16:	70 91 66 04 	lds	r23, 0x0466
    1e1a:	80 91 67 04 	lds	r24, 0x0467
    1e1e:	90 91 68 04 	lds	r25, 0x0468
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e4       	ldi	r19, 0x40	; 64
    1e26:	4f e0       	ldi	r20, 0x0F	; 15
    1e28:	54 e4       	ldi	r21, 0x44	; 68
    1e2a:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    1e2e:	0e 94 55 30 	call	0x60aa	; 0x60aa <__fixunssfsi>
    1e32:	60 93 89 04 	sts	0x0489, r22
				ackPayload[10] = ((unsigned int)(theta*573.0))>>8;
    1e36:	70 93 8a 04 	sts	0x048A, r23
				ackPayload[11] = ((unsigned int)xPos)&0xFF;
    1e3a:	60 91 69 04 	lds	r22, 0x0469
    1e3e:	70 91 6a 04 	lds	r23, 0x046A
    1e42:	80 91 6b 04 	lds	r24, 0x046B
    1e46:	90 91 6c 04 	lds	r25, 0x046C
    1e4a:	0e 94 55 30 	call	0x60aa	; 0x60aa <__fixunssfsi>
    1e4e:	60 93 8b 04 	sts	0x048B, r22
				ackPayload[12] = ((unsigned int)xPos)>>8;
    1e52:	70 93 8c 04 	sts	0x048C, r23
				ackPayload[13] = ((unsigned int)yPos)&0xFF;
    1e56:	60 91 6d 04 	lds	r22, 0x046D
    1e5a:	70 91 6e 04 	lds	r23, 0x046E
    1e5e:	80 91 6f 04 	lds	r24, 0x046F
    1e62:	90 91 70 04 	lds	r25, 0x0470
    1e66:	0e 94 55 30 	call	0x60aa	; 0x60aa <__fixunssfsi>
    1e6a:	60 93 8d 04 	sts	0x048D, r22
				ackPayload[14] = ((unsigned int)yPos)>>8;
    1e6e:	70 93 8e 04 	sts	0x048E, r23
				ackPayload[15] = 0;
    1e72:	10 92 8f 04 	sts	0x048F, r1
				packetId = 3;
    1e76:	83 e0       	ldi	r24, 0x03	; 3
    1e78:	80 93 0b 02 	sts	0x020B, r24
				break;
    1e7c:	84 ce       	rjmp	.-760    	; 0x1b86 <handleRFCommands+0x306>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    1e7e:	22 0f       	add	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	22 0f       	add	r18, r18
    1e84:	33 1f       	adc	r19, r19
    1e86:	30 93 fa 02 	sts	0x02FA, r19
    1e8a:	20 93 f9 02 	sts	0x02F9, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    1e8e:	47 ff       	sbrs	r20, 7
    1e90:	5a cd       	rjmp	.-1356   	; 0x1946 <handleRFCommands+0xc6>
			pwm_left_desired = speedl<<2;
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	90 93 fc 02 	sts	0x02FC, r25
    1e9e:	80 93 fb 02 	sts	0x02FB, r24
    1ea2:	5c cd       	rjmp	.-1352   	; 0x195c <handleRFCommands+0xdc>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1ea4:	70 91 9a 04 	lds	r23, 0x049A
    1ea8:	77 23       	and	r23, r23
    1eaa:	61 f4       	brne	.+24     	; 0x1ec4 <handleRFCommands+0x644>
    1eac:	80 91 9b 04 	lds	r24, 0x049B
    1eb0:	88 30       	cpi	r24, 0x08	; 8
    1eb2:	41 f4       	brne	.+16     	; 0x1ec4 <handleRFCommands+0x644>
    1eb4:	50 91 9c 04 	lds	r21, 0x049C
    1eb8:	55 23       	and	r21, r21
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <handleRFCommands+0x63e>
    1ebc:	c0 c0       	rjmp	.+384    	; 0x203e <handleRFCommands+0x7be>
    1ebe:	40 91 9d 04 	lds	r20, 0x049D
    1ec2:	22 cd       	rjmp	.-1468   	; 0x1908 <handleRFCommands+0x88>
    1ec4:	50 91 9c 04 	lds	r21, 0x049C
    1ec8:	40 91 9d 04 	lds	r20, 0x049D
    1ecc:	1d cd       	rjmp	.-1478   	; 0x1908 <handleRFCommands+0x88>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    1ece:	80 91 39 02 	lds	r24, 0x0239
    1ed2:	90 91 3a 02 	lds	r25, 0x023A
    1ed6:	80 93 81 04 	sts	0x0481, r24
				ackPayload[2] = proximityValue[8]>>8;
    1eda:	80 91 39 02 	lds	r24, 0x0239
    1ede:	90 91 3a 02 	lds	r25, 0x023A
    1ee2:	90 93 82 04 	sts	0x0482, r25
				ackPayload[3] = proximityValue[16]&0xFF;
    1ee6:	80 91 49 02 	lds	r24, 0x0249
    1eea:	90 91 4a 02 	lds	r25, 0x024A
    1eee:	80 93 83 04 	sts	0x0483, r24
				ackPayload[4] = proximityValue[16]>>8;
    1ef2:	80 91 49 02 	lds	r24, 0x0249
    1ef6:	90 91 4a 02 	lds	r25, 0x024A
    1efa:	90 93 84 04 	sts	0x0484, r25
				ackPayload[5] = proximityValue[18]&0xFF;
    1efe:	80 91 4d 02 	lds	r24, 0x024D
    1f02:	90 91 4e 02 	lds	r25, 0x024E
    1f06:	80 93 85 04 	sts	0x0485, r24
				ackPayload[6] = proximityValue[18]>>8;
    1f0a:	80 91 4d 02 	lds	r24, 0x024D
    1f0e:	90 91 4e 02 	lds	r25, 0x024E
    1f12:	90 93 86 04 	sts	0x0486, r25
				ackPayload[7] = proximityValue[20]&0xFF;
    1f16:	80 91 51 02 	lds	r24, 0x0251
    1f1a:	90 91 52 02 	lds	r25, 0x0252
    1f1e:	80 93 87 04 	sts	0x0487, r24
				ackPayload[8] = proximityValue[20]>>8;
    1f22:	80 91 51 02 	lds	r24, 0x0251
    1f26:	90 91 52 02 	lds	r25, 0x0252
    1f2a:	90 93 88 04 	sts	0x0488, r25
				ackPayload[9] = proximityValue[22]&0xFF;
    1f2e:	80 91 55 02 	lds	r24, 0x0255
    1f32:	90 91 56 02 	lds	r25, 0x0256
    1f36:	80 93 89 04 	sts	0x0489, r24
				ackPayload[10] = proximityValue[22]>>8;
    1f3a:	80 91 55 02 	lds	r24, 0x0255
    1f3e:	90 91 56 02 	lds	r25, 0x0256
    1f42:	90 93 8a 04 	sts	0x048A, r25
				ackPayload[11] = accZ&0xFF;
    1f46:	90 91 2a 04 	lds	r25, 0x042A
    1f4a:	80 91 2b 04 	lds	r24, 0x042B
    1f4e:	90 93 8b 04 	sts	0x048B, r25
				ackPayload[12] = accZ>>8;
    1f52:	80 93 8c 04 	sts	0x048C, r24
				ackPayload[13] = batteryLevel&0xFF;
    1f56:	90 91 bd 02 	lds	r25, 0x02BD
    1f5a:	80 91 be 02 	lds	r24, 0x02BE
    1f5e:	90 93 8d 04 	sts	0x048D, r25
				ackPayload[14] = batteryLevel>>8;
    1f62:	80 93 8e 04 	sts	0x048E, r24
				ackPayload[15] = 0;
    1f66:	10 92 8f 04 	sts	0x048F, r1
				packetId = 7;
    1f6a:	87 e0       	ldi	r24, 0x07	; 7
    1f6c:	80 93 0b 02 	sts	0x020B, r24
				break;
    1f70:	0a ce       	rjmp	.-1004   	; 0x1b86 <handleRFCommands+0x306>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
    1f72:	90 91 59 02 	lds	r25, 0x0259
    1f76:	80 91 5a 02 	lds	r24, 0x025A
    1f7a:	90 93 81 04 	sts	0x0481, r25
				ackPayload[2] = proximityResult[0]>>8;
    1f7e:	80 93 82 04 	sts	0x0482, r24
				ackPayload[3] = proximityResult[1]&0xFF;
    1f82:	90 91 5b 02 	lds	r25, 0x025B
    1f86:	80 91 5c 02 	lds	r24, 0x025C
    1f8a:	90 93 83 04 	sts	0x0483, r25
				ackPayload[4] = proximityResult[1]>>8;
    1f8e:	80 93 84 04 	sts	0x0484, r24
				ackPayload[5] = proximityResult[2]&0xFF;
    1f92:	90 91 5d 02 	lds	r25, 0x025D
    1f96:	80 91 5e 02 	lds	r24, 0x025E
    1f9a:	90 93 85 04 	sts	0x0485, r25
				ackPayload[6] = proximityResult[2]>>8;
    1f9e:	80 93 86 04 	sts	0x0486, r24
				ackPayload[7] = proximityResult[3]&0xFF;
    1fa2:	90 91 5f 02 	lds	r25, 0x025F
    1fa6:	80 91 60 02 	lds	r24, 0x0260
    1faa:	90 93 87 04 	sts	0x0487, r25
				ackPayload[8] = proximityResult[3]>>8;
    1fae:	80 93 88 04 	sts	0x0488, r24
				ackPayload[9] = proximityResult[5]&0xFF;
    1fb2:	90 91 63 02 	lds	r25, 0x0263
    1fb6:	80 91 64 02 	lds	r24, 0x0264
    1fba:	90 93 89 04 	sts	0x0489, r25
				ackPayload[10] = proximityResult[5]>>8;
    1fbe:	80 93 8a 04 	sts	0x048A, r24
				ackPayload[11] = proximityResult[6]&0xFF;
    1fc2:	90 91 65 02 	lds	r25, 0x0265
    1fc6:	80 91 66 02 	lds	r24, 0x0266
    1fca:	90 93 8b 04 	sts	0x048B, r25
				ackPayload[12] = proximityResult[6]>>8;
    1fce:	80 93 8c 04 	sts	0x048C, r24
				ackPayload[13] = proximityResult[7]&0xFF;
    1fd2:	90 91 67 02 	lds	r25, 0x0267
    1fd6:	80 91 68 02 	lds	r24, 0x0268
    1fda:	90 93 8d 04 	sts	0x048D, r25
				ackPayload[14] = proximityResult[7]>>8;
    1fde:	80 93 8e 04 	sts	0x048E, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    1fe2:	30 91 03 01 	lds	r19, 0x0103
    1fe6:	80 91 03 01 	lds	r24, 0x0103
    1fea:	20 91 03 01 	lds	r18, 0x0103
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	80 72       	andi	r24, 0x20	; 32
    1ff2:	90 70       	andi	r25, 0x00	; 0
    1ff4:	95 95       	asr	r25
    1ff6:	87 95       	ror	r24
    1ff8:	95 95       	asr	r25
    1ffa:	87 95       	ror	r24
    1ffc:	95 95       	asr	r25
    1ffe:	87 95       	ror	r24
    2000:	95 95       	asr	r25
    2002:	87 95       	ror	r24
    2004:	95 95       	asr	r25
    2006:	87 95       	ror	r24
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	22 1f       	adc	r18, r18
    200e:	22 27       	eor	r18, r18
    2010:	22 1f       	adc	r18, r18
    2012:	22 0f       	add	r18, r18
    2014:	22 0f       	add	r18, r18
    2016:	28 2b       	or	r18, r24
    2018:	83 2f       	mov	r24, r19
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	80 71       	andi	r24, 0x10	; 16
    201e:	90 70       	andi	r25, 0x00	; 0
    2020:	95 95       	asr	r25
    2022:	87 95       	ror	r24
    2024:	95 95       	asr	r25
    2026:	87 95       	ror	r24
    2028:	95 95       	asr	r25
    202a:	87 95       	ror	r24
    202c:	95 95       	asr	r25
    202e:	87 95       	ror	r24
    2030:	28 2b       	or	r18, r24
    2032:	20 93 8f 04 	sts	0x048F, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    2036:	84 e0       	ldi	r24, 0x04	; 4
    2038:	80 93 0b 02 	sts	0x020B, r24
				break;
    203c:	a4 cd       	rjmp	.-1208   	; 0x1b86 <handleRFCommands+0x306>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    203e:	40 91 9d 04 	lds	r20, 0x049D
    2042:	44 23       	and	r20, r20
    2044:	79 f0       	breq	.+30     	; 0x2064 <handleRFCommands+0x7e4>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    2046:	10 92 10 03 	sts	0x0310, r1
    204a:	10 92 0f 03 	sts	0x030F, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    204e:	84 2f       	mov	r24, r20
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	8f 77       	andi	r24, 0x7F	; 127
    2054:	90 70       	andi	r25, 0x00	; 0
    2056:	90 93 0e 03 	sts	0x030E, r25
    205a:	80 93 0d 03 	sts	0x030D, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	64 cc       	rjmp	.-1848   	; 0x192c <handleRFCommands+0xac>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    2064:	8c e3       	ldi	r24, 0x3C	; 60
    2066:	0e 94 ba 1a 	call	0x3574	; 0x3574 <sleep>
    206a:	50 91 9c 04 	lds	r21, 0x049C
    206e:	40 91 9d 04 	lds	r20, 0x049D
    2072:	60 91 98 04 	lds	r22, 0x0498
    2076:	e0 91 99 04 	lds	r30, 0x0499
    207a:	70 91 9a 04 	lds	r23, 0x049A
    207e:	44 cc       	rjmp	.-1912   	; 0x1908 <handleRFCommands+0x88>

00002080 <init_ir_remote_control>:
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	c8 e6       	ldi	r28, 0x68	; 104
    2086:	d0 e0       	ldi	r29, 0x00	; 0
    2088:	18 82       	st	Y, r1
    208a:	ac e6       	ldi	r26, 0x6C	; 108
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	1c 92       	st	X, r1
    2090:	e0 eb       	ldi	r30, 0xB0	; 176
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	10 82       	st	Z, r1
    2096:	10 92 b1 00 	sts	0x00B1, r1
    209a:	10 92 70 00 	sts	0x0070, r1
    209e:	88 81       	ld	r24, Y
    20a0:	82 60       	ori	r24, 0x02	; 2
    20a2:	88 83       	st	Y, r24
    20a4:	8c 91       	ld	r24, X
    20a6:	80 68       	ori	r24, 0x80	; 128
    20a8:	8c 93       	st	X, r24
    20aa:	80 81       	ld	r24, Z
    20ac:	82 60       	ori	r24, 0x02	; 2
    20ae:	80 83       	st	Z, r24
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	08 95       	ret

000020b6 <__vector_10>:
    20b6:	1f 92       	push	r1
    20b8:	0f 92       	push	r0
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	0f 92       	push	r0
    20be:	11 24       	eor	r1, r1
    20c0:	8f 93       	push	r24
    20c2:	80 91 12 02 	lds	r24, 0x0212
    20c6:	88 23       	and	r24, r24
    20c8:	21 f1       	breq	.+72     	; 0x2112 <__vector_10+0x5c>
    20ca:	80 91 03 01 	lds	r24, 0x0103
    20ce:	86 fd       	sbrc	r24, 6
    20d0:	20 c0       	rjmp	.+64     	; 0x2112 <__vector_10+0x5c>
    20d2:	80 91 68 00 	lds	r24, 0x0068
    20d6:	8d 7f       	andi	r24, 0xFD	; 253
    20d8:	80 93 68 00 	sts	0x0068, r24
    20dc:	80 91 6c 00 	lds	r24, 0x006C
    20e0:	8f 77       	andi	r24, 0x7F	; 127
    20e2:	80 93 6c 00 	sts	0x006C, r24
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	80 93 13 02 	sts	0x0213, r24
    20ec:	8d e0       	ldi	r24, 0x0D	; 13
    20ee:	80 93 b3 00 	sts	0x00B3, r24
    20f2:	80 91 b1 00 	lds	r24, 0x00B1
    20f6:	86 60       	ori	r24, 0x06	; 6
    20f8:	80 93 b1 00 	sts	0x00B1, r24
    20fc:	80 91 70 00 	lds	r24, 0x0070
    2100:	82 60       	ori	r24, 0x02	; 2
    2102:	80 93 70 00 	sts	0x0070, r24
    2106:	10 92 20 02 	sts	0x0220, r1
    210a:	10 92 21 02 	sts	0x0221, r1
    210e:	10 92 22 02 	sts	0x0222, r1
    2112:	8f 91       	pop	r24
    2114:	0f 90       	pop	r0
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	0f 90       	pop	r0
    211a:	1f 90       	pop	r1
    211c:	18 95       	reti

0000211e <__vector_13>:
    211e:	1f 92       	push	r1
    2120:	0f 92       	push	r0
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	0f 92       	push	r0
    2126:	11 24       	eor	r1, r1
    2128:	2f 93       	push	r18
    212a:	3f 93       	push	r19
    212c:	4f 93       	push	r20
    212e:	5f 93       	push	r21
    2130:	8f 93       	push	r24
    2132:	9f 93       	push	r25
    2134:	80 91 b1 00 	lds	r24, 0x00B1
    2138:	88 7f       	andi	r24, 0xF8	; 248
    213a:	80 93 b1 00 	sts	0x00B1, r24
    213e:	80 91 13 02 	lds	r24, 0x0213
    2142:	88 23       	and	r24, r24
    2144:	a9 f0       	breq	.+42     	; 0x2170 <__vector_13+0x52>
    2146:	80 91 03 01 	lds	r24, 0x0103
    214a:	86 ff       	sbrs	r24, 6
    214c:	65 c0       	rjmp	.+202    	; 0x2218 <__stack+0x19>
    214e:	80 91 68 00 	lds	r24, 0x0068
    2152:	82 60       	ori	r24, 0x02	; 2
    2154:	80 93 68 00 	sts	0x0068, r24
    2158:	80 91 6c 00 	lds	r24, 0x006C
    215c:	80 68       	ori	r24, 0x80	; 128
    215e:	80 93 6c 00 	sts	0x006C, r24
    2162:	8f ef       	ldi	r24, 0xFF	; 255
    2164:	9f ef       	ldi	r25, 0xFF	; 255
    2166:	90 93 02 02 	sts	0x0202, r25
    216a:	80 93 01 02 	sts	0x0201, r24
    216e:	49 c0       	rjmp	.+146    	; 0x2202 <__stack+0x3>
    2170:	80 91 01 02 	lds	r24, 0x0201
    2174:	90 91 02 02 	lds	r25, 0x0202
    2178:	2f ef       	ldi	r18, 0xFF	; 255
    217a:	8f 3f       	cpi	r24, 0xFF	; 255
    217c:	92 07       	cpc	r25, r18
    217e:	09 f4       	brne	.+2      	; 0x2182 <__vector_13+0x64>
    2180:	63 c0       	rjmp	.+198    	; 0x2248 <__stack+0x49>
    2182:	81 30       	cpi	r24, 0x01	; 1
    2184:	91 05       	cpc	r25, r1
    2186:	09 f4       	brne	.+2      	; 0x218a <__vector_13+0x6c>
    2188:	98 c0       	rjmp	.+304    	; 0x22ba <__stack+0xbb>
    218a:	9c 01       	movw	r18, r24
    218c:	22 50       	subi	r18, 0x02	; 2
    218e:	30 40       	sbci	r19, 0x00	; 0
    2190:	25 30       	cpi	r18, 0x05	; 5
    2192:	31 05       	cpc	r19, r1
    2194:	08 f4       	brcc	.+2      	; 0x2198 <__vector_13+0x7a>
    2196:	67 c0       	rjmp	.+206    	; 0x2266 <__stack+0x67>
    2198:	9c 01       	movw	r18, r24
    219a:	27 50       	subi	r18, 0x07	; 7
    219c:	30 40       	sbci	r19, 0x00	; 0
    219e:	26 30       	cpi	r18, 0x06	; 6
    21a0:	31 05       	cpc	r19, r1
    21a2:	08 f0       	brcs	.+2      	; 0x21a6 <__vector_13+0x88>
    21a4:	bd c0       	rjmp	.+378    	; 0x2320 <__stack+0x121>
    21a6:	26 e3       	ldi	r18, 0x36	; 54
    21a8:	20 93 b3 00 	sts	0x00B3, r18
    21ac:	20 91 b1 00 	lds	r18, 0x00B1
    21b0:	26 60       	ori	r18, 0x06	; 6
    21b2:	20 93 b1 00 	sts	0x00B1, r18
    21b6:	20 91 70 00 	lds	r18, 0x0070
    21ba:	22 60       	ori	r18, 0x02	; 2
    21bc:	20 93 70 00 	sts	0x0070, r18
    21c0:	20 91 03 01 	lds	r18, 0x0103
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	20 74       	andi	r18, 0x40	; 64
    21c8:	30 70       	andi	r19, 0x00	; 0
    21ca:	00 24       	eor	r0, r0
    21cc:	22 0f       	add	r18, r18
    21ce:	33 1f       	adc	r19, r19
    21d0:	00 1c       	adc	r0, r0
    21d2:	22 0f       	add	r18, r18
    21d4:	33 1f       	adc	r19, r19
    21d6:	00 1c       	adc	r0, r0
    21d8:	23 2f       	mov	r18, r19
    21da:	30 2d       	mov	r19, r0
    21dc:	4c e0       	ldi	r20, 0x0C	; 12
    21de:	50 e0       	ldi	r21, 0x00	; 0
    21e0:	48 1b       	sub	r20, r24
    21e2:	59 0b       	sbc	r21, r25
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <__vector_13+0xcc>
    21e6:	22 0f       	add	r18, r18
    21e8:	33 1f       	adc	r19, r19
    21ea:	4a 95       	dec	r20
    21ec:	e2 f7       	brpl	.-8      	; 0x21e6 <__vector_13+0xc8>
    21ee:	40 91 20 02 	lds	r20, 0x0220
    21f2:	42 0f       	add	r20, r18
    21f4:	40 93 20 02 	sts	0x0220, r20
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	90 93 02 02 	sts	0x0202, r25
    21fe:	80 93 01 02 	sts	0x0201, r24
    2202:	9f 91       	pop	r25
    2204:	8f 91       	pop	r24
    2206:	5f 91       	pop	r21
    2208:	4f 91       	pop	r20
    220a:	3f 91       	pop	r19
    220c:	2f 91       	pop	r18
    220e:	0f 90       	pop	r0
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	0f 90       	pop	r0
    2214:	1f 90       	pop	r1
    2216:	18 95       	reti
    2218:	10 92 13 02 	sts	0x0213, r1
    221c:	83 e3       	ldi	r24, 0x33	; 51
    221e:	80 93 b3 00 	sts	0x00B3, r24
    2222:	80 91 b1 00 	lds	r24, 0x00B1
    2226:	86 60       	ori	r24, 0x06	; 6
    2228:	80 93 b1 00 	sts	0x00B1, r24
    222c:	80 91 70 00 	lds	r24, 0x0070
    2230:	82 60       	ori	r24, 0x02	; 2
    2232:	80 93 70 00 	sts	0x0070, r24
    2236:	80 91 01 02 	lds	r24, 0x0201
    223a:	90 91 02 02 	lds	r25, 0x0202
    223e:	2f ef       	ldi	r18, 0xFF	; 255
    2240:	8f 3f       	cpi	r24, 0xFF	; 255
    2242:	92 07       	cpc	r25, r18
    2244:	c9 f6       	brne	.-78     	; 0x21f8 <__vector_13+0xda>
    2246:	dd cf       	rjmp	.-70     	; 0x2202 <__stack+0x3>
    2248:	20 91 03 01 	lds	r18, 0x0103
    224c:	26 ff       	sbrs	r18, 6
    224e:	52 c0       	rjmp	.+164    	; 0x22f4 <__stack+0xf5>
    2250:	20 91 68 00 	lds	r18, 0x0068
    2254:	22 60       	ori	r18, 0x02	; 2
    2256:	20 93 68 00 	sts	0x0068, r18
    225a:	20 91 6c 00 	lds	r18, 0x006C
    225e:	20 68       	ori	r18, 0x80	; 128
    2260:	20 93 6c 00 	sts	0x006C, r18
    2264:	ce cf       	rjmp	.-100    	; 0x2202 <__stack+0x3>
    2266:	26 e3       	ldi	r18, 0x36	; 54
    2268:	20 93 b3 00 	sts	0x00B3, r18
    226c:	20 91 b1 00 	lds	r18, 0x00B1
    2270:	26 60       	ori	r18, 0x06	; 6
    2272:	20 93 b1 00 	sts	0x00B1, r18
    2276:	20 91 70 00 	lds	r18, 0x0070
    227a:	22 60       	ori	r18, 0x02	; 2
    227c:	20 93 70 00 	sts	0x0070, r18
    2280:	20 91 03 01 	lds	r18, 0x0103
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	20 74       	andi	r18, 0x40	; 64
    2288:	30 70       	andi	r19, 0x00	; 0
    228a:	00 24       	eor	r0, r0
    228c:	22 0f       	add	r18, r18
    228e:	33 1f       	adc	r19, r19
    2290:	00 1c       	adc	r0, r0
    2292:	22 0f       	add	r18, r18
    2294:	33 1f       	adc	r19, r19
    2296:	00 1c       	adc	r0, r0
    2298:	23 2f       	mov	r18, r19
    229a:	30 2d       	mov	r19, r0
    229c:	46 e0       	ldi	r20, 0x06	; 6
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	48 1b       	sub	r20, r24
    22a2:	59 0b       	sbc	r21, r25
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <__stack+0xab>
    22a6:	22 0f       	add	r18, r18
    22a8:	33 1f       	adc	r19, r19
    22aa:	4a 95       	dec	r20
    22ac:	e2 f7       	brpl	.-8      	; 0x22a6 <__stack+0xa7>
    22ae:	40 91 21 02 	lds	r20, 0x0221
    22b2:	42 0f       	add	r20, r18
    22b4:	40 93 21 02 	sts	0x0221, r20
    22b8:	9f cf       	rjmp	.-194    	; 0x21f8 <__vector_13+0xda>
    22ba:	20 91 03 01 	lds	r18, 0x0103
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	20 74       	andi	r18, 0x40	; 64
    22c2:	30 70       	andi	r19, 0x00	; 0
    22c4:	02 2e       	mov	r0, r18
    22c6:	23 2f       	mov	r18, r19
    22c8:	00 0c       	add	r0, r0
    22ca:	22 1f       	adc	r18, r18
    22cc:	33 0b       	sbc	r19, r19
    22ce:	00 0c       	add	r0, r0
    22d0:	22 1f       	adc	r18, r18
    22d2:	33 1f       	adc	r19, r19
    22d4:	20 93 22 02 	sts	0x0222, r18
    22d8:	26 e3       	ldi	r18, 0x36	; 54
    22da:	20 93 b3 00 	sts	0x00B3, r18
    22de:	20 91 b1 00 	lds	r18, 0x00B1
    22e2:	26 60       	ori	r18, 0x06	; 6
    22e4:	20 93 b1 00 	sts	0x00B1, r18
    22e8:	20 91 70 00 	lds	r18, 0x0070
    22ec:	22 60       	ori	r18, 0x02	; 2
    22ee:	20 93 70 00 	sts	0x0070, r18
    22f2:	82 cf       	rjmp	.-252    	; 0x21f8 <__vector_13+0xda>
    22f4:	8c e1       	ldi	r24, 0x1C	; 28
    22f6:	80 93 b3 00 	sts	0x00B3, r24
    22fa:	80 91 b1 00 	lds	r24, 0x00B1
    22fe:	86 60       	ori	r24, 0x06	; 6
    2300:	80 93 b1 00 	sts	0x00B1, r24
    2304:	80 91 70 00 	lds	r24, 0x0070
    2308:	82 60       	ori	r24, 0x02	; 2
    230a:	80 93 70 00 	sts	0x0070, r24
    230e:	10 92 20 02 	sts	0x0220, r1
    2312:	10 92 21 02 	sts	0x0221, r1
    2316:	10 92 22 02 	sts	0x0222, r1
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	6d cf       	rjmp	.-294    	; 0x21fa <__vector_13+0xdc>
    2320:	8d 30       	cpi	r24, 0x0D	; 13
    2322:	91 05       	cpc	r25, r1
    2324:	09 f0       	breq	.+2      	; 0x2328 <__stack+0x129>
    2326:	68 cf       	rjmp	.-304    	; 0x21f8 <__vector_13+0xda>
    2328:	10 92 70 00 	sts	0x0070, r1
    232c:	80 91 68 00 	lds	r24, 0x0068
    2330:	82 60       	ori	r24, 0x02	; 2
    2332:	80 93 68 00 	sts	0x0068, r24
    2336:	80 91 6c 00 	lds	r24, 0x006C
    233a:	80 68       	ori	r24, 0x80	; 128
    233c:	80 93 6c 00 	sts	0x006C, r24
    2340:	8f ef       	ldi	r24, 0xFF	; 255
    2342:	9f ef       	ldi	r25, 0xFF	; 255
    2344:	90 93 02 02 	sts	0x0202, r25
    2348:	80 93 01 02 	sts	0x0201, r24
    234c:	80 91 22 02 	lds	r24, 0x0222
    2350:	80 93 00 02 	sts	0x0200, r24
    2354:	80 91 21 02 	lds	r24, 0x0221
    2358:	80 93 1e 02 	sts	0x021E, r24
    235c:	80 91 20 02 	lds	r24, 0x0220
    2360:	80 93 1f 02 	sts	0x021F, r24
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	80 93 22 04 	sts	0x0422, r24
    236a:	4b cf       	rjmp	.-362    	; 0x2202 <__stack+0x3>

0000236c <ir_remote_get_check>:
    236c:	80 91 00 02 	lds	r24, 0x0200
    2370:	08 95       	ret

00002372 <ir_remote_get_address>:
    2372:	80 91 1e 02 	lds	r24, 0x021E
    2376:	08 95       	ret

00002378 <ir_remote_get_data>:
    2378:	80 91 1f 02 	lds	r24, 0x021F
    237c:	08 95       	ret

0000237e <handleIRRemoteCommands>:
    237e:	80 91 12 02 	lds	r24, 0x0212
    2382:	88 23       	and	r24, r24
    2384:	b1 f1       	breq	.+108    	; 0x23f2 <handleIRRemoteCommands+0x74>
    2386:	80 91 22 04 	lds	r24, 0x0422
    238a:	88 23       	and	r24, r24
    238c:	91 f1       	breq	.+100    	; 0x23f2 <handleIRRemoteCommands+0x74>
    238e:	e0 91 1f 02 	lds	r30, 0x021F
    2392:	e0 93 21 04 	sts	0x0421, r30
    2396:	10 92 22 04 	sts	0x0422, r1
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	e5 33       	cpi	r30, 0x35	; 53
    239e:	f1 05       	cpc	r31, r1
    23a0:	48 f1       	brcs	.+82     	; 0x23f4 <handleIRRemoteCommands+0x76>
    23a2:	20 91 f9 02 	lds	r18, 0x02F9
    23a6:	30 91 fa 02 	lds	r19, 0x02FA
    23aa:	80 91 fb 02 	lds	r24, 0x02FB
    23ae:	90 91 fc 02 	lds	r25, 0x02FC
    23b2:	37 fd       	sbrc	r19, 7
    23b4:	27 c0       	rjmp	.+78     	; 0x2404 <handleIRRemoteCommands+0x86>
    23b6:	35 95       	asr	r19
    23b8:	27 95       	ror	r18
    23ba:	35 95       	asr	r19
    23bc:	27 95       	ror	r18
    23be:	30 93 10 03 	sts	0x0310, r19
    23c2:	20 93 0f 03 	sts	0x030F, r18
    23c6:	97 fd       	sbrc	r25, 7
    23c8:	09 c0       	rjmp	.+18     	; 0x23dc <handleIRRemoteCommands+0x5e>
    23ca:	95 95       	asr	r25
    23cc:	87 95       	ror	r24
    23ce:	95 95       	asr	r25
    23d0:	87 95       	ror	r24
    23d2:	90 93 0e 03 	sts	0x030E, r25
    23d6:	80 93 0d 03 	sts	0x030D, r24
    23da:	08 95       	ret
    23dc:	90 95       	com	r25
    23de:	81 95       	neg	r24
    23e0:	9f 4f       	sbci	r25, 0xFF	; 255
    23e2:	95 95       	asr	r25
    23e4:	87 95       	ror	r24
    23e6:	95 95       	asr	r25
    23e8:	87 95       	ror	r24
    23ea:	90 93 0e 03 	sts	0x030E, r25
    23ee:	80 93 0d 03 	sts	0x030D, r24
    23f2:	08 95       	ret
    23f4:	ee 58       	subi	r30, 0x8E	; 142
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	ee 0f       	add	r30, r30
    23fa:	ff 1f       	adc	r31, r31
    23fc:	05 90       	lpm	r0, Z+
    23fe:	f4 91       	lpm	r31, Z+
    2400:	e0 2d       	mov	r30, r0
    2402:	19 94       	eijmp
    2404:	30 95       	com	r19
    2406:	21 95       	neg	r18
    2408:	3f 4f       	sbci	r19, 0xFF	; 255
    240a:	d5 cf       	rjmp	.-86     	; 0x23b6 <handleIRRemoteCommands+0x38>
    240c:	80 93 62 04 	sts	0x0462, r24
    2410:	10 92 63 04 	sts	0x0463, r1
    2414:	c6 cf       	rjmp	.-116    	; 0x23a2 <handleIRRemoteCommands+0x24>
    2416:	10 92 62 04 	sts	0x0462, r1
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	80 93 63 04 	sts	0x0463, r24
    2420:	20 91 f9 02 	lds	r18, 0x02F9
    2424:	30 91 fa 02 	lds	r19, 0x02FA
    2428:	80 91 fb 02 	lds	r24, 0x02FB
    242c:	90 91 fc 02 	lds	r25, 0x02FC
    2430:	c0 cf       	rjmp	.-128    	; 0x23b2 <handleIRRemoteCommands+0x34>
    2432:	10 92 62 04 	sts	0x0462, r1
    2436:	20 91 f9 02 	lds	r18, 0x02F9
    243a:	30 91 fa 02 	lds	r19, 0x02FA
    243e:	80 91 fb 02 	lds	r24, 0x02FB
    2442:	90 91 fc 02 	lds	r25, 0x02FC
    2446:	b5 cf       	rjmp	.-150    	; 0x23b2 <handleIRRemoteCommands+0x34>
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	80 93 62 04 	sts	0x0462, r24
    244e:	20 91 f9 02 	lds	r18, 0x02F9
    2452:	30 91 fa 02 	lds	r19, 0x02FA
    2456:	80 91 fb 02 	lds	r24, 0x02FB
    245a:	90 91 fc 02 	lds	r25, 0x02FC
    245e:	a9 cf       	rjmp	.-174    	; 0x23b2 <handleIRRemoteCommands+0x34>
    2460:	80 91 fb 02 	lds	r24, 0x02FB
    2464:	90 91 fc 02 	lds	r25, 0x02FC
    2468:	4e 97       	sbiw	r24, 0x1e	; 30
    246a:	90 93 fc 02 	sts	0x02FC, r25
    246e:	80 93 fb 02 	sts	0x02FB, r24
    2472:	2e ef       	ldi	r18, 0xFE	; 254
    2474:	80 30       	cpi	r24, 0x00	; 0
    2476:	92 07       	cpc	r25, r18
    2478:	9c f5       	brge	.+102    	; 0x24e0 <handleIRRemoteCommands+0x162>
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	9e ef       	ldi	r25, 0xFE	; 254
    247e:	90 93 fc 02 	sts	0x02FC, r25
    2482:	80 93 fb 02 	sts	0x02FB, r24
    2486:	20 91 f9 02 	lds	r18, 0x02F9
    248a:	30 91 fa 02 	lds	r19, 0x02FA
    248e:	91 cf       	rjmp	.-222    	; 0x23b2 <handleIRRemoteCommands+0x34>
    2490:	20 91 f9 02 	lds	r18, 0x02F9
    2494:	30 91 fa 02 	lds	r19, 0x02FA
    2498:	80 91 f7 02 	lds	r24, 0x02F7
    249c:	90 91 f8 02 	lds	r25, 0x02F8
    24a0:	28 17       	cp	r18, r24
    24a2:	39 07       	cpc	r19, r25
    24a4:	24 f0       	brlt	.+8      	; 0x24ae <handleIRRemoteCommands+0x130>
    24a6:	20 91 fb 02 	lds	r18, 0x02FB
    24aa:	30 91 fc 02 	lds	r19, 0x02FC
    24ae:	2e 51       	subi	r18, 0x1E	; 30
    24b0:	30 40       	sbci	r19, 0x00	; 0
    24b2:	30 93 fa 02 	sts	0x02FA, r19
    24b6:	20 93 f9 02 	sts	0x02F9, r18
    24ba:	c9 01       	movw	r24, r18
    24bc:	30 93 fc 02 	sts	0x02FC, r19
    24c0:	20 93 fb 02 	sts	0x02FB, r18
    24c4:	4e ef       	ldi	r20, 0xFE	; 254
    24c6:	20 30       	cpi	r18, 0x00	; 0
    24c8:	34 07       	cpc	r19, r20
    24ca:	34 f4       	brge	.+12     	; 0x24d8 <handleIRRemoteCommands+0x15a>
    24cc:	40 e0       	ldi	r20, 0x00	; 0
    24ce:	5e ef       	ldi	r21, 0xFE	; 254
    24d0:	50 93 fa 02 	sts	0x02FA, r21
    24d4:	40 93 f9 02 	sts	0x02F9, r20
    24d8:	4e ef       	ldi	r20, 0xFE	; 254
    24da:	20 30       	cpi	r18, 0x00	; 0
    24dc:	34 07       	cpc	r19, r20
    24de:	6c f2       	brlt	.-102    	; 0x247a <handleIRRemoteCommands+0xfc>
    24e0:	20 91 f9 02 	lds	r18, 0x02F9
    24e4:	30 91 fa 02 	lds	r19, 0x02FA
    24e8:	64 cf       	rjmp	.-312    	; 0x23b2 <handleIRRemoteCommands+0x34>
    24ea:	20 91 f9 02 	lds	r18, 0x02F9
    24ee:	30 91 fa 02 	lds	r19, 0x02FA
    24f2:	2e 51       	subi	r18, 0x1E	; 30
    24f4:	30 40       	sbci	r19, 0x00	; 0
    24f6:	30 93 fa 02 	sts	0x02FA, r19
    24fa:	20 93 f9 02 	sts	0x02F9, r18
    24fe:	4e ef       	ldi	r20, 0xFE	; 254
    2500:	20 30       	cpi	r18, 0x00	; 0
    2502:	34 07       	cpc	r19, r20
    2504:	0c f0       	brlt	.+2      	; 0x2508 <handleIRRemoteCommands+0x18a>
    2506:	17 c1       	rjmp	.+558    	; 0x2736 <handleIRRemoteCommands+0x3b8>
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	9e ef       	ldi	r25, 0xFE	; 254
    250c:	90 93 fa 02 	sts	0x02FA, r25
    2510:	80 93 f9 02 	sts	0x02F9, r24
    2514:	80 91 fb 02 	lds	r24, 0x02FB
    2518:	90 91 fc 02 	lds	r25, 0x02FC
    251c:	20 e8       	ldi	r18, 0x80	; 128
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4e cf       	rjmp	.-356    	; 0x23be <handleIRRemoteCommands+0x40>
    2522:	20 91 f9 02 	lds	r18, 0x02F9
    2526:	30 91 fa 02 	lds	r19, 0x02FA
    252a:	2e 51       	subi	r18, 0x1E	; 30
    252c:	30 40       	sbci	r19, 0x00	; 0
    252e:	30 93 fa 02 	sts	0x02FA, r19
    2532:	20 93 f9 02 	sts	0x02F9, r18
    2536:	80 91 fb 02 	lds	r24, 0x02FB
    253a:	90 91 fc 02 	lds	r25, 0x02FC
    253e:	4e 96       	adiw	r24, 0x1e	; 30
    2540:	90 93 fc 02 	sts	0x02FC, r25
    2544:	80 93 fb 02 	sts	0x02FB, r24
    2548:	4e ef       	ldi	r20, 0xFE	; 254
    254a:	20 30       	cpi	r18, 0x00	; 0
    254c:	34 07       	cpc	r19, r20
    254e:	34 f4       	brge	.+12     	; 0x255c <handleIRRemoteCommands+0x1de>
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	3e ef       	ldi	r19, 0xFE	; 254
    2554:	30 93 fa 02 	sts	0x02FA, r19
    2558:	20 93 f9 02 	sts	0x02F9, r18
    255c:	42 e0       	ldi	r20, 0x02	; 2
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	94 07       	cpc	r25, r20
    2562:	0c f4       	brge	.+2      	; 0x2566 <handleIRRemoteCommands+0x1e8>
    2564:	26 cf       	rjmp	.-436    	; 0x23b2 <handleIRRemoteCommands+0x34>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	92 e0       	ldi	r25, 0x02	; 2
    256a:	90 93 fc 02 	sts	0x02FC, r25
    256e:	80 93 fb 02 	sts	0x02FB, r24
    2572:	1f cf       	rjmp	.-450    	; 0x23b2 <handleIRRemoteCommands+0x34>
    2574:	20 91 f9 02 	lds	r18, 0x02F9
    2578:	30 91 fa 02 	lds	r19, 0x02FA
    257c:	80 91 fb 02 	lds	r24, 0x02FB
    2580:	90 91 fc 02 	lds	r25, 0x02FC
    2584:	82 17       	cp	r24, r18
    2586:	93 07       	cpc	r25, r19
    2588:	0c f4       	brge	.+2      	; 0x258c <handleIRRemoteCommands+0x20e>
    258a:	da c0       	rjmp	.+436    	; 0x2740 <handleIRRemoteCommands+0x3c2>
    258c:	9c 01       	movw	r18, r24
    258e:	22 5e       	subi	r18, 0xE2	; 226
    2590:	3f 4f       	sbci	r19, 0xFF	; 255
    2592:	30 93 fa 02 	sts	0x02FA, r19
    2596:	20 93 f9 02 	sts	0x02F9, r18
    259a:	4e 96       	adiw	r24, 0x1e	; 30
    259c:	90 93 fc 02 	sts	0x02FC, r25
    25a0:	80 93 fb 02 	sts	0x02FB, r24
    25a4:	42 e0       	ldi	r20, 0x02	; 2
    25a6:	21 30       	cpi	r18, 0x01	; 1
    25a8:	34 07       	cpc	r19, r20
    25aa:	34 f0       	brlt	.+12     	; 0x25b8 <handleIRRemoteCommands+0x23a>
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	32 e0       	ldi	r19, 0x02	; 2
    25b0:	30 93 fa 02 	sts	0x02FA, r19
    25b4:	20 93 f9 02 	sts	0x02F9, r18
    25b8:	22 e0       	ldi	r18, 0x02	; 2
    25ba:	81 30       	cpi	r24, 0x01	; 1
    25bc:	92 07       	cpc	r25, r18
    25be:	0c f4       	brge	.+2      	; 0x25c2 <handleIRRemoteCommands+0x244>
    25c0:	8f cf       	rjmp	.-226    	; 0x24e0 <handleIRRemoteCommands+0x162>
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	92 e0       	ldi	r25, 0x02	; 2
    25c6:	90 93 fc 02 	sts	0x02FC, r25
    25ca:	80 93 fb 02 	sts	0x02FB, r24
    25ce:	20 91 f9 02 	lds	r18, 0x02F9
    25d2:	30 91 fa 02 	lds	r19, 0x02FA
    25d6:	ed ce       	rjmp	.-550    	; 0x23b2 <handleIRRemoteCommands+0x34>
    25d8:	20 91 f9 02 	lds	r18, 0x02F9
    25dc:	30 91 fa 02 	lds	r19, 0x02FA
    25e0:	22 5e       	subi	r18, 0xE2	; 226
    25e2:	3f 4f       	sbci	r19, 0xFF	; 255
    25e4:	30 93 fa 02 	sts	0x02FA, r19
    25e8:	20 93 f9 02 	sts	0x02F9, r18
    25ec:	42 e0       	ldi	r20, 0x02	; 2
    25ee:	21 30       	cpi	r18, 0x01	; 1
    25f0:	34 07       	cpc	r19, r20
    25f2:	0c f4       	brge	.+2      	; 0x25f6 <handleIRRemoteCommands+0x278>
    25f4:	a0 c0       	rjmp	.+320    	; 0x2736 <handleIRRemoteCommands+0x3b8>
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	92 e0       	ldi	r25, 0x02	; 2
    25fa:	90 93 fa 02 	sts	0x02FA, r25
    25fe:	80 93 f9 02 	sts	0x02F9, r24
    2602:	80 91 fb 02 	lds	r24, 0x02FB
    2606:	90 91 fc 02 	lds	r25, 0x02FC
    260a:	20 e8       	ldi	r18, 0x80	; 128
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	d7 ce       	rjmp	.-594    	; 0x23be <handleIRRemoteCommands+0x40>
    2610:	80 91 23 04 	lds	r24, 0x0423
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	01 96       	adiw	r24, 0x01	; 1
    2618:	65 e0       	ldi	r22, 0x05	; 5
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	0e 94 56 32 	call	0x64ac	; 0x64ac <__divmodhi4>
    2620:	80 93 23 04 	sts	0x0423, r24
    2624:	88 23       	and	r24, r24
    2626:	09 f0       	breq	.+2      	; 0x262a <handleIRRemoteCommands+0x2ac>
    2628:	8d c0       	rjmp	.+282    	; 0x2744 <handleIRRemoteCommands+0x3c6>
    262a:	44 9a       	sbi	0x08, 4	; 8
    262c:	45 9a       	sbi	0x08, 5	; 8
    262e:	10 92 0e 02 	sts	0x020E, r1
    2632:	8f ef       	ldi	r24, 0xFF	; 255
    2634:	80 93 0d 02 	sts	0x020D, r24
    2638:	80 93 0c 02 	sts	0x020C, r24
    263c:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <updateRedLed>
    2640:	80 91 0d 02 	lds	r24, 0x020D
    2644:	0e 94 49 27 	call	0x4e92	; 0x4e92 <updateGreenLed>
    2648:	80 91 0e 02 	lds	r24, 0x020E
    264c:	0e 94 5d 27 	call	0x4eba	; 0x4eba <updateBlueLed>
    2650:	20 91 f9 02 	lds	r18, 0x02F9
    2654:	30 91 fa 02 	lds	r19, 0x02FA
    2658:	80 91 fb 02 	lds	r24, 0x02FB
    265c:	90 91 fc 02 	lds	r25, 0x02FC
    2660:	a8 ce       	rjmp	.-688    	; 0x23b2 <handleIRRemoteCommands+0x34>
    2662:	80 91 24 04 	lds	r24, 0x0424
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	01 96       	adiw	r24, 0x01	; 1
    266a:	83 70       	andi	r24, 0x03	; 3
    266c:	90 70       	andi	r25, 0x00	; 0
    266e:	80 93 24 04 	sts	0x0424, r24
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	09 f4       	brne	.+2      	; 0x2678 <handleIRRemoteCommands+0x2fa>
    2676:	cf ce       	rjmp	.-610    	; 0x2416 <handleIRRemoteCommands+0x98>
    2678:	83 30       	cpi	r24, 0x03	; 3
    267a:	09 f4       	brne	.+2      	; 0x267e <handleIRRemoteCommands+0x300>
    267c:	53 c0       	rjmp	.+166    	; 0x2724 <handleIRRemoteCommands+0x3a6>
    267e:	81 30       	cpi	r24, 0x01	; 1
    2680:	09 f4       	brne	.+2      	; 0x2684 <handleIRRemoteCommands+0x306>
    2682:	c4 ce       	rjmp	.-632    	; 0x240c <handleIRRemoteCommands+0x8e>
    2684:	10 92 62 04 	sts	0x0462, r1
    2688:	10 92 63 04 	sts	0x0463, r1
    268c:	8a ce       	rjmp	.-748    	; 0x23a2 <handleIRRemoteCommands+0x24>
    268e:	20 91 f9 02 	lds	r18, 0x02F9
    2692:	30 91 fa 02 	lds	r19, 0x02FA
    2696:	22 5e       	subi	r18, 0xE2	; 226
    2698:	3f 4f       	sbci	r19, 0xFF	; 255
    269a:	30 93 fa 02 	sts	0x02FA, r19
    269e:	20 93 f9 02 	sts	0x02F9, r18
    26a2:	80 91 fb 02 	lds	r24, 0x02FB
    26a6:	90 91 fc 02 	lds	r25, 0x02FC
    26aa:	4e 97       	sbiw	r24, 0x1e	; 30
    26ac:	90 93 fc 02 	sts	0x02FC, r25
    26b0:	80 93 fb 02 	sts	0x02FB, r24
    26b4:	42 e0       	ldi	r20, 0x02	; 2
    26b6:	21 30       	cpi	r18, 0x01	; 1
    26b8:	34 07       	cpc	r19, r20
    26ba:	34 f0       	brlt	.+12     	; 0x26c8 <handleIRRemoteCommands+0x34a>
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	32 e0       	ldi	r19, 0x02	; 2
    26c0:	30 93 fa 02 	sts	0x02FA, r19
    26c4:	20 93 f9 02 	sts	0x02F9, r18
    26c8:	4e ef       	ldi	r20, 0xFE	; 254
    26ca:	80 30       	cpi	r24, 0x00	; 0
    26cc:	94 07       	cpc	r25, r20
    26ce:	0c f0       	brlt	.+2      	; 0x26d2 <handleIRRemoteCommands+0x354>
    26d0:	70 ce       	rjmp	.-800    	; 0x23b2 <handleIRRemoteCommands+0x34>
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	9e ef       	ldi	r25, 0xFE	; 254
    26d6:	90 93 fc 02 	sts	0x02FC, r25
    26da:	80 93 fb 02 	sts	0x02FB, r24
    26de:	69 ce       	rjmp	.-814    	; 0x23b2 <handleIRRemoteCommands+0x34>
    26e0:	10 92 fa 02 	sts	0x02FA, r1
    26e4:	10 92 f9 02 	sts	0x02F9, r1
    26e8:	10 92 fc 02 	sts	0x02FC, r1
    26ec:	10 92 fb 02 	sts	0x02FB, r1
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	5e ce       	rjmp	.-836    	; 0x23b6 <handleIRRemoteCommands+0x38>
    26fa:	80 91 fb 02 	lds	r24, 0x02FB
    26fe:	90 91 fc 02 	lds	r25, 0x02FC
    2702:	4e 96       	adiw	r24, 0x1e	; 30
    2704:	90 93 fc 02 	sts	0x02FC, r25
    2708:	80 93 fb 02 	sts	0x02FB, r24
    270c:	22 e0       	ldi	r18, 0x02	; 2
    270e:	81 30       	cpi	r24, 0x01	; 1
    2710:	92 07       	cpc	r25, r18
    2712:	0c f4       	brge	.+2      	; 0x2716 <handleIRRemoteCommands+0x398>
    2714:	e5 ce       	rjmp	.-566    	; 0x24e0 <handleIRRemoteCommands+0x162>
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	92 e0       	ldi	r25, 0x02	; 2
    271a:	90 93 fc 02 	sts	0x02FC, r25
    271e:	80 93 fb 02 	sts	0x02FB, r24
    2722:	de ce       	rjmp	.-580    	; 0x24e0 <handleIRRemoteCommands+0x162>
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	80 93 62 04 	sts	0x0462, r24
    272a:	80 93 63 04 	sts	0x0463, r24
    272e:	20 91 f9 02 	lds	r18, 0x02F9
    2732:	30 91 fa 02 	lds	r19, 0x02FA
    2736:	80 91 fb 02 	lds	r24, 0x02FB
    273a:	90 91 fc 02 	lds	r25, 0x02FC
    273e:	39 ce       	rjmp	.-910    	; 0x23b2 <handleIRRemoteCommands+0x34>
    2740:	c9 01       	movw	r24, r18
    2742:	25 cf       	rjmp	.-438    	; 0x258e <handleIRRemoteCommands+0x210>
    2744:	81 30       	cpi	r24, 0x01	; 1
    2746:	61 f0       	breq	.+24     	; 0x2760 <handleIRRemoteCommands+0x3e2>
    2748:	82 30       	cpi	r24, 0x02	; 2
    274a:	91 f0       	breq	.+36     	; 0x2770 <handleIRRemoteCommands+0x3f2>
    274c:	83 30       	cpi	r24, 0x03	; 3
    274e:	d9 f0       	breq	.+54     	; 0x2786 <handleIRRemoteCommands+0x408>
    2750:	8f ef       	ldi	r24, 0xFF	; 255
    2752:	80 93 0e 02 	sts	0x020E, r24
    2756:	80 93 0d 02 	sts	0x020D, r24
    275a:	80 93 0c 02 	sts	0x020C, r24
    275e:	6e cf       	rjmp	.-292    	; 0x263c <handleIRRemoteCommands+0x2be>
    2760:	8f ef       	ldi	r24, 0xFF	; 255
    2762:	80 93 0e 02 	sts	0x020E, r24
    2766:	10 92 0d 02 	sts	0x020D, r1
    276a:	80 93 0c 02 	sts	0x020C, r24
    276e:	66 cf       	rjmp	.-308    	; 0x263c <handleIRRemoteCommands+0x2be>
    2770:	44 98       	cbi	0x08, 4	; 8
    2772:	45 98       	cbi	0x08, 5	; 8
    2774:	8f ef       	ldi	r24, 0xFF	; 255
    2776:	80 93 0e 02 	sts	0x020E, r24
    277a:	80 93 0d 02 	sts	0x020D, r24
    277e:	10 92 0c 02 	sts	0x020C, r1
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	5b cf       	rjmp	.-330    	; 0x263c <handleIRRemoteCommands+0x2be>
    2786:	10 92 0e 02 	sts	0x020E, r1
    278a:	10 92 0d 02 	sts	0x020D, r1
    278e:	10 92 0c 02 	sts	0x020C, r1
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	53 cf       	rjmp	.-346    	; 0x263c <handleIRRemoteCommands+0x2be>

00002796 <init_speed_control>:
    2796:	08 95       	ret

00002798 <start_vertical_speed_control_left>:
    2798:	0f 93       	push	r16
    279a:	1f 93       	push	r17
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	fc 01       	movw	r30, r24
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	09 f4       	brne	.+2      	; 0x27ac <start_vertical_speed_control_left+0x14>
    27aa:	b8 c0       	rjmp	.+368    	; 0x291c <start_vertical_speed_control_left+0x184>
    27ac:	20 91 38 04 	lds	r18, 0x0438
    27b0:	30 91 39 04 	lds	r19, 0x0439
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	2e 30       	cpi	r18, 0x0E	; 14
    27b8:	34 07       	cpc	r19, r20
    27ba:	0c f4       	brge	.+2      	; 0x27be <start_vertical_speed_control_left+0x26>
    27bc:	89 c0       	rjmp	.+274    	; 0x28d0 <start_vertical_speed_control_left+0x138>
    27be:	18 16       	cp	r1, r24
    27c0:	19 06       	cpc	r1, r25
    27c2:	0c f0       	brlt	.+2      	; 0x27c6 <start_vertical_speed_control_left+0x2e>
    27c4:	14 c1       	rjmp	.+552    	; 0x29ee <start_vertical_speed_control_left+0x256>
    27c6:	88 e6       	ldi	r24, 0x68	; 104
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	82 1b       	sub	r24, r18
    27cc:	93 0b       	sbc	r25, r19
    27ce:	95 95       	asr	r25
    27d0:	87 95       	ror	r24
    27d2:	95 95       	asr	r25
    27d4:	87 95       	ror	r24
    27d6:	29 e1       	ldi	r18, 0x19	; 25
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	28 1b       	sub	r18, r24
    27dc:	39 0b       	sbc	r19, r25
    27de:	30 93 04 02 	sts	0x0204, r19
    27e2:	20 93 03 02 	sts	0x0203, r18
    27e6:	80 91 7c 04 	lds	r24, 0x047C
    27ea:	90 91 7d 04 	lds	r25, 0x047D
    27ee:	90 93 97 04 	sts	0x0497, r25
    27f2:	80 93 96 04 	sts	0x0496, r24
    27f6:	20 81       	ld	r18, Z
    27f8:	31 81       	ldd	r19, Z+1	; 0x01
    27fa:	37 fd       	sbrc	r19, 7
    27fc:	d3 c0       	rjmp	.+422    	; 0x29a4 <start_vertical_speed_control_left+0x20c>
    27fe:	40 91 f1 02 	lds	r20, 0x02F1
    2802:	50 91 f2 02 	lds	r21, 0x02F2
    2806:	b9 01       	movw	r22, r18
    2808:	64 1b       	sub	r22, r20
    280a:	75 0b       	sbc	r23, r21
    280c:	ab 01       	movw	r20, r22
    280e:	70 93 7d 04 	sts	0x047D, r23
    2812:	60 93 7c 04 	sts	0x047C, r22
    2816:	20 91 05 03 	lds	r18, 0x0305
    281a:	30 91 06 03 	lds	r19, 0x0306
    281e:	24 0f       	add	r18, r20
    2820:	35 1f       	adc	r19, r21
    2822:	30 93 06 03 	sts	0x0306, r19
    2826:	20 93 05 03 	sts	0x0305, r18
    282a:	76 e0       	ldi	r23, 0x06	; 6
    282c:	21 34       	cpi	r18, 0x41	; 65
    282e:	37 07       	cpc	r19, r23
    2830:	0c f4       	brge	.+2      	; 0x2834 <start_vertical_speed_control_left+0x9c>
    2832:	85 c0       	rjmp	.+266    	; 0x293e <start_vertical_speed_control_left+0x1a6>
    2834:	20 e4       	ldi	r18, 0x40	; 64
    2836:	36 e0       	ldi	r19, 0x06	; 6
    2838:	30 93 06 03 	sts	0x0306, r19
    283c:	20 93 05 03 	sts	0x0305, r18
    2840:	60 ec       	ldi	r22, 0xC0	; 192
    2842:	72 e1       	ldi	r23, 0x12	; 18
    2844:	9a 01       	movw	r18, r20
    2846:	22 0f       	add	r18, r18
    2848:	33 1f       	adc	r19, r19
    284a:	24 0f       	add	r18, r20
    284c:	35 1f       	adc	r19, r21
    284e:	22 0f       	add	r18, r18
    2850:	33 1f       	adc	r19, r19
    2852:	22 0f       	add	r18, r18
    2854:	33 1f       	adc	r19, r19
    2856:	22 0f       	add	r18, r18
    2858:	33 1f       	adc	r19, r19
    285a:	24 0f       	add	r18, r20
    285c:	35 1f       	adc	r19, r21
    285e:	00 81       	ld	r16, Z
    2860:	11 81       	ldd	r17, Z+1	; 0x01
    2862:	c0 91 03 02 	lds	r28, 0x0203
    2866:	d0 91 04 02 	lds	r29, 0x0204
    286a:	0c 9f       	mul	r16, r28
    286c:	d0 01       	movw	r26, r0
    286e:	0d 9f       	mul	r16, r29
    2870:	b0 0d       	add	r27, r0
    2872:	1c 9f       	mul	r17, r28
    2874:	b0 0d       	add	r27, r0
    2876:	11 24       	eor	r1, r1
    2878:	2a 0f       	add	r18, r26
    287a:	3b 1f       	adc	r19, r27
    287c:	84 1b       	sub	r24, r20
    287e:	95 0b       	sbc	r25, r21
    2880:	88 0f       	add	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	28 0f       	add	r18, r24
    2886:	39 1f       	adc	r19, r25
    2888:	26 0f       	add	r18, r22
    288a:	37 1f       	adc	r19, r23
    288c:	30 93 04 03 	sts	0x0304, r19
    2890:	20 93 03 03 	sts	0x0303, r18
    2894:	37 fd       	sbrc	r19, 7
    2896:	69 c0       	rjmp	.+210    	; 0x296a <start_vertical_speed_control_left+0x1d2>
    2898:	12 16       	cp	r1, r18
    289a:	13 06       	cpc	r1, r19
    289c:	0c f0       	brlt	.+2      	; 0x28a0 <start_vertical_speed_control_left+0x108>
    289e:	6f c0       	rjmp	.+222    	; 0x297e <start_vertical_speed_control_left+0x1e6>
    28a0:	80 81       	ld	r24, Z
    28a2:	91 81       	ldd	r25, Z+1	; 0x01
    28a4:	97 fd       	sbrc	r25, 7
    28a6:	89 c0       	rjmp	.+274    	; 0x29ba <start_vertical_speed_control_left+0x222>
    28a8:	7d e5       	ldi	r23, 0x5D	; 93
    28aa:	21 3c       	cpi	r18, 0xC1	; 193
    28ac:	37 07       	cpc	r19, r23
    28ae:	0c f4       	brge	.+2      	; 0x28b2 <start_vertical_speed_control_left+0x11a>
    28b0:	66 c0       	rjmp	.+204    	; 0x297e <start_vertical_speed_control_left+0x1e6>
    28b2:	80 ec       	ldi	r24, 0xC0	; 192
    28b4:	9d e5       	ldi	r25, 0x5D	; 93
    28b6:	90 93 04 03 	sts	0x0304, r25
    28ba:	80 93 03 03 	sts	0x0303, r24
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	92 e0       	ldi	r25, 0x02	; 2
    28c2:	91 83       	std	Z+1, r25	; 0x01
    28c4:	80 83       	st	Z, r24
    28c6:	df 91       	pop	r29
    28c8:	cf 91       	pop	r28
    28ca:	1f 91       	pop	r17
    28cc:	0f 91       	pop	r16
    28ce:	08 95       	ret
    28d0:	24 3b       	cpi	r18, 0xB4	; 180
    28d2:	31 05       	cpc	r19, r1
    28d4:	94 f4       	brge	.+36     	; 0x28fa <start_vertical_speed_control_left+0x162>
    28d6:	2a 35       	cpi	r18, 0x5A	; 90
    28d8:	31 05       	cpc	r19, r1
    28da:	7c f4       	brge	.+30     	; 0x28fa <start_vertical_speed_control_left+0x162>
    28dc:	18 16       	cp	r1, r24
    28de:	19 06       	cpc	r1, r25
    28e0:	0c f0       	brlt	.+2      	; 0x28e4 <start_vertical_speed_control_left+0x14c>
    28e2:	93 c0       	rjmp	.+294    	; 0x2a0a <start_vertical_speed_control_left+0x272>
    28e4:	35 95       	asr	r19
    28e6:	27 95       	ror	r18
    28e8:	35 95       	asr	r19
    28ea:	27 95       	ror	r18
    28ec:	27 5e       	subi	r18, 0xE7	; 231
    28ee:	3f 4f       	sbci	r19, 0xFF	; 255
    28f0:	30 93 04 02 	sts	0x0204, r19
    28f4:	20 93 03 02 	sts	0x0203, r18
    28f8:	76 cf       	rjmp	.-276    	; 0x27e6 <start_vertical_speed_control_left+0x4e>
    28fa:	18 16       	cp	r1, r24
    28fc:	19 06       	cpc	r1, r25
    28fe:	94 f5       	brge	.+100    	; 0x2964 <start_vertical_speed_control_left+0x1cc>
    2900:	84 eb       	ldi	r24, 0xB4	; 180
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	82 1b       	sub	r24, r18
    2906:	93 0b       	sbc	r25, r19
    2908:	95 95       	asr	r25
    290a:	87 95       	ror	r24
    290c:	95 95       	asr	r25
    290e:	87 95       	ror	r24
    2910:	49 96       	adiw	r24, 0x19	; 25
    2912:	90 93 04 02 	sts	0x0204, r25
    2916:	80 93 03 02 	sts	0x0203, r24
    291a:	65 cf       	rjmp	.-310    	; 0x27e6 <start_vertical_speed_control_left+0x4e>
    291c:	10 92 06 03 	sts	0x0306, r1
    2920:	10 92 05 03 	sts	0x0305, r1
    2924:	10 92 7d 04 	sts	0x047D, r1
    2928:	10 92 7c 04 	sts	0x047C, r1
    292c:	10 92 97 04 	sts	0x0497, r1
    2930:	10 92 96 04 	sts	0x0496, r1
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	1f 91       	pop	r17
    293a:	0f 91       	pop	r16
    293c:	08 95       	ret
    293e:	69 ef       	ldi	r22, 0xF9	; 249
    2940:	20 3c       	cpi	r18, 0xC0	; 192
    2942:	36 07       	cpc	r19, r22
    2944:	4c f4       	brge	.+18     	; 0x2958 <start_vertical_speed_control_left+0x1c0>
    2946:	20 ec       	ldi	r18, 0xC0	; 192
    2948:	39 ef       	ldi	r19, 0xF9	; 249
    294a:	30 93 06 03 	sts	0x0306, r19
    294e:	20 93 05 03 	sts	0x0305, r18
    2952:	60 e4       	ldi	r22, 0x40	; 64
    2954:	7d ee       	ldi	r23, 0xED	; 237
    2956:	76 cf       	rjmp	.-276    	; 0x2844 <start_vertical_speed_control_left+0xac>
    2958:	b9 01       	movw	r22, r18
    295a:	66 0f       	add	r22, r22
    295c:	77 1f       	adc	r23, r23
    295e:	62 0f       	add	r22, r18
    2960:	73 1f       	adc	r23, r19
    2962:	70 cf       	rjmp	.-288    	; 0x2844 <start_vertical_speed_control_left+0xac>
    2964:	84 eb       	ldi	r24, 0xB4	; 180
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	30 cf       	rjmp	.-416    	; 0x27ca <start_vertical_speed_control_left+0x32>
    296a:	80 81       	ld	r24, Z
    296c:	91 81       	ldd	r25, Z+1	; 0x01
    296e:	97 fd       	sbrc	r25, 7
    2970:	06 c0       	rjmp	.+12     	; 0x297e <start_vertical_speed_control_left+0x1e6>
    2972:	10 92 04 03 	sts	0x0304, r1
    2976:	10 92 03 03 	sts	0x0303, r1
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	82 ea       	ldi	r24, 0xA2	; 162
    2980:	20 34       	cpi	r18, 0x40	; 64
    2982:	38 07       	cpc	r19, r24
    2984:	04 f5       	brge	.+64     	; 0x29c6 <start_vertical_speed_control_left+0x22e>
    2986:	80 e4       	ldi	r24, 0x40	; 64
    2988:	92 ea       	ldi	r25, 0xA2	; 162
    298a:	90 93 04 03 	sts	0x0304, r25
    298e:	80 93 03 03 	sts	0x0303, r24
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	9e ef       	ldi	r25, 0xFE	; 254
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	1f 91       	pop	r17
    29a0:	0f 91       	pop	r16
    29a2:	08 95       	ret
    29a4:	40 91 f1 02 	lds	r20, 0x02F1
    29a8:	50 91 f2 02 	lds	r21, 0x02F2
    29ac:	42 0f       	add	r20, r18
    29ae:	53 1f       	adc	r21, r19
    29b0:	50 93 7d 04 	sts	0x047D, r21
    29b4:	40 93 7c 04 	sts	0x047C, r20
    29b8:	2e cf       	rjmp	.-420    	; 0x2816 <start_vertical_speed_control_left+0x7e>
    29ba:	10 92 04 03 	sts	0x0304, r1
    29be:	10 92 03 03 	sts	0x0303, r1
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	35 95       	asr	r19
    29c8:	27 95       	ror	r18
    29ca:	35 95       	asr	r19
    29cc:	27 95       	ror	r18
    29ce:	35 95       	asr	r19
    29d0:	27 95       	ror	r18
    29d2:	35 95       	asr	r19
    29d4:	27 95       	ror	r18
    29d6:	31 83       	std	Z+1, r19	; 0x01
    29d8:	20 83       	st	Z, r18
    29da:	42 e0       	ldi	r20, 0x02	; 2
    29dc:	21 30       	cpi	r18, 0x01	; 1
    29de:	34 07       	cpc	r19, r20
    29e0:	0c f0       	brlt	.+2      	; 0x29e4 <start_vertical_speed_control_left+0x24c>
    29e2:	6d cf       	rjmp	.-294    	; 0x28be <start_vertical_speed_control_left+0x126>
    29e4:	6e ef       	ldi	r22, 0xFE	; 254
    29e6:	20 30       	cpi	r18, 0x00	; 0
    29e8:	36 07       	cpc	r19, r22
    29ea:	9c f2       	brlt	.-90     	; 0x2992 <start_vertical_speed_control_left+0x1fa>
    29ec:	6c cf       	rjmp	.-296    	; 0x28c6 <start_vertical_speed_control_left+0x12e>
    29ee:	88 e6       	ldi	r24, 0x68	; 104
    29f0:	91 e0       	ldi	r25, 0x01	; 1
    29f2:	82 1b       	sub	r24, r18
    29f4:	93 0b       	sbc	r25, r19
    29f6:	95 95       	asr	r25
    29f8:	87 95       	ror	r24
    29fa:	95 95       	asr	r25
    29fc:	87 95       	ror	r24
    29fe:	49 96       	adiw	r24, 0x19	; 25
    2a00:	90 93 04 02 	sts	0x0204, r25
    2a04:	80 93 03 02 	sts	0x0203, r24
    2a08:	ee ce       	rjmp	.-548    	; 0x27e6 <start_vertical_speed_control_left+0x4e>
    2a0a:	35 95       	asr	r19
    2a0c:	27 95       	ror	r18
    2a0e:	35 95       	asr	r19
    2a10:	27 95       	ror	r18
    2a12:	89 e1       	ldi	r24, 0x19	; 25
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	82 1b       	sub	r24, r18
    2a18:	93 0b       	sbc	r25, r19
    2a1a:	90 93 04 02 	sts	0x0204, r25
    2a1e:	80 93 03 02 	sts	0x0203, r24
    2a22:	e1 ce       	rjmp	.-574    	; 0x27e6 <start_vertical_speed_control_left+0x4e>

00002a24 <start_vertical_speed_control_right>:
    2a24:	0f 93       	push	r16
    2a26:	1f 93       	push	r17
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	80 81       	ld	r24, Z
    2a30:	91 81       	ldd	r25, Z+1	; 0x01
    2a32:	00 97       	sbiw	r24, 0x00	; 0
    2a34:	09 f4       	brne	.+2      	; 0x2a38 <start_vertical_speed_control_right+0x14>
    2a36:	b8 c0       	rjmp	.+368    	; 0x2ba8 <start_vertical_speed_control_right+0x184>
    2a38:	20 91 38 04 	lds	r18, 0x0438
    2a3c:	30 91 39 04 	lds	r19, 0x0439
    2a40:	41 e0       	ldi	r20, 0x01	; 1
    2a42:	2e 30       	cpi	r18, 0x0E	; 14
    2a44:	34 07       	cpc	r19, r20
    2a46:	0c f4       	brge	.+2      	; 0x2a4a <start_vertical_speed_control_right+0x26>
    2a48:	89 c0       	rjmp	.+274    	; 0x2b5c <start_vertical_speed_control_right+0x138>
    2a4a:	18 16       	cp	r1, r24
    2a4c:	19 06       	cpc	r1, r25
    2a4e:	0c f0       	brlt	.+2      	; 0x2a52 <start_vertical_speed_control_right+0x2e>
    2a50:	14 c1       	rjmp	.+552    	; 0x2c7a <start_vertical_speed_control_right+0x256>
    2a52:	88 e6       	ldi	r24, 0x68	; 104
    2a54:	91 e0       	ldi	r25, 0x01	; 1
    2a56:	82 1b       	sub	r24, r18
    2a58:	93 0b       	sbc	r25, r19
    2a5a:	95 95       	asr	r25
    2a5c:	87 95       	ror	r24
    2a5e:	95 95       	asr	r25
    2a60:	87 95       	ror	r24
    2a62:	29 e1       	ldi	r18, 0x19	; 25
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	28 1b       	sub	r18, r24
    2a68:	39 0b       	sbc	r19, r25
    2a6a:	30 93 06 02 	sts	0x0206, r19
    2a6e:	20 93 05 02 	sts	0x0205, r18
    2a72:	80 91 a5 04 	lds	r24, 0x04A5
    2a76:	90 91 a6 04 	lds	r25, 0x04A6
    2a7a:	90 93 7f 04 	sts	0x047F, r25
    2a7e:	80 93 7e 04 	sts	0x047E, r24
    2a82:	20 81       	ld	r18, Z
    2a84:	31 81       	ldd	r19, Z+1	; 0x01
    2a86:	37 fd       	sbrc	r19, 7
    2a88:	d3 c0       	rjmp	.+422    	; 0x2c30 <start_vertical_speed_control_right+0x20c>
    2a8a:	40 91 f3 02 	lds	r20, 0x02F3
    2a8e:	50 91 f4 02 	lds	r21, 0x02F4
    2a92:	b9 01       	movw	r22, r18
    2a94:	64 1b       	sub	r22, r20
    2a96:	75 0b       	sbc	r23, r21
    2a98:	ab 01       	movw	r20, r22
    2a9a:	70 93 a6 04 	sts	0x04A6, r23
    2a9e:	60 93 a5 04 	sts	0x04A5, r22
    2aa2:	20 91 07 03 	lds	r18, 0x0307
    2aa6:	30 91 08 03 	lds	r19, 0x0308
    2aaa:	24 0f       	add	r18, r20
    2aac:	35 1f       	adc	r19, r21
    2aae:	30 93 08 03 	sts	0x0308, r19
    2ab2:	20 93 07 03 	sts	0x0307, r18
    2ab6:	76 e0       	ldi	r23, 0x06	; 6
    2ab8:	21 34       	cpi	r18, 0x41	; 65
    2aba:	37 07       	cpc	r19, r23
    2abc:	0c f4       	brge	.+2      	; 0x2ac0 <start_vertical_speed_control_right+0x9c>
    2abe:	85 c0       	rjmp	.+266    	; 0x2bca <start_vertical_speed_control_right+0x1a6>
    2ac0:	20 e4       	ldi	r18, 0x40	; 64
    2ac2:	36 e0       	ldi	r19, 0x06	; 6
    2ac4:	30 93 08 03 	sts	0x0308, r19
    2ac8:	20 93 07 03 	sts	0x0307, r18
    2acc:	60 ec       	ldi	r22, 0xC0	; 192
    2ace:	72 e1       	ldi	r23, 0x12	; 18
    2ad0:	9a 01       	movw	r18, r20
    2ad2:	22 0f       	add	r18, r18
    2ad4:	33 1f       	adc	r19, r19
    2ad6:	24 0f       	add	r18, r20
    2ad8:	35 1f       	adc	r19, r21
    2ada:	22 0f       	add	r18, r18
    2adc:	33 1f       	adc	r19, r19
    2ade:	22 0f       	add	r18, r18
    2ae0:	33 1f       	adc	r19, r19
    2ae2:	22 0f       	add	r18, r18
    2ae4:	33 1f       	adc	r19, r19
    2ae6:	24 0f       	add	r18, r20
    2ae8:	35 1f       	adc	r19, r21
    2aea:	00 81       	ld	r16, Z
    2aec:	11 81       	ldd	r17, Z+1	; 0x01
    2aee:	c0 91 05 02 	lds	r28, 0x0205
    2af2:	d0 91 06 02 	lds	r29, 0x0206
    2af6:	0c 9f       	mul	r16, r28
    2af8:	d0 01       	movw	r26, r0
    2afa:	0d 9f       	mul	r16, r29
    2afc:	b0 0d       	add	r27, r0
    2afe:	1c 9f       	mul	r17, r28
    2b00:	b0 0d       	add	r27, r0
    2b02:	11 24       	eor	r1, r1
    2b04:	2a 0f       	add	r18, r26
    2b06:	3b 1f       	adc	r19, r27
    2b08:	84 1b       	sub	r24, r20
    2b0a:	95 0b       	sbc	r25, r21
    2b0c:	88 0f       	add	r24, r24
    2b0e:	99 1f       	adc	r25, r25
    2b10:	28 0f       	add	r18, r24
    2b12:	39 1f       	adc	r19, r25
    2b14:	26 0f       	add	r18, r22
    2b16:	37 1f       	adc	r19, r23
    2b18:	30 93 02 03 	sts	0x0302, r19
    2b1c:	20 93 01 03 	sts	0x0301, r18
    2b20:	37 fd       	sbrc	r19, 7
    2b22:	69 c0       	rjmp	.+210    	; 0x2bf6 <start_vertical_speed_control_right+0x1d2>
    2b24:	12 16       	cp	r1, r18
    2b26:	13 06       	cpc	r1, r19
    2b28:	0c f0       	brlt	.+2      	; 0x2b2c <start_vertical_speed_control_right+0x108>
    2b2a:	6f c0       	rjmp	.+222    	; 0x2c0a <start_vertical_speed_control_right+0x1e6>
    2b2c:	80 81       	ld	r24, Z
    2b2e:	91 81       	ldd	r25, Z+1	; 0x01
    2b30:	97 fd       	sbrc	r25, 7
    2b32:	89 c0       	rjmp	.+274    	; 0x2c46 <start_vertical_speed_control_right+0x222>
    2b34:	7d e5       	ldi	r23, 0x5D	; 93
    2b36:	21 3c       	cpi	r18, 0xC1	; 193
    2b38:	37 07       	cpc	r19, r23
    2b3a:	0c f4       	brge	.+2      	; 0x2b3e <start_vertical_speed_control_right+0x11a>
    2b3c:	66 c0       	rjmp	.+204    	; 0x2c0a <start_vertical_speed_control_right+0x1e6>
    2b3e:	80 ec       	ldi	r24, 0xC0	; 192
    2b40:	9d e5       	ldi	r25, 0x5D	; 93
    2b42:	90 93 02 03 	sts	0x0302, r25
    2b46:	80 93 01 03 	sts	0x0301, r24
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	92 e0       	ldi	r25, 0x02	; 2
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	80 83       	st	Z, r24
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	1f 91       	pop	r17
    2b58:	0f 91       	pop	r16
    2b5a:	08 95       	ret
    2b5c:	24 3b       	cpi	r18, 0xB4	; 180
    2b5e:	31 05       	cpc	r19, r1
    2b60:	94 f4       	brge	.+36     	; 0x2b86 <start_vertical_speed_control_right+0x162>
    2b62:	2a 35       	cpi	r18, 0x5A	; 90
    2b64:	31 05       	cpc	r19, r1
    2b66:	7c f4       	brge	.+30     	; 0x2b86 <start_vertical_speed_control_right+0x162>
    2b68:	18 16       	cp	r1, r24
    2b6a:	19 06       	cpc	r1, r25
    2b6c:	0c f0       	brlt	.+2      	; 0x2b70 <start_vertical_speed_control_right+0x14c>
    2b6e:	93 c0       	rjmp	.+294    	; 0x2c96 <start_vertical_speed_control_right+0x272>
    2b70:	35 95       	asr	r19
    2b72:	27 95       	ror	r18
    2b74:	35 95       	asr	r19
    2b76:	27 95       	ror	r18
    2b78:	27 5e       	subi	r18, 0xE7	; 231
    2b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b7c:	30 93 06 02 	sts	0x0206, r19
    2b80:	20 93 05 02 	sts	0x0205, r18
    2b84:	76 cf       	rjmp	.-276    	; 0x2a72 <start_vertical_speed_control_right+0x4e>
    2b86:	18 16       	cp	r1, r24
    2b88:	19 06       	cpc	r1, r25
    2b8a:	94 f5       	brge	.+100    	; 0x2bf0 <start_vertical_speed_control_right+0x1cc>
    2b8c:	84 eb       	ldi	r24, 0xB4	; 180
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	82 1b       	sub	r24, r18
    2b92:	93 0b       	sbc	r25, r19
    2b94:	95 95       	asr	r25
    2b96:	87 95       	ror	r24
    2b98:	95 95       	asr	r25
    2b9a:	87 95       	ror	r24
    2b9c:	49 96       	adiw	r24, 0x19	; 25
    2b9e:	90 93 06 02 	sts	0x0206, r25
    2ba2:	80 93 05 02 	sts	0x0205, r24
    2ba6:	65 cf       	rjmp	.-310    	; 0x2a72 <start_vertical_speed_control_right+0x4e>
    2ba8:	10 92 08 03 	sts	0x0308, r1
    2bac:	10 92 07 03 	sts	0x0307, r1
    2bb0:	10 92 a6 04 	sts	0x04A6, r1
    2bb4:	10 92 a5 04 	sts	0x04A5, r1
    2bb8:	10 92 7f 04 	sts	0x047F, r1
    2bbc:	10 92 7e 04 	sts	0x047E, r1
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	1f 91       	pop	r17
    2bc6:	0f 91       	pop	r16
    2bc8:	08 95       	ret
    2bca:	69 ef       	ldi	r22, 0xF9	; 249
    2bcc:	20 3c       	cpi	r18, 0xC0	; 192
    2bce:	36 07       	cpc	r19, r22
    2bd0:	4c f4       	brge	.+18     	; 0x2be4 <start_vertical_speed_control_right+0x1c0>
    2bd2:	20 ec       	ldi	r18, 0xC0	; 192
    2bd4:	39 ef       	ldi	r19, 0xF9	; 249
    2bd6:	30 93 08 03 	sts	0x0308, r19
    2bda:	20 93 07 03 	sts	0x0307, r18
    2bde:	60 e4       	ldi	r22, 0x40	; 64
    2be0:	7d ee       	ldi	r23, 0xED	; 237
    2be2:	76 cf       	rjmp	.-276    	; 0x2ad0 <start_vertical_speed_control_right+0xac>
    2be4:	b9 01       	movw	r22, r18
    2be6:	66 0f       	add	r22, r22
    2be8:	77 1f       	adc	r23, r23
    2bea:	62 0f       	add	r22, r18
    2bec:	73 1f       	adc	r23, r19
    2bee:	70 cf       	rjmp	.-288    	; 0x2ad0 <start_vertical_speed_control_right+0xac>
    2bf0:	84 eb       	ldi	r24, 0xB4	; 180
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	30 cf       	rjmp	.-416    	; 0x2a56 <start_vertical_speed_control_right+0x32>
    2bf6:	80 81       	ld	r24, Z
    2bf8:	91 81       	ldd	r25, Z+1	; 0x01
    2bfa:	97 fd       	sbrc	r25, 7
    2bfc:	06 c0       	rjmp	.+12     	; 0x2c0a <start_vertical_speed_control_right+0x1e6>
    2bfe:	10 92 02 03 	sts	0x0302, r1
    2c02:	10 92 01 03 	sts	0x0301, r1
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	82 ea       	ldi	r24, 0xA2	; 162
    2c0c:	20 34       	cpi	r18, 0x40	; 64
    2c0e:	38 07       	cpc	r19, r24
    2c10:	04 f5       	brge	.+64     	; 0x2c52 <start_vertical_speed_control_right+0x22e>
    2c12:	80 e4       	ldi	r24, 0x40	; 64
    2c14:	92 ea       	ldi	r25, 0xA2	; 162
    2c16:	90 93 02 03 	sts	0x0302, r25
    2c1a:	80 93 01 03 	sts	0x0301, r24
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	9e ef       	ldi	r25, 0xFE	; 254
    2c22:	91 83       	std	Z+1, r25	; 0x01
    2c24:	80 83       	st	Z, r24
    2c26:	df 91       	pop	r29
    2c28:	cf 91       	pop	r28
    2c2a:	1f 91       	pop	r17
    2c2c:	0f 91       	pop	r16
    2c2e:	08 95       	ret
    2c30:	40 91 f3 02 	lds	r20, 0x02F3
    2c34:	50 91 f4 02 	lds	r21, 0x02F4
    2c38:	42 0f       	add	r20, r18
    2c3a:	53 1f       	adc	r21, r19
    2c3c:	50 93 a6 04 	sts	0x04A6, r21
    2c40:	40 93 a5 04 	sts	0x04A5, r20
    2c44:	2e cf       	rjmp	.-420    	; 0x2aa2 <start_vertical_speed_control_right+0x7e>
    2c46:	10 92 02 03 	sts	0x0302, r1
    2c4a:	10 92 01 03 	sts	0x0301, r1
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	35 95       	asr	r19
    2c54:	27 95       	ror	r18
    2c56:	35 95       	asr	r19
    2c58:	27 95       	ror	r18
    2c5a:	35 95       	asr	r19
    2c5c:	27 95       	ror	r18
    2c5e:	35 95       	asr	r19
    2c60:	27 95       	ror	r18
    2c62:	31 83       	std	Z+1, r19	; 0x01
    2c64:	20 83       	st	Z, r18
    2c66:	42 e0       	ldi	r20, 0x02	; 2
    2c68:	21 30       	cpi	r18, 0x01	; 1
    2c6a:	34 07       	cpc	r19, r20
    2c6c:	0c f0       	brlt	.+2      	; 0x2c70 <start_vertical_speed_control_right+0x24c>
    2c6e:	6d cf       	rjmp	.-294    	; 0x2b4a <start_vertical_speed_control_right+0x126>
    2c70:	6e ef       	ldi	r22, 0xFE	; 254
    2c72:	20 30       	cpi	r18, 0x00	; 0
    2c74:	36 07       	cpc	r19, r22
    2c76:	9c f2       	brlt	.-90     	; 0x2c1e <start_vertical_speed_control_right+0x1fa>
    2c78:	6c cf       	rjmp	.-296    	; 0x2b52 <start_vertical_speed_control_right+0x12e>
    2c7a:	88 e6       	ldi	r24, 0x68	; 104
    2c7c:	91 e0       	ldi	r25, 0x01	; 1
    2c7e:	82 1b       	sub	r24, r18
    2c80:	93 0b       	sbc	r25, r19
    2c82:	95 95       	asr	r25
    2c84:	87 95       	ror	r24
    2c86:	95 95       	asr	r25
    2c88:	87 95       	ror	r24
    2c8a:	49 96       	adiw	r24, 0x19	; 25
    2c8c:	90 93 06 02 	sts	0x0206, r25
    2c90:	80 93 05 02 	sts	0x0205, r24
    2c94:	ee ce       	rjmp	.-548    	; 0x2a72 <start_vertical_speed_control_right+0x4e>
    2c96:	35 95       	asr	r19
    2c98:	27 95       	ror	r18
    2c9a:	35 95       	asr	r19
    2c9c:	27 95       	ror	r18
    2c9e:	89 e1       	ldi	r24, 0x19	; 25
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	82 1b       	sub	r24, r18
    2ca4:	93 0b       	sbc	r25, r19
    2ca6:	90 93 06 02 	sts	0x0206, r25
    2caa:	80 93 05 02 	sts	0x0205, r24
    2cae:	e1 ce       	rjmp	.-574    	; 0x2a72 <start_vertical_speed_control_right+0x4e>

00002cb0 <start_horizontal_speed_control_right>:
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	80 81       	ld	r24, Z
    2cb4:	91 81       	ldd	r25, Z+1	; 0x01
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <start_horizontal_speed_control_right+0xc>
    2cba:	7b c0       	rjmp	.+246    	; 0x2db2 <start_horizontal_speed_control_right+0x102>
    2cbc:	a0 91 a5 04 	lds	r26, 0x04A5
    2cc0:	b0 91 a6 04 	lds	r27, 0x04A6
    2cc4:	b0 93 7f 04 	sts	0x047F, r27
    2cc8:	a0 93 7e 04 	sts	0x047E, r26
    2ccc:	20 81       	ld	r18, Z
    2cce:	31 81       	ldd	r19, Z+1	; 0x01
    2cd0:	37 fd       	sbrc	r19, 7
    2cd2:	89 c0       	rjmp	.+274    	; 0x2de6 <start_horizontal_speed_control_right+0x136>
    2cd4:	80 91 f3 02 	lds	r24, 0x02F3
    2cd8:	90 91 f4 02 	lds	r25, 0x02F4
    2cdc:	a9 01       	movw	r20, r18
    2cde:	48 1b       	sub	r20, r24
    2ce0:	59 0b       	sbc	r21, r25
    2ce2:	ca 01       	movw	r24, r20
    2ce4:	50 93 a6 04 	sts	0x04A6, r21
    2ce8:	40 93 a5 04 	sts	0x04A5, r20
    2cec:	20 91 07 03 	lds	r18, 0x0307
    2cf0:	30 91 08 03 	lds	r19, 0x0308
    2cf4:	28 0f       	add	r18, r24
    2cf6:	39 1f       	adc	r19, r25
    2cf8:	30 93 08 03 	sts	0x0308, r19
    2cfc:	20 93 07 03 	sts	0x0307, r18
    2d00:	56 e0       	ldi	r21, 0x06	; 6
    2d02:	21 34       	cpi	r18, 0x41	; 65
    2d04:	35 07       	cpc	r19, r21
    2d06:	0c f4       	brge	.+2      	; 0x2d0a <start_horizontal_speed_control_right+0x5a>
    2d08:	61 c0       	rjmp	.+194    	; 0x2dcc <start_horizontal_speed_control_right+0x11c>
    2d0a:	20 e4       	ldi	r18, 0x40	; 64
    2d0c:	36 e0       	ldi	r19, 0x06	; 6
    2d0e:	30 93 08 03 	sts	0x0308, r19
    2d12:	20 93 07 03 	sts	0x0307, r18
    2d16:	60 e8       	ldi	r22, 0x80	; 128
    2d18:	7c e0       	ldi	r23, 0x0C	; 12
    2d1a:	9c 01       	movw	r18, r24
    2d1c:	22 0f       	add	r18, r18
    2d1e:	33 1f       	adc	r19, r19
    2d20:	28 0f       	add	r18, r24
    2d22:	39 1f       	adc	r19, r25
    2d24:	22 0f       	add	r18, r18
    2d26:	33 1f       	adc	r19, r19
    2d28:	22 0f       	add	r18, r18
    2d2a:	33 1f       	adc	r19, r19
    2d2c:	22 0f       	add	r18, r18
    2d2e:	33 1f       	adc	r19, r19
    2d30:	28 0f       	add	r18, r24
    2d32:	39 1f       	adc	r19, r25
    2d34:	40 81       	ld	r20, Z
    2d36:	51 81       	ldd	r21, Z+1	; 0x01
    2d38:	44 0f       	add	r20, r20
    2d3a:	55 1f       	adc	r21, r21
    2d3c:	44 0f       	add	r20, r20
    2d3e:	55 1f       	adc	r21, r21
    2d40:	44 0f       	add	r20, r20
    2d42:	55 1f       	adc	r21, r21
    2d44:	24 0f       	add	r18, r20
    2d46:	35 1f       	adc	r19, r21
    2d48:	ad 01       	movw	r20, r26
    2d4a:	48 1b       	sub	r20, r24
    2d4c:	59 0b       	sbc	r21, r25
    2d4e:	ca 01       	movw	r24, r20
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	84 0f       	add	r24, r20
    2d56:	95 1f       	adc	r25, r21
    2d58:	28 0f       	add	r18, r24
    2d5a:	39 1f       	adc	r19, r25
    2d5c:	26 0f       	add	r18, r22
    2d5e:	37 1f       	adc	r19, r23
    2d60:	30 93 02 03 	sts	0x0302, r19
    2d64:	20 93 01 03 	sts	0x0301, r18
    2d68:	37 fd       	sbrc	r19, 7
    2d6a:	4c c0       	rjmp	.+152    	; 0x2e04 <start_horizontal_speed_control_right+0x154>
    2d6c:	12 16       	cp	r1, r18
    2d6e:	13 06       	cpc	r1, r19
    2d70:	0c f0       	brlt	.+2      	; 0x2d74 <start_horizontal_speed_control_right+0xc4>
    2d72:	52 c0       	rjmp	.+164    	; 0x2e18 <start_horizontal_speed_control_right+0x168>
    2d74:	80 81       	ld	r24, Z
    2d76:	91 81       	ldd	r25, Z+1	; 0x01
    2d78:	97 fd       	sbrc	r25, 7
    2d7a:	67 c0       	rjmp	.+206    	; 0x2e4a <start_horizontal_speed_control_right+0x19a>
    2d7c:	5d e5       	ldi	r21, 0x5D	; 93
    2d7e:	21 3c       	cpi	r18, 0xC1	; 193
    2d80:	35 07       	cpc	r19, r21
    2d82:	0c f4       	brge	.+2      	; 0x2d86 <start_horizontal_speed_control_right+0xd6>
    2d84:	49 c0       	rjmp	.+146    	; 0x2e18 <start_horizontal_speed_control_right+0x168>
    2d86:	80 ec       	ldi	r24, 0xC0	; 192
    2d88:	9d e5       	ldi	r25, 0x5D	; 93
    2d8a:	90 93 02 03 	sts	0x0302, r25
    2d8e:	80 93 01 03 	sts	0x0301, r24
    2d92:	2c ed       	ldi	r18, 0xDC	; 220
    2d94:	35 e0       	ldi	r19, 0x05	; 5
    2d96:	22 5e       	subi	r18, 0xE2	; 226
    2d98:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9a:	31 83       	std	Z+1, r19	; 0x01
    2d9c:	20 83       	st	Z, r18
    2d9e:	42 e0       	ldi	r20, 0x02	; 2
    2da0:	21 30       	cpi	r18, 0x01	; 1
    2da2:	34 07       	cpc	r19, r20
    2da4:	0c f4       	brge	.+2      	; 0x2da8 <start_horizontal_speed_control_right+0xf8>
    2da6:	48 c0       	rjmp	.+144    	; 0x2e38 <start_horizontal_speed_control_right+0x188>
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	92 e0       	ldi	r25, 0x02	; 2
    2dac:	91 83       	std	Z+1, r25	; 0x01
    2dae:	80 83       	st	Z, r24
    2db0:	08 95       	ret
    2db2:	10 92 08 03 	sts	0x0308, r1
    2db6:	10 92 07 03 	sts	0x0307, r1
    2dba:	10 92 a6 04 	sts	0x04A6, r1
    2dbe:	10 92 a5 04 	sts	0x04A5, r1
    2dc2:	10 92 7f 04 	sts	0x047F, r1
    2dc6:	10 92 7e 04 	sts	0x047E, r1
    2dca:	08 95       	ret
    2dcc:	49 ef       	ldi	r20, 0xF9	; 249
    2dce:	20 3c       	cpi	r18, 0xC0	; 192
    2dd0:	34 07       	cpc	r19, r20
    2dd2:	a4 f4       	brge	.+40     	; 0x2dfc <start_horizontal_speed_control_right+0x14c>
    2dd4:	20 ec       	ldi	r18, 0xC0	; 192
    2dd6:	39 ef       	ldi	r19, 0xF9	; 249
    2dd8:	30 93 08 03 	sts	0x0308, r19
    2ddc:	20 93 07 03 	sts	0x0307, r18
    2de0:	60 e8       	ldi	r22, 0x80	; 128
    2de2:	73 ef       	ldi	r23, 0xF3	; 243
    2de4:	9a cf       	rjmp	.-204    	; 0x2d1a <start_horizontal_speed_control_right+0x6a>
    2de6:	80 91 f3 02 	lds	r24, 0x02F3
    2dea:	90 91 f4 02 	lds	r25, 0x02F4
    2dee:	82 0f       	add	r24, r18
    2df0:	93 1f       	adc	r25, r19
    2df2:	90 93 a6 04 	sts	0x04A6, r25
    2df6:	80 93 a5 04 	sts	0x04A5, r24
    2dfa:	78 cf       	rjmp	.-272    	; 0x2cec <start_horizontal_speed_control_right+0x3c>
    2dfc:	b9 01       	movw	r22, r18
    2dfe:	66 0f       	add	r22, r22
    2e00:	77 1f       	adc	r23, r23
    2e02:	8b cf       	rjmp	.-234    	; 0x2d1a <start_horizontal_speed_control_right+0x6a>
    2e04:	80 81       	ld	r24, Z
    2e06:	91 81       	ldd	r25, Z+1	; 0x01
    2e08:	97 fd       	sbrc	r25, 7
    2e0a:	06 c0       	rjmp	.+12     	; 0x2e18 <start_horizontal_speed_control_right+0x168>
    2e0c:	10 92 02 03 	sts	0x0302, r1
    2e10:	10 92 01 03 	sts	0x0301, r1
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	82 ea       	ldi	r24, 0xA2	; 162
    2e1a:	20 34       	cpi	r18, 0x40	; 64
    2e1c:	38 07       	cpc	r19, r24
    2e1e:	dc f4       	brge	.+54     	; 0x2e56 <start_horizontal_speed_control_right+0x1a6>
    2e20:	80 e4       	ldi	r24, 0x40	; 64
    2e22:	92 ea       	ldi	r25, 0xA2	; 162
    2e24:	90 93 02 03 	sts	0x0302, r25
    2e28:	80 93 01 03 	sts	0x0301, r24
    2e2c:	24 e2       	ldi	r18, 0x24	; 36
    2e2e:	3a ef       	ldi	r19, 0xFA	; 250
    2e30:	2e 51       	subi	r18, 0x1E	; 30
    2e32:	30 40       	sbci	r19, 0x00	; 0
    2e34:	31 83       	std	Z+1, r19	; 0x01
    2e36:	20 83       	st	Z, r18
    2e38:	5e ef       	ldi	r21, 0xFE	; 254
    2e3a:	20 30       	cpi	r18, 0x00	; 0
    2e3c:	35 07       	cpc	r19, r21
    2e3e:	24 f4       	brge	.+8      	; 0x2e48 <start_horizontal_speed_control_right+0x198>
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	9e ef       	ldi	r25, 0xFE	; 254
    2e44:	91 83       	std	Z+1, r25	; 0x01
    2e46:	80 83       	st	Z, r24
    2e48:	08 95       	ret
    2e4a:	10 92 02 03 	sts	0x0302, r1
    2e4e:	10 92 01 03 	sts	0x0301, r1
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	35 95       	asr	r19
    2e58:	27 95       	ror	r18
    2e5a:	35 95       	asr	r19
    2e5c:	27 95       	ror	r18
    2e5e:	35 95       	asr	r19
    2e60:	27 95       	ror	r18
    2e62:	35 95       	asr	r19
    2e64:	27 95       	ror	r18
    2e66:	31 83       	std	Z+1, r19	; 0x01
    2e68:	20 83       	st	Z, r18
    2e6a:	12 16       	cp	r1, r18
    2e6c:	13 06       	cpc	r1, r19
    2e6e:	0c f4       	brge	.+2      	; 0x2e72 <start_horizontal_speed_control_right+0x1c2>
    2e70:	92 cf       	rjmp	.-220    	; 0x2d96 <start_horizontal_speed_control_right+0xe6>
    2e72:	21 15       	cp	r18, r1
    2e74:	31 05       	cpc	r19, r1
    2e76:	e1 f6       	brne	.-72     	; 0x2e30 <start_horizontal_speed_control_right+0x180>
    2e78:	08 95       	ret

00002e7a <start_horizontal_speed_control_left>:
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	80 81       	ld	r24, Z
    2e7e:	91 81       	ldd	r25, Z+1	; 0x01
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <start_horizontal_speed_control_left+0xc>
    2e84:	7b c0       	rjmp	.+246    	; 0x2f7c <start_horizontal_speed_control_left+0x102>
    2e86:	a0 91 7c 04 	lds	r26, 0x047C
    2e8a:	b0 91 7d 04 	lds	r27, 0x047D
    2e8e:	b0 93 97 04 	sts	0x0497, r27
    2e92:	a0 93 96 04 	sts	0x0496, r26
    2e96:	20 81       	ld	r18, Z
    2e98:	31 81       	ldd	r19, Z+1	; 0x01
    2e9a:	37 fd       	sbrc	r19, 7
    2e9c:	89 c0       	rjmp	.+274    	; 0x2fb0 <start_horizontal_speed_control_left+0x136>
    2e9e:	80 91 f1 02 	lds	r24, 0x02F1
    2ea2:	90 91 f2 02 	lds	r25, 0x02F2
    2ea6:	a9 01       	movw	r20, r18
    2ea8:	48 1b       	sub	r20, r24
    2eaa:	59 0b       	sbc	r21, r25
    2eac:	ca 01       	movw	r24, r20
    2eae:	50 93 7d 04 	sts	0x047D, r21
    2eb2:	40 93 7c 04 	sts	0x047C, r20
    2eb6:	20 91 05 03 	lds	r18, 0x0305
    2eba:	30 91 06 03 	lds	r19, 0x0306
    2ebe:	28 0f       	add	r18, r24
    2ec0:	39 1f       	adc	r19, r25
    2ec2:	30 93 06 03 	sts	0x0306, r19
    2ec6:	20 93 05 03 	sts	0x0305, r18
    2eca:	56 e0       	ldi	r21, 0x06	; 6
    2ecc:	21 34       	cpi	r18, 0x41	; 65
    2ece:	35 07       	cpc	r19, r21
    2ed0:	0c f4       	brge	.+2      	; 0x2ed4 <start_horizontal_speed_control_left+0x5a>
    2ed2:	61 c0       	rjmp	.+194    	; 0x2f96 <start_horizontal_speed_control_left+0x11c>
    2ed4:	20 e4       	ldi	r18, 0x40	; 64
    2ed6:	36 e0       	ldi	r19, 0x06	; 6
    2ed8:	30 93 06 03 	sts	0x0306, r19
    2edc:	20 93 05 03 	sts	0x0305, r18
    2ee0:	60 e8       	ldi	r22, 0x80	; 128
    2ee2:	7c e0       	ldi	r23, 0x0C	; 12
    2ee4:	9c 01       	movw	r18, r24
    2ee6:	22 0f       	add	r18, r18
    2ee8:	33 1f       	adc	r19, r19
    2eea:	28 0f       	add	r18, r24
    2eec:	39 1f       	adc	r19, r25
    2eee:	22 0f       	add	r18, r18
    2ef0:	33 1f       	adc	r19, r19
    2ef2:	22 0f       	add	r18, r18
    2ef4:	33 1f       	adc	r19, r19
    2ef6:	22 0f       	add	r18, r18
    2ef8:	33 1f       	adc	r19, r19
    2efa:	28 0f       	add	r18, r24
    2efc:	39 1f       	adc	r19, r25
    2efe:	40 81       	ld	r20, Z
    2f00:	51 81       	ldd	r21, Z+1	; 0x01
    2f02:	44 0f       	add	r20, r20
    2f04:	55 1f       	adc	r21, r21
    2f06:	44 0f       	add	r20, r20
    2f08:	55 1f       	adc	r21, r21
    2f0a:	44 0f       	add	r20, r20
    2f0c:	55 1f       	adc	r21, r21
    2f0e:	24 0f       	add	r18, r20
    2f10:	35 1f       	adc	r19, r21
    2f12:	ad 01       	movw	r20, r26
    2f14:	48 1b       	sub	r20, r24
    2f16:	59 0b       	sbc	r21, r25
    2f18:	ca 01       	movw	r24, r20
    2f1a:	88 0f       	add	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	84 0f       	add	r24, r20
    2f20:	95 1f       	adc	r25, r21
    2f22:	28 0f       	add	r18, r24
    2f24:	39 1f       	adc	r19, r25
    2f26:	26 0f       	add	r18, r22
    2f28:	37 1f       	adc	r19, r23
    2f2a:	30 93 04 03 	sts	0x0304, r19
    2f2e:	20 93 03 03 	sts	0x0303, r18
    2f32:	37 fd       	sbrc	r19, 7
    2f34:	4c c0       	rjmp	.+152    	; 0x2fce <start_horizontal_speed_control_left+0x154>
    2f36:	12 16       	cp	r1, r18
    2f38:	13 06       	cpc	r1, r19
    2f3a:	0c f0       	brlt	.+2      	; 0x2f3e <start_horizontal_speed_control_left+0xc4>
    2f3c:	52 c0       	rjmp	.+164    	; 0x2fe2 <start_horizontal_speed_control_left+0x168>
    2f3e:	80 81       	ld	r24, Z
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	97 fd       	sbrc	r25, 7
    2f44:	67 c0       	rjmp	.+206    	; 0x3014 <start_horizontal_speed_control_left+0x19a>
    2f46:	5d e5       	ldi	r21, 0x5D	; 93
    2f48:	21 3c       	cpi	r18, 0xC1	; 193
    2f4a:	35 07       	cpc	r19, r21
    2f4c:	0c f4       	brge	.+2      	; 0x2f50 <start_horizontal_speed_control_left+0xd6>
    2f4e:	49 c0       	rjmp	.+146    	; 0x2fe2 <start_horizontal_speed_control_left+0x168>
    2f50:	80 ec       	ldi	r24, 0xC0	; 192
    2f52:	9d e5       	ldi	r25, 0x5D	; 93
    2f54:	90 93 04 03 	sts	0x0304, r25
    2f58:	80 93 03 03 	sts	0x0303, r24
    2f5c:	2c ed       	ldi	r18, 0xDC	; 220
    2f5e:	35 e0       	ldi	r19, 0x05	; 5
    2f60:	22 5e       	subi	r18, 0xE2	; 226
    2f62:	3f 4f       	sbci	r19, 0xFF	; 255
    2f64:	31 83       	std	Z+1, r19	; 0x01
    2f66:	20 83       	st	Z, r18
    2f68:	42 e0       	ldi	r20, 0x02	; 2
    2f6a:	21 30       	cpi	r18, 0x01	; 1
    2f6c:	34 07       	cpc	r19, r20
    2f6e:	0c f4       	brge	.+2      	; 0x2f72 <start_horizontal_speed_control_left+0xf8>
    2f70:	48 c0       	rjmp	.+144    	; 0x3002 <start_horizontal_speed_control_left+0x188>
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	92 e0       	ldi	r25, 0x02	; 2
    2f76:	91 83       	std	Z+1, r25	; 0x01
    2f78:	80 83       	st	Z, r24
    2f7a:	08 95       	ret
    2f7c:	10 92 06 03 	sts	0x0306, r1
    2f80:	10 92 05 03 	sts	0x0305, r1
    2f84:	10 92 7d 04 	sts	0x047D, r1
    2f88:	10 92 7c 04 	sts	0x047C, r1
    2f8c:	10 92 97 04 	sts	0x0497, r1
    2f90:	10 92 96 04 	sts	0x0496, r1
    2f94:	08 95       	ret
    2f96:	49 ef       	ldi	r20, 0xF9	; 249
    2f98:	20 3c       	cpi	r18, 0xC0	; 192
    2f9a:	34 07       	cpc	r19, r20
    2f9c:	a4 f4       	brge	.+40     	; 0x2fc6 <start_horizontal_speed_control_left+0x14c>
    2f9e:	20 ec       	ldi	r18, 0xC0	; 192
    2fa0:	39 ef       	ldi	r19, 0xF9	; 249
    2fa2:	30 93 06 03 	sts	0x0306, r19
    2fa6:	20 93 05 03 	sts	0x0305, r18
    2faa:	60 e8       	ldi	r22, 0x80	; 128
    2fac:	73 ef       	ldi	r23, 0xF3	; 243
    2fae:	9a cf       	rjmp	.-204    	; 0x2ee4 <start_horizontal_speed_control_left+0x6a>
    2fb0:	80 91 f1 02 	lds	r24, 0x02F1
    2fb4:	90 91 f2 02 	lds	r25, 0x02F2
    2fb8:	82 0f       	add	r24, r18
    2fba:	93 1f       	adc	r25, r19
    2fbc:	90 93 7d 04 	sts	0x047D, r25
    2fc0:	80 93 7c 04 	sts	0x047C, r24
    2fc4:	78 cf       	rjmp	.-272    	; 0x2eb6 <start_horizontal_speed_control_left+0x3c>
    2fc6:	b9 01       	movw	r22, r18
    2fc8:	66 0f       	add	r22, r22
    2fca:	77 1f       	adc	r23, r23
    2fcc:	8b cf       	rjmp	.-234    	; 0x2ee4 <start_horizontal_speed_control_left+0x6a>
    2fce:	80 81       	ld	r24, Z
    2fd0:	91 81       	ldd	r25, Z+1	; 0x01
    2fd2:	97 fd       	sbrc	r25, 7
    2fd4:	06 c0       	rjmp	.+12     	; 0x2fe2 <start_horizontal_speed_control_left+0x168>
    2fd6:	10 92 04 03 	sts	0x0304, r1
    2fda:	10 92 03 03 	sts	0x0303, r1
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	82 ea       	ldi	r24, 0xA2	; 162
    2fe4:	20 34       	cpi	r18, 0x40	; 64
    2fe6:	38 07       	cpc	r19, r24
    2fe8:	dc f4       	brge	.+54     	; 0x3020 <start_horizontal_speed_control_left+0x1a6>
    2fea:	80 e4       	ldi	r24, 0x40	; 64
    2fec:	92 ea       	ldi	r25, 0xA2	; 162
    2fee:	90 93 04 03 	sts	0x0304, r25
    2ff2:	80 93 03 03 	sts	0x0303, r24
    2ff6:	24 e2       	ldi	r18, 0x24	; 36
    2ff8:	3a ef       	ldi	r19, 0xFA	; 250
    2ffa:	2e 51       	subi	r18, 0x1E	; 30
    2ffc:	30 40       	sbci	r19, 0x00	; 0
    2ffe:	31 83       	std	Z+1, r19	; 0x01
    3000:	20 83       	st	Z, r18
    3002:	5e ef       	ldi	r21, 0xFE	; 254
    3004:	20 30       	cpi	r18, 0x00	; 0
    3006:	35 07       	cpc	r19, r21
    3008:	24 f4       	brge	.+8      	; 0x3012 <start_horizontal_speed_control_left+0x198>
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	9e ef       	ldi	r25, 0xFE	; 254
    300e:	91 83       	std	Z+1, r25	; 0x01
    3010:	80 83       	st	Z, r24
    3012:	08 95       	ret
    3014:	10 92 04 03 	sts	0x0304, r1
    3018:	10 92 03 03 	sts	0x0303, r1
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	35 95       	asr	r19
    3022:	27 95       	ror	r18
    3024:	35 95       	asr	r19
    3026:	27 95       	ror	r18
    3028:	35 95       	asr	r19
    302a:	27 95       	ror	r18
    302c:	35 95       	asr	r19
    302e:	27 95       	ror	r18
    3030:	31 83       	std	Z+1, r19	; 0x01
    3032:	20 83       	st	Z, r18
    3034:	12 16       	cp	r1, r18
    3036:	13 06       	cpc	r1, r19
    3038:	0c f4       	brge	.+2      	; 0x303c <start_horizontal_speed_control_left+0x1c2>
    303a:	92 cf       	rjmp	.-220    	; 0x2f60 <start_horizontal_speed_control_left+0xe6>
    303c:	21 15       	cp	r18, r1
    303e:	31 05       	cpc	r19, r1
    3040:	e1 f6       	brne	.-72     	; 0x2ffa <start_horizontal_speed_control_left+0x180>
    3042:	08 95       	ret

00003044 <initPortsIO>:
    3044:	85 b7       	in	r24, 0x35	; 53
    3046:	80 61       	ori	r24, 0x10	; 16
    3048:	85 bf       	out	0x35, r24	; 53
    304a:	8f ef       	ldi	r24, 0xFF	; 255
    304c:	81 b9       	out	0x01, r24	; 1
    304e:	12 b8       	out	0x02, r1	; 2
    3050:	97 ef       	ldi	r25, 0xF7	; 247
    3052:	94 b9       	out	0x04, r25	; 4
    3054:	90 ee       	ldi	r25, 0xE0	; 224
    3056:	95 b9       	out	0x05, r25	; 5
    3058:	90 ef       	ldi	r25, 0xF0	; 240
    305a:	97 b9       	out	0x07, r25	; 7
    305c:	90 eb       	ldi	r25, 0xB0	; 176
    305e:	98 b9       	out	0x08, r25	; 8
    3060:	9c ef       	ldi	r25, 0xFC	; 252
    3062:	9a b9       	out	0x0a, r25	; 10
    3064:	93 e0       	ldi	r25, 0x03	; 3
    3066:	9b b9       	out	0x0b, r25	; 11
    3068:	8d b9       	out	0x0d, r24	; 13
    306a:	1e b8       	out	0x0e, r1	; 14
    306c:	10 ba       	out	0x10, r1	; 16
    306e:	83 bb       	out	0x13, r24	; 19
    3070:	80 91 4c 04 	lds	r24, 0x044C
    3074:	88 23       	and	r24, r24
    3076:	e1 f0       	breq	.+56     	; 0x30b0 <initPortsIO+0x6c>
    3078:	81 30       	cpi	r24, 0x01	; 1
    307a:	d1 f0       	breq	.+52     	; 0x30b0 <initPortsIO+0x6c>
    307c:	82 30       	cpi	r24, 0x02	; 2
    307e:	51 f1       	breq	.+84     	; 0x30d4 <initPortsIO+0x90>
    3080:	9f ef       	ldi	r25, 0xFF	; 255
    3082:	90 93 01 01 	sts	0x0101, r25
    3086:	10 92 02 01 	sts	0x0102, r1
    308a:	9f e0       	ldi	r25, 0x0F	; 15
    308c:	90 93 04 01 	sts	0x0104, r25
    3090:	88 23       	and	r24, r24
    3092:	a9 f4       	brne	.+42     	; 0x30be <initPortsIO+0x7a>
    3094:	90 91 05 01 	lds	r25, 0x0105
    3098:	10 92 05 01 	sts	0x0105, r1
    309c:	10 92 07 01 	sts	0x0107, r1
    30a0:	9f ef       	ldi	r25, 0xFF	; 255
    30a2:	90 93 0a 01 	sts	0x010A, r25
    30a6:	88 23       	and	r24, r24
    30a8:	29 f4       	brne	.+10     	; 0x30b4 <initPortsIO+0x70>
    30aa:	10 92 0b 01 	sts	0x010B, r1
    30ae:	08 95       	ret
    30b0:	14 ba       	out	0x14, r1	; 20
    30b2:	e6 cf       	rjmp	.-52     	; 0x3080 <initPortsIO+0x3c>
    30b4:	81 30       	cpi	r24, 0x01	; 1
    30b6:	c9 f3       	breq	.-14     	; 0x30aa <initPortsIO+0x66>
    30b8:	82 30       	cpi	r24, 0x02	; 2
    30ba:	41 f0       	breq	.+16     	; 0x30cc <initPortsIO+0x88>
    30bc:	08 95       	ret
    30be:	81 30       	cpi	r24, 0x01	; 1
    30c0:	11 f0       	breq	.+4      	; 0x30c6 <initPortsIO+0x82>
    30c2:	82 30       	cpi	r24, 0x02	; 2
    30c4:	59 f7       	brne	.-42     	; 0x309c <initPortsIO+0x58>
    30c6:	90 93 05 01 	sts	0x0105, r25
    30ca:	e8 cf       	rjmp	.-48     	; 0x309c <initPortsIO+0x58>
    30cc:	87 ef       	ldi	r24, 0xF7	; 247
    30ce:	80 93 0b 01 	sts	0x010B, r24
    30d2:	08 95       	ret
    30d4:	98 e0       	ldi	r25, 0x08	; 8
    30d6:	94 bb       	out	0x14, r25	; 20
    30d8:	d3 cf       	rjmp	.-90     	; 0x3080 <initPortsIO+0x3c>

000030da <i2c_close>:
    30da:	10 92 b8 00 	sts	0x00B8, r1
    30de:	10 92 bc 00 	sts	0x00BC, r1
    30e2:	08 95       	ret

000030e4 <i2c_init>:
    30e4:	58 9a       	sbi	0x0b, 0	; 11
    30e6:	59 9a       	sbi	0x0b, 1	; 11
    30e8:	10 92 b9 00 	sts	0x00B9, r1
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	80 93 b8 00 	sts	0x00B8, r24
    30f2:	08 95       	ret

000030f4 <i2c_start>:
    30f4:	94 ea       	ldi	r25, 0xA4	; 164
    30f6:	90 93 bc 00 	sts	0x00BC, r25
    30fa:	90 91 bc 00 	lds	r25, 0x00BC
    30fe:	97 ff       	sbrs	r25, 7
    3100:	fc cf       	rjmp	.-8      	; 0x30fa <i2c_start+0x6>
    3102:	90 91 b9 00 	lds	r25, 0x00B9
    3106:	98 7f       	andi	r25, 0xF8	; 248
    3108:	98 30       	cpi	r25, 0x08	; 8
    310a:	21 f0       	breq	.+8      	; 0x3114 <i2c_start+0x20>
    310c:	90 31       	cpi	r25, 0x10	; 16
    310e:	11 f0       	breq	.+4      	; 0x3114 <i2c_start+0x20>
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	08 95       	ret
    3114:	80 93 bb 00 	sts	0x00BB, r24
    3118:	84 e8       	ldi	r24, 0x84	; 132
    311a:	80 93 bc 00 	sts	0x00BC, r24
    311e:	80 91 bc 00 	lds	r24, 0x00BC
    3122:	87 ff       	sbrs	r24, 7
    3124:	fc cf       	rjmp	.-8      	; 0x311e <i2c_start+0x2a>
    3126:	90 91 b9 00 	lds	r25, 0x00B9
    312a:	98 7f       	andi	r25, 0xF8	; 248
    312c:	98 31       	cpi	r25, 0x18	; 24
    312e:	21 f0       	breq	.+8      	; 0x3138 <i2c_start+0x44>
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	90 34       	cpi	r25, 0x40	; 64
    3134:	19 f0       	breq	.+6      	; 0x313c <i2c_start+0x48>
    3136:	08 95       	ret
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	08 95       	ret
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	08 95       	ret

00003140 <i2c_start_wait>:
    3140:	24 ea       	ldi	r18, 0xA4	; 164
    3142:	34 e8       	ldi	r19, 0x84	; 132
    3144:	44 e9       	ldi	r20, 0x94	; 148
    3146:	20 93 bc 00 	sts	0x00BC, r18
    314a:	90 91 bc 00 	lds	r25, 0x00BC
    314e:	97 ff       	sbrs	r25, 7
    3150:	fc cf       	rjmp	.-8      	; 0x314a <i2c_start_wait+0xa>
    3152:	90 91 b9 00 	lds	r25, 0x00B9
    3156:	98 7f       	andi	r25, 0xF8	; 248
    3158:	98 30       	cpi	r25, 0x08	; 8
    315a:	11 f0       	breq	.+4      	; 0x3160 <i2c_start_wait+0x20>
    315c:	90 31       	cpi	r25, 0x10	; 16
    315e:	99 f7       	brne	.-26     	; 0x3146 <i2c_start_wait+0x6>
    3160:	80 93 bb 00 	sts	0x00BB, r24
    3164:	30 93 bc 00 	sts	0x00BC, r19
    3168:	90 91 bc 00 	lds	r25, 0x00BC
    316c:	97 ff       	sbrs	r25, 7
    316e:	fc cf       	rjmp	.-8      	; 0x3168 <i2c_start_wait+0x28>
    3170:	90 91 b9 00 	lds	r25, 0x00B9
    3174:	98 7f       	andi	r25, 0xF8	; 248
    3176:	90 32       	cpi	r25, 0x20	; 32
    3178:	19 f0       	breq	.+6      	; 0x3180 <i2c_start_wait+0x40>
    317a:	98 35       	cpi	r25, 0x58	; 88
    317c:	09 f0       	breq	.+2      	; 0x3180 <i2c_start_wait+0x40>
    317e:	08 95       	ret
    3180:	40 93 bc 00 	sts	0x00BC, r20
    3184:	90 91 bc 00 	lds	r25, 0x00BC
    3188:	94 fd       	sbrc	r25, 4
    318a:	fc cf       	rjmp	.-8      	; 0x3184 <i2c_start_wait+0x44>
    318c:	dc cf       	rjmp	.-72     	; 0x3146 <i2c_start_wait+0x6>

0000318e <i2c_rep_start>:
    318e:	94 ea       	ldi	r25, 0xA4	; 164
    3190:	90 93 bc 00 	sts	0x00BC, r25
    3194:	90 91 bc 00 	lds	r25, 0x00BC
    3198:	97 ff       	sbrs	r25, 7
    319a:	fc cf       	rjmp	.-8      	; 0x3194 <i2c_rep_start+0x6>
    319c:	90 91 b9 00 	lds	r25, 0x00B9
    31a0:	98 7f       	andi	r25, 0xF8	; 248
    31a2:	98 30       	cpi	r25, 0x08	; 8
    31a4:	21 f0       	breq	.+8      	; 0x31ae <i2c_rep_start+0x20>
    31a6:	90 31       	cpi	r25, 0x10	; 16
    31a8:	11 f0       	breq	.+4      	; 0x31ae <i2c_rep_start+0x20>
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	08 95       	ret
    31ae:	80 93 bb 00 	sts	0x00BB, r24
    31b2:	84 e8       	ldi	r24, 0x84	; 132
    31b4:	80 93 bc 00 	sts	0x00BC, r24
    31b8:	80 91 bc 00 	lds	r24, 0x00BC
    31bc:	87 ff       	sbrs	r24, 7
    31be:	fc cf       	rjmp	.-8      	; 0x31b8 <i2c_rep_start+0x2a>
    31c0:	90 91 b9 00 	lds	r25, 0x00B9
    31c4:	98 7f       	andi	r25, 0xF8	; 248
    31c6:	98 31       	cpi	r25, 0x18	; 24
    31c8:	21 f0       	breq	.+8      	; 0x31d2 <i2c_rep_start+0x44>
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	90 34       	cpi	r25, 0x40	; 64
    31ce:	19 f0       	breq	.+6      	; 0x31d6 <i2c_rep_start+0x48>
    31d0:	08 95       	ret
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	08 95       	ret
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	08 95       	ret

000031da <i2c_stop>:
    31da:	84 e9       	ldi	r24, 0x94	; 148
    31dc:	80 93 bc 00 	sts	0x00BC, r24
    31e0:	80 91 bc 00 	lds	r24, 0x00BC
    31e4:	84 fd       	sbrc	r24, 4
    31e6:	fc cf       	rjmp	.-8      	; 0x31e0 <i2c_stop+0x6>
    31e8:	08 95       	ret

000031ea <i2c_write>:
    31ea:	80 93 bb 00 	sts	0x00BB, r24
    31ee:	84 e8       	ldi	r24, 0x84	; 132
    31f0:	80 93 bc 00 	sts	0x00BC, r24
    31f4:	80 91 bc 00 	lds	r24, 0x00BC
    31f8:	87 ff       	sbrs	r24, 7
    31fa:	fc cf       	rjmp	.-8      	; 0x31f4 <i2c_write+0xa>
    31fc:	90 91 b9 00 	lds	r25, 0x00B9
    3200:	98 7f       	andi	r25, 0xF8	; 248
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	98 32       	cpi	r25, 0x28	; 40
    3206:	09 f0       	breq	.+2      	; 0x320a <i2c_write+0x20>
    3208:	08 95       	ret
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	08 95       	ret

0000320e <i2c_readAck>:
    320e:	84 ec       	ldi	r24, 0xC4	; 196
    3210:	80 93 bc 00 	sts	0x00BC, r24
    3214:	80 91 bc 00 	lds	r24, 0x00BC
    3218:	87 ff       	sbrs	r24, 7
    321a:	fc cf       	rjmp	.-8      	; 0x3214 <i2c_readAck+0x6>
    321c:	80 91 bb 00 	lds	r24, 0x00BB
    3220:	08 95       	ret

00003222 <i2c_readNak>:
    3222:	84 e8       	ldi	r24, 0x84	; 132
    3224:	80 93 bc 00 	sts	0x00BC, r24
    3228:	80 91 bc 00 	lds	r24, 0x00BC
    322c:	87 ff       	sbrs	r24, 7
    322e:	fc cf       	rjmp	.-8      	; 0x3228 <i2c_readNak+0x6>
    3230:	80 91 bb 00 	lds	r24, 0x00BB
    3234:	08 95       	ret

00003236 <initUsart0>:
    3236:	10 92 c5 00 	sts	0x00C5, r1
    323a:	80 e1       	ldi	r24, 0x10	; 16
    323c:	80 93 c4 00 	sts	0x00C4, r24
    3240:	e0 ec       	ldi	r30, 0xC0	; 192
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	82 60       	ori	r24, 0x02	; 2
    3248:	80 83       	st	Z, r24
    324a:	e1 ec       	ldi	r30, 0xC1	; 193
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	80 81       	ld	r24, Z
    3250:	88 69       	ori	r24, 0x98	; 152
    3252:	80 83       	st	Z, r24
    3254:	e2 ec       	ldi	r30, 0xC2	; 194
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	86 60       	ori	r24, 0x06	; 6
    325c:	80 83       	st	Z, r24
    325e:	08 95       	ret

00003260 <initUsart1>:
    3260:	10 92 cd 00 	sts	0x00CD, r1
    3264:	80 e1       	ldi	r24, 0x10	; 16
    3266:	80 93 cc 00 	sts	0x00CC, r24
    326a:	e8 ec       	ldi	r30, 0xC8	; 200
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	82 60       	ori	r24, 0x02	; 2
    3272:	80 83       	st	Z, r24
    3274:	e9 ec       	ldi	r30, 0xC9	; 201
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	88 61       	ori	r24, 0x18	; 24
    327c:	80 83       	st	Z, r24
    327e:	ea ec       	ldi	r30, 0xCA	; 202
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	86 60       	ori	r24, 0x06	; 6
    3286:	80 83       	st	Z, r24
    3288:	08 95       	ret

0000328a <closeUsart>:
    328a:	10 92 c0 00 	sts	0x00C0, r1
    328e:	10 92 c1 00 	sts	0x00C1, r1
    3292:	10 92 c2 00 	sts	0x00C2, r1
    3296:	08 95       	ret

00003298 <usart0Transmit>:
    3298:	90 91 c0 00 	lds	r25, 0x00C0
    329c:	95 ff       	sbrs	r25, 5
    329e:	fc cf       	rjmp	.-8      	; 0x3298 <usart0Transmit>
    32a0:	80 93 c6 00 	sts	0x00C6, r24
    32a4:	66 23       	and	r22, r22
    32a6:	21 f0       	breq	.+8      	; 0x32b0 <usart0Transmit+0x18>
    32a8:	80 91 c0 00 	lds	r24, 0x00C0
    32ac:	86 ff       	sbrs	r24, 6
    32ae:	fc cf       	rjmp	.-8      	; 0x32a8 <usart0Transmit+0x10>
    32b0:	08 95       	ret

000032b2 <usart1Transmit>:
    32b2:	90 91 c8 00 	lds	r25, 0x00C8
    32b6:	95 ff       	sbrs	r25, 5
    32b8:	fc cf       	rjmp	.-8      	; 0x32b2 <usart1Transmit>
    32ba:	80 93 ce 00 	sts	0x00CE, r24
    32be:	66 23       	and	r22, r22
    32c0:	21 f0       	breq	.+8      	; 0x32ca <usart1Transmit+0x18>
    32c2:	80 91 c8 00 	lds	r24, 0x00C8
    32c6:	86 ff       	sbrs	r24, 6
    32c8:	fc cf       	rjmp	.-8      	; 0x32c2 <usart1Transmit+0x10>
    32ca:	08 95       	ret

000032cc <usart0InputBufferEmpty>:
    32cc:	80 91 c0 00 	lds	r24, 0x00C0
    32d0:	80 95       	com	r24
    32d2:	88 1f       	adc	r24, r24
    32d4:	88 27       	eor	r24, r24
    32d6:	88 1f       	adc	r24, r24
    32d8:	08 95       	ret

000032da <usart0Receive>:
    32da:	87 e9       	ldi	r24, 0x97	; 151
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	20 91 c0 00 	lds	r18, 0x00C0
    32e2:	27 fd       	sbrc	r18, 7
    32e4:	07 c0       	rjmp	.+14     	; 0x32f4 <usart0Receive+0x1a>
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	d1 f7       	brne	.-12     	; 0x32de <usart0Receive+0x4>
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	80 93 18 03 	sts	0x0318, r24
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	08 95       	ret
    32f4:	80 91 c6 00 	lds	r24, 0x00C6
    32f8:	08 95       	ret

000032fa <__vector_25>:
    32fa:	1f 92       	push	r1
    32fc:	0f 92       	push	r0
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	0f 92       	push	r0
    3302:	0b b6       	in	r0, 0x3b	; 59
    3304:	0f 92       	push	r0
    3306:	11 24       	eor	r1, r1
    3308:	2f 93       	push	r18
    330a:	3f 93       	push	r19
    330c:	4f 93       	push	r20
    330e:	5f 93       	push	r21
    3310:	6f 93       	push	r22
    3312:	7f 93       	push	r23
    3314:	8f 93       	push	r24
    3316:	9f 93       	push	r25
    3318:	af 93       	push	r26
    331a:	bf 93       	push	r27
    331c:	ef 93       	push	r30
    331e:	ff 93       	push	r31
    3320:	80 91 c6 00 	lds	r24, 0x00C6
    3324:	90 91 49 04 	lds	r25, 0x0449
    3328:	9f 30       	cpi	r25, 0x0F	; 15
    332a:	21 f1       	breq	.+72     	; 0x3374 <__vector_25+0x7a>
    332c:	90 91 11 02 	lds	r25, 0x0211
    3330:	99 23       	and	r25, r25
    3332:	d9 f4       	brne	.+54     	; 0x336a <__vector_25+0x70>
    3334:	90 91 1d 04 	lds	r25, 0x041D
    3338:	91 30       	cpi	r25, 0x01	; 1
    333a:	09 f4       	brne	.+2      	; 0x333e <__vector_25+0x44>
    333c:	60 c0       	rjmp	.+192    	; 0x33fe <__vector_25+0x104>
    333e:	92 30       	cpi	r25, 0x02	; 2
    3340:	09 f4       	brne	.+2      	; 0x3344 <__vector_25+0x4a>
    3342:	43 c0       	rjmp	.+134    	; 0x33ca <__vector_25+0xd0>
    3344:	ff 91       	pop	r31
    3346:	ef 91       	pop	r30
    3348:	bf 91       	pop	r27
    334a:	af 91       	pop	r26
    334c:	9f 91       	pop	r25
    334e:	8f 91       	pop	r24
    3350:	7f 91       	pop	r23
    3352:	6f 91       	pop	r22
    3354:	5f 91       	pop	r21
    3356:	4f 91       	pop	r20
    3358:	3f 91       	pop	r19
    335a:	2f 91       	pop	r18
    335c:	0f 90       	pop	r0
    335e:	0b be       	out	0x3b, r0	; 59
    3360:	0f 90       	pop	r0
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	0f 90       	pop	r0
    3366:	1f 90       	pop	r1
    3368:	18 95       	reti
    336a:	10 92 11 02 	sts	0x0211, r1
    336e:	80 93 1d 04 	sts	0x041D, r24
    3372:	e8 cf       	rjmp	.-48     	; 0x3344 <__vector_25+0x4a>
    3374:	8b 32       	cpi	r24, 0x2B	; 43
    3376:	09 f4       	brne	.+2      	; 0x337a <__vector_25+0x80>
    3378:	4c c0       	rjmp	.+152    	; 0x3412 <__vector_25+0x118>
    337a:	8d 32       	cpi	r24, 0x2D	; 45
    337c:	f1 f0       	breq	.+60     	; 0x33ba <__vector_25+0xc0>
    337e:	87 36       	cpi	r24, 0x67	; 103
    3380:	09 f0       	breq	.+2      	; 0x3384 <__vector_25+0x8a>
    3382:	5b c0       	rjmp	.+182    	; 0x343a <__vector_25+0x140>
    3384:	90 91 21 04 	lds	r25, 0x0421
    3388:	80 91 c0 00 	lds	r24, 0x00C0
    338c:	85 ff       	sbrs	r24, 5
    338e:	fc cf       	rjmp	.-8      	; 0x3388 <__vector_25+0x8e>
    3390:	90 93 c6 00 	sts	0x00C6, r25
    3394:	80 91 c0 00 	lds	r24, 0x00C0
    3398:	86 ff       	sbrs	r24, 6
    339a:	fc cf       	rjmp	.-8      	; 0x3394 <__vector_25+0x9a>
    339c:	90 91 66 00 	lds	r25, 0x0066
    33a0:	90 93 7b 04 	sts	0x047B, r25
    33a4:	80 91 c0 00 	lds	r24, 0x00C0
    33a8:	85 ff       	sbrs	r24, 5
    33aa:	fc cf       	rjmp	.-8      	; 0x33a4 <__vector_25+0xaa>
    33ac:	90 93 c6 00 	sts	0x00C6, r25
    33b0:	80 91 c0 00 	lds	r24, 0x00C0
    33b4:	86 ff       	sbrs	r24, 6
    33b6:	fc cf       	rjmp	.-8      	; 0x33b0 <__vector_25+0xb6>
    33b8:	c5 cf       	rjmp	.-118    	; 0x3344 <__vector_25+0x4a>
    33ba:	80 91 7b 04 	lds	r24, 0x047B
    33be:	88 23       	and	r24, r24
    33c0:	d1 f1       	breq	.+116    	; 0x3436 <__vector_25+0x13c>
    33c2:	81 50       	subi	r24, 0x01	; 1
    33c4:	80 93 7b 04 	sts	0x047B, r24
    33c8:	2b c0       	rjmp	.+86     	; 0x3420 <__vector_25+0x126>
    33ca:	40 91 1f 04 	lds	r20, 0x041F
    33ce:	44 23       	and	r20, r20
    33d0:	51 f1       	breq	.+84     	; 0x3426 <__vector_25+0x12c>
    33d2:	41 30       	cpi	r20, 0x01	; 1
    33d4:	09 f0       	breq	.+2      	; 0x33d8 <__vector_25+0xde>
    33d6:	b6 cf       	rjmp	.-148    	; 0x3344 <__vector_25+0x4a>
    33d8:	38 2f       	mov	r19, r24
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	80 91 11 03 	lds	r24, 0x0311
    33e0:	90 91 12 03 	lds	r25, 0x0312
    33e4:	82 2b       	or	r24, r18
    33e6:	93 2b       	or	r25, r19
    33e8:	90 93 12 03 	sts	0x0312, r25
    33ec:	80 93 11 03 	sts	0x0311, r24
    33f0:	40 93 1e 04 	sts	0x041E, r20
    33f4:	10 92 1f 04 	sts	0x041F, r1
    33f8:	40 93 11 02 	sts	0x0211, r20
    33fc:	a3 cf       	rjmp	.-186    	; 0x3344 <__vector_25+0x4a>
    33fe:	8a 3a       	cpi	r24, 0xAA	; 170
    3400:	31 f1       	breq	.+76     	; 0x344e <__vector_25+0x154>
    3402:	85 35       	cpi	r24, 0x55	; 85
    3404:	09 f0       	breq	.+2      	; 0x3408 <__vector_25+0x10e>
    3406:	9e cf       	rjmp	.-196    	; 0x3344 <__vector_25+0x4a>
    3408:	90 93 11 02 	sts	0x0211, r25
    340c:	10 92 1d 04 	sts	0x041D, r1
    3410:	99 cf       	rjmp	.-206    	; 0x3344 <__vector_25+0x4a>
    3412:	80 91 7b 04 	lds	r24, 0x047B
    3416:	8f 3f       	cpi	r24, 0xFF	; 255
    3418:	e9 f0       	breq	.+58     	; 0x3454 <__vector_25+0x15a>
    341a:	8f 5f       	subi	r24, 0xFF	; 255
    341c:	80 93 7b 04 	sts	0x047B, r24
    3420:	80 93 66 00 	sts	0x0066, r24
    3424:	8f cf       	rjmp	.-226    	; 0x3344 <__vector_25+0x4a>
    3426:	80 93 11 03 	sts	0x0311, r24
    342a:	10 92 12 03 	sts	0x0312, r1
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	80 93 1f 04 	sts	0x041F, r24
    3434:	87 cf       	rjmp	.-242    	; 0x3344 <__vector_25+0x4a>
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	f3 cf       	rjmp	.-26     	; 0x3420 <__vector_25+0x126>
    343a:	83 37       	cpi	r24, 0x73	; 115
    343c:	09 f0       	breq	.+2      	; 0x3440 <__vector_25+0x146>
    343e:	82 cf       	rjmp	.-252    	; 0x3344 <__vector_25+0x4a>
    3440:	8d ef       	ldi	r24, 0xFD	; 253
    3442:	9f e0       	ldi	r25, 0x0F	; 15
    3444:	60 91 7b 04 	lds	r22, 0x047B
    3448:	0e 94 d5 32 	call	0x65aa	; 0x65aa <__eewr_byte_m2560>
    344c:	7b cf       	rjmp	.-266    	; 0x3344 <__vector_25+0x4a>
    344e:	90 93 20 04 	sts	0x0420, r25
    3452:	78 cf       	rjmp	.-272    	; 0x3344 <__vector_25+0x4a>
    3454:	8f ef       	ldi	r24, 0xFF	; 255
    3456:	e4 cf       	rjmp	.-56     	; 0x3420 <__vector_25+0x126>

00003458 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    3458:	86 b1       	in	r24, 0x06	; 6
    345a:	66 b1       	in	r22, 0x06	; 6
    345c:	26 b1       	in	r18, 0x06	; 6
    345e:	46 b1       	in	r20, 0x06	; 6
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	28 70       	andi	r18, 0x08	; 8
    3464:	30 70       	andi	r19, 0x00	; 0
    3466:	35 95       	asr	r19
    3468:	27 95       	ror	r18
    346a:	35 95       	asr	r19
    346c:	27 95       	ror	r18
    346e:	35 95       	asr	r19
    3470:	27 95       	ror	r18
    3472:	22 0f       	add	r18, r18
    3474:	33 1f       	adc	r19, r19
    3476:	70 e0       	ldi	r23, 0x00	; 0
    3478:	64 70       	andi	r22, 0x04	; 4
    347a:	70 70       	andi	r23, 0x00	; 0
    347c:	75 95       	asr	r23
    347e:	67 95       	ror	r22
    3480:	75 95       	asr	r23
    3482:	67 95       	ror	r22
    3484:	26 0f       	add	r18, r22
    3486:	37 1f       	adc	r19, r23
    3488:	22 0f       	add	r18, r18
    348a:	33 1f       	adc	r19, r19
    348c:	50 e0       	ldi	r21, 0x00	; 0
    348e:	42 70       	andi	r20, 0x02	; 2
    3490:	50 70       	andi	r21, 0x00	; 0
    3492:	55 95       	asr	r21
    3494:	47 95       	ror	r20
    3496:	24 0f       	add	r18, r20
    3498:	35 1f       	adc	r19, r21
    349a:	22 0f       	add	r18, r18
    349c:	81 70       	andi	r24, 0x01	; 1
}
    349e:	82 0f       	add	r24, r18
    34a0:	08 95       	ret

000034a2 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    34a2:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    34a4:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    34a6:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    34a8:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    34ac:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    34b0:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    34b4:	8e ef       	ldi	r24, 0xFE	; 254
    34b6:	9f e0       	ldi	r25, 0x0F	; 15
    34b8:	0e 94 cf 32 	call	0x659e	; 0x659e <__eerd_word_m2560>
    34bc:	90 93 12 03 	sts	0x0312, r25
    34c0:	80 93 11 03 	sts	0x0311, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    34c4:	8d ef       	ldi	r24, 0xFD	; 253
    34c6:	9f e0       	ldi	r25, 0x0F	; 15
    34c8:	0e 94 c7 32 	call	0x658e	; 0x658e <__eerd_byte_m2560>
    34cc:	80 93 7b 04 	sts	0x047B, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    34d0:	98 2f       	mov	r25, r24
    34d2:	91 50       	subi	r25, 0x01	; 1
    34d4:	9e 3f       	cpi	r25, 0xFE	; 254
    34d6:	d8 f5       	brcc	.+118    	; 0x354e <initPeripherals+0xac>
		OSCCAL = currentOsccal;
    34d8:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    34dc:	80 91 11 03 	lds	r24, 0x0311
    34e0:	90 91 12 03 	lds	r25, 0x0312
    34e4:	9c 01       	movw	r18, r24
    34e6:	21 58       	subi	r18, 0x81	; 129
    34e8:	3c 40       	sbci	r19, 0x0C	; 12
    34ea:	23 30       	cpi	r18, 0x03	; 3
    34ec:	31 05       	cpc	r19, r1
    34ee:	f8 f4       	brcc	.+62     	; 0x352e <initPeripherals+0x8c>
		hardwareRevision = HW_REV_3_0;
    34f0:	10 92 4c 04 	sts	0x044C, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    34f4:	0e 94 22 18 	call	0x3044	; 0x3044 <initPortsIO>
	initAdc();
    34f8:	0e 94 5f 1b 	call	0x36be	; 0x36be <initAdc>
	initMotors();
    34fc:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <initMotors>
	initRGBleds();
    3500:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <initRGBleds>
	initSPI();
    3504:	0e 94 47 0a 	call	0x148e	; 0x148e <initSPI>
	mirf_init();
    3508:	0e 94 30 0b 	call	0x1660	; 0x1660 <mirf_init>
	if(spiCommError==0) {
    350c:	80 91 14 03 	lds	r24, 0x0314
    3510:	88 23       	and	r24, r24
    3512:	29 f4       	brne	.+10     	; 0x351e <initPeripherals+0x7c>
		rfFlags |= 1;
    3514:	80 91 13 03 	lds	r24, 0x0313
    3518:	81 60       	ori	r24, 0x01	; 1
    351a:	80 93 13 03 	sts	0x0313, r24
	}
	initUsart0();
    351e:	0e 94 1b 19 	call	0x3236	; 0x3236 <initUsart0>
	initAccelerometer();
    3522:	0e 94 40 28 	call	0x5080	; 0x5080 <initAccelerometer>
	init_ir_remote_control();
    3526:	0e 94 40 10 	call	0x2080	; 0x2080 <init_ir_remote_control>

	sei();			// enable global interrupts
    352a:	78 94       	sei

	
}
    352c:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    352e:	2c e0       	ldi	r18, 0x0C	; 12
    3530:	80 38       	cpi	r24, 0x80	; 128
    3532:	92 07       	cpc	r25, r18
    3534:	21 f4       	brne	.+8      	; 0x353e <initPeripherals+0x9c>
		hardwareRevision = HW_REV_3_0_1;
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	80 93 4c 04 	sts	0x044C, r24
    353c:	db cf       	rjmp	.-74     	; 0x34f4 <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    353e:	2c e0       	ldi	r18, 0x0C	; 12
    3540:	84 38       	cpi	r24, 0x84	; 132
    3542:	92 07       	cpc	r25, r18
    3544:	b8 f2       	brcs	.-82     	; 0x34f4 <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    3546:	82 e0       	ldi	r24, 0x02	; 2
    3548:	80 93 4c 04 	sts	0x044C, r24
    354c:	d3 cf       	rjmp	.-90     	; 0x34f4 <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    354e:	60 91 66 00 	lds	r22, 0x0066
    3552:	60 93 7b 04 	sts	0x047B, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    3556:	8d ef       	ldi	r24, 0xFD	; 253
    3558:	9f e0       	ldi	r25, 0x0F	; 15
    355a:	0e 94 d5 32 	call	0x65aa	; 0x65aa <__eewr_byte_m2560>
    355e:	be cf       	rjmp	.-132    	; 0x34dc <initPeripherals+0x3a>

00003560 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    3560:	1f 92       	push	r1
    3562:	0f 92       	push	r0
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	0f 92       	push	r0
    3568:	11 24       	eor	r1, r1

}
    356a:	0f 90       	pop	r0
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	0f 90       	pop	r0
    3570:	1f 90       	pop	r1
    3572:	18 95       	reti

00003574 <sleep>:

void sleep(unsigned char seconds) {
    3574:	cf 93       	push	r28
    3576:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    3578:	9e e1       	ldi	r25, 0x1E	; 30
    357a:	89 9f       	mul	r24, r25
    357c:	e0 01       	movw	r28, r0
    357e:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    3580:	80 91 68 00 	lds	r24, 0x0068
    3584:	8d 7f       	andi	r24, 0xFD	; 253
    3586:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    358a:	80 91 6c 00 	lds	r24, 0x006C
    358e:	8f 77       	andi	r24, 0x7F	; 127
    3590:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    3594:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    3596:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    359a:	80 91 7a 00 	lds	r24, 0x007A
    359e:	80 61       	ori	r24, 0x10	; 16
    35a0:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    35a4:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    35a8:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    35ac:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    35b0:	88 b3       	in	r24, 0x18	; 24
    35b2:	87 60       	ori	r24, 0x07	; 7
    35b4:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    35b6:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    35ba:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    35be:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    35c2:	89 b3       	in	r24, 0x19	; 25
    35c4:	87 60       	ori	r24, 0x07	; 7
    35c6:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    35c8:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    35cc:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    35d0:	0e 94 45 19 	call	0x328a	; 0x328a <closeUsart>
	closeSPI();
    35d4:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <closeSPI>
	i2c_close();
    35d8:	0e 94 6d 18 	call	0x30da	; 0x30da <i2c_close>

	// set port pins
	initPortsIO();
    35dc:	0e 94 22 18 	call	0x3044	; 0x3044 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    35e0:	83 b7       	in	r24, 0x33	; 51
    35e2:	8f 60       	ori	r24, 0x0F	; 15
    35e4:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    35ec:	80 91 b0 00 	lds	r24, 0x00B0
    35f0:	8d 7f       	andi	r24, 0xFD	; 253
    35f2:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    35f6:	80 91 b1 00 	lds	r24, 0x00B1
    35fa:	87 60       	ori	r24, 0x07	; 7
    35fc:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    3600:	20 97       	sbiw	r28, 0x00	; 0
    3602:	19 f0       	breq	.+6      	; 0x360a <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3604:	88 95       	sleep
		pause--;
    3606:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    3608:	e9 f7       	brne	.-6      	; 0x3604 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    360a:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    360c:	80 91 b1 00 	lds	r24, 0x00B1
    3610:	88 7f       	andi	r24, 0xF8	; 248
    3612:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    3616:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    361a:	80 91 b0 00 	lds	r24, 0x00B0
    361e:	82 60       	ori	r24, 0x02	; 2
    3620:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3624:	8f ef       	ldi	r24, 0xFF	; 255
    3626:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    362a:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    362e:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    3632:	10 92 f6 02 	sts	0x02F6, r1
    3636:	10 92 f5 02 	sts	0x02F5, r1
	pwm_left = 0;
    363a:	10 92 f8 02 	sts	0x02F8, r1
    363e:	10 92 f7 02 	sts	0x02F7, r1
	initPeripherals();
    3642:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <initPeripherals>

}
    3646:	df 91       	pop	r29
    3648:	cf 91       	pop	r28
    364a:	08 95       	ret

0000364c <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
	return clockTick;
    364c:	60 91 41 04 	lds	r22, 0x0441
    3650:	70 91 42 04 	lds	r23, 0x0442
}
    3654:	80 91 43 04 	lds	r24, 0x0443
    3658:	90 91 44 04 	lds	r25, 0x0444
    365c:	08 95       	ret

0000365e <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	80 93 bf 02 	sts	0x02BF, r24
}
    3664:	08 95       	ret

00003666 <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	dc 01       	movw	r26, r24
    366c:	80 93 d5 02 	sts	0x02D5, r24
    3670:	90 93 d6 02 	sts	0x02D6, r25
    3674:	a0 93 d7 02 	sts	0x02D7, r26
    3678:	b0 93 d8 02 	sts	0x02D8, r27
	rightMotSteps = 0;
    367c:	80 93 d1 02 	sts	0x02D1, r24
    3680:	90 93 d2 02 	sts	0x02D2, r25
    3684:	a0 93 d3 02 	sts	0x02D3, r26
    3688:	b0 93 d4 02 	sts	0x02D4, r27
	theta = 0;
    368c:	80 93 65 04 	sts	0x0465, r24
    3690:	90 93 66 04 	sts	0x0466, r25
    3694:	a0 93 67 04 	sts	0x0467, r26
    3698:	b0 93 68 04 	sts	0x0468, r27
	xPos = 0;
    369c:	80 93 69 04 	sts	0x0469, r24
    36a0:	90 93 6a 04 	sts	0x046A, r25
    36a4:	a0 93 6b 04 	sts	0x046B, r26
    36a8:	b0 93 6c 04 	sts	0x046C, r27
	yPos = 0;
    36ac:	80 93 6d 04 	sts	0x046D, r24
    36b0:	90 93 6e 04 	sts	0x046E, r25
    36b4:	a0 93 6f 04 	sts	0x046F, r26
    36b8:	b0 93 70 04 	sts	0x0470, r27
}
    36bc:	08 95       	ret

000036be <initAdc>:
    36be:	cf 93       	push	r28
    36c0:	df 93       	push	r29
    36c2:	ea e7       	ldi	r30, 0x7A	; 122
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
    36c6:	10 82       	st	Z, r1
    36c8:	ab e7       	ldi	r26, 0x7B	; 123
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	1c 92       	st	X, r1
    36ce:	cc e7       	ldi	r28, 0x7C	; 124
    36d0:	d0 e0       	ldi	r29, 0x00	; 0
    36d2:	18 82       	st	Y, r1
    36d4:	80 81       	ld	r24, Z
    36d6:	86 60       	ori	r24, 0x06	; 6
    36d8:	80 83       	st	Z, r24
    36da:	88 81       	ld	r24, Y
    36dc:	80 64       	ori	r24, 0x40	; 64
    36de:	88 83       	st	Y, r24
    36e0:	80 81       	ld	r24, Z
    36e2:	80 62       	ori	r24, 0x20	; 32
    36e4:	80 83       	st	Z, r24
    36e6:	8c 91       	ld	r24, X
    36e8:	88 7f       	andi	r24, 0xF8	; 248
    36ea:	8c 93       	st	X, r24
    36ec:	80 81       	ld	r24, Z
    36ee:	88 60       	ori	r24, 0x08	; 8
    36f0:	80 83       	st	Z, r24
    36f2:	80 81       	ld	r24, Z
    36f4:	80 68       	ori	r24, 0x80	; 128
    36f6:	80 83       	st	Z, r24
    36f8:	80 81       	ld	r24, Z
    36fa:	80 64       	ori	r24, 0x40	; 64
    36fc:	80 83       	st	Z, r24
    36fe:	df 91       	pop	r29
    3700:	cf 91       	pop	r28
    3702:	08 95       	ret

00003704 <__vector_29>:
    3704:	1f 92       	push	r1
    3706:	0f 92       	push	r0
    3708:	0f b6       	in	r0, 0x3f	; 63
    370a:	0f 92       	push	r0
    370c:	0b b6       	in	r0, 0x3b	; 59
    370e:	0f 92       	push	r0
    3710:	11 24       	eor	r1, r1
    3712:	2f 93       	push	r18
    3714:	3f 93       	push	r19
    3716:	4f 93       	push	r20
    3718:	5f 93       	push	r21
    371a:	6f 93       	push	r22
    371c:	7f 93       	push	r23
    371e:	8f 93       	push	r24
    3720:	9f 93       	push	r25
    3722:	ef 93       	push	r30
    3724:	ff 93       	push	r31
    3726:	40 91 41 04 	lds	r20, 0x0441
    372a:	30 91 42 04 	lds	r19, 0x0442
    372e:	20 91 43 04 	lds	r18, 0x0443
    3732:	90 91 44 04 	lds	r25, 0x0444
    3736:	80 91 45 04 	lds	r24, 0x0445
    373a:	e0 91 46 04 	lds	r30, 0x0446
    373e:	70 91 47 04 	lds	r23, 0x0447
    3742:	f0 91 48 04 	lds	r31, 0x0448
    3746:	64 2f       	mov	r22, r20
    3748:	6f 5f       	subi	r22, 0xFF	; 255
    374a:	51 e0       	ldi	r21, 0x01	; 1
    374c:	64 17       	cp	r22, r20
    374e:	08 f0       	brcs	.+2      	; 0x3752 <__vector_29+0x4e>
    3750:	50 e0       	ldi	r21, 0x00	; 0
    3752:	53 0f       	add	r21, r19
    3754:	41 e0       	ldi	r20, 0x01	; 1
    3756:	53 17       	cp	r21, r19
    3758:	08 f0       	brcs	.+2      	; 0x375c <__vector_29+0x58>
    375a:	40 e0       	ldi	r20, 0x00	; 0
    375c:	42 0f       	add	r20, r18
    375e:	31 e0       	ldi	r19, 0x01	; 1
    3760:	42 17       	cp	r20, r18
    3762:	08 f0       	brcs	.+2      	; 0x3766 <__vector_29+0x62>
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	39 0f       	add	r19, r25
    3768:	21 e0       	ldi	r18, 0x01	; 1
    376a:	39 17       	cp	r19, r25
    376c:	08 f0       	brcs	.+2      	; 0x3770 <__vector_29+0x6c>
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	28 0f       	add	r18, r24
    3772:	91 e0       	ldi	r25, 0x01	; 1
    3774:	28 17       	cp	r18, r24
    3776:	08 f0       	brcs	.+2      	; 0x377a <__vector_29+0x76>
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	9e 0f       	add	r25, r30
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	9e 17       	cp	r25, r30
    3780:	08 f0       	brcs	.+2      	; 0x3784 <__vector_29+0x80>
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	87 0f       	add	r24, r23
    3786:	e1 e0       	ldi	r30, 0x01	; 1
    3788:	87 17       	cp	r24, r23
    378a:	08 f0       	brcs	.+2      	; 0x378e <__vector_29+0x8a>
    378c:	e0 e0       	ldi	r30, 0x00	; 0
    378e:	ef 0f       	add	r30, r31
    3790:	60 93 41 04 	sts	0x0441, r22
    3794:	50 93 42 04 	sts	0x0442, r21
    3798:	40 93 43 04 	sts	0x0443, r20
    379c:	30 93 44 04 	sts	0x0444, r19
    37a0:	20 93 45 04 	sts	0x0445, r18
    37a4:	90 93 46 04 	sts	0x0446, r25
    37a8:	80 93 47 04 	sts	0x0447, r24
    37ac:	e0 93 48 04 	sts	0x0448, r30
    37b0:	20 91 78 00 	lds	r18, 0x0078
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	40 91 79 00 	lds	r20, 0x0079
    37ba:	94 2f       	mov	r25, r20
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	28 2b       	or	r18, r24
    37c0:	39 2b       	or	r19, r25
    37c2:	80 91 b9 02 	lds	r24, 0x02B9
    37c6:	82 30       	cpi	r24, 0x02	; 2
    37c8:	09 f4       	brne	.+2      	; 0x37cc <__vector_29+0xc8>
    37ca:	b1 c1       	rjmp	.+866    	; 0x3b2e <__vector_29+0x42a>
    37cc:	83 30       	cpi	r24, 0x03	; 3
    37ce:	08 f4       	brcc	.+2      	; 0x37d2 <__vector_29+0xce>
    37d0:	44 c0       	rjmp	.+136    	; 0x385a <__vector_29+0x156>
    37d2:	83 30       	cpi	r24, 0x03	; 3
    37d4:	09 f4       	brne	.+2      	; 0x37d8 <__vector_29+0xd4>
    37d6:	d4 c1       	rjmp	.+936    	; 0x3b80 <__vector_29+0x47c>
    37d8:	84 30       	cpi	r24, 0x04	; 4
    37da:	09 f4       	brne	.+2      	; 0x37de <__vector_29+0xda>
    37dc:	67 c1       	rjmp	.+718    	; 0x3aac <__vector_29+0x3a8>
    37de:	80 91 ba 02 	lds	r24, 0x02BA
    37e2:	82 30       	cpi	r24, 0x02	; 2
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <__vector_29+0xe4>
    37e6:	4e c1       	rjmp	.+668    	; 0x3a84 <__vector_29+0x380>
    37e8:	83 30       	cpi	r24, 0x03	; 3
    37ea:	08 f0       	brcs	.+2      	; 0x37ee <__vector_29+0xea>
    37ec:	cc c0       	rjmp	.+408    	; 0x3986 <__vector_29+0x282>
    37ee:	88 23       	and	r24, r24
    37f0:	09 f0       	breq	.+2      	; 0x37f4 <__vector_29+0xf0>
    37f2:	23 c1       	rjmp	.+582    	; 0x3a3a <__vector_29+0x336>
    37f4:	80 91 24 02 	lds	r24, 0x0224
    37f8:	86 95       	lsr	r24
    37fa:	80 93 23 02 	sts	0x0223, r24
    37fe:	80 91 bb 02 	lds	r24, 0x02BB
    3802:	88 23       	and	r24, r24
    3804:	09 f0       	breq	.+2      	; 0x3808 <__vector_29+0x104>
    3806:	ec c1       	rjmp	.+984    	; 0x3be0 <__vector_29+0x4dc>
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	80 93 b9 02 	sts	0x02B9, r24
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	80 93 ba 02 	sts	0x02BA, r24
    3814:	90 91 23 02 	lds	r25, 0x0223
    3818:	98 30       	cpi	r25, 0x08	; 8
    381a:	08 f0       	brcs	.+2      	; 0x381e <__vector_29+0x11a>
    381c:	ec c0       	rjmp	.+472    	; 0x39f6 <__vector_29+0x2f2>
    381e:	90 91 7b 00 	lds	r25, 0x007B
    3822:	97 7f       	andi	r25, 0xF7	; 247
    3824:	90 93 7b 00 	sts	0x007B, r25
    3828:	90 91 23 02 	lds	r25, 0x0223
    382c:	90 5c       	subi	r25, 0xC0	; 192
    382e:	90 93 7c 00 	sts	0x007C, r25
    3832:	82 30       	cpi	r24, 0x02	; 2
    3834:	09 f4       	brne	.+2      	; 0x3838 <__vector_29+0x134>
    3836:	ec c0       	rjmp	.+472    	; 0x3a10 <__vector_29+0x30c>
    3838:	ff 91       	pop	r31
    383a:	ef 91       	pop	r30
    383c:	9f 91       	pop	r25
    383e:	8f 91       	pop	r24
    3840:	7f 91       	pop	r23
    3842:	6f 91       	pop	r22
    3844:	5f 91       	pop	r21
    3846:	4f 91       	pop	r20
    3848:	3f 91       	pop	r19
    384a:	2f 91       	pop	r18
    384c:	0f 90       	pop	r0
    384e:	0b be       	out	0x3b, r0	; 59
    3850:	0f 90       	pop	r0
    3852:	0f be       	out	0x3f, r0	; 63
    3854:	0f 90       	pop	r0
    3856:	1f 90       	pop	r1
    3858:	18 95       	reti
    385a:	88 23       	and	r24, r24
    385c:	09 f0       	breq	.+2      	; 0x3860 <__vector_29+0x15c>
    385e:	fe c0       	rjmp	.+508    	; 0x3a5c <__vector_29+0x358>
    3860:	60 91 24 02 	lds	r22, 0x0224
    3864:	6e 30       	cpi	r22, 0x0E	; 14
    3866:	09 f4       	brne	.+2      	; 0x386a <__vector_29+0x166>
    3868:	dc c1       	rjmp	.+952    	; 0x3c22 <__vector_29+0x51e>
    386a:	46 2f       	mov	r20, r22
    386c:	50 e0       	ldi	r21, 0x00	; 0
    386e:	fa 01       	movw	r30, r20
    3870:	ee 0f       	add	r30, r30
    3872:	ff 1f       	adc	r31, r31
    3874:	e7 5d       	subi	r30, 0xD7	; 215
    3876:	fd 4f       	sbci	r31, 0xFD	; 253
    3878:	31 83       	std	Z+1, r19	; 0x01
    387a:	20 83       	st	Z, r18
    387c:	40 ff       	sbrs	r20, 0
    387e:	77 c0       	rjmp	.+238    	; 0x396e <__vector_29+0x26a>
    3880:	fa 01       	movw	r30, r20
    3882:	ee 0f       	add	r30, r30
    3884:	ff 1f       	adc	r31, r31
    3886:	e9 5d       	subi	r30, 0xD9	; 217
    3888:	fd 4f       	sbci	r31, 0xFD	; 253
    388a:	80 81       	ld	r24, Z
    388c:	91 81       	ldd	r25, Z+1	; 0x01
    388e:	fa 01       	movw	r30, r20
    3890:	ee 0f       	add	r30, r30
    3892:	ff 1f       	adc	r31, r31
    3894:	e7 5d       	subi	r30, 0xD7	; 215
    3896:	fd 4f       	sbci	r31, 0xFD	; 253
    3898:	40 81       	ld	r20, Z
    389a:	51 81       	ldd	r21, Z+1	; 0x01
    389c:	26 2f       	mov	r18, r22
    389e:	26 95       	lsr	r18
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	84 1b       	sub	r24, r20
    38a4:	95 0b       	sbc	r25, r21
    38a6:	22 0f       	add	r18, r18
    38a8:	33 1f       	adc	r19, r19
    38aa:	f9 01       	movw	r30, r18
    38ac:	ef 58       	subi	r30, 0x8F	; 143
    38ae:	fd 4f       	sbci	r31, 0xFD	; 253
    38b0:	40 81       	ld	r20, Z
    38b2:	51 81       	ldd	r21, Z+1	; 0x01
    38b4:	84 1b       	sub	r24, r20
    38b6:	95 0b       	sbc	r25, r21
    38b8:	f9 01       	movw	r30, r18
    38ba:	e7 5a       	subi	r30, 0xA7	; 167
    38bc:	fd 4f       	sbci	r31, 0xFD	; 253
    38be:	91 83       	std	Z+1, r25	; 0x01
    38c0:	80 83       	st	Z, r24
    38c2:	97 fd       	sbrc	r25, 7
    38c4:	c9 c1       	rjmp	.+914    	; 0x3c58 <__vector_29+0x554>
    38c6:	44 e0       	ldi	r20, 0x04	; 4
    38c8:	81 30       	cpi	r24, 0x01	; 1
    38ca:	94 07       	cpc	r25, r20
    38cc:	24 f0       	brlt	.+8      	; 0x38d6 <__vector_29+0x1d2>
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	94 e0       	ldi	r25, 0x04	; 4
    38d2:	91 83       	std	Z+1, r25	; 0x01
    38d4:	80 83       	st	Z, r24
    38d6:	60 31       	cpi	r22, 0x10	; 16
    38d8:	48 f4       	brcc	.+18     	; 0x38ec <__vector_29+0x1e8>
    38da:	8c 33       	cpi	r24, 0x3C	; 60
    38dc:	91 05       	cpc	r25, r1
    38de:	0c f0       	brlt	.+2      	; 0x38e2 <__vector_29+0x1de>
    38e0:	c0 c1       	rjmp	.+896    	; 0x3c62 <__vector_29+0x55e>
    38e2:	2f 53       	subi	r18, 0x3F	; 63
    38e4:	3d 4f       	sbci	r19, 0xFD	; 253
    38e6:	f9 01       	movw	r30, r18
    38e8:	91 83       	std	Z+1, r25	; 0x01
    38ea:	80 83       	st	Z, r24
    38ec:	80 91 63 04 	lds	r24, 0x0463
    38f0:	88 23       	and	r24, r24
    38f2:	09 f4       	brne	.+2      	; 0x38f6 <__vector_29+0x1f2>
    38f4:	81 c1       	rjmp	.+770    	; 0x3bf8 <__vector_29+0x4f4>
    38f6:	80 91 69 02 	lds	r24, 0x0269
    38fa:	90 91 6a 02 	lds	r25, 0x026A
    38fe:	f1 e0       	ldi	r31, 0x01	; 1
    3900:	84 3a       	cpi	r24, 0xA4	; 164
    3902:	9f 07       	cpc	r25, r31
    3904:	cc f0       	brlt	.+50     	; 0x3938 <__vector_29+0x234>
    3906:	80 91 6b 02 	lds	r24, 0x026B
    390a:	90 91 6c 02 	lds	r25, 0x026C
    390e:	21 e0       	ldi	r18, 0x01	; 1
    3910:	84 3a       	cpi	r24, 0xA4	; 164
    3912:	92 07       	cpc	r25, r18
    3914:	8c f0       	brlt	.+34     	; 0x3938 <__vector_29+0x234>
    3916:	80 91 6d 02 	lds	r24, 0x026D
    391a:	90 91 6e 02 	lds	r25, 0x026E
    391e:	41 e0       	ldi	r20, 0x01	; 1
    3920:	84 3a       	cpi	r24, 0xA4	; 164
    3922:	94 07       	cpc	r25, r20
    3924:	4c f0       	brlt	.+18     	; 0x3938 <__vector_29+0x234>
    3926:	80 91 6f 02 	lds	r24, 0x026F
    392a:	90 91 70 02 	lds	r25, 0x0270
    392e:	e1 e0       	ldi	r30, 0x01	; 1
    3930:	84 3a       	cpi	r24, 0xA4	; 164
    3932:	9e 07       	cpc	r25, r30
    3934:	0c f0       	brlt	.+2      	; 0x3938 <__vector_29+0x234>
    3936:	60 c1       	rjmp	.+704    	; 0x3bf8 <__vector_29+0x4f4>
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	80 93 64 04 	sts	0x0464, r24
    393e:	10 92 f8 02 	sts	0x02F8, r1
    3942:	10 92 f7 02 	sts	0x02F7, r1
    3946:	10 92 a9 00 	sts	0x00A9, r1
    394a:	10 92 a8 00 	sts	0x00A8, r1
    394e:	10 92 ab 00 	sts	0x00AB, r1
    3952:	10 92 aa 00 	sts	0x00AA, r1
    3956:	10 92 f6 02 	sts	0x02F6, r1
    395a:	10 92 f5 02 	sts	0x02F5, r1
    395e:	10 92 99 00 	sts	0x0099, r1
    3962:	10 92 98 00 	sts	0x0098, r1
    3966:	10 92 9b 00 	sts	0x009B, r1
    396a:	10 92 9a 00 	sts	0x009A, r1
    396e:	6f 5f       	subi	r22, 0xFF	; 255
    3970:	60 93 24 02 	sts	0x0224, r22
    3974:	68 31       	cpi	r22, 0x18	; 24
    3976:	08 f4       	brcc	.+2      	; 0x397a <__vector_29+0x276>
    3978:	32 cf       	rjmp	.-412    	; 0x37de <__vector_29+0xda>
    397a:	10 92 24 02 	sts	0x0224, r1
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	80 93 c0 02 	sts	0x02C0, r24
    3984:	2c cf       	rjmp	.-424    	; 0x37de <__vector_29+0xda>
    3986:	83 30       	cpi	r24, 0x03	; 3
    3988:	09 f4       	brne	.+2      	; 0x398c <__vector_29+0x288>
    398a:	bd c0       	rjmp	.+378    	; 0x3b06 <__vector_29+0x402>
    398c:	84 30       	cpi	r24, 0x04	; 4
    398e:	09 f0       	breq	.+2      	; 0x3992 <__vector_29+0x28e>
    3990:	41 cf       	rjmp	.-382    	; 0x3814 <__vector_29+0x110>
    3992:	90 91 26 02 	lds	r25, 0x0226
    3996:	90 93 23 02 	sts	0x0223, r25
    399a:	90 91 27 02 	lds	r25, 0x0227
    399e:	90 93 bb 02 	sts	0x02BB, r25
    39a2:	90 91 bc 02 	lds	r25, 0x02BC
    39a6:	99 23       	and	r25, r25
    39a8:	09 f0       	breq	.+2      	; 0x39ac <__vector_29+0x2a8>
    39aa:	14 c1       	rjmp	.+552    	; 0x3bd4 <__vector_29+0x4d0>
    39ac:	83 e0       	ldi	r24, 0x03	; 3
    39ae:	80 93 b9 02 	sts	0x02B9, r24
    39b2:	10 92 ba 02 	sts	0x02BA, r1
    39b6:	60 91 24 02 	lds	r22, 0x0224
    39ba:	6e 30       	cpi	r22, 0x0E	; 14
    39bc:	09 f4       	brne	.+2      	; 0x39c0 <__vector_29+0x2bc>
    39be:	2b c1       	rjmp	.+598    	; 0x3c16 <__vector_29+0x512>
    39c0:	86 2f       	mov	r24, r22
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	60 ff       	sbrs	r22, 0
    39c6:	fd c0       	rjmp	.+506    	; 0x3bc2 <__vector_29+0x4be>
    39c8:	60 31       	cpi	r22, 0x10	; 16
    39ca:	08 f4       	brcc	.+2      	; 0x39ce <__vector_29+0x2ca>
    39cc:	18 c1       	rjmp	.+560    	; 0x3bfe <__vector_29+0x4fa>
    39ce:	20 91 4c 04 	lds	r18, 0x044C
    39d2:	22 23       	and	r18, r18
    39d4:	09 f0       	breq	.+2      	; 0x39d8 <__vector_29+0x2d4>
    39d6:	e1 c0       	rjmp	.+450    	; 0x3b9a <__vector_29+0x496>
    39d8:	40 97       	sbiw	r24, 0x10	; 16
    39da:	95 95       	asr	r25
    39dc:	87 95       	ror	r24
    39de:	21 e0       	ldi	r18, 0x01	; 1
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	02 c0       	rjmp	.+4      	; 0x39e8 <__vector_29+0x2e4>
    39e4:	22 0f       	add	r18, r18
    39e6:	33 1f       	adc	r19, r19
    39e8:	8a 95       	dec	r24
    39ea:	e2 f7       	brpl	.-8      	; 0x39e4 <__vector_29+0x2e0>
    39ec:	20 93 05 01 	sts	0x0105, r18
    39f0:	80 91 ba 02 	lds	r24, 0x02BA
    39f4:	0f cf       	rjmp	.-482    	; 0x3814 <__vector_29+0x110>
    39f6:	90 91 7b 00 	lds	r25, 0x007B
    39fa:	98 60       	ori	r25, 0x08	; 8
    39fc:	90 93 7b 00 	sts	0x007B, r25
    3a00:	90 91 23 02 	lds	r25, 0x0223
    3a04:	98 5c       	subi	r25, 0xC8	; 200
    3a06:	90 93 7c 00 	sts	0x007C, r25
    3a0a:	82 30       	cpi	r24, 0x02	; 2
    3a0c:	09 f0       	breq	.+2      	; 0x3a10 <__vector_29+0x30c>
    3a0e:	14 cf       	rjmp	.-472    	; 0x3838 <__vector_29+0x134>
    3a10:	20 91 4c 04 	lds	r18, 0x044C
    3a14:	22 23       	and	r18, r18
    3a16:	51 f0       	breq	.+20     	; 0x3a2c <__vector_29+0x328>
    3a18:	21 30       	cpi	r18, 0x01	; 1
    3a1a:	19 f0       	breq	.+6      	; 0x3a22 <__vector_29+0x31e>
    3a1c:	22 30       	cpi	r18, 0x02	; 2
    3a1e:	09 f0       	breq	.+2      	; 0x3a22 <__vector_29+0x31e>
    3a20:	0b cf       	rjmp	.-490    	; 0x3838 <__vector_29+0x134>
    3a22:	8f ef       	ldi	r24, 0xFF	; 255
    3a24:	80 93 05 01 	sts	0x0105, r24
    3a28:	12 b8       	out	0x02, r1	; 2
    3a2a:	06 cf       	rjmp	.-500    	; 0x3838 <__vector_29+0x134>
    3a2c:	80 91 05 01 	lds	r24, 0x0105
    3a30:	80 7f       	andi	r24, 0xF0	; 240
    3a32:	80 93 05 01 	sts	0x0105, r24
    3a36:	12 b8       	out	0x02, r1	; 2
    3a38:	ff ce       	rjmp	.-514    	; 0x3838 <__vector_29+0x134>
    3a3a:	81 30       	cpi	r24, 0x01	; 1
    3a3c:	09 f0       	breq	.+2      	; 0x3a40 <__vector_29+0x33c>
    3a3e:	ea ce       	rjmp	.-556    	; 0x3814 <__vector_29+0x110>
    3a40:	80 91 25 02 	lds	r24, 0x0225
    3a44:	80 93 23 02 	sts	0x0223, r24
    3a48:	80 91 28 02 	lds	r24, 0x0228
    3a4c:	80 93 bc 02 	sts	0x02BC, r24
    3a50:	10 92 b9 02 	sts	0x02B9, r1
    3a54:	82 e0       	ldi	r24, 0x02	; 2
    3a56:	80 93 ba 02 	sts	0x02BA, r24
    3a5a:	dc ce       	rjmp	.-584    	; 0x3814 <__vector_29+0x110>
    3a5c:	81 30       	cpi	r24, 0x01	; 1
    3a5e:	09 f0       	breq	.+2      	; 0x3a62 <__vector_29+0x35e>
    3a60:	be ce       	rjmp	.-644    	; 0x37de <__vector_29+0xda>
    3a62:	80 91 e3 02 	lds	r24, 0x02E3
    3a66:	90 91 e4 02 	lds	r25, 0x02E4
    3a6a:	82 0f       	add	r24, r18
    3a6c:	93 1f       	adc	r25, r19
    3a6e:	96 95       	lsr	r25
    3a70:	87 95       	ror	r24
    3a72:	90 93 e4 02 	sts	0x02E4, r25
    3a76:	80 93 e3 02 	sts	0x02E3, r24
    3a7a:	80 91 ba 02 	lds	r24, 0x02BA
    3a7e:	82 30       	cpi	r24, 0x02	; 2
    3a80:	09 f0       	breq	.+2      	; 0x3a84 <__vector_29+0x380>
    3a82:	b2 ce       	rjmp	.-668    	; 0x37e8 <__vector_29+0xe4>
    3a84:	80 91 26 02 	lds	r24, 0x0226
    3a88:	80 93 23 02 	sts	0x0223, r24
    3a8c:	80 91 27 02 	lds	r24, 0x0227
    3a90:	80 93 bb 02 	sts	0x02BB, r24
    3a94:	80 91 bc 02 	lds	r24, 0x02BC
    3a98:	88 23       	and	r24, r24
    3a9a:	09 f0       	breq	.+2      	; 0x3a9e <__vector_29+0x39a>
    3a9c:	a7 c0       	rjmp	.+334    	; 0x3bec <__vector_29+0x4e8>
    3a9e:	83 e0       	ldi	r24, 0x03	; 3
    3aa0:	80 93 b9 02 	sts	0x02B9, r24
    3aa4:	83 e0       	ldi	r24, 0x03	; 3
    3aa6:	80 93 ba 02 	sts	0x02BA, r24
    3aaa:	b4 ce       	rjmp	.-664    	; 0x3814 <__vector_29+0x110>
    3aac:	80 91 0a 02 	lds	r24, 0x020A
    3ab0:	88 23       	and	r24, r24
    3ab2:	09 f4       	brne	.+2      	; 0x3ab6 <__vector_29+0x3b2>
    3ab4:	94 ce       	rjmp	.-728    	; 0x37de <__vector_29+0xda>
    3ab6:	90 91 00 01 	lds	r25, 0x0100
    3aba:	93 fd       	sbrc	r25, 3
    3abc:	90 ce       	rjmp	.-736    	; 0x37de <__vector_29+0xda>
    3abe:	90 91 00 01 	lds	r25, 0x0100
    3ac2:	94 fd       	sbrc	r25, 4
    3ac4:	8c ce       	rjmp	.-744    	; 0x37de <__vector_29+0xda>
    3ac6:	48 2f       	mov	r20, r24
    3ac8:	4f 5f       	subi	r20, 0xFF	; 255
    3aca:	40 93 0a 02 	sts	0x020A, r20
    3ace:	45 30       	cpi	r20, 0x05	; 5
    3ad0:	08 f4       	brcc	.+2      	; 0x3ad4 <__vector_29+0x3d0>
    3ad2:	85 ce       	rjmp	.-758    	; 0x37de <__vector_29+0xda>
    3ad4:	80 91 f7 02 	lds	r24, 0x02F7
    3ad8:	90 91 f8 02 	lds	r25, 0x02F8
    3adc:	00 97       	sbiw	r24, 0x00	; 0
    3ade:	51 f0       	breq	.+20     	; 0x3af4 <__vector_29+0x3f0>
    3ae0:	80 91 ed 02 	lds	r24, 0x02ED
    3ae4:	90 91 ee 02 	lds	r25, 0x02EE
    3ae8:	82 0f       	add	r24, r18
    3aea:	93 1f       	adc	r25, r19
    3aec:	90 93 ee 02 	sts	0x02EE, r25
    3af0:	80 93 ed 02 	sts	0x02ED, r24
    3af4:	48 30       	cpi	r20, 0x08	; 8
    3af6:	09 f0       	breq	.+2      	; 0x3afa <__vector_29+0x3f6>
    3af8:	72 ce       	rjmp	.-796    	; 0x37de <__vector_29+0xda>
    3afa:	10 92 0a 02 	sts	0x020A, r1
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	80 93 07 02 	sts	0x0207, r24
    3b04:	6c ce       	rjmp	.-808    	; 0x37de <__vector_29+0xda>
    3b06:	80 91 25 02 	lds	r24, 0x0225
    3b0a:	80 93 23 02 	sts	0x0223, r24
    3b0e:	80 91 28 02 	lds	r24, 0x0228
    3b12:	80 93 bc 02 	sts	0x02BC, r24
    3b16:	80 91 bb 02 	lds	r24, 0x02BB
    3b1a:	88 23       	and	r24, r24
    3b1c:	09 f0       	breq	.+2      	; 0x3b20 <__vector_29+0x41c>
    3b1e:	54 c0       	rjmp	.+168    	; 0x3bc8 <__vector_29+0x4c4>
    3b20:	81 e0       	ldi	r24, 0x01	; 1
    3b22:	80 93 b9 02 	sts	0x02B9, r24
    3b26:	84 e0       	ldi	r24, 0x04	; 4
    3b28:	80 93 ba 02 	sts	0x02BA, r24
    3b2c:	73 ce       	rjmp	.-794    	; 0x3814 <__vector_29+0x110>
    3b2e:	80 91 09 02 	lds	r24, 0x0209
    3b32:	88 23       	and	r24, r24
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <__vector_29+0x434>
    3b36:	53 ce       	rjmp	.-858    	; 0x37de <__vector_29+0xda>
    3b38:	63 99       	sbic	0x0c, 3	; 12
    3b3a:	51 ce       	rjmp	.-862    	; 0x37de <__vector_29+0xda>
    3b3c:	64 99       	sbic	0x0c, 4	; 12
    3b3e:	4f ce       	rjmp	.-866    	; 0x37de <__vector_29+0xda>
    3b40:	48 2f       	mov	r20, r24
    3b42:	4f 5f       	subi	r20, 0xFF	; 255
    3b44:	40 93 09 02 	sts	0x0209, r20
    3b48:	45 30       	cpi	r20, 0x05	; 5
    3b4a:	08 f4       	brcc	.+2      	; 0x3b4e <__vector_29+0x44a>
    3b4c:	48 ce       	rjmp	.-880    	; 0x37de <__vector_29+0xda>
    3b4e:	80 91 f5 02 	lds	r24, 0x02F5
    3b52:	90 91 f6 02 	lds	r25, 0x02F6
    3b56:	00 97       	sbiw	r24, 0x00	; 0
    3b58:	51 f0       	breq	.+20     	; 0x3b6e <__vector_29+0x46a>
    3b5a:	80 91 ef 02 	lds	r24, 0x02EF
    3b5e:	90 91 f0 02 	lds	r25, 0x02F0
    3b62:	82 0f       	add	r24, r18
    3b64:	93 1f       	adc	r25, r19
    3b66:	90 93 f0 02 	sts	0x02F0, r25
    3b6a:	80 93 ef 02 	sts	0x02EF, r24
    3b6e:	48 30       	cpi	r20, 0x08	; 8
    3b70:	09 f0       	breq	.+2      	; 0x3b74 <__vector_29+0x470>
    3b72:	35 ce       	rjmp	.-918    	; 0x37de <__vector_29+0xda>
    3b74:	10 92 09 02 	sts	0x0209, r1
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	80 93 08 02 	sts	0x0208, r24
    3b7e:	2f ce       	rjmp	.-930    	; 0x37de <__vector_29+0xda>
    3b80:	80 91 e1 02 	lds	r24, 0x02E1
    3b84:	90 91 e2 02 	lds	r25, 0x02E2
    3b88:	82 0f       	add	r24, r18
    3b8a:	93 1f       	adc	r25, r19
    3b8c:	96 95       	lsr	r25
    3b8e:	87 95       	ror	r24
    3b90:	90 93 e2 02 	sts	0x02E2, r25
    3b94:	80 93 e1 02 	sts	0x02E1, r24
    3b98:	22 ce       	rjmp	.-956    	; 0x37de <__vector_29+0xda>
    3b9a:	21 30       	cpi	r18, 0x01	; 1
    3b9c:	11 f0       	breq	.+4      	; 0x3ba2 <__vector_29+0x49e>
    3b9e:	22 30       	cpi	r18, 0x02	; 2
    3ba0:	81 f4       	brne	.+32     	; 0x3bc2 <__vector_29+0x4be>
    3ba2:	40 91 05 01 	lds	r20, 0x0105
    3ba6:	40 97       	sbiw	r24, 0x10	; 16
    3ba8:	95 95       	asr	r25
    3baa:	87 95       	ror	r24
    3bac:	21 e0       	ldi	r18, 0x01	; 1
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	02 c0       	rjmp	.+4      	; 0x3bb6 <__vector_29+0x4b2>
    3bb2:	22 0f       	add	r18, r18
    3bb4:	33 1f       	adc	r19, r19
    3bb6:	8a 95       	dec	r24
    3bb8:	e2 f7       	brpl	.-8      	; 0x3bb2 <__vector_29+0x4ae>
    3bba:	20 95       	com	r18
    3bbc:	24 23       	and	r18, r20
    3bbe:	20 93 05 01 	sts	0x0105, r18
    3bc2:	80 91 ba 02 	lds	r24, 0x02BA
    3bc6:	26 ce       	rjmp	.-948    	; 0x3814 <__vector_29+0x110>
    3bc8:	81 30       	cpi	r24, 0x01	; 1
    3bca:	d1 f1       	breq	.+116    	; 0x3c40 <__vector_29+0x53c>
    3bcc:	85 e0       	ldi	r24, 0x05	; 5
    3bce:	80 93 b9 02 	sts	0x02B9, r24
    3bd2:	a9 cf       	rjmp	.-174    	; 0x3b26 <__vector_29+0x422>
    3bd4:	91 30       	cpi	r25, 0x01	; 1
    3bd6:	09 f0       	breq	.+2      	; 0x3bda <__vector_29+0x4d6>
    3bd8:	85 e0       	ldi	r24, 0x05	; 5
    3bda:	80 93 b9 02 	sts	0x02B9, r24
    3bde:	e9 ce       	rjmp	.-558    	; 0x39b2 <__vector_29+0x2ae>
    3be0:	81 30       	cpi	r24, 0x01	; 1
    3be2:	b1 f1       	breq	.+108    	; 0x3c50 <__vector_29+0x54c>
    3be4:	85 e0       	ldi	r24, 0x05	; 5
    3be6:	80 93 b9 02 	sts	0x02B9, r24
    3bea:	11 ce       	rjmp	.-990    	; 0x380e <__vector_29+0x10a>
    3bec:	81 30       	cpi	r24, 0x01	; 1
    3bee:	61 f1       	breq	.+88     	; 0x3c48 <__vector_29+0x544>
    3bf0:	85 e0       	ldi	r24, 0x05	; 5
    3bf2:	80 93 b9 02 	sts	0x02B9, r24
    3bf6:	56 cf       	rjmp	.-340    	; 0x3aa4 <__vector_29+0x3a0>
    3bf8:	10 92 64 04 	sts	0x0464, r1
    3bfc:	b8 ce       	rjmp	.-656    	; 0x396e <__vector_29+0x26a>
    3bfe:	66 95       	lsr	r22
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	02 c0       	rjmp	.+4      	; 0x3c0a <__vector_29+0x506>
    3c06:	88 0f       	add	r24, r24
    3c08:	99 1f       	adc	r25, r25
    3c0a:	6a 95       	dec	r22
    3c0c:	e2 f7       	brpl	.-8      	; 0x3c06 <__vector_29+0x502>
    3c0e:	82 b9       	out	0x02, r24	; 2
    3c10:	80 91 ba 02 	lds	r24, 0x02BA
    3c14:	ff cd       	rjmp	.-1026   	; 0x3814 <__vector_29+0x110>
    3c16:	80 91 bf 02 	lds	r24, 0x02BF
    3c1a:	81 30       	cpi	r24, 0x01	; 1
    3c1c:	a1 f1       	breq	.+104    	; 0x3c86 <__vector_29+0x582>
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	f9 cd       	rjmp	.-1038   	; 0x3814 <__vector_29+0x110>
    3c22:	80 91 bf 02 	lds	r24, 0x02BF
    3c26:	82 30       	cpi	r24, 0x02	; 2
    3c28:	09 f0       	breq	.+2      	; 0x3c2c <__vector_29+0x528>
    3c2a:	1f ce       	rjmp	.-962    	; 0x386a <__vector_29+0x166>
    3c2c:	30 93 be 02 	sts	0x02BE, r19
    3c30:	20 93 bd 02 	sts	0x02BD, r18
    3c34:	10 92 bf 02 	sts	0x02BF, r1
    3c38:	46 98       	cbi	0x08, 6	; 8
    3c3a:	4e e0       	ldi	r20, 0x0E	; 14
    3c3c:	50 e0       	ldi	r21, 0x00	; 0
    3c3e:	1e ce       	rjmp	.-964    	; 0x387c <__vector_29+0x178>
    3c40:	82 e0       	ldi	r24, 0x02	; 2
    3c42:	80 93 b9 02 	sts	0x02B9, r24
    3c46:	6f cf       	rjmp	.-290    	; 0x3b26 <__vector_29+0x422>
    3c48:	84 e0       	ldi	r24, 0x04	; 4
    3c4a:	80 93 b9 02 	sts	0x02B9, r24
    3c4e:	2a cf       	rjmp	.-428    	; 0x3aa4 <__vector_29+0x3a0>
    3c50:	82 e0       	ldi	r24, 0x02	; 2
    3c52:	80 93 b9 02 	sts	0x02B9, r24
    3c56:	db cd       	rjmp	.-1098   	; 0x380e <__vector_29+0x10a>
    3c58:	11 82       	std	Z+1, r1	; 0x01
    3c5a:	10 82       	st	Z, r1
    3c5c:	80 e0       	ldi	r24, 0x00	; 0
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	3a ce       	rjmp	.-908    	; 0x38d6 <__vector_29+0x1d2>
    3c62:	ac 01       	movw	r20, r24
    3c64:	44 5c       	subi	r20, 0xC4	; 196
    3c66:	5f 4f       	sbci	r21, 0xFF	; 255
    3c68:	55 95       	asr	r21
    3c6a:	47 95       	ror	r20
    3c6c:	48 37       	cpi	r20, 0x78	; 120
    3c6e:	51 05       	cpc	r21, r1
    3c70:	7c f4       	brge	.+30     	; 0x3c90 <__vector_29+0x58c>
    3c72:	2f 53       	subi	r18, 0x3F	; 63
    3c74:	3d 4f       	sbci	r19, 0xFD	; 253
    3c76:	cc 97       	sbiw	r24, 0x3c	; 60
    3c78:	95 95       	asr	r25
    3c7a:	87 95       	ror	r24
    3c7c:	cc 96       	adiw	r24, 0x3c	; 60
    3c7e:	f9 01       	movw	r30, r18
    3c80:	91 83       	std	Z+1, r25	; 0x01
    3c82:	80 83       	st	Z, r24
    3c84:	33 ce       	rjmp	.-922    	; 0x38ec <__vector_29+0x1e8>
    3c86:	82 e0       	ldi	r24, 0x02	; 2
    3c88:	80 93 bf 02 	sts	0x02BF, r24
    3c8c:	46 9a       	sbi	0x08, 6	; 8
    3c8e:	98 ce       	rjmp	.-720    	; 0x39c0 <__vector_29+0x2bc>
    3c90:	ac 01       	movw	r20, r24
    3c92:	44 5d       	subi	r20, 0xD4	; 212
    3c94:	5e 4f       	sbci	r21, 0xFE	; 254
    3c96:	55 95       	asr	r21
    3c98:	47 95       	ror	r20
    3c9a:	55 95       	asr	r21
    3c9c:	47 95       	ror	r20
    3c9e:	44 3b       	cpi	r20, 0xB4	; 180
    3ca0:	51 05       	cpc	r21, r1
    3ca2:	74 f4       	brge	.+28     	; 0x3cc0 <__vector_29+0x5bc>
    3ca4:	2f 53       	subi	r18, 0x3F	; 63
    3ca6:	3d 4f       	sbci	r19, 0xFD	; 253
    3ca8:	84 5b       	subi	r24, 0xB4	; 180
    3caa:	90 40       	sbci	r25, 0x00	; 0
    3cac:	95 95       	asr	r25
    3cae:	87 95       	ror	r24
    3cb0:	95 95       	asr	r25
    3cb2:	87 95       	ror	r24
    3cb4:	88 58       	subi	r24, 0x88	; 136
    3cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb8:	f9 01       	movw	r30, r18
    3cba:	91 83       	std	Z+1, r25	; 0x01
    3cbc:	80 83       	st	Z, r24
    3cbe:	16 ce       	rjmp	.-980    	; 0x38ec <__vector_29+0x1e8>
    3cc0:	2f 53       	subi	r18, 0x3F	; 63
    3cc2:	3d 4f       	sbci	r19, 0xFD	; 253
    3cc4:	84 5a       	subi	r24, 0xA4	; 164
    3cc6:	91 40       	sbci	r25, 0x01	; 1
    3cc8:	95 95       	asr	r25
    3cca:	87 95       	ror	r24
    3ccc:	95 95       	asr	r25
    3cce:	87 95       	ror	r24
    3cd0:	95 95       	asr	r25
    3cd2:	87 95       	ror	r24
    3cd4:	8c 54       	subi	r24, 0x4C	; 76
    3cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd8:	f9 01       	movw	r30, r18
    3cda:	91 83       	std	Z+1, r25	; 0x01
    3cdc:	80 83       	st	Z, r24
    3cde:	06 ce       	rjmp	.-1012   	; 0x38ec <__vector_29+0x1e8>

00003ce0 <initMotors>:
    3ce0:	0f 93       	push	r16
    3ce2:	1f 93       	push	r17
    3ce4:	cf 93       	push	r28
    3ce6:	df 93       	push	r29
    3ce8:	e0 e9       	ldi	r30, 0x90	; 144
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	10 82       	st	Z, r1
    3cee:	41 e9       	ldi	r20, 0x91	; 145
    3cf0:	50 e0       	ldi	r21, 0x00	; 0
    3cf2:	da 01       	movw	r26, r20
    3cf4:	1c 92       	st	X, r1
    3cf6:	21 e7       	ldi	r18, 0x71	; 113
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	e9 01       	movw	r28, r18
    3cfc:	18 82       	st	Y, r1
    3cfe:	a0 ea       	ldi	r26, 0xA0	; 160
    3d00:	b0 e0       	ldi	r27, 0x00	; 0
    3d02:	1c 92       	st	X, r1
    3d04:	81 ea       	ldi	r24, 0xA1	; 161
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	ec 01       	movw	r28, r24
    3d0a:	18 82       	st	Y, r1
    3d0c:	02 e7       	ldi	r16, 0x72	; 114
    3d0e:	10 e0       	ldi	r17, 0x00	; 0
    3d10:	e8 01       	movw	r28, r16
    3d12:	18 82       	st	Y, r1
    3d14:	60 81       	ld	r22, Z
    3d16:	63 68       	ori	r22, 0x83	; 131
    3d18:	60 83       	st	Z, r22
    3d1a:	60 81       	ld	r22, Z
    3d1c:	63 60       	ori	r22, 0x03	; 3
    3d1e:	60 83       	st	Z, r22
    3d20:	ea 01       	movw	r28, r20
    3d22:	68 81       	ld	r22, Y
    3d24:	6b 60       	ori	r22, 0x0B	; 11
    3d26:	68 83       	st	Y, r22
    3d28:	40 91 f5 02 	lds	r20, 0x02F5
    3d2c:	50 91 f6 02 	lds	r21, 0x02F6
    3d30:	50 93 99 00 	sts	0x0099, r21
    3d34:	40 93 98 00 	sts	0x0098, r20
    3d38:	10 92 9b 00 	sts	0x009B, r1
    3d3c:	10 92 9a 00 	sts	0x009A, r1
    3d40:	e9 01       	movw	r28, r18
    3d42:	48 81       	ld	r20, Y
    3d44:	41 60       	ori	r20, 0x01	; 1
    3d46:	48 83       	st	Y, r20
    3d48:	20 81       	ld	r18, Z
    3d4a:	2f 75       	andi	r18, 0x5F	; 95
    3d4c:	20 83       	st	Z, r18
    3d4e:	2e b1       	in	r18, 0x0e	; 14
    3d50:	27 7e       	andi	r18, 0xE7	; 231
    3d52:	2e b9       	out	0x0e, r18	; 14
    3d54:	2c 91       	ld	r18, X
    3d56:	23 68       	ori	r18, 0x83	; 131
    3d58:	2c 93       	st	X, r18
    3d5a:	fc 01       	movw	r30, r24
    3d5c:	20 81       	ld	r18, Z
    3d5e:	2b 60       	ori	r18, 0x0B	; 11
    3d60:	20 83       	st	Z, r18
    3d62:	80 91 f7 02 	lds	r24, 0x02F7
    3d66:	90 91 f8 02 	lds	r25, 0x02F8
    3d6a:	90 93 a9 00 	sts	0x00A9, r25
    3d6e:	80 93 a8 00 	sts	0x00A8, r24
    3d72:	10 92 ab 00 	sts	0x00AB, r1
    3d76:	10 92 aa 00 	sts	0x00AA, r1
    3d7a:	e8 01       	movw	r28, r16
    3d7c:	88 81       	ld	r24, Y
    3d7e:	81 60       	ori	r24, 0x01	; 1
    3d80:	88 83       	st	Y, r24
    3d82:	8c 91       	ld	r24, X
    3d84:	8f 75       	andi	r24, 0x5F	; 95
    3d86:	8c 93       	st	X, r24
    3d88:	e2 e0       	ldi	r30, 0x02	; 2
    3d8a:	f1 e0       	ldi	r31, 0x01	; 1
    3d8c:	80 81       	ld	r24, Z
    3d8e:	87 7e       	andi	r24, 0xE7	; 231
    3d90:	80 83       	st	Z, r24
    3d92:	df 91       	pop	r29
    3d94:	cf 91       	pop	r28
    3d96:	1f 91       	pop	r17
    3d98:	0f 91       	pop	r16
    3d9a:	08 95       	ret

00003d9c <handleMotorsWithNoController>:
    3d9c:	80 91 07 02 	lds	r24, 0x0207
    3da0:	88 23       	and	r24, r24
    3da2:	c1 f1       	breq	.+112    	; 0x3e14 <handleMotorsWithNoController+0x78>
    3da4:	60 91 ed 02 	lds	r22, 0x02ED
    3da8:	70 91 ee 02 	lds	r23, 0x02EE
    3dac:	76 95       	lsr	r23
    3dae:	67 95       	ror	r22
    3db0:	76 95       	lsr	r23
    3db2:	67 95       	ror	r22
    3db4:	70 93 f2 02 	sts	0x02F2, r23
    3db8:	60 93 f1 02 	sts	0x02F1, r22
    3dbc:	10 92 07 02 	sts	0x0207, r1
    3dc0:	10 92 ee 02 	sts	0x02EE, r1
    3dc4:	10 92 ed 02 	sts	0x02ED, r1
    3dc8:	80 91 fb 02 	lds	r24, 0x02FB
    3dcc:	90 91 fc 02 	lds	r25, 0x02FC
    3dd0:	97 fd       	sbrc	r25, 7
    3dd2:	db c0       	rjmp	.+438    	; 0x3f8a <handleMotorsWithNoController+0x1ee>
    3dd4:	75 95       	asr	r23
    3dd6:	67 95       	ror	r22
    3dd8:	75 95       	asr	r23
    3dda:	67 95       	ror	r22
    3ddc:	75 95       	asr	r23
    3dde:	67 95       	ror	r22
    3de0:	88 27       	eor	r24, r24
    3de2:	77 fd       	sbrc	r23, 7
    3de4:	80 95       	com	r24
    3de6:	98 2f       	mov	r25, r24
    3de8:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    3dec:	9b 01       	movw	r18, r22
    3dee:	ac 01       	movw	r20, r24
    3df0:	60 91 d5 02 	lds	r22, 0x02D5
    3df4:	70 91 d6 02 	lds	r23, 0x02D6
    3df8:	80 91 d7 02 	lds	r24, 0x02D7
    3dfc:	90 91 d8 02 	lds	r25, 0x02D8
    3e00:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__addsf3>
    3e04:	60 93 d5 02 	sts	0x02D5, r22
    3e08:	70 93 d6 02 	sts	0x02D6, r23
    3e0c:	80 93 d7 02 	sts	0x02D7, r24
    3e10:	90 93 d8 02 	sts	0x02D8, r25
    3e14:	80 91 08 02 	lds	r24, 0x0208
    3e18:	88 23       	and	r24, r24
    3e1a:	c1 f1       	breq	.+112    	; 0x3e8c <handleMotorsWithNoController+0xf0>
    3e1c:	60 91 ef 02 	lds	r22, 0x02EF
    3e20:	70 91 f0 02 	lds	r23, 0x02F0
    3e24:	76 95       	lsr	r23
    3e26:	67 95       	ror	r22
    3e28:	76 95       	lsr	r23
    3e2a:	67 95       	ror	r22
    3e2c:	70 93 f4 02 	sts	0x02F4, r23
    3e30:	60 93 f3 02 	sts	0x02F3, r22
    3e34:	10 92 08 02 	sts	0x0208, r1
    3e38:	10 92 f0 02 	sts	0x02F0, r1
    3e3c:	10 92 ef 02 	sts	0x02EF, r1
    3e40:	80 91 f9 02 	lds	r24, 0x02F9
    3e44:	90 91 fa 02 	lds	r25, 0x02FA
    3e48:	97 fd       	sbrc	r25, 7
    3e4a:	7e c0       	rjmp	.+252    	; 0x3f48 <handleMotorsWithNoController+0x1ac>
    3e4c:	75 95       	asr	r23
    3e4e:	67 95       	ror	r22
    3e50:	75 95       	asr	r23
    3e52:	67 95       	ror	r22
    3e54:	75 95       	asr	r23
    3e56:	67 95       	ror	r22
    3e58:	88 27       	eor	r24, r24
    3e5a:	77 fd       	sbrc	r23, 7
    3e5c:	80 95       	com	r24
    3e5e:	98 2f       	mov	r25, r24
    3e60:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    3e64:	9b 01       	movw	r18, r22
    3e66:	ac 01       	movw	r20, r24
    3e68:	60 91 d1 02 	lds	r22, 0x02D1
    3e6c:	70 91 d2 02 	lds	r23, 0x02D2
    3e70:	80 91 d3 02 	lds	r24, 0x02D3
    3e74:	90 91 d4 02 	lds	r25, 0x02D4
    3e78:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__addsf3>
    3e7c:	60 93 d1 02 	sts	0x02D1, r22
    3e80:	70 93 d2 02 	sts	0x02D2, r23
    3e84:	80 93 d3 02 	sts	0x02D3, r24
    3e88:	90 93 d4 02 	sts	0x02D4, r25
    3e8c:	80 91 fd 02 	lds	r24, 0x02FD
    3e90:	90 91 fe 02 	lds	r25, 0x02FE
    3e94:	90 93 0a 03 	sts	0x030A, r25
    3e98:	80 93 09 03 	sts	0x0309, r24
    3e9c:	20 91 ff 02 	lds	r18, 0x02FF
    3ea0:	30 91 00 03 	lds	r19, 0x0300
    3ea4:	30 93 0c 03 	sts	0x030C, r19
    3ea8:	20 93 0b 03 	sts	0x030B, r18
    3eac:	40 91 62 04 	lds	r20, 0x0462
    3eb0:	44 23       	and	r20, r20
    3eb2:	79 f5       	brne	.+94     	; 0x3f12 <handleMotorsWithNoController+0x176>
    3eb4:	30 93 ec 02 	sts	0x02EC, r19
    3eb8:	20 93 eb 02 	sts	0x02EB, r18
    3ebc:	90 93 ea 02 	sts	0x02EA, r25
    3ec0:	80 93 e9 02 	sts	0x02E9, r24
    3ec4:	30 93 f8 02 	sts	0x02F8, r19
    3ec8:	20 93 f7 02 	sts	0x02F7, r18
    3ecc:	90 93 f6 02 	sts	0x02F6, r25
    3ed0:	80 93 f5 02 	sts	0x02F5, r24
    3ed4:	18 16       	cp	r1, r24
    3ed6:	19 06       	cpc	r1, r25
    3ed8:	5c f5       	brge	.+86     	; 0x3f30 <handleMotorsWithNoController+0x194>
    3eda:	90 93 99 00 	sts	0x0099, r25
    3ede:	80 93 98 00 	sts	0x0098, r24
    3ee2:	80 91 f7 02 	lds	r24, 0x02F7
    3ee6:	90 91 f8 02 	lds	r25, 0x02F8
    3eea:	18 16       	cp	r1, r24
    3eec:	19 06       	cpc	r1, r25
    3eee:	2c f4       	brge	.+10     	; 0x3efa <handleMotorsWithNoController+0x15e>
    3ef0:	90 93 a9 00 	sts	0x00A9, r25
    3ef4:	80 93 a8 00 	sts	0x00A8, r24
    3ef8:	08 95       	ret
    3efa:	00 97       	sbiw	r24, 0x00	; 0
    3efc:	09 f0       	breq	.+2      	; 0x3f00 <handleMotorsWithNoController+0x164>
    3efe:	6e c0       	rjmp	.+220    	; 0x3fdc <handleMotorsWithNoController+0x240>
    3f00:	10 92 a9 00 	sts	0x00A9, r1
    3f04:	10 92 a8 00 	sts	0x00A8, r1
    3f08:	10 92 ab 00 	sts	0x00AB, r1
    3f0c:	10 92 aa 00 	sts	0x00AA, r1
    3f10:	08 95       	ret
    3f12:	8b e0       	ldi	r24, 0x0B	; 11
    3f14:	93 e0       	ldi	r25, 0x03	; 3
    3f16:	69 e0       	ldi	r22, 0x09	; 9
    3f18:	73 e0       	ldi	r23, 0x03	; 3
    3f1a:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <obstacleAvoidance>
    3f1e:	20 91 0b 03 	lds	r18, 0x030B
    3f22:	30 91 0c 03 	lds	r19, 0x030C
    3f26:	80 91 09 03 	lds	r24, 0x0309
    3f2a:	90 91 0a 03 	lds	r25, 0x030A
    3f2e:	c2 cf       	rjmp	.-124    	; 0x3eb4 <handleMotorsWithNoController+0x118>
    3f30:	00 97       	sbiw	r24, 0x00	; 0
    3f32:	09 f0       	breq	.+2      	; 0x3f36 <handleMotorsWithNoController+0x19a>
    3f34:	4b c0       	rjmp	.+150    	; 0x3fcc <handleMotorsWithNoController+0x230>
    3f36:	10 92 99 00 	sts	0x0099, r1
    3f3a:	10 92 98 00 	sts	0x0098, r1
    3f3e:	10 92 9b 00 	sts	0x009B, r1
    3f42:	10 92 9a 00 	sts	0x009A, r1
    3f46:	cd cf       	rjmp	.-102    	; 0x3ee2 <handleMotorsWithNoController+0x146>
    3f48:	75 95       	asr	r23
    3f4a:	67 95       	ror	r22
    3f4c:	75 95       	asr	r23
    3f4e:	67 95       	ror	r22
    3f50:	75 95       	asr	r23
    3f52:	67 95       	ror	r22
    3f54:	88 27       	eor	r24, r24
    3f56:	77 fd       	sbrc	r23, 7
    3f58:	80 95       	com	r24
    3f5a:	98 2f       	mov	r25, r24
    3f5c:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    3f60:	9b 01       	movw	r18, r22
    3f62:	ac 01       	movw	r20, r24
    3f64:	60 91 d1 02 	lds	r22, 0x02D1
    3f68:	70 91 d2 02 	lds	r23, 0x02D2
    3f6c:	80 91 d3 02 	lds	r24, 0x02D3
    3f70:	90 91 d4 02 	lds	r25, 0x02D4
    3f74:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <__subsf3>
    3f78:	60 93 d1 02 	sts	0x02D1, r22
    3f7c:	70 93 d2 02 	sts	0x02D2, r23
    3f80:	80 93 d3 02 	sts	0x02D3, r24
    3f84:	90 93 d4 02 	sts	0x02D4, r25
    3f88:	81 cf       	rjmp	.-254    	; 0x3e8c <handleMotorsWithNoController+0xf0>
    3f8a:	75 95       	asr	r23
    3f8c:	67 95       	ror	r22
    3f8e:	75 95       	asr	r23
    3f90:	67 95       	ror	r22
    3f92:	75 95       	asr	r23
    3f94:	67 95       	ror	r22
    3f96:	88 27       	eor	r24, r24
    3f98:	77 fd       	sbrc	r23, 7
    3f9a:	80 95       	com	r24
    3f9c:	98 2f       	mov	r25, r24
    3f9e:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    3fa2:	9b 01       	movw	r18, r22
    3fa4:	ac 01       	movw	r20, r24
    3fa6:	60 91 d5 02 	lds	r22, 0x02D5
    3faa:	70 91 d6 02 	lds	r23, 0x02D6
    3fae:	80 91 d7 02 	lds	r24, 0x02D7
    3fb2:	90 91 d8 02 	lds	r25, 0x02D8
    3fb6:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <__subsf3>
    3fba:	60 93 d5 02 	sts	0x02D5, r22
    3fbe:	70 93 d6 02 	sts	0x02D6, r23
    3fc2:	80 93 d7 02 	sts	0x02D7, r24
    3fc6:	90 93 d8 02 	sts	0x02D8, r25
    3fca:	24 cf       	rjmp	.-440    	; 0x3e14 <handleMotorsWithNoController+0x78>
    3fcc:	90 95       	com	r25
    3fce:	81 95       	neg	r24
    3fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd2:	90 93 9b 00 	sts	0x009B, r25
    3fd6:	80 93 9a 00 	sts	0x009A, r24
    3fda:	83 cf       	rjmp	.-250    	; 0x3ee2 <handleMotorsWithNoController+0x146>
    3fdc:	90 95       	com	r25
    3fde:	81 95       	neg	r24
    3fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe2:	90 93 ab 00 	sts	0x00AB, r25
    3fe6:	80 93 aa 00 	sts	0x00AA, r24
    3fea:	08 95       	ret

00003fec <handleMotorsWithSpeedController>:
    3fec:	6f 92       	push	r6
    3fee:	7f 92       	push	r7
    3ff0:	8f 92       	push	r8
    3ff2:	9f 92       	push	r9
    3ff4:	af 92       	push	r10
    3ff6:	bf 92       	push	r11
    3ff8:	cf 92       	push	r12
    3ffa:	df 92       	push	r13
    3ffc:	ef 92       	push	r14
    3ffe:	ff 92       	push	r15
    4000:	0f 93       	push	r16
    4002:	1f 93       	push	r17
    4004:	20 91 fd 02 	lds	r18, 0x02FD
    4008:	30 91 fe 02 	lds	r19, 0x02FE
    400c:	30 93 0a 03 	sts	0x030A, r19
    4010:	20 93 09 03 	sts	0x0309, r18
    4014:	80 91 ff 02 	lds	r24, 0x02FF
    4018:	90 91 00 03 	lds	r25, 0x0300
    401c:	90 93 0c 03 	sts	0x030C, r25
    4020:	80 93 0b 03 	sts	0x030B, r24
    4024:	40 91 62 04 	lds	r20, 0x0462
    4028:	44 23       	and	r20, r20
    402a:	09 f0       	breq	.+2      	; 0x402e <handleMotorsWithSpeedController+0x42>
    402c:	da c1       	rjmp	.+948    	; 0x43e2 <handleMotorsWithSpeedController+0x3f6>
    402e:	90 93 ec 02 	sts	0x02EC, r25
    4032:	80 93 eb 02 	sts	0x02EB, r24
    4036:	30 93 ea 02 	sts	0x02EA, r19
    403a:	20 93 e9 02 	sts	0x02E9, r18
    403e:	20 91 07 02 	lds	r18, 0x0207
    4042:	22 23       	and	r18, r18
    4044:	09 f4       	brne	.+2      	; 0x4048 <handleMotorsWithSpeedController+0x5c>
    4046:	84 c0       	rjmp	.+264    	; 0x4150 <handleMotorsWithSpeedController+0x164>
    4048:	00 91 ed 02 	lds	r16, 0x02ED
    404c:	10 91 ee 02 	lds	r17, 0x02EE
    4050:	16 95       	lsr	r17
    4052:	07 95       	ror	r16
    4054:	16 95       	lsr	r17
    4056:	07 95       	ror	r16
    4058:	10 93 f2 02 	sts	0x02F2, r17
    405c:	00 93 f1 02 	sts	0x02F1, r16
    4060:	10 92 07 02 	sts	0x0207, r1
    4064:	10 92 ee 02 	sts	0x02EE, r1
    4068:	10 92 ed 02 	sts	0x02ED, r1
    406c:	a0 90 d5 02 	lds	r10, 0x02D5
    4070:	b0 90 d6 02 	lds	r11, 0x02D6
    4074:	c0 90 d7 02 	lds	r12, 0x02D7
    4078:	d0 90 d8 02 	lds	r13, 0x02D8
    407c:	a0 92 dd 02 	sts	0x02DD, r10
    4080:	b0 92 de 02 	sts	0x02DE, r11
    4084:	c0 92 df 02 	sts	0x02DF, r12
    4088:	d0 92 e0 02 	sts	0x02E0, r13
    408c:	97 fd       	sbrc	r25, 7
    408e:	e7 c1       	rjmp	.+974    	; 0x445e <handleMotorsWithSpeedController+0x472>
    4090:	b8 01       	movw	r22, r16
    4092:	75 95       	asr	r23
    4094:	67 95       	ror	r22
    4096:	75 95       	asr	r23
    4098:	67 95       	ror	r22
    409a:	75 95       	asr	r23
    409c:	67 95       	ror	r22
    409e:	88 27       	eor	r24, r24
    40a0:	77 fd       	sbrc	r23, 7
    40a2:	80 95       	com	r24
    40a4:	98 2f       	mov	r25, r24
    40a6:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    40aa:	3b 01       	movw	r6, r22
    40ac:	4c 01       	movw	r8, r24
    40ae:	15 95       	asr	r17
    40b0:	07 95       	ror	r16
    40b2:	15 95       	asr	r17
    40b4:	07 95       	ror	r16
    40b6:	b8 01       	movw	r22, r16
    40b8:	88 27       	eor	r24, r24
    40ba:	77 fd       	sbrc	r23, 7
    40bc:	80 95       	com	r24
    40be:	98 2f       	mov	r25, r24
    40c0:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    40c4:	26 ea       	ldi	r18, 0xA6	; 166
    40c6:	3b e9       	ldi	r19, 0x9B	; 155
    40c8:	44 ec       	ldi	r20, 0xC4	; 196
    40ca:	5e e3       	ldi	r21, 0x3E	; 62
    40cc:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    40d0:	9b 01       	movw	r18, r22
    40d2:	ac 01       	movw	r20, r24
    40d4:	6a e9       	ldi	r22, 0x9A	; 154
    40d6:	79 e9       	ldi	r23, 0x99	; 153
    40d8:	81 ea       	ldi	r24, 0xA1	; 161
    40da:	92 e4       	ldi	r25, 0x42	; 66
    40dc:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <__subsf3>
    40e0:	9b 01       	movw	r18, r22
    40e2:	ac 01       	movw	r20, r24
    40e4:	c4 01       	movw	r24, r8
    40e6:	b3 01       	movw	r22, r6
    40e8:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    40ec:	20 e0       	ldi	r18, 0x00	; 0
    40ee:	30 e0       	ldi	r19, 0x00	; 0
    40f0:	4a e7       	ldi	r20, 0x7A	; 122
    40f2:	54 e4       	ldi	r21, 0x44	; 68
    40f4:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__divsf3>
    40f8:	9b 01       	movw	r18, r22
    40fa:	ac 01       	movw	r20, r24
    40fc:	c6 01       	movw	r24, r12
    40fe:	b5 01       	movw	r22, r10
    4100:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__addsf3>
    4104:	60 93 d5 02 	sts	0x02D5, r22
    4108:	70 93 d6 02 	sts	0x02D6, r23
    410c:	80 93 d7 02 	sts	0x02D7, r24
    4110:	90 93 d8 02 	sts	0x02D8, r25
    4114:	80 91 17 02 	lds	r24, 0x0217
    4118:	81 30       	cpi	r24, 0x01	; 1
    411a:	09 f4       	brne	.+2      	; 0x411e <handleMotorsWithSpeedController+0x132>
    411c:	e7 c1       	rjmp	.+974    	; 0x44ec <handleMotorsWithSpeedController+0x500>
    411e:	8b e0       	ldi	r24, 0x0B	; 11
    4120:	93 e0       	ldi	r25, 0x03	; 3
    4122:	0e 94 cc 13 	call	0x2798	; 0x2798 <start_vertical_speed_control_left>
    4126:	80 91 0b 03 	lds	r24, 0x030B
    412a:	90 91 0c 03 	lds	r25, 0x030C
    412e:	90 93 f8 02 	sts	0x02F8, r25
    4132:	80 93 f7 02 	sts	0x02F7, r24
    4136:	18 16       	cp	r1, r24
    4138:	19 06       	cpc	r1, r25
    413a:	0c f0       	brlt	.+2      	; 0x413e <handleMotorsWithSpeedController+0x152>
    413c:	28 c2       	rjmp	.+1104   	; 0x458e <handleMotorsWithSpeedController+0x5a2>
    413e:	90 93 a9 00 	sts	0x00A9, r25
    4142:	80 93 a8 00 	sts	0x00A8, r24
    4146:	80 91 71 04 	lds	r24, 0x0471
    414a:	8f 5f       	subi	r24, 0xFF	; 255
    414c:	80 93 71 04 	sts	0x0471, r24
    4150:	80 91 08 02 	lds	r24, 0x0208
    4154:	88 23       	and	r24, r24
    4156:	09 f0       	breq	.+2      	; 0x415a <handleMotorsWithSpeedController+0x16e>
    4158:	bb c0       	rjmp	.+374    	; 0x42d0 <handleMotorsWithSpeedController+0x2e4>
    415a:	80 91 71 04 	lds	r24, 0x0471
    415e:	82 30       	cpi	r24, 0x02	; 2
    4160:	08 f4       	brcc	.+2      	; 0x4164 <handleMotorsWithSpeedController+0x178>
    4162:	a9 c0       	rjmp	.+338    	; 0x42b6 <handleMotorsWithSpeedController+0x2ca>
    4164:	10 92 71 04 	sts	0x0471, r1
    4168:	80 91 17 02 	lds	r24, 0x0217
    416c:	81 30       	cpi	r24, 0x01	; 1
    416e:	09 f4       	brne	.+2      	; 0x4172 <handleMotorsWithSpeedController+0x186>
    4170:	47 c1       	rjmp	.+654    	; 0x4400 <handleMotorsWithSpeedController+0x414>
    4172:	90 90 76 04 	lds	r9, 0x0476
    4176:	80 90 77 04 	lds	r8, 0x0477
    417a:	70 90 78 04 	lds	r7, 0x0478
    417e:	60 90 79 04 	lds	r6, 0x0479
    4182:	a4 01       	movw	r20, r8
    4184:	93 01       	movw	r18, r6
    4186:	85 2f       	mov	r24, r21
    4188:	94 2f       	mov	r25, r20
    418a:	a3 2f       	mov	r26, r19
    418c:	b2 2f       	mov	r27, r18
    418e:	80 93 65 04 	sts	0x0465, r24
    4192:	90 93 66 04 	sts	0x0466, r25
    4196:	a0 93 67 04 	sts	0x0467, r26
    419a:	b0 93 68 04 	sts	0x0468, r27
    419e:	e0 90 d1 02 	lds	r14, 0x02D1
    41a2:	f0 90 d2 02 	lds	r15, 0x02D2
    41a6:	00 91 d3 02 	lds	r16, 0x02D3
    41aa:	10 91 d4 02 	lds	r17, 0x02D4
    41ae:	a0 90 d5 02 	lds	r10, 0x02D5
    41b2:	b0 90 d6 02 	lds	r11, 0x02D6
    41b6:	c0 90 d7 02 	lds	r12, 0x02D7
    41ba:	d0 90 d8 02 	lds	r13, 0x02D8
    41be:	c8 01       	movw	r24, r16
    41c0:	b7 01       	movw	r22, r14
    41c2:	20 91 d9 02 	lds	r18, 0x02D9
    41c6:	30 91 da 02 	lds	r19, 0x02DA
    41ca:	40 91 db 02 	lds	r20, 0x02DB
    41ce:	50 91 dc 02 	lds	r21, 0x02DC
    41d2:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <__subsf3>
    41d6:	7b 01       	movw	r14, r22
    41d8:	8c 01       	movw	r16, r24
    41da:	c6 01       	movw	r24, r12
    41dc:	b5 01       	movw	r22, r10
    41de:	20 91 dd 02 	lds	r18, 0x02DD
    41e2:	30 91 de 02 	lds	r19, 0x02DE
    41e6:	40 91 df 02 	lds	r20, 0x02DF
    41ea:	50 91 e0 02 	lds	r21, 0x02E0
    41ee:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <__subsf3>
    41f2:	9b 01       	movw	r18, r22
    41f4:	ac 01       	movw	r20, r24
    41f6:	c8 01       	movw	r24, r16
    41f8:	b7 01       	movw	r22, r14
    41fa:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__addsf3>
    41fe:	20 e0       	ldi	r18, 0x00	; 0
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	40 e0       	ldi	r20, 0x00	; 0
    4204:	5f e3       	ldi	r21, 0x3F	; 63
    4206:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    420a:	8b 01       	movw	r16, r22
    420c:	7c 01       	movw	r14, r24
    420e:	86 2f       	mov	r24, r22
    4210:	91 2f       	mov	r25, r17
    4212:	ae 2d       	mov	r26, r14
    4214:	bf 2d       	mov	r27, r15
    4216:	80 93 72 04 	sts	0x0472, r24
    421a:	90 93 73 04 	sts	0x0473, r25
    421e:	a0 93 74 04 	sts	0x0474, r26
    4222:	b0 93 75 04 	sts	0x0475, r27
    4226:	a4 01       	movw	r20, r8
    4228:	93 01       	movw	r18, r6
    422a:	65 2f       	mov	r22, r21
    422c:	78 2d       	mov	r23, r8
    422e:	83 2f       	mov	r24, r19
    4230:	96 2d       	mov	r25, r6
    4232:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <cos>
    4236:	9b 01       	movw	r18, r22
    4238:	ac 01       	movw	r20, r24
    423a:	60 2f       	mov	r22, r16
    423c:	71 2f       	mov	r23, r17
    423e:	8e 2d       	mov	r24, r14
    4240:	9f 2d       	mov	r25, r15
    4242:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    4246:	9b 01       	movw	r18, r22
    4248:	ac 01       	movw	r20, r24
    424a:	60 91 69 04 	lds	r22, 0x0469
    424e:	70 91 6a 04 	lds	r23, 0x046A
    4252:	80 91 6b 04 	lds	r24, 0x046B
    4256:	90 91 6c 04 	lds	r25, 0x046C
    425a:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__addsf3>
    425e:	60 93 69 04 	sts	0x0469, r22
    4262:	70 93 6a 04 	sts	0x046A, r23
    4266:	80 93 6b 04 	sts	0x046B, r24
    426a:	90 93 6c 04 	sts	0x046C, r25
    426e:	a4 01       	movw	r20, r8
    4270:	93 01       	movw	r18, r6
    4272:	65 2f       	mov	r22, r21
    4274:	78 2d       	mov	r23, r8
    4276:	83 2f       	mov	r24, r19
    4278:	96 2d       	mov	r25, r6
    427a:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <sin>
    427e:	9b 01       	movw	r18, r22
    4280:	ac 01       	movw	r20, r24
    4282:	60 2f       	mov	r22, r16
    4284:	71 2f       	mov	r23, r17
    4286:	8e 2d       	mov	r24, r14
    4288:	9f 2d       	mov	r25, r15
    428a:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    428e:	9b 01       	movw	r18, r22
    4290:	ac 01       	movw	r20, r24
    4292:	60 91 6d 04 	lds	r22, 0x046D
    4296:	70 91 6e 04 	lds	r23, 0x046E
    429a:	80 91 6f 04 	lds	r24, 0x046F
    429e:	90 91 70 04 	lds	r25, 0x0470
    42a2:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__addsf3>
    42a6:	60 93 6d 04 	sts	0x046D, r22
    42aa:	70 93 6e 04 	sts	0x046E, r23
    42ae:	80 93 6f 04 	sts	0x046F, r24
    42b2:	90 93 70 04 	sts	0x0470, r25
    42b6:	1f 91       	pop	r17
    42b8:	0f 91       	pop	r16
    42ba:	ff 90       	pop	r15
    42bc:	ef 90       	pop	r14
    42be:	df 90       	pop	r13
    42c0:	cf 90       	pop	r12
    42c2:	bf 90       	pop	r11
    42c4:	af 90       	pop	r10
    42c6:	9f 90       	pop	r9
    42c8:	8f 90       	pop	r8
    42ca:	7f 90       	pop	r7
    42cc:	6f 90       	pop	r6
    42ce:	08 95       	ret
    42d0:	00 91 ef 02 	lds	r16, 0x02EF
    42d4:	10 91 f0 02 	lds	r17, 0x02F0
    42d8:	16 95       	lsr	r17
    42da:	07 95       	ror	r16
    42dc:	16 95       	lsr	r17
    42de:	07 95       	ror	r16
    42e0:	10 93 f4 02 	sts	0x02F4, r17
    42e4:	00 93 f3 02 	sts	0x02F3, r16
    42e8:	10 92 08 02 	sts	0x0208, r1
    42ec:	10 92 f0 02 	sts	0x02F0, r1
    42f0:	10 92 ef 02 	sts	0x02EF, r1
    42f4:	a0 90 d1 02 	lds	r10, 0x02D1
    42f8:	b0 90 d2 02 	lds	r11, 0x02D2
    42fc:	c0 90 d3 02 	lds	r12, 0x02D3
    4300:	d0 90 d4 02 	lds	r13, 0x02D4
    4304:	a0 92 d9 02 	sts	0x02D9, r10
    4308:	b0 92 da 02 	sts	0x02DA, r11
    430c:	c0 92 db 02 	sts	0x02DB, r12
    4310:	d0 92 dc 02 	sts	0x02DC, r13
    4314:	80 91 e9 02 	lds	r24, 0x02E9
    4318:	90 91 ea 02 	lds	r25, 0x02EA
    431c:	97 fd       	sbrc	r25, 7
    431e:	eb c0       	rjmp	.+470    	; 0x44f6 <handleMotorsWithSpeedController+0x50a>
    4320:	b8 01       	movw	r22, r16
    4322:	75 95       	asr	r23
    4324:	67 95       	ror	r22
    4326:	75 95       	asr	r23
    4328:	67 95       	ror	r22
    432a:	75 95       	asr	r23
    432c:	67 95       	ror	r22
    432e:	88 27       	eor	r24, r24
    4330:	77 fd       	sbrc	r23, 7
    4332:	80 95       	com	r24
    4334:	98 2f       	mov	r25, r24
    4336:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    433a:	3b 01       	movw	r6, r22
    433c:	4c 01       	movw	r8, r24
    433e:	15 95       	asr	r17
    4340:	07 95       	ror	r16
    4342:	15 95       	asr	r17
    4344:	07 95       	ror	r16
    4346:	b8 01       	movw	r22, r16
    4348:	88 27       	eor	r24, r24
    434a:	77 fd       	sbrc	r23, 7
    434c:	80 95       	com	r24
    434e:	98 2f       	mov	r25, r24
    4350:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    4354:	26 ea       	ldi	r18, 0xA6	; 166
    4356:	3b e9       	ldi	r19, 0x9B	; 155
    4358:	44 ec       	ldi	r20, 0xC4	; 196
    435a:	5e e3       	ldi	r21, 0x3E	; 62
    435c:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    4360:	9b 01       	movw	r18, r22
    4362:	ac 01       	movw	r20, r24
    4364:	63 e3       	ldi	r22, 0x33	; 51
    4366:	73 e3       	ldi	r23, 0x33	; 51
    4368:	8d e9       	ldi	r24, 0x9D	; 157
    436a:	92 e4       	ldi	r25, 0x42	; 66
    436c:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <__subsf3>
    4370:	9b 01       	movw	r18, r22
    4372:	ac 01       	movw	r20, r24
    4374:	c4 01       	movw	r24, r8
    4376:	b3 01       	movw	r22, r6
    4378:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	4a e7       	ldi	r20, 0x7A	; 122
    4382:	54 e4       	ldi	r21, 0x44	; 68
    4384:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__divsf3>
    4388:	9b 01       	movw	r18, r22
    438a:	ac 01       	movw	r20, r24
    438c:	c6 01       	movw	r24, r12
    438e:	b5 01       	movw	r22, r10
    4390:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__addsf3>
    4394:	60 93 d1 02 	sts	0x02D1, r22
    4398:	70 93 d2 02 	sts	0x02D2, r23
    439c:	80 93 d3 02 	sts	0x02D3, r24
    43a0:	90 93 d4 02 	sts	0x02D4, r25
    43a4:	80 91 17 02 	lds	r24, 0x0217
    43a8:	81 30       	cpi	r24, 0x01	; 1
    43aa:	09 f4       	brne	.+2      	; 0x43ae <handleMotorsWithSpeedController+0x3c2>
    43ac:	eb c0       	rjmp	.+470    	; 0x4584 <handleMotorsWithSpeedController+0x598>
    43ae:	89 e0       	ldi	r24, 0x09	; 9
    43b0:	93 e0       	ldi	r25, 0x03	; 3
    43b2:	0e 94 12 15 	call	0x2a24	; 0x2a24 <start_vertical_speed_control_right>
    43b6:	80 91 09 03 	lds	r24, 0x0309
    43ba:	90 91 0a 03 	lds	r25, 0x030A
    43be:	90 93 f6 02 	sts	0x02F6, r25
    43c2:	80 93 f5 02 	sts	0x02F5, r24
    43c6:	18 16       	cp	r1, r24
    43c8:	19 06       	cpc	r1, r25
    43ca:	0c f0       	brlt	.+2      	; 0x43ce <handleMotorsWithSpeedController+0x3e2>
    43cc:	eb c0       	rjmp	.+470    	; 0x45a4 <handleMotorsWithSpeedController+0x5b8>
    43ce:	90 93 99 00 	sts	0x0099, r25
    43d2:	80 93 98 00 	sts	0x0098, r24
    43d6:	80 91 71 04 	lds	r24, 0x0471
    43da:	8f 5f       	subi	r24, 0xFF	; 255
    43dc:	80 93 71 04 	sts	0x0471, r24
    43e0:	be ce       	rjmp	.-644    	; 0x415e <handleMotorsWithSpeedController+0x172>
    43e2:	8b e0       	ldi	r24, 0x0B	; 11
    43e4:	93 e0       	ldi	r25, 0x03	; 3
    43e6:	69 e0       	ldi	r22, 0x09	; 9
    43e8:	73 e0       	ldi	r23, 0x03	; 3
    43ea:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <obstacleAvoidance>
    43ee:	80 91 0b 03 	lds	r24, 0x030B
    43f2:	90 91 0c 03 	lds	r25, 0x030C
    43f6:	20 91 09 03 	lds	r18, 0x0309
    43fa:	30 91 0a 03 	lds	r19, 0x030A
    43fe:	17 ce       	rjmp	.-978    	; 0x402e <handleMotorsWithSpeedController+0x42>
    4400:	e0 90 d1 02 	lds	r14, 0x02D1
    4404:	f0 90 d2 02 	lds	r15, 0x02D2
    4408:	00 91 d3 02 	lds	r16, 0x02D3
    440c:	10 91 d4 02 	lds	r17, 0x02D4
    4410:	a0 90 d5 02 	lds	r10, 0x02D5
    4414:	b0 90 d6 02 	lds	r11, 0x02D6
    4418:	c0 90 d7 02 	lds	r12, 0x02D7
    441c:	d0 90 d8 02 	lds	r13, 0x02D8
    4420:	c8 01       	movw	r24, r16
    4422:	b7 01       	movw	r22, r14
    4424:	a6 01       	movw	r20, r12
    4426:	95 01       	movw	r18, r10
    4428:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <__subsf3>
    442c:	20 e0       	ldi	r18, 0x00	; 0
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	4e e1       	ldi	r20, 0x1E	; 30
    4432:	52 e4       	ldi	r21, 0x42	; 66
    4434:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__divsf3>
    4438:	96 2e       	mov	r9, r22
    443a:	87 2e       	mov	r8, r23
    443c:	78 2e       	mov	r7, r24
    443e:	69 2e       	mov	r6, r25
    4440:	a4 01       	movw	r20, r8
    4442:	93 01       	movw	r18, r6
    4444:	85 2f       	mov	r24, r21
    4446:	94 2f       	mov	r25, r20
    4448:	a3 2f       	mov	r26, r19
    444a:	b2 2f       	mov	r27, r18
    444c:	80 93 65 04 	sts	0x0465, r24
    4450:	90 93 66 04 	sts	0x0466, r25
    4454:	a0 93 67 04 	sts	0x0467, r26
    4458:	b0 93 68 04 	sts	0x0468, r27
    445c:	b0 ce       	rjmp	.-672    	; 0x41be <handleMotorsWithSpeedController+0x1d2>
    445e:	b8 01       	movw	r22, r16
    4460:	75 95       	asr	r23
    4462:	67 95       	ror	r22
    4464:	75 95       	asr	r23
    4466:	67 95       	ror	r22
    4468:	75 95       	asr	r23
    446a:	67 95       	ror	r22
    446c:	88 27       	eor	r24, r24
    446e:	77 fd       	sbrc	r23, 7
    4470:	80 95       	com	r24
    4472:	98 2f       	mov	r25, r24
    4474:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    4478:	3b 01       	movw	r6, r22
    447a:	4c 01       	movw	r8, r24
    447c:	15 95       	asr	r17
    447e:	07 95       	ror	r16
    4480:	15 95       	asr	r17
    4482:	07 95       	ror	r16
    4484:	b8 01       	movw	r22, r16
    4486:	88 27       	eor	r24, r24
    4488:	77 fd       	sbrc	r23, 7
    448a:	80 95       	com	r24
    448c:	98 2f       	mov	r25, r24
    448e:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    4492:	26 ea       	ldi	r18, 0xA6	; 166
    4494:	3b e9       	ldi	r19, 0x9B	; 155
    4496:	44 ec       	ldi	r20, 0xC4	; 196
    4498:	5e e3       	ldi	r21, 0x3E	; 62
    449a:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    449e:	9b 01       	movw	r18, r22
    44a0:	ac 01       	movw	r20, r24
    44a2:	6a e9       	ldi	r22, 0x9A	; 154
    44a4:	79 e9       	ldi	r23, 0x99	; 153
    44a6:	81 ea       	ldi	r24, 0xA1	; 161
    44a8:	92 e4       	ldi	r25, 0x42	; 66
    44aa:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <__subsf3>
    44ae:	9b 01       	movw	r18, r22
    44b0:	ac 01       	movw	r20, r24
    44b2:	c4 01       	movw	r24, r8
    44b4:	b3 01       	movw	r22, r6
    44b6:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    44ba:	20 e0       	ldi	r18, 0x00	; 0
    44bc:	30 e0       	ldi	r19, 0x00	; 0
    44be:	4a e7       	ldi	r20, 0x7A	; 122
    44c0:	54 e4       	ldi	r21, 0x44	; 68
    44c2:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__divsf3>
    44c6:	9b 01       	movw	r18, r22
    44c8:	ac 01       	movw	r20, r24
    44ca:	c6 01       	movw	r24, r12
    44cc:	b5 01       	movw	r22, r10
    44ce:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <__subsf3>
    44d2:	60 93 d5 02 	sts	0x02D5, r22
    44d6:	70 93 d6 02 	sts	0x02D6, r23
    44da:	80 93 d7 02 	sts	0x02D7, r24
    44de:	90 93 d8 02 	sts	0x02D8, r25
    44e2:	80 91 17 02 	lds	r24, 0x0217
    44e6:	81 30       	cpi	r24, 0x01	; 1
    44e8:	09 f0       	breq	.+2      	; 0x44ec <handleMotorsWithSpeedController+0x500>
    44ea:	19 ce       	rjmp	.-974    	; 0x411e <handleMotorsWithSpeedController+0x132>
    44ec:	8b e0       	ldi	r24, 0x0B	; 11
    44ee:	93 e0       	ldi	r25, 0x03	; 3
    44f0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <start_horizontal_speed_control_left>
    44f4:	18 ce       	rjmp	.-976    	; 0x4126 <handleMotorsWithSpeedController+0x13a>
    44f6:	b8 01       	movw	r22, r16
    44f8:	75 95       	asr	r23
    44fa:	67 95       	ror	r22
    44fc:	75 95       	asr	r23
    44fe:	67 95       	ror	r22
    4500:	75 95       	asr	r23
    4502:	67 95       	ror	r22
    4504:	88 27       	eor	r24, r24
    4506:	77 fd       	sbrc	r23, 7
    4508:	80 95       	com	r24
    450a:	98 2f       	mov	r25, r24
    450c:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    4510:	3b 01       	movw	r6, r22
    4512:	4c 01       	movw	r8, r24
    4514:	15 95       	asr	r17
    4516:	07 95       	ror	r16
    4518:	15 95       	asr	r17
    451a:	07 95       	ror	r16
    451c:	b8 01       	movw	r22, r16
    451e:	88 27       	eor	r24, r24
    4520:	77 fd       	sbrc	r23, 7
    4522:	80 95       	com	r24
    4524:	98 2f       	mov	r25, r24
    4526:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    452a:	26 ea       	ldi	r18, 0xA6	; 166
    452c:	3b e9       	ldi	r19, 0x9B	; 155
    452e:	44 ec       	ldi	r20, 0xC4	; 196
    4530:	5e e3       	ldi	r21, 0x3E	; 62
    4532:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    4536:	9b 01       	movw	r18, r22
    4538:	ac 01       	movw	r20, r24
    453a:	63 e3       	ldi	r22, 0x33	; 51
    453c:	73 e3       	ldi	r23, 0x33	; 51
    453e:	8d e9       	ldi	r24, 0x9D	; 157
    4540:	92 e4       	ldi	r25, 0x42	; 66
    4542:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <__subsf3>
    4546:	9b 01       	movw	r18, r22
    4548:	ac 01       	movw	r20, r24
    454a:	c4 01       	movw	r24, r8
    454c:	b3 01       	movw	r22, r6
    454e:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	4a e7       	ldi	r20, 0x7A	; 122
    4558:	54 e4       	ldi	r21, 0x44	; 68
    455a:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__divsf3>
    455e:	9b 01       	movw	r18, r22
    4560:	ac 01       	movw	r20, r24
    4562:	c6 01       	movw	r24, r12
    4564:	b5 01       	movw	r22, r10
    4566:	0e 94 1a 2f 	call	0x5e34	; 0x5e34 <__subsf3>
    456a:	60 93 d1 02 	sts	0x02D1, r22
    456e:	70 93 d2 02 	sts	0x02D2, r23
    4572:	80 93 d3 02 	sts	0x02D3, r24
    4576:	90 93 d4 02 	sts	0x02D4, r25
    457a:	80 91 17 02 	lds	r24, 0x0217
    457e:	81 30       	cpi	r24, 0x01	; 1
    4580:	09 f0       	breq	.+2      	; 0x4584 <handleMotorsWithSpeedController+0x598>
    4582:	15 cf       	rjmp	.-470    	; 0x43ae <handleMotorsWithSpeedController+0x3c2>
    4584:	89 e0       	ldi	r24, 0x09	; 9
    4586:	93 e0       	ldi	r25, 0x03	; 3
    4588:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <start_horizontal_speed_control_right>
    458c:	14 cf       	rjmp	.-472    	; 0x43b6 <handleMotorsWithSpeedController+0x3ca>
    458e:	00 97       	sbiw	r24, 0x00	; 0
    4590:	a1 f4       	brne	.+40     	; 0x45ba <handleMotorsWithSpeedController+0x5ce>
    4592:	10 92 a9 00 	sts	0x00A9, r1
    4596:	10 92 a8 00 	sts	0x00A8, r1
    459a:	10 92 ab 00 	sts	0x00AB, r1
    459e:	10 92 aa 00 	sts	0x00AA, r1
    45a2:	d1 cd       	rjmp	.-1118   	; 0x4146 <handleMotorsWithSpeedController+0x15a>
    45a4:	00 97       	sbiw	r24, 0x00	; 0
    45a6:	89 f4       	brne	.+34     	; 0x45ca <handleMotorsWithSpeedController+0x5de>
    45a8:	10 92 99 00 	sts	0x0099, r1
    45ac:	10 92 98 00 	sts	0x0098, r1
    45b0:	10 92 9b 00 	sts	0x009B, r1
    45b4:	10 92 9a 00 	sts	0x009A, r1
    45b8:	0e cf       	rjmp	.-484    	; 0x43d6 <handleMotorsWithSpeedController+0x3ea>
    45ba:	90 95       	com	r25
    45bc:	81 95       	neg	r24
    45be:	9f 4f       	sbci	r25, 0xFF	; 255
    45c0:	90 93 ab 00 	sts	0x00AB, r25
    45c4:	80 93 aa 00 	sts	0x00AA, r24
    45c8:	be cd       	rjmp	.-1156   	; 0x4146 <handleMotorsWithSpeedController+0x15a>
    45ca:	90 95       	com	r25
    45cc:	81 95       	neg	r24
    45ce:	9f 4f       	sbci	r25, 0xFF	; 255
    45d0:	90 93 9b 00 	sts	0x009B, r25
    45d4:	80 93 9a 00 	sts	0x009A, r24
    45d8:	fe ce       	rjmp	.-516    	; 0x43d6 <handleMotorsWithSpeedController+0x3ea>

000045da <setLeftSpeed>:
    45da:	28 2f       	mov	r18, r24
    45dc:	33 27       	eor	r19, r19
    45de:	27 fd       	sbrc	r18, 7
    45e0:	30 95       	com	r19
    45e2:	37 fd       	sbrc	r19, 7
    45e4:	30 c0       	rjmp	.+96     	; 0x4646 <setLeftSpeed+0x6c>
    45e6:	30 93 0e 03 	sts	0x030E, r19
    45ea:	20 93 0d 03 	sts	0x030D, r18
    45ee:	87 fd       	sbrc	r24, 7
    45f0:	1e c0       	rjmp	.+60     	; 0x462e <setLeftSpeed+0x54>
    45f2:	22 0f       	add	r18, r18
    45f4:	33 1f       	adc	r19, r19
    45f6:	22 0f       	add	r18, r18
    45f8:	33 1f       	adc	r19, r19
    45fa:	30 93 fc 02 	sts	0x02FC, r19
    45fe:	20 93 fb 02 	sts	0x02FB, r18
    4602:	82 e0       	ldi	r24, 0x02	; 2
    4604:	21 30       	cpi	r18, 0x01	; 1
    4606:	38 07       	cpc	r19, r24
    4608:	3c f0       	brlt	.+14     	; 0x4618 <setLeftSpeed+0x3e>
    460a:	80 e0       	ldi	r24, 0x00	; 0
    460c:	92 e0       	ldi	r25, 0x02	; 2
    460e:	90 93 fc 02 	sts	0x02FC, r25
    4612:	80 93 fb 02 	sts	0x02FB, r24
    4616:	08 95       	ret
    4618:	8e ef       	ldi	r24, 0xFE	; 254
    461a:	20 30       	cpi	r18, 0x00	; 0
    461c:	38 07       	cpc	r19, r24
    461e:	34 f4       	brge	.+12     	; 0x462c <setLeftSpeed+0x52>
    4620:	80 e0       	ldi	r24, 0x00	; 0
    4622:	9e ef       	ldi	r25, 0xFE	; 254
    4624:	90 93 fc 02 	sts	0x02FC, r25
    4628:	80 93 fb 02 	sts	0x02FB, r24
    462c:	08 95       	ret
    462e:	22 0f       	add	r18, r18
    4630:	33 1f       	adc	r19, r19
    4632:	22 0f       	add	r18, r18
    4634:	33 1f       	adc	r19, r19
    4636:	30 95       	com	r19
    4638:	21 95       	neg	r18
    463a:	3f 4f       	sbci	r19, 0xFF	; 255
    463c:	30 93 fc 02 	sts	0x02FC, r19
    4640:	20 93 fb 02 	sts	0x02FB, r18
    4644:	de cf       	rjmp	.-68     	; 0x4602 <setLeftSpeed+0x28>
    4646:	30 95       	com	r19
    4648:	21 95       	neg	r18
    464a:	3f 4f       	sbci	r19, 0xFF	; 255
    464c:	cc cf       	rjmp	.-104    	; 0x45e6 <setLeftSpeed+0xc>

0000464e <setRightSpeed>:
    464e:	28 2f       	mov	r18, r24
    4650:	33 27       	eor	r19, r19
    4652:	27 fd       	sbrc	r18, 7
    4654:	30 95       	com	r19
    4656:	37 fd       	sbrc	r19, 7
    4658:	30 c0       	rjmp	.+96     	; 0x46ba <setRightSpeed+0x6c>
    465a:	30 93 10 03 	sts	0x0310, r19
    465e:	20 93 0f 03 	sts	0x030F, r18
    4662:	87 fd       	sbrc	r24, 7
    4664:	1e c0       	rjmp	.+60     	; 0x46a2 <setRightSpeed+0x54>
    4666:	22 0f       	add	r18, r18
    4668:	33 1f       	adc	r19, r19
    466a:	22 0f       	add	r18, r18
    466c:	33 1f       	adc	r19, r19
    466e:	30 93 fa 02 	sts	0x02FA, r19
    4672:	20 93 f9 02 	sts	0x02F9, r18
    4676:	82 e0       	ldi	r24, 0x02	; 2
    4678:	21 30       	cpi	r18, 0x01	; 1
    467a:	38 07       	cpc	r19, r24
    467c:	3c f0       	brlt	.+14     	; 0x468c <setRightSpeed+0x3e>
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	92 e0       	ldi	r25, 0x02	; 2
    4682:	90 93 fa 02 	sts	0x02FA, r25
    4686:	80 93 f9 02 	sts	0x02F9, r24
    468a:	08 95       	ret
    468c:	8e ef       	ldi	r24, 0xFE	; 254
    468e:	20 30       	cpi	r18, 0x00	; 0
    4690:	38 07       	cpc	r19, r24
    4692:	34 f4       	brge	.+12     	; 0x46a0 <setRightSpeed+0x52>
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	9e ef       	ldi	r25, 0xFE	; 254
    4698:	90 93 fa 02 	sts	0x02FA, r25
    469c:	80 93 f9 02 	sts	0x02F9, r24
    46a0:	08 95       	ret
    46a2:	22 0f       	add	r18, r18
    46a4:	33 1f       	adc	r19, r19
    46a6:	22 0f       	add	r18, r18
    46a8:	33 1f       	adc	r19, r19
    46aa:	30 95       	com	r19
    46ac:	21 95       	neg	r18
    46ae:	3f 4f       	sbci	r19, 0xFF	; 255
    46b0:	30 93 fa 02 	sts	0x02FA, r19
    46b4:	20 93 f9 02 	sts	0x02F9, r18
    46b8:	de cf       	rjmp	.-68     	; 0x4676 <setRightSpeed+0x28>
    46ba:	30 95       	com	r19
    46bc:	21 95       	neg	r18
    46be:	3f 4f       	sbci	r19, 0xFF	; 255
    46c0:	cc cf       	rjmp	.-104    	; 0x465a <setRightSpeed+0xc>

000046c2 <__vector_45>:
    46c2:	1f 92       	push	r1
    46c4:	0f 92       	push	r0
    46c6:	0f b6       	in	r0, 0x3f	; 63
    46c8:	0f 92       	push	r0
    46ca:	11 24       	eor	r1, r1
    46cc:	8f 93       	push	r24
    46ce:	9f 93       	push	r25
    46d0:	80 91 64 04 	lds	r24, 0x0464
    46d4:	88 23       	and	r24, r24
    46d6:	61 f0       	breq	.+24     	; 0x46f0 <__vector_45+0x2e>
    46d8:	10 92 f8 02 	sts	0x02F8, r1
    46dc:	10 92 f7 02 	sts	0x02F7, r1
    46e0:	10 92 a9 00 	sts	0x00A9, r1
    46e4:	10 92 a8 00 	sts	0x00A8, r1
    46e8:	10 92 ab 00 	sts	0x00AB, r1
    46ec:	10 92 aa 00 	sts	0x00AA, r1
    46f0:	10 92 e2 02 	sts	0x02E2, r1
    46f4:	10 92 e1 02 	sts	0x02E1, r1
    46f8:	80 91 f7 02 	lds	r24, 0x02F7
    46fc:	90 91 f8 02 	lds	r25, 0x02F8
    4700:	00 97       	sbiw	r24, 0x00	; 0
    4702:	41 f5       	brne	.+80     	; 0x4754 <__vector_45+0x92>
    4704:	80 91 eb 02 	lds	r24, 0x02EB
    4708:	90 91 ec 02 	lds	r25, 0x02EC
    470c:	97 fd       	sbrc	r25, 7
    470e:	69 c0       	rjmp	.+210    	; 0x47e2 <__vector_45+0x120>
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	80 93 28 02 	sts	0x0228, r24
    4716:	8e e0       	ldi	r24, 0x0E	; 14
    4718:	80 93 25 02 	sts	0x0225, r24
    471c:	81 e0       	ldi	r24, 0x01	; 1
    471e:	80 93 0a 02 	sts	0x020A, r24
    4722:	80 91 a0 00 	lds	r24, 0x00A0
    4726:	8f 75       	andi	r24, 0x5F	; 95
    4728:	80 93 a0 00 	sts	0x00A0, r24
    472c:	80 91 02 01 	lds	r24, 0x0102
    4730:	87 7e       	andi	r24, 0xE7	; 231
    4732:	80 93 02 01 	sts	0x0102, r24
    4736:	80 91 72 00 	lds	r24, 0x0072
    473a:	89 7f       	andi	r24, 0xF9	; 249
    473c:	80 93 72 00 	sts	0x0072, r24
    4740:	89 b3       	in	r24, 0x19	; 25
    4742:	86 60       	ori	r24, 0x06	; 6
    4744:	89 bb       	out	0x19, r24	; 25
    4746:	9f 91       	pop	r25
    4748:	8f 91       	pop	r24
    474a:	0f 90       	pop	r0
    474c:	0f be       	out	0x3f, r0	; 63
    474e:	0f 90       	pop	r0
    4750:	1f 90       	pop	r1
    4752:	18 95       	reti
    4754:	18 16       	cp	r1, r24
    4756:	19 06       	cpc	r1, r25
    4758:	2c f5       	brge	.+74     	; 0x47a4 <__vector_45+0xe2>
    475a:	10 92 28 02 	sts	0x0228, r1
    475e:	8f e0       	ldi	r24, 0x0F	; 15
    4760:	80 93 25 02 	sts	0x0225, r24
    4764:	80 91 a0 00 	lds	r24, 0x00A0
    4768:	8f 7d       	andi	r24, 0xDF	; 223
    476a:	80 93 a0 00 	sts	0x00A0, r24
    476e:	80 91 72 00 	lds	r24, 0x0072
    4772:	8b 7f       	andi	r24, 0xFB	; 251
    4774:	80 93 72 00 	sts	0x0072, r24
    4778:	80 91 02 01 	lds	r24, 0x0102
    477c:	8f 7e       	andi	r24, 0xEF	; 239
    477e:	80 93 02 01 	sts	0x0102, r24
    4782:	80 91 a0 00 	lds	r24, 0x00A0
    4786:	80 68       	ori	r24, 0x80	; 128
    4788:	80 93 a0 00 	sts	0x00A0, r24
    478c:	80 91 72 00 	lds	r24, 0x0072
    4790:	82 60       	ori	r24, 0x02	; 2
    4792:	80 93 72 00 	sts	0x0072, r24
    4796:	9f 91       	pop	r25
    4798:	8f 91       	pop	r24
    479a:	0f 90       	pop	r0
    479c:	0f be       	out	0x3f, r0	; 63
    479e:	0f 90       	pop	r0
    47a0:	1f 90       	pop	r1
    47a2:	18 95       	reti
    47a4:	10 92 28 02 	sts	0x0228, r1
    47a8:	8e e0       	ldi	r24, 0x0E	; 14
    47aa:	80 93 25 02 	sts	0x0225, r24
    47ae:	80 91 a0 00 	lds	r24, 0x00A0
    47b2:	8f 77       	andi	r24, 0x7F	; 127
    47b4:	80 93 a0 00 	sts	0x00A0, r24
    47b8:	80 91 72 00 	lds	r24, 0x0072
    47bc:	8d 7f       	andi	r24, 0xFD	; 253
    47be:	80 93 72 00 	sts	0x0072, r24
    47c2:	80 91 02 01 	lds	r24, 0x0102
    47c6:	87 7f       	andi	r24, 0xF7	; 247
    47c8:	80 93 02 01 	sts	0x0102, r24
    47cc:	80 91 a0 00 	lds	r24, 0x00A0
    47d0:	80 62       	ori	r24, 0x20	; 32
    47d2:	80 93 a0 00 	sts	0x00A0, r24
    47d6:	80 91 72 00 	lds	r24, 0x0072
    47da:	84 60       	ori	r24, 0x04	; 4
    47dc:	80 93 72 00 	sts	0x0072, r24
    47e0:	b2 cf       	rjmp	.-156    	; 0x4746 <__vector_45+0x84>
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	80 93 28 02 	sts	0x0228, r24
    47e8:	8f e0       	ldi	r24, 0x0F	; 15
    47ea:	80 93 25 02 	sts	0x0225, r24
    47ee:	96 cf       	rjmp	.-212    	; 0x471c <__vector_45+0x5a>

000047f0 <__vector_42>:
    47f0:	1f 92       	push	r1
    47f2:	0f 92       	push	r0
    47f4:	0f b6       	in	r0, 0x3f	; 63
    47f6:	0f 92       	push	r0
    47f8:	11 24       	eor	r1, r1
    47fa:	8f 93       	push	r24
    47fc:	9f 93       	push	r25
    47fe:	81 e0       	ldi	r24, 0x01	; 1
    4800:	80 93 28 02 	sts	0x0228, r24
    4804:	9e e0       	ldi	r25, 0x0E	; 14
    4806:	90 93 25 02 	sts	0x0225, r25
    480a:	80 93 0a 02 	sts	0x020A, r24
    480e:	9f 91       	pop	r25
    4810:	8f 91       	pop	r24
    4812:	0f 90       	pop	r0
    4814:	0f be       	out	0x3f, r0	; 63
    4816:	0f 90       	pop	r0
    4818:	1f 90       	pop	r1
    481a:	18 95       	reti

0000481c <__vector_43>:
    481c:	1f 92       	push	r1
    481e:	0f 92       	push	r0
    4820:	0f b6       	in	r0, 0x3f	; 63
    4822:	0f 92       	push	r0
    4824:	11 24       	eor	r1, r1
    4826:	8f 93       	push	r24
    4828:	9f 93       	push	r25
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	80 93 28 02 	sts	0x0228, r24
    4830:	9f e0       	ldi	r25, 0x0F	; 15
    4832:	90 93 25 02 	sts	0x0225, r25
    4836:	80 93 0a 02 	sts	0x020A, r24
    483a:	9f 91       	pop	r25
    483c:	8f 91       	pop	r24
    483e:	0f 90       	pop	r0
    4840:	0f be       	out	0x3f, r0	; 63
    4842:	0f 90       	pop	r0
    4844:	1f 90       	pop	r1
    4846:	18 95       	reti

00004848 <__vector_35>:
    4848:	1f 92       	push	r1
    484a:	0f 92       	push	r0
    484c:	0f b6       	in	r0, 0x3f	; 63
    484e:	0f 92       	push	r0
    4850:	11 24       	eor	r1, r1
    4852:	8f 93       	push	r24
    4854:	9f 93       	push	r25
    4856:	80 91 64 04 	lds	r24, 0x0464
    485a:	88 23       	and	r24, r24
    485c:	61 f0       	breq	.+24     	; 0x4876 <__vector_35+0x2e>
    485e:	10 92 f6 02 	sts	0x02F6, r1
    4862:	10 92 f5 02 	sts	0x02F5, r1
    4866:	10 92 99 00 	sts	0x0099, r1
    486a:	10 92 98 00 	sts	0x0098, r1
    486e:	10 92 9b 00 	sts	0x009B, r1
    4872:	10 92 9a 00 	sts	0x009A, r1
    4876:	10 92 e4 02 	sts	0x02E4, r1
    487a:	10 92 e3 02 	sts	0x02E3, r1
    487e:	80 91 f5 02 	lds	r24, 0x02F5
    4882:	90 91 f6 02 	lds	r25, 0x02F6
    4886:	00 97       	sbiw	r24, 0x00	; 0
    4888:	31 f5       	brne	.+76     	; 0x48d6 <__vector_35+0x8e>
    488a:	80 91 e9 02 	lds	r24, 0x02E9
    488e:	90 91 ea 02 	lds	r25, 0x02EA
    4892:	97 fd       	sbrc	r25, 7
    4894:	5f c0       	rjmp	.+190    	; 0x4954 <__vector_35+0x10c>
    4896:	81 e0       	ldi	r24, 0x01	; 1
    4898:	80 93 27 02 	sts	0x0227, r24
    489c:	8c e0       	ldi	r24, 0x0C	; 12
    489e:	80 93 26 02 	sts	0x0226, r24
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	80 93 09 02 	sts	0x0209, r24
    48a8:	80 91 90 00 	lds	r24, 0x0090
    48ac:	8f 75       	andi	r24, 0x5F	; 95
    48ae:	80 93 90 00 	sts	0x0090, r24
    48b2:	8e b1       	in	r24, 0x0e	; 14
    48b4:	87 7e       	andi	r24, 0xE7	; 231
    48b6:	8e b9       	out	0x0e, r24	; 14
    48b8:	80 91 71 00 	lds	r24, 0x0071
    48bc:	89 7f       	andi	r24, 0xF9	; 249
    48be:	80 93 71 00 	sts	0x0071, r24
    48c2:	88 b3       	in	r24, 0x18	; 24
    48c4:	86 60       	ori	r24, 0x06	; 6
    48c6:	88 bb       	out	0x18, r24	; 24
    48c8:	9f 91       	pop	r25
    48ca:	8f 91       	pop	r24
    48cc:	0f 90       	pop	r0
    48ce:	0f be       	out	0x3f, r0	; 63
    48d0:	0f 90       	pop	r0
    48d2:	1f 90       	pop	r1
    48d4:	18 95       	reti
    48d6:	18 16       	cp	r1, r24
    48d8:	19 06       	cpc	r1, r25
    48da:	0c f5       	brge	.+66     	; 0x491e <__vector_35+0xd6>
    48dc:	10 92 27 02 	sts	0x0227, r1
    48e0:	8d e0       	ldi	r24, 0x0D	; 13
    48e2:	80 93 26 02 	sts	0x0226, r24
    48e6:	80 91 90 00 	lds	r24, 0x0090
    48ea:	8f 7d       	andi	r24, 0xDF	; 223
    48ec:	80 93 90 00 	sts	0x0090, r24
    48f0:	80 91 71 00 	lds	r24, 0x0071
    48f4:	8b 7f       	andi	r24, 0xFB	; 251
    48f6:	80 93 71 00 	sts	0x0071, r24
    48fa:	74 98       	cbi	0x0e, 4	; 14
    48fc:	80 91 90 00 	lds	r24, 0x0090
    4900:	80 68       	ori	r24, 0x80	; 128
    4902:	80 93 90 00 	sts	0x0090, r24
    4906:	80 91 71 00 	lds	r24, 0x0071
    490a:	82 60       	ori	r24, 0x02	; 2
    490c:	80 93 71 00 	sts	0x0071, r24
    4910:	9f 91       	pop	r25
    4912:	8f 91       	pop	r24
    4914:	0f 90       	pop	r0
    4916:	0f be       	out	0x3f, r0	; 63
    4918:	0f 90       	pop	r0
    491a:	1f 90       	pop	r1
    491c:	18 95       	reti
    491e:	10 92 27 02 	sts	0x0227, r1
    4922:	8c e0       	ldi	r24, 0x0C	; 12
    4924:	80 93 26 02 	sts	0x0226, r24
    4928:	80 91 90 00 	lds	r24, 0x0090
    492c:	8f 77       	andi	r24, 0x7F	; 127
    492e:	80 93 90 00 	sts	0x0090, r24
    4932:	80 91 71 00 	lds	r24, 0x0071
    4936:	8d 7f       	andi	r24, 0xFD	; 253
    4938:	80 93 71 00 	sts	0x0071, r24
    493c:	73 98       	cbi	0x0e, 3	; 14
    493e:	80 91 90 00 	lds	r24, 0x0090
    4942:	80 62       	ori	r24, 0x20	; 32
    4944:	80 93 90 00 	sts	0x0090, r24
    4948:	80 91 71 00 	lds	r24, 0x0071
    494c:	84 60       	ori	r24, 0x04	; 4
    494e:	80 93 71 00 	sts	0x0071, r24
    4952:	ba cf       	rjmp	.-140    	; 0x48c8 <__vector_35+0x80>
    4954:	81 e0       	ldi	r24, 0x01	; 1
    4956:	80 93 27 02 	sts	0x0227, r24
    495a:	8d e0       	ldi	r24, 0x0D	; 13
    495c:	80 93 26 02 	sts	0x0226, r24
    4960:	a0 cf       	rjmp	.-192    	; 0x48a2 <__vector_35+0x5a>

00004962 <__vector_32>:
    4962:	1f 92       	push	r1
    4964:	0f 92       	push	r0
    4966:	0f b6       	in	r0, 0x3f	; 63
    4968:	0f 92       	push	r0
    496a:	11 24       	eor	r1, r1
    496c:	8f 93       	push	r24
    496e:	9f 93       	push	r25
    4970:	81 e0       	ldi	r24, 0x01	; 1
    4972:	80 93 27 02 	sts	0x0227, r24
    4976:	9c e0       	ldi	r25, 0x0C	; 12
    4978:	90 93 26 02 	sts	0x0226, r25
    497c:	80 93 09 02 	sts	0x0209, r24
    4980:	9f 91       	pop	r25
    4982:	8f 91       	pop	r24
    4984:	0f 90       	pop	r0
    4986:	0f be       	out	0x3f, r0	; 63
    4988:	0f 90       	pop	r0
    498a:	1f 90       	pop	r1
    498c:	18 95       	reti

0000498e <__vector_33>:
    498e:	1f 92       	push	r1
    4990:	0f 92       	push	r0
    4992:	0f b6       	in	r0, 0x3f	; 63
    4994:	0f 92       	push	r0
    4996:	11 24       	eor	r1, r1
    4998:	8f 93       	push	r24
    499a:	9f 93       	push	r25
    499c:	81 e0       	ldi	r24, 0x01	; 1
    499e:	80 93 27 02 	sts	0x0227, r24
    49a2:	9d e0       	ldi	r25, 0x0D	; 13
    49a4:	90 93 26 02 	sts	0x0226, r25
    49a8:	80 93 09 02 	sts	0x0209, r24
    49ac:	9f 91       	pop	r25
    49ae:	8f 91       	pop	r24
    49b0:	0f 90       	pop	r0
    49b2:	0f be       	out	0x3f, r0	; 63
    49b4:	0f 90       	pop	r0
    49b6:	1f 90       	pop	r1
    49b8:	18 95       	reti

000049ba <initBehaviors>:
    49ba:	80 91 94 00 	lds	r24, 0x0094
    49be:	90 91 95 00 	lds	r25, 0x0095
    49c2:	0e 94 bc 32 	call	0x6578	; 0x6578 <srand>
    49c6:	08 95       	ret

000049c8 <obstacleAvoidance>:
    49c8:	2f 92       	push	r2
    49ca:	3f 92       	push	r3
    49cc:	4f 92       	push	r4
    49ce:	5f 92       	push	r5
    49d0:	6f 92       	push	r6
    49d2:	7f 92       	push	r7
    49d4:	8f 92       	push	r8
    49d6:	9f 92       	push	r9
    49d8:	af 92       	push	r10
    49da:	bf 92       	push	r11
    49dc:	cf 92       	push	r12
    49de:	df 92       	push	r13
    49e0:	ef 92       	push	r14
    49e2:	ff 92       	push	r15
    49e4:	0f 93       	push	r16
    49e6:	1f 93       	push	r17
    49e8:	df 93       	push	r29
    49ea:	cf 93       	push	r28
    49ec:	cd b7       	in	r28, 0x3d	; 61
    49ee:	de b7       	in	r29, 0x3e	; 62
    49f0:	28 97       	sbiw	r28, 0x08	; 8
    49f2:	0f b6       	in	r0, 0x3f	; 63
    49f4:	f8 94       	cli
    49f6:	de bf       	out	0x3e, r29	; 62
    49f8:	0f be       	out	0x3f, r0	; 63
    49fa:	cd bf       	out	0x3d, r28	; 61
    49fc:	2c 01       	movw	r4, r24
    49fe:	7a 83       	std	Y+2, r23	; 0x02
    4a00:	69 83       	std	Y+1, r22	; 0x01
    4a02:	fc 01       	movw	r30, r24
    4a04:	01 90       	ld	r0, Z+
    4a06:	f0 81       	ld	r31, Z
    4a08:	e0 2d       	mov	r30, r0
    4a0a:	fc 83       	std	Y+4, r31	; 0x04
    4a0c:	eb 83       	std	Y+3, r30	; 0x03
    4a0e:	fb 01       	movw	r30, r22
    4a10:	01 90       	ld	r0, Z+
    4a12:	f0 81       	ld	r31, Z
    4a14:	e0 2d       	mov	r30, r0
    4a16:	fe 83       	std	Y+6, r31	; 0x06
    4a18:	ed 83       	std	Y+5, r30	; 0x05
    4a1a:	60 91 c1 02 	lds	r22, 0x02C1
    4a1e:	70 91 c2 02 	lds	r23, 0x02C2
    4a22:	65 30       	cpi	r22, 0x05	; 5
    4a24:	71 05       	cpc	r23, r1
    4a26:	34 f4       	brge	.+12     	; 0x4a34 <obstacleAvoidance+0x6c>
    4a28:	10 92 c2 02 	sts	0x02C2, r1
    4a2c:	10 92 c1 02 	sts	0x02C1, r1
    4a30:	60 e0       	ldi	r22, 0x00	; 0
    4a32:	70 e0       	ldi	r23, 0x00	; 0
    4a34:	40 91 c3 02 	lds	r20, 0x02C3
    4a38:	50 91 c4 02 	lds	r21, 0x02C4
    4a3c:	45 30       	cpi	r20, 0x05	; 5
    4a3e:	51 05       	cpc	r21, r1
    4a40:	34 f4       	brge	.+12     	; 0x4a4e <obstacleAvoidance+0x86>
    4a42:	10 92 c4 02 	sts	0x02C4, r1
    4a46:	10 92 c3 02 	sts	0x02C3, r1
    4a4a:	40 e0       	ldi	r20, 0x00	; 0
    4a4c:	50 e0       	ldi	r21, 0x00	; 0
    4a4e:	80 91 c5 02 	lds	r24, 0x02C5
    4a52:	90 91 c6 02 	lds	r25, 0x02C6
    4a56:	85 30       	cpi	r24, 0x05	; 5
    4a58:	91 05       	cpc	r25, r1
    4a5a:	24 f4       	brge	.+8      	; 0x4a64 <obstacleAvoidance+0x9c>
    4a5c:	10 92 c6 02 	sts	0x02C6, r1
    4a60:	10 92 c5 02 	sts	0x02C5, r1
    4a64:	00 91 c7 02 	lds	r16, 0x02C7
    4a68:	10 91 c8 02 	lds	r17, 0x02C8
    4a6c:	05 30       	cpi	r16, 0x05	; 5
    4a6e:	11 05       	cpc	r17, r1
    4a70:	34 f4       	brge	.+12     	; 0x4a7e <obstacleAvoidance+0xb6>
    4a72:	10 92 c8 02 	sts	0x02C8, r1
    4a76:	10 92 c7 02 	sts	0x02C7, r1
    4a7a:	00 e0       	ldi	r16, 0x00	; 0
    4a7c:	10 e0       	ldi	r17, 0x00	; 0
    4a7e:	60 90 c9 02 	lds	r6, 0x02C9
    4a82:	70 90 ca 02 	lds	r7, 0x02CA
    4a86:	f5 e0       	ldi	r31, 0x05	; 5
    4a88:	6f 16       	cp	r6, r31
    4a8a:	71 04       	cpc	r7, r1
    4a8c:	34 f4       	brge	.+12     	; 0x4a9a <obstacleAvoidance+0xd2>
    4a8e:	10 92 ca 02 	sts	0x02CA, r1
    4a92:	10 92 c9 02 	sts	0x02C9, r1
    4a96:	66 24       	eor	r6, r6
    4a98:	77 24       	eor	r7, r7
    4a9a:	20 91 cb 02 	lds	r18, 0x02CB
    4a9e:	30 91 cc 02 	lds	r19, 0x02CC
    4aa2:	25 30       	cpi	r18, 0x05	; 5
    4aa4:	31 05       	cpc	r19, r1
    4aa6:	34 f4       	brge	.+12     	; 0x4ab4 <obstacleAvoidance+0xec>
    4aa8:	10 92 cc 02 	sts	0x02CC, r1
    4aac:	10 92 cb 02 	sts	0x02CB, r1
    4ab0:	20 e0       	ldi	r18, 0x00	; 0
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	80 91 cd 02 	lds	r24, 0x02CD
    4ab8:	90 91 ce 02 	lds	r25, 0x02CE
    4abc:	85 30       	cpi	r24, 0x05	; 5
    4abe:	91 05       	cpc	r25, r1
    4ac0:	24 f4       	brge	.+8      	; 0x4aca <obstacleAvoidance+0x102>
    4ac2:	10 92 ce 02 	sts	0x02CE, r1
    4ac6:	10 92 cd 02 	sts	0x02CD, r1
    4aca:	80 91 cf 02 	lds	r24, 0x02CF
    4ace:	90 91 d0 02 	lds	r25, 0x02D0
    4ad2:	85 30       	cpi	r24, 0x05	; 5
    4ad4:	91 05       	cpc	r25, r1
    4ad6:	34 f4       	brge	.+12     	; 0x4ae4 <obstacleAvoidance+0x11c>
    4ad8:	10 92 d0 02 	sts	0x02D0, r1
    4adc:	10 92 cf 02 	sts	0x02CF, r1
    4ae0:	80 e0       	ldi	r24, 0x00	; 0
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	ee 24       	eor	r14, r14
    4ae6:	ff 24       	eor	r15, r15
    4ae8:	e6 1a       	sub	r14, r22
    4aea:	f7 0a       	sbc	r15, r23
    4aec:	5a 01       	movw	r10, r20
    4aee:	b5 94       	asr	r11
    4af0:	a7 94       	ror	r10
    4af2:	15 95       	asr	r17
    4af4:	07 95       	ror	r16
    4af6:	69 01       	movw	r12, r18
    4af8:	d5 94       	asr	r13
    4afa:	c7 94       	ror	r12
    4afc:	4c 01       	movw	r8, r24
    4afe:	95 94       	asr	r9
    4b00:	87 94       	ror	r8
    4b02:	0e 94 b7 32 	call	0x656e	; 0x656e <rand>
    4b06:	93 01       	movw	r18, r6
    4b08:	2e 51       	subi	r18, 0x1E	; 30
    4b0a:	30 40       	sbci	r19, 0x00	; 0
    4b0c:	2e 0d       	add	r18, r14
    4b0e:	3f 1d       	adc	r19, r15
    4b10:	20 0f       	add	r18, r16
    4b12:	31 1f       	adc	r19, r17
    4b14:	2c 0d       	add	r18, r12
    4b16:	3d 1d       	adc	r19, r13
    4b18:	2a 19       	sub	r18, r10
    4b1a:	3b 09       	sbc	r19, r11
    4b1c:	28 19       	sub	r18, r8
    4b1e:	39 09       	sbc	r19, r9
    4b20:	4c e3       	ldi	r20, 0x3C	; 60
    4b22:	24 2e       	mov	r2, r20
    4b24:	31 2c       	mov	r3, r1
    4b26:	b1 01       	movw	r22, r2
    4b28:	0e 94 56 32 	call	0x64ac	; 0x64ac <__divmodhi4>
    4b2c:	28 0f       	add	r18, r24
    4b2e:	39 1f       	adc	r19, r25
    4b30:	38 87       	std	Y+8, r19	; 0x08
    4b32:	2f 83       	std	Y+7, r18	; 0x07
    4b34:	e0 90 c3 02 	lds	r14, 0x02C3
    4b38:	f0 90 c4 02 	lds	r15, 0x02C4
    4b3c:	f5 94       	asr	r15
    4b3e:	e7 94       	ror	r14
    4b40:	00 91 c5 02 	lds	r16, 0x02C5
    4b44:	10 91 c6 02 	lds	r17, 0x02C6
    4b48:	15 95       	asr	r17
    4b4a:	07 95       	ror	r16
    4b4c:	15 95       	asr	r17
    4b4e:	07 95       	ror	r16
    4b50:	c0 90 c7 02 	lds	r12, 0x02C7
    4b54:	d0 90 c8 02 	lds	r13, 0x02C8
    4b58:	d5 94       	asr	r13
    4b5a:	c7 94       	ror	r12
    4b5c:	80 90 cb 02 	lds	r8, 0x02CB
    4b60:	90 90 cc 02 	lds	r9, 0x02CC
    4b64:	95 94       	asr	r9
    4b66:	87 94       	ror	r8
    4b68:	60 90 cd 02 	lds	r6, 0x02CD
    4b6c:	70 90 ce 02 	lds	r7, 0x02CE
    4b70:	75 94       	asr	r7
    4b72:	67 94       	ror	r6
    4b74:	75 94       	asr	r7
    4b76:	67 94       	ror	r6
    4b78:	a0 90 cf 02 	lds	r10, 0x02CF
    4b7c:	b0 90 d0 02 	lds	r11, 0x02D0
    4b80:	b5 94       	asr	r11
    4b82:	a7 94       	ror	r10
    4b84:	0e 94 b7 32 	call	0x656e	; 0x656e <rand>
    4b88:	97 01       	movw	r18, r14
    4b8a:	20 0f       	add	r18, r16
    4b8c:	31 1f       	adc	r19, r17
    4b8e:	2e 51       	subi	r18, 0x1E	; 30
    4b90:	30 40       	sbci	r19, 0x00	; 0
    4b92:	2c 0d       	add	r18, r12
    4b94:	3d 1d       	adc	r19, r13
    4b96:	2a 19       	sub	r18, r10
    4b98:	3b 09       	sbc	r19, r11
    4b9a:	28 19       	sub	r18, r8
    4b9c:	39 09       	sbc	r19, r9
    4b9e:	26 19       	sub	r18, r6
    4ba0:	37 09       	sbc	r19, r7
    4ba2:	b1 01       	movw	r22, r2
    4ba4:	0e 94 56 32 	call	0x64ac	; 0x64ac <__divmodhi4>
    4ba8:	28 0f       	add	r18, r24
    4baa:	39 1f       	adc	r19, r25
    4bac:	4b 81       	ldd	r20, Y+3	; 0x03
    4bae:	5c 81       	ldd	r21, Y+4	; 0x04
    4bb0:	57 fd       	sbrc	r21, 7
    4bb2:	97 c0       	rjmp	.+302    	; 0x4ce2 <obstacleAvoidance+0x31a>
    4bb4:	5a 01       	movw	r10, r20
    4bb6:	cc 24       	eor	r12, r12
    4bb8:	b7 fc       	sbrc	r11, 7
    4bba:	c0 94       	com	r12
    4bbc:	dc 2c       	mov	r13, r12
    4bbe:	8f 81       	ldd	r24, Y+7	; 0x07
    4bc0:	98 85       	ldd	r25, Y+8	; 0x08
    4bc2:	3c 01       	movw	r6, r24
    4bc4:	88 24       	eor	r8, r8
    4bc6:	77 fc       	sbrc	r7, 7
    4bc8:	80 94       	com	r8
    4bca:	98 2c       	mov	r9, r8
    4bcc:	79 01       	movw	r14, r18
    4bce:	00 27       	eor	r16, r16
    4bd0:	f7 fc       	sbrc	r15, 7
    4bd2:	00 95       	com	r16
    4bd4:	10 2f       	mov	r17, r16
    4bd6:	c4 01       	movw	r24, r8
    4bd8:	b3 01       	movw	r22, r6
    4bda:	6e 19       	sub	r22, r14
    4bdc:	7f 09       	sbc	r23, r15
    4bde:	80 0b       	sbc	r24, r16
    4be0:	91 0b       	sbc	r25, r17
    4be2:	a6 01       	movw	r20, r12
    4be4:	95 01       	movw	r18, r10
    4be6:	0e 94 23 32 	call	0x6446	; 0x6446 <__mulsi3>
    4bea:	f6 e0       	ldi	r31, 0x06	; 6
    4bec:	95 95       	asr	r25
    4bee:	87 95       	ror	r24
    4bf0:	77 95       	ror	r23
    4bf2:	67 95       	ror	r22
    4bf4:	fa 95       	dec	r31
    4bf6:	d1 f7       	brne	.-12     	; 0x4bec <obstacleAvoidance+0x224>
    4bf8:	6a 0d       	add	r22, r10
    4bfa:	7b 1d       	adc	r23, r11
    4bfc:	8c 1d       	adc	r24, r12
    4bfe:	9d 1d       	adc	r25, r13
    4c00:	f2 01       	movw	r30, r4
    4c02:	71 83       	std	Z+1, r23	; 0x01
    4c04:	60 83       	st	Z, r22
    4c06:	2d 81       	ldd	r18, Y+5	; 0x05
    4c08:	3e 81       	ldd	r19, Y+6	; 0x06
    4c0a:	37 fd       	sbrc	r19, 7
    4c0c:	99 c0       	rjmp	.+306    	; 0x4d40 <obstacleAvoidance+0x378>
    4c0e:	59 01       	movw	r10, r18
    4c10:	cc 24       	eor	r12, r12
    4c12:	b7 fc       	sbrc	r11, 7
    4c14:	c0 94       	com	r12
    4c16:	dc 2c       	mov	r13, r12
    4c18:	c8 01       	movw	r24, r16
    4c1a:	b7 01       	movw	r22, r14
    4c1c:	66 0d       	add	r22, r6
    4c1e:	77 1d       	adc	r23, r7
    4c20:	88 1d       	adc	r24, r8
    4c22:	99 1d       	adc	r25, r9
    4c24:	a6 01       	movw	r20, r12
    4c26:	95 01       	movw	r18, r10
    4c28:	0e 94 23 32 	call	0x6446	; 0x6446 <__mulsi3>
    4c2c:	36 e0       	ldi	r19, 0x06	; 6
    4c2e:	95 95       	asr	r25
    4c30:	87 95       	ror	r24
    4c32:	77 95       	ror	r23
    4c34:	67 95       	ror	r22
    4c36:	3a 95       	dec	r19
    4c38:	d1 f7       	brne	.-12     	; 0x4c2e <obstacleAvoidance+0x266>
    4c3a:	6a 0d       	add	r22, r10
    4c3c:	7b 1d       	adc	r23, r11
    4c3e:	8c 1d       	adc	r24, r12
    4c40:	9d 1d       	adc	r25, r13
    4c42:	9b 01       	movw	r18, r22
    4c44:	e9 81       	ldd	r30, Y+1	; 0x01
    4c46:	fa 81       	ldd	r31, Y+2	; 0x02
    4c48:	71 83       	std	Z+1, r23	; 0x01
    4c4a:	60 83       	st	Z, r22
    4c4c:	f2 e0       	ldi	r31, 0x02	; 2
    4c4e:	21 30       	cpi	r18, 0x01	; 1
    4c50:	3f 07       	cpc	r19, r31
    4c52:	44 f0       	brlt	.+16     	; 0x4c64 <obstacleAvoidance+0x29c>
    4c54:	80 e0       	ldi	r24, 0x00	; 0
    4c56:	92 e0       	ldi	r25, 0x02	; 2
    4c58:	e9 81       	ldd	r30, Y+1	; 0x01
    4c5a:	fa 81       	ldd	r31, Y+2	; 0x02
    4c5c:	91 83       	std	Z+1, r25	; 0x01
    4c5e:	80 83       	st	Z, r24
    4c60:	20 e0       	ldi	r18, 0x00	; 0
    4c62:	32 e0       	ldi	r19, 0x02	; 2
    4c64:	f2 01       	movw	r30, r4
    4c66:	80 81       	ld	r24, Z
    4c68:	91 81       	ldd	r25, Z+1	; 0x01
    4c6a:	f2 e0       	ldi	r31, 0x02	; 2
    4c6c:	81 30       	cpi	r24, 0x01	; 1
    4c6e:	9f 07       	cpc	r25, r31
    4c70:	4c f0       	brlt	.+18     	; 0x4c84 <obstacleAvoidance+0x2bc>
    4c72:	80 e0       	ldi	r24, 0x00	; 0
    4c74:	92 e0       	ldi	r25, 0x02	; 2
    4c76:	f2 01       	movw	r30, r4
    4c78:	91 83       	std	Z+1, r25	; 0x01
    4c7a:	80 83       	st	Z, r24
    4c7c:	e9 81       	ldd	r30, Y+1	; 0x01
    4c7e:	fa 81       	ldd	r31, Y+2	; 0x02
    4c80:	20 81       	ld	r18, Z
    4c82:	31 81       	ldd	r19, Z+1	; 0x01
    4c84:	fe ef       	ldi	r31, 0xFE	; 254
    4c86:	20 30       	cpi	r18, 0x00	; 0
    4c88:	3f 07       	cpc	r19, r31
    4c8a:	4c f4       	brge	.+18     	; 0x4c9e <obstacleAvoidance+0x2d6>
    4c8c:	80 e0       	ldi	r24, 0x00	; 0
    4c8e:	9e ef       	ldi	r25, 0xFE	; 254
    4c90:	e9 81       	ldd	r30, Y+1	; 0x01
    4c92:	fa 81       	ldd	r31, Y+2	; 0x02
    4c94:	91 83       	std	Z+1, r25	; 0x01
    4c96:	80 83       	st	Z, r24
    4c98:	f2 01       	movw	r30, r4
    4c9a:	80 81       	ld	r24, Z
    4c9c:	91 81       	ldd	r25, Z+1	; 0x01
    4c9e:	fe ef       	ldi	r31, 0xFE	; 254
    4ca0:	80 30       	cpi	r24, 0x00	; 0
    4ca2:	9f 07       	cpc	r25, r31
    4ca4:	2c f4       	brge	.+10     	; 0x4cb0 <obstacleAvoidance+0x2e8>
    4ca6:	80 e0       	ldi	r24, 0x00	; 0
    4ca8:	9e ef       	ldi	r25, 0xFE	; 254
    4caa:	f2 01       	movw	r30, r4
    4cac:	91 83       	std	Z+1, r25	; 0x01
    4cae:	80 83       	st	Z, r24
    4cb0:	28 96       	adiw	r28, 0x08	; 8
    4cb2:	0f b6       	in	r0, 0x3f	; 63
    4cb4:	f8 94       	cli
    4cb6:	de bf       	out	0x3e, r29	; 62
    4cb8:	0f be       	out	0x3f, r0	; 63
    4cba:	cd bf       	out	0x3d, r28	; 61
    4cbc:	cf 91       	pop	r28
    4cbe:	df 91       	pop	r29
    4cc0:	1f 91       	pop	r17
    4cc2:	0f 91       	pop	r16
    4cc4:	ff 90       	pop	r15
    4cc6:	ef 90       	pop	r14
    4cc8:	df 90       	pop	r13
    4cca:	cf 90       	pop	r12
    4ccc:	bf 90       	pop	r11
    4cce:	af 90       	pop	r10
    4cd0:	9f 90       	pop	r9
    4cd2:	8f 90       	pop	r8
    4cd4:	7f 90       	pop	r7
    4cd6:	6f 90       	pop	r6
    4cd8:	5f 90       	pop	r5
    4cda:	4f 90       	pop	r4
    4cdc:	3f 90       	pop	r3
    4cde:	2f 90       	pop	r2
    4ce0:	08 95       	ret
    4ce2:	4d 81       	ldd	r20, Y+5	; 0x05
    4ce4:	5e 81       	ldd	r21, Y+6	; 0x06
    4ce6:	5a 01       	movw	r10, r20
    4ce8:	cc 24       	eor	r12, r12
    4cea:	b7 fc       	sbrc	r11, 7
    4cec:	c0 94       	com	r12
    4cee:	dc 2c       	mov	r13, r12
    4cf0:	8f 81       	ldd	r24, Y+7	; 0x07
    4cf2:	98 85       	ldd	r25, Y+8	; 0x08
    4cf4:	3c 01       	movw	r6, r24
    4cf6:	88 24       	eor	r8, r8
    4cf8:	77 fc       	sbrc	r7, 7
    4cfa:	80 94       	com	r8
    4cfc:	98 2c       	mov	r9, r8
    4cfe:	79 01       	movw	r14, r18
    4d00:	00 27       	eor	r16, r16
    4d02:	f7 fc       	sbrc	r15, 7
    4d04:	00 95       	com	r16
    4d06:	10 2f       	mov	r17, r16
    4d08:	c8 01       	movw	r24, r16
    4d0a:	b7 01       	movw	r22, r14
    4d0c:	66 0d       	add	r22, r6
    4d0e:	77 1d       	adc	r23, r7
    4d10:	88 1d       	adc	r24, r8
    4d12:	99 1d       	adc	r25, r9
    4d14:	a6 01       	movw	r20, r12
    4d16:	95 01       	movw	r18, r10
    4d18:	0e 94 23 32 	call	0x6446	; 0x6446 <__mulsi3>
    4d1c:	e6 e0       	ldi	r30, 0x06	; 6
    4d1e:	95 95       	asr	r25
    4d20:	87 95       	ror	r24
    4d22:	77 95       	ror	r23
    4d24:	67 95       	ror	r22
    4d26:	ea 95       	dec	r30
    4d28:	d1 f7       	brne	.-12     	; 0x4d1e <obstacleAvoidance+0x356>
    4d2a:	26 1b       	sub	r18, r22
    4d2c:	37 0b       	sbc	r19, r23
    4d2e:	48 0b       	sbc	r20, r24
    4d30:	59 0b       	sbc	r21, r25
    4d32:	f2 01       	movw	r30, r4
    4d34:	31 83       	std	Z+1, r19	; 0x01
    4d36:	20 83       	st	Z, r18
    4d38:	2d 81       	ldd	r18, Y+5	; 0x05
    4d3a:	3e 81       	ldd	r19, Y+6	; 0x06
    4d3c:	37 ff       	sbrs	r19, 7
    4d3e:	67 cf       	rjmp	.-306    	; 0x4c0e <obstacleAvoidance+0x246>
    4d40:	2b 81       	ldd	r18, Y+3	; 0x03
    4d42:	3c 81       	ldd	r19, Y+4	; 0x04
    4d44:	59 01       	movw	r10, r18
    4d46:	cc 24       	eor	r12, r12
    4d48:	b7 fc       	sbrc	r11, 7
    4d4a:	c0 94       	com	r12
    4d4c:	dc 2c       	mov	r13, r12
    4d4e:	c4 01       	movw	r24, r8
    4d50:	b3 01       	movw	r22, r6
    4d52:	6e 19       	sub	r22, r14
    4d54:	7f 09       	sbc	r23, r15
    4d56:	80 0b       	sbc	r24, r16
    4d58:	91 0b       	sbc	r25, r17
    4d5a:	a6 01       	movw	r20, r12
    4d5c:	95 01       	movw	r18, r10
    4d5e:	0e 94 23 32 	call	0x6446	; 0x6446 <__mulsi3>
    4d62:	26 e0       	ldi	r18, 0x06	; 6
    4d64:	95 95       	asr	r25
    4d66:	87 95       	ror	r24
    4d68:	77 95       	ror	r23
    4d6a:	67 95       	ror	r22
    4d6c:	2a 95       	dec	r18
    4d6e:	d1 f7       	brne	.-12     	; 0x4d64 <obstacleAvoidance+0x39c>
    4d70:	a6 1a       	sub	r10, r22
    4d72:	b7 0a       	sbc	r11, r23
    4d74:	c8 0a       	sbc	r12, r24
    4d76:	d9 0a       	sbc	r13, r25
    4d78:	95 01       	movw	r18, r10
    4d7a:	e9 81       	ldd	r30, Y+1	; 0x01
    4d7c:	fa 81       	ldd	r31, Y+2	; 0x02
    4d7e:	b1 82       	std	Z+1, r11	; 0x01
    4d80:	a0 82       	st	Z, r10
    4d82:	64 cf       	rjmp	.-312    	; 0x4c4c <obstacleAvoidance+0x284>

00004d84 <cliffDetected>:
    4d84:	80 91 69 02 	lds	r24, 0x0269
    4d88:	90 91 6a 02 	lds	r25, 0x026A
    4d8c:	21 e0       	ldi	r18, 0x01	; 1
    4d8e:	84 3a       	cpi	r24, 0xA4	; 164
    4d90:	92 07       	cpc	r25, r18
    4d92:	d4 f0       	brlt	.+52     	; 0x4dc8 <cliffDetected+0x44>
    4d94:	80 91 6b 02 	lds	r24, 0x026B
    4d98:	90 91 6c 02 	lds	r25, 0x026C
    4d9c:	21 e0       	ldi	r18, 0x01	; 1
    4d9e:	84 3a       	cpi	r24, 0xA4	; 164
    4da0:	92 07       	cpc	r25, r18
    4da2:	94 f0       	brlt	.+36     	; 0x4dc8 <cliffDetected+0x44>
    4da4:	80 91 6d 02 	lds	r24, 0x026D
    4da8:	90 91 6e 02 	lds	r25, 0x026E
    4dac:	21 e0       	ldi	r18, 0x01	; 1
    4dae:	84 3a       	cpi	r24, 0xA4	; 164
    4db0:	92 07       	cpc	r25, r18
    4db2:	74 f0       	brlt	.+28     	; 0x4dd0 <cliffDetected+0x4c>
    4db4:	81 e0       	ldi	r24, 0x01	; 1
    4db6:	20 91 6f 02 	lds	r18, 0x026F
    4dba:	30 91 70 02 	lds	r19, 0x0270
    4dbe:	91 e0       	ldi	r25, 0x01	; 1
    4dc0:	24 3a       	cpi	r18, 0xA4	; 164
    4dc2:	39 07       	cpc	r19, r25
    4dc4:	1c f4       	brge	.+6      	; 0x4dcc <cliffDetected+0x48>
    4dc6:	08 95       	ret
    4dc8:	81 e0       	ldi	r24, 0x01	; 1
    4dca:	08 95       	ret
    4dcc:	80 e0       	ldi	r24, 0x00	; 0
    4dce:	08 95       	ret
    4dd0:	81 e0       	ldi	r24, 0x01	; 1
    4dd2:	08 95       	ret

00004dd4 <enableObstacleAvoidance>:
    4dd4:	81 e0       	ldi	r24, 0x01	; 1
    4dd6:	80 93 62 04 	sts	0x0462, r24
    4dda:	08 95       	ret

00004ddc <disableObstacleAvoidance>:
    4ddc:	10 92 62 04 	sts	0x0462, r1
    4de0:	08 95       	ret

00004de2 <enableCliffAvoidance>:
    4de2:	81 e0       	ldi	r24, 0x01	; 1
    4de4:	80 93 63 04 	sts	0x0463, r24
    4de8:	08 95       	ret

00004dea <disableCliffAvoidance>:
    4dea:	10 92 63 04 	sts	0x0463, r1
    4dee:	08 95       	ret

00004df0 <initRGBleds>:
    4df0:	a0 e8       	ldi	r26, 0x80	; 128
    4df2:	b0 e0       	ldi	r27, 0x00	; 0
    4df4:	1c 92       	st	X, r1
    4df6:	e1 e8       	ldi	r30, 0x81	; 129
    4df8:	f0 e0       	ldi	r31, 0x00	; 0
    4dfa:	10 82       	st	Z, r1
    4dfc:	8c 91       	ld	r24, X
    4dfe:	89 6a       	ori	r24, 0xA9	; 169
    4e00:	8c 93       	st	X, r24
    4e02:	80 81       	ld	r24, Z
    4e04:	89 60       	ori	r24, 0x09	; 9
    4e06:	80 83       	st	Z, r24
    4e08:	80 91 0c 02 	lds	r24, 0x020C
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	90 93 89 00 	sts	0x0089, r25
    4e12:	80 93 88 00 	sts	0x0088, r24
    4e16:	80 91 0d 02 	lds	r24, 0x020D
    4e1a:	90 e0       	ldi	r25, 0x00	; 0
    4e1c:	90 93 8b 00 	sts	0x008B, r25
    4e20:	80 93 8a 00 	sts	0x008A, r24
    4e24:	80 91 0e 02 	lds	r24, 0x020E
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	90 93 8d 00 	sts	0x008D, r25
    4e2e:	80 93 8c 00 	sts	0x008C, r24
    4e32:	08 95       	ret

00004e34 <toggleBlueLed>:
    4e34:	81 e0       	ldi	r24, 0x01	; 1
    4e36:	90 91 15 03 	lds	r25, 0x0315
    4e3a:	89 1b       	sub	r24, r25
    4e3c:	80 93 15 03 	sts	0x0315, r24
    4e40:	88 23       	and	r24, r24
    4e42:	39 f4       	brne	.+14     	; 0x4e52 <toggleBlueLed+0x1e>
    4e44:	80 91 80 00 	lds	r24, 0x0080
    4e48:	87 7f       	andi	r24, 0xF7	; 247
    4e4a:	80 93 80 00 	sts	0x0080, r24
    4e4e:	2f 98       	cbi	0x05, 7	; 5
    4e50:	08 95       	ret
    4e52:	80 91 80 00 	lds	r24, 0x0080
    4e56:	88 60       	ori	r24, 0x08	; 8
    4e58:	80 93 80 00 	sts	0x0080, r24
    4e5c:	8f ef       	ldi	r24, 0xFF	; 255
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	90 93 8d 00 	sts	0x008D, r25
    4e64:	80 93 8c 00 	sts	0x008C, r24
    4e68:	08 95       	ret

00004e6a <updateRedLed>:
    4e6a:	88 23       	and	r24, r24
    4e6c:	59 f0       	breq	.+22     	; 0x4e84 <updateRedLed+0x1a>
    4e6e:	90 91 80 00 	lds	r25, 0x0080
    4e72:	90 68       	ori	r25, 0x80	; 128
    4e74:	90 93 80 00 	sts	0x0080, r25
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	90 93 89 00 	sts	0x0089, r25
    4e7e:	80 93 88 00 	sts	0x0088, r24
    4e82:	08 95       	ret
    4e84:	80 91 80 00 	lds	r24, 0x0080
    4e88:	8f 77       	andi	r24, 0x7F	; 127
    4e8a:	80 93 80 00 	sts	0x0080, r24
    4e8e:	2d 98       	cbi	0x05, 5	; 5
    4e90:	08 95       	ret

00004e92 <updateGreenLed>:
    4e92:	88 23       	and	r24, r24
    4e94:	59 f0       	breq	.+22     	; 0x4eac <updateGreenLed+0x1a>
    4e96:	90 91 80 00 	lds	r25, 0x0080
    4e9a:	90 62       	ori	r25, 0x20	; 32
    4e9c:	90 93 80 00 	sts	0x0080, r25
    4ea0:	90 e0       	ldi	r25, 0x00	; 0
    4ea2:	90 93 8b 00 	sts	0x008B, r25
    4ea6:	80 93 8a 00 	sts	0x008A, r24
    4eaa:	08 95       	ret
    4eac:	80 91 80 00 	lds	r24, 0x0080
    4eb0:	8f 7d       	andi	r24, 0xDF	; 223
    4eb2:	80 93 80 00 	sts	0x0080, r24
    4eb6:	2e 98       	cbi	0x05, 6	; 5
    4eb8:	08 95       	ret

00004eba <updateBlueLed>:
    4eba:	88 23       	and	r24, r24
    4ebc:	59 f0       	breq	.+22     	; 0x4ed4 <updateBlueLed+0x1a>
    4ebe:	90 91 80 00 	lds	r25, 0x0080
    4ec2:	98 60       	ori	r25, 0x08	; 8
    4ec4:	90 93 80 00 	sts	0x0080, r25
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	90 93 8d 00 	sts	0x008D, r25
    4ece:	80 93 8c 00 	sts	0x008C, r24
    4ed2:	08 95       	ret
    4ed4:	80 91 80 00 	lds	r24, 0x0080
    4ed8:	87 7f       	andi	r24, 0xF7	; 247
    4eda:	80 93 80 00 	sts	0x0080, r24
    4ede:	2f 98       	cbi	0x05, 7	; 5
    4ee0:	08 95       	ret

00004ee2 <setGreenLed>:
    4ee2:	83 30       	cpi	r24, 0x03	; 3
    4ee4:	09 f4       	brne	.+2      	; 0x4ee8 <setGreenLed+0x6>
    4ee6:	5a c0       	rjmp	.+180    	; 0x4f9c <setGreenLed+0xba>
    4ee8:	84 30       	cpi	r24, 0x04	; 4
    4eea:	80 f0       	brcs	.+32     	; 0x4f0c <setGreenLed+0x2a>
    4eec:	85 30       	cpi	r24, 0x05	; 5
    4eee:	09 f4       	brne	.+2      	; 0x4ef2 <setGreenLed+0x10>
    4ef0:	41 c0       	rjmp	.+130    	; 0x4f74 <setGreenLed+0x92>
    4ef2:	85 30       	cpi	r24, 0x05	; 5
    4ef4:	d0 f4       	brcc	.+52     	; 0x4f2a <setGreenLed+0x48>
    4ef6:	66 23       	and	r22, r22
    4ef8:	09 f4       	brne	.+2      	; 0x4efc <setGreenLed+0x1a>
    4efa:	68 c0       	rjmp	.+208    	; 0x4fcc <setGreenLed+0xea>
    4efc:	80 91 0b 01 	lds	r24, 0x010B
    4f00:	8f 7e       	andi	r24, 0xEF	; 239
    4f02:	80 93 0b 01 	sts	0x010B, r24
    4f06:	80 91 0b 01 	lds	r24, 0x010B
    4f0a:	08 95       	ret
    4f0c:	81 30       	cpi	r24, 0x01	; 1
    4f0e:	e1 f1       	breq	.+120    	; 0x4f88 <setGreenLed+0xa6>
    4f10:	82 30       	cpi	r24, 0x02	; 2
    4f12:	80 f0       	brcs	.+32     	; 0x4f34 <setGreenLed+0x52>
    4f14:	66 23       	and	r22, r22
    4f16:	09 f4       	brne	.+2      	; 0x4f1a <setGreenLed+0x38>
    4f18:	46 c0       	rjmp	.+140    	; 0x4fa6 <setGreenLed+0xc4>
    4f1a:	80 91 0b 01 	lds	r24, 0x010B
    4f1e:	8b 7f       	andi	r24, 0xFB	; 251
    4f20:	80 93 0b 01 	sts	0x010B, r24
    4f24:	80 91 0b 01 	lds	r24, 0x010B
    4f28:	08 95       	ret
    4f2a:	86 30       	cpi	r24, 0x06	; 6
    4f2c:	c9 f0       	breq	.+50     	; 0x4f60 <setGreenLed+0x7e>
    4f2e:	87 30       	cpi	r24, 0x07	; 7
    4f30:	61 f0       	breq	.+24     	; 0x4f4a <setGreenLed+0x68>
    4f32:	08 95       	ret
    4f34:	66 23       	and	r22, r22
    4f36:	09 f4       	brne	.+2      	; 0x4f3a <setGreenLed+0x58>
    4f38:	51 c0       	rjmp	.+162    	; 0x4fdc <setGreenLed+0xfa>
    4f3a:	80 91 0b 01 	lds	r24, 0x010B
    4f3e:	8e 7f       	andi	r24, 0xFE	; 254
    4f40:	80 93 0b 01 	sts	0x010B, r24
    4f44:	80 91 0b 01 	lds	r24, 0x010B
    4f48:	08 95       	ret
    4f4a:	66 23       	and	r22, r22
    4f4c:	09 f0       	breq	.+2      	; 0x4f50 <setGreenLed+0x6e>
    4f4e:	5e c0       	rjmp	.+188    	; 0x500c <setGreenLed+0x12a>
    4f50:	80 91 0b 01 	lds	r24, 0x010B
    4f54:	80 68       	ori	r24, 0x80	; 128
    4f56:	80 93 0b 01 	sts	0x010B, r24
    4f5a:	80 91 0b 01 	lds	r24, 0x010B
    4f5e:	08 95       	ret
    4f60:	66 23       	and	r22, r22
    4f62:	49 f1       	breq	.+82     	; 0x4fb6 <setGreenLed+0xd4>
    4f64:	80 91 0b 01 	lds	r24, 0x010B
    4f68:	8f 7b       	andi	r24, 0xBF	; 191
    4f6a:	80 93 0b 01 	sts	0x010B, r24
    4f6e:	80 91 0b 01 	lds	r24, 0x010B
    4f72:	08 95       	ret
    4f74:	66 23       	and	r22, r22
    4f76:	d1 f1       	breq	.+116    	; 0x4fec <setGreenLed+0x10a>
    4f78:	80 91 0b 01 	lds	r24, 0x010B
    4f7c:	8f 7d       	andi	r24, 0xDF	; 223
    4f7e:	80 93 0b 01 	sts	0x010B, r24
    4f82:	80 91 0b 01 	lds	r24, 0x010B
    4f86:	08 95       	ret
    4f88:	66 23       	and	r22, r22
    4f8a:	c1 f1       	breq	.+112    	; 0x4ffc <setGreenLed+0x11a>
    4f8c:	80 91 0b 01 	lds	r24, 0x010B
    4f90:	8d 7f       	andi	r24, 0xFD	; 253
    4f92:	80 93 0b 01 	sts	0x010B, r24
    4f96:	80 91 0b 01 	lds	r24, 0x010B
    4f9a:	08 95       	ret
    4f9c:	66 23       	and	r22, r22
    4f9e:	99 f0       	breq	.+38     	; 0x4fc6 <setGreenLed+0xe4>
    4fa0:	a3 98       	cbi	0x14, 3	; 20
    4fa2:	84 b3       	in	r24, 0x14	; 20
    4fa4:	08 95       	ret
    4fa6:	80 91 0b 01 	lds	r24, 0x010B
    4faa:	84 60       	ori	r24, 0x04	; 4
    4fac:	80 93 0b 01 	sts	0x010B, r24
    4fb0:	80 91 0b 01 	lds	r24, 0x010B
    4fb4:	08 95       	ret
    4fb6:	80 91 0b 01 	lds	r24, 0x010B
    4fba:	80 64       	ori	r24, 0x40	; 64
    4fbc:	80 93 0b 01 	sts	0x010B, r24
    4fc0:	80 91 0b 01 	lds	r24, 0x010B
    4fc4:	08 95       	ret
    4fc6:	a3 9a       	sbi	0x14, 3	; 20
    4fc8:	84 b3       	in	r24, 0x14	; 20
    4fca:	08 95       	ret
    4fcc:	80 91 0b 01 	lds	r24, 0x010B
    4fd0:	80 61       	ori	r24, 0x10	; 16
    4fd2:	80 93 0b 01 	sts	0x010B, r24
    4fd6:	80 91 0b 01 	lds	r24, 0x010B
    4fda:	08 95       	ret
    4fdc:	80 91 0b 01 	lds	r24, 0x010B
    4fe0:	81 60       	ori	r24, 0x01	; 1
    4fe2:	80 93 0b 01 	sts	0x010B, r24
    4fe6:	80 91 0b 01 	lds	r24, 0x010B
    4fea:	08 95       	ret
    4fec:	80 91 0b 01 	lds	r24, 0x010B
    4ff0:	80 62       	ori	r24, 0x20	; 32
    4ff2:	80 93 0b 01 	sts	0x010B, r24
    4ff6:	80 91 0b 01 	lds	r24, 0x010B
    4ffa:	08 95       	ret
    4ffc:	80 91 0b 01 	lds	r24, 0x010B
    5000:	82 60       	ori	r24, 0x02	; 2
    5002:	80 93 0b 01 	sts	0x010B, r24
    5006:	80 91 0b 01 	lds	r24, 0x010B
    500a:	08 95       	ret
    500c:	80 91 0b 01 	lds	r24, 0x010B
    5010:	8f 77       	andi	r24, 0x7F	; 127
    5012:	80 93 0b 01 	sts	0x010B, r24
    5016:	80 91 0b 01 	lds	r24, 0x010B
    501a:	08 95       	ret

0000501c <turnOffGreenLeds>:
    501c:	eb e0       	ldi	r30, 0x0B	; 11
    501e:	f1 e0       	ldi	r31, 0x01	; 1
    5020:	80 81       	ld	r24, Z
    5022:	81 60       	ori	r24, 0x01	; 1
    5024:	80 83       	st	Z, r24
    5026:	80 81       	ld	r24, Z
    5028:	82 60       	ori	r24, 0x02	; 2
    502a:	80 83       	st	Z, r24
    502c:	80 81       	ld	r24, Z
    502e:	84 60       	ori	r24, 0x04	; 4
    5030:	80 83       	st	Z, r24
    5032:	a3 9a       	sbi	0x14, 3	; 20
    5034:	80 81       	ld	r24, Z
    5036:	80 61       	ori	r24, 0x10	; 16
    5038:	80 83       	st	Z, r24
    503a:	80 81       	ld	r24, Z
    503c:	80 62       	ori	r24, 0x20	; 32
    503e:	80 83       	st	Z, r24
    5040:	80 81       	ld	r24, Z
    5042:	80 64       	ori	r24, 0x40	; 64
    5044:	80 83       	st	Z, r24
    5046:	80 81       	ld	r24, Z
    5048:	80 68       	ori	r24, 0x80	; 128
    504a:	80 83       	st	Z, r24
    504c:	08 95       	ret

0000504e <turnOnGreenLeds>:
    504e:	eb e0       	ldi	r30, 0x0B	; 11
    5050:	f1 e0       	ldi	r31, 0x01	; 1
    5052:	80 81       	ld	r24, Z
    5054:	8e 7f       	andi	r24, 0xFE	; 254
    5056:	80 83       	st	Z, r24
    5058:	80 81       	ld	r24, Z
    505a:	8d 7f       	andi	r24, 0xFD	; 253
    505c:	80 83       	st	Z, r24
    505e:	80 81       	ld	r24, Z
    5060:	8b 7f       	andi	r24, 0xFB	; 251
    5062:	80 83       	st	Z, r24
    5064:	a3 98       	cbi	0x14, 3	; 20
    5066:	80 81       	ld	r24, Z
    5068:	8f 7e       	andi	r24, 0xEF	; 239
    506a:	80 83       	st	Z, r24
    506c:	80 81       	ld	r24, Z
    506e:	8f 7d       	andi	r24, 0xDF	; 223
    5070:	80 83       	st	Z, r24
    5072:	80 81       	ld	r24, Z
    5074:	8f 7b       	andi	r24, 0xBF	; 191
    5076:	80 83       	st	Z, r24
    5078:	80 81       	ld	r24, Z
    507a:	8f 77       	andi	r24, 0x7F	; 127
    507c:	80 83       	st	Z, r24
    507e:	08 95       	ret

00005080 <initAccelerometer>:
    5080:	0e 94 72 18 	call	0x30e4	; 0x30e4 <i2c_init>
    5084:	80 91 14 02 	lds	r24, 0x0214
    5088:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    508c:	88 23       	and	r24, r24
    508e:	49 f4       	brne	.+18     	; 0x50a2 <initAccelerometer+0x22>
    5090:	86 e1       	ldi	r24, 0x16	; 22
    5092:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    5096:	85 e4       	ldi	r24, 0x45	; 69
    5098:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    509c:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    50a0:	08 95       	ret
    50a2:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    50a6:	86 ea       	ldi	r24, 0xA6	; 166
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	90 93 15 02 	sts	0x0215, r25
    50ae:	80 93 14 02 	sts	0x0214, r24
    50b2:	86 ea       	ldi	r24, 0xA6	; 166
    50b4:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    50b8:	88 23       	and	r24, r24
    50ba:	41 f5       	brne	.+80     	; 0x510c <initAccelerometer+0x8c>
    50bc:	8d e2       	ldi	r24, 0x2D	; 45
    50be:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    50c2:	88 e0       	ldi	r24, 0x08	; 8
    50c4:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    50c8:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    50cc:	80 91 14 02 	lds	r24, 0x0214
    50d0:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    50d4:	88 23       	and	r24, r24
    50d6:	d1 f4       	brne	.+52     	; 0x510c <initAccelerometer+0x8c>
    50d8:	81 e3       	ldi	r24, 0x31	; 49
    50da:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    50de:	80 e0       	ldi	r24, 0x00	; 0
    50e0:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    50e4:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    50e8:	80 91 14 02 	lds	r24, 0x0214
    50ec:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    50f0:	88 23       	and	r24, r24
    50f2:	61 f4       	brne	.+24     	; 0x510c <initAccelerometer+0x8c>
    50f4:	8c e2       	ldi	r24, 0x2C	; 44
    50f6:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    50fa:	89 e0       	ldi	r24, 0x09	; 9
    50fc:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    5100:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    5104:	81 e0       	ldi	r24, 0x01	; 1
    5106:	80 93 25 04 	sts	0x0425, r24
    510a:	08 95       	ret
    510c:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    5110:	82 e0       	ldi	r24, 0x02	; 2
    5112:	80 93 25 04 	sts	0x0425, r24
    5116:	08 95       	ret

00005118 <initMMA7455L>:
    5118:	80 91 14 02 	lds	r24, 0x0214
    511c:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    5120:	88 23       	and	r24, r24
    5122:	51 f4       	brne	.+20     	; 0x5138 <initMMA7455L+0x20>
    5124:	86 e1       	ldi	r24, 0x16	; 22
    5126:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    512a:	85 e4       	ldi	r24, 0x45	; 69
    512c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    5130:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    5134:	80 e0       	ldi	r24, 0x00	; 0
    5136:	08 95       	ret
    5138:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    513c:	81 e0       	ldi	r24, 0x01	; 1
    513e:	08 95       	ret

00005140 <initADXL345>:
    5140:	80 91 14 02 	lds	r24, 0x0214
    5144:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    5148:	88 23       	and	r24, r24
    514a:	31 f5       	brne	.+76     	; 0x5198 <initADXL345+0x58>
    514c:	8d e2       	ldi	r24, 0x2D	; 45
    514e:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    5152:	88 e0       	ldi	r24, 0x08	; 8
    5154:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    5158:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    515c:	80 91 14 02 	lds	r24, 0x0214
    5160:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    5164:	88 23       	and	r24, r24
    5166:	c1 f4       	brne	.+48     	; 0x5198 <initADXL345+0x58>
    5168:	81 e3       	ldi	r24, 0x31	; 49
    516a:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    516e:	80 e0       	ldi	r24, 0x00	; 0
    5170:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    5174:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    5178:	80 91 14 02 	lds	r24, 0x0214
    517c:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    5180:	88 23       	and	r24, r24
    5182:	51 f4       	brne	.+20     	; 0x5198 <initADXL345+0x58>
    5184:	8c e2       	ldi	r24, 0x2C	; 44
    5186:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    518a:	89 e0       	ldi	r24, 0x09	; 9
    518c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    5190:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    5194:	80 e0       	ldi	r24, 0x00	; 0
    5196:	08 95       	ret
    5198:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    519c:	81 e0       	ldi	r24, 0x01	; 1
    519e:	08 95       	ret

000051a0 <readAccelXY>:
    51a0:	ff 92       	push	r15
    51a2:	0f 93       	push	r16
    51a4:	1f 93       	push	r17
    51a6:	df 93       	push	r29
    51a8:	cf 93       	push	r28
    51aa:	0f 92       	push	r0
    51ac:	cd b7       	in	r28, 0x3d	; 61
    51ae:	de b7       	in	r29, 0x3e	; 62
    51b0:	80 91 25 04 	lds	r24, 0x0425
    51b4:	88 23       	and	r24, r24
    51b6:	91 f0       	breq	.+36     	; 0x51dc <readAccelXY+0x3c>
    51b8:	81 30       	cpi	r24, 0x01	; 1
    51ba:	09 f4       	brne	.+2      	; 0x51be <readAccelXY+0x1e>
    51bc:	88 c0       	rjmp	.+272    	; 0x52ce <readAccelXY+0x12e>
    51be:	10 92 27 04 	sts	0x0427, r1
    51c2:	10 92 26 04 	sts	0x0426, r1
    51c6:	10 92 29 04 	sts	0x0429, r1
    51ca:	10 92 28 04 	sts	0x0428, r1
    51ce:	0f 90       	pop	r0
    51d0:	cf 91       	pop	r28
    51d2:	df 91       	pop	r29
    51d4:	1f 91       	pop	r17
    51d6:	0f 91       	pop	r16
    51d8:	ff 90       	pop	r15
    51da:	08 95       	ret
    51dc:	80 91 14 02 	lds	r24, 0x0214
    51e0:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    51e4:	80 e0       	ldi	r24, 0x00	; 0
    51e6:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    51ea:	80 91 14 02 	lds	r24, 0x0214
    51ee:	8f 5f       	subi	r24, 0xFF	; 255
    51f0:	0e 94 c7 18 	call	0x318e	; 0x318e <i2c_rep_start>
    51f4:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    51f8:	08 2f       	mov	r16, r24
    51fa:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    51fe:	f8 2e       	mov	r15, r24
    5200:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    5204:	18 2f       	mov	r17, r24
    5206:	0e 94 11 19 	call	0x3222	; 0x3222 <i2c_readNak>
    520a:	89 83       	std	Y+1, r24	; 0x01
    520c:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    5210:	90 91 a7 04 	lds	r25, 0x04A7
    5214:	89 81       	ldd	r24, Y+1	; 0x01
    5216:	99 23       	and	r25, r25
    5218:	39 f1       	breq	.+78     	; 0x5268 <readAccelXY+0xc8>
    521a:	4f 2d       	mov	r20, r15
    521c:	55 27       	eor	r21, r21
    521e:	47 fd       	sbrc	r20, 7
    5220:	50 95       	com	r21
    5222:	54 2f       	mov	r21, r20
    5224:	44 27       	eor	r20, r20
    5226:	60 2f       	mov	r22, r16
    5228:	77 27       	eor	r23, r23
    522a:	67 fd       	sbrc	r22, 7
    522c:	70 95       	com	r23
    522e:	46 2b       	or	r20, r22
    5230:	57 2b       	or	r21, r23
    5232:	50 93 27 04 	sts	0x0427, r21
    5236:	40 93 26 04 	sts	0x0426, r20
    523a:	28 2f       	mov	r18, r24
    523c:	33 27       	eor	r19, r19
    523e:	27 fd       	sbrc	r18, 7
    5240:	30 95       	com	r19
    5242:	32 2f       	mov	r19, r18
    5244:	22 27       	eor	r18, r18
    5246:	81 2f       	mov	r24, r17
    5248:	99 27       	eor	r25, r25
    524a:	87 fd       	sbrc	r24, 7
    524c:	90 95       	com	r25
    524e:	28 2b       	or	r18, r24
    5250:	39 2b       	or	r19, r25
    5252:	30 93 29 04 	sts	0x0429, r19
    5256:	20 93 28 04 	sts	0x0428, r18
    525a:	0f 90       	pop	r0
    525c:	cf 91       	pop	r28
    525e:	df 91       	pop	r29
    5260:	1f 91       	pop	r17
    5262:	0f 91       	pop	r16
    5264:	ff 90       	pop	r15
    5266:	08 95       	ret
    5268:	4f 2d       	mov	r20, r15
    526a:	55 27       	eor	r21, r21
    526c:	47 fd       	sbrc	r20, 7
    526e:	50 95       	com	r21
    5270:	54 2f       	mov	r21, r20
    5272:	44 27       	eor	r20, r20
    5274:	60 2f       	mov	r22, r16
    5276:	77 27       	eor	r23, r23
    5278:	67 fd       	sbrc	r22, 7
    527a:	70 95       	com	r23
    527c:	46 2b       	or	r20, r22
    527e:	57 2b       	or	r21, r23
    5280:	60 91 2c 04 	lds	r22, 0x042C
    5284:	70 91 2d 04 	lds	r23, 0x042D
    5288:	46 1b       	sub	r20, r22
    528a:	57 0b       	sbc	r21, r23
    528c:	50 93 27 04 	sts	0x0427, r21
    5290:	40 93 26 04 	sts	0x0426, r20
    5294:	28 2f       	mov	r18, r24
    5296:	33 27       	eor	r19, r19
    5298:	27 fd       	sbrc	r18, 7
    529a:	30 95       	com	r19
    529c:	32 2f       	mov	r19, r18
    529e:	22 27       	eor	r18, r18
    52a0:	81 2f       	mov	r24, r17
    52a2:	99 27       	eor	r25, r25
    52a4:	87 fd       	sbrc	r24, 7
    52a6:	90 95       	com	r25
    52a8:	28 2b       	or	r18, r24
    52aa:	39 2b       	or	r19, r25
    52ac:	80 91 2e 04 	lds	r24, 0x042E
    52b0:	90 91 2f 04 	lds	r25, 0x042F
    52b4:	28 1b       	sub	r18, r24
    52b6:	39 0b       	sbc	r19, r25
    52b8:	30 93 29 04 	sts	0x0429, r19
    52bc:	20 93 28 04 	sts	0x0428, r18
    52c0:	0f 90       	pop	r0
    52c2:	cf 91       	pop	r28
    52c4:	df 91       	pop	r29
    52c6:	1f 91       	pop	r17
    52c8:	0f 91       	pop	r16
    52ca:	ff 90       	pop	r15
    52cc:	08 95       	ret
    52ce:	80 91 14 02 	lds	r24, 0x0214
    52d2:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    52d6:	82 e3       	ldi	r24, 0x32	; 50
    52d8:	86 cf       	rjmp	.-244    	; 0x51e6 <readAccelXY+0x46>

000052da <readAccelXYZ>:
    52da:	df 93       	push	r29
    52dc:	cf 93       	push	r28
    52de:	00 d0       	rcall	.+0      	; 0x52e0 <readAccelXYZ+0x6>
    52e0:	00 d0       	rcall	.+0      	; 0x52e2 <readAccelXYZ+0x8>
    52e2:	cd b7       	in	r28, 0x3d	; 61
    52e4:	de b7       	in	r29, 0x3e	; 62
    52e6:	80 91 25 04 	lds	r24, 0x0425
    52ea:	88 23       	and	r24, r24
    52ec:	c1 f0       	breq	.+48     	; 0x531e <readAccelXYZ+0x44>
    52ee:	81 30       	cpi	r24, 0x01	; 1
    52f0:	09 f4       	brne	.+2      	; 0x52f4 <readAccelXYZ+0x1a>
    52f2:	ad c0       	rjmp	.+346    	; 0x544e <readAccelXYZ+0x174>
    52f4:	10 92 27 04 	sts	0x0427, r1
    52f8:	10 92 26 04 	sts	0x0426, r1
    52fc:	10 92 29 04 	sts	0x0429, r1
    5300:	10 92 28 04 	sts	0x0428, r1
    5304:	10 92 2b 04 	sts	0x042B, r1
    5308:	10 92 2a 04 	sts	0x042A, r1
    530c:	26 96       	adiw	r28, 0x06	; 6
    530e:	0f b6       	in	r0, 0x3f	; 63
    5310:	f8 94       	cli
    5312:	de bf       	out	0x3e, r29	; 62
    5314:	0f be       	out	0x3f, r0	; 63
    5316:	cd bf       	out	0x3d, r28	; 61
    5318:	cf 91       	pop	r28
    531a:	df 91       	pop	r29
    531c:	08 95       	ret
    531e:	80 91 14 02 	lds	r24, 0x0214
    5322:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    5326:	80 e0       	ldi	r24, 0x00	; 0
    5328:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    532c:	80 91 14 02 	lds	r24, 0x0214
    5330:	8f 5f       	subi	r24, 0xFF	; 255
    5332:	0e 94 c7 18 	call	0x318e	; 0x318e <i2c_rep_start>
    5336:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    533a:	89 83       	std	Y+1, r24	; 0x01
    533c:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    5340:	8a 83       	std	Y+2, r24	; 0x02
    5342:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    5346:	8b 83       	std	Y+3, r24	; 0x03
    5348:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    534c:	8c 83       	std	Y+4, r24	; 0x04
    534e:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    5352:	8d 83       	std	Y+5, r24	; 0x05
    5354:	0e 94 11 19 	call	0x3222	; 0x3222 <i2c_readNak>
    5358:	8e 83       	std	Y+6, r24	; 0x06
    535a:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    535e:	80 91 a7 04 	lds	r24, 0x04A7
    5362:	88 23       	and	r24, r24
    5364:	89 f1       	breq	.+98     	; 0x53c8 <readAccelXYZ+0xee>
    5366:	8a 81       	ldd	r24, Y+2	; 0x02
    5368:	99 27       	eor	r25, r25
    536a:	87 fd       	sbrc	r24, 7
    536c:	90 95       	com	r25
    536e:	98 2f       	mov	r25, r24
    5370:	88 27       	eor	r24, r24
    5372:	29 81       	ldd	r18, Y+1	; 0x01
    5374:	33 27       	eor	r19, r19
    5376:	27 fd       	sbrc	r18, 7
    5378:	30 95       	com	r19
    537a:	82 2b       	or	r24, r18
    537c:	93 2b       	or	r25, r19
    537e:	90 93 27 04 	sts	0x0427, r25
    5382:	80 93 26 04 	sts	0x0426, r24
    5386:	8c 81       	ldd	r24, Y+4	; 0x04
    5388:	99 27       	eor	r25, r25
    538a:	87 fd       	sbrc	r24, 7
    538c:	90 95       	com	r25
    538e:	98 2f       	mov	r25, r24
    5390:	88 27       	eor	r24, r24
    5392:	2b 81       	ldd	r18, Y+3	; 0x03
    5394:	33 27       	eor	r19, r19
    5396:	27 fd       	sbrc	r18, 7
    5398:	30 95       	com	r19
    539a:	82 2b       	or	r24, r18
    539c:	93 2b       	or	r25, r19
    539e:	90 93 29 04 	sts	0x0429, r25
    53a2:	80 93 28 04 	sts	0x0428, r24
    53a6:	8e 81       	ldd	r24, Y+6	; 0x06
    53a8:	99 27       	eor	r25, r25
    53aa:	87 fd       	sbrc	r24, 7
    53ac:	90 95       	com	r25
    53ae:	98 2f       	mov	r25, r24
    53b0:	88 27       	eor	r24, r24
    53b2:	2d 81       	ldd	r18, Y+5	; 0x05
    53b4:	33 27       	eor	r19, r19
    53b6:	27 fd       	sbrc	r18, 7
    53b8:	30 95       	com	r19
    53ba:	82 2b       	or	r24, r18
    53bc:	93 2b       	or	r25, r19
    53be:	90 93 2b 04 	sts	0x042B, r25
    53c2:	80 93 2a 04 	sts	0x042A, r24
    53c6:	a2 cf       	rjmp	.-188    	; 0x530c <readAccelXYZ+0x32>
    53c8:	8a 81       	ldd	r24, Y+2	; 0x02
    53ca:	99 27       	eor	r25, r25
    53cc:	87 fd       	sbrc	r24, 7
    53ce:	90 95       	com	r25
    53d0:	98 2f       	mov	r25, r24
    53d2:	88 27       	eor	r24, r24
    53d4:	29 81       	ldd	r18, Y+1	; 0x01
    53d6:	33 27       	eor	r19, r19
    53d8:	27 fd       	sbrc	r18, 7
    53da:	30 95       	com	r19
    53dc:	82 2b       	or	r24, r18
    53de:	93 2b       	or	r25, r19
    53e0:	20 91 2c 04 	lds	r18, 0x042C
    53e4:	30 91 2d 04 	lds	r19, 0x042D
    53e8:	82 1b       	sub	r24, r18
    53ea:	93 0b       	sbc	r25, r19
    53ec:	90 93 27 04 	sts	0x0427, r25
    53f0:	80 93 26 04 	sts	0x0426, r24
    53f4:	8c 81       	ldd	r24, Y+4	; 0x04
    53f6:	99 27       	eor	r25, r25
    53f8:	87 fd       	sbrc	r24, 7
    53fa:	90 95       	com	r25
    53fc:	98 2f       	mov	r25, r24
    53fe:	88 27       	eor	r24, r24
    5400:	2b 81       	ldd	r18, Y+3	; 0x03
    5402:	33 27       	eor	r19, r19
    5404:	27 fd       	sbrc	r18, 7
    5406:	30 95       	com	r19
    5408:	82 2b       	or	r24, r18
    540a:	93 2b       	or	r25, r19
    540c:	20 91 2e 04 	lds	r18, 0x042E
    5410:	30 91 2f 04 	lds	r19, 0x042F
    5414:	82 1b       	sub	r24, r18
    5416:	93 0b       	sbc	r25, r19
    5418:	90 93 29 04 	sts	0x0429, r25
    541c:	80 93 28 04 	sts	0x0428, r24
    5420:	8e 81       	ldd	r24, Y+6	; 0x06
    5422:	99 27       	eor	r25, r25
    5424:	87 fd       	sbrc	r24, 7
    5426:	90 95       	com	r25
    5428:	98 2f       	mov	r25, r24
    542a:	88 27       	eor	r24, r24
    542c:	2d 81       	ldd	r18, Y+5	; 0x05
    542e:	33 27       	eor	r19, r19
    5430:	27 fd       	sbrc	r18, 7
    5432:	30 95       	com	r19
    5434:	82 2b       	or	r24, r18
    5436:	93 2b       	or	r25, r19
    5438:	20 91 30 04 	lds	r18, 0x0430
    543c:	30 91 31 04 	lds	r19, 0x0431
    5440:	82 1b       	sub	r24, r18
    5442:	93 0b       	sbc	r25, r19
    5444:	90 93 2b 04 	sts	0x042B, r25
    5448:	80 93 2a 04 	sts	0x042A, r24
    544c:	5f cf       	rjmp	.-322    	; 0x530c <readAccelXYZ+0x32>
    544e:	80 91 14 02 	lds	r24, 0x0214
    5452:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    5456:	82 e3       	ldi	r24, 0x32	; 50
    5458:	67 cf       	rjmp	.-306    	; 0x5328 <readAccelXYZ+0x4e>

0000545a <calibrateSensors>:
    545a:	cf 93       	push	r28
    545c:	df 93       	push	r29
    545e:	10 92 0c 02 	sts	0x020C, r1
    5462:	10 92 0d 02 	sts	0x020D, r1
    5466:	10 92 0e 02 	sts	0x020E, r1
    546a:	80 e0       	ldi	r24, 0x00	; 0
    546c:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <updateRedLed>
    5470:	80 91 0d 02 	lds	r24, 0x020D
    5474:	0e 94 49 27 	call	0x4e92	; 0x4e92 <updateGreenLed>
    5478:	80 91 0e 02 	lds	r24, 0x020E
    547c:	0e 94 5d 27 	call	0x4eba	; 0x4eba <updateBlueLed>
    5480:	10 92 4b 04 	sts	0x044B, r1
    5484:	10 92 4a 04 	sts	0x044A, r1
    5488:	81 e0       	ldi	r24, 0x01	; 1
    548a:	80 93 a7 04 	sts	0x04A7, r24
    548e:	c1 e0       	ldi	r28, 0x01	; 1
    5490:	d0 e0       	ldi	r29, 0x00	; 0
    5492:	0e 94 6d 29 	call	0x52da	; 0x52da <readAccelXYZ>
    5496:	20 91 4a 04 	lds	r18, 0x044A
    549a:	30 91 4b 04 	lds	r19, 0x044B
    549e:	21 31       	cpi	r18, 0x11	; 17
    54a0:	31 05       	cpc	r19, r1
    54a2:	0c f4       	brge	.+2      	; 0x54a6 <calibrateSensors+0x4c>
    54a4:	35 c1       	rjmp	.+618    	; 0x5710 <calibrateSensors+0x2b6>
    54a6:	80 91 89 02 	lds	r24, 0x0289
    54aa:	90 91 8a 02 	lds	r25, 0x028A
    54ae:	a0 91 8b 02 	lds	r26, 0x028B
    54b2:	b0 91 8c 02 	lds	r27, 0x028C
    54b6:	54 e0       	ldi	r21, 0x04	; 4
    54b8:	b6 95       	lsr	r27
    54ba:	a7 95       	ror	r26
    54bc:	97 95       	ror	r25
    54be:	87 95       	ror	r24
    54c0:	5a 95       	dec	r21
    54c2:	d1 f7       	brne	.-12     	; 0x54b8 <calibrateSensors+0x5e>
    54c4:	90 93 72 02 	sts	0x0272, r25
    54c8:	80 93 71 02 	sts	0x0271, r24
    54cc:	80 91 8d 02 	lds	r24, 0x028D
    54d0:	90 91 8e 02 	lds	r25, 0x028E
    54d4:	a0 91 8f 02 	lds	r26, 0x028F
    54d8:	b0 91 90 02 	lds	r27, 0x0290
    54dc:	44 e0       	ldi	r20, 0x04	; 4
    54de:	b6 95       	lsr	r27
    54e0:	a7 95       	ror	r26
    54e2:	97 95       	ror	r25
    54e4:	87 95       	ror	r24
    54e6:	4a 95       	dec	r20
    54e8:	d1 f7       	brne	.-12     	; 0x54de <calibrateSensors+0x84>
    54ea:	90 93 74 02 	sts	0x0274, r25
    54ee:	80 93 73 02 	sts	0x0273, r24
    54f2:	80 91 91 02 	lds	r24, 0x0291
    54f6:	90 91 92 02 	lds	r25, 0x0292
    54fa:	a0 91 93 02 	lds	r26, 0x0293
    54fe:	b0 91 94 02 	lds	r27, 0x0294
    5502:	34 e0       	ldi	r19, 0x04	; 4
    5504:	b6 95       	lsr	r27
    5506:	a7 95       	ror	r26
    5508:	97 95       	ror	r25
    550a:	87 95       	ror	r24
    550c:	3a 95       	dec	r19
    550e:	d1 f7       	brne	.-12     	; 0x5504 <calibrateSensors+0xaa>
    5510:	90 93 76 02 	sts	0x0276, r25
    5514:	80 93 75 02 	sts	0x0275, r24
    5518:	80 91 95 02 	lds	r24, 0x0295
    551c:	90 91 96 02 	lds	r25, 0x0296
    5520:	a0 91 97 02 	lds	r26, 0x0297
    5524:	b0 91 98 02 	lds	r27, 0x0298
    5528:	24 e0       	ldi	r18, 0x04	; 4
    552a:	b6 95       	lsr	r27
    552c:	a7 95       	ror	r26
    552e:	97 95       	ror	r25
    5530:	87 95       	ror	r24
    5532:	2a 95       	dec	r18
    5534:	d1 f7       	brne	.-12     	; 0x552a <calibrateSensors+0xd0>
    5536:	90 93 78 02 	sts	0x0278, r25
    553a:	80 93 77 02 	sts	0x0277, r24
    553e:	80 91 99 02 	lds	r24, 0x0299
    5542:	90 91 9a 02 	lds	r25, 0x029A
    5546:	a0 91 9b 02 	lds	r26, 0x029B
    554a:	b0 91 9c 02 	lds	r27, 0x029C
    554e:	f4 e0       	ldi	r31, 0x04	; 4
    5550:	b6 95       	lsr	r27
    5552:	a7 95       	ror	r26
    5554:	97 95       	ror	r25
    5556:	87 95       	ror	r24
    5558:	fa 95       	dec	r31
    555a:	d1 f7       	brne	.-12     	; 0x5550 <calibrateSensors+0xf6>
    555c:	90 93 7a 02 	sts	0x027A, r25
    5560:	80 93 79 02 	sts	0x0279, r24
    5564:	80 91 9d 02 	lds	r24, 0x029D
    5568:	90 91 9e 02 	lds	r25, 0x029E
    556c:	a0 91 9f 02 	lds	r26, 0x029F
    5570:	b0 91 a0 02 	lds	r27, 0x02A0
    5574:	e4 e0       	ldi	r30, 0x04	; 4
    5576:	b6 95       	lsr	r27
    5578:	a7 95       	ror	r26
    557a:	97 95       	ror	r25
    557c:	87 95       	ror	r24
    557e:	ea 95       	dec	r30
    5580:	d1 f7       	brne	.-12     	; 0x5576 <calibrateSensors+0x11c>
    5582:	90 93 7c 02 	sts	0x027C, r25
    5586:	80 93 7b 02 	sts	0x027B, r24
    558a:	80 91 a1 02 	lds	r24, 0x02A1
    558e:	90 91 a2 02 	lds	r25, 0x02A2
    5592:	a0 91 a3 02 	lds	r26, 0x02A3
    5596:	b0 91 a4 02 	lds	r27, 0x02A4
    559a:	74 e0       	ldi	r23, 0x04	; 4
    559c:	b6 95       	lsr	r27
    559e:	a7 95       	ror	r26
    55a0:	97 95       	ror	r25
    55a2:	87 95       	ror	r24
    55a4:	7a 95       	dec	r23
    55a6:	d1 f7       	brne	.-12     	; 0x559c <calibrateSensors+0x142>
    55a8:	90 93 7e 02 	sts	0x027E, r25
    55ac:	80 93 7d 02 	sts	0x027D, r24
    55b0:	80 91 a5 02 	lds	r24, 0x02A5
    55b4:	90 91 a6 02 	lds	r25, 0x02A6
    55b8:	a0 91 a7 02 	lds	r26, 0x02A7
    55bc:	b0 91 a8 02 	lds	r27, 0x02A8
    55c0:	64 e0       	ldi	r22, 0x04	; 4
    55c2:	b6 95       	lsr	r27
    55c4:	a7 95       	ror	r26
    55c6:	97 95       	ror	r25
    55c8:	87 95       	ror	r24
    55ca:	6a 95       	dec	r22
    55cc:	d1 f7       	brne	.-12     	; 0x55c2 <calibrateSensors+0x168>
    55ce:	90 93 80 02 	sts	0x0280, r25
    55d2:	80 93 7f 02 	sts	0x027F, r24
    55d6:	80 91 ad 02 	lds	r24, 0x02AD
    55da:	90 91 ae 02 	lds	r25, 0x02AE
    55de:	a0 91 af 02 	lds	r26, 0x02AF
    55e2:	b0 91 b0 02 	lds	r27, 0x02B0
    55e6:	54 e0       	ldi	r21, 0x04	; 4
    55e8:	b6 95       	lsr	r27
    55ea:	a7 95       	ror	r26
    55ec:	97 95       	ror	r25
    55ee:	87 95       	ror	r24
    55f0:	5a 95       	dec	r21
    55f2:	d1 f7       	brne	.-12     	; 0x55e8 <calibrateSensors+0x18e>
    55f4:	9c 01       	movw	r18, r24
    55f6:	80 91 b1 02 	lds	r24, 0x02B1
    55fa:	90 91 b2 02 	lds	r25, 0x02B2
    55fe:	a0 91 b3 02 	lds	r26, 0x02B3
    5602:	b0 91 b4 02 	lds	r27, 0x02B4
    5606:	44 e0       	ldi	r20, 0x04	; 4
    5608:	b6 95       	lsr	r27
    560a:	a7 95       	ror	r26
    560c:	97 95       	ror	r25
    560e:	87 95       	ror	r24
    5610:	4a 95       	dec	r20
    5612:	d1 f7       	brne	.-12     	; 0x5608 <calibrateSensors+0x1ae>
    5614:	bc 01       	movw	r22, r24
    5616:	80 91 b5 02 	lds	r24, 0x02B5
    561a:	90 91 b6 02 	lds	r25, 0x02B6
    561e:	a0 91 b7 02 	lds	r26, 0x02B7
    5622:	b0 91 b8 02 	lds	r27, 0x02B8
    5626:	f4 e0       	ldi	r31, 0x04	; 4
    5628:	b6 95       	lsr	r27
    562a:	a7 95       	ror	r26
    562c:	97 95       	ror	r25
    562e:	87 95       	ror	r24
    5630:	fa 95       	dec	r31
    5632:	d1 f7       	brne	.-12     	; 0x5628 <calibrateSensors+0x1ce>
    5634:	ac 01       	movw	r20, r24
    5636:	80 91 a9 02 	lds	r24, 0x02A9
    563a:	90 91 aa 02 	lds	r25, 0x02AA
    563e:	a0 91 ab 02 	lds	r26, 0x02AB
    5642:	b0 91 ac 02 	lds	r27, 0x02AC
    5646:	e4 e0       	ldi	r30, 0x04	; 4
    5648:	b6 95       	lsr	r27
    564a:	a7 95       	ror	r26
    564c:	97 95       	ror	r25
    564e:	87 95       	ror	r24
    5650:	ea 95       	dec	r30
    5652:	d1 f7       	brne	.-12     	; 0x5648 <calibrateSensors+0x1ee>
    5654:	80 50       	subi	r24, 0x00	; 0
    5656:	92 40       	sbci	r25, 0x02	; 2
    5658:	90 93 82 02 	sts	0x0282, r25
    565c:	80 93 81 02 	sts	0x0281, r24
    5660:	20 50       	subi	r18, 0x00	; 0
    5662:	32 40       	sbci	r19, 0x02	; 2
    5664:	30 93 84 02 	sts	0x0284, r19
    5668:	20 93 83 02 	sts	0x0283, r18
    566c:	60 50       	subi	r22, 0x00	; 0
    566e:	72 40       	sbci	r23, 0x02	; 2
    5670:	70 93 86 02 	sts	0x0286, r23
    5674:	60 93 85 02 	sts	0x0285, r22
    5678:	40 50       	subi	r20, 0x00	; 0
    567a:	52 40       	sbci	r21, 0x02	; 2
    567c:	50 93 88 02 	sts	0x0288, r21
    5680:	40 93 87 02 	sts	0x0287, r20
    5684:	80 91 32 04 	lds	r24, 0x0432
    5688:	90 91 33 04 	lds	r25, 0x0433
    568c:	95 95       	asr	r25
    568e:	87 95       	ror	r24
    5690:	95 95       	asr	r25
    5692:	87 95       	ror	r24
    5694:	95 95       	asr	r25
    5696:	87 95       	ror	r24
    5698:	95 95       	asr	r25
    569a:	87 95       	ror	r24
    569c:	90 93 2d 04 	sts	0x042D, r25
    56a0:	80 93 2c 04 	sts	0x042C, r24
    56a4:	80 91 34 04 	lds	r24, 0x0434
    56a8:	90 91 35 04 	lds	r25, 0x0435
    56ac:	95 95       	asr	r25
    56ae:	87 95       	ror	r24
    56b0:	95 95       	asr	r25
    56b2:	87 95       	ror	r24
    56b4:	95 95       	asr	r25
    56b6:	87 95       	ror	r24
    56b8:	95 95       	asr	r25
    56ba:	87 95       	ror	r24
    56bc:	90 93 2f 04 	sts	0x042F, r25
    56c0:	80 93 2e 04 	sts	0x042E, r24
    56c4:	80 91 36 04 	lds	r24, 0x0436
    56c8:	90 91 37 04 	lds	r25, 0x0437
    56cc:	95 95       	asr	r25
    56ce:	87 95       	ror	r24
    56d0:	95 95       	asr	r25
    56d2:	87 95       	ror	r24
    56d4:	95 95       	asr	r25
    56d6:	87 95       	ror	r24
    56d8:	95 95       	asr	r25
    56da:	87 95       	ror	r24
    56dc:	90 93 31 04 	sts	0x0431, r25
    56e0:	80 93 30 04 	sts	0x0430, r24
    56e4:	10 92 a7 04 	sts	0x04A7, r1
    56e8:	8f ef       	ldi	r24, 0xFF	; 255
    56ea:	80 93 0c 02 	sts	0x020C, r24
    56ee:	80 93 0d 02 	sts	0x020D, r24
    56f2:	80 93 0e 02 	sts	0x020E, r24
    56f6:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <updateRedLed>
    56fa:	80 91 0d 02 	lds	r24, 0x020D
    56fe:	0e 94 49 27 	call	0x4e92	; 0x4e92 <updateGreenLed>
    5702:	80 91 0e 02 	lds	r24, 0x020E
    5706:	0e 94 5d 27 	call	0x4eba	; 0x4eba <updateBlueLed>
    570a:	df 91       	pop	r29
    570c:	cf 91       	pop	r28
    570e:	08 95       	ret
    5710:	80 91 c0 02 	lds	r24, 0x02C0
    5714:	88 23       	and	r24, r24
    5716:	09 f4       	brne	.+2      	; 0x571a <calibrateSensors+0x2c0>
    5718:	86 c1       	rjmp	.+780    	; 0x5a26 <calibrateSensors+0x5cc>
    571a:	10 92 c0 02 	sts	0x02C0, r1
    571e:	21 15       	cp	r18, r1
    5720:	31 05       	cpc	r19, r1
    5722:	09 f4       	brne	.+2      	; 0x5726 <calibrateSensors+0x2cc>
    5724:	86 c1       	rjmp	.+780    	; 0x5a32 <calibrateSensors+0x5d8>
    5726:	80 91 59 02 	lds	r24, 0x0259
    572a:	90 91 5a 02 	lds	r25, 0x025A
    572e:	aa 27       	eor	r26, r26
    5730:	97 fd       	sbrc	r25, 7
    5732:	a0 95       	com	r26
    5734:	ba 2f       	mov	r27, r26
    5736:	40 91 89 02 	lds	r20, 0x0289
    573a:	50 91 8a 02 	lds	r21, 0x028A
    573e:	60 91 8b 02 	lds	r22, 0x028B
    5742:	70 91 8c 02 	lds	r23, 0x028C
    5746:	84 0f       	add	r24, r20
    5748:	95 1f       	adc	r25, r21
    574a:	a6 1f       	adc	r26, r22
    574c:	b7 1f       	adc	r27, r23
    574e:	80 93 89 02 	sts	0x0289, r24
    5752:	90 93 8a 02 	sts	0x028A, r25
    5756:	a0 93 8b 02 	sts	0x028B, r26
    575a:	b0 93 8c 02 	sts	0x028C, r27
    575e:	80 91 5b 02 	lds	r24, 0x025B
    5762:	90 91 5c 02 	lds	r25, 0x025C
    5766:	aa 27       	eor	r26, r26
    5768:	97 fd       	sbrc	r25, 7
    576a:	a0 95       	com	r26
    576c:	ba 2f       	mov	r27, r26
    576e:	40 91 8d 02 	lds	r20, 0x028D
    5772:	50 91 8e 02 	lds	r21, 0x028E
    5776:	60 91 8f 02 	lds	r22, 0x028F
    577a:	70 91 90 02 	lds	r23, 0x0290
    577e:	84 0f       	add	r24, r20
    5780:	95 1f       	adc	r25, r21
    5782:	a6 1f       	adc	r26, r22
    5784:	b7 1f       	adc	r27, r23
    5786:	80 93 8d 02 	sts	0x028D, r24
    578a:	90 93 8e 02 	sts	0x028E, r25
    578e:	a0 93 8f 02 	sts	0x028F, r26
    5792:	b0 93 90 02 	sts	0x0290, r27
    5796:	80 91 5d 02 	lds	r24, 0x025D
    579a:	90 91 5e 02 	lds	r25, 0x025E
    579e:	aa 27       	eor	r26, r26
    57a0:	97 fd       	sbrc	r25, 7
    57a2:	a0 95       	com	r26
    57a4:	ba 2f       	mov	r27, r26
    57a6:	40 91 91 02 	lds	r20, 0x0291
    57aa:	50 91 92 02 	lds	r21, 0x0292
    57ae:	60 91 93 02 	lds	r22, 0x0293
    57b2:	70 91 94 02 	lds	r23, 0x0294
    57b6:	84 0f       	add	r24, r20
    57b8:	95 1f       	adc	r25, r21
    57ba:	a6 1f       	adc	r26, r22
    57bc:	b7 1f       	adc	r27, r23
    57be:	80 93 91 02 	sts	0x0291, r24
    57c2:	90 93 92 02 	sts	0x0292, r25
    57c6:	a0 93 93 02 	sts	0x0293, r26
    57ca:	b0 93 94 02 	sts	0x0294, r27
    57ce:	80 91 5f 02 	lds	r24, 0x025F
    57d2:	90 91 60 02 	lds	r25, 0x0260
    57d6:	aa 27       	eor	r26, r26
    57d8:	97 fd       	sbrc	r25, 7
    57da:	a0 95       	com	r26
    57dc:	ba 2f       	mov	r27, r26
    57de:	40 91 95 02 	lds	r20, 0x0295
    57e2:	50 91 96 02 	lds	r21, 0x0296
    57e6:	60 91 97 02 	lds	r22, 0x0297
    57ea:	70 91 98 02 	lds	r23, 0x0298
    57ee:	84 0f       	add	r24, r20
    57f0:	95 1f       	adc	r25, r21
    57f2:	a6 1f       	adc	r26, r22
    57f4:	b7 1f       	adc	r27, r23
    57f6:	80 93 95 02 	sts	0x0295, r24
    57fa:	90 93 96 02 	sts	0x0296, r25
    57fe:	a0 93 97 02 	sts	0x0297, r26
    5802:	b0 93 98 02 	sts	0x0298, r27
    5806:	80 91 61 02 	lds	r24, 0x0261
    580a:	90 91 62 02 	lds	r25, 0x0262
    580e:	aa 27       	eor	r26, r26
    5810:	97 fd       	sbrc	r25, 7
    5812:	a0 95       	com	r26
    5814:	ba 2f       	mov	r27, r26
    5816:	40 91 99 02 	lds	r20, 0x0299
    581a:	50 91 9a 02 	lds	r21, 0x029A
    581e:	60 91 9b 02 	lds	r22, 0x029B
    5822:	70 91 9c 02 	lds	r23, 0x029C
    5826:	84 0f       	add	r24, r20
    5828:	95 1f       	adc	r25, r21
    582a:	a6 1f       	adc	r26, r22
    582c:	b7 1f       	adc	r27, r23
    582e:	80 93 99 02 	sts	0x0299, r24
    5832:	90 93 9a 02 	sts	0x029A, r25
    5836:	a0 93 9b 02 	sts	0x029B, r26
    583a:	b0 93 9c 02 	sts	0x029C, r27
    583e:	80 91 63 02 	lds	r24, 0x0263
    5842:	90 91 64 02 	lds	r25, 0x0264
    5846:	aa 27       	eor	r26, r26
    5848:	97 fd       	sbrc	r25, 7
    584a:	a0 95       	com	r26
    584c:	ba 2f       	mov	r27, r26
    584e:	40 91 9d 02 	lds	r20, 0x029D
    5852:	50 91 9e 02 	lds	r21, 0x029E
    5856:	60 91 9f 02 	lds	r22, 0x029F
    585a:	70 91 a0 02 	lds	r23, 0x02A0
    585e:	84 0f       	add	r24, r20
    5860:	95 1f       	adc	r25, r21
    5862:	a6 1f       	adc	r26, r22
    5864:	b7 1f       	adc	r27, r23
    5866:	80 93 9d 02 	sts	0x029D, r24
    586a:	90 93 9e 02 	sts	0x029E, r25
    586e:	a0 93 9f 02 	sts	0x029F, r26
    5872:	b0 93 a0 02 	sts	0x02A0, r27
    5876:	80 91 65 02 	lds	r24, 0x0265
    587a:	90 91 66 02 	lds	r25, 0x0266
    587e:	aa 27       	eor	r26, r26
    5880:	97 fd       	sbrc	r25, 7
    5882:	a0 95       	com	r26
    5884:	ba 2f       	mov	r27, r26
    5886:	40 91 a1 02 	lds	r20, 0x02A1
    588a:	50 91 a2 02 	lds	r21, 0x02A2
    588e:	60 91 a3 02 	lds	r22, 0x02A3
    5892:	70 91 a4 02 	lds	r23, 0x02A4
    5896:	84 0f       	add	r24, r20
    5898:	95 1f       	adc	r25, r21
    589a:	a6 1f       	adc	r26, r22
    589c:	b7 1f       	adc	r27, r23
    589e:	80 93 a1 02 	sts	0x02A1, r24
    58a2:	90 93 a2 02 	sts	0x02A2, r25
    58a6:	a0 93 a3 02 	sts	0x02A3, r26
    58aa:	b0 93 a4 02 	sts	0x02A4, r27
    58ae:	80 91 67 02 	lds	r24, 0x0267
    58b2:	90 91 68 02 	lds	r25, 0x0268
    58b6:	aa 27       	eor	r26, r26
    58b8:	97 fd       	sbrc	r25, 7
    58ba:	a0 95       	com	r26
    58bc:	ba 2f       	mov	r27, r26
    58be:	40 91 a5 02 	lds	r20, 0x02A5
    58c2:	50 91 a6 02 	lds	r21, 0x02A6
    58c6:	60 91 a7 02 	lds	r22, 0x02A7
    58ca:	70 91 a8 02 	lds	r23, 0x02A8
    58ce:	84 0f       	add	r24, r20
    58d0:	95 1f       	adc	r25, r21
    58d2:	a6 1f       	adc	r26, r22
    58d4:	b7 1f       	adc	r27, r23
    58d6:	80 93 a5 02 	sts	0x02A5, r24
    58da:	90 93 a6 02 	sts	0x02A6, r25
    58de:	a0 93 a7 02 	sts	0x02A7, r26
    58e2:	b0 93 a8 02 	sts	0x02A8, r27
    58e6:	80 91 69 02 	lds	r24, 0x0269
    58ea:	90 91 6a 02 	lds	r25, 0x026A
    58ee:	aa 27       	eor	r26, r26
    58f0:	97 fd       	sbrc	r25, 7
    58f2:	a0 95       	com	r26
    58f4:	ba 2f       	mov	r27, r26
    58f6:	40 91 a9 02 	lds	r20, 0x02A9
    58fa:	50 91 aa 02 	lds	r21, 0x02AA
    58fe:	60 91 ab 02 	lds	r22, 0x02AB
    5902:	70 91 ac 02 	lds	r23, 0x02AC
    5906:	84 0f       	add	r24, r20
    5908:	95 1f       	adc	r25, r21
    590a:	a6 1f       	adc	r26, r22
    590c:	b7 1f       	adc	r27, r23
    590e:	80 93 a9 02 	sts	0x02A9, r24
    5912:	90 93 aa 02 	sts	0x02AA, r25
    5916:	a0 93 ab 02 	sts	0x02AB, r26
    591a:	b0 93 ac 02 	sts	0x02AC, r27
    591e:	80 91 6b 02 	lds	r24, 0x026B
    5922:	90 91 6c 02 	lds	r25, 0x026C
    5926:	aa 27       	eor	r26, r26
    5928:	97 fd       	sbrc	r25, 7
    592a:	a0 95       	com	r26
    592c:	ba 2f       	mov	r27, r26
    592e:	40 91 ad 02 	lds	r20, 0x02AD
    5932:	50 91 ae 02 	lds	r21, 0x02AE
    5936:	60 91 af 02 	lds	r22, 0x02AF
    593a:	70 91 b0 02 	lds	r23, 0x02B0
    593e:	84 0f       	add	r24, r20
    5940:	95 1f       	adc	r25, r21
    5942:	a6 1f       	adc	r26, r22
    5944:	b7 1f       	adc	r27, r23
    5946:	80 93 ad 02 	sts	0x02AD, r24
    594a:	90 93 ae 02 	sts	0x02AE, r25
    594e:	a0 93 af 02 	sts	0x02AF, r26
    5952:	b0 93 b0 02 	sts	0x02B0, r27
    5956:	80 91 6d 02 	lds	r24, 0x026D
    595a:	90 91 6e 02 	lds	r25, 0x026E
    595e:	aa 27       	eor	r26, r26
    5960:	97 fd       	sbrc	r25, 7
    5962:	a0 95       	com	r26
    5964:	ba 2f       	mov	r27, r26
    5966:	40 91 b1 02 	lds	r20, 0x02B1
    596a:	50 91 b2 02 	lds	r21, 0x02B2
    596e:	60 91 b3 02 	lds	r22, 0x02B3
    5972:	70 91 b4 02 	lds	r23, 0x02B4
    5976:	84 0f       	add	r24, r20
    5978:	95 1f       	adc	r25, r21
    597a:	a6 1f       	adc	r26, r22
    597c:	b7 1f       	adc	r27, r23
    597e:	80 93 b1 02 	sts	0x02B1, r24
    5982:	90 93 b2 02 	sts	0x02B2, r25
    5986:	a0 93 b3 02 	sts	0x02B3, r26
    598a:	b0 93 b4 02 	sts	0x02B4, r27
    598e:	80 91 6f 02 	lds	r24, 0x026F
    5992:	90 91 70 02 	lds	r25, 0x0270
    5996:	aa 27       	eor	r26, r26
    5998:	97 fd       	sbrc	r25, 7
    599a:	a0 95       	com	r26
    599c:	ba 2f       	mov	r27, r26
    599e:	40 91 b5 02 	lds	r20, 0x02B5
    59a2:	50 91 b6 02 	lds	r21, 0x02B6
    59a6:	60 91 b7 02 	lds	r22, 0x02B7
    59aa:	70 91 b8 02 	lds	r23, 0x02B8
    59ae:	84 0f       	add	r24, r20
    59b0:	95 1f       	adc	r25, r21
    59b2:	a6 1f       	adc	r26, r22
    59b4:	b7 1f       	adc	r27, r23
    59b6:	80 93 b5 02 	sts	0x02B5, r24
    59ba:	90 93 b6 02 	sts	0x02B6, r25
    59be:	a0 93 b7 02 	sts	0x02B7, r26
    59c2:	b0 93 b8 02 	sts	0x02B8, r27
    59c6:	80 91 32 04 	lds	r24, 0x0432
    59ca:	90 91 33 04 	lds	r25, 0x0433
    59ce:	40 91 26 04 	lds	r20, 0x0426
    59d2:	50 91 27 04 	lds	r21, 0x0427
    59d6:	84 0f       	add	r24, r20
    59d8:	95 1f       	adc	r25, r21
    59da:	90 93 33 04 	sts	0x0433, r25
    59de:	80 93 32 04 	sts	0x0432, r24
    59e2:	80 91 34 04 	lds	r24, 0x0434
    59e6:	90 91 35 04 	lds	r25, 0x0435
    59ea:	40 91 28 04 	lds	r20, 0x0428
    59ee:	50 91 29 04 	lds	r21, 0x0429
    59f2:	84 0f       	add	r24, r20
    59f4:	95 1f       	adc	r25, r21
    59f6:	90 93 35 04 	sts	0x0435, r25
    59fa:	80 93 34 04 	sts	0x0434, r24
    59fe:	80 91 36 04 	lds	r24, 0x0436
    5a02:	90 91 37 04 	lds	r25, 0x0437
    5a06:	40 91 2a 04 	lds	r20, 0x042A
    5a0a:	50 91 2b 04 	lds	r21, 0x042B
    5a0e:	84 0f       	add	r24, r20
    5a10:	95 1f       	adc	r25, r21
    5a12:	90 93 37 04 	sts	0x0437, r25
    5a16:	80 93 36 04 	sts	0x0436, r24
    5a1a:	2f 5f       	subi	r18, 0xFF	; 255
    5a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a1e:	30 93 4b 04 	sts	0x044B, r19
    5a22:	20 93 4a 04 	sts	0x044A, r18
    5a26:	80 91 a7 04 	lds	r24, 0x04A7
    5a2a:	88 23       	and	r24, r24
    5a2c:	09 f0       	breq	.+2      	; 0x5a30 <calibrateSensors+0x5d6>
    5a2e:	31 cd       	rjmp	.-1438   	; 0x5492 <calibrateSensors+0x38>
    5a30:	5b ce       	rjmp	.-842    	; 0x56e8 <calibrateSensors+0x28e>
    5a32:	10 92 89 02 	sts	0x0289, r1
    5a36:	10 92 8a 02 	sts	0x028A, r1
    5a3a:	10 92 8b 02 	sts	0x028B, r1
    5a3e:	10 92 8c 02 	sts	0x028C, r1
    5a42:	10 92 72 02 	sts	0x0272, r1
    5a46:	10 92 71 02 	sts	0x0271, r1
    5a4a:	10 92 8d 02 	sts	0x028D, r1
    5a4e:	10 92 8e 02 	sts	0x028E, r1
    5a52:	10 92 8f 02 	sts	0x028F, r1
    5a56:	10 92 90 02 	sts	0x0290, r1
    5a5a:	10 92 74 02 	sts	0x0274, r1
    5a5e:	10 92 73 02 	sts	0x0273, r1
    5a62:	10 92 91 02 	sts	0x0291, r1
    5a66:	10 92 92 02 	sts	0x0292, r1
    5a6a:	10 92 93 02 	sts	0x0293, r1
    5a6e:	10 92 94 02 	sts	0x0294, r1
    5a72:	10 92 76 02 	sts	0x0276, r1
    5a76:	10 92 75 02 	sts	0x0275, r1
    5a7a:	10 92 95 02 	sts	0x0295, r1
    5a7e:	10 92 96 02 	sts	0x0296, r1
    5a82:	10 92 97 02 	sts	0x0297, r1
    5a86:	10 92 98 02 	sts	0x0298, r1
    5a8a:	10 92 78 02 	sts	0x0278, r1
    5a8e:	10 92 77 02 	sts	0x0277, r1
    5a92:	10 92 99 02 	sts	0x0299, r1
    5a96:	10 92 9a 02 	sts	0x029A, r1
    5a9a:	10 92 9b 02 	sts	0x029B, r1
    5a9e:	10 92 9c 02 	sts	0x029C, r1
    5aa2:	10 92 7a 02 	sts	0x027A, r1
    5aa6:	10 92 79 02 	sts	0x0279, r1
    5aaa:	10 92 9d 02 	sts	0x029D, r1
    5aae:	10 92 9e 02 	sts	0x029E, r1
    5ab2:	10 92 9f 02 	sts	0x029F, r1
    5ab6:	10 92 a0 02 	sts	0x02A0, r1
    5aba:	10 92 7c 02 	sts	0x027C, r1
    5abe:	10 92 7b 02 	sts	0x027B, r1
    5ac2:	10 92 a1 02 	sts	0x02A1, r1
    5ac6:	10 92 a2 02 	sts	0x02A2, r1
    5aca:	10 92 a3 02 	sts	0x02A3, r1
    5ace:	10 92 a4 02 	sts	0x02A4, r1
    5ad2:	10 92 7e 02 	sts	0x027E, r1
    5ad6:	10 92 7d 02 	sts	0x027D, r1
    5ada:	10 92 a5 02 	sts	0x02A5, r1
    5ade:	10 92 a6 02 	sts	0x02A6, r1
    5ae2:	10 92 a7 02 	sts	0x02A7, r1
    5ae6:	10 92 a8 02 	sts	0x02A8, r1
    5aea:	10 92 80 02 	sts	0x0280, r1
    5aee:	10 92 7f 02 	sts	0x027F, r1
    5af2:	10 92 a9 02 	sts	0x02A9, r1
    5af6:	10 92 aa 02 	sts	0x02AA, r1
    5afa:	10 92 ab 02 	sts	0x02AB, r1
    5afe:	10 92 ac 02 	sts	0x02AC, r1
    5b02:	10 92 82 02 	sts	0x0282, r1
    5b06:	10 92 81 02 	sts	0x0281, r1
    5b0a:	10 92 ad 02 	sts	0x02AD, r1
    5b0e:	10 92 ae 02 	sts	0x02AE, r1
    5b12:	10 92 af 02 	sts	0x02AF, r1
    5b16:	10 92 b0 02 	sts	0x02B0, r1
    5b1a:	10 92 84 02 	sts	0x0284, r1
    5b1e:	10 92 83 02 	sts	0x0283, r1
    5b22:	10 92 b1 02 	sts	0x02B1, r1
    5b26:	10 92 b2 02 	sts	0x02B2, r1
    5b2a:	10 92 b3 02 	sts	0x02B3, r1
    5b2e:	10 92 b4 02 	sts	0x02B4, r1
    5b32:	10 92 86 02 	sts	0x0286, r1
    5b36:	10 92 85 02 	sts	0x0285, r1
    5b3a:	10 92 b5 02 	sts	0x02B5, r1
    5b3e:	10 92 b6 02 	sts	0x02B6, r1
    5b42:	10 92 b7 02 	sts	0x02B7, r1
    5b46:	10 92 b8 02 	sts	0x02B8, r1
    5b4a:	10 92 88 02 	sts	0x0288, r1
    5b4e:	10 92 87 02 	sts	0x0287, r1
    5b52:	10 92 33 04 	sts	0x0433, r1
    5b56:	10 92 32 04 	sts	0x0432, r1
    5b5a:	10 92 35 04 	sts	0x0435, r1
    5b5e:	10 92 34 04 	sts	0x0434, r1
    5b62:	10 92 37 04 	sts	0x0437, r1
    5b66:	10 92 36 04 	sts	0x0436, r1
    5b6a:	d0 93 4b 04 	sts	0x044B, r29
    5b6e:	c0 93 4a 04 	sts	0x044A, r28
    5b72:	80 91 a7 04 	lds	r24, 0x04A7
    5b76:	59 cf       	rjmp	.-334    	; 0x5a2a <calibrateSensors+0x5d0>

00005b78 <readAccelXYZ_1>:
    5b78:	80 91 25 04 	lds	r24, 0x0425
    5b7c:	88 23       	and	r24, r24
    5b7e:	79 f0       	breq	.+30     	; 0x5b9e <readAccelXYZ_1+0x26>
    5b80:	81 30       	cpi	r24, 0x01	; 1
    5b82:	11 f1       	breq	.+68     	; 0x5bc8 <readAccelXYZ_1+0x50>
    5b84:	10 92 27 04 	sts	0x0427, r1
    5b88:	10 92 26 04 	sts	0x0426, r1
    5b8c:	10 92 29 04 	sts	0x0429, r1
    5b90:	10 92 28 04 	sts	0x0428, r1
    5b94:	10 92 2b 04 	sts	0x042B, r1
    5b98:	10 92 2a 04 	sts	0x042A, r1
    5b9c:	08 95       	ret
    5b9e:	80 91 14 02 	lds	r24, 0x0214
    5ba2:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    5ba6:	80 e0       	ldi	r24, 0x00	; 0
    5ba8:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    5bac:	80 91 14 02 	lds	r24, 0x0214
    5bb0:	8f 5f       	subi	r24, 0xFF	; 255
    5bb2:	0e 94 c7 18 	call	0x318e	; 0x318e <i2c_rep_start>
    5bb6:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    5bba:	80 93 3b 04 	sts	0x043B, r24
    5bbe:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    5bc2:	80 93 3c 04 	sts	0x043C, r24
    5bc6:	08 95       	ret
    5bc8:	80 91 14 02 	lds	r24, 0x0214
    5bcc:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <i2c_start>
    5bd0:	82 e3       	ldi	r24, 0x32	; 50
    5bd2:	0e 94 f5 18 	call	0x31ea	; 0x31ea <i2c_write>
    5bd6:	80 91 14 02 	lds	r24, 0x0214
    5bda:	8f 5f       	subi	r24, 0xFF	; 255
    5bdc:	0e 94 c7 18 	call	0x318e	; 0x318e <i2c_rep_start>
    5be0:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    5be4:	80 93 3b 04 	sts	0x043B, r24
    5be8:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    5bec:	80 93 3c 04 	sts	0x043C, r24
    5bf0:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    5bf4:	80 93 3d 04 	sts	0x043D, r24
    5bf8:	08 95       	ret

00005bfa <readAccelXYZ_2>:
    5bfa:	80 91 25 04 	lds	r24, 0x0425
    5bfe:	88 23       	and	r24, r24
    5c00:	09 f0       	breq	.+2      	; 0x5c04 <readAccelXYZ_2+0xa>
    5c02:	4e c0       	rjmp	.+156    	; 0x5ca0 <readAccelXYZ_2+0xa6>
    5c04:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    5c08:	80 93 3d 04 	sts	0x043D, r24
    5c0c:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    5c10:	80 93 3e 04 	sts	0x043E, r24
    5c14:	0e 94 07 19 	call	0x320e	; 0x320e <i2c_readAck>
    5c18:	80 93 3f 04 	sts	0x043F, r24
    5c1c:	0e 94 11 19 	call	0x3222	; 0x3222 <i2c_readNak>
    5c20:	80 93 40 04 	sts	0x0440, r24
    5c24:	0e 94 ed 18 	call	0x31da	; 0x31da <i2c_stop>
    5c28:	80 91 a7 04 	lds	r24, 0x04A7
    5c2c:	88 23       	and	r24, r24
    5c2e:	09 f4       	brne	.+2      	; 0x5c32 <readAccelXYZ_2+0x38>
    5c30:	47 c0       	rjmp	.+142    	; 0x5cc0 <readAccelXYZ_2+0xc6>
    5c32:	80 91 3c 04 	lds	r24, 0x043C
    5c36:	99 27       	eor	r25, r25
    5c38:	87 fd       	sbrc	r24, 7
    5c3a:	90 95       	com	r25
    5c3c:	98 2f       	mov	r25, r24
    5c3e:	88 27       	eor	r24, r24
    5c40:	20 91 3b 04 	lds	r18, 0x043B
    5c44:	33 27       	eor	r19, r19
    5c46:	27 fd       	sbrc	r18, 7
    5c48:	30 95       	com	r19
    5c4a:	82 2b       	or	r24, r18
    5c4c:	93 2b       	or	r25, r19
    5c4e:	90 93 27 04 	sts	0x0427, r25
    5c52:	80 93 26 04 	sts	0x0426, r24
    5c56:	80 91 3e 04 	lds	r24, 0x043E
    5c5a:	99 27       	eor	r25, r25
    5c5c:	87 fd       	sbrc	r24, 7
    5c5e:	90 95       	com	r25
    5c60:	98 2f       	mov	r25, r24
    5c62:	88 27       	eor	r24, r24
    5c64:	20 91 3d 04 	lds	r18, 0x043D
    5c68:	33 27       	eor	r19, r19
    5c6a:	27 fd       	sbrc	r18, 7
    5c6c:	30 95       	com	r19
    5c6e:	82 2b       	or	r24, r18
    5c70:	93 2b       	or	r25, r19
    5c72:	90 93 29 04 	sts	0x0429, r25
    5c76:	80 93 28 04 	sts	0x0428, r24
    5c7a:	80 91 40 04 	lds	r24, 0x0440
    5c7e:	99 27       	eor	r25, r25
    5c80:	87 fd       	sbrc	r24, 7
    5c82:	90 95       	com	r25
    5c84:	98 2f       	mov	r25, r24
    5c86:	88 27       	eor	r24, r24
    5c88:	20 91 3f 04 	lds	r18, 0x043F
    5c8c:	33 27       	eor	r19, r19
    5c8e:	27 fd       	sbrc	r18, 7
    5c90:	30 95       	com	r19
    5c92:	82 2b       	or	r24, r18
    5c94:	93 2b       	or	r25, r19
    5c96:	90 93 2b 04 	sts	0x042B, r25
    5c9a:	80 93 2a 04 	sts	0x042A, r24
    5c9e:	08 95       	ret
    5ca0:	81 30       	cpi	r24, 0x01	; 1
    5ca2:	09 f4       	brne	.+2      	; 0x5ca6 <readAccelXYZ_2+0xac>
    5ca4:	b3 cf       	rjmp	.-154    	; 0x5c0c <readAccelXYZ_2+0x12>
    5ca6:	10 92 27 04 	sts	0x0427, r1
    5caa:	10 92 26 04 	sts	0x0426, r1
    5cae:	10 92 29 04 	sts	0x0429, r1
    5cb2:	10 92 28 04 	sts	0x0428, r1
    5cb6:	10 92 2b 04 	sts	0x042B, r1
    5cba:	10 92 2a 04 	sts	0x042A, r1
    5cbe:	08 95       	ret
    5cc0:	80 91 3c 04 	lds	r24, 0x043C
    5cc4:	99 27       	eor	r25, r25
    5cc6:	87 fd       	sbrc	r24, 7
    5cc8:	90 95       	com	r25
    5cca:	98 2f       	mov	r25, r24
    5ccc:	88 27       	eor	r24, r24
    5cce:	20 91 3b 04 	lds	r18, 0x043B
    5cd2:	33 27       	eor	r19, r19
    5cd4:	27 fd       	sbrc	r18, 7
    5cd6:	30 95       	com	r19
    5cd8:	82 2b       	or	r24, r18
    5cda:	93 2b       	or	r25, r19
    5cdc:	20 91 2c 04 	lds	r18, 0x042C
    5ce0:	30 91 2d 04 	lds	r19, 0x042D
    5ce4:	82 1b       	sub	r24, r18
    5ce6:	93 0b       	sbc	r25, r19
    5ce8:	90 93 27 04 	sts	0x0427, r25
    5cec:	80 93 26 04 	sts	0x0426, r24
    5cf0:	80 91 3e 04 	lds	r24, 0x043E
    5cf4:	99 27       	eor	r25, r25
    5cf6:	87 fd       	sbrc	r24, 7
    5cf8:	90 95       	com	r25
    5cfa:	98 2f       	mov	r25, r24
    5cfc:	88 27       	eor	r24, r24
    5cfe:	20 91 3d 04 	lds	r18, 0x043D
    5d02:	33 27       	eor	r19, r19
    5d04:	27 fd       	sbrc	r18, 7
    5d06:	30 95       	com	r19
    5d08:	82 2b       	or	r24, r18
    5d0a:	93 2b       	or	r25, r19
    5d0c:	20 91 2e 04 	lds	r18, 0x042E
    5d10:	30 91 2f 04 	lds	r19, 0x042F
    5d14:	82 1b       	sub	r24, r18
    5d16:	93 0b       	sbc	r25, r19
    5d18:	90 93 29 04 	sts	0x0429, r25
    5d1c:	80 93 28 04 	sts	0x0428, r24
    5d20:	80 91 40 04 	lds	r24, 0x0440
    5d24:	99 27       	eor	r25, r25
    5d26:	87 fd       	sbrc	r24, 7
    5d28:	90 95       	com	r25
    5d2a:	98 2f       	mov	r25, r24
    5d2c:	88 27       	eor	r24, r24
    5d2e:	20 91 3f 04 	lds	r18, 0x043F
    5d32:	33 27       	eor	r19, r19
    5d34:	27 fd       	sbrc	r18, 7
    5d36:	30 95       	com	r19
    5d38:	82 2b       	or	r24, r18
    5d3a:	93 2b       	or	r25, r19
    5d3c:	20 91 30 04 	lds	r18, 0x0430
    5d40:	30 91 31 04 	lds	r19, 0x0431
    5d44:	82 1b       	sub	r24, r18
    5d46:	93 0b       	sbc	r25, r19
    5d48:	90 93 2b 04 	sts	0x042B, r25
    5d4c:	80 93 2a 04 	sts	0x042A, r24
    5d50:	08 95       	ret

00005d52 <computeAngle>:
    5d52:	ef 92       	push	r14
    5d54:	ff 92       	push	r15
    5d56:	0f 93       	push	r16
    5d58:	1f 93       	push	r17
    5d5a:	80 91 2a 04 	lds	r24, 0x042A
    5d5e:	90 91 2b 04 	lds	r25, 0x042B
    5d62:	97 fd       	sbrc	r25, 7
    5d64:	63 c0       	rjmp	.+198    	; 0x5e2c <computeAngle+0xda>
    5d66:	80 31       	cpi	r24, 0x10	; 16
    5d68:	91 05       	cpc	r25, r1
    5d6a:	08 f0       	brcs	.+2      	; 0x5d6e <computeAngle+0x1c>
    5d6c:	4a c0       	rjmp	.+148    	; 0x5e02 <computeAngle+0xb0>
    5d6e:	81 e0       	ldi	r24, 0x01	; 1
    5d70:	80 93 16 02 	sts	0x0216, r24
    5d74:	90 91 15 02 	lds	r25, 0x0215
    5d78:	98 17       	cp	r25, r24
    5d7a:	09 f4       	brne	.+2      	; 0x5d7e <computeAngle+0x2c>
    5d7c:	4a c0       	rjmp	.+148    	; 0x5e12 <computeAngle+0xc0>
    5d7e:	10 92 3a 04 	sts	0x043A, r1
    5d82:	80 93 15 02 	sts	0x0215, r24
    5d86:	60 91 26 04 	lds	r22, 0x0426
    5d8a:	70 91 27 04 	lds	r23, 0x0427
    5d8e:	88 27       	eor	r24, r24
    5d90:	77 fd       	sbrc	r23, 7
    5d92:	80 95       	com	r24
    5d94:	98 2f       	mov	r25, r24
    5d96:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    5d9a:	7b 01       	movw	r14, r22
    5d9c:	8c 01       	movw	r16, r24
    5d9e:	60 91 28 04 	lds	r22, 0x0428
    5da2:	70 91 29 04 	lds	r23, 0x0429
    5da6:	88 27       	eor	r24, r24
    5da8:	77 fd       	sbrc	r23, 7
    5daa:	80 95       	com	r24
    5dac:	98 2f       	mov	r25, r24
    5dae:	0e 94 83 30 	call	0x6106	; 0x6106 <__floatsisf>
    5db2:	9b 01       	movw	r18, r22
    5db4:	ac 01       	movw	r20, r24
    5db6:	c8 01       	movw	r24, r16
    5db8:	b7 01       	movw	r22, r14
    5dba:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <atan2>
    5dbe:	60 93 76 04 	sts	0x0476, r22
    5dc2:	70 93 77 04 	sts	0x0477, r23
    5dc6:	80 93 78 04 	sts	0x0478, r24
    5dca:	90 93 79 04 	sts	0x0479, r25
    5dce:	21 ee       	ldi	r18, 0xE1	; 225
    5dd0:	3e e2       	ldi	r19, 0x2E	; 46
    5dd2:	45 e6       	ldi	r20, 0x65	; 101
    5dd4:	52 e4       	ldi	r21, 0x42	; 66
    5dd6:	0e 94 98 31 	call	0x6330	; 0x6330 <__mulsf3>
    5dda:	0e 94 50 30 	call	0x60a0	; 0x60a0 <__fixsfsi>
    5dde:	9b 01       	movw	r18, r22
    5de0:	70 93 39 04 	sts	0x0439, r23
    5de4:	60 93 38 04 	sts	0x0438, r22
    5de8:	77 ff       	sbrs	r23, 7
    5dea:	06 c0       	rjmp	.+12     	; 0x5df8 <computeAngle+0xa6>
    5dec:	28 59       	subi	r18, 0x98	; 152
    5dee:	3e 4f       	sbci	r19, 0xFE	; 254
    5df0:	30 93 39 04 	sts	0x0439, r19
    5df4:	20 93 38 04 	sts	0x0438, r18
    5df8:	1f 91       	pop	r17
    5dfa:	0f 91       	pop	r16
    5dfc:	ff 90       	pop	r15
    5dfe:	ef 90       	pop	r14
    5e00:	08 95       	ret
    5e02:	10 92 16 02 	sts	0x0216, r1
    5e06:	80 e0       	ldi	r24, 0x00	; 0
    5e08:	90 91 15 02 	lds	r25, 0x0215
    5e0c:	98 17       	cp	r25, r24
    5e0e:	09 f0       	breq	.+2      	; 0x5e12 <computeAngle+0xc0>
    5e10:	b6 cf       	rjmp	.-148    	; 0x5d7e <computeAngle+0x2c>
    5e12:	90 91 3a 04 	lds	r25, 0x043A
    5e16:	9f 5f       	subi	r25, 0xFF	; 255
    5e18:	90 93 3a 04 	sts	0x043A, r25
    5e1c:	95 30       	cpi	r25, 0x05	; 5
    5e1e:	08 f4       	brcc	.+2      	; 0x5e22 <computeAngle+0xd0>
    5e20:	b0 cf       	rjmp	.-160    	; 0x5d82 <computeAngle+0x30>
    5e22:	10 92 3a 04 	sts	0x043A, r1
    5e26:	80 93 17 02 	sts	0x0217, r24
    5e2a:	ab cf       	rjmp	.-170    	; 0x5d82 <computeAngle+0x30>
    5e2c:	90 95       	com	r25
    5e2e:	81 95       	neg	r24
    5e30:	9f 4f       	sbci	r25, 0xFF	; 255
    5e32:	99 cf       	rjmp	.-206    	; 0x5d66 <computeAngle+0x14>

00005e34 <__subsf3>:
    5e34:	50 58       	subi	r21, 0x80	; 128

00005e36 <__addsf3>:
    5e36:	bb 27       	eor	r27, r27
    5e38:	aa 27       	eor	r26, r26
    5e3a:	0e d0       	rcall	.+28     	; 0x5e58 <__addsf3x>
    5e3c:	27 c2       	rjmp	.+1102   	; 0x628c <__fp_round>
    5e3e:	f0 d1       	rcall	.+992    	; 0x6220 <__fp_pscA>
    5e40:	30 f0       	brcs	.+12     	; 0x5e4e <__addsf3+0x18>
    5e42:	f5 d1       	rcall	.+1002   	; 0x622e <__fp_pscB>
    5e44:	20 f0       	brcs	.+8      	; 0x5e4e <__addsf3+0x18>
    5e46:	31 f4       	brne	.+12     	; 0x5e54 <__addsf3+0x1e>
    5e48:	9f 3f       	cpi	r25, 0xFF	; 255
    5e4a:	11 f4       	brne	.+4      	; 0x5e50 <__addsf3+0x1a>
    5e4c:	1e f4       	brtc	.+6      	; 0x5e54 <__addsf3+0x1e>
    5e4e:	c0 c1       	rjmp	.+896    	; 0x61d0 <__fp_nan>
    5e50:	0e f4       	brtc	.+2      	; 0x5e54 <__addsf3+0x1e>
    5e52:	e0 95       	com	r30
    5e54:	e7 fb       	bst	r30, 7
    5e56:	b6 c1       	rjmp	.+876    	; 0x61c4 <__fp_inf>

00005e58 <__addsf3x>:
    5e58:	e9 2f       	mov	r30, r25
    5e5a:	3a d2       	rcall	.+1140   	; 0x62d0 <__fp_split3>
    5e5c:	80 f3       	brcs	.-32     	; 0x5e3e <__addsf3+0x8>
    5e5e:	ba 17       	cp	r27, r26
    5e60:	62 07       	cpc	r22, r18
    5e62:	73 07       	cpc	r23, r19
    5e64:	84 07       	cpc	r24, r20
    5e66:	95 07       	cpc	r25, r21
    5e68:	18 f0       	brcs	.+6      	; 0x5e70 <__addsf3x+0x18>
    5e6a:	71 f4       	brne	.+28     	; 0x5e88 <__addsf3x+0x30>
    5e6c:	9e f5       	brtc	.+102    	; 0x5ed4 <__addsf3x+0x7c>
    5e6e:	52 c2       	rjmp	.+1188   	; 0x6314 <__fp_zero>
    5e70:	0e f4       	brtc	.+2      	; 0x5e74 <__addsf3x+0x1c>
    5e72:	e0 95       	com	r30
    5e74:	0b 2e       	mov	r0, r27
    5e76:	ba 2f       	mov	r27, r26
    5e78:	a0 2d       	mov	r26, r0
    5e7a:	0b 01       	movw	r0, r22
    5e7c:	b9 01       	movw	r22, r18
    5e7e:	90 01       	movw	r18, r0
    5e80:	0c 01       	movw	r0, r24
    5e82:	ca 01       	movw	r24, r20
    5e84:	a0 01       	movw	r20, r0
    5e86:	11 24       	eor	r1, r1
    5e88:	ff 27       	eor	r31, r31
    5e8a:	59 1b       	sub	r21, r25
    5e8c:	99 f0       	breq	.+38     	; 0x5eb4 <__addsf3x+0x5c>
    5e8e:	59 3f       	cpi	r21, 0xF9	; 249
    5e90:	50 f4       	brcc	.+20     	; 0x5ea6 <__addsf3x+0x4e>
    5e92:	50 3e       	cpi	r21, 0xE0	; 224
    5e94:	68 f1       	brcs	.+90     	; 0x5ef0 <__addsf3x+0x98>
    5e96:	1a 16       	cp	r1, r26
    5e98:	f0 40       	sbci	r31, 0x00	; 0
    5e9a:	a2 2f       	mov	r26, r18
    5e9c:	23 2f       	mov	r18, r19
    5e9e:	34 2f       	mov	r19, r20
    5ea0:	44 27       	eor	r20, r20
    5ea2:	58 5f       	subi	r21, 0xF8	; 248
    5ea4:	f3 cf       	rjmp	.-26     	; 0x5e8c <__addsf3x+0x34>
    5ea6:	46 95       	lsr	r20
    5ea8:	37 95       	ror	r19
    5eaa:	27 95       	ror	r18
    5eac:	a7 95       	ror	r26
    5eae:	f0 40       	sbci	r31, 0x00	; 0
    5eb0:	53 95       	inc	r21
    5eb2:	c9 f7       	brne	.-14     	; 0x5ea6 <__addsf3x+0x4e>
    5eb4:	7e f4       	brtc	.+30     	; 0x5ed4 <__addsf3x+0x7c>
    5eb6:	1f 16       	cp	r1, r31
    5eb8:	ba 0b       	sbc	r27, r26
    5eba:	62 0b       	sbc	r22, r18
    5ebc:	73 0b       	sbc	r23, r19
    5ebe:	84 0b       	sbc	r24, r20
    5ec0:	ba f0       	brmi	.+46     	; 0x5ef0 <__addsf3x+0x98>
    5ec2:	91 50       	subi	r25, 0x01	; 1
    5ec4:	a1 f0       	breq	.+40     	; 0x5eee <__addsf3x+0x96>
    5ec6:	ff 0f       	add	r31, r31
    5ec8:	bb 1f       	adc	r27, r27
    5eca:	66 1f       	adc	r22, r22
    5ecc:	77 1f       	adc	r23, r23
    5ece:	88 1f       	adc	r24, r24
    5ed0:	c2 f7       	brpl	.-16     	; 0x5ec2 <__addsf3x+0x6a>
    5ed2:	0e c0       	rjmp	.+28     	; 0x5ef0 <__addsf3x+0x98>
    5ed4:	ba 0f       	add	r27, r26
    5ed6:	62 1f       	adc	r22, r18
    5ed8:	73 1f       	adc	r23, r19
    5eda:	84 1f       	adc	r24, r20
    5edc:	48 f4       	brcc	.+18     	; 0x5ef0 <__addsf3x+0x98>
    5ede:	87 95       	ror	r24
    5ee0:	77 95       	ror	r23
    5ee2:	67 95       	ror	r22
    5ee4:	b7 95       	ror	r27
    5ee6:	f7 95       	ror	r31
    5ee8:	9e 3f       	cpi	r25, 0xFE	; 254
    5eea:	08 f0       	brcs	.+2      	; 0x5eee <__addsf3x+0x96>
    5eec:	b3 cf       	rjmp	.-154    	; 0x5e54 <__addsf3+0x1e>
    5eee:	93 95       	inc	r25
    5ef0:	88 0f       	add	r24, r24
    5ef2:	08 f0       	brcs	.+2      	; 0x5ef6 <__addsf3x+0x9e>
    5ef4:	99 27       	eor	r25, r25
    5ef6:	ee 0f       	add	r30, r30
    5ef8:	97 95       	ror	r25
    5efa:	87 95       	ror	r24
    5efc:	08 95       	ret
    5efe:	90 d1       	rcall	.+800    	; 0x6220 <__fp_pscA>
    5f00:	58 f0       	brcs	.+22     	; 0x5f18 <__addsf3x+0xc0>
    5f02:	80 e8       	ldi	r24, 0x80	; 128
    5f04:	91 e0       	ldi	r25, 0x01	; 1
    5f06:	09 f4       	brne	.+2      	; 0x5f0a <__addsf3x+0xb2>
    5f08:	9e ef       	ldi	r25, 0xFE	; 254
    5f0a:	91 d1       	rcall	.+802    	; 0x622e <__fp_pscB>
    5f0c:	28 f0       	brcs	.+10     	; 0x5f18 <__addsf3x+0xc0>
    5f0e:	40 e8       	ldi	r20, 0x80	; 128
    5f10:	51 e0       	ldi	r21, 0x01	; 1
    5f12:	59 f4       	brne	.+22     	; 0x5f2a <atan2+0xe>
    5f14:	5e ef       	ldi	r21, 0xFE	; 254
    5f16:	09 c0       	rjmp	.+18     	; 0x5f2a <atan2+0xe>
    5f18:	5b c1       	rjmp	.+694    	; 0x61d0 <__fp_nan>
    5f1a:	fc c1       	rjmp	.+1016   	; 0x6314 <__fp_zero>

00005f1c <atan2>:
    5f1c:	e9 2f       	mov	r30, r25
    5f1e:	e0 78       	andi	r30, 0x80	; 128
    5f20:	d7 d1       	rcall	.+942    	; 0x62d0 <__fp_split3>
    5f22:	68 f3       	brcs	.-38     	; 0x5efe <__addsf3x+0xa6>
    5f24:	09 2e       	mov	r0, r25
    5f26:	05 2a       	or	r0, r21
    5f28:	c1 f3       	breq	.-16     	; 0x5f1a <__addsf3x+0xc2>
    5f2a:	26 17       	cp	r18, r22
    5f2c:	37 07       	cpc	r19, r23
    5f2e:	48 07       	cpc	r20, r24
    5f30:	59 07       	cpc	r21, r25
    5f32:	38 f0       	brcs	.+14     	; 0x5f42 <atan2+0x26>
    5f34:	0e 2e       	mov	r0, r30
    5f36:	07 f8       	bld	r0, 7
    5f38:	e0 25       	eor	r30, r0
    5f3a:	69 f0       	breq	.+26     	; 0x5f56 <atan2+0x3a>
    5f3c:	e0 25       	eor	r30, r0
    5f3e:	e0 64       	ori	r30, 0x40	; 64
    5f40:	0a c0       	rjmp	.+20     	; 0x5f56 <atan2+0x3a>
    5f42:	ef 63       	ori	r30, 0x3F	; 63
    5f44:	07 f8       	bld	r0, 7
    5f46:	00 94       	com	r0
    5f48:	07 fa       	bst	r0, 7
    5f4a:	db 01       	movw	r26, r22
    5f4c:	b9 01       	movw	r22, r18
    5f4e:	9d 01       	movw	r18, r26
    5f50:	dc 01       	movw	r26, r24
    5f52:	ca 01       	movw	r24, r20
    5f54:	ad 01       	movw	r20, r26
    5f56:	ef 93       	push	r30
    5f58:	4a d0       	rcall	.+148    	; 0x5fee <__divsf3_pse>
    5f5a:	98 d1       	rcall	.+816    	; 0x628c <__fp_round>
    5f5c:	0a d0       	rcall	.+20     	; 0x5f72 <atan>
    5f5e:	5f 91       	pop	r21
    5f60:	55 23       	and	r21, r21
    5f62:	31 f0       	breq	.+12     	; 0x5f70 <atan2+0x54>
    5f64:	2b ed       	ldi	r18, 0xDB	; 219
    5f66:	3f e0       	ldi	r19, 0x0F	; 15
    5f68:	49 e4       	ldi	r20, 0x49	; 73
    5f6a:	50 fd       	sbrc	r21, 0
    5f6c:	49 ec       	ldi	r20, 0xC9	; 201
    5f6e:	63 cf       	rjmp	.-314    	; 0x5e36 <__addsf3>
    5f70:	08 95       	ret

00005f72 <atan>:
    5f72:	df 93       	push	r29
    5f74:	dd 27       	eor	r29, r29
    5f76:	b9 2f       	mov	r27, r25
    5f78:	bf 77       	andi	r27, 0x7F	; 127
    5f7a:	40 e8       	ldi	r20, 0x80	; 128
    5f7c:	5f e3       	ldi	r21, 0x3F	; 63
    5f7e:	16 16       	cp	r1, r22
    5f80:	17 06       	cpc	r1, r23
    5f82:	48 07       	cpc	r20, r24
    5f84:	5b 07       	cpc	r21, r27
    5f86:	10 f4       	brcc	.+4      	; 0x5f8c <atan+0x1a>
    5f88:	d9 2f       	mov	r29, r25
    5f8a:	cb d1       	rcall	.+918    	; 0x6322 <inverse>
    5f8c:	9f 93       	push	r25
    5f8e:	8f 93       	push	r24
    5f90:	7f 93       	push	r23
    5f92:	6f 93       	push	r22
    5f94:	36 d2       	rcall	.+1132   	; 0x6402 <square>
    5f96:	ee e4       	ldi	r30, 0x4E	; 78
    5f98:	f1 e0       	ldi	r31, 0x01	; 1
    5f9a:	1d d1       	rcall	.+570    	; 0x61d6 <__fp_powser>
    5f9c:	77 d1       	rcall	.+750    	; 0x628c <__fp_round>
    5f9e:	2f 91       	pop	r18
    5fa0:	3f 91       	pop	r19
    5fa2:	4f 91       	pop	r20
    5fa4:	5f 91       	pop	r21
    5fa6:	d0 d1       	rcall	.+928    	; 0x6348 <__mulsf3x>
    5fa8:	dd 23       	and	r29, r29
    5faa:	49 f0       	breq	.+18     	; 0x5fbe <atan+0x4c>
    5fac:	90 58       	subi	r25, 0x80	; 128
    5fae:	a2 ea       	ldi	r26, 0xA2	; 162
    5fb0:	2a ed       	ldi	r18, 0xDA	; 218
    5fb2:	3f e0       	ldi	r19, 0x0F	; 15
    5fb4:	49 ec       	ldi	r20, 0xC9	; 201
    5fb6:	5f e3       	ldi	r21, 0x3F	; 63
    5fb8:	d0 78       	andi	r29, 0x80	; 128
    5fba:	5d 27       	eor	r21, r29
    5fbc:	4d df       	rcall	.-358    	; 0x5e58 <__addsf3x>
    5fbe:	df 91       	pop	r29
    5fc0:	65 c1       	rjmp	.+714    	; 0x628c <__fp_round>

00005fc2 <__cmpsf2>:
    5fc2:	dc d0       	rcall	.+440    	; 0x617c <__fp_cmp>
    5fc4:	08 f4       	brcc	.+2      	; 0x5fc8 <__cmpsf2+0x6>
    5fc6:	81 e0       	ldi	r24, 0x01	; 1
    5fc8:	08 95       	ret

00005fca <cos>:
    5fca:	39 d1       	rcall	.+626    	; 0x623e <__fp_rempio2>
    5fcc:	e3 95       	inc	r30
    5fce:	6f c1       	rjmp	.+734    	; 0x62ae <__fp_sinus>

00005fd0 <__divsf3>:
    5fd0:	0c d0       	rcall	.+24     	; 0x5fea <__divsf3x>
    5fd2:	5c c1       	rjmp	.+696    	; 0x628c <__fp_round>
    5fd4:	2c d1       	rcall	.+600    	; 0x622e <__fp_pscB>
    5fd6:	40 f0       	brcs	.+16     	; 0x5fe8 <__divsf3+0x18>
    5fd8:	23 d1       	rcall	.+582    	; 0x6220 <__fp_pscA>
    5fda:	30 f0       	brcs	.+12     	; 0x5fe8 <__divsf3+0x18>
    5fdc:	21 f4       	brne	.+8      	; 0x5fe6 <__divsf3+0x16>
    5fde:	5f 3f       	cpi	r21, 0xFF	; 255
    5fe0:	19 f0       	breq	.+6      	; 0x5fe8 <__divsf3+0x18>
    5fe2:	f0 c0       	rjmp	.+480    	; 0x61c4 <__fp_inf>
    5fe4:	51 11       	cpse	r21, r1
    5fe6:	97 c1       	rjmp	.+814    	; 0x6316 <__fp_szero>
    5fe8:	f3 c0       	rjmp	.+486    	; 0x61d0 <__fp_nan>

00005fea <__divsf3x>:
    5fea:	72 d1       	rcall	.+740    	; 0x62d0 <__fp_split3>
    5fec:	98 f3       	brcs	.-26     	; 0x5fd4 <__divsf3+0x4>

00005fee <__divsf3_pse>:
    5fee:	99 23       	and	r25, r25
    5ff0:	c9 f3       	breq	.-14     	; 0x5fe4 <__divsf3+0x14>
    5ff2:	55 23       	and	r21, r21
    5ff4:	b1 f3       	breq	.-20     	; 0x5fe2 <__divsf3+0x12>
    5ff6:	95 1b       	sub	r25, r21
    5ff8:	55 0b       	sbc	r21, r21
    5ffa:	bb 27       	eor	r27, r27
    5ffc:	aa 27       	eor	r26, r26
    5ffe:	62 17       	cp	r22, r18
    6000:	73 07       	cpc	r23, r19
    6002:	84 07       	cpc	r24, r20
    6004:	38 f0       	brcs	.+14     	; 0x6014 <__divsf3_pse+0x26>
    6006:	9f 5f       	subi	r25, 0xFF	; 255
    6008:	5f 4f       	sbci	r21, 0xFF	; 255
    600a:	22 0f       	add	r18, r18
    600c:	33 1f       	adc	r19, r19
    600e:	44 1f       	adc	r20, r20
    6010:	aa 1f       	adc	r26, r26
    6012:	a9 f3       	breq	.-22     	; 0x5ffe <__divsf3_pse+0x10>
    6014:	33 d0       	rcall	.+102    	; 0x607c <__divsf3_pse+0x8e>
    6016:	0e 2e       	mov	r0, r30
    6018:	3a f0       	brmi	.+14     	; 0x6028 <__divsf3_pse+0x3a>
    601a:	e0 e8       	ldi	r30, 0x80	; 128
    601c:	30 d0       	rcall	.+96     	; 0x607e <__divsf3_pse+0x90>
    601e:	91 50       	subi	r25, 0x01	; 1
    6020:	50 40       	sbci	r21, 0x00	; 0
    6022:	e6 95       	lsr	r30
    6024:	00 1c       	adc	r0, r0
    6026:	ca f7       	brpl	.-14     	; 0x601a <__divsf3_pse+0x2c>
    6028:	29 d0       	rcall	.+82     	; 0x607c <__divsf3_pse+0x8e>
    602a:	fe 2f       	mov	r31, r30
    602c:	27 d0       	rcall	.+78     	; 0x607c <__divsf3_pse+0x8e>
    602e:	66 0f       	add	r22, r22
    6030:	77 1f       	adc	r23, r23
    6032:	88 1f       	adc	r24, r24
    6034:	bb 1f       	adc	r27, r27
    6036:	26 17       	cp	r18, r22
    6038:	37 07       	cpc	r19, r23
    603a:	48 07       	cpc	r20, r24
    603c:	ab 07       	cpc	r26, r27
    603e:	b0 e8       	ldi	r27, 0x80	; 128
    6040:	09 f0       	breq	.+2      	; 0x6044 <__divsf3_pse+0x56>
    6042:	bb 0b       	sbc	r27, r27
    6044:	80 2d       	mov	r24, r0
    6046:	bf 01       	movw	r22, r30
    6048:	ff 27       	eor	r31, r31
    604a:	93 58       	subi	r25, 0x83	; 131
    604c:	5f 4f       	sbci	r21, 0xFF	; 255
    604e:	2a f0       	brmi	.+10     	; 0x605a <__divsf3_pse+0x6c>
    6050:	9e 3f       	cpi	r25, 0xFE	; 254
    6052:	51 05       	cpc	r21, r1
    6054:	68 f0       	brcs	.+26     	; 0x6070 <__divsf3_pse+0x82>
    6056:	b6 c0       	rjmp	.+364    	; 0x61c4 <__fp_inf>
    6058:	5e c1       	rjmp	.+700    	; 0x6316 <__fp_szero>
    605a:	5f 3f       	cpi	r21, 0xFF	; 255
    605c:	ec f3       	brlt	.-6      	; 0x6058 <__divsf3_pse+0x6a>
    605e:	98 3e       	cpi	r25, 0xE8	; 232
    6060:	dc f3       	brlt	.-10     	; 0x6058 <__divsf3_pse+0x6a>
    6062:	86 95       	lsr	r24
    6064:	77 95       	ror	r23
    6066:	67 95       	ror	r22
    6068:	b7 95       	ror	r27
    606a:	f7 95       	ror	r31
    606c:	9f 5f       	subi	r25, 0xFF	; 255
    606e:	c9 f7       	brne	.-14     	; 0x6062 <__divsf3_pse+0x74>
    6070:	88 0f       	add	r24, r24
    6072:	91 1d       	adc	r25, r1
    6074:	96 95       	lsr	r25
    6076:	87 95       	ror	r24
    6078:	97 f9       	bld	r25, 7
    607a:	08 95       	ret
    607c:	e1 e0       	ldi	r30, 0x01	; 1
    607e:	66 0f       	add	r22, r22
    6080:	77 1f       	adc	r23, r23
    6082:	88 1f       	adc	r24, r24
    6084:	bb 1f       	adc	r27, r27
    6086:	62 17       	cp	r22, r18
    6088:	73 07       	cpc	r23, r19
    608a:	84 07       	cpc	r24, r20
    608c:	ba 07       	cpc	r27, r26
    608e:	20 f0       	brcs	.+8      	; 0x6098 <__divsf3_pse+0xaa>
    6090:	62 1b       	sub	r22, r18
    6092:	73 0b       	sbc	r23, r19
    6094:	84 0b       	sbc	r24, r20
    6096:	ba 0b       	sbc	r27, r26
    6098:	ee 1f       	adc	r30, r30
    609a:	88 f7       	brcc	.-30     	; 0x607e <__divsf3_pse+0x90>
    609c:	e0 95       	com	r30
    609e:	08 95       	ret

000060a0 <__fixsfsi>:
    60a0:	04 d0       	rcall	.+8      	; 0x60aa <__fixunssfsi>
    60a2:	68 94       	set
    60a4:	b1 11       	cpse	r27, r1
    60a6:	37 c1       	rjmp	.+622    	; 0x6316 <__fp_szero>
    60a8:	08 95       	ret

000060aa <__fixunssfsi>:
    60aa:	1a d1       	rcall	.+564    	; 0x62e0 <__fp_splitA>
    60ac:	88 f0       	brcs	.+34     	; 0x60d0 <__fixunssfsi+0x26>
    60ae:	9f 57       	subi	r25, 0x7F	; 127
    60b0:	90 f0       	brcs	.+36     	; 0x60d6 <__fixunssfsi+0x2c>
    60b2:	b9 2f       	mov	r27, r25
    60b4:	99 27       	eor	r25, r25
    60b6:	b7 51       	subi	r27, 0x17	; 23
    60b8:	a0 f0       	brcs	.+40     	; 0x60e2 <__fixunssfsi+0x38>
    60ba:	d1 f0       	breq	.+52     	; 0x60f0 <__fixunssfsi+0x46>
    60bc:	66 0f       	add	r22, r22
    60be:	77 1f       	adc	r23, r23
    60c0:	88 1f       	adc	r24, r24
    60c2:	99 1f       	adc	r25, r25
    60c4:	1a f0       	brmi	.+6      	; 0x60cc <__fixunssfsi+0x22>
    60c6:	ba 95       	dec	r27
    60c8:	c9 f7       	brne	.-14     	; 0x60bc <__fixunssfsi+0x12>
    60ca:	12 c0       	rjmp	.+36     	; 0x60f0 <__fixunssfsi+0x46>
    60cc:	b1 30       	cpi	r27, 0x01	; 1
    60ce:	81 f0       	breq	.+32     	; 0x60f0 <__fixunssfsi+0x46>
    60d0:	21 d1       	rcall	.+578    	; 0x6314 <__fp_zero>
    60d2:	b1 e0       	ldi	r27, 0x01	; 1
    60d4:	08 95       	ret
    60d6:	1e c1       	rjmp	.+572    	; 0x6314 <__fp_zero>
    60d8:	67 2f       	mov	r22, r23
    60da:	78 2f       	mov	r23, r24
    60dc:	88 27       	eor	r24, r24
    60de:	b8 5f       	subi	r27, 0xF8	; 248
    60e0:	39 f0       	breq	.+14     	; 0x60f0 <__fixunssfsi+0x46>
    60e2:	b9 3f       	cpi	r27, 0xF9	; 249
    60e4:	cc f3       	brlt	.-14     	; 0x60d8 <__fixunssfsi+0x2e>
    60e6:	86 95       	lsr	r24
    60e8:	77 95       	ror	r23
    60ea:	67 95       	ror	r22
    60ec:	b3 95       	inc	r27
    60ee:	d9 f7       	brne	.-10     	; 0x60e6 <__fixunssfsi+0x3c>
    60f0:	3e f4       	brtc	.+14     	; 0x6100 <__fixunssfsi+0x56>
    60f2:	90 95       	com	r25
    60f4:	80 95       	com	r24
    60f6:	70 95       	com	r23
    60f8:	61 95       	neg	r22
    60fa:	7f 4f       	sbci	r23, 0xFF	; 255
    60fc:	8f 4f       	sbci	r24, 0xFF	; 255
    60fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6100:	08 95       	ret

00006102 <__floatunsisf>:
    6102:	e8 94       	clt
    6104:	09 c0       	rjmp	.+18     	; 0x6118 <__floatsisf+0x12>

00006106 <__floatsisf>:
    6106:	97 fb       	bst	r25, 7
    6108:	3e f4       	brtc	.+14     	; 0x6118 <__floatsisf+0x12>
    610a:	90 95       	com	r25
    610c:	80 95       	com	r24
    610e:	70 95       	com	r23
    6110:	61 95       	neg	r22
    6112:	7f 4f       	sbci	r23, 0xFF	; 255
    6114:	8f 4f       	sbci	r24, 0xFF	; 255
    6116:	9f 4f       	sbci	r25, 0xFF	; 255
    6118:	99 23       	and	r25, r25
    611a:	a9 f0       	breq	.+42     	; 0x6146 <__floatsisf+0x40>
    611c:	f9 2f       	mov	r31, r25
    611e:	96 e9       	ldi	r25, 0x96	; 150
    6120:	bb 27       	eor	r27, r27
    6122:	93 95       	inc	r25
    6124:	f6 95       	lsr	r31
    6126:	87 95       	ror	r24
    6128:	77 95       	ror	r23
    612a:	67 95       	ror	r22
    612c:	b7 95       	ror	r27
    612e:	f1 11       	cpse	r31, r1
    6130:	f8 cf       	rjmp	.-16     	; 0x6122 <__floatsisf+0x1c>
    6132:	fa f4       	brpl	.+62     	; 0x6172 <__floatsisf+0x6c>
    6134:	bb 0f       	add	r27, r27
    6136:	11 f4       	brne	.+4      	; 0x613c <__floatsisf+0x36>
    6138:	60 ff       	sbrs	r22, 0
    613a:	1b c0       	rjmp	.+54     	; 0x6172 <__floatsisf+0x6c>
    613c:	6f 5f       	subi	r22, 0xFF	; 255
    613e:	7f 4f       	sbci	r23, 0xFF	; 255
    6140:	8f 4f       	sbci	r24, 0xFF	; 255
    6142:	9f 4f       	sbci	r25, 0xFF	; 255
    6144:	16 c0       	rjmp	.+44     	; 0x6172 <__floatsisf+0x6c>
    6146:	88 23       	and	r24, r24
    6148:	11 f0       	breq	.+4      	; 0x614e <__floatsisf+0x48>
    614a:	96 e9       	ldi	r25, 0x96	; 150
    614c:	11 c0       	rjmp	.+34     	; 0x6170 <__floatsisf+0x6a>
    614e:	77 23       	and	r23, r23
    6150:	21 f0       	breq	.+8      	; 0x615a <__floatsisf+0x54>
    6152:	9e e8       	ldi	r25, 0x8E	; 142
    6154:	87 2f       	mov	r24, r23
    6156:	76 2f       	mov	r23, r22
    6158:	05 c0       	rjmp	.+10     	; 0x6164 <__floatsisf+0x5e>
    615a:	66 23       	and	r22, r22
    615c:	71 f0       	breq	.+28     	; 0x617a <__floatsisf+0x74>
    615e:	96 e8       	ldi	r25, 0x86	; 134
    6160:	86 2f       	mov	r24, r22
    6162:	70 e0       	ldi	r23, 0x00	; 0
    6164:	60 e0       	ldi	r22, 0x00	; 0
    6166:	2a f0       	brmi	.+10     	; 0x6172 <__floatsisf+0x6c>
    6168:	9a 95       	dec	r25
    616a:	66 0f       	add	r22, r22
    616c:	77 1f       	adc	r23, r23
    616e:	88 1f       	adc	r24, r24
    6170:	da f7       	brpl	.-10     	; 0x6168 <__floatsisf+0x62>
    6172:	88 0f       	add	r24, r24
    6174:	96 95       	lsr	r25
    6176:	87 95       	ror	r24
    6178:	97 f9       	bld	r25, 7
    617a:	08 95       	ret

0000617c <__fp_cmp>:
    617c:	99 0f       	add	r25, r25
    617e:	00 08       	sbc	r0, r0
    6180:	55 0f       	add	r21, r21
    6182:	aa 0b       	sbc	r26, r26
    6184:	e0 e8       	ldi	r30, 0x80	; 128
    6186:	fe ef       	ldi	r31, 0xFE	; 254
    6188:	16 16       	cp	r1, r22
    618a:	17 06       	cpc	r1, r23
    618c:	e8 07       	cpc	r30, r24
    618e:	f9 07       	cpc	r31, r25
    6190:	c0 f0       	brcs	.+48     	; 0x61c2 <__fp_cmp+0x46>
    6192:	12 16       	cp	r1, r18
    6194:	13 06       	cpc	r1, r19
    6196:	e4 07       	cpc	r30, r20
    6198:	f5 07       	cpc	r31, r21
    619a:	98 f0       	brcs	.+38     	; 0x61c2 <__fp_cmp+0x46>
    619c:	62 1b       	sub	r22, r18
    619e:	73 0b       	sbc	r23, r19
    61a0:	84 0b       	sbc	r24, r20
    61a2:	95 0b       	sbc	r25, r21
    61a4:	39 f4       	brne	.+14     	; 0x61b4 <__fp_cmp+0x38>
    61a6:	0a 26       	eor	r0, r26
    61a8:	61 f0       	breq	.+24     	; 0x61c2 <__fp_cmp+0x46>
    61aa:	23 2b       	or	r18, r19
    61ac:	24 2b       	or	r18, r20
    61ae:	25 2b       	or	r18, r21
    61b0:	21 f4       	brne	.+8      	; 0x61ba <__fp_cmp+0x3e>
    61b2:	08 95       	ret
    61b4:	0a 26       	eor	r0, r26
    61b6:	09 f4       	brne	.+2      	; 0x61ba <__fp_cmp+0x3e>
    61b8:	a1 40       	sbci	r26, 0x01	; 1
    61ba:	a6 95       	lsr	r26
    61bc:	8f ef       	ldi	r24, 0xFF	; 255
    61be:	81 1d       	adc	r24, r1
    61c0:	81 1d       	adc	r24, r1
    61c2:	08 95       	ret

000061c4 <__fp_inf>:
    61c4:	97 f9       	bld	r25, 7
    61c6:	9f 67       	ori	r25, 0x7F	; 127
    61c8:	80 e8       	ldi	r24, 0x80	; 128
    61ca:	70 e0       	ldi	r23, 0x00	; 0
    61cc:	60 e0       	ldi	r22, 0x00	; 0
    61ce:	08 95       	ret

000061d0 <__fp_nan>:
    61d0:	9f ef       	ldi	r25, 0xFF	; 255
    61d2:	80 ec       	ldi	r24, 0xC0	; 192
    61d4:	08 95       	ret

000061d6 <__fp_powser>:
    61d6:	df 93       	push	r29
    61d8:	cf 93       	push	r28
    61da:	1f 93       	push	r17
    61dc:	0f 93       	push	r16
    61de:	ff 92       	push	r15
    61e0:	ef 92       	push	r14
    61e2:	df 92       	push	r13
    61e4:	7b 01       	movw	r14, r22
    61e6:	8c 01       	movw	r16, r24
    61e8:	68 94       	set
    61ea:	05 c0       	rjmp	.+10     	; 0x61f6 <__fp_powser+0x20>
    61ec:	da 2e       	mov	r13, r26
    61ee:	ef 01       	movw	r28, r30
    61f0:	ab d0       	rcall	.+342    	; 0x6348 <__mulsf3x>
    61f2:	fe 01       	movw	r30, r28
    61f4:	e8 94       	clt
    61f6:	a5 91       	lpm	r26, Z+
    61f8:	25 91       	lpm	r18, Z+
    61fa:	35 91       	lpm	r19, Z+
    61fc:	45 91       	lpm	r20, Z+
    61fe:	55 91       	lpm	r21, Z+
    6200:	ae f3       	brts	.-22     	; 0x61ec <__fp_powser+0x16>
    6202:	ef 01       	movw	r28, r30
    6204:	29 de       	rcall	.-942    	; 0x5e58 <__addsf3x>
    6206:	fe 01       	movw	r30, r28
    6208:	97 01       	movw	r18, r14
    620a:	a8 01       	movw	r20, r16
    620c:	da 94       	dec	r13
    620e:	79 f7       	brne	.-34     	; 0x61ee <__fp_powser+0x18>
    6210:	df 90       	pop	r13
    6212:	ef 90       	pop	r14
    6214:	ff 90       	pop	r15
    6216:	0f 91       	pop	r16
    6218:	1f 91       	pop	r17
    621a:	cf 91       	pop	r28
    621c:	df 91       	pop	r29
    621e:	08 95       	ret

00006220 <__fp_pscA>:
    6220:	00 24       	eor	r0, r0
    6222:	0a 94       	dec	r0
    6224:	16 16       	cp	r1, r22
    6226:	17 06       	cpc	r1, r23
    6228:	18 06       	cpc	r1, r24
    622a:	09 06       	cpc	r0, r25
    622c:	08 95       	ret

0000622e <__fp_pscB>:
    622e:	00 24       	eor	r0, r0
    6230:	0a 94       	dec	r0
    6232:	12 16       	cp	r1, r18
    6234:	13 06       	cpc	r1, r19
    6236:	14 06       	cpc	r1, r20
    6238:	05 06       	cpc	r0, r21
    623a:	08 95       	ret
    623c:	c9 cf       	rjmp	.-110    	; 0x61d0 <__fp_nan>

0000623e <__fp_rempio2>:
    623e:	50 d0       	rcall	.+160    	; 0x62e0 <__fp_splitA>
    6240:	e8 f3       	brcs	.-6      	; 0x623c <__fp_pscB+0xe>
    6242:	e8 94       	clt
    6244:	e0 e0       	ldi	r30, 0x00	; 0
    6246:	bb 27       	eor	r27, r27
    6248:	9f 57       	subi	r25, 0x7F	; 127
    624a:	f0 f0       	brcs	.+60     	; 0x6288 <__fp_rempio2+0x4a>
    624c:	2a ed       	ldi	r18, 0xDA	; 218
    624e:	3f e0       	ldi	r19, 0x0F	; 15
    6250:	49 ec       	ldi	r20, 0xC9	; 201
    6252:	06 c0       	rjmp	.+12     	; 0x6260 <__fp_rempio2+0x22>
    6254:	ee 0f       	add	r30, r30
    6256:	bb 0f       	add	r27, r27
    6258:	66 1f       	adc	r22, r22
    625a:	77 1f       	adc	r23, r23
    625c:	88 1f       	adc	r24, r24
    625e:	28 f0       	brcs	.+10     	; 0x626a <__fp_rempio2+0x2c>
    6260:	b2 3a       	cpi	r27, 0xA2	; 162
    6262:	62 07       	cpc	r22, r18
    6264:	73 07       	cpc	r23, r19
    6266:	84 07       	cpc	r24, r20
    6268:	28 f0       	brcs	.+10     	; 0x6274 <__fp_rempio2+0x36>
    626a:	b2 5a       	subi	r27, 0xA2	; 162
    626c:	62 0b       	sbc	r22, r18
    626e:	73 0b       	sbc	r23, r19
    6270:	84 0b       	sbc	r24, r20
    6272:	e3 95       	inc	r30
    6274:	9a 95       	dec	r25
    6276:	72 f7       	brpl	.-36     	; 0x6254 <__fp_rempio2+0x16>
    6278:	80 38       	cpi	r24, 0x80	; 128
    627a:	30 f4       	brcc	.+12     	; 0x6288 <__fp_rempio2+0x4a>
    627c:	9a 95       	dec	r25
    627e:	bb 0f       	add	r27, r27
    6280:	66 1f       	adc	r22, r22
    6282:	77 1f       	adc	r23, r23
    6284:	88 1f       	adc	r24, r24
    6286:	d2 f7       	brpl	.-12     	; 0x627c <__fp_rempio2+0x3e>
    6288:	90 48       	sbci	r25, 0x80	; 128
    628a:	c0 c0       	rjmp	.+384    	; 0x640c <__fp_mpack_finite>

0000628c <__fp_round>:
    628c:	09 2e       	mov	r0, r25
    628e:	03 94       	inc	r0
    6290:	00 0c       	add	r0, r0
    6292:	11 f4       	brne	.+4      	; 0x6298 <__fp_round+0xc>
    6294:	88 23       	and	r24, r24
    6296:	52 f0       	brmi	.+20     	; 0x62ac <__fp_round+0x20>
    6298:	bb 0f       	add	r27, r27
    629a:	40 f4       	brcc	.+16     	; 0x62ac <__fp_round+0x20>
    629c:	bf 2b       	or	r27, r31
    629e:	11 f4       	brne	.+4      	; 0x62a4 <__fp_round+0x18>
    62a0:	60 ff       	sbrs	r22, 0
    62a2:	04 c0       	rjmp	.+8      	; 0x62ac <__fp_round+0x20>
    62a4:	6f 5f       	subi	r22, 0xFF	; 255
    62a6:	7f 4f       	sbci	r23, 0xFF	; 255
    62a8:	8f 4f       	sbci	r24, 0xFF	; 255
    62aa:	9f 4f       	sbci	r25, 0xFF	; 255
    62ac:	08 95       	ret

000062ae <__fp_sinus>:
    62ae:	ef 93       	push	r30
    62b0:	e0 ff       	sbrs	r30, 0
    62b2:	06 c0       	rjmp	.+12     	; 0x62c0 <__fp_sinus+0x12>
    62b4:	a2 ea       	ldi	r26, 0xA2	; 162
    62b6:	2a ed       	ldi	r18, 0xDA	; 218
    62b8:	3f e0       	ldi	r19, 0x0F	; 15
    62ba:	49 ec       	ldi	r20, 0xC9	; 201
    62bc:	5f eb       	ldi	r21, 0xBF	; 191
    62be:	cc dd       	rcall	.-1128   	; 0x5e58 <__addsf3x>
    62c0:	e5 df       	rcall	.-54     	; 0x628c <__fp_round>
    62c2:	0f 90       	pop	r0
    62c4:	03 94       	inc	r0
    62c6:	01 fc       	sbrc	r0, 1
    62c8:	90 58       	subi	r25, 0x80	; 128
    62ca:	eb e7       	ldi	r30, 0x7B	; 123
    62cc:	f1 e0       	ldi	r31, 0x01	; 1
    62ce:	aa c0       	rjmp	.+340    	; 0x6424 <__fp_powsodd>

000062d0 <__fp_split3>:
    62d0:	57 fd       	sbrc	r21, 7
    62d2:	90 58       	subi	r25, 0x80	; 128
    62d4:	44 0f       	add	r20, r20
    62d6:	55 1f       	adc	r21, r21
    62d8:	59 f0       	breq	.+22     	; 0x62f0 <__fp_splitA+0x10>
    62da:	5f 3f       	cpi	r21, 0xFF	; 255
    62dc:	71 f0       	breq	.+28     	; 0x62fa <__fp_splitA+0x1a>
    62de:	47 95       	ror	r20

000062e0 <__fp_splitA>:
    62e0:	88 0f       	add	r24, r24
    62e2:	97 fb       	bst	r25, 7
    62e4:	99 1f       	adc	r25, r25
    62e6:	61 f0       	breq	.+24     	; 0x6300 <__fp_splitA+0x20>
    62e8:	9f 3f       	cpi	r25, 0xFF	; 255
    62ea:	79 f0       	breq	.+30     	; 0x630a <__fp_splitA+0x2a>
    62ec:	87 95       	ror	r24
    62ee:	08 95       	ret
    62f0:	12 16       	cp	r1, r18
    62f2:	13 06       	cpc	r1, r19
    62f4:	14 06       	cpc	r1, r20
    62f6:	55 1f       	adc	r21, r21
    62f8:	f2 cf       	rjmp	.-28     	; 0x62de <__fp_split3+0xe>
    62fa:	46 95       	lsr	r20
    62fc:	f1 df       	rcall	.-30     	; 0x62e0 <__fp_splitA>
    62fe:	08 c0       	rjmp	.+16     	; 0x6310 <__fp_splitA+0x30>
    6300:	16 16       	cp	r1, r22
    6302:	17 06       	cpc	r1, r23
    6304:	18 06       	cpc	r1, r24
    6306:	99 1f       	adc	r25, r25
    6308:	f1 cf       	rjmp	.-30     	; 0x62ec <__fp_splitA+0xc>
    630a:	86 95       	lsr	r24
    630c:	71 05       	cpc	r23, r1
    630e:	61 05       	cpc	r22, r1
    6310:	08 94       	sec
    6312:	08 95       	ret

00006314 <__fp_zero>:
    6314:	e8 94       	clt

00006316 <__fp_szero>:
    6316:	bb 27       	eor	r27, r27
    6318:	66 27       	eor	r22, r22
    631a:	77 27       	eor	r23, r23
    631c:	cb 01       	movw	r24, r22
    631e:	97 f9       	bld	r25, 7
    6320:	08 95       	ret

00006322 <inverse>:
    6322:	9b 01       	movw	r18, r22
    6324:	ac 01       	movw	r20, r24
    6326:	60 e0       	ldi	r22, 0x00	; 0
    6328:	70 e0       	ldi	r23, 0x00	; 0
    632a:	80 e8       	ldi	r24, 0x80	; 128
    632c:	9f e3       	ldi	r25, 0x3F	; 63
    632e:	50 ce       	rjmp	.-864    	; 0x5fd0 <__divsf3>

00006330 <__mulsf3>:
    6330:	0b d0       	rcall	.+22     	; 0x6348 <__mulsf3x>
    6332:	ac cf       	rjmp	.-168    	; 0x628c <__fp_round>
    6334:	75 df       	rcall	.-278    	; 0x6220 <__fp_pscA>
    6336:	28 f0       	brcs	.+10     	; 0x6342 <__mulsf3+0x12>
    6338:	7a df       	rcall	.-268    	; 0x622e <__fp_pscB>
    633a:	18 f0       	brcs	.+6      	; 0x6342 <__mulsf3+0x12>
    633c:	95 23       	and	r25, r21
    633e:	09 f0       	breq	.+2      	; 0x6342 <__mulsf3+0x12>
    6340:	41 cf       	rjmp	.-382    	; 0x61c4 <__fp_inf>
    6342:	46 cf       	rjmp	.-372    	; 0x61d0 <__fp_nan>
    6344:	11 24       	eor	r1, r1
    6346:	e7 cf       	rjmp	.-50     	; 0x6316 <__fp_szero>

00006348 <__mulsf3x>:
    6348:	c3 df       	rcall	.-122    	; 0x62d0 <__fp_split3>
    634a:	a0 f3       	brcs	.-24     	; 0x6334 <__mulsf3+0x4>

0000634c <__mulsf3_pse>:
    634c:	95 9f       	mul	r25, r21
    634e:	d1 f3       	breq	.-12     	; 0x6344 <__mulsf3+0x14>
    6350:	95 0f       	add	r25, r21
    6352:	50 e0       	ldi	r21, 0x00	; 0
    6354:	55 1f       	adc	r21, r21
    6356:	62 9f       	mul	r22, r18
    6358:	f0 01       	movw	r30, r0
    635a:	72 9f       	mul	r23, r18
    635c:	bb 27       	eor	r27, r27
    635e:	f0 0d       	add	r31, r0
    6360:	b1 1d       	adc	r27, r1
    6362:	63 9f       	mul	r22, r19
    6364:	aa 27       	eor	r26, r26
    6366:	f0 0d       	add	r31, r0
    6368:	b1 1d       	adc	r27, r1
    636a:	aa 1f       	adc	r26, r26
    636c:	64 9f       	mul	r22, r20
    636e:	66 27       	eor	r22, r22
    6370:	b0 0d       	add	r27, r0
    6372:	a1 1d       	adc	r26, r1
    6374:	66 1f       	adc	r22, r22
    6376:	82 9f       	mul	r24, r18
    6378:	22 27       	eor	r18, r18
    637a:	b0 0d       	add	r27, r0
    637c:	a1 1d       	adc	r26, r1
    637e:	62 1f       	adc	r22, r18
    6380:	73 9f       	mul	r23, r19
    6382:	b0 0d       	add	r27, r0
    6384:	a1 1d       	adc	r26, r1
    6386:	62 1f       	adc	r22, r18
    6388:	83 9f       	mul	r24, r19
    638a:	a0 0d       	add	r26, r0
    638c:	61 1d       	adc	r22, r1
    638e:	22 1f       	adc	r18, r18
    6390:	74 9f       	mul	r23, r20
    6392:	33 27       	eor	r19, r19
    6394:	a0 0d       	add	r26, r0
    6396:	61 1d       	adc	r22, r1
    6398:	23 1f       	adc	r18, r19
    639a:	84 9f       	mul	r24, r20
    639c:	60 0d       	add	r22, r0
    639e:	21 1d       	adc	r18, r1
    63a0:	82 2f       	mov	r24, r18
    63a2:	76 2f       	mov	r23, r22
    63a4:	6a 2f       	mov	r22, r26
    63a6:	11 24       	eor	r1, r1
    63a8:	9f 57       	subi	r25, 0x7F	; 127
    63aa:	50 40       	sbci	r21, 0x00	; 0
    63ac:	8a f0       	brmi	.+34     	; 0x63d0 <__mulsf3_pse+0x84>
    63ae:	e1 f0       	breq	.+56     	; 0x63e8 <__mulsf3_pse+0x9c>
    63b0:	88 23       	and	r24, r24
    63b2:	4a f0       	brmi	.+18     	; 0x63c6 <__mulsf3_pse+0x7a>
    63b4:	ee 0f       	add	r30, r30
    63b6:	ff 1f       	adc	r31, r31
    63b8:	bb 1f       	adc	r27, r27
    63ba:	66 1f       	adc	r22, r22
    63bc:	77 1f       	adc	r23, r23
    63be:	88 1f       	adc	r24, r24
    63c0:	91 50       	subi	r25, 0x01	; 1
    63c2:	50 40       	sbci	r21, 0x00	; 0
    63c4:	a9 f7       	brne	.-22     	; 0x63b0 <__mulsf3_pse+0x64>
    63c6:	9e 3f       	cpi	r25, 0xFE	; 254
    63c8:	51 05       	cpc	r21, r1
    63ca:	70 f0       	brcs	.+28     	; 0x63e8 <__mulsf3_pse+0x9c>
    63cc:	fb ce       	rjmp	.-522    	; 0x61c4 <__fp_inf>
    63ce:	a3 cf       	rjmp	.-186    	; 0x6316 <__fp_szero>
    63d0:	5f 3f       	cpi	r21, 0xFF	; 255
    63d2:	ec f3       	brlt	.-6      	; 0x63ce <__mulsf3_pse+0x82>
    63d4:	98 3e       	cpi	r25, 0xE8	; 232
    63d6:	dc f3       	brlt	.-10     	; 0x63ce <__mulsf3_pse+0x82>
    63d8:	86 95       	lsr	r24
    63da:	77 95       	ror	r23
    63dc:	67 95       	ror	r22
    63de:	b7 95       	ror	r27
    63e0:	f7 95       	ror	r31
    63e2:	e7 95       	ror	r30
    63e4:	9f 5f       	subi	r25, 0xFF	; 255
    63e6:	c1 f7       	brne	.-16     	; 0x63d8 <__mulsf3_pse+0x8c>
    63e8:	fe 2b       	or	r31, r30
    63ea:	88 0f       	add	r24, r24
    63ec:	91 1d       	adc	r25, r1
    63ee:	96 95       	lsr	r25
    63f0:	87 95       	ror	r24
    63f2:	97 f9       	bld	r25, 7
    63f4:	08 95       	ret

000063f6 <sin>:
    63f6:	9f 93       	push	r25
    63f8:	22 df       	rcall	.-444    	; 0x623e <__fp_rempio2>
    63fa:	0f 90       	pop	r0
    63fc:	07 fc       	sbrc	r0, 7
    63fe:	ee 5f       	subi	r30, 0xFE	; 254
    6400:	56 cf       	rjmp	.-340    	; 0x62ae <__fp_sinus>

00006402 <square>:
    6402:	9b 01       	movw	r18, r22
    6404:	ac 01       	movw	r20, r24
    6406:	94 cf       	rjmp	.-216    	; 0x6330 <__mulsf3>

00006408 <__fp_mpack>:
    6408:	9f 3f       	cpi	r25, 0xFF	; 255
    640a:	31 f0       	breq	.+12     	; 0x6418 <__fp_mpack_finite+0xc>

0000640c <__fp_mpack_finite>:
    640c:	91 50       	subi	r25, 0x01	; 1
    640e:	20 f4       	brcc	.+8      	; 0x6418 <__fp_mpack_finite+0xc>
    6410:	87 95       	ror	r24
    6412:	77 95       	ror	r23
    6414:	67 95       	ror	r22
    6416:	b7 95       	ror	r27
    6418:	88 0f       	add	r24, r24
    641a:	91 1d       	adc	r25, r1
    641c:	96 95       	lsr	r25
    641e:	87 95       	ror	r24
    6420:	97 f9       	bld	r25, 7
    6422:	08 95       	ret

00006424 <__fp_powsodd>:
    6424:	9f 93       	push	r25
    6426:	8f 93       	push	r24
    6428:	7f 93       	push	r23
    642a:	6f 93       	push	r22
    642c:	ff 93       	push	r31
    642e:	ef 93       	push	r30
    6430:	9b 01       	movw	r18, r22
    6432:	ac 01       	movw	r20, r24
    6434:	7d df       	rcall	.-262    	; 0x6330 <__mulsf3>
    6436:	ef 91       	pop	r30
    6438:	ff 91       	pop	r31
    643a:	cd de       	rcall	.-614    	; 0x61d6 <__fp_powser>
    643c:	2f 91       	pop	r18
    643e:	3f 91       	pop	r19
    6440:	4f 91       	pop	r20
    6442:	5f 91       	pop	r21
    6444:	75 cf       	rjmp	.-278    	; 0x6330 <__mulsf3>

00006446 <__mulsi3>:
    6446:	62 9f       	mul	r22, r18
    6448:	d0 01       	movw	r26, r0
    644a:	73 9f       	mul	r23, r19
    644c:	f0 01       	movw	r30, r0
    644e:	82 9f       	mul	r24, r18
    6450:	e0 0d       	add	r30, r0
    6452:	f1 1d       	adc	r31, r1
    6454:	64 9f       	mul	r22, r20
    6456:	e0 0d       	add	r30, r0
    6458:	f1 1d       	adc	r31, r1
    645a:	92 9f       	mul	r25, r18
    645c:	f0 0d       	add	r31, r0
    645e:	83 9f       	mul	r24, r19
    6460:	f0 0d       	add	r31, r0
    6462:	74 9f       	mul	r23, r20
    6464:	f0 0d       	add	r31, r0
    6466:	65 9f       	mul	r22, r21
    6468:	f0 0d       	add	r31, r0
    646a:	99 27       	eor	r25, r25
    646c:	72 9f       	mul	r23, r18
    646e:	b0 0d       	add	r27, r0
    6470:	e1 1d       	adc	r30, r1
    6472:	f9 1f       	adc	r31, r25
    6474:	63 9f       	mul	r22, r19
    6476:	b0 0d       	add	r27, r0
    6478:	e1 1d       	adc	r30, r1
    647a:	f9 1f       	adc	r31, r25
    647c:	bd 01       	movw	r22, r26
    647e:	cf 01       	movw	r24, r30
    6480:	11 24       	eor	r1, r1
    6482:	08 95       	ret

00006484 <__udivmodhi4>:
    6484:	aa 1b       	sub	r26, r26
    6486:	bb 1b       	sub	r27, r27
    6488:	51 e1       	ldi	r21, 0x11	; 17
    648a:	07 c0       	rjmp	.+14     	; 0x649a <__udivmodhi4_ep>

0000648c <__udivmodhi4_loop>:
    648c:	aa 1f       	adc	r26, r26
    648e:	bb 1f       	adc	r27, r27
    6490:	a6 17       	cp	r26, r22
    6492:	b7 07       	cpc	r27, r23
    6494:	10 f0       	brcs	.+4      	; 0x649a <__udivmodhi4_ep>
    6496:	a6 1b       	sub	r26, r22
    6498:	b7 0b       	sbc	r27, r23

0000649a <__udivmodhi4_ep>:
    649a:	88 1f       	adc	r24, r24
    649c:	99 1f       	adc	r25, r25
    649e:	5a 95       	dec	r21
    64a0:	a9 f7       	brne	.-22     	; 0x648c <__udivmodhi4_loop>
    64a2:	80 95       	com	r24
    64a4:	90 95       	com	r25
    64a6:	bc 01       	movw	r22, r24
    64a8:	cd 01       	movw	r24, r26
    64aa:	08 95       	ret

000064ac <__divmodhi4>:
    64ac:	97 fb       	bst	r25, 7
    64ae:	09 2e       	mov	r0, r25
    64b0:	07 26       	eor	r0, r23
    64b2:	0a d0       	rcall	.+20     	; 0x64c8 <__divmodhi4_neg1>
    64b4:	77 fd       	sbrc	r23, 7
    64b6:	04 d0       	rcall	.+8      	; 0x64c0 <__divmodhi4_neg2>
    64b8:	e5 df       	rcall	.-54     	; 0x6484 <__udivmodhi4>
    64ba:	06 d0       	rcall	.+12     	; 0x64c8 <__divmodhi4_neg1>
    64bc:	00 20       	and	r0, r0
    64be:	1a f4       	brpl	.+6      	; 0x64c6 <__divmodhi4_exit>

000064c0 <__divmodhi4_neg2>:
    64c0:	70 95       	com	r23
    64c2:	61 95       	neg	r22
    64c4:	7f 4f       	sbci	r23, 0xFF	; 255

000064c6 <__divmodhi4_exit>:
    64c6:	08 95       	ret

000064c8 <__divmodhi4_neg1>:
    64c8:	f6 f7       	brtc	.-4      	; 0x64c6 <__divmodhi4_exit>
    64ca:	90 95       	com	r25
    64cc:	81 95       	neg	r24
    64ce:	9f 4f       	sbci	r25, 0xFF	; 255
    64d0:	08 95       	ret

000064d2 <do_rand>:
    64d2:	af 92       	push	r10
    64d4:	bf 92       	push	r11
    64d6:	cf 92       	push	r12
    64d8:	df 92       	push	r13
    64da:	ef 92       	push	r14
    64dc:	ff 92       	push	r15
    64de:	0f 93       	push	r16
    64e0:	1f 93       	push	r17
    64e2:	cf 93       	push	r28
    64e4:	df 93       	push	r29
    64e6:	ec 01       	movw	r28, r24
    64e8:	68 81       	ld	r22, Y
    64ea:	79 81       	ldd	r23, Y+1	; 0x01
    64ec:	8a 81       	ldd	r24, Y+2	; 0x02
    64ee:	9b 81       	ldd	r25, Y+3	; 0x03
    64f0:	61 15       	cp	r22, r1
    64f2:	71 05       	cpc	r23, r1
    64f4:	81 05       	cpc	r24, r1
    64f6:	91 05       	cpc	r25, r1
    64f8:	21 f4       	brne	.+8      	; 0x6502 <do_rand+0x30>
    64fa:	64 e2       	ldi	r22, 0x24	; 36
    64fc:	79 ed       	ldi	r23, 0xD9	; 217
    64fe:	8b e5       	ldi	r24, 0x5B	; 91
    6500:	97 e0       	ldi	r25, 0x07	; 7
    6502:	2d e1       	ldi	r18, 0x1D	; 29
    6504:	33 ef       	ldi	r19, 0xF3	; 243
    6506:	41 e0       	ldi	r20, 0x01	; 1
    6508:	50 e0       	ldi	r21, 0x00	; 0
    650a:	0e 94 f8 32 	call	0x65f0	; 0x65f0 <__divmodsi4>
    650e:	79 01       	movw	r14, r18
    6510:	8a 01       	movw	r16, r20
    6512:	27 ea       	ldi	r18, 0xA7	; 167
    6514:	31 e4       	ldi	r19, 0x41	; 65
    6516:	40 e0       	ldi	r20, 0x00	; 0
    6518:	50 e0       	ldi	r21, 0x00	; 0
    651a:	0e 94 23 32 	call	0x6446	; 0x6446 <__mulsi3>
    651e:	5b 01       	movw	r10, r22
    6520:	6c 01       	movw	r12, r24
    6522:	c8 01       	movw	r24, r16
    6524:	b7 01       	movw	r22, r14
    6526:	2c ee       	ldi	r18, 0xEC	; 236
    6528:	34 ef       	ldi	r19, 0xF4	; 244
    652a:	4f ef       	ldi	r20, 0xFF	; 255
    652c:	5f ef       	ldi	r21, 0xFF	; 255
    652e:	0e 94 23 32 	call	0x6446	; 0x6446 <__mulsi3>
    6532:	6a 0d       	add	r22, r10
    6534:	7b 1d       	adc	r23, r11
    6536:	8c 1d       	adc	r24, r12
    6538:	9d 1d       	adc	r25, r13
    653a:	97 ff       	sbrs	r25, 7
    653c:	04 c0       	rjmp	.+8      	; 0x6546 <do_rand+0x74>
    653e:	61 50       	subi	r22, 0x01	; 1
    6540:	70 40       	sbci	r23, 0x00	; 0
    6542:	80 40       	sbci	r24, 0x00	; 0
    6544:	90 48       	sbci	r25, 0x80	; 128
    6546:	68 83       	st	Y, r22
    6548:	79 83       	std	Y+1, r23	; 0x01
    654a:	8a 83       	std	Y+2, r24	; 0x02
    654c:	9b 83       	std	Y+3, r25	; 0x03
    654e:	7f 77       	andi	r23, 0x7F	; 127
    6550:	cb 01       	movw	r24, r22
    6552:	df 91       	pop	r29
    6554:	cf 91       	pop	r28
    6556:	1f 91       	pop	r17
    6558:	0f 91       	pop	r16
    655a:	ff 90       	pop	r15
    655c:	ef 90       	pop	r14
    655e:	df 90       	pop	r13
    6560:	cf 90       	pop	r12
    6562:	bf 90       	pop	r11
    6564:	af 90       	pop	r10
    6566:	08 95       	ret

00006568 <rand_r>:
    6568:	0e 94 69 32 	call	0x64d2	; 0x64d2 <do_rand>
    656c:	08 95       	ret

0000656e <rand>:
    656e:	89 e1       	ldi	r24, 0x19	; 25
    6570:	92 e0       	ldi	r25, 0x02	; 2
    6572:	0e 94 69 32 	call	0x64d2	; 0x64d2 <do_rand>
    6576:	08 95       	ret

00006578 <srand>:
    6578:	a0 e0       	ldi	r26, 0x00	; 0
    657a:	b0 e0       	ldi	r27, 0x00	; 0
    657c:	80 93 19 02 	sts	0x0219, r24
    6580:	90 93 1a 02 	sts	0x021A, r25
    6584:	a0 93 1b 02 	sts	0x021B, r26
    6588:	b0 93 1c 02 	sts	0x021C, r27
    658c:	08 95       	ret

0000658e <__eerd_byte_m2560>:
    658e:	f9 99       	sbic	0x1f, 1	; 31
    6590:	fe cf       	rjmp	.-4      	; 0x658e <__eerd_byte_m2560>
    6592:	92 bd       	out	0x22, r25	; 34
    6594:	81 bd       	out	0x21, r24	; 33
    6596:	f8 9a       	sbi	0x1f, 0	; 31
    6598:	99 27       	eor	r25, r25
    659a:	80 b5       	in	r24, 0x20	; 32
    659c:	08 95       	ret

0000659e <__eerd_word_m2560>:
    659e:	a8 e1       	ldi	r26, 0x18	; 24
    65a0:	b0 e0       	ldi	r27, 0x00	; 0
    65a2:	42 e0       	ldi	r20, 0x02	; 2
    65a4:	50 e0       	ldi	r21, 0x00	; 0
    65a6:	0c 94 ea 32 	jmp	0x65d4	; 0x65d4 <__eerd_blraw_m2560>

000065aa <__eewr_byte_m2560>:
    65aa:	26 2f       	mov	r18, r22

000065ac <__eewr_r18_m2560>:
    65ac:	f9 99       	sbic	0x1f, 1	; 31
    65ae:	fe cf       	rjmp	.-4      	; 0x65ac <__eewr_r18_m2560>
    65b0:	1f ba       	out	0x1f, r1	; 31
    65b2:	92 bd       	out	0x22, r25	; 34
    65b4:	81 bd       	out	0x21, r24	; 33
    65b6:	20 bd       	out	0x20, r18	; 32
    65b8:	0f b6       	in	r0, 0x3f	; 63
    65ba:	f8 94       	cli
    65bc:	fa 9a       	sbi	0x1f, 2	; 31
    65be:	f9 9a       	sbi	0x1f, 1	; 31
    65c0:	0f be       	out	0x3f, r0	; 63
    65c2:	01 96       	adiw	r24, 0x01	; 1
    65c4:	08 95       	ret

000065c6 <__eewr_word_m2560>:
    65c6:	0e 94 d5 32 	call	0x65aa	; 0x65aa <__eewr_byte_m2560>
    65ca:	27 2f       	mov	r18, r23
    65cc:	0c 94 d6 32 	jmp	0x65ac	; 0x65ac <__eewr_r18_m2560>

000065d0 <__eerd_block_m2560>:
    65d0:	dc 01       	movw	r26, r24
    65d2:	cb 01       	movw	r24, r22

000065d4 <__eerd_blraw_m2560>:
    65d4:	fc 01       	movw	r30, r24
    65d6:	f9 99       	sbic	0x1f, 1	; 31
    65d8:	fe cf       	rjmp	.-4      	; 0x65d6 <__eerd_blraw_m2560+0x2>
    65da:	06 c0       	rjmp	.+12     	; 0x65e8 <__eerd_blraw_m2560+0x14>
    65dc:	f2 bd       	out	0x22, r31	; 34
    65de:	e1 bd       	out	0x21, r30	; 33
    65e0:	f8 9a       	sbi	0x1f, 0	; 31
    65e2:	31 96       	adiw	r30, 0x01	; 1
    65e4:	00 b4       	in	r0, 0x20	; 32
    65e6:	0d 92       	st	X+, r0
    65e8:	41 50       	subi	r20, 0x01	; 1
    65ea:	50 40       	sbci	r21, 0x00	; 0
    65ec:	b8 f7       	brcc	.-18     	; 0x65dc <__eerd_blraw_m2560+0x8>
    65ee:	08 95       	ret

000065f0 <__divmodsi4>:
    65f0:	97 fb       	bst	r25, 7
    65f2:	09 2e       	mov	r0, r25
    65f4:	05 26       	eor	r0, r21
    65f6:	0e d0       	rcall	.+28     	; 0x6614 <__divmodsi4_neg1>
    65f8:	57 fd       	sbrc	r21, 7
    65fa:	04 d0       	rcall	.+8      	; 0x6604 <__divmodsi4_neg2>
    65fc:	14 d0       	rcall	.+40     	; 0x6626 <__udivmodsi4>
    65fe:	0a d0       	rcall	.+20     	; 0x6614 <__divmodsi4_neg1>
    6600:	00 1c       	adc	r0, r0
    6602:	38 f4       	brcc	.+14     	; 0x6612 <__divmodsi4_exit>

00006604 <__divmodsi4_neg2>:
    6604:	50 95       	com	r21
    6606:	40 95       	com	r20
    6608:	30 95       	com	r19
    660a:	21 95       	neg	r18
    660c:	3f 4f       	sbci	r19, 0xFF	; 255
    660e:	4f 4f       	sbci	r20, 0xFF	; 255
    6610:	5f 4f       	sbci	r21, 0xFF	; 255

00006612 <__divmodsi4_exit>:
    6612:	08 95       	ret

00006614 <__divmodsi4_neg1>:
    6614:	f6 f7       	brtc	.-4      	; 0x6612 <__divmodsi4_exit>
    6616:	90 95       	com	r25
    6618:	80 95       	com	r24
    661a:	70 95       	com	r23
    661c:	61 95       	neg	r22
    661e:	7f 4f       	sbci	r23, 0xFF	; 255
    6620:	8f 4f       	sbci	r24, 0xFF	; 255
    6622:	9f 4f       	sbci	r25, 0xFF	; 255
    6624:	08 95       	ret

00006626 <__udivmodsi4>:
    6626:	a1 e2       	ldi	r26, 0x21	; 33
    6628:	1a 2e       	mov	r1, r26
    662a:	aa 1b       	sub	r26, r26
    662c:	bb 1b       	sub	r27, r27
    662e:	fd 01       	movw	r30, r26
    6630:	0d c0       	rjmp	.+26     	; 0x664c <__udivmodsi4_ep>

00006632 <__udivmodsi4_loop>:
    6632:	aa 1f       	adc	r26, r26
    6634:	bb 1f       	adc	r27, r27
    6636:	ee 1f       	adc	r30, r30
    6638:	ff 1f       	adc	r31, r31
    663a:	a2 17       	cp	r26, r18
    663c:	b3 07       	cpc	r27, r19
    663e:	e4 07       	cpc	r30, r20
    6640:	f5 07       	cpc	r31, r21
    6642:	20 f0       	brcs	.+8      	; 0x664c <__udivmodsi4_ep>
    6644:	a2 1b       	sub	r26, r18
    6646:	b3 0b       	sbc	r27, r19
    6648:	e4 0b       	sbc	r30, r20
    664a:	f5 0b       	sbc	r31, r21

0000664c <__udivmodsi4_ep>:
    664c:	66 1f       	adc	r22, r22
    664e:	77 1f       	adc	r23, r23
    6650:	88 1f       	adc	r24, r24
    6652:	99 1f       	adc	r25, r25
    6654:	1a 94       	dec	r1
    6656:	69 f7       	brne	.-38     	; 0x6632 <__udivmodsi4_loop>
    6658:	60 95       	com	r22
    665a:	70 95       	com	r23
    665c:	80 95       	com	r24
    665e:	90 95       	com	r25
    6660:	9b 01       	movw	r18, r22
    6662:	ac 01       	movw	r20, r24
    6664:	bd 01       	movw	r22, r26
    6666:	cf 01       	movw	r24, r30
    6668:	08 95       	ret

0000666a <_exit>:
    666a:	ff cf       	rjmp	.-2      	; 0x666a <_exit>
