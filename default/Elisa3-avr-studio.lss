
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  0000bcb6  0000bd4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000bcb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000871  0080021a  0080021a  0000bd64  2**0
                  ALLOC
  3 .debug_aranges 000006b0  00000000  00000000  0000bd64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002685  00000000  00000000  0000c414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000738b  00000000  00000000  0000ea99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000152e  00000000  00000000  00015e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000a70e  00000000  00000000  00017352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b20  00000000  00000000  00021a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000226a  00000000  00000000  00022580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001926  00000000  00000000  000247ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000012f0  00000000  00000000  00026110  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	}
	for(i=0; i<(num-1); i++) {
		data[i] = i2c_readAck();								// read one byte at a time
	}
	data[i] = i2c_readNak();									// read last byte sending NACK
	i2c_stop();	
       0:	cc c0       	rjmp	.+408    	; 0x19a <__ctors_end>
	
		if(SPSR & _BV(SPIF)) {
			return;
		}
	}
}
       2:	00 00       	nop
{
    mirf_CSN_lo;
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    SPI_ReadWrite_Block(value,value,len);
    mirf_CSN_hi;
}
       4:	ea c0       	rjmp	.+468    	; 0x1da <__bad_interrupt>

		}

}

unsigned char ir_remote_get_check(void) {
       6:	00 00       	nop
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
       8:	e8 c0       	rjmp	.+464    	; 0x1da <__bad_interrupt>
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
       a:	00 00       	nop



}

void initUsart1() {
       c:	e6 c0       	rjmp	.+460    	; 0x1da <__bad_interrupt>
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0


}

signed int cast_speed(signed int vel) {
       e:	00 00       	nop
	} else {
		return 0;
	}


}
      10:	e4 c0       	rjmp	.+456    	; 0x1da <__bad_interrupt>
	OCR1B = pwm_green;
	OCR1C = pwm_blue;

}

void toggleBlueLed() {
      12:	00 00       	nop

	}	
	
}

void readMagXYZ(void) {
      14:	e2 c0       	rjmp	.+452    	; 0x1da <__bad_interrupt>
}

void resetMagCalib() {
	uint8_t temp[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
	eeprom_update_block(temp, (uint8_t*) MAG_CALIB_CHECK_ADDRESS, 8);
}
      16:	00 00       	nop


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}
      18:	e0 c0       	rjmp	.+448    	; 0x1da <__bad_interrupt>
      1a:	00 00       	nop
      1c:	de c0       	rjmp	.+444    	; 0x1da <__bad_interrupt>
      1e:	00 00       	nop
      20:	dc c0       	rjmp	.+440    	; 0x1da <__bad_interrupt>
      22:	00 00       	nop
      24:	da c0       	rjmp	.+436    	; 0x1da <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__vector_10>
      2c:	d6 c0       	rjmp	.+428    	; 0x1da <__bad_interrupt>
      2e:	00 00       	nop
      30:	d4 c0       	rjmp	.+424    	; 0x1da <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__vector_13>
      38:	d0 c0       	rjmp	.+416    	; 0x1da <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 62 1f 	jmp	0x3ec4	; 0x3ec4 <__vector_15>
      40:	cc c0       	rjmp	.+408    	; 0x1da <__bad_interrupt>
      42:	00 00       	nop
      44:	ca c0       	rjmp	.+404    	; 0x1da <__bad_interrupt>
      46:	00 00       	nop
      48:	c8 c0       	rjmp	.+400    	; 0x1da <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c6 c0       	rjmp	.+396    	; 0x1da <__bad_interrupt>
      4e:	00 00       	nop
      50:	c4 c0       	rjmp	.+392    	; 0x1da <__bad_interrupt>
      52:	00 00       	nop
      54:	c2 c0       	rjmp	.+388    	; 0x1da <__bad_interrupt>
      56:	00 00       	nop
      58:	c0 c0       	rjmp	.+384    	; 0x1da <__bad_interrupt>
      5a:	00 00       	nop
      5c:	be c0       	rjmp	.+380    	; 0x1da <__bad_interrupt>
      5e:	00 00       	nop
      60:	bc c0       	rjmp	.+376    	; 0x1da <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 9c 1e 	jmp	0x3d38	; 0x3d38 <__vector_25>
      68:	b8 c0       	rjmp	.+368    	; 0x1da <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b6 c0       	rjmp	.+364    	; 0x1da <__bad_interrupt>
      6e:	00 00       	nop
      70:	b4 c0       	rjmp	.+360    	; 0x1da <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__vector_29>
      78:	b0 c0       	rjmp	.+352    	; 0x1da <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ae c0       	rjmp	.+348    	; 0x1da <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 cf 32 	jmp	0x659e	; 0x659e <__vector_32>
      84:	0c 94 e5 32 	jmp	0x65ca	; 0x65ca <__vector_33>
      88:	a8 c0       	rjmp	.+336    	; 0x1da <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c 94 38 32 	jmp	0x6470	; 0x6470 <__vector_35>
      90:	a4 c0       	rjmp	.+328    	; 0x1da <__bad_interrupt>
      92:	00 00       	nop
      94:	a2 c0       	rjmp	.+324    	; 0x1da <__bad_interrupt>
      96:	00 00       	nop
      98:	a0 c0       	rjmp	.+320    	; 0x1da <__bad_interrupt>
      9a:	00 00       	nop
      9c:	9e c0       	rjmp	.+316    	; 0x1da <__bad_interrupt>
      9e:	00 00       	nop
      a0:	9c c0       	rjmp	.+312    	; 0x1da <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9a c0       	rjmp	.+308    	; 0x1da <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 0c 32 	jmp	0x6418	; 0x6418 <__vector_42>
      ac:	0c 94 22 32 	jmp	0x6444	; 0x6444 <__vector_43>
      b0:	94 c0       	rjmp	.+296    	; 0x1da <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0c 94 6b 31 	jmp	0x62d6	; 0x62d6 <__vector_45>
      b8:	90 c0       	rjmp	.+288    	; 0x1da <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8e c0       	rjmp	.+284    	; 0x1da <__bad_interrupt>
      be:	00 00       	nop
      c0:	8c c0       	rjmp	.+280    	; 0x1da <__bad_interrupt>
      c2:	00 00       	nop
      c4:	8a c0       	rjmp	.+276    	; 0x1da <__bad_interrupt>
      c6:	00 00       	nop
      c8:	88 c0       	rjmp	.+272    	; 0x1da <__bad_interrupt>
      ca:	00 00       	nop
      cc:	86 c0       	rjmp	.+268    	; 0x1da <__bad_interrupt>
      ce:	00 00       	nop
      d0:	84 c0       	rjmp	.+264    	; 0x1da <__bad_interrupt>
      d2:	00 00       	nop
      d4:	82 c0       	rjmp	.+260    	; 0x1da <__bad_interrupt>
      d6:	00 00       	nop
      d8:	80 c0       	rjmp	.+256    	; 0x1da <__bad_interrupt>
      da:	00 00       	nop
      dc:	7e c0       	rjmp	.+252    	; 0x1da <__bad_interrupt>
      de:	00 00       	nop
      e0:	7c c0       	rjmp	.+248    	; 0x1da <__bad_interrupt>
      e2:	00 00       	nop
      e4:	87 1a       	sub	r8, r23
      e6:	72 1a       	sub	r7, r18
      e8:	49 1a       	sub	r4, r25
      ea:	2e 1a       	sub	r2, r30
      ec:	09 1a       	sub	r0, r25
      ee:	d3 19       	sub	r29, r3
      f0:	a5 19       	sub	r26, r5
      f2:	e9 19       	sub	r30, r9
      f4:	72 19       	sub	r23, r2
      f6:	56 19       	sub	r21, r6
      f8:	f6 18       	sub	r15, r6
      fa:	f6 18       	sub	r15, r6
      fc:	f6 18       	sub	r15, r6
      fe:	f6 18       	sub	r15, r6
     100:	f6 18       	sub	r15, r6
     102:	f6 18       	sub	r15, r6
     104:	4a 19       	sub	r20, r10
     106:	3f 19       	sub	r19, r15
     108:	f6 18       	sub	r15, r6
     10a:	f6 18       	sub	r15, r6
     10c:	f6 18       	sub	r15, r6
     10e:	f6 18       	sub	r15, r6
     110:	f6 18       	sub	r15, r6
     112:	f6 18       	sub	r15, r6
     114:	f6 18       	sub	r15, r6
     116:	f6 18       	sub	r15, r6
     118:	f6 18       	sub	r15, r6
     11a:	f6 18       	sub	r15, r6
     11c:	f6 18       	sub	r15, r6
     11e:	f6 18       	sub	r15, r6
     120:	72 19       	sub	r23, r2
     122:	49 1a       	sub	r4, r25
     124:	33 19       	sub	r19, r3
     126:	26 19       	sub	r18, r6
     128:	f6 18       	sub	r15, r6
     12a:	f6 18       	sub	r15, r6
     12c:	f6 18       	sub	r15, r6
     12e:	f6 18       	sub	r15, r6
     130:	f6 18       	sub	r15, r6
     132:	f6 18       	sub	r15, r6
     134:	f6 18       	sub	r15, r6
     136:	f6 18       	sub	r15, r6
     138:	f6 18       	sub	r15, r6
     13a:	f6 18       	sub	r15, r6
     13c:	f6 18       	sub	r15, r6
     13e:	f6 18       	sub	r15, r6
     140:	09 1a       	sub	r0, r25
     142:	a5 19       	sub	r26, r5
     144:	f6 18       	sub	r15, r6
     146:	f6 18       	sub	r15, r6
     148:	87 1a       	sub	r8, r23
     14a:	d3 19       	sub	r29, r3
     14c:	16 19       	sub	r17, r6
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e6 eb       	ldi	r30, 0xB6	; 182
     1b2:	fc eb       	ldi	r31, 0xBC	; 188
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	aa 31       	cpi	r26, 0x1A	; 26
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	1a e0       	ldi	r17, 0x0A	; 10
     1c6:	aa e1       	ldi	r26, 0x1A	; 26
     1c8:	b2 e0       	ldi	r27, 0x02	; 2
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	ab 38       	cpi	r26, 0x8B	; 139
     1d0:	b1 07       	cpc	r27, r17
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	e7 d3       	rcall	.+1998   	; 0x9a4 <main>
     1d6:	0c 94 59 5e 	jmp	0xbcb2	; 0xbcb2 <_exit>

000001da <__bad_interrupt>:
     1da:	12 cf       	rjmp	.-476    	; 0x0 <__vectors>

000001dc <LSM6DS3US_CheckManufacturerId>:
//-----------------------------------------------------------------------------
// Common
//-----------------------------------------------------------------------------

uint8_t LSM6DS3US_CheckManufacturerId(void)
{
     1dc:	1f 93       	push	r17
  uint8_t id[1] = {0x00u};
     1de:	10 e0       	ldi	r17, 0x00	; 0
//-----------------------------------------------------------------------------

uint8_t LSM6DS3US_I2C_ReadFromAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	uint8_t i = 0;
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
     1e0:	86 ed       	ldi	r24, 0xD6	; 214
     1e2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	if(ret) {
     1e6:	88 23       	and	r24, r24
     1e8:	31 f0       	breq	.+12     	; 0x1f6 <LSM6DS3US_CheckManufacturerId+0x1a>
	}
	for(i=0; i<(num-1); i++) {
		data[i] = i2c_readAck();								// read one byte at a time
	}
	data[i] = i2c_readNak();									// read last byte sending NACK
	i2c_stop();	
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	19 36       	cpi	r17, 0x69	; 105
     1ee:	09 f0       	breq	.+2      	; 0x1f2 <LSM6DS3US_CheckManufacturerId+0x16>
     1f0:	81 e0       	ldi	r24, 0x01	; 1
  {
    return 1;
  }

  return 0;
}
     1f2:	1f 91       	pop	r17
     1f4:	08 95       	ret
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
	if(ret) {
		return 1;
	}
	ret = i2c_write(reg);											// sends address to read from (X LSB)
     1f6:	8f e0       	ldi	r24, 0x0F	; 15
     1f8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	if(ret) {
     1fc:	88 23       	and	r24, r24
     1fe:	a9 f7       	brne	.-22     	; 0x1ea <LSM6DS3US_CheckManufacturerId+0xe>
		return 1;
	}
	ret = i2c_rep_start(addr+I2C_READ);						// set device address and read mode
     200:	87 ed       	ldi	r24, 0xD7	; 215
     202:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <i2c_rep_start>
	if(ret) {
     206:	88 23       	and	r24, r24
     208:	81 f7       	brne	.-32     	; 0x1ea <LSM6DS3US_CheckManufacturerId+0xe>
		return 1;
	}
	for(i=0; i<(num-1); i++) {
		data[i] = i2c_readAck();								// read one byte at a time
	}
	data[i] = i2c_readNak();									// read last byte sending NACK
     20a:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <i2c_readNak>
     20e:	18 2f       	mov	r17, r24
	i2c_stop();	
     210:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
     214:	ea cf       	rjmp	.-44     	; 0x1ea <LSM6DS3US_CheckManufacturerId+0xe>

00000216 <LSM6DS3US_ReadAll>:

void LSM6DS3US_ReadLIS2ML(int8_t* data) {
	LSM6DS3US_I2C_ReadFromAddress(SLAVE_ADDRESS, SENSORHUB1_REG_ADDRESS, (uint8_t*)data, 6u);
}

uint8_t LSM6DS3US_ReadAll(int8_t* data) {
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
	return LSM6DS3US_I2C_ReadFromAddress(SLAVE_ADDRESS, OUTX_L_G_REG_ADDRESS, (uint8_t *)data, 18);
     21a:	ec 01       	movw	r28, r24
//-----------------------------------------------------------------------------

uint8_t LSM6DS3US_I2C_ReadFromAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	uint8_t i = 0;
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
     21c:	86 ed       	ldi	r24, 0xD6	; 214
     21e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	if(ret) {
     222:	88 23       	and	r24, r24
     224:	21 f0       	breq	.+8      	; 0x22e <LSM6DS3US_ReadAll+0x18>
	}
	for(i=0; i<(num-1); i++) {
		data[i] = i2c_readAck();								// read one byte at a time
	}
	data[i] = i2c_readNak();									// read last byte sending NACK
	i2c_stop();	
     226:	81 e0       	ldi	r24, 0x01	; 1
	LSM6DS3US_I2C_ReadFromAddress(SLAVE_ADDRESS, SENSORHUB1_REG_ADDRESS, (uint8_t*)data, 6u);
}

uint8_t LSM6DS3US_ReadAll(int8_t* data) {
	return LSM6DS3US_I2C_ReadFromAddress(SLAVE_ADDRESS, OUTX_L_G_REG_ADDRESS, (uint8_t *)data, 18);
}
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
	if(ret) {
		return 1;
	}
	ret = i2c_write(reg);											// sends address to read from (X LSB)
     22e:	82 e2       	ldi	r24, 0x22	; 34
     230:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	if(ret) {
     234:	88 23       	and	r24, r24
     236:	b9 f7       	brne	.-18     	; 0x226 <LSM6DS3US_ReadAll+0x10>
		return 1;
	}
	ret = i2c_rep_start(addr+I2C_READ);						// set device address and read mode
     238:	87 ed       	ldi	r24, 0xD7	; 215
     23a:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <i2c_rep_start>
	if(ret) {
     23e:	88 23       	and	r24, r24
     240:	91 f7       	brne	.-28     	; 0x226 <LSM6DS3US_ReadAll+0x10>
		return 1;
	}
	for(i=0; i<(num-1); i++) {
		data[i] = i2c_readAck();								// read one byte at a time
     242:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     246:	88 83       	st	Y, r24
     248:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     24c:	89 83       	std	Y+1, r24	; 0x01
     24e:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     252:	8a 83       	std	Y+2, r24	; 0x02
     254:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     258:	8b 83       	std	Y+3, r24	; 0x03
     25a:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     25e:	8c 83       	std	Y+4, r24	; 0x04
     260:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     264:	8d 83       	std	Y+5, r24	; 0x05
     266:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     26a:	8e 83       	std	Y+6, r24	; 0x06
     26c:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     270:	8f 83       	std	Y+7, r24	; 0x07
     272:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     276:	88 87       	std	Y+8, r24	; 0x08
     278:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     27c:	89 87       	std	Y+9, r24	; 0x09
     27e:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     282:	8a 87       	std	Y+10, r24	; 0x0a
     284:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     288:	8b 87       	std	Y+11, r24	; 0x0b
     28a:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     28e:	8c 87       	std	Y+12, r24	; 0x0c
     290:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     294:	8d 87       	std	Y+13, r24	; 0x0d
     296:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     29a:	8e 87       	std	Y+14, r24	; 0x0e
     29c:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     2a0:	8f 87       	std	Y+15, r24	; 0x0f
     2a2:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
     2a6:	88 8b       	std	Y+16, r24	; 0x10
	}
	data[i] = i2c_readNak();									// read last byte sending NACK
     2a8:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <i2c_readNak>
     2ac:	89 8b       	std	Y+17, r24	; 0x11
	i2c_stop();	
     2ae:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	b9 cf       	rjmp	.-142    	; 0x228 <LSM6DS3US_ReadAll+0x12>

000002b6 <LSM6DS3US_InitAccelerometer>:
//-----------------------------------------------------------------------------
// Accelerometer
//-----------------------------------------------------------------------------

void LSM6DS3US_InitAccelerometer(void)
{
     2b6:	1f 93       	push	r17

//_____________________________________________________________________________

static void UpdateAccOutputDataRate(T_Acc_OutputDataRate rate)
{
  uint8_t data[1] = {0x00u};
     2b8:	10 e0       	ldi	r17, 0x00	; 0
//-----------------------------------------------------------------------------

uint8_t LSM6DS3US_I2C_ReadFromAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	uint8_t i = 0;
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
     2ba:	86 ed       	ldi	r24, 0xD6	; 214
     2bc:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	if(ret) {
     2c0:	88 23       	and	r24, r24
     2c2:	79 f0       	breq	.+30     	; 0x2e2 <LSM6DS3US_InitAccelerometer+0x2c>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     2c4:	86 ed       	ldi	r24, 0xD6	; 214
     2c6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     2ca:	80 e1       	ldi	r24, 0x10	; 16
     2cc:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     2d0:	1f 70       	andi	r17, 0x0F	; 15
     2d2:	81 2f       	mov	r24, r17
     2d4:	80 64       	ori	r24, 0x40	; 64
     2d6:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     2da:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
//-----------------------------------------------------------------------------

void LSM6DS3US_InitAccelerometer(void)
{
  UpdateAccOutputDataRate(E_Acc_OutputDataRate_104Hz);
}
     2de:	1f 91       	pop	r17
     2e0:	08 95       	ret
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
	if(ret) {
		return 1;
	}
	ret = i2c_write(reg);											// sends address to read from (X LSB)
     2e2:	80 e1       	ldi	r24, 0x10	; 16
     2e4:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	if(ret) {
     2e8:	88 23       	and	r24, r24
     2ea:	61 f7       	brne	.-40     	; 0x2c4 <LSM6DS3US_InitAccelerometer+0xe>
		return 1;
	}
	ret = i2c_rep_start(addr+I2C_READ);						// set device address and read mode
     2ec:	87 ed       	ldi	r24, 0xD7	; 215
     2ee:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <i2c_rep_start>
	if(ret) {
     2f2:	88 23       	and	r24, r24
     2f4:	39 f7       	brne	.-50     	; 0x2c4 <LSM6DS3US_InitAccelerometer+0xe>
		return 1;
	}
	for(i=0; i<(num-1); i++) {
		data[i] = i2c_readAck();								// read one byte at a time
	}
	data[i] = i2c_readNak();									// read last byte sending NACK
     2f6:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <i2c_readNak>
     2fa:	18 2f       	mov	r17, r24
	i2c_stop();	
     2fc:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
     300:	e1 cf       	rjmp	.-62     	; 0x2c4 <LSM6DS3US_InitAccelerometer+0xe>

00000302 <LSM6DS3US_InitLIS2MLWithCal>:
	data[0] = 0x09; // Enable internal pull-up on SDx/SCx lines, Sensor hub trigger signal is XL Data-Ready, Enable auxiliary I2C master
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS, MASTER_CONFIG_REG_ADDRESS, data, 1);

}

void LSM6DS3US_InitLIS2MLWithCal(void) {
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     306:	86 ed       	ldi	r24, 0xD6	; 214
     308:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     30c:	80 e1       	ldi	r24, 0x10	; 16
     30e:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     318:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     31c:	86 ed       	ldi	r24, 0xD6	; 214
     31e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     328:	80 e8       	ldi	r24, 0x80	; 128
     32a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     32e:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     332:	86 ed       	ldi	r24, 0xD6	; 214
     334:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     33e:	8c e3       	ldi	r24, 0x3C	; 60
     340:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     344:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     348:	86 ed       	ldi	r24, 0xD6	; 214
     34a:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     354:	80 e6       	ldi	r24, 0x60	; 96
     356:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     35a:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     35e:	86 ed       	ldi	r24, 0xD6	; 214
     360:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     364:	8e e0       	ldi	r24, 0x0E	; 14
     366:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     36a:	8c e8       	ldi	r24, 0x8C	; 140
     36c:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     370:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     374:	86 ed       	ldi	r24, 0xD6	; 214
     376:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     37a:	84 e0       	ldi	r24, 0x04	; 4
     37c:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     380:	80 e1       	ldi	r24, 0x10	; 16
     382:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     386:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     38a:	86 ed       	ldi	r24, 0xD6	; 214
     38c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     390:	87 e0       	ldi	r24, 0x07	; 7
     392:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     396:	80 e2       	ldi	r24, 0x20	; 32
     398:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     39c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     3a0:	86 ed       	ldi	r24, 0xD6	; 214
     3a2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     3b2:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     3b6:	86 ed       	ldi	r24, 0xD6	; 214
     3b8:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     3bc:	89 e1       	ldi	r24, 0x19	; 25
     3be:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     3c2:	84 e0       	ldi	r24, 0x04	; 4
     3c4:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     3c8:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     3cc:	86 ed       	ldi	r24, 0xD6	; 214
     3ce:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     3d2:	8a e1       	ldi	r24, 0x1A	; 26
     3d4:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     3d8:	89 e0       	ldi	r24, 0x09	; 9
     3da:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     3de:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     3e2:	86 ed       	ldi	r24, 0xD6	; 214
     3e4:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     3e8:	80 e1       	ldi	r24, 0x10	; 16
     3ea:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     3ee:	80 e8       	ldi	r24, 0x80	; 128
     3f0:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     3f4:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
//-----------------------------------------------------------------------------

uint8_t LSM6DS3US_I2C_ReadFromAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	uint8_t i = 0;
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
     3f8:	86 ed       	ldi	r24, 0xD6	; 214
     3fa:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	if(ret) {
     3fe:	88 23       	and	r24, r24
     400:	09 f4       	brne	.+2      	; 0x404 <LSM6DS3US_InitLIS2MLWithCal+0x102>
     402:	06 c1       	rjmp	.+524    	; 0x610 <LSM6DS3US_InitLIS2MLWithCal+0x30e>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     404:	86 ed       	ldi	r24, 0xD6	; 214
     406:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     40a:	8a e1       	ldi	r24, 0x1A	; 26
     40c:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     410:	89 e0       	ldi	r24, 0x09	; 9
     412:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     416:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     41a:	86 ed       	ldi	r24, 0xD6	; 214
     41c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     420:	80 e1       	ldi	r24, 0x10	; 16
     422:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     426:	80 e8       	ldi	r24, 0x80	; 128
     428:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     42c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
//-----------------------------------------------------------------------------

uint8_t LSM6DS3US_I2C_ReadFromAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	uint8_t i = 0;
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
     430:	86 ed       	ldi	r24, 0xD6	; 214
     432:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	if(ret) {
     436:	88 23       	and	r24, r24
     438:	09 f4       	brne	.+2      	; 0x43c <LSM6DS3US_InitLIS2MLWithCal+0x13a>
     43a:	fe c0       	rjmp	.+508    	; 0x638 <LSM6DS3US_InitLIS2MLWithCal+0x336>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     43c:	86 ed       	ldi	r24, 0xD6	; 214
     43e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     442:	8a e1       	ldi	r24, 0x1A	; 26
     444:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     448:	89 e0       	ldi	r24, 0x09	; 9
     44a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     44e:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     452:	86 ed       	ldi	r24, 0xD6	; 214
     454:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     458:	80 e1       	ldi	r24, 0x10	; 16
     45a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     45e:	80 e8       	ldi	r24, 0x80	; 128
     460:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     464:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
//-----------------------------------------------------------------------------

uint8_t LSM6DS3US_I2C_ReadFromAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	uint8_t i = 0;
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
     468:	86 ed       	ldi	r24, 0xD6	; 214
     46a:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	if(ret) {
     46e:	88 23       	and	r24, r24
     470:	09 f4       	brne	.+2      	; 0x474 <LSM6DS3US_InitLIS2MLWithCal+0x172>
     472:	f6 c0       	rjmp	.+492    	; 0x660 <LSM6DS3US_InitLIS2MLWithCal+0x35e>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     474:	86 ed       	ldi	r24, 0xD6	; 214
     476:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     47a:	89 e1       	ldi	r24, 0x19	; 25
     47c:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     486:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     48a:	86 ed       	ldi	r24, 0xD6	; 214
     48c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     490:	8a e1       	ldi	r24, 0x1A	; 26
     492:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     49c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     4a0:	86 ed       	ldi	r24, 0xD6	; 214
     4a2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     4a6:	80 e1       	ldi	r24, 0x10	; 16
     4a8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     4b2:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     4b6:	86 ed       	ldi	r24, 0xD6	; 214
     4b8:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     4c2:	80 e8       	ldi	r24, 0x80	; 128
     4c4:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     4c8:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     4cc:	86 ed       	ldi	r24, 0xD6	; 214
     4ce:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     4d2:	82 e0       	ldi	r24, 0x02	; 2
     4d4:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     4d8:	8d e3       	ldi	r24, 0x3D	; 61
     4da:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     4de:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     4e2:	86 ed       	ldi	r24, 0xD6	; 214
     4e4:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     4e8:	83 e0       	ldi	r24, 0x03	; 3
     4ea:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     4ee:	88 e6       	ldi	r24, 0x68	; 104
     4f0:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     4f4:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     4f8:	86 ed       	ldi	r24, 0xD6	; 214
     4fa:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     4fe:	84 e0       	ldi	r24, 0x04	; 4
     500:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     504:	86 e0       	ldi	r24, 0x06	; 6
     506:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     50a:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	data[0] = 0xFF;
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFZ_H_REG_ADDRESS, data, 1); // Z offset value initialization
	data[0] = 0x6D;
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFZ_L_REG_ADDRESS, data, 1); // Z offset value initialization
*/
	data[0] = magOffset[0]>>8;
     50e:	00 91 56 03 	lds	r16, 0x0356
     512:	10 91 57 03 	lds	r17, 0x0357
     516:	01 2f       	mov	r16, r17
     518:	11 0f       	add	r17, r17
     51a:	11 0b       	sbc	r17, r17
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     51c:	86 ed       	ldi	r24, 0xD6	; 214
     51e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     522:	8e e2       	ldi	r24, 0x2E	; 46
     524:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     528:	80 2f       	mov	r24, r16
     52a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     52e:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	data[0] = 0x6D;
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFZ_L_REG_ADDRESS, data, 1); // Z offset value initialization
*/
	data[0] = magOffset[0]>>8;
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFX_H_REG_ADDRESS, data, 1); // X offset value initialization
	data[0] = magOffset[0]&0xFF;
     532:	10 91 56 03 	lds	r17, 0x0356
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     536:	86 ed       	ldi	r24, 0xD6	; 214
     538:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     53c:	8d e2       	ldi	r24, 0x2D	; 45
     53e:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     542:	81 2f       	mov	r24, r17
     544:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     548:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
*/
	data[0] = magOffset[0]>>8;
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFX_H_REG_ADDRESS, data, 1); // X offset value initialization
	data[0] = magOffset[0]&0xFF;
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFX_L_REG_ADDRESS, data, 1); // X offset value initialization
	data[0] = magOffset[1]>>8;
     54c:	00 91 58 03 	lds	r16, 0x0358
     550:	10 91 59 03 	lds	r17, 0x0359
     554:	01 2f       	mov	r16, r17
     556:	11 0f       	add	r17, r17
     558:	11 0b       	sbc	r17, r17
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     55a:	86 ed       	ldi	r24, 0xD6	; 214
     55c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     560:	80 e3       	ldi	r24, 0x30	; 48
     562:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     566:	80 2f       	mov	r24, r16
     568:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     56c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFX_H_REG_ADDRESS, data, 1); // X offset value initialization
	data[0] = magOffset[0]&0xFF;
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFX_L_REG_ADDRESS, data, 1); // X offset value initialization
	data[0] = magOffset[1]>>8;
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFY_H_REG_ADDRESS, data, 1); // Y offset value initialization
	data[0] = magOffset[1]&0xFF;
     570:	10 91 58 03 	lds	r17, 0x0358
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     574:	86 ed       	ldi	r24, 0xD6	; 214
     576:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     57a:	8f e2       	ldi	r24, 0x2F	; 47
     57c:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     580:	81 2f       	mov	r24, r17
     582:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     586:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFX_L_REG_ADDRESS, data, 1); // X offset value initialization
	data[0] = magOffset[1]>>8;
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFY_H_REG_ADDRESS, data, 1); // Y offset value initialization
	data[0] = magOffset[1]&0xFF;
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFY_L_REG_ADDRESS, data, 1); // Y offset value initialization
	data[0] = magOffset[2]>>8;
     58a:	00 91 5a 03 	lds	r16, 0x035A
     58e:	10 91 5b 03 	lds	r17, 0x035B
     592:	01 2f       	mov	r16, r17
     594:	11 0f       	add	r17, r17
     596:	11 0b       	sbc	r17, r17
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     598:	86 ed       	ldi	r24, 0xD6	; 214
     59a:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     59e:	82 e3       	ldi	r24, 0x32	; 50
     5a0:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     5a4:	80 2f       	mov	r24, r16
     5a6:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     5aa:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFY_H_REG_ADDRESS, data, 1); // Y offset value initialization
	data[0] = magOffset[1]&0xFF;
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFY_L_REG_ADDRESS, data, 1); // Y offset value initialization
	data[0] = magOffset[2]>>8;
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS,  MAG_OFFZ_H_REG_ADDRESS, data, 1); // Z offset value initialization
	data[0] = magOffset[2]&0xFF;
     5ae:	10 91 5a 03 	lds	r17, 0x035A
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     5b2:	86 ed       	ldi	r24, 0xD6	; 214
     5b4:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     5b8:	81 e3       	ldi	r24, 0x31	; 49
     5ba:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     5be:	81 2f       	mov	r24, r17
     5c0:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     5c4:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     5c8:	86 ed       	ldi	r24, 0xD6	; 214
     5ca:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     5da:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     5de:	86 ed       	ldi	r24, 0xD6	; 214
     5e0:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     5e4:	89 e1       	ldi	r24, 0x19	; 25
     5e6:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     5ea:	8c e3       	ldi	r24, 0x3C	; 60
     5ec:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     5f0:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     5f4:	86 ed       	ldi	r24, 0xD6	; 214
     5f6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     5fa:	8a e1       	ldi	r24, 0x1A	; 26
     5fc:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     600:	8b e0       	ldi	r24, 0x0B	; 11
     602:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     606:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS, MASTER_CONFIG_REG_ADDRESS, data, 1);

	//data[0] = 0x3C; // Enable all acc axes + enable soft-iron correction
	//LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS, CTRL9_XL_REG_ADDRESS, data, 1);

}
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
	if(ret) {
		return 1;
	}
	ret = i2c_write(reg);											// sends address to read from (X LSB)
     610:	83 e5       	ldi	r24, 0x53	; 83
     612:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	if(ret) {
     616:	88 23       	and	r24, r24
     618:	09 f0       	breq	.+2      	; 0x61c <LSM6DS3US_InitLIS2MLWithCal+0x31a>
     61a:	f4 ce       	rjmp	.-536    	; 0x404 <LSM6DS3US_InitLIS2MLWithCal+0x102>
		return 1;
	}
	ret = i2c_rep_start(addr+I2C_READ);						// set device address and read mode
     61c:	87 ed       	ldi	r24, 0xD7	; 215
     61e:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <i2c_rep_start>
	if(ret) {
     622:	88 23       	and	r24, r24
     624:	09 f0       	breq	.+2      	; 0x628 <LSM6DS3US_InitLIS2MLWithCal+0x326>
     626:	ee ce       	rjmp	.-548    	; 0x404 <LSM6DS3US_InitLIS2MLWithCal+0x102>
		return 1;
	}
	for(i=0; i<(num-1); i++) {
		data[i] = i2c_readAck();								// read one byte at a time
	}
	data[i] = i2c_readNak();									// read last byte sending NACK
     628:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <i2c_readNak>
     62c:	18 2f       	mov	r17, r24
	i2c_stop();	
     62e:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
		data[0] = 0x80; // Turn on the accelerometer (for trigger signal)
		LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS, CTRL1_XL_REG_ADDRESS, data, 1);

		// Wait for the sensor hub communication to be concluded
		LSM6DS3US_I2C_ReadFromAddress(SLAVE_ADDRESS, FUNC_SRC_REG_ADDRESS, data, 1u);
		if((data[0]&0x01)==0x01) {
     632:	10 fd       	sbrc	r17, 0
     634:	1f cf       	rjmp	.-450    	; 0x474 <LSM6DS3US_InitLIS2MLWithCal+0x172>
     636:	e6 ce       	rjmp	.-564    	; 0x404 <LSM6DS3US_InitLIS2MLWithCal+0x102>
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
	if(ret) {
		return 1;
	}
	ret = i2c_write(reg);											// sends address to read from (X LSB)
     638:	83 e5       	ldi	r24, 0x53	; 83
     63a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	if(ret) {
     63e:	88 23       	and	r24, r24
     640:	09 f0       	breq	.+2      	; 0x644 <LSM6DS3US_InitLIS2MLWithCal+0x342>
     642:	fc ce       	rjmp	.-520    	; 0x43c <LSM6DS3US_InitLIS2MLWithCal+0x13a>
		return 1;
	}
	ret = i2c_rep_start(addr+I2C_READ);						// set device address and read mode
     644:	87 ed       	ldi	r24, 0xD7	; 215
     646:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <i2c_rep_start>
	if(ret) {
     64a:	88 23       	and	r24, r24
     64c:	09 f0       	breq	.+2      	; 0x650 <LSM6DS3US_InitLIS2MLWithCal+0x34e>
     64e:	f6 ce       	rjmp	.-532    	; 0x43c <LSM6DS3US_InitLIS2MLWithCal+0x13a>
		return 1;
	}
	for(i=0; i<(num-1); i++) {
		data[i] = i2c_readAck();								// read one byte at a time
	}
	data[i] = i2c_readNak();									// read last byte sending NACK
     650:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <i2c_readNak>
     654:	18 2f       	mov	r17, r24
	i2c_stop();	
     656:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
		data[0] = 0x80; // Turn on the accelerometer (for trigger signal)
		LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS, CTRL1_XL_REG_ADDRESS, data, 1);

		// Wait for the sensor hub communication to be concluded
		LSM6DS3US_I2C_ReadFromAddress(SLAVE_ADDRESS, FUNC_SRC_REG_ADDRESS, data, 1u);
		if((data[0]&0x01)==0x01) {
     65a:	10 fd       	sbrc	r17, 0
     65c:	0b cf       	rjmp	.-490    	; 0x474 <LSM6DS3US_InitLIS2MLWithCal+0x172>
     65e:	ee ce       	rjmp	.-548    	; 0x43c <LSM6DS3US_InitLIS2MLWithCal+0x13a>
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
	if(ret) {
		return 1;
	}
	ret = i2c_write(reg);											// sends address to read from (X LSB)
     660:	83 e5       	ldi	r24, 0x53	; 83
     662:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	if(ret) {
     666:	88 23       	and	r24, r24
     668:	09 f0       	breq	.+2      	; 0x66c <LSM6DS3US_InitLIS2MLWithCal+0x36a>
     66a:	04 cf       	rjmp	.-504    	; 0x474 <LSM6DS3US_InitLIS2MLWithCal+0x172>
		return 1;
	}
	ret = i2c_rep_start(addr+I2C_READ);						// set device address and read mode
     66c:	87 ed       	ldi	r24, 0xD7	; 215
     66e:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <i2c_rep_start>
	if(ret) {
     672:	88 23       	and	r24, r24
     674:	09 f0       	breq	.+2      	; 0x678 <LSM6DS3US_InitLIS2MLWithCal+0x376>
     676:	fe ce       	rjmp	.-516    	; 0x474 <LSM6DS3US_InitLIS2MLWithCal+0x172>
		return 1;
	}
	for(i=0; i<(num-1); i++) {
		data[i] = i2c_readAck();								// read one byte at a time
	}
	data[i] = i2c_readNak();									// read last byte sending NACK
     678:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <i2c_readNak>
	i2c_stop();	
     67c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
     680:	f9 ce       	rjmp	.-526    	; 0x474 <LSM6DS3US_InitLIS2MLWithCal+0x172>

00000682 <LSM6DS3US_InitGyroscope>:
//-----------------------------------------------------------------------------
// Gyroscope
//-----------------------------------------------------------------------------

void LSM6DS3US_InitGyroscope(int16_t offset)
{
     682:	1f 93       	push	r17
	uint8_t data[1] = {0x00u};
     684:	10 e0       	ldi	r17, 0x00	; 0
//-----------------------------------------------------------------------------

uint8_t LSM6DS3US_I2C_ReadFromAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	uint8_t i = 0;
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
     686:	86 ed       	ldi	r24, 0xD6	; 214
     688:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	if(ret) {
     68c:	88 23       	and	r24, r24
     68e:	c9 f0       	breq	.+50     	; 0x6c2 <LSM6DS3US_InitGyroscope+0x40>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     690:	86 ed       	ldi	r24, 0xD6	; 214
     692:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     696:	82 e1       	ldi	r24, 0x12	; 18
     698:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     69c:	81 2f       	mov	r24, r17
     69e:	80 64       	ori	r24, 0x40	; 64
     6a0:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     6a4:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     6a8:	86 ed       	ldi	r24, 0xD6	; 214
     6aa:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     6ae:	81 e1       	ldi	r24, 0x11	; 17
     6b0:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     6b4:	84 e4       	ldi	r24, 0x44	; 68
     6b6:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     6ba:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS, CTRL2_G_REG_ADDRESS, data, 1u);

	//data[0] = 0x80; // high performance disabled
	//LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS, CTRL7_G_REG_ADDRESS, data, 1u);

}
     6be:	1f 91       	pop	r17
     6c0:	08 95       	ret
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
	if(ret) {
		return 1;
	}
	ret = i2c_write(reg);											// sends address to read from (X LSB)
     6c2:	82 e1       	ldi	r24, 0x12	; 18
     6c4:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	if(ret) {
     6c8:	88 23       	and	r24, r24
     6ca:	11 f7       	brne	.-60     	; 0x690 <LSM6DS3US_InitGyroscope+0xe>
		return 1;
	}
	ret = i2c_rep_start(addr+I2C_READ);						// set device address and read mode
     6cc:	87 ed       	ldi	r24, 0xD7	; 215
     6ce:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <i2c_rep_start>
	if(ret) {
     6d2:	88 23       	and	r24, r24
     6d4:	e9 f6       	brne	.-70     	; 0x690 <LSM6DS3US_InitGyroscope+0xe>
		return 1;
	}
	for(i=0; i<(num-1); i++) {
		data[i] = i2c_readAck();								// read one byte at a time
	}
	data[i] = i2c_readNak();									// read last byte sending NACK
     6d6:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <i2c_readNak>
     6da:	18 2f       	mov	r17, r24
	i2c_stop();	
     6dc:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
     6e0:	d7 cf       	rjmp	.-82     	; 0x690 <LSM6DS3US_InitGyroscope+0xe>

000006e2 <LSM6DS3US_InitLIS2ML>:

//-----------------------------------------------------------------------------
// Magnetometer
//-----------------------------------------------------------------------------

void LSM6DS3US_InitLIS2ML(void) {
     6e2:	1f 93       	push	r17
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     6e4:	86 ed       	ldi	r24, 0xD6	; 214
     6e6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     6ea:	80 e1       	ldi	r24, 0x10	; 16
     6ec:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     6f6:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     6fa:	86 ed       	ldi	r24, 0xD6	; 214
     6fc:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     706:	80 e8       	ldi	r24, 0x80	; 128
     708:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     70c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     710:	86 ed       	ldi	r24, 0xD6	; 214
     712:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     71c:	8c e3       	ldi	r24, 0x3C	; 60
     71e:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     722:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     726:	86 ed       	ldi	r24, 0xD6	; 214
     728:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     72c:	83 e0       	ldi	r24, 0x03	; 3
     72e:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     732:	80 e6       	ldi	r24, 0x60	; 96
     734:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     738:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     73c:	86 ed       	ldi	r24, 0xD6	; 214
     73e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     742:	8e e0       	ldi	r24, 0x0E	; 14
     744:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     748:	8c e8       	ldi	r24, 0x8C	; 140
     74a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     74e:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     752:	86 ed       	ldi	r24, 0xD6	; 214
     754:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     758:	84 e0       	ldi	r24, 0x04	; 4
     75a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     75e:	80 e1       	ldi	r24, 0x10	; 16
     760:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     764:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     768:	86 ed       	ldi	r24, 0xD6	; 214
     76a:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     76e:	87 e0       	ldi	r24, 0x07	; 7
     770:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     774:	80 e2       	ldi	r24, 0x20	; 32
     776:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     77a:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     77e:	86 ed       	ldi	r24, 0xD6	; 214
     780:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     790:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     794:	86 ed       	ldi	r24, 0xD6	; 214
     796:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     79a:	89 e1       	ldi	r24, 0x19	; 25
     79c:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     7a6:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     7aa:	86 ed       	ldi	r24, 0xD6	; 214
     7ac:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     7b0:	8a e1       	ldi	r24, 0x1A	; 26
     7b2:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     7b6:	89 e0       	ldi	r24, 0x09	; 9
     7b8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     7bc:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     7c0:	86 ed       	ldi	r24, 0xD6	; 214
     7c2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     7c6:	80 e1       	ldi	r24, 0x10	; 16
     7c8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     7cc:	80 e8       	ldi	r24, 0x80	; 128
     7ce:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     7d2:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
//-----------------------------------------------------------------------------

uint8_t LSM6DS3US_I2C_ReadFromAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	uint8_t i = 0;
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
     7d6:	86 ed       	ldi	r24, 0xD6	; 214
     7d8:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	if(ret) {
     7dc:	88 23       	and	r24, r24
     7de:	09 f4       	brne	.+2      	; 0x7e2 <LSM6DS3US_InitLIS2ML+0x100>
     7e0:	a8 c0       	rjmp	.+336    	; 0x932 <LSM6DS3US_InitLIS2ML+0x250>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     7e2:	86 ed       	ldi	r24, 0xD6	; 214
     7e4:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     7e8:	8a e1       	ldi	r24, 0x1A	; 26
     7ea:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     7ee:	89 e0       	ldi	r24, 0x09	; 9
     7f0:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     7f4:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     7f8:	86 ed       	ldi	r24, 0xD6	; 214
     7fa:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     7fe:	80 e1       	ldi	r24, 0x10	; 16
     800:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     804:	80 e8       	ldi	r24, 0x80	; 128
     806:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     80a:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
//-----------------------------------------------------------------------------

uint8_t LSM6DS3US_I2C_ReadFromAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	uint8_t i = 0;
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
     80e:	86 ed       	ldi	r24, 0xD6	; 214
     810:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	if(ret) {
     814:	88 23       	and	r24, r24
     816:	09 f4       	brne	.+2      	; 0x81a <LSM6DS3US_InitLIS2ML+0x138>
     818:	a0 c0       	rjmp	.+320    	; 0x95a <LSM6DS3US_InitLIS2ML+0x278>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     81a:	86 ed       	ldi	r24, 0xD6	; 214
     81c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     820:	8a e1       	ldi	r24, 0x1A	; 26
     822:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     826:	89 e0       	ldi	r24, 0x09	; 9
     828:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     82c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     830:	86 ed       	ldi	r24, 0xD6	; 214
     832:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     836:	80 e1       	ldi	r24, 0x10	; 16
     838:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     83c:	80 e8       	ldi	r24, 0x80	; 128
     83e:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     842:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
//-----------------------------------------------------------------------------

uint8_t LSM6DS3US_I2C_ReadFromAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	uint8_t i = 0;
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
     846:	86 ed       	ldi	r24, 0xD6	; 214
     848:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	if(ret) {
     84c:	88 23       	and	r24, r24
     84e:	09 f4       	brne	.+2      	; 0x852 <LSM6DS3US_InitLIS2ML+0x170>
     850:	98 c0       	rjmp	.+304    	; 0x982 <LSM6DS3US_InitLIS2ML+0x2a0>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     852:	86 ed       	ldi	r24, 0xD6	; 214
     854:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     858:	89 e1       	ldi	r24, 0x19	; 25
     85a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     864:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     868:	86 ed       	ldi	r24, 0xD6	; 214
     86a:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     86e:	8a e1       	ldi	r24, 0x1A	; 26
     870:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     87a:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     87e:	86 ed       	ldi	r24, 0xD6	; 214
     880:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     884:	80 e1       	ldi	r24, 0x10	; 16
     886:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     890:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     894:	86 ed       	ldi	r24, 0xD6	; 214
     896:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     8a0:	80 e8       	ldi	r24, 0x80	; 128
     8a2:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     8a6:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     8aa:	86 ed       	ldi	r24, 0xD6	; 214
     8ac:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     8b0:	82 e0       	ldi	r24, 0x02	; 2
     8b2:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     8b6:	8d e3       	ldi	r24, 0x3D	; 61
     8b8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     8bc:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     8c0:	86 ed       	ldi	r24, 0xD6	; 214
     8c2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     8c6:	83 e0       	ldi	r24, 0x03	; 3
     8c8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     8cc:	88 e6       	ldi	r24, 0x68	; 104
     8ce:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     8d2:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     8d6:	86 ed       	ldi	r24, 0xD6	; 214
     8d8:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     8dc:	84 e0       	ldi	r24, 0x04	; 4
     8de:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     8e2:	86 e0       	ldi	r24, 0x06	; 6
     8e4:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     8e8:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     8ec:	86 ed       	ldi	r24, 0xD6	; 214
     8ee:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     8fe:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     902:	86 ed       	ldi	r24, 0xD6	; 214
     904:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     908:	89 e1       	ldi	r24, 0x19	; 25
     90a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     90e:	8c e3       	ldi	r24, 0x3C	; 60
     910:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     914:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_stop();	
	return 0;
}
		
void LSM6DS3US_I2C_WriteToAddress(uint8_t addr, uint8_t reg, uint8_t* data, uint8_t num) {
	i2c_start(addr+I2C_WRITE);	// set device address and write mode
     918:	86 ed       	ldi	r24, 0xD6	; 214
     91a:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
	i2c_write(reg);
     91e:	8a e1       	ldi	r24, 0x1A	; 26
     920:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	for(uint8_t i=0; i<num; i++) {
		i2c_write(data[i]);
     924:	89 e0       	ldi	r24, 0x09	; 9
     926:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	}
	i2c_stop();			// set stop condition = release bus
     92a:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS, CTRL10_C_REG_ADDRESS, data, 1);

	data[0] = 0x09; // Enable internal pull-up on SDx/SCx lines, Sensor hub trigger signal is XL Data-Ready, Enable auxiliary I2C master
	LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS, MASTER_CONFIG_REG_ADDRESS, data, 1);

}
     92e:	1f 91       	pop	r17
     930:	08 95       	ret
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
	if(ret) {
		return 1;
	}
	ret = i2c_write(reg);											// sends address to read from (X LSB)
     932:	83 e5       	ldi	r24, 0x53	; 83
     934:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	if(ret) {
     938:	88 23       	and	r24, r24
     93a:	09 f0       	breq	.+2      	; 0x93e <LSM6DS3US_InitLIS2ML+0x25c>
     93c:	52 cf       	rjmp	.-348    	; 0x7e2 <LSM6DS3US_InitLIS2ML+0x100>
		return 1;
	}
	ret = i2c_rep_start(addr+I2C_READ);						// set device address and read mode
     93e:	87 ed       	ldi	r24, 0xD7	; 215
     940:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <i2c_rep_start>
	if(ret) {
     944:	88 23       	and	r24, r24
     946:	09 f0       	breq	.+2      	; 0x94a <LSM6DS3US_InitLIS2ML+0x268>
     948:	4c cf       	rjmp	.-360    	; 0x7e2 <LSM6DS3US_InitLIS2ML+0x100>
		return 1;
	}
	for(i=0; i<(num-1); i++) {
		data[i] = i2c_readAck();								// read one byte at a time
	}
	data[i] = i2c_readNak();									// read last byte sending NACK
     94a:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <i2c_readNak>
     94e:	18 2f       	mov	r17, r24
	i2c_stop();	
     950:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
		data[0] = 0x80; // Turn on the accelerometer (for trigger signal)
		LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS, CTRL1_XL_REG_ADDRESS, data, 1);

		// Wait for the sensor hub communication to be concluded
		LSM6DS3US_I2C_ReadFromAddress(SLAVE_ADDRESS, FUNC_SRC_REG_ADDRESS, data, 1u);
		if((data[0]&0x01)==0x01) {
     954:	10 fd       	sbrc	r17, 0
     956:	7d cf       	rjmp	.-262    	; 0x852 <LSM6DS3US_InitLIS2ML+0x170>
     958:	44 cf       	rjmp	.-376    	; 0x7e2 <LSM6DS3US_InitLIS2ML+0x100>
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
	if(ret) {
		return 1;
	}
	ret = i2c_write(reg);											// sends address to read from (X LSB)
     95a:	83 e5       	ldi	r24, 0x53	; 83
     95c:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	if(ret) {
     960:	88 23       	and	r24, r24
     962:	09 f0       	breq	.+2      	; 0x966 <LSM6DS3US_InitLIS2ML+0x284>
     964:	5a cf       	rjmp	.-332    	; 0x81a <LSM6DS3US_InitLIS2ML+0x138>
		return 1;
	}
	ret = i2c_rep_start(addr+I2C_READ);						// set device address and read mode
     966:	87 ed       	ldi	r24, 0xD7	; 215
     968:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <i2c_rep_start>
	if(ret) {
     96c:	88 23       	and	r24, r24
     96e:	09 f0       	breq	.+2      	; 0x972 <LSM6DS3US_InitLIS2ML+0x290>
     970:	54 cf       	rjmp	.-344    	; 0x81a <LSM6DS3US_InitLIS2ML+0x138>
		return 1;
	}
	for(i=0; i<(num-1); i++) {
		data[i] = i2c_readAck();								// read one byte at a time
	}
	data[i] = i2c_readNak();									// read last byte sending NACK
     972:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <i2c_readNak>
     976:	18 2f       	mov	r17, r24
	i2c_stop();	
     978:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
		data[0] = 0x80; // Turn on the accelerometer (for trigger signal)
		LSM6DS3US_I2C_WriteToAddress(SLAVE_ADDRESS, CTRL1_XL_REG_ADDRESS, data, 1);

		// Wait for the sensor hub communication to be concluded
		LSM6DS3US_I2C_ReadFromAddress(SLAVE_ADDRESS, FUNC_SRC_REG_ADDRESS, data, 1u);
		if((data[0]&0x01)==0x01) {
     97c:	10 fd       	sbrc	r17, 0
     97e:	69 cf       	rjmp	.-302    	; 0x852 <LSM6DS3US_InitLIS2ML+0x170>
     980:	4c cf       	rjmp	.-360    	; 0x81a <LSM6DS3US_InitLIS2ML+0x138>
	uint8_t ret = 0;
	ret = i2c_start(addr+I2C_WRITE);							// set device address and write mode
	if(ret) {
		return 1;
	}
	ret = i2c_write(reg);											// sends address to read from (X LSB)
     982:	83 e5       	ldi	r24, 0x53	; 83
     984:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
	if(ret) {
     988:	88 23       	and	r24, r24
     98a:	09 f0       	breq	.+2      	; 0x98e <LSM6DS3US_InitLIS2ML+0x2ac>
     98c:	62 cf       	rjmp	.-316    	; 0x852 <LSM6DS3US_InitLIS2ML+0x170>
		return 1;
	}
	ret = i2c_rep_start(addr+I2C_READ);						// set device address and read mode
     98e:	87 ed       	ldi	r24, 0xD7	; 215
     990:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <i2c_rep_start>
	if(ret) {
     994:	88 23       	and	r24, r24
     996:	09 f0       	breq	.+2      	; 0x99a <LSM6DS3US_InitLIS2ML+0x2b8>
     998:	5c cf       	rjmp	.-328    	; 0x852 <LSM6DS3US_InitLIS2ML+0x170>
		return 1;
	}
	for(i=0; i<(num-1); i++) {
		data[i] = i2c_readAck();								// read one byte at a time
	}
	data[i] = i2c_readNak();									// read last byte sending NACK
     99a:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <i2c_readNak>
	i2c_stop();	
     99e:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
     9a2:	57 cf       	rjmp	.-338    	; 0x852 <LSM6DS3US_InitLIS2ML+0x170>

000009a4 <main>:
#include "behaviors.h"
#include "sensors.h"
#include "irCommunication.h"
#include "motors.h"

int main(void) {
     9a4:	2f 92       	push	r2
     9a6:	3f 92       	push	r3
     9a8:	4f 92       	push	r4
     9aa:	5f 92       	push	r5
     9ac:	6f 92       	push	r6
     9ae:	7f 92       	push	r7
     9b0:	8f 92       	push	r8
     9b2:	9f 92       	push	r9
     9b4:	af 92       	push	r10
     9b6:	bf 92       	push	r11
     9b8:	cf 92       	push	r12
     9ba:	df 92       	push	r13
     9bc:	ef 92       	push	r14
     9be:	ff 92       	push	r15
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	df 93       	push	r29
     9c6:	cf 93       	push	r28
     9c8:	00 d0       	rcall	.+0      	; 0x9ca <main+0x26>
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <main+0x28>
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
	float targetAngle=0;
	//unsigned char tempStr[200]; // Used for debug

	initPeripherals();
     9d0:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <initPeripherals>

	initBehaviors();
     9d4:	0e 94 fb 43 	call	0x87f6	; 0x87f6 <initBehaviors>

	speedStepCounter = getTime100MicroSec();
     9d8:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     9dc:	9b 01       	movw	r18, r22
     9de:	ac 01       	movw	r20, r24
     9e0:	60 93 74 03 	sts	0x0374, r22
     9e4:	30 93 75 03 	sts	0x0375, r19
     9e8:	40 93 76 03 	sts	0x0376, r20
     9ec:	50 93 77 03 	sts	0x0377, r21
     9f0:	10 92 78 03 	sts	0x0378, r1
     9f4:	10 92 79 03 	sts	0x0379, r1
     9f8:	10 92 7a 03 	sts	0x037A, r1
     9fc:	10 92 7b 03 	sts	0x037B, r1
	
	// I noticed that I have to wait a little before calibrating in order to have the sensors to be 
	// well calibrated (sensors noise eliminated). Don't sure why, maybe due to the sensitivity of the 
	// sensor that stabilizes...
	startTime = getTime100MicroSec();
     a00:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     a04:	7b 01       	movw	r14, r22
     a06:	8c 01       	movw	r16, r24
	while((getTime100MicroSec() - startTime) < PAUSE_300_MSEC);
     a08:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     a0c:	6e 19       	sub	r22, r14
     a0e:	7f 09       	sbc	r23, r15
     a10:	80 0b       	sbc	r24, r16
     a12:	91 0b       	sbc	r25, r17
     a14:	65 54       	subi	r22, 0x45	; 69
     a16:	7b 40       	sbci	r23, 0x0B	; 11
     a18:	80 40       	sbci	r24, 0x00	; 0
     a1a:	90 40       	sbci	r25, 0x00	; 0
     a1c:	a8 f3       	brcs	.-22     	; 0xa08 <main+0x64>
	calibrateSensors();
     a1e:	0e 94 c7 48 	call	0x918e	; 0x918e <calibrateSensors>

	startTime = getTime100MicroSec();
     a22:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     a26:	7b 01       	movw	r14, r22
     a28:	8c 01       	movw	r16, r24
     a2a:	44 24       	eor	r4, r4
     a2c:	55 24       	eor	r5, r5
     a2e:	32 01       	movw	r6, r4
     a30:	cc 24       	eor	r12, r12
     a32:	88 24       	eor	r8, r8
     a34:	99 24       	eor	r9, r9
     a36:	1e 82       	std	Y+6, r1	; 0x06
     a38:	1d 82       	std	Y+5, r1	; 0x05
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	89 83       	std	Y+1, r24	; 0x01
     a44:	9a 83       	std	Y+2, r25	; 0x02
     a46:	ab 83       	std	Y+3, r26	; 0x03
     a48:	bc 83       	std	Y+4, r27	; 0x04
		computeHeading();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     a4a:	dd 24       	eor	r13, r13
     a4c:	da 94       	dec	r13
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
						pwm_red = 255;
						pwm_green = 255;
						pwm_blue = 254;
     a4e:	be ef       	ldi	r27, 0xFE	; 254
     a50:	2b 2e       	mov	r2, r27
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     a52:	33 24       	eor	r3, r3
     a54:	33 94       	inc	r3
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position		
     a56:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <getSelector>
     a5a:	80 93 60 03 	sts	0x0360, r24
		
		readAll();			// update IMU values to compute the angle
     a5e:	0e 94 3f 46 	call	0x8c7e	; 0x8c7e <readAll>
		computeAngle();		
     a62:	0e 94 c0 45 	call	0x8b80	; 0x8b80 <computeAngle>
		computeHeading();
     a66:	0e 94 34 45 	call	0x8a68	; 0x8a68 <computeHeading>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     a6a:	80 91 60 03 	lds	r24, 0x0360
     a6e:	87 30       	cpi	r24, 0x07	; 7
     a70:	09 f4       	brne	.+2      	; 0xa74 <main+0xd0>
     a72:	5d c1       	rjmp	.+698    	; 0xd2e <main+0x38a>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     a74:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     a78:	6e 19       	sub	r22, r14
     a7a:	7f 09       	sbc	r23, r15
     a7c:	80 0b       	sbc	r24, r16
     a7e:	91 0b       	sbc	r25, r17
     a80:	6e 51       	subi	r22, 0x1E	; 30
     a82:	7b 44       	sbci	r23, 0x4B	; 75
     a84:	80 40       	sbci	r24, 0x00	; 0
     a86:	90 40       	sbci	r25, 0x00	; 0
     a88:	08 f0       	brcs	.+2      	; 0xa8c <main+0xe8>
     a8a:	f7 c0       	rjmp	.+494    	; 0xc7a <main+0x2d6>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     a8c:	0e 94 c7 18 	call	0x318e	; 0x318e <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     a90:	0e 94 24 13 	call	0x2648	; 0x2648 <handleRFCommands>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     a94:	90 91 60 03 	lds	r25, 0x0360
     a98:	97 30       	cpi	r25, 0x07	; 7
     a9a:	09 f4       	brne	.+2      	; 0xa9e <main+0xfa>
     a9c:	0a c1       	rjmp	.+532    	; 0xcb2 <main+0x30e>
     a9e:	98 30       	cpi	r25, 0x08	; 8
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <main+0x100>
     aa2:	61 c0       	rjmp	.+194    	; 0xb66 <main+0x1c2>
     aa4:	93 30       	cpi	r25, 0x03	; 3
     aa6:	09 f4       	brne	.+2      	; 0xaaa <main+0x106>
     aa8:	99 c1       	rjmp	.+818    	; 0xddc <main+0x438>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	08 f0       	brcs	.+2      	; 0xab0 <main+0x10c>
     aae:	6a c1       	rjmp	.+724    	; 0xd84 <main+0x3e0>
     ab0:	91 30       	cpi	r25, 0x01	; 1
     ab2:	09 f4       	brne	.+2      	; 0xab6 <main+0x112>
     ab4:	18 c2       	rjmp	.+1072   	; 0xee6 <main+0x542>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	08 f0       	brcs	.+2      	; 0xabc <main+0x118>
     aba:	92 c1       	rjmp	.+804    	; 0xde0 <main+0x43c>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     abc:	0e 94 2d 3d 	call	0x7a5a	; 0x7a5a <handleMotorsWithNoController>
     ac0:	90 91 60 03 	lds	r25, 0x0360
						//usart0PutString(tempStr);
					break;
				}
		}

		if(currentSelector!=0) {
     ac4:	99 23       	and	r25, r25
     ac6:	09 f0       	breq	.+2      	; 0xaca <main+0x126>
     ac8:	d3 c0       	rjmp	.+422    	; 0xc70 <main+0x2cc>
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     aca:	c9 16       	cp	r12, r25
     acc:	09 f4       	brne	.+2      	; 0xad0 <main+0x12c>
     ace:	49 c0       	rjmp	.+146    	; 0xb62 <main+0x1be>
			disableObstacleAvoidance();
     ad0:	0e 94 ec 41 	call	0x83d8	; 0x83d8 <disableObstacleAvoidance>
			disableCliffAvoidance();
     ad4:	0e 94 f3 41 	call	0x83e6	; 0x83e6 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     ad8:	80 91 0b 01 	lds	r24, 0x010B
     adc:	81 60       	ori	r24, 0x01	; 1
     ade:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     ae2:	80 91 0b 01 	lds	r24, 0x010B
     ae6:	82 60       	ori	r24, 0x02	; 2
     ae8:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     aec:	80 91 0b 01 	lds	r24, 0x010B
     af0:	84 60       	ori	r24, 0x04	; 4
     af2:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     af6:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     af8:	80 91 0b 01 	lds	r24, 0x010B
     afc:	80 61       	ori	r24, 0x10	; 16
     afe:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     b02:	80 91 0b 01 	lds	r24, 0x010B
     b06:	80 62       	ori	r24, 0x20	; 32
     b08:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     b0c:	80 91 0b 01 	lds	r24, 0x010B
     b10:	80 64       	ori	r24, 0x40	; 64
     b12:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     b16:	80 91 0b 01 	lds	r24, 0x010B
     b1a:	80 68       	ori	r24, 0x80	; 128
     b1c:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     b20:	d0 92 0c 02 	sts	0x020C, r13
			pwm_green = 255;
     b24:	d0 92 0d 02 	sts	0x020D, r13
			pwm_blue = 255;
     b28:	d0 92 0e 02 	sts	0x020E, r13
			updateRedLed(pwm_red);
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
			updateGreenLed(pwm_green);
     b32:	80 91 0d 02 	lds	r24, 0x020D
     b36:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
			updateBlueLed(pwm_blue);
     b3a:	80 91 0e 02 	lds	r24, 0x020E
     b3e:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
			setRightSpeed(0);
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
			setLeftSpeed(0);
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
			rgbState = 0;
     b4e:	10 92 0c 03 	sts	0x030C, r1
			calibrationWritten = 0;
     b52:	10 92 7d 03 	sts	0x037D, r1
			demoState = 0;
     b56:	10 92 64 03 	sts	0x0364, r1

			irCommState = 0;
     b5a:	10 92 d6 03 	sts	0x03D6, r1
     b5e:	90 91 60 03 	lds	r25, 0x0360
		}
		prevSelector = currentSelector;
     b62:	c9 2e       	mov	r12, r25
     b64:	78 cf       	rjmp	.-272    	; 0xa56 <main+0xb2>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     b66:	9b 30       	cpi	r25, 0x0B	; 11
     b68:	09 f4       	brne	.+2      	; 0xb6c <main+0x1c8>
     b6a:	97 c1       	rjmp	.+814    	; 0xe9a <main+0x4f6>
     b6c:	9c 30       	cpi	r25, 0x0C	; 12
     b6e:	08 f0       	brcs	.+2      	; 0xb72 <main+0x1ce>
     b70:	f1 c0       	rjmp	.+482    	; 0xd54 <main+0x3b0>
     b72:	99 30       	cpi	r25, 0x09	; 9
     b74:	09 f4       	brne	.+2      	; 0xb78 <main+0x1d4>
     b76:	ed c1       	rjmp	.+986    	; 0xf52 <main+0x5ae>
     b78:	9a 30       	cpi	r25, 0x0A	; 10
     b7a:	08 f4       	brcc	.+2      	; 0xb7e <main+0x1da>
     b7c:	de c1       	rjmp	.+956    	; 0xf3a <main+0x596>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     b7e:	80 91 64 03 	lds	r24, 0x0364
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	09 f4       	brne	.+2      	; 0xb88 <main+0x1e4>
     b86:	a7 c4       	rjmp	.+2382   	; 0x14d6 <main+0xb32>
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	08 f0       	brcs	.+2      	; 0xb8e <main+0x1ea>
     b8c:	f3 c3       	rjmp	.+2022   	; 0x1374 <main+0x9d0>
						case 0: // get first clock tick and start moving the robot with obstacle avoidance enabled
							demoStartTime = getTime100MicroSec();
     b8e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     b92:	60 93 68 03 	sts	0x0368, r22
     b96:	70 93 69 03 	sts	0x0369, r23
     b9a:	80 93 6a 03 	sts	0x036A, r24
     b9e:	90 93 6b 03 	sts	0x036B, r25
							demoEndTime = getTime100MicroSec();							
     ba2:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     ba6:	60 93 70 03 	sts	0x0370, r22
     baa:	70 93 71 03 	sts	0x0371, r23
     bae:	80 93 72 03 	sts	0x0372, r24
     bb2:	90 93 73 03 	sts	0x0373, r25
							demoStartTime2 = getTime100MicroSec();
     bb6:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     bba:	60 93 6c 03 	sts	0x036C, r22
     bbe:	70 93 6d 03 	sts	0x036D, r23
     bc2:	80 93 6e 03 	sts	0x036E, r24
     bc6:	90 93 6f 03 	sts	0x036F, r25
							enableObstacleAvoidance();
     bca:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <enableObstacleAvoidance>
							setLeftSpeed(20);
     bce:	84 e1       	ldi	r24, 0x14	; 20
     bd0:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
							setRightSpeed(20);
     bd4:	84 e1       	ldi	r24, 0x14	; 20
     bd6:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
							demoState = 1;
     bda:	30 92 64 03 	sts	0x0364, r3
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     bde:	80 91 7f 03 	lds	r24, 0x037F
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <main+0x244>
     be6:	f4 c3       	rjmp	.+2024   	; 0x13d0 <main+0xa2c>
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	08 f0       	brcs	.+2      	; 0xbee <main+0x24a>
     bec:	8d c3       	rjmp	.+1818   	; 0x1308 <main+0x964>
						case 0:							
							pwm_red = 255;
     bee:	d0 92 0c 02 	sts	0x020C, r13
							pwm_green = 255;
     bf2:	d0 92 0d 02 	sts	0x020D, r13
							pwm_blue = 255;
     bf6:	d0 92 0e 02 	sts	0x020E, r13
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
     bfa:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     bfe:	20 91 70 03 	lds	r18, 0x0370
     c02:	30 91 71 03 	lds	r19, 0x0371
     c06:	40 91 72 03 	lds	r20, 0x0372
     c0a:	50 91 73 03 	lds	r21, 0x0373
     c0e:	62 1b       	sub	r22, r18
     c10:	73 0b       	sbc	r23, r19
     c12:	84 0b       	sbc	r24, r20
     c14:	95 0b       	sbc	r25, r21
     c16:	61 5c       	subi	r22, 0xC1	; 193
     c18:	73 40       	sbci	r23, 0x03	; 3
     c1a:	80 40       	sbci	r24, 0x00	; 0
     c1c:	90 40       	sbci	r25, 0x00	; 0
     c1e:	10 f0       	brcs	.+4      	; 0xc24 <main+0x280>
     c20:	0c 94 5d 0f 	jmp	0x1eba	; 0x1eba <main+0x1516>
									greenLedState = 0;
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
     c24:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     c28:	20 91 6c 03 	lds	r18, 0x036C
     c2c:	30 91 6d 03 	lds	r19, 0x036D
     c30:	40 91 6e 03 	lds	r20, 0x036E
     c34:	50 91 6f 03 	lds	r21, 0x036F
     c38:	62 1b       	sub	r22, r18
     c3a:	73 0b       	sbc	r23, r19
     c3c:	84 0b       	sbc	r24, r20
     c3e:	95 0b       	sbc	r25, r21
     c40:	6e 51       	subi	r22, 0x1E	; 30
     c42:	7b 44       	sbci	r23, 0x4B	; 75
     c44:	80 40       	sbci	r24, 0x00	; 0
     c46:	90 40       	sbci	r25, 0x00	; 0
     c48:	10 f0       	brcs	.+4      	; 0xc4e <main+0x2aa>
     c4a:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <main+0x14fa>
								rgbLedState = 1;
								demoStartTime2 = getTime100MicroSec();
							}
							updateRedLed(pwm_red);
     c4e:	80 91 0c 02 	lds	r24, 0x020C
     c52:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
							updateGreenLed(pwm_green);
     c56:	80 91 0d 02 	lds	r24, 0x020D
     c5a:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
							updateBlueLed(pwm_blue);
     c5e:	80 91 0e 02 	lds	r24, 0x020E
     c62:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
     c66:	90 91 60 03 	lds	r25, 0x0360
						//usart0PutString(tempStr);
					break;
				}
		}

		if(currentSelector!=0) {
     c6a:	99 23       	and	r25, r25
     c6c:	09 f4       	brne	.+2      	; 0xc70 <main+0x2cc>
     c6e:	2d cf       	rjmp	.-422    	; 0xaca <main+0x126>
			handleMotorsWithSpeedController();  
     c70:	0e 94 74 38 	call	0x70e8	; 0x70e8 <handleMotorsWithSpeedController>
     c74:	90 91 60 03 	lds	r25, 0x0360
     c78:	28 cf       	rjmp	.-432    	; 0xaca <main+0x126>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     c7a:	0e 94 75 1f 	call	0x3eea	; 0x3eea <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     c7e:	90 91 60 03 	lds	r25, 0x0360
     c82:	89 2f       	mov	r24, r25
     c84:	84 50       	subi	r24, 0x04	; 4
     c86:	82 30       	cpi	r24, 0x02	; 2
     c88:	08 f4       	brcc	.+2      	; 0xc8c <main+0x2e8>
     c8a:	91 c1       	rjmp	.+802    	; 0xfae <main+0x60a>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     c8c:	97 30       	cpi	r25, 0x07	; 7
     c8e:	09 f4       	brne	.+2      	; 0xc92 <main+0x2ee>
     c90:	bd c1       	rjmp	.+890    	; 0x100c <main+0x668>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     c92:	96 30       	cpi	r25, 0x06	; 6
     c94:	09 f4       	brne	.+2      	; 0xc98 <main+0x2f4>
     c96:	a9 c0       	rjmp	.+338    	; 0xdea <main+0x446>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     c98:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     c9c:	7b 01       	movw	r14, r22
     c9e:	8c 01       	movw	r16, r24
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     ca0:	0e 94 c7 18 	call	0x318e	; 0x318e <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     ca4:	0e 94 24 13 	call	0x2648	; 0x2648 <handleRFCommands>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     ca8:	90 91 60 03 	lds	r25, 0x0360
     cac:	97 30       	cpi	r25, 0x07	; 7
     cae:	09 f0       	breq	.+2      	; 0xcb2 <main+0x30e>
     cb0:	f6 ce       	rjmp	.-532    	; 0xa9e <main+0xfa>
							break;
					}
					break;
			
			case 7:
				irEnabled = 0;	// Disable tv remote to avoid involuntary/wrong commands reception.
     cb2:	10 92 10 02 	sts	0x0210, r1
					switch(demoState) {
     cb6:	80 91 64 03 	lds	r24, 0x0364
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	11 f4       	brne	.+4      	; 0xcc2 <main+0x31e>
     cbe:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <main+0x132c>
     cc2:	83 30       	cpi	r24, 0x03	; 3
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <main+0x324>
     cc6:	c3 c2       	rjmp	.+1414   	; 0x124e <main+0x8aa>
     cc8:	88 23       	and	r24, r24
     cca:	09 f0       	breq	.+2      	; 0xcce <main+0x32a>
     ccc:	45 c7       	rjmp	.+3722   	; 0x1b58 <main+0x11b4>
						case 0:	// move around
							turnOffGreenLeds();
     cce:	0e 94 02 45 	call	0x8a04	; 0x8a04 <turnOffGreenLeds>
							GREEN_LED0_ON;
     cd2:	80 91 0b 01 	lds	r24, 0x010B
     cd6:	8e 7f       	andi	r24, 0xFE	; 254
     cd8:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     cdc:	10 92 65 03 	sts	0x0365, r1
							enableObstacleAvoidance();
     ce0:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <enableObstacleAvoidance>
							setRightSpeed(20);
     ce4:	84 e1       	ldi	r24, 0x14	; 20
     ce6:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
							setLeftSpeed(20);
     cea:	84 e1       	ldi	r24, 0x14	; 20
     cec:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     cf0:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     cf4:	60 93 70 03 	sts	0x0370, r22
     cf8:	70 93 71 03 	sts	0x0371, r23
     cfc:	80 93 72 03 	sts	0x0372, r24
     d00:	90 93 73 03 	sts	0x0373, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     d04:	20 91 68 03 	lds	r18, 0x0368
     d08:	30 91 69 03 	lds	r19, 0x0369
     d0c:	40 91 6a 03 	lds	r20, 0x036A
     d10:	50 91 6b 03 	lds	r21, 0x036B
     d14:	62 1b       	sub	r22, r18
     d16:	73 0b       	sbc	r23, r19
     d18:	84 0b       	sbc	r24, r20
     d1a:	95 0b       	sbc	r25, r21
     d1c:	63 53       	subi	r22, 0x33	; 51
     d1e:	7f 4e       	sbci	r23, 0xEF	; 239
     d20:	82 40       	sbci	r24, 0x02	; 2
     d22:	90 40       	sbci	r25, 0x00	; 0
     d24:	08 f4       	brcc	.+2      	; 0xd28 <main+0x384>
     d26:	93 cf       	rjmp	.-218    	; 0xc4e <main+0x2aa>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     d28:	30 92 64 03 	sts	0x0364, r3
     d2c:	90 cf       	rjmp	.-224    	; 0xc4e <main+0x2aa>
		computeAngle();		
		computeHeading();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     d2e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     d32:	64 19       	sub	r22, r4
     d34:	75 09       	sbc	r23, r5
     d36:	86 09       	sbc	r24, r6
     d38:	97 09       	sbc	r25, r7
     d3a:	68 5c       	subi	r22, 0xC8	; 200
     d3c:	72 41       	sbci	r23, 0x12	; 18
     d3e:	80 40       	sbci	r24, 0x00	; 0
     d40:	90 40       	sbci	r25, 0x00	; 0
     d42:	08 f4       	brcc	.+2      	; 0xd46 <main+0x3a2>
     d44:	97 ce       	rjmp	.-722    	; 0xa74 <main+0xd0>
				pwm_red = 255;
     d46:	d0 92 0c 02 	sts	0x020C, r13
				pwm_green = 255;
     d4a:	d0 92 0d 02 	sts	0x020D, r13
				pwm_blue = 255;			
     d4e:	d0 92 0e 02 	sts	0x020E, r13
     d52:	90 ce       	rjmp	.-736    	; 0xa74 <main+0xd0>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     d54:	9d 30       	cpi	r25, 0x0D	; 13
     d56:	09 f4       	brne	.+2      	; 0xd5a <main+0x3b6>
     d58:	87 c0       	rjmp	.+270    	; 0xe68 <main+0x4c4>
     d5a:	9d 30       	cpi	r25, 0x0D	; 13
     d5c:	08 f4       	brcc	.+2      	; 0xd60 <main+0x3bc>
     d5e:	6e c0       	rjmp	.+220    	; 0xe3c <main+0x498>
     d60:	9e 30       	cpi	r25, 0x0E	; 14
     d62:	09 f4       	brne	.+2      	; 0xd66 <main+0x3c2>
     d64:	5b c0       	rjmp	.+182    	; 0xe1c <main+0x478>
     d66:	9f 30       	cpi	r25, 0x0F	; 15
     d68:	09 f0       	breq	.+2      	; 0xd6c <main+0x3c8>
     d6a:	ac ce       	rjmp	.-680    	; 0xac4 <main+0x120>
						break;
				}									
				break;

			case 15:// clock calibration
				switch(demoState) {
     d6c:	80 91 64 03 	lds	r24, 0x0364
     d70:	88 23       	and	r24, r24
     d72:	09 f0       	breq	.+2      	; 0xd76 <main+0x3d2>
     d74:	b3 c1       	rjmp	.+870    	; 0x10dc <main+0x738>
						}

						setLeftSpeed(0);
						setRightSpeed(0);
						*/
						demoState = 1;						
     d76:	30 92 64 03 	sts	0x0364, r3
					break;
				}
		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
     d7a:	0e 94 74 38 	call	0x70e8	; 0x70e8 <handleMotorsWithSpeedController>
     d7e:	90 91 60 03 	lds	r25, 0x0360
     d82:	a3 ce       	rjmp	.-698    	; 0xaca <main+0x126>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     d84:	95 30       	cpi	r25, 0x05	; 5
     d86:	09 f4       	brne	.+2      	; 0xd8a <main+0x3e6>
     d88:	fb c0       	rjmp	.+502    	; 0xf80 <main+0x5dc>
     d8a:	96 30       	cpi	r25, 0x06	; 6
     d8c:	08 f4       	brcc	.+2      	; 0xd90 <main+0x3ec>
     d8e:	b0 c0       	rjmp	.+352    	; 0xef0 <main+0x54c>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     d90:	80 91 0d 03 	lds	r24, 0x030D
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	09 f4       	brne	.+2      	; 0xd9a <main+0x3f6>
     d98:	c6 c3       	rjmp	.+1932   	; 0x1526 <main+0xb82>
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	08 f0       	brcs	.+2      	; 0xda0 <main+0x3fc>
     d9e:	95 c2       	rjmp	.+1322   	; 0x12ca <main+0x926>
						case 0:
							setRightSpeed(0);
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
							setLeftSpeed(0);
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
							turnOffGreenLeds();
     dac:	0e 94 02 45 	call	0x8a04	; 0x8a04 <turnOffGreenLeds>
							pwm_red=255;
     db0:	d0 92 0c 02 	sts	0x020C, r13
							pwm_green=255;
     db4:	d0 92 0d 02 	sts	0x020D, r13
							pwm_blue=255;
     db8:	d0 92 0e 02 	sts	0x020E, r13
							updateRedLed(pwm_red);
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
							updateGreenLed(pwm_green);
     dc2:	80 91 0d 02 	lds	r24, 0x020D
     dc6:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
							updateBlueLed(pwm_blue);
     dca:	80 91 0e 02 	lds	r24, 0x020E
     dce:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
							LED_IR1_HIGH;
     dd2:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     dd4:	45 9a       	sbi	0x08, 5	; 8
     dd6:	90 91 60 03 	lds	r25, 0x0360
     dda:	74 ce       	rjmp	.-792    	; 0xac4 <main+0x120>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     ddc:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <enableObstacleAvoidance>
					enableCliffAvoidance();
     de0:	0e 94 ef 41 	call	0x83de	; 0x83de <enableCliffAvoidance>
     de4:	90 91 60 03 	lds	r25, 0x0360
     de8:	6d ce       	rjmp	.-806    	; 0xac4 <main+0x120>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     dea:	90 91 0d 03 	lds	r25, 0x030D
     dee:	91 30       	cpi	r25, 0x01	; 1
     df0:	09 f0       	breq	.+2      	; 0xdf4 <main+0x450>
     df2:	52 cf       	rjmp	.-348    	; 0xc98 <main+0x2f4>
     df4:	80 91 09 03 	lds	r24, 0x0309
     df8:	82 30       	cpi	r24, 0x02	; 2
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <main+0x45a>
     dfc:	4d cf       	rjmp	.-358    	; 0xc98 <main+0x2f4>
					if(rgbState == 0) {
     dfe:	80 91 0c 03 	lds	r24, 0x030C
     e02:	88 23       	and	r24, r24
     e04:	11 f0       	breq	.+4      	; 0xe0a <main+0x466>
     e06:	0c 94 01 10 	jmp	0x2002	; 0x2002 <main+0x165e>
						pwm_red = 254;
     e0a:	20 92 0c 02 	sts	0x020C, r2
						pwm_green = 255;
     e0e:	d0 92 0d 02 	sts	0x020D, r13
						pwm_blue = 255;
     e12:	d0 92 0e 02 	sts	0x020E, r13
						rgbState = 1;
     e16:	90 93 0c 03 	sts	0x030C, r25
     e1a:	3e cf       	rjmp	.-388    	; 0xc98 <main+0x2f4>
						break;
				}
				break;
			
			case 14: // Multirobots communication: continuously change current color and make it change also for other robots
				switch(demoState) {
     e1c:	80 91 64 03 	lds	r24, 0x0364
     e20:	88 23       	and	r24, r24
     e22:	09 f0       	breq	.+2      	; 0xe26 <main+0x482>
     e24:	49 c1       	rjmp	.+658    	; 0x10b8 <main+0x714>
					case 0:
						irCommInit();
     e26:	0e 94 d4 59 	call	0xb3a8	; 0xb3a8 <irCommInit>
						demoState = 1;
     e2a:	30 92 64 03 	sts	0x0364, r3
						irCommRxByteExpected = 1;
     e2e:	30 92 16 04 	sts	0x0416, r3
						irCommMsgCount = 0;
     e32:	10 92 ec 03 	sts	0x03EC, r1
     e36:	90 91 60 03 	lds	r25, 0x0360
     e3a:	44 ce       	rjmp	.-888    	; 0xac4 <main+0x120>
						break;
				}
				break;

			case 12:	// IR local communication: 2 or more robots pass information between them in sequence
				switch(demoState) {
     e3c:	80 91 64 03 	lds	r24, 0x0364
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	09 f4       	brne	.+2      	; 0xe46 <main+0x4a2>
     e44:	4c c6       	rjmp	.+3224   	; 0x1ade <main+0x113a>
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	08 f0       	brcs	.+2      	; 0xe4c <main+0x4a8>
     e4a:	9f c1       	rjmp	.+830    	; 0x118a <main+0x7e6>
					case 0:
						irCommInit();
     e4c:	0e 94 d4 59 	call	0xb3a8	; 0xb3a8 <irCommInit>
						irCommRobotsNum = 4;	// total number of robots that exchange data
     e50:	f4 e0       	ldi	r31, 0x04	; 4
     e52:	f0 93 ea 03 	sts	0x03EA, r31
						irCommRobotId = 3;		// choose the id of the robot (a different id for each robot), from 0 to 254 (255 is reserved)
     e56:	23 e0       	ldi	r18, 0x03	; 3
     e58:	20 93 e9 03 	sts	0x03E9, r18
							updateBlueLed(255);
							updateRedLed(255);
							updateGreenLed(128);
							demoState = 1;
						} else {
							demoState = 2;
     e5c:	32 e0       	ldi	r19, 0x02	; 2
     e5e:	30 93 64 03 	sts	0x0364, r19
     e62:	90 91 60 03 	lds	r25, 0x0360
     e66:	2e ce       	rjmp	.-932    	; 0xac4 <main+0x120>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
     e68:	80 91 64 03 	lds	r24, 0x0364
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <main+0x4ce>
     e70:	0e c3       	rjmp	.+1564   	; 0x148e <main+0xaea>
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	08 f0       	brcs	.+2      	; 0xe78 <main+0x4d4>
     e76:	c7 c1       	rjmp	.+910    	; 0x1206 <main+0x862>
					case 0:
						irCommInit();
     e78:	0e 94 d4 59 	call	0xb3a8	; 0xb3a8 <irCommInit>
						enableObstacleAvoidance();
     e7c:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <enableObstacleAvoidance>
						setLeftSpeed(10);
     e80:	8a e0       	ldi	r24, 0x0A	; 10
     e82:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
						setRightSpeed(10);
     e86:	8a e0       	ldi	r24, 0x0A	; 10
     e88:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
						demoState = 1;
     e8c:	30 92 64 03 	sts	0x0364, r3
     e90:	88 24       	eor	r8, r8
     e92:	99 24       	eor	r9, r9
     e94:	90 91 60 03 	lds	r25, 0x0360
     e98:	15 ce       	rjmp	.-982    	; 0xac4 <main+0x120>

					break;

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
     e9a:	80 91 64 03 	lds	r24, 0x0364
     e9e:	82 30       	cpi	r24, 0x02	; 2
     ea0:	09 f4       	brne	.+2      	; 0xea4 <main+0x500>
     ea2:	b0 c6       	rjmp	.+3424   	; 0x1c04 <main+0x1260>
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <main+0x506>
     ea8:	41 c1       	rjmp	.+642    	; 0x112c <main+0x788>
     eaa:	88 23       	and	r24, r24
     eac:	09 f4       	brne	.+2      	; 0xeb0 <main+0x50c>
     eae:	8b c6       	rjmp	.+3350   	; 0x1bc6 <main+0x1222>
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <main+0x512>
     eb4:	dd ce       	rjmp	.-582    	; 0xc70 <main+0x2cc>
						irCommInit();
						demoState = 1;
						break;

					case 1:						
						enableObstacleAvoidance();
     eb6:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <enableObstacleAvoidance>
						setLeftSpeed(10);
     eba:	8a e0       	ldi	r24, 0x0A	; 10
     ebc:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
						setRightSpeed(10);
     ec0:	8a e0       	ldi	r24, 0x0A	; 10

					case 3:	// rotate right
						irCommTasks();
						if(theta <= targetAngle) {
							setLeftSpeed(0);
							setRightSpeed(0);
     ec2:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
							demoState = 2;
     ec6:	b2 e0       	ldi	r27, 0x02	; 2
     ec8:	b0 93 64 03 	sts	0x0364, r27
							demoStartTime = getTime100MicroSec();
     ecc:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     ed0:	60 93 68 03 	sts	0x0368, r22
     ed4:	70 93 69 03 	sts	0x0369, r23
     ed8:	80 93 6a 03 	sts	0x036A, r24
     edc:	90 93 6b 03 	sts	0x036B, r25
     ee0:	90 91 60 03 	lds	r25, 0x0360
     ee4:	ef cd       	rjmp	.-1058   	; 0xac4 <main+0x120>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     ee6:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <enableObstacleAvoidance>
     eea:	90 91 60 03 	lds	r25, 0x0360
     eee:	ea cd       	rjmp	.-1068   	; 0xac4 <main+0x120>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     ef0:	80 91 0b 01 	lds	r24, 0x010B
     ef4:	8e 7f       	andi	r24, 0xFE	; 254
     ef6:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     efa:	80 91 0b 01 	lds	r24, 0x010B
     efe:	8d 7f       	andi	r24, 0xFD	; 253
     f00:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     f04:	80 91 0b 01 	lds	r24, 0x010B
     f08:	8b 7f       	andi	r24, 0xFB	; 251
     f0a:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     f0e:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     f10:	80 91 0b 01 	lds	r24, 0x010B
     f14:	8f 7e       	andi	r24, 0xEF	; 239
     f16:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     f1a:	80 91 0b 01 	lds	r24, 0x010B
     f1e:	8f 7d       	andi	r24, 0xDF	; 223
     f20:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     f24:	80 91 0b 01 	lds	r24, 0x010B
     f28:	8f 7b       	andi	r24, 0xBF	; 191
     f2a:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     f2e:	80 91 0b 01 	lds	r24, 0x010B
     f32:	8f 77       	andi	r24, 0x7F	; 127
     f34:	80 93 0b 01 	sts	0x010B, r24
     f38:	8a ce       	rjmp	.-748    	; 0xc4e <main+0x2aa>
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	// motors calibration
					irEnabled = 1;
     f3a:	30 92 10 02 	sts	0x0210, r3
					if(calibrateOdomFlag==1) {
     f3e:	80 91 7c 04 	lds	r24, 0x047C
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	09 f0       	breq	.+2      	; 0xf48 <main+0x5a4>
     f46:	be cd       	rjmp	.-1156   	; 0xac4 <main+0x120>
						handleCalibration();
     f48:	0e 94 a9 34 	call	0x6952	; 0x6952 <handleCalibration>
     f4c:	90 91 60 03 	lds	r25, 0x0360
     f50:	b9 cd       	rjmp	.-1166   	; 0xac4 <main+0x120>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     f52:	80 91 64 03 	lds	r24, 0x0364
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	09 f4       	brne	.+2      	; 0xf5c <main+0x5b8>
     f5a:	a3 c2       	rjmp	.+1350   	; 0x14a2 <main+0xafe>
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <main+0x5be>
     f60:	7d c2       	rjmp	.+1274   	; 0x145c <main+0xab8>
						case 0:
							demoStartTime = getTime100MicroSec();
     f62:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
     f66:	60 93 68 03 	sts	0x0368, r22
     f6a:	70 93 69 03 	sts	0x0369, r23
     f6e:	80 93 6a 03 	sts	0x036A, r24
     f72:	90 93 6b 03 	sts	0x036B, r25
							demoState = 1;
     f76:	30 92 64 03 	sts	0x0364, r3
     f7a:	90 91 60 03 	lds	r25, 0x0360
     f7e:	a2 cd       	rjmp	.-1212   	; 0xac4 <main+0x120>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     f80:	80 91 0c 02 	lds	r24, 0x020C
     f84:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
					updateGreenLed(pwm_green);
     f88:	80 91 0d 02 	lds	r24, 0x020D
     f8c:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
					updateBlueLed(pwm_blue);
     f90:	80 91 0e 02 	lds	r24, 0x020E
     f94:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
					enableObstacleAvoidance();
     f98:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <enableObstacleAvoidance>
					setLeftSpeed(25);
     f9c:	89 e1       	ldi	r24, 0x19	; 25
     f9e:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
					setRightSpeed(25);
     fa2:	89 e1       	ldi	r24, 0x19	; 25
     fa4:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
     fa8:	90 91 60 03 	lds	r25, 0x0360
     fac:	8b cd       	rjmp	.-1258   	; 0xac4 <main+0x120>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     fae:	0e 94 f1 5d 	call	0xbbe2	; 0xbbe2 <rand>
     fb2:	6e e1       	ldi	r22, 0x1E	; 30
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
     fba:	ed 81       	ldd	r30, Y+5	; 0x05
     fbc:	fe 81       	ldd	r31, Y+6	; 0x06
     fbe:	e8 0f       	add	r30, r24
     fc0:	f9 1f       	adc	r31, r25
     fc2:	ef 77       	andi	r30, 0x7F	; 127
     fc4:	f0 70       	andi	r31, 0x00	; 0
     fc6:	fe 83       	std	Y+6, r31	; 0x06
     fc8:	ed 83       	std	Y+5, r30	; 0x05

				switch(rgbState) {
     fca:	80 91 0c 03 	lds	r24, 0x030C
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <main+0x630>
     fd2:	55 c5       	rjmp	.+2730   	; 0x1a7e <main+0x10da>
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	08 f0       	brcs	.+2      	; 0xfda <main+0x636>
     fd8:	50 c2       	rjmp	.+1184   	; 0x147a <main+0xad6>
					case 0:
						pwm_red = 255 - currRand;	
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	80 95       	com	r24
     fde:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     fe2:	30 92 0c 03 	sts	0x030C, r3
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     fe6:	2d 81       	ldd	r18, Y+5	; 0x05
     fe8:	3e 81       	ldd	r19, Y+6	; 0x06
     fea:	20 32       	cpi	r18, 0x20	; 32
     fec:	31 05       	cpc	r19, r1
     fee:	08 f0       	brcs	.+2      	; 0xff2 <main+0x64e>
     ff0:	85 c0       	rjmp	.+266    	; 0x10fc <main+0x758>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     ff2:	80 91 0d 02 	lds	r24, 0x020D
     ff6:	8f 3f       	cpi	r24, 0xFF	; 255
     ff8:	09 f4       	brne	.+2      	; 0xffc <main+0x658>
     ffa:	4e ce       	rjmp	.-868    	; 0xc98 <main+0x2f4>
     ffc:	80 91 0e 02 	lds	r24, 0x020E
    1000:	8f 3f       	cpi	r24, 0xFF	; 255
    1002:	09 f4       	brne	.+2      	; 0x1006 <main+0x662>
    1004:	49 ce       	rjmp	.-878    	; 0xc98 <main+0x2f4>
						pwm_red = 255;
    1006:	d0 92 0c 02 	sts	0x020C, r13
    100a:	46 ce       	rjmp	.-884    	; 0xc98 <main+0x2f4>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
    100c:	80 91 94 00 	lds	r24, 0x0094
    1010:	90 91 95 00 	lds	r25, 0x0095
    1014:	0e 94 f4 5d 	call	0xbbe8	; 0xbbe8 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
    1018:	0e 94 f1 5d 	call	0xbbe2	; 0xbbe2 <rand>
    101c:	6e e1       	ldi	r22, 0x1E	; 30
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
    1024:	0d 81       	ldd	r16, Y+5	; 0x05
    1026:	1e 81       	ldd	r17, Y+6	; 0x06
    1028:	08 0f       	add	r16, r24
    102a:	19 1f       	adc	r17, r25
    102c:	0f 77       	andi	r16, 0x7F	; 127
    102e:	10 70       	andi	r17, 0x00	; 0

				pwm_red = 255 - currRand;
    1030:	80 2f       	mov	r24, r16
    1032:	80 95       	com	r24
    1034:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
    1038:	80 91 94 00 	lds	r24, 0x0094
    103c:	90 91 95 00 	lds	r25, 0x0095
    1040:	0e 94 f4 5d 	call	0xbbe8	; 0xbbe8 <srand>
				currRand = (currRand + rand()%30) % 128;	
    1044:	0e 94 f1 5d 	call	0xbbe2	; 0xbbe2 <rand>
    1048:	6e e1       	ldi	r22, 0x1E	; 30
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
    1050:	08 0f       	add	r16, r24
    1052:	19 1f       	adc	r17, r25
    1054:	0f 77       	andi	r16, 0x7F	; 127
    1056:	10 70       	andi	r17, 0x00	; 0
				pwm_green = 255 - currRand;
    1058:	80 2f       	mov	r24, r16
    105a:	80 95       	com	r24
    105c:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
    1060:	80 91 94 00 	lds	r24, 0x0094
    1064:	90 91 95 00 	lds	r25, 0x0095
    1068:	0e 94 f4 5d 	call	0xbbe8	; 0xbbe8 <srand>
				currRand = (currRand + rand()%30) % 128;
    106c:	0e 94 f1 5d 	call	0xbbe2	; 0xbbe2 <rand>
    1070:	6e e1       	ldi	r22, 0x1E	; 30
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
    1078:	80 0f       	add	r24, r16
    107a:	91 1f       	adc	r25, r17
    107c:	8f 77       	andi	r24, 0x7F	; 127
    107e:	90 70       	andi	r25, 0x00	; 0
    1080:	9e 83       	std	Y+6, r25	; 0x06
    1082:	8d 83       	std	Y+5, r24	; 0x05
				pwm_blue = 255 - currRand;
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	80 95       	com	r24
    1088:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
    108c:	80 91 94 00 	lds	r24, 0x0094
    1090:	90 91 95 00 	lds	r25, 0x0095
    1094:	0e 94 f4 5d 	call	0xbbe8	; 0xbbe8 <srand>
				currRand2 = rand()%128;
    1098:	0e 94 f1 5d 	call	0xbbe2	; 0xbbe2 <rand>
    109c:	60 e8       	ldi	r22, 0x80	; 128
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
				if(currRand2<32) {
    10a4:	80 32       	cpi	r24, 0x20	; 32
    10a6:	91 05       	cpc	r25, r1
    10a8:	d0 f5       	brcc	.+116    	; 0x111e <main+0x77a>
					pwm_red = 255;
    10aa:	d0 92 0c 02 	sts	0x020C, r13
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
    10ae:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    10b2:	2b 01       	movw	r4, r22
    10b4:	3c 01       	movw	r6, r24
    10b6:	f0 cd       	rjmp	.-1056   	; 0xc98 <main+0x2f4>
						break;
				}
				break;
			
			case 14: // Multirobots communication: continuously change current color and make it change also for other robots
				switch(demoState) {
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	09 f0       	breq	.+2      	; 0x10be <main+0x71a>
    10bc:	d9 cd       	rjmp	.-1102   	; 0xc70 <main+0x2cc>
						irCommRxByteExpected = 1;
						irCommMsgCount = 0;
						break;

					case 1:	
						irCommTasks();
    10be:	0e 94 34 4f 	call	0x9e68	; 0x9e68 <irCommTasks>
						if(irCommDataSent()==1) {	
    10c2:	0e 94 44 4e 	call	0x9c88	; 0x9c88 <irCommDataSent>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <main+0x728>
    10ca:	96 c7       	rjmp	.+3884   	; 0x1ff8 <main+0x1654>
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
    10cc:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <irCommDataAvailable>
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <main+0x732>
    10d4:	62 c7       	rjmp	.+3780   	; 0x1f9a <main+0x15f6>
    10d6:	90 91 60 03 	lds	r25, 0x0360
    10da:	f4 cc       	rjmp	.-1560   	; 0xac4 <main+0x120>
						break;
				}									
				break;

			case 15:// clock calibration
				switch(demoState) {
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	09 f0       	breq	.+2      	; 0x10e2 <main+0x73e>
    10e0:	c7 cd       	rjmp	.-1138   	; 0xc70 <main+0x2cc>
						*/
						demoState = 1;						
						break;
						
					case 1:			
						usart0Transmit(irCommand,1);
    10e2:	80 91 11 03 	lds	r24, 0x0311
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
						currentOsccal = OSCCAL;
    10ec:	80 91 66 00 	lds	r24, 0x0066
    10f0:	80 93 5f 04 	sts	0x045F, r24
						usart0Transmit(currentOsccal,1);
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    10fa:	ed cf       	rjmp	.-38     	; 0x10d6 <main+0x732>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
    10fc:	20 34       	cpi	r18, 0x40	; 64
    10fe:	31 05       	cpc	r19, r1
    1100:	08 f0       	brcs	.+2      	; 0x1104 <main+0x760>
    1102:	ac c4       	rjmp	.+2392   	; 0x1a5c <main+0x10b8>
					if(pwm_red!=255 && pwm_blue!=255) {
    1104:	80 91 0c 02 	lds	r24, 0x020C
    1108:	8f 3f       	cpi	r24, 0xFF	; 255
    110a:	09 f4       	brne	.+2      	; 0x110e <main+0x76a>
    110c:	c5 cd       	rjmp	.-1142   	; 0xc98 <main+0x2f4>
    110e:	80 91 0e 02 	lds	r24, 0x020E
    1112:	8f 3f       	cpi	r24, 0xFF	; 255
    1114:	09 f4       	brne	.+2      	; 0x1118 <main+0x774>
    1116:	c0 cd       	rjmp	.-1152   	; 0xc98 <main+0x2f4>
						pwm_green = 255;
    1118:	d0 92 0d 02 	sts	0x020D, r13
    111c:	bd cd       	rjmp	.-1158   	; 0xc98 <main+0x2f4>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
    111e:	80 34       	cpi	r24, 0x40	; 64
    1120:	91 05       	cpc	r25, r1
    1122:	08 f0       	brcs	.+2      	; 0x1126 <main+0x782>
    1124:	12 c5       	rjmp	.+2596   	; 0x1b4a <main+0x11a6>
					pwm_green = 255;
    1126:	d0 92 0d 02 	sts	0x020D, r13
    112a:	c1 cf       	rjmp	.-126    	; 0x10ae <main+0x70a>

					break;

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
    112c:	83 30       	cpi	r24, 0x03	; 3
    112e:	09 f4       	brne	.+2      	; 0x1132 <main+0x78e>
    1130:	52 c5       	rjmp	.+2724   	; 0x1bd6 <main+0x1232>
    1132:	84 30       	cpi	r24, 0x04	; 4
    1134:	09 f0       	breq	.+2      	; 0x1138 <main+0x794>
    1136:	9c cd       	rjmp	.-1224   	; 0xc70 <main+0x2cc>
							demoStartTime = getTime100MicroSec();
						}
						break;

					case 4:	// rotate left
						irCommTasks();
    1138:	0e 94 34 4f 	call	0x9e68	; 0x9e68 <irCommTasks>
						if(theta >= targetAngle) {
    113c:	69 81       	ldd	r22, Y+1	; 0x01
    113e:	7a 81       	ldd	r23, Y+2	; 0x02
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	20 91 87 03 	lds	r18, 0x0387
    1148:	30 91 88 03 	lds	r19, 0x0388
    114c:	40 91 89 03 	lds	r20, 0x0389
    1150:	50 91 8a 03 	lds	r21, 0x038A
    1154:	0e 94 d3 5a 	call	0xb5a6	; 0xb5a6 <__cmpsf2>
    1158:	18 16       	cp	r1, r24
    115a:	0c f4       	brge	.+2      	; 0x115e <main+0x7ba>
    115c:	bc cf       	rjmp	.-136    	; 0x10d6 <main+0x732>
							setLeftSpeed(0);
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
							setRightSpeed(0);
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
							demoState = 2;
    116a:	e2 e0       	ldi	r30, 0x02	; 2
    116c:	e0 93 64 03 	sts	0x0364, r30
							demoStartTime = getTime100MicroSec();
    1170:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    1174:	60 93 68 03 	sts	0x0368, r22
    1178:	70 93 69 03 	sts	0x0369, r23
    117c:	80 93 6a 03 	sts	0x036A, r24
    1180:	90 93 6b 03 	sts	0x036B, r25
    1184:	90 91 60 03 	lds	r25, 0x0360
    1188:	9d cc       	rjmp	.-1734   	; 0xac4 <main+0x120>
						break;
				}
				break;

			case 12:	// IR local communication: 2 or more robots pass information between them in sequence
				switch(demoState) {
    118a:	82 30       	cpi	r24, 0x02	; 2
    118c:	09 f4       	brne	.+2      	; 0x1190 <main+0x7ec>
    118e:	7f c4       	rjmp	.+2302   	; 0x1a8e <main+0x10ea>
    1190:	83 30       	cpi	r24, 0x03	; 3
    1192:	09 f0       	breq	.+2      	; 0x1196 <main+0x7f2>
    1194:	97 cc       	rjmp	.-1746   	; 0xac4 <main+0x120>
						break;

					case 3:	// led is on
							// transmission: send 0xFF untill the previous robot is turned off
							// reception: I know that it is turned off when I receive the previous robot id 
						irCommTasks();
    1196:	0e 94 34 4f 	call	0x9e68	; 0x9e68 <irCommTasks>
						if(irCommDataSent()==1) {
    119a:	0e 94 44 4e 	call	0x9c88	; 0x9c88 <irCommDataSent>
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <main+0x800>
    11a2:	99 cf       	rjmp	.-206    	; 0x10d6 <main+0x732>
							if(irCommDataAvailable()==1) {
    11a4:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <irCommDataAvailable>
    11a8:	98 2f       	mov	r25, r24
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <main+0x80c>
    11ae:	93 cf       	rjmp	.-218    	; 0x10d6 <main+0x732>
								if(irCommLedToggle==0) {
    11b0:	80 91 eb 03 	lds	r24, 0x03EB
    11b4:	88 23       	and	r24, r24
    11b6:	11 f0       	breq	.+4      	; 0x11bc <main+0x818>
    11b8:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__stack+0x1ed>
									irCommLedToggle = 1;
    11bc:	90 93 eb 03 	sts	0x03EB, r25
									updateBlueLed(255);
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
									updateRedLed(255);
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
									updateGreenLed(128);
    11cc:	80 e8       	ldi	r24, 0x80	; 128
    11ce:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
									irCommLedToggle = 0;
									updateBlueLed(255);
									updateRedLed(255);
									updateGreenLed(235);
								}
								i = irCommReadData();
    11d2:	0e 94 4f 4e 	call	0x9c9e	; 0x9c9e <irCommReadData>
    11d6:	a8 2e       	mov	r10, r24
    11d8:	bb 24       	eor	r11, r11
								if(irCommRobotId == 0) {
    11da:	80 91 e9 03 	lds	r24, 0x03E9
    11de:	88 23       	and	r24, r24
    11e0:	11 f4       	brne	.+4      	; 0x11e6 <main+0x842>
									if(i == (unsigned int)(irCommRobotsNum-1)) {
    11e2:	80 91 ea 03 	lds	r24, 0x03EA
										demoState = 1;
									} else {
										irCommSendData(0xFF);
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
    11e6:	88 2e       	mov	r8, r24
    11e8:	99 24       	eor	r9, r9
    11ea:	08 94       	sec
    11ec:	81 08       	sbc	r8, r1
    11ee:	91 08       	sbc	r9, r1
    11f0:	8a 14       	cp	r8, r10
    11f2:	9b 04       	cpc	r9, r11
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <main+0x854>
    11f6:	26 c5       	rjmp	.+2636   	; 0x1c44 <main+0x12a0>
										demoState = 1;
									} else {
										irCommSendData(0xFF);
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <irCommSendData>
    11fe:	45 01       	movw	r8, r10
    1200:	90 91 60 03 	lds	r25, 0x0360
    1204:	5f cc       	rjmp	.-1858   	; 0xac4 <main+0x120>

				}
				break;

			case 13: // IR local communication: listen and transmit continuously
				switch(demoState) {
    1206:	82 30       	cpi	r24, 0x02	; 2
    1208:	09 f0       	breq	.+2      	; 0x120c <main+0x868>
    120a:	32 cd       	rjmp	.-1436   	; 0xc70 <main+0x2cc>
						irCommSendData(irCommRxByteExpected);													
						demoState = 2;
						break;

					case 2:
						irCommTasks();
    120c:	0e 94 34 4f 	call	0x9e68	; 0x9e68 <irCommTasks>
						if(irCommDataSent()==1) {							
    1210:	0e 94 44 4e 	call	0x9c88	; 0x9c88 <irCommDataSent>
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	09 f4       	brne	.+2      	; 0x121a <main+0x876>
    1218:	37 c6       	rjmp	.+3182   	; 0x1e88 <main+0x14e4>
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
							}
						}
						if(irCommDataAvailable()==1) {
    121a:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <irCommDataAvailable>
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	09 f0       	breq	.+2      	; 0x1224 <main+0x880>
    1222:	59 cf       	rjmp	.-334    	; 0x10d6 <main+0x732>
							irCommReadData();
    1224:	0e 94 4f 4e 	call	0x9c9e	; 0x9c9e <irCommReadData>
							if(i<7) {
    1228:	b7 e0       	ldi	r27, 0x07	; 7
    122a:	8b 16       	cp	r8, r27
    122c:	91 04       	cpc	r9, r1
    122e:	08 f4       	brcc	.+2      	; 0x1232 <main+0x88e>
    1230:	cd c7       	rjmp	.+3994   	; 0x21cc <main+0x1828>
							} else {
								i = 0;
							}
							switch(i) {
								case 0: 
									updateRedLed(255);
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
									updateGreenLed(255);
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
									updateBlueLed(255);
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
    1244:	88 24       	eor	r8, r8
    1246:	99 24       	eor	r9, r9
    1248:	90 91 60 03 	lds	r25, 0x0360
    124c:	3b cc       	rjmp	.-1930   	; 0xac4 <main+0x120>
					}
					break;
			
			case 7:
				irEnabled = 0;	// Disable tv remote to avoid involuntary/wrong commands reception.
					switch(demoState) {
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	09 f4       	brne	.+2      	; 0x1254 <main+0x8b0>
    1252:	b0 c5       	rjmp	.+2912   	; 0x1db4 <main+0x1410>
    1254:	84 30       	cpi	r24, 0x04	; 4
    1256:	08 f4       	brcc	.+2      	; 0x125a <main+0x8b6>
    1258:	fb c4       	rjmp	.+2550   	; 0x1c50 <main+0x12ac>
    125a:	85 30       	cpi	r24, 0x05	; 5
    125c:	09 f0       	breq	.+2      	; 0x1260 <main+0x8bc>
    125e:	f7 cc       	rjmp	.-1554   	; 0xc4e <main+0x2aa>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
    1260:	0e 94 02 45 	call	0x8a04	; 0x8a04 <turnOffGreenLeds>
							GREEN_LED6_ON;
    1264:	80 91 0b 01 	lds	r24, 0x010B
    1268:	8f 7b       	andi	r24, 0xBF	; 191
    126a:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    126e:	80 91 0b 01 	lds	r24, 0x010B
    1272:	8f 77       	andi	r24, 0x7F	; 127
    1274:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    1278:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    127c:	60 93 70 03 	sts	0x0370, r22
    1280:	70 93 71 03 	sts	0x0371, r23
    1284:	80 93 72 03 	sts	0x0372, r24
    1288:	90 93 73 03 	sts	0x0373, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
    128c:	20 91 68 03 	lds	r18, 0x0368
    1290:	30 91 69 03 	lds	r19, 0x0369
    1294:	40 91 6a 03 	lds	r20, 0x036A
    1298:	50 91 6b 03 	lds	r21, 0x036B
    129c:	62 1b       	sub	r22, r18
    129e:	73 0b       	sbc	r23, r19
    12a0:	84 0b       	sbc	r24, r20
    12a2:	95 0b       	sbc	r25, r21
    12a4:	6b 52       	subi	r22, 0x2B	; 43
    12a6:	7c 41       	sbci	r23, 0x1C	; 28
    12a8:	80 40       	sbci	r24, 0x00	; 0
    12aa:	90 40       	sbci	r25, 0x00	; 0
    12ac:	08 f4       	brcc	.+2      	; 0x12b0 <main+0x90c>
    12ae:	cf cc       	rjmp	.-1634   	; 0xc4e <main+0x2aa>
								demoStartTime = getTime100MicroSec();
    12b0:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    12b4:	60 93 68 03 	sts	0x0368, r22
    12b8:	70 93 69 03 	sts	0x0369, r23
    12bc:	80 93 6a 03 	sts	0x036A, r24
    12c0:	90 93 6b 03 	sts	0x036B, r25
								demoState = 0;							
    12c4:	10 92 64 03 	sts	0x0364, r1
    12c8:	c2 cc       	rjmp	.-1660   	; 0xc4e <main+0x2aa>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
    12ca:	82 30       	cpi	r24, 0x02	; 2
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <main+0x92c>
    12ce:	fa cb       	rjmp	.-2060   	; 0xac4 <main+0x120>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
    12d0:	80 91 0e 03 	lds	r24, 0x030E
    12d4:	88 23       	and	r24, r24
    12d6:	09 f4       	brne	.+2      	; 0x12da <main+0x936>
    12d8:	f5 cb       	rjmp	.-2070   	; 0xac4 <main+0x120>
								turnOnGreenLeds();
    12da:	0e 94 1b 45 	call	0x8a36	; 0x8a36 <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
    12de:	60 91 07 03 	lds	r22, 0x0307
    12e2:	70 91 08 03 	lds	r23, 0x0308
    12e6:	8e ef       	ldi	r24, 0xFE	; 254
    12e8:	9f e0       	ldi	r25, 0x0F	; 15
    12ea:	0e 94 56 5e 	call	0xbcac	; 0xbcac <__eewr_word_m2560>
								turnOffGreenLeds();
    12ee:	0e 94 02 45 	call	0x8a04	; 0x8a04 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
    12f2:	8a ea       	ldi	r24, 0xAA	; 170
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								addressReceived = 0;
    12fa:	10 92 0e 03 	sts	0x030E, r1
								menuChoice = 0;
    12fe:	10 92 0d 03 	sts	0x030D, r1
    1302:	90 91 60 03 	lds	r25, 0x0360
    1306:	de cb       	rjmp	.-2116   	; 0xac4 <main+0x120>
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
    1308:	82 30       	cpi	r24, 0x02	; 2
    130a:	09 f0       	breq	.+2      	; 0x130e <main+0x96a>
    130c:	e4 ce       	rjmp	.-568    	; 0x10d6 <main+0x732>
							updateBlueLed(pwm_blue);
							rgbLedState = 2;
							break;

						case 2:
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_500_MSEC)) {
    130e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    1312:	20 91 6c 03 	lds	r18, 0x036C
    1316:	30 91 6d 03 	lds	r19, 0x036D
    131a:	40 91 6e 03 	lds	r20, 0x036E
    131e:	50 91 6f 03 	lds	r21, 0x036F
    1322:	62 1b       	sub	r22, r18
    1324:	73 0b       	sbc	r23, r19
    1326:	84 0b       	sbc	r24, r20
    1328:	95 0b       	sbc	r25, r21
    132a:	67 5c       	subi	r22, 0xC7	; 199
    132c:	72 41       	sbci	r23, 0x12	; 18
    132e:	80 40       	sbci	r24, 0x00	; 0
    1330:	90 40       	sbci	r25, 0x00	; 0
    1332:	08 f4       	brcc	.+2      	; 0x1336 <main+0x992>
    1334:	d0 ce       	rjmp	.-608    	; 0x10d6 <main+0x732>
								rgbLedState = 0;
    1336:	10 92 7f 03 	sts	0x037F, r1
								demoStartTime2 = getTime100MicroSec();
    133a:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    133e:	60 93 6c 03 	sts	0x036C, r22
    1342:	70 93 6d 03 	sts	0x036D, r23
    1346:	80 93 6e 03 	sts	0x036E, r24
    134a:	90 93 6f 03 	sts	0x036F, r25
								demoEndTime = getTime100MicroSec();
    134e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    1352:	60 93 70 03 	sts	0x0370, r22
    1356:	70 93 71 03 	sts	0x0371, r23
    135a:	80 93 72 03 	sts	0x0372, r24
    135e:	90 93 73 03 	sts	0x0373, r25
								greenLedState = 0;
    1362:	10 92 7e 03 	sts	0x037E, r1
								setGreenLed(greenLedState, 1);
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	61 e0       	ldi	r22, 0x01	; 1
    136a:	0e 94 65 44 	call	0x88ca	; 0x88ca <setGreenLed>
    136e:	90 91 60 03 	lds	r25, 0x0360
    1372:	a8 cb       	rjmp	.-2224   	; 0xac4 <main+0x120>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	09 f0       	breq	.+2      	; 0x137a <main+0x9d6>
    1378:	32 cc       	rjmp	.-1948   	; 0xbde <main+0x23a>
								demoState = 2;							
							}
							break;

						case 2: // pause							
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_10_SEC)) {
    137a:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    137e:	20 91 68 03 	lds	r18, 0x0368
    1382:	30 91 69 03 	lds	r19, 0x0369
    1386:	40 91 6a 03 	lds	r20, 0x036A
    138a:	50 91 6b 03 	lds	r21, 0x036B
    138e:	62 1b       	sub	r22, r18
    1390:	73 0b       	sbc	r23, r19
    1392:	84 0b       	sbc	r24, r20
    1394:	95 0b       	sbc	r25, r21
    1396:	6a 59       	subi	r22, 0x9A	; 154
    1398:	77 47       	sbci	r23, 0x77	; 119
    139a:	81 40       	sbci	r24, 0x01	; 1
    139c:	90 40       	sbci	r25, 0x00	; 0
    139e:	08 f4       	brcc	.+2      	; 0x13a2 <main+0x9fe>
    13a0:	1e cc       	rjmp	.-1988   	; 0xbde <main+0x23a>
								setRightSpeed(20);
    13a2:	84 e1       	ldi	r24, 0x14	; 20
    13a4:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
								setLeftSpeed(20);								
    13a8:	84 e1       	ldi	r24, 0x14	; 20
    13aa:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();								
    13ae:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    13b2:	60 93 68 03 	sts	0x0368, r22
    13b6:	70 93 69 03 	sts	0x0369, r23
    13ba:	80 93 6a 03 	sts	0x036A, r24
    13be:	90 93 6b 03 	sts	0x036B, r25
								demoState = 1;							
    13c2:	30 92 64 03 	sts	0x0364, r3
							}
							break;
					}	
					
					switch(rgbLedState) {
    13c6:	80 91 7f 03 	lds	r24, 0x037F
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <main+0xa2c>
    13ce:	0c cc       	rjmp	.-2024   	; 0xbe8 <main+0x244>
							updateGreenLed(pwm_green);
							updateBlueLed(pwm_blue);
							break;

						case 1:		
							turnOffGreenLeds();					
    13d0:	0e 94 02 45 	call	0x8a04	; 0x8a04 <turnOffGreenLeds>
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
    13d4:	0e 94 f1 5d 	call	0xbbe2	; 0xbbe2 <rand>
    13d8:	60 e8       	ldi	r22, 0x80	; 128
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
							if(currRand > 95) {
    13e0:	80 36       	cpi	r24, 0x60	; 96
    13e2:	91 05       	cpc	r25, r1
    13e4:	08 f4       	brcc	.+2      	; 0x13e8 <main+0xa44>
    13e6:	4d c5       	rjmp	.+2714   	; 0x1e82 <main+0x14de>
								pwm_red = 255;
    13e8:	d0 92 0c 02 	sts	0x020C, r13
							} else {
								pwm_red = currRand;
							}

							currRand = rand()% 128;
    13ec:	0e 94 f1 5d 	call	0xbbe2	; 0xbbe2 <rand>
    13f0:	60 e8       	ldi	r22, 0x80	; 128
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
							if(currRand > 95) {
    13f8:	80 36       	cpi	r24, 0x60	; 96
    13fa:	91 05       	cpc	r25, r1
    13fc:	08 f4       	brcc	.+2      	; 0x1400 <main+0xa5c>
    13fe:	3e c5       	rjmp	.+2684   	; 0x1e7c <main+0x14d8>
								pwm_green = 255;
    1400:	d0 92 0d 02 	sts	0x020D, r13
							} else {
								pwm_green = currRand;
							}

							currRand = rand()% 128;
    1404:	0e 94 f1 5d 	call	0xbbe2	; 0xbbe2 <rand>
    1408:	60 e8       	ldi	r22, 0x80	; 128
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
							if(currRand > 95) {
    1410:	80 36       	cpi	r24, 0x60	; 96
    1412:	91 05       	cpc	r25, r1
    1414:	08 f4       	brcc	.+2      	; 0x1418 <main+0xa74>
    1416:	2f c5       	rjmp	.+2654   	; 0x1e76 <main+0x14d2>
								pwm_blue = 255;
    1418:	d0 92 0e 02 	sts	0x020E, r13
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
    141c:	0e 94 f1 5d 	call	0xbbe2	; 0xbbe2 <rand>
    1420:	68 ec       	ldi	r22, 0xC8	; 200
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
							if(currRand<50) {
    142c:	82 33       	cpi	r24, 0x32	; 50
    142e:	91 05       	cpc	r25, r1
    1430:	08 f0       	brcs	.+2      	; 0x1434 <main+0xa90>
    1432:	1a c5       	rjmp	.+2612   	; 0x1e68 <main+0x14c4>
								pwm_red = 255;
    1434:	d0 92 0c 02 	sts	0x020C, r13
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
								pwm_blue = 255;
							}
							updateRedLed(pwm_red);
    1438:	80 91 0c 02 	lds	r24, 0x020C
    143c:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
							updateGreenLed(pwm_green);
    1440:	80 91 0d 02 	lds	r24, 0x020D
    1444:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
							updateBlueLed(pwm_blue);
    1448:	80 91 0e 02 	lds	r24, 0x020E
    144c:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
							rgbLedState = 2;
    1450:	92 e0       	ldi	r25, 0x02	; 2
    1452:	90 93 7f 03 	sts	0x037F, r25
    1456:	90 91 60 03 	lds	r25, 0x0360
    145a:	34 cb       	rjmp	.-2456   	; 0xac4 <main+0x120>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	09 f0       	breq	.+2      	; 0x1462 <main+0xabe>
    1460:	07 cc       	rjmp	.-2034   	; 0xc70 <main+0x2cc>
								demoState = 2;
							}
							break;						

						case 2:
							if(!calibrationWritten) {
    1462:	80 91 7d 03 	lds	r24, 0x037D
    1466:	88 23       	and	r24, r24
    1468:	09 f0       	breq	.+2      	; 0x146c <main+0xac8>
    146a:	02 cc       	rjmp	.-2044   	; 0xc70 <main+0x2cc>
								calibrationWritten = 1;
    146c:	30 92 7d 03 	sts	0x037D, r3
								writeDefaultCalibration();
    1470:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <writeDefaultCalibration>
    1474:	90 91 60 03 	lds	r25, 0x0360
    1478:	25 cb       	rjmp	.-2486   	; 0xac4 <main+0x120>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
    147a:	82 30       	cpi	r24, 0x02	; 2
    147c:	09 f0       	breq	.+2      	; 0x1480 <main+0xadc>
    147e:	b3 cd       	rjmp	.-1178   	; 0xfe6 <main+0x642>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	80 95       	com	r24
    1484:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    1488:	10 92 0c 03 	sts	0x030C, r1
    148c:	ac cd       	rjmp	.-1192   	; 0xfe6 <main+0x642>
						demoState = 1;
						i = 0;
						break;

					case 1:						
						irCommSendData(irCommRxByteExpected);													
    148e:	80 91 16 04 	lds	r24, 0x0416
    1492:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <irCommSendData>
						demoState = 2;
    1496:	a2 e0       	ldi	r26, 0x02	; 2
    1498:	a0 93 64 03 	sts	0x0364, r26
    149c:	90 91 60 03 	lds	r25, 0x0360
    14a0:	11 cb       	rjmp	.-2526   	; 0xac4 <main+0x120>
							demoStartTime = getTime100MicroSec();
							demoState = 1;
							break;

						case 1:
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
    14a2:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    14a6:	20 91 68 03 	lds	r18, 0x0368
    14aa:	30 91 69 03 	lds	r19, 0x0369
    14ae:	40 91 6a 03 	lds	r20, 0x036A
    14b2:	50 91 6b 03 	lds	r21, 0x036B
    14b6:	62 1b       	sub	r22, r18
    14b8:	73 0b       	sbc	r23, r19
    14ba:	84 0b       	sbc	r24, r20
    14bc:	95 0b       	sbc	r25, r21
    14be:	6e 51       	subi	r22, 0x1E	; 30
    14c0:	7b 44       	sbci	r23, 0x4B	; 75
    14c2:	80 40       	sbci	r24, 0x00	; 0
    14c4:	90 40       	sbci	r25, 0x00	; 0
    14c6:	08 f4       	brcc	.+2      	; 0x14ca <main+0xb26>
    14c8:	06 ce       	rjmp	.-1012   	; 0x10d6 <main+0x732>
								demoState = 2;
    14ca:	22 e0       	ldi	r18, 0x02	; 2
    14cc:	20 93 64 03 	sts	0x0364, r18
    14d0:	90 91 60 03 	lds	r25, 0x0360
    14d4:	f7 ca       	rjmp	.-2578   	; 0xac4 <main+0x120>
							setLeftSpeed(20);
							setRightSpeed(20);
							demoState = 1;
							break;
						case 1: // motion					
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_4_SEC)) {
    14d6:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    14da:	20 91 68 03 	lds	r18, 0x0368
    14de:	30 91 69 03 	lds	r19, 0x0369
    14e2:	40 91 6a 03 	lds	r20, 0x036A
    14e6:	50 91 6b 03 	lds	r21, 0x036B
    14ea:	62 1b       	sub	r22, r18
    14ec:	73 0b       	sbc	r23, r19
    14ee:	84 0b       	sbc	r24, r20
    14f0:	95 0b       	sbc	r25, r21
    14f2:	6e 53       	subi	r22, 0x3E	; 62
    14f4:	76 49       	sbci	r23, 0x96	; 150
    14f6:	80 40       	sbci	r24, 0x00	; 0
    14f8:	90 40       	sbci	r25, 0x00	; 0
    14fa:	08 f4       	brcc	.+2      	; 0x14fe <main+0xb5a>
    14fc:	70 cb       	rjmp	.-2336   	; 0xbde <main+0x23a>
								setRightSpeed(0);
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
								setLeftSpeed(0);								
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    150a:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    150e:	60 93 68 03 	sts	0x0368, r22
    1512:	70 93 69 03 	sts	0x0369, r23
    1516:	80 93 6a 03 	sts	0x036A, r24
    151a:	90 93 6b 03 	sts	0x036B, r25
								demoState = 2;							
    151e:	62 e0       	ldi	r22, 0x02	; 2
    1520:	60 93 64 03 	sts	0x0364, r22
    1524:	5c cb       	rjmp	.-2376   	; 0xbde <main+0x23a>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
    1526:	0e 94 1b 45 	call	0x8a36	; 0x8a36 <turnOnGreenLeds>
							updateRedLed(pwm_red);
    152a:	80 91 0c 02 	lds	r24, 0x020C
    152e:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
							updateGreenLed(pwm_green);
    1532:	80 91 0d 02 	lds	r24, 0x020D
    1536:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
							updateBlueLed(pwm_blue);
    153a:	80 91 0e 02 	lds	r24, 0x020E
    153e:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
							LED_IR1_LOW;
    1542:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
    1544:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
    1546:	80 91 10 03 	lds	r24, 0x0310
    154a:	88 23       	and	r24, r24
    154c:	09 f4       	brne	.+2      	; 0x1550 <main+0xbac>
    154e:	c3 cd       	rjmp	.-1146   	; 0x10d6 <main+0x732>
								getDataNow = 0;	
    1550:	10 92 10 03 	sts	0x0310, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1554:	80 91 57 02 	lds	r24, 0x0257
    1558:	61 e0       	ldi	r22, 0x01	; 1
    155a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    155e:	80 91 58 02 	lds	r24, 0x0258
    1562:	61 e0       	ldi	r22, 0x01	; 1
    1564:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1568:	80 91 27 02 	lds	r24, 0x0227
    156c:	90 91 28 02 	lds	r25, 0x0228
    1570:	61 e0       	ldi	r22, 0x01	; 1
    1572:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1576:	80 91 27 02 	lds	r24, 0x0227
    157a:	90 91 28 02 	lds	r25, 0x0228
    157e:	89 2f       	mov	r24, r25
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1586:	80 91 59 02 	lds	r24, 0x0259
    158a:	61 e0       	ldi	r22, 0x01	; 1
    158c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1590:	80 91 5a 02 	lds	r24, 0x025A
    1594:	61 e0       	ldi	r22, 0x01	; 1
    1596:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    159a:	80 91 2b 02 	lds	r24, 0x022B
    159e:	90 91 2c 02 	lds	r25, 0x022C
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    15a8:	80 91 2b 02 	lds	r24, 0x022B
    15ac:	90 91 2c 02 	lds	r25, 0x022C
    15b0:	89 2f       	mov	r24, r25
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    15b8:	80 91 5b 02 	lds	r24, 0x025B
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    15c2:	80 91 5c 02 	lds	r24, 0x025C
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    15cc:	80 91 2f 02 	lds	r24, 0x022F
    15d0:	90 91 30 02 	lds	r25, 0x0230
    15d4:	61 e0       	ldi	r22, 0x01	; 1
    15d6:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    15da:	80 91 2f 02 	lds	r24, 0x022F
    15de:	90 91 30 02 	lds	r25, 0x0230
    15e2:	89 2f       	mov	r24, r25
    15e4:	61 e0       	ldi	r22, 0x01	; 1
    15e6:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    15ea:	80 91 5d 02 	lds	r24, 0x025D
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    15f4:	80 91 5e 02 	lds	r24, 0x025E
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    15fe:	80 91 33 02 	lds	r24, 0x0233
    1602:	90 91 34 02 	lds	r25, 0x0234
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    160c:	80 91 33 02 	lds	r24, 0x0233
    1610:	90 91 34 02 	lds	r25, 0x0234
    1614:	89 2f       	mov	r24, r25
    1616:	61 e0       	ldi	r22, 0x01	; 1
    1618:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    161c:	80 91 5f 02 	lds	r24, 0x025F
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1626:	80 91 60 02 	lds	r24, 0x0260
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1630:	80 91 37 02 	lds	r24, 0x0237
    1634:	90 91 38 02 	lds	r25, 0x0238
    1638:	61 e0       	ldi	r22, 0x01	; 1
    163a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    163e:	80 91 37 02 	lds	r24, 0x0237
    1642:	90 91 38 02 	lds	r25, 0x0238
    1646:	89 2f       	mov	r24, r25
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    164e:	80 91 61 02 	lds	r24, 0x0261
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1658:	80 91 62 02 	lds	r24, 0x0262
    165c:	61 e0       	ldi	r22, 0x01	; 1
    165e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1662:	80 91 3b 02 	lds	r24, 0x023B
    1666:	90 91 3c 02 	lds	r25, 0x023C
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1670:	80 91 3b 02 	lds	r24, 0x023B
    1674:	90 91 3c 02 	lds	r25, 0x023C
    1678:	89 2f       	mov	r24, r25
    167a:	61 e0       	ldi	r22, 0x01	; 1
    167c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1680:	80 91 63 02 	lds	r24, 0x0263
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    168a:	80 91 64 02 	lds	r24, 0x0264
    168e:	61 e0       	ldi	r22, 0x01	; 1
    1690:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    1694:	80 91 3f 02 	lds	r24, 0x023F
    1698:	90 91 40 02 	lds	r25, 0x0240
    169c:	61 e0       	ldi	r22, 0x01	; 1
    169e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    16a2:	80 91 3f 02 	lds	r24, 0x023F
    16a6:	90 91 40 02 	lds	r25, 0x0240
    16aa:	89 2f       	mov	r24, r25
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    16b2:	80 91 65 02 	lds	r24, 0x0265
    16b6:	61 e0       	ldi	r22, 0x01	; 1
    16b8:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    16bc:	80 91 66 02 	lds	r24, 0x0266
    16c0:	61 e0       	ldi	r22, 0x01	; 1
    16c2:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    16c6:	80 91 43 02 	lds	r24, 0x0243
    16ca:	90 91 44 02 	lds	r25, 0x0244
    16ce:	61 e0       	ldi	r22, 0x01	; 1
    16d0:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    16d4:	80 91 43 02 	lds	r24, 0x0243
    16d8:	90 91 44 02 	lds	r25, 0x0244
    16dc:	89 2f       	mov	r24, r25
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    16e4:	80 91 67 02 	lds	r24, 0x0267
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    16ee:	80 91 68 02 	lds	r24, 0x0268
    16f2:	61 e0       	ldi	r22, 0x01	; 1
    16f4:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    16f8:	80 91 47 02 	lds	r24, 0x0247
    16fc:	90 91 48 02 	lds	r25, 0x0248
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1706:	80 91 47 02 	lds	r24, 0x0247
    170a:	90 91 48 02 	lds	r25, 0x0248
    170e:	89 2f       	mov	r24, r25
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1716:	80 91 69 02 	lds	r24, 0x0269
    171a:	61 e0       	ldi	r22, 0x01	; 1
    171c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1720:	80 91 6a 02 	lds	r24, 0x026A
    1724:	61 e0       	ldi	r22, 0x01	; 1
    1726:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    172a:	80 91 4b 02 	lds	r24, 0x024B
    172e:	90 91 4c 02 	lds	r25, 0x024C
    1732:	61 e0       	ldi	r22, 0x01	; 1
    1734:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    1738:	80 91 4b 02 	lds	r24, 0x024B
    173c:	90 91 4c 02 	lds	r25, 0x024C
    1740:	89 2f       	mov	r24, r25
    1742:	61 e0       	ldi	r22, 0x01	; 1
    1744:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    1748:	80 91 6b 02 	lds	r24, 0x026B
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1752:	80 91 6c 02 	lds	r24, 0x026C
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    175c:	80 91 4f 02 	lds	r24, 0x024F
    1760:	90 91 50 02 	lds	r25, 0x0250
    1764:	61 e0       	ldi	r22, 0x01	; 1
    1766:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    176a:	80 91 4f 02 	lds	r24, 0x024F
    176e:	90 91 50 02 	lds	r25, 0x0250
    1772:	89 2f       	mov	r24, r25
    1774:	61 e0       	ldi	r22, 0x01	; 1
    1776:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
    177a:	80 91 6d 02 	lds	r24, 0x026D
    177e:	61 e0       	ldi	r22, 0x01	; 1
    1780:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
    1784:	80 91 6e 02 	lds	r24, 0x026E
    1788:	61 e0       	ldi	r22, 0x01	; 1
    178a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
    178e:	80 91 53 02 	lds	r24, 0x0253
    1792:	90 91 54 02 	lds	r25, 0x0254
    1796:	61 e0       	ldi	r22, 0x01	; 1
    1798:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
    179c:	80 91 53 02 	lds	r24, 0x0253
    17a0:	90 91 54 02 	lds	r25, 0x0254
    17a4:	89 2f       	mov	r24, r25
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
    17ac:	80 91 1a 03 	lds	r24, 0x031A
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(accX>>8,1);
    17b6:	80 91 1b 03 	lds	r24, 0x031B
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
    17c0:	80 91 1c 03 	lds	r24, 0x031C
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(accY>>8,1);
    17ca:	80 91 1d 03 	lds	r24, 0x031D
    17ce:	61 e0       	ldi	r22, 0x01	; 1
    17d0:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
    17d4:	80 91 1e 03 	lds	r24, 0x031E
    17d8:	61 e0       	ldi	r22, 0x01	; 1
    17da:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(accZ>>8,1);
    17de:	80 91 1f 03 	lds	r24, 0x031F
    17e2:	61 e0       	ldi	r22, 0x01	; 1
    17e4:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(irCommand,1);
    17e8:	80 91 11 03 	lds	r24, 0x0311
    17ec:	61 e0       	ldi	r22, 0x01	; 1
    17ee:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(currentSelector,1);
    17f2:	80 91 60 03 	lds	r24, 0x0360
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(BUTTON0,1);
    17fc:	80 91 03 01 	lds	r24, 0x0103
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	80 72       	andi	r24, 0x20	; 32
    1804:	90 70       	andi	r25, 0x00	; 0
    1806:	95 95       	asr	r25
    1808:	87 95       	ror	r24
    180a:	95 95       	asr	r25
    180c:	87 95       	ror	r24
    180e:	95 95       	asr	r25
    1810:	87 95       	ror	r24
    1812:	95 95       	asr	r25
    1814:	87 95       	ror	r24
    1816:	95 95       	asr	r25
    1818:	87 95       	ror	r24
    181a:	61 e0       	ldi	r22, 0x01	; 1
    181c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(rfFlags,1);
    1820:	80 91 09 03 	lds	r24, 0x0309
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
    182a:	60 91 87 03 	lds	r22, 0x0387
    182e:	70 91 88 03 	lds	r23, 0x0388
    1832:	80 91 89 03 	lds	r24, 0x0389
    1836:	90 91 8a 03 	lds	r25, 0x038A
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e4       	ldi	r19, 0x40	; 64
    183e:	4f e0       	ldi	r20, 0x0F	; 15
    1840:	54 e4       	ldi	r21, 0x44	; 68
    1842:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    1846:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	61 e0       	ldi	r22, 0x01	; 1
    1850:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
    1854:	60 91 87 03 	lds	r22, 0x0387
    1858:	70 91 88 03 	lds	r23, 0x0388
    185c:	80 91 89 03 	lds	r24, 0x0389
    1860:	90 91 8a 03 	lds	r25, 0x038A
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e4       	ldi	r19, 0x40	; 64
    1868:	4f e0       	ldi	r20, 0x0F	; 15
    186a:	54 e4       	ldi	r21, 0x44	; 68
    186c:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    1870:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__fixunssfsi>
    1874:	87 2f       	mov	r24, r23
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
    187c:	60 91 8f 03 	lds	r22, 0x038F
    1880:	70 91 90 03 	lds	r23, 0x0390
    1884:	80 91 91 03 	lds	r24, 0x0391
    1888:	90 91 92 03 	lds	r25, 0x0392
    188c:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__fixunssfsi>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
    189a:	60 91 8f 03 	lds	r22, 0x038F
    189e:	70 91 90 03 	lds	r23, 0x0390
    18a2:	80 91 91 03 	lds	r24, 0x0391
    18a6:	90 91 92 03 	lds	r25, 0x0392
    18aa:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__fixunssfsi>
    18ae:	87 2f       	mov	r24, r23
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
    18b6:	60 91 93 03 	lds	r22, 0x0393
    18ba:	70 91 94 03 	lds	r23, 0x0394
    18be:	80 91 95 03 	lds	r24, 0x0395
    18c2:	90 91 96 03 	lds	r25, 0x0396
    18c6:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
    18d4:	60 91 93 03 	lds	r22, 0x0393
    18d8:	70 91 94 03 	lds	r23, 0x0394
    18dc:	80 91 95 03 	lds	r24, 0x0395
    18e0:	90 91 96 03 	lds	r25, 0x0396
    18e4:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__fixunssfsi>
    18e8:	87 2f       	mov	r24, r23
    18ea:	61 e0       	ldi	r22, 0x01	; 1
    18ec:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
    18f0:	60 91 d3 02 	lds	r22, 0x02D3
    18f4:	70 91 d4 02 	lds	r23, 0x02D4
    18f8:	80 91 d5 02 	lds	r24, 0x02D5
    18fc:	90 91 d6 02 	lds	r25, 0x02D6
    1900:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
    190e:	60 91 d3 02 	lds	r22, 0x02D3
    1912:	70 91 d4 02 	lds	r23, 0x02D4
    1916:	80 91 d5 02 	lds	r24, 0x02D5
    191a:	90 91 d6 02 	lds	r25, 0x02D6
    191e:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	89 2f       	mov	r24, r25
    1928:	9a 2f       	mov	r25, r26
    192a:	ab 2f       	mov	r26, r27
    192c:	bb 27       	eor	r27, r27
    192e:	a7 fd       	sbrc	r26, 7
    1930:	ba 95       	dec	r27
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
    1938:	60 91 d3 02 	lds	r22, 0x02D3
    193c:	70 91 d4 02 	lds	r23, 0x02D4
    1940:	80 91 d5 02 	lds	r24, 0x02D5
    1944:	90 91 d6 02 	lds	r25, 0x02D6
    1948:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	cd 01       	movw	r24, r26
    1952:	bb 27       	eor	r27, r27
    1954:	97 fd       	sbrc	r25, 7
    1956:	b0 95       	com	r27
    1958:	ab 2f       	mov	r26, r27
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
    1960:	60 91 d3 02 	lds	r22, 0x02D3
    1964:	70 91 d4 02 	lds	r23, 0x02D4
    1968:	80 91 d5 02 	lds	r24, 0x02D5
    196c:	90 91 d6 02 	lds	r25, 0x02D6
    1970:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	8b 2f       	mov	r24, r27
    197a:	bb 27       	eor	r27, r27
    197c:	87 fd       	sbrc	r24, 7
    197e:	b0 95       	com	r27
    1980:	9b 2f       	mov	r25, r27
    1982:	ab 2f       	mov	r26, r27
    1984:	61 e0       	ldi	r22, 0x01	; 1
    1986:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
    198a:	60 91 cf 02 	lds	r22, 0x02CF
    198e:	70 91 d0 02 	lds	r23, 0x02D0
    1992:	80 91 d1 02 	lds	r24, 0x02D1
    1996:	90 91 d2 02 	lds	r25, 0x02D2
    199a:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	61 e0       	ldi	r22, 0x01	; 1
    19a4:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
    19a8:	60 91 cf 02 	lds	r22, 0x02CF
    19ac:	70 91 d0 02 	lds	r23, 0x02D0
    19b0:	80 91 d1 02 	lds	r24, 0x02D1
    19b4:	90 91 d2 02 	lds	r25, 0x02D2
    19b8:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	89 2f       	mov	r24, r25
    19c2:	9a 2f       	mov	r25, r26
    19c4:	ab 2f       	mov	r26, r27
    19c6:	bb 27       	eor	r27, r27
    19c8:	a7 fd       	sbrc	r26, 7
    19ca:	ba 95       	dec	r27
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
    19d2:	60 91 cf 02 	lds	r22, 0x02CF
    19d6:	70 91 d0 02 	lds	r23, 0x02D0
    19da:	80 91 d1 02 	lds	r24, 0x02D1
    19de:	90 91 d2 02 	lds	r25, 0x02D2
    19e2:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	cd 01       	movw	r24, r26
    19ec:	bb 27       	eor	r27, r27
    19ee:	97 fd       	sbrc	r25, 7
    19f0:	b0 95       	com	r27
    19f2:	ab 2f       	mov	r26, r27
    19f4:	61 e0       	ldi	r22, 0x01	; 1
    19f6:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
    19fa:	60 91 cf 02 	lds	r22, 0x02CF
    19fe:	70 91 d0 02 	lds	r23, 0x02D0
    1a02:	80 91 d1 02 	lds	r24, 0x02D1
    1a06:	90 91 d2 02 	lds	r25, 0x02D2
    1a0a:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	8b 2f       	mov	r24, r27
    1a14:	bb 27       	eor	r27, r27
    1a16:	87 fd       	sbrc	r24, 7
    1a18:	b0 95       	com	r27
    1a1a:	9b 2f       	mov	r25, r27
    1a1c:	ab 2f       	mov	r26, r27
    1a1e:	61 e0       	ldi	r22, 0x01	; 1
    1a20:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
    1a24:	80 91 ed 02 	lds	r24, 0x02ED
    1a28:	90 91 ee 02 	lds	r25, 0x02EE
    1a2c:	95 95       	asr	r25
    1a2e:	87 95       	ror	r24
    1a30:	95 95       	asr	r25
    1a32:	87 95       	ror	r24
    1a34:	61 e0       	ldi	r22, 0x01	; 1
    1a36:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    1a3a:	80 91 eb 02 	lds	r24, 0x02EB
    1a3e:	90 91 ec 02 	lds	r25, 0x02EC
    1a42:	95 95       	asr	r25
    1a44:	87 95       	ror	r24
    1a46:	95 95       	asr	r25
    1a48:	87 95       	ror	r24
    1a4a:	61 e0       	ldi	r22, 0x01	; 1
    1a4c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    1a50:	8c e0       	ldi	r24, 0x0C	; 12
    1a52:	88 2e       	mov	r8, r24
    1a54:	91 2c       	mov	r9, r1
    1a56:	90 91 60 03 	lds	r25, 0x0360
    1a5a:	34 c8       	rjmp	.-3992   	; 0xac4 <main+0x120>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    1a5c:	20 36       	cpi	r18, 0x60	; 96
    1a5e:	31 05       	cpc	r19, r1
    1a60:	08 f0       	brcs	.+2      	; 0x1a64 <main+0x10c0>
    1a62:	1a c9       	rjmp	.-3532   	; 0xc98 <main+0x2f4>
					if(pwm_red!=255 && pwm_green!=255) {
    1a64:	80 91 0c 02 	lds	r24, 0x020C
    1a68:	8f 3f       	cpi	r24, 0xFF	; 255
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <main+0x10ca>
    1a6c:	15 c9       	rjmp	.-3542   	; 0xc98 <main+0x2f4>
    1a6e:	80 91 0d 02 	lds	r24, 0x020D
    1a72:	8f 3f       	cpi	r24, 0xFF	; 255
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <main+0x10d4>
    1a76:	10 c9       	rjmp	.-3552   	; 0xc98 <main+0x2f4>
						pwm_blue = 255;
    1a78:	d0 92 0e 02 	sts	0x020E, r13
    1a7c:	0d c9       	rjmp	.-3558   	; 0xc98 <main+0x2f4>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    1a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a80:	80 95       	com	r24
    1a82:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    1a86:	f2 e0       	ldi	r31, 0x02	; 2
    1a88:	f0 93 0c 03 	sts	0x030C, r31
    1a8c:	ac ca       	rjmp	.-2728   	; 0xfe6 <main+0x642>
						break;

					case 2: // led is off
							// transmission: continuously send my robot id to tell the next robot I turned off the led
							// reception: listen for my robot id and then turn on the led				
						irCommTasks();
    1a8e:	0e 94 34 4f 	call	0x9e68	; 0x9e68 <irCommTasks>
						if(irCommDataSent()==1) {
    1a92:	0e 94 44 4e 	call	0x9c88	; 0x9c88 <irCommDataSent>
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <main+0x10f8>
    1a9a:	f6 c2       	rjmp	.+1516   	; 0x2088 <main+0x16e4>
							irCommSendData(irCommRobotId);							
						}
						if(irCommDataAvailable()==1) {
    1a9c:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <irCommDataAvailable>
    1aa0:	98 2f       	mov	r25, r24
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <main+0x1104>
    1aa6:	17 cb       	rjmp	.-2514   	; 0x10d6 <main+0x732>
							if(irCommLedToggle==0) {
    1aa8:	80 91 eb 03 	lds	r24, 0x03EB
    1aac:	88 23       	and	r24, r24
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <main+0x110e>
    1ab0:	f0 c2       	rjmp	.+1504   	; 0x2092 <main+0x16ee>
								irCommLedToggle = 1;
    1ab2:	90 93 eb 03 	sts	0x03EB, r25
								updateRedLed(255);
    1ab6:	8f ef       	ldi	r24, 0xFF	; 255
    1ab8:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
							} else {
								irCommLedToggle = 0;
								updateRedLed(235);
							}
							i = irCommReadData();
    1abc:	0e 94 4f 4e 	call	0x9c9e	; 0x9c9e <irCommReadData>
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
							if(i == irCommRobotId) {
    1ac4:	80 91 e9 03 	lds	r24, 0x03E9
    1ac8:	88 2e       	mov	r8, r24
    1aca:	99 24       	eor	r9, r9
    1acc:	82 16       	cp	r8, r18
    1ace:	93 06       	cpc	r9, r19
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <main+0x1130>
    1ad2:	2d c4       	rjmp	.+2138   	; 0x232e <__stack+0x12f>
    1ad4:	49 01       	movw	r8, r18
    1ad6:	90 91 60 03 	lds	r25, 0x0360
    1ada:	0c 94 62 05 	jmp	0xac4	; 0xac4 <main+0x120>

					case 1: // led is on
							// transmission: continuously send the next robot id to tell him to turn on the led
							// reception: listen for 0xFF and then turn off the led; when I receive 0xFF it means the next robot has
							// received its id, thus it has turned on its led
						irCommTasks();
    1ade:	0e 94 34 4f 	call	0x9e68	; 0x9e68 <irCommTasks>
						if(irCommDataSent()==1) {
    1ae2:	0e 94 44 4e 	call	0x9c88	; 0x9c88 <irCommDataSent>
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <main+0x1148>
    1aea:	46 c2       	rjmp	.+1164   	; 0x1f78 <main+0x15d4>
								irCommSendData(irCommRobotId+1);
							} else {
								irCommSendData(0x00);
							}							
						}
						if(irCommDataAvailable()==1) {
    1aec:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <irCommDataAvailable>
    1af0:	98 2f       	mov	r25, r24
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <main+0x1154>
    1af6:	ef ca       	rjmp	.-2594   	; 0x10d6 <main+0x732>
							if(irCommLedToggle==0) {
    1af8:	80 91 eb 03 	lds	r24, 0x03EB
    1afc:	88 23       	and	r24, r24
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <main+0x115e>
    1b00:	ce c2       	rjmp	.+1436   	; 0x209e <main+0x16fa>
								irCommLedToggle = 1;
    1b02:	90 93 eb 03 	sts	0x03EB, r25
								updateBlueLed(255);
    1b06:	8f ef       	ldi	r24, 0xFF	; 255
    1b08:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
								updateRedLed(255);
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
    1b0e:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
								updateGreenLed(128);
    1b12:	80 e8       	ldi	r24, 0x80	; 128
    1b14:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
								irCommLedToggle = 0;
								updateBlueLed(255);
								updateRedLed(255);
								updateGreenLed(235);
							}
							i = irCommReadData();
    1b18:	0e 94 4f 4e 	call	0x9c9e	; 0x9c9e <irCommReadData>
    1b1c:	88 2e       	mov	r8, r24
    1b1e:	99 24       	eor	r9, r9
							if(i == 0xFF) {
    1b20:	6f ef       	ldi	r22, 0xFF	; 255
    1b22:	86 16       	cp	r8, r22
    1b24:	91 04       	cpc	r9, r1
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <main+0x1186>
    1b28:	d6 ca       	rjmp	.-2644   	; 0x10d6 <main+0x732>
								demoState = 2;
    1b2a:	82 e0       	ldi	r24, 0x02	; 2
    1b2c:	80 93 64 03 	sts	0x0364, r24
								updateBlueLed(255);		
    1b30:	8f ef       	ldi	r24, 0xFF	; 255
    1b32:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
								updateRedLed(255);
    1b36:	8f ef       	ldi	r24, 0xFF	; 255
    1b38:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
								updateGreenLed(255);		
    1b3c:	8f ef       	ldi	r24, 0xFF	; 255
    1b3e:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
    1b42:	90 91 60 03 	lds	r25, 0x0360
    1b46:	0c 94 62 05 	jmp	0xac4	; 0xac4 <main+0x120>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    1b4a:	80 36       	cpi	r24, 0x60	; 96
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	08 f0       	brcs	.+2      	; 0x1b52 <main+0x11ae>
    1b50:	ae ca       	rjmp	.-2724   	; 0x10ae <main+0x70a>
					pwm_blue = 255;
    1b52:	d0 92 0e 02 	sts	0x020E, r13
    1b56:	ab ca       	rjmp	.-2730   	; 0x10ae <main+0x70a>
					}
					break;
			
			case 7:
				irEnabled = 0;	// Disable tv remote to avoid involuntary/wrong commands reception.
					switch(demoState) {
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <main+0x11ba>
    1b5c:	78 c8       	rjmp	.-3856   	; 0xc4e <main+0x2aa>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    1b5e:	0e 94 02 45 	call	0x8a04	; 0x8a04 <turnOffGreenLeds>
							GREEN_LED2_ON;
    1b62:	80 91 0b 01 	lds	r24, 0x010B
    1b66:	8b 7f       	andi	r24, 0xFB	; 251
    1b68:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    1b6c:	10 92 66 03 	sts	0x0366, r1
							enableObstacleAvoidance();
    1b70:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <enableObstacleAvoidance>
							setRightSpeed(15);
    1b74:	8f e0       	ldi	r24, 0x0F	; 15
    1b76:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
							setLeftSpeed(15);
    1b7a:	8f e0       	ldi	r24, 0x0F	; 15
    1b7c:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    1b80:	80 91 69 02 	lds	r24, 0x0269
    1b84:	90 91 6a 02 	lds	r25, 0x026A
    1b88:	80 59       	subi	r24, 0x90	; 144
    1b8a:	91 40       	sbci	r25, 0x01	; 1
    1b8c:	0c f4       	brge	.+2      	; 0x1b90 <main+0x11ec>
    1b8e:	50 c1       	rjmp	.+672    	; 0x1e30 <main+0x148c>
    1b90:	80 91 6b 02 	lds	r24, 0x026B
    1b94:	90 91 6c 02 	lds	r25, 0x026C
    1b98:	80 59       	subi	r24, 0x90	; 144
    1b9a:	91 40       	sbci	r25, 0x01	; 1
    1b9c:	0c f4       	brge	.+2      	; 0x1ba0 <main+0x11fc>
    1b9e:	48 c1       	rjmp	.+656    	; 0x1e30 <main+0x148c>
    1ba0:	80 91 67 02 	lds	r24, 0x0267
    1ba4:	90 91 68 02 	lds	r25, 0x0268
    1ba8:	80 59       	subi	r24, 0x90	; 144
    1baa:	91 40       	sbci	r25, 0x01	; 1
    1bac:	0c f4       	brge	.+2      	; 0x1bb0 <main+0x120c>
    1bae:	40 c1       	rjmp	.+640    	; 0x1e30 <main+0x148c>
    1bb0:	80 91 6d 02 	lds	r24, 0x026D
    1bb4:	90 91 6e 02 	lds	r25, 0x026E
    1bb8:	80 59       	subi	r24, 0x90	; 144
    1bba:	91 40       	sbci	r25, 0x01	; 1
    1bbc:	0c f4       	brge	.+2      	; 0x1bc0 <main+0x121c>
    1bbe:	38 c1       	rjmp	.+624    	; 0x1e30 <main+0x148c>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    1bc0:	10 92 65 03 	sts	0x0365, r1
    1bc4:	44 c8       	rjmp	.-3960   	; 0xc4e <main+0x2aa>

			case 11: 	// sync-react demo using the IR local communication (2 robots only): the robots move around with obstacle avoidance
						// enabled and when they detect each other they try to align towards the same direction rotating in place
				switch(demoState) {
					case 0:
						irCommInit();
    1bc6:	0e 94 d4 59 	call	0xb3a8	; 0xb3a8 <irCommInit>
						demoState = 1;
    1bca:	30 92 64 03 	sts	0x0364, r3
    1bce:	90 91 60 03 	lds	r25, 0x0360
    1bd2:	0c 94 62 05 	jmp	0xac4	; 0xac4 <main+0x120>
							demoState = 1;
						}
						break;

					case 3:	// rotate right
						irCommTasks();
    1bd6:	0e 94 34 4f 	call	0x9e68	; 0x9e68 <irCommTasks>
						if(theta <= targetAngle) {
    1bda:	69 81       	ldd	r22, Y+1	; 0x01
    1bdc:	7a 81       	ldd	r23, Y+2	; 0x02
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	20 91 87 03 	lds	r18, 0x0387
    1be6:	30 91 88 03 	lds	r19, 0x0388
    1bea:	40 91 89 03 	lds	r20, 0x0389
    1bee:	50 91 8a 03 	lds	r21, 0x038A
    1bf2:	0e 94 83 5c 	call	0xb906	; 0xb906 <__gesf2>
    1bf6:	87 fd       	sbrc	r24, 7
    1bf8:	6e ca       	rjmp	.-2852   	; 0x10d6 <main+0x732>
							setLeftSpeed(0);
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
							setRightSpeed(0);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	5f c9       	rjmp	.-3394   	; 0xec2 <main+0x51e>
						demoState = 2;
						demoStartTime = getTime100MicroSec();
						break;

					case 2:
						irCommTasks();
    1c04:	0e 94 34 4f 	call	0x9e68	; 0x9e68 <irCommTasks>
						if(irCommDataSent()==1) {
    1c08:	0e 94 44 4e 	call	0x9c88	; 0x9c88 <irCommDataSent>
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <main+0x126e>
    1c10:	b9 c2       	rjmp	.+1394   	; 0x2184 <main+0x17e0>
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
							irCommSendData(angleDegEncode);
						}
						if(irCommDataAvailable()==1) {
    1c12:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <irCommDataAvailable>
    1c16:	81 30       	cpi	r24, 0x01	; 1
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <main+0x1278>
    1c1a:	51 c2       	rjmp	.+1186   	; 0x20be <main+0x171a>
									demoState = 3;
								}								
							}

						}
						if((getTime100MicroSec()-demoStartTime) >= (PAUSE_5_SEC)) {
    1c1c:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    1c20:	20 91 68 03 	lds	r18, 0x0368
    1c24:	30 91 69 03 	lds	r19, 0x0369
    1c28:	40 91 6a 03 	lds	r20, 0x036A
    1c2c:	50 91 6b 03 	lds	r21, 0x036B
    1c30:	62 1b       	sub	r22, r18
    1c32:	73 0b       	sbc	r23, r19
    1c34:	84 0b       	sbc	r24, r20
    1c36:	95 0b       	sbc	r25, r21
    1c38:	6d 5c       	subi	r22, 0xCD	; 205
    1c3a:	7b 4b       	sbci	r23, 0xBB	; 187
    1c3c:	80 40       	sbci	r24, 0x00	; 0
    1c3e:	90 40       	sbci	r25, 0x00	; 0
    1c40:	08 f4       	brcc	.+2      	; 0x1c44 <main+0x12a0>
    1c42:	49 ca       	rjmp	.-2926   	; 0x10d6 <main+0x732>
									} else {
										irCommSendData(0xFF);
									}
								} else {
									if(i == (unsigned int)(irCommRobotId-1)) {
										demoState = 1;
    1c44:	30 92 64 03 	sts	0x0364, r3
    1c48:	90 91 60 03 	lds	r25, 0x0360
    1c4c:	0c 94 62 05 	jmp	0xac4	; 0xac4 <main+0x120>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    1c50:	0e 94 02 45 	call	0x8a04	; 0x8a04 <turnOffGreenLeds>
							GREEN_LED6_ON;
    1c54:	80 91 0b 01 	lds	r24, 0x010B
    1c58:	8f 7b       	andi	r24, 0xBF	; 191
    1c5a:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    1c5e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    1c62:	60 93 70 03 	sts	0x0370, r22
    1c66:	70 93 71 03 	sts	0x0371, r23
    1c6a:	80 93 72 03 	sts	0x0372, r24
    1c6e:	90 93 73 03 	sts	0x0373, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    1c72:	20 91 68 03 	lds	r18, 0x0368
    1c76:	30 91 69 03 	lds	r19, 0x0369
    1c7a:	40 91 6a 03 	lds	r20, 0x036A
    1c7e:	50 91 6b 03 	lds	r21, 0x036B
    1c82:	62 1b       	sub	r22, r18
    1c84:	73 0b       	sbc	r23, r19
    1c86:	84 0b       	sbc	r24, r20
    1c88:	95 0b       	sbc	r25, r21
    1c8a:	6d 5c       	subi	r22, 0xCD	; 205
    1c8c:	76 46       	sbci	r23, 0x66	; 102
    1c8e:	84 40       	sbci	r24, 0x04	; 4
    1c90:	90 40       	sbci	r25, 0x00	; 0
    1c92:	08 f4       	brcc	.+2      	; 0x1c96 <main+0x12f2>
    1c94:	31 c1       	rjmp	.+610    	; 0x1ef8 <main+0x1554>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    1c96:	80 91 bb 02 	lds	r24, 0x02BB
    1c9a:	90 91 bc 02 	lds	r25, 0x02BC
    1c9e:	8a 57       	subi	r24, 0x7A	; 122
    1ca0:	93 40       	sbci	r25, 0x03	; 3
    1ca2:	08 f4       	brcc	.+2      	; 0x1ca6 <main+0x1302>
    1ca4:	36 c1       	rjmp	.+620    	; 0x1f12 <main+0x156e>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    1ca6:	83 ef       	ldi	r24, 0xF3	; 243
    1ca8:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
									setLeftSpeed(-13);
    1cac:	83 ef       	ldi	r24, 0xF3	; 243
    1cae:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    1cb2:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    1cb6:	60 93 68 03 	sts	0x0368, r22
    1cba:	70 93 69 03 	sts	0x0369, r23
    1cbe:	80 93 6a 03 	sts	0x036A, r24
    1cc2:	90 93 6b 03 	sts	0x036B, r25
									demoState = 4;
    1cc6:	34 e0       	ldi	r19, 0x04	; 4
    1cc8:	30 93 64 03 	sts	0x0364, r19
    1ccc:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    1cd0:	0e 94 02 45 	call	0x8a04	; 0x8a04 <turnOffGreenLeds>
							GREEN_LED4_ON;
    1cd4:	80 91 0b 01 	lds	r24, 0x010B
    1cd8:	8f 7e       	andi	r24, 0xEF	; 239
    1cda:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    1cde:	0e 94 ec 41 	call	0x83d8	; 0x83d8 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    1ce2:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    1ce6:	60 93 70 03 	sts	0x0370, r22
    1cea:	70 93 71 03 	sts	0x0371, r23
    1cee:	80 93 72 03 	sts	0x0372, r24
    1cf2:	90 93 73 03 	sts	0x0373, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    1cf6:	20 91 68 03 	lds	r18, 0x0368
    1cfa:	30 91 69 03 	lds	r19, 0x0369
    1cfe:	40 91 6a 03 	lds	r20, 0x036A
    1d02:	50 91 6b 03 	lds	r21, 0x036B
    1d06:	62 1b       	sub	r22, r18
    1d08:	73 0b       	sbc	r23, r19
    1d0a:	84 0b       	sbc	r24, r20
    1d0c:	95 0b       	sbc	r25, r21
    1d0e:	63 53       	subi	r22, 0x33	; 51
    1d10:	7f 4e       	sbci	r23, 0xEF	; 239
    1d12:	82 40       	sbci	r24, 0x02	; 2
    1d14:	90 40       	sbci	r25, 0x00	; 0
    1d16:	08 f0       	brcs	.+2      	; 0x1d1a <main+0x1376>
    1d18:	9f c1       	rjmp	.+830    	; 0x2058 <main+0x16b4>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    1d1a:	80 91 03 01 	lds	r24, 0x0103
    1d1e:	84 ff       	sbrs	r24, 4
    1d20:	81 c1       	rjmp	.+770    	; 0x2024 <main+0x1680>
								outOfLine = 0;
    1d22:	10 92 66 03 	sts	0x0366, r1
								chargeContact++;
    1d26:	80 91 67 03 	lds	r24, 0x0367
    1d2a:	8f 5f       	subi	r24, 0xFF	; 255
    1d2c:	80 93 67 03 	sts	0x0367, r24
								if(chargeContact > 20) {
    1d30:	85 31       	cpi	r24, 0x15	; 21
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <main+0x1392>
    1d34:	b6 c2       	rjmp	.+1388   	; 0x22a2 <__stack+0xa3>
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    1d36:	40 91 67 02 	lds	r20, 0x0267
    1d3a:	50 91 68 02 	lds	r21, 0x0268
    1d3e:	31 e0       	ldi	r19, 0x01	; 1
    1d40:	42 3c       	cpi	r20, 0xC2	; 194
    1d42:	53 07       	cpc	r21, r19
    1d44:	0c f0       	brlt	.+2      	; 0x1d48 <main+0x13a4>
    1d46:	f1 c0       	rjmp	.+482    	; 0x1f2a <main+0x1586>
    1d48:	20 91 69 02 	lds	r18, 0x0269
    1d4c:	30 91 6a 02 	lds	r19, 0x026A
    1d50:	61 e0       	ldi	r22, 0x01	; 1
    1d52:	23 3c       	cpi	r18, 0xC3	; 195
    1d54:	36 07       	cpc	r19, r22
    1d56:	0c f4       	brge	.+2      	; 0x1d5a <main+0x13b6>
    1d58:	ec c0       	rjmp	.+472    	; 0x1f32 <main+0x158e>
    1d5a:	80 91 6b 02 	lds	r24, 0x026B
    1d5e:	90 91 6c 02 	lds	r25, 0x026C
    1d62:	83 5c       	subi	r24, 0xC3	; 195
    1d64:	91 40       	sbci	r25, 0x01	; 1
    1d66:	0c f4       	brge	.+2      	; 0x1d6a <main+0x13c6>
    1d68:	e4 c0       	rjmp	.+456    	; 0x1f32 <main+0x158e>
    1d6a:	80 91 6d 02 	lds	r24, 0x026D
    1d6e:	90 91 6e 02 	lds	r25, 0x026E
    1d72:	b1 e0       	ldi	r27, 0x01	; 1
    1d74:	83 3c       	cpi	r24, 0xC3	; 195
    1d76:	9b 07       	cpc	r25, r27
    1d78:	0c f0       	brlt	.+2      	; 0x1d7c <main+0x13d8>
    1d7a:	4d c3       	rjmp	.+1690   	; 0x2416 <__stack+0x217>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    1d7c:	82 5c       	subi	r24, 0xC2	; 194
    1d7e:	91 40       	sbci	r25, 0x01	; 1
    1d80:	0c f0       	brlt	.+2      	; 0x1d84 <main+0x13e0>
    1d82:	df c0       	rjmp	.+446    	; 0x1f42 <main+0x159e>
    1d84:	43 5c       	subi	r20, 0xC3	; 195
    1d86:	51 40       	sbci	r21, 0x01	; 1
    1d88:	0c f4       	brge	.+2      	; 0x1d8c <main+0x13e8>
    1d8a:	db c0       	rjmp	.+438    	; 0x1f42 <main+0x159e>
    1d8c:	23 5c       	subi	r18, 0xC3	; 195
    1d8e:	31 40       	sbci	r19, 0x01	; 1
    1d90:	0c f4       	brge	.+2      	; 0x1d94 <main+0x13f0>
    1d92:	db c0       	rjmp	.+438    	; 0x1f4a <main+0x15a6>
    1d94:	80 91 6b 02 	lds	r24, 0x026B
    1d98:	90 91 6c 02 	lds	r25, 0x026C
    1d9c:	83 5c       	subi	r24, 0xC3	; 195
    1d9e:	91 40       	sbci	r25, 0x01	; 1
    1da0:	0c f0       	brlt	.+2      	; 0x1da4 <main+0x1400>
    1da2:	31 c3       	rjmp	.+1634   	; 0x2406 <__stack+0x207>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    1da4:	8f e0       	ldi	r24, 0x0F	; 15
    1da6:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
								setRightSpeed(-5);
    1daa:	8b ef       	ldi	r24, 0xFB	; 251
    1dac:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
    1db0:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    1db4:	0e 94 02 45 	call	0x8a04	; 0x8a04 <turnOffGreenLeds>
							GREEN_LED6_ON;
    1db8:	80 91 0b 01 	lds	r24, 0x010B
    1dbc:	8f 7b       	andi	r24, 0xBF	; 191
    1dbe:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    1dc2:	80 91 0b 01 	lds	r24, 0x010B
    1dc6:	8f 77       	andi	r24, 0x7F	; 127
    1dc8:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    1dcc:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    1dd0:	60 93 70 03 	sts	0x0370, r22
    1dd4:	70 93 71 03 	sts	0x0371, r23
    1dd8:	80 93 72 03 	sts	0x0372, r24
    1ddc:	90 93 73 03 	sts	0x0373, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    1de0:	20 91 68 03 	lds	r18, 0x0368
    1de4:	30 91 69 03 	lds	r19, 0x0369
    1de8:	40 91 6a 03 	lds	r20, 0x036A
    1dec:	50 91 6b 03 	lds	r21, 0x036B
    1df0:	62 1b       	sub	r22, r18
    1df2:	73 0b       	sbc	r23, r19
    1df4:	84 0b       	sbc	r24, r20
    1df6:	95 0b       	sbc	r25, r21
    1df8:	6f 58       	subi	r22, 0x8F	; 143
    1dfa:	75 42       	sbci	r23, 0x25	; 37
    1dfc:	80 40       	sbci	r24, 0x00	; 0
    1dfe:	90 40       	sbci	r25, 0x00	; 0
    1e00:	10 f4       	brcc	.+4      	; 0x1e06 <main+0x1462>
    1e02:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
								setRightSpeed(20);
    1e06:	84 e1       	ldi	r24, 0x14	; 20
    1e08:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
								setLeftSpeed(-20);								
    1e0c:	8c ee       	ldi	r24, 0xEC	; 236
    1e0e:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1e12:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    1e16:	60 93 68 03 	sts	0x0368, r22
    1e1a:	70 93 69 03 	sts	0x0369, r23
    1e1e:	80 93 6a 03 	sts	0x036A, r24
    1e22:	90 93 6b 03 	sts	0x036B, r25
								demoState = 5;							
    1e26:	b5 e0       	ldi	r27, 0x05	; 5
    1e28:	b0 93 64 03 	sts	0x0364, r27
    1e2c:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    1e30:	80 91 65 03 	lds	r24, 0x0365
    1e34:	8f 5f       	subi	r24, 0xFF	; 255
    1e36:	80 93 65 03 	sts	0x0365, r24
								if(lineFound > 10) {
    1e3a:	8b 30       	cpi	r24, 0x0B	; 11
    1e3c:	10 f4       	brcc	.+4      	; 0x1e42 <main+0x149e>
    1e3e:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
									outOfLine = 0;
    1e42:	10 92 66 03 	sts	0x0366, r1
									chargeContact = 0;
    1e46:	10 92 67 03 	sts	0x0367, r1
									demoStartTime = getTime100MicroSec();
    1e4a:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    1e4e:	60 93 68 03 	sts	0x0368, r22
    1e52:	70 93 69 03 	sts	0x0369, r23
    1e56:	80 93 6a 03 	sts	0x036A, r24
    1e5a:	90 93 6b 03 	sts	0x036B, r25
									demoState = 2;
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	80 93 64 03 	sts	0x0364, r24
    1e64:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
							}

							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
    1e68:	84 36       	cpi	r24, 0x64	; 100
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	08 f0       	brcs	.+2      	; 0x1e70 <main+0x14cc>
    1e6e:	7d c0       	rjmp	.+250    	; 0x1f6a <main+0x15c6>
								pwm_green = 255;
    1e70:	d0 92 0d 02 	sts	0x020D, r13
    1e74:	e1 ca       	rjmp	.-2622   	; 0x1438 <main+0xa94>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
    1e76:	80 93 0e 02 	sts	0x020E, r24
    1e7a:	d0 ca       	rjmp	.-2656   	; 0x141c <main+0xa78>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_green = 255;
							} else {
								pwm_green = currRand;
    1e7c:	80 93 0d 02 	sts	0x020D, r24
    1e80:	c1 ca       	rjmp	.-2686   	; 0x1404 <main+0xa60>
							turnOffGreenLeds();					
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
							if(currRand > 95) {
								pwm_red = 255;
							} else {
								pwm_red = currRand;
    1e82:	80 93 0c 02 	sts	0x020C, r24
    1e86:	b2 ca       	rjmp	.-2716   	; 0x13ec <main+0xa48>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {							
							demoState = 1;
    1e88:	80 93 64 03 	sts	0x0364, r24
							if(irCommRxByteExpected<255) {
    1e8c:	80 91 16 04 	lds	r24, 0x0416
    1e90:	8f 3f       	cpi	r24, 0xFF	; 255
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <main+0x14f2>
    1e94:	90 c1       	rjmp	.+800    	; 0x21b6 <main+0x1812>
								irCommRxByteExpected++;
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	80 93 16 04 	sts	0x0416, r24
    1e9c:	be c9       	rjmp	.-3204   	; 0x121a <main+0x876>
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
								rgbLedState = 1;
    1e9e:	30 92 7f 03 	sts	0x037F, r3
								demoStartTime2 = getTime100MicroSec();
    1ea2:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    1ea6:	60 93 6c 03 	sts	0x036C, r22
    1eaa:	70 93 6d 03 	sts	0x036D, r23
    1eae:	80 93 6e 03 	sts	0x036E, r24
    1eb2:	90 93 6f 03 	sts	0x036F, r25
    1eb6:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
						case 0:							
							pwm_red = 255;
							pwm_green = 255;
							pwm_blue = 255;
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
								setGreenLed(greenLedState, 0);
    1eba:	80 91 7e 03 	lds	r24, 0x037E
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	0e 94 65 44 	call	0x88ca	; 0x88ca <setGreenLed>
								greenLedState++;
    1ec4:	80 91 7e 03 	lds	r24, 0x037E
    1ec8:	8f 5f       	subi	r24, 0xFF	; 255
    1eca:	80 93 7e 03 	sts	0x037E, r24
								if(greenLedState > 7) {
    1ece:	88 30       	cpi	r24, 0x08	; 8
    1ed0:	20 f0       	brcs	.+8      	; 0x1eda <main+0x1536>
									greenLedState = 0;
    1ed2:	10 92 7e 03 	sts	0x037E, r1
    1ed6:	80 91 7e 03 	lds	r24, 0x037E
								}
								setGreenLed(greenLedState, 1);
    1eda:	61 e0       	ldi	r22, 0x01	; 1
    1edc:	0e 94 65 44 	call	0x88ca	; 0x88ca <setGreenLed>
								demoEndTime = getTime100MicroSec();											
    1ee0:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    1ee4:	60 93 70 03 	sts	0x0370, r22
    1ee8:	70 93 71 03 	sts	0x0371, r23
    1eec:	80 93 72 03 	sts	0x0372, r24
    1ef0:	90 93 73 03 	sts	0x0373, r25
    1ef4:	0c 94 12 06 	jmp	0xc24	; 0xc24 <main+0x280>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    1ef8:	80 91 03 01 	lds	r24, 0x0103
    1efc:	84 ff       	sbrs	r24, 4
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <main+0x1560>
    1f00:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
								chargeContact = 0;
    1f04:	10 92 67 03 	sts	0x0367, r1
								outOfLine = 0;
    1f08:	10 92 66 03 	sts	0x0366, r1
								demoState = 2;
    1f0c:	62 e0       	ldi	r22, 0x02	; 2
    1f0e:	60 93 64 03 	sts	0x0364, r22
								demoStartTime = getTime100MicroSec();
    1f12:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    1f16:	60 93 68 03 	sts	0x0368, r22
    1f1a:	70 93 69 03 	sts	0x0369, r23
    1f1e:	80 93 6a 03 	sts	0x036A, r24
    1f22:	90 93 6b 03 	sts	0x036B, r25
    1f26:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    1f2a:	20 91 69 02 	lds	r18, 0x0269
    1f2e:	30 91 6a 02 	lds	r19, 0x026A
    1f32:	80 91 6d 02 	lds	r24, 0x026D
    1f36:	90 91 6e 02 	lds	r25, 0x026E
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    1f3a:	82 5c       	subi	r24, 0xC2	; 194
    1f3c:	91 40       	sbci	r25, 0x01	; 1
    1f3e:	0c f4       	brge	.+2      	; 0x1f42 <main+0x159e>
    1f40:	21 cf       	rjmp	.-446    	; 0x1d84 <main+0x13e0>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    1f42:	23 5c       	subi	r18, 0xC3	; 195
    1f44:	31 40       	sbci	r19, 0x01	; 1
    1f46:	0c f0       	brlt	.+2      	; 0x1f4a <main+0x15a6>
    1f48:	2d cf       	rjmp	.-422    	; 0x1da4 <main+0x1400>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    1f4a:	80 91 6b 02 	lds	r24, 0x026B
    1f4e:	90 91 6c 02 	lds	r25, 0x026C
    1f52:	83 5c       	subi	r24, 0xC3	; 195
    1f54:	91 40       	sbci	r25, 0x01	; 1
    1f56:	0c f4       	brge	.+2      	; 0x1f5a <main+0x15b6>
    1f58:	31 c1       	rjmp	.+610    	; 0x21bc <main+0x1818>
								setLeftSpeed(-5);
    1f5a:	8b ef       	ldi	r24, 0xFB	; 251
    1f5c:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
								setRightSpeed(15);
    1f60:	8f e0       	ldi	r24, 0x0F	; 15
    1f62:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
    1f66:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
    1f6a:	86 39       	cpi	r24, 0x96	; 150
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	08 f0       	brcs	.+2      	; 0x1f72 <main+0x15ce>
    1f70:	63 ca       	rjmp	.-2874   	; 0x1438 <main+0xa94>
								pwm_blue = 255;
    1f72:	d0 92 0e 02 	sts	0x020E, r13
    1f76:	60 ca       	rjmp	.-2880   	; 0x1438 <main+0xa94>
							// transmission: continuously send the next robot id to tell him to turn on the led
							// reception: listen for 0xFF and then turn off the led; when I receive 0xFF it means the next robot has
							// received its id, thus it has turned on its led
						irCommTasks();
						if(irCommDataSent()==1) {
							if(irCommRobotId < (irCommRobotsNum-1)) {
    1f78:	40 91 e9 03 	lds	r20, 0x03E9
    1f7c:	24 2f       	mov	r18, r20
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	80 91 ea 03 	lds	r24, 0x03EA
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	28 17       	cp	r18, r24
    1f8a:	39 07       	cpc	r19, r25
    1f8c:	0c f0       	brlt	.+2      	; 0x1f90 <main+0x15ec>
    1f8e:	93 c0       	rjmp	.+294    	; 0x20b6 <main+0x1712>
								irCommSendData(irCommRobotId+1);
    1f90:	84 2f       	mov	r24, r20
    1f92:	8f 5f       	subi	r24, 0xFF	; 255
    1f94:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <irCommSendData>
    1f98:	a9 cd       	rjmp	.-1198   	; 0x1aec <main+0x1148>
						irCommTasks();
						if(irCommDataSent()==1) {	
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
							i = irCommReadData();
    1f9a:	0e 94 4f 4e 	call	0x9c9e	; 0x9c9e <irCommReadData>
    1f9e:	58 2f       	mov	r21, r24
    1fa0:	88 2e       	mov	r8, r24
    1fa2:	99 24       	eor	r9, r9
							if(i == irCommRxByteExpected) {
    1fa4:	40 91 16 04 	lds	r20, 0x0416
    1fa8:	24 2f       	mov	r18, r20
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	28 15       	cp	r18, r8
    1fae:	39 05       	cpc	r19, r9
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <main+0x1610>
    1fb2:	3b c1       	rjmp	.+630    	; 0x222a <__stack+0x2b>
									} else {
										irCommRxByteExpected = 0;
									}
								}
							} else {
								if(irCommRxByteExpected==7) {
    1fb4:	47 30       	cpi	r20, 0x07	; 7
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <main+0x1616>
    1fb8:	a5 c1       	rjmp	.+842    	; 0x2304 <__stack+0x105>
									if(i==0) {
										irCommRxByteExpected = 0;
										irCommMsgCount = 0;
									}
								} else {
									if(irCommRxByteExpected==(i-1)) {
    1fba:	c4 01       	movw	r24, r8
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	28 17       	cp	r18, r24
    1fc0:	39 07       	cpc	r19, r25
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <main+0x1622>
    1fc4:	ce c1       	rjmp	.+924    	; 0x2362 <__stack+0x163>
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    1fc6:	43 30       	cpi	r20, 0x03	; 3
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <main+0x1628>
    1fca:	44 c1       	rjmp	.+648    	; 0x2254 <__stack+0x55>
    1fcc:	44 30       	cpi	r20, 0x04	; 4
    1fce:	08 f0       	brcs	.+2      	; 0x1fd2 <main+0x162e>
    1fd0:	4e c1       	rjmp	.+668    	; 0x226e <__stack+0x6f>
    1fd2:	41 30       	cpi	r20, 0x01	; 1
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <main+0x1634>
    1fd6:	ec c1       	rjmp	.+984    	; 0x23b0 <__stack+0x1b1>
    1fd8:	42 30       	cpi	r20, 0x02	; 2
    1fda:	08 f4       	brcc	.+2      	; 0x1fde <main+0x163a>
    1fdc:	9b c1       	rjmp	.+822    	; 0x2314 <__stack+0x115>
									updateRedLed(235);
									updateGreenLed(255);
									updateBlueLed(255);
									break;	
								case 2: 
									updateRedLed(255);
    1fde:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 4: 
									updateRedLed(235);
    1fe0:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
									updateGreenLed(235);
    1fe4:	8b ee       	ldi	r24, 0xEB	; 235
    1fe6:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
									updateBlueLed(255);
    1fea:	8f ef       	ldi	r24, 0xFF	; 255
    1fec:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
    1ff0:	90 91 60 03 	lds	r25, 0x0360
    1ff4:	0c 94 62 05 	jmp	0xac4	; 0xac4 <main+0x120>
						break;

					case 1:	
						irCommTasks();
						if(irCommDataSent()==1) {	
							irCommSendData(irCommRxByteExpected);					
    1ff8:	80 91 16 04 	lds	r24, 0x0416
    1ffc:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <irCommSendData>
    2000:	65 c8       	rjmp	.-3894   	; 0x10cc <main+0x728>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	09 f4       	brne	.+2      	; 0x2008 <main+0x1664>
    2006:	06 c1       	rjmp	.+524    	; 0x2214 <__stack+0x15>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    2008:	82 30       	cpi	r24, 0x02	; 2
    200a:	11 f0       	breq	.+4      	; 0x2010 <main+0x166c>
    200c:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <main+0x2f4>
						pwm_red = 255;
    2010:	d0 92 0c 02 	sts	0x020C, r13
						pwm_green = 255;
    2014:	d0 92 0d 02 	sts	0x020D, r13
						pwm_blue = 254;
    2018:	20 92 0e 02 	sts	0x020E, r2
						rgbState = 0;
    201c:	10 92 0c 03 	sts	0x030C, r1
    2020:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <main+0x2f4>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    2024:	10 92 67 03 	sts	0x0367, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    2028:	80 91 69 02 	lds	r24, 0x0269
    202c:	90 91 6a 02 	lds	r25, 0x026A
    2030:	83 5c       	subi	r24, 0xC3	; 195
    2032:	91 40       	sbci	r25, 0x01	; 1
    2034:	34 f1       	brlt	.+76     	; 0x2082 <main+0x16de>
    2036:	80 91 6b 02 	lds	r24, 0x026B
    203a:	90 91 6c 02 	lds	r25, 0x026C
    203e:	83 5c       	subi	r24, 0xC3	; 195
    2040:	91 40       	sbci	r25, 0x01	; 1
    2042:	fc f0       	brlt	.+62     	; 0x2082 <main+0x16de>
									outOfLine++;
    2044:	80 91 66 03 	lds	r24, 0x0366
    2048:	8f 5f       	subi	r24, 0xFF	; 255
    204a:	80 93 66 03 	sts	0x0366, r24
									if(outOfLine > 250) {
    204e:	8b 3f       	cpi	r24, 0xFB	; 251
    2050:	08 f4       	brcc	.+2      	; 0x2054 <main+0x16b0>
    2052:	71 ce       	rjmp	.-798    	; 0x1d36 <main+0x1392>
    2054:	0c 94 94 06 	jmp	0xd28	; 0xd28 <main+0x384>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    2058:	8c ee       	ldi	r24, 0xEC	; 236
    205a:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
								setLeftSpeed(-20);
    205e:	8c ee       	ldi	r24, 0xEC	; 236
    2060:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    2064:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    2068:	60 93 68 03 	sts	0x0368, r22
    206c:	70 93 69 03 	sts	0x0369, r23
    2070:	80 93 6a 03 	sts	0x036A, r24
    2074:	90 93 6b 03 	sts	0x036B, r25
								demoState = 4;
    2078:	b4 e0       	ldi	r27, 0x04	; 4
    207a:	b0 93 64 03 	sts	0x0364, r27
    207e:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    2082:	10 92 66 03 	sts	0x0366, r1
    2086:	57 ce       	rjmp	.-850    	; 0x1d36 <main+0x1392>
					case 2: // led is off
							// transmission: continuously send my robot id to tell the next robot I turned off the led
							// reception: listen for my robot id and then turn on the led				
						irCommTasks();
						if(irCommDataSent()==1) {
							irCommSendData(irCommRobotId);							
    2088:	80 91 e9 03 	lds	r24, 0x03E9
    208c:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <irCommSendData>
    2090:	05 cd       	rjmp	.-1526   	; 0x1a9c <main+0x10f8>
						if(irCommDataAvailable()==1) {
							if(irCommLedToggle==0) {
								irCommLedToggle = 1;
								updateRedLed(255);
							} else {
								irCommLedToggle = 0;
    2092:	10 92 eb 03 	sts	0x03EB, r1
								updateRedLed(235);
    2096:	8b ee       	ldi	r24, 0xEB	; 235
    2098:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
    209c:	0f cd       	rjmp	.-1506   	; 0x1abc <main+0x1118>
								irCommLedToggle = 1;
								updateBlueLed(255);
								updateRedLed(255);
								updateGreenLed(128);
							} else {
								irCommLedToggle = 0;
    209e:	10 92 eb 03 	sts	0x03EB, r1
								updateBlueLed(255);
    20a2:	8f ef       	ldi	r24, 0xFF	; 255
    20a4:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
								updateRedLed(255);
    20a8:	8f ef       	ldi	r24, 0xFF	; 255
    20aa:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
								updateGreenLed(235);
    20ae:	8b ee       	ldi	r24, 0xEB	; 235
    20b0:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
    20b4:	31 cd       	rjmp	.-1438   	; 0x1b18 <main+0x1174>
						irCommTasks();
						if(irCommDataSent()==1) {
							if(irCommRobotId < (irCommRobotsNum-1)) {
								irCommSendData(irCommRobotId+1);
							} else {
								irCommSendData(0x00);
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <irCommSendData>
    20bc:	17 cd       	rjmp	.-1490   	; 0x1aec <main+0x1148>
						if(irCommDataSent()==1) {
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
							irCommSendData(angleDegEncode);
						}
						if(irCommDataAvailable()==1) {
							demoStartTime = getTime100MicroSec();
    20be:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    20c2:	60 93 68 03 	sts	0x0368, r22
    20c6:	70 93 69 03 	sts	0x0369, r23
    20ca:	80 93 6a 03 	sts	0x036A, r24
    20ce:	90 93 6b 03 	sts	0x036B, r25
							irCommLastData = irCommReadData();
    20d2:	0e 94 4f 4e 	call	0x9c9e	; 0x9c9e <irCommReadData>
							irCommLastData = (int)((float)irCommLastData*1.411);
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	aa 27       	eor	r26, r26
    20da:	97 fd       	sbrc	r25, 7
    20dc:	a0 95       	com	r26
    20de:	ba 2f       	mov	r27, r26
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    20e8:	26 ea       	ldi	r18, 0xA6	; 166
    20ea:	3b e9       	ldi	r19, 0x9B	; 155
    20ec:	44 eb       	ldi	r20, 0xB4	; 180
    20ee:	5f e3       	ldi	r21, 0x3F	; 63
    20f0:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    20f4:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    20f8:	70 93 e3 03 	sts	0x03E3, r23
    20fc:	60 93 e2 03 	sts	0x03E2, r22
							irCommLastSensor = irCommReceivingSensor();	
    2100:	0e 94 54 4e 	call	0x9ca8	; 0x9ca8 <irCommReceivingSensor>
    2104:	80 93 18 02 	sts	0x0218, r24
							disableObstacleAvoidance();										
    2108:	0e 94 ec 41 	call	0x83d8	; 0x83d8 <disableObstacleAvoidance>
							angleDeg = getBearing(irCommLastSensor);
    210c:	80 91 18 02 	lds	r24, 0x0218
    2110:	0e 94 57 4e 	call	0x9cae	; 0x9cae <getBearing>
    2114:	90 93 e5 03 	sts	0x03E5, r25
    2118:	80 93 e4 03 	sts	0x03E4, r24
							if(angleDeg < 0) {
    211c:	97 fd       	sbrc	r25, 7
    211e:	1a c1       	rjmp	.+564    	; 0x2354 <__stack+0x155>
								angleDeg += 360;
							}
							angleError = angleDeg - irCommLastData;
							angleError += 180;
    2120:	20 91 e4 03 	lds	r18, 0x03E4
    2124:	30 91 e5 03 	lds	r19, 0x03E5
    2128:	2c 54       	subi	r18, 0x4C	; 76
    212a:	3f 4f       	sbci	r19, 0xFF	; 255
    212c:	80 91 e2 03 	lds	r24, 0x03E2
    2130:	90 91 e3 03 	lds	r25, 0x03E3
    2134:	28 1b       	sub	r18, r24
    2136:	39 0b       	sbc	r19, r25
    2138:	30 93 e7 03 	sts	0x03E7, r19
    213c:	20 93 e6 03 	sts	0x03E6, r18
							if(angleError > 180) {
    2140:	25 3b       	cpi	r18, 0xB5	; 181
    2142:	31 05       	cpc	r19, r1
    2144:	34 f0       	brlt	.+12     	; 0x2152 <main+0x17ae>
								angleError -= 360;
    2146:	28 56       	subi	r18, 0x68	; 104
    2148:	31 40       	sbci	r19, 0x01	; 1
    214a:	30 93 e7 03 	sts	0x03E7, r19
    214e:	20 93 e6 03 	sts	0x03E6, r18
							}
							if(angleError < -180) {
    2152:	80 91 e6 03 	lds	r24, 0x03E6
    2156:	90 91 e7 03 	lds	r25, 0x03E7
    215a:	ef ef       	ldi	r30, 0xFF	; 255
    215c:	8c 34       	cpi	r24, 0x4C	; 76
    215e:	9e 07       	cpc	r25, r30
    2160:	34 f4       	brge	.+12     	; 0x216e <main+0x17ca>
								angleError += 360;
    2162:	88 59       	subi	r24, 0x98	; 152
    2164:	9e 4f       	sbci	r25, 0xFE	; 254
    2166:	90 93 e7 03 	sts	0x03E7, r25
    216a:	80 93 e6 03 	sts	0x03E6, r24
							}
							if(abs(angleError) < 10) {
    216e:	09 96       	adiw	r24, 0x09	; 9
    2170:	43 97       	sbiw	r24, 0x13	; 19
    2172:	08 f0       	brcs	.+2      	; 0x2176 <main+0x17d2>
    2174:	ab c0       	rjmp	.+342    	; 0x22cc <__stack+0xcd>
								setLeftSpeed(0);
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
								setRightSpeed(0);
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
    2182:	4c cd       	rjmp	.-1384   	; 0x1c1c <main+0x1278>
						break;

					case 2:
						irCommTasks();
						if(irCommDataSent()==1) {
							angleDegEncode = (unsigned char)((float)angleDeg*0.7084);
    2184:	60 91 e4 03 	lds	r22, 0x03E4
    2188:	70 91 e5 03 	lds	r23, 0x03E5
    218c:	88 27       	eor	r24, r24
    218e:	77 fd       	sbrc	r23, 7
    2190:	80 95       	com	r24
    2192:	98 2f       	mov	r25, r24
    2194:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    2198:	24 eb       	ldi	r18, 0xB4	; 180
    219a:	39 e5       	ldi	r19, 0x59	; 89
    219c:	45 e3       	ldi	r20, 0x35	; 53
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    21a4:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	80 93 e8 03 	sts	0x03E8, r24
							irCommSendData(angleDegEncode);
    21b0:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <irCommSendData>
    21b4:	2e cd       	rjmp	.-1444   	; 0x1c12 <main+0x126e>
						if(irCommDataSent()==1) {							
							demoState = 1;
							if(irCommRxByteExpected<255) {
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
    21b6:	10 92 16 04 	sts	0x0416, r1
    21ba:	2f c8       	rjmp	.-4002   	; 0x121a <main+0x876>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    21bc:	8f e0       	ldi	r24, 0x0F	; 15
    21be:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
								setLeftSpeed(15);
    21c2:	8f e0       	ldi	r24, 0x0F	; 15
    21c4:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
    21c8:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
							}
						}
						if(irCommDataAvailable()==1) {
							irCommReadData();
							if(i<7) {
								i++;
    21cc:	08 94       	sec
    21ce:	81 1c       	adc	r8, r1
    21d0:	91 1c       	adc	r9, r1
							} else {
								i = 0;
							}
							switch(i) {
    21d2:	e3 e0       	ldi	r30, 0x03	; 3
    21d4:	8e 16       	cp	r8, r30
    21d6:	91 04       	cpc	r9, r1
    21d8:	09 f4       	brne	.+2      	; 0x21dc <main+0x1838>
    21da:	f7 c0       	rjmp	.+494    	; 0x23ca <__stack+0x1cb>
    21dc:	f4 e0       	ldi	r31, 0x04	; 4
    21de:	8f 16       	cp	r8, r31
    21e0:	91 04       	cpc	r9, r1
    21e2:	08 f0       	brcs	.+2      	; 0x21e6 <main+0x1842>
    21e4:	c4 c0       	rjmp	.+392    	; 0x236e <__stack+0x16f>
    21e6:	21 e0       	ldi	r18, 0x01	; 1
    21e8:	82 16       	cp	r8, r18
    21ea:	91 04       	cpc	r9, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <main+0x184c>
    21ee:	e8 c0       	rjmp	.+464    	; 0x23c0 <__stack+0x1c1>
    21f0:	32 e0       	ldi	r19, 0x02	; 2
    21f2:	83 16       	cp	r8, r19
    21f4:	91 04       	cpc	r9, r1
    21f6:	08 f4       	brcc	.+2      	; 0x21fa <main+0x1856>
    21f8:	1c c8       	rjmp	.-4040   	; 0x1232 <main+0x88e>
									updateRedLed(0);
									updateGreenLed(255);
									updateBlueLed(255);
									break;	
								case 2: 
									updateRedLed(255);
    21fa:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 4: 
									updateRedLed(0);
    21fc:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
									updateGreenLed(0);
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
									updateBlueLed(255);
    2206:	8f ef       	ldi	r24, 0xFF	; 255
    2208:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
    220c:	90 91 60 03 	lds	r25, 0x0360
    2210:	0c 94 62 05 	jmp	0xac4	; 0xac4 <main+0x120>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    2214:	d0 92 0c 02 	sts	0x020C, r13
						pwm_green = 254;
    2218:	20 92 0d 02 	sts	0x020D, r2
						pwm_blue = 255;
    221c:	d0 92 0e 02 	sts	0x020E, r13
						rgbState = 2;
    2220:	b2 e0       	ldi	r27, 0x02	; 2
    2222:	b0 93 0c 03 	sts	0x030C, r27
    2226:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <main+0x2f4>
							irCommSendData(irCommRxByteExpected);					
						}
						if(irCommDataAvailable()==1) {							
							i = irCommReadData();
							if(i == irCommRxByteExpected) {
								irCommMsgCount++;
    222a:	80 91 ec 03 	lds	r24, 0x03EC
    222e:	8f 5f       	subi	r24, 0xFF	; 255
    2230:	80 93 ec 03 	sts	0x03EC, r24
								if(irCommMsgCount >= 4) {
    2234:	84 30       	cpi	r24, 0x04	; 4
    2236:	08 f4       	brcc	.+2      	; 0x223a <__stack+0x3b>
    2238:	c6 ce       	rjmp	.-628    	; 0x1fc6 <main+0x1622>
									irCommMsgCount = 0;
    223a:	10 92 ec 03 	sts	0x03EC, r1
									if(irCommRxByteExpected < 7) {
    223e:	47 30       	cpi	r20, 0x07	; 7
    2240:	08 f0       	brcs	.+2      	; 0x2244 <__stack+0x45>
    2242:	c0 c0       	rjmp	.+384    	; 0x23c4 <__stack+0x1c5>
										irCommRxByteExpected++;
    2244:	84 2f       	mov	r24, r20
    2246:	8f 5f       	subi	r24, 0xFF	; 255
    2248:	80 93 16 04 	sts	0x0416, r24
    224c:	48 2f       	mov	r20, r24
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    224e:	43 30       	cpi	r20, 0x03	; 3
    2250:	09 f0       	breq	.+2      	; 0x2254 <__stack+0x55>
    2252:	bc ce       	rjmp	.-648    	; 0x1fcc <main+0x1628>
									updateRedLed(255);
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 3: 
									updateRedLed(255);
    2254:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(235);
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(235);
    2256:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
									updateGreenLed(255);
    225a:	8f ef       	ldi	r24, 0xFF	; 255
    225c:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
									updateBlueLed(235);
    2260:	8b ee       	ldi	r24, 0xEB	; 235
    2262:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
    2266:	90 91 60 03 	lds	r25, 0x0360
    226a:	0c 94 62 05 	jmp	0xac4	; 0xac4 <main+0x120>
										irCommRxByteExpected = i;
										irCommMsgCount = 0;
									}
								}
							}
							switch(irCommRxByteExpected) {
    226e:	45 30       	cpi	r20, 0x05	; 5
    2270:	09 f4       	brne	.+2      	; 0x2274 <__stack+0x75>
    2272:	a4 c0       	rjmp	.+328    	; 0x23bc <__stack+0x1bd>
    2274:	45 30       	cpi	r20, 0x05	; 5
    2276:	08 f4       	brcc	.+2      	; 0x227a <__stack+0x7b>
    2278:	9f c0       	rjmp	.+318    	; 0x23b8 <__stack+0x1b9>
    227a:	46 30       	cpi	r20, 0x06	; 6
    227c:	09 f4       	brne	.+2      	; 0x2280 <__stack+0x81>
    227e:	9a c0       	rjmp	.+308    	; 0x23b4 <__stack+0x1b5>
    2280:	47 30       	cpi	r20, 0x07	; 7
    2282:	11 f0       	breq	.+4      	; 0x2288 <__stack+0x89>
    2284:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <main+0x732>
									updateRedLed(255);
									updateGreenLed(235);
									updateBlueLed(235);
									break;
								case 7: 
									updateRedLed(235);
    2288:	8b ee       	ldi	r24, 0xEB	; 235
    228a:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
									updateGreenLed(235);
    228e:	8b ee       	ldi	r24, 0xEB	; 235
    2290:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
									updateBlueLed(235);
    2294:	8b ee       	ldi	r24, 0xEB	; 235
    2296:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
    229a:	90 91 60 03 	lds	r25, 0x0360
    229e:	0c 94 62 05 	jmp	0xac4	; 0xac4 <main+0x120>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
									setRightSpeed(0);
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    22ae:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    22b2:	60 93 68 03 	sts	0x0368, r22
    22b6:	70 93 69 03 	sts	0x0369, r23
    22ba:	80 93 6a 03 	sts	0x036A, r24
    22be:	90 93 6b 03 	sts	0x036B, r25
									demoState = 3;
    22c2:	e3 e0       	ldi	r30, 0x03	; 3
    22c4:	e0 93 64 03 	sts	0x0364, r30
    22c8:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
							}
							if(abs(angleError) < 10) {
								setLeftSpeed(0);
								setRightSpeed(0);
							} else {
								resetOdometry();
    22cc:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <resetOdometry>
								if(angleError > 0) {	// turn left
    22d0:	80 91 e6 03 	lds	r24, 0x03E6
    22d4:	90 91 e7 03 	lds	r25, 0x03E7
    22d8:	18 16       	cp	r1, r24
    22da:	19 06       	cpc	r1, r25
    22dc:	0c f0       	brlt	.+2      	; 0x22e0 <__stack+0xe1>
    22de:	a3 c0       	rjmp	.+326    	; 0x2426 <__stack+0x227>
									setLeftSpeed(-7);
    22e0:	89 ef       	ldi	r24, 0xF9	; 249
    22e2:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
									setRightSpeed(7);
    22e6:	87 e0       	ldi	r24, 0x07	; 7
    22e8:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
    22ec:	f4 e0       	ldi	r31, 0x04	; 4
    22ee:	f0 93 64 03 	sts	0x0364, r31
    22f2:	8c ee       	ldi	r24, 0xEC	; 236
    22f4:	91 e5       	ldi	r25, 0x51	; 81
    22f6:	a8 eb       	ldi	r26, 0xB8	; 184
    22f8:	bd e3       	ldi	r27, 0x3D	; 61
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	ab 83       	std	Y+3, r26	; 0x03
    2300:	bc 83       	std	Y+4, r27	; 0x04
    2302:	8c cc       	rjmp	.-1768   	; 0x1c1c <main+0x1278>
										irCommRxByteExpected = 0;
									}
								}
							} else {
								if(irCommRxByteExpected==7) {
									if(i==0) {
    2304:	81 14       	cp	r8, r1
    2306:	91 04       	cpc	r9, r1
    2308:	09 f0       	breq	.+2      	; 0x230c <__stack+0x10d>
    230a:	be cf       	rjmp	.-132    	; 0x2288 <__stack+0x89>
										irCommRxByteExpected = 0;
    230c:	10 92 16 04 	sts	0x0416, r1
										irCommMsgCount = 0;
    2310:	10 92 ec 03 	sts	0x03EC, r1
									}
								}
							}
							switch(irCommRxByteExpected) {
								case 0: 
									updateRedLed(255);
    2314:	8f ef       	ldi	r24, 0xFF	; 255
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(235);
    2316:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
									updateGreenLed(255);
    231a:	8f ef       	ldi	r24, 0xFF	; 255
    231c:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
									updateBlueLed(255);
    2320:	8f ef       	ldi	r24, 0xFF	; 255
    2322:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
    2326:	90 91 60 03 	lds	r25, 0x0360
    232a:	0c 94 62 05 	jmp	0xac4	; 0xac4 <main+0x120>
								irCommLedToggle = 0;
								updateRedLed(235);
							}
							i = irCommReadData();
							if(i == irCommRobotId) {
								updateBlueLed(255);
    232e:	8f ef       	ldi	r24, 0xFF	; 255
    2330:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
								updateRedLed(255);
    2334:	8f ef       	ldi	r24, 0xFF	; 255
    2336:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
								updateGreenLed(128);
    233a:	80 e8       	ldi	r24, 0x80	; 128
    233c:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
								irCommSendData(0xFF);
    2340:	8f ef       	ldi	r24, 0xFF	; 255
    2342:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <irCommSendData>
								demoState = 3;					
    2346:	93 e0       	ldi	r25, 0x03	; 3
    2348:	90 93 64 03 	sts	0x0364, r25
    234c:	90 91 60 03 	lds	r25, 0x0360
    2350:	0c 94 62 05 	jmp	0xac4	; 0xac4 <main+0x120>
							irCommLastData = (int)((float)irCommLastData*1.411);
							irCommLastSensor = irCommReceivingSensor();	
							disableObstacleAvoidance();										
							angleDeg = getBearing(irCommLastSensor);
							if(angleDeg < 0) {
								angleDeg += 360;
    2354:	88 59       	subi	r24, 0x98	; 152
    2356:	9e 4f       	sbci	r25, 0xFE	; 254
    2358:	90 93 e5 03 	sts	0x03E5, r25
    235c:	80 93 e4 03 	sts	0x03E4, r24
    2360:	df ce       	rjmp	.-578    	; 0x2120 <main+0x177c>
										irCommRxByteExpected = 0;
										irCommMsgCount = 0;
									}
								} else {
									if(irCommRxByteExpected==(i-1)) {
										irCommRxByteExpected = i;
    2362:	50 93 16 04 	sts	0x0416, r21
										irCommMsgCount = 0;
    2366:	10 92 ec 03 	sts	0x03EC, r1
    236a:	45 2f       	mov	r20, r21
    236c:	2c ce       	rjmp	.-936    	; 0x1fc6 <main+0x1622>
							if(i<7) {
								i++;
							} else {
								i = 0;
							}
							switch(i) {
    236e:	65 e0       	ldi	r22, 0x05	; 5
    2370:	86 16       	cp	r8, r22
    2372:	91 04       	cpc	r9, r1
    2374:	c9 f1       	breq	.+114    	; 0x23e8 <__stack+0x1e9>
    2376:	85 e0       	ldi	r24, 0x05	; 5
    2378:	88 16       	cp	r8, r24
    237a:	91 04       	cpc	r9, r1
    237c:	98 f1       	brcs	.+102    	; 0x23e4 <__stack+0x1e5>
    237e:	96 e0       	ldi	r25, 0x06	; 6
    2380:	89 16       	cp	r8, r25
    2382:	91 04       	cpc	r9, r1
    2384:	41 f0       	breq	.+16     	; 0x2396 <__stack+0x197>
    2386:	a7 e0       	ldi	r26, 0x07	; 7
    2388:	8a 16       	cp	r8, r26
    238a:	91 04       	cpc	r9, r1
    238c:	11 f0       	breq	.+4      	; 0x2392 <__stack+0x193>
    238e:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <main+0x732>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(0);
									break;
								case 7: 
									updateRedLed(0);
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	01 c0       	rjmp	.+2      	; 0x2398 <__stack+0x199>
									updateRedLed(0);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 6: 
									updateRedLed(255);
    2396:	8f ef       	ldi	r24, 0xFF	; 255
									updateGreenLed(0);
									updateBlueLed(0);
									break;
								case 7: 
									updateRedLed(0);
    2398:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
									updateGreenLed(0);
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
									updateBlueLed(0);
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
    23a8:	90 91 60 03 	lds	r25, 0x0360
    23ac:	0c 94 62 05 	jmp	0xac4	; 0xac4 <main+0x120>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(235);
    23b0:	8b ee       	ldi	r24, 0xEB	; 235
    23b2:	b1 cf       	rjmp	.-158    	; 0x2316 <__stack+0x117>
									updateRedLed(235);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 6: 
									updateRedLed(255);
    23b4:	8f ef       	ldi	r24, 0xFF	; 255
    23b6:	69 cf       	rjmp	.-302    	; 0x228a <__stack+0x8b>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(235);
									break;
								case 4: 
									updateRedLed(235);
    23b8:	8b ee       	ldi	r24, 0xEB	; 235
    23ba:	12 ce       	rjmp	.-988    	; 0x1fe0 <main+0x163c>
									updateGreenLed(235);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(235);
    23bc:	8b ee       	ldi	r24, 0xEB	; 235
    23be:	4b cf       	rjmp	.-362    	; 0x2256 <__stack+0x57>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(255);
									break;
								case 1: 
									updateRedLed(0);
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	a9 cf       	rjmp	.-174    	; 0x2316 <__stack+0x117>
								if(irCommMsgCount >= 4) {
									irCommMsgCount = 0;
									if(irCommRxByteExpected < 7) {
										irCommRxByteExpected++;
									} else {
										irCommRxByteExpected = 0;
    23c4:	10 92 16 04 	sts	0x0416, r1
    23c8:	a5 cf       	rjmp	.-182    	; 0x2314 <__stack+0x115>
									updateRedLed(255);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 3: 
									updateRedLed(255);
    23ca:	8f ef       	ldi	r24, 0xFF	; 255
									updateRedLed(0);
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(0);
    23cc:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
									updateGreenLed(255);
    23d0:	8f ef       	ldi	r24, 0xFF	; 255
    23d2:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
									updateBlueLed(0);
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
    23dc:	90 91 60 03 	lds	r25, 0x0360
    23e0:	0c 94 62 05 	jmp	0xac4	; 0xac4 <main+0x120>
									updateRedLed(255);
									updateGreenLed(255);
									updateBlueLed(0);
									break;
								case 4: 
									updateRedLed(0);
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	0a cf       	rjmp	.-492    	; 0x21fc <main+0x1858>
									updateGreenLed(0);
									updateBlueLed(255);
									break;
								case 5: 
									updateRedLed(0);
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	f0 cf       	rjmp	.-32     	; 0x23cc <__stack+0x1cd>
									irCommLedToggle = 1;
									updateBlueLed(255);
									updateRedLed(255);
									updateGreenLed(128);
								} else {
									irCommLedToggle = 0;
    23ec:	10 92 eb 03 	sts	0x03EB, r1
									updateBlueLed(255);
    23f0:	8f ef       	ldi	r24, 0xFF	; 255
    23f2:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
									updateRedLed(255);
    23f6:	8f ef       	ldi	r24, 0xFF	; 255
    23f8:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
									updateGreenLed(235);
    23fc:	8b ee       	ldi	r24, 0xEB	; 235
    23fe:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
    2402:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <main+0x82e>
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    2406:	8f e0       	ldi	r24, 0x0F	; 15
    2408:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
								setRightSpeed(-10);
    240c:	86 ef       	ldi	r24, 0xF6	; 246
    240e:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
    2412:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    2416:	86 ef       	ldi	r24, 0xF6	; 246
    2418:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
								setRightSpeed(15);
    241c:	8f e0       	ldi	r24, 0x0F	; 15
    241e:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
    2422:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <main+0x2aa>
									setLeftSpeed(-7);
									setRightSpeed(7);
									targetAngle = 0.09;	// about -10 degrees
									demoState = 4;
								} else {	// turn right
									setLeftSpeed(7);
    2426:	87 e0       	ldi	r24, 0x07	; 7
    2428:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
									setRightSpeed(-7);
    242c:	89 ef       	ldi	r24, 0xF9	; 249
    242e:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
									targetAngle = -0.09;	// about 10 degrees
									demoState = 3;
    2432:	93 e0       	ldi	r25, 0x03	; 3
    2434:	90 93 64 03 	sts	0x0364, r25
    2438:	8c ee       	ldi	r24, 0xEC	; 236
    243a:	91 e5       	ldi	r25, 0x51	; 81
    243c:	a8 eb       	ldi	r26, 0xB8	; 184
    243e:	bd eb       	ldi	r27, 0xBD	; 189
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	ab 83       	std	Y+3, r26	; 0x03
    2446:	bc 83       	std	Y+4, r27	; 0x04
    2448:	e9 cb       	rjmp	.-2094   	; 0x1c1c <main+0x1278>

0000244a <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    244a:	84 b1       	in	r24, 0x04	; 4
    244c:	80 7f       	andi	r24, 0xF0	; 240
    244e:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    2450:	84 b1       	in	r24, 0x04	; 4
    2452:	87 60       	ori	r24, 0x07	; 7
    2454:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    2456:	80 e5       	ldi	r24, 0x50	; 80
    2458:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    245a:	8d b5       	in	r24, 0x2d	; 45
    245c:	81 60       	ori	r24, 0x01	; 1
    245e:	8d bd       	out	0x2d, r24	; 45

}
    2460:	08 95       	ret

00002462 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    2462:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    2464:	1d bc       	out	0x2d, r1	; 45
}
    2466:	08 95       	ret

00002468 <SPI_Write_Block>:
		  }
          buffer[i] = SPDR;
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    2468:	48 2f       	mov	r20, r24
    uint8_t i;
    for (i = 0; i < len; i++) {
    246a:	66 23       	and	r22, r22
    246c:	e9 f0       	breq	.+58     	; 0x24a8 <SPI_Write_Block+0x40>
    246e:	9c 01       	movw	r18, r24
    2470:	f9 01       	movw	r30, r18
          SPDR = data[i];
    2472:	80 81       	ld	r24, Z
    2474:	8e bd       	out	0x2e, r24	; 46
    2476:	20 91 0a 03 	lds	r18, 0x030A
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    247e:	0d b4       	in	r0, 0x2d	; 45
    2480:	07 fc       	sbrc	r0, 7
    2482:	09 c0       	rjmp	.+18     	; 0x2496 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    2484:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    2486:	37 e2       	ldi	r19, 0x27	; 39
    2488:	80 31       	cpi	r24, 0x10	; 16
    248a:	93 07       	cpc	r25, r19
    248c:	c0 f3       	brcs	.-16     	; 0x247e <SPI_Write_Block+0x16>
    248e:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    2490:	0d b4       	in	r0, 0x2d	; 45
    2492:	07 fe       	sbrs	r0, 7
    2494:	f7 cf       	rjmp	.-18     	; 0x2484 <SPI_Write_Block+0x1c>
    2496:	20 93 0a 03 	sts	0x030A, r18
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    249a:	22 23       	and	r18, r18
    249c:	29 f4       	brne	.+10     	; 0x24a8 <SPI_Write_Block+0x40>
			return;
    249e:	31 96       	adiw	r30, 0x01	; 1
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    24a0:	8e 2f       	mov	r24, r30
    24a2:	84 1b       	sub	r24, r20
    24a4:	86 17       	cp	r24, r22
    24a6:	28 f3       	brcs	.-54     	; 0x2472 <SPI_Write_Block+0xa>
    24a8:	08 95       	ret

000024aa <SPI_ReadWrite_Block>:

	SPCR = 0x00;
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    24aa:	cf 93       	push	r28
    24ac:	df 93       	push	r29
    24ae:	ec 01       	movw	r28, r24
    uint8_t i;
    for (i = 0; i < len; i++) {
    24b0:	44 23       	and	r20, r20
    24b2:	21 f1       	breq	.+72     	; 0x24fc <SPI_ReadWrite_Block+0x52>
    24b4:	a0 e0       	ldi	r26, 0x00	; 0
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
          SPDR = data[i];
    24b8:	fe 01       	movw	r30, r28
    24ba:	ea 0f       	add	r30, r26
    24bc:	fb 1f       	adc	r31, r27
    24be:	80 81       	ld	r24, Z
    24c0:	8e bd       	out	0x2e, r24	; 46
    24c2:	80 91 0a 03 	lds	r24, 0x030A
    24c6:	21 e0       	ldi	r18, 0x01	; 1
    24c8:	30 e0       	ldi	r19, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    24ca:	0d b4       	in	r0, 0x2d	; 45
    24cc:	07 fc       	sbrc	r0, 7
    24ce:	0a c0       	rjmp	.+20     	; 0x24e4 <SPI_ReadWrite_Block+0x3a>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    24d0:	2f 5f       	subi	r18, 0xFF	; 255
    24d2:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    24d4:	97 e2       	ldi	r25, 0x27	; 39
    24d6:	20 31       	cpi	r18, 0x10	; 16
    24d8:	39 07       	cpc	r19, r25
    24da:	b8 f3       	brcs	.-18     	; 0x24ca <SPI_ReadWrite_Block+0x20>
    24dc:	81 e0       	ldi	r24, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    24de:	0d b4       	in	r0, 0x2d	; 45
    24e0:	07 fe       	sbrs	r0, 7
    24e2:	f6 cf       	rjmp	.-20     	; 0x24d0 <SPI_ReadWrite_Block+0x26>
    24e4:	80 93 0a 03 	sts	0x030A, r24
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    24e8:	88 23       	and	r24, r24
    24ea:	41 f4       	brne	.+16     	; 0x24fc <SPI_ReadWrite_Block+0x52>
			return;
		  }
          buffer[i] = SPDR;
    24ec:	8e b5       	in	r24, 0x2e	; 46
    24ee:	fb 01       	movw	r30, r22
    24f0:	ea 0f       	add	r30, r26
    24f2:	fb 1f       	adc	r31, r27
    24f4:	80 83       	st	Z, r24
    24f6:	11 96       	adiw	r26, 0x01	; 1
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    24f8:	a4 17       	cp	r26, r20
    24fa:	f0 f2       	brcs	.-68     	; 0x24b8 <SPI_ReadWrite_Block+0xe>
		  if(spiCommError) {
			return;
		  }
          buffer[i] = SPDR;
    }
}
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	08 95       	ret

00002502 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    2502:	8e bd       	out	0x2e, r24	; 46
    2504:	20 91 0a 03 	lds	r18, 0x030A
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    250c:	0d b4       	in	r0, 0x2d	; 45
    250e:	07 fc       	sbrc	r0, 7
    2510:	09 c0       	rjmp	.+18     	; 0x2524 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    2512:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    2514:	37 e2       	ldi	r19, 0x27	; 39
    2516:	80 31       	cpi	r24, 0x10	; 16
    2518:	93 07       	cpc	r25, r19
    251a:	c0 f3       	brcs	.-16     	; 0x250c <SPI_Write_Byte+0xa>
    251c:	21 e0       	ldi	r18, 0x01	; 1
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    251e:	0d b4       	in	r0, 0x2d	; 45
    2520:	07 fe       	sbrs	r0, 7
    2522:	f7 cf       	rjmp	.-18     	; 0x2512 <SPI_Write_Byte+0x10>
    2524:	20 93 0a 03 	sts	0x030A, r18
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    2528:	8e b5       	in	r24, 0x2e	; 46
}
    252a:	08 95       	ret

0000252c <writeAckPayload>:
    mirf_CSN_hi;                    // Pull up chip select
    
    mirf_CE_hi;                     // Start transmission
}

void writeAckPayload(unsigned char *data, unsigned char size) {
    252c:	ff 92       	push	r15
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	08 2f       	mov	r16, r24
    2538:	f9 2e       	mov	r15, r25
    253a:	16 2f       	mov	r17, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    253c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    253e:	81 ee       	ldi	r24, 0xE1	; 225
    2540:	e0 df       	rcall	.-64     	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    2542:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    2544:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    2546:	88 ea       	ldi	r24, 0xA8	; 168
    2548:	dc df       	rcall	.-72     	; 0x2502 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    254a:	11 23       	and	r17, r17
    254c:	51 f0       	breq	.+20     	; 0x2562 <writeAckPayload+0x36>
    254e:	80 2f       	mov	r24, r16
    2550:	9f 2d       	mov	r25, r15
    2552:	9c 01       	movw	r18, r24
    2554:	e9 01       	movw	r28, r18
		SPI_Write_Byte(data[k]);
    2556:	89 91       	ld	r24, Y+
    2558:	d4 df       	rcall	.-88     	; 0x2502 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    255a:	9e 01       	movw	r18, r28
    255c:	20 1b       	sub	r18, r16
    255e:	21 17       	cp	r18, r17
    2560:	d0 f3       	brcs	.-12     	; 0x2556 <writeAckPayload+0x2a>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    2562:	28 9a       	sbi	0x05, 0	; 5


}
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	ff 90       	pop	r15
    256e:	08 95       	ret

00002570 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	00 d0       	rcall	.+0      	; 0x257a <mirf_config+0xa>
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    257e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2580:	80 e2       	ldi	r24, 0x20	; 32
    2582:	bf df       	rcall	.-130    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2584:	8d e0       	ldi	r24, 0x0D	; 13
    2586:	bd df       	rcall	.-134    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    2588:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    258a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    258c:	83 e2       	ldi	r24, 0x23	; 35
    258e:	b9 df       	rcall	.-142    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	b7 df       	rcall	.-146    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    2594:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    2596:	80 91 07 03 	lds	r24, 0x0307
    259a:	90 91 08 03 	lds	r25, 0x0308
    259e:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    25a0:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    25a2:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    25a4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    25a6:	80 e3       	ldi	r24, 0x30	; 48
    25a8:	ac df       	rcall	.-168    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    25aa:	8e 01       	movw	r16, r28
    25ac:	0f 5f       	subi	r16, 0xFF	; 255
    25ae:	1f 4f       	sbci	r17, 0xFF	; 255
    25b0:	c8 01       	movw	r24, r16
    25b2:	63 e0       	ldi	r22, 0x03	; 3
    25b4:	59 df       	rcall	.-334    	; 0x2468 <SPI_Write_Block>
    mirf_CSN_hi;
    25b6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    25b8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    25ba:	8a e2       	ldi	r24, 0x2A	; 42
    25bc:	a2 df       	rcall	.-188    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    25be:	c8 01       	movw	r24, r16
    25c0:	63 e0       	ldi	r22, 0x03	; 3
    25c2:	52 df       	rcall	.-348    	; 0x2468 <SPI_Write_Block>
    mirf_CSN_hi;
    25c4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    25c6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    25c8:	81 e2       	ldi	r24, 0x21	; 33
    25ca:	9b df       	rcall	.-202    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	99 df       	rcall	.-206    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    25d0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    25d2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    25d4:	82 e2       	ldi	r24, 0x22	; 34
    25d6:	95 df       	rcall	.-214    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	93 df       	rcall	.-218    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    25dc:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    25de:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    25e0:	84 e2       	ldi	r24, 0x24	; 36
    25e2:	8f df       	rcall	.-226    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    25e4:	82 e1       	ldi	r24, 0x12	; 18
    25e6:	8d df       	rcall	.-230    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    25e8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    25ea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    25ec:	85 e2       	ldi	r24, 0x25	; 37
    25ee:	89 df       	rcall	.-238    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    25f0:	88 e2       	ldi	r24, 0x28	; 40
    25f2:	87 df       	rcall	.-242    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    25f4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    25f6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    25f8:	81 e3       	ldi	r24, 0x31	; 49
    25fa:	83 df       	rcall	.-250    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    25fc:	8d e0       	ldi	r24, 0x0D	; 13
    25fe:	81 df       	rcall	.-254    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    2600:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    2602:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    2604:	80 e5       	ldi	r24, 0x50	; 80
    2606:	7d df       	rcall	.-262    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    2608:	83 e7       	ldi	r24, 0x73	; 115
    260a:	7b df       	rcall	.-266    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    260c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    260e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2610:	8c e3       	ldi	r24, 0x3C	; 60
    2612:	77 df       	rcall	.-274    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	75 df       	rcall	.-278    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    2618:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    261a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    261c:	8d e3       	ldi	r24, 0x3D	; 61
    261e:	71 df       	rcall	.-286    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2620:	86 e0       	ldi	r24, 0x06	; 6
    2622:	6f df       	rcall	.-290    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    2624:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2626:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2628:	80 e2       	ldi	r24, 0x20	; 32
    262a:	6b df       	rcall	.-298    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    262c:	8f e0       	ldi	r24, 0x0F	; 15
    262e:	69 df       	rcall	.-302    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    2630:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	1f 91       	pop	r17
    263e:	0f 91       	pop	r16
    2640:	08 95       	ret

00002642 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    2642:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    2644:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
}
    2646:	94 cf       	rjmp	.-216    	; 0x2570 <mirf_config>

00002648 <handleRFCommands>:
    SPI_Write_Byte(FLUSH_TX);
    mirf_CSN_hi;

}

void handleRFCommands() {
    2648:	0f 93       	push	r16
    264a:	1f 93       	push	r17
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	0f 92       	push	r0
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    2656:	80 91 44 04 	lds	r24, 0x0444
    265a:	88 23       	and	r24, r24
    265c:	31 f0       	breq	.+12     	; 0x266a <handleRFCommands+0x22>

		

	}

}
    265e:	0f 90       	pop	r0
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	1f 91       	pop	r17
    2666:	0f 91       	pop	r16
    2668:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    266a:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    266c:	8f ef       	ldi	r24, 0xFF	; 255
    266e:	49 df       	rcall	.-366    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    2670:	28 9a       	sbi	0x05, 0	; 5
	unsigned int i=0;
	static int tempGyroZ = 0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    2672:	86 ff       	sbrs	r24, 6
    2674:	f4 cf       	rjmp	.-24     	; 0x265e <handleRFCommands+0x16>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    2676:	80 91 09 03 	lds	r24, 0x0309
    267a:	82 60       	ori	r24, 0x02	; 2
    267c:	80 93 09 03 	sts	0x0309, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2680:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2682:	87 e2       	ldi	r24, 0x27	; 39
    2684:	3e df       	rcall	.-388    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2686:	80 e7       	ldi	r24, 0x70	; 112
    2688:	3c df       	rcall	.-392    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    268a:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    268c:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    268e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2690:	87 e1       	ldi	r24, 0x17	; 23
    2692:	37 df       	rcall	.-402    	; 0x2502 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2694:	be 01       	movw	r22, r28
    2696:	6f 5f       	subi	r22, 0xFF	; 255
    2698:	7f 4f       	sbci	r23, 0xFF	; 255
    269a:	cb 01       	movw	r24, r22
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	05 df       	rcall	.-502    	; 0x24aa <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    26a0:	28 9a       	sbi	0x05, 0	; 5
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	80 fd       	sbrc	r24, 0
    26a6:	db cf       	rjmp	.-74     	; 0x265e <handleRFCommands+0x16>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    26a8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    26aa:	81 e6       	ldi	r24, 0x61	; 97
    26ac:	2a df       	rcall	.-428    	; 0x2502 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    26ae:	88 e9       	ldi	r24, 0x98	; 152
    26b0:	98 e0       	ldi	r25, 0x08	; 8
    26b2:	bc 01       	movw	r22, r24
    26b4:	4d e0       	ldi	r20, 0x0D	; 13
    26b6:	f9 de       	rcall	.-526    	; 0x24aa <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    26b8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    26ba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    26bc:	87 e2       	ldi	r24, 0x27	; 39
    26be:	21 df       	rcall	.-446    	; 0x2502 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    26c0:	80 e4       	ldi	r24, 0x40	; 64
    26c2:	1f df       	rcall	.-450    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    26c4:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    26c6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    26c8:	82 ee       	ldi	r24, 0xE2	; 226
    26ca:	1b df       	rcall	.-458    	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    26cc:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(rfData);
		flush_rx_fifo();

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {
    26ce:	80 91 0b 03 	lds	r24, 0x030B
    26d2:	81 30       	cpi	r24, 0x01	; 1
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <handleRFCommands+0x90>
    26d6:	9e c2       	rjmp	.+1340   	; 0x2c14 <handleRFCommands+0x5cc>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    26d8:	80 91 98 08 	lds	r24, 0x0898
    26dc:	88 23       	and	r24, r24
    26de:	b9 f4       	brne	.+46     	; 0x270e <handleRFCommands+0xc6>
    26e0:	80 91 99 08 	lds	r24, 0x0899
    26e4:	88 23       	and	r24, r24
    26e6:	99 f4       	brne	.+38     	; 0x270e <handleRFCommands+0xc6>
    26e8:	80 91 9a 08 	lds	r24, 0x089A
    26ec:	88 23       	and	r24, r24
    26ee:	79 f4       	brne	.+30     	; 0x270e <handleRFCommands+0xc6>
    26f0:	80 91 9b 08 	lds	r24, 0x089B
    26f4:	88 30       	cpi	r24, 0x08	; 8
    26f6:	59 f4       	brne	.+22     	; 0x270e <handleRFCommands+0xc6>
    26f8:	80 91 9c 08 	lds	r24, 0x089C
    26fc:	88 23       	and	r24, r24
    26fe:	39 f4       	brne	.+14     	; 0x270e <handleRFCommands+0xc6>
    2700:	80 91 9d 08 	lds	r24, 0x089D
    2704:	88 23       	and	r24, r24
    2706:	19 f4       	brne	.+6      	; 0x270e <handleRFCommands+0xc6>

				sleep(60);
    2708:	8c e3       	ldi	r24, 0x3C	; 60
    270a:	0e 94 10 20 	call	0x4020	; 0x4020 <sleep>

			}

			if(calibrateOdomFlag==0) { 
    270e:	80 91 7c 04 	lds	r24, 0x047C
    2712:	88 23       	and	r24, r24
    2714:	41 f5       	brne	.+80     	; 0x2766 <handleRFCommands+0x11e>
				speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    2716:	80 91 9c 08 	lds	r24, 0x089C
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	2f 77       	andi	r18, 0x7F	; 127
    2720:	30 70       	andi	r19, 0x00	; 0
    2722:	30 93 06 03 	sts	0x0306, r19
    2726:	20 93 05 03 	sts	0x0305, r18
				speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    272a:	60 91 9d 08 	lds	r22, 0x089D
    272e:	46 2f       	mov	r20, r22
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	4f 77       	andi	r20, 0x7F	; 127
    2734:	50 70       	andi	r21, 0x00	; 0
    2736:	50 93 04 03 	sts	0x0304, r21
    273a:	40 93 03 03 	sts	0x0303, r20
											// in the same range of the measured speed that is 0..800.
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
    273e:	87 fd       	sbrc	r24, 7
    2740:	34 c2       	rjmp	.+1128   	; 0x2baa <handleRFCommands+0x562>
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
				} else {								// backward
					pwm_right_desired = -(speedr);
    2742:	88 27       	eor	r24, r24
    2744:	99 27       	eor	r25, r25
    2746:	82 1b       	sub	r24, r18
    2748:	93 0b       	sbc	r25, r19
    274a:	90 93 ec 02 	sts	0x02EC, r25
    274e:	80 93 eb 02 	sts	0x02EB, r24
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
    2752:	67 fd       	sbrc	r22, 7
    2754:	95 c3       	rjmp	.+1834   	; 0x2e80 <handleRFCommands+0x838>
					pwm_left_desired = speedl;
				} else {								// backward
					pwm_left_desired = -(speedl);
    2756:	88 27       	eor	r24, r24
    2758:	99 27       	eor	r25, r25
    275a:	84 1b       	sub	r24, r20
    275c:	95 0b       	sbc	r25, r21
    275e:	90 93 ee 02 	sts	0x02EE, r25
    2762:	80 93 ed 02 	sts	0x02ED, r24

			}


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    2766:	20 91 98 08 	lds	r18, 0x0898
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	30 93 81 08 	sts	0x0881, r19
    2770:	20 93 80 08 	sts	0x0880, r18
    2774:	e0 91 99 08 	lds	r30, 0x0899
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	f0 93 83 08 	sts	0x0883, r31
    277e:	e0 93 82 08 	sts	0x0882, r30
    2782:	00 91 9a 08 	lds	r16, 0x089A
    2786:	10 e0       	ldi	r17, 0x00	; 0
    2788:	10 93 85 08 	sts	0x0885, r17
    278c:	00 93 84 08 	sts	0x0884, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    2790:	92 2f       	mov	r25, r18
    2792:	88 27       	eor	r24, r24
    2794:	82 1b       	sub	r24, r18
    2796:	93 0b       	sbc	r25, r19
    2798:	64 e6       	ldi	r22, 0x64	; 100
    279a:	70 e0       	ldi	r23, 0x00	; 0
    279c:	0e 94 38 5d 	call	0xba70	; 0xba70 <__udivmodhi4>
    27a0:	26 2f       	mov	r18, r22
    27a2:	20 95       	com	r18
    27a4:	20 93 0c 02 	sts	0x020C, r18
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    27a8:	9e 2f       	mov	r25, r30
    27aa:	88 27       	eor	r24, r24
    27ac:	8e 1b       	sub	r24, r30
    27ae:	9f 0b       	sbc	r25, r31
    27b0:	64 e6       	ldi	r22, 0x64	; 100
    27b2:	70 e0       	ldi	r23, 0x00	; 0
    27b4:	0e 94 38 5d 	call	0xba70	; 0xba70 <__udivmodhi4>
    27b8:	60 95       	com	r22
    27ba:	60 93 0e 02 	sts	0x020E, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    27be:	90 2f       	mov	r25, r16
    27c0:	88 27       	eor	r24, r24
    27c2:	80 1b       	sub	r24, r16
    27c4:	91 0b       	sbc	r25, r17
    27c6:	64 e6       	ldi	r22, 0x64	; 100
    27c8:	70 e0       	ldi	r23, 0x00	; 0
    27ca:	0e 94 38 5d 	call	0xba70	; 0xba70 <__udivmodhi4>
    27ce:	60 95       	com	r22
    27d0:	60 93 0d 02 	sts	0x020D, r22
			updateRedLed(pwm_red);
    27d4:	82 2f       	mov	r24, r18
    27d6:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
			updateGreenLed(pwm_green);
    27da:	80 91 0d 02 	lds	r24, 0x020D
    27de:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
			updateBlueLed(pwm_blue);
    27e2:	80 91 0e 02 	lds	r24, 0x020E
    27e6:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    27ea:	20 91 9b 08 	lds	r18, 0x089B
    27ee:	92 2f       	mov	r25, r18
    27f0:	20 ff       	sbrs	r18, 0
    27f2:	13 c1       	rjmp	.+550    	; 0x2a1a <handleRFCommands+0x3d2>
				LED_IR1_LOW;
    27f4:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    27f6:	91 ff       	sbrs	r25, 1
    27f8:	3e c1       	rjmp	.+636    	; 0x2a76 <handleRFCommands+0x42e>
				LED_IR2_LOW;
    27fa:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    27fc:	92 ff       	sbrs	r25, 2
    27fe:	38 c1       	rjmp	.+624    	; 0x2a70 <handleRFCommands+0x428>
				irEnabled = 1;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	80 93 10 02 	sts	0x0210, r24
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    2806:	94 fd       	sbrc	r25, 4
    2808:	f3 c1       	rjmp	.+998    	; 0x2bf0 <handleRFCommands+0x5a8>
				calibrateSensors();
				resetOdometry();
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    280a:	96 ff       	sbrs	r25, 6
    280c:	2e c1       	rjmp	.+604    	; 0x2a6a <handleRFCommands+0x422>
				obstacleAvoidanceEnabled = 1;
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	80 93 84 03 	sts	0x0384, r24
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    2814:	27 fd       	sbrc	r18, 7
    2816:	fa c1       	rjmp	.+1012   	; 0x2c0c <handleRFCommands+0x5c4>
				cliffAvoidanceEnabled = 1;
			} else {
				cliffAvoidanceEnabled = 0;
    2818:	10 92 85 03 	sts	0x0385, r1
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
    281c:	80 91 9e 08 	lds	r24, 0x089E
    2820:	80 ff       	sbrs	r24, 0
    2822:	1d c1       	rjmp	.+570    	; 0x2a5e <handleRFCommands+0x416>
					GREEN_LED0_ON;
    2824:	80 91 0b 01 	lds	r24, 0x010B
    2828:	8e 7f       	andi	r24, 0xFE	; 254
    282a:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
    282e:	80 91 9e 08 	lds	r24, 0x089E
    2832:	81 ff       	sbrs	r24, 1
    2834:	0e c1       	rjmp	.+540    	; 0x2a52 <handleRFCommands+0x40a>
					GREEN_LED1_ON;
    2836:	80 91 0b 01 	lds	r24, 0x010B
    283a:	8d 7f       	andi	r24, 0xFD	; 253
    283c:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
    2840:	80 91 9e 08 	lds	r24, 0x089E
    2844:	82 ff       	sbrs	r24, 2
    2846:	ff c0       	rjmp	.+510    	; 0x2a46 <handleRFCommands+0x3fe>
					GREEN_LED2_ON;
    2848:	80 91 0b 01 	lds	r24, 0x010B
    284c:	8b 7f       	andi	r24, 0xFB	; 251
    284e:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
    2852:	80 91 9e 08 	lds	r24, 0x089E
    2856:	83 ff       	sbrs	r24, 3
    2858:	f4 c0       	rjmp	.+488    	; 0x2a42 <handleRFCommands+0x3fa>
					GREEN_LED3_ON;
    285a:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
    285c:	80 91 9e 08 	lds	r24, 0x089E
    2860:	84 ff       	sbrs	r24, 4
    2862:	e9 c0       	rjmp	.+466    	; 0x2a36 <handleRFCommands+0x3ee>
					GREEN_LED4_ON;
    2864:	80 91 0b 01 	lds	r24, 0x010B
    2868:	8f 7e       	andi	r24, 0xEF	; 239
    286a:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
    286e:	80 91 9e 08 	lds	r24, 0x089E
    2872:	85 ff       	sbrs	r24, 5
    2874:	da c0       	rjmp	.+436    	; 0x2a2a <handleRFCommands+0x3e2>
					GREEN_LED5_ON;
    2876:	80 91 0b 01 	lds	r24, 0x010B
    287a:	8f 7d       	andi	r24, 0xDF	; 223
    287c:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
    2880:	80 91 9e 08 	lds	r24, 0x089E
    2884:	86 ff       	sbrs	r24, 6
    2886:	cb c0       	rjmp	.+406    	; 0x2a1e <handleRFCommands+0x3d6>
					GREEN_LED6_ON;
    2888:	80 91 0b 01 	lds	r24, 0x010B
    288c:	8f 7b       	andi	r24, 0xBF	; 191
    288e:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
    2892:	80 91 9e 08 	lds	r24, 0x089E
    2896:	87 fd       	sbrc	r24, 7
    2898:	b3 c1       	rjmp	.+870    	; 0x2c00 <handleRFCommands+0x5b8>
					GREEN_LED7_ON;
				} else {
					GREEN_LED7_OFF;
    289a:	80 91 0b 01 	lds	r24, 0x010B
    289e:	80 68       	ori	r24, 0x80	; 128
    28a0:	80 93 0b 01 	sts	0x010B, r24
				}

			#endif
		
			if(currentSelector == 8) {
    28a4:	80 91 60 03 	lds	r24, 0x0360
    28a8:	88 30       	cpi	r24, 0x08	; 8
    28aa:	09 f4       	brne	.+2      	; 0x28ae <handleRFCommands+0x266>
    28ac:	83 c1       	rjmp	.+774    	; 0x2bb4 <handleRFCommands+0x56c>

			// read and handle the remaining bytes of the payload (at the moment not used)


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;
    28ae:	80 91 0b 02 	lds	r24, 0x020B
    28b2:	80 93 d0 07 	sts	0x07D0, r24

			switch(packetId) {
    28b6:	85 30       	cpi	r24, 0x05	; 5
    28b8:	09 f4       	brne	.+2      	; 0x28bc <handleRFCommands+0x274>
    28ba:	2b c2       	rjmp	.+1110   	; 0x2d12 <handleRFCommands+0x6ca>
    28bc:	86 30       	cpi	r24, 0x06	; 6
    28be:	08 f4       	brcc	.+2      	; 0x28c2 <handleRFCommands+0x27a>
    28c0:	dc c0       	rjmp	.+440    	; 0x2a7a <handleRFCommands+0x432>
    28c2:	86 30       	cpi	r24, 0x06	; 6
    28c4:	09 f4       	brne	.+2      	; 0x28c8 <handleRFCommands+0x280>
    28c6:	81 c2       	rjmp	.+1282   	; 0x2dca <handleRFCommands+0x782>
    28c8:	87 30       	cpi	r24, 0x07	; 7
    28ca:	09 f0       	breq	.+2      	; 0x28ce <handleRFCommands+0x286>
    28cc:	30 c1       	rjmp	.+608    	; 0x2b2e <handleRFCommands+0x4e6>
					packetId = 7;
					break;


				case 7:
					ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    28ce:	60 91 d3 02 	lds	r22, 0x02D3
    28d2:	70 91 d4 02 	lds	r23, 0x02D4
    28d6:	80 91 d5 02 	lds	r24, 0x02D5
    28da:	90 91 d6 02 	lds	r25, 0x02D6
    28de:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    28e2:	60 93 d1 07 	sts	0x07D1, r22
					ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    28e6:	27 2f       	mov	r18, r23
    28e8:	38 2f       	mov	r19, r24
    28ea:	49 2f       	mov	r20, r25
    28ec:	55 27       	eor	r21, r21
    28ee:	47 fd       	sbrc	r20, 7
    28f0:	5a 95       	dec	r21
    28f2:	20 93 d2 07 	sts	0x07D2, r18
					ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    28f6:	9c 01       	movw	r18, r24
    28f8:	55 27       	eor	r21, r21
    28fa:	37 fd       	sbrc	r19, 7
    28fc:	50 95       	com	r21
    28fe:	45 2f       	mov	r20, r21
    2900:	20 93 d3 07 	sts	0x07D3, r18
					ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    2904:	69 2f       	mov	r22, r25
    2906:	99 27       	eor	r25, r25
    2908:	67 fd       	sbrc	r22, 7
    290a:	90 95       	com	r25
    290c:	79 2f       	mov	r23, r25
    290e:	89 2f       	mov	r24, r25
    2910:	60 93 d4 07 	sts	0x07D4, r22
					ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    2914:	60 91 cf 02 	lds	r22, 0x02CF
    2918:	70 91 d0 02 	lds	r23, 0x02D0
    291c:	80 91 d1 02 	lds	r24, 0x02D1
    2920:	90 91 d2 02 	lds	r25, 0x02D2
    2924:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    2928:	60 93 d5 07 	sts	0x07D5, r22
					ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    292c:	27 2f       	mov	r18, r23
    292e:	38 2f       	mov	r19, r24
    2930:	49 2f       	mov	r20, r25
    2932:	55 27       	eor	r21, r21
    2934:	47 fd       	sbrc	r20, 7
    2936:	5a 95       	dec	r21
    2938:	20 93 d6 07 	sts	0x07D6, r18
					ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    293c:	9c 01       	movw	r18, r24
    293e:	55 27       	eor	r21, r21
    2940:	37 fd       	sbrc	r19, 7
    2942:	50 95       	com	r21
    2944:	45 2f       	mov	r20, r21
    2946:	20 93 d7 07 	sts	0x07D7, r18
					ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    294a:	69 2f       	mov	r22, r25
    294c:	99 27       	eor	r25, r25
    294e:	67 fd       	sbrc	r22, 7
    2950:	90 95       	com	r25
    2952:	79 2f       	mov	r23, r25
    2954:	89 2f       	mov	r24, r25
    2956:	60 93 d8 07 	sts	0x07D8, r22
					lastTheta = theta;
    295a:	60 91 87 03 	lds	r22, 0x0387
    295e:	70 91 88 03 	lds	r23, 0x0388
    2962:	80 91 89 03 	lds	r24, 0x0389
    2966:	90 91 8a 03 	lds	r25, 0x038A
    296a:	60 93 8b 03 	sts	0x038B, r22
    296e:	70 93 8c 03 	sts	0x038C, r23
    2972:	80 93 8d 03 	sts	0x038D, r24
    2976:	90 93 8e 03 	sts	0x038E, r25
					ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e4       	ldi	r19, 0x40	; 64
    297e:	4f e0       	ldi	r20, 0x0F	; 15
    2980:	54 e4       	ldi	r21, 0x44	; 68
    2982:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    2986:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    298a:	60 93 d9 07 	sts	0x07D9, r22
					ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    298e:	67 2f       	mov	r22, r23
    2990:	77 0f       	add	r23, r23
    2992:	77 0b       	sbc	r23, r23
    2994:	60 93 da 07 	sts	0x07DA, r22
					ackPayload[11] = ((unsigned int)xPos)&0xFF;
    2998:	60 91 8f 03 	lds	r22, 0x038F
    299c:	70 91 90 03 	lds	r23, 0x0390
    29a0:	80 91 91 03 	lds	r24, 0x0391
    29a4:	90 91 92 03 	lds	r25, 0x0392
    29a8:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__fixunssfsi>
    29ac:	60 93 db 07 	sts	0x07DB, r22
					ackPayload[12] = ((unsigned int)xPos)>>8;
    29b0:	70 93 dc 07 	sts	0x07DC, r23
					ackPayload[13] = ((unsigned int)yPos)&0xFF;
    29b4:	60 91 93 03 	lds	r22, 0x0393
    29b8:	70 91 94 03 	lds	r23, 0x0394
    29bc:	80 91 95 03 	lds	r24, 0x0395
    29c0:	90 91 96 03 	lds	r25, 0x0396
    29c4:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__fixunssfsi>
    29c8:	60 93 dd 07 	sts	0x07DD, r22
					ackPayload[14] = ((unsigned int)yPos)>>8;
    29cc:	70 93 de 07 	sts	0x07DE, r23
					//ackPayload[12] = ((unsigned int)xPosOld)>>8;
					//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
					//ackPayload[14] = ((unsigned int)yPosOld)>>8;
					
					// Keep 6 LSbits of MSB and 2MSbits of LSB: max rate is +-128dps (0x0FFF*15.625dps), resolution=1 dps (0x003F*15.625dps)
					tempGyroZ = gyroZ;
    29d0:	80 91 3c 03 	lds	r24, 0x033C
    29d4:	90 91 3d 03 	lds	r25, 0x033D
    29d8:	90 93 1b 02 	sts	0x021B, r25
    29dc:	80 93 1a 02 	sts	0x021A, r24
					if(tempGyroZ > 0x1FFF) {
    29e0:	20 e2       	ldi	r18, 0x20	; 32
    29e2:	80 30       	cpi	r24, 0x00	; 0
    29e4:	92 07       	cpc	r25, r18
    29e6:	0c f4       	brge	.+2      	; 0x29ea <handleRFCommands+0x3a2>
    29e8:	50 c2       	rjmp	.+1184   	; 0x2e8a <handleRFCommands+0x842>
						tempGyroZ = 0x1FFF;
    29ea:	8f ef       	ldi	r24, 0xFF	; 255
    29ec:	9f e1       	ldi	r25, 0x1F	; 31
    29ee:	90 93 1b 02 	sts	0x021B, r25
    29f2:	80 93 1a 02 	sts	0x021A, r24
					} else if(tempGyroZ < -8192) {
						tempGyroZ = -8192;
					}
					ackPayload[15] = (tempGyroZ>>6);
    29f6:	80 91 1a 02 	lds	r24, 0x021A
    29fa:	90 91 1b 02 	lds	r25, 0x021B
    29fe:	08 2e       	mov	r0, r24
    2a00:	89 2f       	mov	r24, r25
    2a02:	00 0c       	add	r0, r0
    2a04:	88 1f       	adc	r24, r24
    2a06:	99 0b       	sbc	r25, r25
    2a08:	00 0c       	add	r0, r0
    2a0a:	88 1f       	adc	r24, r24
    2a0c:	99 1f       	adc	r25, r25
    2a0e:	80 93 df 07 	sts	0x07DF, r24
					packetId = 3;
    2a12:	83 e0       	ldi	r24, 0x03	; 3
    2a14:	80 93 0b 02 	sts	0x020B, r24
    2a18:	8a c0       	rjmp	.+276    	; 0x2b2e <handleRFCommands+0x4e6>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
    2a1a:	44 9a       	sbi	0x08, 4	; 8
    2a1c:	ec ce       	rjmp	.-552    	; 0x27f6 <handleRFCommands+0x1ae>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GREEN_LED6_ON;
				} else {
					GREEN_LED6_OFF;
    2a1e:	80 91 0b 01 	lds	r24, 0x010B
    2a22:	80 64       	ori	r24, 0x40	; 64
    2a24:	80 93 0b 01 	sts	0x010B, r24
    2a28:	34 cf       	rjmp	.-408    	; 0x2892 <handleRFCommands+0x24a>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GREEN_LED5_ON;
				} else {
					GREEN_LED5_OFF;
    2a2a:	80 91 0b 01 	lds	r24, 0x010B
    2a2e:	80 62       	ori	r24, 0x20	; 32
    2a30:	80 93 0b 01 	sts	0x010B, r24
    2a34:	25 cf       	rjmp	.-438    	; 0x2880 <handleRFCommands+0x238>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GREEN_LED4_ON;
				} else {
					GREEN_LED4_OFF;
    2a36:	80 91 0b 01 	lds	r24, 0x010B
    2a3a:	80 61       	ori	r24, 0x10	; 16
    2a3c:	80 93 0b 01 	sts	0x010B, r24
    2a40:	16 cf       	rjmp	.-468    	; 0x286e <handleRFCommands+0x226>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GREEN_LED3_ON;
				} else {
					GREEN_LED3_OFF;
    2a42:	a3 9a       	sbi	0x14, 3	; 20
    2a44:	0b cf       	rjmp	.-490    	; 0x285c <handleRFCommands+0x214>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GREEN_LED2_ON;
				} else {
					GREEN_LED2_OFF;
    2a46:	80 91 0b 01 	lds	r24, 0x010B
    2a4a:	84 60       	ori	r24, 0x04	; 4
    2a4c:	80 93 0b 01 	sts	0x010B, r24
    2a50:	00 cf       	rjmp	.-512    	; 0x2852 <handleRFCommands+0x20a>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GREEN_LED1_ON;
				} else {
					GREEN_LED1_OFF;
    2a52:	80 91 0b 01 	lds	r24, 0x010B
    2a56:	82 60       	ori	r24, 0x02	; 2
    2a58:	80 93 0b 01 	sts	0x010B, r24
    2a5c:	f1 ce       	rjmp	.-542    	; 0x2840 <handleRFCommands+0x1f8>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GREEN_LED0_ON;
				} else {
					GREEN_LED0_OFF;
    2a5e:	80 91 0b 01 	lds	r24, 0x010B
    2a62:	81 60       	ori	r24, 0x01	; 1
    2a64:	80 93 0b 01 	sts	0x010B, r24
    2a68:	e2 ce       	rjmp	.-572    	; 0x282e <handleRFCommands+0x1e6>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    2a6a:	10 92 84 03 	sts	0x0384, r1
    2a6e:	d2 ce       	rjmp	.-604    	; 0x2814 <handleRFCommands+0x1cc>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    2a70:	10 92 10 02 	sts	0x0210, r1
    2a74:	c8 ce       	rjmp	.-624    	; 0x2806 <handleRFCommands+0x1be>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    2a76:	45 9a       	sbi	0x08, 5	; 8
    2a78:	c1 ce       	rjmp	.-638    	; 0x27fc <handleRFCommands+0x1b4>


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    2a7a:	83 30       	cpi	r24, 0x03	; 3
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <handleRFCommands+0x438>
    2a7e:	cf c0       	rjmp	.+414    	; 0x2c1e <handleRFCommands+0x5d6>
    2a80:	84 30       	cpi	r24, 0x04	; 4
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <handleRFCommands+0x43e>
    2a84:	54 c0       	rjmp	.+168    	; 0x2b2e <handleRFCommands+0x4e6>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    2a86:	80 91 5f 02 	lds	r24, 0x025F
    2a8a:	90 91 60 02 	lds	r25, 0x0260
    2a8e:	80 93 d1 07 	sts	0x07D1, r24
					ackPayload[2] = proximityResult[4]>>8;
    2a92:	89 2f       	mov	r24, r25
    2a94:	99 0f       	add	r25, r25
    2a96:	99 0b       	sbc	r25, r25
    2a98:	80 93 d2 07 	sts	0x07D2, r24
					ackPayload[3] = proximityResult[8]&0xFF;
    2a9c:	80 91 67 02 	lds	r24, 0x0267
    2aa0:	90 91 68 02 	lds	r25, 0x0268
    2aa4:	80 93 d3 07 	sts	0x07D3, r24
					ackPayload[4] = proximityResult[8]>>8;
    2aa8:	89 2f       	mov	r24, r25
    2aaa:	99 0f       	add	r25, r25
    2aac:	99 0b       	sbc	r25, r25
    2aae:	80 93 d4 07 	sts	0x07D4, r24
					ackPayload[5] = proximityResult[9]&0xFF;
    2ab2:	80 91 69 02 	lds	r24, 0x0269
    2ab6:	90 91 6a 02 	lds	r25, 0x026A
    2aba:	80 93 d5 07 	sts	0x07D5, r24
					ackPayload[6] = proximityResult[9]>>8;
    2abe:	89 2f       	mov	r24, r25
    2ac0:	99 0f       	add	r25, r25
    2ac2:	99 0b       	sbc	r25, r25
    2ac4:	80 93 d6 07 	sts	0x07D6, r24
					ackPayload[7] = proximityResult[10]&0xFF;
    2ac8:	80 91 6b 02 	lds	r24, 0x026B
    2acc:	90 91 6c 02 	lds	r25, 0x026C
    2ad0:	80 93 d7 07 	sts	0x07D7, r24
					ackPayload[8] = proximityResult[10]>>8;
    2ad4:	89 2f       	mov	r24, r25
    2ad6:	99 0f       	add	r25, r25
    2ad8:	99 0b       	sbc	r25, r25
    2ada:	80 93 d8 07 	sts	0x07D8, r24
					ackPayload[9] = proximityResult[11]&0xFF;
    2ade:	80 91 6d 02 	lds	r24, 0x026D
    2ae2:	90 91 6e 02 	lds	r25, 0x026E
    2ae6:	80 93 d9 07 	sts	0x07D9, r24
					ackPayload[10] = proximityResult[11]>>8;
    2aea:	89 2f       	mov	r24, r25
    2aec:	99 0f       	add	r25, r25
    2aee:	99 0b       	sbc	r25, r25
    2af0:	80 93 da 07 	sts	0x07DA, r24
					ackPayload[11] = accX&0xFF;
    2af4:	80 91 1a 03 	lds	r24, 0x031A
    2af8:	90 91 1b 03 	lds	r25, 0x031B
    2afc:	80 93 db 07 	sts	0x07DB, r24
					ackPayload[12] = accX>>8;
    2b00:	89 2f       	mov	r24, r25
    2b02:	99 0f       	add	r25, r25
    2b04:	99 0b       	sbc	r25, r25
    2b06:	80 93 dc 07 	sts	0x07DC, r24
					ackPayload[13] = accY&0xFF;
    2b0a:	80 91 1c 03 	lds	r24, 0x031C
    2b0e:	90 91 1d 03 	lds	r25, 0x031D
    2b12:	80 93 dd 07 	sts	0x07DD, r24
					ackPayload[14] = accY>>8;
    2b16:	89 2f       	mov	r24, r25
    2b18:	99 0f       	add	r25, r25
    2b1a:	99 0b       	sbc	r25, r25
    2b1c:	80 93 de 07 	sts	0x07DE, r24
					ackPayload[15] = irCommand;
    2b20:	80 91 11 03 	lds	r24, 0x0311
    2b24:	80 93 df 07 	sts	0x07DF, r24
					packetId = 5;
    2b28:	85 e0       	ldi	r24, 0x05	; 5
    2b2a:	80 93 0b 02 	sts	0x020B, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    2b2e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    2b30:	81 ee       	ldi	r24, 0xE1	; 225
    2b32:	e7 dc       	rcall	.-1586   	; 0x2502 <SPI_Write_Byte>
    mirf_CSN_hi;
    2b34:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    2b36:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    2b38:	88 ea       	ldi	r24, 0xA8	; 168
    2b3a:	e3 dc       	rcall	.-1594   	; 0x2502 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    2b3c:	80 91 d0 07 	lds	r24, 0x07D0
    2b40:	e0 dc       	rcall	.-1600   	; 0x2502 <SPI_Write_Byte>
    2b42:	80 91 d1 07 	lds	r24, 0x07D1
    2b46:	dd dc       	rcall	.-1606   	; 0x2502 <SPI_Write_Byte>
    2b48:	80 91 d2 07 	lds	r24, 0x07D2
    2b4c:	da dc       	rcall	.-1612   	; 0x2502 <SPI_Write_Byte>
    2b4e:	80 91 d3 07 	lds	r24, 0x07D3
    2b52:	d7 dc       	rcall	.-1618   	; 0x2502 <SPI_Write_Byte>
    2b54:	80 91 d4 07 	lds	r24, 0x07D4
    2b58:	d4 dc       	rcall	.-1624   	; 0x2502 <SPI_Write_Byte>
    2b5a:	80 91 d5 07 	lds	r24, 0x07D5
    2b5e:	d1 dc       	rcall	.-1630   	; 0x2502 <SPI_Write_Byte>
    2b60:	80 91 d6 07 	lds	r24, 0x07D6
    2b64:	ce dc       	rcall	.-1636   	; 0x2502 <SPI_Write_Byte>
    2b66:	80 91 d7 07 	lds	r24, 0x07D7
    2b6a:	cb dc       	rcall	.-1642   	; 0x2502 <SPI_Write_Byte>
    2b6c:	80 91 d8 07 	lds	r24, 0x07D8
    2b70:	c8 dc       	rcall	.-1648   	; 0x2502 <SPI_Write_Byte>
    2b72:	80 91 d9 07 	lds	r24, 0x07D9
    2b76:	c5 dc       	rcall	.-1654   	; 0x2502 <SPI_Write_Byte>
    2b78:	80 91 da 07 	lds	r24, 0x07DA
    2b7c:	c2 dc       	rcall	.-1660   	; 0x2502 <SPI_Write_Byte>
    2b7e:	80 91 db 07 	lds	r24, 0x07DB
    2b82:	bf dc       	rcall	.-1666   	; 0x2502 <SPI_Write_Byte>
    2b84:	80 91 dc 07 	lds	r24, 0x07DC
    2b88:	bc dc       	rcall	.-1672   	; 0x2502 <SPI_Write_Byte>
    2b8a:	80 91 dd 07 	lds	r24, 0x07DD
    2b8e:	b9 dc       	rcall	.-1678   	; 0x2502 <SPI_Write_Byte>
    2b90:	80 91 de 07 	lds	r24, 0x07DE
    2b94:	b6 dc       	rcall	.-1684   	; 0x2502 <SPI_Write_Byte>
    2b96:	80 91 df 07 	lds	r24, 0x07DF
    2b9a:	b3 dc       	rcall	.-1690   	; 0x2502 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    2b9c:	28 9a       	sbi	0x05, 0	; 5

		

	}

}
    2b9e:	0f 90       	pop	r0
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	1f 91       	pop	r17
    2ba6:	0f 91       	pop	r16
    2ba8:	08 95       	ret
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
    2baa:	30 93 ec 02 	sts	0x02EC, r19
    2bae:	20 93 eb 02 	sts	0x02EB, r18
    2bb2:	cf cd       	rjmp	.-1122   	; 0x2752 <handleRFCommands+0x10a>
				}

			#endif
		
			if(currentSelector == 8) {
				if(calibrateOdomFlag==0) {
    2bb4:	80 91 7c 04 	lds	r24, 0x047C
    2bb8:	88 23       	and	r24, r24
    2bba:	09 f0       	breq	.+2      	; 0x2bbe <handleRFCommands+0x576>
    2bbc:	78 ce       	rjmp	.-784    	; 0x28ae <handleRFCommands+0x266>
					if((rfData[7]&0b00000001)==0b00000001) {
    2bbe:	80 91 9f 08 	lds	r24, 0x089F
    2bc2:	80 ff       	sbrs	r24, 0
    2bc4:	74 ce       	rjmp	.-792    	; 0x28ae <handleRFCommands+0x266>
						calibrateSensors();
    2bc6:	0e 94 c7 48 	call	0x918e	; 0x918e <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    2bca:	8f ef       	ldi	r24, 0xFF	; 255
    2bcc:	93 e0       	ldi	r25, 0x03	; 3
    2bce:	90 93 68 02 	sts	0x0268, r25
    2bd2:	80 93 67 02 	sts	0x0267, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    2bd6:	90 93 6e 02 	sts	0x026E, r25
    2bda:	80 93 6d 02 	sts	0x026D, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
    2bde:	86 e0       	ldi	r24, 0x06	; 6
    2be0:	80 93 6f 0a 	sts	0x0A6F, r24
						calibVelIndex = 1;
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	80 93 c9 07 	sts	0x07C9, r24
						calibrateOdomFlag = 1;
    2bea:	80 93 7c 04 	sts	0x047C, r24
    2bee:	5f ce       	rjmp	.-834    	; 0x28ae <handleRFCommands+0x266>
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
				calibrateSensors();
    2bf0:	0e 94 c7 48 	call	0x918e	; 0x918e <calibrateSensors>
				resetOdometry();
    2bf4:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <resetOdometry>
    2bf8:	20 91 9b 08 	lds	r18, 0x089B
    2bfc:	92 2f       	mov	r25, r18
    2bfe:	05 ce       	rjmp	.-1014   	; 0x280a <handleRFCommands+0x1c2>
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
					GREEN_LED7_ON;
    2c00:	80 91 0b 01 	lds	r24, 0x010B
    2c04:	8f 77       	andi	r24, 0x7F	; 127
    2c06:	80 93 0b 01 	sts	0x010B, r24
    2c0a:	4c ce       	rjmp	.-872    	; 0x28a4 <handleRFCommands+0x25c>
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	80 93 85 03 	sts	0x0385, r24
    2c12:	04 ce       	rjmp	.-1016   	; 0x281c <handleRFCommands+0x1d4>

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {

			writeAckPayload(ackPayload, 16);
    2c14:	80 ed       	ldi	r24, 0xD0	; 208
    2c16:	97 e0       	ldi	r25, 0x07	; 7
    2c18:	60 e1       	ldi	r22, 0x10	; 16
    2c1a:	88 dc       	rcall	.-1776   	; 0x252c <writeAckPayload>
    2c1c:	20 cd       	rjmp	.-1472   	; 0x265e <handleRFCommands+0x16>
			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
    2c1e:	80 91 57 02 	lds	r24, 0x0257
    2c22:	90 91 58 02 	lds	r25, 0x0258
    2c26:	80 93 d1 07 	sts	0x07D1, r24
					ackPayload[2] = proximityResult[0]>>8;
    2c2a:	89 2f       	mov	r24, r25
    2c2c:	99 0f       	add	r25, r25
    2c2e:	99 0b       	sbc	r25, r25
    2c30:	80 93 d2 07 	sts	0x07D2, r24
					ackPayload[3] = proximityResult[1]&0xFF;
    2c34:	80 91 59 02 	lds	r24, 0x0259
    2c38:	90 91 5a 02 	lds	r25, 0x025A
    2c3c:	80 93 d3 07 	sts	0x07D3, r24
					ackPayload[4] = proximityResult[1]>>8;
    2c40:	89 2f       	mov	r24, r25
    2c42:	99 0f       	add	r25, r25
    2c44:	99 0b       	sbc	r25, r25
    2c46:	80 93 d4 07 	sts	0x07D4, r24
					ackPayload[5] = proximityResult[2]&0xFF;
    2c4a:	80 91 5b 02 	lds	r24, 0x025B
    2c4e:	90 91 5c 02 	lds	r25, 0x025C
    2c52:	80 93 d5 07 	sts	0x07D5, r24
					ackPayload[6] = proximityResult[2]>>8;
    2c56:	89 2f       	mov	r24, r25
    2c58:	99 0f       	add	r25, r25
    2c5a:	99 0b       	sbc	r25, r25
    2c5c:	80 93 d6 07 	sts	0x07D6, r24
					ackPayload[7] = proximityResult[3]&0xFF;
    2c60:	80 91 5d 02 	lds	r24, 0x025D
    2c64:	90 91 5e 02 	lds	r25, 0x025E
    2c68:	80 93 d7 07 	sts	0x07D7, r24
					ackPayload[8] = proximityResult[3]>>8;
    2c6c:	89 2f       	mov	r24, r25
    2c6e:	99 0f       	add	r25, r25
    2c70:	99 0b       	sbc	r25, r25
    2c72:	80 93 d8 07 	sts	0x07D8, r24
					ackPayload[9] = proximityResult[5]&0xFF;
    2c76:	80 91 61 02 	lds	r24, 0x0261
    2c7a:	90 91 62 02 	lds	r25, 0x0262
    2c7e:	80 93 d9 07 	sts	0x07D9, r24
					ackPayload[10] = proximityResult[5]>>8;
    2c82:	89 2f       	mov	r24, r25
    2c84:	99 0f       	add	r25, r25
    2c86:	99 0b       	sbc	r25, r25
    2c88:	80 93 da 07 	sts	0x07DA, r24
					ackPayload[11] = proximityResult[6]&0xFF;
    2c8c:	80 91 63 02 	lds	r24, 0x0263
    2c90:	90 91 64 02 	lds	r25, 0x0264
    2c94:	80 93 db 07 	sts	0x07DB, r24
					ackPayload[12] = proximityResult[6]>>8;
    2c98:	89 2f       	mov	r24, r25
    2c9a:	99 0f       	add	r25, r25
    2c9c:	99 0b       	sbc	r25, r25
    2c9e:	80 93 dc 07 	sts	0x07DC, r24
					ackPayload[13] = proximityResult[7]&0xFF;
    2ca2:	80 91 65 02 	lds	r24, 0x0265
    2ca6:	90 91 66 02 	lds	r25, 0x0266
    2caa:	80 93 dd 07 	sts	0x07DD, r24
					ackPayload[14] = proximityResult[7]>>8;
    2cae:	89 2f       	mov	r24, r25
    2cb0:	99 0f       	add	r25, r25
    2cb2:	99 0b       	sbc	r25, r25
    2cb4:	80 93 de 07 	sts	0x07DE, r24
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    2cb8:	20 91 03 01 	lds	r18, 0x0103
    2cbc:	80 91 03 01 	lds	r24, 0x0103
    2cc0:	40 91 03 01 	lds	r20, 0x0103
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	80 72       	andi	r24, 0x20	; 32
    2cc8:	90 70       	andi	r25, 0x00	; 0
    2cca:	95 95       	asr	r25
    2ccc:	87 95       	ror	r24
    2cce:	95 95       	asr	r25
    2cd0:	87 95       	ror	r24
    2cd2:	95 95       	asr	r25
    2cd4:	87 95       	ror	r24
    2cd6:	95 95       	asr	r25
    2cd8:	87 95       	ror	r24
    2cda:	95 95       	asr	r25
    2cdc:	87 95       	ror	r24
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	44 1f       	adc	r20, r20
    2ce4:	44 27       	eor	r20, r20
    2ce6:	44 1f       	adc	r20, r20
    2ce8:	44 0f       	add	r20, r20
    2cea:	44 0f       	add	r20, r20
    2cec:	48 2b       	or	r20, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	20 71       	andi	r18, 0x10	; 16
    2cf2:	30 70       	andi	r19, 0x00	; 0
    2cf4:	35 95       	asr	r19
    2cf6:	27 95       	ror	r18
    2cf8:	35 95       	asr	r19
    2cfa:	27 95       	ror	r18
    2cfc:	35 95       	asr	r19
    2cfe:	27 95       	ror	r18
    2d00:	35 95       	asr	r19
    2d02:	27 95       	ror	r18
    2d04:	42 2b       	or	r20, r18
    2d06:	40 93 df 07 	sts	0x07DF, r20
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
    2d0a:	84 e0       	ldi	r24, 0x04	; 4
    2d0c:	80 93 0b 02 	sts	0x020B, r24
    2d10:	0e cf       	rjmp	.-484    	; 0x2b2e <handleRFCommands+0x4e6>
					ackPayload[15] = irCommand;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = proximityValue[0]&0xFF;
    2d12:	80 91 27 02 	lds	r24, 0x0227
    2d16:	90 91 28 02 	lds	r25, 0x0228
    2d1a:	80 93 d1 07 	sts	0x07D1, r24
					ackPayload[2] = proximityValue[0]>>8;
    2d1e:	80 91 27 02 	lds	r24, 0x0227
    2d22:	90 91 28 02 	lds	r25, 0x0228
    2d26:	90 93 d2 07 	sts	0x07D2, r25
					ackPayload[3] = proximityValue[2]&0xFF;
    2d2a:	80 91 2b 02 	lds	r24, 0x022B
    2d2e:	90 91 2c 02 	lds	r25, 0x022C
    2d32:	80 93 d3 07 	sts	0x07D3, r24
					ackPayload[4] = proximityValue[2]>>8;
    2d36:	80 91 2b 02 	lds	r24, 0x022B
    2d3a:	90 91 2c 02 	lds	r25, 0x022C
    2d3e:	90 93 d4 07 	sts	0x07D4, r25
					ackPayload[5] = proximityValue[4]&0xFF;
    2d42:	80 91 2f 02 	lds	r24, 0x022F
    2d46:	90 91 30 02 	lds	r25, 0x0230
    2d4a:	80 93 d5 07 	sts	0x07D5, r24
					ackPayload[6] = proximityValue[4]>>8;
    2d4e:	80 91 2f 02 	lds	r24, 0x022F
    2d52:	90 91 30 02 	lds	r25, 0x0230
    2d56:	90 93 d6 07 	sts	0x07D6, r25
					ackPayload[7] = proximityValue[6]&0xFF;
    2d5a:	80 91 33 02 	lds	r24, 0x0233
    2d5e:	90 91 34 02 	lds	r25, 0x0234
    2d62:	80 93 d7 07 	sts	0x07D7, r24
					ackPayload[8] = proximityValue[6]>>8;
    2d66:	80 91 33 02 	lds	r24, 0x0233
    2d6a:	90 91 34 02 	lds	r25, 0x0234
    2d6e:	90 93 d8 07 	sts	0x07D8, r25
					ackPayload[9] = proximityValue[10]&0xFF;
    2d72:	80 91 3b 02 	lds	r24, 0x023B
    2d76:	90 91 3c 02 	lds	r25, 0x023C
    2d7a:	80 93 d9 07 	sts	0x07D9, r24
					ackPayload[10] = proximityValue[10]>>8;
    2d7e:	80 91 3b 02 	lds	r24, 0x023B
    2d82:	90 91 3c 02 	lds	r25, 0x023C
    2d86:	90 93 da 07 	sts	0x07DA, r25
					ackPayload[11] = proximityValue[12]&0xFF;
    2d8a:	80 91 3f 02 	lds	r24, 0x023F
    2d8e:	90 91 40 02 	lds	r25, 0x0240
    2d92:	80 93 db 07 	sts	0x07DB, r24
					ackPayload[12] = proximityValue[12]>>8;
    2d96:	80 91 3f 02 	lds	r24, 0x023F
    2d9a:	90 91 40 02 	lds	r25, 0x0240
    2d9e:	90 93 dc 07 	sts	0x07DC, r25
					ackPayload[13] = proximityValue[14]&0xFF;
    2da2:	80 91 43 02 	lds	r24, 0x0243
    2da6:	90 91 44 02 	lds	r25, 0x0244
    2daa:	80 93 dd 07 	sts	0x07DD, r24
					ackPayload[14] = proximityValue[14]>>8;
    2dae:	80 91 43 02 	lds	r24, 0x0243
    2db2:	90 91 44 02 	lds	r25, 0x0244
    2db6:	90 93 de 07 	sts	0x07DE, r25
					ackPayload[15] = currentSelector;
    2dba:	80 91 60 03 	lds	r24, 0x0360
    2dbe:	80 93 df 07 	sts	0x07DF, r24
					packetId = 6;
    2dc2:	86 e0       	ldi	r24, 0x06	; 6
    2dc4:	80 93 0b 02 	sts	0x020B, r24
    2dc8:	b2 ce       	rjmp	.-668    	; 0x2b2e <handleRFCommands+0x4e6>
					break;

				case 6:
					ackPayload[1] = proximityValue[8]&0xFF;
    2dca:	80 91 37 02 	lds	r24, 0x0237
    2dce:	90 91 38 02 	lds	r25, 0x0238
    2dd2:	80 93 d1 07 	sts	0x07D1, r24
					ackPayload[2] = proximityValue[8]>>8;
    2dd6:	80 91 37 02 	lds	r24, 0x0237
    2dda:	90 91 38 02 	lds	r25, 0x0238
    2dde:	90 93 d2 07 	sts	0x07D2, r25
					ackPayload[3] = proximityValue[16]&0xFF;
    2de2:	80 91 47 02 	lds	r24, 0x0247
    2de6:	90 91 48 02 	lds	r25, 0x0248
    2dea:	80 93 d3 07 	sts	0x07D3, r24
					ackPayload[4] = proximityValue[16]>>8;
    2dee:	80 91 47 02 	lds	r24, 0x0247
    2df2:	90 91 48 02 	lds	r25, 0x0248
    2df6:	90 93 d4 07 	sts	0x07D4, r25
					ackPayload[5] = proximityValue[18]&0xFF;
    2dfa:	80 91 4b 02 	lds	r24, 0x024B
    2dfe:	90 91 4c 02 	lds	r25, 0x024C
    2e02:	80 93 d5 07 	sts	0x07D5, r24
					ackPayload[6] = proximityValue[18]>>8;
    2e06:	80 91 4b 02 	lds	r24, 0x024B
    2e0a:	90 91 4c 02 	lds	r25, 0x024C
    2e0e:	90 93 d6 07 	sts	0x07D6, r25
					ackPayload[7] = proximityValue[20]&0xFF;
    2e12:	80 91 4f 02 	lds	r24, 0x024F
    2e16:	90 91 50 02 	lds	r25, 0x0250
    2e1a:	80 93 d7 07 	sts	0x07D7, r24
					ackPayload[8] = proximityValue[20]>>8;
    2e1e:	80 91 4f 02 	lds	r24, 0x024F
    2e22:	90 91 50 02 	lds	r25, 0x0250
    2e26:	90 93 d8 07 	sts	0x07D8, r25
					ackPayload[9] = proximityValue[22]&0xFF;
    2e2a:	80 91 53 02 	lds	r24, 0x0253
    2e2e:	90 91 54 02 	lds	r25, 0x0254
    2e32:	80 93 d9 07 	sts	0x07D9, r24
					ackPayload[10] = proximityValue[22]>>8;
    2e36:	80 91 53 02 	lds	r24, 0x0253
    2e3a:	90 91 54 02 	lds	r25, 0x0254
    2e3e:	90 93 da 07 	sts	0x07DA, r25
					ackPayload[11] = accZ&0xFF;
    2e42:	80 91 1e 03 	lds	r24, 0x031E
    2e46:	90 91 1f 03 	lds	r25, 0x031F
    2e4a:	80 93 db 07 	sts	0x07DB, r24
					ackPayload[12] = accZ>>8;	
    2e4e:	89 2f       	mov	r24, r25
    2e50:	99 0f       	add	r25, r25
    2e52:	99 0b       	sbc	r25, r25
    2e54:	80 93 dc 07 	sts	0x07DC, r24
					ackPayload[13] = batteryLevel&0xFF;
    2e58:	80 91 bb 02 	lds	r24, 0x02BB
    2e5c:	90 91 bc 02 	lds	r25, 0x02BC
    2e60:	80 93 dd 07 	sts	0x07DD, r24
					ackPayload[14] = batteryLevel>>8;
    2e64:	90 93 de 07 	sts	0x07DE, r25
					ackPayload[15] = heading>>1; // Values from 0..180 (resolution = 2 degrees)
    2e68:	80 91 44 03 	lds	r24, 0x0344
    2e6c:	90 91 45 03 	lds	r25, 0x0345
    2e70:	95 95       	asr	r25
    2e72:	87 95       	ror	r24
    2e74:	80 93 df 07 	sts	0x07DF, r24
					packetId = 7;
    2e78:	87 e0       	ldi	r24, 0x07	; 7
    2e7a:	80 93 0b 02 	sts	0x020B, r24
    2e7e:	57 ce       	rjmp	.-850    	; 0x2b2e <handleRFCommands+0x4e6>
				} else {								// backward
					pwm_right_desired = -(speedr);
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
					pwm_left_desired = speedl;
    2e80:	50 93 ee 02 	sts	0x02EE, r21
    2e84:	40 93 ed 02 	sts	0x02ED, r20
    2e88:	6e cc       	rjmp	.-1828   	; 0x2766 <handleRFCommands+0x11e>
					
					// Keep 6 LSbits of MSB and 2MSbits of LSB: max rate is +-128dps (0x0FFF*15.625dps), resolution=1 dps (0x003F*15.625dps)
					tempGyroZ = gyroZ;
					if(tempGyroZ > 0x1FFF) {
						tempGyroZ = 0x1FFF;
					} else if(tempGyroZ < -8192) {
    2e8a:	80 50       	subi	r24, 0x00	; 0
    2e8c:	90 4e       	sbci	r25, 0xE0	; 224
    2e8e:	0c f0       	brlt	.+2      	; 0x2e92 <handleRFCommands+0x84a>
    2e90:	b2 cd       	rjmp	.-1180   	; 0x29f6 <handleRFCommands+0x3ae>
						tempGyroZ = -8192;
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	90 ee       	ldi	r25, 0xE0	; 224
    2e96:	90 93 1b 02 	sts	0x021B, r25
    2e9a:	80 93 1a 02 	sts	0x021A, r24
    2e9e:	ab cd       	rjmp	.-1194   	; 0x29f6 <handleRFCommands+0x3ae>

00002ea0 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    2ea0:	cf 93       	push	r28
    2ea2:	df 93       	push	r29

	PCICR = 0;
    2ea4:	e8 e6       	ldi	r30, 0x68	; 104
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	10 82       	st	Z, r1
	PCMSK1 = 0;
    2eaa:	ac e6       	ldi	r26, 0x6C	; 108
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	1c 92       	st	X, r1
	TCCR2A = 0;
    2eb0:	20 eb       	ldi	r18, 0xB0	; 176
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	e9 01       	movw	r28, r18
    2eb6:	18 82       	st	Y, r1
	TCCR2B = 0;
    2eb8:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    2ebc:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    2ec0:	80 81       	ld	r24, Z
    2ec2:	82 60       	ori	r24, 0x02	; 2
    2ec4:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    2ec6:	8c 91       	ld	r24, X
    2ec8:	80 68       	ori	r24, 0x80	; 128
    2eca:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    2ecc:	88 81       	ld	r24, Y
    2ece:	82 60       	ori	r24, 0x02	; 2
    2ed0:	88 83       	st	Y, r24

}
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	08 95       	ret

00002ed8 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    2ed8:	1f 92       	push	r1
    2eda:	0f 92       	push	r0
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	0f 92       	push	r0
    2ee0:	11 24       	eor	r1, r1
    2ee2:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    2ee4:	80 91 10 02 	lds	r24, 0x0210
    2ee8:	88 23       	and	r24, r24
    2eea:	21 f1       	breq	.+72     	; 0x2f34 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    2eec:	80 91 03 01 	lds	r24, 0x0103
    2ef0:	86 fd       	sbrc	r24, 6
    2ef2:	20 c0       	rjmp	.+64     	; 0x2f34 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    2ef4:	80 91 68 00 	lds	r24, 0x0068
    2ef8:	8d 7f       	andi	r24, 0xFD	; 253
    2efa:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    2efe:	80 91 6c 00 	lds	r24, 0x006C
    2f02:	8f 77       	andi	r24, 0x7F	; 127
    2f04:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	80 93 11 02 	sts	0x0211, r24
			OCR2A = 13;									// output compare register
    2f0e:	8d e0       	ldi	r24, 0x0D	; 13
    2f10:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2f14:	80 91 b1 00 	lds	r24, 0x00B1
    2f18:	86 60       	ori	r24, 0x06	; 6
    2f1a:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    2f1e:	80 91 70 00 	lds	r24, 0x0070
    2f22:	82 60       	ori	r24, 0x02	; 2
    2f24:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2f28:	10 92 1e 02 	sts	0x021E, r1
    2f2c:	10 92 1f 02 	sts	0x021F, r1
    2f30:	10 92 20 02 	sts	0x0220, r1

		}

	}
	
}
    2f34:	8f 91       	pop	r24
    2f36:	0f 90       	pop	r0
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	0f 90       	pop	r0
    2f3c:	1f 90       	pop	r1
    2f3e:	18 95       	reti

00002f40 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    2f40:	1f 92       	push	r1
    2f42:	0f 92       	push	r0
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	0f 92       	push	r0
    2f48:	11 24       	eor	r1, r1
    2f4a:	2f 93       	push	r18
    2f4c:	3f 93       	push	r19
    2f4e:	4f 93       	push	r20
    2f50:	5f 93       	push	r21
    2f52:	8f 93       	push	r24
    2f54:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    2f56:	80 91 b1 00 	lds	r24, 0x00B1
    2f5a:	88 7f       	andi	r24, 0xF8	; 248
    2f5c:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    2f60:	80 91 11 02 	lds	r24, 0x0211
    2f64:	88 23       	and	r24, r24
    2f66:	59 f1       	breq	.+86     	; 0x2fbe <__vector_13+0x7e>

			if(REMOTE) {					// if high it is a glitch
    2f68:	80 91 03 01 	lds	r24, 0x0103
    2f6c:	86 fd       	sbrc	r24, 6
    2f6e:	69 c0       	rjmp	.+210    	; 0x3042 <__vector_13+0x102>
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    2f70:	10 92 11 02 	sts	0x0211, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    2f74:	83 e3       	ldi	r24, 0x33	; 51
    2f76:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    2f7a:	80 91 b1 00 	lds	r24, 0x00B1
    2f7e:	86 60       	ori	r24, 0x06	; 6
    2f80:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2f84:	80 91 70 00 	lds	r24, 0x0070
    2f88:	82 60       	ori	r24, 0x02	; 2
    2f8a:	80 93 70 00 	sts	0x0070, r24

			} 

		}
	
		if(i!=-1) {
    2f8e:	80 91 05 02 	lds	r24, 0x0205
    2f92:	90 91 06 02 	lds	r25, 0x0206
    2f96:	2f ef       	ldi	r18, 0xFF	; 255
    2f98:	8f 3f       	cpi	r24, 0xFF	; 255
    2f9a:	92 07       	cpc	r25, r18
    2f9c:	29 f0       	breq	.+10     	; 0x2fa8 <__vector_13+0x68>

			i++;
    2f9e:	01 96       	adiw	r24, 0x01	; 1
    2fa0:	90 93 06 02 	sts	0x0206, r25
    2fa4:	80 93 05 02 	sts	0x0205, r24

		}

}
    2fa8:	9f 91       	pop	r25
    2faa:	8f 91       	pop	r24
    2fac:	5f 91       	pop	r21
    2fae:	4f 91       	pop	r20
    2fb0:	3f 91       	pop	r19
    2fb2:	2f 91       	pop	r18
    2fb4:	0f 90       	pop	r0
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	0f 90       	pop	r0
    2fba:	1f 90       	pop	r1
    2fbc:	18 95       	reti
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    2fbe:	40 91 05 02 	lds	r20, 0x0205
    2fc2:	50 91 06 02 	lds	r21, 0x0206
    2fc6:	8f ef       	ldi	r24, 0xFF	; 255
    2fc8:	4f 3f       	cpi	r20, 0xFF	; 255
    2fca:	58 07       	cpc	r21, r24
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <__vector_13+0x90>
    2fce:	4a c0       	rjmp	.+148    	; 0x3064 <__vector_13+0x124>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    2fd0:	41 30       	cpi	r20, 0x01	; 1
    2fd2:	51 05       	cpc	r21, r1
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <__vector_13+0x98>
    2fd6:	80 c0       	rjmp	.+256    	; 0x30d8 <__vector_13+0x198>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2fd8:	ca 01       	movw	r24, r20
    2fda:	02 97       	sbiw	r24, 0x02	; 2
    2fdc:	05 97       	sbiw	r24, 0x05	; 5
    2fde:	08 f4       	brcc	.+2      	; 0x2fe2 <__vector_13+0xa2>
    2fe0:	50 c0       	rjmp	.+160    	; 0x3082 <__vector_13+0x142>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    2fe2:	ca 01       	movw	r24, r20
    2fe4:	07 97       	sbiw	r24, 0x07	; 7
    2fe6:	06 97       	sbiw	r24, 0x06	; 6
    2fe8:	08 f0       	brcs	.+2      	; 0x2fec <__vector_13+0xac>
    2fea:	ab c0       	rjmp	.+342    	; 0x3142 <__vector_13+0x202>

				OCR2A = 54;
    2fec:	86 e3       	ldi	r24, 0x36	; 54
    2fee:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2ff2:	80 91 b1 00 	lds	r24, 0x00B1
    2ff6:	86 60       	ori	r24, 0x06	; 6
    2ff8:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
    2ffc:	80 91 70 00 	lds	r24, 0x0070
    3000:	82 60       	ori	r24, 0x02	; 2
    3002:	80 93 70 00 	sts	0x0070, r24

				unsigned char temp = REMOTE;
    3006:	20 91 03 01 	lds	r18, 0x0103
				temp <<= 6+6-i;
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	20 74       	andi	r18, 0x40	; 64
    300e:	30 70       	andi	r19, 0x00	; 0
    3010:	00 24       	eor	r0, r0
    3012:	22 0f       	add	r18, r18
    3014:	33 1f       	adc	r19, r19
    3016:	00 1c       	adc	r0, r0
    3018:	22 0f       	add	r18, r18
    301a:	33 1f       	adc	r19, r19
    301c:	00 1c       	adc	r0, r0
    301e:	23 2f       	mov	r18, r19
    3020:	30 2d       	mov	r19, r0
    3022:	8c e0       	ldi	r24, 0x0C	; 12
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	84 1b       	sub	r24, r20
    3028:	95 0b       	sbc	r25, r21
    302a:	02 c0       	rjmp	.+4      	; 0x3030 <__vector_13+0xf0>
    302c:	22 0f       	add	r18, r18
    302e:	33 1f       	adc	r19, r19
    3030:	8a 95       	dec	r24
    3032:	e2 f7       	brpl	.-8      	; 0x302c <__vector_13+0xec>
				data_temp += temp;
    3034:	80 91 1e 02 	lds	r24, 0x021E
    3038:	82 0f       	add	r24, r18
    303a:	80 93 1e 02 	sts	0x021E, r24

			} 

		}
	
		if(i!=-1) {
    303e:	ca 01       	movw	r24, r20
    3040:	ae cf       	rjmp	.-164    	; 0x2f9e <__vector_13+0x5e>
	
		if(checkGlitch) {					// if checking this is a glitch

			if(REMOTE) {					// if high it is a glitch

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    3042:	80 91 68 00 	lds	r24, 0x0068
    3046:	82 60       	ori	r24, 0x02	; 2
    3048:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    304c:	80 91 6c 00 	lds	r24, 0x006C
    3050:	80 68       	ori	r24, 0x80	; 128
    3052:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    3056:	8f ef       	ldi	r24, 0xFF	; 255
    3058:	9f ef       	ldi	r25, 0xFF	; 255
    305a:	90 93 06 02 	sts	0x0206, r25
    305e:	80 93 05 02 	sts	0x0205, r24
    3062:	a2 cf       	rjmp	.-188    	; 0x2fa8 <__vector_13+0x68>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    3064:	80 91 03 01 	lds	r24, 0x0103
    3068:	86 ff       	sbrs	r24, 6
    306a:	54 c0       	rjmp	.+168    	; 0x3114 <__vector_13+0x1d4>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    306c:	80 91 68 00 	lds	r24, 0x0068
    3070:	82 60       	ori	r24, 0x02	; 2
    3072:	80 93 68 00 	sts	0x0068, r24
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    3076:	80 91 6c 00 	lds	r24, 0x006C
    307a:	80 68       	ori	r24, 0x80	; 128
    307c:	80 93 6c 00 	sts	0x006C, r24
    3080:	93 cf       	rjmp	.-218    	; 0x2fa8 <__vector_13+0x68>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    3082:	86 e3       	ldi	r24, 0x36	; 54
    3084:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);
    3088:	80 91 b1 00 	lds	r24, 0x00B1
    308c:	86 60       	ori	r24, 0x06	; 6
    308e:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
    3092:	80 91 70 00 	lds	r24, 0x0070
    3096:	82 60       	ori	r24, 0x02	; 2
    3098:	80 93 70 00 	sts	0x0070, r24

				unsigned char temp = REMOTE;
    309c:	20 91 03 01 	lds	r18, 0x0103
				temp <<= 6-i;
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	20 74       	andi	r18, 0x40	; 64
    30a4:	30 70       	andi	r19, 0x00	; 0
    30a6:	00 24       	eor	r0, r0
    30a8:	22 0f       	add	r18, r18
    30aa:	33 1f       	adc	r19, r19
    30ac:	00 1c       	adc	r0, r0
    30ae:	22 0f       	add	r18, r18
    30b0:	33 1f       	adc	r19, r19
    30b2:	00 1c       	adc	r0, r0
    30b4:	23 2f       	mov	r18, r19
    30b6:	30 2d       	mov	r19, r0
    30b8:	86 e0       	ldi	r24, 0x06	; 6
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	84 1b       	sub	r24, r20
    30be:	95 0b       	sbc	r25, r21
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <__vector_13+0x186>
    30c2:	22 0f       	add	r18, r18
    30c4:	33 1f       	adc	r19, r19
    30c6:	8a 95       	dec	r24
    30c8:	e2 f7       	brpl	.-8      	; 0x30c2 <__vector_13+0x182>
				address_temp += temp;
    30ca:	80 91 1f 02 	lds	r24, 0x021F
    30ce:	82 0f       	add	r24, r18
    30d0:	80 93 1f 02 	sts	0x021F, r24

			} 

		}
	
		if(i!=-1) {
    30d4:	ca 01       	movw	r24, r20
    30d6:	63 cf       	rjmp	.-314    	; 0x2f9e <__vector_13+0x5e>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    30d8:	80 91 03 01 	lds	r24, 0x0103
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	80 74       	andi	r24, 0x40	; 64
    30e0:	90 70       	andi	r25, 0x00	; 0
    30e2:	08 2e       	mov	r0, r24
    30e4:	89 2f       	mov	r24, r25
    30e6:	00 0c       	add	r0, r0
    30e8:	88 1f       	adc	r24, r24
    30ea:	99 0b       	sbc	r25, r25
    30ec:	00 0c       	add	r0, r0
    30ee:	88 1f       	adc	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	80 93 20 02 	sts	0x0220, r24
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    30f6:	86 e3       	ldi	r24, 0x36	; 54
    30f8:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    30fc:	80 91 b1 00 	lds	r24, 0x00B1
    3100:	86 60       	ori	r24, 0x06	; 6
    3102:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    3106:	80 91 70 00 	lds	r24, 0x0070
    310a:	82 60       	ori	r24, 0x02	; 2
    310c:	80 93 70 00 	sts	0x0070, r24

			} 

		}
	
		if(i!=-1) {
    3110:	ca 01       	movw	r24, r20
    3112:	45 cf       	rjmp	.-374    	; 0x2f9e <__vector_13+0x5e>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    3114:	8c e1       	ldi	r24, 0x1C	; 28
    3116:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    311a:	80 91 b1 00 	lds	r24, 0x00B1
    311e:	86 60       	ori	r24, 0x06	; 6
    3120:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    3124:	80 91 70 00 	lds	r24, 0x0070
    3128:	82 60       	ori	r24, 0x02	; 2
    312a:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    312e:	10 92 1e 02 	sts	0x021E, r1
    3132:	10 92 1f 02 	sts	0x021F, r1
    3136:	10 92 20 02 	sts	0x0220, r1
    313a:	40 e0       	ldi	r20, 0x00	; 0
    313c:	50 e0       	ldi	r21, 0x00	; 0

			} 

		}
	
		if(i!=-1) {
    313e:	ca 01       	movw	r24, r20
    3140:	2e cf       	rjmp	.-420    	; 0x2f9e <__vector_13+0x5e>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    3142:	4d 30       	cpi	r20, 0x0D	; 13
    3144:	51 05       	cpc	r21, r1
    3146:	09 f0       	breq	.+2      	; 0x314a <__vector_13+0x20a>
    3148:	7a cf       	rjmp	.-268    	; 0x303e <__vector_13+0xfe>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    314a:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    314e:	80 91 68 00 	lds	r24, 0x0068
    3152:	82 60       	ori	r24, 0x02	; 2
    3154:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    3158:	80 91 6c 00 	lds	r24, 0x006C
    315c:	80 68       	ori	r24, 0x80	; 128
    315e:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    3162:	8f ef       	ldi	r24, 0xFF	; 255
    3164:	9f ef       	ldi	r25, 0xFF	; 255
    3166:	90 93 06 02 	sts	0x0206, r25
    316a:	80 93 05 02 	sts	0x0205, r24
				check = check_temp;
    316e:	80 91 20 02 	lds	r24, 0x0220
    3172:	80 93 04 02 	sts	0x0204, r24
				address = address_temp;
    3176:	80 91 1f 02 	lds	r24, 0x021F
    317a:	80 93 1c 02 	sts	0x021C, r24
				data_ir = data_temp;
    317e:	80 91 1e 02 	lds	r24, 0x021E
    3182:	80 93 1d 02 	sts	0x021D, r24
				command_received=1;
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	80 93 12 03 	sts	0x0312, r24
    318c:	0d cf       	rjmp	.-486    	; 0x2fa8 <__vector_13+0x68>

0000318e <handleIRRemoteCommands>:
	return data_ir;
}

void handleIRRemoteCommands() {

	if(irEnabled) {
    318e:	80 91 10 02 	lds	r24, 0x0210
    3192:	88 23       	and	r24, r24
    3194:	21 f0       	breq	.+8      	; 0x319e <handleIRRemoteCommands+0x10>

		if(command_received) {
    3196:	80 91 12 03 	lds	r24, 0x0312
    319a:	88 23       	and	r24, r24
    319c:	09 f4       	brne	.+2      	; 0x31a0 <handleIRRemoteCommands+0x12>
    319e:	08 95       	ret

			command_received = 0;
    31a0:	10 92 12 03 	sts	0x0312, r1
			
			if((getTime100MicroSec() - lastCmdTime) < PAUSE_200_MSEC) {
    31a4:	99 d6       	rcall	.+3378   	; 0x3ed8 <getTime100MicroSec>
    31a6:	20 91 15 03 	lds	r18, 0x0315
    31aa:	30 91 16 03 	lds	r19, 0x0316
    31ae:	40 91 17 03 	lds	r20, 0x0317
    31b2:	50 91 18 03 	lds	r21, 0x0318
    31b6:	62 1b       	sub	r22, r18
    31b8:	73 0b       	sbc	r23, r19
    31ba:	84 0b       	sbc	r24, r20
    31bc:	95 0b       	sbc	r25, r21
    31be:	63 58       	subi	r22, 0x83	; 131
    31c0:	77 40       	sbci	r23, 0x07	; 7
    31c2:	80 40       	sbci	r24, 0x00	; 0
    31c4:	90 40       	sbci	r25, 0x00	; 0
    31c6:	58 f3       	brcs	.-42     	; 0x319e <handleIRRemoteCommands+0x10>
				return;
			}

			lastCmdTime = getTime100MicroSec();
    31c8:	87 d6       	rcall	.+3342   	; 0x3ed8 <getTime100MicroSec>
    31ca:	60 93 15 03 	sts	0x0315, r22
    31ce:	70 93 16 03 	sts	0x0316, r23
    31d2:	80 93 17 03 	sts	0x0317, r24
    31d6:	90 93 18 03 	sts	0x0318, r25
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    31da:	80 91 1d 02 	lds	r24, 0x021D
				return;
			}

			lastCmdTime = getTime100MicroSec();

            irCommand = ir_remote_get_data();
    31de:	80 93 11 03 	sts	0x0311, r24

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    31e2:	e8 2f       	mov	r30, r24
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	e5 33       	cpi	r30, 0x35	; 53
    31e8:	f1 05       	cpc	r31, r1
    31ea:	c0 f0       	brcs	.+48     	; 0x321c <handleIRRemoteCommands+0x8e>
    31ec:	40 91 eb 02 	lds	r20, 0x02EB
    31f0:	50 91 ec 02 	lds	r21, 0x02EC
    31f4:	20 91 ed 02 	lds	r18, 0x02ED
    31f8:	30 91 ee 02 	lds	r19, 0x02EE
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    31fc:	ca 01       	movw	r24, r20
    31fe:	64 2f       	mov	r22, r20
    3200:	89 2f       	mov	r24, r25
    3202:	57 fd       	sbrc	r21, 7
    3204:	b7 c1       	rjmp	.+878    	; 0x3574 <handleIRRemoteCommands+0x3e6>
				speedr = pwm_right_desired;
    3206:	60 93 05 03 	sts	0x0305, r22
    320a:	80 93 06 03 	sts	0x0306, r24
			} else {
				speedr = (-pwm_right_desired);
			}
			if(pwm_left_desired >= 0) {
    320e:	37 fd       	sbrc	r19, 7
    3210:	a8 c1       	rjmp	.+848    	; 0x3562 <handleIRRemoteCommands+0x3d4>
				speedl = pwm_left_desired;
    3212:	30 93 04 03 	sts	0x0304, r19
    3216:	20 93 03 03 	sts	0x0303, r18
    321a:	08 95       	ret

            irCommand = ir_remote_get_data();

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    321c:	ee 58       	subi	r30, 0x8E	; 142
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	ee 0f       	add	r30, r30
    3222:	ff 1f       	adc	r31, r31
    3224:	05 90       	lpm	r0, Z+
    3226:	f4 91       	lpm	r31, Z+
    3228:	e0 2d       	mov	r30, r0
    322a:	19 94       	eijmp
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    322c:	80 91 14 03 	lds	r24, 0x0314
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	01 96       	adiw	r24, 0x01	; 1
    3234:	83 70       	andi	r24, 0x03	; 3
    3236:	90 70       	andi	r25, 0x00	; 0
    3238:	80 93 14 03 	sts	0x0314, r24
					switch(behaviorState) {
    323c:	81 30       	cpi	r24, 0x01	; 1
    323e:	09 f4       	brne	.+2      	; 0x3242 <handleIRRemoteCommands+0xb4>
    3240:	ca c1       	rjmp	.+916    	; 0x35d6 <handleIRRemoteCommands+0x448>
    3242:	81 30       	cpi	r24, 0x01	; 1
    3244:	08 f0       	brcs	.+2      	; 0x3248 <handleIRRemoteCommands+0xba>
    3246:	bb c1       	rjmp	.+886    	; 0x35be <handleIRRemoteCommands+0x430>
						case 0:
							obstacleAvoidanceEnabled = 0;
    3248:	10 92 84 03 	sts	0x0384, r1
							cliffAvoidanceEnabled = 0;
    324c:	10 92 85 03 	sts	0x0385, r1
    3250:	40 91 eb 02 	lds	r20, 0x02EB
    3254:	50 91 ec 02 	lds	r21, 0x02EC
    3258:	20 91 ed 02 	lds	r18, 0x02ED
    325c:	30 91 ee 02 	lds	r19, 0x02EE
    3260:	cd cf       	rjmp	.-102    	; 0x31fc <handleIRRemoteCommands+0x6e>
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    3262:	10 92 84 03 	sts	0x0384, r1
							cliffAvoidanceEnabled = 1;
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	80 93 85 03 	sts	0x0385, r24
    326c:	40 91 eb 02 	lds	r20, 0x02EB
    3270:	50 91 ec 02 	lds	r21, 0x02EC
    3274:	20 91 ed 02 	lds	r18, 0x02ED
    3278:	30 91 ee 02 	lds	r19, 0x02EE
    327c:	bf cf       	rjmp	.-130    	; 0x31fc <handleIRRemoteCommands+0x6e>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    327e:	10 92 84 03 	sts	0x0384, r1
    3282:	40 91 eb 02 	lds	r20, 0x02EB
    3286:	50 91 ec 02 	lds	r21, 0x02EC
    328a:	20 91 ed 02 	lds	r18, 0x02ED
    328e:	30 91 ee 02 	lds	r19, 0x02EE
    3292:	b4 cf       	rjmp	.-152    	; 0x31fc <handleIRRemoteCommands+0x6e>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	80 93 84 03 	sts	0x0384, r24
    329a:	40 91 eb 02 	lds	r20, 0x02EB
    329e:	50 91 ec 02 	lds	r21, 0x02EC
    32a2:	20 91 ed 02 	lds	r18, 0x02ED
    32a6:	30 91 ee 02 	lds	r19, 0x02EE
    32aa:	a8 cf       	rjmp	.-176    	; 0x31fc <handleIRRemoteCommands+0x6e>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>127) pwm_right_desired=127;
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    32ac:	20 91 ed 02 	lds	r18, 0x02ED
    32b0:	30 91 ee 02 	lds	r19, 0x02EE
    32b4:	22 50       	subi	r18, 0x02	; 2
    32b6:	30 40       	sbci	r19, 0x00	; 0
    32b8:	30 93 ee 02 	sts	0x02EE, r19
    32bc:	20 93 ed 02 	sts	0x02ED, r18
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
    32c0:	8f ef       	ldi	r24, 0xFF	; 255
    32c2:	21 38       	cpi	r18, 0x81	; 129
    32c4:	38 07       	cpc	r19, r24
    32c6:	0c f0       	brlt	.+2      	; 0x32ca <handleIRRemoteCommands+0x13c>
    32c8:	5a c1       	rjmp	.+692    	; 0x357e <handleIRRemoteCommands+0x3f0>
    32ca:	81 e8       	ldi	r24, 0x81	; 129
    32cc:	9f ef       	ldi	r25, 0xFF	; 255
    32ce:	90 93 ee 02 	sts	0x02EE, r25
    32d2:	80 93 ed 02 	sts	0x02ED, r24
    32d6:	40 91 eb 02 	lds	r20, 0x02EB
    32da:	50 91 ec 02 	lds	r21, 0x02EC
    32de:	21 e8       	ldi	r18, 0x81	; 129
    32e0:	3f ef       	ldi	r19, 0xFF	; 255
    32e2:	8c cf       	rjmp	.-232    	; 0x31fc <handleIRRemoteCommands+0x6e>
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    32e4:	40 91 eb 02 	lds	r20, 0x02EB
    32e8:	50 91 ec 02 	lds	r21, 0x02EC
    32ec:	80 91 e9 02 	lds	r24, 0x02E9
    32f0:	90 91 ea 02 	lds	r25, 0x02EA
    32f4:	48 17       	cp	r20, r24
    32f6:	59 07       	cpc	r21, r25
    32f8:	0c f0       	brlt	.+2      	; 0x32fc <handleIRRemoteCommands+0x16e>
    32fa:	5b c1       	rjmp	.+694    	; 0x35b2 <handleIRRemoteCommands+0x424>
    32fc:	9a 01       	movw	r18, r20
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired -= STEP_MOTORS;
    32fe:	42 50       	subi	r20, 0x02	; 2
    3300:	50 40       	sbci	r21, 0x00	; 0
    3302:	50 93 ec 02 	sts	0x02EC, r21
    3306:	40 93 eb 02 	sts	0x02EB, r20
					pwm_left_desired -= STEP_MOTORS;
    330a:	22 50       	subi	r18, 0x02	; 2
    330c:	30 40       	sbci	r19, 0x00	; 0
    330e:	30 93 ee 02 	sts	0x02EE, r19
    3312:	20 93 ed 02 	sts	0x02ED, r18
	                if (pwm_right_desired < -127) pwm_right_desired = -127;
    3316:	8f ef       	ldi	r24, 0xFF	; 255
    3318:	41 38       	cpi	r20, 0x81	; 129
    331a:	58 07       	cpc	r21, r24
    331c:	44 f4       	brge	.+16     	; 0x332e <handleIRRemoteCommands+0x1a0>
    331e:	81 e8       	ldi	r24, 0x81	; 129
    3320:	9f ef       	ldi	r25, 0xFF	; 255
    3322:	90 93 ec 02 	sts	0x02EC, r25
    3326:	80 93 eb 02 	sts	0x02EB, r24
    332a:	41 e8       	ldi	r20, 0x81	; 129
    332c:	5f ef       	ldi	r21, 0xFF	; 255
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
    332e:	8f ef       	ldi	r24, 0xFF	; 255
    3330:	21 38       	cpi	r18, 0x81	; 129
    3332:	38 07       	cpc	r19, r24
    3334:	0c f0       	brlt	.+2      	; 0x3338 <handleIRRemoteCommands+0x1aa>
    3336:	62 cf       	rjmp	.-316    	; 0x31fc <handleIRRemoteCommands+0x6e>
				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
					pwm_left_desired -= STEP_MOTORS;
	                if (pwm_right_desired>127) pwm_right_desired=127;
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
    3338:	81 e8       	ldi	r24, 0x81	; 129
    333a:	9f ef       	ldi	r25, 0xFF	; 255
    333c:	90 93 ee 02 	sts	0x02EE, r25
    3340:	80 93 ed 02 	sts	0x02ED, r24
    3344:	21 e8       	ldi	r18, 0x81	; 129
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	59 cf       	rjmp	.-334    	; 0x31fc <handleIRRemoteCommands+0x6e>
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    334a:	40 91 eb 02 	lds	r20, 0x02EB
    334e:	50 91 ec 02 	lds	r21, 0x02EC
    3352:	42 50       	subi	r20, 0x02	; 2
    3354:	50 40       	sbci	r21, 0x00	; 0
    3356:	50 93 ec 02 	sts	0x02EC, r21
    335a:	40 93 eb 02 	sts	0x02EB, r20
					pwm_left_desired += STEP_MOTORS;
    335e:	60 91 ed 02 	lds	r22, 0x02ED
    3362:	70 91 ee 02 	lds	r23, 0x02EE
    3366:	6e 5f       	subi	r22, 0xFE	; 254
    3368:	7f 4f       	sbci	r23, 0xFF	; 255
    336a:	9b 01       	movw	r18, r22
    336c:	70 93 ee 02 	sts	0x02EE, r23
    3370:	60 93 ed 02 	sts	0x02ED, r22
                	if (pwm_right_desired<-127) pwm_right_desired=-127;
    3374:	8f ef       	ldi	r24, 0xFF	; 255
    3376:	41 38       	cpi	r20, 0x81	; 129
    3378:	58 07       	cpc	r21, r24
    337a:	44 f4       	brge	.+16     	; 0x338c <handleIRRemoteCommands+0x1fe>
    337c:	81 e8       	ldi	r24, 0x81	; 129
    337e:	9f ef       	ldi	r25, 0xFF	; 255
    3380:	90 93 ec 02 	sts	0x02EC, r25
    3384:	80 93 eb 02 	sts	0x02EB, r24
    3388:	41 e8       	ldi	r20, 0x81	; 129
    338a:	5f ef       	ldi	r21, 0xFF	; 255
                	if (pwm_left_desired>127) pwm_left_desired=127;
    338c:	60 38       	cpi	r22, 0x80	; 128
    338e:	71 05       	cpc	r23, r1
    3390:	0c f4       	brge	.+2      	; 0x3394 <handleIRRemoteCommands+0x206>
    3392:	34 cf       	rjmp	.-408    	; 0x31fc <handleIRRemoteCommands+0x6e>
    3394:	8f e7       	ldi	r24, 0x7F	; 127
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	90 93 ee 02 	sts	0x02EE, r25
    339c:	80 93 ed 02 	sts	0x02ED, r24
    33a0:	2f e7       	ldi	r18, 0x7F	; 127
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	2b cf       	rjmp	.-426    	; 0x31fc <handleIRRemoteCommands+0x6e>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    33a6:	10 92 ec 02 	sts	0x02EC, r1
    33aa:	10 92 eb 02 	sts	0x02EB, r1
					pwm_left_desired = 0;
    33ae:	10 92 ee 02 	sts	0x02EE, r1
    33b2:	10 92 ed 02 	sts	0x02ED, r1
					if(currentSelector == 8) {
    33b6:	80 91 60 03 	lds	r24, 0x0360
    33ba:	88 30       	cpi	r24, 0x08	; 8
    33bc:	09 f4       	brne	.+2      	; 0x33c0 <handleIRRemoteCommands+0x232>
    33be:	18 c1       	rjmp	.+560    	; 0x35f0 <handleIRRemoteCommands+0x462>
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    33c0:	60 91 eb 02 	lds	r22, 0x02EB
    33c4:	80 91 ec 02 	lds	r24, 0x02EC
    33c8:	20 91 ed 02 	lds	r18, 0x02ED
    33cc:	30 91 ee 02 	lds	r19, 0x02EE
    33d0:	1a cf       	rjmp	.-460    	; 0x3206 <handleIRRemoteCommands+0x78>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    33d2:	40 91 eb 02 	lds	r20, 0x02EB
    33d6:	50 91 ec 02 	lds	r21, 0x02EC
    33da:	42 50       	subi	r20, 0x02	; 2
    33dc:	50 40       	sbci	r21, 0x00	; 0
    33de:	50 93 ec 02 	sts	0x02EC, r21
    33e2:	40 93 eb 02 	sts	0x02EB, r20
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
    33e6:	2f ef       	ldi	r18, 0xFF	; 255
    33e8:	41 38       	cpi	r20, 0x81	; 129
    33ea:	52 07       	cpc	r21, r18
    33ec:	0c f0       	brlt	.+2      	; 0x33f0 <handleIRRemoteCommands+0x262>
    33ee:	02 cf       	rjmp	.-508    	; 0x31f4 <handleIRRemoteCommands+0x66>
    33f0:	81 e8       	ldi	r24, 0x81	; 129
    33f2:	9f ef       	ldi	r25, 0xFF	; 255
    33f4:	90 93 ec 02 	sts	0x02EC, r25
    33f8:	80 93 eb 02 	sts	0x02EB, r24
    33fc:	8f e7       	ldi	r24, 0x7F	; 127
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	20 91 ed 02 	lds	r18, 0x02ED
    3404:	30 91 ee 02 	lds	r19, 0x02EE

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    3408:	90 93 06 03 	sts	0x0306, r25
    340c:	80 93 05 03 	sts	0x0305, r24
    3410:	fe ce       	rjmp	.-516    	; 0x320e <handleIRRemoteCommands+0x80>
                	if (pwm_left_desired>127) pwm_left_desired=127;
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    3412:	40 91 eb 02 	lds	r20, 0x02EB
    3416:	50 91 ec 02 	lds	r21, 0x02EC
    341a:	4e 5f       	subi	r20, 0xFE	; 254
    341c:	5f 4f       	sbci	r21, 0xFF	; 255
    341e:	50 93 ec 02 	sts	0x02EC, r21
    3422:	40 93 eb 02 	sts	0x02EB, r20
					pwm_left_desired -= STEP_MOTORS;
    3426:	60 91 ed 02 	lds	r22, 0x02ED
    342a:	70 91 ee 02 	lds	r23, 0x02EE
    342e:	62 50       	subi	r22, 0x02	; 2
    3430:	70 40       	sbci	r23, 0x00	; 0
    3432:	9b 01       	movw	r18, r22
    3434:	70 93 ee 02 	sts	0x02EE, r23
    3438:	60 93 ed 02 	sts	0x02ED, r22
	                if (pwm_right_desired>127) pwm_right_desired=127;
    343c:	40 38       	cpi	r20, 0x80	; 128
    343e:	51 05       	cpc	r21, r1
    3440:	44 f0       	brlt	.+16     	; 0x3452 <handleIRRemoteCommands+0x2c4>
    3442:	8f e7       	ldi	r24, 0x7F	; 127
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	90 93 ec 02 	sts	0x02EC, r25
    344a:	80 93 eb 02 	sts	0x02EB, r24
    344e:	4f e7       	ldi	r20, 0x7F	; 127
    3450:	50 e0       	ldi	r21, 0x00	; 0
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
    3452:	61 58       	subi	r22, 0x81	; 129
    3454:	7f 4f       	sbci	r23, 0xFF	; 255
    3456:	0c f0       	brlt	.+2      	; 0x345a <handleIRRemoteCommands+0x2cc>
    3458:	d1 ce       	rjmp	.-606    	; 0x31fc <handleIRRemoteCommands+0x6e>
    345a:	6e cf       	rjmp	.-292    	; 0x3338 <handleIRRemoteCommands+0x1aa>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    345c:	20 91 ed 02 	lds	r18, 0x02ED
    3460:	30 91 ee 02 	lds	r19, 0x02EE
    3464:	2e 5f       	subi	r18, 0xFE	; 254
    3466:	3f 4f       	sbci	r19, 0xFF	; 255
    3468:	30 93 ee 02 	sts	0x02EE, r19
    346c:	20 93 ed 02 	sts	0x02ED, r18
	               	if (pwm_left_desired>127) pwm_left_desired=127;
    3470:	20 38       	cpi	r18, 0x80	; 128
    3472:	31 05       	cpc	r19, r1
    3474:	0c f4       	brge	.+2      	; 0x3478 <handleIRRemoteCommands+0x2ea>
    3476:	83 c0       	rjmp	.+262    	; 0x357e <handleIRRemoteCommands+0x3f0>
    3478:	8f e7       	ldi	r24, 0x7F	; 127
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	90 93 ee 02 	sts	0x02EE, r25
    3480:	80 93 ed 02 	sts	0x02ED, r24
    3484:	40 91 eb 02 	lds	r20, 0x02EB
    3488:	50 91 ec 02 	lds	r21, 0x02EC
    348c:	2f e7       	ldi	r18, 0x7F	; 127
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	b5 ce       	rjmp	.-662    	; 0x31fc <handleIRRemoteCommands+0x6e>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    3492:	40 91 eb 02 	lds	r20, 0x02EB
    3496:	50 91 ec 02 	lds	r21, 0x02EC
    349a:	20 91 ed 02 	lds	r18, 0x02ED
    349e:	30 91 ee 02 	lds	r19, 0x02EE
    34a2:	24 17       	cp	r18, r20
    34a4:	35 07       	cpc	r19, r21
    34a6:	0c f0       	brlt	.+2      	; 0x34aa <handleIRRemoteCommands+0x31c>
    34a8:	82 c0       	rjmp	.+260    	; 0x35ae <handleIRRemoteCommands+0x420>
    34aa:	9a 01       	movw	r18, r20
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    34ac:	4e 5f       	subi	r20, 0xFE	; 254
    34ae:	5f 4f       	sbci	r21, 0xFF	; 255
    34b0:	50 93 ec 02 	sts	0x02EC, r21
    34b4:	40 93 eb 02 	sts	0x02EB, r20
					pwm_left_desired += STEP_MOTORS;
    34b8:	2e 5f       	subi	r18, 0xFE	; 254
    34ba:	3f 4f       	sbci	r19, 0xFF	; 255
    34bc:	30 93 ee 02 	sts	0x02EE, r19
    34c0:	20 93 ed 02 	sts	0x02ED, r18
	                if (pwm_right_desired > 127) pwm_right_desired = 127;
    34c4:	40 38       	cpi	r20, 0x80	; 128
    34c6:	51 05       	cpc	r21, r1
    34c8:	44 f0       	brlt	.+16     	; 0x34da <handleIRRemoteCommands+0x34c>
    34ca:	8f e7       	ldi	r24, 0x7F	; 127
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	90 93 ec 02 	sts	0x02EC, r25
    34d2:	80 93 eb 02 	sts	0x02EB, r24
    34d6:	4f e7       	ldi	r20, 0x7F	; 127
    34d8:	50 e0       	ldi	r21, 0x00	; 0
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
    34da:	20 38       	cpi	r18, 0x80	; 128
    34dc:	31 05       	cpc	r19, r1
    34de:	0c f4       	brge	.+2      	; 0x34e2 <handleIRRemoteCommands+0x354>
    34e0:	8d ce       	rjmp	.-742    	; 0x31fc <handleIRRemoteCommands+0x6e>
    34e2:	58 cf       	rjmp	.-336    	; 0x3394 <handleIRRemoteCommands+0x206>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>127) pwm_left_desired=127;
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    34e4:	40 91 eb 02 	lds	r20, 0x02EB
    34e8:	50 91 ec 02 	lds	r21, 0x02EC
    34ec:	4e 5f       	subi	r20, 0xFE	; 254
    34ee:	5f 4f       	sbci	r21, 0xFF	; 255
    34f0:	50 93 ec 02 	sts	0x02EC, r21
    34f4:	40 93 eb 02 	sts	0x02EB, r20
	                if (pwm_right_desired>127) pwm_right_desired=127;
    34f8:	40 38       	cpi	r20, 0x80	; 128
    34fa:	51 05       	cpc	r21, r1
    34fc:	0c f4       	brge	.+2      	; 0x3500 <handleIRRemoteCommands+0x372>
    34fe:	7a ce       	rjmp	.-780    	; 0x31f4 <handleIRRemoteCommands+0x66>
    3500:	8f e7       	ldi	r24, 0x7F	; 127
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	90 93 ec 02 	sts	0x02EC, r25
    3508:	80 93 eb 02 	sts	0x02EB, r24
    350c:	59 cf       	rjmp	.-334    	; 0x33c0 <handleIRRemoteCommands+0x232>
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    350e:	80 91 13 03 	lds	r24, 0x0313
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	01 96       	adiw	r24, 0x01	; 1
    3516:	65 e0       	ldi	r22, 0x05	; 5
    3518:	70 e0       	ldi	r23, 0x00	; 0
    351a:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
    351e:	80 93 13 03 	sts	0x0313, r24

					if(colorState==0) {			// turn on blue and off all IRs
    3522:	88 23       	and	r24, r24
    3524:	89 f5       	brne	.+98     	; 0x3588 <handleIRRemoteCommands+0x3fa>
						LED_IR1_HIGH;
    3526:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    3528:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    352a:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    352e:	8f ef       	ldi	r24, 0xFF	; 255
    3530:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    3534:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    3538:	80 91 0c 02 	lds	r24, 0x020C
    353c:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
					updateGreenLed(pwm_green);
    3540:	80 91 0d 02 	lds	r24, 0x020D
    3544:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
					updateBlueLed(pwm_blue);
    3548:	80 91 0e 02 	lds	r24, 0x020E
    354c:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>
    3550:	40 91 eb 02 	lds	r20, 0x02EB
    3554:	50 91 ec 02 	lds	r21, 0x02EC
    3558:	20 91 ed 02 	lds	r18, 0x02ED
    355c:	30 91 ee 02 	lds	r19, 0x02EE
    3560:	4d ce       	rjmp	.-870    	; 0x31fc <handleIRRemoteCommands+0x6e>
				speedr = (-pwm_right_desired);
			}
			if(pwm_left_desired >= 0) {
				speedl = pwm_left_desired;
			} else {
				speedl = (-pwm_left_desired);
    3562:	88 27       	eor	r24, r24
    3564:	99 27       	eor	r25, r25
    3566:	82 1b       	sub	r24, r18
    3568:	93 0b       	sbc	r25, r19
    356a:	90 93 04 03 	sts	0x0304, r25
    356e:	80 93 03 03 	sts	0x0303, r24
    3572:	08 95       	ret

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    3574:	88 27       	eor	r24, r24
    3576:	99 27       	eor	r25, r25
    3578:	84 1b       	sub	r24, r20
    357a:	95 0b       	sbc	r25, r21
    357c:	45 cf       	rjmp	.-374    	; 0x3408 <handleIRRemoteCommands+0x27a>
    357e:	40 91 eb 02 	lds	r20, 0x02EB
    3582:	50 91 ec 02 	lds	r21, 0x02EC
    3586:	3a ce       	rjmp	.-908    	; 0x31fc <handleIRRemoteCommands+0x6e>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    3588:	81 30       	cpi	r24, 0x01	; 1
    358a:	09 f4       	brne	.+2      	; 0x358e <handleIRRemoteCommands+0x400>
    358c:	4e c0       	rjmp	.+156    	; 0x362a <handleIRRemoteCommands+0x49c>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    358e:	82 30       	cpi	r24, 0x02	; 2
    3590:	09 f4       	brne	.+2      	; 0x3594 <handleIRRemoteCommands+0x406>
    3592:	53 c0       	rjmp	.+166    	; 0x363a <handleIRRemoteCommands+0x4ac>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    3594:	83 30       	cpi	r24, 0x03	; 3
    3596:	09 f4       	brne	.+2      	; 0x359a <handleIRRemoteCommands+0x40c>
    3598:	5a c0       	rjmp	.+180    	; 0x364e <handleIRRemoteCommands+0x4c0>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
    359a:	84 30       	cpi	r24, 0x04	; 4
    359c:	69 f6       	brne	.-102    	; 0x3538 <handleIRRemoteCommands+0x3aa>
						pwm_blue = MAX_LEDS_PWM;
    359e:	8f ef       	ldi	r24, 0xFF	; 255
    35a0:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    35a4:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    35a8:	80 93 0c 02 	sts	0x020C, r24
    35ac:	c5 cf       	rjmp	.-118    	; 0x3538 <handleIRRemoteCommands+0x3aa>
    35ae:	a9 01       	movw	r20, r18
    35b0:	7d cf       	rjmp	.-262    	; 0x34ac <handleIRRemoteCommands+0x31e>
				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    35b2:	20 91 ed 02 	lds	r18, 0x02ED
    35b6:	30 91 ee 02 	lds	r19, 0x02EE
    35ba:	a9 01       	movw	r20, r18
    35bc:	a0 ce       	rjmp	.-704    	; 0x32fe <handleIRRemoteCommands+0x170>
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
					switch(behaviorState) {
    35be:	82 30       	cpi	r24, 0x02	; 2
    35c0:	09 f4       	brne	.+2      	; 0x35c4 <handleIRRemoteCommands+0x436>
    35c2:	4f ce       	rjmp	.-866    	; 0x3262 <handleIRRemoteCommands+0xd4>
    35c4:	83 30       	cpi	r24, 0x03	; 3
    35c6:	09 f0       	breq	.+2      	; 0x35ca <handleIRRemoteCommands+0x43c>
    35c8:	51 ce       	rjmp	.-862    	; 0x326c <handleIRRemoteCommands+0xde>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	80 93 84 03 	sts	0x0384, r24
							cliffAvoidanceEnabled = 1;
    35d0:	80 93 85 03 	sts	0x0385, r24
    35d4:	0b ce       	rjmp	.-1002   	; 0x31ec <handleIRRemoteCommands+0x5e>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    35d6:	80 93 84 03 	sts	0x0384, r24
							cliffAvoidanceEnabled = 0;
    35da:	10 92 85 03 	sts	0x0385, r1
    35de:	40 91 eb 02 	lds	r20, 0x02EB
    35e2:	50 91 ec 02 	lds	r21, 0x02EC
    35e6:	20 91 ed 02 	lds	r18, 0x02ED
    35ea:	30 91 ee 02 	lds	r19, 0x02EE
    35ee:	06 ce       	rjmp	.-1012   	; 0x31fc <handleIRRemoteCommands+0x6e>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    35f0:	0e 94 c7 48 	call	0x918e	; 0x918e <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    35f4:	8f ef       	ldi	r24, 0xFF	; 255
    35f6:	93 e0       	ldi	r25, 0x03	; 3
    35f8:	90 93 68 02 	sts	0x0268, r25
    35fc:	80 93 67 02 	sts	0x0267, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    3600:	90 93 6e 02 	sts	0x026E, r25
    3604:	80 93 6d 02 	sts	0x026D, r24
						calibState = CALIBRATION_STATE_FIND_THRS_0;
    3608:	86 e0       	ldi	r24, 0x06	; 6
    360a:	80 93 6f 0a 	sts	0x0A6F, r24
						calibVelIndex = 1;
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	80 93 c9 07 	sts	0x07C9, r24
						calibrateOdomFlag = 1;
    3614:	80 93 7c 04 	sts	0x047C, r24
    3618:	40 91 eb 02 	lds	r20, 0x02EB
    361c:	50 91 ec 02 	lds	r21, 0x02EC
    3620:	20 91 ed 02 	lds	r18, 0x02ED
    3624:	30 91 ee 02 	lds	r19, 0x02EE
    3628:	e9 cd       	rjmp	.-1070   	; 0x31fc <handleIRRemoteCommands+0x6e>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    362a:	8f ef       	ldi	r24, 0xFF	; 255
    362c:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    3630:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    3634:	80 93 0c 02 	sts	0x020C, r24
    3638:	7f cf       	rjmp	.-258    	; 0x3538 <handleIRRemoteCommands+0x3aa>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    363a:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    363c:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    363e:	8f ef       	ldi	r24, 0xFF	; 255
    3640:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    3644:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    3648:	10 92 0c 02 	sts	0x020C, r1
    364c:	75 cf       	rjmp	.-278    	; 0x3538 <handleIRRemoteCommands+0x3aa>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    364e:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    3652:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    3656:	10 92 0c 02 	sts	0x020C, r1
    365a:	6e cf       	rjmp	.-292    	; 0x3538 <handleIRRemoteCommands+0x3aa>

0000365c <start_speed_control_right>:

void start_speed_control_right(signed int *pwm_right) {
    365c:	ef 92       	push	r14
    365e:	ff 92       	push	r15
    3660:	0f 93       	push	r16
    3662:	1f 93       	push	r17
    3664:	cf 93       	push	r28
    3666:	df 93       	push	r29
    3668:	ec 01       	movw	r28, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    366a:	88 81       	ld	r24, Y
    366c:	99 81       	ldd	r25, Y+1	; 0x01
    366e:	89 2b       	or	r24, r25
    3670:	09 f4       	brne	.+2      	; 0x3674 <start_speed_control_right+0x18>
    3672:	b2 c0       	rjmp	.+356    	; 0x37d8 <start_speed_control_right+0x17c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    3674:	e0 90 35 0a 	lds	r14, 0x0A35
    3678:	f0 90 36 0a 	lds	r15, 0x0A36
    367c:	f0 92 cf 07 	sts	0x07CF, r15
    3680:	e0 92 ce 07 	sts	0x07CE, r14
	if(*pwm_right >= 0) {
    3684:	28 81       	ld	r18, Y
    3686:	39 81       	ldd	r19, Y+1	; 0x01
    3688:	37 fd       	sbrc	r19, 7
    368a:	e4 c0       	rjmp	.+456    	; 0x3854 <start_speed_control_right+0x1f8>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    368c:	80 91 e5 02 	lds	r24, 0x02E5
    3690:	90 91 e6 02 	lds	r25, 0x02E6
    3694:	28 1b       	sub	r18, r24
    3696:	39 0b       	sbc	r19, r25
    3698:	30 93 36 0a 	sts	0x0A36, r19
    369c:	20 93 35 0a 	sts	0x0A35, r18
    36a0:	f9 01       	movw	r30, r18
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    36a2:	20 91 fd 02 	lds	r18, 0x02FD
    36a6:	30 91 fe 02 	lds	r19, 0x02FE
    36aa:	2e 0f       	add	r18, r30
    36ac:	3f 1f       	adc	r19, r31
    36ae:	30 93 fe 02 	sts	0x02FE, r19
    36b2:	20 93 fd 02 	sts	0x02FD, r18

	if(delta_right_speed_sum > I_LIMIT) {
    36b6:	86 e0       	ldi	r24, 0x06	; 6
    36b8:	21 34       	cpi	r18, 0x41	; 65
    36ba:	38 07       	cpc	r19, r24
    36bc:	0c f4       	brge	.+2      	; 0x36c0 <start_speed_control_right+0x64>
    36be:	ad c0       	rjmp	.+346    	; 0x381a <start_speed_control_right+0x1be>
		delta_right_speed_sum = I_LIMIT;
    36c0:	80 e4       	ldi	r24, 0x40	; 64
    36c2:	96 e0       	ldi	r25, 0x06	; 6
    36c4:	90 93 fe 02 	sts	0x02FE, r25
    36c8:	80 93 fd 02 	sts	0x02FD, r24
    36cc:	20 e4       	ldi	r18, 0x40	; 64
    36ce:	36 e0       	ldi	r19, 0x06	; 6
		delta_right_speed_sum = -I_LIMIT;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    36d0:	08 81       	ld	r16, Y
    36d2:	19 81       	ldd	r17, Y+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);
    36d4:	c9 01       	movw	r24, r18
    36d6:	88 0f       	add	r24, r24
    36d8:	99 1f       	adc	r25, r25
    36da:	82 0f       	add	r24, r18
    36dc:	93 1f       	adc	r25, r19
    36de:	ac 01       	movw	r20, r24
    36e0:	66 27       	eor	r22, r22
    36e2:	57 fd       	sbrc	r21, 7
    36e4:	60 95       	com	r22
    36e6:	76 2f       	mov	r23, r22
    36e8:	cf 01       	movw	r24, r30
    36ea:	88 0f       	add	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	9f 01       	movw	r18, r30
    36f0:	22 0f       	add	r18, r18
    36f2:	33 1f       	adc	r19, r19
    36f4:	22 0f       	add	r18, r18
    36f6:	33 1f       	adc	r19, r19
    36f8:	22 0f       	add	r18, r18
    36fa:	33 1f       	adc	r19, r19
    36fc:	82 0f       	add	r24, r18
    36fe:	93 1f       	adc	r25, r19
    3700:	aa 27       	eor	r26, r26
    3702:	97 fd       	sbrc	r25, 7
    3704:	a0 95       	com	r26
    3706:	ba 2f       	mov	r27, r26
    3708:	48 0f       	add	r20, r24
    370a:	59 1f       	adc	r21, r25
    370c:	6a 1f       	adc	r22, r26
    370e:	7b 1f       	adc	r23, r27
    3710:	ee 19       	sub	r30, r14
    3712:	ff 09       	sbc	r31, r15
    3714:	ee 0f       	add	r30, r30
    3716:	ff 1f       	adc	r31, r31
    3718:	cf 01       	movw	r24, r30
    371a:	aa 27       	eor	r26, r26
    371c:	97 fd       	sbrc	r25, 7
    371e:	a0 95       	com	r26
    3720:	ba 2f       	mov	r27, r26
    3722:	48 0f       	add	r20, r24
    3724:	59 1f       	adc	r21, r25
    3726:	6a 1f       	adc	r22, r26
    3728:	7b 1f       	adc	r23, r27
    372a:	c8 01       	movw	r24, r16
    372c:	88 0f       	add	r24, r24
    372e:	99 1f       	adc	r25, r25
    3730:	88 0f       	add	r24, r24
    3732:	99 1f       	adc	r25, r25
    3734:	88 0f       	add	r24, r24
    3736:	99 1f       	adc	r25, r25
    3738:	aa 27       	eor	r26, r26
    373a:	97 fd       	sbrc	r25, 7
    373c:	a0 95       	com	r26
    373e:	ba 2f       	mov	r27, r26
    3740:	48 0f       	add	r20, r24
    3742:	59 1f       	adc	r21, r25
    3744:	6a 1f       	adc	r22, r26
    3746:	7b 1f       	adc	r23, r27
    3748:	40 93 f3 02 	sts	0x02F3, r20
    374c:	50 93 f4 02 	sts	0x02F4, r21
    3750:	60 93 f5 02 	sts	0x02F5, r22
    3754:	70 93 f6 02 	sts	0x02F6, r23

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3758:	77 fd       	sbrc	r23, 7
    375a:	6d c0       	rjmp	.+218    	; 0x3836 <start_speed_control_right+0x1da>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    375c:	14 16       	cp	r1, r20
    375e:	15 06       	cpc	r1, r21
    3760:	16 06       	cpc	r1, r22
    3762:	17 06       	cpc	r1, r23
    3764:	14 f4       	brge	.+4      	; 0x376a <start_speed_control_right+0x10e>
    3766:	17 fd       	sbrc	r17, 7
    3768:	68 c0       	rjmp	.+208    	; 0x383a <start_speed_control_right+0x1de>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    376a:	41 5c       	subi	r20, 0xC1	; 193
    376c:	5d 45       	sbci	r21, 0x5D	; 93
    376e:	60 40       	sbci	r22, 0x00	; 0
    3770:	70 40       	sbci	r23, 0x00	; 0
    3772:	0c f4       	brge	.+2      	; 0x3776 <start_speed_control_right+0x11a>
    3774:	80 c0       	rjmp	.+256    	; 0x3876 <start_speed_control_right+0x21a>
    3776:	80 ec       	ldi	r24, 0xC0	; 192
    3778:	9d e5       	ldi	r25, 0x5D	; 93
    377a:	a0 e0       	ldi	r26, 0x00	; 0
    377c:	b0 e0       	ldi	r27, 0x00	; 0
    377e:	80 93 f3 02 	sts	0x02F3, r24
    3782:	90 93 f4 02 	sts	0x02F4, r25
    3786:	a0 93 f5 02 	sts	0x02F5, r26
    378a:	b0 93 f6 02 	sts	0x02F6, r27
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    378e:	24 e0       	ldi	r18, 0x04	; 4
    3790:	b5 95       	asr	r27
    3792:	a7 95       	ror	r26
    3794:	97 95       	ror	r25
    3796:	87 95       	ror	r24
    3798:	2a 95       	dec	r18
    379a:	d1 f7       	brne	.-12     	; 0x3790 <start_speed_control_right+0x134>
    379c:	9c 01       	movw	r18, r24
    379e:	99 83       	std	Y+1, r25	; 0x01
    37a0:	88 83       	st	Y, r24

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    37a2:	80 91 db 02 	lds	r24, 0x02DB
    37a6:	90 91 dc 02 	lds	r25, 0x02DC
    37aa:	18 16       	cp	r1, r24
    37ac:	19 06       	cpc	r1, r25
    37ae:	0c f0       	brlt	.+2      	; 0x37b2 <start_speed_control_right+0x156>
    37b0:	5d c0       	rjmp	.+186    	; 0x386c <start_speed_control_right+0x210>
		*pwm_right += 1;
    37b2:	c9 01       	movw	r24, r18
    37b4:	01 96       	adiw	r24, 0x01	; 1
    37b6:	99 83       	std	Y+1, r25	; 0x01
    37b8:	88 83       	st	Y, r24
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    37ba:	22 e0       	ldi	r18, 0x02	; 2
    37bc:	80 30       	cpi	r24, 0x00	; 0
    37be:	92 07       	cpc	r25, r18
    37c0:	f4 f0       	brlt	.+60     	; 0x37fe <start_speed_control_right+0x1a2>
    37c2:	8f ef       	ldi	r24, 0xFF	; 255
    37c4:	91 e0       	ldi	r25, 0x01	; 1
    37c6:	99 83       	std	Y+1, r25	; 0x01
    37c8:	88 83       	st	Y, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    37ca:	df 91       	pop	r29
    37cc:	cf 91       	pop	r28
    37ce:	1f 91       	pop	r17
    37d0:	0f 91       	pop	r16
    37d2:	ff 90       	pop	r15
    37d4:	ef 90       	pop	r14
    37d6:	08 95       	ret
void start_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    37d8:	10 92 fe 02 	sts	0x02FE, r1
    37dc:	10 92 fd 02 	sts	0x02FD, r1
		delta_right_speed_current = 0;
    37e0:	10 92 36 0a 	sts	0x0A36, r1
    37e4:	10 92 35 0a 	sts	0x0A35, r1
		delta_right_speed_prev = 0;
    37e8:	10 92 cf 07 	sts	0x07CF, r1
    37ec:	10 92 ce 07 	sts	0x07CE, r1
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    37f0:	df 91       	pop	r29
    37f2:	cf 91       	pop	r28
    37f4:	1f 91       	pop	r17
    37f6:	0f 91       	pop	r16
    37f8:	ff 90       	pop	r15
    37fa:	ef 90       	pop	r14
    37fc:	08 95       	ret
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    37fe:	81 50       	subi	r24, 0x01	; 1
    3800:	9e 4f       	sbci	r25, 0xFE	; 254
    3802:	1c f7       	brge	.-58     	; 0x37ca <start_speed_control_right+0x16e>
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	9e ef       	ldi	r25, 0xFE	; 254
    3808:	99 83       	std	Y+1, r25	; 0x01
    380a:	88 83       	st	Y, r24

}
    380c:	df 91       	pop	r29
    380e:	cf 91       	pop	r28
    3810:	1f 91       	pop	r17
    3812:	0f 91       	pop	r16
    3814:	ff 90       	pop	r15
    3816:	ef 90       	pop	r14
    3818:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT) {
		delta_right_speed_sum = I_LIMIT;
	}else if(delta_right_speed_sum < -I_LIMIT) {
    381a:	89 ef       	ldi	r24, 0xF9	; 249
    381c:	20 3c       	cpi	r18, 0xC0	; 192
    381e:	38 07       	cpc	r19, r24
    3820:	0c f0       	brlt	.+2      	; 0x3824 <start_speed_control_right+0x1c8>
    3822:	56 cf       	rjmp	.-340    	; 0x36d0 <start_speed_control_right+0x74>
		delta_right_speed_sum = -I_LIMIT;
    3824:	80 ec       	ldi	r24, 0xC0	; 192
    3826:	99 ef       	ldi	r25, 0xF9	; 249
    3828:	90 93 fe 02 	sts	0x02FE, r25
    382c:	80 93 fd 02 	sts	0x02FD, r24
    3830:	20 ec       	ldi	r18, 0xC0	; 192
    3832:	39 ef       	ldi	r19, 0xF9	; 249
    3834:	4d cf       	rjmp	.-358    	; 0x36d0 <start_speed_control_right+0x74>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3836:	17 fd       	sbrc	r17, 7
    3838:	98 cf       	rjmp	.-208    	; 0x376a <start_speed_control_right+0x10e>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    383a:	10 92 f3 02 	sts	0x02F3, r1
    383e:	10 92 f4 02 	sts	0x02F4, r1
    3842:	10 92 f5 02 	sts	0x02F5, r1
    3846:	10 92 f6 02 	sts	0x02F6, r1
    384a:	80 e0       	ldi	r24, 0x00	; 0
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	a0 e0       	ldi	r26, 0x00	; 0
    3850:	b0 e0       	ldi	r27, 0x00	; 0
    3852:	9d cf       	rjmp	.-198    	; 0x378e <start_speed_control_right+0x132>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    3854:	80 91 e5 02 	lds	r24, 0x02E5
    3858:	90 91 e6 02 	lds	r25, 0x02E6
    385c:	28 0f       	add	r18, r24
    385e:	39 1f       	adc	r19, r25
    3860:	30 93 36 0a 	sts	0x0A36, r19
    3864:	20 93 35 0a 	sts	0x0A35, r18
    3868:	f9 01       	movw	r30, r18
    386a:	1b cf       	rjmp	.-458    	; 0x36a2 <start_speed_control_right+0x46>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    386c:	c9 01       	movw	r24, r18
    386e:	01 97       	sbiw	r24, 0x01	; 1
    3870:	99 83       	std	Y+1, r25	; 0x01
    3872:	88 83       	st	Y, r24
    3874:	a2 cf       	rjmp	.-188    	; 0x37ba <start_speed_control_right+0x15e>
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3876:	80 91 f3 02 	lds	r24, 0x02F3
    387a:	90 91 f4 02 	lds	r25, 0x02F4
    387e:	a0 91 f5 02 	lds	r26, 0x02F5
    3882:	b0 91 f6 02 	lds	r27, 0x02F6
    3886:	80 34       	cpi	r24, 0x40	; 64
    3888:	22 ea       	ldi	r18, 0xA2	; 162
    388a:	92 07       	cpc	r25, r18
    388c:	2f ef       	ldi	r18, 0xFF	; 255
    388e:	a2 07       	cpc	r26, r18
    3890:	2f ef       	ldi	r18, 0xFF	; 255
    3892:	b2 07       	cpc	r27, r18
    3894:	0c f0       	brlt	.+2      	; 0x3898 <start_speed_control_right+0x23c>
    3896:	7b cf       	rjmp	.-266    	; 0x378e <start_speed_control_right+0x132>
    3898:	80 e4       	ldi	r24, 0x40	; 64
    389a:	92 ea       	ldi	r25, 0xA2	; 162
    389c:	af ef       	ldi	r26, 0xFF	; 255
    389e:	bf ef       	ldi	r27, 0xFF	; 255
    38a0:	80 93 f3 02 	sts	0x02F3, r24
    38a4:	90 93 f4 02 	sts	0x02F4, r25
    38a8:	a0 93 f5 02 	sts	0x02F5, r26
    38ac:	b0 93 f6 02 	sts	0x02F6, r27
    38b0:	6e cf       	rjmp	.-292    	; 0x378e <start_speed_control_right+0x132>

000038b2 <start_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_speed_control_left(signed int *pwm_left) {
    38b2:	ef 92       	push	r14
    38b4:	ff 92       	push	r15
    38b6:	0f 93       	push	r16
    38b8:	1f 93       	push	r17
    38ba:	cf 93       	push	r28
    38bc:	df 93       	push	r29
    38be:	ec 01       	movw	r28, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    38c0:	88 81       	ld	r24, Y
    38c2:	99 81       	ldd	r25, Y+1	; 0x01
    38c4:	89 2b       	or	r24, r25
    38c6:	09 f4       	brne	.+2      	; 0x38ca <start_speed_control_left+0x18>
    38c8:	b2 c0       	rjmp	.+356    	; 0x3a2e <start_speed_control_left+0x17c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    38ca:	e0 90 81 04 	lds	r14, 0x0481
    38ce:	f0 90 82 04 	lds	r15, 0x0482
    38d2:	f0 92 97 08 	sts	0x0897, r15
    38d6:	e0 92 96 08 	sts	0x0896, r14
	if(*pwm_left >= 0) {
    38da:	28 81       	ld	r18, Y
    38dc:	39 81       	ldd	r19, Y+1	; 0x01
    38de:	37 fd       	sbrc	r19, 7
    38e0:	e4 c0       	rjmp	.+456    	; 0x3aaa <start_speed_control_left+0x1f8>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    38e2:	80 91 e3 02 	lds	r24, 0x02E3
    38e6:	90 91 e4 02 	lds	r25, 0x02E4
    38ea:	28 1b       	sub	r18, r24
    38ec:	39 0b       	sbc	r19, r25
    38ee:	30 93 82 04 	sts	0x0482, r19
    38f2:	20 93 81 04 	sts	0x0481, r18
    38f6:	f9 01       	movw	r30, r18
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    38f8:	20 91 fb 02 	lds	r18, 0x02FB
    38fc:	30 91 fc 02 	lds	r19, 0x02FC
    3900:	2e 0f       	add	r18, r30
    3902:	3f 1f       	adc	r19, r31
    3904:	30 93 fc 02 	sts	0x02FC, r19
    3908:	20 93 fb 02 	sts	0x02FB, r18

	if(delta_left_speed_sum > I_LIMIT) {
    390c:	86 e0       	ldi	r24, 0x06	; 6
    390e:	21 34       	cpi	r18, 0x41	; 65
    3910:	38 07       	cpc	r19, r24
    3912:	0c f4       	brge	.+2      	; 0x3916 <start_speed_control_left+0x64>
    3914:	ad c0       	rjmp	.+346    	; 0x3a70 <start_speed_control_left+0x1be>
		delta_left_speed_sum = I_LIMIT;
    3916:	80 e4       	ldi	r24, 0x40	; 64
    3918:	96 e0       	ldi	r25, 0x06	; 6
    391a:	90 93 fc 02 	sts	0x02FC, r25
    391e:	80 93 fb 02 	sts	0x02FB, r24
    3922:	20 e4       	ldi	r18, 0x40	; 64
    3924:	36 e0       	ldi	r19, 0x06	; 6
		delta_left_speed_sum = -I_LIMIT;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3926:	08 81       	ld	r16, Y
    3928:	19 81       	ldd	r17, Y+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);
    392a:	c9 01       	movw	r24, r18
    392c:	88 0f       	add	r24, r24
    392e:	99 1f       	adc	r25, r25
    3930:	82 0f       	add	r24, r18
    3932:	93 1f       	adc	r25, r19
    3934:	ac 01       	movw	r20, r24
    3936:	66 27       	eor	r22, r22
    3938:	57 fd       	sbrc	r21, 7
    393a:	60 95       	com	r22
    393c:	76 2f       	mov	r23, r22
    393e:	cf 01       	movw	r24, r30
    3940:	88 0f       	add	r24, r24
    3942:	99 1f       	adc	r25, r25
    3944:	9f 01       	movw	r18, r30
    3946:	22 0f       	add	r18, r18
    3948:	33 1f       	adc	r19, r19
    394a:	22 0f       	add	r18, r18
    394c:	33 1f       	adc	r19, r19
    394e:	22 0f       	add	r18, r18
    3950:	33 1f       	adc	r19, r19
    3952:	82 0f       	add	r24, r18
    3954:	93 1f       	adc	r25, r19
    3956:	aa 27       	eor	r26, r26
    3958:	97 fd       	sbrc	r25, 7
    395a:	a0 95       	com	r26
    395c:	ba 2f       	mov	r27, r26
    395e:	48 0f       	add	r20, r24
    3960:	59 1f       	adc	r21, r25
    3962:	6a 1f       	adc	r22, r26
    3964:	7b 1f       	adc	r23, r27
    3966:	ee 19       	sub	r30, r14
    3968:	ff 09       	sbc	r31, r15
    396a:	ee 0f       	add	r30, r30
    396c:	ff 1f       	adc	r31, r31
    396e:	cf 01       	movw	r24, r30
    3970:	aa 27       	eor	r26, r26
    3972:	97 fd       	sbrc	r25, 7
    3974:	a0 95       	com	r26
    3976:	ba 2f       	mov	r27, r26
    3978:	48 0f       	add	r20, r24
    397a:	59 1f       	adc	r21, r25
    397c:	6a 1f       	adc	r22, r26
    397e:	7b 1f       	adc	r23, r27
    3980:	c8 01       	movw	r24, r16
    3982:	88 0f       	add	r24, r24
    3984:	99 1f       	adc	r25, r25
    3986:	88 0f       	add	r24, r24
    3988:	99 1f       	adc	r25, r25
    398a:	88 0f       	add	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	aa 27       	eor	r26, r26
    3990:	97 fd       	sbrc	r25, 7
    3992:	a0 95       	com	r26
    3994:	ba 2f       	mov	r27, r26
    3996:	48 0f       	add	r20, r24
    3998:	59 1f       	adc	r21, r25
    399a:	6a 1f       	adc	r22, r26
    399c:	7b 1f       	adc	r23, r27
    399e:	40 93 f7 02 	sts	0x02F7, r20
    39a2:	50 93 f8 02 	sts	0x02F8, r21
    39a6:	60 93 f9 02 	sts	0x02F9, r22
    39aa:	70 93 fa 02 	sts	0x02FA, r23

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    39ae:	77 fd       	sbrc	r23, 7
    39b0:	6d c0       	rjmp	.+218    	; 0x3a8c <start_speed_control_left+0x1da>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    39b2:	14 16       	cp	r1, r20
    39b4:	15 06       	cpc	r1, r21
    39b6:	16 06       	cpc	r1, r22
    39b8:	17 06       	cpc	r1, r23
    39ba:	14 f4       	brge	.+4      	; 0x39c0 <start_speed_control_left+0x10e>
    39bc:	17 fd       	sbrc	r17, 7
    39be:	68 c0       	rjmp	.+208    	; 0x3a90 <start_speed_control_left+0x1de>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    39c0:	41 5c       	subi	r20, 0xC1	; 193
    39c2:	5d 45       	sbci	r21, 0x5D	; 93
    39c4:	60 40       	sbci	r22, 0x00	; 0
    39c6:	70 40       	sbci	r23, 0x00	; 0
    39c8:	0c f4       	brge	.+2      	; 0x39cc <start_speed_control_left+0x11a>
    39ca:	80 c0       	rjmp	.+256    	; 0x3acc <start_speed_control_left+0x21a>
    39cc:	80 ec       	ldi	r24, 0xC0	; 192
    39ce:	9d e5       	ldi	r25, 0x5D	; 93
    39d0:	a0 e0       	ldi	r26, 0x00	; 0
    39d2:	b0 e0       	ldi	r27, 0x00	; 0
    39d4:	80 93 f7 02 	sts	0x02F7, r24
    39d8:	90 93 f8 02 	sts	0x02F8, r25
    39dc:	a0 93 f9 02 	sts	0x02F9, r26
    39e0:	b0 93 fa 02 	sts	0x02FA, r27
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    39e4:	54 e0       	ldi	r21, 0x04	; 4
    39e6:	b5 95       	asr	r27
    39e8:	a7 95       	ror	r26
    39ea:	97 95       	ror	r25
    39ec:	87 95       	ror	r24
    39ee:	5a 95       	dec	r21
    39f0:	d1 f7       	brne	.-12     	; 0x39e6 <start_speed_control_left+0x134>
    39f2:	9c 01       	movw	r18, r24
    39f4:	99 83       	std	Y+1, r25	; 0x01
    39f6:	88 83       	st	Y, r24

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    39f8:	80 91 dd 02 	lds	r24, 0x02DD
    39fc:	90 91 de 02 	lds	r25, 0x02DE
    3a00:	18 16       	cp	r1, r24
    3a02:	19 06       	cpc	r1, r25
    3a04:	0c f0       	brlt	.+2      	; 0x3a08 <start_speed_control_left+0x156>
    3a06:	5d c0       	rjmp	.+186    	; 0x3ac2 <start_speed_control_left+0x210>
		*pwm_left += 1;
    3a08:	c9 01       	movw	r24, r18
    3a0a:	01 96       	adiw	r24, 0x01	; 1
    3a0c:	99 83       	std	Y+1, r25	; 0x01
    3a0e:	88 83       	st	Y, r24
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3a10:	22 e0       	ldi	r18, 0x02	; 2
    3a12:	80 30       	cpi	r24, 0x00	; 0
    3a14:	92 07       	cpc	r25, r18
    3a16:	f4 f0       	brlt	.+60     	; 0x3a54 <start_speed_control_left+0x1a2>
    3a18:	8f ef       	ldi	r24, 0xFF	; 255
    3a1a:	91 e0       	ldi	r25, 0x01	; 1
    3a1c:	99 83       	std	Y+1, r25	; 0x01
    3a1e:	88 83       	st	Y, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    3a20:	df 91       	pop	r29
    3a22:	cf 91       	pop	r28
    3a24:	1f 91       	pop	r17
    3a26:	0f 91       	pop	r16
    3a28:	ff 90       	pop	r15
    3a2a:	ef 90       	pop	r14
    3a2c:	08 95       	ret
void start_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    3a2e:	10 92 fc 02 	sts	0x02FC, r1
    3a32:	10 92 fb 02 	sts	0x02FB, r1
		delta_left_speed_current = 0;
    3a36:	10 92 82 04 	sts	0x0482, r1
    3a3a:	10 92 81 04 	sts	0x0481, r1
		delta_left_speed_prev = 0;
    3a3e:	10 92 97 08 	sts	0x0897, r1
    3a42:	10 92 96 08 	sts	0x0896, r1
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    3a46:	df 91       	pop	r29
    3a48:	cf 91       	pop	r28
    3a4a:	1f 91       	pop	r17
    3a4c:	0f 91       	pop	r16
    3a4e:	ff 90       	pop	r15
    3a50:	ef 90       	pop	r14
    3a52:	08 95       	ret
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3a54:	81 50       	subi	r24, 0x01	; 1
    3a56:	9e 4f       	sbci	r25, 0xFE	; 254
    3a58:	1c f7       	brge	.-58     	; 0x3a20 <start_speed_control_left+0x16e>
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	9e ef       	ldi	r25, 0xFE	; 254
    3a5e:	99 83       	std	Y+1, r25	; 0x01
    3a60:	88 83       	st	Y, r24

}
    3a62:	df 91       	pop	r29
    3a64:	cf 91       	pop	r28
    3a66:	1f 91       	pop	r17
    3a68:	0f 91       	pop	r16
    3a6a:	ff 90       	pop	r15
    3a6c:	ef 90       	pop	r14
    3a6e:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT) {
		delta_left_speed_sum = I_LIMIT;
	} else if(delta_left_speed_sum < -I_LIMIT) {
    3a70:	89 ef       	ldi	r24, 0xF9	; 249
    3a72:	20 3c       	cpi	r18, 0xC0	; 192
    3a74:	38 07       	cpc	r19, r24
    3a76:	0c f0       	brlt	.+2      	; 0x3a7a <start_speed_control_left+0x1c8>
    3a78:	56 cf       	rjmp	.-340    	; 0x3926 <start_speed_control_left+0x74>
		delta_left_speed_sum = -I_LIMIT;
    3a7a:	80 ec       	ldi	r24, 0xC0	; 192
    3a7c:	99 ef       	ldi	r25, 0xF9	; 249
    3a7e:	90 93 fc 02 	sts	0x02FC, r25
    3a82:	80 93 fb 02 	sts	0x02FB, r24
    3a86:	20 ec       	ldi	r18, 0xC0	; 192
    3a88:	39 ef       	ldi	r19, 0xF9	; 249
    3a8a:	4d cf       	rjmp	.-358    	; 0x3926 <start_speed_control_left+0x74>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3a8c:	17 fd       	sbrc	r17, 7
    3a8e:	98 cf       	rjmp	.-208    	; 0x39c0 <start_speed_control_left+0x10e>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3a90:	10 92 f7 02 	sts	0x02F7, r1
    3a94:	10 92 f8 02 	sts	0x02F8, r1
    3a98:	10 92 f9 02 	sts	0x02F9, r1
    3a9c:	10 92 fa 02 	sts	0x02FA, r1
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	a0 e0       	ldi	r26, 0x00	; 0
    3aa6:	b0 e0       	ldi	r27, 0x00	; 0
    3aa8:	9d cf       	rjmp	.-198    	; 0x39e4 <start_speed_control_left+0x132>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    3aaa:	80 91 e3 02 	lds	r24, 0x02E3
    3aae:	90 91 e4 02 	lds	r25, 0x02E4
    3ab2:	28 0f       	add	r18, r24
    3ab4:	39 1f       	adc	r19, r25
    3ab6:	30 93 82 04 	sts	0x0482, r19
    3aba:	20 93 81 04 	sts	0x0481, r18
    3abe:	f9 01       	movw	r30, r18
    3ac0:	1b cf       	rjmp	.-458    	; 0x38f8 <start_speed_control_left+0x46>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    3ac2:	c9 01       	movw	r24, r18
    3ac4:	01 97       	sbiw	r24, 0x01	; 1
    3ac6:	99 83       	std	Y+1, r25	; 0x01
    3ac8:	88 83       	st	Y, r24
    3aca:	a2 cf       	rjmp	.-188    	; 0x3a10 <start_speed_control_left+0x15e>
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3acc:	80 91 f7 02 	lds	r24, 0x02F7
    3ad0:	90 91 f8 02 	lds	r25, 0x02F8
    3ad4:	a0 91 f9 02 	lds	r26, 0x02F9
    3ad8:	b0 91 fa 02 	lds	r27, 0x02FA
    3adc:	80 34       	cpi	r24, 0x40	; 64
    3ade:	22 ea       	ldi	r18, 0xA2	; 162
    3ae0:	92 07       	cpc	r25, r18
    3ae2:	2f ef       	ldi	r18, 0xFF	; 255
    3ae4:	a2 07       	cpc	r26, r18
    3ae6:	2f ef       	ldi	r18, 0xFF	; 255
    3ae8:	b2 07       	cpc	r27, r18
    3aea:	0c f0       	brlt	.+2      	; 0x3aee <start_speed_control_left+0x23c>
    3aec:	7b cf       	rjmp	.-266    	; 0x39e4 <start_speed_control_left+0x132>
    3aee:	80 e4       	ldi	r24, 0x40	; 64
    3af0:	92 ea       	ldi	r25, 0xA2	; 162
    3af2:	af ef       	ldi	r26, 0xFF	; 255
    3af4:	bf ef       	ldi	r27, 0xFF	; 255
    3af6:	80 93 f7 02 	sts	0x02F7, r24
    3afa:	90 93 f8 02 	sts	0x02F8, r25
    3afe:	a0 93 f9 02 	sts	0x02F9, r26
    3b02:	b0 93 fa 02 	sts	0x02FA, r27
    3b06:	6e cf       	rjmp	.-292    	; 0x39e4 <start_speed_control_left+0x132>

00003b08 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    3b08:	85 b7       	in	r24, 0x35	; 53
    3b0a:	80 61       	ori	r24, 0x10	; 16
    3b0c:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    3b0e:	2f ef       	ldi	r18, 0xFF	; 255
    3b10:	21 b9       	out	0x01, r18	; 1
	PORTA = 0x00;			// proximity pulses turned off
    3b12:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3b14:	87 ef       	ldi	r24, 0xF7	; 247
    3b16:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    3b18:	80 ee       	ldi	r24, 0xE0	; 224
    3b1a:	85 b9       	out	0x05, r24	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    3b1c:	80 ef       	ldi	r24, 0xF0	; 240
    3b1e:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    3b20:	80 eb       	ldi	r24, 0xB0	; 176
    3b22:	88 b9       	out	0x08, r24	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3b24:	8c ef       	ldi	r24, 0xFC	; 252
    3b26:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x03;			// default for unused pins is 0
    3b28:	83 e0       	ldi	r24, 0x03	; 3
    3b2a:	8b b9       	out	0x0b, r24	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    3b2c:	2d b9       	out	0x0d, r18	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3b2e:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    3b30:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    3b32:	23 bb       	out	0x13, r18	; 19
	if(hardwareRevision == HW_REV_3_0) {
    3b34:	90 91 63 03 	lds	r25, 0x0363
    3b38:	99 23       	and	r25, r25
    3b3a:	99 f4       	brne	.+38     	; 0x3b62 <initPortsIO+0x5a>
		PORTG = 0x00;		// default for unused pins is 0
    3b3c:	14 ba       	out	0x14, r1	; 20
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3b3e:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3b42:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    3b46:	8f e0       	ldi	r24, 0x0F	; 15
    3b48:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
    3b4c:	80 91 05 01 	lds	r24, 0x0105
    3b50:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    3b54:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3b58:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    3b5c:	10 92 0b 01 	sts	0x010B, r1
    3b60:	08 95       	ret

	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3b62:	91 30       	cpi	r25, 0x01	; 1
    3b64:	89 f4       	brne	.+34     	; 0x3b88 <initPortsIO+0x80>
		PORTG = 0x00;		// default for unused pins is 0
    3b66:	14 ba       	out	0x14, r1	; 20
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3b68:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3b6c:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    3b70:	8f e0       	ldi	r24, 0x0F	; 15
    3b72:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
    3b76:	80 93 05 01 	sts	0x0105, r24
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    3b7a:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3b7e:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    3b82:	10 92 0b 01 	sts	0x010B, r1
    3b86:	08 95       	ret
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3b88:	92 30       	cpi	r25, 0x02	; 2
    3b8a:	99 f4       	brne	.+38     	; 0x3bb2 <initPortsIO+0xaa>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    3b8c:	88 e0       	ldi	r24, 0x08	; 8
    3b8e:	84 bb       	out	0x14, r24	; 20
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3b90:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3b94:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    3b98:	8f e0       	ldi	r24, 0x0F	; 15
    3b9a:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
    3b9e:	80 93 05 01 	sts	0x0105, r24
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    3ba2:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3ba6:	20 93 0a 01 	sts	0x010A, r18
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    3baa:	87 ef       	ldi	r24, 0xF7	; 247
    3bac:	80 93 0b 01 	sts	0x010B, r24
    3bb0:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3bb2:	20 93 01 01 	sts	0x0101, r18
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    3bb6:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    3bba:	8f e0       	ldi	r24, 0x0F	; 15
    3bbc:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    3bc0:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3bc4:	20 93 0a 01 	sts	0x010A, r18
	if(hardwareRevision == HW_REV_3_0) {
    3bc8:	99 23       	and	r25, r25
    3bca:	41 f2       	breq	.-112    	; 0x3b5c <initPortsIO+0x54>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    3bcc:	91 30       	cpi	r25, 0x01	; 1
    3bce:	31 f2       	breq	.-116    	; 0x3b5c <initPortsIO+0x54>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3bd0:	92 30       	cpi	r25, 0x02	; 2
    3bd2:	59 f3       	breq	.-42     	; 0x3baa <initPortsIO+0xa2>
    3bd4:	08 95       	ret

00003bd6 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    3bd6:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    3bda:	10 92 bc 00 	sts	0x00BC, r1
}
    3bde:	08 95       	ret

00003be0 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    3be0:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    3be2:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3be4:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3bee:	08 95       	ret

00003bf0 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    3bf0:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3bf2:	84 ea       	ldi	r24, 0xA4	; 164
    3bf4:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3bf8:	80 91 bc 00 	lds	r24, 0x00BC
    3bfc:	87 ff       	sbrs	r24, 7
    3bfe:	fc cf       	rjmp	.-8      	; 0x3bf8 <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3c00:	80 91 b9 00 	lds	r24, 0x00B9
    3c04:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3c06:	88 30       	cpi	r24, 0x08	; 8
    3c08:	21 f0       	breq	.+8      	; 0x3c12 <i2c_start+0x22>
    3c0a:	80 31       	cpi	r24, 0x10	; 16
    3c0c:	11 f0       	breq	.+4      	; 0x3c12 <i2c_start+0x22>
    3c0e:	81 e0       	ldi	r24, 0x01	; 1
    3c10:	08 95       	ret
		//usartTransmit(twst);
		return 1;
	}

	// send device address
	TWDR = address;
    3c12:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    3c16:	84 e8       	ldi	r24, 0x84	; 132
    3c18:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3c1c:	80 91 bc 00 	lds	r24, 0x00BC
    3c20:	87 ff       	sbrs	r24, 7
    3c22:	fc cf       	rjmp	.-8      	; 0x3c1c <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3c24:	90 91 b9 00 	lds	r25, 0x00B9
    3c28:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3c2a:	98 31       	cpi	r25, 0x18	; 24
    3c2c:	29 f0       	breq	.+10     	; 0x3c38 <i2c_start+0x48>
    3c2e:	80 e0       	ldi	r24, 0x00	; 0
    3c30:	90 34       	cpi	r25, 0x40	; 64
    3c32:	09 f0       	breq	.+2      	; 0x3c36 <i2c_start+0x46>
    3c34:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}

	return 0;

}/* i2c_start */
    3c36:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	08 95       	ret

00003c3c <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3c3c:	84 e9       	ldi	r24, 0x94	; 148
    3c3e:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3c42:	80 91 bc 00 	lds	r24, 0x00BC
    3c46:	84 fd       	sbrc	r24, 4
    3c48:	fc cf       	rjmp	.-8      	; 0x3c42 <i2c_stop+0x6>

}/* i2c_stop */
    3c4a:	08 95       	ret

00003c4c <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3c4c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3c50:	84 e8       	ldi	r24, 0x84	; 132
    3c52:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3c56:	80 91 bc 00 	lds	r24, 0x00BC
    3c5a:	87 ff       	sbrs	r24, 7
    3c5c:	fc cf       	rjmp	.-8      	; 0x3c56 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3c5e:	80 91 b9 00 	lds	r24, 0x00B9
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	88 7f       	andi	r24, 0xF8	; 248
    3c66:	88 32       	cpi	r24, 0x28	; 40
    3c68:	09 f0       	breq	.+2      	; 0x3c6c <i2c_write+0x20>
    3c6a:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    3c6c:	89 2f       	mov	r24, r25
    3c6e:	08 95       	ret

00003c70 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3c70:	84 ec       	ldi	r24, 0xC4	; 196
    3c72:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    3c76:	80 91 bc 00 	lds	r24, 0x00BC
    3c7a:	87 ff       	sbrs	r24, 7
    3c7c:	fc cf       	rjmp	.-8      	; 0x3c76 <i2c_readAck+0x6>

    return TWDR;
    3c7e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3c82:	08 95       	ret

00003c84 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3c84:	84 e8       	ldi	r24, 0x84	; 132
    3c86:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3c8a:	80 91 bc 00 	lds	r24, 0x00BC
    3c8e:	87 ff       	sbrs	r24, 7
    3c90:	fc cf       	rjmp	.-8      	; 0x3c8a <i2c_readNak+0x6>
	
    return TWDR;
    3c92:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    3c96:	08 95       	ret

00003c98 <i2c_rep_start>:
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    3c98:	98 2f       	mov	r25, r24
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3c9a:	84 ea       	ldi	r24, 0xA4	; 164
    3c9c:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3ca0:	80 91 bc 00 	lds	r24, 0x00BC
    3ca4:	87 ff       	sbrs	r24, 7
    3ca6:	fc cf       	rjmp	.-8      	; 0x3ca0 <i2c_rep_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3ca8:	80 91 b9 00 	lds	r24, 0x00B9
    3cac:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3cae:	88 30       	cpi	r24, 0x08	; 8
    3cb0:	21 f0       	breq	.+8      	; 0x3cba <i2c_rep_start+0x22>
    3cb2:	80 31       	cpi	r24, 0x10	; 16
    3cb4:	11 f0       	breq	.+4      	; 0x3cba <i2c_rep_start+0x22>
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	08 95       	ret
		//usartTransmit(twst);
		return 1;
	}

	// send device address
	TWDR = address;
    3cba:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    3cbe:	84 e8       	ldi	r24, 0x84	; 132
    3cc0:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3cc4:	80 91 bc 00 	lds	r24, 0x00BC
    3cc8:	87 ff       	sbrs	r24, 7
    3cca:	fc cf       	rjmp	.-8      	; 0x3cc4 <i2c_rep_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3ccc:	90 91 b9 00 	lds	r25, 0x00B9
    3cd0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3cd2:	98 31       	cpi	r25, 0x18	; 24
    3cd4:	29 f0       	breq	.+10     	; 0x3ce0 <i2c_rep_start+0x48>
    3cd6:	80 e0       	ldi	r24, 0x00	; 0
    3cd8:	90 34       	cpi	r25, 0x40	; 64
    3cda:	09 f0       	breq	.+2      	; 0x3cde <i2c_rep_start+0x46>
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    3cde:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	08 95       	ret

00003ce4 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    3ce4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    3ce8:	80 e1       	ldi	r24, 0x10	; 16
    3cea:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    3cee:	e0 ec       	ldi	r30, 0xC0	; 192
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	80 81       	ld	r24, Z
    3cf4:	82 60       	ori	r24, 0x02	; 2
    3cf6:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    3cf8:	e1 ec       	ldi	r30, 0xC1	; 193
    3cfa:	f0 e0       	ldi	r31, 0x00	; 0
    3cfc:	80 81       	ld	r24, Z
    3cfe:	88 69       	ori	r24, 0x98	; 152
    3d00:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    3d02:	e2 ec       	ldi	r30, 0xC2	; 194
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	80 81       	ld	r24, Z
    3d08:	86 60       	ori	r24, 0x06	; 6
    3d0a:	80 83       	st	Z, r24



}
    3d0c:	08 95       	ret

00003d0e <closeUsart>:

}

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    3d0e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    3d12:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    3d16:	10 92 c2 00 	sts	0x00C2, r1

}
    3d1a:	08 95       	ret

00003d1c <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {
    3d1c:	98 2f       	mov	r25, r24

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3d1e:	80 91 c0 00 	lds	r24, 0x00C0
    3d22:	85 ff       	sbrs	r24, 5
    3d24:	fc cf       	rjmp	.-8      	; 0x3d1e <usart0Transmit+0x2>
	UDR0 = data;						// put data into buffer, sends the data
    3d26:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
    3d2a:	66 23       	and	r22, r22
    3d2c:	21 f0       	breq	.+8      	; 0x3d36 <usart0Transmit+0x1a>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3d2e:	80 91 c0 00 	lds	r24, 0x00C0
    3d32:	86 ff       	sbrs	r24, 6
    3d34:	fc cf       	rjmp	.-8      	; 0x3d2e <usart0Transmit+0x12>
    3d36:	08 95       	ret

00003d38 <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    3d38:	1f 92       	push	r1
    3d3a:	0f 92       	push	r0
    3d3c:	0f b6       	in	r0, 0x3f	; 63
    3d3e:	0f 92       	push	r0
    3d40:	0b b6       	in	r0, 0x3b	; 59
    3d42:	0f 92       	push	r0
    3d44:	11 24       	eor	r1, r1
    3d46:	2f 93       	push	r18
    3d48:	3f 93       	push	r19
    3d4a:	4f 93       	push	r20
    3d4c:	5f 93       	push	r21
    3d4e:	6f 93       	push	r22
    3d50:	7f 93       	push	r23
    3d52:	8f 93       	push	r24
    3d54:	9f 93       	push	r25
    3d56:	af 93       	push	r26
    3d58:	bf 93       	push	r27
    3d5a:	ef 93       	push	r30
    3d5c:	ff 93       	push	r31

	char receivedByte = UDR0;
    3d5e:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    3d62:	80 91 60 03 	lds	r24, 0x0360
    3d66:	8e 30       	cpi	r24, 0x0E	; 14
    3d68:	c1 f1       	breq	.+112    	; 0x3dda <__vector_25+0xa2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    3d6a:	8f 30       	cpi	r24, 0x0F	; 15
    3d6c:	31 f1       	breq	.+76     	; 0x3dba <__vector_25+0x82>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    3d6e:	80 91 0f 02 	lds	r24, 0x020F
    3d72:	88 23       	and	r24, r24
    3d74:	09 f0       	breq	.+2      	; 0x3d78 <__vector_25+0x40>
    3d76:	46 c0       	rjmp	.+140    	; 0x3e04 <__vector_25+0xcc>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    3d78:	80 91 0d 03 	lds	r24, 0x030D
    3d7c:	81 30       	cpi	r24, 0x01	; 1
    3d7e:	09 f4       	brne	.+2      	; 0x3d82 <__vector_25+0x4a>
    3d80:	46 c0       	rjmp	.+140    	; 0x3e0e <__vector_25+0xd6>
    3d82:	82 30       	cpi	r24, 0x02	; 2
    3d84:	61 f5       	brne	.+88     	; 0x3dde <__vector_25+0xa6>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    3d86:	40 91 0f 03 	lds	r20, 0x030F
    3d8a:	44 23       	and	r20, r20
    3d8c:	09 f4       	brne	.+2      	; 0x3d90 <__vector_25+0x58>
    3d8e:	5e c0       	rjmp	.+188    	; 0x3e4c <__vector_25+0x114>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    3d90:	41 30       	cpi	r20, 0x01	; 1
    3d92:	29 f5       	brne	.+74     	; 0x3dde <__vector_25+0xa6>
						rfAddress |= ((unsigned int)receivedByte<<8);
    3d94:	39 2f       	mov	r19, r25
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	80 91 07 03 	lds	r24, 0x0307
    3d9c:	90 91 08 03 	lds	r25, 0x0308
    3da0:	82 2b       	or	r24, r18
    3da2:	93 2b       	or	r25, r19
    3da4:	90 93 08 03 	sts	0x0308, r25
    3da8:	80 93 07 03 	sts	0x0307, r24
						addressReceived = 1;
    3dac:	40 93 0e 03 	sts	0x030E, r20
						menuState = 0;
    3db0:	10 92 0f 03 	sts	0x030F, r1
						chooseMenu = 1;
    3db4:	40 93 0f 02 	sts	0x020F, r20
    3db8:	12 c0       	rjmp	.+36     	; 0x3dde <__vector_25+0xa6>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    3dba:	9b 32       	cpi	r25, 0x2B	; 43
    3dbc:	89 f1       	breq	.+98     	; 0x3e20 <__vector_25+0xe8>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    3dbe:	9d 32       	cpi	r25, 0x2D	; 45
    3dc0:	e9 f1       	breq	.+122    	; 0x3e3c <__vector_25+0x104>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    3dc2:	97 36       	cpi	r25, 0x67	; 103
    3dc4:	09 f4       	brne	.+2      	; 0x3dc8 <__vector_25+0x90>
    3dc6:	4a c0       	rjmp	.+148    	; 0x3e5c <__vector_25+0x124>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    3dc8:	93 37       	cpi	r25, 0x73	; 115
    3dca:	49 f4       	brne	.+18     	; 0x3dde <__vector_25+0xa6>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    3dcc:	8d ef       	ldi	r24, 0xFD	; 253
    3dce:	9f e0       	ldi	r25, 0x0F	; 15
    3dd0:	60 91 5f 04 	lds	r22, 0x045F
    3dd4:	0e 94 48 5e 	call	0xbc90	; 0xbc90 <__eewr_byte_m2560>
    3dd8:	02 c0       	rjmp	.+4      	; 0x3dde <__vector_25+0xa6>

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    3dda:	9a 3a       	cpi	r25, 0xAA	; 170
    3ddc:	59 f1       	breq	.+86     	; 0x3e34 <__vector_25+0xfc>
			}
		}

	}

}
    3dde:	ff 91       	pop	r31
    3de0:	ef 91       	pop	r30
    3de2:	bf 91       	pop	r27
    3de4:	af 91       	pop	r26
    3de6:	9f 91       	pop	r25
    3de8:	8f 91       	pop	r24
    3dea:	7f 91       	pop	r23
    3dec:	6f 91       	pop	r22
    3dee:	5f 91       	pop	r21
    3df0:	4f 91       	pop	r20
    3df2:	3f 91       	pop	r19
    3df4:	2f 91       	pop	r18
    3df6:	0f 90       	pop	r0
    3df8:	0b be       	out	0x3b, r0	; 59
    3dfa:	0f 90       	pop	r0
    3dfc:	0f be       	out	0x3f, r0	; 63
    3dfe:	0f 90       	pop	r0
    3e00:	1f 90       	pop	r1
    3e02:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    3e04:	10 92 0f 02 	sts	0x020F, r1
			menuChoice = receivedByte;
    3e08:	90 93 0d 03 	sts	0x030D, r25
    3e0c:	e8 cf       	rjmp	.-48     	; 0x3dde <__vector_25+0xa6>
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    3e0e:	9a 3a       	cpi	r25, 0xAA	; 170
    3e10:	81 f1       	breq	.+96     	; 0x3e72 <__vector_25+0x13a>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    3e12:	95 35       	cpi	r25, 0x55	; 85
    3e14:	21 f7       	brne	.-56     	; 0x3dde <__vector_25+0xa6>
						chooseMenu = 1;
    3e16:	80 93 0f 02 	sts	0x020F, r24
						menuChoice = 0;
    3e1a:	10 92 0d 03 	sts	0x030D, r1
    3e1e:	df cf       	rjmp	.-66     	; 0x3dde <__vector_25+0xa6>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3e20:	80 91 5f 04 	lds	r24, 0x045F
    3e24:	8f 3f       	cpi	r24, 0xFF	; 255
    3e26:	19 f0       	breq	.+6      	; 0x3e2e <__vector_25+0xf6>
				currentOsccal++;
    3e28:	8f 5f       	subi	r24, 0xFF	; 255
    3e2a:	80 93 5f 04 	sts	0x045F, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    3e2e:	80 93 66 00 	sts	0x0066, r24
    3e32:	d5 cf       	rjmp	.-86     	; 0x3dde <__vector_25+0xa6>
	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	80 93 d9 03 	sts	0x03D9, r24
    3e3a:	d1 cf       	rjmp	.-94     	; 0x3dde <__vector_25+0xa6>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3e3c:	80 91 5f 04 	lds	r24, 0x045F
    3e40:	88 23       	and	r24, r24
    3e42:	a9 f3       	breq	.-22     	; 0x3e2e <__vector_25+0xf6>
				currentOsccal--;	
    3e44:	81 50       	subi	r24, 0x01	; 1
    3e46:	80 93 5f 04 	sts	0x045F, r24
    3e4a:	f1 cf       	rjmp	.-30     	; 0x3e2e <__vector_25+0xf6>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    3e4c:	90 93 07 03 	sts	0x0307, r25
    3e50:	10 92 08 03 	sts	0x0308, r1
						menuState = 1;
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	80 93 0f 03 	sts	0x030F, r24
    3e5a:	c1 cf       	rjmp	.-126    	; 0x3dde <__vector_25+0xa6>
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
    3e5c:	80 91 11 03 	lds	r24, 0x0311
    3e60:	61 e0       	ldi	r22, 0x01	; 1
    3e62:	5c df       	rcall	.-328    	; 0x3d1c <usart0Transmit>
			currentOsccal = OSCCAL;
    3e64:	80 91 66 00 	lds	r24, 0x0066
    3e68:	80 93 5f 04 	sts	0x045F, r24
			usart0Transmit(currentOsccal,1);
    3e6c:	61 e0       	ldi	r22, 0x01	; 1
    3e6e:	56 df       	rcall	.-340    	; 0x3d1c <usart0Transmit>
    3e70:	b6 cf       	rjmp	.-148    	; 0x3dde <__vector_25+0xa6>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    3e72:	80 93 10 03 	sts	0x0310, r24
    3e76:	b3 cf       	rjmp	.-154    	; 0x3dde <__vector_25+0xa6>

00003e78 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    3e78:	86 b1       	in	r24, 0x06	; 6
    3e7a:	46 b1       	in	r20, 0x06	; 6
    3e7c:	26 b1       	in	r18, 0x06	; 6
    3e7e:	66 b1       	in	r22, 0x06	; 6
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	28 70       	andi	r18, 0x08	; 8
    3e84:	30 70       	andi	r19, 0x00	; 0
    3e86:	35 95       	asr	r19
    3e88:	27 95       	ror	r18
    3e8a:	35 95       	asr	r19
    3e8c:	27 95       	ror	r18
    3e8e:	35 95       	asr	r19
    3e90:	27 95       	ror	r18
    3e92:	22 0f       	add	r18, r18
    3e94:	33 1f       	adc	r19, r19
    3e96:	50 e0       	ldi	r21, 0x00	; 0
    3e98:	44 70       	andi	r20, 0x04	; 4
    3e9a:	50 70       	andi	r21, 0x00	; 0
    3e9c:	55 95       	asr	r21
    3e9e:	47 95       	ror	r20
    3ea0:	55 95       	asr	r21
    3ea2:	47 95       	ror	r20
    3ea4:	24 0f       	add	r18, r20
    3ea6:	35 1f       	adc	r19, r21
    3ea8:	22 0f       	add	r18, r18
    3eaa:	33 1f       	adc	r19, r19
    3eac:	70 e0       	ldi	r23, 0x00	; 0
    3eae:	62 70       	andi	r22, 0x02	; 2
    3eb0:	70 70       	andi	r23, 0x00	; 0
    3eb2:	75 95       	asr	r23
    3eb4:	67 95       	ror	r22
    3eb6:	26 0f       	add	r18, r22
    3eb8:	37 1f       	adc	r19, r23
    3eba:	22 0f       	add	r18, r18
    3ebc:	33 1f       	adc	r19, r19
    3ebe:	81 70       	andi	r24, 0x01	; 1
}
    3ec0:	82 0f       	add	r24, r18
    3ec2:	08 95       	ret

00003ec4 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    3ec4:	1f 92       	push	r1
    3ec6:	0f 92       	push	r0
    3ec8:	0f b6       	in	r0, 0x3f	; 63
    3eca:	0f 92       	push	r0
    3ecc:	11 24       	eor	r1, r1

}
    3ece:	0f 90       	pop	r0
    3ed0:	0f be       	out	0x3f, r0	; 63
    3ed2:	0f 90       	pop	r0
    3ed4:	1f 90       	pop	r1
    3ed6:	18 95       	reti

00003ed8 <getTime100MicroSec>:
	pwm_left = 0;
	initPeripherals();

}

unsigned long int getTime100MicroSec() {
    3ed8:	60 91 5c 03 	lds	r22, 0x035C
    3edc:	70 91 5d 03 	lds	r23, 0x035D
	return clockTick;
}
    3ee0:	80 91 5e 03 	lds	r24, 0x035E
    3ee4:	90 91 5f 03 	lds	r25, 0x035F
    3ee8:	08 95       	ret

00003eea <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	80 93 bd 02 	sts	0x02BD, r24
}
    3ef0:	08 95       	ret

00003ef2 <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	a0 e0       	ldi	r26, 0x00	; 0
    3ef8:	b0 e0       	ldi	r27, 0x00	; 0
    3efa:	80 93 d3 02 	sts	0x02D3, r24
    3efe:	90 93 d4 02 	sts	0x02D4, r25
    3f02:	a0 93 d5 02 	sts	0x02D5, r26
    3f06:	b0 93 d6 02 	sts	0x02D6, r27
	rightMotSteps = 0;
    3f0a:	80 93 cf 02 	sts	0x02CF, r24
    3f0e:	90 93 d0 02 	sts	0x02D0, r25
    3f12:	a0 93 d1 02 	sts	0x02D1, r26
    3f16:	b0 93 d2 02 	sts	0x02D2, r27
	theta = 0;
    3f1a:	80 93 87 03 	sts	0x0387, r24
    3f1e:	90 93 88 03 	sts	0x0388, r25
    3f22:	a0 93 89 03 	sts	0x0389, r26
    3f26:	b0 93 8a 03 	sts	0x038A, r27
	xPos = 0;
    3f2a:	80 93 8f 03 	sts	0x038F, r24
    3f2e:	90 93 90 03 	sts	0x0390, r25
    3f32:	a0 93 91 03 	sts	0x0391, r26
    3f36:	b0 93 92 03 	sts	0x0392, r27
	yPos = 0;
    3f3a:	80 93 93 03 	sts	0x0393, r24
    3f3e:	90 93 94 03 	sts	0x0394, r25
    3f42:	a0 93 95 03 	sts	0x0395, r26
    3f46:	b0 93 96 03 	sts	0x0396, r27
	rightDist = 0;
    3f4a:	80 93 9f 03 	sts	0x039F, r24
    3f4e:	90 93 a0 03 	sts	0x03A0, r25
    3f52:	a0 93 a1 03 	sts	0x03A1, r26
    3f56:	b0 93 a2 03 	sts	0x03A2, r27
	leftDist = 0;
    3f5a:	80 93 9b 03 	sts	0x039B, r24
    3f5e:	90 93 9c 03 	sts	0x039C, r25
    3f62:	a0 93 9d 03 	sts	0x039D, r26
    3f66:	b0 93 9e 03 	sts	0x039E, r27
}
    3f6a:	08 95       	ret

00003f6c <initPeripherals>:
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3f6c:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    3f6e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    3f70:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    3f72:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    3f76:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    3f7a:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    3f7e:	8e ef       	ldi	r24, 0xFE	; 254
    3f80:	9f e0       	ldi	r25, 0x0F	; 15
    3f82:	0e 94 1e 5e 	call	0xbc3c	; 0xbc3c <__eerd_word_m2560>
    3f86:	90 93 08 03 	sts	0x0308, r25
    3f8a:	80 93 07 03 	sts	0x0307, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    3f8e:	8d ef       	ldi	r24, 0xFD	; 253
    3f90:	9f e0       	ldi	r25, 0x0F	; 15
    3f92:	0e 94 16 5e 	call	0xbc2c	; 0xbc2c <__eerd_byte_m2560>
    3f96:	98 2f       	mov	r25, r24
    3f98:	80 93 5f 04 	sts	0x045F, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    3f9c:	81 50       	subi	r24, 0x01	; 1
    3f9e:	8e 3f       	cpi	r24, 0xFE	; 254
    3fa0:	90 f5       	brcc	.+100    	; 0x4006 <initPeripherals+0x9a>
		OSCCAL = currentOsccal;
    3fa2:	90 93 66 00 	sts	0x0066, r25
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    3fa6:	20 91 07 03 	lds	r18, 0x0307
    3faa:	30 91 08 03 	lds	r19, 0x0308
    3fae:	c9 01       	movw	r24, r18
    3fb0:	81 58       	subi	r24, 0x81	; 129
    3fb2:	9c 40       	sbci	r25, 0x0C	; 12
    3fb4:	03 97       	sbiw	r24, 0x03	; 3
    3fb6:	10 f4       	brcc	.+4      	; 0x3fbc <initPeripherals+0x50>
		hardwareRevision = HW_REV_3_0;
    3fb8:	10 92 63 03 	sts	0x0363, r1
	}

	if(rfAddress == 3200) {
    3fbc:	8c e0       	ldi	r24, 0x0C	; 12
    3fbe:	20 38       	cpi	r18, 0x80	; 128
    3fc0:	38 07       	cpc	r19, r24
    3fc2:	51 f1       	breq	.+84     	; 0x4018 <initPeripherals+0xac>
		hardwareRevision = HW_REV_3_0_1;
	}

	if(rfAddress > 3203) {
    3fc4:	24 58       	subi	r18, 0x84	; 132
    3fc6:	3c 40       	sbci	r19, 0x0C	; 12
    3fc8:	18 f0       	brcs	.+6      	; 0x3fd0 <initPeripherals+0x64>
		hardwareRevision = HW_REV_3_1;
    3fca:	82 e0       	ldi	r24, 0x02	; 2
    3fcc:	80 93 63 03 	sts	0x0363, r24
	}

	initCalibration();
    3fd0:	0e 94 2f 40 	call	0x805e	; 0x805e <initCalibration>
	initPortsIO();
    3fd4:	99 dd       	rcall	.-1230   	; 0x3b08 <initPortsIO>
	initAdc();
    3fd6:	8c d0       	rcall	.+280    	; 0x40f0 <initAdc>
	initMotors();
    3fd8:	e5 d6       	rcall	.+3530   	; 0x4da4 <initMotors>
	initRGBleds();
    3fda:	0e 94 01 44 	call	0x8802	; 0x8802 <initRGBleds>
	initSPI();
    3fde:	0e 94 25 12 	call	0x244a	; 0x244a <initSPI>
	mirf_init();
    3fe2:	0e 94 21 13 	call	0x2642	; 0x2642 <mirf_init>
	if(spiCommError==0) {
    3fe6:	80 91 0a 03 	lds	r24, 0x030A
    3fea:	88 23       	and	r24, r24
    3fec:	29 f4       	brne	.+10     	; 0x3ff8 <initPeripherals+0x8c>
		rfFlags |= 1;
    3fee:	80 91 09 03 	lds	r24, 0x0309
    3ff2:	81 60       	ori	r24, 0x01	; 1
    3ff4:	80 93 09 03 	sts	0x0309, r24
	}
	initUsart0();
    3ff8:	75 de       	rcall	.-790    	; 0x3ce4 <initUsart0>
	initAccelerometer();
    3ffa:	0e 94 99 4d 	call	0x9b32	; 0x9b32 <initAccelerometer>
	init_ir_remote_control();
    3ffe:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <init_ir_remote_control>

	sei();			// enable global interrupts
    4002:	78 94       	sei

	
}
    4004:	08 95       	ret
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    4006:	60 91 66 00 	lds	r22, 0x0066
    400a:	60 93 5f 04 	sts	0x045F, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    400e:	8d ef       	ldi	r24, 0xFD	; 253
    4010:	9f e0       	ldi	r25, 0x0F	; 15
    4012:	0e 94 48 5e 	call	0xbc90	; 0xbc90 <__eewr_byte_m2560>
    4016:	c7 cf       	rjmp	.-114    	; 0x3fa6 <initPeripherals+0x3a>
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
		hardwareRevision = HW_REV_3_0_1;
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	80 93 63 03 	sts	0x0363, r24
    401e:	d8 cf       	rjmp	.-80     	; 0x3fd0 <initPeripherals+0x64>

00004020 <sleep>:
// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {

}

void sleep(unsigned char seconds) {
    4020:	cf 93       	push	r28
    4022:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    4024:	9e e1       	ldi	r25, 0x1E	; 30
    4026:	89 9f       	mul	r24, r25
    4028:	e0 01       	movw	r28, r0
    402a:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    402c:	80 91 68 00 	lds	r24, 0x0068
    4030:	8d 7f       	andi	r24, 0xFD	; 253
    4032:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    4036:	80 91 6c 00 	lds	r24, 0x006C
    403a:	8f 77       	andi	r24, 0x7F	; 127
    403c:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    4040:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    4042:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    4046:	80 91 7a 00 	lds	r24, 0x007A
    404a:	80 61       	ori	r24, 0x10	; 16
    404c:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    4050:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    4054:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    4058:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    405c:	88 b3       	in	r24, 0x18	; 24
    405e:	87 60       	ori	r24, 0x07	; 7
    4060:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    4062:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    4066:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    406a:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    406e:	89 b3       	in	r24, 0x19	; 25
    4070:	87 60       	ori	r24, 0x07	; 7
    4072:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    4074:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    4078:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    407c:	48 de       	rcall	.-880    	; 0x3d0e <closeUsart>
	closeSPI();
    407e:	0e 94 31 12 	call	0x2462	; 0x2462 <closeSPI>
	i2c_close();
    4082:	a9 dd       	rcall	.-1198   	; 0x3bd6 <i2c_close>

	// set port pins
	initPortsIO();
    4084:	41 dd       	rcall	.-1406   	; 0x3b08 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    4086:	83 b7       	in	r24, 0x33	; 51
    4088:	8f 60       	ori	r24, 0x0F	; 15
    408a:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    4092:	80 91 b0 00 	lds	r24, 0x00B0
    4096:	8d 7f       	andi	r24, 0xFD	; 253
    4098:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    409c:	80 91 b1 00 	lds	r24, 0x00B1
    40a0:	87 60       	ori	r24, 0x07	; 7
    40a2:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    40a6:	20 97       	sbiw	r28, 0x00	; 0
    40a8:	19 f0       	breq	.+6      	; 0x40b0 <sleep+0x90>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    40aa:	88 95       	sleep
		pause--;
    40ac:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    40ae:	e9 f7       	brne	.-6      	; 0x40aa <sleep+0x8a>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    40b0:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    40b2:	80 91 b1 00 	lds	r24, 0x00B1
    40b6:	88 7f       	andi	r24, 0xF8	; 248
    40b8:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    40bc:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    40c0:	80 91 b0 00 	lds	r24, 0x00B0
    40c4:	82 60       	ori	r24, 0x02	; 2
    40c6:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    40ca:	8f ef       	ldi	r24, 0xFF	; 255
    40cc:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    40d0:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    40d4:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    40d8:	10 92 e8 02 	sts	0x02E8, r1
    40dc:	10 92 e7 02 	sts	0x02E7, r1
	pwm_left = 0;
    40e0:	10 92 ea 02 	sts	0x02EA, r1
    40e4:	10 92 e9 02 	sts	0x02E9, r1
	initPeripherals();
    40e8:	41 df       	rcall	.-382    	; 0x3f6c <initPeripherals>

}
    40ea:	df 91       	pop	r29
    40ec:	cf 91       	pop	r28
    40ee:	08 95       	ret

000040f0 <initAdc>:
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    40f0:	ea e7       	ldi	r30, 0x7A	; 122
    40f2:	f0 e0       	ldi	r31, 0x00	; 0
    40f4:	10 82       	st	Z, r1
	ADCSRB = 0;
    40f6:	2b e7       	ldi	r18, 0x7B	; 123
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	d9 01       	movw	r26, r18
    40fc:	1c 92       	st	X, r1
	ADMUX = 0;
    40fe:	ac e7       	ldi	r26, 0x7C	; 124
    4100:	b0 e0       	ldi	r27, 0x00	; 0
    4102:	1c 92       	st	X, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    4104:	80 81       	ld	r24, Z
    4106:	86 60       	ori	r24, 0x06	; 6
    4108:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    410a:	8c 91       	ld	r24, X
    410c:	80 64       	ori	r24, 0x40	; 64
    410e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    4110:	80 81       	ld	r24, Z
    4112:	80 62       	ori	r24, 0x20	; 32
    4114:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    4116:	d9 01       	movw	r26, r18
    4118:	8c 91       	ld	r24, X
    411a:	88 7f       	andi	r24, 0xF8	; 248
    411c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    411e:	80 81       	ld	r24, Z
    4120:	88 60       	ori	r24, 0x08	; 8
    4122:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    4124:	80 81       	ld	r24, Z
    4126:	80 68       	ori	r24, 0x80	; 128
    4128:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    412a:	80 81       	ld	r24, Z
    412c:	80 64       	ori	r24, 0x40	; 64
    412e:	80 83       	st	Z, r24

}
    4130:	08 95       	ret

00004132 <__vector_29>:

ISR(ADC_vect) {
    4132:	1f 92       	push	r1
    4134:	0f 92       	push	r0
    4136:	0f b6       	in	r0, 0x3f	; 63
    4138:	0f 92       	push	r0
    413a:	0b b6       	in	r0, 0x3b	; 59
    413c:	0f 92       	push	r0
    413e:	11 24       	eor	r1, r1
    4140:	1f 93       	push	r17
    4142:	2f 93       	push	r18
    4144:	3f 93       	push	r19
    4146:	4f 93       	push	r20
    4148:	5f 93       	push	r21
    414a:	6f 93       	push	r22
    414c:	7f 93       	push	r23
    414e:	8f 93       	push	r24
    4150:	9f 93       	push	r25
    4152:	af 93       	push	r26
    4154:	bf 93       	push	r27
    4156:	ef 93       	push	r30
    4158:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
    415a:	80 91 5c 03 	lds	r24, 0x035C
    415e:	90 91 5d 03 	lds	r25, 0x035D
    4162:	a0 91 5e 03 	lds	r26, 0x035E
    4166:	b0 91 5f 03 	lds	r27, 0x035F
    416a:	8f 3f       	cpi	r24, 0xFF	; 255
    416c:	2f ef       	ldi	r18, 0xFF	; 255
    416e:	92 07       	cpc	r25, r18
    4170:	2f ef       	ldi	r18, 0xFF	; 255
    4172:	a2 07       	cpc	r26, r18
    4174:	2f ef       	ldi	r18, 0xFF	; 255
    4176:	b2 07       	cpc	r27, r18
    4178:	09 f4       	brne	.+2      	; 0x417c <__vector_29+0x4a>
    417a:	b9 c0       	rjmp	.+370    	; 0x42ee <__vector_29+0x1bc>
		clockTick = 0;
	} else {
		clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    417c:	01 96       	adiw	r24, 0x01	; 1
    417e:	a1 1d       	adc	r26, r1
    4180:	b1 1d       	adc	r27, r1
    4182:	80 93 5c 03 	sts	0x035C, r24
    4186:	90 93 5d 03 	sts	0x035D, r25
    418a:	a0 93 5e 03 	sts	0x035E, r26
    418e:	b0 93 5f 03 	sts	0x035F, r27
	}								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    4192:	80 91 78 00 	lds	r24, 0x0078
    4196:	48 2f       	mov	r20, r24
    4198:	50 e0       	ldi	r21, 0x00	; 0
	value = (ADCH<<8) | value;
    419a:	20 91 79 00 	lds	r18, 0x0079
    419e:	92 2f       	mov	r25, r18
    41a0:	80 e0       	ldi	r24, 0x00	; 0
    41a2:	48 2b       	or	r20, r24
    41a4:	59 2b       	or	r21, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    41a6:	80 91 b7 02 	lds	r24, 0x02B7
    41aa:	82 30       	cpi	r24, 0x02	; 2
    41ac:	09 f4       	brne	.+2      	; 0x41b0 <__vector_29+0x7e>
    41ae:	bd c1       	rjmp	.+890    	; 0x452a <__vector_29+0x3f8>
    41b0:	83 30       	cpi	r24, 0x03	; 3
    41b2:	08 f4       	brcc	.+2      	; 0x41b6 <__vector_29+0x84>
    41b4:	4c c0       	rjmp	.+152    	; 0x424e <__vector_29+0x11c>
    41b6:	84 30       	cpi	r24, 0x04	; 4
    41b8:	09 f4       	brne	.+2      	; 0x41bc <__vector_29+0x8a>
    41ba:	e0 c1       	rjmp	.+960    	; 0x457c <__vector_29+0x44a>
    41bc:	84 30       	cpi	r24, 0x04	; 4
    41be:	08 f0       	brcs	.+2      	; 0x41c2 <__vector_29+0x90>
    41c0:	2f c1       	rjmp	.+606    	; 0x4420 <__vector_29+0x2ee>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    41c2:	80 91 d7 02 	lds	r24, 0x02D7
    41c6:	90 91 d8 02 	lds	r25, 0x02D8
    41ca:	48 0f       	add	r20, r24
    41cc:	59 1f       	adc	r21, r25
			left_current_avg = left_current_avg >> 1;
    41ce:	56 95       	lsr	r21
    41d0:	47 95       	ror	r20
    41d2:	50 93 d8 02 	sts	0x02D8, r21
    41d6:	40 93 d7 02 	sts	0x02D7, r20
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    41da:	90 91 d5 03 	lds	r25, 0x03D5
    41de:	92 30       	cpi	r25, 0x02	; 2
    41e0:	09 f0       	breq	.+2      	; 0x41e4 <__vector_29+0xb2>
    41e2:	4b c0       	rjmp	.+150    	; 0x427a <__vector_29+0x148>
		switch(irCommAdcTxState) {
    41e4:	80 91 22 04 	lds	r24, 0x0422
    41e8:	81 30       	cpi	r24, 0x01	; 1
    41ea:	09 f4       	brne	.+2      	; 0x41ee <__vector_29+0xbc>
    41ec:	7b c2       	rjmp	.+1270   	; 0x46e4 <__vector_29+0x5b2>
    41ee:	81 30       	cpi	r24, 0x01	; 1
    41f0:	08 f0       	brcs	.+2      	; 0x41f4 <__vector_29+0xc2>
    41f2:	f1 c1       	rjmp	.+994    	; 0x45d6 <__vector_29+0x4a4>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    41f4:	80 91 24 04 	lds	r24, 0x0424
    41f8:	81 30       	cpi	r24, 0x01	; 1
    41fa:	09 f4       	brne	.+2      	; 0x41fe <__vector_29+0xcc>
    41fc:	07 c3       	rjmp	.+1550   	; 0x480c <__vector_29+0x6da>
    41fe:	90 91 b8 02 	lds	r25, 0x02B8
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    4202:	80 91 21 02 	lds	r24, 0x0221
    4206:	88 30       	cpi	r24, 0x08	; 8
    4208:	08 f0       	brcs	.+2      	; 0x420c <__vector_29+0xda>
    420a:	50 c1       	rjmp	.+672    	; 0x44ac <__vector_29+0x37a>
		ADCSRB &= ~(1 << MUX5);
    420c:	80 91 7b 00 	lds	r24, 0x007B
    4210:	87 7f       	andi	r24, 0xF7	; 247
    4212:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + currentAdChannel;
    4216:	80 91 21 02 	lds	r24, 0x0221
    421a:	80 5c       	subi	r24, 0xC0	; 192
    421c:	80 93 7c 00 	sts	0x007C, r24
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    4220:	92 30       	cpi	r25, 0x02	; 2
    4222:	09 f4       	brne	.+2      	; 0x4226 <__vector_29+0xf4>
    4224:	50 c1       	rjmp	.+672    	; 0x44c6 <__vector_29+0x394>

	}

	//LED_BLUE_OFF;

}
    4226:	ff 91       	pop	r31
    4228:	ef 91       	pop	r30
    422a:	bf 91       	pop	r27
    422c:	af 91       	pop	r26
    422e:	9f 91       	pop	r25
    4230:	8f 91       	pop	r24
    4232:	7f 91       	pop	r23
    4234:	6f 91       	pop	r22
    4236:	5f 91       	pop	r21
    4238:	4f 91       	pop	r20
    423a:	3f 91       	pop	r19
    423c:	2f 91       	pop	r18
    423e:	1f 91       	pop	r17
    4240:	0f 90       	pop	r0
    4242:	0b be       	out	0x3b, r0	; 59
    4244:	0f 90       	pop	r0
    4246:	0f be       	out	0x3f, r0	; 63
    4248:	0f 90       	pop	r0
    424a:	1f 90       	pop	r1
    424c:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    424e:	88 23       	and	r24, r24
    4250:	09 f4       	brne	.+2      	; 0x4254 <__vector_29+0x122>
    4252:	56 c0       	rjmp	.+172    	; 0x4300 <__vector_29+0x1ce>
    4254:	81 30       	cpi	r24, 0x01	; 1
    4256:	61 f4       	brne	.+24     	; 0x4270 <__vector_29+0x13e>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    4258:	80 91 d9 02 	lds	r24, 0x02D9
    425c:	90 91 da 02 	lds	r25, 0x02DA
    4260:	48 0f       	add	r20, r24
    4262:	59 1f       	adc	r21, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    4264:	56 95       	lsr	r21
    4266:	47 95       	ror	r20
    4268:	50 93 da 02 	sts	0x02DA, r21
    426c:	40 93 d9 02 	sts	0x02D9, r20
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    4270:	90 91 d5 03 	lds	r25, 0x03D5
    4274:	92 30       	cpi	r25, 0x02	; 2
    4276:	09 f4       	brne	.+2      	; 0x427a <__vector_29+0x148>
    4278:	b5 cf       	rjmp	.-150    	; 0x41e4 <__vector_29+0xb2>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    427a:	91 30       	cpi	r25, 0x01	; 1
    427c:	09 f4       	brne	.+2      	; 0x4280 <__vector_29+0x14e>
    427e:	34 c1       	rjmp	.+616    	; 0x44e8 <__vector_29+0x3b6>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    4280:	99 23       	and	r25, r25
    4282:	09 f0       	breq	.+2      	; 0x4286 <__vector_29+0x154>
    4284:	bc cf       	rjmp	.-136    	; 0x41fe <__vector_29+0xcc>
		switch(adcSamplingState) {
    4286:	90 91 b8 02 	lds	r25, 0x02B8
    428a:	92 30       	cpi	r25, 0x02	; 2
    428c:	09 f4       	brne	.+2      	; 0x4290 <__vector_29+0x15e>
    428e:	32 c3       	rjmp	.+1636   	; 0x48f4 <__vector_29+0x7c2>
    4290:	93 30       	cpi	r25, 0x03	; 3
    4292:	08 f0       	brcs	.+2      	; 0x4296 <__vector_29+0x164>
    4294:	d5 c1       	rjmp	.+938    	; 0x4640 <__vector_29+0x50e>
    4296:	99 23       	and	r25, r25
    4298:	09 f4       	brne	.+2      	; 0x429c <__vector_29+0x16a>
    429a:	71 c2       	rjmp	.+1250   	; 0x477e <__vector_29+0x64c>
    429c:	91 30       	cpi	r25, 0x01	; 1
    429e:	09 f0       	breq	.+2      	; 0x42a2 <__vector_29+0x170>
    42a0:	b0 cf       	rjmp	.-160    	; 0x4202 <__vector_29+0xd0>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    42a2:	80 91 23 02 	lds	r24, 0x0223
    42a6:	80 93 21 02 	sts	0x0221, r24
				leftChannelPhase = leftMotorPhase;
    42aa:	80 91 26 02 	lds	r24, 0x0226
    42ae:	80 93 ba 02 	sts	0x02BA, r24
				adcSaveDataTo = SAVE_TO_PROX;
    42b2:	10 92 b7 02 	sts	0x02B7, r1
				adcSamplingState = 2;
    42b6:	82 e0       	ldi	r24, 0x02	; 2
    42b8:	80 93 b8 02 	sts	0x02B8, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    42bc:	10 91 d3 03 	lds	r17, 0x03D3
    42c0:	11 30       	cpi	r17, 0x01	; 1
    42c2:	09 f4       	brne	.+2      	; 0x42c6 <__vector_29+0x194>
    42c4:	10 c4       	rjmp	.+2080   	; 0x4ae6 <__vector_29+0x9b4>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    42c6:	12 30       	cpi	r17, 0x02	; 2
    42c8:	09 f0       	breq	.+2      	; 0x42cc <__vector_29+0x19a>
    42ca:	99 cf       	rjmp	.-206    	; 0x41fe <__vector_29+0xcc>
    42cc:	80 91 22 02 	lds	r24, 0x0222
    42d0:	87 31       	cpi	r24, 0x17	; 23
    42d2:	09 f0       	breq	.+2      	; 0x42d6 <__vector_29+0x1a4>
    42d4:	94 cf       	rjmp	.-216    	; 0x41fe <__vector_29+0xcc>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    42d6:	10 93 d5 03 	sts	0x03D5, r17
					if(irCommTxByteEnqueued==1) {
    42da:	80 91 24 04 	lds	r24, 0x0424
    42de:	81 30       	cpi	r24, 0x01	; 1
    42e0:	09 f4       	brne	.+2      	; 0x42e4 <__vector_29+0x1b2>
    42e2:	94 c2       	rjmp	.+1320   	; 0x480c <__vector_29+0x6da>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    42e4:	10 92 d5 03 	sts	0x03D5, r1
    42e8:	90 91 b8 02 	lds	r25, 0x02B8
    42ec:	8a cf       	rjmp	.-236    	; 0x4202 <__vector_29+0xd0>


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
		clockTick = 0;
    42ee:	10 92 5c 03 	sts	0x035C, r1
    42f2:	10 92 5d 03 	sts	0x035D, r1
    42f6:	10 92 5e 03 	sts	0x035E, r1
    42fa:	10 92 5f 03 	sts	0x035F, r1
    42fe:	49 cf       	rjmp	.-366    	; 0x4192 <__vector_29+0x60>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    4300:	60 91 22 02 	lds	r22, 0x0222
    4304:	6e 30       	cpi	r22, 0x0E	; 14
    4306:	09 f4       	brne	.+2      	; 0x430a <__vector_29+0x1d8>
    4308:	d1 c2       	rjmp	.+1442   	; 0x48ac <__vector_29+0x77a>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    430a:	e6 2f       	mov	r30, r22
    430c:	f0 e0       	ldi	r31, 0x00	; 0
    430e:	df 01       	movw	r26, r30
    4310:	aa 0f       	add	r26, r26
    4312:	bb 1f       	adc	r27, r27
    4314:	a9 5d       	subi	r26, 0xD9	; 217
    4316:	bd 4f       	sbci	r27, 0xFD	; 253
    4318:	11 96       	adiw	r26, 0x01	; 1
    431a:	5c 93       	st	X, r21
    431c:	4e 93       	st	-X, r20
			}

			if(currentProx & 0x01) {
    431e:	60 ff       	sbrs	r22, 0
    4320:	72 c0       	rjmp	.+228    	; 0x4406 <__vector_29+0x2d4>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    4322:	ee 0f       	add	r30, r30
    4324:	ff 1f       	adc	r31, r31
    4326:	eb 5d       	subi	r30, 0xDB	; 219
    4328:	fd 4f       	sbci	r31, 0xFD	; 253
    432a:	40 81       	ld	r20, Z
    432c:	51 81       	ldd	r21, Z+1	; 0x01
    432e:	2d 91       	ld	r18, X+
    4330:	3c 91       	ld	r19, X
    4332:	86 2f       	mov	r24, r22
    4334:	86 95       	lsr	r24
    4336:	a8 2f       	mov	r26, r24
    4338:	b0 e0       	ldi	r27, 0x00	; 0
    433a:	42 1b       	sub	r20, r18
    433c:	53 0b       	sbc	r21, r19
    433e:	aa 0f       	add	r26, r26
    4340:	bb 1f       	adc	r27, r27
    4342:	fd 01       	movw	r30, r26
    4344:	e1 59       	subi	r30, 0x91	; 145
    4346:	fd 4f       	sbci	r31, 0xFD	; 253
    4348:	80 81       	ld	r24, Z
    434a:	91 81       	ldd	r25, Z+1	; 0x01
    434c:	48 1b       	sub	r20, r24
    434e:	59 0b       	sbc	r21, r25
    4350:	fd 01       	movw	r30, r26
    4352:	e9 5a       	subi	r30, 0xA9	; 169
    4354:	fd 4f       	sbci	r31, 0xFD	; 253
    4356:	51 83       	std	Z+1, r21	; 0x01
    4358:	40 83       	st	Z, r20
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    435a:	57 fd       	sbrc	r21, 7
    435c:	e8 c2       	rjmp	.+1488   	; 0x492e <__vector_29+0x7fc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    435e:	41 50       	subi	r20, 0x01	; 1
    4360:	54 40       	sbci	r21, 0x04	; 4
    4362:	24 f0       	brlt	.+8      	; 0x436c <__vector_29+0x23a>
					proximityResult[currentProx>>1] = 1024;
    4364:	80 e0       	ldi	r24, 0x00	; 0
    4366:	94 e0       	ldi	r25, 0x04	; 4
    4368:	91 83       	std	Z+1, r25	; 0x01
    436a:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    436c:	60 31       	cpi	r22, 0x10	; 16
    436e:	70 f4       	brcc	.+28     	; 0x438c <__vector_29+0x25a>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    4370:	fd 01       	movw	r30, r26
    4372:	e9 5a       	subi	r30, 0xA9	; 169
    4374:	fd 4f       	sbci	r31, 0xFD	; 253
    4376:	01 90       	ld	r0, Z+
    4378:	f0 81       	ld	r31, Z
    437a:	e0 2d       	mov	r30, r0
    437c:	ec 33       	cpi	r30, 0x3C	; 60
    437e:	f1 05       	cpc	r31, r1
    4380:	0c f0       	brlt	.+2      	; 0x4384 <__vector_29+0x252>
    4382:	f4 c2       	rjmp	.+1512   	; 0x496c <__vector_29+0x83a>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    4384:	a1 54       	subi	r26, 0x41	; 65
    4386:	bd 4f       	sbci	r27, 0xFD	; 253
    4388:	ed 93       	st	X+, r30
    438a:	fc 93       	st	X, r31
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    438c:	80 91 85 03 	lds	r24, 0x0385
    4390:	88 23       	and	r24, r24
    4392:	09 f4       	brne	.+2      	; 0x4396 <__vector_29+0x264>
    4394:	06 c2       	rjmp	.+1036   	; 0x47a2 <__vector_29+0x670>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    4396:	80 91 67 02 	lds	r24, 0x0267
    439a:	90 91 68 02 	lds	r25, 0x0268
    439e:	84 5a       	subi	r24, 0xA4	; 164
    43a0:	91 40       	sbci	r25, 0x01	; 1
    43a2:	b4 f0       	brlt	.+44     	; 0x43d0 <__vector_29+0x29e>
    43a4:	80 91 69 02 	lds	r24, 0x0269
    43a8:	90 91 6a 02 	lds	r25, 0x026A
    43ac:	84 5a       	subi	r24, 0xA4	; 164
    43ae:	91 40       	sbci	r25, 0x01	; 1
    43b0:	7c f0       	brlt	.+30     	; 0x43d0 <__vector_29+0x29e>
    43b2:	80 91 6b 02 	lds	r24, 0x026B
    43b6:	90 91 6c 02 	lds	r25, 0x026C
    43ba:	84 5a       	subi	r24, 0xA4	; 164
    43bc:	91 40       	sbci	r25, 0x01	; 1
    43be:	44 f0       	brlt	.+16     	; 0x43d0 <__vector_29+0x29e>
    43c0:	80 91 6d 02 	lds	r24, 0x026D
    43c4:	90 91 6e 02 	lds	r25, 0x026E
    43c8:	84 5a       	subi	r24, 0xA4	; 164
    43ca:	91 40       	sbci	r25, 0x01	; 1
    43cc:	0c f0       	brlt	.+2      	; 0x43d0 <__vector_29+0x29e>
    43ce:	e9 c1       	rjmp	.+978    	; 0x47a2 <__vector_29+0x670>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    43d0:	81 e0       	ldi	r24, 0x01	; 1
    43d2:	80 93 86 03 	sts	0x0386, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    43d6:	10 92 ea 02 	sts	0x02EA, r1
    43da:	10 92 e9 02 	sts	0x02E9, r1
						OCR4A = 0;
    43de:	10 92 a9 00 	sts	0x00A9, r1
    43e2:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    43e6:	10 92 ab 00 	sts	0x00AB, r1
    43ea:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    43ee:	10 92 e8 02 	sts	0x02E8, r1
    43f2:	10 92 e7 02 	sts	0x02E7, r1
						OCR3A = 0;
    43f6:	10 92 99 00 	sts	0x0099, r1
    43fa:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    43fe:	10 92 9b 00 	sts	0x009B, r1
    4402:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    4406:	86 2f       	mov	r24, r22
    4408:	8f 5f       	subi	r24, 0xFF	; 255
    440a:	80 93 22 02 	sts	0x0222, r24
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    440e:	88 31       	cpi	r24, 0x18	; 24
    4410:	08 f4       	brcc	.+2      	; 0x4414 <__vector_29+0x2e2>
    4412:	2e cf       	rjmp	.-420    	; 0x4270 <__vector_29+0x13e>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    4414:	10 92 22 02 	sts	0x0222, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    4418:	81 e0       	ldi	r24, 0x01	; 1
    441a:	80 93 be 02 	sts	0x02BE, r24
    441e:	28 cf       	rjmp	.-432    	; 0x4270 <__vector_29+0x13e>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    4420:	86 30       	cpi	r24, 0x06	; 6
    4422:	09 f0       	breq	.+2      	; 0x4426 <__vector_29+0x2f4>
    4424:	25 cf       	rjmp	.-438    	; 0x4270 <__vector_29+0x13e>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    4426:	80 91 01 04 	lds	r24, 0x0401
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	20 91 22 02 	lds	r18, 0x0222
    4430:	88 0f       	add	r24, r24
    4432:	99 1f       	adc	r25, r25
    4434:	88 0f       	add	r24, r24
    4436:	99 1f       	adc	r25, r25
    4438:	88 0f       	add	r24, r24
    443a:	99 1f       	adc	r25, r25
    443c:	82 0f       	add	r24, r18
    443e:	91 1d       	adc	r25, r1
    4440:	88 0f       	add	r24, r24
    4442:	99 1f       	adc	r25, r25
    4444:	e0 91 77 07 	lds	r30, 0x0777
    4448:	f0 91 78 07 	lds	r31, 0x0778
    444c:	e8 0f       	add	r30, r24
    444e:	f9 1f       	adc	r31, r25
    4450:	51 83       	std	Z+1, r21	; 0x01
    4452:	40 83       	st	Z, r20
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    4454:	20 91 22 02 	lds	r18, 0x0222
    4458:	82 2f       	mov	r24, r18
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	88 0f       	add	r24, r24
    445e:	99 1f       	adc	r25, r25
    4460:	e0 91 45 0a 	lds	r30, 0x0A45
    4464:	f0 91 46 0a 	lds	r31, 0x0A46
    4468:	e8 0f       	add	r30, r24
    446a:	f9 1f       	adc	r31, r25
    446c:	80 81       	ld	r24, Z
    446e:	91 81       	ldd	r25, Z+1	; 0x01
    4470:	84 17       	cp	r24, r20
    4472:	95 07       	cpc	r25, r21
    4474:	20 f4       	brcc	.+8      	; 0x447e <__vector_29+0x34c>
				irCommMaxSensorValueAdc[currentProx] = value;
    4476:	51 83       	std	Z+1, r21	; 0x01
    4478:	40 83       	st	Z, r20
    447a:	20 91 22 02 	lds	r18, 0x0222
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    447e:	82 2f       	mov	r24, r18
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	88 0f       	add	r24, r24
    4484:	99 1f       	adc	r25, r25
    4486:	e0 91 d5 04 	lds	r30, 0x04D5
    448a:	f0 91 d6 04 	lds	r31, 0x04D6
    448e:	e8 0f       	add	r30, r24
    4490:	f9 1f       	adc	r31, r25
    4492:	80 81       	ld	r24, Z
    4494:	91 81       	ldd	r25, Z+1	; 0x01
    4496:	48 17       	cp	r20, r24
    4498:	59 07       	cpc	r21, r25
    449a:	20 f4       	brcc	.+8      	; 0x44a4 <__vector_29+0x372>
				irCommMinSensorValueAdc[currentProx] = value;
    449c:	51 83       	std	Z+1, r21	; 0x01
    449e:	40 83       	st	Z, r20
    44a0:	20 91 22 02 	lds	r18, 0x0222
			}
			currentProx++;
    44a4:	2f 5f       	subi	r18, 0xFF	; 255
    44a6:	20 93 22 02 	sts	0x0222, r18
    44aa:	e2 ce       	rjmp	.-572    	; 0x4270 <__vector_29+0x13e>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    44ac:	80 91 7b 00 	lds	r24, 0x007B
    44b0:	88 60       	ori	r24, 0x08	; 8
    44b2:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + (currentAdChannel-8);
    44b6:	80 91 21 02 	lds	r24, 0x0221
    44ba:	88 5c       	subi	r24, 0xC8	; 200
    44bc:	80 93 7c 00 	sts	0x007C, r24
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    44c0:	92 30       	cpi	r25, 0x02	; 2
    44c2:	09 f0       	breq	.+2      	; 0x44c6 <__vector_29+0x394>
    44c4:	b0 ce       	rjmp	.-672    	; 0x4226 <__vector_29+0xf4>
    44c6:	80 91 d5 03 	lds	r24, 0x03D5
    44ca:	88 23       	and	r24, r24
    44cc:	09 f0       	breq	.+2      	; 0x44d0 <__vector_29+0x39e>
    44ce:	ab ce       	rjmp	.-682    	; 0x4226 <__vector_29+0xf4>

		if(hardwareRevision == HW_REV_3_0) {
    44d0:	80 91 63 03 	lds	r24, 0x0363
    44d4:	88 23       	and	r24, r24
    44d6:	09 f0       	breq	.+2      	; 0x44da <__vector_29+0x3a8>
    44d8:	ab c0       	rjmp	.+342    	; 0x4630 <__vector_29+0x4fe>
			PORTJ &= 0xF0;
    44da:	80 91 05 01 	lds	r24, 0x0105
    44de:	80 7f       	andi	r24, 0xF0	; 240
    44e0:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    44e4:	12 b8       	out	0x02, r1	; 2
    44e6:	9f ce       	rjmp	.-706    	; 0x4226 <__vector_29+0xf4>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    44e8:	20 91 00 04 	lds	r18, 0x0400
    44ec:	26 30       	cpi	r18, 0x06	; 6
    44ee:	09 f4       	brne	.+2      	; 0x44f2 <__vector_29+0x3c0>
    44f0:	4e c2       	rjmp	.+1180   	; 0x498e <__vector_29+0x85c>
    44f2:	27 30       	cpi	r18, 0x07	; 7
    44f4:	08 f0       	brcs	.+2      	; 0x44f8 <__vector_29+0x3c6>
    44f6:	d4 c0       	rjmp	.+424    	; 0x46a0 <__vector_29+0x56e>
    44f8:	22 30       	cpi	r18, 0x02	; 2
    44fa:	09 f4       	brne	.+2      	; 0x44fe <__vector_29+0x3cc>
    44fc:	55 c2       	rjmp	.+1194   	; 0x49a8 <__vector_29+0x876>
    44fe:	23 30       	cpi	r18, 0x03	; 3
    4500:	08 f4       	brcc	.+2      	; 0x4504 <__vector_29+0x3d2>
    4502:	70 c1       	rjmp	.+736    	; 0x47e4 <__vector_29+0x6b2>
    4504:	24 30       	cpi	r18, 0x04	; 4
    4506:	09 f4       	brne	.+2      	; 0x450a <__vector_29+0x3d8>
    4508:	d5 c2       	rjmp	.+1450   	; 0x4ab4 <__vector_29+0x982>
    450a:	25 30       	cpi	r18, 0x05	; 5
    450c:	08 f4       	brcc	.+2      	; 0x4510 <__vector_29+0x3de>
    450e:	c4 c2       	rjmp	.+1416   	; 0x4a98 <__vector_29+0x966>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    4510:	80 91 22 02 	lds	r24, 0x0222
    4514:	8f 5f       	subi	r24, 0xFF	; 255
    4516:	80 93 21 02 	sts	0x0221, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    451a:	86 e0       	ldi	r24, 0x06	; 6
    451c:	80 93 b7 02 	sts	0x02B7, r24
				irCommAdcRxState = 6;
    4520:	80 93 00 04 	sts	0x0400, r24
    4524:	90 91 b8 02 	lds	r25, 0x02B8
    4528:	6c ce       	rjmp	.-808    	; 0x4202 <__vector_29+0xd0>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    452a:	80 91 09 02 	lds	r24, 0x0209
    452e:	88 23       	and	r24, r24
    4530:	09 f4       	brne	.+2      	; 0x4534 <__vector_29+0x402>
    4532:	9e ce       	rjmp	.-708    	; 0x4270 <__vector_29+0x13e>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    4534:	63 99       	sbic	0x0c, 3	; 12
    4536:	9c ce       	rjmp	.-712    	; 0x4270 <__vector_29+0x13e>
    4538:	64 99       	sbic	0x0c, 4	; 12
    453a:	9a ce       	rjmp	.-716    	; 0x4270 <__vector_29+0x13e>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    453c:	28 2f       	mov	r18, r24
    453e:	2f 5f       	subi	r18, 0xFF	; 255
    4540:	20 93 09 02 	sts	0x0209, r18
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    4544:	25 30       	cpi	r18, 0x05	; 5
    4546:	08 f4       	brcc	.+2      	; 0x454a <__vector_29+0x418>
    4548:	93 ce       	rjmp	.-730    	; 0x4270 <__vector_29+0x13e>
					if(pwm_right != 0) {
    454a:	80 91 e7 02 	lds	r24, 0x02E7
    454e:	90 91 e8 02 	lds	r25, 0x02E8
    4552:	89 2b       	or	r24, r25
    4554:	51 f0       	breq	.+20     	; 0x456a <__vector_29+0x438>
						right_vel_sum += value;
    4556:	80 91 e1 02 	lds	r24, 0x02E1
    455a:	90 91 e2 02 	lds	r25, 0x02E2
    455e:	84 0f       	add	r24, r20
    4560:	95 1f       	adc	r25, r21
    4562:	90 93 e2 02 	sts	0x02E2, r25
    4566:	80 93 e1 02 	sts	0x02E1, r24
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    456a:	28 30       	cpi	r18, 0x08	; 8
    456c:	09 f0       	breq	.+2      	; 0x4570 <__vector_29+0x43e>
    456e:	80 ce       	rjmp	.-768    	; 0x4270 <__vector_29+0x13e>
						firstSampleRight = 0;
    4570:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	80 93 08 02 	sts	0x0208, r24
    457a:	7a ce       	rjmp	.-780    	; 0x4270 <__vector_29+0x13e>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    457c:	90 91 0a 02 	lds	r25, 0x020A
    4580:	99 23       	and	r25, r25
    4582:	09 f4       	brne	.+2      	; 0x4586 <__vector_29+0x454>
    4584:	75 ce       	rjmp	.-790    	; 0x4270 <__vector_29+0x13e>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    4586:	80 91 00 01 	lds	r24, 0x0100
    458a:	83 fd       	sbrc	r24, 3
    458c:	71 ce       	rjmp	.-798    	; 0x4270 <__vector_29+0x13e>
    458e:	80 91 00 01 	lds	r24, 0x0100
    4592:	84 fd       	sbrc	r24, 4
    4594:	6d ce       	rjmp	.-806    	; 0x4270 <__vector_29+0x13e>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    4596:	29 2f       	mov	r18, r25
    4598:	2f 5f       	subi	r18, 0xFF	; 255
    459a:	20 93 0a 02 	sts	0x020A, r18
				if(firstSampleLeft > 4) {
    459e:	25 30       	cpi	r18, 0x05	; 5
    45a0:	08 f4       	brcc	.+2      	; 0x45a4 <__vector_29+0x472>
    45a2:	66 ce       	rjmp	.-820    	; 0x4270 <__vector_29+0x13e>
					if(pwm_left != 0) {
    45a4:	80 91 e9 02 	lds	r24, 0x02E9
    45a8:	90 91 ea 02 	lds	r25, 0x02EA
    45ac:	89 2b       	or	r24, r25
    45ae:	51 f0       	breq	.+20     	; 0x45c4 <__vector_29+0x492>
						left_vel_sum += value;
    45b0:	80 91 df 02 	lds	r24, 0x02DF
    45b4:	90 91 e0 02 	lds	r25, 0x02E0
    45b8:	84 0f       	add	r24, r20
    45ba:	95 1f       	adc	r25, r21
    45bc:	90 93 e0 02 	sts	0x02E0, r25
    45c0:	80 93 df 02 	sts	0x02DF, r24
					}
					if(firstSampleLeft==8) {
    45c4:	28 30       	cpi	r18, 0x08	; 8
    45c6:	09 f0       	breq	.+2      	; 0x45ca <__vector_29+0x498>
    45c8:	53 ce       	rjmp	.-858    	; 0x4270 <__vector_29+0x13e>
						firstSampleLeft = 0;
    45ca:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    45ce:	81 e0       	ldi	r24, 0x01	; 1
    45d0:	80 93 07 02 	sts	0x0207, r24
    45d4:	4d ce       	rjmp	.-870    	; 0x4270 <__vector_29+0x13e>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    45d6:	83 30       	cpi	r24, 0x03	; 3
    45d8:	09 f4       	brne	.+2      	; 0x45dc <__vector_29+0x4aa>
    45da:	ab c0       	rjmp	.+342    	; 0x4732 <__vector_29+0x600>
    45dc:	84 30       	cpi	r24, 0x04	; 4
    45de:	09 f0       	breq	.+2      	; 0x45e2 <__vector_29+0x4b0>
    45e0:	0e ce       	rjmp	.-996    	; 0x41fe <__vector_29+0xcc>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    45e2:	80 91 30 04 	lds	r24, 0x0430
    45e6:	8f 5f       	subi	r24, 0xFF	; 255
    45e8:	80 93 30 04 	sts	0x0430, r24
				if(irCommTxDurationCycle == irCommTxDuration) {
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	20 91 2c 04 	lds	r18, 0x042C
    45f2:	30 91 2d 04 	lds	r19, 0x042D
    45f6:	82 17       	cp	r24, r18
    45f8:	93 07       	cpc	r25, r19
    45fa:	09 f4       	brne	.+2      	; 0x45fe <__vector_29+0x4cc>
    45fc:	0c c1       	rjmp	.+536    	; 0x4816 <__vector_29+0x6e4>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    45fe:	80 91 23 02 	lds	r24, 0x0223
    4602:	80 93 21 02 	sts	0x0221, r24
				leftChannelPhase = leftMotorPhase;
    4606:	80 91 26 02 	lds	r24, 0x0226
    460a:	80 93 ba 02 	sts	0x02BA, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    460e:	80 91 b9 02 	lds	r24, 0x02B9
    4612:	88 23       	and	r24, r24
    4614:	09 f4       	brne	.+2      	; 0x4618 <__vector_29+0x4e6>
    4616:	d3 c0       	rjmp	.+422    	; 0x47be <__vector_29+0x68c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4618:	81 30       	cpi	r24, 0x01	; 1
    461a:	09 f4       	brne	.+2      	; 0x461e <__vector_29+0x4ec>
    461c:	c2 c2       	rjmp	.+1412   	; 0x4ba2 <__vector_29+0xa70>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    461e:	85 e0       	ldi	r24, 0x05	; 5
    4620:	80 93 b7 02 	sts	0x02B7, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    4624:	83 e0       	ldi	r24, 0x03	; 3
    4626:	80 93 22 04 	sts	0x0422, r24
    462a:	90 91 b8 02 	lds	r25, 0x02B8
    462e:	e9 cd       	rjmp	.-1070   	; 0x4202 <__vector_29+0xd0>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    4630:	81 30       	cpi	r24, 0x01	; 1
    4632:	09 f0       	breq	.+2      	; 0x4636 <__vector_29+0x504>
    4634:	73 c1       	rjmp	.+742    	; 0x491c <__vector_29+0x7ea>
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
			PORTJ = 0xFF;
    4636:	8f ef       	ldi	r24, 0xFF	; 255
    4638:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    463c:	12 b8       	out	0x02, r1	; 2
    463e:	f3 cd       	rjmp	.-1050   	; 0x4226 <__vector_29+0xf4>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    4640:	93 30       	cpi	r25, 0x03	; 3
    4642:	09 f4       	brne	.+2      	; 0x4646 <__vector_29+0x514>
    4644:	43 c1       	rjmp	.+646    	; 0x48cc <__vector_29+0x79a>
    4646:	94 30       	cpi	r25, 0x04	; 4
    4648:	09 f0       	breq	.+2      	; 0x464c <__vector_29+0x51a>
    464a:	db cd       	rjmp	.-1098   	; 0x4202 <__vector_29+0xd0>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    464c:	80 91 24 02 	lds	r24, 0x0224
    4650:	80 93 21 02 	sts	0x0221, r24
				rightChannelPhase = rightMotorPhase;
    4654:	80 91 25 02 	lds	r24, 0x0225
    4658:	80 93 b9 02 	sts	0x02B9, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    465c:	80 91 ba 02 	lds	r24, 0x02BA
    4660:	88 23       	and	r24, r24
    4662:	09 f0       	breq	.+2      	; 0x4666 <__vector_29+0x534>
    4664:	75 c1       	rjmp	.+746    	; 0x4950 <__vector_29+0x81e>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4666:	83 e0       	ldi	r24, 0x03	; 3
    4668:	80 93 b7 02 	sts	0x02B7, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    466c:	10 92 b8 02 	sts	0x02B8, r1

				if(currentProx==14 && measBattery==1) {
    4670:	20 91 22 02 	lds	r18, 0x0222
    4674:	2e 30       	cpi	r18, 0x0E	; 14
    4676:	09 f4       	brne	.+2      	; 0x467a <__vector_29+0x548>
    4678:	2b c2       	rjmp	.+1110   	; 0x4ad0 <__vector_29+0x99e>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    467a:	42 2f       	mov	r20, r18
    467c:	50 e0       	ldi	r21, 0x00	; 0
    467e:	20 ff       	sbrs	r18, 0
    4680:	be cd       	rjmp	.-1156   	; 0x41fe <__vector_29+0xcc>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    4682:	20 31       	cpi	r18, 0x10	; 16
    4684:	08 f0       	brcs	.+2      	; 0x4688 <__vector_29+0x556>
    4686:	58 c2       	rjmp	.+1200   	; 0x4b38 <__vector_29+0xa06>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    4688:	26 95       	lsr	r18
    468a:	81 e0       	ldi	r24, 0x01	; 1
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	02 c0       	rjmp	.+4      	; 0x4694 <__vector_29+0x562>
    4690:	88 0f       	add	r24, r24
    4692:	99 1f       	adc	r25, r25
    4694:	2a 95       	dec	r18
    4696:	e2 f7       	brpl	.-8      	; 0x4690 <__vector_29+0x55e>
    4698:	82 b9       	out	0x02, r24	; 2
    469a:	90 91 b8 02 	lds	r25, 0x02B8
    469e:	b1 cd       	rjmp	.-1182   	; 0x4202 <__vector_29+0xd0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    46a0:	29 30       	cpi	r18, 0x09	; 9
    46a2:	09 f4       	brne	.+2      	; 0x46a6 <__vector_29+0x574>
    46a4:	8f c1       	rjmp	.+798    	; 0x49c4 <__vector_29+0x892>
    46a6:	2a 30       	cpi	r18, 0x0A	; 10
    46a8:	08 f0       	brcs	.+2      	; 0x46ac <__vector_29+0x57a>
    46aa:	8d c0       	rjmp	.+282    	; 0x47c6 <__vector_29+0x694>
    46ac:	27 30       	cpi	r18, 0x07	; 7
    46ae:	09 f4       	brne	.+2      	; 0x46b2 <__vector_29+0x580>
    46b0:	e2 c1       	rjmp	.+964    	; 0x4a76 <__vector_29+0x944>
    46b2:	28 30       	cpi	r18, 0x08	; 8
    46b4:	09 f0       	breq	.+2      	; 0x46b8 <__vector_29+0x586>
    46b6:	a3 cd       	rjmp	.-1210   	; 0x41fe <__vector_29+0xcc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    46b8:	80 91 24 02 	lds	r24, 0x0224
    46bc:	80 93 21 02 	sts	0x0221, r24
				rightChannelPhase = rightMotorPhase;
    46c0:	80 91 25 02 	lds	r24, 0x0225
    46c4:	80 93 b9 02 	sts	0x02B9, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    46c8:	80 91 ba 02 	lds	r24, 0x02BA
    46cc:	88 23       	and	r24, r24
    46ce:	09 f0       	breq	.+2      	; 0x46d2 <__vector_29+0x5a0>
    46d0:	7e c2       	rjmp	.+1276   	; 0x4bce <__vector_29+0xa9c>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    46d2:	83 e0       	ldi	r24, 0x03	; 3
    46d4:	80 93 b7 02 	sts	0x02B7, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    46d8:	89 e0       	ldi	r24, 0x09	; 9
    46da:	80 93 00 04 	sts	0x0400, r24
    46de:	90 91 b8 02 	lds	r25, 0x02B8
    46e2:	8f cd       	rjmp	.-1250   	; 0x4202 <__vector_29+0xd0>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    46e4:	80 91 63 03 	lds	r24, 0x0363
    46e8:	88 23       	and	r24, r24
    46ea:	09 f4       	brne	.+2      	; 0x46ee <__vector_29+0x5bc>
    46ec:	5d c0       	rjmp	.+186    	; 0x47a8 <__vector_29+0x676>
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    46ee:	81 30       	cpi	r24, 0x01	; 1
    46f0:	09 f0       	breq	.+2      	; 0x46f4 <__vector_29+0x5c2>
    46f2:	1e c2       	rjmp	.+1084   	; 0x4b30 <__vector_29+0x9fe>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
    46f4:	8f ef       	ldi	r24, 0xFF	; 255
    46f6:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    46fa:	12 b8       	out	0x02, r1	; 2
				}
				currentAdChannel = currentMotLeftChannel;
    46fc:	80 91 23 02 	lds	r24, 0x0223
    4700:	80 93 21 02 	sts	0x0221, r24
				leftChannelPhase = leftMotorPhase;
    4704:	80 91 26 02 	lds	r24, 0x0226
    4708:	80 93 ba 02 	sts	0x02BA, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    470c:	85 e0       	ldi	r24, 0x05	; 5
    470e:	80 93 b7 02 	sts	0x02B7, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    4712:	80 93 d6 03 	sts	0x03D6, r24
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    4716:	82 e0       	ldi	r24, 0x02	; 2
    4718:	80 93 22 04 	sts	0x0422, r24
				if(irCommTxSensorGroup==0) {
    471c:	80 91 31 04 	lds	r24, 0x0431
    4720:	88 23       	and	r24, r24
    4722:	09 f0       	breq	.+2      	; 0x4726 <__vector_29+0x5f4>
    4724:	ff c0       	rjmp	.+510    	; 0x4924 <__vector_29+0x7f2>
					irCommTxSensorGroup = 1;
    4726:	81 e0       	ldi	r24, 0x01	; 1
    4728:	80 93 31 04 	sts	0x0431, r24
    472c:	90 91 b8 02 	lds	r25, 0x02B8
    4730:	68 cd       	rjmp	.-1328   	; 0x4202 <__vector_29+0xd0>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    4732:	80 91 30 04 	lds	r24, 0x0430
    4736:	8f 5f       	subi	r24, 0xFF	; 255
    4738:	80 93 30 04 	sts	0x0430, r24
				if(irCommTxDurationCycle == irCommTxDuration) {
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	20 91 2c 04 	lds	r18, 0x042C
    4742:	30 91 2d 04 	lds	r19, 0x042D
    4746:	82 17       	cp	r24, r18
    4748:	93 07       	cpc	r25, r19
    474a:	09 f4       	brne	.+2      	; 0x474e <__vector_29+0x61c>
    474c:	93 c0       	rjmp	.+294    	; 0x4874 <__vector_29+0x742>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    474e:	80 91 24 02 	lds	r24, 0x0224
    4752:	80 93 21 02 	sts	0x0221, r24
				rightChannelPhase = rightMotorPhase;
    4756:	80 91 25 02 	lds	r24, 0x0225
    475a:	80 93 b9 02 	sts	0x02B9, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    475e:	80 91 ba 02 	lds	r24, 0x02BA
    4762:	88 23       	and	r24, r24
    4764:	41 f1       	breq	.+80     	; 0x47b6 <__vector_29+0x684>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4766:	81 30       	cpi	r24, 0x01	; 1
    4768:	09 f4       	brne	.+2      	; 0x476c <__vector_29+0x63a>
    476a:	1f c2       	rjmp	.+1086   	; 0x4baa <__vector_29+0xa78>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    476c:	85 e0       	ldi	r24, 0x05	; 5
    476e:	80 93 b7 02 	sts	0x02B7, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    4772:	84 e0       	ldi	r24, 0x04	; 4
    4774:	80 93 22 04 	sts	0x0422, r24
    4778:	90 91 b8 02 	lds	r25, 0x02B8
    477c:	42 cd       	rjmp	.-1404   	; 0x4202 <__vector_29+0xd0>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    477e:	80 91 22 02 	lds	r24, 0x0222
    4782:	86 95       	lsr	r24
    4784:	80 93 21 02 	sts	0x0221, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    4788:	80 91 b9 02 	lds	r24, 0x02B9
    478c:	88 23       	and	r24, r24
    478e:	09 f0       	breq	.+2      	; 0x4792 <__vector_29+0x660>
    4790:	e6 c0       	rjmp	.+460    	; 0x495e <__vector_29+0x82c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4792:	81 e0       	ldi	r24, 0x01	; 1
    4794:	80 93 b7 02 	sts	0x02B7, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    4798:	81 e0       	ldi	r24, 0x01	; 1
    479a:	80 93 b8 02 	sts	0x02B8, r24
    479e:	91 e0       	ldi	r25, 0x01	; 1
    47a0:	30 cd       	rjmp	.-1440   	; 0x4202 <__vector_29+0xd0>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    47a2:	10 92 86 03 	sts	0x0386, r1
    47a6:	2f ce       	rjmp	.-930    	; 0x4406 <__vector_29+0x2d4>
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
    47a8:	80 91 05 01 	lds	r24, 0x0105
    47ac:	80 7f       	andi	r24, 0xF0	; 240
    47ae:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    47b2:	12 b8       	out	0x02, r1	; 2
    47b4:	a3 cf       	rjmp	.-186    	; 0x46fc <__vector_29+0x5ca>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    47b6:	83 e0       	ldi	r24, 0x03	; 3
    47b8:	80 93 b7 02 	sts	0x02B7, r24
    47bc:	da cf       	rjmp	.-76     	; 0x4772 <__vector_29+0x640>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    47be:	81 e0       	ldi	r24, 0x01	; 1
    47c0:	80 93 b7 02 	sts	0x02B7, r24
    47c4:	2f cf       	rjmp	.-418    	; 0x4624 <__vector_29+0x4f2>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    47c6:	2b 30       	cpi	r18, 0x0B	; 11
    47c8:	09 f4       	brne	.+2      	; 0x47cc <__vector_29+0x69a>
    47ca:	47 c1       	rjmp	.+654    	; 0x4a5a <__vector_29+0x928>
    47cc:	2b 30       	cpi	r18, 0x0B	; 11
    47ce:	08 f4       	brcc	.+2      	; 0x47d2 <__vector_29+0x6a0>
    47d0:	1a c1       	rjmp	.+564    	; 0x4a06 <__vector_29+0x8d4>
    47d2:	2c 30       	cpi	r18, 0x0C	; 12
    47d4:	09 f0       	breq	.+2      	; 0x47d8 <__vector_29+0x6a6>
    47d6:	13 cd       	rjmp	.-1498   	; 0x41fe <__vector_29+0xcc>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    47d8:	85 e0       	ldi	r24, 0x05	; 5
    47da:	80 93 b7 02 	sts	0x02B7, r24
    47de:	90 91 b8 02 	lds	r25, 0x02B8
    47e2:	0f cd       	rjmp	.-1506   	; 0x4202 <__vector_29+0xd0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    47e4:	22 23       	and	r18, r18
    47e6:	09 f4       	brne	.+2      	; 0x47ea <__vector_29+0x6b8>
    47e8:	02 c1       	rjmp	.+516    	; 0x49ee <__vector_29+0x8bc>
    47ea:	21 30       	cpi	r18, 0x01	; 1
    47ec:	09 f0       	breq	.+2      	; 0x47f0 <__vector_29+0x6be>
    47ee:	07 cd       	rjmp	.-1522   	; 0x41fe <__vector_29+0xcc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    47f0:	80 91 22 02 	lds	r24, 0x0222
    47f4:	8f 5f       	subi	r24, 0xFF	; 255
    47f6:	80 93 21 02 	sts	0x0221, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    47fa:	86 e0       	ldi	r24, 0x06	; 6
    47fc:	80 93 b7 02 	sts	0x02B7, r24
				irCommAdcRxState = 2;
    4800:	82 e0       	ldi	r24, 0x02	; 2
    4802:	80 93 00 04 	sts	0x0400, r24
    4806:	90 91 b8 02 	lds	r25, 0x02B8
    480a:	fb cc       	rjmp	.-1546   	; 0x4202 <__vector_29+0xd0>
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
					irCommMode = IRCOMM_MODE_TRANSMIT;
					if(irCommTxByteEnqueued==1) {
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    480c:	80 93 22 04 	sts	0x0422, r24
    4810:	90 91 b8 02 	lds	r25, 0x02B8
    4814:	f6 cc       	rjmp	.-1556   	; 0x4202 <__vector_29+0xd0>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    4816:	10 92 30 04 	sts	0x0430, r1
					if(irCommTxPulseState == 0) {
    481a:	80 91 2b 04 	lds	r24, 0x042B
    481e:	88 23       	and	r24, r24
    4820:	09 f0       	breq	.+2      	; 0x4824 <__vector_29+0x6f2>
    4822:	9f c1       	rjmp	.+830    	; 0x4b62 <__vector_29+0xa30>
						irCommTxPulseState = 1;
    4824:	81 e0       	ldi	r24, 0x01	; 1
    4826:	80 93 2b 04 	sts	0x042B, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    482a:	80 91 31 04 	lds	r24, 0x0431
    482e:	88 23       	and	r24, r24
    4830:	09 f0       	breq	.+2      	; 0x4834 <__vector_29+0x702>
    4832:	01 c2       	rjmp	.+1026   	; 0x4c36 <__vector_29+0xb04>
							PORTA = 0xAA;
    4834:	8a ea       	ldi	r24, 0xAA	; 170
    4836:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4838:	80 91 2f 04 	lds	r24, 0x042F
    483c:	8f 5f       	subi	r24, 0xFF	; 255
    483e:	80 93 2f 04 	sts	0x042F, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4842:	90 91 2e 04 	lds	r25, 0x042E
    4846:	89 17       	cp	r24, r25
    4848:	09 f0       	breq	.+2      	; 0x484c <__vector_29+0x71a>
    484a:	d9 ce       	rjmp	.-590    	; 0x45fe <__vector_29+0x4cc>
						irCommTxBitCount++;
    484c:	80 91 2a 04 	lds	r24, 0x042A
    4850:	8f 5f       	subi	r24, 0xFF	; 255
    4852:	80 93 2a 04 	sts	0x042A, r24
						if(irCommTxBitCount==12) {
    4856:	8c 30       	cpi	r24, 0x0C	; 12
    4858:	09 f4       	brne	.+2      	; 0x485c <__vector_29+0x72a>
    485a:	73 c2       	rjmp	.+1254   	; 0x4d42 <__vector_29+0xc10>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommInitReceiver();
							PORTA = 0x00;
							irCommTxLastTransmissionTime = getTime100MicroSec();
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    485c:	82 e0       	ldi	r24, 0x02	; 2
    485e:	80 93 d6 03 	sts	0x03D6, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    4862:	82 e0       	ldi	r24, 0x02	; 2
    4864:	80 93 22 04 	sts	0x0422, r24
						adcSaveDataTo = SKIP_SAMPLE;
    4868:	85 e0       	ldi	r24, 0x05	; 5
    486a:	80 93 b7 02 	sts	0x02B7, r24
    486e:	90 91 b8 02 	lds	r25, 0x02B8
    4872:	c7 cc       	rjmp	.-1650   	; 0x4202 <__vector_29+0xd0>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    4874:	10 92 30 04 	sts	0x0430, r1
					if(irCommTxPulseState == 0) {
    4878:	80 91 2b 04 	lds	r24, 0x042B
    487c:	88 23       	and	r24, r24
    487e:	09 f0       	breq	.+2      	; 0x4882 <__vector_29+0x750>
    4880:	74 c1       	rjmp	.+744    	; 0x4b6a <__vector_29+0xa38>
						irCommTxPulseState = 1;
    4882:	81 e0       	ldi	r24, 0x01	; 1
    4884:	80 93 2b 04 	sts	0x042B, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    4888:	80 91 31 04 	lds	r24, 0x0431
    488c:	88 23       	and	r24, r24
    488e:	09 f0       	breq	.+2      	; 0x4892 <__vector_29+0x760>
    4890:	d5 c1       	rjmp	.+938    	; 0x4c3c <__vector_29+0xb0a>
							PORTA = 0xAA;
    4892:	8a ea       	ldi	r24, 0xAA	; 170
    4894:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4896:	80 91 2f 04 	lds	r24, 0x042F
    489a:	8f 5f       	subi	r24, 0xFF	; 255
    489c:	80 93 2f 04 	sts	0x042F, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    48a0:	90 91 2e 04 	lds	r25, 0x042E
    48a4:	89 17       	cp	r24, r25
    48a6:	09 f0       	breq	.+2      	; 0x48aa <__vector_29+0x778>
    48a8:	52 cf       	rjmp	.-348    	; 0x474e <__vector_29+0x61c>
    48aa:	d0 cf       	rjmp	.-96     	; 0x484c <__vector_29+0x71a>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    48ac:	80 91 bd 02 	lds	r24, 0x02BD
    48b0:	82 30       	cpi	r24, 0x02	; 2
    48b2:	09 f0       	breq	.+2      	; 0x48b6 <__vector_29+0x784>
    48b4:	2a cd       	rjmp	.-1452   	; 0x430a <__vector_29+0x1d8>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    48b6:	50 93 bc 02 	sts	0x02BC, r21
    48ba:	40 93 bb 02 	sts	0x02BB, r20
				measBattery = 0;
    48be:	10 92 bd 02 	sts	0x02BD, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    48c2:	46 98       	cbi	0x08, 6	; 8
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    48c4:	8f e0       	ldi	r24, 0x0F	; 15
    48c6:	80 93 22 02 	sts	0x0222, r24
    48ca:	d2 cc       	rjmp	.-1628   	; 0x4270 <__vector_29+0x13e>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    48cc:	80 91 23 02 	lds	r24, 0x0223
    48d0:	80 93 21 02 	sts	0x0221, r24
				leftChannelPhase = leftMotorPhase;
    48d4:	80 91 26 02 	lds	r24, 0x0226
    48d8:	80 93 ba 02 	sts	0x02BA, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    48dc:	80 91 b9 02 	lds	r24, 0x02B9
    48e0:	88 23       	and	r24, r24
    48e2:	41 f5       	brne	.+80     	; 0x4934 <__vector_29+0x802>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    48e4:	81 e0       	ldi	r24, 0x01	; 1
    48e6:	80 93 b7 02 	sts	0x02B7, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    48ea:	84 e0       	ldi	r24, 0x04	; 4
    48ec:	80 93 b8 02 	sts	0x02B8, r24
    48f0:	94 e0       	ldi	r25, 0x04	; 4
    48f2:	87 cc       	rjmp	.-1778   	; 0x4202 <__vector_29+0xd0>
					}
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    48f4:	80 91 24 02 	lds	r24, 0x0224
    48f8:	80 93 21 02 	sts	0x0221, r24
				rightChannelPhase = rightMotorPhase;
    48fc:	80 91 25 02 	lds	r24, 0x0225
    4900:	80 93 b9 02 	sts	0x02B9, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4904:	80 91 ba 02 	lds	r24, 0x02BA
    4908:	88 23       	and	r24, r24
    490a:	d9 f4       	brne	.+54     	; 0x4942 <__vector_29+0x810>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    490c:	83 e0       	ldi	r24, 0x03	; 3
    490e:	80 93 b7 02 	sts	0x02B7, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    4912:	83 e0       	ldi	r24, 0x03	; 3
    4914:	80 93 b8 02 	sts	0x02B8, r24
    4918:	93 e0       	ldi	r25, 0x03	; 3
    491a:	73 cc       	rjmp	.-1818   	; 0x4202 <__vector_29+0xd0>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    491c:	82 30       	cpi	r24, 0x02	; 2
    491e:	09 f4       	brne	.+2      	; 0x4922 <__vector_29+0x7f0>
    4920:	8a ce       	rjmp	.-748    	; 0x4636 <__vector_29+0x504>
    4922:	81 cc       	rjmp	.-1790   	; 0x4226 <__vector_29+0xf4>
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
				if(irCommTxSensorGroup==0) {
					irCommTxSensorGroup = 1;
				} else {
					irCommTxSensorGroup = 0;
    4924:	10 92 31 04 	sts	0x0431, r1
    4928:	90 91 b8 02 	lds	r25, 0x02B8
    492c:	6a cc       	rjmp	.-1836   	; 0x4202 <__vector_29+0xd0>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    492e:	11 82       	std	Z+1, r1	; 0x01
    4930:	10 82       	st	Z, r1
    4932:	1c cd       	rjmp	.-1480   	; 0x436c <__vector_29+0x23a>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4934:	81 30       	cpi	r24, 0x01	; 1
    4936:	09 f4       	brne	.+2      	; 0x493a <__vector_29+0x808>
    4938:	60 c1       	rjmp	.+704    	; 0x4bfa <__vector_29+0xac8>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    493a:	85 e0       	ldi	r24, 0x05	; 5
    493c:	80 93 b7 02 	sts	0x02B7, r24
    4940:	d4 cf       	rjmp	.-88     	; 0x48ea <__vector_29+0x7b8>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4942:	81 30       	cpi	r24, 0x01	; 1
    4944:	09 f4       	brne	.+2      	; 0x4948 <__vector_29+0x816>
    4946:	51 c1       	rjmp	.+674    	; 0x4bea <__vector_29+0xab8>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4948:	85 e0       	ldi	r24, 0x05	; 5
    494a:	80 93 b7 02 	sts	0x02B7, r24
    494e:	e1 cf       	rjmp	.-62     	; 0x4912 <__vector_29+0x7e0>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4950:	81 30       	cpi	r24, 0x01	; 1
    4952:	09 f4       	brne	.+2      	; 0x4956 <__vector_29+0x824>
    4954:	56 c1       	rjmp	.+684    	; 0x4c02 <__vector_29+0xad0>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4956:	85 e0       	ldi	r24, 0x05	; 5
    4958:	80 93 b7 02 	sts	0x02B7, r24
    495c:	87 ce       	rjmp	.-754    	; 0x466c <__vector_29+0x53a>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    495e:	81 30       	cpi	r24, 0x01	; 1
    4960:	09 f4       	brne	.+2      	; 0x4964 <__vector_29+0x832>
    4962:	47 c1       	rjmp	.+654    	; 0x4bf2 <__vector_29+0xac0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4964:	85 e0       	ldi	r24, 0x05	; 5
    4966:	80 93 b7 02 	sts	0x02B7, r24
    496a:	16 cf       	rjmp	.-468    	; 0x4798 <__vector_29+0x666>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    496c:	cf 01       	movw	r24, r30
    496e:	cc 96       	adiw	r24, 0x3c	; 60
    4970:	95 95       	asr	r25
    4972:	87 95       	ror	r24
    4974:	88 37       	cpi	r24, 0x78	; 120
    4976:	91 05       	cpc	r25, r1
    4978:	0c f0       	brlt	.+2      	; 0x497c <__vector_29+0x84a>
    497a:	fb c0       	rjmp	.+502    	; 0x4b72 <__vector_29+0xa40>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    497c:	a1 54       	subi	r26, 0x41	; 65
    497e:	bd 4f       	sbci	r27, 0xFD	; 253
    4980:	fc 97       	sbiw	r30, 0x3c	; 60
    4982:	f5 95       	asr	r31
    4984:	e7 95       	ror	r30
    4986:	fc 96       	adiw	r30, 0x3c	; 60
    4988:	ed 93       	st	X+, r30
    498a:	fc 93       	st	X, r31
    498c:	ff cc       	rjmp	.-1538   	; 0x438c <__vector_29+0x25a>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    498e:	80 91 22 02 	lds	r24, 0x0222
    4992:	8f 5f       	subi	r24, 0xFF	; 255
    4994:	80 93 21 02 	sts	0x0221, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4998:	20 93 b7 02 	sts	0x02B7, r18
				irCommAdcRxState = 7;
    499c:	87 e0       	ldi	r24, 0x07	; 7
    499e:	80 93 00 04 	sts	0x0400, r24
    49a2:	90 91 b8 02 	lds	r25, 0x02B8
    49a6:	2d cc       	rjmp	.-1958   	; 0x4202 <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    49a8:	80 91 22 02 	lds	r24, 0x0222
    49ac:	8f 5f       	subi	r24, 0xFF	; 255
    49ae:	80 93 21 02 	sts	0x0221, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    49b2:	86 e0       	ldi	r24, 0x06	; 6
    49b4:	80 93 b7 02 	sts	0x02B7, r24
				irCommAdcRxState = 3;
    49b8:	83 e0       	ldi	r24, 0x03	; 3
    49ba:	80 93 00 04 	sts	0x0400, r24
    49be:	90 91 b8 02 	lds	r25, 0x02B8
    49c2:	1f cc       	rjmp	.-1986   	; 0x4202 <__vector_29+0xd0>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    49c4:	80 91 23 02 	lds	r24, 0x0223
    49c8:	80 93 21 02 	sts	0x0221, r24
				leftChannelPhase = leftMotorPhase;
    49cc:	80 91 26 02 	lds	r24, 0x0226
    49d0:	80 93 ba 02 	sts	0x02BA, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    49d4:	80 91 b9 02 	lds	r24, 0x02B9
    49d8:	88 23       	and	r24, r24
    49da:	09 f0       	breq	.+2      	; 0x49de <__vector_29+0x8ac>
    49dc:	f1 c0       	rjmp	.+482    	; 0x4bc0 <__vector_29+0xa8e>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    49de:	90 93 b7 02 	sts	0x02B7, r25
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 10;
    49e2:	8a e0       	ldi	r24, 0x0A	; 10
    49e4:	80 93 00 04 	sts	0x0400, r24
    49e8:	90 91 b8 02 	lds	r25, 0x02B8
    49ec:	0a cc       	rjmp	.-2028   	; 0x4202 <__vector_29+0xd0>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    49ee:	10 92 22 02 	sts	0x0222, r1
				currentAdChannel = currentProx+1;				
    49f2:	90 93 21 02 	sts	0x0221, r25
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    49f6:	86 e0       	ldi	r24, 0x06	; 6
    49f8:	80 93 b7 02 	sts	0x02B7, r24
				irCommAdcRxState = 1;
    49fc:	90 93 00 04 	sts	0x0400, r25
    4a00:	90 91 b8 02 	lds	r25, 0x02B8
    4a04:	fe cb       	rjmp	.-2052   	; 0x4202 <__vector_29+0xd0>
				}
				irCommAdcRxState = 10;
				break;

			case 10:
				currentAdChannel = currentMotRightChannel;
    4a06:	80 91 24 02 	lds	r24, 0x0224
    4a0a:	80 93 21 02 	sts	0x0221, r24
				rightChannelPhase = rightMotorPhase;
    4a0e:	80 91 25 02 	lds	r24, 0x0225
    4a12:	80 93 b9 02 	sts	0x02B9, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4a16:	80 91 ba 02 	lds	r24, 0x02BA
    4a1a:	88 23       	and	r24, r24
    4a1c:	09 f0       	breq	.+2      	; 0x4a20 <__vector_29+0x8ee>
    4a1e:	c9 c0       	rjmp	.+402    	; 0x4bb2 <__vector_29+0xa80>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4a20:	83 e0       	ldi	r24, 0x03	; 3
    4a22:	80 93 b7 02 	sts	0x02B7, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    4a26:	80 91 19 04 	lds	r24, 0x0419
    4a2a:	8e 3f       	cpi	r24, 0xFE	; 254
    4a2c:	18 f4       	brcc	.+6      	; 0x4a34 <__vector_29+0x902>
					irCommRxBitSkipped++;
    4a2e:	8f 5f       	subi	r24, 0xFF	; 255
    4a30:	80 93 19 04 	sts	0x0419, r24
				}
				irCommRxWindowSamples++;
    4a34:	90 91 01 04 	lds	r25, 0x0401
    4a38:	9f 5f       	subi	r25, 0xFF	; 255
    4a3a:	90 93 01 04 	sts	0x0401, r25
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    4a3e:	80 91 d6 03 	lds	r24, 0x03D6
    4a42:	84 30       	cpi	r24, 0x04	; 4
    4a44:	09 f4       	brne	.+2      	; 0x4a48 <__vector_29+0x916>
    4a46:	fd c0       	rjmp	.+506    	; 0x4c42 <__vector_29+0xb10>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    4a48:	94 31       	cpi	r25, 0x14	; 20
    4a4a:	09 f4       	brne	.+2      	; 0x4a4e <__vector_29+0x91c>
    4a4c:	16 c1       	rjmp	.+556    	; 0x4c7a <__vector_29+0xb48>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    4a4e:	8b e0       	ldi	r24, 0x0B	; 11
    4a50:	80 93 00 04 	sts	0x0400, r24
    4a54:	90 91 b8 02 	lds	r25, 0x02B8
    4a58:	d4 cb       	rjmp	.-2136   	; 0x4202 <__vector_29+0xd0>
				break;

			case 11:
				currentAdChannel = 0;	// prox0
    4a5a:	10 92 21 02 	sts	0x0221, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    4a5e:	80 91 b9 02 	lds	r24, 0x02B9
    4a62:	88 23       	and	r24, r24
    4a64:	09 f0       	breq	.+2      	; 0x4a68 <__vector_29+0x936>
    4a66:	ba c0       	rjmp	.+372    	; 0x4bdc <__vector_29+0xaaa>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4a68:	90 93 b7 02 	sts	0x02B7, r25
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 0;
    4a6c:	10 92 00 04 	sts	0x0400, r1
    4a70:	90 91 b8 02 	lds	r25, 0x02B8
    4a74:	c6 cb       	rjmp	.-2164   	; 0x4202 <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    4a76:	80 91 23 02 	lds	r24, 0x0223
    4a7a:	80 93 21 02 	sts	0x0221, r24
				leftChannelPhase = leftMotorPhase;
    4a7e:	80 91 26 02 	lds	r24, 0x0226
    4a82:	80 93 ba 02 	sts	0x02BA, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4a86:	86 e0       	ldi	r24, 0x06	; 6
    4a88:	80 93 b7 02 	sts	0x02B7, r24
				irCommAdcRxState = 8;
    4a8c:	88 e0       	ldi	r24, 0x08	; 8
    4a8e:	80 93 00 04 	sts	0x0400, r24
    4a92:	90 91 b8 02 	lds	r25, 0x02B8
    4a96:	b5 cb       	rjmp	.-2198   	; 0x4202 <__vector_29+0xd0>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    4a98:	80 91 22 02 	lds	r24, 0x0222
    4a9c:	8f 5f       	subi	r24, 0xFF	; 255
    4a9e:	80 93 21 02 	sts	0x0221, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4aa2:	86 e0       	ldi	r24, 0x06	; 6
    4aa4:	80 93 b7 02 	sts	0x02B7, r24
				irCommAdcRxState = 4;
    4aa8:	84 e0       	ldi	r24, 0x04	; 4
    4aaa:	80 93 00 04 	sts	0x0400, r24
    4aae:	90 91 b8 02 	lds	r25, 0x02B8
    4ab2:	a7 cb       	rjmp	.-2226   	; 0x4202 <__vector_29+0xd0>
				break;

			case 4:
				currentAdChannel = currentProx+1;
    4ab4:	80 91 22 02 	lds	r24, 0x0222
    4ab8:	8f 5f       	subi	r24, 0xFF	; 255
    4aba:	80 93 21 02 	sts	0x0221, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4abe:	86 e0       	ldi	r24, 0x06	; 6
    4ac0:	80 93 b7 02 	sts	0x02B7, r24
				irCommAdcRxState = 5;
    4ac4:	85 e0       	ldi	r24, 0x05	; 5
    4ac6:	80 93 00 04 	sts	0x0400, r24
    4aca:	90 91 b8 02 	lds	r25, 0x02B8
    4ace:	99 cb       	rjmp	.-2254   	; 0x4202 <__vector_29+0xd0>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    4ad0:	80 91 bd 02 	lds	r24, 0x02BD
    4ad4:	81 30       	cpi	r24, 0x01	; 1
    4ad6:	09 f0       	breq	.+2      	; 0x4ada <__vector_29+0x9a8>
    4ad8:	d0 cd       	rjmp	.-1120   	; 0x467a <__vector_29+0x548>
					measBattery=2;
    4ada:	82 e0       	ldi	r24, 0x02	; 2
    4adc:	80 93 bd 02 	sts	0x02BD, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    4ae0:	46 9a       	sbi	0x08, 6	; 8
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	8e cb       	rjmp	.-2276   	; 0x4202 <__vector_29+0xd0>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    4ae6:	80 91 22 02 	lds	r24, 0x0222
    4aea:	87 31       	cpi	r24, 0x17	; 23
    4aec:	09 f0       	breq	.+2      	; 0x4af0 <__vector_29+0x9be>
    4aee:	eb cb       	rjmp	.-2090   	; 0x42c6 <__vector_29+0x194>
					currentAdChannel = 0;	// prox0					
    4af0:	10 92 21 02 	sts	0x0221, r1
					measBattery = 0;
    4af4:	10 92 bd 02 	sts	0x02BD, r1
					irCommAdcRxState = 0;					
    4af8:	10 92 00 04 	sts	0x0400, r1
					irCommRxWindowSamples = 0;
    4afc:	10 92 01 04 	sts	0x0401, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4b00:	e0 91 45 0a 	lds	r30, 0x0A45
    4b04:	f0 91 46 0a 	lds	r31, 0x0A46
    4b08:	80 e1       	ldi	r24, 0x10	; 16
    4b0a:	df 01       	movw	r26, r30
    4b0c:	1d 92       	st	X+, r1
    4b0e:	8a 95       	dec	r24
    4b10:	e9 f7       	brne	.-6      	; 0x4b0c <__vector_29+0x9da>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    4b12:	80 91 d5 04 	lds	r24, 0x04D5
    4b16:	90 91 d6 04 	lds	r25, 0x04D6
    4b1a:	6f ef       	ldi	r22, 0xFF	; 255
    4b1c:	70 e0       	ldi	r23, 0x00	; 0
    4b1e:	40 e1       	ldi	r20, 0x10	; 16
    4b20:	50 e0       	ldi	r21, 0x00	; 0
    4b22:	0e 94 ff 5d 	call	0xbbfe	; 0xbbfe <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;					
    4b26:	10 93 d5 03 	sts	0x03D5, r17
    4b2a:	10 91 d3 03 	lds	r17, 0x03D3
    4b2e:	cb cb       	rjmp	.-2154   	; 0x42c6 <__vector_29+0x194>
				if(hardwareRevision == HW_REV_3_0_1) {
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    4b30:	82 30       	cpi	r24, 0x02	; 2
    4b32:	09 f4       	brne	.+2      	; 0x4b36 <__vector_29+0xa04>
    4b34:	df cd       	rjmp	.-1090   	; 0x46f4 <__vector_29+0x5c2>
    4b36:	e2 cd       	rjmp	.-1084   	; 0x46fc <__vector_29+0x5ca>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    4b38:	80 91 63 03 	lds	r24, 0x0363
    4b3c:	88 23       	and	r24, r24
    4b3e:	09 f0       	breq	.+2      	; 0x4b42 <__vector_29+0xa10>
    4b40:	63 c0       	rjmp	.+198    	; 0x4c08 <__vector_29+0xad6>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    4b42:	40 51       	subi	r20, 0x10	; 16
    4b44:	50 40       	sbci	r21, 0x00	; 0
    4b46:	55 95       	asr	r21
    4b48:	47 95       	ror	r20
    4b4a:	81 e0       	ldi	r24, 0x01	; 1
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	02 c0       	rjmp	.+4      	; 0x4b54 <__vector_29+0xa22>
    4b50:	88 0f       	add	r24, r24
    4b52:	99 1f       	adc	r25, r25
    4b54:	4a 95       	dec	r20
    4b56:	e2 f7       	brpl	.-8      	; 0x4b50 <__vector_29+0xa1e>
    4b58:	80 93 05 01 	sts	0x0105, r24
    4b5c:	90 91 b8 02 	lds	r25, 0x02B8
    4b60:	50 cb       	rjmp	.-2400   	; 0x4202 <__vector_29+0xd0>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    4b62:	10 92 2b 04 	sts	0x042B, r1
						PORTA = 0x00;
    4b66:	12 b8       	out	0x02, r1	; 2
    4b68:	67 ce       	rjmp	.-818    	; 0x4838 <__vector_29+0x706>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    4b6a:	10 92 2b 04 	sts	0x042B, r1
						PORTA = 0x00;
    4b6e:	12 b8       	out	0x02, r1	; 2
    4b70:	92 ce       	rjmp	.-732    	; 0x4896 <__vector_29+0x764>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    4b72:	cf 01       	movw	r24, r30
    4b74:	84 5d       	subi	r24, 0xD4	; 212
    4b76:	9e 4f       	sbci	r25, 0xFE	; 254
    4b78:	95 95       	asr	r25
    4b7a:	87 95       	ror	r24
    4b7c:	95 95       	asr	r25
    4b7e:	87 95       	ror	r24
    4b80:	84 3b       	cpi	r24, 0xB4	; 180
    4b82:	91 05       	cpc	r25, r1
    4b84:	0c f0       	brlt	.+2      	; 0x4b88 <__vector_29+0xa56>
    4b86:	6a c0       	rjmp	.+212    	; 0x4c5c <__vector_29+0xb2a>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    4b88:	a1 54       	subi	r26, 0x41	; 65
    4b8a:	bd 4f       	sbci	r27, 0xFD	; 253
    4b8c:	e4 5b       	subi	r30, 0xB4	; 180
    4b8e:	f0 40       	sbci	r31, 0x00	; 0
    4b90:	f5 95       	asr	r31
    4b92:	e7 95       	ror	r30
    4b94:	f5 95       	asr	r31
    4b96:	e7 95       	ror	r30
    4b98:	e8 58       	subi	r30, 0x88	; 136
    4b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9c:	ed 93       	st	X+, r30
    4b9e:	fc 93       	st	X, r31
    4ba0:	f5 cb       	rjmp	.-2070   	; 0x438c <__vector_29+0x25a>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4ba2:	82 e0       	ldi	r24, 0x02	; 2
    4ba4:	80 93 b7 02 	sts	0x02B7, r24
    4ba8:	3d cd       	rjmp	.-1414   	; 0x4624 <__vector_29+0x4f2>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4baa:	84 e0       	ldi	r24, 0x04	; 4
    4bac:	80 93 b7 02 	sts	0x02B7, r24
    4bb0:	e0 cd       	rjmp	.-1088   	; 0x4772 <__vector_29+0x640>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4bb2:	81 30       	cpi	r24, 0x01	; 1
    4bb4:	09 f4       	brne	.+2      	; 0x4bb8 <__vector_29+0xa86>
    4bb6:	c1 c0       	rjmp	.+386    	; 0x4d3a <__vector_29+0xc08>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4bb8:	85 e0       	ldi	r24, 0x05	; 5
    4bba:	80 93 b7 02 	sts	0x02B7, r24
    4bbe:	33 cf       	rjmp	.-410    	; 0x4a26 <__vector_29+0x8f4>
			case 9:
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4bc0:	81 30       	cpi	r24, 0x01	; 1
    4bc2:	09 f4       	brne	.+2      	; 0x4bc6 <__vector_29+0xa94>
    4bc4:	ae c0       	rjmp	.+348    	; 0x4d22 <__vector_29+0xbf0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4bc6:	85 e0       	ldi	r24, 0x05	; 5
    4bc8:	80 93 b7 02 	sts	0x02B7, r24
    4bcc:	0a cf       	rjmp	.-492    	; 0x49e2 <__vector_29+0x8b0>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4bce:	81 30       	cpi	r24, 0x01	; 1
    4bd0:	09 f4       	brne	.+2      	; 0x4bd4 <__vector_29+0xaa2>
    4bd2:	ab c0       	rjmp	.+342    	; 0x4d2a <__vector_29+0xbf8>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4bd4:	85 e0       	ldi	r24, 0x05	; 5
    4bd6:	80 93 b7 02 	sts	0x02B7, r24
    4bda:	7e cd       	rjmp	.-1284   	; 0x46d8 <__vector_29+0x5a6>

			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4bdc:	81 30       	cpi	r24, 0x01	; 1
    4bde:	09 f4       	brne	.+2      	; 0x4be2 <__vector_29+0xab0>
    4be0:	a8 c0       	rjmp	.+336    	; 0x4d32 <__vector_29+0xc00>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4be2:	85 e0       	ldi	r24, 0x05	; 5
    4be4:	80 93 b7 02 	sts	0x02B7, r24
    4be8:	41 cf       	rjmp	.-382    	; 0x4a6c <__vector_29+0x93a>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4bea:	84 e0       	ldi	r24, 0x04	; 4
    4bec:	80 93 b7 02 	sts	0x02B7, r24
    4bf0:	90 ce       	rjmp	.-736    	; 0x4912 <__vector_29+0x7e0>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4bf2:	82 e0       	ldi	r24, 0x02	; 2
    4bf4:	80 93 b7 02 	sts	0x02B7, r24
    4bf8:	cf cd       	rjmp	.-1122   	; 0x4798 <__vector_29+0x666>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4bfa:	82 e0       	ldi	r24, 0x02	; 2
    4bfc:	80 93 b7 02 	sts	0x02B7, r24
    4c00:	74 ce       	rjmp	.-792    	; 0x48ea <__vector_29+0x7b8>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4c02:	90 93 b7 02 	sts	0x02B7, r25
    4c06:	32 cd       	rjmp	.-1436   	; 0x466c <__vector_29+0x53a>
					} else {
						if(hardwareRevision == HW_REV_3_0) {
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    4c08:	81 30       	cpi	r24, 0x01	; 1
    4c0a:	09 f0       	breq	.+2      	; 0x4c0e <__vector_29+0xadc>
    4c0c:	b0 c0       	rjmp	.+352    	; 0x4d6e <__vector_29+0xc3c>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    4c0e:	20 91 05 01 	lds	r18, 0x0105
    4c12:	40 51       	subi	r20, 0x10	; 16
    4c14:	50 40       	sbci	r21, 0x00	; 0
    4c16:	55 95       	asr	r21
    4c18:	47 95       	ror	r20
    4c1a:	81 e0       	ldi	r24, 0x01	; 1
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	02 c0       	rjmp	.+4      	; 0x4c24 <__vector_29+0xaf2>
    4c20:	88 0f       	add	r24, r24
    4c22:	99 1f       	adc	r25, r25
    4c24:	4a 95       	dec	r20
    4c26:	e2 f7       	brpl	.-8      	; 0x4c20 <__vector_29+0xaee>
    4c28:	80 95       	com	r24
    4c2a:	82 23       	and	r24, r18
    4c2c:	80 93 05 01 	sts	0x0105, r24
    4c30:	90 91 b8 02 	lds	r25, 0x02B8
    4c34:	e6 ca       	rjmp	.-2612   	; 0x4202 <__vector_29+0xd0>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4c36:	85 e5       	ldi	r24, 0x55	; 85
    4c38:	82 b9       	out	0x02, r24	; 2
    4c3a:	fe cd       	rjmp	.-1028   	; 0x4838 <__vector_29+0x706>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    4c3c:	85 e5       	ldi	r24, 0x55	; 85
    4c3e:	82 b9       	out	0x02, r24	; 2
    4c40:	2a ce       	rjmp	.-940    	; 0x4896 <__vector_29+0x764>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    4c42:	10 92 01 04 	sts	0x0401, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    4c46:	90 91 19 04 	lds	r25, 0x0419
    4c4a:	80 91 0b 04 	lds	r24, 0x040B
    4c4e:	98 17       	cp	r25, r24
    4c50:	08 f4       	brcc	.+2      	; 0x4c54 <__vector_29+0xb22>
    4c52:	fd ce       	rjmp	.-518    	; 0x4a4e <__vector_29+0x91c>
						irCommState = IRCOMM_RX_WAITING_BIT;
    4c54:	85 e0       	ldi	r24, 0x05	; 5
    4c56:	80 93 d6 03 	sts	0x03D6, r24
    4c5a:	f9 ce       	rjmp	.-526    	; 0x4a4e <__vector_29+0x91c>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    4c5c:	a1 54       	subi	r26, 0x41	; 65
    4c5e:	bd 4f       	sbci	r27, 0xFD	; 253
    4c60:	e4 5a       	subi	r30, 0xA4	; 164
    4c62:	f1 40       	sbci	r31, 0x01	; 1
    4c64:	f5 95       	asr	r31
    4c66:	e7 95       	ror	r30
    4c68:	f5 95       	asr	r31
    4c6a:	e7 95       	ror	r30
    4c6c:	f5 95       	asr	r31
    4c6e:	e7 95       	ror	r30
    4c70:	ec 54       	subi	r30, 0x4C	; 76
    4c72:	ff 4f       	sbci	r31, 0xFF	; 255
    4c74:	ed 93       	st	X+, r30
    4c76:	fc 93       	st	X, r31
    4c78:	89 cb       	rjmp	.-2286   	; 0x438c <__vector_29+0x25a>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    4c7a:	10 92 01 04 	sts	0x0401, r1
					irCommTempPointer = irCommProxValuesCurr;
    4c7e:	20 91 5b 07 	lds	r18, 0x075B
    4c82:	30 91 5c 07 	lds	r19, 0x075C
					irCommProxValuesCurr = irCommProxValuesAdc;
    4c86:	80 91 77 07 	lds	r24, 0x0777
    4c8a:	90 91 78 07 	lds	r25, 0x0778
    4c8e:	90 93 5c 07 	sts	0x075C, r25
    4c92:	80 93 5b 07 	sts	0x075B, r24
					irCommProxValuesAdc = irCommTempPointer;
    4c96:	30 93 78 07 	sts	0x0778, r19
    4c9a:	20 93 77 07 	sts	0x0777, r18
					irCommTempPointer = irCommMaxSensorValueCurr;
    4c9e:	40 91 59 04 	lds	r20, 0x0459
    4ca2:	50 91 5a 04 	lds	r21, 0x045A
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    4ca6:	80 91 45 0a 	lds	r24, 0x0A45
    4caa:	90 91 46 0a 	lds	r25, 0x0A46
    4cae:	90 93 5a 04 	sts	0x045A, r25
    4cb2:	80 93 59 04 	sts	0x0459, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    4cb6:	40 93 45 0a 	sts	0x0A45, r20
    4cba:	50 93 46 0a 	sts	0x0A46, r21
					irCommTempPointer = irCommMinSensorValueCurr;
    4cbe:	20 91 45 04 	lds	r18, 0x0445
    4cc2:	30 91 46 04 	lds	r19, 0x0446
    4cc6:	30 93 87 0a 	sts	0x0A87, r19
    4cca:	20 93 86 0a 	sts	0x0A86, r18
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    4cce:	80 91 d5 04 	lds	r24, 0x04D5
    4cd2:	90 91 d6 04 	lds	r25, 0x04D6
    4cd6:	90 93 46 04 	sts	0x0446, r25
    4cda:	80 93 45 04 	sts	0x0445, r24
					irCommMinSensorValueAdc = irCommTempPointer;
    4cde:	30 93 d6 04 	sts	0x04D6, r19
    4ce2:	20 93 d5 04 	sts	0x04D5, r18
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4ce6:	fa 01       	movw	r30, r20
    4ce8:	80 e1       	ldi	r24, 0x10	; 16
    4cea:	df 01       	movw	r26, r30
    4cec:	1d 92       	st	X+, r1
    4cee:	8a 95       	dec	r24
    4cf0:	e9 f7       	brne	.-6      	; 0x4cec <__vector_29+0xbba>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    4cf2:	80 91 d5 04 	lds	r24, 0x04D5
    4cf6:	90 91 d6 04 	lds	r25, 0x04D6
    4cfa:	6f ef       	ldi	r22, 0xFF	; 255
    4cfc:	70 e0       	ldi	r23, 0x00	; 0
    4cfe:	40 e1       	ldi	r20, 0x10	; 16
    4d00:	50 e0       	ldi	r21, 0x00	; 0
    4d02:	0e 94 ff 5d 	call	0xbbfe	; 0xbbfe <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    4d06:	80 91 d6 03 	lds	r24, 0x03D6
    4d0a:	81 30       	cpi	r24, 0x01	; 1
    4d0c:	09 f4       	brne	.+2      	; 0x4d10 <__vector_29+0xbde>
    4d0e:	44 c0       	rjmp	.+136    	; 0x4d98 <__vector_29+0xc66>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    4d10:	80 91 d6 03 	lds	r24, 0x03D6
    4d14:	85 30       	cpi	r24, 0x05	; 5
    4d16:	09 f0       	breq	.+2      	; 0x4d1a <__vector_29+0xbe8>
    4d18:	9a ce       	rjmp	.-716    	; 0x4a4e <__vector_29+0x91c>
						irCommState = IRCOMM_RX_READ_BIT;
    4d1a:	86 e0       	ldi	r24, 0x06	; 6
    4d1c:	80 93 d6 03 	sts	0x03D6, r24
    4d20:	96 ce       	rjmp	.-724    	; 0x4a4e <__vector_29+0x91c>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4d22:	82 e0       	ldi	r24, 0x02	; 2
    4d24:	80 93 b7 02 	sts	0x02B7, r24
    4d28:	5c ce       	rjmp	.-840    	; 0x49e2 <__vector_29+0x8b0>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4d2a:	84 e0       	ldi	r24, 0x04	; 4
    4d2c:	80 93 b7 02 	sts	0x02B7, r24
    4d30:	d3 cc       	rjmp	.-1626   	; 0x46d8 <__vector_29+0x5a6>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4d32:	82 e0       	ldi	r24, 0x02	; 2
    4d34:	80 93 b7 02 	sts	0x02B7, r24
    4d38:	99 ce       	rjmp	.-718    	; 0x4a6c <__vector_29+0x93a>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4d3a:	84 e0       	ldi	r24, 0x04	; 4
    4d3c:	80 93 b7 02 	sts	0x02B7, r24
    4d40:	72 ce       	rjmp	.-796    	; 0x4a26 <__vector_29+0x8f4>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    4d42:	81 e0       	ldi	r24, 0x01	; 1
    4d44:	80 93 d6 03 	sts	0x03D6, r24
							irCommTxByteEnqueued = 0;
    4d48:	10 92 24 04 	sts	0x0424, r1
							adcSamplingState = 0;
    4d4c:	10 92 b8 02 	sts	0x02B8, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    4d50:	10 92 d5 03 	sts	0x03D5, r1
							irCommInitReceiver();
    4d54:	0e 94 33 4e 	call	0x9c66	; 0x9c66 <irCommInitReceiver>
							PORTA = 0x00;
    4d58:	12 b8       	out	0x02, r1	; 2
							irCommTxLastTransmissionTime = getTime100MicroSec();
    4d5a:	be d8       	rcall	.-3716   	; 0x3ed8 <getTime100MicroSec>
    4d5c:	60 93 25 04 	sts	0x0425, r22
    4d60:	70 93 26 04 	sts	0x0426, r23
    4d64:	80 93 27 04 	sts	0x0427, r24
    4d68:	90 93 28 04 	sts	0x0428, r25
    4d6c:	7a cd       	rjmp	.-1292   	; 0x4862 <__vector_29+0x730>

						if(hardwareRevision == HW_REV_3_0_1) {
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    4d6e:	82 30       	cpi	r24, 0x02	; 2
    4d70:	09 f0       	breq	.+2      	; 0x4d74 <__vector_29+0xc42>
    4d72:	45 ca       	rjmp	.-2934   	; 0x41fe <__vector_29+0xcc>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    4d74:	20 91 05 01 	lds	r18, 0x0105
    4d78:	40 51       	subi	r20, 0x10	; 16
    4d7a:	50 40       	sbci	r21, 0x00	; 0
    4d7c:	55 95       	asr	r21
    4d7e:	47 95       	ror	r20
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	90 e0       	ldi	r25, 0x00	; 0
    4d84:	02 c0       	rjmp	.+4      	; 0x4d8a <__vector_29+0xc58>
    4d86:	88 0f       	add	r24, r24
    4d88:	99 1f       	adc	r25, r25
    4d8a:	4a 95       	dec	r20
    4d8c:	e2 f7       	brpl	.-8      	; 0x4d86 <__vector_29+0xc54>
    4d8e:	80 95       	com	r24
    4d90:	82 23       	and	r24, r18
    4d92:	80 93 05 01 	sts	0x0105, r24
    4d96:	33 ca       	rjmp	.-2970   	; 0x41fe <__vector_29+0xcc>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    4d98:	82 e0       	ldi	r24, 0x02	; 2
    4d9a:	80 93 d6 03 	sts	0x03D6, r24
						irCommRxBitSkipped = 0;
    4d9e:	10 92 19 04 	sts	0x0419, r1
    4da2:	b6 cf       	rjmp	.-148    	; 0x4d10 <__vector_29+0xbde>

00004da4 <initMotors>:

#include "motors.h"

void initMotors() {
    4da4:	0f 93       	push	r16
    4da6:	1f 93       	push	r17
    4da8:	cf 93       	push	r28
    4daa:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    4dac:	e0 e9       	ldi	r30, 0x90	; 144
    4dae:	f0 e0       	ldi	r31, 0x00	; 0
    4db0:	10 82       	st	Z, r1
	TCCR3B = 0;
    4db2:	a1 e9       	ldi	r26, 0x91	; 145
    4db4:	b0 e0       	ldi	r27, 0x00	; 0
    4db6:	1c 92       	st	X, r1
	TIMSK3 = 0;
    4db8:	21 e7       	ldi	r18, 0x71	; 113
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	e9 01       	movw	r28, r18
    4dbe:	18 82       	st	Y, r1
	TCCR4A = 0;
    4dc0:	40 ea       	ldi	r20, 0xA0	; 160
    4dc2:	50 e0       	ldi	r21, 0x00	; 0
    4dc4:	ea 01       	movw	r28, r20
    4dc6:	18 82       	st	Y, r1
	TCCR4B = 0;
    4dc8:	61 ea       	ldi	r22, 0xA1	; 161
    4dca:	70 e0       	ldi	r23, 0x00	; 0
    4dcc:	eb 01       	movw	r28, r22
    4dce:	18 82       	st	Y, r1
	TIMSK4 = 0;
    4dd0:	02 e7       	ldi	r16, 0x72	; 114
    4dd2:	10 e0       	ldi	r17, 0x00	; 0
    4dd4:	e8 01       	movw	r28, r16
    4dd6:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    4dd8:	80 81       	ld	r24, Z
    4dda:	83 68       	ori	r24, 0x83	; 131
    4ddc:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    4dde:	80 81       	ld	r24, Z
    4de0:	83 60       	ori	r24, 0x03	; 3
    4de2:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4de4:	8c 91       	ld	r24, X
    4de6:	8b 60       	ori	r24, 0x0B	; 11
    4de8:	8c 93       	st	X, r24
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    4dea:	80 91 e7 02 	lds	r24, 0x02E7
    4dee:	90 91 e8 02 	lds	r25, 0x02E8
    4df2:	90 93 99 00 	sts	0x0099, r25
    4df6:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 0;
    4dfa:	10 92 9b 00 	sts	0x009B, r1
    4dfe:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    4e02:	d9 01       	movw	r26, r18
    4e04:	8c 91       	ld	r24, X
    4e06:	81 60       	ori	r24, 0x01	; 1
    4e08:	8c 93       	st	X, r24

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    4e0a:	80 81       	ld	r24, Z
    4e0c:	8f 75       	andi	r24, 0x5F	; 95
    4e0e:	80 83       	st	Z, r24
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4e10:	8e b1       	in	r24, 0x0e	; 14
    4e12:	87 7e       	andi	r24, 0xE7	; 231
    4e14:	8e b9       	out	0x0e, r24	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    4e16:	ea 01       	movw	r28, r20
    4e18:	88 81       	ld	r24, Y
    4e1a:	83 68       	ori	r24, 0x83	; 131
    4e1c:	88 83       	st	Y, r24
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4e1e:	fb 01       	movw	r30, r22
    4e20:	80 81       	ld	r24, Z
    4e22:	8b 60       	ori	r24, 0x0B	; 11
    4e24:	80 83       	st	Z, r24
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    4e26:	80 91 e9 02 	lds	r24, 0x02E9
    4e2a:	90 91 ea 02 	lds	r25, 0x02EA
    4e2e:	90 93 a9 00 	sts	0x00A9, r25
    4e32:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    4e36:	10 92 ab 00 	sts	0x00AB, r1
    4e3a:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    4e3e:	d8 01       	movw	r26, r16
    4e40:	8c 91       	ld	r24, X
    4e42:	81 60       	ori	r24, 0x01	; 1
    4e44:	8c 93       	st	X, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    4e46:	88 81       	ld	r24, Y
    4e48:	8f 75       	andi	r24, 0x5F	; 95
    4e4a:	88 83       	st	Y, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4e4c:	e2 e0       	ldi	r30, 0x02	; 2
    4e4e:	f1 e0       	ldi	r31, 0x01	; 1
    4e50:	80 81       	ld	r24, Z
    4e52:	87 7e       	andi	r24, 0xE7	; 231
    4e54:	80 83       	st	Z, r24


}
    4e56:	df 91       	pop	r29
    4e58:	cf 91       	pop	r28
    4e5a:	1f 91       	pop	r17
    4e5c:	0f 91       	pop	r16
    4e5e:	08 95       	ret

00004e60 <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4e60:	28 2f       	mov	r18, r24
    4e62:	33 27       	eor	r19, r19
    4e64:	27 fd       	sbrc	r18, 7
    4e66:	30 95       	com	r19
    4e68:	37 fd       	sbrc	r19, 7
    4e6a:	29 c0       	rjmp	.+82     	; 0x4ebe <setLeftSpeed+0x5e>
    4e6c:	30 93 04 03 	sts	0x0304, r19
    4e70:	20 93 03 03 	sts	0x0303, r18

    if(vel >= 0) {
    4e74:	87 fd       	sbrc	r24, 7
    4e76:	1a c0       	rjmp	.+52     	; 0x4eac <setLeftSpeed+0x4c>
        pwm_left_desired = speedl;
    4e78:	30 93 ee 02 	sts	0x02EE, r19
    4e7c:	20 93 ed 02 	sts	0x02ED, r18
    4e80:	c9 01       	movw	r24, r18
    } else {
        pwm_left_desired = -(speedl);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    4e82:	22 e0       	ldi	r18, 0x02	; 2
    4e84:	80 30       	cpi	r24, 0x00	; 0
    4e86:	92 07       	cpc	r25, r18
    4e88:	3c f0       	brlt	.+14     	; 0x4e98 <setLeftSpeed+0x38>
    4e8a:	8f ef       	ldi	r24, 0xFF	; 255
    4e8c:	91 e0       	ldi	r25, 0x01	; 1
    4e8e:	90 93 ee 02 	sts	0x02EE, r25
    4e92:	80 93 ed 02 	sts	0x02ED, r24
    4e96:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    4e98:	81 50       	subi	r24, 0x01	; 1
    4e9a:	9e 4f       	sbci	r25, 0xFE	; 254
    4e9c:	34 f4       	brge	.+12     	; 0x4eaa <setLeftSpeed+0x4a>
    4e9e:	81 e0       	ldi	r24, 0x01	; 1
    4ea0:	9e ef       	ldi	r25, 0xFE	; 254
    4ea2:	90 93 ee 02 	sts	0x02EE, r25
    4ea6:	80 93 ed 02 	sts	0x02ED, r24
    4eaa:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    4eac:	88 27       	eor	r24, r24
    4eae:	99 27       	eor	r25, r25
    4eb0:	82 1b       	sub	r24, r18
    4eb2:	93 0b       	sbc	r25, r19
    4eb4:	90 93 ee 02 	sts	0x02EE, r25
    4eb8:	80 93 ed 02 	sts	0x02ED, r24
    4ebc:	e2 cf       	rjmp	.-60     	; 0x4e82 <setLeftSpeed+0x22>
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4ebe:	30 95       	com	r19
    4ec0:	21 95       	neg	r18
    4ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ec4:	d3 cf       	rjmp	.-90     	; 0x4e6c <setLeftSpeed+0xc>

00004ec6 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4ec6:	28 2f       	mov	r18, r24
    4ec8:	33 27       	eor	r19, r19
    4eca:	27 fd       	sbrc	r18, 7
    4ecc:	30 95       	com	r19
    4ece:	37 fd       	sbrc	r19, 7
    4ed0:	29 c0       	rjmp	.+82     	; 0x4f24 <setRightSpeed+0x5e>
    4ed2:	30 93 06 03 	sts	0x0306, r19
    4ed6:	20 93 05 03 	sts	0x0305, r18

    if(vel >= 0) {
    4eda:	87 fd       	sbrc	r24, 7
    4edc:	1a c0       	rjmp	.+52     	; 0x4f12 <setRightSpeed+0x4c>
        pwm_right_desired = speedr;
    4ede:	30 93 ec 02 	sts	0x02EC, r19
    4ee2:	20 93 eb 02 	sts	0x02EB, r18
    4ee6:	c9 01       	movw	r24, r18
    } else {
        pwm_right_desired = -(speedr);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    4ee8:	22 e0       	ldi	r18, 0x02	; 2
    4eea:	80 30       	cpi	r24, 0x00	; 0
    4eec:	92 07       	cpc	r25, r18
    4eee:	3c f0       	brlt	.+14     	; 0x4efe <setRightSpeed+0x38>
    4ef0:	8f ef       	ldi	r24, 0xFF	; 255
    4ef2:	91 e0       	ldi	r25, 0x01	; 1
    4ef4:	90 93 ec 02 	sts	0x02EC, r25
    4ef8:	80 93 eb 02 	sts	0x02EB, r24
    4efc:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    4efe:	81 50       	subi	r24, 0x01	; 1
    4f00:	9e 4f       	sbci	r25, 0xFE	; 254
    4f02:	34 f4       	brge	.+12     	; 0x4f10 <setRightSpeed+0x4a>
    4f04:	81 e0       	ldi	r24, 0x01	; 1
    4f06:	9e ef       	ldi	r25, 0xFE	; 254
    4f08:	90 93 ec 02 	sts	0x02EC, r25
    4f0c:	80 93 eb 02 	sts	0x02EB, r24
    4f10:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    4f12:	88 27       	eor	r24, r24
    4f14:	99 27       	eor	r25, r25
    4f16:	82 1b       	sub	r24, r18
    4f18:	93 0b       	sbc	r25, r19
    4f1a:	90 93 ec 02 	sts	0x02EC, r25
    4f1e:	80 93 eb 02 	sts	0x02EB, r24
    4f22:	e2 cf       	rjmp	.-60     	; 0x4ee8 <setRightSpeed+0x22>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4f24:	30 95       	com	r19
    4f26:	21 95       	neg	r18
    4f28:	3f 4f       	sbci	r19, 0xFF	; 255
    4f2a:	d3 cf       	rjmp	.-90     	; 0x4ed2 <setRightSpeed+0xc>

00004f2c <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    4f2c:	80 91 b0 03 	lds	r24, 0x03B0
    4f30:	88 23       	and	r24, r24
    4f32:	09 f0       	breq	.+2      	; 0x4f36 <updateOdomData+0xa>
    4f34:	3f c0       	rjmp	.+126    	; 0x4fb4 <updateOdomData+0x88>
        if(calibVelIndex>1) {
    4f36:	e0 91 c9 07 	lds	r30, 0x07C9
    4f3a:	e2 30       	cpi	r30, 0x02	; 2
    4f3c:	08 f4       	brcc	.+2      	; 0x4f40 <updateOdomData+0x14>
    4f3e:	77 c0       	rjmp	.+238    	; 0x502e <updateOdomData+0x102>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    4f40:	4e 2f       	mov	r20, r30
    4f42:	50 e0       	ldi	r21, 0x00	; 0
    4f44:	fa 01       	movw	r30, r20
    4f46:	ee 0f       	add	r30, r30
    4f48:	ff 1f       	adc	r31, r31
    4f4a:	ee 0f       	add	r30, r30
    4f4c:	ff 1f       	adc	r31, r31
    4f4e:	ee 0f       	add	r30, r30
    4f50:	ff 1f       	adc	r31, r31
    4f52:	ee 0f       	add	r30, r30
    4f54:	ff 1f       	adc	r31, r31
    4f56:	ee 52       	subi	r30, 0x2E	; 46
    4f58:	f8 4f       	sbci	r31, 0xF8	; 248
    4f5a:	80 81       	ld	r24, Z
    4f5c:	91 81       	ldd	r25, Z+1	; 0x01
    4f5e:	20 91 84 0a 	lds	r18, 0x0A84
    4f62:	30 91 85 0a 	lds	r19, 0x0A85
    4f66:	82 17       	cp	r24, r18
    4f68:	93 07       	cpc	r25, r19
    4f6a:	34 f0       	brlt	.+12     	; 0x4f78 <updateOdomData+0x4c>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    4f6c:	01 96       	adiw	r24, 0x01	; 1
    4f6e:	90 93 85 0a 	sts	0x0A85, r25
    4f72:	80 93 84 0a 	sts	0x0A84, r24
    4f76:	9c 01       	movw	r18, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    4f78:	fa 01       	movw	r30, r20
    4f7a:	31 97       	sbiw	r30, 0x01	; 1
    4f7c:	df 01       	movw	r26, r30
    4f7e:	a2 95       	swap	r26
    4f80:	b2 95       	swap	r27
    4f82:	b0 7f       	andi	r27, 0xF0	; 240
    4f84:	ba 27       	eor	r27, r26
    4f86:	a0 7f       	andi	r26, 0xF0	; 240
    4f88:	ba 27       	eor	r27, r26
    4f8a:	a0 51       	subi	r26, 0x10	; 16
    4f8c:	b8 4f       	sbci	r27, 0xF8	; 248
    4f8e:	80 91 bd 03 	lds	r24, 0x03BD
    4f92:	90 91 be 03 	lds	r25, 0x03BE
    4f96:	8d 93       	st	X+, r24
    4f98:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][1] = tempVel;
    4f9a:	ee 0f       	add	r30, r30
    4f9c:	ff 1f       	adc	r31, r31
    4f9e:	ee 0f       	add	r30, r30
    4fa0:	ff 1f       	adc	r31, r31
    4fa2:	ee 0f       	add	r30, r30
    4fa4:	ff 1f       	adc	r31, r31
    4fa6:	ee 0f       	add	r30, r30
    4fa8:	ff 1f       	adc	r31, r31
    4faa:	ee 50       	subi	r30, 0x0E	; 14
    4fac:	f8 4f       	sbci	r31, 0xF8	; 248
    4fae:	31 83       	std	Z+1, r19	; 0x01
    4fb0:	20 83       	st	Z, r18
    4fb2:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4fb4:	81 30       	cpi	r24, 0x01	; 1
    4fb6:	31 f0       	breq	.+12     	; 0x4fc4 <updateOdomData+0x98>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4fb8:	82 30       	cpi	r24, 0x02	; 2
    4fba:	09 f4       	brne	.+2      	; 0x4fbe <updateOdomData+0x92>
    4fbc:	70 c0       	rjmp	.+224    	; 0x509e <updateOdomData+0x172>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    4fbe:	83 30       	cpi	r24, 0x03	; 3
    4fc0:	e9 f1       	breq	.+122    	; 0x503c <updateOdomData+0x110>
    4fc2:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4fc4:	e0 91 c9 07 	lds	r30, 0x07C9
    4fc8:	e2 30       	cpi	r30, 0x02	; 2
    4fca:	08 f4       	brcc	.+2      	; 0x4fce <updateOdomData+0xa2>
    4fcc:	9e c0       	rjmp	.+316    	; 0x510a <updateOdomData+0x1de>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    4fce:	4e 2f       	mov	r20, r30
    4fd0:	50 e0       	ldi	r21, 0x00	; 0
    4fd2:	fa 01       	movw	r30, r20
    4fd4:	e2 95       	swap	r30
    4fd6:	f2 95       	swap	r31
    4fd8:	f0 7f       	andi	r31, 0xF0	; 240
    4fda:	fe 27       	eor	r31, r30
    4fdc:	e0 7f       	andi	r30, 0xF0	; 240
    4fde:	fe 27       	eor	r31, r30
    4fe0:	e0 53       	subi	r30, 0x30	; 48
    4fe2:	f8 4f       	sbci	r31, 0xF8	; 248
    4fe4:	86 81       	ldd	r24, Z+6	; 0x06
    4fe6:	97 81       	ldd	r25, Z+7	; 0x07
    4fe8:	20 91 84 0a 	lds	r18, 0x0A84
    4fec:	30 91 85 0a 	lds	r19, 0x0A85
    4ff0:	82 17       	cp	r24, r18
    4ff2:	93 07       	cpc	r25, r19
    4ff4:	34 f0       	brlt	.+12     	; 0x5002 <updateOdomData+0xd6>
                tempVel = calibration[calibVelIndex-2][3]+1;
    4ff6:	01 96       	adiw	r24, 0x01	; 1
    4ff8:	90 93 85 0a 	sts	0x0A85, r25
    4ffc:	80 93 84 0a 	sts	0x0A84, r24
    5000:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    5002:	fa 01       	movw	r30, r20
    5004:	31 97       	sbiw	r30, 0x01	; 1
    5006:	e2 95       	swap	r30
    5008:	f2 95       	swap	r31
    500a:	f0 7f       	andi	r31, 0xF0	; 240
    500c:	fe 27       	eor	r31, r30
    500e:	e0 7f       	andi	r30, 0xF0	; 240
    5010:	fe 27       	eor	r31, r30
    5012:	df 01       	movw	r26, r30
    5014:	ac 50       	subi	r26, 0x0C	; 12
    5016:	b8 4f       	sbci	r27, 0xF8	; 248
    5018:	80 91 bf 03 	lds	r24, 0x03BF
    501c:	90 91 c0 03 	lds	r25, 0x03C0
    5020:	8d 93       	st	X+, r24
    5022:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][3] = tempVel;
    5024:	e0 51       	subi	r30, 0x10	; 16
    5026:	f8 4f       	sbci	r31, 0xF8	; 248
    5028:	37 83       	std	Z+7, r19	; 0x07
    502a:	26 83       	std	Z+6, r18	; 0x06
    502c:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    502e:	4e 2f       	mov	r20, r30
    5030:	50 e0       	ldi	r21, 0x00	; 0
    5032:	20 91 84 0a 	lds	r18, 0x0A84
    5036:	30 91 85 0a 	lds	r19, 0x0A85
    503a:	9e cf       	rjmp	.-196    	; 0x4f78 <updateOdomData+0x4c>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    503c:	e0 91 c9 07 	lds	r30, 0x07C9
    5040:	e2 30       	cpi	r30, 0x02	; 2
    5042:	08 f4       	brcc	.+2      	; 0x5046 <updateOdomData+0x11a>
    5044:	70 c0       	rjmp	.+224    	; 0x5126 <updateOdomData+0x1fa>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    5046:	4e 2f       	mov	r20, r30
    5048:	50 e0       	ldi	r21, 0x00	; 0
    504a:	fa 01       	movw	r30, r20
    504c:	e2 95       	swap	r30
    504e:	f2 95       	swap	r31
    5050:	f0 7f       	andi	r31, 0xF0	; 240
    5052:	fe 27       	eor	r31, r30
    5054:	e0 7f       	andi	r30, 0xF0	; 240
    5056:	fe 27       	eor	r31, r30
    5058:	e0 53       	subi	r30, 0x30	; 48
    505a:	f8 4f       	sbci	r31, 0xF8	; 248
    505c:	86 85       	ldd	r24, Z+14	; 0x0e
    505e:	97 85       	ldd	r25, Z+15	; 0x0f
    5060:	20 91 84 0a 	lds	r18, 0x0A84
    5064:	30 91 85 0a 	lds	r19, 0x0A85
    5068:	82 17       	cp	r24, r18
    506a:	93 07       	cpc	r25, r19
    506c:	34 f0       	brlt	.+12     	; 0x507a <updateOdomData+0x14e>
                tempVel = calibration[calibVelIndex-2][7]+1;
    506e:	01 96       	adiw	r24, 0x01	; 1
    5070:	90 93 85 0a 	sts	0x0A85, r25
    5074:	80 93 84 0a 	sts	0x0A84, r24
    5078:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    507a:	fa 01       	movw	r30, r20
    507c:	e2 95       	swap	r30
    507e:	f2 95       	swap	r31
    5080:	f0 7f       	andi	r31, 0xF0	; 240
    5082:	fe 27       	eor	r31, r30
    5084:	e0 7f       	andi	r30, 0xF0	; 240
    5086:	fe 27       	eor	r31, r30
    5088:	e0 52       	subi	r30, 0x20	; 32
    508a:	f8 4f       	sbci	r31, 0xF8	; 248
    508c:	80 91 bf 03 	lds	r24, 0x03BF
    5090:	90 91 c0 03 	lds	r25, 0x03C0
    5094:	95 87       	std	Z+13, r25	; 0x0d
    5096:	84 87       	std	Z+12, r24	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    5098:	37 87       	std	Z+15, r19	; 0x0f
    509a:	26 87       	std	Z+14, r18	; 0x0e
    509c:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    509e:	e0 91 c9 07 	lds	r30, 0x07C9
    50a2:	e2 30       	cpi	r30, 0x02	; 2
    50a4:	c8 f1       	brcs	.+114    	; 0x5118 <updateOdomData+0x1ec>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    50a6:	4e 2f       	mov	r20, r30
    50a8:	50 e0       	ldi	r21, 0x00	; 0
    50aa:	fa 01       	movw	r30, r20
    50ac:	e2 95       	swap	r30
    50ae:	f2 95       	swap	r31
    50b0:	f0 7f       	andi	r31, 0xF0	; 240
    50b2:	fe 27       	eor	r31, r30
    50b4:	e0 7f       	andi	r30, 0xF0	; 240
    50b6:	fe 27       	eor	r31, r30
    50b8:	e0 53       	subi	r30, 0x30	; 48
    50ba:	f8 4f       	sbci	r31, 0xF8	; 248
    50bc:	82 85       	ldd	r24, Z+10	; 0x0a
    50be:	93 85       	ldd	r25, Z+11	; 0x0b
    50c0:	20 91 84 0a 	lds	r18, 0x0A84
    50c4:	30 91 85 0a 	lds	r19, 0x0A85
    50c8:	82 17       	cp	r24, r18
    50ca:	93 07       	cpc	r25, r19
    50cc:	34 f0       	brlt	.+12     	; 0x50da <updateOdomData+0x1ae>
                tempVel = calibration[calibVelIndex-2][5]+1;
    50ce:	01 96       	adiw	r24, 0x01	; 1
    50d0:	90 93 85 0a 	sts	0x0A85, r25
    50d4:	80 93 84 0a 	sts	0x0A84, r24
    50d8:	9c 01       	movw	r18, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    50da:	fa 01       	movw	r30, r20
    50dc:	31 97       	sbiw	r30, 0x01	; 1
    50de:	ee 0f       	add	r30, r30
    50e0:	ff 1f       	adc	r31, r31
    50e2:	ee 0f       	add	r30, r30
    50e4:	ff 1f       	adc	r31, r31
    50e6:	ee 0f       	add	r30, r30
    50e8:	ff 1f       	adc	r31, r31
    50ea:	ee 0f       	add	r30, r30
    50ec:	ff 1f       	adc	r31, r31
    50ee:	df 01       	movw	r26, r30
    50f0:	a8 50       	subi	r26, 0x08	; 8
    50f2:	b8 4f       	sbci	r27, 0xF8	; 248
    50f4:	80 91 bd 03 	lds	r24, 0x03BD
    50f8:	90 91 be 03 	lds	r25, 0x03BE
    50fc:	8d 93       	st	X+, r24
    50fe:	9c 93       	st	X, r25
        calibration[calibVelIndex-1][5] = tempVel;
    5100:	e0 51       	subi	r30, 0x10	; 16
    5102:	f8 4f       	sbci	r31, 0xF8	; 248
    5104:	33 87       	std	Z+11, r19	; 0x0b
    5106:	22 87       	std	Z+10, r18	; 0x0a
    5108:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    510a:	4e 2f       	mov	r20, r30
    510c:	50 e0       	ldi	r21, 0x00	; 0
    510e:	20 91 84 0a 	lds	r18, 0x0A84
    5112:	30 91 85 0a 	lds	r19, 0x0A85
    5116:	75 cf       	rjmp	.-278    	; 0x5002 <updateOdomData+0xd6>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    5118:	4e 2f       	mov	r20, r30
    511a:	50 e0       	ldi	r21, 0x00	; 0
    511c:	20 91 84 0a 	lds	r18, 0x0A84
    5120:	30 91 85 0a 	lds	r19, 0x0A85
    5124:	da cf       	rjmp	.-76     	; 0x50da <updateOdomData+0x1ae>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    5126:	4e 2f       	mov	r20, r30
    5128:	50 e0       	ldi	r21, 0x00	; 0
    512a:	20 91 84 0a 	lds	r18, 0x0A84
    512e:	30 91 85 0a 	lds	r19, 0x0A85
    5132:	a3 cf       	rjmp	.-186    	; 0x507a <updateOdomData+0x14e>

00005134 <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    5134:	8f 92       	push	r8
    5136:	9f 92       	push	r9
    5138:	af 92       	push	r10
    513a:	bf 92       	push	r11
    513c:	cf 92       	push	r12
    513e:	df 92       	push	r13
    5140:	ef 92       	push	r14
    5142:	ff 92       	push	r15
    5144:	0f 93       	push	r16
    5146:	1f 93       	push	r17
    5148:	cf 93       	push	r28
    514a:	df 93       	push	r29
    514c:	46 2f       	mov	r20, r22
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    514e:	9c 01       	movw	r18, r24
    5150:	22 0f       	add	r18, r18
    5152:	33 1f       	adc	r19, r19
    5154:	22 0f       	add	r18, r18
    5156:	33 1f       	adc	r19, r19
    5158:	28 0f       	add	r18, r24
    515a:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    515c:	21 15       	cp	r18, r1
    515e:	31 05       	cpc	r19, r1
    5160:	09 f4       	brne	.+2      	; 0x5164 <getInputFromSpeed+0x30>
    5162:	92 c0       	rjmp	.+292    	; 0x5288 <getInputFromSpeed+0x154>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    5164:	86 2f       	mov	r24, r22
    5166:	82 50       	subi	r24, 0x02	; 2
    5168:	82 30       	cpi	r24, 0x02	; 2
    516a:	08 f4       	brcc	.+2      	; 0x516e <getInputFromSpeed+0x3a>
    516c:	9d c0       	rjmp	.+314    	; 0x52a8 <getInputFromSpeed+0x174>
    516e:	44 23       	and	r20, r20
    5170:	09 f0       	breq	.+2      	; 0x5174 <getInputFromSpeed+0x40>
    5172:	77 c0       	rjmp	.+238    	; 0x5262 <getInputFromSpeed+0x12e>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5174:	60 91 f2 07 	lds	r22, 0x07F2
    5178:	70 91 f3 07 	lds	r23, 0x07F3
    517c:	62 17       	cp	r22, r18
    517e:	73 07       	cpc	r23, r19
    5180:	0c f0       	brlt	.+2      	; 0x5184 <getInputFromSpeed+0x50>
    5182:	99 c0       	rjmp	.+306    	; 0x52b6 <getInputFromSpeed+0x182>
    5184:	80 91 02 08 	lds	r24, 0x0802
    5188:	90 91 03 08 	lds	r25, 0x0803
    518c:	82 17       	cp	r24, r18
    518e:	93 07       	cpc	r25, r19
    5190:	0c f0       	brlt	.+2      	; 0x5194 <getInputFromSpeed+0x60>
    5192:	1e c2       	rjmp	.+1084   	; 0x55d0 <getInputFromSpeed+0x49c>
    5194:	80 91 12 08 	lds	r24, 0x0812
    5198:	90 91 13 08 	lds	r25, 0x0813
    519c:	82 17       	cp	r24, r18
    519e:	93 07       	cpc	r25, r19
    51a0:	0c f0       	brlt	.+2      	; 0x51a4 <getInputFromSpeed+0x70>
    51a2:	66 c3       	rjmp	.+1740   	; 0x5870 <getInputFromSpeed+0x73c>
    51a4:	80 91 22 08 	lds	r24, 0x0822
    51a8:	90 91 23 08 	lds	r25, 0x0823
    51ac:	82 17       	cp	r24, r18
    51ae:	93 07       	cpc	r25, r19
    51b0:	0c f0       	brlt	.+2      	; 0x51b4 <getInputFromSpeed+0x80>
    51b2:	5b c3       	rjmp	.+1718   	; 0x586a <getInputFromSpeed+0x736>
    51b4:	80 91 32 08 	lds	r24, 0x0832
    51b8:	90 91 33 08 	lds	r25, 0x0833
    51bc:	82 17       	cp	r24, r18
    51be:	93 07       	cpc	r25, r19
    51c0:	0c f0       	brlt	.+2      	; 0x51c4 <getInputFromSpeed+0x90>
    51c2:	59 c3       	rjmp	.+1714   	; 0x5876 <getInputFromSpeed+0x742>
    51c4:	80 91 42 08 	lds	r24, 0x0842
    51c8:	90 91 43 08 	lds	r25, 0x0843
    51cc:	82 17       	cp	r24, r18
    51ce:	93 07       	cpc	r25, r19
    51d0:	0c f0       	brlt	.+2      	; 0x51d4 <getInputFromSpeed+0xa0>
    51d2:	54 c3       	rjmp	.+1704   	; 0x587c <getInputFromSpeed+0x748>
    51d4:	80 91 52 08 	lds	r24, 0x0852
    51d8:	90 91 53 08 	lds	r25, 0x0853
    51dc:	82 17       	cp	r24, r18
    51de:	93 07       	cpc	r25, r19
    51e0:	0c f0       	brlt	.+2      	; 0x51e4 <getInputFromSpeed+0xb0>
    51e2:	52 c3       	rjmp	.+1700   	; 0x5888 <getInputFromSpeed+0x754>
    51e4:	80 91 62 08 	lds	r24, 0x0862
    51e8:	90 91 63 08 	lds	r25, 0x0863
    51ec:	82 17       	cp	r24, r18
    51ee:	93 07       	cpc	r25, r19
    51f0:	0c f0       	brlt	.+2      	; 0x51f4 <getInputFromSpeed+0xc0>
    51f2:	47 c3       	rjmp	.+1678   	; 0x5882 <getInputFromSpeed+0x74e>
    51f4:	80 91 72 08 	lds	r24, 0x0872
    51f8:	90 91 73 08 	lds	r25, 0x0873
    51fc:	82 17       	cp	r24, r18
    51fe:	93 07       	cpc	r25, r19
    5200:	0c f0       	brlt	.+2      	; 0x5204 <getInputFromSpeed+0xd0>
    5202:	45 c3       	rjmp	.+1674   	; 0x588e <getInputFromSpeed+0x75a>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    5204:	b9 01       	movw	r22, r18
    5206:	88 27       	eor	r24, r24
    5208:	77 fd       	sbrc	r23, 7
    520a:	80 95       	com	r24
    520c:	98 2f       	mov	r25, r24
    520e:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5212:	7b 01       	movw	r14, r22
    5214:	8c 01       	movw	r16, r24
    5216:	60 91 70 08 	lds	r22, 0x0870
    521a:	70 91 71 08 	lds	r23, 0x0871
    521e:	88 27       	eor	r24, r24
    5220:	77 fd       	sbrc	r23, 7
    5222:	80 95       	com	r24
    5224:	98 2f       	mov	r25, r24
    5226:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    522a:	9b 01       	movw	r18, r22
    522c:	ac 01       	movw	r20, r24
    522e:	c8 01       	movw	r24, r16
    5230:	b7 01       	movw	r22, r14
    5232:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    5236:	7b 01       	movw	r14, r22
    5238:	8c 01       	movw	r16, r24
    523a:	60 91 72 08 	lds	r22, 0x0872
    523e:	70 91 73 08 	lds	r23, 0x0873
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    5242:	88 27       	eor	r24, r24
    5244:	77 fd       	sbrc	r23, 7
    5246:	80 95       	com	r24
    5248:	98 2f       	mov	r25, r24
    524a:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    524e:	9b 01       	movw	r18, r22
    5250:	ac 01       	movw	r20, r24
    5252:	c8 01       	movw	r24, r16
    5254:	b7 01       	movw	r22, r14
    5256:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    525a:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    525e:	9b 01       	movw	r18, r22
    5260:	15 c0       	rjmp	.+42     	; 0x528c <getInputFromSpeed+0x158>
    5262:	43 30       	cpi	r20, 0x03	; 3
    5264:	c1 f1       	breq	.+112    	; 0x52d6 <getInputFromSpeed+0x1a2>
    5266:	42 30       	cpi	r20, 0x02	; 2
    5268:	09 f4       	brne	.+2      	; 0x526c <getInputFromSpeed+0x138>
    526a:	24 c1       	rjmp	.+584    	; 0x54b4 <getInputFromSpeed+0x380>
    526c:	41 30       	cpi	r20, 0x01	; 1
    526e:	09 f4       	brne	.+2      	; 0x5272 <getInputFromSpeed+0x13e>
    5270:	ac c0       	rjmp	.+344    	; 0x53ca <getInputFromSpeed+0x296>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    5272:	44 23       	and	r20, r20
    5274:	39 f2       	breq	.-114    	; 0x5204 <getInputFromSpeed+0xd0>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    5276:	41 30       	cpi	r20, 0x01	; 1
    5278:	09 f4       	brne	.+2      	; 0x527c <getInputFromSpeed+0x148>
    527a:	ef c0       	rjmp	.+478    	; 0x545a <getInputFromSpeed+0x326>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    527c:	42 30       	cpi	r20, 0x02	; 2
    527e:	09 f4       	brne	.+2      	; 0x5282 <getInputFromSpeed+0x14e>
    5280:	61 c1       	rjmp	.+706    	; 0x5544 <getInputFromSpeed+0x410>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5282:	43 30       	cpi	r20, 0x03	; 3
    5284:	09 f4       	brne	.+2      	; 0x5288 <getInputFromSpeed+0x154>
    5286:	6f c0       	rjmp	.+222    	; 0x5366 <getInputFromSpeed+0x232>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
            temp = -temp;
    5288:	20 e0       	ldi	r18, 0x00	; 0
    528a:	30 e0       	ldi	r19, 0x00	; 0
        }        
    }
    
    return temp;
}
    528c:	c9 01       	movw	r24, r18
    528e:	df 91       	pop	r29
    5290:	cf 91       	pop	r28
    5292:	1f 91       	pop	r17
    5294:	0f 91       	pop	r16
    5296:	ff 90       	pop	r15
    5298:	ef 90       	pop	r14
    529a:	df 90       	pop	r13
    529c:	cf 90       	pop	r12
    529e:	bf 90       	pop	r11
    52a0:	af 90       	pop	r10
    52a2:	9f 90       	pop	r9
    52a4:	8f 90       	pop	r8
    52a6:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    52a8:	30 95       	com	r19
    52aa:	21 95       	neg	r18
    52ac:	3f 4f       	sbci	r19, 0xFF	; 255
    52ae:	44 23       	and	r20, r20
    52b0:	09 f4       	brne	.+2      	; 0x52b4 <getInputFromSpeed+0x180>
    52b2:	60 cf       	rjmp	.-320    	; 0x5174 <getInputFromSpeed+0x40>
    52b4:	d6 cf       	rjmp	.-84     	; 0x5262 <getInputFromSpeed+0x12e>
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
    52b6:	80 91 f0 07 	lds	r24, 0x07F0
    52ba:	90 91 f1 07 	lds	r25, 0x07F1
    52be:	ac 01       	movw	r20, r24
    52c0:	24 9f       	mul	r18, r20
    52c2:	c0 01       	movw	r24, r0
    52c4:	25 9f       	mul	r18, r21
    52c6:	90 0d       	add	r25, r0
    52c8:	34 9f       	mul	r19, r20
    52ca:	90 0d       	add	r25, r0
    52cc:	11 24       	eor	r1, r1
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    52ce:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
    52d2:	9b 01       	movw	r18, r22
    52d4:	db cf       	rjmp	.-74     	; 0x528c <getInputFromSpeed+0x158>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    52d6:	60 91 fe 07 	lds	r22, 0x07FE
    52da:	70 91 ff 07 	lds	r23, 0x07FF
    52de:	62 17       	cp	r22, r18
    52e0:	73 07       	cpc	r23, r19
    52e2:	0c f0       	brlt	.+2      	; 0x52e6 <getInputFromSpeed+0x1b2>
    52e4:	62 c1       	rjmp	.+708    	; 0x55aa <getInputFromSpeed+0x476>
    52e6:	80 91 0e 08 	lds	r24, 0x080E
    52ea:	90 91 0f 08 	lds	r25, 0x080F
    52ee:	82 17       	cp	r24, r18
    52f0:	93 07       	cpc	r25, r19
    52f2:	0c f0       	brlt	.+2      	; 0x52f6 <getInputFromSpeed+0x1c2>
    52f4:	6d c1       	rjmp	.+730    	; 0x55d0 <getInputFromSpeed+0x49c>
    52f6:	80 91 1e 08 	lds	r24, 0x081E
    52fa:	90 91 1f 08 	lds	r25, 0x081F
    52fe:	82 17       	cp	r24, r18
    5300:	93 07       	cpc	r25, r19
    5302:	0c f0       	brlt	.+2      	; 0x5306 <getInputFromSpeed+0x1d2>
    5304:	b5 c2       	rjmp	.+1386   	; 0x5870 <getInputFromSpeed+0x73c>
    5306:	80 91 2e 08 	lds	r24, 0x082E
    530a:	90 91 2f 08 	lds	r25, 0x082F
    530e:	82 17       	cp	r24, r18
    5310:	93 07       	cpc	r25, r19
    5312:	0c f0       	brlt	.+2      	; 0x5316 <getInputFromSpeed+0x1e2>
    5314:	aa c2       	rjmp	.+1364   	; 0x586a <getInputFromSpeed+0x736>
    5316:	80 91 3e 08 	lds	r24, 0x083E
    531a:	90 91 3f 08 	lds	r25, 0x083F
    531e:	82 17       	cp	r24, r18
    5320:	93 07       	cpc	r25, r19
    5322:	0c f0       	brlt	.+2      	; 0x5326 <getInputFromSpeed+0x1f2>
    5324:	a8 c2       	rjmp	.+1360   	; 0x5876 <getInputFromSpeed+0x742>
    5326:	80 91 4e 08 	lds	r24, 0x084E
    532a:	90 91 4f 08 	lds	r25, 0x084F
    532e:	82 17       	cp	r24, r18
    5330:	93 07       	cpc	r25, r19
    5332:	0c f0       	brlt	.+2      	; 0x5336 <getInputFromSpeed+0x202>
    5334:	a3 c2       	rjmp	.+1350   	; 0x587c <getInputFromSpeed+0x748>
    5336:	80 91 5e 08 	lds	r24, 0x085E
    533a:	90 91 5f 08 	lds	r25, 0x085F
    533e:	82 17       	cp	r24, r18
    5340:	93 07       	cpc	r25, r19
    5342:	0c f0       	brlt	.+2      	; 0x5346 <getInputFromSpeed+0x212>
    5344:	a1 c2       	rjmp	.+1346   	; 0x5888 <getInputFromSpeed+0x754>
    5346:	80 91 6e 08 	lds	r24, 0x086E
    534a:	90 91 6f 08 	lds	r25, 0x086F
    534e:	82 17       	cp	r24, r18
    5350:	93 07       	cpc	r25, r19
    5352:	0c f0       	brlt	.+2      	; 0x5356 <getInputFromSpeed+0x222>
    5354:	96 c2       	rjmp	.+1324   	; 0x5882 <getInputFromSpeed+0x74e>
    5356:	80 91 7e 08 	lds	r24, 0x087E
    535a:	90 91 7f 08 	lds	r25, 0x087F
    535e:	82 17       	cp	r24, r18
    5360:	93 07       	cpc	r25, r19
    5362:	0c f0       	brlt	.+2      	; 0x5366 <getInputFromSpeed+0x232>
    5364:	94 c2       	rjmp	.+1320   	; 0x588e <getInputFromSpeed+0x75a>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5366:	b9 01       	movw	r22, r18
    5368:	88 27       	eor	r24, r24
    536a:	77 fd       	sbrc	r23, 7
    536c:	80 95       	com	r24
    536e:	98 2f       	mov	r25, r24
    5370:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5374:	7b 01       	movw	r14, r22
    5376:	8c 01       	movw	r16, r24
    5378:	60 91 7c 08 	lds	r22, 0x087C
    537c:	70 91 7d 08 	lds	r23, 0x087D
    5380:	88 27       	eor	r24, r24
    5382:	77 fd       	sbrc	r23, 7
    5384:	80 95       	com	r24
    5386:	98 2f       	mov	r25, r24
    5388:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    538c:	9b 01       	movw	r18, r22
    538e:	ac 01       	movw	r20, r24
    5390:	c8 01       	movw	r24, r16
    5392:	b7 01       	movw	r22, r14
    5394:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    5398:	7b 01       	movw	r14, r22
    539a:	8c 01       	movw	r16, r24
    539c:	60 91 7e 08 	lds	r22, 0x087E
    53a0:	70 91 7f 08 	lds	r23, 0x087F
    53a4:	88 27       	eor	r24, r24
    53a6:	77 fd       	sbrc	r23, 7
    53a8:	80 95       	com	r24
    53aa:	98 2f       	mov	r25, r24
    53ac:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    53b0:	9b 01       	movw	r18, r22
    53b2:	ac 01       	movw	r20, r24
    53b4:	c8 01       	movw	r24, r16
    53b6:	b7 01       	movw	r22, r14
    53b8:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    53bc:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
            temp = -temp;
    53c0:	22 27       	eor	r18, r18
    53c2:	33 27       	eor	r19, r19
    53c4:	26 1b       	sub	r18, r22
    53c6:	37 0b       	sbc	r19, r23
    53c8:	61 cf       	rjmp	.-318    	; 0x528c <getInputFromSpeed+0x158>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    53ca:	60 91 f6 07 	lds	r22, 0x07F6
    53ce:	70 91 f7 07 	lds	r23, 0x07F7
    53d2:	62 17       	cp	r22, r18
    53d4:	73 07       	cpc	r23, r19
    53d6:	0c f0       	brlt	.+2      	; 0x53da <getInputFromSpeed+0x2a6>
    53d8:	60 c0       	rjmp	.+192    	; 0x549a <getInputFromSpeed+0x366>
    53da:	80 91 06 08 	lds	r24, 0x0806
    53de:	90 91 07 08 	lds	r25, 0x0807
    53e2:	82 17       	cp	r24, r18
    53e4:	93 07       	cpc	r25, r19
    53e6:	0c f0       	brlt	.+2      	; 0x53ea <getInputFromSpeed+0x2b6>
    53e8:	f3 c0       	rjmp	.+486    	; 0x55d0 <getInputFromSpeed+0x49c>
    53ea:	80 91 16 08 	lds	r24, 0x0816
    53ee:	90 91 17 08 	lds	r25, 0x0817
    53f2:	82 17       	cp	r24, r18
    53f4:	93 07       	cpc	r25, r19
    53f6:	0c f0       	brlt	.+2      	; 0x53fa <getInputFromSpeed+0x2c6>
    53f8:	3b c2       	rjmp	.+1142   	; 0x5870 <getInputFromSpeed+0x73c>
    53fa:	80 91 26 08 	lds	r24, 0x0826
    53fe:	90 91 27 08 	lds	r25, 0x0827
    5402:	82 17       	cp	r24, r18
    5404:	93 07       	cpc	r25, r19
    5406:	0c f0       	brlt	.+2      	; 0x540a <getInputFromSpeed+0x2d6>
    5408:	30 c2       	rjmp	.+1120   	; 0x586a <getInputFromSpeed+0x736>
    540a:	80 91 36 08 	lds	r24, 0x0836
    540e:	90 91 37 08 	lds	r25, 0x0837
    5412:	82 17       	cp	r24, r18
    5414:	93 07       	cpc	r25, r19
    5416:	0c f0       	brlt	.+2      	; 0x541a <getInputFromSpeed+0x2e6>
    5418:	2e c2       	rjmp	.+1116   	; 0x5876 <getInputFromSpeed+0x742>
    541a:	80 91 46 08 	lds	r24, 0x0846
    541e:	90 91 47 08 	lds	r25, 0x0847
    5422:	82 17       	cp	r24, r18
    5424:	93 07       	cpc	r25, r19
    5426:	0c f0       	brlt	.+2      	; 0x542a <getInputFromSpeed+0x2f6>
    5428:	29 c2       	rjmp	.+1106   	; 0x587c <getInputFromSpeed+0x748>
    542a:	80 91 56 08 	lds	r24, 0x0856
    542e:	90 91 57 08 	lds	r25, 0x0857
    5432:	82 17       	cp	r24, r18
    5434:	93 07       	cpc	r25, r19
    5436:	0c f0       	brlt	.+2      	; 0x543a <getInputFromSpeed+0x306>
    5438:	27 c2       	rjmp	.+1102   	; 0x5888 <getInputFromSpeed+0x754>
    543a:	80 91 66 08 	lds	r24, 0x0866
    543e:	90 91 67 08 	lds	r25, 0x0867
    5442:	82 17       	cp	r24, r18
    5444:	93 07       	cpc	r25, r19
    5446:	0c f0       	brlt	.+2      	; 0x544a <getInputFromSpeed+0x316>
    5448:	1c c2       	rjmp	.+1080   	; 0x5882 <getInputFromSpeed+0x74e>
    544a:	80 91 76 08 	lds	r24, 0x0876
    544e:	90 91 77 08 	lds	r25, 0x0877
    5452:	82 17       	cp	r24, r18
    5454:	93 07       	cpc	r25, r19
    5456:	0c f0       	brlt	.+2      	; 0x545a <getInputFromSpeed+0x326>
    5458:	1a c2       	rjmp	.+1076   	; 0x588e <getInputFromSpeed+0x75a>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    545a:	b9 01       	movw	r22, r18
    545c:	88 27       	eor	r24, r24
    545e:	77 fd       	sbrc	r23, 7
    5460:	80 95       	com	r24
    5462:	98 2f       	mov	r25, r24
    5464:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5468:	7b 01       	movw	r14, r22
    546a:	8c 01       	movw	r16, r24
    546c:	60 91 74 08 	lds	r22, 0x0874
    5470:	70 91 75 08 	lds	r23, 0x0875
    5474:	88 27       	eor	r24, r24
    5476:	77 fd       	sbrc	r23, 7
    5478:	80 95       	com	r24
    547a:	98 2f       	mov	r25, r24
    547c:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5480:	9b 01       	movw	r18, r22
    5482:	ac 01       	movw	r20, r24
    5484:	c8 01       	movw	r24, r16
    5486:	b7 01       	movw	r22, r14
    5488:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    548c:	7b 01       	movw	r14, r22
    548e:	8c 01       	movw	r16, r24
    5490:	60 91 76 08 	lds	r22, 0x0876
    5494:	70 91 77 08 	lds	r23, 0x0877
    5498:	d4 ce       	rjmp	.-600    	; 0x5242 <getInputFromSpeed+0x10e>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    549a:	80 91 f4 07 	lds	r24, 0x07F4
    549e:	90 91 f5 07 	lds	r25, 0x07F5
    54a2:	fc 01       	movw	r30, r24
    54a4:	2e 9f       	mul	r18, r30
    54a6:	c0 01       	movw	r24, r0
    54a8:	2f 9f       	mul	r18, r31
    54aa:	90 0d       	add	r25, r0
    54ac:	3e 9f       	mul	r19, r30
    54ae:	90 0d       	add	r25, r0
    54b0:	11 24       	eor	r1, r1
    54b2:	0d cf       	rjmp	.-486    	; 0x52ce <getInputFromSpeed+0x19a>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    54b4:	60 91 fa 07 	lds	r22, 0x07FA
    54b8:	70 91 fb 07 	lds	r23, 0x07FB
    54bc:	62 17       	cp	r22, r18
    54be:	73 07       	cpc	r23, r19
    54c0:	0c f0       	brlt	.+2      	; 0x54c4 <getInputFromSpeed+0x390>
    54c2:	60 c0       	rjmp	.+192    	; 0x5584 <getInputFromSpeed+0x450>
    54c4:	80 91 0a 08 	lds	r24, 0x080A
    54c8:	90 91 0b 08 	lds	r25, 0x080B
    54cc:	82 17       	cp	r24, r18
    54ce:	93 07       	cpc	r25, r19
    54d0:	0c f0       	brlt	.+2      	; 0x54d4 <getInputFromSpeed+0x3a0>
    54d2:	7e c0       	rjmp	.+252    	; 0x55d0 <getInputFromSpeed+0x49c>
    54d4:	80 91 1a 08 	lds	r24, 0x081A
    54d8:	90 91 1b 08 	lds	r25, 0x081B
    54dc:	82 17       	cp	r24, r18
    54de:	93 07       	cpc	r25, r19
    54e0:	0c f0       	brlt	.+2      	; 0x54e4 <getInputFromSpeed+0x3b0>
    54e2:	c6 c1       	rjmp	.+908    	; 0x5870 <getInputFromSpeed+0x73c>
    54e4:	80 91 2a 08 	lds	r24, 0x082A
    54e8:	90 91 2b 08 	lds	r25, 0x082B
    54ec:	82 17       	cp	r24, r18
    54ee:	93 07       	cpc	r25, r19
    54f0:	0c f0       	brlt	.+2      	; 0x54f4 <getInputFromSpeed+0x3c0>
    54f2:	bb c1       	rjmp	.+886    	; 0x586a <getInputFromSpeed+0x736>
    54f4:	80 91 3a 08 	lds	r24, 0x083A
    54f8:	90 91 3b 08 	lds	r25, 0x083B
    54fc:	82 17       	cp	r24, r18
    54fe:	93 07       	cpc	r25, r19
    5500:	0c f0       	brlt	.+2      	; 0x5504 <getInputFromSpeed+0x3d0>
    5502:	b9 c1       	rjmp	.+882    	; 0x5876 <getInputFromSpeed+0x742>
    5504:	80 91 4a 08 	lds	r24, 0x084A
    5508:	90 91 4b 08 	lds	r25, 0x084B
    550c:	82 17       	cp	r24, r18
    550e:	93 07       	cpc	r25, r19
    5510:	0c f0       	brlt	.+2      	; 0x5514 <getInputFromSpeed+0x3e0>
    5512:	b4 c1       	rjmp	.+872    	; 0x587c <getInputFromSpeed+0x748>
    5514:	80 91 5a 08 	lds	r24, 0x085A
    5518:	90 91 5b 08 	lds	r25, 0x085B
    551c:	82 17       	cp	r24, r18
    551e:	93 07       	cpc	r25, r19
    5520:	0c f0       	brlt	.+2      	; 0x5524 <getInputFromSpeed+0x3f0>
    5522:	b2 c1       	rjmp	.+868    	; 0x5888 <getInputFromSpeed+0x754>
    5524:	80 91 6a 08 	lds	r24, 0x086A
    5528:	90 91 6b 08 	lds	r25, 0x086B
    552c:	82 17       	cp	r24, r18
    552e:	93 07       	cpc	r25, r19
    5530:	0c f0       	brlt	.+2      	; 0x5534 <getInputFromSpeed+0x400>
    5532:	a7 c1       	rjmp	.+846    	; 0x5882 <getInputFromSpeed+0x74e>
    5534:	80 91 7a 08 	lds	r24, 0x087A
    5538:	90 91 7b 08 	lds	r25, 0x087B
    553c:	82 17       	cp	r24, r18
    553e:	93 07       	cpc	r25, r19
    5540:	0c f0       	brlt	.+2      	; 0x5544 <getInputFromSpeed+0x410>
    5542:	a5 c1       	rjmp	.+842    	; 0x588e <getInputFromSpeed+0x75a>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    5544:	b9 01       	movw	r22, r18
    5546:	88 27       	eor	r24, r24
    5548:	77 fd       	sbrc	r23, 7
    554a:	80 95       	com	r24
    554c:	98 2f       	mov	r25, r24
    554e:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5552:	7b 01       	movw	r14, r22
    5554:	8c 01       	movw	r16, r24
    5556:	60 91 78 08 	lds	r22, 0x0878
    555a:	70 91 79 08 	lds	r23, 0x0879
    555e:	88 27       	eor	r24, r24
    5560:	77 fd       	sbrc	r23, 7
    5562:	80 95       	com	r24
    5564:	98 2f       	mov	r25, r24
    5566:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    556a:	9b 01       	movw	r18, r22
    556c:	ac 01       	movw	r20, r24
    556e:	c8 01       	movw	r24, r16
    5570:	b7 01       	movw	r22, r14
    5572:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    5576:	7b 01       	movw	r14, r22
    5578:	8c 01       	movw	r16, r24
    557a:	60 91 7a 08 	lds	r22, 0x087A
    557e:	70 91 7b 08 	lds	r23, 0x087B
    5582:	10 cf       	rjmp	.-480    	; 0x53a4 <getInputFromSpeed+0x270>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    5584:	80 91 f8 07 	lds	r24, 0x07F8
    5588:	90 91 f9 07 	lds	r25, 0x07F9
    558c:	ac 01       	movw	r20, r24
    558e:	24 9f       	mul	r18, r20
    5590:	c0 01       	movw	r24, r0
    5592:	25 9f       	mul	r18, r21
    5594:	90 0d       	add	r25, r0
    5596:	34 9f       	mul	r19, r20
    5598:	90 0d       	add	r25, r0
    559a:	11 24       	eor	r1, r1
    559c:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
            temp = -temp;
    55a0:	22 27       	eor	r18, r18
    55a2:	33 27       	eor	r19, r19
    55a4:	26 1b       	sub	r18, r22
    55a6:	37 0b       	sbc	r19, r23
    55a8:	71 ce       	rjmp	.-798    	; 0x528c <getInputFromSpeed+0x158>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
    55aa:	80 91 fc 07 	lds	r24, 0x07FC
    55ae:	90 91 fd 07 	lds	r25, 0x07FD
    55b2:	fc 01       	movw	r30, r24
    55b4:	2e 9f       	mul	r18, r30
    55b6:	c0 01       	movw	r24, r0
    55b8:	2f 9f       	mul	r18, r31
    55ba:	90 0d       	add	r25, r0
    55bc:	3e 9f       	mul	r19, r30
    55be:	90 0d       	add	r25, r0
    55c0:	11 24       	eor	r1, r1
    55c2:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
            temp = -temp;
    55c6:	22 27       	eor	r18, r18
    55c8:	33 27       	eor	r19, r19
    55ca:	26 1b       	sub	r18, r22
    55cc:	37 0b       	sbc	r19, r23
    55ce:	5e ce       	rjmp	.-836    	; 0x528c <getInputFromSpeed+0x158>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    55d0:	c1 e0       	ldi	r28, 0x01	; 1
    55d2:	d0 e0       	ldi	r29, 0x00	; 0
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    55d4:	c9 30       	cpi	r28, 0x09	; 9
    55d6:	d1 05       	cpc	r29, r1
    55d8:	09 f4       	brne	.+2      	; 0x55dc <getInputFromSpeed+0x4a8>
    55da:	4b ce       	rjmp	.-874    	; 0x5272 <getInputFromSpeed+0x13e>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    55dc:	44 23       	and	r20, r20
    55de:	09 f0       	breq	.+2      	; 0x55e2 <getInputFromSpeed+0x4ae>
    55e0:	59 c0       	rjmp	.+178    	; 0x5694 <getInputFromSpeed+0x560>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    55e2:	fe 01       	movw	r30, r28
    55e4:	31 97       	sbiw	r30, 0x01	; 1
    55e6:	ee 0f       	add	r30, r30
    55e8:	ff 1f       	adc	r31, r31
    55ea:	ee 0f       	add	r30, r30
    55ec:	ff 1f       	adc	r31, r31
    55ee:	ee 0f       	add	r30, r30
    55f0:	ff 1f       	adc	r31, r31
    55f2:	ee 0f       	add	r30, r30
    55f4:	ff 1f       	adc	r31, r31
    55f6:	df 01       	movw	r26, r30
    55f8:	ae 50       	subi	r26, 0x0E	; 14
    55fa:	b8 4f       	sbci	r27, 0xF8	; 248
    55fc:	cd 90       	ld	r12, X+
    55fe:	dc 90       	ld	r13, X
    5600:	e0 51       	subi	r30, 0x10	; 16
    5602:	f8 4f       	sbci	r31, 0xF8	; 248
    5604:	a0 80       	ld	r10, Z
    5606:	b1 80       	ldd	r11, Z+1	; 0x01
    5608:	2c 19       	sub	r18, r12
    560a:	3d 09       	sbc	r19, r13
    560c:	b9 01       	movw	r22, r18
    560e:	88 27       	eor	r24, r24
    5610:	77 fd       	sbrc	r23, 7
    5612:	80 95       	com	r24
    5614:	98 2f       	mov	r25, r24
    5616:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    561a:	7b 01       	movw	r14, r22
    561c:	8c 01       	movw	r16, r24
    561e:	fe 01       	movw	r30, r28
    5620:	e2 95       	swap	r30
    5622:	f2 95       	swap	r31
    5624:	f0 7f       	andi	r31, 0xF0	; 240
    5626:	fe 27       	eor	r31, r30
    5628:	e0 7f       	andi	r30, 0xF0	; 240
    562a:	fe 27       	eor	r31, r30
    562c:	e0 51       	subi	r30, 0x10	; 16
    562e:	f8 4f       	sbci	r31, 0xF8	; 248
    5630:	60 81       	ld	r22, Z
    5632:	71 81       	ldd	r23, Z+1	; 0x01
    5634:	6a 19       	sub	r22, r10
    5636:	7b 09       	sbc	r23, r11
    5638:	88 27       	eor	r24, r24
    563a:	77 fd       	sbrc	r23, 7
    563c:	80 95       	com	r24
    563e:	98 2f       	mov	r25, r24
    5640:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5644:	9b 01       	movw	r18, r22
    5646:	ac 01       	movw	r20, r24
    5648:	c8 01       	movw	r24, r16
    564a:	b7 01       	movw	r22, r14
    564c:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    5650:	7b 01       	movw	r14, r22
    5652:	8c 01       	movw	r16, r24
    5654:	cc 0f       	add	r28, r28
    5656:	dd 1f       	adc	r29, r29
    5658:	cc 0f       	add	r28, r28
    565a:	dd 1f       	adc	r29, r29
    565c:	cc 0f       	add	r28, r28
    565e:	dd 1f       	adc	r29, r29
    5660:	cc 0f       	add	r28, r28
    5662:	dd 1f       	adc	r29, r29
    5664:	ce 50       	subi	r28, 0x0E	; 14
    5666:	d8 4f       	sbci	r29, 0xF8	; 248
    5668:	68 81       	ld	r22, Y
    566a:	79 81       	ldd	r23, Y+1	; 0x01
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    566c:	6c 19       	sub	r22, r12
    566e:	7d 09       	sbc	r23, r13
    5670:	88 27       	eor	r24, r24
    5672:	77 fd       	sbrc	r23, 7
    5674:	80 95       	com	r24
    5676:	98 2f       	mov	r25, r24
    5678:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    567c:	9b 01       	movw	r18, r22
    567e:	ac 01       	movw	r20, r24
    5680:	c8 01       	movw	r24, r16
    5682:	b7 01       	movw	r22, r14
    5684:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    5688:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    568c:	9b 01       	movw	r18, r22
    568e:	2a 0d       	add	r18, r10
    5690:	3b 1d       	adc	r19, r11
    5692:	fc cd       	rjmp	.-1032   	; 0x528c <getInputFromSpeed+0x158>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    5694:	41 30       	cpi	r20, 0x01	; 1
    5696:	09 f4       	brne	.+2      	; 0x569a <getInputFromSpeed+0x566>
    5698:	4e c0       	rjmp	.+156    	; 0x5736 <getInputFromSpeed+0x602>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    569a:	42 30       	cpi	r20, 0x02	; 2
    569c:	09 f4       	brne	.+2      	; 0x56a0 <getInputFromSpeed+0x56c>
    569e:	89 c0       	rjmp	.+274    	; 0x57b2 <getInputFromSpeed+0x67e>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    56a0:	43 30       	cpi	r20, 0x03	; 3
    56a2:	09 f0       	breq	.+2      	; 0x56a6 <getInputFromSpeed+0x572>
    56a4:	f1 cd       	rjmp	.-1054   	; 0x5288 <getInputFromSpeed+0x154>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    56a6:	c2 95       	swap	r28
    56a8:	d2 95       	swap	r29
    56aa:	d0 7f       	andi	r29, 0xF0	; 240
    56ac:	dc 27       	eor	r29, r28
    56ae:	c0 7f       	andi	r28, 0xF0	; 240
    56b0:	dc 27       	eor	r29, r28
    56b2:	fe 01       	movw	r30, r28
    56b4:	e0 52       	subi	r30, 0x20	; 32
    56b6:	f8 4f       	sbci	r31, 0xF8	; 248
    56b8:	a6 84       	ldd	r10, Z+14	; 0x0e
    56ba:	b7 84       	ldd	r11, Z+15	; 0x0f
    56bc:	84 84       	ldd	r8, Z+12	; 0x0c
    56be:	95 84       	ldd	r9, Z+13	; 0x0d
    56c0:	2a 19       	sub	r18, r10
    56c2:	3b 09       	sbc	r19, r11
    56c4:	b9 01       	movw	r22, r18
    56c6:	88 27       	eor	r24, r24
    56c8:	77 fd       	sbrc	r23, 7
    56ca:	80 95       	com	r24
    56cc:	98 2f       	mov	r25, r24
    56ce:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    56d2:	6b 01       	movw	r12, r22
    56d4:	7c 01       	movw	r14, r24
    56d6:	8e 01       	movw	r16, r28
    56d8:	00 51       	subi	r16, 0x10	; 16
    56da:	18 4f       	sbci	r17, 0xF8	; 248
    56dc:	f8 01       	movw	r30, r16
    56de:	64 85       	ldd	r22, Z+12	; 0x0c
    56e0:	75 85       	ldd	r23, Z+13	; 0x0d
    56e2:	68 19       	sub	r22, r8
    56e4:	79 09       	sbc	r23, r9
    56e6:	88 27       	eor	r24, r24
    56e8:	77 fd       	sbrc	r23, 7
    56ea:	80 95       	com	r24
    56ec:	98 2f       	mov	r25, r24
    56ee:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    56f2:	9b 01       	movw	r18, r22
    56f4:	ac 01       	movw	r20, r24
    56f6:	c7 01       	movw	r24, r14
    56f8:	b6 01       	movw	r22, r12
    56fa:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    56fe:	6b 01       	movw	r12, r22
    5700:	7c 01       	movw	r14, r24
    5702:	f8 01       	movw	r30, r16
    5704:	66 85       	ldd	r22, Z+14	; 0x0e
    5706:	77 85       	ldd	r23, Z+15	; 0x0f
    5708:	6a 19       	sub	r22, r10
    570a:	7b 09       	sbc	r23, r11
    570c:	88 27       	eor	r24, r24
    570e:	77 fd       	sbrc	r23, 7
    5710:	80 95       	com	r24
    5712:	98 2f       	mov	r25, r24
    5714:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5718:	9b 01       	movw	r18, r22
    571a:	ac 01       	movw	r20, r24
    571c:	c7 01       	movw	r24, r14
    571e:	b6 01       	movw	r22, r12
    5720:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    5724:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    5728:	68 0d       	add	r22, r8
    572a:	79 1d       	adc	r23, r9
            temp = -temp;
    572c:	22 27       	eor	r18, r18
    572e:	33 27       	eor	r19, r19
    5730:	26 1b       	sub	r18, r22
    5732:	37 0b       	sbc	r19, r23
    5734:	ab cd       	rjmp	.-1194   	; 0x528c <getInputFromSpeed+0x158>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    5736:	fe 01       	movw	r30, r28
    5738:	31 97       	sbiw	r30, 0x01	; 1
    573a:	e2 95       	swap	r30
    573c:	f2 95       	swap	r31
    573e:	f0 7f       	andi	r31, 0xF0	; 240
    5740:	fe 27       	eor	r31, r30
    5742:	e0 7f       	andi	r30, 0xF0	; 240
    5744:	fe 27       	eor	r31, r30
    5746:	df 01       	movw	r26, r30
    5748:	a0 51       	subi	r26, 0x10	; 16
    574a:	b8 4f       	sbci	r27, 0xF8	; 248
    574c:	16 96       	adiw	r26, 0x06	; 6
    574e:	cd 90       	ld	r12, X+
    5750:	dc 90       	ld	r13, X
    5752:	17 97       	sbiw	r26, 0x07	; 7
    5754:	ec 50       	subi	r30, 0x0C	; 12
    5756:	f8 4f       	sbci	r31, 0xF8	; 248
    5758:	a0 80       	ld	r10, Z
    575a:	b1 80       	ldd	r11, Z+1	; 0x01
    575c:	2c 19       	sub	r18, r12
    575e:	3d 09       	sbc	r19, r13
    5760:	b9 01       	movw	r22, r18
    5762:	88 27       	eor	r24, r24
    5764:	77 fd       	sbrc	r23, 7
    5766:	80 95       	com	r24
    5768:	98 2f       	mov	r25, r24
    576a:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    576e:	7b 01       	movw	r14, r22
    5770:	8c 01       	movw	r16, r24
    5772:	c2 95       	swap	r28
    5774:	d2 95       	swap	r29
    5776:	d0 7f       	andi	r29, 0xF0	; 240
    5778:	dc 27       	eor	r29, r28
    577a:	c0 7f       	andi	r28, 0xF0	; 240
    577c:	dc 27       	eor	r29, r28
    577e:	fe 01       	movw	r30, r28
    5780:	ec 50       	subi	r30, 0x0C	; 12
    5782:	f8 4f       	sbci	r31, 0xF8	; 248
    5784:	60 81       	ld	r22, Z
    5786:	71 81       	ldd	r23, Z+1	; 0x01
    5788:	6a 19       	sub	r22, r10
    578a:	7b 09       	sbc	r23, r11
    578c:	88 27       	eor	r24, r24
    578e:	77 fd       	sbrc	r23, 7
    5790:	80 95       	com	r24
    5792:	98 2f       	mov	r25, r24
    5794:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5798:	9b 01       	movw	r18, r22
    579a:	ac 01       	movw	r20, r24
    579c:	c8 01       	movw	r24, r16
    579e:	b7 01       	movw	r22, r14
    57a0:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    57a4:	7b 01       	movw	r14, r22
    57a6:	8c 01       	movw	r16, r24
    57a8:	c0 51       	subi	r28, 0x10	; 16
    57aa:	d8 4f       	sbci	r29, 0xF8	; 248
    57ac:	6e 81       	ldd	r22, Y+6	; 0x06
    57ae:	7f 81       	ldd	r23, Y+7	; 0x07
    57b0:	5d cf       	rjmp	.-326    	; 0x566c <getInputFromSpeed+0x538>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    57b2:	de 01       	movw	r26, r28
    57b4:	11 97       	sbiw	r26, 0x01	; 1
    57b6:	fd 01       	movw	r30, r26
    57b8:	e2 95       	swap	r30
    57ba:	f2 95       	swap	r31
    57bc:	f0 7f       	andi	r31, 0xF0	; 240
    57be:	fe 27       	eor	r31, r30
    57c0:	e0 7f       	andi	r30, 0xF0	; 240
    57c2:	fe 27       	eor	r31, r30
    57c4:	e0 51       	subi	r30, 0x10	; 16
    57c6:	f8 4f       	sbci	r31, 0xF8	; 248
    57c8:	c2 84       	ldd	r12, Z+10	; 0x0a
    57ca:	d3 84       	ldd	r13, Z+11	; 0x0b
    57cc:	aa 0f       	add	r26, r26
    57ce:	bb 1f       	adc	r27, r27
    57d0:	aa 0f       	add	r26, r26
    57d2:	bb 1f       	adc	r27, r27
    57d4:	aa 0f       	add	r26, r26
    57d6:	bb 1f       	adc	r27, r27
    57d8:	aa 0f       	add	r26, r26
    57da:	bb 1f       	adc	r27, r27
    57dc:	a8 50       	subi	r26, 0x08	; 8
    57de:	b8 4f       	sbci	r27, 0xF8	; 248
    57e0:	ad 90       	ld	r10, X+
    57e2:	bc 90       	ld	r11, X
    57e4:	2c 19       	sub	r18, r12
    57e6:	3d 09       	sbc	r19, r13
    57e8:	b9 01       	movw	r22, r18
    57ea:	88 27       	eor	r24, r24
    57ec:	77 fd       	sbrc	r23, 7
    57ee:	80 95       	com	r24
    57f0:	98 2f       	mov	r25, r24
    57f2:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    57f6:	7b 01       	movw	r14, r22
    57f8:	8c 01       	movw	r16, r24
    57fa:	cc 0f       	add	r28, r28
    57fc:	dd 1f       	adc	r29, r29
    57fe:	cc 0f       	add	r28, r28
    5800:	dd 1f       	adc	r29, r29
    5802:	cc 0f       	add	r28, r28
    5804:	dd 1f       	adc	r29, r29
    5806:	cc 0f       	add	r28, r28
    5808:	dd 1f       	adc	r29, r29
    580a:	fe 01       	movw	r30, r28
    580c:	e8 50       	subi	r30, 0x08	; 8
    580e:	f8 4f       	sbci	r31, 0xF8	; 248
    5810:	60 81       	ld	r22, Z
    5812:	71 81       	ldd	r23, Z+1	; 0x01
    5814:	6a 19       	sub	r22, r10
    5816:	7b 09       	sbc	r23, r11
    5818:	88 27       	eor	r24, r24
    581a:	77 fd       	sbrc	r23, 7
    581c:	80 95       	com	r24
    581e:	98 2f       	mov	r25, r24
    5820:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5824:	9b 01       	movw	r18, r22
    5826:	ac 01       	movw	r20, r24
    5828:	c8 01       	movw	r24, r16
    582a:	b7 01       	movw	r22, r14
    582c:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    5830:	7b 01       	movw	r14, r22
    5832:	8c 01       	movw	r16, r24
    5834:	c0 51       	subi	r28, 0x10	; 16
    5836:	d8 4f       	sbci	r29, 0xF8	; 248
    5838:	6a 85       	ldd	r22, Y+10	; 0x0a
    583a:	7b 85       	ldd	r23, Y+11	; 0x0b
    583c:	6c 19       	sub	r22, r12
    583e:	7d 09       	sbc	r23, r13
    5840:	88 27       	eor	r24, r24
    5842:	77 fd       	sbrc	r23, 7
    5844:	80 95       	com	r24
    5846:	98 2f       	mov	r25, r24
    5848:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    584c:	9b 01       	movw	r18, r22
    584e:	ac 01       	movw	r20, r24
    5850:	c8 01       	movw	r24, r16
    5852:	b7 01       	movw	r22, r14
    5854:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    5858:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    585c:	6a 0d       	add	r22, r10
    585e:	7b 1d       	adc	r23, r11
            temp = -temp;
    5860:	22 27       	eor	r18, r18
    5862:	33 27       	eor	r19, r19
    5864:	26 1b       	sub	r18, r22
    5866:	37 0b       	sbc	r19, r23
    5868:	11 cd       	rjmp	.-1502   	; 0x528c <getInputFromSpeed+0x158>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    586a:	c3 e0       	ldi	r28, 0x03	; 3
    586c:	d0 e0       	ldi	r29, 0x00	; 0
    586e:	b2 ce       	rjmp	.-668    	; 0x55d4 <getInputFromSpeed+0x4a0>
    5870:	c2 e0       	ldi	r28, 0x02	; 2
    5872:	d0 e0       	ldi	r29, 0x00	; 0
    5874:	af ce       	rjmp	.-674    	; 0x55d4 <getInputFromSpeed+0x4a0>
    5876:	c4 e0       	ldi	r28, 0x04	; 4
    5878:	d0 e0       	ldi	r29, 0x00	; 0
    587a:	ac ce       	rjmp	.-680    	; 0x55d4 <getInputFromSpeed+0x4a0>
    587c:	c5 e0       	ldi	r28, 0x05	; 5
    587e:	d0 e0       	ldi	r29, 0x00	; 0
    5880:	a9 ce       	rjmp	.-686    	; 0x55d4 <getInputFromSpeed+0x4a0>
    5882:	c7 e0       	ldi	r28, 0x07	; 7
    5884:	d0 e0       	ldi	r29, 0x00	; 0
    5886:	a6 ce       	rjmp	.-692    	; 0x55d4 <getInputFromSpeed+0x4a0>
    5888:	c6 e0       	ldi	r28, 0x06	; 6
    588a:	d0 e0       	ldi	r29, 0x00	; 0
    588c:	a3 ce       	rjmp	.-698    	; 0x55d4 <getInputFromSpeed+0x4a0>
    588e:	c8 e0       	ldi	r28, 0x08	; 8
    5890:	d0 e0       	ldi	r29, 0x00	; 0
    5892:	a0 ce       	rjmp	.-704    	; 0x55d4 <getInputFromSpeed+0x4a0>

00005894 <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5894:	8f 92       	push	r8
    5896:	9f 92       	push	r9
    5898:	af 92       	push	r10
    589a:	bf 92       	push	r11
    589c:	cf 92       	push	r12
    589e:	df 92       	push	r13
    58a0:	ef 92       	push	r14
    58a2:	ff 92       	push	r15
    58a4:	0f 93       	push	r16
    58a6:	1f 93       	push	r17
    58a8:	cf 93       	push	r28
    58aa:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    58ac:	c0 91 e5 02 	lds	r28, 0x02E5
    58b0:	d0 91 e6 02 	lds	r29, 0x02E6
    58b4:	80 91 e7 02 	lds	r24, 0x02E7
    58b8:	90 91 e8 02 	lds	r25, 0x02E8
    58bc:	97 fd       	sbrc	r25, 7
    58be:	ea c0       	rjmp	.+468    	; 0x5a94 <getRightSpeedFromInput+0x200>
    58c0:	60 91 f4 07 	lds	r22, 0x07F4
    58c4:	70 91 f5 07 	lds	r23, 0x07F5
    58c8:	6c 17       	cp	r22, r28
    58ca:	7d 07       	cpc	r23, r29
    58cc:	0c f0       	brlt	.+2      	; 0x58d0 <getRightSpeedFromInput+0x3c>
    58ce:	67 c1       	rjmp	.+718    	; 0x5b9e <getRightSpeedFromInput+0x30a>
    58d0:	88 24       	eor	r8, r8
    58d2:	8a 94       	dec	r8
    58d4:	98 2c       	mov	r9, r8
    58d6:	80 91 04 08 	lds	r24, 0x0804
    58da:	90 91 05 08 	lds	r25, 0x0805
    58de:	8c 17       	cp	r24, r28
    58e0:	9d 07       	cpc	r25, r29
    58e2:	4c f0       	brlt	.+18     	; 0x58f6 <getRightSpeedFromInput+0x62>
    58e4:	80 e0       	ldi	r24, 0x00	; 0
    58e6:	9f ef       	ldi	r25, 0xFF	; 255
    58e8:	89 16       	cp	r8, r25
    58ea:	9f ef       	ldi	r25, 0xFF	; 255
    58ec:	99 06       	cpc	r9, r25
    58ee:	09 f4       	brne	.+2      	; 0x58f2 <getRightSpeedFromInput+0x5e>
    58f0:	75 c1       	rjmp	.+746    	; 0x5bdc <getRightSpeedFromInput+0x348>
    58f2:	88 2e       	mov	r8, r24
    58f4:	99 24       	eor	r9, r9
    58f6:	80 91 14 08 	lds	r24, 0x0814
    58fa:	90 91 15 08 	lds	r25, 0x0815
    58fe:	8c 17       	cp	r24, r28
    5900:	9d 07       	cpc	r25, r29
    5902:	34 f0       	brlt	.+12     	; 0x5910 <getRightSpeedFromInput+0x7c>
    5904:	ef ef       	ldi	r30, 0xFF	; 255
    5906:	8e 16       	cp	r8, r30
    5908:	ef ef       	ldi	r30, 0xFF	; 255
    590a:	9e 06       	cpc	r9, r30
    590c:	09 f4       	brne	.+2      	; 0x5910 <getRightSpeedFromInput+0x7c>
    590e:	62 c1       	rjmp	.+708    	; 0x5bd4 <getRightSpeedFromInput+0x340>
    5910:	80 91 24 08 	lds	r24, 0x0824
    5914:	90 91 25 08 	lds	r25, 0x0825
    5918:	8c 17       	cp	r24, r28
    591a:	9d 07       	cpc	r25, r29
    591c:	34 f0       	brlt	.+12     	; 0x592a <getRightSpeedFromInput+0x96>
    591e:	ff ef       	ldi	r31, 0xFF	; 255
    5920:	8f 16       	cp	r8, r31
    5922:	ff ef       	ldi	r31, 0xFF	; 255
    5924:	9f 06       	cpc	r9, r31
    5926:	09 f4       	brne	.+2      	; 0x592a <getRightSpeedFromInput+0x96>
    5928:	51 c1       	rjmp	.+674    	; 0x5bcc <getRightSpeedFromInput+0x338>
    592a:	80 91 34 08 	lds	r24, 0x0834
    592e:	90 91 35 08 	lds	r25, 0x0835
    5932:	8c 17       	cp	r24, r28
    5934:	9d 07       	cpc	r25, r29
    5936:	34 f0       	brlt	.+12     	; 0x5944 <getRightSpeedFromInput+0xb0>
    5938:	2f ef       	ldi	r18, 0xFF	; 255
    593a:	82 16       	cp	r8, r18
    593c:	2f ef       	ldi	r18, 0xFF	; 255
    593e:	92 06       	cpc	r9, r18
    5940:	09 f4       	brne	.+2      	; 0x5944 <getRightSpeedFromInput+0xb0>
    5942:	40 c1       	rjmp	.+640    	; 0x5bc4 <getRightSpeedFromInput+0x330>
    5944:	80 91 44 08 	lds	r24, 0x0844
    5948:	90 91 45 08 	lds	r25, 0x0845
    594c:	8c 17       	cp	r24, r28
    594e:	9d 07       	cpc	r25, r29
    5950:	34 f0       	brlt	.+12     	; 0x595e <getRightSpeedFromInput+0xca>
    5952:	3f ef       	ldi	r19, 0xFF	; 255
    5954:	83 16       	cp	r8, r19
    5956:	3f ef       	ldi	r19, 0xFF	; 255
    5958:	93 06       	cpc	r9, r19
    595a:	09 f4       	brne	.+2      	; 0x595e <getRightSpeedFromInput+0xca>
    595c:	2f c1       	rjmp	.+606    	; 0x5bbc <getRightSpeedFromInput+0x328>
    595e:	80 91 54 08 	lds	r24, 0x0854
    5962:	90 91 55 08 	lds	r25, 0x0855
    5966:	8c 17       	cp	r24, r28
    5968:	9d 07       	cpc	r25, r29
    596a:	34 f0       	brlt	.+12     	; 0x5978 <getRightSpeedFromInput+0xe4>
    596c:	8f ef       	ldi	r24, 0xFF	; 255
    596e:	88 16       	cp	r8, r24
    5970:	8f ef       	ldi	r24, 0xFF	; 255
    5972:	98 06       	cpc	r9, r24
    5974:	09 f4       	brne	.+2      	; 0x5978 <getRightSpeedFromInput+0xe4>
    5976:	1e c1       	rjmp	.+572    	; 0x5bb4 <getRightSpeedFromInput+0x320>
    5978:	80 91 64 08 	lds	r24, 0x0864
    597c:	90 91 65 08 	lds	r25, 0x0865
    5980:	8c 17       	cp	r24, r28
    5982:	9d 07       	cpc	r25, r29
    5984:	34 f0       	brlt	.+12     	; 0x5992 <getRightSpeedFromInput+0xfe>
    5986:	9f ef       	ldi	r25, 0xFF	; 255
    5988:	89 16       	cp	r8, r25
    598a:	9f ef       	ldi	r25, 0xFF	; 255
    598c:	99 06       	cpc	r9, r25
    598e:	09 f4       	brne	.+2      	; 0x5992 <getRightSpeedFromInput+0xfe>
    5990:	0d c1       	rjmp	.+538    	; 0x5bac <getRightSpeedFromInput+0x318>
    5992:	c0 90 74 08 	lds	r12, 0x0874
    5996:	d0 90 75 08 	lds	r13, 0x0875
    599a:	cc 16       	cp	r12, r28
    599c:	dd 06       	cpc	r13, r29
    599e:	34 f0       	brlt	.+12     	; 0x59ac <getRightSpeedFromInput+0x118>
    59a0:	ef ef       	ldi	r30, 0xFF	; 255
    59a2:	8e 16       	cp	r8, r30
    59a4:	ef ef       	ldi	r30, 0xFF	; 255
    59a6:	9e 06       	cpc	r9, r30
    59a8:	09 f4       	brne	.+2      	; 0x59ac <getRightSpeedFromInput+0x118>
    59aa:	fc c0       	rjmp	.+504    	; 0x5ba4 <getRightSpeedFromInput+0x310>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    59ac:	20 97       	sbiw	r28, 0x00	; 0
    59ae:	09 f4       	brne	.+2      	; 0x59b2 <getRightSpeedFromInput+0x11e>
    59b0:	60 c0       	rjmp	.+192    	; 0x5a72 <getRightSpeedFromInput+0x1de>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    59b2:	81 14       	cp	r8, r1
    59b4:	91 04       	cpc	r9, r1
    59b6:	09 f4       	brne	.+2      	; 0x59ba <getRightSpeedFromInput+0x126>
    59b8:	42 c1       	rjmp	.+644    	; 0x5c3e <getRightSpeedFromInput+0x3aa>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    59ba:	3f ef       	ldi	r19, 0xFF	; 255
    59bc:	83 16       	cp	r8, r19
    59be:	3f ef       	ldi	r19, 0xFF	; 255
    59c0:	93 06       	cpc	r9, r19
    59c2:	09 f4       	brne	.+2      	; 0x59c6 <getRightSpeedFromInput+0x132>
    59c4:	0d c1       	rjmp	.+538    	; 0x5be0 <getRightSpeedFromInput+0x34c>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    59c6:	f4 01       	movw	r30, r8
    59c8:	31 97       	sbiw	r30, 0x01	; 1
    59ca:	e2 95       	swap	r30
    59cc:	f2 95       	swap	r31
    59ce:	f0 7f       	andi	r31, 0xF0	; 240
    59d0:	fe 27       	eor	r31, r30
    59d2:	e0 7f       	andi	r30, 0xF0	; 240
    59d4:	fe 27       	eor	r31, r30
    59d6:	df 01       	movw	r26, r30
    59d8:	ac 50       	subi	r26, 0x0C	; 12
    59da:	b8 4f       	sbci	r27, 0xF8	; 248
    59dc:	cd 90       	ld	r12, X+
    59de:	dc 90       	ld	r13, X
    59e0:	e0 51       	subi	r30, 0x10	; 16
    59e2:	f8 4f       	sbci	r31, 0xF8	; 248
    59e4:	a6 80       	ldd	r10, Z+6	; 0x06
    59e6:	b7 80       	ldd	r11, Z+7	; 0x07
    59e8:	cc 19       	sub	r28, r12
    59ea:	dd 09       	sbc	r29, r13
    59ec:	be 01       	movw	r22, r28
    59ee:	88 27       	eor	r24, r24
    59f0:	77 fd       	sbrc	r23, 7
    59f2:	80 95       	com	r24
    59f4:	98 2f       	mov	r25, r24
    59f6:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    59fa:	7b 01       	movw	r14, r22
    59fc:	8c 01       	movw	r16, r24
    59fe:	82 94       	swap	r8
    5a00:	92 94       	swap	r9
    5a02:	b0 ef       	ldi	r27, 0xF0	; 240
    5a04:	9b 22       	and	r9, r27
    5a06:	98 24       	eor	r9, r8
    5a08:	8b 22       	and	r8, r27
    5a0a:	98 24       	eor	r9, r8
    5a0c:	f4 01       	movw	r30, r8
    5a0e:	e0 51       	subi	r30, 0x10	; 16
    5a10:	f8 4f       	sbci	r31, 0xF8	; 248
    5a12:	66 81       	ldd	r22, Z+6	; 0x06
    5a14:	77 81       	ldd	r23, Z+7	; 0x07
    5a16:	6a 19       	sub	r22, r10
    5a18:	7b 09       	sbc	r23, r11
    5a1a:	88 27       	eor	r24, r24
    5a1c:	77 fd       	sbrc	r23, 7
    5a1e:	80 95       	com	r24
    5a20:	98 2f       	mov	r25, r24
    5a22:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5a26:	9b 01       	movw	r18, r22
    5a28:	ac 01       	movw	r20, r24
    5a2a:	c8 01       	movw	r24, r16
    5a2c:	b7 01       	movw	r22, r14
    5a2e:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    5a32:	7b 01       	movw	r14, r22
    5a34:	8c 01       	movw	r16, r24
    5a36:	84 ef       	ldi	r24, 0xF4	; 244
    5a38:	97 e0       	ldi	r25, 0x07	; 7
    5a3a:	88 0e       	add	r8, r24
    5a3c:	99 1e       	adc	r9, r25
    5a3e:	f4 01       	movw	r30, r8
    5a40:	60 81       	ld	r22, Z
    5a42:	71 81       	ldd	r23, Z+1	; 0x01
    5a44:	6c 19       	sub	r22, r12
    5a46:	7d 09       	sbc	r23, r13
    5a48:	88 27       	eor	r24, r24
    5a4a:	77 fd       	sbrc	r23, 7
    5a4c:	80 95       	com	r24
    5a4e:	98 2f       	mov	r25, r24
    5a50:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5a54:	9b 01       	movw	r18, r22
    5a56:	ac 01       	movw	r20, r24
    5a58:	c8 01       	movw	r24, r16
    5a5a:	b7 01       	movw	r22, r14
    5a5c:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    5a60:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    5a64:	6a 0d       	add	r22, r10
    5a66:	7b 1d       	adc	r23, r11
    5a68:	70 93 c4 03 	sts	0x03C4, r23
    5a6c:	60 93 c3 03 	sts	0x03C3, r22
    5a70:	04 c0       	rjmp	.+8      	; 0x5a7a <getRightSpeedFromInput+0x1e6>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    5a72:	10 92 c4 03 	sts	0x03C4, r1
    5a76:	10 92 c3 03 	sts	0x03C3, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    5a7a:	df 91       	pop	r29
    5a7c:	cf 91       	pop	r28
    5a7e:	1f 91       	pop	r17
    5a80:	0f 91       	pop	r16
    5a82:	ff 90       	pop	r15
    5a84:	ef 90       	pop	r14
    5a86:	df 90       	pop	r13
    5a88:	cf 90       	pop	r12
    5a8a:	bf 90       	pop	r11
    5a8c:	af 90       	pop	r10
    5a8e:	9f 90       	pop	r9
    5a90:	8f 90       	pop	r8
    5a92:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5a94:	60 91 fc 07 	lds	r22, 0x07FC
    5a98:	70 91 fd 07 	lds	r23, 0x07FD
    5a9c:	6c 17       	cp	r22, r28
    5a9e:	7d 07       	cpc	r23, r29
    5aa0:	0c f0       	brlt	.+2      	; 0x5aa4 <getRightSpeedFromInput+0x210>
    5aa2:	2b c1       	rjmp	.+598    	; 0x5cfa <getRightSpeedFromInput+0x466>
    5aa4:	0f ef       	ldi	r16, 0xFF	; 255
    5aa6:	1f ef       	ldi	r17, 0xFF	; 255
    5aa8:	80 91 0c 08 	lds	r24, 0x080C
    5aac:	90 91 0d 08 	lds	r25, 0x080D
    5ab0:	8c 17       	cp	r24, r28
    5ab2:	9d 07       	cpc	r25, r29
    5ab4:	2c f0       	brlt	.+10     	; 0x5ac0 <getRightSpeedFromInput+0x22c>
    5ab6:	2f ef       	ldi	r18, 0xFF	; 255
    5ab8:	0f 3f       	cpi	r16, 0xFF	; 255
    5aba:	12 07       	cpc	r17, r18
    5abc:	09 f4       	brne	.+2      	; 0x5ac0 <getRightSpeedFromInput+0x22c>
    5abe:	20 c1       	rjmp	.+576    	; 0x5d00 <getRightSpeedFromInput+0x46c>
    5ac0:	80 91 1c 08 	lds	r24, 0x081C
    5ac4:	90 91 1d 08 	lds	r25, 0x081D
    5ac8:	8c 17       	cp	r24, r28
    5aca:	9d 07       	cpc	r25, r29
    5acc:	2c f0       	brlt	.+10     	; 0x5ad8 <getRightSpeedFromInput+0x244>
    5ace:	3f ef       	ldi	r19, 0xFF	; 255
    5ad0:	0f 3f       	cpi	r16, 0xFF	; 255
    5ad2:	13 07       	cpc	r17, r19
    5ad4:	09 f4       	brne	.+2      	; 0x5ad8 <getRightSpeedFromInput+0x244>
    5ad6:	26 c1       	rjmp	.+588    	; 0x5d24 <getRightSpeedFromInput+0x490>
    5ad8:	80 91 2c 08 	lds	r24, 0x082C
    5adc:	90 91 2d 08 	lds	r25, 0x082D
    5ae0:	8c 17       	cp	r24, r28
    5ae2:	9d 07       	cpc	r25, r29
    5ae4:	2c f0       	brlt	.+10     	; 0x5af0 <getRightSpeedFromInput+0x25c>
    5ae6:	8f ef       	ldi	r24, 0xFF	; 255
    5ae8:	0f 3f       	cpi	r16, 0xFF	; 255
    5aea:	18 07       	cpc	r17, r24
    5aec:	09 f4       	brne	.+2      	; 0x5af0 <getRightSpeedFromInput+0x25c>
    5aee:	17 c1       	rjmp	.+558    	; 0x5d1e <getRightSpeedFromInput+0x48a>
    5af0:	80 91 3c 08 	lds	r24, 0x083C
    5af4:	90 91 3d 08 	lds	r25, 0x083D
    5af8:	8c 17       	cp	r24, r28
    5afa:	9d 07       	cpc	r25, r29
    5afc:	2c f0       	brlt	.+10     	; 0x5b08 <getRightSpeedFromInput+0x274>
    5afe:	9f ef       	ldi	r25, 0xFF	; 255
    5b00:	0f 3f       	cpi	r16, 0xFF	; 255
    5b02:	19 07       	cpc	r17, r25
    5b04:	09 f4       	brne	.+2      	; 0x5b08 <getRightSpeedFromInput+0x274>
    5b06:	08 c1       	rjmp	.+528    	; 0x5d18 <getRightSpeedFromInput+0x484>
    5b08:	80 91 4c 08 	lds	r24, 0x084C
    5b0c:	90 91 4d 08 	lds	r25, 0x084D
    5b10:	8c 17       	cp	r24, r28
    5b12:	9d 07       	cpc	r25, r29
    5b14:	2c f0       	brlt	.+10     	; 0x5b20 <getRightSpeedFromInput+0x28c>
    5b16:	ef ef       	ldi	r30, 0xFF	; 255
    5b18:	0f 3f       	cpi	r16, 0xFF	; 255
    5b1a:	1e 07       	cpc	r17, r30
    5b1c:	09 f4       	brne	.+2      	; 0x5b20 <getRightSpeedFromInput+0x28c>
    5b1e:	f9 c0       	rjmp	.+498    	; 0x5d12 <getRightSpeedFromInput+0x47e>
    5b20:	80 91 5c 08 	lds	r24, 0x085C
    5b24:	90 91 5d 08 	lds	r25, 0x085D
    5b28:	8c 17       	cp	r24, r28
    5b2a:	9d 07       	cpc	r25, r29
    5b2c:	2c f0       	brlt	.+10     	; 0x5b38 <getRightSpeedFromInput+0x2a4>
    5b2e:	ff ef       	ldi	r31, 0xFF	; 255
    5b30:	0f 3f       	cpi	r16, 0xFF	; 255
    5b32:	1f 07       	cpc	r17, r31
    5b34:	09 f4       	brne	.+2      	; 0x5b38 <getRightSpeedFromInput+0x2a4>
    5b36:	ea c0       	rjmp	.+468    	; 0x5d0c <getRightSpeedFromInput+0x478>
    5b38:	80 91 6c 08 	lds	r24, 0x086C
    5b3c:	90 91 6d 08 	lds	r25, 0x086D
    5b40:	8c 17       	cp	r24, r28
    5b42:	9d 07       	cpc	r25, r29
    5b44:	2c f0       	brlt	.+10     	; 0x5b50 <getRightSpeedFromInput+0x2bc>
    5b46:	2f ef       	ldi	r18, 0xFF	; 255
    5b48:	0f 3f       	cpi	r16, 0xFF	; 255
    5b4a:	12 07       	cpc	r17, r18
    5b4c:	09 f4       	brne	.+2      	; 0x5b50 <getRightSpeedFromInput+0x2bc>
    5b4e:	db c0       	rjmp	.+438    	; 0x5d06 <getRightSpeedFromInput+0x472>
    5b50:	c0 90 7c 08 	lds	r12, 0x087C
    5b54:	d0 90 7d 08 	lds	r13, 0x087D
    5b58:	cc 16       	cp	r12, r28
    5b5a:	dd 06       	cpc	r13, r29
    5b5c:	2c f0       	brlt	.+10     	; 0x5b68 <getRightSpeedFromInput+0x2d4>
    5b5e:	3f ef       	ldi	r19, 0xFF	; 255
    5b60:	0f 3f       	cpi	r16, 0xFF	; 255
    5b62:	13 07       	cpc	r17, r19
    5b64:	09 f4       	brne	.+2      	; 0x5b68 <getRightSpeedFromInput+0x2d4>
    5b66:	7e c0       	rjmp	.+252    	; 0x5c64 <getRightSpeedFromInput+0x3d0>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    5b68:	01 15       	cp	r16, r1
    5b6a:	11 05       	cpc	r17, r1
    5b6c:	09 f0       	breq	.+2      	; 0x5b70 <getRightSpeedFromInput+0x2dc>
    5b6e:	7c c0       	rjmp	.+248    	; 0x5c68 <getRightSpeedFromInput+0x3d4>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    5b70:	80 91 fe 07 	lds	r24, 0x07FE
    5b74:	90 91 ff 07 	lds	r25, 0x07FF
    5b78:	9c 01       	movw	r18, r24
    5b7a:	c2 9f       	mul	r28, r18
    5b7c:	c0 01       	movw	r24, r0
    5b7e:	c3 9f       	mul	r28, r19
    5b80:	90 0d       	add	r25, r0
    5b82:	d2 9f       	mul	r29, r18
    5b84:	90 0d       	add	r25, r0
    5b86:	11 24       	eor	r1, r1
    5b88:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
    5b8c:	cb 01       	movw	r24, r22
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    5b8e:	90 95       	com	r25
    5b90:	81 95       	neg	r24
    5b92:	9f 4f       	sbci	r25, 0xFF	; 255
    5b94:	90 93 c4 03 	sts	0x03C4, r25
    5b98:	80 93 c3 03 	sts	0x03C3, r24
    5b9c:	6e cf       	rjmp	.-292    	; 0x5a7a <getRightSpeedFromInput+0x1e6>

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5b9e:	88 24       	eor	r8, r8
    5ba0:	99 24       	eor	r9, r9
    5ba2:	99 ce       	rjmp	.-718    	; 0x58d6 <getRightSpeedFromInput+0x42>
    5ba4:	88 e0       	ldi	r24, 0x08	; 8
    5ba6:	88 2e       	mov	r8, r24
    5ba8:	91 2c       	mov	r9, r1
    5baa:	00 cf       	rjmp	.-512    	; 0x59ac <getRightSpeedFromInput+0x118>
    5bac:	97 e0       	ldi	r25, 0x07	; 7
    5bae:	89 2e       	mov	r8, r25
    5bb0:	91 2c       	mov	r9, r1
    5bb2:	ef ce       	rjmp	.-546    	; 0x5992 <getRightSpeedFromInput+0xfe>
    5bb4:	26 e0       	ldi	r18, 0x06	; 6
    5bb6:	82 2e       	mov	r8, r18
    5bb8:	91 2c       	mov	r9, r1
    5bba:	de ce       	rjmp	.-580    	; 0x5978 <getRightSpeedFromInput+0xe4>
    5bbc:	35 e0       	ldi	r19, 0x05	; 5
    5bbe:	83 2e       	mov	r8, r19
    5bc0:	91 2c       	mov	r9, r1
    5bc2:	cd ce       	rjmp	.-614    	; 0x595e <getRightSpeedFromInput+0xca>
    5bc4:	44 e0       	ldi	r20, 0x04	; 4
    5bc6:	84 2e       	mov	r8, r20
    5bc8:	91 2c       	mov	r9, r1
    5bca:	bc ce       	rjmp	.-648    	; 0x5944 <getRightSpeedFromInput+0xb0>
    5bcc:	53 e0       	ldi	r21, 0x03	; 3
    5bce:	85 2e       	mov	r8, r21
    5bd0:	91 2c       	mov	r9, r1
    5bd2:	ab ce       	rjmp	.-682    	; 0x592a <getRightSpeedFromInput+0x96>
    5bd4:	e2 e0       	ldi	r30, 0x02	; 2
    5bd6:	8e 2e       	mov	r8, r30
    5bd8:	91 2c       	mov	r9, r1
    5bda:	9a ce       	rjmp	.-716    	; 0x5910 <getRightSpeedFromInput+0x7c>
    5bdc:	81 e0       	ldi	r24, 0x01	; 1
    5bde:	89 ce       	rjmp	.-750    	; 0x58f2 <getRightSpeedFromInput+0x5e>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    5be0:	60 91 76 08 	lds	r22, 0x0876
    5be4:	70 91 77 08 	lds	r23, 0x0877
    5be8:	88 27       	eor	r24, r24
    5bea:	77 fd       	sbrc	r23, 7
    5bec:	80 95       	com	r24
    5bee:	98 2f       	mov	r25, r24
    5bf0:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5bf4:	7b 01       	movw	r14, r22
    5bf6:	8c 01       	movw	r16, r24
    5bf8:	be 01       	movw	r22, r28
    5bfa:	88 27       	eor	r24, r24
    5bfc:	77 fd       	sbrc	r23, 7
    5bfe:	80 95       	com	r24
    5c00:	98 2f       	mov	r25, r24
    5c02:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5c06:	9b 01       	movw	r18, r22
    5c08:	ac 01       	movw	r20, r24
    5c0a:	c8 01       	movw	r24, r16
    5c0c:	b7 01       	movw	r22, r14
    5c0e:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    5c12:	7b 01       	movw	r14, r22
    5c14:	8c 01       	movw	r16, r24
    5c16:	b6 01       	movw	r22, r12
    5c18:	88 27       	eor	r24, r24
    5c1a:	77 fd       	sbrc	r23, 7
    5c1c:	80 95       	com	r24
    5c1e:	98 2f       	mov	r25, r24
    5c20:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5c24:	9b 01       	movw	r18, r22
    5c26:	ac 01       	movw	r20, r24
    5c28:	c8 01       	movw	r24, r16
    5c2a:	b7 01       	movw	r22, r14
    5c2c:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    5c30:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    5c34:	70 93 c4 03 	sts	0x03C4, r23
    5c38:	60 93 c3 03 	sts	0x03C3, r22
    5c3c:	1e cf       	rjmp	.-452    	; 0x5a7a <getRightSpeedFromInput+0x1e6>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    5c3e:	80 91 f6 07 	lds	r24, 0x07F6
    5c42:	90 91 f7 07 	lds	r25, 0x07F7
    5c46:	9c 01       	movw	r18, r24
    5c48:	c2 9f       	mul	r28, r18
    5c4a:	c0 01       	movw	r24, r0
    5c4c:	c3 9f       	mul	r28, r19
    5c4e:	90 0d       	add	r25, r0
    5c50:	d2 9f       	mul	r29, r18
    5c52:	90 0d       	add	r25, r0
    5c54:	11 24       	eor	r1, r1
    5c56:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
    5c5a:	70 93 c4 03 	sts	0x03C4, r23
    5c5e:	60 93 c3 03 	sts	0x03C3, r22
    5c62:	0b cf       	rjmp	.-490    	; 0x5a7a <getRightSpeedFromInput+0x1e6>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5c64:	08 e0       	ldi	r16, 0x08	; 8
    5c66:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5c68:	3f ef       	ldi	r19, 0xFF	; 255
    5c6a:	0f 3f       	cpi	r16, 0xFF	; 255
    5c6c:	13 07       	cpc	r17, r19
    5c6e:	09 f4       	brne	.+2      	; 0x5c72 <getRightSpeedFromInput+0x3de>
    5c70:	5c c0       	rjmp	.+184    	; 0x5d2a <getRightSpeedFromInput+0x496>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    5c72:	02 95       	swap	r16
    5c74:	12 95       	swap	r17
    5c76:	10 7f       	andi	r17, 0xF0	; 240
    5c78:	10 27       	eor	r17, r16
    5c7a:	00 7f       	andi	r16, 0xF0	; 240
    5c7c:	10 27       	eor	r17, r16
    5c7e:	f8 01       	movw	r30, r16
    5c80:	e0 52       	subi	r30, 0x20	; 32
    5c82:	f8 4f       	sbci	r31, 0xF8	; 248
    5c84:	a4 84       	ldd	r10, Z+12	; 0x0c
    5c86:	b5 84       	ldd	r11, Z+13	; 0x0d
    5c88:	86 84       	ldd	r8, Z+14	; 0x0e
    5c8a:	97 84       	ldd	r9, Z+15	; 0x0f
    5c8c:	ca 19       	sub	r28, r10
    5c8e:	db 09       	sbc	r29, r11
    5c90:	be 01       	movw	r22, r28
    5c92:	88 27       	eor	r24, r24
    5c94:	77 fd       	sbrc	r23, 7
    5c96:	80 95       	com	r24
    5c98:	98 2f       	mov	r25, r24
    5c9a:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5c9e:	6b 01       	movw	r12, r22
    5ca0:	7c 01       	movw	r14, r24
    5ca2:	00 51       	subi	r16, 0x10	; 16
    5ca4:	18 4f       	sbci	r17, 0xF8	; 248
    5ca6:	f8 01       	movw	r30, r16
    5ca8:	66 85       	ldd	r22, Z+14	; 0x0e
    5caa:	77 85       	ldd	r23, Z+15	; 0x0f
    5cac:	68 19       	sub	r22, r8
    5cae:	79 09       	sbc	r23, r9
    5cb0:	88 27       	eor	r24, r24
    5cb2:	77 fd       	sbrc	r23, 7
    5cb4:	80 95       	com	r24
    5cb6:	98 2f       	mov	r25, r24
    5cb8:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5cbc:	9b 01       	movw	r18, r22
    5cbe:	ac 01       	movw	r20, r24
    5cc0:	c7 01       	movw	r24, r14
    5cc2:	b6 01       	movw	r22, r12
    5cc4:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    5cc8:	6b 01       	movw	r12, r22
    5cca:	7c 01       	movw	r14, r24
    5ccc:	f8 01       	movw	r30, r16
    5cce:	64 85       	ldd	r22, Z+12	; 0x0c
    5cd0:	75 85       	ldd	r23, Z+13	; 0x0d
    5cd2:	6a 19       	sub	r22, r10
    5cd4:	7b 09       	sbc	r23, r11
    5cd6:	88 27       	eor	r24, r24
    5cd8:	77 fd       	sbrc	r23, 7
    5cda:	80 95       	com	r24
    5cdc:	98 2f       	mov	r25, r24
    5cde:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5ce2:	9b 01       	movw	r18, r22
    5ce4:	ac 01       	movw	r20, r24
    5ce6:	c7 01       	movw	r24, r14
    5ce8:	b6 01       	movw	r22, r12
    5cea:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    5cee:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    5cf2:	68 0d       	add	r22, r8
    5cf4:	79 1d       	adc	r23, r9
    5cf6:	cb 01       	movw	r24, r22
    5cf8:	4a cf       	rjmp	.-364    	; 0x5b8e <getRightSpeedFromInput+0x2fa>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5cfa:	00 e0       	ldi	r16, 0x00	; 0
    5cfc:	10 e0       	ldi	r17, 0x00	; 0
    5cfe:	d4 ce       	rjmp	.-600    	; 0x5aa8 <getRightSpeedFromInput+0x214>
    5d00:	01 e0       	ldi	r16, 0x01	; 1
    5d02:	10 e0       	ldi	r17, 0x00	; 0
    5d04:	dd ce       	rjmp	.-582    	; 0x5ac0 <getRightSpeedFromInput+0x22c>
    5d06:	07 e0       	ldi	r16, 0x07	; 7
    5d08:	10 e0       	ldi	r17, 0x00	; 0
    5d0a:	22 cf       	rjmp	.-444    	; 0x5b50 <getRightSpeedFromInput+0x2bc>
    5d0c:	06 e0       	ldi	r16, 0x06	; 6
    5d0e:	10 e0       	ldi	r17, 0x00	; 0
    5d10:	13 cf       	rjmp	.-474    	; 0x5b38 <getRightSpeedFromInput+0x2a4>
    5d12:	05 e0       	ldi	r16, 0x05	; 5
    5d14:	10 e0       	ldi	r17, 0x00	; 0
    5d16:	04 cf       	rjmp	.-504    	; 0x5b20 <getRightSpeedFromInput+0x28c>
    5d18:	04 e0       	ldi	r16, 0x04	; 4
    5d1a:	10 e0       	ldi	r17, 0x00	; 0
    5d1c:	f5 ce       	rjmp	.-534    	; 0x5b08 <getRightSpeedFromInput+0x274>
    5d1e:	03 e0       	ldi	r16, 0x03	; 3
    5d20:	10 e0       	ldi	r17, 0x00	; 0
    5d22:	e6 ce       	rjmp	.-564    	; 0x5af0 <getRightSpeedFromInput+0x25c>
    5d24:	02 e0       	ldi	r16, 0x02	; 2
    5d26:	10 e0       	ldi	r17, 0x00	; 0
    5d28:	d7 ce       	rjmp	.-594    	; 0x5ad8 <getRightSpeedFromInput+0x244>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    5d2a:	60 91 7e 08 	lds	r22, 0x087E
    5d2e:	70 91 7f 08 	lds	r23, 0x087F
    5d32:	88 27       	eor	r24, r24
    5d34:	77 fd       	sbrc	r23, 7
    5d36:	80 95       	com	r24
    5d38:	98 2f       	mov	r25, r24
    5d3a:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5d3e:	7b 01       	movw	r14, r22
    5d40:	8c 01       	movw	r16, r24
    5d42:	be 01       	movw	r22, r28
    5d44:	88 27       	eor	r24, r24
    5d46:	77 fd       	sbrc	r23, 7
    5d48:	80 95       	com	r24
    5d4a:	98 2f       	mov	r25, r24
    5d4c:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5d50:	9b 01       	movw	r18, r22
    5d52:	ac 01       	movw	r20, r24
    5d54:	c8 01       	movw	r24, r16
    5d56:	b7 01       	movw	r22, r14
    5d58:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    5d5c:	7b 01       	movw	r14, r22
    5d5e:	8c 01       	movw	r16, r24
    5d60:	b6 01       	movw	r22, r12
    5d62:	88 27       	eor	r24, r24
    5d64:	77 fd       	sbrc	r23, 7
    5d66:	80 95       	com	r24
    5d68:	98 2f       	mov	r25, r24
    5d6a:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5d6e:	9b 01       	movw	r18, r22
    5d70:	ac 01       	movw	r20, r24
    5d72:	c8 01       	movw	r24, r16
    5d74:	b7 01       	movw	r22, r14
    5d76:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    5d7a:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    5d7e:	cb 01       	movw	r24, r22
    5d80:	06 cf       	rjmp	.-500    	; 0x5b8e <getRightSpeedFromInput+0x2fa>

00005d82 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    5d82:	8f 92       	push	r8
    5d84:	9f 92       	push	r9
    5d86:	af 92       	push	r10
    5d88:	bf 92       	push	r11
    5d8a:	cf 92       	push	r12
    5d8c:	df 92       	push	r13
    5d8e:	ef 92       	push	r14
    5d90:	ff 92       	push	r15
    5d92:	0f 93       	push	r16
    5d94:	1f 93       	push	r17
    5d96:	cf 93       	push	r28
    5d98:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5d9a:	c0 91 e3 02 	lds	r28, 0x02E3
    5d9e:	d0 91 e4 02 	lds	r29, 0x02E4
    5da2:	80 91 e9 02 	lds	r24, 0x02E9
    5da6:	90 91 ea 02 	lds	r25, 0x02EA
    5daa:	97 fd       	sbrc	r25, 7
    5dac:	f3 c0       	rjmp	.+486    	; 0x5f94 <getLeftSpeedFromInput+0x212>
    5dae:	60 91 f0 07 	lds	r22, 0x07F0
    5db2:	70 91 f1 07 	lds	r23, 0x07F1
    5db6:	6c 17       	cp	r22, r28
    5db8:	7d 07       	cpc	r23, r29
    5dba:	0c f0       	brlt	.+2      	; 0x5dbe <getLeftSpeedFromInput+0x3c>
    5dbc:	79 c1       	rjmp	.+754    	; 0x60b0 <getLeftSpeedFromInput+0x32e>
    5dbe:	88 24       	eor	r8, r8
    5dc0:	8a 94       	dec	r8
    5dc2:	98 2c       	mov	r9, r8
    5dc4:	80 91 00 08 	lds	r24, 0x0800
    5dc8:	90 91 01 08 	lds	r25, 0x0801
    5dcc:	8c 17       	cp	r24, r28
    5dce:	9d 07       	cpc	r25, r29
    5dd0:	4c f0       	brlt	.+18     	; 0x5de4 <getLeftSpeedFromInput+0x62>
    5dd2:	80 e0       	ldi	r24, 0x00	; 0
    5dd4:	9f ef       	ldi	r25, 0xFF	; 255
    5dd6:	89 16       	cp	r8, r25
    5dd8:	9f ef       	ldi	r25, 0xFF	; 255
    5dda:	99 06       	cpc	r9, r25
    5ddc:	09 f4       	brne	.+2      	; 0x5de0 <getLeftSpeedFromInput+0x5e>
    5dde:	87 c1       	rjmp	.+782    	; 0x60ee <getLeftSpeedFromInput+0x36c>
    5de0:	88 2e       	mov	r8, r24
    5de2:	99 24       	eor	r9, r9
    5de4:	80 91 10 08 	lds	r24, 0x0810
    5de8:	90 91 11 08 	lds	r25, 0x0811
    5dec:	8c 17       	cp	r24, r28
    5dee:	9d 07       	cpc	r25, r29
    5df0:	34 f0       	brlt	.+12     	; 0x5dfe <getLeftSpeedFromInput+0x7c>
    5df2:	ef ef       	ldi	r30, 0xFF	; 255
    5df4:	8e 16       	cp	r8, r30
    5df6:	ef ef       	ldi	r30, 0xFF	; 255
    5df8:	9e 06       	cpc	r9, r30
    5dfa:	09 f4       	brne	.+2      	; 0x5dfe <getLeftSpeedFromInput+0x7c>
    5dfc:	74 c1       	rjmp	.+744    	; 0x60e6 <getLeftSpeedFromInput+0x364>
    5dfe:	80 91 20 08 	lds	r24, 0x0820
    5e02:	90 91 21 08 	lds	r25, 0x0821
    5e06:	8c 17       	cp	r24, r28
    5e08:	9d 07       	cpc	r25, r29
    5e0a:	34 f0       	brlt	.+12     	; 0x5e18 <getLeftSpeedFromInput+0x96>
    5e0c:	ff ef       	ldi	r31, 0xFF	; 255
    5e0e:	8f 16       	cp	r8, r31
    5e10:	ff ef       	ldi	r31, 0xFF	; 255
    5e12:	9f 06       	cpc	r9, r31
    5e14:	09 f4       	brne	.+2      	; 0x5e18 <getLeftSpeedFromInput+0x96>
    5e16:	63 c1       	rjmp	.+710    	; 0x60de <getLeftSpeedFromInput+0x35c>
    5e18:	80 91 30 08 	lds	r24, 0x0830
    5e1c:	90 91 31 08 	lds	r25, 0x0831
    5e20:	8c 17       	cp	r24, r28
    5e22:	9d 07       	cpc	r25, r29
    5e24:	34 f0       	brlt	.+12     	; 0x5e32 <getLeftSpeedFromInput+0xb0>
    5e26:	2f ef       	ldi	r18, 0xFF	; 255
    5e28:	82 16       	cp	r8, r18
    5e2a:	2f ef       	ldi	r18, 0xFF	; 255
    5e2c:	92 06       	cpc	r9, r18
    5e2e:	09 f4       	brne	.+2      	; 0x5e32 <getLeftSpeedFromInput+0xb0>
    5e30:	52 c1       	rjmp	.+676    	; 0x60d6 <getLeftSpeedFromInput+0x354>
    5e32:	80 91 40 08 	lds	r24, 0x0840
    5e36:	90 91 41 08 	lds	r25, 0x0841
    5e3a:	8c 17       	cp	r24, r28
    5e3c:	9d 07       	cpc	r25, r29
    5e3e:	34 f0       	brlt	.+12     	; 0x5e4c <getLeftSpeedFromInput+0xca>
    5e40:	3f ef       	ldi	r19, 0xFF	; 255
    5e42:	83 16       	cp	r8, r19
    5e44:	3f ef       	ldi	r19, 0xFF	; 255
    5e46:	93 06       	cpc	r9, r19
    5e48:	09 f4       	brne	.+2      	; 0x5e4c <getLeftSpeedFromInput+0xca>
    5e4a:	41 c1       	rjmp	.+642    	; 0x60ce <getLeftSpeedFromInput+0x34c>
    5e4c:	80 91 50 08 	lds	r24, 0x0850
    5e50:	90 91 51 08 	lds	r25, 0x0851
    5e54:	8c 17       	cp	r24, r28
    5e56:	9d 07       	cpc	r25, r29
    5e58:	34 f0       	brlt	.+12     	; 0x5e66 <getLeftSpeedFromInput+0xe4>
    5e5a:	8f ef       	ldi	r24, 0xFF	; 255
    5e5c:	88 16       	cp	r8, r24
    5e5e:	8f ef       	ldi	r24, 0xFF	; 255
    5e60:	98 06       	cpc	r9, r24
    5e62:	09 f4       	brne	.+2      	; 0x5e66 <getLeftSpeedFromInput+0xe4>
    5e64:	30 c1       	rjmp	.+608    	; 0x60c6 <getLeftSpeedFromInput+0x344>
    5e66:	80 91 60 08 	lds	r24, 0x0860
    5e6a:	90 91 61 08 	lds	r25, 0x0861
    5e6e:	8c 17       	cp	r24, r28
    5e70:	9d 07       	cpc	r25, r29
    5e72:	34 f0       	brlt	.+12     	; 0x5e80 <getLeftSpeedFromInput+0xfe>
    5e74:	9f ef       	ldi	r25, 0xFF	; 255
    5e76:	89 16       	cp	r8, r25
    5e78:	9f ef       	ldi	r25, 0xFF	; 255
    5e7a:	99 06       	cpc	r9, r25
    5e7c:	09 f4       	brne	.+2      	; 0x5e80 <getLeftSpeedFromInput+0xfe>
    5e7e:	1f c1       	rjmp	.+574    	; 0x60be <getLeftSpeedFromInput+0x33c>
    5e80:	c0 90 70 08 	lds	r12, 0x0870
    5e84:	d0 90 71 08 	lds	r13, 0x0871
    5e88:	cc 16       	cp	r12, r28
    5e8a:	dd 06       	cpc	r13, r29
    5e8c:	34 f0       	brlt	.+12     	; 0x5e9a <getLeftSpeedFromInput+0x118>
    5e8e:	ef ef       	ldi	r30, 0xFF	; 255
    5e90:	8e 16       	cp	r8, r30
    5e92:	ef ef       	ldi	r30, 0xFF	; 255
    5e94:	9e 06       	cpc	r9, r30
    5e96:	09 f4       	brne	.+2      	; 0x5e9a <getLeftSpeedFromInput+0x118>
    5e98:	0e c1       	rjmp	.+540    	; 0x60b6 <getLeftSpeedFromInput+0x334>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    5e9a:	20 97       	sbiw	r28, 0x00	; 0
    5e9c:	09 f4       	brne	.+2      	; 0x5ea0 <getLeftSpeedFromInput+0x11e>
    5e9e:	69 c0       	rjmp	.+210    	; 0x5f72 <getLeftSpeedFromInput+0x1f0>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    5ea0:	81 14       	cp	r8, r1
    5ea2:	91 04       	cpc	r9, r1
    5ea4:	09 f4       	brne	.+2      	; 0x5ea8 <getLeftSpeedFromInput+0x126>
    5ea6:	54 c1       	rjmp	.+680    	; 0x6150 <getLeftSpeedFromInput+0x3ce>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5ea8:	3f ef       	ldi	r19, 0xFF	; 255
    5eaa:	83 16       	cp	r8, r19
    5eac:	3f ef       	ldi	r19, 0xFF	; 255
    5eae:	93 06       	cpc	r9, r19
    5eb0:	09 f4       	brne	.+2      	; 0x5eb4 <getLeftSpeedFromInput+0x132>
    5eb2:	1f c1       	rjmp	.+574    	; 0x60f2 <getLeftSpeedFromInput+0x370>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    5eb4:	d4 01       	movw	r26, r8
    5eb6:	11 97       	sbiw	r26, 0x01	; 1
    5eb8:	fd 01       	movw	r30, r26
    5eba:	e2 95       	swap	r30
    5ebc:	f2 95       	swap	r31
    5ebe:	f0 7f       	andi	r31, 0xF0	; 240
    5ec0:	fe 27       	eor	r31, r30
    5ec2:	e0 7f       	andi	r30, 0xF0	; 240
    5ec4:	fe 27       	eor	r31, r30
    5ec6:	e0 51       	subi	r30, 0x10	; 16
    5ec8:	f8 4f       	sbci	r31, 0xF8	; 248
    5eca:	c0 80       	ld	r12, Z
    5ecc:	d1 80       	ldd	r13, Z+1	; 0x01
    5ece:	aa 0f       	add	r26, r26
    5ed0:	bb 1f       	adc	r27, r27
    5ed2:	aa 0f       	add	r26, r26
    5ed4:	bb 1f       	adc	r27, r27
    5ed6:	aa 0f       	add	r26, r26
    5ed8:	bb 1f       	adc	r27, r27
    5eda:	aa 0f       	add	r26, r26
    5edc:	bb 1f       	adc	r27, r27
    5ede:	ae 50       	subi	r26, 0x0E	; 14
    5ee0:	b8 4f       	sbci	r27, 0xF8	; 248
    5ee2:	ad 90       	ld	r10, X+
    5ee4:	bc 90       	ld	r11, X
    5ee6:	cc 19       	sub	r28, r12
    5ee8:	dd 09       	sbc	r29, r13
    5eea:	be 01       	movw	r22, r28
    5eec:	88 27       	eor	r24, r24
    5eee:	77 fd       	sbrc	r23, 7
    5ef0:	80 95       	com	r24
    5ef2:	98 2f       	mov	r25, r24
    5ef4:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5ef8:	7b 01       	movw	r14, r22
    5efa:	8c 01       	movw	r16, r24
    5efc:	88 0c       	add	r8, r8
    5efe:	99 1c       	adc	r9, r9
    5f00:	88 0c       	add	r8, r8
    5f02:	99 1c       	adc	r9, r9
    5f04:	88 0c       	add	r8, r8
    5f06:	99 1c       	adc	r9, r9
    5f08:	88 0c       	add	r8, r8
    5f0a:	99 1c       	adc	r9, r9
    5f0c:	f4 01       	movw	r30, r8
    5f0e:	ee 50       	subi	r30, 0x0E	; 14
    5f10:	f8 4f       	sbci	r31, 0xF8	; 248
    5f12:	60 81       	ld	r22, Z
    5f14:	71 81       	ldd	r23, Z+1	; 0x01
    5f16:	6a 19       	sub	r22, r10
    5f18:	7b 09       	sbc	r23, r11
    5f1a:	88 27       	eor	r24, r24
    5f1c:	77 fd       	sbrc	r23, 7
    5f1e:	80 95       	com	r24
    5f20:	98 2f       	mov	r25, r24
    5f22:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5f26:	9b 01       	movw	r18, r22
    5f28:	ac 01       	movw	r20, r24
    5f2a:	c8 01       	movw	r24, r16
    5f2c:	b7 01       	movw	r22, r14
    5f2e:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    5f32:	7b 01       	movw	r14, r22
    5f34:	8c 01       	movw	r16, r24
    5f36:	80 ef       	ldi	r24, 0xF0	; 240
    5f38:	97 e0       	ldi	r25, 0x07	; 7
    5f3a:	88 0e       	add	r8, r24
    5f3c:	99 1e       	adc	r9, r25
    5f3e:	f4 01       	movw	r30, r8
    5f40:	60 81       	ld	r22, Z
    5f42:	71 81       	ldd	r23, Z+1	; 0x01
    5f44:	6c 19       	sub	r22, r12
    5f46:	7d 09       	sbc	r23, r13
    5f48:	88 27       	eor	r24, r24
    5f4a:	77 fd       	sbrc	r23, 7
    5f4c:	80 95       	com	r24
    5f4e:	98 2f       	mov	r25, r24
    5f50:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    5f54:	9b 01       	movw	r18, r22
    5f56:	ac 01       	movw	r20, r24
    5f58:	c8 01       	movw	r24, r16
    5f5a:	b7 01       	movw	r22, r14
    5f5c:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    5f60:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    5f64:	6a 0d       	add	r22, r10
    5f66:	7b 1d       	adc	r23, r11
    5f68:	70 93 c2 03 	sts	0x03C2, r23
    5f6c:	60 93 c1 03 	sts	0x03C1, r22
    5f70:	04 c0       	rjmp	.+8      	; 0x5f7a <getLeftSpeedFromInput+0x1f8>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    5f72:	10 92 c2 03 	sts	0x03C2, r1
    5f76:	10 92 c1 03 	sts	0x03C1, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    5f7a:	df 91       	pop	r29
    5f7c:	cf 91       	pop	r28
    5f7e:	1f 91       	pop	r17
    5f80:	0f 91       	pop	r16
    5f82:	ff 90       	pop	r15
    5f84:	ef 90       	pop	r14
    5f86:	df 90       	pop	r13
    5f88:	cf 90       	pop	r12
    5f8a:	bf 90       	pop	r11
    5f8c:	af 90       	pop	r10
    5f8e:	9f 90       	pop	r9
    5f90:	8f 90       	pop	r8
    5f92:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    5f94:	60 91 f8 07 	lds	r22, 0x07F8
    5f98:	70 91 f9 07 	lds	r23, 0x07F9
    5f9c:	6c 17       	cp	r22, r28
    5f9e:	7d 07       	cpc	r23, r29
    5fa0:	0c f0       	brlt	.+2      	; 0x5fa4 <getLeftSpeedFromInput+0x222>
    5fa2:	4e c1       	rjmp	.+668    	; 0x6240 <getLeftSpeedFromInput+0x4be>
    5fa4:	88 24       	eor	r8, r8
    5fa6:	8a 94       	dec	r8
    5fa8:	98 2c       	mov	r9, r8
    5faa:	80 91 08 08 	lds	r24, 0x0808
    5fae:	90 91 09 08 	lds	r25, 0x0809
    5fb2:	8c 17       	cp	r24, r28
    5fb4:	9d 07       	cpc	r25, r29
    5fb6:	34 f0       	brlt	.+12     	; 0x5fc4 <getLeftSpeedFromInput+0x242>
    5fb8:	2f ef       	ldi	r18, 0xFF	; 255
    5fba:	82 16       	cp	r8, r18
    5fbc:	2f ef       	ldi	r18, 0xFF	; 255
    5fbe:	92 06       	cpc	r9, r18
    5fc0:	09 f4       	brne	.+2      	; 0x5fc4 <getLeftSpeedFromInput+0x242>
    5fc2:	41 c1       	rjmp	.+642    	; 0x6246 <getLeftSpeedFromInput+0x4c4>
    5fc4:	80 91 18 08 	lds	r24, 0x0818
    5fc8:	90 91 19 08 	lds	r25, 0x0819
    5fcc:	8c 17       	cp	r24, r28
    5fce:	9d 07       	cpc	r25, r29
    5fd0:	34 f0       	brlt	.+12     	; 0x5fde <getLeftSpeedFromInput+0x25c>
    5fd2:	3f ef       	ldi	r19, 0xFF	; 255
    5fd4:	83 16       	cp	r8, r19
    5fd6:	3f ef       	ldi	r19, 0xFF	; 255
    5fd8:	93 06       	cpc	r9, r19
    5fda:	09 f4       	brne	.+2      	; 0x5fde <getLeftSpeedFromInput+0x25c>
    5fdc:	4c c1       	rjmp	.+664    	; 0x6276 <getLeftSpeedFromInput+0x4f4>
    5fde:	80 91 28 08 	lds	r24, 0x0828
    5fe2:	90 91 29 08 	lds	r25, 0x0829
    5fe6:	8c 17       	cp	r24, r28
    5fe8:	9d 07       	cpc	r25, r29
    5fea:	34 f0       	brlt	.+12     	; 0x5ff8 <getLeftSpeedFromInput+0x276>
    5fec:	8f ef       	ldi	r24, 0xFF	; 255
    5fee:	88 16       	cp	r8, r24
    5ff0:	8f ef       	ldi	r24, 0xFF	; 255
    5ff2:	98 06       	cpc	r9, r24
    5ff4:	09 f4       	brne	.+2      	; 0x5ff8 <getLeftSpeedFromInput+0x276>
    5ff6:	3b c1       	rjmp	.+630    	; 0x626e <getLeftSpeedFromInput+0x4ec>
    5ff8:	80 91 38 08 	lds	r24, 0x0838
    5ffc:	90 91 39 08 	lds	r25, 0x0839
    6000:	8c 17       	cp	r24, r28
    6002:	9d 07       	cpc	r25, r29
    6004:	34 f0       	brlt	.+12     	; 0x6012 <getLeftSpeedFromInput+0x290>
    6006:	9f ef       	ldi	r25, 0xFF	; 255
    6008:	89 16       	cp	r8, r25
    600a:	9f ef       	ldi	r25, 0xFF	; 255
    600c:	99 06       	cpc	r9, r25
    600e:	09 f4       	brne	.+2      	; 0x6012 <getLeftSpeedFromInput+0x290>
    6010:	2a c1       	rjmp	.+596    	; 0x6266 <getLeftSpeedFromInput+0x4e4>
    6012:	80 91 48 08 	lds	r24, 0x0848
    6016:	90 91 49 08 	lds	r25, 0x0849
    601a:	8c 17       	cp	r24, r28
    601c:	9d 07       	cpc	r25, r29
    601e:	34 f0       	brlt	.+12     	; 0x602c <getLeftSpeedFromInput+0x2aa>
    6020:	ef ef       	ldi	r30, 0xFF	; 255
    6022:	8e 16       	cp	r8, r30
    6024:	ef ef       	ldi	r30, 0xFF	; 255
    6026:	9e 06       	cpc	r9, r30
    6028:	09 f4       	brne	.+2      	; 0x602c <getLeftSpeedFromInput+0x2aa>
    602a:	19 c1       	rjmp	.+562    	; 0x625e <getLeftSpeedFromInput+0x4dc>
    602c:	80 91 58 08 	lds	r24, 0x0858
    6030:	90 91 59 08 	lds	r25, 0x0859
    6034:	8c 17       	cp	r24, r28
    6036:	9d 07       	cpc	r25, r29
    6038:	34 f0       	brlt	.+12     	; 0x6046 <getLeftSpeedFromInput+0x2c4>
    603a:	ff ef       	ldi	r31, 0xFF	; 255
    603c:	8f 16       	cp	r8, r31
    603e:	ff ef       	ldi	r31, 0xFF	; 255
    6040:	9f 06       	cpc	r9, r31
    6042:	09 f4       	brne	.+2      	; 0x6046 <getLeftSpeedFromInput+0x2c4>
    6044:	08 c1       	rjmp	.+528    	; 0x6256 <getLeftSpeedFromInput+0x4d4>
    6046:	80 91 68 08 	lds	r24, 0x0868
    604a:	90 91 69 08 	lds	r25, 0x0869
    604e:	8c 17       	cp	r24, r28
    6050:	9d 07       	cpc	r25, r29
    6052:	34 f0       	brlt	.+12     	; 0x6060 <getLeftSpeedFromInput+0x2de>
    6054:	2f ef       	ldi	r18, 0xFF	; 255
    6056:	82 16       	cp	r8, r18
    6058:	2f ef       	ldi	r18, 0xFF	; 255
    605a:	92 06       	cpc	r9, r18
    605c:	09 f4       	brne	.+2      	; 0x6060 <getLeftSpeedFromInput+0x2de>
    605e:	f7 c0       	rjmp	.+494    	; 0x624e <getLeftSpeedFromInput+0x4cc>
    6060:	c0 90 78 08 	lds	r12, 0x0878
    6064:	d0 90 79 08 	lds	r13, 0x0879
    6068:	cc 16       	cp	r12, r28
    606a:	dd 06       	cpc	r13, r29
    606c:	34 f0       	brlt	.+12     	; 0x607a <getLeftSpeedFromInput+0x2f8>
    606e:	3f ef       	ldi	r19, 0xFF	; 255
    6070:	83 16       	cp	r8, r19
    6072:	3f ef       	ldi	r19, 0xFF	; 255
    6074:	93 06       	cpc	r9, r19
    6076:	09 f4       	brne	.+2      	; 0x607a <getLeftSpeedFromInput+0x2f8>
    6078:	7e c0       	rjmp	.+252    	; 0x6176 <getLeftSpeedFromInput+0x3f4>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    607a:	81 14       	cp	r8, r1
    607c:	91 04       	cpc	r9, r1
    607e:	09 f0       	breq	.+2      	; 0x6082 <getLeftSpeedFromInput+0x300>
    6080:	7d c0       	rjmp	.+250    	; 0x617c <getLeftSpeedFromInput+0x3fa>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    6082:	80 91 fa 07 	lds	r24, 0x07FA
    6086:	90 91 fb 07 	lds	r25, 0x07FB
    608a:	9c 01       	movw	r18, r24
    608c:	c2 9f       	mul	r28, r18
    608e:	c0 01       	movw	r24, r0
    6090:	c3 9f       	mul	r28, r19
    6092:	90 0d       	add	r25, r0
    6094:	d2 9f       	mul	r29, r18
    6096:	90 0d       	add	r25, r0
    6098:	11 24       	eor	r1, r1
    609a:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
    609e:	cb 01       	movw	r24, r22
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    60a0:	90 95       	com	r25
    60a2:	81 95       	neg	r24
    60a4:	9f 4f       	sbci	r25, 0xFF	; 255
    60a6:	90 93 c2 03 	sts	0x03C2, r25
    60aa:	80 93 c1 03 	sts	0x03C1, r24
    60ae:	65 cf       	rjmp	.-310    	; 0x5f7a <getLeftSpeedFromInput+0x1f8>

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    60b0:	88 24       	eor	r8, r8
    60b2:	99 24       	eor	r9, r9
    60b4:	87 ce       	rjmp	.-754    	; 0x5dc4 <getLeftSpeedFromInput+0x42>
    60b6:	e8 e0       	ldi	r30, 0x08	; 8
    60b8:	8e 2e       	mov	r8, r30
    60ba:	91 2c       	mov	r9, r1
    60bc:	ee ce       	rjmp	.-548    	; 0x5e9a <getLeftSpeedFromInput+0x118>
    60be:	f7 e0       	ldi	r31, 0x07	; 7
    60c0:	8f 2e       	mov	r8, r31
    60c2:	91 2c       	mov	r9, r1
    60c4:	dd ce       	rjmp	.-582    	; 0x5e80 <getLeftSpeedFromInput+0xfe>
    60c6:	a6 e0       	ldi	r26, 0x06	; 6
    60c8:	8a 2e       	mov	r8, r26
    60ca:	91 2c       	mov	r9, r1
    60cc:	cc ce       	rjmp	.-616    	; 0x5e66 <getLeftSpeedFromInput+0xe4>
    60ce:	b5 e0       	ldi	r27, 0x05	; 5
    60d0:	8b 2e       	mov	r8, r27
    60d2:	91 2c       	mov	r9, r1
    60d4:	bb ce       	rjmp	.-650    	; 0x5e4c <getLeftSpeedFromInput+0xca>
    60d6:	14 e0       	ldi	r17, 0x04	; 4
    60d8:	81 2e       	mov	r8, r17
    60da:	91 2c       	mov	r9, r1
    60dc:	aa ce       	rjmp	.-684    	; 0x5e32 <getLeftSpeedFromInput+0xb0>
    60de:	03 e0       	ldi	r16, 0x03	; 3
    60e0:	80 2e       	mov	r8, r16
    60e2:	91 2c       	mov	r9, r1
    60e4:	99 ce       	rjmp	.-718    	; 0x5e18 <getLeftSpeedFromInput+0x96>
    60e6:	82 e0       	ldi	r24, 0x02	; 2
    60e8:	88 2e       	mov	r8, r24
    60ea:	91 2c       	mov	r9, r1
    60ec:	88 ce       	rjmp	.-752    	; 0x5dfe <getLeftSpeedFromInput+0x7c>
    60ee:	81 e0       	ldi	r24, 0x01	; 1
    60f0:	77 ce       	rjmp	.-786    	; 0x5de0 <getLeftSpeedFromInput+0x5e>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    60f2:	60 91 72 08 	lds	r22, 0x0872
    60f6:	70 91 73 08 	lds	r23, 0x0873
    60fa:	88 27       	eor	r24, r24
    60fc:	77 fd       	sbrc	r23, 7
    60fe:	80 95       	com	r24
    6100:	98 2f       	mov	r25, r24
    6102:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    6106:	7b 01       	movw	r14, r22
    6108:	8c 01       	movw	r16, r24
    610a:	be 01       	movw	r22, r28
    610c:	88 27       	eor	r24, r24
    610e:	77 fd       	sbrc	r23, 7
    6110:	80 95       	com	r24
    6112:	98 2f       	mov	r25, r24
    6114:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    6118:	9b 01       	movw	r18, r22
    611a:	ac 01       	movw	r20, r24
    611c:	c8 01       	movw	r24, r16
    611e:	b7 01       	movw	r22, r14
    6120:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    6124:	7b 01       	movw	r14, r22
    6126:	8c 01       	movw	r16, r24
    6128:	b6 01       	movw	r22, r12
    612a:	88 27       	eor	r24, r24
    612c:	77 fd       	sbrc	r23, 7
    612e:	80 95       	com	r24
    6130:	98 2f       	mov	r25, r24
    6132:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    6136:	9b 01       	movw	r18, r22
    6138:	ac 01       	movw	r20, r24
    613a:	c8 01       	movw	r24, r16
    613c:	b7 01       	movw	r22, r14
    613e:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    6142:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    6146:	70 93 c2 03 	sts	0x03C2, r23
    614a:	60 93 c1 03 	sts	0x03C1, r22
    614e:	15 cf       	rjmp	.-470    	; 0x5f7a <getLeftSpeedFromInput+0x1f8>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    6150:	80 91 f2 07 	lds	r24, 0x07F2
    6154:	90 91 f3 07 	lds	r25, 0x07F3
    6158:	9c 01       	movw	r18, r24
    615a:	c2 9f       	mul	r28, r18
    615c:	c0 01       	movw	r24, r0
    615e:	c3 9f       	mul	r28, r19
    6160:	90 0d       	add	r25, r0
    6162:	d2 9f       	mul	r29, r18
    6164:	90 0d       	add	r25, r0
    6166:	11 24       	eor	r1, r1
    6168:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
    616c:	70 93 c2 03 	sts	0x03C2, r23
    6170:	60 93 c1 03 	sts	0x03C1, r22
    6174:	02 cf       	rjmp	.-508    	; 0x5f7a <getLeftSpeedFromInput+0x1f8>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6176:	98 e0       	ldi	r25, 0x08	; 8
    6178:	89 2e       	mov	r8, r25
    617a:	91 2c       	mov	r9, r1
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    617c:	3f ef       	ldi	r19, 0xFF	; 255
    617e:	83 16       	cp	r8, r19
    6180:	3f ef       	ldi	r19, 0xFF	; 255
    6182:	93 06       	cpc	r9, r19
    6184:	09 f4       	brne	.+2      	; 0x6188 <getLeftSpeedFromInput+0x406>
    6186:	7b c0       	rjmp	.+246    	; 0x627e <getLeftSpeedFromInput+0x4fc>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    6188:	f4 01       	movw	r30, r8
    618a:	31 97       	sbiw	r30, 0x01	; 1
    618c:	ee 0f       	add	r30, r30
    618e:	ff 1f       	adc	r31, r31
    6190:	ee 0f       	add	r30, r30
    6192:	ff 1f       	adc	r31, r31
    6194:	ee 0f       	add	r30, r30
    6196:	ff 1f       	adc	r31, r31
    6198:	ee 0f       	add	r30, r30
    619a:	ff 1f       	adc	r31, r31
    619c:	df 01       	movw	r26, r30
    619e:	a8 50       	subi	r26, 0x08	; 8
    61a0:	b8 4f       	sbci	r27, 0xF8	; 248
    61a2:	cd 90       	ld	r12, X+
    61a4:	dc 90       	ld	r13, X
    61a6:	e0 51       	subi	r30, 0x10	; 16
    61a8:	f8 4f       	sbci	r31, 0xF8	; 248
    61aa:	a2 84       	ldd	r10, Z+10	; 0x0a
    61ac:	b3 84       	ldd	r11, Z+11	; 0x0b
    61ae:	cc 19       	sub	r28, r12
    61b0:	dd 09       	sbc	r29, r13
    61b2:	be 01       	movw	r22, r28
    61b4:	88 27       	eor	r24, r24
    61b6:	77 fd       	sbrc	r23, 7
    61b8:	80 95       	com	r24
    61ba:	98 2f       	mov	r25, r24
    61bc:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    61c0:	7b 01       	movw	r14, r22
    61c2:	8c 01       	movw	r16, r24
    61c4:	f4 01       	movw	r30, r8
    61c6:	e2 95       	swap	r30
    61c8:	f2 95       	swap	r31
    61ca:	f0 7f       	andi	r31, 0xF0	; 240
    61cc:	fe 27       	eor	r31, r30
    61ce:	e0 7f       	andi	r30, 0xF0	; 240
    61d0:	fe 27       	eor	r31, r30
    61d2:	e0 51       	subi	r30, 0x10	; 16
    61d4:	f8 4f       	sbci	r31, 0xF8	; 248
    61d6:	62 85       	ldd	r22, Z+10	; 0x0a
    61d8:	73 85       	ldd	r23, Z+11	; 0x0b
    61da:	6a 19       	sub	r22, r10
    61dc:	7b 09       	sbc	r23, r11
    61de:	88 27       	eor	r24, r24
    61e0:	77 fd       	sbrc	r23, 7
    61e2:	80 95       	com	r24
    61e4:	98 2f       	mov	r25, r24
    61e6:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    61ea:	9b 01       	movw	r18, r22
    61ec:	ac 01       	movw	r20, r24
    61ee:	c8 01       	movw	r24, r16
    61f0:	b7 01       	movw	r22, r14
    61f2:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    61f6:	7b 01       	movw	r14, r22
    61f8:	8c 01       	movw	r16, r24
    61fa:	88 0c       	add	r8, r8
    61fc:	99 1c       	adc	r9, r9
    61fe:	88 0c       	add	r8, r8
    6200:	99 1c       	adc	r9, r9
    6202:	88 0c       	add	r8, r8
    6204:	99 1c       	adc	r9, r9
    6206:	88 0c       	add	r8, r8
    6208:	99 1c       	adc	r9, r9
    620a:	88 ef       	ldi	r24, 0xF8	; 248
    620c:	97 e0       	ldi	r25, 0x07	; 7
    620e:	88 0e       	add	r8, r24
    6210:	99 1e       	adc	r9, r25
    6212:	f4 01       	movw	r30, r8
    6214:	60 81       	ld	r22, Z
    6216:	71 81       	ldd	r23, Z+1	; 0x01
    6218:	6c 19       	sub	r22, r12
    621a:	7d 09       	sbc	r23, r13
    621c:	88 27       	eor	r24, r24
    621e:	77 fd       	sbrc	r23, 7
    6220:	80 95       	com	r24
    6222:	98 2f       	mov	r25, r24
    6224:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    6228:	9b 01       	movw	r18, r22
    622a:	ac 01       	movw	r20, r24
    622c:	c8 01       	movw	r24, r16
    622e:	b7 01       	movw	r22, r14
    6230:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    6234:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    6238:	6a 0d       	add	r22, r10
    623a:	7b 1d       	adc	r23, r11
    623c:	cb 01       	movw	r24, r22
    623e:	30 cf       	rjmp	.-416    	; 0x60a0 <getLeftSpeedFromInput+0x31e>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6240:	88 24       	eor	r8, r8
    6242:	99 24       	eor	r9, r9
    6244:	b2 ce       	rjmp	.-668    	; 0x5faa <getLeftSpeedFromInput+0x228>
    6246:	a1 e0       	ldi	r26, 0x01	; 1
    6248:	8a 2e       	mov	r8, r26
    624a:	91 2c       	mov	r9, r1
    624c:	bb ce       	rjmp	.-650    	; 0x5fc4 <getLeftSpeedFromInput+0x242>
    624e:	27 e0       	ldi	r18, 0x07	; 7
    6250:	82 2e       	mov	r8, r18
    6252:	91 2c       	mov	r9, r1
    6254:	05 cf       	rjmp	.-502    	; 0x6060 <getLeftSpeedFromInput+0x2de>
    6256:	36 e0       	ldi	r19, 0x06	; 6
    6258:	83 2e       	mov	r8, r19
    625a:	91 2c       	mov	r9, r1
    625c:	f4 ce       	rjmp	.-536    	; 0x6046 <getLeftSpeedFromInput+0x2c4>
    625e:	45 e0       	ldi	r20, 0x05	; 5
    6260:	84 2e       	mov	r8, r20
    6262:	91 2c       	mov	r9, r1
    6264:	e3 ce       	rjmp	.-570    	; 0x602c <getLeftSpeedFromInput+0x2aa>
    6266:	54 e0       	ldi	r21, 0x04	; 4
    6268:	85 2e       	mov	r8, r21
    626a:	91 2c       	mov	r9, r1
    626c:	d2 ce       	rjmp	.-604    	; 0x6012 <getLeftSpeedFromInput+0x290>
    626e:	e3 e0       	ldi	r30, 0x03	; 3
    6270:	8e 2e       	mov	r8, r30
    6272:	91 2c       	mov	r9, r1
    6274:	c1 ce       	rjmp	.-638    	; 0x5ff8 <getLeftSpeedFromInput+0x276>
    6276:	f2 e0       	ldi	r31, 0x02	; 2
    6278:	8f 2e       	mov	r8, r31
    627a:	91 2c       	mov	r9, r1
    627c:	b0 ce       	rjmp	.-672    	; 0x5fde <getLeftSpeedFromInput+0x25c>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    627e:	60 91 7a 08 	lds	r22, 0x087A
    6282:	70 91 7b 08 	lds	r23, 0x087B
    6286:	88 27       	eor	r24, r24
    6288:	77 fd       	sbrc	r23, 7
    628a:	80 95       	com	r24
    628c:	98 2f       	mov	r25, r24
    628e:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    6292:	7b 01       	movw	r14, r22
    6294:	8c 01       	movw	r16, r24
    6296:	be 01       	movw	r22, r28
    6298:	88 27       	eor	r24, r24
    629a:	77 fd       	sbrc	r23, 7
    629c:	80 95       	com	r24
    629e:	98 2f       	mov	r25, r24
    62a0:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    62a4:	9b 01       	movw	r18, r22
    62a6:	ac 01       	movw	r20, r24
    62a8:	c8 01       	movw	r24, r16
    62aa:	b7 01       	movw	r22, r14
    62ac:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    62b0:	7b 01       	movw	r14, r22
    62b2:	8c 01       	movw	r16, r24
    62b4:	b6 01       	movw	r22, r12
    62b6:	88 27       	eor	r24, r24
    62b8:	77 fd       	sbrc	r23, 7
    62ba:	80 95       	com	r24
    62bc:	98 2f       	mov	r25, r24
    62be:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    62c2:	9b 01       	movw	r18, r22
    62c4:	ac 01       	movw	r20, r24
    62c6:	c8 01       	movw	r24, r16
    62c8:	b7 01       	movw	r22, r14
    62ca:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    62ce:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    62d2:	cb 01       	movw	r24, r22
    62d4:	e5 ce       	rjmp	.-566    	; 0x60a0 <getLeftSpeedFromInput+0x31e>

000062d6 <__vector_45>:

}


// Motor left
ISR(TIMER4_OVF_vect) {
    62d6:	1f 92       	push	r1
    62d8:	0f 92       	push	r0
    62da:	0f b6       	in	r0, 0x3f	; 63
    62dc:	0f 92       	push	r0
    62de:	11 24       	eor	r1, r1
    62e0:	8f 93       	push	r24
    62e2:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    62e4:	80 91 86 03 	lds	r24, 0x0386
    62e8:	88 23       	and	r24, r24
    62ea:	c1 f1       	breq	.+112    	; 0x635c <__vector_45+0x86>
		pwm_left = 0;
    62ec:	10 92 ea 02 	sts	0x02EA, r1
    62f0:	10 92 e9 02 	sts	0x02E9, r1
		OCR4A = 0;
    62f4:	10 92 a9 00 	sts	0x00A9, r1
    62f8:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    62fc:	10 92 ab 00 	sts	0x00AB, r1
    6300:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    6304:	10 92 d8 02 	sts	0x02D8, r1
    6308:	10 92 d7 02 	sts	0x02D7, r1


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    630c:	80 91 dd 02 	lds	r24, 0x02DD
    6310:	90 91 de 02 	lds	r25, 0x02DE
    6314:	97 fd       	sbrc	r25, 7
    6316:	79 c0       	rjmp	.+242    	; 0x640a <__vector_45+0x134>
			leftMotorPhase = PASSIVE_PHASE;
    6318:	81 e0       	ldi	r24, 0x01	; 1
    631a:	80 93 26 02 	sts	0x0226, r24
			currentMotLeftChannel = 14;
    631e:	8e e0       	ldi	r24, 0x0E	; 14
    6320:	80 93 23 02 	sts	0x0223, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    6324:	81 e0       	ldi	r24, 0x01	; 1
    6326:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    632a:	80 91 a0 00 	lds	r24, 0x00A0
    632e:	8f 75       	andi	r24, 0x5F	; 95
    6330:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6334:	80 91 02 01 	lds	r24, 0x0102
    6338:	87 7e       	andi	r24, 0xE7	; 231
    633a:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    633e:	80 91 72 00 	lds	r24, 0x0072
    6342:	89 7f       	andi	r24, 0xF9	; 249
    6344:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    6348:	89 b3       	in	r24, 0x19	; 25
    634a:	86 60       	ori	r24, 0x06	; 6
    634c:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    634e:	9f 91       	pop	r25
    6350:	8f 91       	pop	r24
    6352:	0f 90       	pop	r0
    6354:	0f be       	out	0x3f, r0	; 63
    6356:	0f 90       	pop	r0
    6358:	1f 90       	pop	r1
    635a:	18 95       	reti
		pwm_left = 0;
		OCR4A = 0;
		OCR4B = 0;
	}

	left_current_avg = 0;
    635c:	10 92 d8 02 	sts	0x02D8, r1
    6360:	10 92 d7 02 	sts	0x02D7, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    6364:	80 91 e9 02 	lds	r24, 0x02E9
    6368:	90 91 ea 02 	lds	r25, 0x02EA
    636c:	00 97       	sbiw	r24, 0x00	; 0
    636e:	71 f2       	breq	.-100    	; 0x630c <__vector_45+0x36>
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    6370:	18 16       	cp	r1, r24
    6372:	19 06       	cpc	r1, r25
    6374:	2c f5       	brge	.+74     	; 0x63c0 <__vector_45+0xea>
		leftMotorPhase = ACTIVE_PHASE;
    6376:	10 92 26 02 	sts	0x0226, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    637a:	8f e0       	ldi	r24, 0x0F	; 15
    637c:	80 93 23 02 	sts	0x0223, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    6380:	80 91 a0 00 	lds	r24, 0x00A0
    6384:	8f 7d       	andi	r24, 0xDF	; 223
    6386:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    638a:	80 91 72 00 	lds	r24, 0x0072
    638e:	8b 7f       	andi	r24, 0xFB	; 251
    6390:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    6394:	80 91 02 01 	lds	r24, 0x0102
    6398:	8f 7e       	andi	r24, 0xEF	; 239
    639a:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    639e:	80 91 a0 00 	lds	r24, 0x00A0
    63a2:	80 68       	ori	r24, 0x80	; 128
    63a4:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    63a8:	80 91 72 00 	lds	r24, 0x0072
    63ac:	82 60       	ori	r24, 0x02	; 2
    63ae:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    63b2:	9f 91       	pop	r25
    63b4:	8f 91       	pop	r24
    63b6:	0f 90       	pop	r0
    63b8:	0f be       	out	0x3f, r0	; 63
    63ba:	0f 90       	pop	r0
    63bc:	1f 90       	pop	r1
    63be:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    63c0:	10 92 26 02 	sts	0x0226, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    63c4:	8e e0       	ldi	r24, 0x0E	; 14
    63c6:	80 93 23 02 	sts	0x0223, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    63ca:	80 91 a0 00 	lds	r24, 0x00A0
    63ce:	8f 77       	andi	r24, 0x7F	; 127
    63d0:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    63d4:	80 91 72 00 	lds	r24, 0x0072
    63d8:	8d 7f       	andi	r24, 0xFD	; 253
    63da:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    63de:	80 91 02 01 	lds	r24, 0x0102
    63e2:	87 7f       	andi	r24, 0xF7	; 247
    63e4:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    63e8:	80 91 a0 00 	lds	r24, 0x00A0
    63ec:	80 62       	ori	r24, 0x20	; 32
    63ee:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    63f2:	80 91 72 00 	lds	r24, 0x0072
    63f6:	84 60       	ori	r24, 0x04	; 4
    63f8:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    63fc:	9f 91       	pop	r25
    63fe:	8f 91       	pop	r24
    6400:	0f 90       	pop	r0
    6402:	0f be       	out	0x3f, r0	; 63
    6404:	0f 90       	pop	r0
    6406:	1f 90       	pop	r1
    6408:	18 95       	reti

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    640a:	81 e0       	ldi	r24, 0x01	; 1
    640c:	80 93 26 02 	sts	0x0226, r24
			currentMotLeftChannel = 15;
    6410:	8f e0       	ldi	r24, 0x0F	; 15
    6412:	80 93 23 02 	sts	0x0223, r24
    6416:	86 cf       	rjmp	.-244    	; 0x6324 <__vector_45+0x4e>

00006418 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    6418:	1f 92       	push	r1
    641a:	0f 92       	push	r0
    641c:	0f b6       	in	r0, 0x3f	; 63
    641e:	0f 92       	push	r0
    6420:	11 24       	eor	r1, r1
    6422:	8f 93       	push	r24
    6424:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6426:	91 e0       	ldi	r25, 0x01	; 1
    6428:	90 93 26 02 	sts	0x0226, r25
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    642c:	8e e0       	ldi	r24, 0x0E	; 14
    642e:	80 93 23 02 	sts	0x0223, r24

	firstSampleLeft = 1;
    6432:	90 93 0a 02 	sts	0x020A, r25

//	LED_GREEN_OFF;

}
    6436:	9f 91       	pop	r25
    6438:	8f 91       	pop	r24
    643a:	0f 90       	pop	r0
    643c:	0f be       	out	0x3f, r0	; 63
    643e:	0f 90       	pop	r0
    6440:	1f 90       	pop	r1
    6442:	18 95       	reti

00006444 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    6444:	1f 92       	push	r1
    6446:	0f 92       	push	r0
    6448:	0f b6       	in	r0, 0x3f	; 63
    644a:	0f 92       	push	r0
    644c:	11 24       	eor	r1, r1
    644e:	8f 93       	push	r24
    6450:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6452:	91 e0       	ldi	r25, 0x01	; 1
    6454:	90 93 26 02 	sts	0x0226, r25
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    6458:	8f e0       	ldi	r24, 0x0F	; 15
    645a:	80 93 23 02 	sts	0x0223, r24

	firstSampleLeft = 1;
    645e:	90 93 0a 02 	sts	0x020A, r25

//	LED_GREEN_OFF;

}
    6462:	9f 91       	pop	r25
    6464:	8f 91       	pop	r24
    6466:	0f 90       	pop	r0
    6468:	0f be       	out	0x3f, r0	; 63
    646a:	0f 90       	pop	r0
    646c:	1f 90       	pop	r1
    646e:	18 95       	reti

00006470 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    6470:	1f 92       	push	r1
    6472:	0f 92       	push	r0
    6474:	0f b6       	in	r0, 0x3f	; 63
    6476:	0f 92       	push	r0
    6478:	11 24       	eor	r1, r1
    647a:	8f 93       	push	r24
    647c:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    647e:	80 91 86 03 	lds	r24, 0x0386
    6482:	88 23       	and	r24, r24
    6484:	b1 f1       	breq	.+108    	; 0x64f2 <__vector_35+0x82>
		pwm_right = 0;
    6486:	10 92 e8 02 	sts	0x02E8, r1
    648a:	10 92 e7 02 	sts	0x02E7, r1
		OCR3A = 0;
    648e:	10 92 99 00 	sts	0x0099, r1
    6492:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    6496:	10 92 9b 00 	sts	0x009B, r1
    649a:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    649e:	10 92 da 02 	sts	0x02DA, r1
    64a2:	10 92 d9 02 	sts	0x02D9, r1
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    64a6:	80 91 db 02 	lds	r24, 0x02DB
    64aa:	90 91 dc 02 	lds	r25, 0x02DC
    64ae:	97 fd       	sbrc	r25, 7
    64b0:	6f c0       	rjmp	.+222    	; 0x6590 <__vector_35+0x120>
			rightMotorPhase = PASSIVE_PHASE;
    64b2:	81 e0       	ldi	r24, 0x01	; 1
    64b4:	80 93 25 02 	sts	0x0225, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    64b8:	8c e0       	ldi	r24, 0x0C	; 12
    64ba:	80 93 24 02 	sts	0x0224, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    64be:	81 e0       	ldi	r24, 0x01	; 1
    64c0:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    64c4:	80 91 90 00 	lds	r24, 0x0090
    64c8:	8f 75       	andi	r24, 0x5F	; 95
    64ca:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    64ce:	8e b1       	in	r24, 0x0e	; 14
    64d0:	87 7e       	andi	r24, 0xE7	; 231
    64d2:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    64d4:	80 91 71 00 	lds	r24, 0x0071
    64d8:	89 7f       	andi	r24, 0xF9	; 249
    64da:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    64de:	88 b3       	in	r24, 0x18	; 24
    64e0:	86 60       	ori	r24, 0x06	; 6
    64e2:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    64e4:	9f 91       	pop	r25
    64e6:	8f 91       	pop	r24
    64e8:	0f 90       	pop	r0
    64ea:	0f be       	out	0x3f, r0	; 63
    64ec:	0f 90       	pop	r0
    64ee:	1f 90       	pop	r1
    64f0:	18 95       	reti
		pwm_right = 0;
		OCR3A = 0;
		OCR3B = 0;
	}

	right_current_avg = 0;
    64f2:	10 92 da 02 	sts	0x02DA, r1
    64f6:	10 92 d9 02 	sts	0x02D9, r1


	if(pwm_right == 0) {
    64fa:	80 91 e7 02 	lds	r24, 0x02E7
    64fe:	90 91 e8 02 	lds	r25, 0x02E8
    6502:	00 97       	sbiw	r24, 0x00	; 0
    6504:	81 f2       	breq	.-96     	; 0x64a6 <__vector_35+0x36>
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    6506:	18 16       	cp	r1, r24
    6508:	19 06       	cpc	r1, r25
    650a:	0c f5       	brge	.+66     	; 0x654e <__vector_35+0xde>
		rightMotorPhase = ACTIVE_PHASE;
    650c:	10 92 25 02 	sts	0x0225, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    6510:	8d e0       	ldi	r24, 0x0D	; 13
    6512:	80 93 24 02 	sts	0x0224, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    6516:	80 91 90 00 	lds	r24, 0x0090
    651a:	8f 7d       	andi	r24, 0xDF	; 223
    651c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    6520:	80 91 71 00 	lds	r24, 0x0071
    6524:	8b 7f       	andi	r24, 0xFB	; 251
    6526:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    652a:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    652c:	80 91 90 00 	lds	r24, 0x0090
    6530:	80 68       	ori	r24, 0x80	; 128
    6532:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    6536:	80 91 71 00 	lds	r24, 0x0071
    653a:	82 60       	ori	r24, 0x02	; 2
    653c:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    6540:	9f 91       	pop	r25
    6542:	8f 91       	pop	r24
    6544:	0f 90       	pop	r0
    6546:	0f be       	out	0x3f, r0	; 63
    6548:	0f 90       	pop	r0
    654a:	1f 90       	pop	r1
    654c:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    654e:	10 92 25 02 	sts	0x0225, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    6552:	8c e0       	ldi	r24, 0x0C	; 12
    6554:	80 93 24 02 	sts	0x0224, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    6558:	80 91 90 00 	lds	r24, 0x0090
    655c:	8f 77       	andi	r24, 0x7F	; 127
    655e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    6562:	80 91 71 00 	lds	r24, 0x0071
    6566:	8d 7f       	andi	r24, 0xFD	; 253
    6568:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    656c:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    656e:	80 91 90 00 	lds	r24, 0x0090
    6572:	80 62       	ori	r24, 0x20	; 32
    6574:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    6578:	80 91 71 00 	lds	r24, 0x0071
    657c:	84 60       	ori	r24, 0x04	; 4
    657e:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    6582:	9f 91       	pop	r25
    6584:	8f 91       	pop	r24
    6586:	0f 90       	pop	r0
    6588:	0f be       	out	0x3f, r0	; 63
    658a:	0f 90       	pop	r0
    658c:	1f 90       	pop	r1
    658e:	18 95       	reti
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    6590:	81 e0       	ldi	r24, 0x01	; 1
    6592:	80 93 25 02 	sts	0x0225, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    6596:	8d e0       	ldi	r24, 0x0D	; 13
    6598:	80 93 24 02 	sts	0x0224, r24
    659c:	90 cf       	rjmp	.-224    	; 0x64be <__vector_35+0x4e>

0000659e <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    659e:	1f 92       	push	r1
    65a0:	0f 92       	push	r0
    65a2:	0f b6       	in	r0, 0x3f	; 63
    65a4:	0f 92       	push	r0
    65a6:	11 24       	eor	r1, r1
    65a8:	8f 93       	push	r24
    65aa:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    65ac:	91 e0       	ldi	r25, 0x01	; 1
    65ae:	90 93 25 02 	sts	0x0225, r25
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    65b2:	8c e0       	ldi	r24, 0x0C	; 12
    65b4:	80 93 24 02 	sts	0x0224, r24

	firstSampleRight = 1;
    65b8:	90 93 09 02 	sts	0x0209, r25

//	LED_RED_OFF;

}
    65bc:	9f 91       	pop	r25
    65be:	8f 91       	pop	r24
    65c0:	0f 90       	pop	r0
    65c2:	0f be       	out	0x3f, r0	; 63
    65c4:	0f 90       	pop	r0
    65c6:	1f 90       	pop	r1
    65c8:	18 95       	reti

000065ca <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    65ca:	1f 92       	push	r1
    65cc:	0f 92       	push	r0
    65ce:	0f b6       	in	r0, 0x3f	; 63
    65d0:	0f 92       	push	r0
    65d2:	11 24       	eor	r1, r1
    65d4:	8f 93       	push	r24
    65d6:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    65d8:	91 e0       	ldi	r25, 0x01	; 1
    65da:	90 93 25 02 	sts	0x0225, r25
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    65de:	8d e0       	ldi	r24, 0x0D	; 13
    65e0:	80 93 24 02 	sts	0x0224, r24

	firstSampleRight = 1;
    65e4:	90 93 09 02 	sts	0x0209, r25

//	LED_RED_OFF;
}
    65e8:	9f 91       	pop	r25
    65ea:	8f 91       	pop	r24
    65ec:	0f 90       	pop	r0
    65ee:	0f be       	out	0x3f, r0	; 63
    65f0:	0f 90       	pop	r0
    65f2:	1f 90       	pop	r1
    65f4:	18 95       	reti

000065f6 <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    65f6:	2f 92       	push	r2
    65f8:	3f 92       	push	r3
    65fa:	4f 92       	push	r4
    65fc:	5f 92       	push	r5
    65fe:	6f 92       	push	r6
    6600:	7f 92       	push	r7
    6602:	8f 92       	push	r8
    6604:	9f 92       	push	r9
    6606:	af 92       	push	r10
    6608:	bf 92       	push	r11
    660a:	cf 92       	push	r12
    660c:	df 92       	push	r13
    660e:	ef 92       	push	r14
    6610:	ff 92       	push	r15
    6612:	0f 93       	push	r16
    6614:	1f 93       	push	r17
    6616:	cf 93       	push	r28
    6618:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    661a:	74 e1       	ldi	r23, 0x14	; 20
    661c:	87 2e       	mov	r8, r23
    661e:	91 2c       	mov	r9, r1
    6620:	90 92 f1 07 	sts	0x07F1, r9
    6624:	80 92 f0 07 	sts	0x07F0, r8
    calibration[1][0] = 40;
    6628:	88 e2       	ldi	r24, 0x28	; 40
    662a:	90 e0       	ldi	r25, 0x00	; 0
    662c:	90 93 01 08 	sts	0x0801, r25
    6630:	80 93 00 08 	sts	0x0800, r24
    calibration[2][0] = 59;
    6634:	8b e3       	ldi	r24, 0x3B	; 59
    6636:	90 e0       	ldi	r25, 0x00	; 0
    6638:	90 93 11 08 	sts	0x0811, r25
    663c:	80 93 10 08 	sts	0x0810, r24
    calibration[3][0] = 79;
    6640:	8f e4       	ldi	r24, 0x4F	; 79
    6642:	90 e0       	ldi	r25, 0x00	; 0
    6644:	90 93 21 08 	sts	0x0821, r25
    6648:	80 93 20 08 	sts	0x0820, r24
    calibration[4][0] = 100;
    664c:	84 e6       	ldi	r24, 0x64	; 100
    664e:	90 e0       	ldi	r25, 0x00	; 0
    6650:	90 93 31 08 	sts	0x0831, r25
    6654:	80 93 30 08 	sts	0x0830, r24
    calibration[5][0] = 120;
    6658:	c8 e7       	ldi	r28, 0x78	; 120
    665a:	d0 e0       	ldi	r29, 0x00	; 0
    665c:	d0 93 41 08 	sts	0x0841, r29
    6660:	c0 93 40 08 	sts	0x0840, r28
    calibration[6][0] = 139;
    6664:	6b e8       	ldi	r22, 0x8B	; 139
    6666:	e6 2e       	mov	r14, r22
    6668:	f1 2c       	mov	r15, r1
    666a:	f0 92 51 08 	sts	0x0851, r15
    666e:	e0 92 50 08 	sts	0x0850, r14
    calibration[7][0] = 159;
    6672:	8f e9       	ldi	r24, 0x9F	; 159
    6674:	90 e0       	ldi	r25, 0x00	; 0
    6676:	90 93 61 08 	sts	0x0861, r25
    667a:	80 93 60 08 	sts	0x0860, r24
	calibration[8][0] = 180;
    667e:	54 eb       	ldi	r21, 0xB4	; 180
    6680:	a5 2e       	mov	r10, r21
    6682:	b1 2c       	mov	r11, r1
    6684:	b0 92 71 08 	sts	0x0871, r11
    6688:	a0 92 70 08 	sts	0x0870, r10
    calibration[0][1] = 19;    	// real speed measured in mm/s
    668c:	23 e1       	ldi	r18, 0x13	; 19
    668e:	30 e0       	ldi	r19, 0x00	; 0
    6690:	30 93 f3 07 	sts	0x07F3, r19
    6694:	20 93 f2 07 	sts	0x07F2, r18
    calibration[1][1] = 47;
    6698:	8f e2       	ldi	r24, 0x2F	; 47
    669a:	90 e0       	ldi	r25, 0x00	; 0
    669c:	90 93 03 08 	sts	0x0803, r25
    66a0:	80 93 02 08 	sts	0x0802, r24
    calibration[2][1] = 72;
    66a4:	88 e4       	ldi	r24, 0x48	; 72
    66a6:	90 e0       	ldi	r25, 0x00	; 0
    66a8:	90 93 13 08 	sts	0x0813, r25
    66ac:	80 93 12 08 	sts	0x0812, r24
    calibration[3][1] = 91;
    66b0:	8b e5       	ldi	r24, 0x5B	; 91
    66b2:	90 e0       	ldi	r25, 0x00	; 0
    66b4:	90 93 23 08 	sts	0x0823, r25
    66b8:	80 93 22 08 	sts	0x0822, r24
    calibration[4][1] = 109;
    66bc:	8d e6       	ldi	r24, 0x6D	; 109
    66be:	90 e0       	ldi	r25, 0x00	; 0
    66c0:	90 93 33 08 	sts	0x0833, r25
    66c4:	80 93 32 08 	sts	0x0832, r24
    calibration[5][1] = 125;
    66c8:	4d e7       	ldi	r20, 0x7D	; 125
    66ca:	c4 2e       	mov	r12, r20
    66cc:	d1 2c       	mov	r13, r1
    66ce:	d0 92 43 08 	sts	0x0843, r13
    66d2:	c0 92 42 08 	sts	0x0842, r12
    calibration[6][1] = 143;
    66d6:	8f e8       	ldi	r24, 0x8F	; 143
    66d8:	90 e0       	ldi	r25, 0x00	; 0
    66da:	90 93 53 08 	sts	0x0853, r25
    66de:	80 93 52 08 	sts	0x0852, r24
    calibration[7][1] = 160;
    66e2:	40 ea       	ldi	r20, 0xA0	; 160
    66e4:	50 e0       	ldi	r21, 0x00	; 0
    66e6:	50 93 63 08 	sts	0x0863, r21
    66ea:	40 93 62 08 	sts	0x0862, r20
	calibration[8][1] = 174;
    66ee:	8e ea       	ldi	r24, 0xAE	; 174
    66f0:	90 e0       	ldi	r25, 0x00	; 0
    66f2:	90 93 73 08 	sts	0x0873, r25
    66f6:	80 93 72 08 	sts	0x0872, r24
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    66fa:	30 93 f5 07 	sts	0x07F5, r19
    66fe:	20 93 f4 07 	sts	0x07F4, r18
    calibration[1][2] = 39;
    6702:	67 e2       	ldi	r22, 0x27	; 39
    6704:	70 e0       	ldi	r23, 0x00	; 0
    6706:	70 93 05 08 	sts	0x0805, r23
    670a:	60 93 04 08 	sts	0x0804, r22
    calibration[2][2] = 60;
    670e:	0c e3       	ldi	r16, 0x3C	; 60
    6710:	10 e0       	ldi	r17, 0x00	; 0
    6712:	10 93 15 08 	sts	0x0815, r17
    6716:	00 93 14 08 	sts	0x0814, r16
    calibration[3][2] = 80;
    671a:	20 e5       	ldi	r18, 0x50	; 80
    671c:	22 2e       	mov	r2, r18
    671e:	31 2c       	mov	r3, r1
    6720:	30 92 25 08 	sts	0x0825, r3
    6724:	20 92 24 08 	sts	0x0824, r2
    calibration[4][2] = 99;
    6728:	a3 e6       	ldi	r26, 0x63	; 99
    672a:	b0 e0       	ldi	r27, 0x00	; 0
    672c:	b0 93 35 08 	sts	0x0835, r27
    6730:	a0 93 34 08 	sts	0x0834, r26
    calibration[5][2] = 119;
    6734:	27 e7       	ldi	r18, 0x77	; 119
    6736:	30 e0       	ldi	r19, 0x00	; 0
    6738:	30 93 45 08 	sts	0x0845, r19
    673c:	20 93 44 08 	sts	0x0844, r18
    calibration[6][2] = 140;
    6740:	ec e8       	ldi	r30, 0x8C	; 140
    6742:	f0 e0       	ldi	r31, 0x00	; 0
    6744:	f0 93 55 08 	sts	0x0855, r31
    6748:	e0 93 54 08 	sts	0x0854, r30
    calibration[7][2] = 160;
    674c:	50 93 65 08 	sts	0x0865, r21
    6750:	40 93 64 08 	sts	0x0864, r20
	calibration[8][2] = 180;
    6754:	b0 92 75 08 	sts	0x0875, r11
    6758:	a0 92 74 08 	sts	0x0874, r10
    calibration[0][3] = 23;    	// real speed measured in mm/s
    675c:	87 e1       	ldi	r24, 0x17	; 23
    675e:	90 e0       	ldi	r25, 0x00	; 0
    6760:	90 93 f7 07 	sts	0x07F7, r25
    6764:	80 93 f6 07 	sts	0x07F6, r24
    calibration[1][3] = 46;
    6768:	9e e2       	ldi	r25, 0x2E	; 46
    676a:	49 2e       	mov	r4, r25
    676c:	51 2c       	mov	r5, r1
    676e:	50 92 07 08 	sts	0x0807, r5
    6772:	40 92 06 08 	sts	0x0806, r4
    calibration[2][3] = 64;
    6776:	80 e4       	ldi	r24, 0x40	; 64
    6778:	90 e0       	ldi	r25, 0x00	; 0
    677a:	90 93 17 08 	sts	0x0817, r25
    677e:	80 93 16 08 	sts	0x0816, r24
    calibration[3][3] = 81;
    6782:	81 e5       	ldi	r24, 0x51	; 81
    6784:	68 2e       	mov	r6, r24
    6786:	71 2c       	mov	r7, r1
    6788:	70 92 27 08 	sts	0x0827, r7
    678c:	60 92 26 08 	sts	0x0826, r6
    calibration[4][3] = 97;
    6790:	81 e6       	ldi	r24, 0x61	; 97
    6792:	90 e0       	ldi	r25, 0x00	; 0
    6794:	90 93 37 08 	sts	0x0837, r25
    6798:	80 93 36 08 	sts	0x0836, r24
    calibration[5][3] = 112;
    679c:	80 e7       	ldi	r24, 0x70	; 112
    679e:	90 e0       	ldi	r25, 0x00	; 0
    67a0:	90 93 47 08 	sts	0x0847, r25
    67a4:	80 93 46 08 	sts	0x0846, r24
    calibration[6][3] = 125;
    67a8:	d0 92 57 08 	sts	0x0857, r13
    67ac:	c0 92 56 08 	sts	0x0856, r12
    calibration[7][3] = 139;
    67b0:	f0 92 67 08 	sts	0x0867, r15
    67b4:	e0 92 66 08 	sts	0x0866, r14
	calibration[8][3] = 152;
    67b8:	88 e9       	ldi	r24, 0x98	; 152
    67ba:	90 e0       	ldi	r25, 0x00	; 0
    67bc:	90 93 77 08 	sts	0x0877, r25
    67c0:	80 93 76 08 	sts	0x0876, r24
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    67c4:	90 92 f9 07 	sts	0x07F9, r9
    67c8:	80 92 f8 07 	sts	0x07F8, r8
    calibration[1][4] = 39;
    67cc:	70 93 09 08 	sts	0x0809, r23
    67d0:	60 93 08 08 	sts	0x0808, r22
    calibration[2][4] = 60;
    67d4:	10 93 19 08 	sts	0x0819, r17
    67d8:	00 93 18 08 	sts	0x0818, r16
    calibration[3][4] = 79;
    67dc:	8f e4       	ldi	r24, 0x4F	; 79
    67de:	90 e0       	ldi	r25, 0x00	; 0
    67e0:	90 93 29 08 	sts	0x0829, r25
    67e4:	80 93 28 08 	sts	0x0828, r24
    calibration[4][4] = 99;
    67e8:	b0 93 39 08 	sts	0x0839, r27
    67ec:	a0 93 38 08 	sts	0x0838, r26
    calibration[5][4] = 120;
    67f0:	d0 93 49 08 	sts	0x0849, r29
    67f4:	c0 93 48 08 	sts	0x0848, r28
    calibration[6][4] = 140;
    67f8:	f0 93 59 08 	sts	0x0859, r31
    67fc:	e0 93 58 08 	sts	0x0858, r30
    calibration[7][4] = 160;
    6800:	50 93 69 08 	sts	0x0869, r21
    6804:	40 93 68 08 	sts	0x0868, r20
	calibration[8][4] = 179;
    6808:	83 eb       	ldi	r24, 0xB3	; 179
    680a:	90 e0       	ldi	r25, 0x00	; 0
    680c:	90 93 79 08 	sts	0x0879, r25
    6810:	80 93 78 08 	sts	0x0878, r24
    calibration[0][5] = 18;    	// real speed measured in mm/s
    6814:	82 e1       	ldi	r24, 0x12	; 18
    6816:	90 e0       	ldi	r25, 0x00	; 0
    6818:	90 93 fb 07 	sts	0x07FB, r25
    681c:	80 93 fa 07 	sts	0x07FA, r24
    calibration[1][5] = 45;
    6820:	8d e2       	ldi	r24, 0x2D	; 45
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	90 93 0b 08 	sts	0x080B, r25
    6828:	80 93 0a 08 	sts	0x080A, r24
    calibration[2][5] = 68;
    682c:	84 e4       	ldi	r24, 0x44	; 68
    682e:	90 e0       	ldi	r25, 0x00	; 0
    6830:	90 93 1b 08 	sts	0x081B, r25
    6834:	80 93 1a 08 	sts	0x081A, r24
    calibration[3][5] = 87;
    6838:	87 e5       	ldi	r24, 0x57	; 87
    683a:	90 e0       	ldi	r25, 0x00	; 0
    683c:	90 93 2b 08 	sts	0x082B, r25
    6840:	80 93 2a 08 	sts	0x082A, r24
    calibration[4][5] = 105;
    6844:	89 e6       	ldi	r24, 0x69	; 105
    6846:	90 e0       	ldi	r25, 0x00	; 0
    6848:	90 93 3b 08 	sts	0x083B, r25
    684c:	80 93 3a 08 	sts	0x083A, r24
    calibration[5][5] = 119;
    6850:	30 93 4b 08 	sts	0x084B, r19
    6854:	20 93 4a 08 	sts	0x084A, r18
    calibration[6][5] = 137;
    6858:	89 e8       	ldi	r24, 0x89	; 137
    685a:	90 e0       	ldi	r25, 0x00	; 0
    685c:	90 93 5b 08 	sts	0x085B, r25
    6860:	80 93 5a 08 	sts	0x085A, r24
    calibration[7][5] = 151;
    6864:	87 e9       	ldi	r24, 0x97	; 151
    6866:	90 e0       	ldi	r25, 0x00	; 0
    6868:	90 93 6b 08 	sts	0x086B, r25
    686c:	80 93 6a 08 	sts	0x086A, r24
	calibration[8][5] = 168;
    6870:	88 ea       	ldi	r24, 0xA8	; 168
    6872:	90 e0       	ldi	r25, 0x00	; 0
    6874:	90 93 7b 08 	sts	0x087B, r25
    6878:	80 93 7a 08 	sts	0x087A, r24
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    687c:	90 92 fd 07 	sts	0x07FD, r9
    6880:	80 92 fc 07 	sts	0x07FC, r8
    calibration[1][6] = 39;
    6884:	70 93 0d 08 	sts	0x080D, r23
    6888:	60 93 0c 08 	sts	0x080C, r22
    calibration[2][6] = 59;
    688c:	8b e3       	ldi	r24, 0x3B	; 59
    688e:	90 e0       	ldi	r25, 0x00	; 0
    6890:	90 93 1d 08 	sts	0x081D, r25
    6894:	80 93 1c 08 	sts	0x081C, r24
    calibration[3][6] = 80;
    6898:	30 92 2d 08 	sts	0x082D, r3
    689c:	20 92 2c 08 	sts	0x082C, r2
    calibration[4][6] = 100;
    68a0:	84 e6       	ldi	r24, 0x64	; 100
    68a2:	90 e0       	ldi	r25, 0x00	; 0
    68a4:	90 93 3d 08 	sts	0x083D, r25
    68a8:	80 93 3c 08 	sts	0x083C, r24
    calibration[5][6] = 119;
    68ac:	30 93 4d 08 	sts	0x084D, r19
    68b0:	20 93 4c 08 	sts	0x084C, r18
    calibration[6][6] = 139;
    68b4:	f0 92 5d 08 	sts	0x085D, r15
    68b8:	e0 92 5c 08 	sts	0x085C, r14
    calibration[7][6] = 160;
    68bc:	50 93 6d 08 	sts	0x086D, r21
    68c0:	40 93 6c 08 	sts	0x086C, r20
	calibration[8][6] = 180;
    68c4:	b0 92 7d 08 	sts	0x087D, r11
    68c8:	a0 92 7c 08 	sts	0x087C, r10
    calibration[0][7] = 22;    	// real speed measured in mm/s
    68cc:	86 e1       	ldi	r24, 0x16	; 22
    68ce:	90 e0       	ldi	r25, 0x00	; 0
    68d0:	90 93 ff 07 	sts	0x07FF, r25
    68d4:	80 93 fe 07 	sts	0x07FE, r24
    calibration[1][7] = 46;
    68d8:	50 92 0f 08 	sts	0x080F, r5
    68dc:	40 92 0e 08 	sts	0x080E, r4
    calibration[2][7] = 65;
    68e0:	81 e4       	ldi	r24, 0x41	; 65
    68e2:	90 e0       	ldi	r25, 0x00	; 0
    68e4:	90 93 1f 08 	sts	0x081F, r25
    68e8:	80 93 1e 08 	sts	0x081E, r24
    calibration[3][7] = 81;
    68ec:	70 92 2f 08 	sts	0x082F, r7
    68f0:	60 92 2e 08 	sts	0x082E, r6
    calibration[4][7] = 96;
    68f4:	80 e6       	ldi	r24, 0x60	; 96
    68f6:	90 e0       	ldi	r25, 0x00	; 0
    68f8:	90 93 3f 08 	sts	0x083F, r25
    68fc:	80 93 3e 08 	sts	0x083E, r24
    calibration[5][7] = 111;
    6900:	8f e6       	ldi	r24, 0x6F	; 111
    6902:	90 e0       	ldi	r25, 0x00	; 0
    6904:	90 93 4f 08 	sts	0x084F, r25
    6908:	80 93 4e 08 	sts	0x084E, r24
    calibration[6][7] = 125;
    690c:	d0 92 5f 08 	sts	0x085F, r13
    6910:	c0 92 5e 08 	sts	0x085E, r12
    calibration[7][7] = 139;
    6914:	f0 92 6f 08 	sts	0x086F, r15
    6918:	e0 92 6e 08 	sts	0x086E, r14
	calibration[8][7] = 153;
    691c:	89 e9       	ldi	r24, 0x99	; 153
    691e:	90 e0       	ldi	r25, 0x00	; 0
    6920:	90 93 7f 08 	sts	0x087F, r25
    6924:	80 93 7e 08 	sts	0x087E, r24

    writeCalibrationToFlash();
    6928:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <writeCalibrationToFlash>
}
    692c:	df 91       	pop	r29
    692e:	cf 91       	pop	r28
    6930:	1f 91       	pop	r17
    6932:	0f 91       	pop	r16
    6934:	ff 90       	pop	r15
    6936:	ef 90       	pop	r14
    6938:	df 90       	pop	r13
    693a:	cf 90       	pop	r12
    693c:	bf 90       	pop	r11
    693e:	af 90       	pop	r10
    6940:	9f 90       	pop	r9
    6942:	8f 90       	pop	r8
    6944:	7f 90       	pop	r7
    6946:	6f 90       	pop	r6
    6948:	5f 90       	pop	r5
    694a:	4f 90       	pop	r4
    694c:	3f 90       	pop	r3
    694e:	2f 90       	pop	r2
    6950:	08 95       	ret

00006952 <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    6952:	80 91 6f 0a 	lds	r24, 0x0A6F
    6956:	84 30       	cpi	r24, 0x04	; 4
    6958:	09 f4       	brne	.+2      	; 0x695c <handleCalibration+0xa>
    695a:	05 c2       	rjmp	.+1034   	; 0x6d66 <handleCalibration+0x414>
    695c:	85 30       	cpi	r24, 0x05	; 5
    695e:	80 f0       	brcs	.+32     	; 0x6980 <handleCalibration+0x2e>
    6960:	86 30       	cpi	r24, 0x06	; 6
    6962:	09 f4       	brne	.+2      	; 0x6966 <handleCalibration+0x14>
    6964:	ac c2       	rjmp	.+1368   	; 0x6ebe <handleCalibration+0x56c>
    6966:	86 30       	cpi	r24, 0x06	; 6
    6968:	b0 f5       	brcc	.+108    	; 0x69d6 <handleCalibration+0x84>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
    696a:	80 91 c9 07 	lds	r24, 0x07C9
    696e:	8f 5f       	subi	r24, 0xFF	; 255
    6970:	80 93 c9 07 	sts	0x07C9, r24
            if(calibVelIndex == 10) {
    6974:	8a 30       	cpi	r24, 0x0A	; 10
    6976:	09 f4       	brne	.+2      	; 0x697a <handleCalibration+0x28>
    6978:	5e c3       	rjmp	.+1724   	; 0x7036 <handleCalibration+0x6e4>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = CALIBRATION_STATE_SET_SPEED;
    697a:	10 92 6f 0a 	sts	0x0A6F, r1
    697e:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    6980:	81 30       	cpi	r24, 0x01	; 1
    6982:	09 f4       	brne	.+2      	; 0x6986 <handleCalibration+0x34>
    6984:	a1 c1       	rjmp	.+834    	; 0x6cc8 <handleCalibration+0x376>
    6986:	81 30       	cpi	r24, 0x01	; 1
    6988:	08 f0       	brcs	.+2      	; 0x698c <handleCalibration+0x3a>
    698a:	a2 c0       	rjmp	.+324    	; 0x6ad0 <handleCalibration+0x17e>
			}
			break;


    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    698c:	80 91 b0 03 	lds	r24, 0x03B0
    6990:	88 23       	and	r24, r24
    6992:	09 f0       	breq	.+2      	; 0x6996 <handleCalibration+0x44>
    6994:	a2 c2       	rjmp	.+1348   	; 0x6eda <handleCalibration+0x588>
				pwm_intermediate_right_desired = 0;
    6996:	10 92 f0 02 	sts	0x02F0, r1
    699a:	10 92 ef 02 	sts	0x02EF, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    699e:	80 91 c9 07 	lds	r24, 0x07C9
    69a2:	25 e0       	ldi	r18, 0x05	; 5
    69a4:	82 9f       	mul	r24, r18
    69a6:	c0 01       	movw	r24, r0
    69a8:	11 24       	eor	r1, r1
    69aa:	88 0f       	add	r24, r24
    69ac:	99 1f       	adc	r25, r25
    69ae:	88 0f       	add	r24, r24
    69b0:	99 1f       	adc	r25, r25
    69b2:	90 93 f2 02 	sts	0x02F2, r25
    69b6:	80 93 f1 02 	sts	0x02F1, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = CALIBRATION_STATE_START_MEASURE;
    69ba:	81 e0       	ldi	r24, 0x01	; 1
    69bc:	80 93 6f 0a 	sts	0x0A6F, r24
            timeoutOdometry = getTime100MicroSec();
    69c0:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    69c4:	60 93 3f 0a 	sts	0x0A3F, r22
    69c8:	70 93 40 0a 	sts	0x0A40, r23
    69cc:	80 93 41 0a 	sts	0x0A41, r24
    69d0:	90 93 42 0a 	sts	0x0A42, r25
    69d4:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    69d6:	87 30       	cpi	r24, 0x07	; 7
    69d8:	09 f4       	brne	.+2      	; 0x69dc <handleCalibration+0x8a>
    69da:	2e c2       	rjmp	.+1116   	; 0x6e38 <handleCalibration+0x4e6>
    69dc:	88 30       	cpi	r24, 0x08	; 8
    69de:	79 f6       	brne	.-98     	; 0x697e <handleCalibration+0x2c>
	            timeoutOdometry = getTime100MicroSec();
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved. Moreover calibrate also the magnetometer.
			if(useAccel == USE_LSM6DS3US) {
    69e0:	80 91 19 03 	lds	r24, 0x0319
    69e4:	83 30       	cpi	r24, 0x03	; 3
    69e6:	09 f4       	brne	.+2      	; 0x69ea <handleCalibration+0x98>
    69e8:	d1 c2       	rjmp	.+1442   	; 0x6f8c <handleCalibration+0x63a>
					if(magOffsetMin[2] > magZ) {
						magOffsetMin[2] = magZ;
					}
				}
			}
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) { 
    69ea:	80 91 b0 03 	lds	r24, 0x03B0
    69ee:	88 23       	and	r24, r24
    69f0:	09 f0       	breq	.+2      	; 0x69f4 <handleCalibration+0xa2>
    69f2:	03 c1       	rjmp	.+518    	; 0x6bfa <handleCalibration+0x2a8>
				if(proximityResult[8] < minGround) {
    69f4:	20 91 67 02 	lds	r18, 0x0267
    69f8:	30 91 68 02 	lds	r19, 0x0268
    69fc:	80 91 cd 03 	lds	r24, 0x03CD
    6a00:	90 91 ce 03 	lds	r25, 0x03CE
    6a04:	28 17       	cp	r18, r24
    6a06:	39 07       	cpc	r19, r25
    6a08:	0c f4       	brge	.+2      	; 0x6a0c <handleCalibration+0xba>
    6a0a:	06 c1       	rjmp	.+524    	; 0x6c18 <handleCalibration+0x2c6>
				}
			} else {
				if(proximityResult[11] < minGround) {
					minGround = proximityResult[11];
				}
				if(proximityResult[11] > maxGround) {
    6a0c:	80 91 cf 03 	lds	r24, 0x03CF
    6a10:	90 91 d0 03 	lds	r25, 0x03D0
    6a14:	82 17       	cp	r24, r18
    6a16:	93 07       	cpc	r25, r19
    6a18:	24 f4       	brge	.+8      	; 0x6a22 <handleCalibration+0xd0>
					maxGround = proximityResult[11];
    6a1a:	30 93 d0 03 	sts	0x03D0, r19
    6a1e:	20 93 cf 03 	sts	0x03CF, r18
				}
			}			
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_5_SEC) {    // the robot seems to be still, go to next velcoity
    6a22:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    6a26:	20 91 3f 0a 	lds	r18, 0x0A3F
    6a2a:	30 91 40 0a 	lds	r19, 0x0A40
    6a2e:	40 91 41 0a 	lds	r20, 0x0A41
    6a32:	50 91 42 0a 	lds	r21, 0x0A42
    6a36:	62 1b       	sub	r22, r18
    6a38:	73 0b       	sbc	r23, r19
    6a3a:	84 0b       	sbc	r24, r20
    6a3c:	95 0b       	sbc	r25, r21
    6a3e:	6e 5c       	subi	r22, 0xCE	; 206
    6a40:	7b 4b       	sbci	r23, 0xBB	; 187
    6a42:	80 40       	sbci	r24, 0x00	; 0
    6a44:	90 40       	sbci	r25, 0x00	; 0
    6a46:	08 f4       	brcc	.+2      	; 0x6a4a <handleCalibration+0xf8>
    6a48:	9a cf       	rjmp	.-204    	; 0x697e <handleCalibration+0x2c>
				calibrationThr = (minGround + maxGround)>>1;	// Take the average of the 2 as the reference threshold value.
    6a4a:	80 91 cf 03 	lds	r24, 0x03CF
    6a4e:	90 91 d0 03 	lds	r25, 0x03D0
    6a52:	20 91 cd 03 	lds	r18, 0x03CD
    6a56:	30 91 ce 03 	lds	r19, 0x03CE
    6a5a:	82 0f       	add	r24, r18
    6a5c:	93 1f       	adc	r25, r19
    6a5e:	95 95       	asr	r25
    6a60:	87 95       	ror	r24
    6a62:	90 93 d2 03 	sts	0x03D2, r25
    6a66:	80 93 d1 03 	sts	0x03D1, r24
				//calibrationThrLow = calibrationThr - ((maxGround-minGround)>>2);	// Use an histeresys between max and min (not needed...).
				//calibrationThrHigh = calibrationThr + ((maxGround-minGround)>>2);
				magOffset[0] = (magOffsetMax[0] + magOffsetMin[0])>>1;
    6a6a:	80 91 50 03 	lds	r24, 0x0350
    6a6e:	90 91 51 03 	lds	r25, 0x0351
    6a72:	20 91 4a 03 	lds	r18, 0x034A
    6a76:	30 91 4b 03 	lds	r19, 0x034B
    6a7a:	82 0f       	add	r24, r18
    6a7c:	93 1f       	adc	r25, r19
    6a7e:	95 95       	asr	r25
    6a80:	87 95       	ror	r24
    6a82:	90 93 57 03 	sts	0x0357, r25
    6a86:	80 93 56 03 	sts	0x0356, r24
				magOffset[1] = (magOffsetMax[1] + magOffsetMin[1])>>1;
    6a8a:	80 91 52 03 	lds	r24, 0x0352
    6a8e:	90 91 53 03 	lds	r25, 0x0353
    6a92:	20 91 4c 03 	lds	r18, 0x034C
    6a96:	30 91 4d 03 	lds	r19, 0x034D
    6a9a:	82 0f       	add	r24, r18
    6a9c:	93 1f       	adc	r25, r19
    6a9e:	95 95       	asr	r25
    6aa0:	87 95       	ror	r24
    6aa2:	90 93 59 03 	sts	0x0359, r25
    6aa6:	80 93 58 03 	sts	0x0358, r24
				magOffset[2] = (magOffsetMax[2] + magOffsetMin[2])>>1;				
    6aaa:	80 91 54 03 	lds	r24, 0x0354
    6aae:	90 91 55 03 	lds	r25, 0x0355
    6ab2:	20 91 4e 03 	lds	r18, 0x034E
    6ab6:	30 91 4f 03 	lds	r19, 0x034F
    6aba:	82 0f       	add	r24, r18
    6abc:	93 1f       	adc	r25, r19
    6abe:	95 95       	asr	r25
    6ac0:	87 95       	ror	r24
    6ac2:	90 93 5b 03 	sts	0x035B, r25
    6ac6:	80 93 5a 03 	sts	0x035A, r24
                calibState = CALIBRATION_STATE_SET_SPEED;				
    6aca:	10 92 6f 0a 	sts	0x0A6F, r1
    6ace:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    6ad0:	82 30       	cpi	r24, 0x02	; 2
    6ad2:	09 f4       	brne	.+2      	; 0x6ad6 <handleCalibration+0x184>
    6ad4:	84 c1       	rjmp	.+776    	; 0x6dde <handleCalibration+0x48c>
    6ad6:	83 30       	cpi	r24, 0x03	; 3
    6ad8:	09 f0       	breq	.+2      	; 0x6adc <handleCalibration+0x18a>
    6ada:	51 cf       	rjmp	.-350    	; 0x697e <handleCalibration+0x2c>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    6adc:	80 91 b0 03 	lds	r24, 0x03B0
    6ae0:	88 23       	and	r24, r24
    6ae2:	09 f4       	brne	.+2      	; 0x6ae6 <handleCalibration+0x194>
    6ae4:	9e c0       	rjmp	.+316    	; 0x6c22 <handleCalibration+0x2d0>
    6ae6:	82 30       	cpi	r24, 0x02	; 2
    6ae8:	09 f4       	brne	.+2      	; 0x6aec <handleCalibration+0x19a>
    6aea:	9b c0       	rjmp	.+310    	; 0x6c22 <handleCalibration+0x2d0>
                    updateOdomData();
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    6aec:	20 91 6d 02 	lds	r18, 0x026D
    6af0:	30 91 6e 02 	lds	r19, 0x026E
    6af4:	80 91 d1 03 	lds	r24, 0x03D1
    6af8:	90 91 d2 03 	lds	r25, 0x03D2
    6afc:	28 17       	cp	r18, r24
    6afe:	39 07       	cpc	r19, r25
    6b00:	0c f0       	brlt	.+2      	; 0x6b04 <handleCalibration+0x1b2>
    6b02:	55 c0       	rjmp	.+170    	; 0x6bae <handleCalibration+0x25c>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    6b04:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    6b08:	20 91 5b 04 	lds	r18, 0x045B
    6b0c:	30 91 5c 04 	lds	r19, 0x045C
    6b10:	40 91 5d 04 	lds	r20, 0x045D
    6b14:	50 91 5e 04 	lds	r21, 0x045E
    6b18:	62 1b       	sub	r22, r18
    6b1a:	73 0b       	sbc	r23, r19
    6b1c:	84 0b       	sbc	r24, r20
    6b1e:	95 0b       	sbc	r25, r21
    6b20:	60 93 5b 04 	sts	0x045B, r22
    6b24:	70 93 5c 04 	sts	0x045C, r23
    6b28:	80 93 5d 04 	sts	0x045D, r24
    6b2c:	90 93 5e 04 	sts	0x045E, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    6b30:	0e 94 73 5b 	call	0xb6e6	; 0xb6e6 <__floatunsisf>
    6b34:	20 e0       	ldi	r18, 0x00	; 0
    6b36:	30 e0       	ldi	r19, 0x00	; 0
    6b38:	40 ed       	ldi	r20, 0xD0	; 208
    6b3a:	52 e4       	ldi	r21, 0x42	; 66
    6b3c:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    6b40:	20 e0       	ldi	r18, 0x00	; 0
    6b42:	34 e2       	ldi	r19, 0x24	; 36
    6b44:	44 e7       	ldi	r20, 0x74	; 116
    6b46:	59 e4       	ldi	r21, 0x49	; 73
    6b48:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    6b4c:	9b 01       	movw	r18, r22
    6b4e:	ac 01       	movw	r20, r24
    6b50:	64 e1       	ldi	r22, 0x14	; 20
    6b52:	7e e2       	ldi	r23, 0x2E	; 46
    6b54:	88 e7       	ldi	r24, 0x78	; 120
    6b56:	93 e4       	ldi	r25, 0x43	; 67
    6b58:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    6b5c:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__fixunssfsi>
    6b60:	70 93 85 0a 	sts	0x0A85, r23
    6b64:	60 93 84 0a 	sts	0x0A84, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    6b68:	20 91 bb 03 	lds	r18, 0x03BB
    6b6c:	30 91 bc 03 	lds	r19, 0x03BC
    6b70:	40 e0       	ldi	r20, 0x00	; 0
    6b72:	50 e0       	ldi	r21, 0x00	; 0
    6b74:	60 91 b5 03 	lds	r22, 0x03B5
    6b78:	70 91 b6 03 	lds	r23, 0x03B6
    6b7c:	80 91 b7 03 	lds	r24, 0x03B7
    6b80:	90 91 b8 03 	lds	r25, 0x03B8
    6b84:	0e 94 5f 5d 	call	0xbabe	; 0xbabe <__divmodsi4>
    6b88:	30 93 c0 03 	sts	0x03C0, r19
    6b8c:	20 93 bf 03 	sts	0x03BF, r18
					updateOdomData();
    6b90:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <updateOdomData>
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_2;
    6b94:	84 e0       	ldi	r24, 0x04	; 4
    6b96:	80 93 6f 0a 	sts	0x0A6F, r24
                    timeoutOdometry = getTime100MicroSec();;
    6b9a:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    6b9e:	60 93 3f 0a 	sts	0x0A3F, r22
    6ba2:	70 93 40 0a 	sts	0x0A40, r23
    6ba6:	80 93 41 0a 	sts	0x0A41, r24
    6baa:	90 93 42 0a 	sts	0x0A42, r25
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    6bae:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    6bb2:	20 91 3f 0a 	lds	r18, 0x0A3F
    6bb6:	30 91 40 0a 	lds	r19, 0x0A40
    6bba:	40 91 41 0a 	lds	r20, 0x0A41
    6bbe:	50 91 42 0a 	lds	r21, 0x0A42
    6bc2:	62 1b       	sub	r22, r18
    6bc4:	73 0b       	sbc	r23, r19
    6bc6:	84 0b       	sbc	r24, r20
    6bc8:	95 0b       	sbc	r25, r21
    6bca:	6c 59       	subi	r22, 0x9C	; 156
    6bcc:	7d 4c       	sbci	r23, 0xCD	; 205
    6bce:	88 40       	sbci	r24, 0x08	; 8
    6bd0:	90 40       	sbci	r25, 0x00	; 0
    6bd2:	08 f4       	brcc	.+2      	; 0x6bd6 <handleCalibration+0x284>
    6bd4:	d4 ce       	rjmp	.-600    	; 0x697e <handleCalibration+0x2c>
            	tempVel = 0;
    6bd6:	10 92 85 0a 	sts	0x0A85, r1
    6bda:	10 92 84 0a 	sts	0x0A84, r1
				avgLeftSpeed = 0;
    6bde:	10 92 be 03 	sts	0x03BE, r1
    6be2:	10 92 bd 03 	sts	0x03BD, r1
				avgRightSpeed = 0;
    6be6:	10 92 c0 03 	sts	0x03C0, r1
    6bea:	10 92 bf 03 	sts	0x03BF, r1
                updateOdomData();
    6bee:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <updateOdomData>
                calibState = CALIBRATION_STATE_NEXT;
    6bf2:	85 e0       	ldi	r24, 0x05	; 5
    6bf4:	80 93 6f 0a 	sts	0x0A6F, r24
    6bf8:	08 95       	ret
					if(magOffsetMin[2] > magZ) {
						magOffsetMin[2] = magZ;
					}
				}
			}
			if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) { 
    6bfa:	82 30       	cpi	r24, 0x02	; 2
    6bfc:	09 f4       	brne	.+2      	; 0x6c00 <handleCalibration+0x2ae>
    6bfe:	fa ce       	rjmp	.-524    	; 0x69f4 <handleCalibration+0xa2>
				}
				if(proximityResult[8] > maxGround) {
					maxGround = proximityResult[8];
				}
			} else {
				if(proximityResult[11] < minGround) {
    6c00:	20 91 6d 02 	lds	r18, 0x026D
    6c04:	30 91 6e 02 	lds	r19, 0x026E
    6c08:	80 91 cd 03 	lds	r24, 0x03CD
    6c0c:	90 91 ce 03 	lds	r25, 0x03CE
    6c10:	28 17       	cp	r18, r24
    6c12:	39 07       	cpc	r19, r25
    6c14:	0c f0       	brlt	.+2      	; 0x6c18 <handleCalibration+0x2c6>
    6c16:	fa ce       	rjmp	.-524    	; 0x6a0c <handleCalibration+0xba>
					minGround = proximityResult[11];
    6c18:	30 93 ce 03 	sts	0x03CE, r19
    6c1c:	20 93 cd 03 	sts	0x03CD, r18
    6c20:	f5 ce       	rjmp	.-534    	; 0x6a0c <handleCalibration+0xba>
			}
            break;

		case CALIBRATION_STATE_STOP_MEASURE: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {	
    6c22:	20 91 67 02 	lds	r18, 0x0267
    6c26:	30 91 68 02 	lds	r19, 0x0268
    6c2a:	80 91 d1 03 	lds	r24, 0x03D1
    6c2e:	90 91 d2 03 	lds	r25, 0x03D2
    6c32:	28 17       	cp	r18, r24
    6c34:	39 07       	cpc	r19, r25
    6c36:	0c f0       	brlt	.+2      	; 0x6c3a <handleCalibration+0x2e8>
    6c38:	ba cf       	rjmp	.-140    	; 0x6bae <handleCalibration+0x25c>
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    6c3a:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    6c3e:	20 91 5b 04 	lds	r18, 0x045B
    6c42:	30 91 5c 04 	lds	r19, 0x045C
    6c46:	40 91 5d 04 	lds	r20, 0x045D
    6c4a:	50 91 5e 04 	lds	r21, 0x045E
    6c4e:	62 1b       	sub	r22, r18
    6c50:	73 0b       	sbc	r23, r19
    6c52:	84 0b       	sbc	r24, r20
    6c54:	95 0b       	sbc	r25, r21
    6c56:	60 93 5b 04 	sts	0x045B, r22
    6c5a:	70 93 5c 04 	sts	0x045C, r23
    6c5e:	80 93 5d 04 	sts	0x045D, r24
    6c62:	90 93 5e 04 	sts	0x045E, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    6c66:	0e 94 73 5b 	call	0xb6e6	; 0xb6e6 <__floatunsisf>
    6c6a:	20 e0       	ldi	r18, 0x00	; 0
    6c6c:	30 e0       	ldi	r19, 0x00	; 0
    6c6e:	40 ed       	ldi	r20, 0xD0	; 208
    6c70:	52 e4       	ldi	r21, 0x42	; 66
    6c72:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    6c76:	20 e0       	ldi	r18, 0x00	; 0
    6c78:	34 e2       	ldi	r19, 0x24	; 36
    6c7a:	44 e7       	ldi	r20, 0x74	; 116
    6c7c:	59 e4       	ldi	r21, 0x49	; 73
    6c7e:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    6c82:	9b 01       	movw	r18, r22
    6c84:	ac 01       	movw	r20, r24
    6c86:	64 e1       	ldi	r22, 0x14	; 20
    6c88:	7e e2       	ldi	r23, 0x2E	; 46
    6c8a:	88 e7       	ldi	r24, 0x78	; 120
    6c8c:	93 e4       	ldi	r25, 0x43	; 67
    6c8e:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    6c92:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__fixunssfsi>
    6c96:	70 93 85 0a 	sts	0x0A85, r23
    6c9a:	60 93 84 0a 	sts	0x0A84, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    6c9e:	20 91 b9 03 	lds	r18, 0x03B9
    6ca2:	30 91 ba 03 	lds	r19, 0x03BA
    6ca6:	40 e0       	ldi	r20, 0x00	; 0
    6ca8:	50 e0       	ldi	r21, 0x00	; 0
    6caa:	60 91 b1 03 	lds	r22, 0x03B1
    6cae:	70 91 b2 03 	lds	r23, 0x03B2
    6cb2:	80 91 b3 03 	lds	r24, 0x03B3
    6cb6:	90 91 b4 03 	lds	r25, 0x03B4
    6cba:	0e 94 5f 5d 	call	0xbabe	; 0xbabe <__divmodsi4>
    6cbe:	30 93 be 03 	sts	0x03BE, r19
    6cc2:	20 93 bd 03 	sts	0x03BD, r18
    6cc6:	64 cf       	rjmp	.-312    	; 0x6b90 <handleCalibration+0x23e>
            calibState = CALIBRATION_STATE_START_MEASURE;
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    6cc8:	80 91 b0 03 	lds	r24, 0x03B0
    6ccc:	88 23       	and	r24, r24
    6cce:	91 f1       	breq	.+100    	; 0x6d34 <handleCalibration+0x3e2>
    6cd0:	82 30       	cpi	r24, 0x02	; 2
    6cd2:	81 f1       	breq	.+96     	; 0x6d34 <handleCalibration+0x3e2>
                    timeOdometry = getTime100MicroSec();;
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] < calibrationThr) {	
    6cd4:	20 91 6d 02 	lds	r18, 0x026D
    6cd8:	30 91 6e 02 	lds	r19, 0x026E
    6cdc:	80 91 d1 03 	lds	r24, 0x03D1
    6ce0:	90 91 d2 03 	lds	r25, 0x03D2
    6ce4:	28 17       	cp	r18, r24
    6ce6:	39 07       	cpc	r19, r25
    6ce8:	0c f0       	brlt	.+2      	; 0x6cec <handleCalibration+0x39a>
    6cea:	61 cf       	rjmp	.-318    	; 0x6bae <handleCalibration+0x25c>
					rightSumCount = 0;
    6cec:	10 92 bc 03 	sts	0x03BC, r1
    6cf0:	10 92 bb 03 	sts	0x03BB, r1
					rightSpeedSumOdom = 0;
    6cf4:	10 92 b5 03 	sts	0x03B5, r1
    6cf8:	10 92 b6 03 	sts	0x03B6, r1
    6cfc:	10 92 b7 03 	sts	0x03B7, r1
    6d00:	10 92 b8 03 	sts	0x03B8, r1
                    timeOdometry = getTime100MicroSec();;
    6d04:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    6d08:	60 93 5b 04 	sts	0x045B, r22
    6d0c:	70 93 5c 04 	sts	0x045C, r23
    6d10:	80 93 5d 04 	sts	0x045D, r24
    6d14:	90 93 5e 04 	sts	0x045E, r25
                    calibState = CALIBRATION_STATE_EXIT_BLACK_LINE_1;
    6d18:	82 e0       	ldi	r24, 0x02	; 2
    6d1a:	80 93 6f 0a 	sts	0x0A6F, r24
                    timeoutOdometry = getTime100MicroSec();;
    6d1e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    6d22:	60 93 3f 0a 	sts	0x0A3F, r22
    6d26:	70 93 40 0a 	sts	0x0A40, r23
    6d2a:	80 93 41 0a 	sts	0x0A41, r24
    6d2e:	90 93 42 0a 	sts	0x0A42, r25
    6d32:	3d cf       	rjmp	.-390    	; 0x6bae <handleCalibration+0x25c>
            timeoutOdometry = getTime100MicroSec();
            break;

		case CALIBRATION_STATE_START_MEASURE: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] < calibrationThr) {				
    6d34:	20 91 67 02 	lds	r18, 0x0267
    6d38:	30 91 68 02 	lds	r19, 0x0268
    6d3c:	80 91 d1 03 	lds	r24, 0x03D1
    6d40:	90 91 d2 03 	lds	r25, 0x03D2
    6d44:	28 17       	cp	r18, r24
    6d46:	39 07       	cpc	r19, r25
    6d48:	0c f0       	brlt	.+2      	; 0x6d4c <handleCalibration+0x3fa>
    6d4a:	31 cf       	rjmp	.-414    	; 0x6bae <handleCalibration+0x25c>
                	leftSumCount = 0;
    6d4c:	10 92 ba 03 	sts	0x03BA, r1
    6d50:	10 92 b9 03 	sts	0x03B9, r1
                    leftSpeedSumOdom = 0;
    6d54:	10 92 b1 03 	sts	0x03B1, r1
    6d58:	10 92 b2 03 	sts	0x03B2, r1
    6d5c:	10 92 b3 03 	sts	0x03B3, r1
    6d60:	10 92 b4 03 	sts	0x03B4, r1
    6d64:	cf cf       	rjmp	.-98     	; 0x6d04 <handleCalibration+0x3b2>
                calibState = CALIBRATION_STATE_NEXT;
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    6d66:	80 91 b0 03 	lds	r24, 0x03B0
    6d6a:	88 23       	and	r24, r24
    6d6c:	61 f1       	breq	.+88     	; 0x6dc6 <handleCalibration+0x474>
    6d6e:	82 30       	cpi	r24, 0x02	; 2
    6d70:	51 f1       	breq	.+84     	; 0x6dc6 <handleCalibration+0x474>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_NEXT;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    6d72:	20 91 6d 02 	lds	r18, 0x026D
    6d76:	30 91 6e 02 	lds	r19, 0x026E
    6d7a:	80 91 d1 03 	lds	r24, 0x03D1
    6d7e:	90 91 d2 03 	lds	r25, 0x03D2
    6d82:	82 17       	cp	r24, r18
    6d84:	93 07       	cpc	r25, r19
    6d86:	1c f4       	brge	.+6      	; 0x6d8e <handleCalibration+0x43c>
					calibState = CALIBRATION_STATE_NEXT;
    6d88:	85 e0       	ldi	r24, 0x05	; 5
    6d8a:	80 93 6f 0a 	sts	0x0A6F, r24
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    6d8e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    6d92:	20 91 3f 0a 	lds	r18, 0x0A3F
    6d96:	30 91 40 0a 	lds	r19, 0x0A40
    6d9a:	40 91 41 0a 	lds	r20, 0x0A41
    6d9e:	50 91 42 0a 	lds	r21, 0x0A42
    6da2:	62 1b       	sub	r22, r18
    6da4:	73 0b       	sbc	r23, r19
    6da6:	84 0b       	sbc	r24, r20
    6da8:	95 0b       	sbc	r25, r21
    6daa:	6c 59       	subi	r22, 0x9C	; 156
    6dac:	7d 4c       	sbci	r23, 0xCD	; 205
    6dae:	88 40       	sbci	r24, 0x08	; 8
    6db0:	90 40       	sbci	r25, 0x00	; 0
    6db2:	08 f4       	brcc	.+2      	; 0x6db6 <handleCalibration+0x464>
    6db4:	e4 cd       	rjmp	.-1080   	; 0x697e <handleCalibration+0x2c>
            	tempVel = 0;
    6db6:	10 92 85 0a 	sts	0x0A85, r1
    6dba:	10 92 84 0a 	sts	0x0A84, r1
                //updateOdomData();
                calibState = CALIBRATION_STATE_NEXT;
    6dbe:	85 e0       	ldi	r24, 0x05	; 5
    6dc0:	80 93 6f 0a 	sts	0x0A6F, r24
    6dc4:	08 95       	ret
			}
            break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_2: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    6dc6:	20 91 67 02 	lds	r18, 0x0267
    6dca:	30 91 68 02 	lds	r19, 0x0268
    6dce:	80 91 d1 03 	lds	r24, 0x03D1
    6dd2:	90 91 d2 03 	lds	r25, 0x03D2
    6dd6:	82 17       	cp	r24, r18
    6dd8:	93 07       	cpc	r25, r19
    6dda:	cc f6       	brge	.-78     	; 0x6d8e <handleCalibration+0x43c>
    6ddc:	d5 cf       	rjmp	.-86     	; 0x6d88 <handleCalibration+0x436>
                calibState = CALIBRATION_STATE_NEXT;
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    6dde:	80 91 b0 03 	lds	r24, 0x03B0
    6de2:	88 23       	and	r24, r24
    6de4:	e1 f0       	breq	.+56     	; 0x6e1e <handleCalibration+0x4cc>
    6de6:	82 30       	cpi	r24, 0x02	; 2
    6de8:	d1 f0       	breq	.+52     	; 0x6e1e <handleCalibration+0x4cc>
				if(proximityResult[8] > calibrationThr) {	
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
				if(proximityResult[11] > calibrationThr) {	
    6dea:	20 91 6d 02 	lds	r18, 0x026D
    6dee:	30 91 6e 02 	lds	r19, 0x026E
    6df2:	80 91 d1 03 	lds	r24, 0x03D1
    6df6:	90 91 d2 03 	lds	r25, 0x03D2
    6dfa:	82 17       	cp	r24, r18
    6dfc:	93 07       	cpc	r25, r19
    6dfe:	0c f0       	brlt	.+2      	; 0x6e02 <handleCalibration+0x4b0>
    6e00:	d6 ce       	rjmp	.-596    	; 0x6bae <handleCalibration+0x25c>
                	calibState = CALIBRATION_STATE_STOP_MEASURE;
    6e02:	83 e0       	ldi	r24, 0x03	; 3
    6e04:	80 93 6f 0a 	sts	0x0A6F, r24
                    timeoutOdometry = getTime100MicroSec();;
    6e08:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    6e0c:	60 93 3f 0a 	sts	0x0A3F, r22
    6e10:	70 93 40 0a 	sts	0x0A40, r23
    6e14:	80 93 41 0a 	sts	0x0A41, r24
    6e18:	90 93 42 0a 	sts	0x0A42, r25
    6e1c:	c8 ce       	rjmp	.-624    	; 0x6bae <handleCalibration+0x25c>
			}
			break;

		case CALIBRATION_STATE_EXIT_BLACK_LINE_1: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
				if(proximityResult[8] > calibrationThr) {	
    6e1e:	20 91 67 02 	lds	r18, 0x0267
    6e22:	30 91 68 02 	lds	r19, 0x0268
    6e26:	80 91 d1 03 	lds	r24, 0x03D1
    6e2a:	90 91 d2 03 	lds	r25, 0x03D2
    6e2e:	82 17       	cp	r24, r18
    6e30:	93 07       	cpc	r25, r19
    6e32:	0c f0       	brlt	.+2      	; 0x6e36 <handleCalibration+0x4e4>
    6e34:	bc ce       	rjmp	.-648    	; 0x6bae <handleCalibration+0x25c>
    6e36:	e5 cf       	rjmp	.-54     	; 0x6e02 <handleCalibration+0x4b0>
			calibState = CALIBRATION_STATE_FIND_THRS_1;
			break;
		
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line safely (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
    6e38:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    6e3c:	20 91 3f 0a 	lds	r18, 0x0A3F
    6e40:	30 91 40 0a 	lds	r19, 0x0A40
    6e44:	40 91 41 0a 	lds	r20, 0x0A41
    6e48:	50 91 42 0a 	lds	r21, 0x0A42
    6e4c:	62 1b       	sub	r22, r18
    6e4e:	73 0b       	sbc	r23, r19
    6e50:	84 0b       	sbc	r24, r20
    6e52:	95 0b       	sbc	r25, r21
    6e54:	60 59       	subi	r22, 0x90	; 144
    6e56:	75 42       	sbci	r23, 0x25	; 37
    6e58:	80 40       	sbci	r24, 0x00	; 0
    6e5a:	90 40       	sbci	r25, 0x00	; 0
    6e5c:	08 f4       	brcc	.+2      	; 0x6e60 <handleCalibration+0x50e>
    6e5e:	8f cd       	rjmp	.-1250   	; 0x697e <handleCalibration+0x2c>
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
    6e60:	80 91 b0 03 	lds	r24, 0x03B0
    6e64:	88 23       	and	r24, r24
    6e66:	09 f4       	brne	.+2      	; 0x6e6a <handleCalibration+0x518>
    6e68:	57 c0       	rjmp	.+174    	; 0x6f18 <handleCalibration+0x5c6>
					magOffsetMin[0] = INT16_MAX;
					magOffsetMin[1] = INT16_MAX;
					magOffsetMin[2] = INT16_MAX;					
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    6e6a:	81 30       	cpi	r24, 0x01	; 1
    6e6c:	09 f4       	brne	.+2      	; 0x6e70 <handleCalibration+0x51e>
    6e6e:	17 c1       	rjmp	.+558    	; 0x709e <handleCalibration+0x74c>
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
					pwm_intermediate_left_desired = 0;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    6e70:	82 30       	cpi	r24, 0x02	; 2
    6e72:	09 f4       	brne	.+2      	; 0x6e76 <handleCalibration+0x524>
    6e74:	1f c1       	rjmp	.+574    	; 0x70b4 <handleCalibration+0x762>
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
	        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    6e76:	83 30       	cpi	r24, 0x03	; 3
    6e78:	51 f4       	brne	.+20     	; 0x6e8e <handleCalibration+0x53c>
					pwm_intermediate_right_desired = -((INDEX_STEP*3)<<2);
    6e7a:	84 ec       	ldi	r24, 0xC4	; 196
    6e7c:	9f ef       	ldi	r25, 0xFF	; 255
    6e7e:	90 93 f0 02 	sts	0x02F0, r25
    6e82:	80 93 ef 02 	sts	0x02EF, r24
					pwm_intermediate_left_desired = 0;
    6e86:	10 92 f2 02 	sts	0x02F2, r1
    6e8a:	10 92 f1 02 	sts	0x02F1, r1
				}               
				minGround = 1023;
    6e8e:	8f ef       	ldi	r24, 0xFF	; 255
    6e90:	93 e0       	ldi	r25, 0x03	; 3
    6e92:	90 93 ce 03 	sts	0x03CE, r25
    6e96:	80 93 cd 03 	sts	0x03CD, r24
				maxGround = 0;
    6e9a:	10 92 d0 03 	sts	0x03D0, r1
    6e9e:	10 92 cf 03 	sts	0x03CF, r1
	            calibState = CALIBRATION_STATE_FIND_THRS_2;
    6ea2:	88 e0       	ldi	r24, 0x08	; 8
    6ea4:	80 93 6f 0a 	sts	0x0A6F, r24
	            timeoutOdometry = getTime100MicroSec();
    6ea8:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    6eac:	60 93 3f 0a 	sts	0x0A3F, r22
    6eb0:	70 93 40 0a 	sts	0x0A40, r23
    6eb4:	80 93 41 0a 	sts	0x0A41, r24
    6eb8:	90 93 42 0a 	sts	0x0A42, r25
    6ebc:	08 95       	ret

void handleCalibration() {

	switch(calibState) {
		case CALIBRATION_STATE_FIND_THRS_0:
			timeoutOdometry = getTime100MicroSec();
    6ebe:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    6ec2:	60 93 3f 0a 	sts	0x0A3F, r22
    6ec6:	70 93 40 0a 	sts	0x0A40, r23
    6eca:	80 93 41 0a 	sts	0x0A41, r24
    6ece:	90 93 42 0a 	sts	0x0A42, r25
			calibState = CALIBRATION_STATE_FIND_THRS_1;
    6ed2:	87 e0       	ldi	r24, 0x07	; 7
    6ed4:	80 93 6f 0a 	sts	0x0A6F, r24
    6ed8:	08 95       	ret

    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    6eda:	81 30       	cpi	r24, 0x01	; 1
    6edc:	09 f4       	brne	.+2      	; 0x6ee0 <handleCalibration+0x58e>
    6ede:	43 c0       	rjmp	.+134    	; 0x6f66 <handleCalibration+0x614>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    6ee0:	82 30       	cpi	r24, 0x02	; 2
    6ee2:	09 f4       	brne	.+2      	; 0x6ee6 <handleCalibration+0x594>
    6ee4:	c6 c0       	rjmp	.+396    	; 0x7072 <handleCalibration+0x720>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    6ee6:	83 30       	cpi	r24, 0x03	; 3
    6ee8:	09 f0       	breq	.+2      	; 0x6eec <handleCalibration+0x59a>
    6eea:	67 cd       	rjmp	.-1330   	; 0x69ba <handleCalibration+0x68>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    6eec:	80 91 c9 07 	lds	r24, 0x07C9
    6ef0:	25 e0       	ldi	r18, 0x05	; 5
    6ef2:	82 9f       	mul	r24, r18
    6ef4:	c0 01       	movw	r24, r0
    6ef6:	11 24       	eor	r1, r1
    6ef8:	88 0f       	add	r24, r24
    6efa:	99 1f       	adc	r25, r25
    6efc:	88 0f       	add	r24, r24
    6efe:	99 1f       	adc	r25, r25
    6f00:	90 95       	com	r25
    6f02:	81 95       	neg	r24
    6f04:	9f 4f       	sbci	r25, 0xFF	; 255
    6f06:	90 93 f0 02 	sts	0x02F0, r25
    6f0a:	80 93 ef 02 	sts	0x02EF, r24
				pwm_intermediate_left_desired = 0;
    6f0e:	10 92 f2 02 	sts	0x02F2, r1
    6f12:	10 92 f1 02 	sts	0x02F1, r1
    6f16:	51 cd       	rjmp	.-1374   	; 0x69ba <handleCalibration+0x68>
		case CALIBRATION_STATE_FIND_THRS_1:	// Find the max and min of the ground sensor value in order to get a threshold to detect 
											// the black line safely (the threshold will be the average of the min and max).
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_1_SEC) { 	// Wait for the current sensor calibration to be terminated 
																		// (started when calibration is started).
				if(calibWheel == LEFT_WHEEL_FW_SC) {
					magOffsetMax[0] = INT16_MIN;
    6f18:	80 e0       	ldi	r24, 0x00	; 0
    6f1a:	90 e8       	ldi	r25, 0x80	; 128
    6f1c:	90 93 4b 03 	sts	0x034B, r25
    6f20:	80 93 4a 03 	sts	0x034A, r24
					magOffsetMax[1] = INT16_MIN;
    6f24:	90 93 4d 03 	sts	0x034D, r25
    6f28:	80 93 4c 03 	sts	0x034C, r24
					magOffsetMax[2] = INT16_MIN;
    6f2c:	90 93 4f 03 	sts	0x034F, r25
    6f30:	80 93 4e 03 	sts	0x034E, r24
					magOffsetMin[0] = INT16_MAX;
    6f34:	8f ef       	ldi	r24, 0xFF	; 255
    6f36:	9f e7       	ldi	r25, 0x7F	; 127
    6f38:	90 93 51 03 	sts	0x0351, r25
    6f3c:	80 93 50 03 	sts	0x0350, r24
					magOffsetMin[1] = INT16_MAX;
    6f40:	90 93 53 03 	sts	0x0353, r25
    6f44:	80 93 52 03 	sts	0x0352, r24
					magOffsetMin[2] = INT16_MAX;					
    6f48:	90 93 55 03 	sts	0x0355, r25
    6f4c:	80 93 54 03 	sts	0x0354, r24
					pwm_intermediate_right_desired = 0;
    6f50:	10 92 f0 02 	sts	0x02F0, r1
    6f54:	10 92 ef 02 	sts	0x02EF, r1
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
    6f58:	8c e3       	ldi	r24, 0x3C	; 60
    6f5a:	90 e0       	ldi	r25, 0x00	; 0
    6f5c:	90 93 f2 02 	sts	0x02F2, r25
    6f60:	80 93 f1 02 	sts	0x02F1, r24
    6f64:	94 cf       	rjmp	.-216    	; 0x6e8e <handleCalibration+0x53c>
    	case CALIBRATION_STATE_SET_SPEED: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    6f66:	80 91 c9 07 	lds	r24, 0x07C9
    6f6a:	25 e0       	ldi	r18, 0x05	; 5
    6f6c:	82 9f       	mul	r24, r18
    6f6e:	c0 01       	movw	r24, r0
    6f70:	11 24       	eor	r1, r1
    6f72:	88 0f       	add	r24, r24
    6f74:	99 1f       	adc	r25, r25
    6f76:	88 0f       	add	r24, r24
    6f78:	99 1f       	adc	r25, r25
    6f7a:	90 93 f0 02 	sts	0x02F0, r25
    6f7e:	80 93 ef 02 	sts	0x02EF, r24
				pwm_intermediate_left_desired = 0;
    6f82:	10 92 f2 02 	sts	0x02F2, r1
    6f86:	10 92 f1 02 	sts	0x02F1, r1
    6f8a:	17 cd       	rjmp	.-1490   	; 0x69ba <handleCalibration+0x68>
			}
			break;

		case CALIBRATION_STATE_FIND_THRS_2:	// Wait for 5 seconds during which the ground min and max values are saved. Moreover calibrate also the magnetometer.
			if(useAccel == USE_LSM6DS3US) {
				if(calibWheel==LEFT_WHEEL_FW_SC) {
    6f8c:	80 91 b0 03 	lds	r24, 0x03B0
    6f90:	88 23       	and	r24, r24
    6f92:	09 f0       	breq	.+2      	; 0x6f96 <handleCalibration+0x644>
    6f94:	32 ce       	rjmp	.-924    	; 0x6bfa <handleCalibration+0x2a8>
					if(magOffsetMax[0] < magX) {
    6f96:	20 91 3e 03 	lds	r18, 0x033E
    6f9a:	30 91 3f 03 	lds	r19, 0x033F
    6f9e:	80 91 4a 03 	lds	r24, 0x034A
    6fa2:	90 91 4b 03 	lds	r25, 0x034B
    6fa6:	82 17       	cp	r24, r18
    6fa8:	93 07       	cpc	r25, r19
    6faa:	24 f4       	brge	.+8      	; 0x6fb4 <handleCalibration+0x662>
						magOffsetMax[0] = magX;
    6fac:	30 93 4b 03 	sts	0x034B, r19
    6fb0:	20 93 4a 03 	sts	0x034A, r18
					}
					if(magOffsetMin[0] > magX) {
    6fb4:	80 91 50 03 	lds	r24, 0x0350
    6fb8:	90 91 51 03 	lds	r25, 0x0351
    6fbc:	28 17       	cp	r18, r24
    6fbe:	39 07       	cpc	r19, r25
    6fc0:	24 f4       	brge	.+8      	; 0x6fca <handleCalibration+0x678>
						magOffsetMin[0] = magX;
    6fc2:	30 93 51 03 	sts	0x0351, r19
    6fc6:	20 93 50 03 	sts	0x0350, r18
					}
					if(magOffsetMax[1] < magY) {
    6fca:	20 91 40 03 	lds	r18, 0x0340
    6fce:	30 91 41 03 	lds	r19, 0x0341
    6fd2:	80 91 4c 03 	lds	r24, 0x034C
    6fd6:	90 91 4d 03 	lds	r25, 0x034D
    6fda:	82 17       	cp	r24, r18
    6fdc:	93 07       	cpc	r25, r19
    6fde:	24 f4       	brge	.+8      	; 0x6fe8 <handleCalibration+0x696>
						magOffsetMax[1] = magY;
    6fe0:	30 93 4d 03 	sts	0x034D, r19
    6fe4:	20 93 4c 03 	sts	0x034C, r18
					}
					if(magOffsetMin[1] > magY) {
    6fe8:	80 91 52 03 	lds	r24, 0x0352
    6fec:	90 91 53 03 	lds	r25, 0x0353
    6ff0:	28 17       	cp	r18, r24
    6ff2:	39 07       	cpc	r19, r25
    6ff4:	24 f4       	brge	.+8      	; 0x6ffe <handleCalibration+0x6ac>
						magOffsetMin[1] = magY;
    6ff6:	30 93 53 03 	sts	0x0353, r19
    6ffa:	20 93 52 03 	sts	0x0352, r18
					}
					if(magOffsetMax[2] < magZ) {
    6ffe:	20 91 42 03 	lds	r18, 0x0342
    7002:	30 91 43 03 	lds	r19, 0x0343
    7006:	80 91 4e 03 	lds	r24, 0x034E
    700a:	90 91 4f 03 	lds	r25, 0x034F
    700e:	82 17       	cp	r24, r18
    7010:	93 07       	cpc	r25, r19
    7012:	24 f4       	brge	.+8      	; 0x701c <handleCalibration+0x6ca>
						magOffsetMax[2] = magZ;
    7014:	30 93 4f 03 	sts	0x034F, r19
    7018:	20 93 4e 03 	sts	0x034E, r18
					}
					if(magOffsetMin[2] > magZ) {
    701c:	80 91 54 03 	lds	r24, 0x0354
    7020:	90 91 55 03 	lds	r25, 0x0355
    7024:	28 17       	cp	r18, r24
    7026:	39 07       	cpc	r19, r25
    7028:	0c f0       	brlt	.+2      	; 0x702c <handleCalibration+0x6da>
    702a:	e4 cc       	rjmp	.-1592   	; 0x69f4 <handleCalibration+0xa2>
						magOffsetMin[2] = magZ;
    702c:	30 93 55 03 	sts	0x0355, r19
    7030:	20 93 54 03 	sts	0x0354, r18
    7034:	df cc       	rjmp	.-1602   	; 0x69f4 <handleCalibration+0xa2>
            break;

		case CALIBRATION_STATE_NEXT:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    7036:	91 e0       	ldi	r25, 0x01	; 1
    7038:	90 93 c9 07 	sts	0x07C9, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    703c:	80 91 b0 03 	lds	r24, 0x03B0
    7040:	88 23       	and	r24, r24
    7042:	49 f4       	brne	.+18     	; 0x7056 <handleCalibration+0x704>
					if(useAccel == USE_LSM6DS3US) {
    7044:	80 91 19 03 	lds	r24, 0x0319
    7048:	83 30       	cpi	r24, 0x03	; 3
    704a:	09 f4       	brne	.+2      	; 0x704e <handleCalibration+0x6fc>
    704c:	4a c0       	rjmp	.+148    	; 0x70e2 <handleCalibration+0x790>
						writeMagCalibToFlash();
					}
                	calibWheel = LEFT_WHEEL_BW_SC;
    704e:	82 e0       	ldi	r24, 0x02	; 2
    7050:	80 93 b0 03 	sts	0x03B0, r24
    7054:	92 cc       	rjmp	.-1756   	; 0x697a <handleCalibration+0x28>
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    7056:	81 30       	cpi	r24, 0x01	; 1
    7058:	c1 f1       	breq	.+112    	; 0x70ca <handleCalibration+0x778>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    705a:	82 30       	cpi	r24, 0x02	; 2
    705c:	d1 f1       	breq	.+116    	; 0x70d2 <handleCalibration+0x780>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
					break;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    705e:	83 30       	cpi	r24, 0x03	; 3
    7060:	09 f0       	breq	.+2      	; 0x7064 <handleCalibration+0x712>
    7062:	8b cc       	rjmp	.-1770   	; 0x697a <handleCalibration+0x28>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    7064:	10 92 b0 03 	sts	0x03B0, r1
					// red off
					writeCalibrationToFlash();
    7068:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    706c:	10 92 7c 04 	sts	0x047C, r1
    7070:	84 cc       	rjmp	.-1784   	; 0x697a <handleCalibration+0x28>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    7072:	10 92 f0 02 	sts	0x02F0, r1
    7076:	10 92 ef 02 	sts	0x02EF, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    707a:	80 91 c9 07 	lds	r24, 0x07C9
    707e:	25 e0       	ldi	r18, 0x05	; 5
    7080:	82 9f       	mul	r24, r18
    7082:	c0 01       	movw	r24, r0
    7084:	11 24       	eor	r1, r1
    7086:	88 0f       	add	r24, r24
    7088:	99 1f       	adc	r25, r25
    708a:	88 0f       	add	r24, r24
    708c:	99 1f       	adc	r25, r25
    708e:	90 95       	com	r25
    7090:	81 95       	neg	r24
    7092:	9f 4f       	sbci	r25, 0xFF	; 255
    7094:	90 93 f2 02 	sts	0x02F2, r25
    7098:	80 93 f1 02 	sts	0x02F1, r24
    709c:	8e cc       	rjmp	.-1764   	; 0x69ba <handleCalibration+0x68>
					magOffsetMin[1] = INT16_MAX;
					magOffsetMin[2] = INT16_MAX;					
					pwm_intermediate_right_desired = 0;
					pwm_intermediate_left_desired = (INDEX_STEP*3)<<2;		// Use a moderate speed.
	        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
					pwm_intermediate_right_desired = (INDEX_STEP*3)<<2;
    709e:	8c e3       	ldi	r24, 0x3C	; 60
    70a0:	90 e0       	ldi	r25, 0x00	; 0
    70a2:	90 93 f0 02 	sts	0x02F0, r25
    70a6:	80 93 ef 02 	sts	0x02EF, r24
					pwm_intermediate_left_desired = 0;
    70aa:	10 92 f2 02 	sts	0x02F2, r1
    70ae:	10 92 f1 02 	sts	0x02F1, r1
    70b2:	ed ce       	rjmp	.-550    	; 0x6e8e <handleCalibration+0x53c>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
					pwm_intermediate_right_desired = 0;
    70b4:	10 92 f0 02 	sts	0x02F0, r1
    70b8:	10 92 ef 02 	sts	0x02EF, r1
					pwm_intermediate_left_desired = -((INDEX_STEP*3)<<2);
    70bc:	84 ec       	ldi	r24, 0xC4	; 196
    70be:	9f ef       	ldi	r25, 0xFF	; 255
    70c0:	90 93 f2 02 	sts	0x02F2, r25
    70c4:	80 93 f1 02 	sts	0x02F1, r24
    70c8:	e2 ce       	rjmp	.-572    	; 0x6e8e <handleCalibration+0x53c>
					if(useAccel == USE_LSM6DS3US) {
						writeMagCalibToFlash();
					}
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    70ca:	83 e0       	ldi	r24, 0x03	; 3
    70cc:	80 93 b0 03 	sts	0x03B0, r24
    70d0:	54 cc       	rjmp	.-1880   	; 0x697a <handleCalibration+0x28>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    70d2:	90 93 b0 03 	sts	0x03B0, r25
					calibrateOdomFlag = 0;
    70d6:	10 92 7c 04 	sts	0x047C, r1
					calibState = CALIBRATION_STATE_FIND_THRS_0;	// Recompute the thresholds for the right ground.
    70da:	86 e0       	ldi	r24, 0x06	; 6
    70dc:	80 93 6f 0a 	sts	0x0A6F, r24
    70e0:	08 95       	ret
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
					if(useAccel == USE_LSM6DS3US) {
						writeMagCalibToFlash();
    70e2:	0e 94 17 4e 	call	0x9c2e	; 0x9c2e <writeMagCalibToFlash>
    70e6:	b3 cf       	rjmp	.-154    	; 0x704e <handleCalibration+0x6fc>

000070e8 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    70e8:	2f 92       	push	r2
    70ea:	3f 92       	push	r3
    70ec:	4f 92       	push	r4
    70ee:	5f 92       	push	r5
    70f0:	6f 92       	push	r6
    70f2:	7f 92       	push	r7
    70f4:	8f 92       	push	r8
    70f6:	9f 92       	push	r9
    70f8:	af 92       	push	r10
    70fa:	bf 92       	push	r11
    70fc:	cf 92       	push	r12
    70fe:	df 92       	push	r13
    7100:	ef 92       	push	r14
    7102:	ff 92       	push	r15
    7104:	0f 93       	push	r16
    7106:	1f 93       	push	r17
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
    7108:	40 91 7c 04 	lds	r20, 0x047C
    710c:	44 23       	and	r20, r20
    710e:	09 f4       	brne	.+2      	; 0x7112 <handleMotorsWithSpeedController+0x2a>
    7110:	4d c2       	rjmp	.+1178   	; 0x75ac <handleMotorsWithSpeedController+0x4c4>
    7112:	20 91 ef 02 	lds	r18, 0x02EF
    7116:	30 91 f0 02 	lds	r19, 0x02F0

void handleMotorsWithSpeedController() {

	handleSoftAcceleration();

	if(calibrateOdomFlag==1) {
    711a:	41 30       	cpi	r20, 0x01	; 1
    711c:	09 f4       	brne	.+2      	; 0x7120 <handleMotorsWithSpeedController+0x38>
    711e:	0b c3       	rjmp	.+1558   	; 0x7736 <handleMotorsWithSpeedController+0x64e>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    7120:	37 fd       	sbrc	r19, 7
    7122:	81 c1       	rjmp	.+770    	; 0x7426 <handleMotorsWithSpeedController+0x33e>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    7124:	c9 01       	movw	r24, r18
    7126:	61 e0       	ldi	r22, 0x01	; 1
    7128:	0e 94 9a 28 	call	0x5134	; 0x5134 <getInputFromSpeed>
    712c:	90 93 00 03 	sts	0x0300, r25
    7130:	80 93 ff 02 	sts	0x02FF, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    7134:	80 91 f1 02 	lds	r24, 0x02F1
    7138:	90 91 f2 02 	lds	r25, 0x02F2
    713c:	97 fd       	sbrc	r25, 7
    713e:	81 c1       	rjmp	.+770    	; 0x7442 <handleMotorsWithSpeedController+0x35a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    7140:	60 e0       	ldi	r22, 0x00	; 0
    7142:	0e 94 9a 28 	call	0x5134	; 0x5134 <getInputFromSpeed>
    7146:	90 93 02 03 	sts	0x0302, r25
    714a:	80 93 01 03 	sts	0x0301, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    714e:	80 91 84 03 	lds	r24, 0x0384
    7152:	88 23       	and	r24, r24
    7154:	09 f0       	breq	.+2      	; 0x7158 <handleMotorsWithSpeedController+0x70>
    7156:	81 c1       	rjmp	.+770    	; 0x745a <handleMotorsWithSpeedController+0x372>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    7158:	80 91 01 03 	lds	r24, 0x0301
    715c:	90 91 02 03 	lds	r25, 0x0302
    7160:	90 93 de 02 	sts	0x02DE, r25
    7164:	80 93 dd 02 	sts	0x02DD, r24
	pwm_right_desired_to_control = pwm_right_working;
    7168:	80 91 ff 02 	lds	r24, 0x02FF
    716c:	90 91 00 03 	lds	r25, 0x0300
    7170:	90 93 dc 02 	sts	0x02DC, r25
    7174:	80 93 db 02 	sts	0x02DB, r24

	if(compute_left_vel) {
    7178:	80 91 07 02 	lds	r24, 0x0207
    717c:	88 23       	and	r24, r24
    717e:	09 f4       	brne	.+2      	; 0x7182 <handleMotorsWithSpeedController+0x9a>
    7180:	a2 c0       	rjmp	.+324    	; 0x72c6 <handleMotorsWithSpeedController+0x1de>

		last_left_vel = left_vel_sum>>2;
    7182:	20 91 df 02 	lds	r18, 0x02DF
    7186:	30 91 e0 02 	lds	r19, 0x02E0
    718a:	36 95       	lsr	r19
    718c:	27 95       	ror	r18
    718e:	36 95       	lsr	r19
    7190:	27 95       	ror	r18
    7192:	30 93 e4 02 	sts	0x02E4, r19
    7196:	20 93 e3 02 	sts	0x02E3, r18
		compute_left_vel = 0;
    719a:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    719e:	10 92 e0 02 	sts	0x02E0, r1
    71a2:	10 92 df 02 	sts	0x02DF, r1
		
		if(calibrateOdomFlag==1) {
    71a6:	80 91 7c 04 	lds	r24, 0x047C
    71aa:	81 30       	cpi	r24, 0x01	; 1
    71ac:	09 f4       	brne	.+2      	; 0x71b0 <handleMotorsWithSpeedController+0xc8>
    71ae:	94 c3       	rjmp	.+1832   	; 0x78d8 <handleMotorsWithSpeedController+0x7f0>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    71b0:	0e 94 c1 2e 	call	0x5d82	; 0x5d82 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    71b4:	80 91 9b 03 	lds	r24, 0x039B
    71b8:	90 91 9c 03 	lds	r25, 0x039C
    71bc:	a0 91 9d 03 	lds	r26, 0x039D
    71c0:	b0 91 9e 03 	lds	r27, 0x039E
    71c4:	80 93 a3 03 	sts	0x03A3, r24
    71c8:	90 93 a4 03 	sts	0x03A4, r25
    71cc:	a0 93 a5 03 	sts	0x03A5, r26
    71d0:	b0 93 a6 03 	sts	0x03A6, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    71d4:	60 91 c1 03 	lds	r22, 0x03C1
    71d8:	70 91 c2 03 	lds	r23, 0x03C2
    71dc:	88 27       	eor	r24, r24
    71de:	77 fd       	sbrc	r23, 7
    71e0:	80 95       	com	r24
    71e2:	98 2f       	mov	r25, r24
    71e4:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    71e8:	7b 01       	movw	r14, r22
    71ea:	8c 01       	movw	r16, r24
    71ec:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    71f0:	20 91 c5 03 	lds	r18, 0x03C5
    71f4:	30 91 c6 03 	lds	r19, 0x03C6
    71f8:	40 91 c7 03 	lds	r20, 0x03C7
    71fc:	50 91 c8 03 	lds	r21, 0x03C8
    7200:	62 1b       	sub	r22, r18
    7202:	73 0b       	sbc	r23, r19
    7204:	84 0b       	sbc	r24, r20
    7206:	95 0b       	sbc	r25, r21
    7208:	0e 94 73 5b 	call	0xb6e6	; 0xb6e6 <__floatunsisf>
    720c:	20 e0       	ldi	r18, 0x00	; 0
    720e:	30 e0       	ldi	r19, 0x00	; 0
    7210:	40 ed       	ldi	r20, 0xD0	; 208
    7212:	52 e4       	ldi	r21, 0x42	; 66
    7214:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    7218:	9b 01       	movw	r18, r22
    721a:	ac 01       	movw	r20, r24
    721c:	c8 01       	movw	r24, r16
    721e:	b7 01       	movw	r22, r14
    7220:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    7224:	20 e0       	ldi	r18, 0x00	; 0
    7226:	34 e2       	ldi	r19, 0x24	; 36
    7228:	44 e7       	ldi	r20, 0x74	; 116
    722a:	59 e4       	ldi	r21, 0x49	; 73
    722c:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    7230:	9b 01       	movw	r18, r22
    7232:	ac 01       	movw	r20, r24
    7234:	60 91 9b 03 	lds	r22, 0x039B
    7238:	70 91 9c 03 	lds	r23, 0x039C
    723c:	80 91 9d 03 	lds	r24, 0x039D
    7240:	90 91 9e 03 	lds	r25, 0x039E
    7244:	0e 94 0d 5a 	call	0xb41a	; 0xb41a <__addsf3>
    7248:	60 93 9b 03 	sts	0x039B, r22
    724c:	70 93 9c 03 	sts	0x039C, r23
    7250:	80 93 9d 03 	sts	0x039D, r24
    7254:	90 93 9e 03 	sts	0x039E, r25
		timeLeftOdom = getTime100MicroSec();
    7258:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    725c:	60 93 c5 03 	sts	0x03C5, r22
    7260:	70 93 c6 03 	sts	0x03C6, r23
    7264:	80 93 c7 03 	sts	0x03C7, r24
    7268:	90 93 c8 03 	sts	0x03C8, r25
		leftMotSteps = (signed long int)leftDist;
    726c:	60 91 9b 03 	lds	r22, 0x039B
    7270:	70 91 9c 03 	lds	r23, 0x039C
    7274:	80 91 9d 03 	lds	r24, 0x039D
    7278:	90 91 9e 03 	lds	r25, 0x039E
    727c:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    7280:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    7284:	60 93 d3 02 	sts	0x02D3, r22
    7288:	70 93 d4 02 	sts	0x02D4, r23
    728c:	80 93 d5 02 	sts	0x02D5, r24
    7290:	90 93 d6 02 	sts	0x02D6, r25
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/

		start_speed_control_left(&pwm_left_working);
    7294:	81 e0       	ldi	r24, 0x01	; 1
    7296:	93 e0       	ldi	r25, 0x03	; 3
    7298:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <start_speed_control_left>

		pwm_left = pwm_left_working;
    729c:	20 91 01 03 	lds	r18, 0x0301
    72a0:	30 91 02 03 	lds	r19, 0x0302
    72a4:	30 93 ea 02 	sts	0x02EA, r19
    72a8:	20 93 e9 02 	sts	0x02E9, r18

		if(pwm_left > 0) {
    72ac:	12 16       	cp	r1, r18
    72ae:	13 06       	cpc	r1, r19
    72b0:	0c f0       	brlt	.+2      	; 0x72b4 <handleMotorsWithSpeedController+0x1cc>
    72b2:	35 c3       	rjmp	.+1642   	; 0x791e <handleMotorsWithSpeedController+0x836>
			OCR4A = (unsigned int)pwm_left;
    72b4:	30 93 a9 00 	sts	0x00A9, r19
    72b8:	20 93 a8 00 	sts	0x00A8, r18
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    72bc:	80 91 ab 03 	lds	r24, 0x03AB
    72c0:	8f 5f       	subi	r24, 0xFF	; 255
    72c2:	80 93 ab 03 	sts	0x03AB, r24

	}

	if(compute_right_vel) {
    72c6:	80 91 08 02 	lds	r24, 0x0208
    72ca:	88 23       	and	r24, r24
    72cc:	09 f0       	breq	.+2      	; 0x72d0 <handleMotorsWithSpeedController+0x1e8>
    72ce:	cb c0       	rjmp	.+406    	; 0x7466 <handleMotorsWithSpeedController+0x37e>
    72d0:	80 91 ab 03 	lds	r24, 0x03AB

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    72d4:	82 30       	cpi	r24, 0x02	; 2
    72d6:	08 f4       	brcc	.+2      	; 0x72da <handleMotorsWithSpeedController+0x1f2>
    72d8:	95 c0       	rjmp	.+298    	; 0x7404 <handleMotorsWithSpeedController+0x31c>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    72da:	10 92 ab 03 	sts	0x03AB, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    72de:	20 90 9f 03 	lds	r2, 0x039F
    72e2:	30 90 a0 03 	lds	r3, 0x03A0
    72e6:	40 90 a1 03 	lds	r4, 0x03A1
    72ea:	50 90 a2 03 	lds	r5, 0x03A2
    72ee:	60 90 9b 03 	lds	r6, 0x039B
    72f2:	70 90 9c 03 	lds	r7, 0x039C
    72f6:	80 90 9d 03 	lds	r8, 0x039D
    72fa:	90 90 9e 03 	lds	r9, 0x039E
    72fe:	c2 01       	movw	r24, r4
    7300:	b1 01       	movw	r22, r2
    7302:	20 91 a7 03 	lds	r18, 0x03A7
    7306:	30 91 a8 03 	lds	r19, 0x03A8
    730a:	40 91 a9 03 	lds	r20, 0x03A9
    730e:	50 91 aa 03 	lds	r21, 0x03AA
    7312:	0e 94 0c 5a 	call	0xb418	; 0xb418 <__subsf3>
    7316:	7b 01       	movw	r14, r22
    7318:	8c 01       	movw	r16, r24
    731a:	c4 01       	movw	r24, r8
    731c:	b3 01       	movw	r22, r6
    731e:	20 91 a3 03 	lds	r18, 0x03A3
    7322:	30 91 a4 03 	lds	r19, 0x03A4
    7326:	40 91 a5 03 	lds	r20, 0x03A5
    732a:	50 91 a6 03 	lds	r21, 0x03A6
    732e:	0e 94 0c 5a 	call	0xb418	; 0xb418 <__subsf3>
    7332:	9b 01       	movw	r18, r22
    7334:	ac 01       	movw	r20, r24
    7336:	c8 01       	movw	r24, r16
    7338:	b7 01       	movw	r22, r14
    733a:	0e 94 0d 5a 	call	0xb41a	; 0xb41a <__addsf3>
    733e:	20 e0       	ldi	r18, 0x00	; 0
    7340:	30 e0       	ldi	r19, 0x00	; 0
    7342:	40 e0       	ldi	r20, 0x00	; 0
    7344:	5f e3       	ldi	r21, 0x3F	; 63
    7346:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    734a:	5b 01       	movw	r10, r22
    734c:	6c 01       	movw	r12, r24
    734e:	60 93 97 03 	sts	0x0397, r22
    7352:	70 93 98 03 	sts	0x0398, r23
    7356:	80 93 99 03 	sts	0x0399, r24
    735a:	90 93 9a 03 	sts	0x039A, r25

		if(robotPosition == HORIZONTAL_POS) {
    735e:	80 91 14 02 	lds	r24, 0x0214
    7362:	81 30       	cpi	r24, 0x01	; 1
    7364:	09 f4       	brne	.+2      	; 0x7368 <handleMotorsWithSpeedController+0x280>
    7366:	f4 c1       	rjmp	.+1000   	; 0x7750 <handleMotorsWithSpeedController+0x668>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    7368:	80 91 ac 03 	lds	r24, 0x03AC
    736c:	90 91 ad 03 	lds	r25, 0x03AD
    7370:	a0 91 ae 03 	lds	r26, 0x03AE
    7374:	b0 91 af 03 	lds	r27, 0x03AF
    7378:	80 93 87 03 	sts	0x0387, r24
    737c:	90 93 88 03 	sts	0x0388, r25
    7380:	a0 93 89 03 	sts	0x0389, r26
    7384:	b0 93 8a 03 	sts	0x038A, r27
    7388:	7c 01       	movw	r14, r24
    738a:	8d 01       	movw	r16, r26
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    738c:	c8 01       	movw	r24, r16
    738e:	b7 01       	movw	r22, r14
    7390:	0e 94 d7 5a 	call	0xb5ae	; 0xb5ae <cos>
    7394:	9b 01       	movw	r18, r22
    7396:	ac 01       	movw	r20, r24
    7398:	c6 01       	movw	r24, r12
    739a:	b5 01       	movw	r22, r10
    739c:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    73a0:	9b 01       	movw	r18, r22
    73a2:	ac 01       	movw	r20, r24
    73a4:	60 91 8f 03 	lds	r22, 0x038F
    73a8:	70 91 90 03 	lds	r23, 0x0390
    73ac:	80 91 91 03 	lds	r24, 0x0391
    73b0:	90 91 92 03 	lds	r25, 0x0392
    73b4:	0e 94 0d 5a 	call	0xb41a	; 0xb41a <__addsf3>
    73b8:	60 93 8f 03 	sts	0x038F, r22
    73bc:	70 93 90 03 	sts	0x0390, r23
    73c0:	80 93 91 03 	sts	0x0391, r24
    73c4:	90 93 92 03 	sts	0x0392, r25
		yPos = yPos + sin(theta)*deltaDist;
    73c8:	c8 01       	movw	r24, r16
    73ca:	b7 01       	movw	r22, r14
    73cc:	0e 94 f1 5c 	call	0xb9e2	; 0xb9e2 <sin>
    73d0:	9b 01       	movw	r18, r22
    73d2:	ac 01       	movw	r20, r24
    73d4:	c6 01       	movw	r24, r12
    73d6:	b5 01       	movw	r22, r10
    73d8:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    73dc:	9b 01       	movw	r18, r22
    73de:	ac 01       	movw	r20, r24
    73e0:	60 91 93 03 	lds	r22, 0x0393
    73e4:	70 91 94 03 	lds	r23, 0x0394
    73e8:	80 91 95 03 	lds	r24, 0x0395
    73ec:	90 91 96 03 	lds	r25, 0x0396
    73f0:	0e 94 0d 5a 	call	0xb41a	; 0xb41a <__addsf3>
    73f4:	60 93 93 03 	sts	0x0393, r22
    73f8:	70 93 94 03 	sts	0x0394, r23
    73fc:	80 93 95 03 	sts	0x0395, r24
    7400:	90 93 96 03 	sts	0x0396, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    7404:	1f 91       	pop	r17
    7406:	0f 91       	pop	r16
    7408:	ff 90       	pop	r15
    740a:	ef 90       	pop	r14
    740c:	df 90       	pop	r13
    740e:	cf 90       	pop	r12
    7410:	bf 90       	pop	r11
    7412:	af 90       	pop	r10
    7414:	9f 90       	pop	r9
    7416:	8f 90       	pop	r8
    7418:	7f 90       	pop	r7
    741a:	6f 90       	pop	r6
    741c:	5f 90       	pop	r5
    741e:	4f 90       	pop	r4
    7420:	3f 90       	pop	r3
    7422:	2f 90       	pop	r2
    7424:	08 95       	ret
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    7426:	c9 01       	movw	r24, r18
    7428:	63 e0       	ldi	r22, 0x03	; 3
    742a:	0e 94 9a 28 	call	0x5134	; 0x5134 <getInputFromSpeed>
    742e:	90 93 00 03 	sts	0x0300, r25
    7432:	80 93 ff 02 	sts	0x02FF, r24
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    7436:	80 91 f1 02 	lds	r24, 0x02F1
    743a:	90 91 f2 02 	lds	r25, 0x02F2
    743e:	97 ff       	sbrs	r25, 7
    7440:	7f ce       	rjmp	.-770    	; 0x7140 <handleMotorsWithSpeedController+0x58>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    7442:	62 e0       	ldi	r22, 0x02	; 2
    7444:	0e 94 9a 28 	call	0x5134	; 0x5134 <getInputFromSpeed>
    7448:	90 93 02 03 	sts	0x0302, r25
    744c:	80 93 01 03 	sts	0x0301, r24
		}
	}

	if(obstacleAvoidanceEnabled) {
    7450:	80 91 84 03 	lds	r24, 0x0384
    7454:	88 23       	and	r24, r24
    7456:	09 f4       	brne	.+2      	; 0x745a <handleMotorsWithSpeedController+0x372>
    7458:	7f ce       	rjmp	.-770    	; 0x7158 <handleMotorsWithSpeedController+0x70>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    745a:	81 e0       	ldi	r24, 0x01	; 1
    745c:	93 e0       	ldi	r25, 0x03	; 3
    745e:	6f ef       	ldi	r22, 0xFF	; 255
    7460:	72 e0       	ldi	r23, 0x02	; 2
    7462:	c4 d7       	rcall	.+3976   	; 0x83ec <obstacleAvoidance>
    7464:	79 ce       	rjmp	.-782    	; 0x7158 <handleMotorsWithSpeedController+0x70>

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    7466:	20 91 e1 02 	lds	r18, 0x02E1
    746a:	30 91 e2 02 	lds	r19, 0x02E2
    746e:	36 95       	lsr	r19
    7470:	27 95       	ror	r18
    7472:	36 95       	lsr	r19
    7474:	27 95       	ror	r18
    7476:	30 93 e6 02 	sts	0x02E6, r19
    747a:	20 93 e5 02 	sts	0x02E5, r18
		compute_right_vel = 0;
    747e:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    7482:	10 92 e2 02 	sts	0x02E2, r1
    7486:	10 92 e1 02 	sts	0x02E1, r1

		if(calibrateOdomFlag==1) {
    748a:	80 91 7c 04 	lds	r24, 0x047C
    748e:	81 30       	cpi	r24, 0x01	; 1
    7490:	09 f4       	brne	.+2      	; 0x7494 <handleMotorsWithSpeedController+0x3ac>
    7492:	ff c1       	rjmp	.+1022   	; 0x7892 <handleMotorsWithSpeedController+0x7aa>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    7494:	0e 94 4a 2c 	call	0x5894	; 0x5894 <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    7498:	80 91 9f 03 	lds	r24, 0x039F
    749c:	90 91 a0 03 	lds	r25, 0x03A0
    74a0:	a0 91 a1 03 	lds	r26, 0x03A1
    74a4:	b0 91 a2 03 	lds	r27, 0x03A2
    74a8:	80 93 a7 03 	sts	0x03A7, r24
    74ac:	90 93 a8 03 	sts	0x03A8, r25
    74b0:	a0 93 a9 03 	sts	0x03A9, r26
    74b4:	b0 93 aa 03 	sts	0x03AA, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    74b8:	60 91 c3 03 	lds	r22, 0x03C3
    74bc:	70 91 c4 03 	lds	r23, 0x03C4
    74c0:	88 27       	eor	r24, r24
    74c2:	77 fd       	sbrc	r23, 7
    74c4:	80 95       	com	r24
    74c6:	98 2f       	mov	r25, r24
    74c8:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    74cc:	7b 01       	movw	r14, r22
    74ce:	8c 01       	movw	r16, r24
    74d0:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    74d4:	20 91 c9 03 	lds	r18, 0x03C9
    74d8:	30 91 ca 03 	lds	r19, 0x03CA
    74dc:	40 91 cb 03 	lds	r20, 0x03CB
    74e0:	50 91 cc 03 	lds	r21, 0x03CC
    74e4:	62 1b       	sub	r22, r18
    74e6:	73 0b       	sbc	r23, r19
    74e8:	84 0b       	sbc	r24, r20
    74ea:	95 0b       	sbc	r25, r21
    74ec:	0e 94 73 5b 	call	0xb6e6	; 0xb6e6 <__floatunsisf>
    74f0:	20 e0       	ldi	r18, 0x00	; 0
    74f2:	30 e0       	ldi	r19, 0x00	; 0
    74f4:	40 ed       	ldi	r20, 0xD0	; 208
    74f6:	52 e4       	ldi	r21, 0x42	; 66
    74f8:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    74fc:	9b 01       	movw	r18, r22
    74fe:	ac 01       	movw	r20, r24
    7500:	c8 01       	movw	r24, r16
    7502:	b7 01       	movw	r22, r14
    7504:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    7508:	20 e0       	ldi	r18, 0x00	; 0
    750a:	34 e2       	ldi	r19, 0x24	; 36
    750c:	44 e7       	ldi	r20, 0x74	; 116
    750e:	59 e4       	ldi	r21, 0x49	; 73
    7510:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    7514:	9b 01       	movw	r18, r22
    7516:	ac 01       	movw	r20, r24
    7518:	60 91 9f 03 	lds	r22, 0x039F
    751c:	70 91 a0 03 	lds	r23, 0x03A0
    7520:	80 91 a1 03 	lds	r24, 0x03A1
    7524:	90 91 a2 03 	lds	r25, 0x03A2
    7528:	0e 94 0d 5a 	call	0xb41a	; 0xb41a <__addsf3>
    752c:	60 93 9f 03 	sts	0x039F, r22
    7530:	70 93 a0 03 	sts	0x03A0, r23
    7534:	80 93 a1 03 	sts	0x03A1, r24
    7538:	90 93 a2 03 	sts	0x03A2, r25
		timeRightOdom = getTime100MicroSec();
    753c:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    7540:	60 93 c9 03 	sts	0x03C9, r22
    7544:	70 93 ca 03 	sts	0x03CA, r23
    7548:	80 93 cb 03 	sts	0x03CB, r24
    754c:	90 93 cc 03 	sts	0x03CC, r25
		rightMotSteps = (signed long int)rightDist;
    7550:	60 91 9f 03 	lds	r22, 0x039F
    7554:	70 91 a0 03 	lds	r23, 0x03A0
    7558:	80 91 a1 03 	lds	r24, 0x03A1
    755c:	90 91 a2 03 	lds	r25, 0x03A2
    7560:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    7564:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    7568:	60 93 cf 02 	sts	0x02CF, r22
    756c:	70 93 d0 02 	sts	0x02D0, r23
    7570:	80 93 d1 02 	sts	0x02D1, r24
    7574:	90 93 d2 02 	sts	0x02D2, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		start_speed_control_right(&pwm_right_working);
    7578:	8f ef       	ldi	r24, 0xFF	; 255
    757a:	92 e0       	ldi	r25, 0x02	; 2
    757c:	0e 94 2e 1b 	call	0x365c	; 0x365c <start_speed_control_right>

		pwm_right = pwm_right_working;
    7580:	20 91 ff 02 	lds	r18, 0x02FF
    7584:	30 91 00 03 	lds	r19, 0x0300
    7588:	30 93 e8 02 	sts	0x02E8, r19
    758c:	20 93 e7 02 	sts	0x02E7, r18

		if(pwm_right > 0) {
    7590:	12 16       	cp	r1, r18
    7592:	13 06       	cpc	r1, r19
    7594:	0c f0       	brlt	.+2      	; 0x7598 <handleMotorsWithSpeedController+0x4b0>
    7596:	d0 c1       	rjmp	.+928    	; 0x7938 <handleMotorsWithSpeedController+0x850>
			OCR3A = (unsigned int)pwm_right;
    7598:	30 93 99 00 	sts	0x0099, r19
    759c:	20 93 98 00 	sts	0x0098, r18
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    75a0:	80 91 ab 03 	lds	r24, 0x03AB
    75a4:	8f 5f       	subi	r24, 0xFF	; 255
    75a6:	80 93 ab 03 	sts	0x03AB, r24
    75aa:	94 ce       	rjmp	.-728    	; 0x72d4 <handleMotorsWithSpeedController+0x1ec>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    75ac:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    75b0:	8b 01       	movw	r16, r22
    75b2:	9c 01       	movw	r18, r24
    75b4:	40 e0       	ldi	r20, 0x00	; 0
    75b6:	50 e0       	ldi	r21, 0x00	; 0
    75b8:	60 e0       	ldi	r22, 0x00	; 0
    75ba:	70 e0       	ldi	r23, 0x00	; 0
    75bc:	80 91 74 03 	lds	r24, 0x0374
    75c0:	90 91 75 03 	lds	r25, 0x0375
    75c4:	f0 91 76 03 	lds	r31, 0x0376
    75c8:	b0 91 77 03 	lds	r27, 0x0377
    75cc:	d0 90 78 03 	lds	r13, 0x0378
    75d0:	b0 90 79 03 	lds	r11, 0x0379
    75d4:	90 90 7a 03 	lds	r9, 0x037A
    75d8:	a0 91 7b 03 	lds	r26, 0x037B
    75dc:	80 2e       	mov	r8, r16
    75de:	88 1a       	sub	r8, r24
    75e0:	e1 e0       	ldi	r30, 0x01	; 1
    75e2:	08 15       	cp	r16, r8
    75e4:	08 f0       	brcs	.+2      	; 0x75e8 <handleMotorsWithSpeedController+0x500>
    75e6:	30 c1       	rjmp	.+608    	; 0x7848 <handleMotorsWithSpeedController+0x760>
    75e8:	81 2f       	mov	r24, r17
    75ea:	89 1b       	sub	r24, r25
    75ec:	91 e0       	ldi	r25, 0x01	; 1
    75ee:	18 17       	cp	r17, r24
    75f0:	08 f0       	brcs	.+2      	; 0x75f4 <handleMotorsWithSpeedController+0x50c>
    75f2:	22 c1       	rjmp	.+580    	; 0x7838 <handleMotorsWithSpeedController+0x750>
    75f4:	e8 2e       	mov	r14, r24
    75f6:	ee 1a       	sub	r14, r30
    75f8:	e1 e0       	ldi	r30, 0x01	; 1
    75fa:	8e 15       	cp	r24, r14
    75fc:	08 f0       	brcs	.+2      	; 0x7600 <handleMotorsWithSpeedController+0x518>
    75fe:	13 c1       	rjmp	.+550    	; 0x7826 <handleMotorsWithSpeedController+0x73e>
    7600:	9e 2b       	or	r25, r30
    7602:	82 2f       	mov	r24, r18
    7604:	8f 1b       	sub	r24, r31
    7606:	e1 e0       	ldi	r30, 0x01	; 1
    7608:	28 17       	cp	r18, r24
    760a:	08 f0       	brcs	.+2      	; 0x760e <handleMotorsWithSpeedController+0x526>
    760c:	04 c1       	rjmp	.+520    	; 0x7816 <handleMotorsWithSpeedController+0x72e>
    760e:	a8 2e       	mov	r10, r24
    7610:	a9 1a       	sub	r10, r25
    7612:	91 e0       	ldi	r25, 0x01	; 1
    7614:	8a 15       	cp	r24, r10
    7616:	08 f0       	brcs	.+2      	; 0x761a <handleMotorsWithSpeedController+0x532>
    7618:	f5 c0       	rjmp	.+490    	; 0x7804 <handleMotorsWithSpeedController+0x71c>
    761a:	e9 2b       	or	r30, r25
    761c:	83 2f       	mov	r24, r19
    761e:	8b 1b       	sub	r24, r27
    7620:	91 e0       	ldi	r25, 0x01	; 1
    7622:	38 17       	cp	r19, r24
    7624:	08 f0       	brcs	.+2      	; 0x7628 <handleMotorsWithSpeedController+0x540>
    7626:	e6 c0       	rjmp	.+460    	; 0x77f4 <handleMotorsWithSpeedController+0x70c>
    7628:	c8 2e       	mov	r12, r24
    762a:	ce 1a       	sub	r12, r30
    762c:	e1 e0       	ldi	r30, 0x01	; 1
    762e:	8c 15       	cp	r24, r12
    7630:	08 f0       	brcs	.+2      	; 0x7634 <handleMotorsWithSpeedController+0x54c>
    7632:	d7 c0       	rjmp	.+430    	; 0x77e2 <handleMotorsWithSpeedController+0x6fa>
    7634:	9e 2b       	or	r25, r30
    7636:	8d 2d       	mov	r24, r13
    7638:	81 95       	neg	r24
    763a:	e1 e0       	ldi	r30, 0x01	; 1
    763c:	48 17       	cp	r20, r24
    763e:	08 f0       	brcs	.+2      	; 0x7642 <handleMotorsWithSpeedController+0x55a>
    7640:	c8 c0       	rjmp	.+400    	; 0x77d2 <handleMotorsWithSpeedController+0x6ea>
    7642:	b8 2f       	mov	r27, r24
    7644:	b9 1b       	sub	r27, r25
    7646:	91 e0       	ldi	r25, 0x01	; 1
    7648:	8b 17       	cp	r24, r27
    764a:	08 f0       	brcs	.+2      	; 0x764e <handleMotorsWithSpeedController+0x566>
    764c:	b9 c0       	rjmp	.+370    	; 0x77c0 <handleMotorsWithSpeedController+0x6d8>
    764e:	e9 2b       	or	r30, r25
    7650:	8b 2d       	mov	r24, r11
    7652:	81 95       	neg	r24
    7654:	f1 e0       	ldi	r31, 0x01	; 1
    7656:	58 17       	cp	r21, r24
    7658:	08 f0       	brcs	.+2      	; 0x765c <handleMotorsWithSpeedController+0x574>
    765a:	a9 c0       	rjmp	.+338    	; 0x77ae <handleMotorsWithSpeedController+0x6c6>
    765c:	98 2f       	mov	r25, r24
    765e:	9e 1b       	sub	r25, r30
    7660:	e9 2f       	mov	r30, r25
    7662:	91 e0       	ldi	r25, 0x01	; 1
    7664:	8e 17       	cp	r24, r30
    7666:	08 f0       	brcs	.+2      	; 0x766a <handleMotorsWithSpeedController+0x582>
    7668:	99 c0       	rjmp	.+306    	; 0x779c <handleMotorsWithSpeedController+0x6b4>
    766a:	f9 2b       	or	r31, r25
    766c:	89 2d       	mov	r24, r9
    766e:	81 95       	neg	r24
    7670:	91 e0       	ldi	r25, 0x01	; 1
    7672:	68 17       	cp	r22, r24
    7674:	08 f0       	brcs	.+2      	; 0x7678 <handleMotorsWithSpeedController+0x590>
    7676:	8a c0       	rjmp	.+276    	; 0x778c <handleMotorsWithSpeedController+0x6a4>
    7678:	38 2f       	mov	r19, r24
    767a:	3f 1b       	sub	r19, r31
    767c:	21 e0       	ldi	r18, 0x01	; 1
    767e:	83 17       	cp	r24, r19
    7680:	08 f0       	brcs	.+2      	; 0x7684 <handleMotorsWithSpeedController+0x59c>
    7682:	7d c0       	rjmp	.+250    	; 0x777e <handleMotorsWithSpeedController+0x696>
    7684:	92 2b       	or	r25, r18
    7686:	a1 95       	neg	r26
    7688:	a9 17       	cp	r26, r25
    768a:	09 f4       	brne	.+2      	; 0x768e <handleMotorsWithSpeedController+0x5a6>
    768c:	e5 c0       	rjmp	.+458    	; 0x7858 <handleMotorsWithSpeedController+0x770>
			speedStepCounter = getTime100MicroSec();
    768e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    7692:	9b 01       	movw	r18, r22
    7694:	ac 01       	movw	r20, r24
    7696:	60 93 74 03 	sts	0x0374, r22
    769a:	30 93 75 03 	sts	0x0375, r19
    769e:	40 93 76 03 	sts	0x0376, r20
    76a2:	50 93 77 03 	sts	0x0377, r21
    76a6:	10 92 78 03 	sts	0x0378, r1
    76aa:	10 92 79 03 	sts	0x0379, r1
    76ae:	10 92 7a 03 	sts	0x037A, r1
    76b2:	10 92 7b 03 	sts	0x037B, r1

			if(softAccEnabled) {
    76b6:	80 91 7c 03 	lds	r24, 0x037C
    76ba:	88 23       	and	r24, r24
    76bc:	09 f4       	brne	.+2      	; 0x76c0 <handleMotorsWithSpeedController+0x5d8>
    76be:	49 c1       	rjmp	.+658    	; 0x7952 <handleMotorsWithSpeedController+0x86a>
				if(pwm_right_desired == 0) {
    76c0:	40 91 eb 02 	lds	r20, 0x02EB
    76c4:	50 91 ec 02 	lds	r21, 0x02EC
    76c8:	41 15       	cp	r20, r1
    76ca:	51 05       	cpc	r21, r1
    76cc:	09 f0       	breq	.+2      	; 0x76d0 <handleMotorsWithSpeedController+0x5e8>
    76ce:	56 c1       	rjmp	.+684    	; 0x797c <handleMotorsWithSpeedController+0x894>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    76d0:	10 92 f0 02 	sts	0x02F0, r1
    76d4:	10 92 ef 02 	sts	0x02EF, r1
    76d8:	20 e0       	ldi	r18, 0x00	; 0
    76da:	30 e0       	ldi	r19, 0x00	; 0
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    76dc:	40 91 ed 02 	lds	r20, 0x02ED
    76e0:	50 91 ee 02 	lds	r21, 0x02EE
    76e4:	41 15       	cp	r20, r1
    76e6:	51 05       	cpc	r21, r1
    76e8:	09 f4       	brne	.+2      	; 0x76ec <handleMotorsWithSpeedController+0x604>
    76ea:	7f c1       	rjmp	.+766    	; 0x79ea <handleMotorsWithSpeedController+0x902>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    76ec:	60 91 f1 02 	lds	r22, 0x02F1
    76f0:	70 91 f2 02 	lds	r23, 0x02F2
    76f4:	64 9f       	mul	r22, r20
    76f6:	c0 01       	movw	r24, r0
    76f8:	65 9f       	mul	r22, r21
    76fa:	90 0d       	add	r25, r0
    76fc:	74 9f       	mul	r23, r20
    76fe:	90 0d       	add	r25, r0
    7700:	11 24       	eor	r1, r1
    7702:	97 fd       	sbrc	r25, 7
    7704:	72 c1       	rjmp	.+740    	; 0x79ea <handleMotorsWithSpeedController+0x902>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    7706:	64 17       	cp	r22, r20
    7708:	75 07       	cpc	r23, r21
    770a:	0c f0       	brlt	.+2      	; 0x770e <handleMotorsWithSpeedController+0x626>
    770c:	75 c1       	rjmp	.+746    	; 0x79f8 <handleMotorsWithSpeedController+0x910>
					pwm_intermediate_left_desired += speedStep;
    770e:	80 91 17 02 	lds	r24, 0x0217
    7712:	fb 01       	movw	r30, r22
    7714:	e8 0f       	add	r30, r24
    7716:	f1 1d       	adc	r31, r1
    7718:	f0 93 f2 02 	sts	0x02F2, r31
    771c:	e0 93 f1 02 	sts	0x02F1, r30
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    7720:	4e 17       	cp	r20, r30
    7722:	5f 07       	cpc	r21, r31
    7724:	0c f0       	brlt	.+2      	; 0x7728 <handleMotorsWithSpeedController+0x640>
    7726:	7b c1       	rjmp	.+758    	; 0x7a1e <handleMotorsWithSpeedController+0x936>
						pwm_intermediate_left_desired = pwm_left_desired;
    7728:	50 93 f2 02 	sts	0x02F2, r21
    772c:	40 93 f1 02 	sts	0x02F1, r20
    7730:	40 91 7c 04 	lds	r20, 0x047C
    7734:	f2 cc       	rjmp	.-1564   	; 0x711a <handleMotorsWithSpeedController+0x32>
void handleMotorsWithSpeedController() {

	handleSoftAcceleration();

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    7736:	30 93 00 03 	sts	0x0300, r19
    773a:	20 93 ff 02 	sts	0x02FF, r18
		pwm_left_working = pwm_intermediate_left_desired;
    773e:	80 91 f1 02 	lds	r24, 0x02F1
    7742:	90 91 f2 02 	lds	r25, 0x02F2
    7746:	90 93 02 03 	sts	0x0302, r25
    774a:	80 93 01 03 	sts	0x0301, r24
    774e:	ff cc       	rjmp	.-1538   	; 0x714e <handleMotorsWithSpeedController+0x66>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    7750:	c2 01       	movw	r24, r4
    7752:	b1 01       	movw	r22, r2
    7754:	a4 01       	movw	r20, r8
    7756:	93 01       	movw	r18, r6
    7758:	0e 94 0c 5a 	call	0xb418	; 0xb418 <__subsf3>
    775c:	20 e0       	ldi	r18, 0x00	; 0
    775e:	30 e0       	ldi	r19, 0x00	; 0
    7760:	4e e1       	ldi	r20, 0x1E	; 30
    7762:	52 e4       	ldi	r21, 0x42	; 66
    7764:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    7768:	60 93 87 03 	sts	0x0387, r22
    776c:	70 93 88 03 	sts	0x0388, r23
    7770:	80 93 89 03 	sts	0x0389, r24
    7774:	90 93 8a 03 	sts	0x038A, r25
    7778:	7b 01       	movw	r14, r22
    777a:	8c 01       	movw	r16, r24
    777c:	07 ce       	rjmp	.-1010   	; 0x738c <handleMotorsWithSpeedController+0x2a4>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    777e:	20 e0       	ldi	r18, 0x00	; 0
    7780:	92 2b       	or	r25, r18
    7782:	a1 95       	neg	r26
    7784:	a9 17       	cp	r26, r25
    7786:	09 f0       	breq	.+2      	; 0x778a <handleMotorsWithSpeedController+0x6a2>
    7788:	82 cf       	rjmp	.-252    	; 0x768e <handleMotorsWithSpeedController+0x5a6>
    778a:	66 c0       	rjmp	.+204    	; 0x7858 <handleMotorsWithSpeedController+0x770>
    778c:	90 e0       	ldi	r25, 0x00	; 0
    778e:	38 2f       	mov	r19, r24
    7790:	3f 1b       	sub	r19, r31
    7792:	21 e0       	ldi	r18, 0x01	; 1
    7794:	83 17       	cp	r24, r19
    7796:	08 f4       	brcc	.+2      	; 0x779a <handleMotorsWithSpeedController+0x6b2>
    7798:	75 cf       	rjmp	.-278    	; 0x7684 <handleMotorsWithSpeedController+0x59c>
    779a:	f1 cf       	rjmp	.-30     	; 0x777e <handleMotorsWithSpeedController+0x696>
    779c:	90 e0       	ldi	r25, 0x00	; 0
    779e:	f9 2b       	or	r31, r25
    77a0:	89 2d       	mov	r24, r9
    77a2:	81 95       	neg	r24
    77a4:	91 e0       	ldi	r25, 0x01	; 1
    77a6:	68 17       	cp	r22, r24
    77a8:	08 f4       	brcc	.+2      	; 0x77ac <handleMotorsWithSpeedController+0x6c4>
    77aa:	66 cf       	rjmp	.-308    	; 0x7678 <handleMotorsWithSpeedController+0x590>
    77ac:	ef cf       	rjmp	.-34     	; 0x778c <handleMotorsWithSpeedController+0x6a4>
    77ae:	f0 e0       	ldi	r31, 0x00	; 0
    77b0:	98 2f       	mov	r25, r24
    77b2:	9e 1b       	sub	r25, r30
    77b4:	e9 2f       	mov	r30, r25
    77b6:	91 e0       	ldi	r25, 0x01	; 1
    77b8:	8e 17       	cp	r24, r30
    77ba:	08 f4       	brcc	.+2      	; 0x77be <handleMotorsWithSpeedController+0x6d6>
    77bc:	56 cf       	rjmp	.-340    	; 0x766a <handleMotorsWithSpeedController+0x582>
    77be:	ee cf       	rjmp	.-36     	; 0x779c <handleMotorsWithSpeedController+0x6b4>
    77c0:	90 e0       	ldi	r25, 0x00	; 0
    77c2:	e9 2b       	or	r30, r25
    77c4:	8b 2d       	mov	r24, r11
    77c6:	81 95       	neg	r24
    77c8:	f1 e0       	ldi	r31, 0x01	; 1
    77ca:	58 17       	cp	r21, r24
    77cc:	08 f4       	brcc	.+2      	; 0x77d0 <handleMotorsWithSpeedController+0x6e8>
    77ce:	46 cf       	rjmp	.-372    	; 0x765c <handleMotorsWithSpeedController+0x574>
    77d0:	ee cf       	rjmp	.-36     	; 0x77ae <handleMotorsWithSpeedController+0x6c6>
    77d2:	e0 e0       	ldi	r30, 0x00	; 0
    77d4:	b8 2f       	mov	r27, r24
    77d6:	b9 1b       	sub	r27, r25
    77d8:	91 e0       	ldi	r25, 0x01	; 1
    77da:	8b 17       	cp	r24, r27
    77dc:	08 f4       	brcc	.+2      	; 0x77e0 <handleMotorsWithSpeedController+0x6f8>
    77de:	37 cf       	rjmp	.-402    	; 0x764e <handleMotorsWithSpeedController+0x566>
    77e0:	ef cf       	rjmp	.-34     	; 0x77c0 <handleMotorsWithSpeedController+0x6d8>
    77e2:	e0 e0       	ldi	r30, 0x00	; 0
    77e4:	9e 2b       	or	r25, r30
    77e6:	8d 2d       	mov	r24, r13
    77e8:	81 95       	neg	r24
    77ea:	e1 e0       	ldi	r30, 0x01	; 1
    77ec:	48 17       	cp	r20, r24
    77ee:	08 f4       	brcc	.+2      	; 0x77f2 <handleMotorsWithSpeedController+0x70a>
    77f0:	28 cf       	rjmp	.-432    	; 0x7642 <handleMotorsWithSpeedController+0x55a>
    77f2:	ef cf       	rjmp	.-34     	; 0x77d2 <handleMotorsWithSpeedController+0x6ea>
    77f4:	90 e0       	ldi	r25, 0x00	; 0
    77f6:	c8 2e       	mov	r12, r24
    77f8:	ce 1a       	sub	r12, r30
    77fa:	e1 e0       	ldi	r30, 0x01	; 1
    77fc:	8c 15       	cp	r24, r12
    77fe:	08 f4       	brcc	.+2      	; 0x7802 <handleMotorsWithSpeedController+0x71a>
    7800:	19 cf       	rjmp	.-462    	; 0x7634 <handleMotorsWithSpeedController+0x54c>
    7802:	ef cf       	rjmp	.-34     	; 0x77e2 <handleMotorsWithSpeedController+0x6fa>
    7804:	90 e0       	ldi	r25, 0x00	; 0
    7806:	e9 2b       	or	r30, r25
    7808:	83 2f       	mov	r24, r19
    780a:	8b 1b       	sub	r24, r27
    780c:	91 e0       	ldi	r25, 0x01	; 1
    780e:	38 17       	cp	r19, r24
    7810:	08 f4       	brcc	.+2      	; 0x7814 <handleMotorsWithSpeedController+0x72c>
    7812:	0a cf       	rjmp	.-492    	; 0x7628 <handleMotorsWithSpeedController+0x540>
    7814:	ef cf       	rjmp	.-34     	; 0x77f4 <handleMotorsWithSpeedController+0x70c>
    7816:	e0 e0       	ldi	r30, 0x00	; 0
    7818:	a8 2e       	mov	r10, r24
    781a:	a9 1a       	sub	r10, r25
    781c:	91 e0       	ldi	r25, 0x01	; 1
    781e:	8a 15       	cp	r24, r10
    7820:	08 f4       	brcc	.+2      	; 0x7824 <handleMotorsWithSpeedController+0x73c>
    7822:	fb ce       	rjmp	.-522    	; 0x761a <handleMotorsWithSpeedController+0x532>
    7824:	ef cf       	rjmp	.-34     	; 0x7804 <handleMotorsWithSpeedController+0x71c>
    7826:	e0 e0       	ldi	r30, 0x00	; 0
    7828:	9e 2b       	or	r25, r30
    782a:	82 2f       	mov	r24, r18
    782c:	8f 1b       	sub	r24, r31
    782e:	e1 e0       	ldi	r30, 0x01	; 1
    7830:	28 17       	cp	r18, r24
    7832:	08 f4       	brcc	.+2      	; 0x7836 <handleMotorsWithSpeedController+0x74e>
    7834:	ec ce       	rjmp	.-552    	; 0x760e <handleMotorsWithSpeedController+0x526>
    7836:	ef cf       	rjmp	.-34     	; 0x7816 <handleMotorsWithSpeedController+0x72e>
    7838:	90 e0       	ldi	r25, 0x00	; 0
    783a:	e8 2e       	mov	r14, r24
    783c:	ee 1a       	sub	r14, r30
    783e:	e1 e0       	ldi	r30, 0x01	; 1
    7840:	8e 15       	cp	r24, r14
    7842:	08 f4       	brcc	.+2      	; 0x7846 <handleMotorsWithSpeedController+0x75e>
    7844:	dd ce       	rjmp	.-582    	; 0x7600 <handleMotorsWithSpeedController+0x518>
    7846:	ef cf       	rjmp	.-34     	; 0x7826 <handleMotorsWithSpeedController+0x73e>
    7848:	e0 e0       	ldi	r30, 0x00	; 0
    784a:	81 2f       	mov	r24, r17
    784c:	89 1b       	sub	r24, r25
    784e:	91 e0       	ldi	r25, 0x01	; 1
    7850:	18 17       	cp	r17, r24
    7852:	08 f4       	brcc	.+2      	; 0x7856 <handleMotorsWithSpeedController+0x76e>
    7854:	cf ce       	rjmp	.-610    	; 0x75f4 <handleMotorsWithSpeedController+0x50c>
    7856:	f0 cf       	rjmp	.-32     	; 0x7838 <handleMotorsWithSpeedController+0x750>
    7858:	33 23       	and	r19, r19
    785a:	09 f0       	breq	.+2      	; 0x785e <handleMotorsWithSpeedController+0x776>
    785c:	18 cf       	rjmp	.-464    	; 0x768e <handleMotorsWithSpeedController+0x5a6>
    785e:	ee 23       	and	r30, r30
    7860:	09 f0       	breq	.+2      	; 0x7864 <handleMotorsWithSpeedController+0x77c>
    7862:	15 cf       	rjmp	.-470    	; 0x768e <handleMotorsWithSpeedController+0x5a6>
    7864:	bb 23       	and	r27, r27
    7866:	09 f0       	breq	.+2      	; 0x786a <handleMotorsWithSpeedController+0x782>
    7868:	12 cf       	rjmp	.-476    	; 0x768e <handleMotorsWithSpeedController+0x5a6>
    786a:	cc 20       	and	r12, r12
    786c:	09 f0       	breq	.+2      	; 0x7870 <handleMotorsWithSpeedController+0x788>
    786e:	0f cf       	rjmp	.-482    	; 0x768e <handleMotorsWithSpeedController+0x5a6>
    7870:	aa 20       	and	r10, r10
    7872:	09 f0       	breq	.+2      	; 0x7876 <handleMotorsWithSpeedController+0x78e>
    7874:	0c cf       	rjmp	.-488    	; 0x768e <handleMotorsWithSpeedController+0x5a6>
    7876:	e1 e0       	ldi	r30, 0x01	; 1
    7878:	ee 15       	cp	r30, r14
    787a:	08 f4       	brcc	.+2      	; 0x787e <handleMotorsWithSpeedController+0x796>
    787c:	08 cf       	rjmp	.-496    	; 0x768e <handleMotorsWithSpeedController+0x5a6>
    787e:	ee 16       	cp	r14, r30
    7880:	09 f4       	brne	.+2      	; 0x7884 <handleMotorsWithSpeedController+0x79c>
    7882:	e4 c0       	rjmp	.+456    	; 0x7a4c <handleMotorsWithSpeedController+0x964>
    7884:	40 91 7c 04 	lds	r20, 0x047C
    7888:	20 91 ef 02 	lds	r18, 0x02EF
    788c:	30 91 f0 02 	lds	r19, 0x02F0
    7890:	44 cc       	rjmp	.-1912   	; 0x711a <handleMotorsWithSpeedController+0x32>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    7892:	c9 01       	movw	r24, r18
    7894:	aa 27       	eor	r26, r26
    7896:	97 fd       	sbrc	r25, 7
    7898:	a0 95       	com	r26
    789a:	ba 2f       	mov	r27, r26
    789c:	20 91 b5 03 	lds	r18, 0x03B5
    78a0:	30 91 b6 03 	lds	r19, 0x03B6
    78a4:	40 91 b7 03 	lds	r20, 0x03B7
    78a8:	50 91 b8 03 	lds	r21, 0x03B8
    78ac:	28 0f       	add	r18, r24
    78ae:	39 1f       	adc	r19, r25
    78b0:	4a 1f       	adc	r20, r26
    78b2:	5b 1f       	adc	r21, r27
    78b4:	20 93 b5 03 	sts	0x03B5, r18
    78b8:	30 93 b6 03 	sts	0x03B6, r19
    78bc:	40 93 b7 03 	sts	0x03B7, r20
    78c0:	50 93 b8 03 	sts	0x03B8, r21
			rightSumCount++;
    78c4:	80 91 bb 03 	lds	r24, 0x03BB
    78c8:	90 91 bc 03 	lds	r25, 0x03BC
    78cc:	01 96       	adiw	r24, 0x01	; 1
    78ce:	90 93 bc 03 	sts	0x03BC, r25
    78d2:	80 93 bb 03 	sts	0x03BB, r24
    78d6:	de cd       	rjmp	.-1092   	; 0x7494 <handleMotorsWithSpeedController+0x3ac>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    78d8:	c9 01       	movw	r24, r18
    78da:	aa 27       	eor	r26, r26
    78dc:	97 fd       	sbrc	r25, 7
    78de:	a0 95       	com	r26
    78e0:	ba 2f       	mov	r27, r26
    78e2:	20 91 b1 03 	lds	r18, 0x03B1
    78e6:	30 91 b2 03 	lds	r19, 0x03B2
    78ea:	40 91 b3 03 	lds	r20, 0x03B3
    78ee:	50 91 b4 03 	lds	r21, 0x03B4
    78f2:	28 0f       	add	r18, r24
    78f4:	39 1f       	adc	r19, r25
    78f6:	4a 1f       	adc	r20, r26
    78f8:	5b 1f       	adc	r21, r27
    78fa:	20 93 b1 03 	sts	0x03B1, r18
    78fe:	30 93 b2 03 	sts	0x03B2, r19
    7902:	40 93 b3 03 	sts	0x03B3, r20
    7906:	50 93 b4 03 	sts	0x03B4, r21
			leftSumCount++;
    790a:	80 91 b9 03 	lds	r24, 0x03B9
    790e:	90 91 ba 03 	lds	r25, 0x03BA
    7912:	01 96       	adiw	r24, 0x01	; 1
    7914:	90 93 ba 03 	sts	0x03BA, r25
    7918:	80 93 b9 03 	sts	0x03B9, r24
    791c:	49 cc       	rjmp	.-1902   	; 0x71b0 <handleMotorsWithSpeedController+0xc8>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    791e:	21 15       	cp	r18, r1
    7920:	31 05       	cpc	r19, r1
    7922:	09 f0       	breq	.+2      	; 0x7926 <handleMotorsWithSpeedController+0x83e>
    7924:	59 c0       	rjmp	.+178    	; 0x79d8 <handleMotorsWithSpeedController+0x8f0>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    7926:	10 92 a9 00 	sts	0x00A9, r1
    792a:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    792e:	10 92 ab 00 	sts	0x00AB, r1
    7932:	10 92 aa 00 	sts	0x00AA, r1
    7936:	c2 cc       	rjmp	.-1660   	; 0x72bc <handleMotorsWithSpeedController+0x1d4>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    7938:	21 15       	cp	r18, r1
    793a:	31 05       	cpc	r19, r1
    793c:	09 f0       	breq	.+2      	; 0x7940 <handleMotorsWithSpeedController+0x858>
    793e:	43 c0       	rjmp	.+134    	; 0x79c6 <handleMotorsWithSpeedController+0x8de>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    7940:	10 92 99 00 	sts	0x0099, r1
    7944:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    7948:	10 92 9b 00 	sts	0x009B, r1
    794c:	10 92 9a 00 	sts	0x009A, r1
    7950:	27 ce       	rjmp	.-946    	; 0x75a0 <handleMotorsWithSpeedController+0x4b8>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    7952:	20 91 eb 02 	lds	r18, 0x02EB
    7956:	30 91 ec 02 	lds	r19, 0x02EC
    795a:	20 93 ef 02 	sts	0x02EF, r18
    795e:	30 93 f0 02 	sts	0x02F0, r19
				pwm_intermediate_left_desired = pwm_left_desired;
    7962:	80 91 ed 02 	lds	r24, 0x02ED
    7966:	90 91 ee 02 	lds	r25, 0x02EE
    796a:	90 93 f2 02 	sts	0x02F2, r25
    796e:	80 93 f1 02 	sts	0x02F1, r24
    7972:	40 91 7c 04 	lds	r20, 0x047C
    7976:	c9 01       	movw	r24, r18
    7978:	9c 01       	movw	r18, r24
    797a:	cf cb       	rjmp	.-2146   	; 0x711a <handleMotorsWithSpeedController+0x32>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    797c:	20 91 ef 02 	lds	r18, 0x02EF
    7980:	30 91 f0 02 	lds	r19, 0x02F0
    7984:	24 9f       	mul	r18, r20
    7986:	c0 01       	movw	r24, r0
    7988:	25 9f       	mul	r18, r21
    798a:	90 0d       	add	r25, r0
    798c:	34 9f       	mul	r19, r20
    798e:	90 0d       	add	r25, r0
    7990:	11 24       	eor	r1, r1
    7992:	97 fd       	sbrc	r25, 7
    7994:	9d ce       	rjmp	.-710    	; 0x76d0 <handleMotorsWithSpeedController+0x5e8>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    7996:	24 17       	cp	r18, r20
    7998:	35 07       	cpc	r19, r21
    799a:	0c f0       	brlt	.+2      	; 0x799e <handleMotorsWithSpeedController+0x8b6>
    799c:	43 c0       	rjmp	.+134    	; 0x7a24 <handleMotorsWithSpeedController+0x93c>
					pwm_intermediate_right_desired += speedStep;
    799e:	80 91 17 02 	lds	r24, 0x0217
    79a2:	b9 01       	movw	r22, r18
    79a4:	68 0f       	add	r22, r24
    79a6:	71 1d       	adc	r23, r1
    79a8:	cb 01       	movw	r24, r22
    79aa:	70 93 f0 02 	sts	0x02F0, r23
    79ae:	60 93 ef 02 	sts	0x02EF, r22
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    79b2:	46 17       	cp	r20, r22
    79b4:	57 07       	cpc	r21, r23
    79b6:	0c f0       	brlt	.+2      	; 0x79ba <handleMotorsWithSpeedController+0x8d2>
    79b8:	47 c0       	rjmp	.+142    	; 0x7a48 <handleMotorsWithSpeedController+0x960>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    79ba:	50 93 f0 02 	sts	0x02F0, r21
    79be:	40 93 ef 02 	sts	0x02EF, r20
    79c2:	9a 01       	movw	r18, r20
    79c4:	8b ce       	rjmp	.-746    	; 0x76dc <handleMotorsWithSpeedController+0x5f4>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    79c6:	88 27       	eor	r24, r24
    79c8:	99 27       	eor	r25, r25
    79ca:	82 1b       	sub	r24, r18
    79cc:	93 0b       	sbc	r25, r19
    79ce:	90 93 9b 00 	sts	0x009B, r25
    79d2:	80 93 9a 00 	sts	0x009A, r24
    79d6:	e4 cd       	rjmp	.-1080   	; 0x75a0 <handleMotorsWithSpeedController+0x4b8>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    79d8:	88 27       	eor	r24, r24
    79da:	99 27       	eor	r25, r25
    79dc:	82 1b       	sub	r24, r18
    79de:	93 0b       	sbc	r25, r19
    79e0:	90 93 ab 00 	sts	0x00AB, r25
    79e4:	80 93 aa 00 	sts	0x00AA, r24
    79e8:	69 cc       	rjmp	.-1838   	; 0x72bc <handleMotorsWithSpeedController+0x1d4>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    79ea:	10 92 f2 02 	sts	0x02F2, r1
    79ee:	10 92 f1 02 	sts	0x02F1, r1
    79f2:	40 91 7c 04 	lds	r20, 0x047C
    79f6:	91 cb       	rjmp	.-2270   	; 0x711a <handleMotorsWithSpeedController+0x32>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    79f8:	46 17       	cp	r20, r22
    79fa:	57 07       	cpc	r21, r23
    79fc:	84 f4       	brge	.+32     	; 0x7a1e <handleMotorsWithSpeedController+0x936>
					pwm_intermediate_left_desired -= speedStep;
    79fe:	80 91 17 02 	lds	r24, 0x0217
    7a02:	fb 01       	movw	r30, r22
    7a04:	e8 1b       	sub	r30, r24
    7a06:	f1 09       	sbc	r31, r1
    7a08:	f0 93 f2 02 	sts	0x02F2, r31
    7a0c:	e0 93 f1 02 	sts	0x02F1, r30
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    7a10:	e4 17       	cp	r30, r20
    7a12:	f5 07       	cpc	r31, r21
    7a14:	24 f4       	brge	.+8      	; 0x7a1e <handleMotorsWithSpeedController+0x936>
						pwm_intermediate_left_desired = pwm_left_desired;
    7a16:	50 93 f2 02 	sts	0x02F2, r21
    7a1a:	40 93 f1 02 	sts	0x02F1, r20
    7a1e:	40 91 7c 04 	lds	r20, 0x047C
    7a22:	7b cb       	rjmp	.-2314   	; 0x711a <handleMotorsWithSpeedController+0x32>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    7a24:	42 17       	cp	r20, r18
    7a26:	53 07       	cpc	r21, r19
    7a28:	0c f0       	brlt	.+2      	; 0x7a2c <handleMotorsWithSpeedController+0x944>
    7a2a:	58 ce       	rjmp	.-848    	; 0x76dc <handleMotorsWithSpeedController+0x5f4>
					pwm_intermediate_right_desired -= speedStep;
    7a2c:	80 91 17 02 	lds	r24, 0x0217
    7a30:	f9 01       	movw	r30, r18
    7a32:	e8 1b       	sub	r30, r24
    7a34:	f1 09       	sbc	r31, r1
    7a36:	cf 01       	movw	r24, r30
    7a38:	f0 93 f0 02 	sts	0x02F0, r31
    7a3c:	e0 93 ef 02 	sts	0x02EF, r30
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    7a40:	e4 17       	cp	r30, r20
    7a42:	f5 07       	cpc	r31, r21
    7a44:	0c f4       	brge	.+2      	; 0x7a48 <handleMotorsWithSpeedController+0x960>
    7a46:	b9 cf       	rjmp	.-142    	; 0x79ba <handleMotorsWithSpeedController+0x8d2>
    7a48:	9c 01       	movw	r18, r24
    7a4a:	48 ce       	rjmp	.-880    	; 0x76dc <handleMotorsWithSpeedController+0x5f4>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    7a4c:	ff e8       	ldi	r31, 0x8F	; 143
    7a4e:	f8 15       	cp	r31, r8
    7a50:	08 f4       	brcc	.+2      	; 0x7a54 <handleMotorsWithSpeedController+0x96c>
    7a52:	1d ce       	rjmp	.-966    	; 0x768e <handleMotorsWithSpeedController+0x5a6>
    7a54:	40 91 7c 04 	lds	r20, 0x047C
    7a58:	5c cb       	rjmp	.-2376   	; 0x7112 <handleMotorsWithSpeedController+0x2a>

00007a5a <handleMotorsWithNoController>:
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}

void handleMotorsWithNoController() {
    7a5a:	9f 92       	push	r9
    7a5c:	af 92       	push	r10
    7a5e:	bf 92       	push	r11
    7a60:	cf 92       	push	r12
    7a62:	df 92       	push	r13
    7a64:	ef 92       	push	r14
    7a66:	ff 92       	push	r15
    7a68:	0f 93       	push	r16
    7a6a:	1f 93       	push	r17
    7a6c:	cf 93       	push	r28
    7a6e:	df 93       	push	r29
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
    7a70:	80 91 7c 04 	lds	r24, 0x047C
    7a74:	88 23       	and	r24, r24
    7a76:	09 f4       	brne	.+2      	; 0x7a7a <handleMotorsWithNoController+0x20>
    7a78:	c9 c0       	rjmp	.+402    	; 0x7c0c <handleMotorsWithNoController+0x1b2>
    7a7a:	c0 91 ef 02 	lds	r28, 0x02EF
    7a7e:	d0 91 f0 02 	lds	r29, 0x02F0
    7a82:	00 91 f1 02 	lds	r16, 0x02F1
    7a86:	10 91 f2 02 	lds	r17, 0x02F2
void handleMotorsWithNoController() {

	handleSoftAcceleration();

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    7a8a:	80 91 07 02 	lds	r24, 0x0207
    7a8e:	88 23       	and	r24, r24
    7a90:	c9 f1       	breq	.+114    	; 0x7b04 <handleMotorsWithNoController+0xaa>
		last_left_vel = left_vel_sum>>2;
    7a92:	20 91 df 02 	lds	r18, 0x02DF
    7a96:	30 91 e0 02 	lds	r19, 0x02E0
    7a9a:	36 95       	lsr	r19
    7a9c:	27 95       	ror	r18
    7a9e:	36 95       	lsr	r19
    7aa0:	27 95       	ror	r18
    7aa2:	30 93 e4 02 	sts	0x02E4, r19
    7aa6:	20 93 e3 02 	sts	0x02E3, r18
		compute_left_vel = 0;
    7aaa:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    7aae:	10 92 e0 02 	sts	0x02E0, r1
    7ab2:	10 92 df 02 	sts	0x02DF, r1

		if(pwm_left_desired >= 0) {
    7ab6:	80 91 ed 02 	lds	r24, 0x02ED
    7aba:	90 91 ee 02 	lds	r25, 0x02EE
    7abe:	97 fd       	sbrc	r25, 7
    7ac0:	34 c2       	rjmp	.+1128   	; 0x7f2a <handleMotorsWithNoController+0x4d0>
			leftMotSteps += (last_left_vel>>3);
    7ac2:	35 95       	asr	r19
    7ac4:	27 95       	ror	r18
    7ac6:	35 95       	asr	r19
    7ac8:	27 95       	ror	r18
    7aca:	35 95       	asr	r19
    7acc:	27 95       	ror	r18
    7ace:	b9 01       	movw	r22, r18
    7ad0:	88 27       	eor	r24, r24
    7ad2:	77 fd       	sbrc	r23, 7
    7ad4:	80 95       	com	r24
    7ad6:	98 2f       	mov	r25, r24
    7ad8:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    7adc:	9b 01       	movw	r18, r22
    7ade:	ac 01       	movw	r20, r24
    7ae0:	60 91 d3 02 	lds	r22, 0x02D3
    7ae4:	70 91 d4 02 	lds	r23, 0x02D4
    7ae8:	80 91 d5 02 	lds	r24, 0x02D5
    7aec:	90 91 d6 02 	lds	r25, 0x02D6
    7af0:	0e 94 0d 5a 	call	0xb41a	; 0xb41a <__addsf3>
    7af4:	60 93 d3 02 	sts	0x02D3, r22
    7af8:	70 93 d4 02 	sts	0x02D4, r23
    7afc:	80 93 d5 02 	sts	0x02D5, r24
    7b00:	90 93 d6 02 	sts	0x02D6, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    7b04:	80 91 08 02 	lds	r24, 0x0208
    7b08:	88 23       	and	r24, r24
    7b0a:	c9 f1       	breq	.+114    	; 0x7b7e <handleMotorsWithNoController+0x124>
		last_right_vel = right_vel_sum>>2;
    7b0c:	20 91 e1 02 	lds	r18, 0x02E1
    7b10:	30 91 e2 02 	lds	r19, 0x02E2
    7b14:	36 95       	lsr	r19
    7b16:	27 95       	ror	r18
    7b18:	36 95       	lsr	r19
    7b1a:	27 95       	ror	r18
    7b1c:	30 93 e6 02 	sts	0x02E6, r19
    7b20:	20 93 e5 02 	sts	0x02E5, r18
		compute_right_vel = 0;
    7b24:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    7b28:	10 92 e2 02 	sts	0x02E2, r1
    7b2c:	10 92 e1 02 	sts	0x02E1, r1

		if(pwm_right_desired >= 0) {
    7b30:	80 91 eb 02 	lds	r24, 0x02EB
    7b34:	90 91 ec 02 	lds	r25, 0x02EC
    7b38:	97 fd       	sbrc	r25, 7
    7b3a:	d5 c1       	rjmp	.+938    	; 0x7ee6 <handleMotorsWithNoController+0x48c>
			rightMotSteps += (last_right_vel>>3);
    7b3c:	35 95       	asr	r19
    7b3e:	27 95       	ror	r18
    7b40:	35 95       	asr	r19
    7b42:	27 95       	ror	r18
    7b44:	35 95       	asr	r19
    7b46:	27 95       	ror	r18
    7b48:	b9 01       	movw	r22, r18
    7b4a:	88 27       	eor	r24, r24
    7b4c:	77 fd       	sbrc	r23, 7
    7b4e:	80 95       	com	r24
    7b50:	98 2f       	mov	r25, r24
    7b52:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    7b56:	9b 01       	movw	r18, r22
    7b58:	ac 01       	movw	r20, r24
    7b5a:	60 91 cf 02 	lds	r22, 0x02CF
    7b5e:	70 91 d0 02 	lds	r23, 0x02D0
    7b62:	80 91 d1 02 	lds	r24, 0x02D1
    7b66:	90 91 d2 02 	lds	r25, 0x02D2
    7b6a:	0e 94 0d 5a 	call	0xb41a	; 0xb41a <__addsf3>
    7b6e:	60 93 cf 02 	sts	0x02CF, r22
    7b72:	70 93 d0 02 	sts	0x02D0, r23
    7b76:	80 93 d1 02 	sts	0x02D1, r24
    7b7a:	90 93 d2 02 	sts	0x02D2, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    7b7e:	ce 01       	movw	r24, r28
    7b80:	88 0f       	add	r24, r24
    7b82:	99 1f       	adc	r25, r25
    7b84:	88 0f       	add	r24, r24
    7b86:	99 1f       	adc	r25, r25
    7b88:	8c 0f       	add	r24, r28
    7b8a:	9d 1f       	adc	r25, r29
    7b8c:	90 93 00 03 	sts	0x0300, r25
    7b90:	80 93 ff 02 	sts	0x02FF, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    7b94:	c8 01       	movw	r24, r16
    7b96:	88 0f       	add	r24, r24
    7b98:	99 1f       	adc	r25, r25
    7b9a:	88 0f       	add	r24, r24
    7b9c:	99 1f       	adc	r25, r25
    7b9e:	80 0f       	add	r24, r16
    7ba0:	91 1f       	adc	r25, r17
    7ba2:	90 93 02 03 	sts	0x0302, r25
    7ba6:	80 93 01 03 	sts	0x0301, r24
	if(obstacleAvoidanceEnabled) {
    7baa:	80 91 84 03 	lds	r24, 0x0384
    7bae:	88 23       	and	r24, r24
    7bb0:	09 f0       	breq	.+2      	; 0x7bb4 <handleMotorsWithNoController+0x15a>
    7bb2:	fe c0       	rjmp	.+508    	; 0x7db0 <handleMotorsWithNoController+0x356>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    7bb4:	40 91 01 03 	lds	r20, 0x0301
    7bb8:	50 91 02 03 	lds	r21, 0x0302
    7bbc:	50 93 ea 02 	sts	0x02EA, r21
    7bc0:	40 93 e9 02 	sts	0x02E9, r20
	pwm_right = pwm_right_working;
    7bc4:	20 91 ff 02 	lds	r18, 0x02FF
    7bc8:	30 91 00 03 	lds	r19, 0x0300
    7bcc:	30 93 e8 02 	sts	0x02E8, r19
    7bd0:	20 93 e7 02 	sts	0x02E7, r18

	if(pwm_right > 0) {
    7bd4:	12 16       	cp	r1, r18
    7bd6:	13 06       	cpc	r1, r19
    7bd8:	0c f0       	brlt	.+2      	; 0x7bdc <handleMotorsWithNoController+0x182>
    7bda:	f0 c0       	rjmp	.+480    	; 0x7dbc <handleMotorsWithNoController+0x362>
		OCR3A = (unsigned int)pwm_right;
    7bdc:	30 93 99 00 	sts	0x0099, r19
    7be0:	20 93 98 00 	sts	0x0098, r18
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    7be4:	14 16       	cp	r1, r20
    7be6:	15 06       	cpc	r1, r21
    7be8:	0c f0       	brlt	.+2      	; 0x7bec <handleMotorsWithNoController+0x192>
    7bea:	d5 c0       	rjmp	.+426    	; 0x7d96 <handleMotorsWithNoController+0x33c>
		OCR4A = (unsigned int)pwm_left;
    7bec:	50 93 a9 00 	sts	0x00A9, r21
    7bf0:	40 93 a8 00 	sts	0x00A8, r20
	} else {
		OCR4A = 0;
		OCR4B = 0;
	}

}
    7bf4:	df 91       	pop	r29
    7bf6:	cf 91       	pop	r28
    7bf8:	1f 91       	pop	r17
    7bfa:	0f 91       	pop	r16
    7bfc:	ff 90       	pop	r15
    7bfe:	ef 90       	pop	r14
    7c00:	df 90       	pop	r13
    7c02:	cf 90       	pop	r12
    7c04:	bf 90       	pop	r11
    7c06:	af 90       	pop	r10
    7c08:	9f 90       	pop	r9
    7c0a:	08 95       	ret
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    7c0c:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    7c10:	8b 01       	movw	r16, r22
    7c12:	9c 01       	movw	r18, r24
    7c14:	40 e0       	ldi	r20, 0x00	; 0
    7c16:	50 e0       	ldi	r21, 0x00	; 0
    7c18:	60 e0       	ldi	r22, 0x00	; 0
    7c1a:	70 e0       	ldi	r23, 0x00	; 0
    7c1c:	80 91 74 03 	lds	r24, 0x0374
    7c20:	90 91 75 03 	lds	r25, 0x0375
    7c24:	f0 91 76 03 	lds	r31, 0x0376
    7c28:	b0 91 77 03 	lds	r27, 0x0377
    7c2c:	e0 90 78 03 	lds	r14, 0x0378
    7c30:	c0 90 79 03 	lds	r12, 0x0379
    7c34:	a0 90 7a 03 	lds	r10, 0x037A
    7c38:	a0 91 7b 03 	lds	r26, 0x037B
    7c3c:	90 2e       	mov	r9, r16
    7c3e:	98 1a       	sub	r9, r24
    7c40:	e1 e0       	ldi	r30, 0x01	; 1
    7c42:	09 15       	cp	r16, r9
    7c44:	08 f0       	brcs	.+2      	; 0x7c48 <handleMotorsWithNoController+0x1ee>
    7c46:	2c c1       	rjmp	.+600    	; 0x7ea0 <handleMotorsWithNoController+0x446>
    7c48:	81 2f       	mov	r24, r17
    7c4a:	89 1b       	sub	r24, r25
    7c4c:	91 e0       	ldi	r25, 0x01	; 1
    7c4e:	18 17       	cp	r17, r24
    7c50:	08 f0       	brcs	.+2      	; 0x7c54 <handleMotorsWithNoController+0x1fa>
    7c52:	1e c1       	rjmp	.+572    	; 0x7e90 <handleMotorsWithNoController+0x436>
    7c54:	f8 2e       	mov	r15, r24
    7c56:	fe 1a       	sub	r15, r30
    7c58:	e1 e0       	ldi	r30, 0x01	; 1
    7c5a:	8f 15       	cp	r24, r15
    7c5c:	08 f0       	brcs	.+2      	; 0x7c60 <handleMotorsWithNoController+0x206>
    7c5e:	0f c1       	rjmp	.+542    	; 0x7e7e <handleMotorsWithNoController+0x424>
    7c60:	9e 2b       	or	r25, r30
    7c62:	82 2f       	mov	r24, r18
    7c64:	8f 1b       	sub	r24, r31
    7c66:	e1 e0       	ldi	r30, 0x01	; 1
    7c68:	28 17       	cp	r18, r24
    7c6a:	08 f0       	brcs	.+2      	; 0x7c6e <handleMotorsWithNoController+0x214>
    7c6c:	00 c1       	rjmp	.+512    	; 0x7e6e <handleMotorsWithNoController+0x414>
    7c6e:	b8 2e       	mov	r11, r24
    7c70:	b9 1a       	sub	r11, r25
    7c72:	91 e0       	ldi	r25, 0x01	; 1
    7c74:	8b 15       	cp	r24, r11
    7c76:	08 f0       	brcs	.+2      	; 0x7c7a <handleMotorsWithNoController+0x220>
    7c78:	f1 c0       	rjmp	.+482    	; 0x7e5c <handleMotorsWithNoController+0x402>
    7c7a:	e9 2b       	or	r30, r25
    7c7c:	83 2f       	mov	r24, r19
    7c7e:	8b 1b       	sub	r24, r27
    7c80:	91 e0       	ldi	r25, 0x01	; 1
    7c82:	38 17       	cp	r19, r24
    7c84:	08 f0       	brcs	.+2      	; 0x7c88 <handleMotorsWithNoController+0x22e>
    7c86:	e2 c0       	rjmp	.+452    	; 0x7e4c <handleMotorsWithNoController+0x3f2>
    7c88:	d8 2e       	mov	r13, r24
    7c8a:	de 1a       	sub	r13, r30
    7c8c:	e1 e0       	ldi	r30, 0x01	; 1
    7c8e:	8d 15       	cp	r24, r13
    7c90:	08 f0       	brcs	.+2      	; 0x7c94 <handleMotorsWithNoController+0x23a>
    7c92:	d3 c0       	rjmp	.+422    	; 0x7e3a <handleMotorsWithNoController+0x3e0>
    7c94:	9e 2b       	or	r25, r30
    7c96:	8e 2d       	mov	r24, r14
    7c98:	81 95       	neg	r24
    7c9a:	e1 e0       	ldi	r30, 0x01	; 1
    7c9c:	48 17       	cp	r20, r24
    7c9e:	08 f0       	brcs	.+2      	; 0x7ca2 <handleMotorsWithNoController+0x248>
    7ca0:	c4 c0       	rjmp	.+392    	; 0x7e2a <handleMotorsWithNoController+0x3d0>
    7ca2:	b8 2f       	mov	r27, r24
    7ca4:	b9 1b       	sub	r27, r25
    7ca6:	91 e0       	ldi	r25, 0x01	; 1
    7ca8:	8b 17       	cp	r24, r27
    7caa:	08 f0       	brcs	.+2      	; 0x7cae <handleMotorsWithNoController+0x254>
    7cac:	b5 c0       	rjmp	.+362    	; 0x7e18 <handleMotorsWithNoController+0x3be>
    7cae:	e9 2b       	or	r30, r25
    7cb0:	8c 2d       	mov	r24, r12
    7cb2:	81 95       	neg	r24
    7cb4:	f1 e0       	ldi	r31, 0x01	; 1
    7cb6:	58 17       	cp	r21, r24
    7cb8:	08 f0       	brcs	.+2      	; 0x7cbc <handleMotorsWithNoController+0x262>
    7cba:	a5 c0       	rjmp	.+330    	; 0x7e06 <handleMotorsWithNoController+0x3ac>
    7cbc:	98 2f       	mov	r25, r24
    7cbe:	9e 1b       	sub	r25, r30
    7cc0:	e9 2f       	mov	r30, r25
    7cc2:	91 e0       	ldi	r25, 0x01	; 1
    7cc4:	8e 17       	cp	r24, r30
    7cc6:	08 f0       	brcs	.+2      	; 0x7cca <handleMotorsWithNoController+0x270>
    7cc8:	95 c0       	rjmp	.+298    	; 0x7df4 <handleMotorsWithNoController+0x39a>
    7cca:	f9 2b       	or	r31, r25
    7ccc:	8a 2d       	mov	r24, r10
    7cce:	81 95       	neg	r24
    7cd0:	91 e0       	ldi	r25, 0x01	; 1
    7cd2:	68 17       	cp	r22, r24
    7cd4:	08 f0       	brcs	.+2      	; 0x7cd8 <handleMotorsWithNoController+0x27e>
    7cd6:	86 c0       	rjmp	.+268    	; 0x7de4 <handleMotorsWithNoController+0x38a>
    7cd8:	38 2f       	mov	r19, r24
    7cda:	3f 1b       	sub	r19, r31
    7cdc:	21 e0       	ldi	r18, 0x01	; 1
    7cde:	83 17       	cp	r24, r19
    7ce0:	08 f0       	brcs	.+2      	; 0x7ce4 <handleMotorsWithNoController+0x28a>
    7ce2:	79 c0       	rjmp	.+242    	; 0x7dd6 <handleMotorsWithNoController+0x37c>
    7ce4:	92 2b       	or	r25, r18
    7ce6:	a1 95       	neg	r26
    7ce8:	a9 17       	cp	r26, r25
    7cea:	09 f4       	brne	.+2      	; 0x7cee <handleMotorsWithNoController+0x294>
    7cec:	e1 c0       	rjmp	.+450    	; 0x7eb0 <handleMotorsWithNoController+0x456>
			speedStepCounter = getTime100MicroSec();
    7cee:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    7cf2:	9b 01       	movw	r18, r22
    7cf4:	ac 01       	movw	r20, r24
    7cf6:	60 93 74 03 	sts	0x0374, r22
    7cfa:	30 93 75 03 	sts	0x0375, r19
    7cfe:	40 93 76 03 	sts	0x0376, r20
    7d02:	50 93 77 03 	sts	0x0377, r21
    7d06:	10 92 78 03 	sts	0x0378, r1
    7d0a:	10 92 79 03 	sts	0x0379, r1
    7d0e:	10 92 7a 03 	sts	0x037A, r1
    7d12:	10 92 7b 03 	sts	0x037B, r1

			if(softAccEnabled) {
    7d16:	80 91 7c 03 	lds	r24, 0x037C
    7d1a:	88 23       	and	r24, r24
    7d1c:	09 f4       	brne	.+2      	; 0x7d20 <handleMotorsWithNoController+0x2c6>
    7d1e:	39 c1       	rjmp	.+626    	; 0x7f92 <handleMotorsWithNoController+0x538>
				if(pwm_right_desired == 0) {
    7d20:	20 91 eb 02 	lds	r18, 0x02EB
    7d24:	30 91 ec 02 	lds	r19, 0x02EC
    7d28:	21 15       	cp	r18, r1
    7d2a:	31 05       	cpc	r19, r1
    7d2c:	09 f0       	breq	.+2      	; 0x7d30 <handleMotorsWithNoController+0x2d6>
    7d2e:	46 c1       	rjmp	.+652    	; 0x7fbc <handleMotorsWithNoController+0x562>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
    7d30:	10 92 f0 02 	sts	0x02F0, r1
    7d34:	10 92 ef 02 	sts	0x02EF, r1
    7d38:	c0 e0       	ldi	r28, 0x00	; 0
    7d3a:	d0 e0       	ldi	r29, 0x00	; 0
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    7d3c:	20 91 ed 02 	lds	r18, 0x02ED
    7d40:	30 91 ee 02 	lds	r19, 0x02EE
    7d44:	21 15       	cp	r18, r1
    7d46:	31 05       	cpc	r19, r1
    7d48:	09 f4       	brne	.+2      	; 0x7d4c <handleMotorsWithNoController+0x2f2>
    7d4a:	5b c1       	rjmp	.+694    	; 0x8002 <handleMotorsWithNoController+0x5a8>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    7d4c:	00 91 f1 02 	lds	r16, 0x02F1
    7d50:	10 91 f2 02 	lds	r17, 0x02F2
    7d54:	02 9f       	mul	r16, r18
    7d56:	c0 01       	movw	r24, r0
    7d58:	03 9f       	mul	r16, r19
    7d5a:	90 0d       	add	r25, r0
    7d5c:	12 9f       	mul	r17, r18
    7d5e:	90 0d       	add	r25, r0
    7d60:	11 24       	eor	r1, r1
    7d62:	97 fd       	sbrc	r25, 7
    7d64:	4e c1       	rjmp	.+668    	; 0x8002 <handleMotorsWithNoController+0x5a8>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    7d66:	02 17       	cp	r16, r18
    7d68:	13 07       	cpc	r17, r19
    7d6a:	0c f0       	brlt	.+2      	; 0x7d6e <handleMotorsWithNoController+0x314>
    7d6c:	51 c1       	rjmp	.+674    	; 0x8010 <handleMotorsWithNoController+0x5b6>
					pwm_intermediate_left_desired += speedStep;
    7d6e:	80 91 17 02 	lds	r24, 0x0217
    7d72:	a8 01       	movw	r20, r16
    7d74:	48 0f       	add	r20, r24
    7d76:	51 1d       	adc	r21, r1
    7d78:	ca 01       	movw	r24, r20
    7d7a:	50 93 f2 02 	sts	0x02F2, r21
    7d7e:	40 93 f1 02 	sts	0x02F1, r20
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    7d82:	24 17       	cp	r18, r20
    7d84:	35 07       	cpc	r19, r21
    7d86:	0c f0       	brlt	.+2      	; 0x7d8a <handleMotorsWithNoController+0x330>
    7d88:	17 c1       	rjmp	.+558    	; 0x7fb8 <handleMotorsWithNoController+0x55e>
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired -= speedStep;
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
    7d8a:	30 93 f2 02 	sts	0x02F2, r19
    7d8e:	20 93 f1 02 	sts	0x02F1, r18
    7d92:	89 01       	movw	r16, r18
    7d94:	7a ce       	rjmp	.-780    	; 0x7a8a <handleMotorsWithNoController+0x30>
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
    7d96:	41 15       	cp	r20, r1
    7d98:	51 05       	cpc	r21, r1
    7d9a:	09 f0       	breq	.+2      	; 0x7d9e <handleMotorsWithNoController+0x344>
    7d9c:	f1 c0       	rjmp	.+482    	; 0x7f80 <handleMotorsWithNoController+0x526>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    7d9e:	10 92 a9 00 	sts	0x00A9, r1
    7da2:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    7da6:	10 92 ab 00 	sts	0x00AB, r1
    7daa:	10 92 aa 00 	sts	0x00AA, r1
    7dae:	22 cf       	rjmp	.-444    	; 0x7bf4 <handleMotorsWithNoController+0x19a>
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    7db0:	81 e0       	ldi	r24, 0x01	; 1
    7db2:	93 e0       	ldi	r25, 0x03	; 3
    7db4:	6f ef       	ldi	r22, 0xFF	; 255
    7db6:	72 e0       	ldi	r23, 0x02	; 2
    7db8:	19 d3       	rcall	.+1586   	; 0x83ec <obstacleAvoidance>
    7dba:	fc ce       	rjmp	.-520    	; 0x7bb4 <handleMotorsWithNoController+0x15a>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    7dbc:	21 15       	cp	r18, r1
    7dbe:	31 05       	cpc	r19, r1
    7dc0:	09 f0       	breq	.+2      	; 0x7dc4 <handleMotorsWithNoController+0x36a>
    7dc2:	d5 c0       	rjmp	.+426    	; 0x7f6e <handleMotorsWithNoController+0x514>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    7dc4:	10 92 99 00 	sts	0x0099, r1
    7dc8:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    7dcc:	10 92 9b 00 	sts	0x009B, r1
    7dd0:	10 92 9a 00 	sts	0x009A, r1
    7dd4:	07 cf       	rjmp	.-498    	; 0x7be4 <handleMotorsWithNoController+0x18a>
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    7dd6:	20 e0       	ldi	r18, 0x00	; 0
    7dd8:	92 2b       	or	r25, r18
    7dda:	a1 95       	neg	r26
    7ddc:	a9 17       	cp	r26, r25
    7dde:	09 f0       	breq	.+2      	; 0x7de2 <handleMotorsWithNoController+0x388>
    7de0:	86 cf       	rjmp	.-244    	; 0x7cee <handleMotorsWithNoController+0x294>
    7de2:	66 c0       	rjmp	.+204    	; 0x7eb0 <handleMotorsWithNoController+0x456>
    7de4:	90 e0       	ldi	r25, 0x00	; 0
    7de6:	38 2f       	mov	r19, r24
    7de8:	3f 1b       	sub	r19, r31
    7dea:	21 e0       	ldi	r18, 0x01	; 1
    7dec:	83 17       	cp	r24, r19
    7dee:	08 f4       	brcc	.+2      	; 0x7df2 <handleMotorsWithNoController+0x398>
    7df0:	79 cf       	rjmp	.-270    	; 0x7ce4 <handleMotorsWithNoController+0x28a>
    7df2:	f1 cf       	rjmp	.-30     	; 0x7dd6 <handleMotorsWithNoController+0x37c>
    7df4:	90 e0       	ldi	r25, 0x00	; 0
    7df6:	f9 2b       	or	r31, r25
    7df8:	8a 2d       	mov	r24, r10
    7dfa:	81 95       	neg	r24
    7dfc:	91 e0       	ldi	r25, 0x01	; 1
    7dfe:	68 17       	cp	r22, r24
    7e00:	08 f4       	brcc	.+2      	; 0x7e04 <handleMotorsWithNoController+0x3aa>
    7e02:	6a cf       	rjmp	.-300    	; 0x7cd8 <handleMotorsWithNoController+0x27e>
    7e04:	ef cf       	rjmp	.-34     	; 0x7de4 <handleMotorsWithNoController+0x38a>
    7e06:	f0 e0       	ldi	r31, 0x00	; 0
    7e08:	98 2f       	mov	r25, r24
    7e0a:	9e 1b       	sub	r25, r30
    7e0c:	e9 2f       	mov	r30, r25
    7e0e:	91 e0       	ldi	r25, 0x01	; 1
    7e10:	8e 17       	cp	r24, r30
    7e12:	08 f4       	brcc	.+2      	; 0x7e16 <handleMotorsWithNoController+0x3bc>
    7e14:	5a cf       	rjmp	.-332    	; 0x7cca <handleMotorsWithNoController+0x270>
    7e16:	ee cf       	rjmp	.-36     	; 0x7df4 <handleMotorsWithNoController+0x39a>
    7e18:	90 e0       	ldi	r25, 0x00	; 0
    7e1a:	e9 2b       	or	r30, r25
    7e1c:	8c 2d       	mov	r24, r12
    7e1e:	81 95       	neg	r24
    7e20:	f1 e0       	ldi	r31, 0x01	; 1
    7e22:	58 17       	cp	r21, r24
    7e24:	08 f4       	brcc	.+2      	; 0x7e28 <handleMotorsWithNoController+0x3ce>
    7e26:	4a cf       	rjmp	.-364    	; 0x7cbc <handleMotorsWithNoController+0x262>
    7e28:	ee cf       	rjmp	.-36     	; 0x7e06 <handleMotorsWithNoController+0x3ac>
    7e2a:	e0 e0       	ldi	r30, 0x00	; 0
    7e2c:	b8 2f       	mov	r27, r24
    7e2e:	b9 1b       	sub	r27, r25
    7e30:	91 e0       	ldi	r25, 0x01	; 1
    7e32:	8b 17       	cp	r24, r27
    7e34:	08 f4       	brcc	.+2      	; 0x7e38 <handleMotorsWithNoController+0x3de>
    7e36:	3b cf       	rjmp	.-394    	; 0x7cae <handleMotorsWithNoController+0x254>
    7e38:	ef cf       	rjmp	.-34     	; 0x7e18 <handleMotorsWithNoController+0x3be>
    7e3a:	e0 e0       	ldi	r30, 0x00	; 0
    7e3c:	9e 2b       	or	r25, r30
    7e3e:	8e 2d       	mov	r24, r14
    7e40:	81 95       	neg	r24
    7e42:	e1 e0       	ldi	r30, 0x01	; 1
    7e44:	48 17       	cp	r20, r24
    7e46:	08 f4       	brcc	.+2      	; 0x7e4a <handleMotorsWithNoController+0x3f0>
    7e48:	2c cf       	rjmp	.-424    	; 0x7ca2 <handleMotorsWithNoController+0x248>
    7e4a:	ef cf       	rjmp	.-34     	; 0x7e2a <handleMotorsWithNoController+0x3d0>
    7e4c:	90 e0       	ldi	r25, 0x00	; 0
    7e4e:	d8 2e       	mov	r13, r24
    7e50:	de 1a       	sub	r13, r30
    7e52:	e1 e0       	ldi	r30, 0x01	; 1
    7e54:	8d 15       	cp	r24, r13
    7e56:	08 f4       	brcc	.+2      	; 0x7e5a <handleMotorsWithNoController+0x400>
    7e58:	1d cf       	rjmp	.-454    	; 0x7c94 <handleMotorsWithNoController+0x23a>
    7e5a:	ef cf       	rjmp	.-34     	; 0x7e3a <handleMotorsWithNoController+0x3e0>
    7e5c:	90 e0       	ldi	r25, 0x00	; 0
    7e5e:	e9 2b       	or	r30, r25
    7e60:	83 2f       	mov	r24, r19
    7e62:	8b 1b       	sub	r24, r27
    7e64:	91 e0       	ldi	r25, 0x01	; 1
    7e66:	38 17       	cp	r19, r24
    7e68:	08 f4       	brcc	.+2      	; 0x7e6c <handleMotorsWithNoController+0x412>
    7e6a:	0e cf       	rjmp	.-484    	; 0x7c88 <handleMotorsWithNoController+0x22e>
    7e6c:	ef cf       	rjmp	.-34     	; 0x7e4c <handleMotorsWithNoController+0x3f2>
    7e6e:	e0 e0       	ldi	r30, 0x00	; 0
    7e70:	b8 2e       	mov	r11, r24
    7e72:	b9 1a       	sub	r11, r25
    7e74:	91 e0       	ldi	r25, 0x01	; 1
    7e76:	8b 15       	cp	r24, r11
    7e78:	08 f4       	brcc	.+2      	; 0x7e7c <handleMotorsWithNoController+0x422>
    7e7a:	ff ce       	rjmp	.-514    	; 0x7c7a <handleMotorsWithNoController+0x220>
    7e7c:	ef cf       	rjmp	.-34     	; 0x7e5c <handleMotorsWithNoController+0x402>
    7e7e:	e0 e0       	ldi	r30, 0x00	; 0
    7e80:	9e 2b       	or	r25, r30
    7e82:	82 2f       	mov	r24, r18
    7e84:	8f 1b       	sub	r24, r31
    7e86:	e1 e0       	ldi	r30, 0x01	; 1
    7e88:	28 17       	cp	r18, r24
    7e8a:	08 f4       	brcc	.+2      	; 0x7e8e <handleMotorsWithNoController+0x434>
    7e8c:	f0 ce       	rjmp	.-544    	; 0x7c6e <handleMotorsWithNoController+0x214>
    7e8e:	ef cf       	rjmp	.-34     	; 0x7e6e <handleMotorsWithNoController+0x414>
    7e90:	90 e0       	ldi	r25, 0x00	; 0
    7e92:	f8 2e       	mov	r15, r24
    7e94:	fe 1a       	sub	r15, r30
    7e96:	e1 e0       	ldi	r30, 0x01	; 1
    7e98:	8f 15       	cp	r24, r15
    7e9a:	08 f4       	brcc	.+2      	; 0x7e9e <handleMotorsWithNoController+0x444>
    7e9c:	e1 ce       	rjmp	.-574    	; 0x7c60 <handleMotorsWithNoController+0x206>
    7e9e:	ef cf       	rjmp	.-34     	; 0x7e7e <handleMotorsWithNoController+0x424>
    7ea0:	e0 e0       	ldi	r30, 0x00	; 0
    7ea2:	81 2f       	mov	r24, r17
    7ea4:	89 1b       	sub	r24, r25
    7ea6:	91 e0       	ldi	r25, 0x01	; 1
    7ea8:	18 17       	cp	r17, r24
    7eaa:	08 f4       	brcc	.+2      	; 0x7eae <handleMotorsWithNoController+0x454>
    7eac:	d3 ce       	rjmp	.-602    	; 0x7c54 <handleMotorsWithNoController+0x1fa>
    7eae:	f0 cf       	rjmp	.-32     	; 0x7e90 <handleMotorsWithNoController+0x436>
    7eb0:	33 23       	and	r19, r19
    7eb2:	09 f0       	breq	.+2      	; 0x7eb6 <handleMotorsWithNoController+0x45c>
    7eb4:	1c cf       	rjmp	.-456    	; 0x7cee <handleMotorsWithNoController+0x294>
    7eb6:	ee 23       	and	r30, r30
    7eb8:	09 f0       	breq	.+2      	; 0x7ebc <handleMotorsWithNoController+0x462>
    7eba:	19 cf       	rjmp	.-462    	; 0x7cee <handleMotorsWithNoController+0x294>
    7ebc:	bb 23       	and	r27, r27
    7ebe:	09 f0       	breq	.+2      	; 0x7ec2 <handleMotorsWithNoController+0x468>
    7ec0:	16 cf       	rjmp	.-468    	; 0x7cee <handleMotorsWithNoController+0x294>
    7ec2:	dd 20       	and	r13, r13
    7ec4:	09 f0       	breq	.+2      	; 0x7ec8 <handleMotorsWithNoController+0x46e>
    7ec6:	13 cf       	rjmp	.-474    	; 0x7cee <handleMotorsWithNoController+0x294>
    7ec8:	bb 20       	and	r11, r11
    7eca:	09 f0       	breq	.+2      	; 0x7ece <handleMotorsWithNoController+0x474>
    7ecc:	10 cf       	rjmp	.-480    	; 0x7cee <handleMotorsWithNoController+0x294>
    7ece:	41 e0       	ldi	r20, 0x01	; 1
    7ed0:	4f 15       	cp	r20, r15
    7ed2:	08 f4       	brcc	.+2      	; 0x7ed6 <handleMotorsWithNoController+0x47c>
    7ed4:	0c cf       	rjmp	.-488    	; 0x7cee <handleMotorsWithNoController+0x294>
    7ed6:	f4 16       	cp	r15, r20
    7ed8:	09 f0       	breq	.+2      	; 0x7edc <handleMotorsWithNoController+0x482>
    7eda:	cf cd       	rjmp	.-1122   	; 0x7a7a <handleMotorsWithNoController+0x20>
    7edc:	5f e8       	ldi	r21, 0x8F	; 143
    7ede:	59 15       	cp	r21, r9
    7ee0:	08 f4       	brcc	.+2      	; 0x7ee4 <handleMotorsWithNoController+0x48a>
    7ee2:	05 cf       	rjmp	.-502    	; 0x7cee <handleMotorsWithNoController+0x294>
    7ee4:	ca cd       	rjmp	.-1132   	; 0x7a7a <handleMotorsWithNoController+0x20>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    7ee6:	35 95       	asr	r19
    7ee8:	27 95       	ror	r18
    7eea:	35 95       	asr	r19
    7eec:	27 95       	ror	r18
    7eee:	35 95       	asr	r19
    7ef0:	27 95       	ror	r18
    7ef2:	b9 01       	movw	r22, r18
    7ef4:	88 27       	eor	r24, r24
    7ef6:	77 fd       	sbrc	r23, 7
    7ef8:	80 95       	com	r24
    7efa:	98 2f       	mov	r25, r24
    7efc:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    7f00:	9b 01       	movw	r18, r22
    7f02:	ac 01       	movw	r20, r24
    7f04:	60 91 cf 02 	lds	r22, 0x02CF
    7f08:	70 91 d0 02 	lds	r23, 0x02D0
    7f0c:	80 91 d1 02 	lds	r24, 0x02D1
    7f10:	90 91 d2 02 	lds	r25, 0x02D2
    7f14:	0e 94 0c 5a 	call	0xb418	; 0xb418 <__subsf3>
    7f18:	60 93 cf 02 	sts	0x02CF, r22
    7f1c:	70 93 d0 02 	sts	0x02D0, r23
    7f20:	80 93 d1 02 	sts	0x02D1, r24
    7f24:	90 93 d2 02 	sts	0x02D2, r25
    7f28:	2a ce       	rjmp	.-940    	; 0x7b7e <handleMotorsWithNoController+0x124>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    7f2a:	35 95       	asr	r19
    7f2c:	27 95       	ror	r18
    7f2e:	35 95       	asr	r19
    7f30:	27 95       	ror	r18
    7f32:	35 95       	asr	r19
    7f34:	27 95       	ror	r18
    7f36:	b9 01       	movw	r22, r18
    7f38:	88 27       	eor	r24, r24
    7f3a:	77 fd       	sbrc	r23, 7
    7f3c:	80 95       	com	r24
    7f3e:	98 2f       	mov	r25, r24
    7f40:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    7f44:	9b 01       	movw	r18, r22
    7f46:	ac 01       	movw	r20, r24
    7f48:	60 91 d3 02 	lds	r22, 0x02D3
    7f4c:	70 91 d4 02 	lds	r23, 0x02D4
    7f50:	80 91 d5 02 	lds	r24, 0x02D5
    7f54:	90 91 d6 02 	lds	r25, 0x02D6
    7f58:	0e 94 0c 5a 	call	0xb418	; 0xb418 <__subsf3>
    7f5c:	60 93 d3 02 	sts	0x02D3, r22
    7f60:	70 93 d4 02 	sts	0x02D4, r23
    7f64:	80 93 d5 02 	sts	0x02D5, r24
    7f68:	90 93 d6 02 	sts	0x02D6, r25
    7f6c:	cb cd       	rjmp	.-1130   	; 0x7b04 <handleMotorsWithNoController+0xaa>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    7f6e:	88 27       	eor	r24, r24
    7f70:	99 27       	eor	r25, r25
    7f72:	82 1b       	sub	r24, r18
    7f74:	93 0b       	sbc	r25, r19
    7f76:	90 93 9b 00 	sts	0x009B, r25
    7f7a:	80 93 9a 00 	sts	0x009A, r24
    7f7e:	32 ce       	rjmp	.-924    	; 0x7be4 <handleMotorsWithNoController+0x18a>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    7f80:	88 27       	eor	r24, r24
    7f82:	99 27       	eor	r25, r25
    7f84:	84 1b       	sub	r24, r20
    7f86:	95 0b       	sbc	r25, r21
    7f88:	90 93 ab 00 	sts	0x00AB, r25
    7f8c:	80 93 aa 00 	sts	0x00AA, r24
    7f90:	31 ce       	rjmp	.-926    	; 0x7bf4 <handleMotorsWithNoController+0x19a>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    7f92:	20 91 eb 02 	lds	r18, 0x02EB
    7f96:	30 91 ec 02 	lds	r19, 0x02EC
    7f9a:	20 93 ef 02 	sts	0x02EF, r18
    7f9e:	30 93 f0 02 	sts	0x02F0, r19
				pwm_intermediate_left_desired = pwm_left_desired;
    7fa2:	40 91 ed 02 	lds	r20, 0x02ED
    7fa6:	50 91 ee 02 	lds	r21, 0x02EE
    7faa:	40 93 f1 02 	sts	0x02F1, r20
    7fae:	50 93 f2 02 	sts	0x02F2, r21
    7fb2:	c9 01       	movw	r24, r18
    7fb4:	ec 01       	movw	r28, r24
    7fb6:	ca 01       	movw	r24, r20
    7fb8:	8c 01       	movw	r16, r24
    7fba:	67 cd       	rjmp	.-1330   	; 0x7a8a <handleMotorsWithNoController+0x30>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    7fbc:	c0 91 ef 02 	lds	r28, 0x02EF
    7fc0:	d0 91 f0 02 	lds	r29, 0x02F0
    7fc4:	c2 9f       	mul	r28, r18
    7fc6:	c0 01       	movw	r24, r0
    7fc8:	c3 9f       	mul	r28, r19
    7fca:	90 0d       	add	r25, r0
    7fcc:	d2 9f       	mul	r29, r18
    7fce:	90 0d       	add	r25, r0
    7fd0:	11 24       	eor	r1, r1
    7fd2:	97 fd       	sbrc	r25, 7
    7fd4:	ad ce       	rjmp	.-678    	; 0x7d30 <handleMotorsWithNoController+0x2d6>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    7fd6:	c2 17       	cp	r28, r18
    7fd8:	d3 07       	cpc	r29, r19
    7fda:	74 f5       	brge	.+92     	; 0x8038 <handleMotorsWithNoController+0x5de>
					pwm_intermediate_right_desired += speedStep;
    7fdc:	80 91 17 02 	lds	r24, 0x0217
    7fe0:	ae 01       	movw	r20, r28
    7fe2:	48 0f       	add	r20, r24
    7fe4:	51 1d       	adc	r21, r1
    7fe6:	ca 01       	movw	r24, r20
    7fe8:	50 93 f0 02 	sts	0x02F0, r21
    7fec:	40 93 ef 02 	sts	0x02EF, r20
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    7ff0:	24 17       	cp	r18, r20
    7ff2:	35 07       	cpc	r19, r21
    7ff4:	94 f5       	brge	.+100    	; 0x805a <handleMotorsWithNoController+0x600>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    7ff6:	30 93 f0 02 	sts	0x02F0, r19
    7ffa:	20 93 ef 02 	sts	0x02EF, r18
    7ffe:	e9 01       	movw	r28, r18
    8000:	9d ce       	rjmp	.-710    	; 0x7d3c <handleMotorsWithNoController+0x2e2>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    8002:	10 92 f2 02 	sts	0x02F2, r1
    8006:	10 92 f1 02 	sts	0x02F1, r1
    800a:	00 e0       	ldi	r16, 0x00	; 0
    800c:	10 e0       	ldi	r17, 0x00	; 0
    800e:	3d cd       	rjmp	.-1414   	; 0x7a8a <handleMotorsWithNoController+0x30>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    8010:	20 17       	cp	r18, r16
    8012:	31 07       	cpc	r19, r17
    8014:	0c f0       	brlt	.+2      	; 0x8018 <handleMotorsWithNoController+0x5be>
    8016:	39 cd       	rjmp	.-1422   	; 0x7a8a <handleMotorsWithNoController+0x30>
					pwm_intermediate_left_desired -= speedStep;
    8018:	80 91 17 02 	lds	r24, 0x0217
    801c:	a8 01       	movw	r20, r16
    801e:	48 1b       	sub	r20, r24
    8020:	51 09       	sbc	r21, r1
    8022:	ca 01       	movw	r24, r20
    8024:	50 93 f2 02 	sts	0x02F2, r21
    8028:	40 93 f1 02 	sts	0x02F1, r20
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    802c:	42 17       	cp	r20, r18
    802e:	53 07       	cpc	r21, r19
    8030:	0c f4       	brge	.+2      	; 0x8034 <handleMotorsWithNoController+0x5da>
    8032:	ab ce       	rjmp	.-682    	; 0x7d8a <handleMotorsWithNoController+0x330>
    8034:	8c 01       	movw	r16, r24
    8036:	29 cd       	rjmp	.-1454   	; 0x7a8a <handleMotorsWithNoController+0x30>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    8038:	2c 17       	cp	r18, r28
    803a:	3d 07       	cpc	r19, r29
    803c:	0c f0       	brlt	.+2      	; 0x8040 <handleMotorsWithNoController+0x5e6>
    803e:	7e ce       	rjmp	.-772    	; 0x7d3c <handleMotorsWithNoController+0x2e2>
					pwm_intermediate_right_desired -= speedStep;
    8040:	80 91 17 02 	lds	r24, 0x0217
    8044:	ae 01       	movw	r20, r28
    8046:	48 1b       	sub	r20, r24
    8048:	51 09       	sbc	r21, r1
    804a:	ca 01       	movw	r24, r20
    804c:	50 93 f0 02 	sts	0x02F0, r21
    8050:	40 93 ef 02 	sts	0x02EF, r20
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    8054:	42 17       	cp	r20, r18
    8056:	53 07       	cpc	r21, r19
    8058:	74 f2       	brlt	.-100    	; 0x7ff6 <handleMotorsWithNoController+0x59c>
    805a:	ec 01       	movw	r28, r24
    805c:	6f ce       	rjmp	.-802    	; 0x7d3c <handleMotorsWithNoController+0x2e2>

0000805e <initCalibration>:
	calibration[8][7] = 153;

    writeCalibrationToFlash();
}

void initCalibration() {
    805e:	2f 92       	push	r2
    8060:	3f 92       	push	r3
    8062:	4f 92       	push	r4
    8064:	5f 92       	push	r5
    8066:	6f 92       	push	r6
    8068:	7f 92       	push	r7
    806a:	8f 92       	push	r8
    806c:	9f 92       	push	r9
    806e:	af 92       	push	r10
    8070:	bf 92       	push	r11
    8072:	cf 92       	push	r12
    8074:	df 92       	push	r13
    8076:	ef 92       	push	r14
    8078:	ff 92       	push	r15
    807a:	0f 93       	push	r16
    807c:	1f 93       	push	r17
    807e:	cf 93       	push	r28
    8080:	df 93       	push	r29

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    8082:	8a e6       	ldi	r24, 0x6A	; 106
    8084:	9f e0       	ldi	r25, 0x0F	; 15
    8086:	0e 94 1e 5e 	call	0xbc3c	; 0xbc3c <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    808a:	85 55       	subi	r24, 0x55	; 85
    808c:	9a 4a       	sbci	r25, 0xAA	; 170
    808e:	09 f4       	brne	.+2      	; 0x8092 <initCalibration+0x34>
    8090:	9c c1       	rjmp	.+824    	; 0x83ca <initCalibration+0x36c>
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    8092:	74 e1       	ldi	r23, 0x14	; 20
    8094:	87 2e       	mov	r8, r23
    8096:	91 2c       	mov	r9, r1
    8098:	90 92 f1 07 	sts	0x07F1, r9
    809c:	80 92 f0 07 	sts	0x07F0, r8
    calibration[1][0] = 40;
    80a0:	88 e2       	ldi	r24, 0x28	; 40
    80a2:	90 e0       	ldi	r25, 0x00	; 0
    80a4:	90 93 01 08 	sts	0x0801, r25
    80a8:	80 93 00 08 	sts	0x0800, r24
    calibration[2][0] = 59;
    80ac:	8b e3       	ldi	r24, 0x3B	; 59
    80ae:	90 e0       	ldi	r25, 0x00	; 0
    80b0:	90 93 11 08 	sts	0x0811, r25
    80b4:	80 93 10 08 	sts	0x0810, r24
    calibration[3][0] = 79;
    80b8:	8f e4       	ldi	r24, 0x4F	; 79
    80ba:	90 e0       	ldi	r25, 0x00	; 0
    80bc:	90 93 21 08 	sts	0x0821, r25
    80c0:	80 93 20 08 	sts	0x0820, r24
    calibration[4][0] = 100;
    80c4:	84 e6       	ldi	r24, 0x64	; 100
    80c6:	90 e0       	ldi	r25, 0x00	; 0
    80c8:	90 93 31 08 	sts	0x0831, r25
    80cc:	80 93 30 08 	sts	0x0830, r24
    calibration[5][0] = 120;
    80d0:	c8 e7       	ldi	r28, 0x78	; 120
    80d2:	d0 e0       	ldi	r29, 0x00	; 0
    80d4:	d0 93 41 08 	sts	0x0841, r29
    80d8:	c0 93 40 08 	sts	0x0840, r28
    calibration[6][0] = 139;
    80dc:	6b e8       	ldi	r22, 0x8B	; 139
    80de:	e6 2e       	mov	r14, r22
    80e0:	f1 2c       	mov	r15, r1
    80e2:	f0 92 51 08 	sts	0x0851, r15
    80e6:	e0 92 50 08 	sts	0x0850, r14
    calibration[7][0] = 159;
    80ea:	8f e9       	ldi	r24, 0x9F	; 159
    80ec:	90 e0       	ldi	r25, 0x00	; 0
    80ee:	90 93 61 08 	sts	0x0861, r25
    80f2:	80 93 60 08 	sts	0x0860, r24
	calibration[8][0] = 180;
    80f6:	54 eb       	ldi	r21, 0xB4	; 180
    80f8:	a5 2e       	mov	r10, r21
    80fa:	b1 2c       	mov	r11, r1
    80fc:	b0 92 71 08 	sts	0x0871, r11
    8100:	a0 92 70 08 	sts	0x0870, r10
    calibration[0][1] = 19;    	// real speed measured in mm/s
    8104:	23 e1       	ldi	r18, 0x13	; 19
    8106:	30 e0       	ldi	r19, 0x00	; 0
    8108:	30 93 f3 07 	sts	0x07F3, r19
    810c:	20 93 f2 07 	sts	0x07F2, r18
    calibration[1][1] = 47;
    8110:	8f e2       	ldi	r24, 0x2F	; 47
    8112:	90 e0       	ldi	r25, 0x00	; 0
    8114:	90 93 03 08 	sts	0x0803, r25
    8118:	80 93 02 08 	sts	0x0802, r24
    calibration[2][1] = 72;
    811c:	88 e4       	ldi	r24, 0x48	; 72
    811e:	90 e0       	ldi	r25, 0x00	; 0
    8120:	90 93 13 08 	sts	0x0813, r25
    8124:	80 93 12 08 	sts	0x0812, r24
    calibration[3][1] = 91;
    8128:	8b e5       	ldi	r24, 0x5B	; 91
    812a:	90 e0       	ldi	r25, 0x00	; 0
    812c:	90 93 23 08 	sts	0x0823, r25
    8130:	80 93 22 08 	sts	0x0822, r24
    calibration[4][1] = 109;
    8134:	8d e6       	ldi	r24, 0x6D	; 109
    8136:	90 e0       	ldi	r25, 0x00	; 0
    8138:	90 93 33 08 	sts	0x0833, r25
    813c:	80 93 32 08 	sts	0x0832, r24
    calibration[5][1] = 125;
    8140:	4d e7       	ldi	r20, 0x7D	; 125
    8142:	c4 2e       	mov	r12, r20
    8144:	d1 2c       	mov	r13, r1
    8146:	d0 92 43 08 	sts	0x0843, r13
    814a:	c0 92 42 08 	sts	0x0842, r12
    calibration[6][1] = 143;
    814e:	8f e8       	ldi	r24, 0x8F	; 143
    8150:	90 e0       	ldi	r25, 0x00	; 0
    8152:	90 93 53 08 	sts	0x0853, r25
    8156:	80 93 52 08 	sts	0x0852, r24
    calibration[7][1] = 160;
    815a:	40 ea       	ldi	r20, 0xA0	; 160
    815c:	50 e0       	ldi	r21, 0x00	; 0
    815e:	50 93 63 08 	sts	0x0863, r21
    8162:	40 93 62 08 	sts	0x0862, r20
	calibration[8][1] = 174;
    8166:	8e ea       	ldi	r24, 0xAE	; 174
    8168:	90 e0       	ldi	r25, 0x00	; 0
    816a:	90 93 73 08 	sts	0x0873, r25
    816e:	80 93 72 08 	sts	0x0872, r24
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    8172:	30 93 f5 07 	sts	0x07F5, r19
    8176:	20 93 f4 07 	sts	0x07F4, r18
    calibration[1][2] = 39;
    817a:	67 e2       	ldi	r22, 0x27	; 39
    817c:	70 e0       	ldi	r23, 0x00	; 0
    817e:	70 93 05 08 	sts	0x0805, r23
    8182:	60 93 04 08 	sts	0x0804, r22
    calibration[2][2] = 60;
    8186:	0c e3       	ldi	r16, 0x3C	; 60
    8188:	10 e0       	ldi	r17, 0x00	; 0
    818a:	10 93 15 08 	sts	0x0815, r17
    818e:	00 93 14 08 	sts	0x0814, r16
    calibration[3][2] = 80;
    8192:	20 e5       	ldi	r18, 0x50	; 80
    8194:	22 2e       	mov	r2, r18
    8196:	31 2c       	mov	r3, r1
    8198:	30 92 25 08 	sts	0x0825, r3
    819c:	20 92 24 08 	sts	0x0824, r2
    calibration[4][2] = 99;
    81a0:	a3 e6       	ldi	r26, 0x63	; 99
    81a2:	b0 e0       	ldi	r27, 0x00	; 0
    81a4:	b0 93 35 08 	sts	0x0835, r27
    81a8:	a0 93 34 08 	sts	0x0834, r26
    calibration[5][2] = 119;
    81ac:	27 e7       	ldi	r18, 0x77	; 119
    81ae:	30 e0       	ldi	r19, 0x00	; 0
    81b0:	30 93 45 08 	sts	0x0845, r19
    81b4:	20 93 44 08 	sts	0x0844, r18
    calibration[6][2] = 140;
    81b8:	ec e8       	ldi	r30, 0x8C	; 140
    81ba:	f0 e0       	ldi	r31, 0x00	; 0
    81bc:	f0 93 55 08 	sts	0x0855, r31
    81c0:	e0 93 54 08 	sts	0x0854, r30
    calibration[7][2] = 160;
    81c4:	50 93 65 08 	sts	0x0865, r21
    81c8:	40 93 64 08 	sts	0x0864, r20
	calibration[8][2] = 180;
    81cc:	b0 92 75 08 	sts	0x0875, r11
    81d0:	a0 92 74 08 	sts	0x0874, r10
    calibration[0][3] = 23;    	// real speed measured in mm/s
    81d4:	87 e1       	ldi	r24, 0x17	; 23
    81d6:	90 e0       	ldi	r25, 0x00	; 0
    81d8:	90 93 f7 07 	sts	0x07F7, r25
    81dc:	80 93 f6 07 	sts	0x07F6, r24
    calibration[1][3] = 46;
    81e0:	9e e2       	ldi	r25, 0x2E	; 46
    81e2:	49 2e       	mov	r4, r25
    81e4:	51 2c       	mov	r5, r1
    81e6:	50 92 07 08 	sts	0x0807, r5
    81ea:	40 92 06 08 	sts	0x0806, r4
    calibration[2][3] = 64;
    81ee:	80 e4       	ldi	r24, 0x40	; 64
    81f0:	90 e0       	ldi	r25, 0x00	; 0
    81f2:	90 93 17 08 	sts	0x0817, r25
    81f6:	80 93 16 08 	sts	0x0816, r24
    calibration[3][3] = 81;
    81fa:	81 e5       	ldi	r24, 0x51	; 81
    81fc:	68 2e       	mov	r6, r24
    81fe:	71 2c       	mov	r7, r1
    8200:	70 92 27 08 	sts	0x0827, r7
    8204:	60 92 26 08 	sts	0x0826, r6
    calibration[4][3] = 97;
    8208:	81 e6       	ldi	r24, 0x61	; 97
    820a:	90 e0       	ldi	r25, 0x00	; 0
    820c:	90 93 37 08 	sts	0x0837, r25
    8210:	80 93 36 08 	sts	0x0836, r24
    calibration[5][3] = 112;
    8214:	80 e7       	ldi	r24, 0x70	; 112
    8216:	90 e0       	ldi	r25, 0x00	; 0
    8218:	90 93 47 08 	sts	0x0847, r25
    821c:	80 93 46 08 	sts	0x0846, r24
    calibration[6][3] = 125;
    8220:	d0 92 57 08 	sts	0x0857, r13
    8224:	c0 92 56 08 	sts	0x0856, r12
    calibration[7][3] = 139;
    8228:	f0 92 67 08 	sts	0x0867, r15
    822c:	e0 92 66 08 	sts	0x0866, r14
	calibration[8][3] = 152;
    8230:	88 e9       	ldi	r24, 0x98	; 152
    8232:	90 e0       	ldi	r25, 0x00	; 0
    8234:	90 93 77 08 	sts	0x0877, r25
    8238:	80 93 76 08 	sts	0x0876, r24
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    823c:	90 92 f9 07 	sts	0x07F9, r9
    8240:	80 92 f8 07 	sts	0x07F8, r8
    calibration[1][4] = 39;
    8244:	70 93 09 08 	sts	0x0809, r23
    8248:	60 93 08 08 	sts	0x0808, r22
    calibration[2][4] = 60;
    824c:	10 93 19 08 	sts	0x0819, r17
    8250:	00 93 18 08 	sts	0x0818, r16
    calibration[3][4] = 79;
    8254:	8f e4       	ldi	r24, 0x4F	; 79
    8256:	90 e0       	ldi	r25, 0x00	; 0
    8258:	90 93 29 08 	sts	0x0829, r25
    825c:	80 93 28 08 	sts	0x0828, r24
    calibration[4][4] = 99;
    8260:	b0 93 39 08 	sts	0x0839, r27
    8264:	a0 93 38 08 	sts	0x0838, r26
    calibration[5][4] = 120;
    8268:	d0 93 49 08 	sts	0x0849, r29
    826c:	c0 93 48 08 	sts	0x0848, r28
    calibration[6][4] = 140;
    8270:	f0 93 59 08 	sts	0x0859, r31
    8274:	e0 93 58 08 	sts	0x0858, r30
    calibration[7][4] = 160;
    8278:	50 93 69 08 	sts	0x0869, r21
    827c:	40 93 68 08 	sts	0x0868, r20
	calibration[8][4] = 179;
    8280:	83 eb       	ldi	r24, 0xB3	; 179
    8282:	90 e0       	ldi	r25, 0x00	; 0
    8284:	90 93 79 08 	sts	0x0879, r25
    8288:	80 93 78 08 	sts	0x0878, r24
    calibration[0][5] = 18;    	// real speed measured in mm/s
    828c:	82 e1       	ldi	r24, 0x12	; 18
    828e:	90 e0       	ldi	r25, 0x00	; 0
    8290:	90 93 fb 07 	sts	0x07FB, r25
    8294:	80 93 fa 07 	sts	0x07FA, r24
    calibration[1][5] = 45;
    8298:	8d e2       	ldi	r24, 0x2D	; 45
    829a:	90 e0       	ldi	r25, 0x00	; 0
    829c:	90 93 0b 08 	sts	0x080B, r25
    82a0:	80 93 0a 08 	sts	0x080A, r24
    calibration[2][5] = 68;
    82a4:	84 e4       	ldi	r24, 0x44	; 68
    82a6:	90 e0       	ldi	r25, 0x00	; 0
    82a8:	90 93 1b 08 	sts	0x081B, r25
    82ac:	80 93 1a 08 	sts	0x081A, r24
    calibration[3][5] = 87;
    82b0:	87 e5       	ldi	r24, 0x57	; 87
    82b2:	90 e0       	ldi	r25, 0x00	; 0
    82b4:	90 93 2b 08 	sts	0x082B, r25
    82b8:	80 93 2a 08 	sts	0x082A, r24
    calibration[4][5] = 105;
    82bc:	89 e6       	ldi	r24, 0x69	; 105
    82be:	90 e0       	ldi	r25, 0x00	; 0
    82c0:	90 93 3b 08 	sts	0x083B, r25
    82c4:	80 93 3a 08 	sts	0x083A, r24
    calibration[5][5] = 119;
    82c8:	30 93 4b 08 	sts	0x084B, r19
    82cc:	20 93 4a 08 	sts	0x084A, r18
    calibration[6][5] = 137;
    82d0:	89 e8       	ldi	r24, 0x89	; 137
    82d2:	90 e0       	ldi	r25, 0x00	; 0
    82d4:	90 93 5b 08 	sts	0x085B, r25
    82d8:	80 93 5a 08 	sts	0x085A, r24
    calibration[7][5] = 151;
    82dc:	87 e9       	ldi	r24, 0x97	; 151
    82de:	90 e0       	ldi	r25, 0x00	; 0
    82e0:	90 93 6b 08 	sts	0x086B, r25
    82e4:	80 93 6a 08 	sts	0x086A, r24
	calibration[8][5] = 168;
    82e8:	88 ea       	ldi	r24, 0xA8	; 168
    82ea:	90 e0       	ldi	r25, 0x00	; 0
    82ec:	90 93 7b 08 	sts	0x087B, r25
    82f0:	80 93 7a 08 	sts	0x087A, r24
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    82f4:	90 92 fd 07 	sts	0x07FD, r9
    82f8:	80 92 fc 07 	sts	0x07FC, r8
    calibration[1][6] = 39;
    82fc:	70 93 0d 08 	sts	0x080D, r23
    8300:	60 93 0c 08 	sts	0x080C, r22
    calibration[2][6] = 59;
    8304:	8b e3       	ldi	r24, 0x3B	; 59
    8306:	90 e0       	ldi	r25, 0x00	; 0
    8308:	90 93 1d 08 	sts	0x081D, r25
    830c:	80 93 1c 08 	sts	0x081C, r24
    calibration[3][6] = 80;
    8310:	30 92 2d 08 	sts	0x082D, r3
    8314:	20 92 2c 08 	sts	0x082C, r2
    calibration[4][6] = 100;
    8318:	84 e6       	ldi	r24, 0x64	; 100
    831a:	90 e0       	ldi	r25, 0x00	; 0
    831c:	90 93 3d 08 	sts	0x083D, r25
    8320:	80 93 3c 08 	sts	0x083C, r24
    calibration[5][6] = 119;
    8324:	30 93 4d 08 	sts	0x084D, r19
    8328:	20 93 4c 08 	sts	0x084C, r18
    calibration[6][6] = 139;
    832c:	f0 92 5d 08 	sts	0x085D, r15
    8330:	e0 92 5c 08 	sts	0x085C, r14
    calibration[7][6] = 160;
    8334:	50 93 6d 08 	sts	0x086D, r21
    8338:	40 93 6c 08 	sts	0x086C, r20
	calibration[8][6] = 180;
    833c:	b0 92 7d 08 	sts	0x087D, r11
    8340:	a0 92 7c 08 	sts	0x087C, r10
    calibration[0][7] = 22;    	// real speed measured in mm/s
    8344:	86 e1       	ldi	r24, 0x16	; 22
    8346:	90 e0       	ldi	r25, 0x00	; 0
    8348:	90 93 ff 07 	sts	0x07FF, r25
    834c:	80 93 fe 07 	sts	0x07FE, r24
    calibration[1][7] = 46;
    8350:	50 92 0f 08 	sts	0x080F, r5
    8354:	40 92 0e 08 	sts	0x080E, r4
    calibration[2][7] = 65;
    8358:	81 e4       	ldi	r24, 0x41	; 65
    835a:	90 e0       	ldi	r25, 0x00	; 0
    835c:	90 93 1f 08 	sts	0x081F, r25
    8360:	80 93 1e 08 	sts	0x081E, r24
    calibration[3][7] = 81;
    8364:	70 92 2f 08 	sts	0x082F, r7
    8368:	60 92 2e 08 	sts	0x082E, r6
    calibration[4][7] = 96;
    836c:	80 e6       	ldi	r24, 0x60	; 96
    836e:	90 e0       	ldi	r25, 0x00	; 0
    8370:	90 93 3f 08 	sts	0x083F, r25
    8374:	80 93 3e 08 	sts	0x083E, r24
    calibration[5][7] = 111;
    8378:	8f e6       	ldi	r24, 0x6F	; 111
    837a:	90 e0       	ldi	r25, 0x00	; 0
    837c:	90 93 4f 08 	sts	0x084F, r25
    8380:	80 93 4e 08 	sts	0x084E, r24
    calibration[6][7] = 125;
    8384:	d0 92 5f 08 	sts	0x085F, r13
    8388:	c0 92 5e 08 	sts	0x085E, r12
    calibration[7][7] = 139;
    838c:	f0 92 6f 08 	sts	0x086F, r15
    8390:	e0 92 6e 08 	sts	0x086E, r14
	calibration[8][7] = 153;
    8394:	89 e9       	ldi	r24, 0x99	; 153
    8396:	90 e0       	ldi	r25, 0x00	; 0
    8398:	90 93 7f 08 	sts	0x087F, r25
    839c:	80 93 7e 08 	sts	0x087E, r24

    writeCalibrationToFlash();
    83a0:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <writeCalibrationToFlash>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    }

}
    83a4:	df 91       	pop	r29
    83a6:	cf 91       	pop	r28
    83a8:	1f 91       	pop	r17
    83aa:	0f 91       	pop	r16
    83ac:	ff 90       	pop	r15
    83ae:	ef 90       	pop	r14
    83b0:	df 90       	pop	r13
    83b2:	cf 90       	pop	r12
    83b4:	bf 90       	pop	r11
    83b6:	af 90       	pop	r10
    83b8:	9f 90       	pop	r9
    83ba:	8f 90       	pop	r8
    83bc:	7f 90       	pop	r7
    83be:	6f 90       	pop	r6
    83c0:	5f 90       	pop	r5
    83c2:	4f 90       	pop	r4
    83c4:	3f 90       	pop	r3
    83c6:	2f 90       	pop	r2
    83c8:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    83ca:	0e 94 0f 4e 	call	0x9c1e	; 0x9c1e <readCalibrationFromFlash>
    83ce:	ea cf       	rjmp	.-44     	; 0x83a4 <initCalibration+0x346>

000083d0 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    83d0:	81 e0       	ldi	r24, 0x01	; 1
    83d2:	80 93 84 03 	sts	0x0384, r24
}
    83d6:	08 95       	ret

000083d8 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    83d8:	10 92 84 03 	sts	0x0384, r1
}
    83dc:	08 95       	ret

000083de <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    83de:	81 e0       	ldi	r24, 0x01	; 1
    83e0:	80 93 85 03 	sts	0x0385, r24
}
    83e4:	08 95       	ret

000083e6 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    83e6:	10 92 85 03 	sts	0x0385, r1
}
    83ea:	08 95       	ret

000083ec <obstacleAvoidance>:

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)

}

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    83ec:	2f 92       	push	r2
    83ee:	3f 92       	push	r3
    83f0:	4f 92       	push	r4
    83f2:	5f 92       	push	r5
    83f4:	6f 92       	push	r6
    83f6:	7f 92       	push	r7
    83f8:	8f 92       	push	r8
    83fa:	9f 92       	push	r9
    83fc:	af 92       	push	r10
    83fe:	bf 92       	push	r11
    8400:	cf 92       	push	r12
    8402:	df 92       	push	r13
    8404:	ef 92       	push	r14
    8406:	ff 92       	push	r15
    8408:	0f 93       	push	r16
    840a:	1f 93       	push	r17
    840c:	df 93       	push	r29
    840e:	cf 93       	push	r28
    8410:	00 d0       	rcall	.+0      	; 0x8412 <obstacleAvoidance+0x26>
    8412:	00 d0       	rcall	.+0      	; 0x8414 <obstacleAvoidance+0x28>
    8414:	cd b7       	in	r28, 0x3d	; 61
    8416:	de b7       	in	r29, 0x3e	; 62
    8418:	2c 01       	movw	r4, r24
    841a:	1b 01       	movw	r2, r22
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    841c:	fc 01       	movw	r30, r24
    841e:	01 90       	ld	r0, Z+
    8420:	f0 81       	ld	r31, Z
    8422:	e0 2d       	mov	r30, r0
    8424:	fc 83       	std	Y+4, r31	; 0x04
    8426:	eb 83       	std	Y+3, r30	; 0x03
    8428:	fb 01       	movw	r30, r22
    842a:	01 90       	ld	r0, Z+
    842c:	f0 81       	ld	r31, Z
    842e:	e0 2d       	mov	r30, r0
    8430:	fa 83       	std	Y+2, r31	; 0x02
    8432:	e9 83       	std	Y+1, r30	; 0x01

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    8434:	80 91 bf 02 	lds	r24, 0x02BF
    8438:	90 91 c0 02 	lds	r25, 0x02C0
    843c:	05 97       	sbiw	r24, 0x05	; 5
    843e:	24 f4       	brge	.+8      	; 0x8448 <obstacleAvoidance+0x5c>
			proximityResultLinear[i] = 0;
    8440:	10 92 c0 02 	sts	0x02C0, r1
    8444:	10 92 bf 02 	sts	0x02BF, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    8448:	80 91 c1 02 	lds	r24, 0x02C1
    844c:	90 91 c2 02 	lds	r25, 0x02C2
    8450:	05 97       	sbiw	r24, 0x05	; 5
    8452:	24 f4       	brge	.+8      	; 0x845c <obstacleAvoidance+0x70>
			proximityResultLinear[i] = 0;
    8454:	10 92 c2 02 	sts	0x02C2, r1
    8458:	10 92 c1 02 	sts	0x02C1, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    845c:	80 91 c3 02 	lds	r24, 0x02C3
    8460:	90 91 c4 02 	lds	r25, 0x02C4
    8464:	05 97       	sbiw	r24, 0x05	; 5
    8466:	24 f4       	brge	.+8      	; 0x8470 <obstacleAvoidance+0x84>
			proximityResultLinear[i] = 0;
    8468:	10 92 c4 02 	sts	0x02C4, r1
    846c:	10 92 c3 02 	sts	0x02C3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    8470:	80 91 c5 02 	lds	r24, 0x02C5
    8474:	90 91 c6 02 	lds	r25, 0x02C6
    8478:	05 97       	sbiw	r24, 0x05	; 5
    847a:	24 f4       	brge	.+8      	; 0x8484 <obstacleAvoidance+0x98>
			proximityResultLinear[i] = 0;
    847c:	10 92 c6 02 	sts	0x02C6, r1
    8480:	10 92 c5 02 	sts	0x02C5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    8484:	80 91 c7 02 	lds	r24, 0x02C7
    8488:	90 91 c8 02 	lds	r25, 0x02C8
    848c:	05 97       	sbiw	r24, 0x05	; 5
    848e:	24 f4       	brge	.+8      	; 0x8498 <obstacleAvoidance+0xac>
			proximityResultLinear[i] = 0;
    8490:	10 92 c8 02 	sts	0x02C8, r1
    8494:	10 92 c7 02 	sts	0x02C7, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    8498:	80 91 c9 02 	lds	r24, 0x02C9
    849c:	90 91 ca 02 	lds	r25, 0x02CA
    84a0:	05 97       	sbiw	r24, 0x05	; 5
    84a2:	24 f4       	brge	.+8      	; 0x84ac <obstacleAvoidance+0xc0>
			proximityResultLinear[i] = 0;
    84a4:	10 92 ca 02 	sts	0x02CA, r1
    84a8:	10 92 c9 02 	sts	0x02C9, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    84ac:	80 91 cb 02 	lds	r24, 0x02CB
    84b0:	90 91 cc 02 	lds	r25, 0x02CC
    84b4:	05 97       	sbiw	r24, 0x05	; 5
    84b6:	24 f4       	brge	.+8      	; 0x84c0 <obstacleAvoidance+0xd4>
			proximityResultLinear[i] = 0;
    84b8:	10 92 cc 02 	sts	0x02CC, r1
    84bc:	10 92 cb 02 	sts	0x02CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    84c0:	80 91 cd 02 	lds	r24, 0x02CD
    84c4:	90 91 ce 02 	lds	r25, 0x02CE
    84c8:	05 97       	sbiw	r24, 0x05	; 5
    84ca:	24 f4       	brge	.+8      	; 0x84d4 <obstacleAvoidance+0xe8>
			proximityResultLinear[i] = 0;
    84cc:	10 92 ce 02 	sts	0x02CE, r1
    84d0:	10 92 cd 02 	sts	0x02CD, r1
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    84d4:	a0 90 bf 02 	lds	r10, 0x02BF
    84d8:	b0 90 c0 02 	lds	r11, 0x02C0
    84dc:	b0 94       	com	r11
    84de:	a1 94       	neg	r10
    84e0:	b1 08       	sbc	r11, r1
    84e2:	b3 94       	inc	r11
    84e4:	80 90 c1 02 	lds	r8, 0x02C1
    84e8:	90 90 c2 02 	lds	r9, 0x02C2
    84ec:	95 94       	asr	r9
    84ee:	87 94       	ror	r8
    84f0:	c0 90 c5 02 	lds	r12, 0x02C5
    84f4:	d0 90 c6 02 	lds	r13, 0x02C6
    84f8:	d5 94       	asr	r13
    84fa:	c7 94       	ror	r12
    84fc:	20 91 c7 02 	lds	r18, 0x02C7
    8500:	30 91 c8 02 	lds	r19, 0x02C8
    8504:	3e 83       	std	Y+6, r19	; 0x06
    8506:	2d 83       	std	Y+5, r18	; 0x05
    8508:	00 91 c9 02 	lds	r16, 0x02C9
    850c:	10 91 ca 02 	lds	r17, 0x02CA
    8510:	15 95       	asr	r17
    8512:	07 95       	ror	r16
    8514:	e0 90 cd 02 	lds	r14, 0x02CD
    8518:	f0 90 ce 02 	lds	r15, 0x02CE
    851c:	f5 94       	asr	r15
    851e:	e7 94       	ror	r14
    8520:	0e 94 f1 5d 	call	0xbbe2	; 0xbbe2 <rand>
    8524:	ed 81       	ldd	r30, Y+5	; 0x05
    8526:	fe 81       	ldd	r31, Y+6	; 0x06
    8528:	7e 97       	sbiw	r30, 0x1e	; 30
    852a:	ea 0d       	add	r30, r10
    852c:	fb 1d       	adc	r31, r11
    852e:	ec 0d       	add	r30, r12
    8530:	fd 1d       	adc	r31, r13
    8532:	e0 0f       	add	r30, r16
    8534:	f1 1f       	adc	r31, r17
    8536:	e8 19       	sub	r30, r8
    8538:	f9 09       	sbc	r31, r9
    853a:	ee 19       	sub	r30, r14
    853c:	ff 09       	sbc	r31, r15
    853e:	6c e3       	ldi	r22, 0x3C	; 60
    8540:	70 e0       	ldi	r23, 0x00	; 0
    8542:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
    8546:	e8 0f       	add	r30, r24
    8548:	f9 1f       	adc	r31, r25
    854a:	fe 83       	std	Y+6, r31	; 0x06
    854c:	ed 83       	std	Y+5, r30	; 0x05
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    854e:	60 90 c1 02 	lds	r6, 0x02C1
    8552:	70 90 c2 02 	lds	r7, 0x02C2
    8556:	75 94       	asr	r7
    8558:	67 94       	ror	r6
    855a:	c0 90 c3 02 	lds	r12, 0x02C3
    855e:	d0 90 c4 02 	lds	r13, 0x02C4
    8562:	d5 94       	asr	r13
    8564:	c7 94       	ror	r12
    8566:	d5 94       	asr	r13
    8568:	c7 94       	ror	r12
    856a:	a0 90 c5 02 	lds	r10, 0x02C5
    856e:	b0 90 c6 02 	lds	r11, 0x02C6
    8572:	b5 94       	asr	r11
    8574:	a7 94       	ror	r10
    8576:	80 90 c9 02 	lds	r8, 0x02C9
    857a:	90 90 ca 02 	lds	r9, 0x02CA
    857e:	95 94       	asr	r9
    8580:	87 94       	ror	r8
    8582:	00 91 cb 02 	lds	r16, 0x02CB
    8586:	10 91 cc 02 	lds	r17, 0x02CC
    858a:	15 95       	asr	r17
    858c:	07 95       	ror	r16
    858e:	15 95       	asr	r17
    8590:	07 95       	ror	r16
    8592:	e0 90 cd 02 	lds	r14, 0x02CD
    8596:	f0 90 ce 02 	lds	r15, 0x02CE
    859a:	f5 94       	asr	r15
    859c:	e7 94       	ror	r14
    859e:	0e 94 f1 5d 	call	0xbbe2	; 0xbbe2 <rand>
    85a2:	93 01       	movw	r18, r6
    85a4:	2c 0d       	add	r18, r12
    85a6:	3d 1d       	adc	r19, r13
    85a8:	2e 51       	subi	r18, 0x1E	; 30
    85aa:	30 40       	sbci	r19, 0x00	; 0
    85ac:	2a 0d       	add	r18, r10
    85ae:	3b 1d       	adc	r19, r11
    85b0:	20 1b       	sub	r18, r16
    85b2:	31 0b       	sbc	r19, r17
    85b4:	28 19       	sub	r18, r8
    85b6:	39 09       	sbc	r19, r9
    85b8:	2e 19       	sub	r18, r14
    85ba:	3f 09       	sbc	r19, r15
    85bc:	6c e3       	ldi	r22, 0x3C	; 60
    85be:	70 e0       	ldi	r23, 0x00	; 0
    85c0:	0e 94 4c 5d 	call	0xba98	; 0xba98 <__divmodhi4>
    85c4:	28 0f       	add	r18, r24
    85c6:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    85c8:	8b 81       	ldd	r24, Y+3	; 0x03
    85ca:	9c 81       	ldd	r25, Y+4	; 0x04
    85cc:	97 fd       	sbrc	r25, 7
    85ce:	db c0       	rjmp	.+438    	; 0x8786 <obstacleAvoidance+0x39a>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    85d0:	7c 01       	movw	r14, r24
    85d2:	00 27       	eor	r16, r16
    85d4:	f7 fc       	sbrc	r15, 7
    85d6:	00 95       	com	r16
    85d8:	10 2f       	mov	r17, r16
    85da:	ed 81       	ldd	r30, Y+5	; 0x05
    85dc:	fe 81       	ldd	r31, Y+6	; 0x06
    85de:	3f 01       	movw	r6, r30
    85e0:	88 24       	eor	r8, r8
    85e2:	77 fc       	sbrc	r7, 7
    85e4:	80 94       	com	r8
    85e6:	98 2c       	mov	r9, r8
    85e8:	59 01       	movw	r10, r18
    85ea:	cc 24       	eor	r12, r12
    85ec:	b7 fc       	sbrc	r11, 7
    85ee:	c0 94       	com	r12
    85f0:	dc 2c       	mov	r13, r12
		*pwmLeft = (signed int)res;
    85f2:	c4 01       	movw	r24, r8
    85f4:	b3 01       	movw	r22, r6
    85f6:	6a 19       	sub	r22, r10
    85f8:	7b 09       	sbc	r23, r11
    85fa:	8c 09       	sbc	r24, r12
    85fc:	9d 09       	sbc	r25, r13
    85fe:	a8 01       	movw	r20, r16
    8600:	97 01       	movw	r18, r14
    8602:	0e 94 19 5d 	call	0xba32	; 0xba32 <__mulsi3>
    8606:	56 e0       	ldi	r21, 0x06	; 6
    8608:	95 95       	asr	r25
    860a:	87 95       	ror	r24
    860c:	77 95       	ror	r23
    860e:	67 95       	ror	r22
    8610:	5a 95       	dec	r21
    8612:	d1 f7       	brne	.-12     	; 0x8608 <obstacleAvoidance+0x21c>
    8614:	e6 0e       	add	r14, r22
    8616:	f7 1e       	adc	r15, r23
    8618:	08 1f       	adc	r16, r24
    861a:	19 1f       	adc	r17, r25
    861c:	f2 01       	movw	r30, r4
    861e:	f1 82       	std	Z+1, r15	; 0x01
    8620:	e0 82       	st	Z, r14
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    8622:	29 81       	ldd	r18, Y+1	; 0x01
    8624:	3a 81       	ldd	r19, Y+2	; 0x02
    8626:	37 fd       	sbrc	r19, 7
    8628:	8f c0       	rjmp	.+286    	; 0x8748 <obstacleAvoidance+0x35c>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    862a:	79 01       	movw	r14, r18
    862c:	00 27       	eor	r16, r16
    862e:	f7 fc       	sbrc	r15, 7
    8630:	00 95       	com	r16
    8632:	10 2f       	mov	r17, r16
		*pwmRight = (signed int)res;
    8634:	a6 0c       	add	r10, r6
    8636:	b7 1c       	adc	r11, r7
    8638:	c8 1c       	adc	r12, r8
    863a:	d9 1c       	adc	r13, r9
    863c:	c6 01       	movw	r24, r12
    863e:	b5 01       	movw	r22, r10
    8640:	a8 01       	movw	r20, r16
    8642:	97 01       	movw	r18, r14
    8644:	0e 94 19 5d 	call	0xba32	; 0xba32 <__mulsi3>
    8648:	36 e0       	ldi	r19, 0x06	; 6
    864a:	95 95       	asr	r25
    864c:	87 95       	ror	r24
    864e:	77 95       	ror	r23
    8650:	67 95       	ror	r22
    8652:	3a 95       	dec	r19
    8654:	d1 f7       	brne	.-12     	; 0x864a <obstacleAvoidance+0x25e>
    8656:	6e 0d       	add	r22, r14
    8658:	7f 1d       	adc	r23, r15
    865a:	80 1f       	adc	r24, r16
    865c:	91 1f       	adc	r25, r17
    865e:	ab 01       	movw	r20, r22
    8660:	f1 01       	movw	r30, r2
    8662:	71 83       	std	Z+1, r23	; 0x01
    8664:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    8666:	80 91 60 03 	lds	r24, 0x0360
    866a:	8a 30       	cpi	r24, 0x0A	; 10
    866c:	09 f4       	brne	.+2      	; 0x8670 <obstacleAvoidance+0x284>
    866e:	48 c0       	rjmp	.+144    	; 0x8700 <obstacleAvoidance+0x314>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    8670:	f2 e0       	ldi	r31, 0x02	; 2
    8672:	40 30       	cpi	r20, 0x00	; 0
    8674:	5f 07       	cpc	r21, r31
    8676:	3c f0       	brlt	.+14     	; 0x8686 <obstacleAvoidance+0x29a>
    8678:	8f ef       	ldi	r24, 0xFF	; 255
    867a:	91 e0       	ldi	r25, 0x01	; 1
    867c:	f1 01       	movw	r30, r2
    867e:	91 83       	std	Z+1, r25	; 0x01
    8680:	80 83       	st	Z, r24
    8682:	4f ef       	ldi	r20, 0xFF	; 255
    8684:	51 e0       	ldi	r21, 0x01	; 1
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    8686:	f2 01       	movw	r30, r4
    8688:	20 81       	ld	r18, Z
    868a:	31 81       	ldd	r19, Z+1	; 0x01
    868c:	f2 e0       	ldi	r31, 0x02	; 2
    868e:	20 30       	cpi	r18, 0x00	; 0
    8690:	3f 07       	cpc	r19, r31
    8692:	54 f0       	brlt	.+20     	; 0x86a8 <obstacleAvoidance+0x2bc>
    8694:	8f ef       	ldi	r24, 0xFF	; 255
    8696:	91 e0       	ldi	r25, 0x01	; 1
    8698:	f2 01       	movw	r30, r4
    869a:	91 83       	std	Z+1, r25	; 0x01
    869c:	80 83       	st	Z, r24
    869e:	f1 01       	movw	r30, r2
    86a0:	40 81       	ld	r20, Z
    86a2:	51 81       	ldd	r21, Z+1	; 0x01
    86a4:	2f ef       	ldi	r18, 0xFF	; 255
    86a6:	31 e0       	ldi	r19, 0x01	; 1
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    86a8:	41 50       	subi	r20, 0x01	; 1
    86aa:	5e 4f       	sbci	r21, 0xFE	; 254
    86ac:	44 f4       	brge	.+16     	; 0x86be <obstacleAvoidance+0x2d2>
    86ae:	81 e0       	ldi	r24, 0x01	; 1
    86b0:	9e ef       	ldi	r25, 0xFE	; 254
    86b2:	f1 01       	movw	r30, r2
    86b4:	91 83       	std	Z+1, r25	; 0x01
    86b6:	80 83       	st	Z, r24
    86b8:	f2 01       	movw	r30, r4
    86ba:	20 81       	ld	r18, Z
    86bc:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    86be:	21 50       	subi	r18, 0x01	; 1
    86c0:	3e 4f       	sbci	r19, 0xFE	; 254
    86c2:	2c f4       	brge	.+10     	; 0x86ce <obstacleAvoidance+0x2e2>
    86c4:	81 e0       	ldi	r24, 0x01	; 1
    86c6:	9e ef       	ldi	r25, 0xFE	; 254
    86c8:	f2 01       	movw	r30, r4
    86ca:	91 83       	std	Z+1, r25	; 0x01
    86cc:	80 83       	st	Z, r24

}
    86ce:	26 96       	adiw	r28, 0x06	; 6
    86d0:	0f b6       	in	r0, 0x3f	; 63
    86d2:	f8 94       	cli
    86d4:	de bf       	out	0x3e, r29	; 62
    86d6:	0f be       	out	0x3f, r0	; 63
    86d8:	cd bf       	out	0x3d, r28	; 61
    86da:	cf 91       	pop	r28
    86dc:	df 91       	pop	r29
    86de:	1f 91       	pop	r17
    86e0:	0f 91       	pop	r16
    86e2:	ff 90       	pop	r15
    86e4:	ef 90       	pop	r14
    86e6:	df 90       	pop	r13
    86e8:	cf 90       	pop	r12
    86ea:	bf 90       	pop	r11
    86ec:	af 90       	pop	r10
    86ee:	9f 90       	pop	r9
    86f0:	8f 90       	pop	r8
    86f2:	7f 90       	pop	r7
    86f4:	6f 90       	pop	r6
    86f6:	5f 90       	pop	r5
    86f8:	4f 90       	pop	r4
    86fa:	3f 90       	pop	r3
    86fc:	2f 90       	pop	r2
    86fe:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    8700:	2b 81       	ldd	r18, Y+3	; 0x03
    8702:	3c 81       	ldd	r19, Y+4	; 0x04
    8704:	23 2b       	or	r18, r19
    8706:	e1 f0       	breq	.+56     	; 0x8740 <obstacleAvoidance+0x354>
    8708:	29 81       	ldd	r18, Y+1	; 0x01
    870a:	3a 81       	ldd	r19, Y+2	; 0x02
    870c:	23 2b       	or	r18, r19
    870e:	c1 f0       	breq	.+48     	; 0x8740 <obstacleAvoidance+0x354>
			if(currentAngle<270 && currentAngle>90) {
    8710:	80 91 34 03 	lds	r24, 0x0334
    8714:	90 91 35 03 	lds	r25, 0x0335
    8718:	8b 55       	subi	r24, 0x5B	; 91
    871a:	90 40       	sbci	r25, 0x00	; 0
    871c:	83 3b       	cpi	r24, 0xB3	; 179
    871e:	91 05       	cpc	r25, r1
    8720:	08 f0       	brcs	.+2      	; 0x8724 <obstacleAvoidance+0x338>
    8722:	5b c0       	rjmp	.+182    	; 0x87da <obstacleAvoidance+0x3ee>
				*pwmLeft += 10;
    8724:	f2 01       	movw	r30, r4
    8726:	80 81       	ld	r24, Z
    8728:	91 81       	ldd	r25, Z+1	; 0x01
    872a:	0a 96       	adiw	r24, 0x0a	; 10
    872c:	91 83       	std	Z+1, r25	; 0x01
    872e:	80 83       	st	Z, r24
				*pwmRight -= 10;
    8730:	f1 01       	movw	r30, r2
    8732:	40 81       	ld	r20, Z
    8734:	51 81       	ldd	r21, Z+1	; 0x01
    8736:	4a 50       	subi	r20, 0x0A	; 10
    8738:	50 40       	sbci	r21, 0x00	; 0
    873a:	51 83       	std	Z+1, r21	; 0x01
    873c:	40 83       	st	Z, r20
    873e:	98 cf       	rjmp	.-208    	; 0x8670 <obstacleAvoidance+0x284>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    8740:	f1 01       	movw	r30, r2
    8742:	40 81       	ld	r20, Z
    8744:	51 81       	ldd	r21, Z+1	; 0x01
    8746:	94 cf       	rjmp	.-216    	; 0x8670 <obstacleAvoidance+0x284>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    8748:	79 01       	movw	r14, r18
    874a:	00 27       	eor	r16, r16
    874c:	f7 fc       	sbrc	r15, 7
    874e:	00 95       	com	r16
    8750:	10 2f       	mov	r17, r16
		*pwmRight = (signed int)res;
    8752:	6a 18       	sub	r6, r10
    8754:	7b 08       	sbc	r7, r11
    8756:	8c 08       	sbc	r8, r12
    8758:	9d 08       	sbc	r9, r13
    875a:	c4 01       	movw	r24, r8
    875c:	b3 01       	movw	r22, r6
    875e:	a8 01       	movw	r20, r16
    8760:	97 01       	movw	r18, r14
    8762:	0e 94 19 5d 	call	0xba32	; 0xba32 <__mulsi3>
    8766:	26 e0       	ldi	r18, 0x06	; 6
    8768:	95 95       	asr	r25
    876a:	87 95       	ror	r24
    876c:	77 95       	ror	r23
    876e:	67 95       	ror	r22
    8770:	2a 95       	dec	r18
    8772:	d1 f7       	brne	.-12     	; 0x8768 <obstacleAvoidance+0x37c>
    8774:	e6 1a       	sub	r14, r22
    8776:	f7 0a       	sbc	r15, r23
    8778:	08 0b       	sbc	r16, r24
    877a:	19 0b       	sbc	r17, r25
    877c:	a7 01       	movw	r20, r14
    877e:	f1 01       	movw	r30, r2
    8780:	f1 82       	std	Z+1, r15	; 0x01
    8782:	e0 82       	st	Z, r14
    8784:	70 cf       	rjmp	.-288    	; 0x8666 <obstacleAvoidance+0x27a>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    8786:	7c 01       	movw	r14, r24
    8788:	00 27       	eor	r16, r16
    878a:	f7 fc       	sbrc	r15, 7
    878c:	00 95       	com	r16
    878e:	10 2f       	mov	r17, r16
    8790:	ed 81       	ldd	r30, Y+5	; 0x05
    8792:	fe 81       	ldd	r31, Y+6	; 0x06
    8794:	3f 01       	movw	r6, r30
    8796:	88 24       	eor	r8, r8
    8798:	77 fc       	sbrc	r7, 7
    879a:	80 94       	com	r8
    879c:	98 2c       	mov	r9, r8
    879e:	59 01       	movw	r10, r18
    87a0:	cc 24       	eor	r12, r12
    87a2:	b7 fc       	sbrc	r11, 7
    87a4:	c0 94       	com	r12
    87a6:	dc 2c       	mov	r13, r12
		*pwmLeft = (signed int)res;
    87a8:	c6 01       	movw	r24, r12
    87aa:	b5 01       	movw	r22, r10
    87ac:	66 0d       	add	r22, r6
    87ae:	77 1d       	adc	r23, r7
    87b0:	88 1d       	adc	r24, r8
    87b2:	99 1d       	adc	r25, r9
    87b4:	a8 01       	movw	r20, r16
    87b6:	97 01       	movw	r18, r14
    87b8:	0e 94 19 5d 	call	0xba32	; 0xba32 <__mulsi3>
    87bc:	46 e0       	ldi	r20, 0x06	; 6
    87be:	95 95       	asr	r25
    87c0:	87 95       	ror	r24
    87c2:	77 95       	ror	r23
    87c4:	67 95       	ror	r22
    87c6:	4a 95       	dec	r20
    87c8:	d1 f7       	brne	.-12     	; 0x87be <obstacleAvoidance+0x3d2>
    87ca:	e6 1a       	sub	r14, r22
    87cc:	f7 0a       	sbc	r15, r23
    87ce:	08 0b       	sbc	r16, r24
    87d0:	19 0b       	sbc	r17, r25
    87d2:	f2 01       	movw	r30, r4
    87d4:	f1 82       	std	Z+1, r15	; 0x01
    87d6:	e0 82       	st	Z, r14
    87d8:	24 cf       	rjmp	.-440    	; 0x8622 <obstacleAvoidance+0x236>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    87da:	f2 01       	movw	r30, r4
    87dc:	80 81       	ld	r24, Z
    87de:	91 81       	ldd	r25, Z+1	; 0x01
    87e0:	0a 97       	sbiw	r24, 0x0a	; 10
    87e2:	91 83       	std	Z+1, r25	; 0x01
    87e4:	80 83       	st	Z, r24
				*pwmRight += 10;
    87e6:	f1 01       	movw	r30, r2
    87e8:	40 81       	ld	r20, Z
    87ea:	51 81       	ldd	r21, Z+1	; 0x01
    87ec:	46 5f       	subi	r20, 0xF6	; 246
    87ee:	5f 4f       	sbci	r21, 0xFF	; 255
    87f0:	51 83       	std	Z+1, r21	; 0x01
    87f2:	40 83       	st	Z, r20
    87f4:	3d cf       	rjmp	.-390    	; 0x8670 <obstacleAvoidance+0x284>

000087f6 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    87f6:	80 91 94 00 	lds	r24, 0x0094
    87fa:	90 91 95 00 	lds	r25, 0x0095
    87fe:	0c 94 f4 5d 	jmp	0xbbe8	; 0xbbe8 <srand>

00008802 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    8802:	e0 e8       	ldi	r30, 0x80	; 128
    8804:	f0 e0       	ldi	r31, 0x00	; 0
    8806:	10 82       	st	Z, r1
	TCCR1B = 0;
    8808:	a1 e8       	ldi	r26, 0x81	; 129
    880a:	b0 e0       	ldi	r27, 0x00	; 0
    880c:	1c 92       	st	X, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    880e:	80 81       	ld	r24, Z
    8810:	89 6a       	ori	r24, 0xA9	; 169
    8812:	80 83       	st	Z, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    8814:	8c 91       	ld	r24, X
    8816:	89 60       	ori	r24, 0x09	; 9
    8818:	8c 93       	st	X, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    881a:	80 91 0c 02 	lds	r24, 0x020C
    881e:	90 e0       	ldi	r25, 0x00	; 0
    8820:	90 93 89 00 	sts	0x0089, r25
    8824:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    8828:	80 91 0d 02 	lds	r24, 0x020D
    882c:	90 e0       	ldi	r25, 0x00	; 0
    882e:	90 93 8b 00 	sts	0x008B, r25
    8832:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    8836:	80 91 0e 02 	lds	r24, 0x020E
    883a:	90 e0       	ldi	r25, 0x00	; 0
    883c:	90 93 8d 00 	sts	0x008D, r25
    8840:	80 93 8c 00 	sts	0x008C, r24

}
    8844:	08 95       	ret

00008846 <updateRedLed>:
									// the pin is configured accordingly (low state).
	}

}

void updateRedLed(unsigned char value) {
    8846:	98 2f       	mov	r25, r24

	if(value == 0) {
    8848:	88 23       	and	r24, r24
    884a:	61 f0       	breq	.+24     	; 0x8864 <updateRedLed+0x1e>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    884c:	80 91 80 00 	lds	r24, 0x0080
    8850:	80 68       	ori	r24, 0x80	; 128
    8852:	80 93 80 00 	sts	0x0080, r24
		OCR1A = value;
    8856:	89 2f       	mov	r24, r25
    8858:	90 e0       	ldi	r25, 0x00	; 0
    885a:	90 93 89 00 	sts	0x0089, r25
    885e:	80 93 88 00 	sts	0x0088, r24
    8862:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    8864:	80 91 80 00 	lds	r24, 0x0080
    8868:	8f 77       	andi	r24, 0x7F	; 127
    886a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    886e:	2d 98       	cbi	0x05, 5	; 5
    8870:	08 95       	ret

00008872 <updateGreenLed>:
		OCR1A = value;
	}

}

void updateGreenLed(unsigned char value) {
    8872:	98 2f       	mov	r25, r24

	if(value == 0) {
    8874:	88 23       	and	r24, r24
    8876:	61 f0       	breq	.+24     	; 0x8890 <updateGreenLed+0x1e>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    8878:	80 91 80 00 	lds	r24, 0x0080
    887c:	80 62       	ori	r24, 0x20	; 32
    887e:	80 93 80 00 	sts	0x0080, r24
		OCR1B = value;
    8882:	89 2f       	mov	r24, r25
    8884:	90 e0       	ldi	r25, 0x00	; 0
    8886:	90 93 8b 00 	sts	0x008B, r25
    888a:	80 93 8a 00 	sts	0x008A, r24
    888e:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    8890:	80 91 80 00 	lds	r24, 0x0080
    8894:	8f 7d       	andi	r24, 0xDF	; 223
    8896:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    889a:	2e 98       	cbi	0x05, 6	; 5
    889c:	08 95       	ret

0000889e <updateBlueLed>:
		OCR1B = value;
	}

}

void updateBlueLed(unsigned char value) {
    889e:	98 2f       	mov	r25, r24

	if(value == 0) {
    88a0:	88 23       	and	r24, r24
    88a2:	61 f0       	breq	.+24     	; 0x88bc <updateBlueLed+0x1e>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    88a4:	80 91 80 00 	lds	r24, 0x0080
    88a8:	88 60       	ori	r24, 0x08	; 8
    88aa:	80 93 80 00 	sts	0x0080, r24
		OCR1C = value;
    88ae:	89 2f       	mov	r24, r25
    88b0:	90 e0       	ldi	r25, 0x00	; 0
    88b2:	90 93 8d 00 	sts	0x008D, r25
    88b6:	80 93 8c 00 	sts	0x008C, r24
    88ba:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    88bc:	80 91 80 00 	lds	r24, 0x0080
    88c0:	87 7f       	andi	r24, 0xF7	; 247
    88c2:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    88c6:	2f 98       	cbi	0x05, 7	; 5
    88c8:	08 95       	ret

000088ca <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    88ca:	83 30       	cpi	r24, 0x03	; 3
    88cc:	09 f4       	brne	.+2      	; 0x88d0 <setGreenLed+0x6>
    88ce:	5a c0       	rjmp	.+180    	; 0x8984 <setGreenLed+0xba>
    88d0:	84 30       	cpi	r24, 0x04	; 4
    88d2:	80 f0       	brcs	.+32     	; 0x88f4 <setGreenLed+0x2a>
    88d4:	85 30       	cpi	r24, 0x05	; 5
    88d6:	09 f4       	brne	.+2      	; 0x88da <setGreenLed+0x10>
    88d8:	41 c0       	rjmp	.+130    	; 0x895c <setGreenLed+0x92>
    88da:	85 30       	cpi	r24, 0x05	; 5
    88dc:	d0 f4       	brcc	.+52     	; 0x8912 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    88de:	66 23       	and	r22, r22
    88e0:	09 f4       	brne	.+2      	; 0x88e4 <setGreenLed+0x1a>
    88e2:	68 c0       	rjmp	.+208    	; 0x89b4 <setGreenLed+0xea>
    88e4:	80 91 0b 01 	lds	r24, 0x010B
    88e8:	8f 7e       	andi	r24, 0xEF	; 239
    88ea:	80 93 0b 01 	sts	0x010B, r24
    88ee:	80 91 0b 01 	lds	r24, 0x010B
    88f2:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    88f4:	81 30       	cpi	r24, 0x01	; 1
    88f6:	e1 f1       	breq	.+120    	; 0x8970 <setGreenLed+0xa6>
    88f8:	82 30       	cpi	r24, 0x02	; 2
    88fa:	80 f0       	brcs	.+32     	; 0x891c <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    88fc:	66 23       	and	r22, r22
    88fe:	09 f4       	brne	.+2      	; 0x8902 <setGreenLed+0x38>
    8900:	46 c0       	rjmp	.+140    	; 0x898e <setGreenLed+0xc4>
    8902:	80 91 0b 01 	lds	r24, 0x010B
    8906:	8b 7f       	andi	r24, 0xFB	; 251
    8908:	80 93 0b 01 	sts	0x010B, r24
    890c:	80 91 0b 01 	lds	r24, 0x010B
    8910:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    8912:	86 30       	cpi	r24, 0x06	; 6
    8914:	c9 f0       	breq	.+50     	; 0x8948 <setGreenLed+0x7e>
    8916:	87 30       	cpi	r24, 0x07	; 7
    8918:	61 f0       	breq	.+24     	; 0x8932 <setGreenLed+0x68>
    891a:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    891c:	66 23       	and	r22, r22
    891e:	09 f4       	brne	.+2      	; 0x8922 <setGreenLed+0x58>
    8920:	51 c0       	rjmp	.+162    	; 0x89c4 <setGreenLed+0xfa>
    8922:	80 91 0b 01 	lds	r24, 0x010B
    8926:	8e 7f       	andi	r24, 0xFE	; 254
    8928:	80 93 0b 01 	sts	0x010B, r24
    892c:	80 91 0b 01 	lds	r24, 0x010B
    8930:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    8932:	66 23       	and	r22, r22
    8934:	09 f0       	breq	.+2      	; 0x8938 <setGreenLed+0x6e>
    8936:	5e c0       	rjmp	.+188    	; 0x89f4 <setGreenLed+0x12a>
    8938:	80 91 0b 01 	lds	r24, 0x010B
    893c:	80 68       	ori	r24, 0x80	; 128
    893e:	80 93 0b 01 	sts	0x010B, r24
    8942:	80 91 0b 01 	lds	r24, 0x010B
    8946:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    8948:	66 23       	and	r22, r22
    894a:	49 f1       	breq	.+82     	; 0x899e <setGreenLed+0xd4>
    894c:	80 91 0b 01 	lds	r24, 0x010B
    8950:	8f 7b       	andi	r24, 0xBF	; 191
    8952:	80 93 0b 01 	sts	0x010B, r24
    8956:	80 91 0b 01 	lds	r24, 0x010B
    895a:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    895c:	66 23       	and	r22, r22
    895e:	d1 f1       	breq	.+116    	; 0x89d4 <setGreenLed+0x10a>
    8960:	80 91 0b 01 	lds	r24, 0x010B
    8964:	8f 7d       	andi	r24, 0xDF	; 223
    8966:	80 93 0b 01 	sts	0x010B, r24
    896a:	80 91 0b 01 	lds	r24, 0x010B
    896e:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    8970:	66 23       	and	r22, r22
    8972:	c1 f1       	breq	.+112    	; 0x89e4 <setGreenLed+0x11a>
    8974:	80 91 0b 01 	lds	r24, 0x010B
    8978:	8d 7f       	andi	r24, 0xFD	; 253
    897a:	80 93 0b 01 	sts	0x010B, r24
    897e:	80 91 0b 01 	lds	r24, 0x010B
    8982:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    8984:	66 23       	and	r22, r22
    8986:	99 f0       	breq	.+38     	; 0x89ae <setGreenLed+0xe4>
    8988:	a3 98       	cbi	0x14, 3	; 20
    898a:	84 b3       	in	r24, 0x14	; 20
    898c:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    898e:	80 91 0b 01 	lds	r24, 0x010B
    8992:	84 60       	ori	r24, 0x04	; 4
    8994:	80 93 0b 01 	sts	0x010B, r24
    8998:	80 91 0b 01 	lds	r24, 0x010B
    899c:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    899e:	80 91 0b 01 	lds	r24, 0x010B
    89a2:	80 64       	ori	r24, 0x40	; 64
    89a4:	80 93 0b 01 	sts	0x010B, r24
    89a8:	80 91 0b 01 	lds	r24, 0x010B
    89ac:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    89ae:	a3 9a       	sbi	0x14, 3	; 20
    89b0:	84 b3       	in	r24, 0x14	; 20
    89b2:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    89b4:	80 91 0b 01 	lds	r24, 0x010B
    89b8:	80 61       	ori	r24, 0x10	; 16
    89ba:	80 93 0b 01 	sts	0x010B, r24
    89be:	80 91 0b 01 	lds	r24, 0x010B
    89c2:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    89c4:	80 91 0b 01 	lds	r24, 0x010B
    89c8:	81 60       	ori	r24, 0x01	; 1
    89ca:	80 93 0b 01 	sts	0x010B, r24
    89ce:	80 91 0b 01 	lds	r24, 0x010B
    89d2:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    89d4:	80 91 0b 01 	lds	r24, 0x010B
    89d8:	80 62       	ori	r24, 0x20	; 32
    89da:	80 93 0b 01 	sts	0x010B, r24
    89de:	80 91 0b 01 	lds	r24, 0x010B
    89e2:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    89e4:	80 91 0b 01 	lds	r24, 0x010B
    89e8:	82 60       	ori	r24, 0x02	; 2
    89ea:	80 93 0b 01 	sts	0x010B, r24
    89ee:	80 91 0b 01 	lds	r24, 0x010B
    89f2:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    89f4:	80 91 0b 01 	lds	r24, 0x010B
    89f8:	8f 77       	andi	r24, 0x7F	; 127
    89fa:	80 93 0b 01 	sts	0x010B, r24
    89fe:	80 91 0b 01 	lds	r24, 0x010B
    8a02:	08 95       	ret

00008a04 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    8a04:	eb e0       	ldi	r30, 0x0B	; 11
    8a06:	f1 e0       	ldi	r31, 0x01	; 1
    8a08:	80 81       	ld	r24, Z
    8a0a:	81 60       	ori	r24, 0x01	; 1
    8a0c:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    8a0e:	80 81       	ld	r24, Z
    8a10:	82 60       	ori	r24, 0x02	; 2
    8a12:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    8a14:	80 81       	ld	r24, Z
    8a16:	84 60       	ori	r24, 0x04	; 4
    8a18:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    8a1a:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    8a1c:	80 81       	ld	r24, Z
    8a1e:	80 61       	ori	r24, 0x10	; 16
    8a20:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    8a22:	80 81       	ld	r24, Z
    8a24:	80 62       	ori	r24, 0x20	; 32
    8a26:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    8a28:	80 81       	ld	r24, Z
    8a2a:	80 64       	ori	r24, 0x40	; 64
    8a2c:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    8a2e:	80 81       	ld	r24, Z
    8a30:	80 68       	ori	r24, 0x80	; 128
    8a32:	80 83       	st	Z, r24

}
    8a34:	08 95       	ret

00008a36 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    8a36:	eb e0       	ldi	r30, 0x0B	; 11
    8a38:	f1 e0       	ldi	r31, 0x01	; 1
    8a3a:	80 81       	ld	r24, Z
    8a3c:	8e 7f       	andi	r24, 0xFE	; 254
    8a3e:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    8a40:	80 81       	ld	r24, Z
    8a42:	8d 7f       	andi	r24, 0xFD	; 253
    8a44:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    8a46:	80 81       	ld	r24, Z
    8a48:	8b 7f       	andi	r24, 0xFB	; 251
    8a4a:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    8a4c:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    8a4e:	80 81       	ld	r24, Z
    8a50:	8f 7e       	andi	r24, 0xEF	; 239
    8a52:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    8a54:	80 81       	ld	r24, Z
    8a56:	8f 7d       	andi	r24, 0xDF	; 223
    8a58:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    8a5a:	80 81       	ld	r24, Z
    8a5c:	8f 7b       	andi	r24, 0xBF	; 191
    8a5e:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    8a60:	80 81       	ld	r24, Z
    8a62:	8f 77       	andi	r24, 0x7F	; 127
    8a64:	80 83       	st	Z, r24

}
    8a66:	08 95       	ret

00008a68 <computeHeading>:

	}

}

void computeHeading(void) {
    8a68:	ef 92       	push	r14
    8a6a:	ff 92       	push	r15
    8a6c:	0f 93       	push	r16
    8a6e:	1f 93       	push	r17
	// Refer to dt0058-computing-tilt-measurement-and-tiltcompensated-ecompass-stmicroelectronics.pdf
	heading = atan2(magY, magX)*180/M_PI;
    8a70:	60 91 40 03 	lds	r22, 0x0340
    8a74:	70 91 41 03 	lds	r23, 0x0341
    8a78:	88 27       	eor	r24, r24
    8a7a:	77 fd       	sbrc	r23, 7
    8a7c:	80 95       	com	r24
    8a7e:	98 2f       	mov	r25, r24
    8a80:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    8a84:	7b 01       	movw	r14, r22
    8a86:	8c 01       	movw	r16, r24
    8a88:	60 91 3e 03 	lds	r22, 0x033E
    8a8c:	70 91 3f 03 	lds	r23, 0x033F
    8a90:	88 27       	eor	r24, r24
    8a92:	77 fd       	sbrc	r23, 7
    8a94:	80 95       	com	r24
    8a96:	98 2f       	mov	r25, r24
    8a98:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    8a9c:	9b 01       	movw	r18, r22
    8a9e:	ac 01       	movw	r20, r24
    8aa0:	c8 01       	movw	r24, r16
    8aa2:	b7 01       	movw	r22, r14
    8aa4:	0e 94 80 5a 	call	0xb500	; 0xb500 <atan2>
    8aa8:	20 e0       	ldi	r18, 0x00	; 0
    8aaa:	30 e0       	ldi	r19, 0x00	; 0
    8aac:	44 e3       	ldi	r20, 0x34	; 52
    8aae:	53 e4       	ldi	r21, 0x43	; 67
    8ab0:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    8ab4:	2b ed       	ldi	r18, 0xDB	; 219
    8ab6:	3f e0       	ldi	r19, 0x0F	; 15
    8ab8:	49 e4       	ldi	r20, 0x49	; 73
    8aba:	50 e4       	ldi	r21, 0x40	; 64
    8abc:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    8ac0:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    8ac4:	cb 01       	movw	r24, r22
    8ac6:	70 93 45 03 	sts	0x0345, r23
    8aca:	60 93 44 03 	sts	0x0344, r22
	if(heading < 0) {
    8ace:	77 ff       	sbrs	r23, 7
    8ad0:	06 c0       	rjmp	.+12     	; 0x8ade <computeHeading+0x76>
		heading += 360;
    8ad2:	88 59       	subi	r24, 0x98	; 152
    8ad4:	9e 4f       	sbci	r25, 0xFE	; 254
    8ad6:	90 93 45 03 	sts	0x0345, r25
    8ada:	80 93 44 03 	sts	0x0344, r24
	}
	roll = atan2(accY, accZ)*180.0/M_PI;
    8ade:	60 91 1e 03 	lds	r22, 0x031E
    8ae2:	70 91 1f 03 	lds	r23, 0x031F
    8ae6:	88 27       	eor	r24, r24
    8ae8:	77 fd       	sbrc	r23, 7
    8aea:	80 95       	com	r24
    8aec:	98 2f       	mov	r25, r24
    8aee:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    8af2:	7b 01       	movw	r14, r22
    8af4:	8c 01       	movw	r16, r24
    8af6:	60 91 1c 03 	lds	r22, 0x031C
    8afa:	70 91 1d 03 	lds	r23, 0x031D
    8afe:	88 27       	eor	r24, r24
    8b00:	77 fd       	sbrc	r23, 7
    8b02:	80 95       	com	r24
    8b04:	98 2f       	mov	r25, r24
    8b06:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    8b0a:	a8 01       	movw	r20, r16
    8b0c:	97 01       	movw	r18, r14
    8b0e:	0e 94 80 5a 	call	0xb500	; 0xb500 <atan2>
    8b12:	20 e0       	ldi	r18, 0x00	; 0
    8b14:	30 e0       	ldi	r19, 0x00	; 0
    8b16:	44 e3       	ldi	r20, 0x34	; 52
    8b18:	53 e4       	ldi	r21, 0x43	; 67
    8b1a:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    8b1e:	2b ed       	ldi	r18, 0xDB	; 219
    8b20:	3f e0       	ldi	r19, 0x0F	; 15
    8b22:	49 e4       	ldi	r20, 0x49	; 73
    8b24:	50 e4       	ldi	r21, 0x40	; 64
    8b26:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    8b2a:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    8b2e:	70 93 47 03 	sts	0x0347, r23
    8b32:	60 93 46 03 	sts	0x0346, r22
	pitch = atan2(accX, accZ)*180.0/M_PI;	
    8b36:	60 91 1a 03 	lds	r22, 0x031A
    8b3a:	70 91 1b 03 	lds	r23, 0x031B
    8b3e:	88 27       	eor	r24, r24
    8b40:	77 fd       	sbrc	r23, 7
    8b42:	80 95       	com	r24
    8b44:	98 2f       	mov	r25, r24
    8b46:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    8b4a:	a8 01       	movw	r20, r16
    8b4c:	97 01       	movw	r18, r14
    8b4e:	0e 94 80 5a 	call	0xb500	; 0xb500 <atan2>
    8b52:	20 e0       	ldi	r18, 0x00	; 0
    8b54:	30 e0       	ldi	r19, 0x00	; 0
    8b56:	44 e3       	ldi	r20, 0x34	; 52
    8b58:	53 e4       	ldi	r21, 0x43	; 67
    8b5a:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    8b5e:	2b ed       	ldi	r18, 0xDB	; 219
    8b60:	3f e0       	ldi	r19, 0x0F	; 15
    8b62:	49 e4       	ldi	r20, 0x49	; 73
    8b64:	50 e4       	ldi	r21, 0x40	; 64
    8b66:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <__divsf3>
    8b6a:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    8b6e:	70 93 49 03 	sts	0x0349, r23
    8b72:	60 93 48 03 	sts	0x0348, r22
	//double magX_ = magX*cos(pitch) + magZ*sin(pitch);
	//double magY_ = magZ*sin(roll) - magY*cos(roll);
	//heading_compensated = atan2(magY_, magX_)*180/M_PI;
    8b76:	1f 91       	pop	r17
    8b78:	0f 91       	pop	r16
    8b7a:	ff 90       	pop	r15
    8b7c:	ef 90       	pop	r14
    8b7e:	08 95       	ret

00008b80 <computeAngle>:

	}

}

void computeAngle() {
    8b80:	ef 92       	push	r14
    8b82:	ff 92       	push	r15
    8b84:	0f 93       	push	r16
    8b86:	1f 93       	push	r17

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= verticalThreshold) {
    8b88:	20 91 1e 03 	lds	r18, 0x031E
    8b8c:	30 91 1f 03 	lds	r19, 0x031F
    8b90:	37 fd       	sbrc	r19, 7
    8b92:	71 c0       	rjmp	.+226    	; 0x8c76 <computeAngle+0xf6>
    8b94:	80 91 15 02 	lds	r24, 0x0215
    8b98:	90 91 16 02 	lds	r25, 0x0216
    8b9c:	28 17       	cp	r18, r24
    8b9e:	39 07       	cpc	r19, r25
    8ba0:	0c f4       	brge	.+2      	; 0x8ba4 <computeAngle+0x24>
    8ba2:	54 c0       	rjmp	.+168    	; 0x8c4c <computeAngle+0xcc>
		currPosition = HORIZONTAL_POS;
    8ba4:	81 e0       	ldi	r24, 0x01	; 1
    8ba6:	80 93 13 02 	sts	0x0213, r24
    8baa:	28 2f       	mov	r18, r24
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    8bac:	80 91 14 02 	lds	r24, 0x0214
    8bb0:	28 17       	cp	r18, r24
    8bb2:	09 f4       	brne	.+2      	; 0x8bb6 <computeAngle+0x36>
    8bb4:	54 c0       	rjmp	.+168    	; 0x8c5e <computeAngle+0xde>
		timesInSamePos++;
    8bb6:	80 91 36 03 	lds	r24, 0x0336
    8bba:	90 91 37 03 	lds	r25, 0x0337
    8bbe:	01 96       	adiw	r24, 0x01	; 1
    8bc0:	90 93 37 03 	sts	0x0337, r25
    8bc4:	80 93 36 03 	sts	0x0336, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    8bc8:	88 3c       	cpi	r24, 0xC8	; 200
    8bca:	91 05       	cpc	r25, r1
    8bcc:	08 f0       	brcs	.+2      	; 0x8bd0 <computeAngle+0x50>
    8bce:	4c c0       	rjmp	.+152    	; 0x8c68 <computeAngle+0xe8>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    8bd0:	60 91 1a 03 	lds	r22, 0x031A
    8bd4:	70 91 1b 03 	lds	r23, 0x031B
    8bd8:	88 27       	eor	r24, r24
    8bda:	77 fd       	sbrc	r23, 7
    8bdc:	80 95       	com	r24
    8bde:	98 2f       	mov	r25, r24
    8be0:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    8be4:	7b 01       	movw	r14, r22
    8be6:	8c 01       	movw	r16, r24
    8be8:	60 91 1c 03 	lds	r22, 0x031C
    8bec:	70 91 1d 03 	lds	r23, 0x031D
    8bf0:	88 27       	eor	r24, r24
    8bf2:	77 fd       	sbrc	r23, 7
    8bf4:	80 95       	com	r24
    8bf6:	98 2f       	mov	r25, r24
    8bf8:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <__floatsisf>
    8bfc:	9b 01       	movw	r18, r22
    8bfe:	ac 01       	movw	r20, r24
    8c00:	c8 01       	movw	r24, r16
    8c02:	b7 01       	movw	r22, r14
    8c04:	0e 94 80 5a 	call	0xb500	; 0xb500 <atan2>
    8c08:	60 93 ac 03 	sts	0x03AC, r22
    8c0c:	70 93 ad 03 	sts	0x03AD, r23
    8c10:	80 93 ae 03 	sts	0x03AE, r24
    8c14:	90 93 af 03 	sts	0x03AF, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    8c18:	21 ee       	ldi	r18, 0xE1	; 225
    8c1a:	3e e2       	ldi	r19, 0x2E	; 46
    8c1c:	45 e6       	ldi	r20, 0x65	; 101
    8c1e:	52 e4       	ldi	r21, 0x42	; 66
    8c20:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <__mulsf3>
    8c24:	0e 94 42 5b 	call	0xb684	; 0xb684 <__fixsfsi>
    8c28:	cb 01       	movw	r24, r22
    8c2a:	70 93 35 03 	sts	0x0335, r23
    8c2e:	60 93 34 03 	sts	0x0334, r22

	if(currentAngle < 0) {
    8c32:	77 ff       	sbrs	r23, 7
    8c34:	06 c0       	rjmp	.+12     	; 0x8c42 <computeAngle+0xc2>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    8c36:	88 59       	subi	r24, 0x98	; 152
    8c38:	9e 4f       	sbci	r25, 0xFE	; 254
    8c3a:	90 93 35 03 	sts	0x0335, r25
    8c3e:	80 93 34 03 	sts	0x0334, r24
	}

}
    8c42:	1f 91       	pop	r17
    8c44:	0f 91       	pop	r16
    8c46:	ff 90       	pop	r15
    8c48:	ef 90       	pop	r14
    8c4a:	08 95       	ret

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= verticalThreshold) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    8c4c:	10 92 13 02 	sts	0x0213, r1
    8c50:	20 91 13 02 	lds	r18, 0x0213
	}
	if(currPosition != robotPosition) {			
    8c54:	80 91 14 02 	lds	r24, 0x0214
    8c58:	28 17       	cp	r18, r24
    8c5a:	09 f0       	breq	.+2      	; 0x8c5e <computeAngle+0xde>
    8c5c:	ac cf       	rjmp	.-168    	; 0x8bb6 <computeAngle+0x36>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    8c5e:	10 92 37 03 	sts	0x0337, r1
    8c62:	10 92 36 03 	sts	0x0336, r1
    8c66:	b4 cf       	rjmp	.-152    	; 0x8bd0 <computeAngle+0x50>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    8c68:	10 92 37 03 	sts	0x0337, r1
    8c6c:	10 92 36 03 	sts	0x0336, r1
			robotPosition = currPosition;
    8c70:	20 93 14 02 	sts	0x0214, r18
    8c74:	ad cf       	rjmp	.-166    	; 0x8bd0 <computeAngle+0x50>
}

void computeAngle() {

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= verticalThreshold) {
    8c76:	30 95       	com	r19
    8c78:	21 95       	neg	r18
    8c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    8c7c:	8b cf       	rjmp	.-234    	; 0x8b94 <computeAngle+0x14>

00008c7e <readAll>:
void readAll(void) {

	int i = 0;
	static signed char buff[18];

	if(useAccel == USE_MMAX7455L) {
    8c7e:	80 91 19 03 	lds	r24, 0x0319
    8c82:	88 23       	and	r24, r24
    8c84:	59 f1       	breq	.+86     	; 0x8cdc <readAll+0x5e>
		gyroZ = 0;
		magX = 0;
		magY = 0;
		magZ = 0;

	} else if(useAccel == USE_ADXL345) {
    8c86:	81 30       	cpi	r24, 0x01	; 1
    8c88:	09 f4       	brne	.+2      	; 0x8c8c <readAll+0xe>
    8c8a:	82 c1       	rjmp	.+772    	; 0x8f90 <readAll+0x312>
		gyroZ = 0;
		magX = 0;
		magY = 0;
		magZ = 0;		

	} else if(useAccel == USE_LSM6DS3US) {
    8c8c:	83 30       	cpi	r24, 0x03	; 3
    8c8e:	09 f4       	brne	.+2      	; 0x8c92 <readAll+0x14>
    8c90:	d0 c0       	rjmp	.+416    	; 0x8e32 <readAll+0x1b4>
			magZ = (((uint16_t)buff[17] << 8u) | (uint8_t)buff[16]); // Z axis						
		}

	} else {

		accX = 0;
    8c92:	10 92 1b 03 	sts	0x031B, r1
    8c96:	10 92 1a 03 	sts	0x031A, r1
		accY = 0;
    8c9a:	10 92 1d 03 	sts	0x031D, r1
    8c9e:	10 92 1c 03 	sts	0x031C, r1
		accZ = 0;
    8ca2:	10 92 1f 03 	sts	0x031F, r1
    8ca6:	10 92 1e 03 	sts	0x031E, r1
		gyroX = 0;
    8caa:	10 92 39 03 	sts	0x0339, r1
    8cae:	10 92 38 03 	sts	0x0338, r1
		gyroY = 0;
    8cb2:	10 92 3b 03 	sts	0x033B, r1
    8cb6:	10 92 3a 03 	sts	0x033A, r1
		gyroZ = 0;
    8cba:	10 92 3d 03 	sts	0x033D, r1
    8cbe:	10 92 3c 03 	sts	0x033C, r1
		magX = 0;
    8cc2:	10 92 3f 03 	sts	0x033F, r1
    8cc6:	10 92 3e 03 	sts	0x033E, r1
		magY = 0;
    8cca:	10 92 41 03 	sts	0x0341, r1
    8cce:	10 92 40 03 	sts	0x0340, r1
		magZ = 0;
    8cd2:	10 92 43 03 	sts	0x0343, r1
    8cd6:	10 92 42 03 	sts	0x0342, r1
    8cda:	08 95       	ret
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB
		// The sensitivity is 64 LSB/g.

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8cdc:	80 91 12 02 	lds	r24, 0x0212
    8ce0:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    8ce4:	80 e0       	ldi	r24, 0x00	; 0
    8ce6:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8cea:	80 91 12 02 	lds	r24, 0x0212
    8cee:	8f 5f       	subi	r24, 0xFF	; 255
    8cf0:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    8cf4:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
    8cf8:	80 93 32 04 	sts	0x0432, r24
    8cfc:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
    8d00:	80 93 33 04 	sts	0x0433, r24
    8d04:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
    8d08:	80 93 34 04 	sts	0x0434, r24
    8d0c:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
    8d10:	80 93 35 04 	sts	0x0435, r24
    8d14:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
    8d18:	80 93 36 04 	sts	0x0436, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    8d1c:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <i2c_readNak>
    8d20:	80 93 37 04 	sts	0x0437, r24
		i2c_stop();													// set stop conditon = release bus
    8d24:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8d28:	80 91 88 0a 	lds	r24, 0x0A88
    8d2c:	88 23       	and	r24, r24
    8d2e:	09 f0       	breq	.+2      	; 0x8d32 <readAll+0xb4>
    8d30:	5b c0       	rjmp	.+182    	; 0x8de8 <readAll+0x16a>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    8d32:	20 91 33 04 	lds	r18, 0x0433
    8d36:	33 27       	eor	r19, r19
    8d38:	27 fd       	sbrc	r18, 7
    8d3a:	30 95       	com	r19
    8d3c:	32 2f       	mov	r19, r18
    8d3e:	22 27       	eor	r18, r18
    8d40:	80 91 32 04 	lds	r24, 0x0432
    8d44:	99 27       	eor	r25, r25
    8d46:	87 fd       	sbrc	r24, 7
    8d48:	90 95       	com	r25
    8d4a:	28 2b       	or	r18, r24
    8d4c:	39 2b       	or	r19, r25
    8d4e:	80 91 20 03 	lds	r24, 0x0320
    8d52:	90 91 21 03 	lds	r25, 0x0321
    8d56:	28 1b       	sub	r18, r24
    8d58:	39 0b       	sbc	r19, r25
    8d5a:	30 93 1b 03 	sts	0x031B, r19
    8d5e:	20 93 1a 03 	sts	0x031A, r18
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    8d62:	20 91 35 04 	lds	r18, 0x0435
    8d66:	33 27       	eor	r19, r19
    8d68:	27 fd       	sbrc	r18, 7
    8d6a:	30 95       	com	r19
    8d6c:	32 2f       	mov	r19, r18
    8d6e:	22 27       	eor	r18, r18
    8d70:	80 91 34 04 	lds	r24, 0x0434
    8d74:	99 27       	eor	r25, r25
    8d76:	87 fd       	sbrc	r24, 7
    8d78:	90 95       	com	r25
    8d7a:	28 2b       	or	r18, r24
    8d7c:	39 2b       	or	r19, r25
    8d7e:	80 91 22 03 	lds	r24, 0x0322
    8d82:	90 91 23 03 	lds	r25, 0x0323
    8d86:	28 1b       	sub	r18, r24
    8d88:	39 0b       	sbc	r19, r25
    8d8a:	30 93 1d 03 	sts	0x031D, r19
    8d8e:	20 93 1c 03 	sts	0x031C, r18
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
    8d92:	80 91 37 04 	lds	r24, 0x0437
    8d96:	99 27       	eor	r25, r25
    8d98:	87 fd       	sbrc	r24, 7
    8d9a:	90 95       	com	r25
    8d9c:	98 2f       	mov	r25, r24
    8d9e:	88 27       	eor	r24, r24
    8da0:	20 91 36 04 	lds	r18, 0x0436
    8da4:	33 27       	eor	r19, r19
    8da6:	27 fd       	sbrc	r18, 7
    8da8:	30 95       	com	r19
    8daa:	82 2b       	or	r24, r18
    8dac:	93 2b       	or	r25, r19
    8dae:	90 93 1f 03 	sts	0x031F, r25
    8db2:	80 93 1e 03 	sts	0x031E, r24
			accX = ((((int16_t)buff[1])<<6)|(((uint8_t)buff[0])>>2))-accOffsetX;	// X axis
			accY = ((((int16_t)buff[3])<<6)|(((uint8_t)buff[2])>>2))-accOffsetY;	// Y axis
			accZ = (((int16_t)buff[5])<<6)|(((uint8_t)buff[4])>>2);					// Z axis
		}

		gyroX = 0;
    8db6:	10 92 39 03 	sts	0x0339, r1
    8dba:	10 92 38 03 	sts	0x0338, r1
		gyroY = 0;
    8dbe:	10 92 3b 03 	sts	0x033B, r1
    8dc2:	10 92 3a 03 	sts	0x033A, r1
		gyroZ = 0;
    8dc6:	10 92 3d 03 	sts	0x033D, r1
    8dca:	10 92 3c 03 	sts	0x033C, r1
		magX = 0;
    8dce:	10 92 3f 03 	sts	0x033F, r1
    8dd2:	10 92 3e 03 	sts	0x033E, r1
		magY = 0;
    8dd6:	10 92 41 03 	sts	0x0341, r1
    8dda:	10 92 40 03 	sts	0x0340, r1
		magZ = 0;		
    8dde:	10 92 43 03 	sts	0x0343, r1
    8de2:	10 92 42 03 	sts	0x0342, r1
    8de6:	08 95       	ret
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
		i2c_stop();													// set stop conditon = release bus

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    8de8:	80 91 33 04 	lds	r24, 0x0433
    8dec:	99 27       	eor	r25, r25
    8dee:	87 fd       	sbrc	r24, 7
    8df0:	90 95       	com	r25
    8df2:	98 2f       	mov	r25, r24
    8df4:	88 27       	eor	r24, r24
    8df6:	20 91 32 04 	lds	r18, 0x0432
    8dfa:	33 27       	eor	r19, r19
    8dfc:	27 fd       	sbrc	r18, 7
    8dfe:	30 95       	com	r19
    8e00:	82 2b       	or	r24, r18
    8e02:	93 2b       	or	r25, r19
    8e04:	90 93 1b 03 	sts	0x031B, r25
    8e08:	80 93 1a 03 	sts	0x031A, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    8e0c:	80 91 35 04 	lds	r24, 0x0435
    8e10:	99 27       	eor	r25, r25
    8e12:	87 fd       	sbrc	r24, 7
    8e14:	90 95       	com	r25
    8e16:	98 2f       	mov	r25, r24
    8e18:	88 27       	eor	r24, r24
    8e1a:	20 91 34 04 	lds	r18, 0x0434
    8e1e:	33 27       	eor	r19, r19
    8e20:	27 fd       	sbrc	r18, 7
    8e22:	30 95       	com	r19
    8e24:	82 2b       	or	r24, r18
    8e26:	93 2b       	or	r25, r19
    8e28:	90 93 1d 03 	sts	0x031D, r25
    8e2c:	80 93 1c 03 	sts	0x031C, r24
    8e30:	b0 cf       	rjmp	.-160    	; 0x8d92 <readAll+0x114>
		magX = 0;
		magY = 0;
		magZ = 0;		

	} else if(useAccel == USE_LSM6DS3US) {
		memset(buff, 0x00, 18);
    8e32:	e2 e3       	ldi	r30, 0x32	; 50
    8e34:	f4 e0       	ldi	r31, 0x04	; 4
    8e36:	82 e1       	ldi	r24, 0x12	; 18
    8e38:	df 01       	movw	r26, r30
    8e3a:	1d 92       	st	X+, r1
    8e3c:	8a 95       	dec	r24
    8e3e:	e9 f7       	brne	.-6      	; 0x8e3a <readAll+0x1bc>
		if(LSM6DS3US_ReadAll(buff)) {
    8e40:	cf 01       	movw	r24, r30
    8e42:	0e 94 0b 01 	call	0x216	; 0x216 <LSM6DS3US_ReadAll>
    8e46:	88 23       	and	r24, r24
    8e48:	09 f0       	breq	.+2      	; 0x8e4c <readAll+0x1ce>
    8e4a:	47 cf       	rjmp	.-370    	; 0x8cda <readAll+0x5c>
			return;
		}
		if(startCalibration) {										// if performing the calibration, then return the raw values
    8e4c:	80 91 88 0a 	lds	r24, 0x0A88
    8e50:	88 23       	and	r24, r24
    8e52:	09 f0       	breq	.+2      	; 0x8e56 <readAll+0x1d8>
    8e54:	4f c1       	rjmp	.+670    	; 0x90f4 <readAll+0x476>
			
			magX = (((uint16_t)buff[13] << 8u) | (uint8_t)buff[12]); // X axis
			magY = (((uint16_t)buff[15] << 8u) | (uint8_t)buff[14]); // Y axis
			magZ = (((uint16_t)buff[17] << 8u) | (uint8_t)buff[16]); // Z axis
		} else {													// else return the calibrated values
			gyroX = (((uint16_t)buff[1] << 8u) | (uint8_t)buff[0]);	// X axis
    8e56:	20 91 32 04 	lds	r18, 0x0432
    8e5a:	30 e0       	ldi	r19, 0x00	; 0
    8e5c:	80 91 33 04 	lds	r24, 0x0433
    8e60:	99 27       	eor	r25, r25
    8e62:	87 fd       	sbrc	r24, 7
    8e64:	90 95       	com	r25
    8e66:	98 2f       	mov	r25, r24
    8e68:	88 27       	eor	r24, r24
    8e6a:	28 2b       	or	r18, r24
    8e6c:	39 2b       	or	r19, r25
    8e6e:	30 93 39 03 	sts	0x0339, r19
    8e72:	20 93 38 03 	sts	0x0338, r18
			gyroY = (((uint16_t)buff[3] << 8u) | (uint8_t)buff[2]);	// Y axis
    8e76:	20 91 34 04 	lds	r18, 0x0434
    8e7a:	30 e0       	ldi	r19, 0x00	; 0
    8e7c:	80 91 35 04 	lds	r24, 0x0435
    8e80:	99 27       	eor	r25, r25
    8e82:	87 fd       	sbrc	r24, 7
    8e84:	90 95       	com	r25
    8e86:	98 2f       	mov	r25, r24
    8e88:	88 27       	eor	r24, r24
    8e8a:	28 2b       	or	r18, r24
    8e8c:	39 2b       	or	r19, r25
    8e8e:	30 93 3b 03 	sts	0x033B, r19
    8e92:	20 93 3a 03 	sts	0x033A, r18
			gyroZ = (((uint16_t)buff[5] << 8u) | (uint8_t)buff[4]);	// Z axis
    8e96:	20 91 36 04 	lds	r18, 0x0436
    8e9a:	30 e0       	ldi	r19, 0x00	; 0
    8e9c:	80 91 37 04 	lds	r24, 0x0437
    8ea0:	99 27       	eor	r25, r25
    8ea2:	87 fd       	sbrc	r24, 7
    8ea4:	90 95       	com	r25
    8ea6:	98 2f       	mov	r25, r24
    8ea8:	88 27       	eor	r24, r24
    8eaa:	28 2b       	or	r18, r24
    8eac:	39 2b       	or	r19, r25
    8eae:	30 93 3d 03 	sts	0x033D, r19
    8eb2:	20 93 3c 03 	sts	0x033C, r18
			
			accX = (((uint16_t)buff[7] << 8u) | (uint8_t)buff[6])-accOffsetX; // X axis
    8eb6:	20 91 38 04 	lds	r18, 0x0438
    8eba:	30 e0       	ldi	r19, 0x00	; 0
    8ebc:	80 91 39 04 	lds	r24, 0x0439
    8ec0:	99 27       	eor	r25, r25
    8ec2:	87 fd       	sbrc	r24, 7
    8ec4:	90 95       	com	r25
    8ec6:	98 2f       	mov	r25, r24
    8ec8:	88 27       	eor	r24, r24
    8eca:	28 2b       	or	r18, r24
    8ecc:	39 2b       	or	r19, r25
    8ece:	80 91 20 03 	lds	r24, 0x0320
    8ed2:	90 91 21 03 	lds	r25, 0x0321
    8ed6:	28 1b       	sub	r18, r24
    8ed8:	39 0b       	sbc	r19, r25
    8eda:	30 93 1b 03 	sts	0x031B, r19
    8ede:	20 93 1a 03 	sts	0x031A, r18
			accY = (((uint16_t)buff[9] << 8u) | (uint8_t)buff[8])-accOffsetY; // Y axis
    8ee2:	20 91 3a 04 	lds	r18, 0x043A
    8ee6:	30 e0       	ldi	r19, 0x00	; 0
    8ee8:	80 91 3b 04 	lds	r24, 0x043B
    8eec:	99 27       	eor	r25, r25
    8eee:	87 fd       	sbrc	r24, 7
    8ef0:	90 95       	com	r25
    8ef2:	98 2f       	mov	r25, r24
    8ef4:	88 27       	eor	r24, r24
    8ef6:	28 2b       	or	r18, r24
    8ef8:	39 2b       	or	r19, r25
    8efa:	80 91 22 03 	lds	r24, 0x0322
    8efe:	90 91 23 03 	lds	r25, 0x0323
    8f02:	28 1b       	sub	r18, r24
    8f04:	39 0b       	sbc	r19, r25
    8f06:	30 93 1d 03 	sts	0x031D, r19
    8f0a:	20 93 1c 03 	sts	0x031C, r18
			accZ = (((uint16_t)buff[11] << 8u) | (uint8_t)buff[10]); // Z axis
    8f0e:	20 91 3c 04 	lds	r18, 0x043C
    8f12:	30 e0       	ldi	r19, 0x00	; 0
    8f14:	80 91 3d 04 	lds	r24, 0x043D
    8f18:	99 27       	eor	r25, r25
    8f1a:	87 fd       	sbrc	r24, 7
    8f1c:	90 95       	com	r25
    8f1e:	98 2f       	mov	r25, r24
    8f20:	88 27       	eor	r24, r24
    8f22:	28 2b       	or	r18, r24
    8f24:	39 2b       	or	r19, r25
    8f26:	30 93 1f 03 	sts	0x031F, r19
    8f2a:	20 93 1e 03 	sts	0x031E, r18
			
			magX = (((uint16_t)buff[13] << 8u) | (uint8_t)buff[12]); // X axis
    8f2e:	20 91 3e 04 	lds	r18, 0x043E
    8f32:	30 e0       	ldi	r19, 0x00	; 0
    8f34:	80 91 3f 04 	lds	r24, 0x043F
    8f38:	99 27       	eor	r25, r25
    8f3a:	87 fd       	sbrc	r24, 7
    8f3c:	90 95       	com	r25
    8f3e:	98 2f       	mov	r25, r24
    8f40:	88 27       	eor	r24, r24
    8f42:	28 2b       	or	r18, r24
    8f44:	39 2b       	or	r19, r25
    8f46:	30 93 3f 03 	sts	0x033F, r19
    8f4a:	20 93 3e 03 	sts	0x033E, r18
			magY = (((uint16_t)buff[15] << 8u) | (uint8_t)buff[14]); // Y axis
    8f4e:	20 91 40 04 	lds	r18, 0x0440
    8f52:	30 e0       	ldi	r19, 0x00	; 0
    8f54:	80 91 41 04 	lds	r24, 0x0441
    8f58:	99 27       	eor	r25, r25
    8f5a:	87 fd       	sbrc	r24, 7
    8f5c:	90 95       	com	r25
    8f5e:	98 2f       	mov	r25, r24
    8f60:	88 27       	eor	r24, r24
    8f62:	28 2b       	or	r18, r24
    8f64:	39 2b       	or	r19, r25
    8f66:	30 93 41 03 	sts	0x0341, r19
    8f6a:	20 93 40 03 	sts	0x0340, r18
			magZ = (((uint16_t)buff[17] << 8u) | (uint8_t)buff[16]); // Z axis						
    8f6e:	20 91 42 04 	lds	r18, 0x0442
    8f72:	30 e0       	ldi	r19, 0x00	; 0
    8f74:	80 91 43 04 	lds	r24, 0x0443
    8f78:	99 27       	eor	r25, r25
    8f7a:	87 fd       	sbrc	r24, 7
    8f7c:	90 95       	com	r25
    8f7e:	98 2f       	mov	r25, r24
    8f80:	88 27       	eor	r24, r24
    8f82:	28 2b       	or	r18, r24
    8f84:	39 2b       	or	r19, r25
    8f86:	30 93 43 03 	sts	0x0343, r19
    8f8a:	20 93 42 03 	sts	0x0342, r18
    8f8e:	08 95       	ret
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB
		// The sensitivity is 256 LSB/g so scale the values to be compatible with the MMA7455.

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    8f90:	80 91 12 02 	lds	r24, 0x0212
    8f94:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    8f98:	82 e3       	ldi	r24, 0x32	; 50
    8f9a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    8f9e:	80 91 12 02 	lds	r24, 0x0212
    8fa2:	8f 5f       	subi	r24, 0xFF	; 255
    8fa4:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    8fa8:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
    8fac:	80 93 32 04 	sts	0x0432, r24
    8fb0:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
    8fb4:	80 93 33 04 	sts	0x0433, r24
    8fb8:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
    8fbc:	80 93 34 04 	sts	0x0434, r24
    8fc0:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
    8fc4:	80 93 35 04 	sts	0x0435, r24
    8fc8:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <i2c_readAck>
    8fcc:	80 93 36 04 	sts	0x0436, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    8fd0:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <i2c_readNak>
    8fd4:	80 93 37 04 	sts	0x0437, r24
		i2c_stop();												// set stop conditon = release bus
    8fd8:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8fdc:	80 91 88 0a 	lds	r24, 0x0A88
    8fe0:	88 23       	and	r24, r24
    8fe2:	09 f4       	brne	.+2      	; 0x8fe6 <readAll+0x368>
    8fe4:	4c c0       	rjmp	.+152    	; 0x907e <readAll+0x400>
			accX = (((int16_t)buff[1])<<6)|(((uint8_t)buff[0])>>2);	// X axis
    8fe6:	20 91 32 04 	lds	r18, 0x0432
    8fea:	26 95       	lsr	r18
    8fec:	26 95       	lsr	r18
    8fee:	30 e0       	ldi	r19, 0x00	; 0
    8ff0:	80 91 33 04 	lds	r24, 0x0433
    8ff4:	99 27       	eor	r25, r25
    8ff6:	87 fd       	sbrc	r24, 7
    8ff8:	90 95       	com	r25
    8ffa:	00 24       	eor	r0, r0
    8ffc:	96 95       	lsr	r25
    8ffe:	87 95       	ror	r24
    9000:	07 94       	ror	r0
    9002:	96 95       	lsr	r25
    9004:	87 95       	ror	r24
    9006:	07 94       	ror	r0
    9008:	98 2f       	mov	r25, r24
    900a:	80 2d       	mov	r24, r0
    900c:	28 2b       	or	r18, r24
    900e:	39 2b       	or	r19, r25
    9010:	30 93 1b 03 	sts	0x031B, r19
    9014:	20 93 1a 03 	sts	0x031A, r18
			accY = (((int16_t)buff[3])<<6)|(((uint8_t)buff[2])>>2);	// Y axis
    9018:	20 91 34 04 	lds	r18, 0x0434
    901c:	26 95       	lsr	r18
    901e:	26 95       	lsr	r18
    9020:	30 e0       	ldi	r19, 0x00	; 0
    9022:	80 91 35 04 	lds	r24, 0x0435
    9026:	99 27       	eor	r25, r25
    9028:	87 fd       	sbrc	r24, 7
    902a:	90 95       	com	r25
    902c:	00 24       	eor	r0, r0
    902e:	96 95       	lsr	r25
    9030:	87 95       	ror	r24
    9032:	07 94       	ror	r0
    9034:	96 95       	lsr	r25
    9036:	87 95       	ror	r24
    9038:	07 94       	ror	r0
    903a:	98 2f       	mov	r25, r24
    903c:	80 2d       	mov	r24, r0
    903e:	28 2b       	or	r18, r24
    9040:	39 2b       	or	r19, r25
			accZ = (((int16_t)buff[5])<<6)|(((uint8_t)buff[4])>>2);	// Z axis
		} else {													// else return the calibrated values
			accX = ((((int16_t)buff[1])<<6)|(((uint8_t)buff[0])>>2))-accOffsetX;	// X axis
			accY = ((((int16_t)buff[3])<<6)|(((uint8_t)buff[2])>>2))-accOffsetY;	// Y axis
    9042:	30 93 1d 03 	sts	0x031D, r19
    9046:	20 93 1c 03 	sts	0x031C, r18
			accZ = (((int16_t)buff[5])<<6)|(((uint8_t)buff[4])>>2);					// Z axis
    904a:	20 91 36 04 	lds	r18, 0x0436
    904e:	26 95       	lsr	r18
    9050:	26 95       	lsr	r18
    9052:	30 e0       	ldi	r19, 0x00	; 0
    9054:	80 91 37 04 	lds	r24, 0x0437
    9058:	99 27       	eor	r25, r25
    905a:	87 fd       	sbrc	r24, 7
    905c:	90 95       	com	r25
    905e:	00 24       	eor	r0, r0
    9060:	96 95       	lsr	r25
    9062:	87 95       	ror	r24
    9064:	07 94       	ror	r0
    9066:	96 95       	lsr	r25
    9068:	87 95       	ror	r24
    906a:	07 94       	ror	r0
    906c:	98 2f       	mov	r25, r24
    906e:	80 2d       	mov	r24, r0
    9070:	28 2b       	or	r18, r24
    9072:	39 2b       	or	r19, r25
    9074:	30 93 1f 03 	sts	0x031F, r19
    9078:	20 93 1e 03 	sts	0x031E, r18
    907c:	9c ce       	rjmp	.-712    	; 0x8db6 <readAll+0x138>
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = (((int16_t)buff[1])<<6)|(((uint8_t)buff[0])>>2);	// X axis
			accY = (((int16_t)buff[3])<<6)|(((uint8_t)buff[2])>>2);	// Y axis
			accZ = (((int16_t)buff[5])<<6)|(((uint8_t)buff[4])>>2);	// Z axis
		} else {													// else return the calibrated values
			accX = ((((int16_t)buff[1])<<6)|(((uint8_t)buff[0])>>2))-accOffsetX;	// X axis
    907e:	20 91 32 04 	lds	r18, 0x0432
    9082:	26 95       	lsr	r18
    9084:	26 95       	lsr	r18
    9086:	30 e0       	ldi	r19, 0x00	; 0
    9088:	80 91 33 04 	lds	r24, 0x0433
    908c:	99 27       	eor	r25, r25
    908e:	87 fd       	sbrc	r24, 7
    9090:	90 95       	com	r25
    9092:	00 24       	eor	r0, r0
    9094:	96 95       	lsr	r25
    9096:	87 95       	ror	r24
    9098:	07 94       	ror	r0
    909a:	96 95       	lsr	r25
    909c:	87 95       	ror	r24
    909e:	07 94       	ror	r0
    90a0:	98 2f       	mov	r25, r24
    90a2:	80 2d       	mov	r24, r0
    90a4:	28 2b       	or	r18, r24
    90a6:	39 2b       	or	r19, r25
    90a8:	80 91 20 03 	lds	r24, 0x0320
    90ac:	90 91 21 03 	lds	r25, 0x0321
    90b0:	28 1b       	sub	r18, r24
    90b2:	39 0b       	sbc	r19, r25
    90b4:	30 93 1b 03 	sts	0x031B, r19
    90b8:	20 93 1a 03 	sts	0x031A, r18
			accY = ((((int16_t)buff[3])<<6)|(((uint8_t)buff[2])>>2))-accOffsetY;	// Y axis
    90bc:	20 91 34 04 	lds	r18, 0x0434
    90c0:	26 95       	lsr	r18
    90c2:	26 95       	lsr	r18
    90c4:	30 e0       	ldi	r19, 0x00	; 0
    90c6:	80 91 35 04 	lds	r24, 0x0435
    90ca:	99 27       	eor	r25, r25
    90cc:	87 fd       	sbrc	r24, 7
    90ce:	90 95       	com	r25
    90d0:	00 24       	eor	r0, r0
    90d2:	96 95       	lsr	r25
    90d4:	87 95       	ror	r24
    90d6:	07 94       	ror	r0
    90d8:	96 95       	lsr	r25
    90da:	87 95       	ror	r24
    90dc:	07 94       	ror	r0
    90de:	98 2f       	mov	r25, r24
    90e0:	80 2d       	mov	r24, r0
    90e2:	28 2b       	or	r18, r24
    90e4:	39 2b       	or	r19, r25
    90e6:	80 91 22 03 	lds	r24, 0x0322
    90ea:	90 91 23 03 	lds	r25, 0x0323
    90ee:	28 1b       	sub	r18, r24
    90f0:	39 0b       	sbc	r19, r25
    90f2:	a7 cf       	rjmp	.-178    	; 0x9042 <readAll+0x3c4>
		memset(buff, 0x00, 18);
		if(LSM6DS3US_ReadAll(buff)) {
			return;
		}
		if(startCalibration) {										// if performing the calibration, then return the raw values
			gyroX = (((uint16_t)buff[1] << 8u) | (uint8_t)buff[0]);	// X axis
    90f4:	20 91 32 04 	lds	r18, 0x0432
    90f8:	30 e0       	ldi	r19, 0x00	; 0
    90fa:	80 91 33 04 	lds	r24, 0x0433
    90fe:	99 27       	eor	r25, r25
    9100:	87 fd       	sbrc	r24, 7
    9102:	90 95       	com	r25
    9104:	98 2f       	mov	r25, r24
    9106:	88 27       	eor	r24, r24
    9108:	28 2b       	or	r18, r24
    910a:	39 2b       	or	r19, r25
    910c:	30 93 39 03 	sts	0x0339, r19
    9110:	20 93 38 03 	sts	0x0338, r18
			gyroY = (((uint16_t)buff[3] << 8u) | (uint8_t)buff[2]);	// Y axis
    9114:	20 91 34 04 	lds	r18, 0x0434
    9118:	30 e0       	ldi	r19, 0x00	; 0
    911a:	80 91 35 04 	lds	r24, 0x0435
    911e:	99 27       	eor	r25, r25
    9120:	87 fd       	sbrc	r24, 7
    9122:	90 95       	com	r25
    9124:	98 2f       	mov	r25, r24
    9126:	88 27       	eor	r24, r24
    9128:	28 2b       	or	r18, r24
    912a:	39 2b       	or	r19, r25
    912c:	30 93 3b 03 	sts	0x033B, r19
    9130:	20 93 3a 03 	sts	0x033A, r18
			gyroZ = (((uint16_t)buff[5] << 8u) | (uint8_t)buff[4]);	// Z axis
    9134:	20 91 36 04 	lds	r18, 0x0436
    9138:	30 e0       	ldi	r19, 0x00	; 0
    913a:	80 91 37 04 	lds	r24, 0x0437
    913e:	99 27       	eor	r25, r25
    9140:	87 fd       	sbrc	r24, 7
    9142:	90 95       	com	r25
    9144:	98 2f       	mov	r25, r24
    9146:	88 27       	eor	r24, r24
    9148:	28 2b       	or	r18, r24
    914a:	39 2b       	or	r19, r25
    914c:	30 93 3d 03 	sts	0x033D, r19
    9150:	20 93 3c 03 	sts	0x033C, r18
			
			accX = (((uint16_t)buff[7] << 8u) | (uint8_t)buff[6]); // X axis
    9154:	20 91 38 04 	lds	r18, 0x0438
    9158:	30 e0       	ldi	r19, 0x00	; 0
    915a:	80 91 39 04 	lds	r24, 0x0439
    915e:	99 27       	eor	r25, r25
    9160:	87 fd       	sbrc	r24, 7
    9162:	90 95       	com	r25
    9164:	98 2f       	mov	r25, r24
    9166:	88 27       	eor	r24, r24
    9168:	28 2b       	or	r18, r24
    916a:	39 2b       	or	r19, r25
    916c:	30 93 1b 03 	sts	0x031B, r19
    9170:	20 93 1a 03 	sts	0x031A, r18
			accY = (((uint16_t)buff[9] << 8u) | (uint8_t)buff[8]); // Y axis
    9174:	20 91 3a 04 	lds	r18, 0x043A
    9178:	30 e0       	ldi	r19, 0x00	; 0
    917a:	80 91 3b 04 	lds	r24, 0x043B
    917e:	99 27       	eor	r25, r25
    9180:	87 fd       	sbrc	r24, 7
    9182:	90 95       	com	r25
    9184:	98 2f       	mov	r25, r24
    9186:	88 27       	eor	r24, r24
    9188:	28 2b       	or	r18, r24
    918a:	39 2b       	or	r19, r25
    918c:	bc ce       	rjmp	.-648    	; 0x8f06 <readAll+0x288>

0000918e <calibrateSensors>:

#include "sensors.h"
#include "lsm6ds3us.h"

void calibrateSensors() {
    918e:	af 92       	push	r10
    9190:	bf 92       	push	r11
    9192:	cf 92       	push	r12
    9194:	df 92       	push	r13
    9196:	ef 92       	push	r14
    9198:	ff 92       	push	r15
    919a:	0f 93       	push	r16
    919c:	1f 93       	push	r17
    919e:	cf 93       	push	r28
    91a0:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    91a2:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    91a6:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    91aa:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    91ae:	80 e0       	ldi	r24, 0x00	; 0
    91b0:	4a db       	rcall	.-2412   	; 0x8846 <updateRedLed>
	updateGreenLed(pwm_green);
    91b2:	80 91 0d 02 	lds	r24, 0x020D
    91b6:	5d db       	rcall	.-2374   	; 0x8872 <updateGreenLed>
	updateBlueLed(pwm_blue);
    91b8:	80 91 0e 02 	lds	r24, 0x020E
    91bc:	70 db       	rcall	.-2336   	; 0x889e <updateBlueLed>

	calibrationCycle = 0;
    91be:	10 92 62 03 	sts	0x0362, r1
    91c2:	10 92 61 03 	sts	0x0361, r1
	startCalibration = 1;
    91c6:	81 e0       	ldi	r24, 0x01	; 1
    91c8:	80 93 88 0a 	sts	0x0A88, r24


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
    91cc:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    91d0:	60 93 80 03 	sts	0x0380, r22
    91d4:	70 93 81 03 	sts	0x0381, r23
    91d8:	80 93 82 03 	sts	0x0382, r24
    91dc:	90 93 83 03 	sts	0x0383, r25
    91e0:	01 c0       	rjmp	.+2      	; 0x91e4 <calibrateSensors+0x56>
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
		readAll();	// get a fresh value from the accelerometer
    91e2:	4d dd       	rcall	.-1382   	; 0x8c7e <readAll>


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
    91e4:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    91e8:	20 91 80 03 	lds	r18, 0x0380
    91ec:	30 91 81 03 	lds	r19, 0x0381
    91f0:	40 91 82 03 	lds	r20, 0x0382
    91f4:	50 91 83 03 	lds	r21, 0x0383
    91f8:	62 1b       	sub	r22, r18
    91fa:	73 0b       	sbc	r23, r19
    91fc:	84 0b       	sbc	r24, r20
    91fe:	95 0b       	sbc	r25, r21
    9200:	61 5c       	subi	r22, 0xC1	; 193
    9202:	73 40       	sbci	r23, 0x03	; 3
    9204:	80 40       	sbci	r24, 0x00	; 0
    9206:	90 40       	sbci	r25, 0x00	; 0
    9208:	60 f3       	brcs	.-40     	; 0x91e2 <calibrateSensors+0x54>
		readAll();	// get a fresh value from the accelerometer
	}

	accXMax = INT16_MIN;
    920a:	20 e0       	ldi	r18, 0x00	; 0
    920c:	30 e8       	ldi	r19, 0x80	; 128
    920e:	30 93 2d 03 	sts	0x032D, r19
    9212:	20 93 2c 03 	sts	0x032C, r18
	accXMin = INT16_MAX;
    9216:	8f ef       	ldi	r24, 0xFF	; 255
    9218:	9f e7       	ldi	r25, 0x7F	; 127
    921a:	90 93 2f 03 	sts	0x032F, r25
    921e:	80 93 2e 03 	sts	0x032E, r24
	accYMax = INT16_MIN;
    9222:	30 93 31 03 	sts	0x0331, r19
    9226:	20 93 30 03 	sts	0x0330, r18
	accYMin = INT16_MAX;
    922a:	90 93 33 03 	sts	0x0333, r25
    922e:	80 93 32 03 	sts	0x0332, r24
	accOffsetXSum = 0;
    9232:	10 92 24 03 	sts	0x0324, r1
    9236:	10 92 25 03 	sts	0x0325, r1
    923a:	10 92 26 03 	sts	0x0326, r1
    923e:	10 92 27 03 	sts	0x0327, r1
	accOffsetYSum = 0;
    9242:	10 92 28 03 	sts	0x0328, r1
    9246:	10 92 29 03 	sts	0x0329, r1
    924a:	10 92 2a 03 	sts	0x032A, r1
    924e:	10 92 2b 03 	sts	0x032B, r1
	
	if(abs(accZ) >= verticalThreshold) {
    9252:	20 91 1e 03 	lds	r18, 0x031E
    9256:	30 91 1f 03 	lds	r19, 0x031F
    925a:	37 fd       	sbrc	r19, 7
    925c:	66 c4       	rjmp	.+2252   	; 0x9b2a <calibrateSensors+0x99c>
    925e:	80 91 15 02 	lds	r24, 0x0215
    9262:	90 91 16 02 	lds	r25, 0x0216
    9266:	28 17       	cp	r18, r24
    9268:	39 07       	cpc	r19, r25
    926a:	0c f4       	brge	.+2      	; 0x926e <calibrateSensors+0xe0>
    926c:	c1 c3       	rjmp	.+1922   	; 0x99f0 <calibrateSensors+0x862>

		pwm_red = 0;
    926e:	10 92 0c 02 	sts	0x020C, r1
		pwm_green = 255;
    9272:	8f ef       	ldi	r24, 0xFF	; 255
    9274:	80 93 0d 02 	sts	0x020D, r24
		pwm_blue = 255;
    9278:	80 93 0e 02 	sts	0x020E, r24
		updateRedLed(pwm_red);
    927c:	80 e0       	ldi	r24, 0x00	; 0
    927e:	e3 da       	rcall	.-2618   	; 0x8846 <updateRedLed>
		updateGreenLed(pwm_green);
    9280:	80 91 0d 02 	lds	r24, 0x020D
    9284:	f6 da       	rcall	.-2580   	; 0x8872 <updateGreenLed>
		updateBlueLed(pwm_blue);
    9286:	80 91 0e 02 	lds	r24, 0x020E
    928a:	09 db       	rcall	.-2542   	; 0x889e <updateBlueLed>

		setLeftSpeed(0);
    928c:	80 e0       	ldi	r24, 0x00	; 0
    928e:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
		setRightSpeed(0);
    9292:	80 e0       	ldi	r24, 0x00	; 0
    9294:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
    9298:	3e c0       	rjmp	.+124    	; 0x9316 <calibrateSensors+0x188>
			readAll();

			handleMotorsWithNoController();

			if(calibrationCycle < CALIBRATION_CYCLES) {
				accOffsetXSum += accX;
    929a:	20 91 1a 03 	lds	r18, 0x031A
    929e:	30 91 1b 03 	lds	r19, 0x031B
    92a2:	44 27       	eor	r20, r20
    92a4:	37 fd       	sbrc	r19, 7
    92a6:	40 95       	com	r20
    92a8:	54 2f       	mov	r21, r20
    92aa:	80 91 24 03 	lds	r24, 0x0324
    92ae:	90 91 25 03 	lds	r25, 0x0325
    92b2:	a0 91 26 03 	lds	r26, 0x0326
    92b6:	b0 91 27 03 	lds	r27, 0x0327
    92ba:	82 0f       	add	r24, r18
    92bc:	93 1f       	adc	r25, r19
    92be:	a4 1f       	adc	r26, r20
    92c0:	b5 1f       	adc	r27, r21
    92c2:	80 93 24 03 	sts	0x0324, r24
    92c6:	90 93 25 03 	sts	0x0325, r25
    92ca:	a0 93 26 03 	sts	0x0326, r26
    92ce:	b0 93 27 03 	sts	0x0327, r27
				accOffsetYSum += accY;
    92d2:	20 91 1c 03 	lds	r18, 0x031C
    92d6:	30 91 1d 03 	lds	r19, 0x031D
    92da:	44 27       	eor	r20, r20
    92dc:	37 fd       	sbrc	r19, 7
    92de:	40 95       	com	r20
    92e0:	54 2f       	mov	r21, r20
    92e2:	80 91 28 03 	lds	r24, 0x0328
    92e6:	90 91 29 03 	lds	r25, 0x0329
    92ea:	a0 91 2a 03 	lds	r26, 0x032A
    92ee:	b0 91 2b 03 	lds	r27, 0x032B
    92f2:	82 0f       	add	r24, r18
    92f4:	93 1f       	adc	r25, r19
    92f6:	a4 1f       	adc	r26, r20
    92f8:	b5 1f       	adc	r27, r21
    92fa:	80 93 28 03 	sts	0x0328, r24
    92fe:	90 93 29 03 	sts	0x0329, r25
    9302:	a0 93 2a 03 	sts	0x032A, r26
    9306:	b0 93 2b 03 	sts	0x032B, r27
				calibrationCycle++;
    930a:	6f 5f       	subi	r22, 0xFF	; 255
    930c:	7f 4f       	sbci	r23, 0xFF	; 255
    930e:	70 93 62 03 	sts	0x0362, r23
    9312:	60 93 61 03 	sts	0x0361, r22
		setLeftSpeed(0);
		setRightSpeed(0);

		while(1) {

			readAll();
    9316:	b3 dc       	rcall	.-1690   	; 0x8c7e <readAll>

			handleMotorsWithNoController();
    9318:	0e 94 2d 3d 	call	0x7a5a	; 0x7a5a <handleMotorsWithNoController>

			if(calibrationCycle < CALIBRATION_CYCLES) {
    931c:	60 91 61 03 	lds	r22, 0x0361
    9320:	70 91 62 03 	lds	r23, 0x0362
    9324:	60 31       	cpi	r22, 0x10	; 16
    9326:	71 05       	cpc	r23, r1
    9328:	0c f4       	brge	.+2      	; 0x932c <calibrateSensors+0x19e>
    932a:	b7 cf       	rjmp	.-146    	; 0x929a <calibrateSensors+0x10c>
				accOffsetXSum += accX;
				accOffsetYSum += accY;
				calibrationCycle++;
			} else {
				accOffsetX = accOffsetXSum>>4;
    932c:	80 91 24 03 	lds	r24, 0x0324
    9330:	90 91 25 03 	lds	r25, 0x0325
    9334:	a0 91 26 03 	lds	r26, 0x0326
    9338:	b0 91 27 03 	lds	r27, 0x0327
    933c:	04 e0       	ldi	r16, 0x04	; 4
    933e:	b5 95       	asr	r27
    9340:	a7 95       	ror	r26
    9342:	97 95       	ror	r25
    9344:	87 95       	ror	r24
    9346:	0a 95       	dec	r16
    9348:	d1 f7       	brne	.-12     	; 0x933e <calibrateSensors+0x1b0>
    934a:	90 93 21 03 	sts	0x0321, r25
    934e:	80 93 20 03 	sts	0x0320, r24
				accOffsetY = accOffsetYSum>>4;
    9352:	80 91 28 03 	lds	r24, 0x0328
    9356:	90 91 29 03 	lds	r25, 0x0329
    935a:	a0 91 2a 03 	lds	r26, 0x032A
    935e:	b0 91 2b 03 	lds	r27, 0x032B
    9362:	14 e0       	ldi	r17, 0x04	; 4
    9364:	b5 95       	asr	r27
    9366:	a7 95       	ror	r26
    9368:	97 95       	ror	r25
    936a:	87 95       	ror	r24
    936c:	1a 95       	dec	r17
    936e:	d1 f7       	brne	.-12     	; 0x9364 <calibrateSensors+0x1d6>
    9370:	90 93 23 03 	sts	0x0323, r25
    9374:	80 93 22 03 	sts	0x0322, r24
		setLeftSpeed(0);
		setRightSpeed(0);

	}	

	startCalibration = 1;
    9378:	81 e0       	ldi	r24, 0x01	; 1
    937a:	80 93 88 0a 	sts	0x0A88, r24
	calibrationCycle = 0;
    937e:	10 92 62 03 	sts	0x0362, r1
    9382:	10 92 61 03 	sts	0x0361, r1

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {

				pwm_red = 255;
    9386:	1f ef       	ldi	r17, 0xFF	; 255
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
						proximityOffset[i] = 0;
					}				
					
					calibrationCycle++;
    9388:	c1 e0       	ldi	r28, 0x01	; 1
    938a:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;

	// calibrate prox and ground sensors
	while(startCalibration) {

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    938c:	80 91 61 03 	lds	r24, 0x0361
    9390:	90 91 62 03 	lds	r25, 0x0362
    9394:	41 97       	sbiw	r24, 0x11	; 17
    9396:	84 f4       	brge	.+32     	; 0x93b8 <calibrateSensors+0x22a>

			if(proxUpdated) {
    9398:	80 91 be 02 	lds	r24, 0x02BE
    939c:	88 23       	and	r24, r24
    939e:	09 f0       	breq	.+2      	; 0x93a2 <calibrateSensors+0x214>
    93a0:	23 c1       	rjmp	.+582    	; 0x95e8 <calibrateSensors+0x45a>

	startCalibration = 1;
	calibrationCycle = 0;

	// calibrate prox and ground sensors
	while(startCalibration) {
    93a2:	80 91 88 0a 	lds	r24, 0x0A88
    93a6:	88 23       	and	r24, r24
    93a8:	09 f4       	brne	.+2      	; 0x93ac <calibrateSensors+0x21e>
    93aa:	05 c1       	rjmp	.+522    	; 0x95b6 <calibrateSensors+0x428>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    93ac:	80 91 61 03 	lds	r24, 0x0361
    93b0:	90 91 62 03 	lds	r25, 0x0362
    93b4:	41 97       	sbiw	r24, 0x11	; 17
    93b6:	84 f3       	brlt	.-32     	; 0x9398 <calibrateSensors+0x20a>

			}

		} else {

			pwm_red = 0;
    93b8:	10 92 0c 02 	sts	0x020C, r1
			pwm_green = 0;
    93bc:	10 92 0d 02 	sts	0x020D, r1
			pwm_blue = 255;
    93c0:	8f ef       	ldi	r24, 0xFF	; 255
    93c2:	80 93 0e 02 	sts	0x020E, r24
			updateRedLed(pwm_red);
    93c6:	80 e0       	ldi	r24, 0x00	; 0
    93c8:	3e da       	rcall	.-2948   	; 0x8846 <updateRedLed>
			updateGreenLed(pwm_green);
    93ca:	80 91 0d 02 	lds	r24, 0x020D
    93ce:	51 da       	rcall	.-2910   	; 0x8872 <updateGreenLed>
			updateBlueLed(pwm_blue);
    93d0:	80 91 0e 02 	lds	r24, 0x020E
    93d4:	64 da       	rcall	.-2872   	; 0x889e <updateBlueLed>

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    93d6:	80 91 87 02 	lds	r24, 0x0287
    93da:	90 91 88 02 	lds	r25, 0x0288
    93de:	a0 91 89 02 	lds	r26, 0x0289
    93e2:	b0 91 8a 02 	lds	r27, 0x028A
    93e6:	e4 e0       	ldi	r30, 0x04	; 4
    93e8:	b6 95       	lsr	r27
    93ea:	a7 95       	ror	r26
    93ec:	97 95       	ror	r25
    93ee:	87 95       	ror	r24
    93f0:	ea 95       	dec	r30
    93f2:	d1 f7       	brne	.-12     	; 0x93e8 <calibrateSensors+0x25a>
    93f4:	90 93 70 02 	sts	0x0270, r25
    93f8:	80 93 6f 02 	sts	0x026F, r24
    93fc:	80 91 8b 02 	lds	r24, 0x028B
    9400:	90 91 8c 02 	lds	r25, 0x028C
    9404:	a0 91 8d 02 	lds	r26, 0x028D
    9408:	b0 91 8e 02 	lds	r27, 0x028E
    940c:	74 e0       	ldi	r23, 0x04	; 4
    940e:	b6 95       	lsr	r27
    9410:	a7 95       	ror	r26
    9412:	97 95       	ror	r25
    9414:	87 95       	ror	r24
    9416:	7a 95       	dec	r23
    9418:	d1 f7       	brne	.-12     	; 0x940e <calibrateSensors+0x280>
    941a:	90 93 72 02 	sts	0x0272, r25
    941e:	80 93 71 02 	sts	0x0271, r24
    9422:	80 91 8f 02 	lds	r24, 0x028F
    9426:	90 91 90 02 	lds	r25, 0x0290
    942a:	a0 91 91 02 	lds	r26, 0x0291
    942e:	b0 91 92 02 	lds	r27, 0x0292
    9432:	64 e0       	ldi	r22, 0x04	; 4
    9434:	b6 95       	lsr	r27
    9436:	a7 95       	ror	r26
    9438:	97 95       	ror	r25
    943a:	87 95       	ror	r24
    943c:	6a 95       	dec	r22
    943e:	d1 f7       	brne	.-12     	; 0x9434 <calibrateSensors+0x2a6>
    9440:	90 93 74 02 	sts	0x0274, r25
    9444:	80 93 73 02 	sts	0x0273, r24
    9448:	80 91 93 02 	lds	r24, 0x0293
    944c:	90 91 94 02 	lds	r25, 0x0294
    9450:	a0 91 95 02 	lds	r26, 0x0295
    9454:	b0 91 96 02 	lds	r27, 0x0296
    9458:	54 e0       	ldi	r21, 0x04	; 4
    945a:	b6 95       	lsr	r27
    945c:	a7 95       	ror	r26
    945e:	97 95       	ror	r25
    9460:	87 95       	ror	r24
    9462:	5a 95       	dec	r21
    9464:	d1 f7       	brne	.-12     	; 0x945a <calibrateSensors+0x2cc>
    9466:	90 93 76 02 	sts	0x0276, r25
    946a:	80 93 75 02 	sts	0x0275, r24
    946e:	80 91 97 02 	lds	r24, 0x0297
    9472:	90 91 98 02 	lds	r25, 0x0298
    9476:	a0 91 99 02 	lds	r26, 0x0299
    947a:	b0 91 9a 02 	lds	r27, 0x029A
    947e:	44 e0       	ldi	r20, 0x04	; 4
    9480:	b6 95       	lsr	r27
    9482:	a7 95       	ror	r26
    9484:	97 95       	ror	r25
    9486:	87 95       	ror	r24
    9488:	4a 95       	dec	r20
    948a:	d1 f7       	brne	.-12     	; 0x9480 <calibrateSensors+0x2f2>
    948c:	90 93 78 02 	sts	0x0278, r25
    9490:	80 93 77 02 	sts	0x0277, r24
    9494:	80 91 9b 02 	lds	r24, 0x029B
    9498:	90 91 9c 02 	lds	r25, 0x029C
    949c:	a0 91 9d 02 	lds	r26, 0x029D
    94a0:	b0 91 9e 02 	lds	r27, 0x029E
    94a4:	34 e0       	ldi	r19, 0x04	; 4
    94a6:	b6 95       	lsr	r27
    94a8:	a7 95       	ror	r26
    94aa:	97 95       	ror	r25
    94ac:	87 95       	ror	r24
    94ae:	3a 95       	dec	r19
    94b0:	d1 f7       	brne	.-12     	; 0x94a6 <calibrateSensors+0x318>
    94b2:	90 93 7a 02 	sts	0x027A, r25
    94b6:	80 93 79 02 	sts	0x0279, r24
    94ba:	80 91 9f 02 	lds	r24, 0x029F
    94be:	90 91 a0 02 	lds	r25, 0x02A0
    94c2:	a0 91 a1 02 	lds	r26, 0x02A1
    94c6:	b0 91 a2 02 	lds	r27, 0x02A2
    94ca:	24 e0       	ldi	r18, 0x04	; 4
    94cc:	b6 95       	lsr	r27
    94ce:	a7 95       	ror	r26
    94d0:	97 95       	ror	r25
    94d2:	87 95       	ror	r24
    94d4:	2a 95       	dec	r18
    94d6:	d1 f7       	brne	.-12     	; 0x94cc <calibrateSensors+0x33e>
    94d8:	90 93 7c 02 	sts	0x027C, r25
    94dc:	80 93 7b 02 	sts	0x027B, r24
    94e0:	80 91 a3 02 	lds	r24, 0x02A3
    94e4:	90 91 a4 02 	lds	r25, 0x02A4
    94e8:	a0 91 a5 02 	lds	r26, 0x02A5
    94ec:	b0 91 a6 02 	lds	r27, 0x02A6
    94f0:	04 e0       	ldi	r16, 0x04	; 4
    94f2:	b6 95       	lsr	r27
    94f4:	a7 95       	ror	r26
    94f6:	97 95       	ror	r25
    94f8:	87 95       	ror	r24
    94fa:	0a 95       	dec	r16
    94fc:	d1 f7       	brne	.-12     	; 0x94f2 <calibrateSensors+0x364>
    94fe:	90 93 7e 02 	sts	0x027E, r25
    9502:	80 93 7d 02 	sts	0x027D, r24
    9506:	80 91 a7 02 	lds	r24, 0x02A7
    950a:	90 91 a8 02 	lds	r25, 0x02A8
    950e:	a0 91 a9 02 	lds	r26, 0x02A9
    9512:	b0 91 aa 02 	lds	r27, 0x02AA
    9516:	14 e0       	ldi	r17, 0x04	; 4
    9518:	b6 95       	lsr	r27
    951a:	a7 95       	ror	r26
    951c:	97 95       	ror	r25
    951e:	87 95       	ror	r24
    9520:	1a 95       	dec	r17
    9522:	d1 f7       	brne	.-12     	; 0x9518 <calibrateSensors+0x38a>
    9524:	20 91 ab 02 	lds	r18, 0x02AB
    9528:	30 91 ac 02 	lds	r19, 0x02AC
    952c:	40 91 ad 02 	lds	r20, 0x02AD
    9530:	50 91 ae 02 	lds	r21, 0x02AE
    9534:	a4 e0       	ldi	r26, 0x04	; 4
    9536:	56 95       	lsr	r21
    9538:	47 95       	ror	r20
    953a:	37 95       	ror	r19
    953c:	27 95       	ror	r18
    953e:	aa 95       	dec	r26
    9540:	d1 f7       	brne	.-12     	; 0x9536 <calibrateSensors+0x3a8>
    9542:	e0 90 af 02 	lds	r14, 0x02AF
    9546:	f0 90 b0 02 	lds	r15, 0x02B0
    954a:	00 91 b1 02 	lds	r16, 0x02B1
    954e:	10 91 b2 02 	lds	r17, 0x02B2
    9552:	f4 e0       	ldi	r31, 0x04	; 4
    9554:	16 95       	lsr	r17
    9556:	07 95       	ror	r16
    9558:	f7 94       	ror	r15
    955a:	e7 94       	ror	r14
    955c:	fa 95       	dec	r31
    955e:	d1 f7       	brne	.-12     	; 0x9554 <calibrateSensors+0x3c6>
    9560:	a0 90 b3 02 	lds	r10, 0x02B3
    9564:	b0 90 b4 02 	lds	r11, 0x02B4
    9568:	c0 90 b5 02 	lds	r12, 0x02B5
    956c:	d0 90 b6 02 	lds	r13, 0x02B6
    9570:	e4 e0       	ldi	r30, 0x04	; 4
    9572:	d6 94       	lsr	r13
    9574:	c7 94       	ror	r12
    9576:	b7 94       	ror	r11
    9578:	a7 94       	ror	r10
    957a:	ea 95       	dec	r30
    957c:	d1 f7       	brne	.-12     	; 0x9572 <calibrateSensors+0x3e4>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    957e:	80 50       	subi	r24, 0x00	; 0
    9580:	92 40       	sbci	r25, 0x02	; 2
    9582:	90 93 80 02 	sts	0x0280, r25
    9586:	80 93 7f 02 	sts	0x027F, r24
    958a:	20 50       	subi	r18, 0x00	; 0
    958c:	32 40       	sbci	r19, 0x02	; 2
    958e:	30 93 82 02 	sts	0x0282, r19
    9592:	20 93 81 02 	sts	0x0281, r18
    9596:	80 e0       	ldi	r24, 0x00	; 0
    9598:	9e ef       	ldi	r25, 0xFE	; 254
    959a:	e8 0e       	add	r14, r24
    959c:	f9 1e       	adc	r15, r25
    959e:	f0 92 84 02 	sts	0x0284, r15
    95a2:	e0 92 83 02 	sts	0x0283, r14
    95a6:	a8 0e       	add	r10, r24
    95a8:	b9 1e       	adc	r11, r25
    95aa:	b0 92 86 02 	sts	0x0286, r11
    95ae:	a0 92 85 02 	sts	0x0285, r10
			}

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    95b2:	10 92 88 0a 	sts	0x0A88, r1

		}

	}

	pwm_red = 255;
    95b6:	8f ef       	ldi	r24, 0xFF	; 255
    95b8:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    95bc:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    95c0:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    95c4:	40 d9       	rcall	.-3456   	; 0x8846 <updateRedLed>
	updateGreenLed(pwm_green);
    95c6:	80 91 0d 02 	lds	r24, 0x020D
    95ca:	53 d9       	rcall	.-3418   	; 0x8872 <updateGreenLed>
	updateBlueLed(pwm_blue);
    95cc:	80 91 0e 02 	lds	r24, 0x020E
    95d0:	66 d9       	rcall	.-3380   	; 0x889e <updateBlueLed>

}
    95d2:	df 91       	pop	r29
    95d4:	cf 91       	pop	r28
    95d6:	1f 91       	pop	r17
    95d8:	0f 91       	pop	r16
    95da:	ff 90       	pop	r15
    95dc:	ef 90       	pop	r14
    95de:	df 90       	pop	r13
    95e0:	cf 90       	pop	r12
    95e2:	bf 90       	pop	r11
    95e4:	af 90       	pop	r10
    95e6:	08 95       	ret

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {

				pwm_red = 255;
    95e8:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
    95ec:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 0;
    95f0:	10 92 0e 02 	sts	0x020E, r1
				updateRedLed(pwm_red);
    95f4:	8f ef       	ldi	r24, 0xFF	; 255
    95f6:	27 d9       	rcall	.-3506   	; 0x8846 <updateRedLed>
				updateGreenLed(pwm_green);
    95f8:	80 91 0d 02 	lds	r24, 0x020D
    95fc:	3a d9       	rcall	.-3468   	; 0x8872 <updateGreenLed>
				updateBlueLed(pwm_blue);
    95fe:	80 91 0e 02 	lds	r24, 0x020E
    9602:	4d d9       	rcall	.-3430   	; 0x889e <updateBlueLed>

				proxUpdated = 0;
    9604:	10 92 be 02 	sts	0x02BE, r1

				if(calibrationCycle==0) {		// reset all variables
    9608:	60 91 61 03 	lds	r22, 0x0361
    960c:	70 91 62 03 	lds	r23, 0x0362
    9610:	61 15       	cp	r22, r1
    9612:	71 05       	cpc	r23, r1
    9614:	09 f0       	breq	.+2      	; 0x9618 <calibrateSensors+0x48a>
    9616:	95 c0       	rjmp	.+298    	; 0x9742 <calibrateSensors+0x5b4>

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9618:	10 92 87 02 	sts	0x0287, r1
    961c:	10 92 88 02 	sts	0x0288, r1
    9620:	10 92 89 02 	sts	0x0289, r1
    9624:	10 92 8a 02 	sts	0x028A, r1
						proximityOffset[i] = 0;
    9628:	10 92 70 02 	sts	0x0270, r1
    962c:	10 92 6f 02 	sts	0x026F, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9630:	10 92 8b 02 	sts	0x028B, r1
    9634:	10 92 8c 02 	sts	0x028C, r1
    9638:	10 92 8d 02 	sts	0x028D, r1
    963c:	10 92 8e 02 	sts	0x028E, r1
						proximityOffset[i] = 0;
    9640:	10 92 72 02 	sts	0x0272, r1
    9644:	10 92 71 02 	sts	0x0271, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9648:	10 92 8f 02 	sts	0x028F, r1
    964c:	10 92 90 02 	sts	0x0290, r1
    9650:	10 92 91 02 	sts	0x0291, r1
    9654:	10 92 92 02 	sts	0x0292, r1
						proximityOffset[i] = 0;
    9658:	10 92 74 02 	sts	0x0274, r1
    965c:	10 92 73 02 	sts	0x0273, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9660:	10 92 93 02 	sts	0x0293, r1
    9664:	10 92 94 02 	sts	0x0294, r1
    9668:	10 92 95 02 	sts	0x0295, r1
    966c:	10 92 96 02 	sts	0x0296, r1
						proximityOffset[i] = 0;
    9670:	10 92 76 02 	sts	0x0276, r1
    9674:	10 92 75 02 	sts	0x0275, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9678:	10 92 97 02 	sts	0x0297, r1
    967c:	10 92 98 02 	sts	0x0298, r1
    9680:	10 92 99 02 	sts	0x0299, r1
    9684:	10 92 9a 02 	sts	0x029A, r1
						proximityOffset[i] = 0;
    9688:	10 92 78 02 	sts	0x0278, r1
    968c:	10 92 77 02 	sts	0x0277, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9690:	10 92 9b 02 	sts	0x029B, r1
    9694:	10 92 9c 02 	sts	0x029C, r1
    9698:	10 92 9d 02 	sts	0x029D, r1
    969c:	10 92 9e 02 	sts	0x029E, r1
						proximityOffset[i] = 0;
    96a0:	10 92 7a 02 	sts	0x027A, r1
    96a4:	10 92 79 02 	sts	0x0279, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    96a8:	10 92 9f 02 	sts	0x029F, r1
    96ac:	10 92 a0 02 	sts	0x02A0, r1
    96b0:	10 92 a1 02 	sts	0x02A1, r1
    96b4:	10 92 a2 02 	sts	0x02A2, r1
						proximityOffset[i] = 0;
    96b8:	10 92 7c 02 	sts	0x027C, r1
    96bc:	10 92 7b 02 	sts	0x027B, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    96c0:	10 92 a3 02 	sts	0x02A3, r1
    96c4:	10 92 a4 02 	sts	0x02A4, r1
    96c8:	10 92 a5 02 	sts	0x02A5, r1
    96cc:	10 92 a6 02 	sts	0x02A6, r1
						proximityOffset[i] = 0;
    96d0:	10 92 7e 02 	sts	0x027E, r1
    96d4:	10 92 7d 02 	sts	0x027D, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    96d8:	10 92 a7 02 	sts	0x02A7, r1
    96dc:	10 92 a8 02 	sts	0x02A8, r1
    96e0:	10 92 a9 02 	sts	0x02A9, r1
    96e4:	10 92 aa 02 	sts	0x02AA, r1
						proximityOffset[i] = 0;
    96e8:	10 92 80 02 	sts	0x0280, r1
    96ec:	10 92 7f 02 	sts	0x027F, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    96f0:	10 92 ab 02 	sts	0x02AB, r1
    96f4:	10 92 ac 02 	sts	0x02AC, r1
    96f8:	10 92 ad 02 	sts	0x02AD, r1
    96fc:	10 92 ae 02 	sts	0x02AE, r1
						proximityOffset[i] = 0;
    9700:	10 92 82 02 	sts	0x0282, r1
    9704:	10 92 81 02 	sts	0x0281, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9708:	10 92 af 02 	sts	0x02AF, r1
    970c:	10 92 b0 02 	sts	0x02B0, r1
    9710:	10 92 b1 02 	sts	0x02B1, r1
    9714:	10 92 b2 02 	sts	0x02B2, r1
						proximityOffset[i] = 0;
    9718:	10 92 84 02 	sts	0x0284, r1
    971c:	10 92 83 02 	sts	0x0283, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    9720:	10 92 b3 02 	sts	0x02B3, r1
    9724:	10 92 b4 02 	sts	0x02B4, r1
    9728:	10 92 b5 02 	sts	0x02B5, r1
    972c:	10 92 b6 02 	sts	0x02B6, r1
						proximityOffset[i] = 0;
    9730:	10 92 86 02 	sts	0x0286, r1
    9734:	10 92 85 02 	sts	0x0285, r1
					}				
					
					calibrationCycle++;
    9738:	d0 93 62 03 	sts	0x0362, r29
    973c:	c0 93 61 03 	sts	0x0361, r28
    9740:	30 ce       	rjmp	.-928    	; 0x93a2 <calibrateSensors+0x214>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    9742:	80 91 57 02 	lds	r24, 0x0257
    9746:	90 91 58 02 	lds	r25, 0x0258
    974a:	aa 27       	eor	r26, r26
    974c:	97 fd       	sbrc	r25, 7
    974e:	a0 95       	com	r26
    9750:	ba 2f       	mov	r27, r26
    9752:	20 91 87 02 	lds	r18, 0x0287
    9756:	30 91 88 02 	lds	r19, 0x0288
    975a:	40 91 89 02 	lds	r20, 0x0289
    975e:	50 91 8a 02 	lds	r21, 0x028A
    9762:	82 0f       	add	r24, r18
    9764:	93 1f       	adc	r25, r19
    9766:	a4 1f       	adc	r26, r20
    9768:	b5 1f       	adc	r27, r21
    976a:	80 93 87 02 	sts	0x0287, r24
    976e:	90 93 88 02 	sts	0x0288, r25
    9772:	a0 93 89 02 	sts	0x0289, r26
    9776:	b0 93 8a 02 	sts	0x028A, r27
    977a:	80 91 59 02 	lds	r24, 0x0259
    977e:	90 91 5a 02 	lds	r25, 0x025A
    9782:	aa 27       	eor	r26, r26
    9784:	97 fd       	sbrc	r25, 7
    9786:	a0 95       	com	r26
    9788:	ba 2f       	mov	r27, r26
    978a:	20 91 8b 02 	lds	r18, 0x028B
    978e:	30 91 8c 02 	lds	r19, 0x028C
    9792:	40 91 8d 02 	lds	r20, 0x028D
    9796:	50 91 8e 02 	lds	r21, 0x028E
    979a:	82 0f       	add	r24, r18
    979c:	93 1f       	adc	r25, r19
    979e:	a4 1f       	adc	r26, r20
    97a0:	b5 1f       	adc	r27, r21
    97a2:	80 93 8b 02 	sts	0x028B, r24
    97a6:	90 93 8c 02 	sts	0x028C, r25
    97aa:	a0 93 8d 02 	sts	0x028D, r26
    97ae:	b0 93 8e 02 	sts	0x028E, r27
    97b2:	80 91 5b 02 	lds	r24, 0x025B
    97b6:	90 91 5c 02 	lds	r25, 0x025C
    97ba:	aa 27       	eor	r26, r26
    97bc:	97 fd       	sbrc	r25, 7
    97be:	a0 95       	com	r26
    97c0:	ba 2f       	mov	r27, r26
    97c2:	20 91 8f 02 	lds	r18, 0x028F
    97c6:	30 91 90 02 	lds	r19, 0x0290
    97ca:	40 91 91 02 	lds	r20, 0x0291
    97ce:	50 91 92 02 	lds	r21, 0x0292
    97d2:	82 0f       	add	r24, r18
    97d4:	93 1f       	adc	r25, r19
    97d6:	a4 1f       	adc	r26, r20
    97d8:	b5 1f       	adc	r27, r21
    97da:	80 93 8f 02 	sts	0x028F, r24
    97de:	90 93 90 02 	sts	0x0290, r25
    97e2:	a0 93 91 02 	sts	0x0291, r26
    97e6:	b0 93 92 02 	sts	0x0292, r27
    97ea:	80 91 5d 02 	lds	r24, 0x025D
    97ee:	90 91 5e 02 	lds	r25, 0x025E
    97f2:	aa 27       	eor	r26, r26
    97f4:	97 fd       	sbrc	r25, 7
    97f6:	a0 95       	com	r26
    97f8:	ba 2f       	mov	r27, r26
    97fa:	20 91 93 02 	lds	r18, 0x0293
    97fe:	30 91 94 02 	lds	r19, 0x0294
    9802:	40 91 95 02 	lds	r20, 0x0295
    9806:	50 91 96 02 	lds	r21, 0x0296
    980a:	82 0f       	add	r24, r18
    980c:	93 1f       	adc	r25, r19
    980e:	a4 1f       	adc	r26, r20
    9810:	b5 1f       	adc	r27, r21
    9812:	80 93 93 02 	sts	0x0293, r24
    9816:	90 93 94 02 	sts	0x0294, r25
    981a:	a0 93 95 02 	sts	0x0295, r26
    981e:	b0 93 96 02 	sts	0x0296, r27
    9822:	80 91 5f 02 	lds	r24, 0x025F
    9826:	90 91 60 02 	lds	r25, 0x0260
    982a:	aa 27       	eor	r26, r26
    982c:	97 fd       	sbrc	r25, 7
    982e:	a0 95       	com	r26
    9830:	ba 2f       	mov	r27, r26
    9832:	20 91 97 02 	lds	r18, 0x0297
    9836:	30 91 98 02 	lds	r19, 0x0298
    983a:	40 91 99 02 	lds	r20, 0x0299
    983e:	50 91 9a 02 	lds	r21, 0x029A
    9842:	82 0f       	add	r24, r18
    9844:	93 1f       	adc	r25, r19
    9846:	a4 1f       	adc	r26, r20
    9848:	b5 1f       	adc	r27, r21
    984a:	80 93 97 02 	sts	0x0297, r24
    984e:	90 93 98 02 	sts	0x0298, r25
    9852:	a0 93 99 02 	sts	0x0299, r26
    9856:	b0 93 9a 02 	sts	0x029A, r27
    985a:	80 91 61 02 	lds	r24, 0x0261
    985e:	90 91 62 02 	lds	r25, 0x0262
    9862:	aa 27       	eor	r26, r26
    9864:	97 fd       	sbrc	r25, 7
    9866:	a0 95       	com	r26
    9868:	ba 2f       	mov	r27, r26
    986a:	20 91 9b 02 	lds	r18, 0x029B
    986e:	30 91 9c 02 	lds	r19, 0x029C
    9872:	40 91 9d 02 	lds	r20, 0x029D
    9876:	50 91 9e 02 	lds	r21, 0x029E
    987a:	82 0f       	add	r24, r18
    987c:	93 1f       	adc	r25, r19
    987e:	a4 1f       	adc	r26, r20
    9880:	b5 1f       	adc	r27, r21
    9882:	80 93 9b 02 	sts	0x029B, r24
    9886:	90 93 9c 02 	sts	0x029C, r25
    988a:	a0 93 9d 02 	sts	0x029D, r26
    988e:	b0 93 9e 02 	sts	0x029E, r27
    9892:	80 91 63 02 	lds	r24, 0x0263
    9896:	90 91 64 02 	lds	r25, 0x0264
    989a:	aa 27       	eor	r26, r26
    989c:	97 fd       	sbrc	r25, 7
    989e:	a0 95       	com	r26
    98a0:	ba 2f       	mov	r27, r26
    98a2:	20 91 9f 02 	lds	r18, 0x029F
    98a6:	30 91 a0 02 	lds	r19, 0x02A0
    98aa:	40 91 a1 02 	lds	r20, 0x02A1
    98ae:	50 91 a2 02 	lds	r21, 0x02A2
    98b2:	82 0f       	add	r24, r18
    98b4:	93 1f       	adc	r25, r19
    98b6:	a4 1f       	adc	r26, r20
    98b8:	b5 1f       	adc	r27, r21
    98ba:	80 93 9f 02 	sts	0x029F, r24
    98be:	90 93 a0 02 	sts	0x02A0, r25
    98c2:	a0 93 a1 02 	sts	0x02A1, r26
    98c6:	b0 93 a2 02 	sts	0x02A2, r27
    98ca:	80 91 65 02 	lds	r24, 0x0265
    98ce:	90 91 66 02 	lds	r25, 0x0266
    98d2:	aa 27       	eor	r26, r26
    98d4:	97 fd       	sbrc	r25, 7
    98d6:	a0 95       	com	r26
    98d8:	ba 2f       	mov	r27, r26
    98da:	20 91 a3 02 	lds	r18, 0x02A3
    98de:	30 91 a4 02 	lds	r19, 0x02A4
    98e2:	40 91 a5 02 	lds	r20, 0x02A5
    98e6:	50 91 a6 02 	lds	r21, 0x02A6
    98ea:	82 0f       	add	r24, r18
    98ec:	93 1f       	adc	r25, r19
    98ee:	a4 1f       	adc	r26, r20
    98f0:	b5 1f       	adc	r27, r21
    98f2:	80 93 a3 02 	sts	0x02A3, r24
    98f6:	90 93 a4 02 	sts	0x02A4, r25
    98fa:	a0 93 a5 02 	sts	0x02A5, r26
    98fe:	b0 93 a6 02 	sts	0x02A6, r27
    9902:	80 91 67 02 	lds	r24, 0x0267
    9906:	90 91 68 02 	lds	r25, 0x0268
    990a:	aa 27       	eor	r26, r26
    990c:	97 fd       	sbrc	r25, 7
    990e:	a0 95       	com	r26
    9910:	ba 2f       	mov	r27, r26
    9912:	20 91 a7 02 	lds	r18, 0x02A7
    9916:	30 91 a8 02 	lds	r19, 0x02A8
    991a:	40 91 a9 02 	lds	r20, 0x02A9
    991e:	50 91 aa 02 	lds	r21, 0x02AA
    9922:	82 0f       	add	r24, r18
    9924:	93 1f       	adc	r25, r19
    9926:	a4 1f       	adc	r26, r20
    9928:	b5 1f       	adc	r27, r21
    992a:	80 93 a7 02 	sts	0x02A7, r24
    992e:	90 93 a8 02 	sts	0x02A8, r25
    9932:	a0 93 a9 02 	sts	0x02A9, r26
    9936:	b0 93 aa 02 	sts	0x02AA, r27
    993a:	80 91 69 02 	lds	r24, 0x0269
    993e:	90 91 6a 02 	lds	r25, 0x026A
    9942:	aa 27       	eor	r26, r26
    9944:	97 fd       	sbrc	r25, 7
    9946:	a0 95       	com	r26
    9948:	ba 2f       	mov	r27, r26
    994a:	20 91 ab 02 	lds	r18, 0x02AB
    994e:	30 91 ac 02 	lds	r19, 0x02AC
    9952:	40 91 ad 02 	lds	r20, 0x02AD
    9956:	50 91 ae 02 	lds	r21, 0x02AE
    995a:	82 0f       	add	r24, r18
    995c:	93 1f       	adc	r25, r19
    995e:	a4 1f       	adc	r26, r20
    9960:	b5 1f       	adc	r27, r21
    9962:	80 93 ab 02 	sts	0x02AB, r24
    9966:	90 93 ac 02 	sts	0x02AC, r25
    996a:	a0 93 ad 02 	sts	0x02AD, r26
    996e:	b0 93 ae 02 	sts	0x02AE, r27
    9972:	80 91 6b 02 	lds	r24, 0x026B
    9976:	90 91 6c 02 	lds	r25, 0x026C
    997a:	aa 27       	eor	r26, r26
    997c:	97 fd       	sbrc	r25, 7
    997e:	a0 95       	com	r26
    9980:	ba 2f       	mov	r27, r26
    9982:	20 91 af 02 	lds	r18, 0x02AF
    9986:	30 91 b0 02 	lds	r19, 0x02B0
    998a:	40 91 b1 02 	lds	r20, 0x02B1
    998e:	50 91 b2 02 	lds	r21, 0x02B2
    9992:	82 0f       	add	r24, r18
    9994:	93 1f       	adc	r25, r19
    9996:	a4 1f       	adc	r26, r20
    9998:	b5 1f       	adc	r27, r21
    999a:	80 93 af 02 	sts	0x02AF, r24
    999e:	90 93 b0 02 	sts	0x02B0, r25
    99a2:	a0 93 b1 02 	sts	0x02B1, r26
    99a6:	b0 93 b2 02 	sts	0x02B2, r27
    99aa:	80 91 6d 02 	lds	r24, 0x026D
    99ae:	90 91 6e 02 	lds	r25, 0x026E
    99b2:	aa 27       	eor	r26, r26
    99b4:	97 fd       	sbrc	r25, 7
    99b6:	a0 95       	com	r26
    99b8:	ba 2f       	mov	r27, r26
    99ba:	20 91 b3 02 	lds	r18, 0x02B3
    99be:	30 91 b4 02 	lds	r19, 0x02B4
    99c2:	40 91 b5 02 	lds	r20, 0x02B5
    99c6:	50 91 b6 02 	lds	r21, 0x02B6
    99ca:	82 0f       	add	r24, r18
    99cc:	93 1f       	adc	r25, r19
    99ce:	a4 1f       	adc	r26, r20
    99d0:	b5 1f       	adc	r27, r21
    99d2:	80 93 b3 02 	sts	0x02B3, r24
    99d6:	90 93 b4 02 	sts	0x02B4, r25
    99da:	a0 93 b5 02 	sts	0x02B5, r26
    99de:	b0 93 b6 02 	sts	0x02B6, r27
				}

				calibrationCycle++;
    99e2:	6f 5f       	subi	r22, 0xFF	; 255
    99e4:	7f 4f       	sbci	r23, 0xFF	; 255
    99e6:	70 93 62 03 	sts	0x0362, r23
    99ea:	60 93 61 03 	sts	0x0361, r22
    99ee:	d9 cc       	rjmp	.-1614   	; 0x93a2 <calibrateSensors+0x214>

		}

	} else {

		pwm_red = 255;
    99f0:	8f ef       	ldi	r24, 0xFF	; 255
    99f2:	80 93 0c 02 	sts	0x020C, r24
		pwm_green = 0;
    99f6:	10 92 0d 02 	sts	0x020D, r1
		pwm_blue = 255;
    99fa:	80 93 0e 02 	sts	0x020E, r24
		updateRedLed(pwm_red);
    99fe:	0e 94 23 44 	call	0x8846	; 0x8846 <updateRedLed>
		updateGreenLed(pwm_green);
    9a02:	80 91 0d 02 	lds	r24, 0x020D
    9a06:	0e 94 39 44 	call	0x8872	; 0x8872 <updateGreenLed>
		updateBlueLed(pwm_blue);
    9a0a:	80 91 0e 02 	lds	r24, 0x020E
    9a0e:	0e 94 4f 44 	call	0x889e	; 0x889e <updateBlueLed>

		setLeftSpeed(-10);
    9a12:	86 ef       	ldi	r24, 0xF6	; 246
    9a14:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
		setRightSpeed(10);
    9a18:	8a e0       	ldi	r24, 0x0A	; 10
    9a1a:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>

		lastTick = getTime100MicroSec();
    9a1e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    9a22:	60 93 80 03 	sts	0x0380, r22
    9a26:	70 93 81 03 	sts	0x0381, r23
    9a2a:	80 93 82 03 	sts	0x0382, r24
    9a2e:	90 93 83 03 	sts	0x0383, r25
    9a32:	3d c0       	rjmp	.+122    	; 0x9aae <calibrateSensors+0x920>
			readAll();

			handleMotorsWithSpeedController();

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
				if(accXMax < accX) {
    9a34:	20 91 1a 03 	lds	r18, 0x031A
    9a38:	30 91 1b 03 	lds	r19, 0x031B
    9a3c:	80 91 2c 03 	lds	r24, 0x032C
    9a40:	90 91 2d 03 	lds	r25, 0x032D
    9a44:	82 17       	cp	r24, r18
    9a46:	93 07       	cpc	r25, r19
    9a48:	24 f4       	brge	.+8      	; 0x9a52 <calibrateSensors+0x8c4>
					accXMax = accX;
    9a4a:	30 93 2d 03 	sts	0x032D, r19
    9a4e:	20 93 2c 03 	sts	0x032C, r18
				}
				if(accXMin > accX) {
    9a52:	80 91 2e 03 	lds	r24, 0x032E
    9a56:	90 91 2f 03 	lds	r25, 0x032F
    9a5a:	28 17       	cp	r18, r24
    9a5c:	39 07       	cpc	r19, r25
    9a5e:	24 f4       	brge	.+8      	; 0x9a68 <calibrateSensors+0x8da>
					accXMin = accX;
    9a60:	30 93 2f 03 	sts	0x032F, r19
    9a64:	20 93 2e 03 	sts	0x032E, r18
				}
				if(accYMax < accY) {
    9a68:	20 91 1c 03 	lds	r18, 0x031C
    9a6c:	30 91 1d 03 	lds	r19, 0x031D
    9a70:	80 91 30 03 	lds	r24, 0x0330
    9a74:	90 91 31 03 	lds	r25, 0x0331
    9a78:	82 17       	cp	r24, r18
    9a7a:	93 07       	cpc	r25, r19
    9a7c:	24 f4       	brge	.+8      	; 0x9a86 <calibrateSensors+0x8f8>
					accYMax = accY;
    9a7e:	30 93 31 03 	sts	0x0331, r19
    9a82:	20 93 30 03 	sts	0x0330, r18
				}
				if(accYMin > accY) {
    9a86:	80 91 32 03 	lds	r24, 0x0332
    9a8a:	90 91 33 03 	lds	r25, 0x0333
    9a8e:	28 17       	cp	r18, r24
    9a90:	39 07       	cpc	r19, r25
    9a92:	24 f4       	brge	.+8      	; 0x9a9c <calibrateSensors+0x90e>
					accYMin = accY;
    9a94:	30 93 33 03 	sts	0x0333, r19
    9a98:	20 93 32 03 	sts	0x0332, r18
				}
				calibrationCycle++;
    9a9c:	80 91 61 03 	lds	r24, 0x0361
    9aa0:	90 91 62 03 	lds	r25, 0x0362
    9aa4:	01 96       	adiw	r24, 0x01	; 1
    9aa6:	90 93 62 03 	sts	0x0362, r25
    9aaa:	80 93 61 03 	sts	0x0361, r24

		lastTick = getTime100MicroSec();

		while(1) {

			readAll();
    9aae:	e7 d8       	rcall	.-3634   	; 0x8c7e <readAll>

			handleMotorsWithSpeedController();
    9ab0:	0e 94 74 38 	call	0x70e8	; 0x70e8 <handleMotorsWithSpeedController>

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
    9ab4:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    9ab8:	20 91 80 03 	lds	r18, 0x0380
    9abc:	30 91 81 03 	lds	r19, 0x0381
    9ac0:	40 91 82 03 	lds	r20, 0x0382
    9ac4:	50 91 83 03 	lds	r21, 0x0383
    9ac8:	62 1b       	sub	r22, r18
    9aca:	73 0b       	sbc	r23, r19
    9acc:	84 0b       	sbc	r24, r20
    9ace:	95 0b       	sbc	r25, r21
    9ad0:	6e 53       	subi	r22, 0x3E	; 62
    9ad2:	76 49       	sbci	r23, 0x96	; 150
    9ad4:	80 40       	sbci	r24, 0x00	; 0
    9ad6:	90 40       	sbci	r25, 0x00	; 0
    9ad8:	08 f4       	brcc	.+2      	; 0x9adc <calibrateSensors+0x94e>
    9ada:	ac cf       	rjmp	.-168    	; 0x9a34 <calibrateSensors+0x8a6>
				if(accYMin > accY) {
					accYMin = accY;
				}
				calibrationCycle++;
			} else {
				accOffsetX = (accXMax + accXMin)>>1;
    9adc:	80 91 2e 03 	lds	r24, 0x032E
    9ae0:	90 91 2f 03 	lds	r25, 0x032F
    9ae4:	20 91 2c 03 	lds	r18, 0x032C
    9ae8:	30 91 2d 03 	lds	r19, 0x032D
    9aec:	82 0f       	add	r24, r18
    9aee:	93 1f       	adc	r25, r19
    9af0:	95 95       	asr	r25
    9af2:	87 95       	ror	r24
    9af4:	90 93 21 03 	sts	0x0321, r25
    9af8:	80 93 20 03 	sts	0x0320, r24
				accOffsetY = (accYMax + accYMin)>>1;
    9afc:	80 91 32 03 	lds	r24, 0x0332
    9b00:	90 91 33 03 	lds	r25, 0x0333
    9b04:	20 91 30 03 	lds	r18, 0x0330
    9b08:	30 91 31 03 	lds	r19, 0x0331
    9b0c:	82 0f       	add	r24, r18
    9b0e:	93 1f       	adc	r25, r19
    9b10:	95 95       	asr	r25
    9b12:	87 95       	ror	r24
    9b14:	90 93 23 03 	sts	0x0323, r25
    9b18:	80 93 22 03 	sts	0x0322, r24
				break;
			}

		}

		setLeftSpeed(0);
    9b1c:	80 e0       	ldi	r24, 0x00	; 0
    9b1e:	0e 94 30 27 	call	0x4e60	; 0x4e60 <setLeftSpeed>
		setRightSpeed(0);
    9b22:	80 e0       	ldi	r24, 0x00	; 0
    9b24:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <setRightSpeed>
    9b28:	27 cc       	rjmp	.-1970   	; 0x9378 <calibrateSensors+0x1ea>
	accYMax = INT16_MIN;
	accYMin = INT16_MAX;
	accOffsetXSum = 0;
	accOffsetYSum = 0;
	
	if(abs(accZ) >= verticalThreshold) {
    9b2a:	30 95       	com	r19
    9b2c:	21 95       	neg	r18
    9b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    9b30:	96 cb       	rjmp	.-2260   	; 0x925e <calibrateSensors+0xd0>

00009b32 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;
    unsigned int temp=0;
	verticalThreshold = VERTICAL_THRESHOLD;
    9b32:	8d e2       	ldi	r24, 0x2D	; 45
    9b34:	90 e0       	ldi	r25, 0x00	; 0
    9b36:	90 93 16 02 	sts	0x0216, r25
    9b3a:	80 93 15 02 	sts	0x0215, r24
    
	i2c_init();		// init I2C bus
    9b3e:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    9b42:	80 91 12 02 	lds	r24, 0x0212
    9b46:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    9b4a:	88 23       	and	r24, r24
    9b4c:	41 f4       	brne	.+16     	; 0x9b5e <initAccelerometer+0x2c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    9b4e:	86 e1       	ldi	r24, 0x16	; 22
    9b50:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    9b54:	85 e4       	ldi	r24, 0x45	; 69
    9b56:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
        i2c_stop();			// set stop condition = release bus
    9b5a:	0c 94 1e 1e 	jmp	0x3c3c	; 0x3c3c <i2c_stop>
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    9b5e:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    9b62:	86 ea       	ldi	r24, 0xA6	; 166
    9b64:	80 93 12 02 	sts	0x0212, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    9b68:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    9b6c:	88 23       	and	r24, r24
    9b6e:	41 f5       	brne	.+80     	; 0x9bc0 <initAccelerometer+0x8e>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    9b70:	8d e2       	ldi	r24, 0x2D	; 45
    9b72:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
        i2c_write(0x08);	// measurement mode
    9b76:	88 e0       	ldi	r24, 0x08	; 8
    9b78:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    9b7c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    9b80:	80 91 12 02 	lds	r24, 0x0212
    9b84:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    9b88:	88 23       	and	r24, r24
    9b8a:	d1 f4       	brne	.+52     	; 0x9bc0 <initAccelerometer+0x8e>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    9b8c:	81 e3       	ldi	r24, 0x31	; 49
    9b8e:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    9b92:	80 e0       	ldi	r24, 0x00	; 0
    9b94:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    9b98:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    9b9c:	80 91 12 02 	lds	r24, 0x0212
    9ba0:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    9ba4:	88 23       	and	r24, r24
    9ba6:	61 f4       	brne	.+24     	; 0x9bc0 <initAccelerometer+0x8e>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    9ba8:	8c e2       	ldi	r24, 0x2C	; 44
    9baa:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    9bae:	89 e0       	ldi	r24, 0x09	; 9
    9bb0:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    9bb4:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>
				LSM6DS3US_InitGyroscope(0);
				useAccel = USE_LSM6DS3US;
				verticalThreshold = VERTICAL_THRESHOLD_LSM6DSUS;
			}			
		} else {
			useAccel = USE_ADXL345;
    9bb8:	81 e0       	ldi	r24, 0x01	; 1
    9bba:	80 93 19 03 	sts	0x0319, r24
    9bbe:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    9bc0:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {
			ret = LSM6DS3US_CheckManufacturerId();
    9bc4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LSM6DS3US_CheckManufacturerId>
			if(ret) {	// accelerometer not available
    9bc8:	88 23       	and	r24, r24
    9bca:	21 f0       	breq	.+8      	; 0x9bd4 <initAccelerometer+0xa2>
				useAccel = USE_NO_ACCEL;
    9bcc:	82 e0       	ldi	r24, 0x02	; 2
    9bce:	80 93 19 03 	sts	0x0319, r24
    9bd2:	08 95       	ret
			} else {									
				temp = eeprom_read_word((uint16_t*)MAG_CALIB_CHECK_ADDRESS);
    9bd4:	82 e6       	ldi	r24, 0x62	; 98
    9bd6:	9f e0       	ldi	r25, 0x0F	; 15
    9bd8:	0e 94 1e 5e 	call	0xbc3c	; 0xbc3c <__eerd_word_m2560>
				if(temp==0xAA55) {   // valid calibration data saved in flash, read them
    9bdc:	85 55       	subi	r24, 0x55	; 85
    9bde:	9a 4a       	sbci	r25, 0xAA	; 170
    9be0:	91 f0       	breq	.+36     	; 0x9c06 <initAccelerometer+0xd4>
					readMagCalibFromFlash();
					LSM6DS3US_InitLIS2MLWithCal();
				} else {
					LSM6DS3US_InitLIS2ML(); // Initialization used when user need to calibrate magnetometer
    9be2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LSM6DS3US_InitLIS2ML>
				}
				LSM6DS3US_InitAccelerometer();
    9be6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LSM6DS3US_InitAccelerometer>
				LSM6DS3US_InitGyroscope(0);
    9bea:	80 e0       	ldi	r24, 0x00	; 0
    9bec:	90 e0       	ldi	r25, 0x00	; 0
    9bee:	0e 94 41 03 	call	0x682	; 0x682 <LSM6DS3US_InitGyroscope>
				useAccel = USE_LSM6DS3US;
    9bf2:	83 e0       	ldi	r24, 0x03	; 3
    9bf4:	80 93 19 03 	sts	0x0319, r24
				verticalThreshold = VERTICAL_THRESHOLD_LSM6DSUS;
    9bf8:	88 ec       	ldi	r24, 0xC8	; 200
    9bfa:	92 e3       	ldi	r25, 0x32	; 50
    9bfc:	90 93 16 02 	sts	0x0216, r25
    9c00:	80 93 15 02 	sts	0x0215, r24
    9c04:	08 95       	ret
			if(ret) {	// accelerometer not available
				useAccel = USE_NO_ACCEL;
			} else {									
				temp = eeprom_read_word((uint16_t*)MAG_CALIB_CHECK_ADDRESS);
				if(temp==0xAA55) {   // valid calibration data saved in flash, read them
					readMagCalibFromFlash();
    9c06:	03 d0       	rcall	.+6      	; 0x9c0e <readMagCalibFromFlash>
					LSM6DS3US_InitLIS2MLWithCal();
    9c08:	0e 94 81 01 	call	0x302	; 0x302 <LSM6DS3US_InitLIS2MLWithCal>
    9c0c:	ec cf       	rjmp	.-40     	; 0x9be6 <initAccelerometer+0xb4>

00009c0e <readMagCalibFromFlash>:
	eeprom_update_block(magOffset, (uint8_t*) MAG_CALIB_START_ADDR, 6);
	eeprom_update_word ((uint16_t*) MAG_CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
}

void readMagCalibFromFlash() {
	eeprom_read_block(magOffset, (uint8_t*) MAG_CALIB_START_ADDR, 6);
    9c0e:	86 e5       	ldi	r24, 0x56	; 86
    9c10:	93 e0       	ldi	r25, 0x03	; 3
    9c12:	64 e6       	ldi	r22, 0x64	; 100
    9c14:	7f e0       	ldi	r23, 0x0F	; 15
    9c16:	46 e0       	ldi	r20, 0x06	; 6
    9c18:	50 e0       	ldi	r21, 0x00	; 0
    9c1a:	0c 94 06 5e 	jmp	0xbc0c	; 0xbc0c <__eerd_block_m2560>

00009c1e <readCalibrationFromFlash>:
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
}

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    9c1e:	80 ef       	ldi	r24, 0xF0	; 240
    9c20:	97 e0       	ldi	r25, 0x07	; 7
    9c22:	6c e6       	ldi	r22, 0x6C	; 108
    9c24:	7f e0       	ldi	r23, 0x0F	; 15
    9c26:	40 e9       	ldi	r20, 0x90	; 144
    9c28:	50 e0       	ldi	r21, 0x00	; 0
    9c2a:	0c 94 06 5e 	jmp	0xbc0c	; 0xbc0c <__eerd_block_m2560>

00009c2e <writeMagCalibToFlash>:
}

void writeMagCalibToFlash() {
	eeprom_update_block(magOffset, (uint8_t*) MAG_CALIB_START_ADDR, 6);
    9c2e:	86 e5       	ldi	r24, 0x56	; 86
    9c30:	93 e0       	ldi	r25, 0x03	; 3
    9c32:	64 e6       	ldi	r22, 0x64	; 100
    9c34:	7f e0       	ldi	r23, 0x0F	; 15
    9c36:	46 e0       	ldi	r20, 0x06	; 6
    9c38:	50 e0       	ldi	r21, 0x00	; 0
    9c3a:	0e 94 23 5e 	call	0xbc46	; 0xbc46 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) MAG_CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    9c3e:	82 e6       	ldi	r24, 0x62	; 98
    9c40:	9f e0       	ldi	r25, 0x0F	; 15
    9c42:	65 e5       	ldi	r22, 0x55	; 85
    9c44:	7a ea       	ldi	r23, 0xAA	; 170
    9c46:	0c 94 44 5e 	jmp	0xbc88	; 0xbc88 <__eeupd_word_m2560>

00009c4a <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    9c4a:	80 ef       	ldi	r24, 0xF0	; 240
    9c4c:	97 e0       	ldi	r25, 0x07	; 7
    9c4e:	6c e6       	ldi	r22, 0x6C	; 108
    9c50:	7f e0       	ldi	r23, 0x0F	; 15
    9c52:	40 e9       	ldi	r20, 0x90	; 144
    9c54:	50 e0       	ldi	r21, 0x00	; 0
    9c56:	0e 94 23 5e 	call	0xbc46	; 0xbc46 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    9c5a:	8a e6       	ldi	r24, 0x6A	; 106
    9c5c:	9f e0       	ldi	r25, 0x0F	; 15
    9c5e:	65 e5       	ldi	r22, 0x55	; 85
    9c60:	7a ea       	ldi	r23, 0xAA	; 170
    9c62:	0c 94 44 5e 	jmp	0xbc88	; 0xbc88 <__eeupd_word_m2560>

00009c66 <irCommInitReceiver>:

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    9c66:	81 e0       	ldi	r24, 0x01	; 1
    9c68:	80 93 d3 03 	sts	0x03D3, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    9c6c:	80 93 d6 03 	sts	0x03D6, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    9c70:	80 93 d4 03 	sts	0x03D4, r24
}
    9c74:	08 95       	ret

00009c76 <irCommSendData>:
//	irCommTxSensorMask = sensorMask;
//	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
//}

void irCommSendData(unsigned char value) {
	irCommTxByte = value;
    9c76:	80 93 23 04 	sts	0x0423, r24
	irCommTxByteEnqueued = 1;
    9c7a:	81 e0       	ldi	r24, 0x01	; 1
    9c7c:	80 93 24 04 	sts	0x0424, r24
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
    9c80:	82 e0       	ldi	r24, 0x02	; 2
    9c82:	80 93 d4 03 	sts	0x03D4, r24
}
    9c86:	08 95       	ret

00009c88 <irCommDataSent>:

unsigned char irCommDataSent() {
    9c88:	90 e0       	ldi	r25, 0x00	; 0
    9c8a:	80 91 24 04 	lds	r24, 0x0424
    9c8e:	81 30       	cpi	r24, 0x01	; 1
    9c90:	09 f0       	breq	.+2      	; 0x9c94 <irCommDataSent+0xc>
    9c92:	91 e0       	ldi	r25, 0x01	; 1
	if(irCommTxByteEnqueued==1) {
		return 0;
	} else {
		return 1;
	}
}
    9c94:	89 2f       	mov	r24, r25
    9c96:	08 95       	ret

00009c98 <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailable;
}
    9c98:	80 91 18 04 	lds	r24, 0x0418
    9c9c:	08 95       	ret

00009c9e <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailable = 0;
    9c9e:	10 92 18 04 	sts	0x0418, r1
	return irCommRxLastDataReceived;
}
    9ca2:	80 91 17 04 	lds	r24, 0x0417
    9ca6:	08 95       	ret

00009ca8 <irCommReceivingSensor>:

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}
    9ca8:	80 91 19 02 	lds	r24, 0x0219
    9cac:	08 95       	ret

00009cae <getBearing>:

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    9cae:	83 30       	cpi	r24, 0x03	; 3
    9cb0:	71 f1       	breq	.+92     	; 0x9d0e <getBearing+0x60>
    9cb2:	84 30       	cpi	r24, 0x04	; 4
    9cb4:	60 f0       	brcs	.+24     	; 0x9cce <getBearing+0x20>
    9cb6:	85 30       	cpi	r24, 0x05	; 5
    9cb8:	d1 f0       	breq	.+52     	; 0x9cee <getBearing+0x40>
    9cba:	85 30       	cpi	r24, 0x05	; 5
    9cbc:	80 f0       	brcs	.+32     	; 0x9cde <getBearing+0x30>
    9cbe:	86 30       	cpi	r24, 0x06	; 6
    9cc0:	f1 f0       	breq	.+60     	; 0x9cfe <getBearing+0x50>
    9cc2:	87 30       	cpi	r24, 0x07	; 7
    9cc4:	c1 f0       	breq	.+48     	; 0x9cf6 <getBearing+0x48>
		case 5:
			return 135;
		case 6:
			return 90;
		case 7:
			return 45;
    9cc6:	2f ef       	ldi	r18, 0xFF	; 255
    9cc8:	3f ef       	ldi	r19, 0xFF	; 255
		default:
			return -1;
	}
}
    9cca:	c9 01       	movw	r24, r18
    9ccc:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    9cce:	81 30       	cpi	r24, 0x01	; 1
    9cd0:	d1 f0       	breq	.+52     	; 0x9d06 <getBearing+0x58>
    9cd2:	82 30       	cpi	r24, 0x02	; 2
    9cd4:	40 f0       	brcs	.+16     	; 0x9ce6 <getBearing+0x38>
    9cd6:	26 ea       	ldi	r18, 0xA6	; 166
    9cd8:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    9cda:	c9 01       	movw	r24, r18
    9cdc:	08 95       	ret
		case 1:
			return -45;
		case 2:
			return -90;
		case 3:
			return -135;
    9cde:	24 eb       	ldi	r18, 0xB4	; 180
    9ce0:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    9ce2:	c9 01       	movw	r24, r18
    9ce4:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    9ce6:	20 e0       	ldi	r18, 0x00	; 0
    9ce8:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    9cea:	c9 01       	movw	r24, r18
    9cec:	08 95       	ret
		case 2:
			return -90;
		case 3:
			return -135;
		case 4:
			return 180;
    9cee:	27 e8       	ldi	r18, 0x87	; 135
    9cf0:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    9cf2:	c9 01       	movw	r24, r18
    9cf4:	08 95       	ret
		case 4:
			return 180;
		case 5:
			return 135;
		case 6:
			return 90;
    9cf6:	2d e2       	ldi	r18, 0x2D	; 45
    9cf8:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    9cfa:	c9 01       	movw	r24, r18
    9cfc:	08 95       	ret
		case 3:
			return -135;
		case 4:
			return 180;
		case 5:
			return 135;
    9cfe:	2a e5       	ldi	r18, 0x5A	; 90
    9d00:	30 e0       	ldi	r19, 0x00	; 0
		case 7:
			return 45;
		default:
			return -1;
	}
}
    9d02:	c9 01       	movw	r24, r18
    9d04:	08 95       	ret
signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}

signed int getBearing(unsigned char sensor) {
	switch(sensor) {
    9d06:	23 ed       	ldi	r18, 0xD3	; 211
    9d08:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    9d0a:	c9 01       	movw	r24, r18
    9d0c:	08 95       	ret
		case 0:
			return 0;
		case 1:
			return -45;
		case 2:
			return -90;
    9d0e:	29 e7       	ldi	r18, 0x79	; 121
    9d10:	3f ef       	ldi	r19, 0xFF	; 255
		case 7:
			return 45;
		default:
			return -1;
	}
}
    9d12:	c9 01       	movw	r24, r18
    9d14:	08 95       	ret

00009d16 <resetDebugVariables>:
void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
}

void resetDebugVariables() {
    9d16:	cf 92       	push	r12
    9d18:	df 92       	push	r13
    9d1a:	ef 92       	push	r14
    9d1c:	ff 92       	push	r15
    9d1e:	0f 93       	push	r16
    9d20:	1f 93       	push	r17
	irCommRxMaxSensorIndexTemp=0;
    9d22:	10 92 ef 03 	sts	0x03EF, r1
	irCommRxMaxDiffIndexTemp=0;
    9d26:	10 92 f0 03 	sts	0x03F0, r1
	irCommMaxSensorValueCurrIndexTemp=0;
    9d2a:	10 92 f3 03 	sts	0x03F3, r1
	irCommMinSensorValueCurrIndexTemp=0;
    9d2e:	10 92 f4 03 	sts	0x03F4, r1
	memset(irCommRxMaxSensorTemp, 0xFF, 4);
    9d32:	cc 24       	eor	r12, r12
    9d34:	ca 94       	dec	r12
    9d36:	dc 2c       	mov	r13, r12
    9d38:	76 01       	movw	r14, r12
    9d3a:	c0 92 37 0a 	sts	0x0A37, r12
    9d3e:	d0 92 38 0a 	sts	0x0A38, r13
    9d42:	e0 92 39 0a 	sts	0x0A39, r14
    9d46:	f0 92 3a 0a 	sts	0x0A3A, r15
	memset(irCommRxMaxDiffTemp, 0xFF, 4);
    9d4a:	c0 92 70 0a 	sts	0x0A70, r12
    9d4e:	d0 92 71 0a 	sts	0x0A71, r13
    9d52:	e0 92 72 0a 	sts	0x0A72, r14
    9d56:	f0 92 73 0a 	sts	0x0A73, r15
	memset(irCommMaxSensorValueCurrTemp, 0xFF, 4);
    9d5a:	c0 92 47 04 	sts	0x0447, r12
    9d5e:	d0 92 48 04 	sts	0x0448, r13
    9d62:	e0 92 49 04 	sts	0x0449, r14
    9d66:	f0 92 4a 04 	sts	0x044A, r15
	memset(irCommMinSensorValueCurrTemp, 0xFF, 4);
    9d6a:	c0 92 3b 0a 	sts	0x0A3B, r12
    9d6e:	d0 92 3c 0a 	sts	0x0A3C, r13
    9d72:	e0 92 3d 0a 	sts	0x0A3D, r14
    9d76:	f0 92 3e 0a 	sts	0x0A3E, r15

	irCommStateIndexTemp = 0;					
    9d7a:	10 92 fc 03 	sts	0x03FC, r1
	memset(irCommStateTemp, 0xFF, 14);
    9d7e:	8b e4       	ldi	r24, 0x4B	; 75
    9d80:	94 e0       	ldi	r25, 0x04	; 4
    9d82:	6f ef       	ldi	r22, 0xFF	; 255
    9d84:	70 e0       	ldi	r23, 0x00	; 0
    9d86:	4e e0       	ldi	r20, 0x0E	; 14
    9d88:	50 e0       	ldi	r21, 0x00	; 0
    9d8a:	0e 94 ff 5d 	call	0xbbfe	; 0xbbfe <memset>

	irCommShiftCountFinalIndexTemp = 0;
    9d8e:	10 92 f6 03 	sts	0x03F6, r1
	memset(irCommShiftCountFinalTemp, 0xFF, 2);
    9d92:	0f ef       	ldi	r16, 0xFF	; 255
    9d94:	1f ef       	ldi	r17, 0xFF	; 255
    9d96:	10 93 44 0a 	sts	0x0A44, r17
    9d9a:	00 93 43 0a 	sts	0x0A43, r16
	irCommRxStartBitDetectedIndexTemp = 0;
    9d9e:	10 92 fb 03 	sts	0x03FB, r1
	memset(irCommRxStartBitDetectedTemp, 0xFF, 2);
    9da2:	10 93 84 04 	sts	0x0484, r17
    9da6:	00 93 83 04 	sts	0x0483, r16
	irCommSwitchCountIndexTemp = 0;
    9daa:	10 92 f2 03 	sts	0x03F2, r1
	memset(irCommSwitchCountTemp, 0xFF, 2);
    9dae:	10 93 61 04 	sts	0x0461, r17
    9db2:	00 93 60 04 	sts	0x0460, r16
	irCommMaxSensorSignalFiltIndexTemp = 0;
    9db6:	10 92 ee 03 	sts	0x03EE, r1
	memset(irCommMaxSensorSignalFiltTemp, 0xFF, 80);
    9dba:	85 e8       	ldi	r24, 0x85	; 133
    9dbc:	94 e0       	ldi	r25, 0x04	; 4
    9dbe:	6f ef       	ldi	r22, 0xFF	; 255
    9dc0:	70 e0       	ldi	r23, 0x00	; 0
    9dc2:	40 e5       	ldi	r20, 0x50	; 80
    9dc4:	50 e0       	ldi	r21, 0x00	; 0
    9dc6:	0e 94 ff 5d 	call	0xbbfe	; 0xbbfe <memset>
	irCommMaxSensorSignalIndexTemp = 0;
    9dca:	10 92 ed 03 	sts	0x03ED, r1
	memset(irCommMaxSensorSignalTemp, 0xFF, 80);
    9dce:	89 e7       	ldi	r24, 0x79	; 121
    9dd0:	97 e0       	ldi	r25, 0x07	; 7
    9dd2:	6f ef       	ldi	r22, 0xFF	; 255
    9dd4:	70 e0       	ldi	r23, 0x00	; 0
    9dd6:	40 e5       	ldi	r20, 0x50	; 80
    9dd8:	50 e0       	ldi	r21, 0x00	; 0
    9dda:	0e 94 ff 5d 	call	0xbbfe	; 0xbbfe <memset>
	irCommProxMeanIndexTemp = 0;
    9dde:	10 92 f1 03 	sts	0x03F1, r1
	memset(irCommProxMeanTemp, 0xFF, 4);
    9de2:	c0 92 7d 04 	sts	0x047D, r12
    9de6:	d0 92 7e 04 	sts	0x047E, r13
    9dea:	e0 92 7f 04 	sts	0x047F, r14
    9dee:	f0 92 80 04 	sts	0x0480, r15
	irCommComputeShiftIndexTemp = 0;
    9df2:	10 92 f8 03 	sts	0x03F8, r1
	memset(irCommComputeShiftTemp, 0xFF, 2);
    9df6:	10 93 7b 04 	sts	0x047B, r17
    9dfa:	00 93 7a 04 	sts	0x047A, r16
	irCommShiftCountIndexTemp = 0;
    9dfe:	10 92 f5 03 	sts	0x03F5, r1
	memset(irCommShiftCountTemp, 0xFF, 2);
    9e02:	10 93 8a 0a 	sts	0x0A8A, r17
    9e06:	00 93 89 0a 	sts	0x0A89, r16
	irCommRxPeakHighToLowIndexTemp = 0;
    9e0a:	10 92 f9 03 	sts	0x03F9, r1
	memset(irCommRxPeakHighToLowTemp, 0xFF, 2);
    9e0e:	10 93 d8 04 	sts	0x04D8, r17
    9e12:	00 93 d7 04 	sts	0x04D7, r16
	irCommRxStartPeakDurationIndexTemp = 0;
    9e16:	10 92 fa 03 	sts	0x03FA, r1
	memset(irCommRxStartPeakDurationTemp, 0xFF, 2);
    9e1a:	10 93 1a 06 	sts	0x061A, r17
    9e1e:	00 93 19 06 	sts	0x0619, r16
	irCommStartDiffIndexTemp = 0;
    9e22:	10 92 f7 03 	sts	0x03F7, r1
	memset(irCommSyncStateTemp, 0xFF, 2);
    9e26:	10 93 79 04 	sts	0x0479, r17
    9e2a:	00 93 78 04 	sts	0x0478, r16
	irCommSyncStateIndexTemp = 0;
    9e2e:	10 92 fd 03 	sts	0x03FD, r1
	memset(irCommBitsSignalTemp, 0xFF, 400);
    9e32:	85 ea       	ldi	r24, 0xA5	; 165
    9e34:	98 e0       	ldi	r25, 0x08	; 8
    9e36:	6f ef       	ldi	r22, 0xFF	; 255
    9e38:	70 e0       	ldi	r23, 0x00	; 0
    9e3a:	40 e9       	ldi	r20, 0x90	; 144
    9e3c:	51 e0       	ldi	r21, 0x01	; 1
    9e3e:	0e 94 ff 5d 	call	0xbbfe	; 0xbbfe <memset>
	irCommBitsSignalIndexTemp = 0;
    9e42:	10 92 fe 03 	sts	0x03FE, r1
	memset(irCommRxBitReceivedTemp, 0xFF, 10);
    9e46:	8d e6       	ldi	r24, 0x6D	; 109
    9e48:	97 e0       	ldi	r25, 0x07	; 7
    9e4a:	6f ef       	ldi	r22, 0xFF	; 255
    9e4c:	70 e0       	ldi	r23, 0x00	; 0
    9e4e:	4a e0       	ldi	r20, 0x0A	; 10
    9e50:	50 e0       	ldi	r21, 0x00	; 0
    9e52:	0e 94 ff 5d 	call	0xbbfe	; 0xbbfe <memset>
	irCommRxBitReceivedIndexTemp = 0;
    9e56:	10 92 ff 03 	sts	0x03FF, r1
	
	
}
    9e5a:	1f 91       	pop	r17
    9e5c:	0f 91       	pop	r16
    9e5e:	ff 90       	pop	r15
    9e60:	ef 90       	pop	r14
    9e62:	df 90       	pop	r13
    9e64:	cf 90       	pop	r12
    9e66:	08 95       	ret

00009e68 <irCommTasks>:

void irCommTasks() {
    9e68:	2f 92       	push	r2
    9e6a:	3f 92       	push	r3
    9e6c:	4f 92       	push	r4
    9e6e:	5f 92       	push	r5
    9e70:	6f 92       	push	r6
    9e72:	7f 92       	push	r7
    9e74:	8f 92       	push	r8
    9e76:	9f 92       	push	r9
    9e78:	af 92       	push	r10
    9e7a:	bf 92       	push	r11
    9e7c:	cf 92       	push	r12
    9e7e:	df 92       	push	r13
    9e80:	ef 92       	push	r14
    9e82:	ff 92       	push	r15
    9e84:	0f 93       	push	r16
    9e86:	1f 93       	push	r17
    9e88:	cf 93       	push	r28
    9e8a:	df 93       	push	r29
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
    9e8c:	00 91 d5 03 	lds	r16, 0x03D5
    9e90:	01 30       	cpi	r16, 0x01	; 1
    9e92:	09 f4       	brne	.+2      	; 0x9e96 <irCommTasks+0x2e>
    9e94:	d2 c0       	rjmp	.+420    	; 0xa03a <irCommTasks+0x1d2>
			case IRCOMM_RX_STOP:
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
    9e96:	02 30       	cpi	r16, 0x02	; 2
    9e98:	99 f0       	breq	.+38     	; 0x9ec0 <irCommTasks+0x58>

		}

	}

}
    9e9a:	df 91       	pop	r29
    9e9c:	cf 91       	pop	r28
    9e9e:	1f 91       	pop	r17
    9ea0:	0f 91       	pop	r16
    9ea2:	ff 90       	pop	r15
    9ea4:	ef 90       	pop	r14
    9ea6:	df 90       	pop	r13
    9ea8:	cf 90       	pop	r12
    9eaa:	bf 90       	pop	r11
    9eac:	af 90       	pop	r10
    9eae:	9f 90       	pop	r9
    9eb0:	8f 90       	pop	r8
    9eb2:	7f 90       	pop	r7
    9eb4:	6f 90       	pop	r6
    9eb6:	5f 90       	pop	r5
    9eb8:	4f 90       	pop	r4
    9eba:	3f 90       	pop	r3
    9ebc:	2f 90       	pop	r2
    9ebe:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
    9ec0:	80 91 d6 03 	lds	r24, 0x03D6
    9ec4:	82 30       	cpi	r24, 0x02	; 2
    9ec6:	09 f4       	brne	.+2      	; 0x9eca <irCommTasks+0x62>
    9ec8:	68 c3       	rjmp	.+1744   	; 0xa59a <irCommTasks+0x732>
    9eca:	85 30       	cpi	r24, 0x05	; 5
    9ecc:	31 f7       	brne	.-52     	; 0x9e9a <irCommTasks+0x32>
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:				
				//updateBlueLed(255);
				//updateBlueLed(0);
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
    9ece:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    9ed2:	20 91 de 03 	lds	r18, 0x03DE
    9ed6:	30 91 df 03 	lds	r19, 0x03DF
    9eda:	40 91 e0 03 	lds	r20, 0x03E0
    9ede:	50 91 e1 03 	lds	r21, 0x03E1
    9ee2:	62 1b       	sub	r22, r18
    9ee4:	73 0b       	sbc	r23, r19
    9ee6:	84 0b       	sbc	r24, r20
    9ee8:	95 0b       	sbc	r25, r21
    9eea:	60 93 da 03 	sts	0x03DA, r22
    9eee:	70 93 db 03 	sts	0x03DB, r23
    9ef2:	80 93 dc 03 	sts	0x03DC, r24
    9ef6:	90 93 dd 03 	sts	0x03DD, r25
				irCommTickCounter2 = getTime100MicroSec();
    9efa:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    9efe:	60 93 de 03 	sts	0x03DE, r22
    9f02:	70 93 df 03 	sts	0x03DF, r23
    9f06:	80 93 e0 03 	sts	0x03E0, r24
    9f0a:	90 93 e1 03 	sts	0x03E1, r25
				irCommTxBitToTransmit[0] = 2;	// start bit 1
    9f0e:	00 93 62 04 	sts	0x0462, r16
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
    9f12:	83 e0       	ldi	r24, 0x03	; 3
    9f14:	80 93 63 04 	sts	0x0463, r24
				irCommTxCrc = 0;
    9f18:	10 92 29 04 	sts	0x0429, r1
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9f1c:	30 91 23 04 	lds	r19, 0x0423
    9f20:	83 2f       	mov	r24, r19
    9f22:	90 e0       	ldi	r25, 0x00	; 0
    9f24:	81 70       	andi	r24, 0x01	; 1
    9f26:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9f28:	80 93 6b 04 	sts	0x046B, r24
					if(irCommTempValue==1) {
    9f2c:	01 97       	sbiw	r24, 0x01	; 1
    9f2e:	09 f4       	brne	.+2      	; 0x9f32 <irCommTasks+0xca>
    9f30:	80 c7       	rjmp	.+3840   	; 0xae32 <irCommTasks+0xfca>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9f32:	83 2f       	mov	r24, r19
    9f34:	90 e0       	ldi	r25, 0x00	; 0
    9f36:	95 95       	asr	r25
    9f38:	87 95       	ror	r24
    9f3a:	81 70       	andi	r24, 0x01	; 1
    9f3c:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9f3e:	80 93 6a 04 	sts	0x046A, r24
					if(irCommTempValue==1) {
    9f42:	01 97       	sbiw	r24, 0x01	; 1
    9f44:	09 f4       	brne	.+2      	; 0x9f48 <irCommTasks+0xe0>
    9f46:	71 c7       	rjmp	.+3810   	; 0xae2a <irCommTasks+0xfc2>
    9f48:	20 91 29 04 	lds	r18, 0x0429
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9f4c:	83 2f       	mov	r24, r19
    9f4e:	90 e0       	ldi	r25, 0x00	; 0
    9f50:	95 95       	asr	r25
    9f52:	87 95       	ror	r24
    9f54:	95 95       	asr	r25
    9f56:	87 95       	ror	r24
    9f58:	81 70       	andi	r24, 0x01	; 1
    9f5a:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9f5c:	80 93 69 04 	sts	0x0469, r24
					if(irCommTempValue==1) {
    9f60:	01 97       	sbiw	r24, 0x01	; 1
    9f62:	09 f4       	brne	.+2      	; 0x9f66 <irCommTasks+0xfe>
    9f64:	60 c7       	rjmp	.+3776   	; 0xae26 <irCommTasks+0xfbe>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9f66:	83 2f       	mov	r24, r19
    9f68:	90 e0       	ldi	r25, 0x00	; 0
    9f6a:	95 95       	asr	r25
    9f6c:	87 95       	ror	r24
    9f6e:	95 95       	asr	r25
    9f70:	87 95       	ror	r24
    9f72:	95 95       	asr	r25
    9f74:	87 95       	ror	r24
    9f76:	81 70       	andi	r24, 0x01	; 1
    9f78:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9f7a:	80 93 68 04 	sts	0x0468, r24
					if(irCommTempValue==1) {
    9f7e:	01 97       	sbiw	r24, 0x01	; 1
    9f80:	09 f4       	brne	.+2      	; 0x9f84 <irCommTasks+0x11c>
    9f82:	4f c7       	rjmp	.+3742   	; 0xae22 <irCommTasks+0xfba>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9f84:	83 2f       	mov	r24, r19
    9f86:	90 e0       	ldi	r25, 0x00	; 0
    9f88:	95 95       	asr	r25
    9f8a:	87 95       	ror	r24
    9f8c:	95 95       	asr	r25
    9f8e:	87 95       	ror	r24
    9f90:	95 95       	asr	r25
    9f92:	87 95       	ror	r24
    9f94:	95 95       	asr	r25
    9f96:	87 95       	ror	r24
    9f98:	81 70       	andi	r24, 0x01	; 1
    9f9a:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9f9c:	80 93 67 04 	sts	0x0467, r24
					if(irCommTempValue==1) {
    9fa0:	01 97       	sbiw	r24, 0x01	; 1
    9fa2:	09 f4       	brne	.+2      	; 0x9fa6 <irCommTasks+0x13e>
    9fa4:	3c c7       	rjmp	.+3704   	; 0xae1e <irCommTasks+0xfb6>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9fa6:	83 2f       	mov	r24, r19
    9fa8:	90 e0       	ldi	r25, 0x00	; 0
    9faa:	95 95       	asr	r25
    9fac:	87 95       	ror	r24
    9fae:	95 95       	asr	r25
    9fb0:	87 95       	ror	r24
    9fb2:	95 95       	asr	r25
    9fb4:	87 95       	ror	r24
    9fb6:	95 95       	asr	r25
    9fb8:	87 95       	ror	r24
    9fba:	95 95       	asr	r25
    9fbc:	87 95       	ror	r24
    9fbe:	81 70       	andi	r24, 0x01	; 1
    9fc0:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9fc2:	80 93 66 04 	sts	0x0466, r24
					if(irCommTempValue==1) {
    9fc6:	01 97       	sbiw	r24, 0x01	; 1
    9fc8:	09 f4       	brne	.+2      	; 0x9fcc <irCommTasks+0x164>
    9fca:	27 c7       	rjmp	.+3662   	; 0xae1a <irCommTasks+0xfb2>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9fcc:	83 2f       	mov	r24, r19
    9fce:	90 e0       	ldi	r25, 0x00	; 0
    9fd0:	08 2e       	mov	r0, r24
    9fd2:	89 2f       	mov	r24, r25
    9fd4:	00 0c       	add	r0, r0
    9fd6:	88 1f       	adc	r24, r24
    9fd8:	99 0b       	sbc	r25, r25
    9fda:	00 0c       	add	r0, r0
    9fdc:	88 1f       	adc	r24, r24
    9fde:	99 1f       	adc	r25, r25
    9fe0:	81 70       	andi	r24, 0x01	; 1
    9fe2:	90 70       	andi	r25, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9fe4:	80 93 65 04 	sts	0x0465, r24
					if(irCommTempValue==1) {
    9fe8:	01 97       	sbiw	r24, 0x01	; 1
    9fea:	09 f4       	brne	.+2      	; 0x9fee <irCommTasks+0x186>
    9fec:	14 c7       	rjmp	.+3624   	; 0xae16 <irCommTasks+0xfae>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    9fee:	83 2f       	mov	r24, r19
    9ff0:	90 e0       	ldi	r25, 0x00	; 0
    9ff2:	88 0f       	add	r24, r24
    9ff4:	89 2f       	mov	r24, r25
    9ff6:	88 1f       	adc	r24, r24
    9ff8:	99 0b       	sbc	r25, r25
    9ffa:	91 95       	neg	r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    9ffc:	80 93 64 04 	sts	0x0464, r24
					if(irCommTempValue==1) {
    a000:	81 30       	cpi	r24, 0x01	; 1
    a002:	91 05       	cpc	r25, r1
    a004:	09 f4       	brne	.+2      	; 0xa008 <irCommTasks+0x1a0>
    a006:	05 c7       	rjmp	.+3594   	; 0xae12 <irCommTasks+0xfaa>
						irCommTxCrc++;
    a008:	90 93 d8 03 	sts	0x03D8, r25
    a00c:	80 93 d7 03 	sts	0x03D7, r24
					}
					//irCommTxBitToTransmit[9-i] = 2;
				}
				irCommTxCrc = irCommTxCrc % 4;
				irCommTxCrc = 4 - irCommTxCrc;
    a010:	23 70       	andi	r18, 0x03	; 3
    a012:	84 e0       	ldi	r24, 0x04	; 4
    a014:	82 1b       	sub	r24, r18
    a016:	80 93 29 04 	sts	0x0429, r24
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
    a01a:	98 2f       	mov	r25, r24
    a01c:	96 95       	lsr	r25
    a01e:	91 70       	andi	r25, 0x01	; 1
    a020:	90 93 6c 04 	sts	0x046C, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
    a024:	81 70       	andi	r24, 0x01	; 1
    a026:	80 93 6d 04 	sts	0x046D, r24
				irCommTxBitCount = 0;							
    a02a:	10 92 2a 04 	sts	0x042A, r1
				irCommTxPulseState = 0;	
    a02e:	10 92 2b 04 	sts	0x042B, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
    a032:	82 e0       	ldi	r24, 0x02	; 2
    a034:	80 93 d6 03 	sts	0x03D6, r24
    a038:	30 cf       	rjmp	.-416    	; 0x9e9a <irCommTasks+0x32>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    a03a:	10 91 d6 03 	lds	r17, 0x03D6
    a03e:	13 30       	cpi	r17, 0x03	; 3
    a040:	09 f4       	brne	.+2      	; 0xa044 <irCommTasks+0x1dc>
    a042:	c9 c4       	rjmp	.+2450   	; 0xa9d6 <irCommTasks+0xb6e>
    a044:	14 30       	cpi	r17, 0x04	; 4
    a046:	08 f4       	brcc	.+2      	; 0xa04a <irCommTasks+0x1e2>
    a048:	af c0       	rjmp	.+350    	; 0xa1a8 <irCommTasks+0x340>
    a04a:	17 30       	cpi	r17, 0x07	; 7
    a04c:	09 f4       	brne	.+2      	; 0xa050 <irCommTasks+0x1e8>
    a04e:	74 c4       	rjmp	.+2280   	; 0xa938 <irCommTasks+0xad0>
    a050:	18 30       	cpi	r17, 0x08	; 8
    a052:	09 f4       	brne	.+2      	; 0xa056 <irCommTasks+0x1ee>
    a054:	dc c2       	rjmp	.+1464   	; 0xa60e <irCommTasks+0x7a6>
    a056:	16 30       	cpi	r17, 0x06	; 6
    a058:	09 f0       	breq	.+2      	; 0xa05c <irCommTasks+0x1f4>
    a05a:	1f cf       	rjmp	.-450    	; 0x9e9a <irCommTasks+0x32>
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
    a05c:	80 e0       	ldi	r24, 0x00	; 0
    a05e:	94 e0       	ldi	r25, 0x04	; 4
    a060:	90 93 0a 04 	sts	0x040A, r25
    a064:	80 93 09 04 	sts	0x0409, r24
				irCommTempMax = 0;
    a068:	10 92 08 04 	sts	0x0408, r1
    a06c:	10 92 07 04 	sts	0x0407, r1
    a070:	80 91 1f 04 	lds	r24, 0x041F
    a074:	90 91 20 04 	lds	r25, 0x0420
    a078:	88 0f       	add	r24, r24
    a07a:	99 1f       	adc	r25, r25
    a07c:	c0 91 5b 07 	lds	r28, 0x075B
    a080:	d0 91 5c 07 	lds	r29, 0x075C
    a084:	c8 0f       	add	r28, r24
    a086:	d9 1f       	adc	r29, r25
    a088:	b7 e4       	ldi	r27, 0x47	; 71
    a08a:	cb 2e       	mov	r12, r27
    a08c:	ba e0       	ldi	r27, 0x0A	; 10
    a08e:	db 2e       	mov	r13, r27
    a090:	f6 01       	movw	r30, r12
    a092:	ee 24       	eor	r14, r14
    a094:	ff 24       	eor	r15, r15
    a096:	87 01       	movw	r16, r14
    a098:	60 e0       	ldi	r22, 0x00	; 0
    a09a:	74 e0       	ldi	r23, 0x04	; 4
    a09c:	40 e0       	ldi	r20, 0x00	; 0
    a09e:	50 e0       	ldi	r21, 0x00	; 0
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    a0a0:	28 81       	ld	r18, Y
    a0a2:	39 81       	ldd	r19, Y+1	; 0x01
    a0a4:	31 83       	std	Z+1, r19	; 0x01
    a0a6:	20 83       	st	Z, r18
					irCommProxSum += irCommMaxSensorSignal[i];
    a0a8:	c9 01       	movw	r24, r18
    a0aa:	aa 27       	eor	r26, r26
    a0ac:	97 fd       	sbrc	r25, 7
    a0ae:	a0 95       	com	r26
    a0b0:	ba 2f       	mov	r27, r26
    a0b2:	e8 0e       	add	r14, r24
    a0b4:	f9 1e       	adc	r15, r25
    a0b6:	0a 1f       	adc	r16, r26
    a0b8:	1b 1f       	adc	r17, r27
					if(irCommTempMin > irCommMaxSensorSignal[i]) {
    a0ba:	26 17       	cp	r18, r22
    a0bc:	37 07       	cpc	r19, r23
    a0be:	2c f4       	brge	.+10     	; 0xa0ca <irCommTasks+0x262>
						irCommTempMin = irCommMaxSensorSignal[i];
    a0c0:	30 93 0a 04 	sts	0x040A, r19
    a0c4:	20 93 09 04 	sts	0x0409, r18
    a0c8:	b9 01       	movw	r22, r18
					}
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
    a0ca:	42 17       	cp	r20, r18
    a0cc:	53 07       	cpc	r21, r19
    a0ce:	2c f4       	brge	.+10     	; 0xa0da <irCommTasks+0x272>
						irCommTempMax = irCommMaxSensorSignal[i];
    a0d0:	30 93 08 04 	sts	0x0408, r19
    a0d4:	20 93 07 04 	sts	0x0407, r18
    a0d8:	a9 01       	movw	r20, r18
    a0da:	60 96       	adiw	r28, 0x10	; 16
    a0dc:	32 96       	adiw	r30, 0x02	; 2
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a0de:	9a e0       	ldi	r25, 0x0A	; 10
    a0e0:	ef 36       	cpi	r30, 0x6F	; 111
    a0e2:	f9 07       	cpc	r31, r25
    a0e4:	e9 f6       	brne	.-70     	; 0xa0a0 <irCommTasks+0x238>
    a0e6:	e0 92 03 04 	sts	0x0403, r14
    a0ea:	f0 92 04 04 	sts	0x0404, r15
    a0ee:	00 93 05 04 	sts	0x0405, r16
    a0f2:	10 93 06 04 	sts	0x0406, r17
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
						irCommTempMax = irCommMaxSensorSignal[i];
					}
				}

				if((irCommTempMax-irCommTempMin) < IRCOMM_DETECTION_AMPLITUDE_THR) {	// error...no significant signal perceived					
    a0f6:	46 1b       	sub	r20, r22
    a0f8:	57 0b       	sbc	r21, r23
    a0fa:	40 35       	cpi	r20, 0x50	; 80
    a0fc:	51 05       	cpc	r21, r1
    a0fe:	0c f4       	brge	.+2      	; 0xa102 <irCommTasks+0x29a>
    a100:	36 c6       	rjmp	.+3180   	; 0xad6e <irCommTasks+0xf06>

					resetDebugVariables();
					break;
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    a102:	b7 01       	movw	r22, r14
    a104:	c8 01       	movw	r24, r16
    a106:	24 e1       	ldi	r18, 0x14	; 20
    a108:	30 e0       	ldi	r19, 0x00	; 0
    a10a:	40 e0       	ldi	r20, 0x00	; 0
    a10c:	50 e0       	ldi	r21, 0x00	; 0
    a10e:	0e 94 5f 5d 	call	0xbabe	; 0xbabe <__divmodsi4>
    a112:	a9 01       	movw	r20, r18
    a114:	30 93 0e 04 	sts	0x040E, r19
    a118:	20 93 0d 04 	sts	0x040D, r18
    a11c:	30 91 fe 03 	lds	r19, 0x03FE

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;
    a120:	67 ec       	ldi	r22, 0xC7	; 199
    a122:	d6 01       	movw	r26, r12
    a124:	8d 91       	ld	r24, X+
    a126:	9c 91       	ld	r25, X
    a128:	11 97       	sbiw	r26, 0x01	; 1
    a12a:	84 1b       	sub	r24, r20
    a12c:	95 0b       	sbc	r25, r21
    a12e:	8d 93       	st	X+, r24
    a130:	9c 93       	st	X, r25
    a132:	27 ec       	ldi	r18, 0xC7	; 199
    a134:	36 17       	cp	r19, r22
    a136:	08 f4       	brcc	.+2      	; 0xa13a <irCommTasks+0x2d2>
    a138:	23 2f       	mov	r18, r19

					if(irCommBitsSignalIndexTemp>199) {
						irCommBitsSignalIndexTemp = 199;
						//updateRedLed(0);
					}
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
    a13a:	e2 2f       	mov	r30, r18
    a13c:	f0 e0       	ldi	r31, 0x00	; 0
    a13e:	ee 0f       	add	r30, r30
    a140:	ff 1f       	adc	r31, r31
    a142:	eb 55       	subi	r30, 0x5B	; 91
    a144:	f7 4f       	sbci	r31, 0xF7	; 247
    a146:	91 83       	std	Z+1, r25	; 0x01
    a148:	80 83       	st	Z, r24
					irCommBitsSignalIndexTemp++;
    a14a:	32 2f       	mov	r19, r18
    a14c:	3f 5f       	subi	r19, 0xFF	; 255
    a14e:	e2 e0       	ldi	r30, 0x02	; 2
    a150:	f0 e0       	ldi	r31, 0x00	; 0
    a152:	ce 0e       	add	r12, r30
    a154:	df 1e       	adc	r13, r31
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a156:	ff e6       	ldi	r31, 0x6F	; 111
    a158:	cf 16       	cp	r12, r31
    a15a:	fa e0       	ldi	r31, 0x0A	; 10
    a15c:	df 06       	cpc	r13, r31
    a15e:	09 f7       	brne	.-62     	; 0xa122 <irCommTasks+0x2ba>
    a160:	30 93 fe 03 	sts	0x03FE, r19
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommBitsSignalIndexTemp++;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    a164:	80 91 47 0a 	lds	r24, 0x0A47
    a168:	90 91 48 0a 	lds	r25, 0x0A48
    a16c:	18 16       	cp	r1, r24
    a16e:	19 06       	cpc	r1, r25
    a170:	0c f0       	brlt	.+2      	; 0xa174 <irCommTasks+0x30c>
    a172:	05 c7       	rjmp	.+3594   	; 0xaf7e <irCommTasks+0x1116>
					irCommSignalState = 1;
    a174:	81 e0       	ldi	r24, 0x01	; 1
    a176:	80 93 0f 04 	sts	0x040F, r24
    a17a:	28 2f       	mov	r18, r24
				} else {
					irCommSignalState = -1;
    a17c:	e9 e4       	ldi	r30, 0x49	; 73
    a17e:	fa e0       	ldi	r31, 0x0A	; 10
    a180:	30 e0       	ldi	r19, 0x00	; 0
    a182:	08 c0       	rjmp	.+16     	; 0xa194 <irCommTasks+0x32c>
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    a184:	27 fd       	sbrc	r18, 7
    a186:	40 c2       	rjmp	.+1152   	; 0xa608 <irCommTasks+0x7a0>
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
							irCommSwitchCount++;
    a188:	32 96       	adiw	r30, 0x02	; 2
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    a18a:	8a e0       	ldi	r24, 0x0A	; 10
    a18c:	ef 36       	cpi	r30, 0x6F	; 111
    a18e:	f8 07       	cpc	r31, r24
    a190:	09 f4       	brne	.+2      	; 0xa194 <irCommTasks+0x32c>
    a192:	fc c5       	rjmp	.+3064   	; 0xad8c <irCommTasks+0xf24>
					if(irCommMaxSensorSignal[i] > 0) {
    a194:	80 81       	ld	r24, Z
    a196:	91 81       	ldd	r25, Z+1	; 0x01
    a198:	18 16       	cp	r1, r24
    a19a:	19 06       	cpc	r1, r25
    a19c:	9c f3       	brlt	.-26     	; 0xa184 <irCommTasks+0x31c>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    a19e:	12 16       	cp	r1, r18
    a1a0:	9c f7       	brge	.-26     	; 0xa188 <irCommTasks+0x320>
							irCommSignalState = -1;
							irCommSwitchCount++;
    a1a2:	3f 5f       	subi	r19, 0xFF	; 255
    a1a4:	2f ef       	ldi	r18, 0xFF	; 255
    a1a6:	f0 cf       	rjmp	.-32     	; 0xa188 <irCommTasks+0x320>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    a1a8:	11 30       	cpi	r17, 0x01	; 1
    a1aa:	09 f4       	brne	.+2      	; 0xa1ae <irCommTasks+0x346>
    a1ac:	ee c3       	rjmp	.+2012   	; 0xa98a <irCommTasks+0xb22>
    a1ae:	12 30       	cpi	r17, 0x02	; 2
    a1b0:	09 f0       	breq	.+2      	; 0xa1b4 <irCommTasks+0x34c>
    a1b2:	73 ce       	rjmp	.-794    	; 0x9e9a <irCommTasks+0x32>
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a1b4:	c0 91 59 04 	lds	r28, 0x0459
    a1b8:	d0 91 5a 04 	lds	r29, 0x045A
    a1bc:	60 91 45 04 	lds	r22, 0x0445
    a1c0:	70 91 46 04 	lds	r23, 0x0446
    a1c4:	88 81       	ld	r24, Y
    a1c6:	99 81       	ldd	r25, Y+1	; 0x01
    a1c8:	db 01       	movw	r26, r22
    a1ca:	2d 91       	ld	r18, X+
    a1cc:	3c 91       	ld	r19, X
    a1ce:	82 1b       	sub	r24, r18
    a1d0:	93 0b       	sbc	r25, r19
    a1d2:	80 35       	cpi	r24, 0x50	; 80
    a1d4:	91 05       	cpc	r25, r1
    a1d6:	0c f0       	brlt	.+2      	; 0xa1da <irCommTasks+0x372>
    a1d8:	3a c6       	rjmp	.+3188   	; 0xae4e <irCommTasks+0xfe6>
    a1da:	40 91 21 04 	lds	r20, 0x0421
    a1de:	8a 81       	ldd	r24, Y+2	; 0x02
    a1e0:	9b 81       	ldd	r25, Y+3	; 0x03
    a1e2:	fb 01       	movw	r30, r22
    a1e4:	22 81       	ldd	r18, Z+2	; 0x02
    a1e6:	33 81       	ldd	r19, Z+3	; 0x03
    a1e8:	82 1b       	sub	r24, r18
    a1ea:	93 0b       	sbc	r25, r19
    a1ec:	80 35       	cpi	r24, 0x50	; 80
    a1ee:	91 05       	cpc	r25, r1
    a1f0:	1c f0       	brlt	.+6      	; 0xa1f8 <irCommTasks+0x390>
						irCommRxNumReceivingSensors++;
    a1f2:	4f 5f       	subi	r20, 0xFF	; 255
    a1f4:	40 93 21 04 	sts	0x0421, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a1f8:	8c 81       	ldd	r24, Y+4	; 0x04
    a1fa:	9d 81       	ldd	r25, Y+5	; 0x05
    a1fc:	db 01       	movw	r26, r22
    a1fe:	14 96       	adiw	r26, 0x04	; 4
    a200:	2d 91       	ld	r18, X+
    a202:	3c 91       	ld	r19, X
    a204:	15 97       	sbiw	r26, 0x05	; 5
    a206:	82 1b       	sub	r24, r18
    a208:	93 0b       	sbc	r25, r19
    a20a:	80 35       	cpi	r24, 0x50	; 80
    a20c:	91 05       	cpc	r25, r1
    a20e:	1c f0       	brlt	.+6      	; 0xa216 <irCommTasks+0x3ae>
						irCommRxNumReceivingSensors++;
    a210:	4f 5f       	subi	r20, 0xFF	; 255
    a212:	40 93 21 04 	sts	0x0421, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a216:	8e 81       	ldd	r24, Y+6	; 0x06
    a218:	9f 81       	ldd	r25, Y+7	; 0x07
    a21a:	fb 01       	movw	r30, r22
    a21c:	26 81       	ldd	r18, Z+6	; 0x06
    a21e:	37 81       	ldd	r19, Z+7	; 0x07
    a220:	82 1b       	sub	r24, r18
    a222:	93 0b       	sbc	r25, r19
    a224:	80 35       	cpi	r24, 0x50	; 80
    a226:	91 05       	cpc	r25, r1
    a228:	1c f0       	brlt	.+6      	; 0xa230 <irCommTasks+0x3c8>
						irCommRxNumReceivingSensors++;
    a22a:	4f 5f       	subi	r20, 0xFF	; 255
    a22c:	40 93 21 04 	sts	0x0421, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a230:	88 85       	ldd	r24, Y+8	; 0x08
    a232:	99 85       	ldd	r25, Y+9	; 0x09
    a234:	db 01       	movw	r26, r22
    a236:	18 96       	adiw	r26, 0x08	; 8
    a238:	2d 91       	ld	r18, X+
    a23a:	3c 91       	ld	r19, X
    a23c:	19 97       	sbiw	r26, 0x09	; 9
    a23e:	82 1b       	sub	r24, r18
    a240:	93 0b       	sbc	r25, r19
    a242:	80 35       	cpi	r24, 0x50	; 80
    a244:	91 05       	cpc	r25, r1
    a246:	1c f0       	brlt	.+6      	; 0xa24e <irCommTasks+0x3e6>
						irCommRxNumReceivingSensors++;
    a248:	4f 5f       	subi	r20, 0xFF	; 255
    a24a:	40 93 21 04 	sts	0x0421, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a24e:	8a 85       	ldd	r24, Y+10	; 0x0a
    a250:	9b 85       	ldd	r25, Y+11	; 0x0b
    a252:	fb 01       	movw	r30, r22
    a254:	22 85       	ldd	r18, Z+10	; 0x0a
    a256:	33 85       	ldd	r19, Z+11	; 0x0b
    a258:	82 1b       	sub	r24, r18
    a25a:	93 0b       	sbc	r25, r19
    a25c:	80 35       	cpi	r24, 0x50	; 80
    a25e:	91 05       	cpc	r25, r1
    a260:	1c f0       	brlt	.+6      	; 0xa268 <irCommTasks+0x400>
						irCommRxNumReceivingSensors++;
    a262:	4f 5f       	subi	r20, 0xFF	; 255
    a264:	40 93 21 04 	sts	0x0421, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a268:	8c 85       	ldd	r24, Y+12	; 0x0c
    a26a:	9d 85       	ldd	r25, Y+13	; 0x0d
    a26c:	db 01       	movw	r26, r22
    a26e:	1c 96       	adiw	r26, 0x0c	; 12
    a270:	2d 91       	ld	r18, X+
    a272:	3c 91       	ld	r19, X
    a274:	1d 97       	sbiw	r26, 0x0d	; 13
    a276:	82 1b       	sub	r24, r18
    a278:	93 0b       	sbc	r25, r19
    a27a:	80 35       	cpi	r24, 0x50	; 80
    a27c:	91 05       	cpc	r25, r1
    a27e:	1c f0       	brlt	.+6      	; 0xa286 <irCommTasks+0x41e>
						irCommRxNumReceivingSensors++;
    a280:	4f 5f       	subi	r20, 0xFF	; 255
    a282:	40 93 21 04 	sts	0x0421, r20
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a286:	8e 85       	ldd	r24, Y+14	; 0x0e
    a288:	9f 85       	ldd	r25, Y+15	; 0x0f
    a28a:	fb 01       	movw	r30, r22
    a28c:	26 85       	ldd	r18, Z+14	; 0x0e
    a28e:	37 85       	ldd	r19, Z+15	; 0x0f
    a290:	82 1b       	sub	r24, r18
    a292:	93 0b       	sbc	r25, r19
    a294:	80 35       	cpi	r24, 0x50	; 80
    a296:	91 05       	cpc	r25, r1
    a298:	1c f0       	brlt	.+6      	; 0xa2a0 <irCommTasks+0x438>
						irCommRxNumReceivingSensors++;
    a29a:	4f 5f       	subi	r20, 0xFF	; 255
    a29c:	40 93 21 04 	sts	0x0421, r20
					}					
				}
				if(irCommRxNumReceivingSensors==0) {
    a2a0:	44 23       	and	r20, r20
    a2a2:	09 f4       	brne	.+2      	; 0xa2a6 <irCommTasks+0x43e>
    a2a4:	0e c6       	rjmp	.+3100   	; 0xaec2 <irCommTasks+0x105a>
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
					}
				} else {
					if(irCommRxStartBitDetected==0) {
    a2a6:	80 91 1a 04 	lds	r24, 0x041A
    a2aa:	88 23       	and	r24, r24
    a2ac:	09 f0       	breq	.+2      	; 0xa2b0 <irCommTasks+0x448>
    a2ae:	f2 c5       	rjmp	.+3044   	; 0xae94 <irCommTasks+0x102c>
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
    a2b0:	80 91 1f 04 	lds	r24, 0x041F
    a2b4:	90 91 20 04 	lds	r25, 0x0420
    a2b8:	87 30       	cpi	r24, 0x07	; 7
    a2ba:	91 05       	cpc	r25, r1
    a2bc:	0c f0       	brlt	.+2      	; 0xa2c0 <irCommTasks+0x458>
    a2be:	9d c6       	rjmp	.+3386   	; 0xaffa <irCommTasks+0x1192>
							irCommRxMaxSensor++;
    a2c0:	01 96       	adiw	r24, 0x01	; 1
    a2c2:	90 93 20 04 	sts	0x0420, r25
    a2c6:	80 93 1f 04 	sts	0x041F, r24
    a2ca:	ac 01       	movw	r20, r24
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a2cc:	fa 01       	movw	r30, r20
    a2ce:	ee 0f       	add	r30, r30
    a2d0:	ff 1f       	adc	r31, r31
    a2d2:	de 01       	movw	r26, r28
    a2d4:	ae 0f       	add	r26, r30
    a2d6:	bf 1f       	adc	r27, r31
    a2d8:	e6 0f       	add	r30, r22
    a2da:	f7 1f       	adc	r31, r23
    a2dc:	0d 90       	ld	r0, X+
    a2de:	bc 91       	ld	r27, X
    a2e0:	a0 2d       	mov	r26, r0
    a2e2:	80 81       	ld	r24, Z
    a2e4:	91 81       	ldd	r25, Z+1	; 0x01
    a2e6:	a8 1b       	sub	r26, r24
    a2e8:	b9 0b       	sbc	r27, r25
    a2ea:	a0 35       	cpi	r26, 0x50	; 80
    a2ec:	b1 05       	cpc	r27, r1
    a2ee:	0c f0       	brlt	.+2      	; 0xa2f2 <irCommTasks+0x48a>
    a2f0:	6d c7       	rjmp	.+3802   	; 0xb1cc <irCommTasks+0x1364>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    a2f2:	47 30       	cpi	r20, 0x07	; 7
    a2f4:	51 05       	cpc	r21, r1
    a2f6:	0c f4       	brge	.+2      	; 0xa2fa <irCommTasks+0x492>
    a2f8:	9f c6       	rjmp	.+3390   	; 0xb038 <irCommTasks+0x11d0>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    a2fa:	10 92 20 04 	sts	0x0420, r1
    a2fe:	10 92 1f 04 	sts	0x041F, r1
    a302:	40 91 1f 04 	lds	r20, 0x041F
    a306:	50 91 20 04 	lds	r21, 0x0420
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a30a:	fa 01       	movw	r30, r20
    a30c:	ee 0f       	add	r30, r30
    a30e:	ff 1f       	adc	r31, r31
    a310:	de 01       	movw	r26, r28
    a312:	ae 0f       	add	r26, r30
    a314:	bf 1f       	adc	r27, r31
    a316:	e6 0f       	add	r30, r22
    a318:	f7 1f       	adc	r31, r23
    a31a:	0d 90       	ld	r0, X+
    a31c:	bc 91       	ld	r27, X
    a31e:	a0 2d       	mov	r26, r0
    a320:	80 81       	ld	r24, Z
    a322:	91 81       	ldd	r25, Z+1	; 0x01
    a324:	a8 1b       	sub	r26, r24
    a326:	b9 0b       	sbc	r27, r25
    a328:	a0 35       	cpi	r26, 0x50	; 80
    a32a:	b1 05       	cpc	r27, r1
    a32c:	0c f0       	brlt	.+2      	; 0xa330 <irCommTasks+0x4c8>
    a32e:	4e c7       	rjmp	.+3740   	; 0xb1cc <irCommTasks+0x1364>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    a330:	47 30       	cpi	r20, 0x07	; 7
    a332:	51 05       	cpc	r21, r1
    a334:	0c f4       	brge	.+2      	; 0xa338 <irCommTasks+0x4d0>
    a336:	79 c6       	rjmp	.+3314   	; 0xb02a <irCommTasks+0x11c2>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    a338:	10 92 20 04 	sts	0x0420, r1
    a33c:	10 92 1f 04 	sts	0x041F, r1
    a340:	40 91 1f 04 	lds	r20, 0x041F
    a344:	50 91 20 04 	lds	r21, 0x0420
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a348:	fa 01       	movw	r30, r20
    a34a:	ee 0f       	add	r30, r30
    a34c:	ff 1f       	adc	r31, r31
    a34e:	de 01       	movw	r26, r28
    a350:	ae 0f       	add	r26, r30
    a352:	bf 1f       	adc	r27, r31
    a354:	e6 0f       	add	r30, r22
    a356:	f7 1f       	adc	r31, r23
    a358:	0d 90       	ld	r0, X+
    a35a:	bc 91       	ld	r27, X
    a35c:	a0 2d       	mov	r26, r0
    a35e:	80 81       	ld	r24, Z
    a360:	91 81       	ldd	r25, Z+1	; 0x01
    a362:	a8 1b       	sub	r26, r24
    a364:	b9 0b       	sbc	r27, r25
    a366:	a0 35       	cpi	r26, 0x50	; 80
    a368:	b1 05       	cpc	r27, r1
    a36a:	0c f0       	brlt	.+2      	; 0xa36e <irCommTasks+0x506>
    a36c:	2f c7       	rjmp	.+3678   	; 0xb1cc <irCommTasks+0x1364>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    a36e:	47 30       	cpi	r20, 0x07	; 7
    a370:	51 05       	cpc	r21, r1
    a372:	0c f4       	brge	.+2      	; 0xa376 <irCommTasks+0x50e>
    a374:	bc c6       	rjmp	.+3448   	; 0xb0ee <irCommTasks+0x1286>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    a376:	10 92 20 04 	sts	0x0420, r1
    a37a:	10 92 1f 04 	sts	0x041F, r1
    a37e:	40 91 1f 04 	lds	r20, 0x041F
    a382:	50 91 20 04 	lds	r21, 0x0420
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a386:	fa 01       	movw	r30, r20
    a388:	ee 0f       	add	r30, r30
    a38a:	ff 1f       	adc	r31, r31
    a38c:	de 01       	movw	r26, r28
    a38e:	ae 0f       	add	r26, r30
    a390:	bf 1f       	adc	r27, r31
    a392:	e6 0f       	add	r30, r22
    a394:	f7 1f       	adc	r31, r23
    a396:	0d 90       	ld	r0, X+
    a398:	bc 91       	ld	r27, X
    a39a:	a0 2d       	mov	r26, r0
    a39c:	80 81       	ld	r24, Z
    a39e:	91 81       	ldd	r25, Z+1	; 0x01
    a3a0:	a8 1b       	sub	r26, r24
    a3a2:	b9 0b       	sbc	r27, r25
    a3a4:	a0 35       	cpi	r26, 0x50	; 80
    a3a6:	b1 05       	cpc	r27, r1
    a3a8:	0c f0       	brlt	.+2      	; 0xa3ac <irCommTasks+0x544>
    a3aa:	10 c7       	rjmp	.+3616   	; 0xb1cc <irCommTasks+0x1364>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    a3ac:	47 30       	cpi	r20, 0x07	; 7
    a3ae:	51 05       	cpc	r21, r1
    a3b0:	0c f4       	brge	.+2      	; 0xa3b4 <irCommTasks+0x54c>
    a3b2:	a4 c6       	rjmp	.+3400   	; 0xb0fc <irCommTasks+0x1294>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    a3b4:	10 92 20 04 	sts	0x0420, r1
    a3b8:	10 92 1f 04 	sts	0x041F, r1
    a3bc:	40 91 1f 04 	lds	r20, 0x041F
    a3c0:	50 91 20 04 	lds	r21, 0x0420
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a3c4:	fa 01       	movw	r30, r20
    a3c6:	ee 0f       	add	r30, r30
    a3c8:	ff 1f       	adc	r31, r31
    a3ca:	de 01       	movw	r26, r28
    a3cc:	ae 0f       	add	r26, r30
    a3ce:	bf 1f       	adc	r27, r31
    a3d0:	e6 0f       	add	r30, r22
    a3d2:	f7 1f       	adc	r31, r23
    a3d4:	0d 90       	ld	r0, X+
    a3d6:	bc 91       	ld	r27, X
    a3d8:	a0 2d       	mov	r26, r0
    a3da:	80 81       	ld	r24, Z
    a3dc:	91 81       	ldd	r25, Z+1	; 0x01
    a3de:	a8 1b       	sub	r26, r24
    a3e0:	b9 0b       	sbc	r27, r25
    a3e2:	a0 35       	cpi	r26, 0x50	; 80
    a3e4:	b1 05       	cpc	r27, r1
    a3e6:	0c f0       	brlt	.+2      	; 0xa3ea <irCommTasks+0x582>
    a3e8:	f1 c6       	rjmp	.+3554   	; 0xb1cc <irCommTasks+0x1364>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    a3ea:	47 30       	cpi	r20, 0x07	; 7
    a3ec:	51 05       	cpc	r21, r1
    a3ee:	0c f4       	brge	.+2      	; 0xa3f2 <irCommTasks+0x58a>
    a3f0:	8c c6       	rjmp	.+3352   	; 0xb10a <irCommTasks+0x12a2>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    a3f2:	10 92 20 04 	sts	0x0420, r1
    a3f6:	10 92 1f 04 	sts	0x041F, r1
    a3fa:	40 91 1f 04 	lds	r20, 0x041F
    a3fe:	50 91 20 04 	lds	r21, 0x0420
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a402:	fa 01       	movw	r30, r20
    a404:	ee 0f       	add	r30, r30
    a406:	ff 1f       	adc	r31, r31
    a408:	de 01       	movw	r26, r28
    a40a:	ae 0f       	add	r26, r30
    a40c:	bf 1f       	adc	r27, r31
    a40e:	e6 0f       	add	r30, r22
    a410:	f7 1f       	adc	r31, r23
    a412:	0d 90       	ld	r0, X+
    a414:	bc 91       	ld	r27, X
    a416:	a0 2d       	mov	r26, r0
    a418:	80 81       	ld	r24, Z
    a41a:	91 81       	ldd	r25, Z+1	; 0x01
    a41c:	a8 1b       	sub	r26, r24
    a41e:	b9 0b       	sbc	r27, r25
    a420:	a0 35       	cpi	r26, 0x50	; 80
    a422:	b1 05       	cpc	r27, r1
    a424:	0c f0       	brlt	.+2      	; 0xa428 <irCommTasks+0x5c0>
    a426:	d2 c6       	rjmp	.+3492   	; 0xb1cc <irCommTasks+0x1364>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    a428:	47 30       	cpi	r20, 0x07	; 7
    a42a:	51 05       	cpc	r21, r1
    a42c:	0c f4       	brge	.+2      	; 0xa430 <irCommTasks+0x5c8>
    a42e:	74 c6       	rjmp	.+3304   	; 0xb118 <irCommTasks+0x12b0>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    a430:	10 92 20 04 	sts	0x0420, r1
    a434:	10 92 1f 04 	sts	0x041F, r1
    a438:	40 91 1f 04 	lds	r20, 0x041F
    a43c:	50 91 20 04 	lds	r21, 0x0420
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a440:	fa 01       	movw	r30, r20
    a442:	ee 0f       	add	r30, r30
    a444:	ff 1f       	adc	r31, r31
    a446:	de 01       	movw	r26, r28
    a448:	ae 0f       	add	r26, r30
    a44a:	bf 1f       	adc	r27, r31
    a44c:	e6 0f       	add	r30, r22
    a44e:	f7 1f       	adc	r31, r23
    a450:	0d 90       	ld	r0, X+
    a452:	bc 91       	ld	r27, X
    a454:	a0 2d       	mov	r26, r0
    a456:	80 81       	ld	r24, Z
    a458:	91 81       	ldd	r25, Z+1	; 0x01
    a45a:	a8 1b       	sub	r26, r24
    a45c:	b9 0b       	sbc	r27, r25
    a45e:	a0 35       	cpi	r26, 0x50	; 80
    a460:	b1 05       	cpc	r27, r1
    a462:	0c f0       	brlt	.+2      	; 0xa466 <irCommTasks+0x5fe>
    a464:	b3 c6       	rjmp	.+3430   	; 0xb1cc <irCommTasks+0x1364>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    a466:	47 30       	cpi	r20, 0x07	; 7
    a468:	51 05       	cpc	r21, r1
    a46a:	0c f4       	brge	.+2      	; 0xa46e <irCommTasks+0x606>
    a46c:	63 c6       	rjmp	.+3270   	; 0xb134 <irCommTasks+0x12cc>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    a46e:	10 92 20 04 	sts	0x0420, r1
    a472:	10 92 1f 04 	sts	0x041F, r1
    a476:	40 91 1f 04 	lds	r20, 0x041F
    a47a:	50 91 20 04 	lds	r21, 0x0420
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a47e:	fa 01       	movw	r30, r20
    a480:	ee 0f       	add	r30, r30
    a482:	ff 1f       	adc	r31, r31
    a484:	de 01       	movw	r26, r28
    a486:	ae 0f       	add	r26, r30
    a488:	bf 1f       	adc	r27, r31
    a48a:	e6 0f       	add	r30, r22
    a48c:	f7 1f       	adc	r31, r23
    a48e:	0d 90       	ld	r0, X+
    a490:	bc 91       	ld	r27, X
    a492:	a0 2d       	mov	r26, r0
    a494:	80 81       	ld	r24, Z
    a496:	91 81       	ldd	r25, Z+1	; 0x01
    a498:	a8 1b       	sub	r26, r24
    a49a:	b9 0b       	sbc	r27, r25
    a49c:	a0 35       	cpi	r26, 0x50	; 80
    a49e:	b1 05       	cpc	r27, r1
    a4a0:	0c f0       	brlt	.+2      	; 0xa4a4 <irCommTasks+0x63c>
    a4a2:	94 c6       	rjmp	.+3368   	; 0xb1cc <irCommTasks+0x1364>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    a4a4:	47 30       	cpi	r20, 0x07	; 7
    a4a6:	51 05       	cpc	r21, r1
    a4a8:	0c f0       	brlt	.+2      	; 0xa4ac <irCommTasks+0x644>
    a4aa:	3d c6       	rjmp	.+3194   	; 0xb126 <irCommTasks+0x12be>
								irCommRxMaxSensor++;
    a4ac:	ca 01       	movw	r24, r20
    a4ae:	01 96       	adiw	r24, 0x01	; 1
    a4b0:	90 93 20 04 	sts	0x0420, r25
    a4b4:	80 93 1f 04 	sts	0x041F, r24
    a4b8:	ac 01       	movw	r20, r24
					}
				}
				//turnOffGreenLeds();
				//setGreenLed(irCommRxMaxSensor, 1);			

				if(irCommRxMaxSensorIndexTemp>1) {
    a4ba:	80 91 ef 03 	lds	r24, 0x03EF
    a4be:	82 30       	cpi	r24, 0x02	; 2
    a4c0:	08 f0       	brcs	.+2      	; 0xa4c4 <irCommTasks+0x65c>
    a4c2:	81 e0       	ldi	r24, 0x01	; 1
					irCommRxMaxSensorIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
    a4c4:	e8 2f       	mov	r30, r24
    a4c6:	f0 e0       	ldi	r31, 0x00	; 0
    a4c8:	ee 0f       	add	r30, r30
    a4ca:	ff 1f       	adc	r31, r31
    a4cc:	e9 5c       	subi	r30, 0xC9	; 201
    a4ce:	f5 4f       	sbci	r31, 0xF5	; 245
    a4d0:	51 83       	std	Z+1, r21	; 0x01
    a4d2:	40 83       	st	Z, r20
				irCommRxMaxSensorIndexTemp++;
    a4d4:	8f 5f       	subi	r24, 0xFF	; 255
    a4d6:	80 93 ef 03 	sts	0x03EF, r24
					
				if(irCommRxMaxDiffIndexTemp>1) {
    a4da:	80 91 f0 03 	lds	r24, 0x03F0
    a4de:	82 30       	cpi	r24, 0x02	; 2
    a4e0:	08 f0       	brcs	.+2      	; 0xa4e4 <irCommTasks+0x67c>
    a4e2:	81 e0       	ldi	r24, 0x01	; 1
					irCommRxMaxDiffIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
    a4e4:	e8 2f       	mov	r30, r24
    a4e6:	f0 e0       	ldi	r31, 0x00	; 0
    a4e8:	ee 0f       	add	r30, r30
    a4ea:	ff 1f       	adc	r31, r31
    a4ec:	e0 59       	subi	r30, 0x90	; 144
    a4ee:	f5 4f       	sbci	r31, 0xF5	; 245
    a4f0:	00 91 1d 04 	lds	r16, 0x041D
    a4f4:	10 91 1e 04 	lds	r17, 0x041E
    a4f8:	11 83       	std	Z+1, r17	; 0x01
    a4fa:	00 83       	st	Z, r16
				irCommRxMaxDiffIndexTemp++;
    a4fc:	8f 5f       	subi	r24, 0xFF	; 255
    a4fe:	80 93 f0 03 	sts	0x03F0, r24
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    a502:	20 91 f3 03 	lds	r18, 0x03F3
    a506:	22 30       	cpi	r18, 0x02	; 2
    a508:	20 f0       	brcs	.+8      	; 0xa512 <irCommTasks+0x6aa>
					irCommMaxSensorValueCurrIndexTemp = 1;
    a50a:	81 e0       	ldi	r24, 0x01	; 1
    a50c:	80 93 f3 03 	sts	0x03F3, r24
    a510:	21 e0       	ldi	r18, 0x01	; 1
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
    a512:	da 01       	movw	r26, r20
    a514:	aa 0f       	add	r26, r26
    a516:	bb 1f       	adc	r27, r27
    a518:	e2 2f       	mov	r30, r18
    a51a:	f0 e0       	ldi	r31, 0x00	; 0
    a51c:	ee 0f       	add	r30, r30
    a51e:	ff 1f       	adc	r31, r31
    a520:	e9 5b       	subi	r30, 0xB9	; 185
    a522:	fb 4f       	sbci	r31, 0xFB	; 251
    a524:	ca 0f       	add	r28, r26
    a526:	db 1f       	adc	r29, r27
    a528:	88 81       	ld	r24, Y
    a52a:	99 81       	ldd	r25, Y+1	; 0x01
    a52c:	91 83       	std	Z+1, r25	; 0x01
    a52e:	80 83       	st	Z, r24
				irCommMaxSensorValueCurrIndexTemp++;
    a530:	2f 5f       	subi	r18, 0xFF	; 255
    a532:	20 93 f3 03 	sts	0x03F3, r18
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    a536:	20 91 f4 03 	lds	r18, 0x03F4
    a53a:	22 30       	cpi	r18, 0x02	; 2
    a53c:	20 f0       	brcs	.+8      	; 0xa546 <irCommTasks+0x6de>
					irCommMinSensorValueCurrIndexTemp = 1;
    a53e:	81 e0       	ldi	r24, 0x01	; 1
    a540:	80 93 f4 03 	sts	0x03F4, r24
    a544:	21 e0       	ldi	r18, 0x01	; 1
					//updateBlueLed(0);
				}
				irCommMinSensorValueCurrTemp[irCommMinSensorValueCurrIndexTemp] = irCommMinSensorValueCurr[irCommRxMaxSensor];
    a546:	e2 2f       	mov	r30, r18
    a548:	f0 e0       	ldi	r31, 0x00	; 0
    a54a:	ee 0f       	add	r30, r30
    a54c:	ff 1f       	adc	r31, r31
    a54e:	e5 5c       	subi	r30, 0xC5	; 197
    a550:	f5 4f       	sbci	r31, 0xF5	; 245
    a552:	6a 0f       	add	r22, r26
    a554:	7b 1f       	adc	r23, r27
    a556:	db 01       	movw	r26, r22
    a558:	8d 91       	ld	r24, X+
    a55a:	9c 91       	ld	r25, X
    a55c:	91 83       	std	Z+1, r25	; 0x01
    a55e:	80 83       	st	Z, r24
				irCommMinSensorValueCurrIndexTemp++;			
    a560:	2f 5f       	subi	r18, 0xFF	; 255
    a562:	20 93 f4 03 	sts	0x03F4, r18


				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    a566:	00 35       	cpi	r16, 0x50	; 80
    a568:	11 05       	cpc	r17, r1
    a56a:	0c f4       	brge	.+2      	; 0xa56e <irCommTasks+0x706>
    a56c:	f9 c3       	rjmp	.+2034   	; 0xad60 <irCommTasks+0xef8>
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;	
    a56e:	83 e0       	ldi	r24, 0x03	; 3
    a570:	80 93 d6 03 	sts	0x03D6, r24
					
					if(irCommStateIndexTemp>13) {
    a574:	90 91 fc 03 	lds	r25, 0x03FC
    a578:	9e 30       	cpi	r25, 0x0E	; 14
    a57a:	20 f0       	brcs	.+8      	; 0xa584 <irCommTasks+0x71c>

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;

					if(irCommStateIndexTemp>13) {
						irCommStateIndexTemp = 13;
    a57c:	8d e0       	ldi	r24, 0x0D	; 13
    a57e:	80 93 fc 03 	sts	0x03FC, r24
    a582:	9d e0       	ldi	r25, 0x0D	; 13
						//updateRedLed(0);
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
    a584:	80 91 d6 03 	lds	r24, 0x03D6
    a588:	e9 2f       	mov	r30, r25
    a58a:	f0 e0       	ldi	r31, 0x00	; 0
    a58c:	e5 5b       	subi	r30, 0xB5	; 181
    a58e:	fb 4f       	sbci	r31, 0xFB	; 251
    a590:	80 83       	st	Z, r24
					irCommStateIndexTemp++;
    a592:	9f 5f       	subi	r25, 0xFF	; 255
    a594:	90 93 fc 03 	sts	0x03FC, r25
    a598:	80 cc       	rjmp	.-1792   	; 0x9e9a <irCommTasks+0x32>
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
    a59a:	20 91 2a 04 	lds	r18, 0x042A
    a59e:	e2 2f       	mov	r30, r18
    a5a0:	f0 e0       	ldi	r31, 0x00	; 0
    a5a2:	ee 59       	subi	r30, 0x9E	; 158
    a5a4:	fb 4f       	sbci	r31, 0xFB	; 251
    a5a6:	e0 81       	ld	r30, Z
    a5a8:	e3 30       	cpi	r30, 0x03	; 3
    a5aa:	09 f4       	brne	.+2      	; 0xa5ae <irCommTasks+0x746>
    a5ac:	46 c4       	rjmp	.+2188   	; 0xae3a <irCommTasks+0xfd2>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
    a5ae:	e2 30       	cpi	r30, 0x02	; 2
    a5b0:	11 f1       	breq	.+68     	; 0xa5f6 <irCommTasks+0x78e>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
    a5b2:	e1 30       	cpi	r30, 0x01	; 1
    a5b4:	09 f4       	brne	.+2      	; 0xa5b8 <irCommTasks+0x750>
    a5b6:	d9 c4       	rjmp	.+2482   	; 0xaf6a <irCommTasks+0x1102>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
    a5b8:	8e e1       	ldi	r24, 0x1E	; 30
    a5ba:	90 e0       	ldi	r25, 0x00	; 0
    a5bc:	90 93 2d 04 	sts	0x042D, r25
    a5c0:	80 93 2c 04 	sts	0x042C, r24
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
    a5c4:	88 e0       	ldi	r24, 0x08	; 8
    a5c6:	80 93 2e 04 	sts	0x042E, r24
				}
				if(irCommTxBitCount == 0) {
    a5ca:	22 23       	and	r18, r18
    a5cc:	51 f4       	brne	.+20     	; 0xa5e2 <irCommTasks+0x77a>
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
    a5ce:	80 91 31 04 	lds	r24, 0x0431
    a5d2:	88 23       	and	r24, r24
    a5d4:	09 f0       	breq	.+2      	; 0xa5d8 <irCommTasks+0x770>
    a5d6:	41 c4       	rjmp	.+2178   	; 0xae5a <irCommTasks+0xff2>
						PORTA = 0xAA;
    a5d8:	8a ea       	ldi	r24, 0xAA	; 170
    a5da:	82 b9       	out	0x02, r24	; 2
					} else {
						PORTA = 0x55;
					}					
					irCommTxPulseState = 1;
    a5dc:	81 e0       	ldi	r24, 0x01	; 1
    a5de:	80 93 2b 04 	sts	0x042B, r24
				}
				irCommTxDurationCycle = 0;
    a5e2:	10 92 30 04 	sts	0x0430, r1
				irCommTxSwitchCounter = 0;						
    a5e6:	10 92 2f 04 	sts	0x042F, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
    a5ea:	83 e0       	ldi	r24, 0x03	; 3
    a5ec:	80 93 d6 03 	sts	0x03D6, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    a5f0:	80 93 22 04 	sts	0x0422, r24
    a5f4:	52 cc       	rjmp	.-1884   	; 0x9e9a <irCommTasks+0x32>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
    a5f6:	88 e7       	ldi	r24, 0x78	; 120
    a5f8:	90 e0       	ldi	r25, 0x00	; 0
    a5fa:	90 93 2d 04 	sts	0x042D, r25
    a5fe:	80 93 2c 04 	sts	0x042C, r24
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
    a602:	e0 93 2e 04 	sts	0x042E, r30
    a606:	e1 cf       	rjmp	.-62     	; 0xa5ca <irCommTasks+0x762>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    a608:	3f 5f       	subi	r19, 0xFF	; 255
    a60a:	21 e0       	ldi	r18, 0x01	; 1
    a60c:	bd cd       	rjmp	.-1158   	; 0xa188 <irCommTasks+0x320>
				irCommState = IRCOMM_RX_IDLE_STATE;

				break;

			case IRCOMM_RX_DEBUG:								
				irCommSendValues = 0;						
    a60e:	10 92 d9 03 	sts	0x03D9, r1
				while(irCommSendValues==0);	// wait for the start from the uart (computer)
    a612:	80 91 d9 03 	lds	r24, 0x03D9
    a616:	88 23       	and	r24, r24
    a618:	e1 f3       	breq	.-8      	; 0xa612 <irCommTasks+0x7aa>
				usart0Transmit(0xFF, 1);
    a61a:	8f ef       	ldi	r24, 0xFF	; 255
    a61c:	61 e0       	ldi	r22, 0x01	; 1
    a61e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[0],1);
    a622:	80 91 37 0a 	lds	r24, 0x0A37
    a626:	61 e0       	ldi	r22, 0x01	; 1
    a628:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[1],1);
    a62c:	80 91 39 0a 	lds	r24, 0x0A39
    a630:	61 e0       	ldi	r22, 0x01	; 1
    a632:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]&0xFF,1);
    a636:	80 91 70 0a 	lds	r24, 0x0A70
    a63a:	61 e0       	ldi	r22, 0x01	; 1
    a63c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]>>8,1);
    a640:	80 91 71 0a 	lds	r24, 0x0A71
    a644:	61 e0       	ldi	r22, 0x01	; 1
    a646:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]&0xFF,1);
    a64a:	80 91 72 0a 	lds	r24, 0x0A72
    a64e:	61 e0       	ldi	r22, 0x01	; 1
    a650:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]>>8,1);
    a654:	80 91 73 0a 	lds	r24, 0x0A73
    a658:	61 e0       	ldi	r22, 0x01	; 1
    a65a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]&0xFF,1);
    a65e:	80 91 7d 04 	lds	r24, 0x047D
    a662:	61 e0       	ldi	r22, 0x01	; 1
    a664:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
    a668:	80 91 7e 04 	lds	r24, 0x047E
    a66c:	61 e0       	ldi	r22, 0x01	; 1
    a66e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
    a672:	80 91 7f 04 	lds	r24, 0x047F
    a676:	61 e0       	ldi	r22, 0x01	; 1
    a678:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
    a67c:	80 91 80 04 	lds	r24, 0x0480
    a680:	61 e0       	ldi	r22, 0x01	; 1
    a682:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[0],1);
    a686:	80 91 60 04 	lds	r24, 0x0460
    a68a:	61 e0       	ldi	r22, 0x01	; 1
    a68c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[1],1);
    a690:	80 91 61 04 	lds	r24, 0x0461
    a694:	61 e0       	ldi	r22, 0x01	; 1
    a696:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a69a:	c0 e0       	ldi	r28, 0x00	; 0
    a69c:	d0 e0       	ldi	r29, 0x00	; 0
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
					irCommTempValue = irCommMaxSensorSignalTemp[i];
    a69e:	fe 01       	movw	r30, r28
    a6a0:	e7 58       	subi	r30, 0x87	; 135
    a6a2:	f8 4f       	sbci	r31, 0xF8	; 248
    a6a4:	80 81       	ld	r24, Z
    a6a6:	91 81       	ldd	r25, Z+1	; 0x01
    a6a8:	80 93 d7 03 	sts	0x03D7, r24
    a6ac:	90 93 d8 03 	sts	0x03D8, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    a6b0:	61 e0       	ldi	r22, 0x01	; 1
    a6b2:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    a6b6:	80 91 d8 03 	lds	r24, 0x03D8
    a6ba:	61 e0       	ldi	r22, 0x01	; 1
    a6bc:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
    a6c0:	fe 01       	movw	r30, r28
    a6c2:	eb 57       	subi	r30, 0x7B	; 123
    a6c4:	fb 4f       	sbci	r31, 0xFB	; 251
    a6c6:	80 81       	ld	r24, Z
    a6c8:	91 81       	ldd	r25, Z+1	; 0x01
    a6ca:	80 93 d7 03 	sts	0x03D7, r24
    a6ce:	90 93 d8 03 	sts	0x03D8, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    a6d2:	61 e0       	ldi	r22, 0x01	; 1
    a6d4:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    a6d8:	80 91 d8 03 	lds	r24, 0x03D8
    a6dc:	61 e0       	ldi	r22, 0x01	; 1
    a6de:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a6e2:	22 96       	adiw	r28, 0x02	; 2
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
				usart0Transmit(irCommSwitchCountTemp[0],1);
				usart0Transmit(irCommSwitchCountTemp[1],1);
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
    a6e4:	c0 35       	cpi	r28, 0x50	; 80
    a6e6:	d1 05       	cpc	r29, r1
    a6e8:	d1 f6       	brne	.-76     	; 0xa69e <irCommTasks+0x836>
					usart0Transmit(irCommTempValue>>8,1);
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]&0xFF,1);
    a6ea:	80 91 47 04 	lds	r24, 0x0447
    a6ee:	61 e0       	ldi	r22, 0x01	; 1
    a6f0:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]>>8,1);
    a6f4:	80 91 48 04 	lds	r24, 0x0448
    a6f8:	61 e0       	ldi	r22, 0x01	; 1
    a6fa:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]&0xFF,1);
    a6fe:	80 91 49 04 	lds	r24, 0x0449
    a702:	61 e0       	ldi	r22, 0x01	; 1
    a704:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]>>8,1);
    a708:	80 91 4a 04 	lds	r24, 0x044A
    a70c:	61 e0       	ldi	r22, 0x01	; 1
    a70e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]&0xFF,1);
    a712:	80 91 3b 0a 	lds	r24, 0x0A3B
    a716:	61 e0       	ldi	r22, 0x01	; 1
    a718:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]>>8,1);
    a71c:	80 91 3c 0a 	lds	r24, 0x0A3C
    a720:	61 e0       	ldi	r22, 0x01	; 1
    a722:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]&0xFF,1);
    a726:	80 91 3d 0a 	lds	r24, 0x0A3D
    a72a:	61 e0       	ldi	r22, 0x01	; 1
    a72c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]>>8,1);
    a730:	80 91 3e 0a 	lds	r24, 0x0A3E
    a734:	61 e0       	ldi	r22, 0x01	; 1
    a736:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[0],1);
    a73a:	80 91 89 0a 	lds	r24, 0x0A89
    a73e:	61 e0       	ldi	r22, 0x01	; 1
    a740:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[1],1);
    a744:	80 91 8a 0a 	lds	r24, 0x0A8A
    a748:	61 e0       	ldi	r22, 0x01	; 1
    a74a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[0],1);
    a74e:	80 91 43 0a 	lds	r24, 0x0A43
    a752:	61 e0       	ldi	r22, 0x01	; 1
    a754:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[1],1);
    a758:	80 91 44 0a 	lds	r24, 0x0A44
    a75c:	61 e0       	ldi	r22, 0x01	; 1
    a75e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]&0xFF,1);
    a762:	80 91 ca 07 	lds	r24, 0x07CA
    a766:	61 e0       	ldi	r22, 0x01	; 1
    a768:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]>>8,1);
    a76c:	80 91 cb 07 	lds	r24, 0x07CB
    a770:	61 e0       	ldi	r22, 0x01	; 1
    a772:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]&0xFF,1);
    a776:	80 91 cc 07 	lds	r24, 0x07CC
    a77a:	61 e0       	ldi	r22, 0x01	; 1
    a77c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]>>8,1);
    a780:	80 91 cd 07 	lds	r24, 0x07CD
    a784:	61 e0       	ldi	r22, 0x01	; 1
    a786:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[0],1);
    a78a:	80 91 7a 04 	lds	r24, 0x047A
    a78e:	61 e0       	ldi	r22, 0x01	; 1
    a790:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[1],1);
    a794:	80 91 7b 04 	lds	r24, 0x047B
    a798:	61 e0       	ldi	r22, 0x01	; 1
    a79a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[0],1);
    a79e:	80 91 d7 04 	lds	r24, 0x04D7
    a7a2:	61 e0       	ldi	r22, 0x01	; 1
    a7a4:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[1],1);
    a7a8:	80 91 d8 04 	lds	r24, 0x04D8
    a7ac:	61 e0       	ldi	r22, 0x01	; 1
    a7ae:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[0],1);
    a7b2:	80 91 19 06 	lds	r24, 0x0619
    a7b6:	61 e0       	ldi	r22, 0x01	; 1
    a7b8:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[1],1);
    a7bc:	80 91 1a 06 	lds	r24, 0x061A
    a7c0:	61 e0       	ldi	r22, 0x01	; 1
    a7c2:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[0],1);
    a7c6:	80 91 83 04 	lds	r24, 0x0483
    a7ca:	61 e0       	ldi	r22, 0x01	; 1
    a7cc:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[1],1);
    a7d0:	80 91 84 04 	lds	r24, 0x0484
    a7d4:	61 e0       	ldi	r22, 0x01	; 1
    a7d6:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
    a7da:	80 91 78 04 	lds	r24, 0x0478
    a7de:	61 e0       	ldi	r22, 0x01	; 1
    a7e0:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[1],1);
    a7e4:	80 91 79 04 	lds	r24, 0x0479
    a7e8:	61 e0       	ldi	r22, 0x01	; 1
    a7ea:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
    a7ee:	80 91 4b 04 	lds	r24, 0x044B
    a7f2:	61 e0       	ldi	r22, 0x01	; 1
    a7f4:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a7f8:	80 91 4c 04 	lds	r24, 0x044C
    a7fc:	61 e0       	ldi	r22, 0x01	; 1
    a7fe:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a802:	80 91 4d 04 	lds	r24, 0x044D
    a806:	61 e0       	ldi	r22, 0x01	; 1
    a808:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a80c:	80 91 4e 04 	lds	r24, 0x044E
    a810:	61 e0       	ldi	r22, 0x01	; 1
    a812:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a816:	80 91 4f 04 	lds	r24, 0x044F
    a81a:	61 e0       	ldi	r22, 0x01	; 1
    a81c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a820:	80 91 50 04 	lds	r24, 0x0450
    a824:	61 e0       	ldi	r22, 0x01	; 1
    a826:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a82a:	80 91 51 04 	lds	r24, 0x0451
    a82e:	61 e0       	ldi	r22, 0x01	; 1
    a830:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a834:	80 91 52 04 	lds	r24, 0x0452
    a838:	61 e0       	ldi	r22, 0x01	; 1
    a83a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a83e:	80 91 53 04 	lds	r24, 0x0453
    a842:	61 e0       	ldi	r22, 0x01	; 1
    a844:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a848:	80 91 54 04 	lds	r24, 0x0454
    a84c:	61 e0       	ldi	r22, 0x01	; 1
    a84e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a852:	80 91 55 04 	lds	r24, 0x0455
    a856:	61 e0       	ldi	r22, 0x01	; 1
    a858:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a85c:	80 91 56 04 	lds	r24, 0x0456
    a860:	61 e0       	ldi	r22, 0x01	; 1
    a862:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a866:	80 91 57 04 	lds	r24, 0x0457
    a86a:	61 e0       	ldi	r22, 0x01	; 1
    a86c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a870:	80 91 58 04 	lds	r24, 0x0458
    a874:	61 e0       	ldi	r22, 0x01	; 1
    a876:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a87a:	c5 ea       	ldi	r28, 0xA5	; 165
    a87c:	d8 e0       	ldi	r29, 0x08	; 8
				}
				for(i=0; i<200; i++) {
					irCommTempValue = irCommBitsSignalTemp[i];
    a87e:	88 81       	ld	r24, Y
    a880:	99 81       	ldd	r25, Y+1	; 0x01
    a882:	80 93 d7 03 	sts	0x03D7, r24
    a886:	90 93 d8 03 	sts	0x03D8, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    a88a:	61 e0       	ldi	r22, 0x01	; 1
    a88c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    a890:	80 91 d8 03 	lds	r24, 0x03D8
    a894:	61 e0       	ldi	r22, 0x01	; 1
    a896:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a89a:	22 96       	adiw	r28, 0x02	; 2
				usart0Transmit(irCommSyncStateTemp[0],1);
				usart0Transmit(irCommSyncStateTemp[1],1);
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
				}
				for(i=0; i<200; i++) {
    a89c:	9a e0       	ldi	r25, 0x0A	; 10
    a89e:	c5 33       	cpi	r28, 0x35	; 53
    a8a0:	d9 07       	cpc	r29, r25
    a8a2:	69 f7       	brne	.-38     	; 0xa87e <irCommTasks+0xa16>
					irCommTempValue = irCommBitsSignalTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				for(i=0; i<10; i++) {
					usart0Transmit(irCommRxBitReceivedTemp[i],1);
    a8a4:	80 91 6d 07 	lds	r24, 0x076D
    a8a8:	61 e0       	ldi	r22, 0x01	; 1
    a8aa:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a8ae:	80 91 6e 07 	lds	r24, 0x076E
    a8b2:	61 e0       	ldi	r22, 0x01	; 1
    a8b4:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a8b8:	80 91 6f 07 	lds	r24, 0x076F
    a8bc:	61 e0       	ldi	r22, 0x01	; 1
    a8be:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a8c2:	80 91 70 07 	lds	r24, 0x0770
    a8c6:	61 e0       	ldi	r22, 0x01	; 1
    a8c8:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a8cc:	80 91 71 07 	lds	r24, 0x0771
    a8d0:	61 e0       	ldi	r22, 0x01	; 1
    a8d2:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a8d6:	80 91 72 07 	lds	r24, 0x0772
    a8da:	61 e0       	ldi	r22, 0x01	; 1
    a8dc:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a8e0:	80 91 73 07 	lds	r24, 0x0773
    a8e4:	61 e0       	ldi	r22, 0x01	; 1
    a8e6:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a8ea:	80 91 74 07 	lds	r24, 0x0774
    a8ee:	61 e0       	ldi	r22, 0x01	; 1
    a8f0:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a8f4:	80 91 75 07 	lds	r24, 0x0775
    a8f8:	61 e0       	ldi	r22, 0x01	; 1
    a8fa:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
    a8fe:	80 91 76 07 	lds	r24, 0x0776
    a902:	61 e0       	ldi	r22, 0x01	; 1
    a904:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				}
				usart0Transmit(irCommRxCrc,1);
    a908:	80 91 02 04 	lds	r24, 0x0402
    a90c:	61 e0       	ldi	r22, 0x01	; 1
    a90e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxCrcError,1);
    a912:	80 91 12 04 	lds	r24, 0x0412
    a916:	61 e0       	ldi	r22, 0x01	; 1
    a918:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxByte,1);
    a91c:	80 91 13 04 	lds	r24, 0x0413
    a920:	61 e0       	ldi	r22, 0x01	; 1
    a922:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
				usart0Transmit(irCommRxByteExpected,1);				
    a926:	80 91 16 04 	lds	r24, 0x0416
    a92a:	61 e0       	ldi	r22, 0x01	; 1
    a92c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>

				irCommState = IRCOMM_RX_STOP;
    a930:	89 e0       	ldi	r24, 0x09	; 9
    a932:	80 93 d6 03 	sts	0x03D6, r24
    a936:	b1 ca       	rjmp	.-2718   	; 0x9e9a <irCommTasks+0x32>

				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    a938:	80 91 77 04 	lds	r24, 0x0477
    a93c:	90 91 02 04 	lds	r25, 0x0402
    a940:	89 0f       	add	r24, r25
    a942:	90 91 76 04 	lds	r25, 0x0476
    a946:	99 0f       	add	r25, r25
    a948:	89 0f       	add	r24, r25
    a94a:	83 70       	andi	r24, 0x03	; 3
    a94c:	80 93 12 04 	sts	0x0412, r24
				if(irCommRxCrcError==0) {
    a950:	88 23       	and	r24, r24
    a952:	69 f4       	brne	.+26     	; 0xa96e <irCommTasks+0xb06>
					irCommRxLastDataReceived = irCommRxByte;
    a954:	80 91 13 04 	lds	r24, 0x0413
    a958:	80 93 17 04 	sts	0x0417, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
    a95c:	90 91 1f 04 	lds	r25, 0x041F
    a960:	90 93 19 02 	sts	0x0219, r25
					irCommRxDataAvailable = 1;
    a964:	00 93 18 04 	sts	0x0418, r16
					//updateBlueLed(0);
					usart0Transmit(irCommRxByte,1);		
    a968:	61 e0       	ldi	r22, 0x01	; 1
    a96a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <usart0Transmit>
					//updateBlueLed(255);			
				}
												
				currentProx = 0;
    a96e:	10 92 22 02 	sts	0x0222, r1
				adcSaveDataTo = SKIP_SAMPLE;
    a972:	85 e0       	ldi	r24, 0x05	; 5
    a974:	80 93 b7 02 	sts	0x02B7, r24
				adcSamplingState = 0;
    a978:	10 92 b8 02 	sts	0x02B8, r1
				irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;				
    a97c:	10 92 d5 03 	sts	0x03D5, r1
				} else {
					irCommRxPrevDataReceived = irCommRxLastDataReceived;
				}
				*/

				resetDebugVariables();
    a980:	ca d9       	rcall	.-3180   	; 0x9d16 <resetDebugVariables>

				irCommState = IRCOMM_RX_IDLE_STATE;
    a982:	81 e0       	ldi	r24, 0x01	; 1
    a984:	80 93 d6 03 	sts	0x03D6, r24
    a988:	88 ca       	rjmp	.-2800   	; 0x9e9a <irCommTasks+0x32>

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
			case IRCOMM_RX_IDLE_STATE:				
				if((irCommRxStartBitDetected==0) && (irCommEnabled!=irCommEnabledNext)) {
    a98a:	80 91 1a 04 	lds	r24, 0x041A
    a98e:	88 23       	and	r24, r24
    a990:	09 f0       	breq	.+2      	; 0xa994 <irCommTasks+0xb2c>
    a992:	83 ca       	rjmp	.-2810   	; 0x9e9a <irCommTasks+0x32>
    a994:	90 91 d3 03 	lds	r25, 0x03D3
    a998:	80 91 d4 03 	lds	r24, 0x03D4
    a99c:	98 17       	cp	r25, r24
    a99e:	09 f4       	brne	.+2      	; 0xa9a2 <irCommTasks+0xb3a>
    a9a0:	7c ca       	rjmp	.-2824   	; 0x9e9a <irCommTasks+0x32>
					if((getTime100MicroSec() - irCommTxLastTransmissionTime) > PAUSE_200_MSEC) {
    a9a2:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <getTime100MicroSec>
    a9a6:	20 91 25 04 	lds	r18, 0x0425
    a9aa:	30 91 26 04 	lds	r19, 0x0426
    a9ae:	40 91 27 04 	lds	r20, 0x0427
    a9b2:	50 91 28 04 	lds	r21, 0x0428
    a9b6:	62 1b       	sub	r22, r18
    a9b8:	73 0b       	sbc	r23, r19
    a9ba:	84 0b       	sbc	r24, r20
    a9bc:	95 0b       	sbc	r25, r21
    a9be:	64 58       	subi	r22, 0x84	; 132
    a9c0:	77 40       	sbci	r23, 0x07	; 7
    a9c2:	80 40       	sbci	r24, 0x00	; 0
    a9c4:	90 40       	sbci	r25, 0x00	; 0
    a9c6:	08 f4       	brcc	.+2      	; 0xa9ca <irCommTasks+0xb62>
    a9c8:	68 ca       	rjmp	.-2864   	; 0x9e9a <irCommTasks+0x32>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
    a9ca:	82 e0       	ldi	r24, 0x02	; 2
    a9cc:	80 93 d3 03 	sts	0x03D3, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
    a9d0:	10 93 d6 03 	sts	0x03D6, r17
    a9d4:	62 ca       	rjmp	.-2876   	; 0x9e9a <irCommTasks+0x32>
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
    a9d6:	80 e0       	ldi	r24, 0x00	; 0
    a9d8:	94 e0       	ldi	r25, 0x04	; 4
    a9da:	90 93 0a 04 	sts	0x040A, r25
    a9de:	80 93 09 04 	sts	0x0409, r24
				irCommTempMax = 0;
    a9e2:	10 92 08 04 	sts	0x0408, r1
    a9e6:	10 92 07 04 	sts	0x0407, r1
				irCommShiftCount = 0;
    a9ea:	10 92 0b 04 	sts	0x040B, r1
				irCommComputeShift = 1;												
    a9ee:	00 93 0c 04 	sts	0x040C, r16
    a9f2:	c0 90 1f 04 	lds	r12, 0x041F
    a9f6:	d0 90 20 04 	lds	r13, 0x0420
    a9fa:	cc 0c       	add	r12, r12
    a9fc:	dd 1c       	adc	r13, r13
    a9fe:	77 e4       	ldi	r23, 0x47	; 71
    aa00:	a7 2e       	mov	r10, r23
    aa02:	7a e0       	ldi	r23, 0x0A	; 10
    aa04:	b7 2e       	mov	r11, r23
    aa06:	e5 01       	movw	r28, r10
    aa08:	ee 24       	eor	r14, r14
    aa0a:	ff 24       	eor	r15, r15
    aa0c:	87 01       	movw	r16, r14
    aa0e:	60 90 5b 07 	lds	r6, 0x075B
    aa12:	70 90 5c 07 	lds	r7, 0x075C
    aa16:	90 90 ed 03 	lds	r9, 0x03ED
    aa1a:	88 24       	eor	r8, r8
    aa1c:	83 94       	inc	r8
    aa1e:	55 24       	eor	r5, r5
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
    aa20:	62 e0       	ldi	r22, 0x02	; 2
    aa22:	36 2e       	mov	r3, r22
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    aa24:	22 24       	eor	r2, r2
    aa26:	23 94       	inc	r2
    aa28:	0e c0       	rjmp	.+28     	; 0xaa46 <irCommTasks+0xbde>
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
    aa2a:	f2 e0       	ldi	r31, 0x02	; 2
    aa2c:	8f 16       	cp	r8, r31
    aa2e:	09 f4       	brne	.+2      	; 0xaa32 <irCommTasks+0xbca>
    aa30:	7f c0       	rjmp	.+254    	; 0xab30 <irCommTasks+0xcc8>
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
								irCommComputeShift = 0;
    aa32:	80 e1       	ldi	r24, 0x10	; 16
    aa34:	90 e0       	ldi	r25, 0x00	; 0
    aa36:	c8 0e       	add	r12, r24
    aa38:	d9 1e       	adc	r13, r25
    aa3a:	22 96       	adiw	r28, 0x02	; 2
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    aa3c:	9a e0       	ldi	r25, 0x0A	; 10
    aa3e:	cf 36       	cpi	r28, 0x6F	; 111
    aa40:	d9 07       	cpc	r29, r25
    aa42:	09 f4       	brne	.+2      	; 0xaa46 <irCommTasks+0xbde>
    aa44:	aa c0       	rjmp	.+340    	; 0xab9a <irCommTasks+0xd32>
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    aa46:	f3 01       	movw	r30, r6
    aa48:	ec 0d       	add	r30, r12
    aa4a:	fd 1d       	adc	r31, r13
    aa4c:	20 81       	ld	r18, Z
    aa4e:	31 81       	ldd	r19, Z+1	; 0x01
    aa50:	39 83       	std	Y+1, r19	; 0x01
    aa52:	28 83       	st	Y, r18

					if(irCommMaxSensorSignalIndexTemp>39) {
    aa54:	b7 e2       	ldi	r27, 0x27	; 39
    aa56:	b9 15       	cp	r27, r9
    aa58:	10 f4       	brcc	.+4      	; 0xaa5e <irCommTasks+0xbf6>
    aa5a:	57 e2       	ldi	r21, 0x27	; 39
    aa5c:	95 2e       	mov	r9, r21
						irCommMaxSensorSignalIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
    aa5e:	e9 2d       	mov	r30, r9
    aa60:	f0 e0       	ldi	r31, 0x00	; 0
    aa62:	ee 0f       	add	r30, r30
    aa64:	ff 1f       	adc	r31, r31
    aa66:	e7 58       	subi	r30, 0x87	; 135
    aa68:	f8 4f       	sbci	r31, 0xF8	; 248
    aa6a:	31 83       	std	Z+1, r19	; 0x01
    aa6c:	20 83       	st	Z, r18
					irCommMaxSensorSignalIndexTemp++;					
    aa6e:	93 94       	inc	r9
    aa70:	90 92 ed 03 	sts	0x03ED, r9

					irCommProxSum += irCommMaxSensorSignal[i];
    aa74:	c9 01       	movw	r24, r18
    aa76:	aa 27       	eor	r26, r26
    aa78:	97 fd       	sbrc	r25, 7
    aa7a:	a0 95       	com	r26
    aa7c:	ba 2f       	mov	r27, r26
    aa7e:	e8 0e       	add	r14, r24
    aa80:	f9 1e       	adc	r15, r25
    aa82:	0a 1f       	adc	r16, r26
    aa84:	1b 1f       	adc	r17, r27
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
    aa86:	e1 e0       	ldi	r30, 0x01	; 1
    aa88:	8e 16       	cp	r8, r30
    aa8a:	79 f6       	brne	.-98     	; 0xaa2a <irCommTasks+0xbc2>
						irCommShiftCount++;								
    aa8c:	45 2c       	mov	r4, r5
    aa8e:	53 94       	inc	r5
    aa90:	50 92 0b 04 	sts	0x040B, r5
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    aa94:	60 91 09 04 	lds	r22, 0x0409
    aa98:	70 91 0a 04 	lds	r23, 0x040A
    aa9c:	26 17       	cp	r18, r22
    aa9e:	37 07       	cpc	r19, r23
    aaa0:	2c f4       	brge	.+10     	; 0xaaac <irCommTasks+0xc44>
							irCommTempMin = irCommMaxSensorSignal[i];
    aaa2:	30 93 0a 04 	sts	0x040A, r19
    aaa6:	20 93 09 04 	sts	0x0409, r18
    aaaa:	b9 01       	movw	r22, r18
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    aaac:	40 91 07 04 	lds	r20, 0x0407
    aab0:	50 91 08 04 	lds	r21, 0x0408
    aab4:	42 17       	cp	r20, r18
    aab6:	53 07       	cpc	r21, r19
    aab8:	2c f4       	brge	.+10     	; 0xaac4 <irCommTasks+0xc5c>
							irCommTempMax = irCommMaxSensorSignal[i];
    aaba:	30 93 08 04 	sts	0x0408, r19
    aabe:	20 93 07 04 	sts	0x0407, r18
    aac2:	a9 01       	movw	r20, r18
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
    aac4:	ca 01       	movw	r24, r20
    aac6:	86 1b       	sub	r24, r22
    aac8:	97 0b       	sbc	r25, r23
    aaca:	dc 01       	movw	r26, r24
    aacc:	80 93 d7 03 	sts	0x03D7, r24
    aad0:	90 93 d8 03 	sts	0x03D8, r25
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    aad4:	80 35       	cpi	r24, 0x50	; 80
    aad6:	91 05       	cpc	r25, r1
    aad8:	0c f4       	brge	.+2      	; 0xaadc <irCommTasks+0xc74>
    aada:	ab cf       	rjmp	.-170    	; 0xaa32 <irCommTasks+0xbca>

							if(irCommStartDiffIndexTemp>1) {
    aadc:	80 91 f7 03 	lds	r24, 0x03F7
    aae0:	82 30       	cpi	r24, 0x02	; 2
    aae2:	08 f0       	brcs	.+2      	; 0xaae6 <irCommTasks+0xc7e>
    aae4:	81 e0       	ldi	r24, 0x01	; 1
								irCommStartDiffIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
    aae6:	e8 2f       	mov	r30, r24
    aae8:	f0 e0       	ldi	r31, 0x00	; 0
    aaea:	ee 0f       	add	r30, r30
    aaec:	ff 1f       	adc	r31, r31
    aaee:	e6 53       	subi	r30, 0x36	; 54
    aaf0:	f8 4f       	sbci	r31, 0xF8	; 248
    aaf2:	a0 83       	st	Z, r26
    aaf4:	b1 83       	std	Z+1, r27	; 0x01
							irCommStartDiffIndexTemp++;
    aaf6:	8f 5f       	subi	r24, 0xFF	; 255
    aaf8:	80 93 f7 03 	sts	0x03F7, r24
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
    aafc:	24 17       	cp	r18, r20
    aafe:	35 07       	cpc	r19, r21
    ab00:	09 f4       	brne	.+2      	; 0xab04 <irCommTasks+0xc9c>
    ab02:	2b c1       	rjmp	.+598    	; 0xad5a <irCommTasks+0xef2>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
    ab04:	26 17       	cp	r18, r22
    ab06:	37 07       	cpc	r19, r23
    ab08:	09 f4       	brne	.+2      	; 0xab0c <irCommTasks+0xca4>
    ab0a:	80 c1       	rjmp	.+768    	; 0xae0c <irCommTasks+0xfa4>
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
    ab0c:	30 93 0a 04 	sts	0x040A, r19
    ab10:	20 93 09 04 	sts	0x0409, r18
							irCommTempMax = irCommMaxSensorSignal[i];
    ab14:	30 93 08 04 	sts	0x0408, r19
    ab18:	20 93 07 04 	sts	0x0407, r18
							irCommComputeShift = 2;
    ab1c:	30 92 0c 04 	sts	0x040C, r3
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
    ab20:	40 92 0b 04 	sts	0x040B, r4
							irCommRxStartPeakDuration = 0;
    ab24:	10 92 1c 04 	sts	0x041C, r1
    ab28:	72 e0       	ldi	r23, 0x02	; 2
    ab2a:	87 2e       	mov	r8, r23
    ab2c:	54 2c       	mov	r5, r4
    ab2e:	81 cf       	rjmp	.-254    	; 0xaa32 <irCommTasks+0xbca>
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
    ab30:	80 91 1c 04 	lds	r24, 0x041C
    ab34:	8f 5f       	subi	r24, 0xFF	; 255
    ab36:	80 93 1c 04 	sts	0x041C, r24
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    ab3a:	60 91 09 04 	lds	r22, 0x0409
    ab3e:	70 91 0a 04 	lds	r23, 0x040A
    ab42:	26 17       	cp	r18, r22
    ab44:	37 07       	cpc	r19, r23
    ab46:	2c f4       	brge	.+10     	; 0xab52 <irCommTasks+0xcea>
							irCommTempMin = irCommMaxSensorSignal[i];
    ab48:	30 93 0a 04 	sts	0x040A, r19
    ab4c:	20 93 09 04 	sts	0x0409, r18
    ab50:	b9 01       	movw	r22, r18
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    ab52:	40 91 07 04 	lds	r20, 0x0407
    ab56:	50 91 08 04 	lds	r21, 0x0408
    ab5a:	42 17       	cp	r20, r18
    ab5c:	53 07       	cpc	r21, r19
    ab5e:	2c f4       	brge	.+10     	; 0xab6a <irCommTasks+0xd02>
							irCommTempMax = irCommMaxSensorSignal[i];
    ab60:	30 93 08 04 	sts	0x0408, r19
    ab64:	20 93 07 04 	sts	0x0407, r18
    ab68:	a9 01       	movw	r20, r18
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    ab6a:	ca 01       	movw	r24, r20
    ab6c:	86 1b       	sub	r24, r22
    ab6e:	97 0b       	sbc	r25, r23
    ab70:	80 35       	cpi	r24, 0x50	; 80
    ab72:	91 05       	cpc	r25, r1
    ab74:	0c f4       	brge	.+2      	; 0xab78 <irCommTasks+0xd10>
    ab76:	5d cf       	rjmp	.-326    	; 0xaa32 <irCommTasks+0xbca>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    ab78:	24 17       	cp	r18, r20
    ab7a:	35 07       	cpc	r19, r21
    ab7c:	09 f4       	brne	.+2      	; 0xab80 <irCommTasks+0xd18>
    ab7e:	40 c1       	rjmp	.+640    	; 0xae00 <irCommTasks+0xf98>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
    ab80:	26 17       	cp	r18, r22
    ab82:	37 07       	cpc	r19, r23
    ab84:	09 f0       	breq	.+2      	; 0xab88 <irCommTasks+0xd20>
    ab86:	55 cf       	rjmp	.-342    	; 0xaa32 <irCommTasks+0xbca>
    ab88:	80 91 1b 04 	lds	r24, 0x041B
    ab8c:	88 23       	and	r24, r24
    ab8e:	09 f0       	breq	.+2      	; 0xab92 <irCommTasks+0xd2a>
    ab90:	50 cf       	rjmp	.-352    	; 0xaa32 <irCommTasks+0xbca>
								irCommComputeShift = 0;
    ab92:	10 92 0c 04 	sts	0x040C, r1
    ab96:	88 24       	eor	r8, r8
    ab98:	4c cf       	rjmp	.-360    	; 0xaa32 <irCommTasks+0xbca>
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    ab9a:	b7 01       	movw	r22, r14
    ab9c:	c8 01       	movw	r24, r16
    ab9e:	e0 92 03 04 	sts	0x0403, r14
    aba2:	f0 92 04 04 	sts	0x0404, r15
    aba6:	00 93 05 04 	sts	0x0405, r16
    abaa:	10 93 06 04 	sts	0x0406, r17
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    abae:	20 91 f8 03 	lds	r18, 0x03F8
    abb2:	22 30       	cpi	r18, 0x02	; 2
    abb4:	08 f0       	brcs	.+2      	; 0xabb8 <irCommTasks+0xd50>
    abb6:	21 e0       	ldi	r18, 0x01	; 1
					irCommComputeShiftIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
    abb8:	e2 2f       	mov	r30, r18
    abba:	f0 e0       	ldi	r31, 0x00	; 0
    abbc:	e6 58       	subi	r30, 0x86	; 134
    abbe:	fb 4f       	sbci	r31, 0xFB	; 251
    abc0:	80 82       	st	Z, r8
				irCommComputeShiftIndexTemp++;
    abc2:	2f 5f       	subi	r18, 0xFF	; 255
    abc4:	20 93 f8 03 	sts	0x03F8, r18
				
				if(irCommShiftCountIndexTemp>1) {
    abc8:	20 91 f5 03 	lds	r18, 0x03F5
    abcc:	22 30       	cpi	r18, 0x02	; 2
    abce:	08 f0       	brcs	.+2      	; 0xabd2 <irCommTasks+0xd6a>
    abd0:	21 e0       	ldi	r18, 0x01	; 1
					irCommShiftCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
    abd2:	e2 2f       	mov	r30, r18
    abd4:	f0 e0       	ldi	r31, 0x00	; 0
    abd6:	e7 57       	subi	r30, 0x77	; 119
    abd8:	f5 4f       	sbci	r31, 0xF5	; 245
    abda:	50 82       	st	Z, r5
				irCommShiftCountIndexTemp++;
    abdc:	2f 5f       	subi	r18, 0xFF	; 255
    abde:	20 93 f5 03 	sts	0x03F5, r18
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    abe2:	20 91 f9 03 	lds	r18, 0x03F9
    abe6:	22 30       	cpi	r18, 0x02	; 2
    abe8:	08 f0       	brcs	.+2      	; 0xabec <irCommTasks+0xd84>
    abea:	21 e0       	ldi	r18, 0x01	; 1
					irCommRxPeakHighToLowIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
    abec:	e2 2f       	mov	r30, r18
    abee:	f0 e0       	ldi	r31, 0x00	; 0
    abf0:	e9 52       	subi	r30, 0x29	; 41
    abf2:	fb 4f       	sbci	r31, 0xFB	; 251
    abf4:	10 91 1b 04 	lds	r17, 0x041B
    abf8:	10 83       	st	Z, r17
				irCommRxPeakHighToLowIndexTemp++;
    abfa:	2f 5f       	subi	r18, 0xFF	; 255
    abfc:	20 93 f9 03 	sts	0x03F9, r18
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    ac00:	20 91 fa 03 	lds	r18, 0x03FA
    ac04:	22 30       	cpi	r18, 0x02	; 2
    ac06:	08 f0       	brcs	.+2      	; 0xac0a <irCommTasks+0xda2>
    ac08:	21 e0       	ldi	r18, 0x01	; 1
					irCommRxStartPeakDurationIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartPeakDurationTemp[irCommRxStartPeakDurationIndexTemp] = irCommRxStartPeakDuration;
    ac0a:	e2 2f       	mov	r30, r18
    ac0c:	f0 e0       	ldi	r31, 0x00	; 0
    ac0e:	e7 5e       	subi	r30, 0xE7	; 231
    ac10:	f9 4f       	sbci	r31, 0xF9	; 249
    ac12:	00 91 1c 04 	lds	r16, 0x041C
    ac16:	00 83       	st	Z, r16
				irCommRxStartPeakDurationIndexTemp++;
    ac18:	2f 5f       	subi	r18, 0xFF	; 255
    ac1a:	20 93 fa 03 	sts	0x03FA, r18
					
				
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    ac1e:	24 e1       	ldi	r18, 0x14	; 20
    ac20:	30 e0       	ldi	r19, 0x00	; 0
    ac22:	40 e0       	ldi	r20, 0x00	; 0
    ac24:	50 e0       	ldi	r21, 0x00	; 0
    ac26:	4b d7       	rcall	.+3734   	; 0xbabe <__divmodsi4>
    ac28:	a9 01       	movw	r20, r18
    ac2a:	30 93 0e 04 	sts	0x040E, r19
    ac2e:	20 93 0d 04 	sts	0x040D, r18

				if(irCommProxMeanIndexTemp>1) {
    ac32:	80 91 f1 03 	lds	r24, 0x03F1
    ac36:	82 30       	cpi	r24, 0x02	; 2
    ac38:	08 f0       	brcs	.+2      	; 0xac3c <irCommTasks+0xdd4>
    ac3a:	81 e0       	ldi	r24, 0x01	; 1
					irCommProxMeanIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
    ac3c:	e8 2f       	mov	r30, r24
    ac3e:	f0 e0       	ldi	r31, 0x00	; 0
    ac40:	ee 0f       	add	r30, r30
    ac42:	ff 1f       	adc	r31, r31
    ac44:	e3 58       	subi	r30, 0x83	; 131
    ac46:	fb 4f       	sbci	r31, 0xFB	; 251
    ac48:	51 83       	std	Z+1, r21	; 0x01
    ac4a:	40 83       	st	Z, r20
				irCommProxMeanIndexTemp++;
    ac4c:	8f 5f       	subi	r24, 0xFF	; 255
    ac4e:	80 93 f1 03 	sts	0x03F1, r24
    ac52:	30 91 ee 03 	lds	r19, 0x03EE
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;
    ac56:	67 e2       	ldi	r22, 0x27	; 39
    ac58:	d5 01       	movw	r26, r10
    ac5a:	8d 91       	ld	r24, X+
    ac5c:	9c 91       	ld	r25, X
    ac5e:	11 97       	sbiw	r26, 0x01	; 1
    ac60:	84 1b       	sub	r24, r20
    ac62:	95 0b       	sbc	r25, r21
    ac64:	8d 93       	st	X+, r24
    ac66:	9c 93       	st	X, r25
    ac68:	27 e2       	ldi	r18, 0x27	; 39
    ac6a:	36 17       	cp	r19, r22
    ac6c:	08 f4       	brcc	.+2      	; 0xac70 <irCommTasks+0xe08>
    ac6e:	23 2f       	mov	r18, r19

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
						irCommMaxSensorSignalFiltIndexTemp = 39;
						//updateRedLed(0);
					}
					irCommMaxSensorSignalFiltTemp[irCommMaxSensorSignalFiltIndexTemp] = irCommMaxSensorSignal[i];
    ac70:	e2 2f       	mov	r30, r18
    ac72:	f0 e0       	ldi	r31, 0x00	; 0
    ac74:	ee 0f       	add	r30, r30
    ac76:	ff 1f       	adc	r31, r31
    ac78:	eb 57       	subi	r30, 0x7B	; 123
    ac7a:	fb 4f       	sbci	r31, 0xFB	; 251
    ac7c:	91 83       	std	Z+1, r25	; 0x01
    ac7e:	80 83       	st	Z, r24
					irCommMaxSensorSignalFiltIndexTemp++;
    ac80:	32 2f       	mov	r19, r18
    ac82:	3f 5f       	subi	r19, 0xFF	; 255
    ac84:	e2 e0       	ldi	r30, 0x02	; 2
    ac86:	f0 e0       	ldi	r31, 0x00	; 0
    ac88:	ae 0e       	add	r10, r30
    ac8a:	bf 1e       	adc	r11, r31
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    ac8c:	ff e6       	ldi	r31, 0x6F	; 111
    ac8e:	af 16       	cp	r10, r31
    ac90:	fa e0       	ldi	r31, 0x0A	; 10
    ac92:	bf 06       	cpc	r11, r31
    ac94:	09 f7       	brne	.-62     	; 0xac58 <irCommTasks+0xdf0>
    ac96:	30 93 ee 03 	sts	0x03EE, r19
					irCommMaxSensorSignalFiltIndexTemp++;
					
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    ac9a:	80 91 47 0a 	lds	r24, 0x0A47
    ac9e:	90 91 48 0a 	lds	r25, 0x0A48
    aca2:	18 16       	cp	r1, r24
    aca4:	19 06       	cpc	r1, r25
    aca6:	0c f0       	brlt	.+2      	; 0xacaa <irCommTasks+0xe42>
    aca8:	5b c1       	rjmp	.+694    	; 0xaf60 <irCommTasks+0x10f8>
					irCommSignalState = 1;
    acaa:	81 e0       	ldi	r24, 0x01	; 1
    acac:	80 93 0f 04 	sts	0x040F, r24
    acb0:	28 2f       	mov	r18, r24
				} else {
					irCommSignalState = -1;
    acb2:	e9 e4       	ldi	r30, 0x49	; 73
    acb4:	fa e0       	ldi	r31, 0x0A	; 10
    acb6:	30 e0       	ldi	r19, 0x00	; 0
    acb8:	07 c0       	rjmp	.+14     	; 0xacc8 <irCommTasks+0xe60>
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    acba:	27 fd       	sbrc	r18, 7
    acbc:	0f c0       	rjmp	.+30     	; 0xacdc <irCommTasks+0xe74>
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
							irCommSwitchCount++;
    acbe:	32 96       	adiw	r30, 0x02	; 2
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    acc0:	8a e0       	ldi	r24, 0x0A	; 10
    acc2:	ef 36       	cpi	r30, 0x6F	; 111
    acc4:	f8 07       	cpc	r31, r24
    acc6:	69 f0       	breq	.+26     	; 0xace2 <irCommTasks+0xe7a>
					if(irCommMaxSensorSignal[i] > 0) {
    acc8:	80 81       	ld	r24, Z
    acca:	91 81       	ldd	r25, Z+1	; 0x01
    accc:	18 16       	cp	r1, r24
    acce:	19 06       	cpc	r1, r25
    acd0:	a4 f3       	brlt	.-24     	; 0xacba <irCommTasks+0xe52>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    acd2:	12 16       	cp	r1, r18
    acd4:	a4 f7       	brge	.-24     	; 0xacbe <irCommTasks+0xe56>
							irCommSignalState = -1;
							irCommSwitchCount++;
    acd6:	3f 5f       	subi	r19, 0xFF	; 255
    acd8:	2f ef       	ldi	r18, 0xFF	; 255
    acda:	f1 cf       	rjmp	.-30     	; 0xacbe <irCommTasks+0xe56>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    acdc:	3f 5f       	subi	r19, 0xFF	; 255
    acde:	21 e0       	ldi	r18, 0x01	; 1
    ace0:	ee cf       	rjmp	.-36     	; 0xacbe <irCommTasks+0xe56>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    ace2:	30 93 10 04 	sts	0x0410, r19
    ace6:	20 93 0f 04 	sts	0x040F, r18
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    acea:	80 91 f2 03 	lds	r24, 0x03F2
    acee:	82 30       	cpi	r24, 0x02	; 2
    acf0:	08 f0       	brcs	.+2      	; 0xacf4 <irCommTasks+0xe8c>
    acf2:	81 e0       	ldi	r24, 0x01	; 1
					irCommSwitchCountIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommSwitchCountTemp[irCommSwitchCountIndexTemp] = irCommSwitchCount;
    acf4:	e8 2f       	mov	r30, r24
    acf6:	f0 e0       	ldi	r31, 0x00	; 0
    acf8:	e0 5a       	subi	r30, 0xA0	; 160
    acfa:	fb 4f       	sbci	r31, 0xFB	; 251
    acfc:	30 83       	st	Z, r19
				irCommSwitchCountIndexTemp++;
    acfe:	8f 5f       	subi	r24, 0xFF	; 255
    ad00:	80 93 f2 03 	sts	0x03F2, r24
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
    ad04:	11 30       	cpi	r17, 0x01	; 1
    ad06:	09 f4       	brne	.+2      	; 0xad0a <irCommTasks+0xea2>
    ad08:	03 c1       	rjmp	.+518    	; 0xaf10 <irCommTasks+0x10a8>
							resetDebugVariables();				
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
    ad0a:	90 91 1a 04 	lds	r25, 0x041A
    ad0e:	91 30       	cpi	r25, 0x01	; 1
    ad10:	09 f4       	brne	.+2      	; 0xad14 <irCommTasks+0xeac>
    ad12:	3a c1       	rjmp	.+628    	; 0xaf88 <irCommTasks+0x1120>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    ad14:	32 30       	cpi	r19, 0x02	; 2
    ad16:	09 f4       	brne	.+2      	; 0xad1a <irCommTasks+0xeb2>
    ad18:	96 c1       	rjmp	.+812    	; 0xb046 <irCommTasks+0x11de>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    ad1a:	31 30       	cpi	r19, 0x01	; 1
    ad1c:	09 f4       	brne	.+2      	; 0xad20 <irCommTasks+0xeb8>
    ad1e:	36 c2       	rjmp	.+1132   	; 0xb18c <irCommTasks+0x1324>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							currentProx = 0;
    ad20:	10 92 22 02 	sts	0x0222, r1
							adcSaveDataTo = SKIP_SAMPLE;
    ad24:	85 e0       	ldi	r24, 0x05	; 5
    ad26:	80 93 b7 02 	sts	0x02B7, r24
							adcSamplingState = 0;
    ad2a:	10 92 b8 02 	sts	0x02B8, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    ad2e:	10 92 d5 03 	sts	0x03D5, r1
							irCommState = IRCOMM_RX_IDLE_STATE;
    ad32:	81 e0       	ldi	r24, 0x01	; 1
    ad34:	80 93 d6 03 	sts	0x03D6, r24

							if(irCommSyncStateIndexTemp>1) {
    ad38:	90 91 fd 03 	lds	r25, 0x03FD
    ad3c:	92 30       	cpi	r25, 0x02	; 2
    ad3e:	08 f0       	brcs	.+2      	; 0xad42 <irCommTasks+0xeda>
    ad40:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 15;
    ad42:	e9 2f       	mov	r30, r25
    ad44:	f0 e0       	ldi	r31, 0x00	; 0
    ad46:	e8 58       	subi	r30, 0x88	; 136
    ad48:	fb 4f       	sbci	r31, 0xFB	; 251
    ad4a:	8f e0       	ldi	r24, 0x0F	; 15
    ad4c:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    ad4e:	9f 5f       	subi	r25, 0xFF	; 255
    ad50:	90 93 fd 03 	sts	0x03FD, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    ad54:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <resetDebugVariables>
    ad58:	a0 c8       	rjmp	.-3776   	; 0x9e9a <irCommTasks+0x32>
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
							irCommStartDiffIndexTemp++;
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
    ad5a:	10 92 1b 04 	sts	0x041B, r1
    ad5e:	d6 ce       	rjmp	.-596    	; 0xab0c <irCommTasks+0xca4>
						}
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
    ad60:	80 91 1a 04 	lds	r24, 0x041A
    ad64:	81 30       	cpi	r24, 0x01	; 1
    ad66:	09 f4       	brne	.+2      	; 0xad6a <irCommTasks+0xf02>
    ad68:	3d c1       	rjmp	.+634    	; 0xafe4 <irCommTasks+0x117c>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    ad6a:	10 92 1a 04 	sts	0x041A, r1
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					//updateRedLed(0);
					currentProx = 0;
    ad6e:	10 92 22 02 	sts	0x0222, r1
					adcSaveDataTo = SKIP_SAMPLE;
    ad72:	85 e0       	ldi	r24, 0x05	; 5
    ad74:	80 93 b7 02 	sts	0x02B7, r24
					adcSamplingState = 0;
    ad78:	10 92 b8 02 	sts	0x02B8, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;					
    ad7c:	10 92 d5 03 	sts	0x03D5, r1
					irCommState = IRCOMM_RX_IDLE_STATE;
    ad80:	81 e0       	ldi	r24, 0x01	; 1
    ad82:	80 93 d6 03 	sts	0x03D6, r24

					//irCommState = IRCOMM_RX_DEBUG;
					//irCommAdcRxState = 12;
					//break;

					resetDebugVariables();
    ad86:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <resetDebugVariables>
    ad8a:	87 c8       	rjmp	.-3826   	; 0x9e9a <irCommTasks+0x32>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    ad8c:	30 93 10 04 	sts	0x0410, r19
    ad90:	20 93 0f 04 	sts	0x040F, r18
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    ad94:	36 30       	cpi	r19, 0x06	; 6
    ad96:	08 f4       	brcc	.+2      	; 0xad9a <irCommTasks+0xf32>
    ad98:	63 c0       	rjmp	.+198    	; 0xae60 <irCommTasks+0xff8>
					irCommRxBitReceived[irCommRxBitCount] = 0;
    ad9a:	20 91 11 04 	lds	r18, 0x0411
    ad9e:	e2 2f       	mov	r30, r18
    ada0:	f0 e0       	ldi	r31, 0x00	; 0
    ada2:	e2 59       	subi	r30, 0x92	; 146
    ada4:	fb 4f       	sbci	r31, 0xFB	; 251
    ada6:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    ada8:	28 30       	cpi	r18, 0x08	; 8
    adaa:	28 f4       	brcc	.+10     	; 0xadb6 <irCommTasks+0xf4e>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
    adac:	80 91 13 04 	lds	r24, 0x0413
    adb0:	88 0f       	add	r24, r24
    adb2:	80 93 13 04 	sts	0x0413, r24
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    adb6:	90 91 ff 03 	lds	r25, 0x03FF
    adba:	9a 30       	cpi	r25, 0x0A	; 10
    adbc:	20 f0       	brcs	.+8      	; 0xadc6 <irCommTasks+0xf5e>
					irCommRxBitReceivedIndexTemp = 9;
    adbe:	89 e0       	ldi	r24, 0x09	; 9
    adc0:	80 93 ff 03 	sts	0x03FF, r24
    adc4:	99 e0       	ldi	r25, 0x09	; 9
					//updateRedLed(0);
				}
				irCommRxBitReceivedTemp[irCommRxBitReceivedIndexTemp] = irCommRxBitReceived[irCommRxBitCount];
    adc6:	a9 2f       	mov	r26, r25
    adc8:	b0 e0       	ldi	r27, 0x00	; 0
    adca:	a3 59       	subi	r26, 0x93	; 147
    adcc:	b8 4f       	sbci	r27, 0xF8	; 248
    adce:	e2 2f       	mov	r30, r18
    add0:	f0 e0       	ldi	r31, 0x00	; 0
    add2:	e2 59       	subi	r30, 0x92	; 146
    add4:	fb 4f       	sbci	r31, 0xFB	; 251
    add6:	80 81       	ld	r24, Z
    add8:	8c 93       	st	X, r24
				irCommRxBitReceivedIndexTemp++;
    adda:	9f 5f       	subi	r25, 0xFF	; 255
    addc:	90 93 ff 03 	sts	0x03FF, r25

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
    ade0:	82 2f       	mov	r24, r18
    ade2:	8f 5f       	subi	r24, 0xFF	; 255
    ade4:	80 93 11 04 	sts	0x0411, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
    ade8:	8a 30       	cpi	r24, 0x0A	; 10
    adea:	09 f4       	brne	.+2      	; 0xadee <irCommTasks+0xf86>
    adec:	f2 c0       	rjmp	.+484    	; 0xafd2 <irCommTasks+0x116a>
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
    adee:	85 e0       	ldi	r24, 0x05	; 5
    adf0:	80 93 d6 03 	sts	0x03D6, r24

					if(irCommStateIndexTemp>13) {
    adf4:	90 91 fc 03 	lds	r25, 0x03FC
    adf8:	9e 30       	cpi	r25, 0x0E	; 14
    adfa:	08 f0       	brcs	.+2      	; 0xadfe <irCommTasks+0xf96>
    adfc:	bf cb       	rjmp	.-2178   	; 0xa57c <irCommTasks+0x714>
    adfe:	c2 cb       	rjmp	.-2172   	; 0xa584 <irCommTasks+0x71c>
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    ae00:	80 91 1b 04 	lds	r24, 0x041B
    ae04:	81 30       	cpi	r24, 0x01	; 1
    ae06:	09 f0       	breq	.+2      	; 0xae0a <irCommTasks+0xfa2>
    ae08:	bb ce       	rjmp	.-650    	; 0xab80 <irCommTasks+0xd18>
    ae0a:	c3 ce       	rjmp	.-634    	; 0xab92 <irCommTasks+0xd2a>
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    ae0c:	20 92 1b 04 	sts	0x041B, r2
    ae10:	7d ce       	rjmp	.-774    	; 0xab0c <irCommTasks+0xca4>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    ae12:	2f 5f       	subi	r18, 0xFF	; 255
    ae14:	f9 c8       	rjmp	.-3598   	; 0xa008 <irCommTasks+0x1a0>
    ae16:	2f 5f       	subi	r18, 0xFF	; 255
    ae18:	ea c8       	rjmp	.-3628   	; 0x9fee <irCommTasks+0x186>
    ae1a:	2f 5f       	subi	r18, 0xFF	; 255
    ae1c:	d7 c8       	rjmp	.-3666   	; 0x9fcc <irCommTasks+0x164>
    ae1e:	2f 5f       	subi	r18, 0xFF	; 255
    ae20:	c2 c8       	rjmp	.-3708   	; 0x9fa6 <irCommTasks+0x13e>
    ae22:	2f 5f       	subi	r18, 0xFF	; 255
    ae24:	af c8       	rjmp	.-3746   	; 0x9f84 <irCommTasks+0x11c>
    ae26:	2f 5f       	subi	r18, 0xFF	; 255
    ae28:	9e c8       	rjmp	.-3780   	; 0x9f66 <irCommTasks+0xfe>
    ae2a:	20 91 29 04 	lds	r18, 0x0429
    ae2e:	2f 5f       	subi	r18, 0xFF	; 255
    ae30:	8d c8       	rjmp	.-3814   	; 0x9f4c <irCommTasks+0xe4>
    ae32:	81 e0       	ldi	r24, 0x01	; 1
    ae34:	80 93 29 04 	sts	0x0429, r24
    ae38:	7c c8       	rjmp	.-3848   	; 0x9f32 <irCommTasks+0xca>

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
    ae3a:	80 ef       	ldi	r24, 0xF0	; 240
    ae3c:	90 e0       	ldi	r25, 0x00	; 0
    ae3e:	90 93 2d 04 	sts	0x042D, r25
    ae42:	80 93 2c 04 	sts	0x042C, r24
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
    ae46:	81 e0       	ldi	r24, 0x01	; 1
    ae48:	80 93 2e 04 	sts	0x042E, r24
    ae4c:	be cb       	rjmp	.-2180   	; 0xa5ca <irCommTasks+0x762>

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
						irCommRxNumReceivingSensors++;
    ae4e:	40 91 21 04 	lds	r20, 0x0421
    ae52:	4f 5f       	subi	r20, 0xFF	; 255
    ae54:	40 93 21 04 	sts	0x0421, r20
    ae58:	c2 c9       	rjmp	.-3196   	; 0xa1de <irCommTasks+0x376>
				if(irCommTxBitCount == 0) {
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
						PORTA = 0xAA;
					} else {
						PORTA = 0x55;
    ae5a:	85 e5       	ldi	r24, 0x55	; 85
    ae5c:	82 b9       	out	0x02, r24	; 2
    ae5e:	be cb       	rjmp	.-2180   	; 0xa5dc <irCommTasks+0x774>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    ae60:	33 30       	cpi	r19, 0x03	; 3
    ae62:	08 f4       	brcc	.+2      	; 0xae66 <irCommTasks+0xffe>
    ae64:	84 cf       	rjmp	.-248    	; 0xad6e <irCommTasks+0xf06>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    ae66:	20 91 11 04 	lds	r18, 0x0411
    ae6a:	e2 2f       	mov	r30, r18
    ae6c:	f0 e0       	ldi	r31, 0x00	; 0
    ae6e:	e2 59       	subi	r30, 0x92	; 146
    ae70:	fb 4f       	sbci	r31, 0xFB	; 251
    ae72:	81 e0       	ldi	r24, 0x01	; 1
    ae74:	80 83       	st	Z, r24
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    ae76:	28 30       	cpi	r18, 0x08	; 8
    ae78:	08 f0       	brcs	.+2      	; 0xae7c <irCommTasks+0x1014>
    ae7a:	9d cf       	rjmp	.-198    	; 0xadb6 <irCommTasks+0xf4e>
						irCommRxCrc++;
    ae7c:	80 91 02 04 	lds	r24, 0x0402
    ae80:	8f 5f       	subi	r24, 0xFF	; 255
    ae82:	80 93 02 04 	sts	0x0402, r24
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    ae86:	80 91 13 04 	lds	r24, 0x0413
    ae8a:	88 0f       	add	r24, r24
						irCommRxByte += 1;
    ae8c:	8f 5f       	subi	r24, 0xFF	; 255
    ae8e:	80 93 13 04 	sts	0x0413, r24
    ae92:	91 cf       	rjmp	.-222    	; 0xadb6 <irCommTasks+0xf4e>
								irCommRxMaxSensor = 0;
							}
							i++;
						}
					} else {	// listen from the same sensor when a start bit is detected
						irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    ae94:	40 91 1f 04 	lds	r20, 0x041F
    ae98:	50 91 20 04 	lds	r21, 0x0420
    ae9c:	fa 01       	movw	r30, r20
    ae9e:	ee 0f       	add	r30, r30
    aea0:	ff 1f       	adc	r31, r31
    aea2:	de 01       	movw	r26, r28
    aea4:	ae 0f       	add	r26, r30
    aea6:	bf 1f       	adc	r27, r31
    aea8:	e6 0f       	add	r30, r22
    aeaa:	f7 1f       	adc	r31, r23
    aeac:	8d 91       	ld	r24, X+
    aeae:	9c 91       	ld	r25, X
    aeb0:	20 81       	ld	r18, Z
    aeb2:	31 81       	ldd	r19, Z+1	; 0x01
    aeb4:	82 1b       	sub	r24, r18
    aeb6:	93 0b       	sbc	r25, r19
    aeb8:	90 93 1e 04 	sts	0x041E, r25
    aebc:	80 93 1d 04 	sts	0x041D, r24
    aec0:	fc ca       	rjmp	.-2568   	; 0xa4ba <irCommTasks+0x652>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    aec2:	10 92 1a 04 	sts	0x041A, r1
						currentProx = 0;
    aec6:	10 92 22 02 	sts	0x0222, r1
						adcSaveDataTo = SKIP_SAMPLE;
    aeca:	85 e0       	ldi	r24, 0x05	; 5
    aecc:	80 93 b7 02 	sts	0x02B7, r24
						adcSamplingState = 0;
    aed0:	10 92 b8 02 	sts	0x02B8, r1
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    aed4:	10 92 d5 03 	sts	0x03D5, r1
						irCommState = IRCOMM_RX_IDLE_STATE;
    aed8:	81 e0       	ldi	r24, 0x01	; 1
    aeda:	80 93 d6 03 	sts	0x03D6, r24
						resetDebugVariables();
    aede:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <resetDebugVariables>
					//}			
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
    aee2:	80 91 1f 04 	lds	r24, 0x041F
    aee6:	90 91 20 04 	lds	r25, 0x0420
    aeea:	87 30       	cpi	r24, 0x07	; 7
    aeec:	91 05       	cpc	r25, r1
    aeee:	0c f0       	brlt	.+2      	; 0xaef2 <irCommTasks+0x108a>
    aef0:	8d c0       	rjmp	.+282    	; 0xb00c <irCommTasks+0x11a4>
						irCommRxMaxSensor++;
    aef2:	01 96       	adiw	r24, 0x01	; 1
    aef4:	90 93 20 04 	sts	0x0420, r25
    aef8:	80 93 1f 04 	sts	0x041F, r24
    aefc:	c0 91 59 04 	lds	r28, 0x0459
    af00:	d0 91 5a 04 	lds	r29, 0x045A
    af04:	60 91 45 04 	lds	r22, 0x0445
    af08:	70 91 46 04 	lds	r23, 0x0446
    af0c:	ac 01       	movw	r20, r24
    af0e:	d5 ca       	rjmp	.-2646   	; 0xa4ba <irCommTasks+0x652>
				irCommSwitchCountIndexTemp++;
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
    af10:	80 91 1a 04 	lds	r24, 0x041A
    af14:	81 30       	cpi	r24, 0x01	; 1
    af16:	09 f4       	brne	.+2      	; 0xaf1a <irCommTasks+0x10b2>
    af18:	14 c1       	rjmp	.+552    	; 0xb142 <irCommTasks+0x12da>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    af1a:	32 30       	cpi	r19, 0x02	; 2
    af1c:	09 f4       	brne	.+2      	; 0xaf20 <irCommTasks+0x10b8>
    af1e:	6b c1       	rjmp	.+726    	; 0xb1f6 <irCommTasks+0x138e>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
    af20:	31 30       	cpi	r19, 0x01	; 1
    af22:	09 f4       	brne	.+2      	; 0xaf26 <irCommTasks+0x10be>
    af24:	88 c1       	rjmp	.+784    	; 0xb236 <irCommTasks+0x13ce>
								irCommState = IRCOMM_RX_IDLE_STATE;

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							currentProx = 0;
    af26:	10 92 22 02 	sts	0x0222, r1
							adcSaveDataTo = SKIP_SAMPLE;
    af2a:	85 e0       	ldi	r24, 0x05	; 5
    af2c:	80 93 b7 02 	sts	0x02B7, r24
							adcSamplingState = 0;
    af30:	10 92 b8 02 	sts	0x02B8, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    af34:	10 92 d5 03 	sts	0x03D5, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    af38:	10 93 d6 03 	sts	0x03D6, r17

							if(irCommSyncStateIndexTemp>1) {
    af3c:	90 91 fd 03 	lds	r25, 0x03FD
    af40:	92 30       	cpi	r25, 0x02	; 2
    af42:	08 f0       	brcs	.+2      	; 0xaf46 <irCommTasks+0x10de>
    af44:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 11;
    af46:	e9 2f       	mov	r30, r25
    af48:	f0 e0       	ldi	r31, 0x00	; 0
    af4a:	e8 58       	subi	r30, 0x88	; 136
    af4c:	fb 4f       	sbci	r31, 0xFB	; 251
    af4e:	8b e0       	ldi	r24, 0x0B	; 11
    af50:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    af52:	9f 5f       	subi	r25, 0xFF	; 255
    af54:	90 93 fd 03 	sts	0x03FD, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    af58:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <resetDebugVariables>
    af5c:	0c 94 4d 4f 	jmp	0x9e9a	; 0x9e9a <irCommTasks+0x32>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    af60:	8f ef       	ldi	r24, 0xFF	; 255
    af62:	80 93 0f 04 	sts	0x040F, r24
    af66:	28 2f       	mov	r18, r24
    af68:	a4 ce       	rjmp	.-696    	; 0xacb2 <irCommTasks+0xe4a>
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    af6a:	8c e3       	ldi	r24, 0x3C	; 60
    af6c:	90 e0       	ldi	r25, 0x00	; 0
    af6e:	90 93 2d 04 	sts	0x042D, r25
    af72:	80 93 2c 04 	sts	0x042C, r24
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    af76:	84 e0       	ldi	r24, 0x04	; 4
    af78:	80 93 2e 04 	sts	0x042E, r24
    af7c:	26 cb       	rjmp	.-2484   	; 0xa5ca <irCommTasks+0x762>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    af7e:	8f ef       	ldi	r24, 0xFF	; 255
    af80:	80 93 0f 04 	sts	0x040F, r24
    af84:	28 2f       	mov	r18, r24
    af86:	fa c8       	rjmp	.-3596   	; 0xa17c <irCommTasks+0x314>
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    af88:	32 30       	cpi	r19, 0x02	; 2
    af8a:	09 f4       	brne	.+2      	; 0xaf8e <irCommTasks+0x1126>
    af8c:	29 c1       	rjmp	.+594    	; 0xb1e0 <irCommTasks+0x1378>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    af8e:	31 30       	cpi	r19, 0x01	; 1
    af90:	09 f4       	brne	.+2      	; 0xaf94 <irCommTasks+0x112c>
    af92:	9a c1       	rjmp	.+820    	; 0xb2c8 <irCommTasks+0x1460>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
    af94:	10 92 1a 04 	sts	0x041A, r1
							currentProx = 0;
    af98:	10 92 22 02 	sts	0x0222, r1
							adcSaveDataTo = SKIP_SAMPLE;
    af9c:	85 e0       	ldi	r24, 0x05	; 5
    af9e:	80 93 b7 02 	sts	0x02B7, r24
							adcSamplingState = 0;
    afa2:	10 92 b8 02 	sts	0x02B8, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    afa6:	10 92 d5 03 	sts	0x03D5, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    afaa:	90 93 d6 03 	sts	0x03D6, r25

							if(irCommSyncStateIndexTemp>1) {
    afae:	90 91 fd 03 	lds	r25, 0x03FD
    afb2:	92 30       	cpi	r25, 0x02	; 2
    afb4:	08 f0       	brcs	.+2      	; 0xafb8 <irCommTasks+0x1150>
    afb6:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 13;
    afb8:	e9 2f       	mov	r30, r25
    afba:	f0 e0       	ldi	r31, 0x00	; 0
    afbc:	e8 58       	subi	r30, 0x88	; 136
    afbe:	fb 4f       	sbci	r31, 0xFB	; 251
    afc0:	8d e0       	ldi	r24, 0x0D	; 13
    afc2:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    afc4:	9f 5f       	subi	r25, 0xFF	; 255
    afc6:	90 93 fd 03 	sts	0x03FD, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    afca:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <resetDebugVariables>
    afce:	0c 94 4d 4f 	jmp	0x9e9a	; 0x9e9a <irCommTasks+0x32>

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    afd2:	87 e0       	ldi	r24, 0x07	; 7
    afd4:	80 93 d6 03 	sts	0x03D6, r24

					if(irCommStateIndexTemp>13) {
    afd8:	90 91 fc 03 	lds	r25, 0x03FC
    afdc:	9e 30       	cpi	r25, 0x0E	; 14
    afde:	08 f0       	brcs	.+2      	; 0xafe2 <irCommTasks+0x117a>
    afe0:	cd ca       	rjmp	.-2662   	; 0xa57c <irCommTasks+0x714>
    afe2:	d0 ca       	rjmp	.-2656   	; 0xa584 <irCommTasks+0x71c>
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
    afe4:	47 30       	cpi	r20, 0x07	; 7
    afe6:	51 05       	cpc	r21, r1
    afe8:	0c f0       	brlt	.+2      	; 0xafec <irCommTasks+0x1184>
    afea:	f5 c0       	rjmp	.+490    	; 0xb1d6 <irCommTasks+0x136e>
							irCommRxMaxSensor++;
    afec:	4f 5f       	subi	r20, 0xFF	; 255
    afee:	5f 4f       	sbci	r21, 0xFF	; 255
    aff0:	50 93 20 04 	sts	0x0420, r21
    aff4:	40 93 1f 04 	sts	0x041F, r20
    aff8:	b8 ce       	rjmp	.-656    	; 0xad6a <irCommTasks+0xf02>
					if(irCommRxStartBitDetected==0) {
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    affa:	10 92 20 04 	sts	0x0420, r1
    affe:	10 92 1f 04 	sts	0x041F, r1
    b002:	40 91 1f 04 	lds	r20, 0x041F
    b006:	50 91 20 04 	lds	r21, 0x0420
    b00a:	60 c9       	rjmp	.-3392   	; 0xa2cc <irCommTasks+0x464>
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
    b00c:	10 92 20 04 	sts	0x0420, r1
    b010:	10 92 1f 04 	sts	0x041F, r1
    b014:	c0 91 59 04 	lds	r28, 0x0459
    b018:	d0 91 5a 04 	lds	r29, 0x045A
    b01c:	60 91 45 04 	lds	r22, 0x0445
    b020:	70 91 46 04 	lds	r23, 0x0446
    b024:	40 e0       	ldi	r20, 0x00	; 0
    b026:	50 e0       	ldi	r21, 0x00	; 0
    b028:	48 ca       	rjmp	.-2928   	; 0xa4ba <irCommTasks+0x652>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    b02a:	4f 5f       	subi	r20, 0xFF	; 255
    b02c:	5f 4f       	sbci	r21, 0xFF	; 255
    b02e:	50 93 20 04 	sts	0x0420, r21
    b032:	40 93 1f 04 	sts	0x041F, r20
    b036:	88 c9       	rjmp	.-3312   	; 0xa348 <irCommTasks+0x4e0>
    b038:	4f 5f       	subi	r20, 0xFF	; 255
    b03a:	5f 4f       	sbci	r21, 0xFF	; 255
    b03c:	50 93 20 04 	sts	0x0420, r21
    b040:	40 93 1f 04 	sts	0x041F, r20
    b044:	62 c9       	rjmp	.-3388   	; 0xa30a <irCommTasks+0x4a2>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    b046:	90 91 fd 03 	lds	r25, 0x03FD
    b04a:	92 30       	cpi	r25, 0x02	; 2
    b04c:	08 f0       	brcs	.+2      	; 0xb050 <irCommTasks+0x11e8>
    b04e:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 1;
    b050:	e9 2f       	mov	r30, r25
    b052:	f0 e0       	ldi	r31, 0x00	; 0
    b054:	e8 58       	subi	r30, 0x88	; 136
    b056:	fb 4f       	sbci	r31, 0xFB	; 251
    b058:	81 e0       	ldi	r24, 0x01	; 1
    b05a:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    b05c:	9f 5f       	subi	r25, 0xFF	; 255
    b05e:	90 93 fd 03 	sts	0x03FD, r25

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    b062:	95 2d       	mov	r25, r5
    b064:	96 5f       	subi	r25, 0xF6	; 246
    b066:	90 93 0b 04 	sts	0x040B, r25
							irCommRxPeakHighToLow = 0;
    b06a:	10 92 1b 04 	sts	0x041B, r1
							irCommRxStartBitDetected = 0;
    b06e:	10 92 1a 04 	sts	0x041A, r1
							irCommSecondBitSkipped = 0;
    b072:	10 92 14 04 	sts	0x0414, r1
							irCommShiftCounter = 0;
    b076:	10 92 15 04 	sts	0x0415, r1
							irCommRxBitCount = 0;	
    b07a:	10 92 11 04 	sts	0x0411, r1
							irCommRxCrc = 0;	
    b07e:	10 92 02 04 	sts	0x0402, r1
							irCommRxByte = 0;
    b082:	10 92 13 04 	sts	0x0413, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    b086:	84 e0       	ldi	r24, 0x04	; 4
    b088:	80 93 d6 03 	sts	0x03D6, r24
    b08c:	59 2e       	mov	r5, r25
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    b08e:	90 91 fc 03 	lds	r25, 0x03FC
    b092:	9e 30       	cpi	r25, 0x0E	; 14
    b094:	20 f0       	brcs	.+8      	; 0xb09e <irCommTasks+0x1236>
					irCommStateIndexTemp = 13;
    b096:	8d e0       	ldi	r24, 0x0D	; 13
    b098:	80 93 fc 03 	sts	0x03FC, r24
    b09c:	9d e0       	ldi	r25, 0x0D	; 13
					//updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
    b09e:	80 91 d6 03 	lds	r24, 0x03D6
    b0a2:	e9 2f       	mov	r30, r25
    b0a4:	f0 e0       	ldi	r31, 0x00	; 0
    b0a6:	e5 5b       	subi	r30, 0xB5	; 181
    b0a8:	fb 4f       	sbci	r31, 0xFB	; 251
    b0aa:	80 83       	st	Z, r24
				irCommStateIndexTemp++;
    b0ac:	9f 5f       	subi	r25, 0xFF	; 255
    b0ae:	90 93 fc 03 	sts	0x03FC, r25
				
				if(irCommShiftCountFinalIndexTemp>1) {
    b0b2:	80 91 f6 03 	lds	r24, 0x03F6
    b0b6:	82 30       	cpi	r24, 0x02	; 2
    b0b8:	08 f0       	brcs	.+2      	; 0xb0bc <irCommTasks+0x1254>
    b0ba:	81 e0       	ldi	r24, 0x01	; 1
					irCommShiftCountFinalIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
    b0bc:	e8 2f       	mov	r30, r24
    b0be:	f0 e0       	ldi	r31, 0x00	; 0
    b0c0:	ed 5b       	subi	r30, 0xBD	; 189
    b0c2:	f5 4f       	sbci	r31, 0xF5	; 245
    b0c4:	50 82       	st	Z, r5
				irCommShiftCountFinalIndexTemp++;
    b0c6:	8f 5f       	subi	r24, 0xFF	; 255
    b0c8:	80 93 f6 03 	sts	0x03F6, r24
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    b0cc:	90 91 fb 03 	lds	r25, 0x03FB
    b0d0:	92 30       	cpi	r25, 0x02	; 2
    b0d2:	08 f0       	brcs	.+2      	; 0xb0d6 <irCommTasks+0x126e>
    b0d4:	91 e0       	ldi	r25, 0x01	; 1
					irCommRxStartBitDetectedIndexTemp = 1;
					//updateRedLed(0);
				}
				irCommRxStartBitDetectedTemp[irCommRxStartBitDetectedIndexTemp] = irCommRxStartBitDetected;
    b0d6:	e9 2f       	mov	r30, r25
    b0d8:	f0 e0       	ldi	r31, 0x00	; 0
    b0da:	ed 57       	subi	r30, 0x7D	; 125
    b0dc:	fb 4f       	sbci	r31, 0xFB	; 251
    b0de:	80 91 1a 04 	lds	r24, 0x041A
    b0e2:	80 83       	st	Z, r24
				irCommRxStartBitDetectedIndexTemp++;			
    b0e4:	9f 5f       	subi	r25, 0xFF	; 255
    b0e6:	90 93 fb 03 	sts	0x03FB, r25
    b0ea:	0c 94 4d 4f 	jmp	0x9e9a	; 0x9e9a <irCommTasks+0x32>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    b0ee:	4f 5f       	subi	r20, 0xFF	; 255
    b0f0:	5f 4f       	sbci	r21, 0xFF	; 255
    b0f2:	50 93 20 04 	sts	0x0420, r21
    b0f6:	40 93 1f 04 	sts	0x041F, r20
    b0fa:	45 c9       	rjmp	.-3446   	; 0xa386 <irCommTasks+0x51e>
    b0fc:	4f 5f       	subi	r20, 0xFF	; 255
    b0fe:	5f 4f       	sbci	r21, 0xFF	; 255
    b100:	50 93 20 04 	sts	0x0420, r21
    b104:	40 93 1f 04 	sts	0x041F, r20
    b108:	5d c9       	rjmp	.-3398   	; 0xa3c4 <irCommTasks+0x55c>
    b10a:	4f 5f       	subi	r20, 0xFF	; 255
    b10c:	5f 4f       	sbci	r21, 0xFF	; 255
    b10e:	50 93 20 04 	sts	0x0420, r21
    b112:	40 93 1f 04 	sts	0x041F, r20
    b116:	75 c9       	rjmp	.-3350   	; 0xa402 <irCommTasks+0x59a>
    b118:	4f 5f       	subi	r20, 0xFF	; 255
    b11a:	5f 4f       	sbci	r21, 0xFF	; 255
    b11c:	50 93 20 04 	sts	0x0420, r21
    b120:	40 93 1f 04 	sts	0x041F, r20
    b124:	8d c9       	rjmp	.-3302   	; 0xa440 <irCommTasks+0x5d8>
							} else {
								irCommRxMaxSensor = 0;
    b126:	10 92 20 04 	sts	0x0420, r1
    b12a:	10 92 1f 04 	sts	0x041F, r1
    b12e:	40 e0       	ldi	r20, 0x00	; 0
    b130:	50 e0       	ldi	r21, 0x00	; 0
    b132:	c3 c9       	rjmp	.-3194   	; 0xa4ba <irCommTasks+0x652>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    b134:	4f 5f       	subi	r20, 0xFF	; 255
    b136:	5f 4f       	sbci	r21, 0xFF	; 255
    b138:	50 93 20 04 	sts	0x0420, r21
    b13c:	40 93 1f 04 	sts	0x041F, r20
    b140:	9e c9       	rjmp	.-3268   	; 0xa47e <irCommTasks+0x616>
				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    b142:	32 30       	cpi	r19, 0x02	; 2
    b144:	09 f4       	brne	.+2      	; 0xb148 <irCommTasks+0x12e0>
    b146:	f4 c0       	rjmp	.+488    	; 0xb330 <irCommTasks+0x14c8>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
    b148:	31 30       	cpi	r19, 0x01	; 1
    b14a:	09 f4       	brne	.+2      	; 0xb14e <irCommTasks+0x12e6>
    b14c:	0d c1       	rjmp	.+538    	; 0xb368 <irCommTasks+0x1500>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
    b14e:	10 92 1a 04 	sts	0x041A, r1
							currentProx = 0;
    b152:	10 92 22 02 	sts	0x0222, r1
							adcSaveDataTo = SKIP_SAMPLE;
    b156:	85 e0       	ldi	r24, 0x05	; 5
    b158:	80 93 b7 02 	sts	0x02B7, r24
							adcSamplingState = 0;
    b15c:	10 92 b8 02 	sts	0x02B8, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    b160:	10 92 d5 03 	sts	0x03D5, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    b164:	10 93 d6 03 	sts	0x03D6, r17

							if(irCommSyncStateIndexTemp>1) {
    b168:	90 91 fd 03 	lds	r25, 0x03FD
    b16c:	92 30       	cpi	r25, 0x02	; 2
    b16e:	08 f0       	brcs	.+2      	; 0xb172 <irCommTasks+0x130a>
    b170:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 12;
    b172:	e9 2f       	mov	r30, r25
    b174:	f0 e0       	ldi	r31, 0x00	; 0
    b176:	e8 58       	subi	r30, 0x88	; 136
    b178:	fb 4f       	sbci	r31, 0xFB	; 251
    b17a:	8c e0       	ldi	r24, 0x0C	; 12
    b17c:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    b17e:	9f 5f       	subi	r25, 0xFF	; 255
    b180:	90 93 fd 03 	sts	0x03FD, r25
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    b184:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <resetDebugVariables>
    b188:	0c 94 4d 4f 	jmp	0x9e9a	; 0x9e9a <irCommTasks+0x32>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    b18c:	0b 30       	cpi	r16, 0x0B	; 11
    b18e:	08 f4       	brcc	.+2      	; 0xb192 <irCommTasks+0x132a>
    b190:	76 c0       	rjmp	.+236    	; 0xb27e <irCommTasks+0x1416>
								currentProx = 0;
    b192:	10 92 22 02 	sts	0x0222, r1
								adcSaveDataTo = SKIP_SAMPLE;
    b196:	85 e0       	ldi	r24, 0x05	; 5
    b198:	80 93 b7 02 	sts	0x02B7, r24
								adcSamplingState = 0;
    b19c:	10 92 b8 02 	sts	0x02B8, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    b1a0:	10 92 d5 03 	sts	0x03D5, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    b1a4:	30 93 d6 03 	sts	0x03D6, r19

								if(irCommSyncStateIndexTemp>1) {
    b1a8:	90 91 fd 03 	lds	r25, 0x03FD
    b1ac:	92 30       	cpi	r25, 0x02	; 2
    b1ae:	08 f0       	brcs	.+2      	; 0xb1b2 <irCommTasks+0x134a>
    b1b0:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 14;
    b1b2:	e9 2f       	mov	r30, r25
    b1b4:	f0 e0       	ldi	r31, 0x00	; 0
    b1b6:	e8 58       	subi	r30, 0x88	; 136
    b1b8:	fb 4f       	sbci	r31, 0xFB	; 251
    b1ba:	8e e0       	ldi	r24, 0x0E	; 14
    b1bc:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    b1be:	9f 5f       	subi	r25, 0xFF	; 255
    b1c0:	90 93 fd 03 	sts	0x03FD, r25
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateRedLed(0);
								//break;

								resetDebugVariables();				
    b1c4:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <resetDebugVariables>
    b1c8:	0c 94 4d 4f 	jmp	0x9e9a	; 0x9e9a <irCommTasks+0x32>
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    b1cc:	b0 93 1e 04 	sts	0x041E, r27
    b1d0:	a0 93 1d 04 	sts	0x041D, r26
    b1d4:	72 c9       	rjmp	.-3356   	; 0xa4ba <irCommTasks+0x652>
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    b1d6:	10 92 20 04 	sts	0x0420, r1
    b1da:	10 92 1f 04 	sts	0x041F, r1
    b1de:	c5 cd       	rjmp	.-1142   	; 0xad6a <irCommTasks+0xf02>
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    b1e0:	90 91 fd 03 	lds	r25, 0x03FD
    b1e4:	92 30       	cpi	r25, 0x02	; 2
    b1e6:	08 f0       	brcs	.+2      	; 0xb1ea <irCommTasks+0x1382>
    b1e8:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    b1ea:	e9 2f       	mov	r30, r25
    b1ec:	f0 e0       	ldi	r31, 0x00	; 0
    b1ee:	e8 58       	subi	r30, 0x88	; 136
    b1f0:	fb 4f       	sbci	r31, 0xFB	; 251
    b1f2:	85 e0       	ldi	r24, 0x05	; 5
    b1f4:	32 cf       	rjmp	.-412    	; 0xb05a <irCommTasks+0x11f2>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommRxStartPeakDuration<=3) {	// peak due to sensors sampling detected
    b1f6:	04 30       	cpi	r16, 0x04	; 4
    b1f8:	08 f0       	brcs	.+2      	; 0xb1fc <irCommTasks+0x1394>
    b1fa:	89 c0       	rjmp	.+274    	; 0xb30e <irCommTasks+0x14a6>
								currentProx = 0;
    b1fc:	10 92 22 02 	sts	0x0222, r1
								adcSaveDataTo = SKIP_SAMPLE;
    b200:	85 e0       	ldi	r24, 0x05	; 5
    b202:	80 93 b7 02 	sts	0x02B7, r24
								adcSamplingState = 0;
    b206:	10 92 b8 02 	sts	0x02B8, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
    b20a:	10 92 d5 03 	sts	0x03D5, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    b20e:	10 93 d6 03 	sts	0x03D6, r17

								if(irCommSyncStateIndexTemp>1) {
    b212:	90 91 fd 03 	lds	r25, 0x03FD
    b216:	92 30       	cpi	r25, 0x02	; 2
    b218:	08 f0       	brcs	.+2      	; 0xb21c <irCommTasks+0x13b4>
    b21a:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 16;
    b21c:	e9 2f       	mov	r30, r25
    b21e:	f0 e0       	ldi	r31, 0x00	; 0
    b220:	e8 58       	subi	r30, 0x88	; 136
    b222:	fb 4f       	sbci	r31, 0xFB	; 251
    b224:	80 e1       	ldi	r24, 0x10	; 16
    b226:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    b228:	9f 5f       	subi	r25, 0xFF	; 255
    b22a:	90 93 fd 03 	sts	0x03FD, r25
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateGreenLed(0);
								//break;

								resetDebugVariables();
    b22e:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <resetDebugVariables>
    b232:	0c 94 4d 4f 	jmp	0x9e9a	; 0x9e9a <irCommTasks+0x32>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
							irCommRxStartBitDetected = 1;					
    b236:	30 93 1a 04 	sts	0x041A, r19
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    b23a:	0b 30       	cpi	r16, 0x0B	; 11
    b23c:	08 f4       	brcc	.+2      	; 0xb240 <irCommTasks+0x13d8>
    b23e:	83 c0       	rjmp	.+262    	; 0xb346 <irCommTasks+0x14de>
								if(irCommSyncStateIndexTemp>1) {
    b240:	90 91 fd 03 	lds	r25, 0x03FD
    b244:	92 30       	cpi	r25, 0x02	; 2
    b246:	08 f0       	brcs	.+2      	; 0xb24a <irCommTasks+0x13e2>
    b248:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 4;
    b24a:	e9 2f       	mov	r30, r25
    b24c:	f0 e0       	ldi	r31, 0x00	; 0
    b24e:	e8 58       	subi	r30, 0x88	; 136
    b250:	fb 4f       	sbci	r31, 0xFB	; 251
    b252:	84 e0       	ldi	r24, 0x04	; 4
    b254:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    b256:	9f 5f       	subi	r25, 0xFF	; 255
    b258:	90 93 fd 03 	sts	0x03FD, r25

								//irCommShiftCount = irCommShiftCount;
								irCommRxPeakHighToLow = 0;
    b25c:	10 92 1b 04 	sts	0x041B, r1
								irCommRxStartBitDetected = 0;
    b260:	10 92 1a 04 	sts	0x041A, r1
								irCommSecondBitSkipped = 0;
    b264:	10 92 14 04 	sts	0x0414, r1
								irCommShiftCounter = 0;
    b268:	10 92 15 04 	sts	0x0415, r1
								irCommRxBitCount = 0;	
    b26c:	10 92 11 04 	sts	0x0411, r1
								irCommRxCrc = 0;	
    b270:	10 92 02 04 	sts	0x0402, r1
								irCommRxByte = 0;
    b274:	10 92 13 04 	sts	0x0413, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    b278:	80 93 d6 03 	sts	0x03D6, r24
    b27c:	08 cf       	rjmp	.-496    	; 0xb08e <irCommTasks+0x1226>
								//break;

								resetDebugVariables();				
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    b27e:	90 91 fd 03 	lds	r25, 0x03FD
    b282:	92 30       	cpi	r25, 0x02	; 2
    b284:	08 f0       	brcs	.+2      	; 0xb288 <irCommTasks+0x1420>
    b286:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 7;
    b288:	e9 2f       	mov	r30, r25
    b28a:	f0 e0       	ldi	r31, 0x00	; 0
    b28c:	e8 58       	subi	r30, 0x88	; 136
    b28e:	fb 4f       	sbci	r31, 0xFB	; 251
    b290:	87 e0       	ldi	r24, 0x07	; 7
    b292:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    b294:	9f 5f       	subi	r25, 0xFF	; 255
    b296:	90 93 fd 03 	sts	0x03FD, r25

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW;
    b29a:	84 e1       	ldi	r24, 0x14	; 20
    b29c:	80 93 0b 04 	sts	0x040B, r24
								irCommRxPeakHighToLow = 0;
    b2a0:	10 92 1b 04 	sts	0x041B, r1
								irCommRxStartBitDetected = 0;
    b2a4:	10 92 1a 04 	sts	0x041A, r1
								irCommSecondBitSkipped = 0;
    b2a8:	10 92 14 04 	sts	0x0414, r1
								irCommShiftCounter = 0;
    b2ac:	10 92 15 04 	sts	0x0415, r1
								irCommRxBitCount = 0;	
    b2b0:	10 92 11 04 	sts	0x0411, r1
								irCommRxCrc = 0;	
    b2b4:	10 92 02 04 	sts	0x0402, r1
								irCommRxByte = 0;
    b2b8:	10 92 13 04 	sts	0x0413, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    b2bc:	84 e0       	ldi	r24, 0x04	; 4
    b2be:	80 93 d6 03 	sts	0x03D6, r24
    b2c2:	04 e1       	ldi	r16, 0x14	; 20
    b2c4:	50 2e       	mov	r5, r16
    b2c6:	e3 ce       	rjmp	.-570    	; 0xb08e <irCommTasks+0x1226>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    b2c8:	90 91 fd 03 	lds	r25, 0x03FD
    b2cc:	92 30       	cpi	r25, 0x02	; 2
    b2ce:	08 f0       	brcs	.+2      	; 0xb2d2 <irCommTasks+0x146a>
    b2d0:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 8;
    b2d2:	e9 2f       	mov	r30, r25
    b2d4:	f0 e0       	ldi	r31, 0x00	; 0
    b2d6:	e8 58       	subi	r30, 0x88	; 136
    b2d8:	fb 4f       	sbci	r31, 0xFB	; 251
    b2da:	88 e0       	ldi	r24, 0x08	; 8
    b2dc:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    b2de:	9f 5f       	subi	r25, 0xFF	; 255
    b2e0:	90 93 fd 03 	sts	0x03FD, r25

							irCommShiftCount = 0;
    b2e4:	10 92 0b 04 	sts	0x040B, r1
							irCommRxPeakHighToLow = 0;
    b2e8:	10 92 1b 04 	sts	0x041B, r1
							irCommRxStartBitDetected = 0;
    b2ec:	10 92 1a 04 	sts	0x041A, r1
							irCommSecondBitSkipped = 0;
    b2f0:	10 92 14 04 	sts	0x0414, r1
							irCommShiftCounter = 0;
    b2f4:	10 92 15 04 	sts	0x0415, r1
							irCommRxBitCount = 0;	
    b2f8:	10 92 11 04 	sts	0x0411, r1
							irCommRxCrc = 0;	
    b2fc:	10 92 02 04 	sts	0x0402, r1
							irCommRxByte = 0;
    b300:	10 92 13 04 	sts	0x0413, r1
							irCommState = IRCOMM_RX_WAITING_BIT;
    b304:	85 e0       	ldi	r24, 0x05	; 5
    b306:	80 93 d6 03 	sts	0x03D6, r24
    b30a:	55 24       	eor	r5, r5
    b30c:	c0 ce       	rjmp	.-640    	; 0xb08e <irCommTasks+0x1226>
								//break;

								resetDebugVariables();
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    b30e:	90 91 fd 03 	lds	r25, 0x03FD
    b312:	92 30       	cpi	r25, 0x02	; 2
    b314:	08 f0       	brcs	.+2      	; 0xb318 <irCommTasks+0x14b0>
    b316:	91 e0       	ldi	r25, 0x01	; 1
									irCommSyncStateIndexTemp = 1;
									//updateRedLed(0);
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 3;
    b318:	e9 2f       	mov	r30, r25
    b31a:	f0 e0       	ldi	r31, 0x00	; 0
    b31c:	e8 58       	subi	r30, 0x88	; 136
    b31e:	fb 4f       	sbci	r31, 0xFB	; 251
    b320:	83 e0       	ldi	r24, 0x03	; 3
    b322:	80 83       	st	Z, r24
								irCommSyncStateIndexTemp++;
    b324:	9f 5f       	subi	r25, 0xFF	; 255
    b326:	90 93 fd 03 	sts	0x03FD, r25

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    b32a:	95 2d       	mov	r25, r5
    b32c:	9c 5e       	subi	r25, 0xEC	; 236
    b32e:	9b ce       	rjmp	.-714    	; 0xb066 <irCommTasks+0x11fe>

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    b330:	90 91 fd 03 	lds	r25, 0x03FD
    b334:	92 30       	cpi	r25, 0x02	; 2
    b336:	08 f0       	brcs	.+2      	; 0xb33a <irCommTasks+0x14d2>
    b338:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 6;
    b33a:	e9 2f       	mov	r30, r25
    b33c:	f0 e0       	ldi	r31, 0x00	; 0
    b33e:	e8 58       	subi	r30, 0x88	; 136
    b340:	fb 4f       	sbci	r31, 0xFB	; 251
    b342:	86 e0       	ldi	r24, 0x06	; 6
    b344:	cb cf       	rjmp	.-106    	; 0xb2dc <irCommTasks+0x1474>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							} else {
								currentProx = 0;
    b346:	10 92 22 02 	sts	0x0222, r1
								adcSaveDataTo = SKIP_SAMPLE;
    b34a:	85 e0       	ldi	r24, 0x05	; 5
    b34c:	80 93 b7 02 	sts	0x02B7, r24
								adcSamplingState = 0;
    b350:	10 92 b8 02 	sts	0x02B8, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    b354:	10 92 d5 03 	sts	0x03D5, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    b358:	30 93 d6 03 	sts	0x03D6, r19

								irCommSyncStateIndexTemp++;
    b35c:	80 91 fd 03 	lds	r24, 0x03FD
    b360:	8f 5f       	subi	r24, 0xFF	; 255
    b362:	80 93 fd 03 	sts	0x03FD, r24
    b366:	93 ce       	rjmp	.-730    	; 0xb08e <irCommTasks+0x1226>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    b368:	90 91 fd 03 	lds	r25, 0x03FD
    b36c:	92 30       	cpi	r25, 0x02	; 2
    b36e:	08 f0       	brcs	.+2      	; 0xb372 <irCommTasks+0x150a>
    b370:	91 e0       	ldi	r25, 0x01	; 1
								irCommSyncStateIndexTemp = 1;
								//updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 2;
    b372:	e9 2f       	mov	r30, r25
    b374:	f0 e0       	ldi	r31, 0x00	; 0
    b376:	e8 58       	subi	r30, 0x88	; 136
    b378:	fb 4f       	sbci	r31, 0xFB	; 251
    b37a:	82 e0       	ldi	r24, 0x02	; 2
    b37c:	80 83       	st	Z, r24
							irCommSyncStateIndexTemp++;
    b37e:	9f 5f       	subi	r25, 0xFF	; 255
    b380:	90 93 fd 03 	sts	0x03FD, r25

							//irCommShiftCount = irCommShiftCount;
							irCommRxPeakHighToLow = 0;
    b384:	10 92 1b 04 	sts	0x041B, r1
							irCommRxStartBitDetected = 0;
    b388:	10 92 1a 04 	sts	0x041A, r1
							irCommSecondBitSkipped = 0;
    b38c:	10 92 14 04 	sts	0x0414, r1
							irCommShiftCounter = 0;
    b390:	10 92 15 04 	sts	0x0415, r1
							irCommRxBitCount = 0;	
    b394:	10 92 11 04 	sts	0x0411, r1
							irCommRxCrc = 0;	
    b398:	10 92 02 04 	sts	0x0402, r1
							irCommRxByte = 0;
    b39c:	10 92 13 04 	sts	0x0413, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    b3a0:	84 e0       	ldi	r24, 0x04	; 4
    b3a2:	80 93 d6 03 	sts	0x03D6, r24
    b3a6:	73 ce       	rjmp	.-794    	; 0xb08e <irCommTasks+0x1226>

0000b3a8 <irCommInit>:
	memset(irCommMinSensorValueAdc, 0xFF, 16);
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
}

void irCommInit() {
	irCommProxValuesAdc = irCommProxValuesBuff1;
    b3a8:	89 ed       	ldi	r24, 0xD9	; 217
    b3aa:	94 e0       	ldi	r25, 0x04	; 4
    b3ac:	90 93 78 07 	sts	0x0778, r25
    b3b0:	80 93 77 07 	sts	0x0777, r24
	irCommProxValuesCurr = irCommProxValuesBuff2;
    b3b4:	8b e1       	ldi	r24, 0x1B	; 27
    b3b6:	96 e0       	ldi	r25, 0x06	; 6
    b3b8:	90 93 5c 07 	sts	0x075C, r25
    b3bc:	80 93 5b 07 	sts	0x075B, r24
	irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    b3c0:	e6 e8       	ldi	r30, 0x86	; 134
    b3c2:	f8 e0       	ldi	r31, 0x08	; 8
    b3c4:	f0 93 46 0a 	sts	0x0A46, r31
    b3c8:	e0 93 45 0a 	sts	0x0A45, r30
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    b3cc:	84 e7       	ldi	r24, 0x74	; 116
    b3ce:	9a e0       	ldi	r25, 0x0A	; 10
    b3d0:	90 93 5a 04 	sts	0x045A, r25
    b3d4:	80 93 59 04 	sts	0x0459, r24
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    b3d8:	8d e5       	ldi	r24, 0x5D	; 93
    b3da:	97 e0       	ldi	r25, 0x07	; 7
    b3dc:	90 93 d6 04 	sts	0x04D6, r25
    b3e0:	80 93 d5 04 	sts	0x04D5, r24
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    b3e4:	20 ee       	ldi	r18, 0xE0	; 224
    b3e6:	37 e0       	ldi	r19, 0x07	; 7
    b3e8:	30 93 46 04 	sts	0x0446, r19
    b3ec:	20 93 45 04 	sts	0x0445, r18
	irCommState = IRCOMM_RX_IDLE_STATE;
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
}

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
    b3f0:	20 e1       	ldi	r18, 0x10	; 16
    b3f2:	df 01       	movw	r26, r30
    b3f4:	1d 92       	st	X+, r1
    b3f6:	2a 95       	dec	r18
    b3f8:	e9 f7       	brne	.-6      	; 0xb3f4 <irCommInit+0x4c>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
    b3fa:	6f ef       	ldi	r22, 0xFF	; 255
    b3fc:	70 e0       	ldi	r23, 0x00	; 0
    b3fe:	40 e1       	ldi	r20, 0x10	; 16
    b400:	50 e0       	ldi	r21, 0x00	; 0
    b402:	fd d3       	rcall	.+2042   	; 0xbbfe <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    b404:	10 92 d5 03 	sts	0x03D5, r1
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    b408:	81 e0       	ldi	r24, 0x01	; 1
    b40a:	80 93 d3 03 	sts	0x03D3, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
    b40e:	80 93 d6 03 	sts	0x03D6, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    b412:	80 93 d4 03 	sts	0x03D4, r24
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
	irCommInitVars();
	irCommInitReceiver();
}
    b416:	08 95       	ret

0000b418 <__subsf3>:
    b418:	50 58       	subi	r21, 0x80	; 128

0000b41a <__addsf3>:
    b41a:	bb 27       	eor	r27, r27
    b41c:	aa 27       	eor	r26, r26
    b41e:	0e d0       	rcall	.+28     	; 0xb43c <__addsf3x>
    b420:	27 c2       	rjmp	.+1102   	; 0xb870 <__fp_round>
    b422:	f0 d1       	rcall	.+992    	; 0xb804 <__fp_pscA>
    b424:	30 f0       	brcs	.+12     	; 0xb432 <__addsf3+0x18>
    b426:	f5 d1       	rcall	.+1002   	; 0xb812 <__fp_pscB>
    b428:	20 f0       	brcs	.+8      	; 0xb432 <__addsf3+0x18>
    b42a:	31 f4       	brne	.+12     	; 0xb438 <__addsf3+0x1e>
    b42c:	9f 3f       	cpi	r25, 0xFF	; 255
    b42e:	11 f4       	brne	.+4      	; 0xb434 <__addsf3+0x1a>
    b430:	1e f4       	brtc	.+6      	; 0xb438 <__addsf3+0x1e>
    b432:	c0 c1       	rjmp	.+896    	; 0xb7b4 <__fp_nan>
    b434:	0e f4       	brtc	.+2      	; 0xb438 <__addsf3+0x1e>
    b436:	e0 95       	com	r30
    b438:	e7 fb       	bst	r30, 7
    b43a:	b6 c1       	rjmp	.+876    	; 0xb7a8 <__fp_inf>

0000b43c <__addsf3x>:
    b43c:	e9 2f       	mov	r30, r25
    b43e:	3a d2       	rcall	.+1140   	; 0xb8b4 <__fp_split3>
    b440:	80 f3       	brcs	.-32     	; 0xb422 <__addsf3+0x8>
    b442:	ba 17       	cp	r27, r26
    b444:	62 07       	cpc	r22, r18
    b446:	73 07       	cpc	r23, r19
    b448:	84 07       	cpc	r24, r20
    b44a:	95 07       	cpc	r25, r21
    b44c:	18 f0       	brcs	.+6      	; 0xb454 <__addsf3x+0x18>
    b44e:	71 f4       	brne	.+28     	; 0xb46c <__addsf3x+0x30>
    b450:	9e f5       	brtc	.+102    	; 0xb4b8 <__addsf3x+0x7c>
    b452:	52 c2       	rjmp	.+1188   	; 0xb8f8 <__fp_zero>
    b454:	0e f4       	brtc	.+2      	; 0xb458 <__addsf3x+0x1c>
    b456:	e0 95       	com	r30
    b458:	0b 2e       	mov	r0, r27
    b45a:	ba 2f       	mov	r27, r26
    b45c:	a0 2d       	mov	r26, r0
    b45e:	0b 01       	movw	r0, r22
    b460:	b9 01       	movw	r22, r18
    b462:	90 01       	movw	r18, r0
    b464:	0c 01       	movw	r0, r24
    b466:	ca 01       	movw	r24, r20
    b468:	a0 01       	movw	r20, r0
    b46a:	11 24       	eor	r1, r1
    b46c:	ff 27       	eor	r31, r31
    b46e:	59 1b       	sub	r21, r25
    b470:	99 f0       	breq	.+38     	; 0xb498 <__addsf3x+0x5c>
    b472:	59 3f       	cpi	r21, 0xF9	; 249
    b474:	50 f4       	brcc	.+20     	; 0xb48a <__addsf3x+0x4e>
    b476:	50 3e       	cpi	r21, 0xE0	; 224
    b478:	68 f1       	brcs	.+90     	; 0xb4d4 <__addsf3x+0x98>
    b47a:	1a 16       	cp	r1, r26
    b47c:	f0 40       	sbci	r31, 0x00	; 0
    b47e:	a2 2f       	mov	r26, r18
    b480:	23 2f       	mov	r18, r19
    b482:	34 2f       	mov	r19, r20
    b484:	44 27       	eor	r20, r20
    b486:	58 5f       	subi	r21, 0xF8	; 248
    b488:	f3 cf       	rjmp	.-26     	; 0xb470 <__addsf3x+0x34>
    b48a:	46 95       	lsr	r20
    b48c:	37 95       	ror	r19
    b48e:	27 95       	ror	r18
    b490:	a7 95       	ror	r26
    b492:	f0 40       	sbci	r31, 0x00	; 0
    b494:	53 95       	inc	r21
    b496:	c9 f7       	brne	.-14     	; 0xb48a <__addsf3x+0x4e>
    b498:	7e f4       	brtc	.+30     	; 0xb4b8 <__addsf3x+0x7c>
    b49a:	1f 16       	cp	r1, r31
    b49c:	ba 0b       	sbc	r27, r26
    b49e:	62 0b       	sbc	r22, r18
    b4a0:	73 0b       	sbc	r23, r19
    b4a2:	84 0b       	sbc	r24, r20
    b4a4:	ba f0       	brmi	.+46     	; 0xb4d4 <__addsf3x+0x98>
    b4a6:	91 50       	subi	r25, 0x01	; 1
    b4a8:	a1 f0       	breq	.+40     	; 0xb4d2 <__addsf3x+0x96>
    b4aa:	ff 0f       	add	r31, r31
    b4ac:	bb 1f       	adc	r27, r27
    b4ae:	66 1f       	adc	r22, r22
    b4b0:	77 1f       	adc	r23, r23
    b4b2:	88 1f       	adc	r24, r24
    b4b4:	c2 f7       	brpl	.-16     	; 0xb4a6 <__addsf3x+0x6a>
    b4b6:	0e c0       	rjmp	.+28     	; 0xb4d4 <__addsf3x+0x98>
    b4b8:	ba 0f       	add	r27, r26
    b4ba:	62 1f       	adc	r22, r18
    b4bc:	73 1f       	adc	r23, r19
    b4be:	84 1f       	adc	r24, r20
    b4c0:	48 f4       	brcc	.+18     	; 0xb4d4 <__addsf3x+0x98>
    b4c2:	87 95       	ror	r24
    b4c4:	77 95       	ror	r23
    b4c6:	67 95       	ror	r22
    b4c8:	b7 95       	ror	r27
    b4ca:	f7 95       	ror	r31
    b4cc:	9e 3f       	cpi	r25, 0xFE	; 254
    b4ce:	08 f0       	brcs	.+2      	; 0xb4d2 <__addsf3x+0x96>
    b4d0:	b3 cf       	rjmp	.-154    	; 0xb438 <__addsf3+0x1e>
    b4d2:	93 95       	inc	r25
    b4d4:	88 0f       	add	r24, r24
    b4d6:	08 f0       	brcs	.+2      	; 0xb4da <__addsf3x+0x9e>
    b4d8:	99 27       	eor	r25, r25
    b4da:	ee 0f       	add	r30, r30
    b4dc:	97 95       	ror	r25
    b4de:	87 95       	ror	r24
    b4e0:	08 95       	ret
    b4e2:	90 d1       	rcall	.+800    	; 0xb804 <__fp_pscA>
    b4e4:	58 f0       	brcs	.+22     	; 0xb4fc <__addsf3x+0xc0>
    b4e6:	80 e8       	ldi	r24, 0x80	; 128
    b4e8:	91 e0       	ldi	r25, 0x01	; 1
    b4ea:	09 f4       	brne	.+2      	; 0xb4ee <__addsf3x+0xb2>
    b4ec:	9e ef       	ldi	r25, 0xFE	; 254
    b4ee:	91 d1       	rcall	.+802    	; 0xb812 <__fp_pscB>
    b4f0:	28 f0       	brcs	.+10     	; 0xb4fc <__addsf3x+0xc0>
    b4f2:	40 e8       	ldi	r20, 0x80	; 128
    b4f4:	51 e0       	ldi	r21, 0x01	; 1
    b4f6:	59 f4       	brne	.+22     	; 0xb50e <atan2+0xe>
    b4f8:	5e ef       	ldi	r21, 0xFE	; 254
    b4fa:	09 c0       	rjmp	.+18     	; 0xb50e <atan2+0xe>
    b4fc:	5b c1       	rjmp	.+694    	; 0xb7b4 <__fp_nan>
    b4fe:	fc c1       	rjmp	.+1016   	; 0xb8f8 <__fp_zero>

0000b500 <atan2>:
    b500:	e9 2f       	mov	r30, r25
    b502:	e0 78       	andi	r30, 0x80	; 128
    b504:	d7 d1       	rcall	.+942    	; 0xb8b4 <__fp_split3>
    b506:	68 f3       	brcs	.-38     	; 0xb4e2 <__addsf3x+0xa6>
    b508:	09 2e       	mov	r0, r25
    b50a:	05 2a       	or	r0, r21
    b50c:	c1 f3       	breq	.-16     	; 0xb4fe <__addsf3x+0xc2>
    b50e:	26 17       	cp	r18, r22
    b510:	37 07       	cpc	r19, r23
    b512:	48 07       	cpc	r20, r24
    b514:	59 07       	cpc	r21, r25
    b516:	38 f0       	brcs	.+14     	; 0xb526 <atan2+0x26>
    b518:	0e 2e       	mov	r0, r30
    b51a:	07 f8       	bld	r0, 7
    b51c:	e0 25       	eor	r30, r0
    b51e:	69 f0       	breq	.+26     	; 0xb53a <atan2+0x3a>
    b520:	e0 25       	eor	r30, r0
    b522:	e0 64       	ori	r30, 0x40	; 64
    b524:	0a c0       	rjmp	.+20     	; 0xb53a <atan2+0x3a>
    b526:	ef 63       	ori	r30, 0x3F	; 63
    b528:	07 f8       	bld	r0, 7
    b52a:	00 94       	com	r0
    b52c:	07 fa       	bst	r0, 7
    b52e:	db 01       	movw	r26, r22
    b530:	b9 01       	movw	r22, r18
    b532:	9d 01       	movw	r18, r26
    b534:	dc 01       	movw	r26, r24
    b536:	ca 01       	movw	r24, r20
    b538:	ad 01       	movw	r20, r26
    b53a:	ef 93       	push	r30
    b53c:	4a d0       	rcall	.+148    	; 0xb5d2 <__divsf3_pse>
    b53e:	98 d1       	rcall	.+816    	; 0xb870 <__fp_round>
    b540:	0a d0       	rcall	.+20     	; 0xb556 <atan>
    b542:	5f 91       	pop	r21
    b544:	55 23       	and	r21, r21
    b546:	31 f0       	breq	.+12     	; 0xb554 <atan2+0x54>
    b548:	2b ed       	ldi	r18, 0xDB	; 219
    b54a:	3f e0       	ldi	r19, 0x0F	; 15
    b54c:	49 e4       	ldi	r20, 0x49	; 73
    b54e:	50 fd       	sbrc	r21, 0
    b550:	49 ec       	ldi	r20, 0xC9	; 201
    b552:	63 cf       	rjmp	.-314    	; 0xb41a <__addsf3>
    b554:	08 95       	ret

0000b556 <atan>:
    b556:	df 93       	push	r29
    b558:	dd 27       	eor	r29, r29
    b55a:	b9 2f       	mov	r27, r25
    b55c:	bf 77       	andi	r27, 0x7F	; 127
    b55e:	40 e8       	ldi	r20, 0x80	; 128
    b560:	5f e3       	ldi	r21, 0x3F	; 63
    b562:	16 16       	cp	r1, r22
    b564:	17 06       	cpc	r1, r23
    b566:	48 07       	cpc	r20, r24
    b568:	5b 07       	cpc	r21, r27
    b56a:	10 f4       	brcc	.+4      	; 0xb570 <atan+0x1a>
    b56c:	d9 2f       	mov	r29, r25
    b56e:	cf d1       	rcall	.+926    	; 0xb90e <inverse>
    b570:	9f 93       	push	r25
    b572:	8f 93       	push	r24
    b574:	7f 93       	push	r23
    b576:	6f 93       	push	r22
    b578:	3a d2       	rcall	.+1140   	; 0xb9ee <square>
    b57a:	ee e4       	ldi	r30, 0x4E	; 78
    b57c:	f1 e0       	ldi	r31, 0x01	; 1
    b57e:	1d d1       	rcall	.+570    	; 0xb7ba <__fp_powser>
    b580:	77 d1       	rcall	.+750    	; 0xb870 <__fp_round>
    b582:	2f 91       	pop	r18
    b584:	3f 91       	pop	r19
    b586:	4f 91       	pop	r20
    b588:	5f 91       	pop	r21
    b58a:	d4 d1       	rcall	.+936    	; 0xb934 <__mulsf3x>
    b58c:	dd 23       	and	r29, r29
    b58e:	49 f0       	breq	.+18     	; 0xb5a2 <atan+0x4c>
    b590:	90 58       	subi	r25, 0x80	; 128
    b592:	a2 ea       	ldi	r26, 0xA2	; 162
    b594:	2a ed       	ldi	r18, 0xDA	; 218
    b596:	3f e0       	ldi	r19, 0x0F	; 15
    b598:	49 ec       	ldi	r20, 0xC9	; 201
    b59a:	5f e3       	ldi	r21, 0x3F	; 63
    b59c:	d0 78       	andi	r29, 0x80	; 128
    b59e:	5d 27       	eor	r21, r29
    b5a0:	4d df       	rcall	.-358    	; 0xb43c <__addsf3x>
    b5a2:	df 91       	pop	r29
    b5a4:	65 c1       	rjmp	.+714    	; 0xb870 <__fp_round>

0000b5a6 <__cmpsf2>:
    b5a6:	dc d0       	rcall	.+440    	; 0xb760 <__fp_cmp>
    b5a8:	08 f4       	brcc	.+2      	; 0xb5ac <__cmpsf2+0x6>
    b5aa:	81 e0       	ldi	r24, 0x01	; 1
    b5ac:	08 95       	ret

0000b5ae <cos>:
    b5ae:	39 d1       	rcall	.+626    	; 0xb822 <__fp_rempio2>
    b5b0:	e3 95       	inc	r30
    b5b2:	6f c1       	rjmp	.+734    	; 0xb892 <__fp_sinus>

0000b5b4 <__divsf3>:
    b5b4:	0c d0       	rcall	.+24     	; 0xb5ce <__divsf3x>
    b5b6:	5c c1       	rjmp	.+696    	; 0xb870 <__fp_round>
    b5b8:	2c d1       	rcall	.+600    	; 0xb812 <__fp_pscB>
    b5ba:	40 f0       	brcs	.+16     	; 0xb5cc <__divsf3+0x18>
    b5bc:	23 d1       	rcall	.+582    	; 0xb804 <__fp_pscA>
    b5be:	30 f0       	brcs	.+12     	; 0xb5cc <__divsf3+0x18>
    b5c0:	21 f4       	brne	.+8      	; 0xb5ca <__divsf3+0x16>
    b5c2:	5f 3f       	cpi	r21, 0xFF	; 255
    b5c4:	19 f0       	breq	.+6      	; 0xb5cc <__divsf3+0x18>
    b5c6:	f0 c0       	rjmp	.+480    	; 0xb7a8 <__fp_inf>
    b5c8:	51 11       	cpse	r21, r1
    b5ca:	97 c1       	rjmp	.+814    	; 0xb8fa <__fp_szero>
    b5cc:	f3 c0       	rjmp	.+486    	; 0xb7b4 <__fp_nan>

0000b5ce <__divsf3x>:
    b5ce:	72 d1       	rcall	.+740    	; 0xb8b4 <__fp_split3>
    b5d0:	98 f3       	brcs	.-26     	; 0xb5b8 <__divsf3+0x4>

0000b5d2 <__divsf3_pse>:
    b5d2:	99 23       	and	r25, r25
    b5d4:	c9 f3       	breq	.-14     	; 0xb5c8 <__divsf3+0x14>
    b5d6:	55 23       	and	r21, r21
    b5d8:	b1 f3       	breq	.-20     	; 0xb5c6 <__divsf3+0x12>
    b5da:	95 1b       	sub	r25, r21
    b5dc:	55 0b       	sbc	r21, r21
    b5de:	bb 27       	eor	r27, r27
    b5e0:	aa 27       	eor	r26, r26
    b5e2:	62 17       	cp	r22, r18
    b5e4:	73 07       	cpc	r23, r19
    b5e6:	84 07       	cpc	r24, r20
    b5e8:	38 f0       	brcs	.+14     	; 0xb5f8 <__divsf3_pse+0x26>
    b5ea:	9f 5f       	subi	r25, 0xFF	; 255
    b5ec:	5f 4f       	sbci	r21, 0xFF	; 255
    b5ee:	22 0f       	add	r18, r18
    b5f0:	33 1f       	adc	r19, r19
    b5f2:	44 1f       	adc	r20, r20
    b5f4:	aa 1f       	adc	r26, r26
    b5f6:	a9 f3       	breq	.-22     	; 0xb5e2 <__divsf3_pse+0x10>
    b5f8:	33 d0       	rcall	.+102    	; 0xb660 <__divsf3_pse+0x8e>
    b5fa:	0e 2e       	mov	r0, r30
    b5fc:	3a f0       	brmi	.+14     	; 0xb60c <__divsf3_pse+0x3a>
    b5fe:	e0 e8       	ldi	r30, 0x80	; 128
    b600:	30 d0       	rcall	.+96     	; 0xb662 <__divsf3_pse+0x90>
    b602:	91 50       	subi	r25, 0x01	; 1
    b604:	50 40       	sbci	r21, 0x00	; 0
    b606:	e6 95       	lsr	r30
    b608:	00 1c       	adc	r0, r0
    b60a:	ca f7       	brpl	.-14     	; 0xb5fe <__divsf3_pse+0x2c>
    b60c:	29 d0       	rcall	.+82     	; 0xb660 <__divsf3_pse+0x8e>
    b60e:	fe 2f       	mov	r31, r30
    b610:	27 d0       	rcall	.+78     	; 0xb660 <__divsf3_pse+0x8e>
    b612:	66 0f       	add	r22, r22
    b614:	77 1f       	adc	r23, r23
    b616:	88 1f       	adc	r24, r24
    b618:	bb 1f       	adc	r27, r27
    b61a:	26 17       	cp	r18, r22
    b61c:	37 07       	cpc	r19, r23
    b61e:	48 07       	cpc	r20, r24
    b620:	ab 07       	cpc	r26, r27
    b622:	b0 e8       	ldi	r27, 0x80	; 128
    b624:	09 f0       	breq	.+2      	; 0xb628 <__divsf3_pse+0x56>
    b626:	bb 0b       	sbc	r27, r27
    b628:	80 2d       	mov	r24, r0
    b62a:	bf 01       	movw	r22, r30
    b62c:	ff 27       	eor	r31, r31
    b62e:	93 58       	subi	r25, 0x83	; 131
    b630:	5f 4f       	sbci	r21, 0xFF	; 255
    b632:	2a f0       	brmi	.+10     	; 0xb63e <__divsf3_pse+0x6c>
    b634:	9e 3f       	cpi	r25, 0xFE	; 254
    b636:	51 05       	cpc	r21, r1
    b638:	68 f0       	brcs	.+26     	; 0xb654 <__divsf3_pse+0x82>
    b63a:	b6 c0       	rjmp	.+364    	; 0xb7a8 <__fp_inf>
    b63c:	5e c1       	rjmp	.+700    	; 0xb8fa <__fp_szero>
    b63e:	5f 3f       	cpi	r21, 0xFF	; 255
    b640:	ec f3       	brlt	.-6      	; 0xb63c <__divsf3_pse+0x6a>
    b642:	98 3e       	cpi	r25, 0xE8	; 232
    b644:	dc f3       	brlt	.-10     	; 0xb63c <__divsf3_pse+0x6a>
    b646:	86 95       	lsr	r24
    b648:	77 95       	ror	r23
    b64a:	67 95       	ror	r22
    b64c:	b7 95       	ror	r27
    b64e:	f7 95       	ror	r31
    b650:	9f 5f       	subi	r25, 0xFF	; 255
    b652:	c9 f7       	brne	.-14     	; 0xb646 <__divsf3_pse+0x74>
    b654:	88 0f       	add	r24, r24
    b656:	91 1d       	adc	r25, r1
    b658:	96 95       	lsr	r25
    b65a:	87 95       	ror	r24
    b65c:	97 f9       	bld	r25, 7
    b65e:	08 95       	ret
    b660:	e1 e0       	ldi	r30, 0x01	; 1
    b662:	66 0f       	add	r22, r22
    b664:	77 1f       	adc	r23, r23
    b666:	88 1f       	adc	r24, r24
    b668:	bb 1f       	adc	r27, r27
    b66a:	62 17       	cp	r22, r18
    b66c:	73 07       	cpc	r23, r19
    b66e:	84 07       	cpc	r24, r20
    b670:	ba 07       	cpc	r27, r26
    b672:	20 f0       	brcs	.+8      	; 0xb67c <__divsf3_pse+0xaa>
    b674:	62 1b       	sub	r22, r18
    b676:	73 0b       	sbc	r23, r19
    b678:	84 0b       	sbc	r24, r20
    b67a:	ba 0b       	sbc	r27, r26
    b67c:	ee 1f       	adc	r30, r30
    b67e:	88 f7       	brcc	.-30     	; 0xb662 <__divsf3_pse+0x90>
    b680:	e0 95       	com	r30
    b682:	08 95       	ret

0000b684 <__fixsfsi>:
    b684:	04 d0       	rcall	.+8      	; 0xb68e <__fixunssfsi>
    b686:	68 94       	set
    b688:	b1 11       	cpse	r27, r1
    b68a:	37 c1       	rjmp	.+622    	; 0xb8fa <__fp_szero>
    b68c:	08 95       	ret

0000b68e <__fixunssfsi>:
    b68e:	1a d1       	rcall	.+564    	; 0xb8c4 <__fp_splitA>
    b690:	88 f0       	brcs	.+34     	; 0xb6b4 <__fixunssfsi+0x26>
    b692:	9f 57       	subi	r25, 0x7F	; 127
    b694:	90 f0       	brcs	.+36     	; 0xb6ba <__fixunssfsi+0x2c>
    b696:	b9 2f       	mov	r27, r25
    b698:	99 27       	eor	r25, r25
    b69a:	b7 51       	subi	r27, 0x17	; 23
    b69c:	a0 f0       	brcs	.+40     	; 0xb6c6 <__fixunssfsi+0x38>
    b69e:	d1 f0       	breq	.+52     	; 0xb6d4 <__fixunssfsi+0x46>
    b6a0:	66 0f       	add	r22, r22
    b6a2:	77 1f       	adc	r23, r23
    b6a4:	88 1f       	adc	r24, r24
    b6a6:	99 1f       	adc	r25, r25
    b6a8:	1a f0       	brmi	.+6      	; 0xb6b0 <__fixunssfsi+0x22>
    b6aa:	ba 95       	dec	r27
    b6ac:	c9 f7       	brne	.-14     	; 0xb6a0 <__fixunssfsi+0x12>
    b6ae:	12 c0       	rjmp	.+36     	; 0xb6d4 <__fixunssfsi+0x46>
    b6b0:	b1 30       	cpi	r27, 0x01	; 1
    b6b2:	81 f0       	breq	.+32     	; 0xb6d4 <__fixunssfsi+0x46>
    b6b4:	21 d1       	rcall	.+578    	; 0xb8f8 <__fp_zero>
    b6b6:	b1 e0       	ldi	r27, 0x01	; 1
    b6b8:	08 95       	ret
    b6ba:	1e c1       	rjmp	.+572    	; 0xb8f8 <__fp_zero>
    b6bc:	67 2f       	mov	r22, r23
    b6be:	78 2f       	mov	r23, r24
    b6c0:	88 27       	eor	r24, r24
    b6c2:	b8 5f       	subi	r27, 0xF8	; 248
    b6c4:	39 f0       	breq	.+14     	; 0xb6d4 <__fixunssfsi+0x46>
    b6c6:	b9 3f       	cpi	r27, 0xF9	; 249
    b6c8:	cc f3       	brlt	.-14     	; 0xb6bc <__fixunssfsi+0x2e>
    b6ca:	86 95       	lsr	r24
    b6cc:	77 95       	ror	r23
    b6ce:	67 95       	ror	r22
    b6d0:	b3 95       	inc	r27
    b6d2:	d9 f7       	brne	.-10     	; 0xb6ca <__fixunssfsi+0x3c>
    b6d4:	3e f4       	brtc	.+14     	; 0xb6e4 <__fixunssfsi+0x56>
    b6d6:	90 95       	com	r25
    b6d8:	80 95       	com	r24
    b6da:	70 95       	com	r23
    b6dc:	61 95       	neg	r22
    b6de:	7f 4f       	sbci	r23, 0xFF	; 255
    b6e0:	8f 4f       	sbci	r24, 0xFF	; 255
    b6e2:	9f 4f       	sbci	r25, 0xFF	; 255
    b6e4:	08 95       	ret

0000b6e6 <__floatunsisf>:
    b6e6:	e8 94       	clt
    b6e8:	09 c0       	rjmp	.+18     	; 0xb6fc <__floatsisf+0x12>

0000b6ea <__floatsisf>:
    b6ea:	97 fb       	bst	r25, 7
    b6ec:	3e f4       	brtc	.+14     	; 0xb6fc <__floatsisf+0x12>
    b6ee:	90 95       	com	r25
    b6f0:	80 95       	com	r24
    b6f2:	70 95       	com	r23
    b6f4:	61 95       	neg	r22
    b6f6:	7f 4f       	sbci	r23, 0xFF	; 255
    b6f8:	8f 4f       	sbci	r24, 0xFF	; 255
    b6fa:	9f 4f       	sbci	r25, 0xFF	; 255
    b6fc:	99 23       	and	r25, r25
    b6fe:	a9 f0       	breq	.+42     	; 0xb72a <__floatsisf+0x40>
    b700:	f9 2f       	mov	r31, r25
    b702:	96 e9       	ldi	r25, 0x96	; 150
    b704:	bb 27       	eor	r27, r27
    b706:	93 95       	inc	r25
    b708:	f6 95       	lsr	r31
    b70a:	87 95       	ror	r24
    b70c:	77 95       	ror	r23
    b70e:	67 95       	ror	r22
    b710:	b7 95       	ror	r27
    b712:	f1 11       	cpse	r31, r1
    b714:	f8 cf       	rjmp	.-16     	; 0xb706 <__floatsisf+0x1c>
    b716:	fa f4       	brpl	.+62     	; 0xb756 <__floatsisf+0x6c>
    b718:	bb 0f       	add	r27, r27
    b71a:	11 f4       	brne	.+4      	; 0xb720 <__floatsisf+0x36>
    b71c:	60 ff       	sbrs	r22, 0
    b71e:	1b c0       	rjmp	.+54     	; 0xb756 <__floatsisf+0x6c>
    b720:	6f 5f       	subi	r22, 0xFF	; 255
    b722:	7f 4f       	sbci	r23, 0xFF	; 255
    b724:	8f 4f       	sbci	r24, 0xFF	; 255
    b726:	9f 4f       	sbci	r25, 0xFF	; 255
    b728:	16 c0       	rjmp	.+44     	; 0xb756 <__floatsisf+0x6c>
    b72a:	88 23       	and	r24, r24
    b72c:	11 f0       	breq	.+4      	; 0xb732 <__floatsisf+0x48>
    b72e:	96 e9       	ldi	r25, 0x96	; 150
    b730:	11 c0       	rjmp	.+34     	; 0xb754 <__floatsisf+0x6a>
    b732:	77 23       	and	r23, r23
    b734:	21 f0       	breq	.+8      	; 0xb73e <__floatsisf+0x54>
    b736:	9e e8       	ldi	r25, 0x8E	; 142
    b738:	87 2f       	mov	r24, r23
    b73a:	76 2f       	mov	r23, r22
    b73c:	05 c0       	rjmp	.+10     	; 0xb748 <__floatsisf+0x5e>
    b73e:	66 23       	and	r22, r22
    b740:	71 f0       	breq	.+28     	; 0xb75e <__floatsisf+0x74>
    b742:	96 e8       	ldi	r25, 0x86	; 134
    b744:	86 2f       	mov	r24, r22
    b746:	70 e0       	ldi	r23, 0x00	; 0
    b748:	60 e0       	ldi	r22, 0x00	; 0
    b74a:	2a f0       	brmi	.+10     	; 0xb756 <__floatsisf+0x6c>
    b74c:	9a 95       	dec	r25
    b74e:	66 0f       	add	r22, r22
    b750:	77 1f       	adc	r23, r23
    b752:	88 1f       	adc	r24, r24
    b754:	da f7       	brpl	.-10     	; 0xb74c <__floatsisf+0x62>
    b756:	88 0f       	add	r24, r24
    b758:	96 95       	lsr	r25
    b75a:	87 95       	ror	r24
    b75c:	97 f9       	bld	r25, 7
    b75e:	08 95       	ret

0000b760 <__fp_cmp>:
    b760:	99 0f       	add	r25, r25
    b762:	00 08       	sbc	r0, r0
    b764:	55 0f       	add	r21, r21
    b766:	aa 0b       	sbc	r26, r26
    b768:	e0 e8       	ldi	r30, 0x80	; 128
    b76a:	fe ef       	ldi	r31, 0xFE	; 254
    b76c:	16 16       	cp	r1, r22
    b76e:	17 06       	cpc	r1, r23
    b770:	e8 07       	cpc	r30, r24
    b772:	f9 07       	cpc	r31, r25
    b774:	c0 f0       	brcs	.+48     	; 0xb7a6 <__fp_cmp+0x46>
    b776:	12 16       	cp	r1, r18
    b778:	13 06       	cpc	r1, r19
    b77a:	e4 07       	cpc	r30, r20
    b77c:	f5 07       	cpc	r31, r21
    b77e:	98 f0       	brcs	.+38     	; 0xb7a6 <__fp_cmp+0x46>
    b780:	62 1b       	sub	r22, r18
    b782:	73 0b       	sbc	r23, r19
    b784:	84 0b       	sbc	r24, r20
    b786:	95 0b       	sbc	r25, r21
    b788:	39 f4       	brne	.+14     	; 0xb798 <__fp_cmp+0x38>
    b78a:	0a 26       	eor	r0, r26
    b78c:	61 f0       	breq	.+24     	; 0xb7a6 <__fp_cmp+0x46>
    b78e:	23 2b       	or	r18, r19
    b790:	24 2b       	or	r18, r20
    b792:	25 2b       	or	r18, r21
    b794:	21 f4       	brne	.+8      	; 0xb79e <__fp_cmp+0x3e>
    b796:	08 95       	ret
    b798:	0a 26       	eor	r0, r26
    b79a:	09 f4       	brne	.+2      	; 0xb79e <__fp_cmp+0x3e>
    b79c:	a1 40       	sbci	r26, 0x01	; 1
    b79e:	a6 95       	lsr	r26
    b7a0:	8f ef       	ldi	r24, 0xFF	; 255
    b7a2:	81 1d       	adc	r24, r1
    b7a4:	81 1d       	adc	r24, r1
    b7a6:	08 95       	ret

0000b7a8 <__fp_inf>:
    b7a8:	97 f9       	bld	r25, 7
    b7aa:	9f 67       	ori	r25, 0x7F	; 127
    b7ac:	80 e8       	ldi	r24, 0x80	; 128
    b7ae:	70 e0       	ldi	r23, 0x00	; 0
    b7b0:	60 e0       	ldi	r22, 0x00	; 0
    b7b2:	08 95       	ret

0000b7b4 <__fp_nan>:
    b7b4:	9f ef       	ldi	r25, 0xFF	; 255
    b7b6:	80 ec       	ldi	r24, 0xC0	; 192
    b7b8:	08 95       	ret

0000b7ba <__fp_powser>:
    b7ba:	df 93       	push	r29
    b7bc:	cf 93       	push	r28
    b7be:	1f 93       	push	r17
    b7c0:	0f 93       	push	r16
    b7c2:	ff 92       	push	r15
    b7c4:	ef 92       	push	r14
    b7c6:	df 92       	push	r13
    b7c8:	7b 01       	movw	r14, r22
    b7ca:	8c 01       	movw	r16, r24
    b7cc:	68 94       	set
    b7ce:	05 c0       	rjmp	.+10     	; 0xb7da <__fp_powser+0x20>
    b7d0:	da 2e       	mov	r13, r26
    b7d2:	ef 01       	movw	r28, r30
    b7d4:	af d0       	rcall	.+350    	; 0xb934 <__mulsf3x>
    b7d6:	fe 01       	movw	r30, r28
    b7d8:	e8 94       	clt
    b7da:	a5 91       	lpm	r26, Z+
    b7dc:	25 91       	lpm	r18, Z+
    b7de:	35 91       	lpm	r19, Z+
    b7e0:	45 91       	lpm	r20, Z+
    b7e2:	55 91       	lpm	r21, Z+
    b7e4:	ae f3       	brts	.-22     	; 0xb7d0 <__fp_powser+0x16>
    b7e6:	ef 01       	movw	r28, r30
    b7e8:	29 de       	rcall	.-942    	; 0xb43c <__addsf3x>
    b7ea:	fe 01       	movw	r30, r28
    b7ec:	97 01       	movw	r18, r14
    b7ee:	a8 01       	movw	r20, r16
    b7f0:	da 94       	dec	r13
    b7f2:	79 f7       	brne	.-34     	; 0xb7d2 <__fp_powser+0x18>
    b7f4:	df 90       	pop	r13
    b7f6:	ef 90       	pop	r14
    b7f8:	ff 90       	pop	r15
    b7fa:	0f 91       	pop	r16
    b7fc:	1f 91       	pop	r17
    b7fe:	cf 91       	pop	r28
    b800:	df 91       	pop	r29
    b802:	08 95       	ret

0000b804 <__fp_pscA>:
    b804:	00 24       	eor	r0, r0
    b806:	0a 94       	dec	r0
    b808:	16 16       	cp	r1, r22
    b80a:	17 06       	cpc	r1, r23
    b80c:	18 06       	cpc	r1, r24
    b80e:	09 06       	cpc	r0, r25
    b810:	08 95       	ret

0000b812 <__fp_pscB>:
    b812:	00 24       	eor	r0, r0
    b814:	0a 94       	dec	r0
    b816:	12 16       	cp	r1, r18
    b818:	13 06       	cpc	r1, r19
    b81a:	14 06       	cpc	r1, r20
    b81c:	05 06       	cpc	r0, r21
    b81e:	08 95       	ret
    b820:	c9 cf       	rjmp	.-110    	; 0xb7b4 <__fp_nan>

0000b822 <__fp_rempio2>:
    b822:	50 d0       	rcall	.+160    	; 0xb8c4 <__fp_splitA>
    b824:	e8 f3       	brcs	.-6      	; 0xb820 <__fp_pscB+0xe>
    b826:	e8 94       	clt
    b828:	e0 e0       	ldi	r30, 0x00	; 0
    b82a:	bb 27       	eor	r27, r27
    b82c:	9f 57       	subi	r25, 0x7F	; 127
    b82e:	f0 f0       	brcs	.+60     	; 0xb86c <__fp_rempio2+0x4a>
    b830:	2a ed       	ldi	r18, 0xDA	; 218
    b832:	3f e0       	ldi	r19, 0x0F	; 15
    b834:	49 ec       	ldi	r20, 0xC9	; 201
    b836:	06 c0       	rjmp	.+12     	; 0xb844 <__fp_rempio2+0x22>
    b838:	ee 0f       	add	r30, r30
    b83a:	bb 0f       	add	r27, r27
    b83c:	66 1f       	adc	r22, r22
    b83e:	77 1f       	adc	r23, r23
    b840:	88 1f       	adc	r24, r24
    b842:	28 f0       	brcs	.+10     	; 0xb84e <__fp_rempio2+0x2c>
    b844:	b2 3a       	cpi	r27, 0xA2	; 162
    b846:	62 07       	cpc	r22, r18
    b848:	73 07       	cpc	r23, r19
    b84a:	84 07       	cpc	r24, r20
    b84c:	28 f0       	brcs	.+10     	; 0xb858 <__fp_rempio2+0x36>
    b84e:	b2 5a       	subi	r27, 0xA2	; 162
    b850:	62 0b       	sbc	r22, r18
    b852:	73 0b       	sbc	r23, r19
    b854:	84 0b       	sbc	r24, r20
    b856:	e3 95       	inc	r30
    b858:	9a 95       	dec	r25
    b85a:	72 f7       	brpl	.-36     	; 0xb838 <__fp_rempio2+0x16>
    b85c:	80 38       	cpi	r24, 0x80	; 128
    b85e:	30 f4       	brcc	.+12     	; 0xb86c <__fp_rempio2+0x4a>
    b860:	9a 95       	dec	r25
    b862:	bb 0f       	add	r27, r27
    b864:	66 1f       	adc	r22, r22
    b866:	77 1f       	adc	r23, r23
    b868:	88 1f       	adc	r24, r24
    b86a:	d2 f7       	brpl	.-12     	; 0xb860 <__fp_rempio2+0x3e>
    b86c:	90 48       	sbci	r25, 0x80	; 128
    b86e:	c4 c0       	rjmp	.+392    	; 0xb9f8 <__fp_mpack_finite>

0000b870 <__fp_round>:
    b870:	09 2e       	mov	r0, r25
    b872:	03 94       	inc	r0
    b874:	00 0c       	add	r0, r0
    b876:	11 f4       	brne	.+4      	; 0xb87c <__fp_round+0xc>
    b878:	88 23       	and	r24, r24
    b87a:	52 f0       	brmi	.+20     	; 0xb890 <__fp_round+0x20>
    b87c:	bb 0f       	add	r27, r27
    b87e:	40 f4       	brcc	.+16     	; 0xb890 <__fp_round+0x20>
    b880:	bf 2b       	or	r27, r31
    b882:	11 f4       	brne	.+4      	; 0xb888 <__fp_round+0x18>
    b884:	60 ff       	sbrs	r22, 0
    b886:	04 c0       	rjmp	.+8      	; 0xb890 <__fp_round+0x20>
    b888:	6f 5f       	subi	r22, 0xFF	; 255
    b88a:	7f 4f       	sbci	r23, 0xFF	; 255
    b88c:	8f 4f       	sbci	r24, 0xFF	; 255
    b88e:	9f 4f       	sbci	r25, 0xFF	; 255
    b890:	08 95       	ret

0000b892 <__fp_sinus>:
    b892:	ef 93       	push	r30
    b894:	e0 ff       	sbrs	r30, 0
    b896:	06 c0       	rjmp	.+12     	; 0xb8a4 <__fp_sinus+0x12>
    b898:	a2 ea       	ldi	r26, 0xA2	; 162
    b89a:	2a ed       	ldi	r18, 0xDA	; 218
    b89c:	3f e0       	ldi	r19, 0x0F	; 15
    b89e:	49 ec       	ldi	r20, 0xC9	; 201
    b8a0:	5f eb       	ldi	r21, 0xBF	; 191
    b8a2:	cc dd       	rcall	.-1128   	; 0xb43c <__addsf3x>
    b8a4:	e5 df       	rcall	.-54     	; 0xb870 <__fp_round>
    b8a6:	0f 90       	pop	r0
    b8a8:	03 94       	inc	r0
    b8aa:	01 fc       	sbrc	r0, 1
    b8ac:	90 58       	subi	r25, 0x80	; 128
    b8ae:	eb e7       	ldi	r30, 0x7B	; 123
    b8b0:	f1 e0       	ldi	r31, 0x01	; 1
    b8b2:	ae c0       	rjmp	.+348    	; 0xba10 <__fp_powsodd>

0000b8b4 <__fp_split3>:
    b8b4:	57 fd       	sbrc	r21, 7
    b8b6:	90 58       	subi	r25, 0x80	; 128
    b8b8:	44 0f       	add	r20, r20
    b8ba:	55 1f       	adc	r21, r21
    b8bc:	59 f0       	breq	.+22     	; 0xb8d4 <__fp_splitA+0x10>
    b8be:	5f 3f       	cpi	r21, 0xFF	; 255
    b8c0:	71 f0       	breq	.+28     	; 0xb8de <__fp_splitA+0x1a>
    b8c2:	47 95       	ror	r20

0000b8c4 <__fp_splitA>:
    b8c4:	88 0f       	add	r24, r24
    b8c6:	97 fb       	bst	r25, 7
    b8c8:	99 1f       	adc	r25, r25
    b8ca:	61 f0       	breq	.+24     	; 0xb8e4 <__fp_splitA+0x20>
    b8cc:	9f 3f       	cpi	r25, 0xFF	; 255
    b8ce:	79 f0       	breq	.+30     	; 0xb8ee <__fp_splitA+0x2a>
    b8d0:	87 95       	ror	r24
    b8d2:	08 95       	ret
    b8d4:	12 16       	cp	r1, r18
    b8d6:	13 06       	cpc	r1, r19
    b8d8:	14 06       	cpc	r1, r20
    b8da:	55 1f       	adc	r21, r21
    b8dc:	f2 cf       	rjmp	.-28     	; 0xb8c2 <__fp_split3+0xe>
    b8de:	46 95       	lsr	r20
    b8e0:	f1 df       	rcall	.-30     	; 0xb8c4 <__fp_splitA>
    b8e2:	08 c0       	rjmp	.+16     	; 0xb8f4 <__fp_splitA+0x30>
    b8e4:	16 16       	cp	r1, r22
    b8e6:	17 06       	cpc	r1, r23
    b8e8:	18 06       	cpc	r1, r24
    b8ea:	99 1f       	adc	r25, r25
    b8ec:	f1 cf       	rjmp	.-30     	; 0xb8d0 <__fp_splitA+0xc>
    b8ee:	86 95       	lsr	r24
    b8f0:	71 05       	cpc	r23, r1
    b8f2:	61 05       	cpc	r22, r1
    b8f4:	08 94       	sec
    b8f6:	08 95       	ret

0000b8f8 <__fp_zero>:
    b8f8:	e8 94       	clt

0000b8fa <__fp_szero>:
    b8fa:	bb 27       	eor	r27, r27
    b8fc:	66 27       	eor	r22, r22
    b8fe:	77 27       	eor	r23, r23
    b900:	cb 01       	movw	r24, r22
    b902:	97 f9       	bld	r25, 7
    b904:	08 95       	ret

0000b906 <__gesf2>:
    b906:	2c df       	rcall	.-424    	; 0xb760 <__fp_cmp>
    b908:	08 f4       	brcc	.+2      	; 0xb90c <__gesf2+0x6>
    b90a:	8f ef       	ldi	r24, 0xFF	; 255
    b90c:	08 95       	ret

0000b90e <inverse>:
    b90e:	9b 01       	movw	r18, r22
    b910:	ac 01       	movw	r20, r24
    b912:	60 e0       	ldi	r22, 0x00	; 0
    b914:	70 e0       	ldi	r23, 0x00	; 0
    b916:	80 e8       	ldi	r24, 0x80	; 128
    b918:	9f e3       	ldi	r25, 0x3F	; 63
    b91a:	4c ce       	rjmp	.-872    	; 0xb5b4 <__divsf3>

0000b91c <__mulsf3>:
    b91c:	0b d0       	rcall	.+22     	; 0xb934 <__mulsf3x>
    b91e:	a8 cf       	rjmp	.-176    	; 0xb870 <__fp_round>
    b920:	71 df       	rcall	.-286    	; 0xb804 <__fp_pscA>
    b922:	28 f0       	brcs	.+10     	; 0xb92e <__mulsf3+0x12>
    b924:	76 df       	rcall	.-276    	; 0xb812 <__fp_pscB>
    b926:	18 f0       	brcs	.+6      	; 0xb92e <__mulsf3+0x12>
    b928:	95 23       	and	r25, r21
    b92a:	09 f0       	breq	.+2      	; 0xb92e <__mulsf3+0x12>
    b92c:	3d cf       	rjmp	.-390    	; 0xb7a8 <__fp_inf>
    b92e:	42 cf       	rjmp	.-380    	; 0xb7b4 <__fp_nan>
    b930:	11 24       	eor	r1, r1
    b932:	e3 cf       	rjmp	.-58     	; 0xb8fa <__fp_szero>

0000b934 <__mulsf3x>:
    b934:	bf df       	rcall	.-130    	; 0xb8b4 <__fp_split3>
    b936:	a0 f3       	brcs	.-24     	; 0xb920 <__mulsf3+0x4>

0000b938 <__mulsf3_pse>:
    b938:	95 9f       	mul	r25, r21
    b93a:	d1 f3       	breq	.-12     	; 0xb930 <__mulsf3+0x14>
    b93c:	95 0f       	add	r25, r21
    b93e:	50 e0       	ldi	r21, 0x00	; 0
    b940:	55 1f       	adc	r21, r21
    b942:	62 9f       	mul	r22, r18
    b944:	f0 01       	movw	r30, r0
    b946:	72 9f       	mul	r23, r18
    b948:	bb 27       	eor	r27, r27
    b94a:	f0 0d       	add	r31, r0
    b94c:	b1 1d       	adc	r27, r1
    b94e:	63 9f       	mul	r22, r19
    b950:	aa 27       	eor	r26, r26
    b952:	f0 0d       	add	r31, r0
    b954:	b1 1d       	adc	r27, r1
    b956:	aa 1f       	adc	r26, r26
    b958:	64 9f       	mul	r22, r20
    b95a:	66 27       	eor	r22, r22
    b95c:	b0 0d       	add	r27, r0
    b95e:	a1 1d       	adc	r26, r1
    b960:	66 1f       	adc	r22, r22
    b962:	82 9f       	mul	r24, r18
    b964:	22 27       	eor	r18, r18
    b966:	b0 0d       	add	r27, r0
    b968:	a1 1d       	adc	r26, r1
    b96a:	62 1f       	adc	r22, r18
    b96c:	73 9f       	mul	r23, r19
    b96e:	b0 0d       	add	r27, r0
    b970:	a1 1d       	adc	r26, r1
    b972:	62 1f       	adc	r22, r18
    b974:	83 9f       	mul	r24, r19
    b976:	a0 0d       	add	r26, r0
    b978:	61 1d       	adc	r22, r1
    b97a:	22 1f       	adc	r18, r18
    b97c:	74 9f       	mul	r23, r20
    b97e:	33 27       	eor	r19, r19
    b980:	a0 0d       	add	r26, r0
    b982:	61 1d       	adc	r22, r1
    b984:	23 1f       	adc	r18, r19
    b986:	84 9f       	mul	r24, r20
    b988:	60 0d       	add	r22, r0
    b98a:	21 1d       	adc	r18, r1
    b98c:	82 2f       	mov	r24, r18
    b98e:	76 2f       	mov	r23, r22
    b990:	6a 2f       	mov	r22, r26
    b992:	11 24       	eor	r1, r1
    b994:	9f 57       	subi	r25, 0x7F	; 127
    b996:	50 40       	sbci	r21, 0x00	; 0
    b998:	8a f0       	brmi	.+34     	; 0xb9bc <__mulsf3_pse+0x84>
    b99a:	e1 f0       	breq	.+56     	; 0xb9d4 <__mulsf3_pse+0x9c>
    b99c:	88 23       	and	r24, r24
    b99e:	4a f0       	brmi	.+18     	; 0xb9b2 <__mulsf3_pse+0x7a>
    b9a0:	ee 0f       	add	r30, r30
    b9a2:	ff 1f       	adc	r31, r31
    b9a4:	bb 1f       	adc	r27, r27
    b9a6:	66 1f       	adc	r22, r22
    b9a8:	77 1f       	adc	r23, r23
    b9aa:	88 1f       	adc	r24, r24
    b9ac:	91 50       	subi	r25, 0x01	; 1
    b9ae:	50 40       	sbci	r21, 0x00	; 0
    b9b0:	a9 f7       	brne	.-22     	; 0xb99c <__mulsf3_pse+0x64>
    b9b2:	9e 3f       	cpi	r25, 0xFE	; 254
    b9b4:	51 05       	cpc	r21, r1
    b9b6:	70 f0       	brcs	.+28     	; 0xb9d4 <__mulsf3_pse+0x9c>
    b9b8:	f7 ce       	rjmp	.-530    	; 0xb7a8 <__fp_inf>
    b9ba:	9f cf       	rjmp	.-194    	; 0xb8fa <__fp_szero>
    b9bc:	5f 3f       	cpi	r21, 0xFF	; 255
    b9be:	ec f3       	brlt	.-6      	; 0xb9ba <__mulsf3_pse+0x82>
    b9c0:	98 3e       	cpi	r25, 0xE8	; 232
    b9c2:	dc f3       	brlt	.-10     	; 0xb9ba <__mulsf3_pse+0x82>
    b9c4:	86 95       	lsr	r24
    b9c6:	77 95       	ror	r23
    b9c8:	67 95       	ror	r22
    b9ca:	b7 95       	ror	r27
    b9cc:	f7 95       	ror	r31
    b9ce:	e7 95       	ror	r30
    b9d0:	9f 5f       	subi	r25, 0xFF	; 255
    b9d2:	c1 f7       	brne	.-16     	; 0xb9c4 <__mulsf3_pse+0x8c>
    b9d4:	fe 2b       	or	r31, r30
    b9d6:	88 0f       	add	r24, r24
    b9d8:	91 1d       	adc	r25, r1
    b9da:	96 95       	lsr	r25
    b9dc:	87 95       	ror	r24
    b9de:	97 f9       	bld	r25, 7
    b9e0:	08 95       	ret

0000b9e2 <sin>:
    b9e2:	9f 93       	push	r25
    b9e4:	1e df       	rcall	.-452    	; 0xb822 <__fp_rempio2>
    b9e6:	0f 90       	pop	r0
    b9e8:	07 fc       	sbrc	r0, 7
    b9ea:	ee 5f       	subi	r30, 0xFE	; 254
    b9ec:	52 cf       	rjmp	.-348    	; 0xb892 <__fp_sinus>

0000b9ee <square>:
    b9ee:	9b 01       	movw	r18, r22
    b9f0:	ac 01       	movw	r20, r24
    b9f2:	94 cf       	rjmp	.-216    	; 0xb91c <__mulsf3>

0000b9f4 <__fp_mpack>:
    b9f4:	9f 3f       	cpi	r25, 0xFF	; 255
    b9f6:	31 f0       	breq	.+12     	; 0xba04 <__fp_mpack_finite+0xc>

0000b9f8 <__fp_mpack_finite>:
    b9f8:	91 50       	subi	r25, 0x01	; 1
    b9fa:	20 f4       	brcc	.+8      	; 0xba04 <__fp_mpack_finite+0xc>
    b9fc:	87 95       	ror	r24
    b9fe:	77 95       	ror	r23
    ba00:	67 95       	ror	r22
    ba02:	b7 95       	ror	r27
    ba04:	88 0f       	add	r24, r24
    ba06:	91 1d       	adc	r25, r1
    ba08:	96 95       	lsr	r25
    ba0a:	87 95       	ror	r24
    ba0c:	97 f9       	bld	r25, 7
    ba0e:	08 95       	ret

0000ba10 <__fp_powsodd>:
    ba10:	9f 93       	push	r25
    ba12:	8f 93       	push	r24
    ba14:	7f 93       	push	r23
    ba16:	6f 93       	push	r22
    ba18:	ff 93       	push	r31
    ba1a:	ef 93       	push	r30
    ba1c:	9b 01       	movw	r18, r22
    ba1e:	ac 01       	movw	r20, r24
    ba20:	7d df       	rcall	.-262    	; 0xb91c <__mulsf3>
    ba22:	ef 91       	pop	r30
    ba24:	ff 91       	pop	r31
    ba26:	c9 de       	rcall	.-622    	; 0xb7ba <__fp_powser>
    ba28:	2f 91       	pop	r18
    ba2a:	3f 91       	pop	r19
    ba2c:	4f 91       	pop	r20
    ba2e:	5f 91       	pop	r21
    ba30:	75 cf       	rjmp	.-278    	; 0xb91c <__mulsf3>

0000ba32 <__mulsi3>:
    ba32:	62 9f       	mul	r22, r18
    ba34:	d0 01       	movw	r26, r0
    ba36:	73 9f       	mul	r23, r19
    ba38:	f0 01       	movw	r30, r0
    ba3a:	82 9f       	mul	r24, r18
    ba3c:	e0 0d       	add	r30, r0
    ba3e:	f1 1d       	adc	r31, r1
    ba40:	64 9f       	mul	r22, r20
    ba42:	e0 0d       	add	r30, r0
    ba44:	f1 1d       	adc	r31, r1
    ba46:	92 9f       	mul	r25, r18
    ba48:	f0 0d       	add	r31, r0
    ba4a:	83 9f       	mul	r24, r19
    ba4c:	f0 0d       	add	r31, r0
    ba4e:	74 9f       	mul	r23, r20
    ba50:	f0 0d       	add	r31, r0
    ba52:	65 9f       	mul	r22, r21
    ba54:	f0 0d       	add	r31, r0
    ba56:	99 27       	eor	r25, r25
    ba58:	72 9f       	mul	r23, r18
    ba5a:	b0 0d       	add	r27, r0
    ba5c:	e1 1d       	adc	r30, r1
    ba5e:	f9 1f       	adc	r31, r25
    ba60:	63 9f       	mul	r22, r19
    ba62:	b0 0d       	add	r27, r0
    ba64:	e1 1d       	adc	r30, r1
    ba66:	f9 1f       	adc	r31, r25
    ba68:	bd 01       	movw	r22, r26
    ba6a:	cf 01       	movw	r24, r30
    ba6c:	11 24       	eor	r1, r1
    ba6e:	08 95       	ret

0000ba70 <__udivmodhi4>:
    ba70:	aa 1b       	sub	r26, r26
    ba72:	bb 1b       	sub	r27, r27
    ba74:	51 e1       	ldi	r21, 0x11	; 17
    ba76:	07 c0       	rjmp	.+14     	; 0xba86 <__udivmodhi4_ep>

0000ba78 <__udivmodhi4_loop>:
    ba78:	aa 1f       	adc	r26, r26
    ba7a:	bb 1f       	adc	r27, r27
    ba7c:	a6 17       	cp	r26, r22
    ba7e:	b7 07       	cpc	r27, r23
    ba80:	10 f0       	brcs	.+4      	; 0xba86 <__udivmodhi4_ep>
    ba82:	a6 1b       	sub	r26, r22
    ba84:	b7 0b       	sbc	r27, r23

0000ba86 <__udivmodhi4_ep>:
    ba86:	88 1f       	adc	r24, r24
    ba88:	99 1f       	adc	r25, r25
    ba8a:	5a 95       	dec	r21
    ba8c:	a9 f7       	brne	.-22     	; 0xba78 <__udivmodhi4_loop>
    ba8e:	80 95       	com	r24
    ba90:	90 95       	com	r25
    ba92:	bc 01       	movw	r22, r24
    ba94:	cd 01       	movw	r24, r26
    ba96:	08 95       	ret

0000ba98 <__divmodhi4>:
    ba98:	97 fb       	bst	r25, 7
    ba9a:	09 2e       	mov	r0, r25
    ba9c:	07 26       	eor	r0, r23
    ba9e:	0a d0       	rcall	.+20     	; 0xbab4 <__divmodhi4_neg1>
    baa0:	77 fd       	sbrc	r23, 7
    baa2:	04 d0       	rcall	.+8      	; 0xbaac <__divmodhi4_neg2>
    baa4:	e5 df       	rcall	.-54     	; 0xba70 <__udivmodhi4>
    baa6:	06 d0       	rcall	.+12     	; 0xbab4 <__divmodhi4_neg1>
    baa8:	00 20       	and	r0, r0
    baaa:	1a f4       	brpl	.+6      	; 0xbab2 <__divmodhi4_exit>

0000baac <__divmodhi4_neg2>:
    baac:	70 95       	com	r23
    baae:	61 95       	neg	r22
    bab0:	7f 4f       	sbci	r23, 0xFF	; 255

0000bab2 <__divmodhi4_exit>:
    bab2:	08 95       	ret

0000bab4 <__divmodhi4_neg1>:
    bab4:	f6 f7       	brtc	.-4      	; 0xbab2 <__divmodhi4_exit>
    bab6:	90 95       	com	r25
    bab8:	81 95       	neg	r24
    baba:	9f 4f       	sbci	r25, 0xFF	; 255
    babc:	08 95       	ret

0000babe <__divmodsi4>:
    babe:	97 fb       	bst	r25, 7
    bac0:	09 2e       	mov	r0, r25
    bac2:	05 26       	eor	r0, r21
    bac4:	0e d0       	rcall	.+28     	; 0xbae2 <__divmodsi4_neg1>
    bac6:	57 fd       	sbrc	r21, 7
    bac8:	04 d0       	rcall	.+8      	; 0xbad2 <__divmodsi4_neg2>
    baca:	14 d0       	rcall	.+40     	; 0xbaf4 <__udivmodsi4>
    bacc:	0a d0       	rcall	.+20     	; 0xbae2 <__divmodsi4_neg1>
    bace:	00 1c       	adc	r0, r0
    bad0:	38 f4       	brcc	.+14     	; 0xbae0 <__divmodsi4_exit>

0000bad2 <__divmodsi4_neg2>:
    bad2:	50 95       	com	r21
    bad4:	40 95       	com	r20
    bad6:	30 95       	com	r19
    bad8:	21 95       	neg	r18
    bada:	3f 4f       	sbci	r19, 0xFF	; 255
    badc:	4f 4f       	sbci	r20, 0xFF	; 255
    bade:	5f 4f       	sbci	r21, 0xFF	; 255

0000bae0 <__divmodsi4_exit>:
    bae0:	08 95       	ret

0000bae2 <__divmodsi4_neg1>:
    bae2:	f6 f7       	brtc	.-4      	; 0xbae0 <__divmodsi4_exit>
    bae4:	90 95       	com	r25
    bae6:	80 95       	com	r24
    bae8:	70 95       	com	r23
    baea:	61 95       	neg	r22
    baec:	7f 4f       	sbci	r23, 0xFF	; 255
    baee:	8f 4f       	sbci	r24, 0xFF	; 255
    baf0:	9f 4f       	sbci	r25, 0xFF	; 255
    baf2:	08 95       	ret

0000baf4 <__udivmodsi4>:
    baf4:	a1 e2       	ldi	r26, 0x21	; 33
    baf6:	1a 2e       	mov	r1, r26
    baf8:	aa 1b       	sub	r26, r26
    bafa:	bb 1b       	sub	r27, r27
    bafc:	fd 01       	movw	r30, r26
    bafe:	0d c0       	rjmp	.+26     	; 0xbb1a <__udivmodsi4_ep>

0000bb00 <__udivmodsi4_loop>:
    bb00:	aa 1f       	adc	r26, r26
    bb02:	bb 1f       	adc	r27, r27
    bb04:	ee 1f       	adc	r30, r30
    bb06:	ff 1f       	adc	r31, r31
    bb08:	a2 17       	cp	r26, r18
    bb0a:	b3 07       	cpc	r27, r19
    bb0c:	e4 07       	cpc	r30, r20
    bb0e:	f5 07       	cpc	r31, r21
    bb10:	20 f0       	brcs	.+8      	; 0xbb1a <__udivmodsi4_ep>
    bb12:	a2 1b       	sub	r26, r18
    bb14:	b3 0b       	sbc	r27, r19
    bb16:	e4 0b       	sbc	r30, r20
    bb18:	f5 0b       	sbc	r31, r21

0000bb1a <__udivmodsi4_ep>:
    bb1a:	66 1f       	adc	r22, r22
    bb1c:	77 1f       	adc	r23, r23
    bb1e:	88 1f       	adc	r24, r24
    bb20:	99 1f       	adc	r25, r25
    bb22:	1a 94       	dec	r1
    bb24:	69 f7       	brne	.-38     	; 0xbb00 <__udivmodsi4_loop>
    bb26:	60 95       	com	r22
    bb28:	70 95       	com	r23
    bb2a:	80 95       	com	r24
    bb2c:	90 95       	com	r25
    bb2e:	9b 01       	movw	r18, r22
    bb30:	ac 01       	movw	r20, r24
    bb32:	bd 01       	movw	r22, r26
    bb34:	cf 01       	movw	r24, r30
    bb36:	08 95       	ret

0000bb38 <do_rand>:
    bb38:	af 92       	push	r10
    bb3a:	bf 92       	push	r11
    bb3c:	cf 92       	push	r12
    bb3e:	df 92       	push	r13
    bb40:	ef 92       	push	r14
    bb42:	ff 92       	push	r15
    bb44:	0f 93       	push	r16
    bb46:	1f 93       	push	r17
    bb48:	cf 93       	push	r28
    bb4a:	df 93       	push	r29
    bb4c:	ec 01       	movw	r28, r24
    bb4e:	a8 80       	ld	r10, Y
    bb50:	b9 80       	ldd	r11, Y+1	; 0x01
    bb52:	ca 80       	ldd	r12, Y+2	; 0x02
    bb54:	db 80       	ldd	r13, Y+3	; 0x03
    bb56:	a1 14       	cp	r10, r1
    bb58:	b1 04       	cpc	r11, r1
    bb5a:	c1 04       	cpc	r12, r1
    bb5c:	d1 04       	cpc	r13, r1
    bb5e:	41 f4       	brne	.+16     	; 0xbb70 <do_rand+0x38>
    bb60:	84 e2       	ldi	r24, 0x24	; 36
    bb62:	a8 2e       	mov	r10, r24
    bb64:	89 ed       	ldi	r24, 0xD9	; 217
    bb66:	b8 2e       	mov	r11, r24
    bb68:	8b e5       	ldi	r24, 0x5B	; 91
    bb6a:	c8 2e       	mov	r12, r24
    bb6c:	87 e0       	ldi	r24, 0x07	; 7
    bb6e:	d8 2e       	mov	r13, r24
    bb70:	c6 01       	movw	r24, r12
    bb72:	b5 01       	movw	r22, r10
    bb74:	2d e1       	ldi	r18, 0x1D	; 29
    bb76:	33 ef       	ldi	r19, 0xF3	; 243
    bb78:	41 e0       	ldi	r20, 0x01	; 1
    bb7a:	50 e0       	ldi	r21, 0x00	; 0
    bb7c:	a0 df       	rcall	.-192    	; 0xbabe <__divmodsi4>
    bb7e:	27 ea       	ldi	r18, 0xA7	; 167
    bb80:	31 e4       	ldi	r19, 0x41	; 65
    bb82:	40 e0       	ldi	r20, 0x00	; 0
    bb84:	50 e0       	ldi	r21, 0x00	; 0
    bb86:	55 df       	rcall	.-342    	; 0xba32 <__mulsi3>
    bb88:	7b 01       	movw	r14, r22
    bb8a:	8c 01       	movw	r16, r24
    bb8c:	c6 01       	movw	r24, r12
    bb8e:	b5 01       	movw	r22, r10
    bb90:	2d e1       	ldi	r18, 0x1D	; 29
    bb92:	33 ef       	ldi	r19, 0xF3	; 243
    bb94:	41 e0       	ldi	r20, 0x01	; 1
    bb96:	50 e0       	ldi	r21, 0x00	; 0
    bb98:	92 df       	rcall	.-220    	; 0xbabe <__divmodsi4>
    bb9a:	ca 01       	movw	r24, r20
    bb9c:	b9 01       	movw	r22, r18
    bb9e:	2c ee       	ldi	r18, 0xEC	; 236
    bba0:	34 ef       	ldi	r19, 0xF4	; 244
    bba2:	4f ef       	ldi	r20, 0xFF	; 255
    bba4:	5f ef       	ldi	r21, 0xFF	; 255
    bba6:	45 df       	rcall	.-374    	; 0xba32 <__mulsi3>
    bba8:	6e 0d       	add	r22, r14
    bbaa:	7f 1d       	adc	r23, r15
    bbac:	80 1f       	adc	r24, r16
    bbae:	91 1f       	adc	r25, r17
    bbb0:	97 ff       	sbrs	r25, 7
    bbb2:	04 c0       	rjmp	.+8      	; 0xbbbc <do_rand+0x84>
    bbb4:	61 50       	subi	r22, 0x01	; 1
    bbb6:	70 40       	sbci	r23, 0x00	; 0
    bbb8:	80 40       	sbci	r24, 0x00	; 0
    bbba:	90 48       	sbci	r25, 0x80	; 128
    bbbc:	68 83       	st	Y, r22
    bbbe:	79 83       	std	Y+1, r23	; 0x01
    bbc0:	8a 83       	std	Y+2, r24	; 0x02
    bbc2:	9b 83       	std	Y+3, r25	; 0x03
    bbc4:	9b 01       	movw	r18, r22
    bbc6:	3f 77       	andi	r19, 0x7F	; 127
    bbc8:	c9 01       	movw	r24, r18
    bbca:	df 91       	pop	r29
    bbcc:	cf 91       	pop	r28
    bbce:	1f 91       	pop	r17
    bbd0:	0f 91       	pop	r16
    bbd2:	ff 90       	pop	r15
    bbd4:	ef 90       	pop	r14
    bbd6:	df 90       	pop	r13
    bbd8:	cf 90       	pop	r12
    bbda:	bf 90       	pop	r11
    bbdc:	af 90       	pop	r10
    bbde:	08 95       	ret

0000bbe0 <rand_r>:
    bbe0:	ab cf       	rjmp	.-170    	; 0xbb38 <do_rand>

0000bbe2 <rand>:
    bbe2:	80 e0       	ldi	r24, 0x00	; 0
    bbe4:	92 e0       	ldi	r25, 0x02	; 2
    bbe6:	a8 cf       	rjmp	.-176    	; 0xbb38 <do_rand>

0000bbe8 <srand>:
    bbe8:	a0 e0       	ldi	r26, 0x00	; 0
    bbea:	b0 e0       	ldi	r27, 0x00	; 0
    bbec:	80 93 00 02 	sts	0x0200, r24
    bbf0:	90 93 01 02 	sts	0x0201, r25
    bbf4:	a0 93 02 02 	sts	0x0202, r26
    bbf8:	b0 93 03 02 	sts	0x0203, r27
    bbfc:	08 95       	ret

0000bbfe <memset>:
    bbfe:	dc 01       	movw	r26, r24
    bc00:	01 c0       	rjmp	.+2      	; 0xbc04 <memset+0x6>
    bc02:	6d 93       	st	X+, r22
    bc04:	41 50       	subi	r20, 0x01	; 1
    bc06:	50 40       	sbci	r21, 0x00	; 0
    bc08:	e0 f7       	brcc	.-8      	; 0xbc02 <memset+0x4>
    bc0a:	08 95       	ret

0000bc0c <__eerd_block_m2560>:
    bc0c:	dc 01       	movw	r26, r24
    bc0e:	cb 01       	movw	r24, r22

0000bc10 <__eerd_blraw_m2560>:
    bc10:	fc 01       	movw	r30, r24
    bc12:	f9 99       	sbic	0x1f, 1	; 31
    bc14:	fe cf       	rjmp	.-4      	; 0xbc12 <__eerd_blraw_m2560+0x2>
    bc16:	06 c0       	rjmp	.+12     	; 0xbc24 <__eerd_blraw_m2560+0x14>
    bc18:	f2 bd       	out	0x22, r31	; 34
    bc1a:	e1 bd       	out	0x21, r30	; 33
    bc1c:	f8 9a       	sbi	0x1f, 0	; 31
    bc1e:	31 96       	adiw	r30, 0x01	; 1
    bc20:	00 b4       	in	r0, 0x20	; 32
    bc22:	0d 92       	st	X+, r0
    bc24:	41 50       	subi	r20, 0x01	; 1
    bc26:	50 40       	sbci	r21, 0x00	; 0
    bc28:	b8 f7       	brcc	.-18     	; 0xbc18 <__eerd_blraw_m2560+0x8>
    bc2a:	08 95       	ret

0000bc2c <__eerd_byte_m2560>:
    bc2c:	f9 99       	sbic	0x1f, 1	; 31
    bc2e:	fe cf       	rjmp	.-4      	; 0xbc2c <__eerd_byte_m2560>
    bc30:	92 bd       	out	0x22, r25	; 34
    bc32:	81 bd       	out	0x21, r24	; 33
    bc34:	f8 9a       	sbi	0x1f, 0	; 31
    bc36:	99 27       	eor	r25, r25
    bc38:	80 b5       	in	r24, 0x20	; 32
    bc3a:	08 95       	ret

0000bc3c <__eerd_word_m2560>:
    bc3c:	a8 e1       	ldi	r26, 0x18	; 24
    bc3e:	b0 e0       	ldi	r27, 0x00	; 0
    bc40:	42 e0       	ldi	r20, 0x02	; 2
    bc42:	50 e0       	ldi	r21, 0x00	; 0
    bc44:	e5 cf       	rjmp	.-54     	; 0xbc10 <__eerd_blraw_m2560>

0000bc46 <__eeupd_block_m2560>:
    bc46:	dc 01       	movw	r26, r24
    bc48:	a4 0f       	add	r26, r20
    bc4a:	b5 1f       	adc	r27, r21
    bc4c:	41 50       	subi	r20, 0x01	; 1
    bc4e:	50 40       	sbci	r21, 0x00	; 0
    bc50:	40 f0       	brcs	.+16     	; 0xbc62 <__eeupd_block_m2560+0x1c>
    bc52:	cb 01       	movw	r24, r22
    bc54:	84 0f       	add	r24, r20
    bc56:	95 1f       	adc	r25, r21
    bc58:	2e 91       	ld	r18, -X
    bc5a:	05 d0       	rcall	.+10     	; 0xbc66 <__eeupd_r18_m2560>
    bc5c:	41 50       	subi	r20, 0x01	; 1
    bc5e:	50 40       	sbci	r21, 0x00	; 0
    bc60:	d8 f7       	brcc	.-10     	; 0xbc58 <__eeupd_block_m2560+0x12>
    bc62:	08 95       	ret

0000bc64 <__eeupd_byte_m2560>:
    bc64:	26 2f       	mov	r18, r22

0000bc66 <__eeupd_r18_m2560>:
    bc66:	f9 99       	sbic	0x1f, 1	; 31
    bc68:	fe cf       	rjmp	.-4      	; 0xbc66 <__eeupd_r18_m2560>
    bc6a:	92 bd       	out	0x22, r25	; 34
    bc6c:	81 bd       	out	0x21, r24	; 33
    bc6e:	f8 9a       	sbi	0x1f, 0	; 31
    bc70:	01 97       	sbiw	r24, 0x01	; 1
    bc72:	00 b4       	in	r0, 0x20	; 32
    bc74:	02 16       	cp	r0, r18
    bc76:	39 f0       	breq	.+14     	; 0xbc86 <__eeupd_r18_m2560+0x20>
    bc78:	1f ba       	out	0x1f, r1	; 31
    bc7a:	20 bd       	out	0x20, r18	; 32
    bc7c:	0f b6       	in	r0, 0x3f	; 63
    bc7e:	f8 94       	cli
    bc80:	fa 9a       	sbi	0x1f, 2	; 31
    bc82:	f9 9a       	sbi	0x1f, 1	; 31
    bc84:	0f be       	out	0x3f, r0	; 63
    bc86:	08 95       	ret

0000bc88 <__eeupd_word_m2560>:
    bc88:	01 96       	adiw	r24, 0x01	; 1
    bc8a:	27 2f       	mov	r18, r23
    bc8c:	ec df       	rcall	.-40     	; 0xbc66 <__eeupd_r18_m2560>
    bc8e:	ea cf       	rjmp	.-44     	; 0xbc64 <__eeupd_byte_m2560>

0000bc90 <__eewr_byte_m2560>:
    bc90:	26 2f       	mov	r18, r22

0000bc92 <__eewr_r18_m2560>:
    bc92:	f9 99       	sbic	0x1f, 1	; 31
    bc94:	fe cf       	rjmp	.-4      	; 0xbc92 <__eewr_r18_m2560>
    bc96:	1f ba       	out	0x1f, r1	; 31
    bc98:	92 bd       	out	0x22, r25	; 34
    bc9a:	81 bd       	out	0x21, r24	; 33
    bc9c:	20 bd       	out	0x20, r18	; 32
    bc9e:	0f b6       	in	r0, 0x3f	; 63
    bca0:	f8 94       	cli
    bca2:	fa 9a       	sbi	0x1f, 2	; 31
    bca4:	f9 9a       	sbi	0x1f, 1	; 31
    bca6:	0f be       	out	0x3f, r0	; 63
    bca8:	01 96       	adiw	r24, 0x01	; 1
    bcaa:	08 95       	ret

0000bcac <__eewr_word_m2560>:
    bcac:	f1 df       	rcall	.-30     	; 0xbc90 <__eewr_byte_m2560>
    bcae:	27 2f       	mov	r18, r23
    bcb0:	f0 cf       	rjmp	.-32     	; 0xbc92 <__eewr_r18_m2560>

0000bcb2 <_exit>:
    bcb2:	f8 94       	cli

0000bcb4 <__stop_program>:
    bcb4:	ff cf       	rjmp	.-2      	; 0xbcb4 <__stop_program>
