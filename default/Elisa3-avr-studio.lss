
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00006280  00006314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025c  00800324  00800324  00006438  2**0
                  ALLOC
  3 .stab         0000267c  00000000  00000000  00006438  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008f2  00000000  00000000  00008ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b8  00000000  00000000  000093a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001208  00000000  00000000  0000965e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004a70  00000000  00000000  0000a866  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000181a  00000000  00000000  0000f2d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000059de  00000000  00000000  00010af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007e0  00000000  00000000  000164d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000118e  00000000  00000000  00016cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000019c8  00000000  00000000  00017e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000219  00000000  00000000  00019806  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000178  00000000  00000000  00019a1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 38 20 	jmp	0x4070	; 0x4070 <__vector_32>
      84:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 ab 1f 	jmp	0x3f56	; 0x3f56 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 7f 1f 	jmp	0x3efe	; 0x3efe <__vector_42>
      ac:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	a2 10       	cpse	r10, r2
      e6:	86 10       	cpse	r8, r6
      e8:	54 10       	cpse	r5, r4
      ea:	17 11       	cpse	r17, r7
      ec:	e1 10       	cpse	r14, r1
      ee:	0a 11       	cpse	r16, r10
      f0:	2b 10       	cpse	r2, r11
      f2:	0f 10       	cpse	r0, r15
      f4:	e2 0f       	add	r30, r18
      f6:	ca 0f       	add	r28, r26
      f8:	6b 0f       	add	r22, r27
      fa:	6b 0f       	add	r22, r27
      fc:	6b 0f       	add	r22, r27
      fe:	6b 0f       	add	r22, r27
     100:	6b 0f       	add	r22, r27
     102:	6b 0f       	add	r22, r27
     104:	be 0f       	add	r27, r30
     106:	b3 0f       	add	r27, r19
     108:	6b 0f       	add	r22, r27
     10a:	6b 0f       	add	r22, r27
     10c:	6b 0f       	add	r22, r27
     10e:	6b 0f       	add	r22, r27
     110:	6b 0f       	add	r22, r27
     112:	6b 0f       	add	r22, r27
     114:	6b 0f       	add	r22, r27
     116:	6b 0f       	add	r22, r27
     118:	6b 0f       	add	r22, r27
     11a:	6b 0f       	add	r22, r27
     11c:	6b 0f       	add	r22, r27
     11e:	6b 0f       	add	r22, r27
     120:	e2 0f       	add	r30, r18
     122:	54 10       	cpse	r5, r4
     124:	a7 0f       	add	r26, r23
     126:	a2 0f       	add	r26, r18
     128:	6b 0f       	add	r22, r27
     12a:	6b 0f       	add	r22, r27
     12c:	6b 0f       	add	r22, r27
     12e:	6b 0f       	add	r22, r27
     130:	6b 0f       	add	r22, r27
     132:	6b 0f       	add	r22, r27
     134:	6b 0f       	add	r22, r27
     136:	6b 0f       	add	r22, r27
     138:	6b 0f       	add	r22, r27
     13a:	6b 0f       	add	r22, r27
     13c:	6b 0f       	add	r22, r27
     13e:	6b 0f       	add	r22, r27
     140:	e1 10       	cpse	r14, r1
     142:	2b 10       	cpse	r2, r11
     144:	6b 0f       	add	r22, r27
     146:	6b 0f       	add	r22, r27
     148:	a2 10       	cpse	r10, r2
     14a:	0a 11       	cpse	r16, r10
     14c:	cb 10       	cpse	r12, r11
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e0 e8       	ldi	r30, 0x80	; 128
     194:	f2 e6       	ldi	r31, 0x62	; 98
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a4 32       	cpi	r26, 0x24	; 36
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	15 e0       	ldi	r17, 0x05	; 5
     1a4:	a4 e2       	ldi	r26, 0x24	; 36
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a0 38       	cpi	r26, 0x80	; 128
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 3f 31 	jmp	0x627e	; 0x627e <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	2f 92       	push	r2
     1c0:	3f 92       	push	r3
     1c2:	4f 92       	push	r4
     1c4:	5f 92       	push	r5
     1c6:	6f 92       	push	r6
     1c8:	7f 92       	push	r7
     1ca:	8f 92       	push	r8
     1cc:	9f 92       	push	r9
     1ce:	af 92       	push	r10
     1d0:	bf 92       	push	r11
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <main+0x26>
     1e4:	00 d0       	rcall	.+0      	; 0x1e6 <main+0x28>
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     1ea:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <initPeripherals>

	calibrateSensors();
     1ee:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <calibrateSensors>

	initBehaviors();
     1f2:	0e 94 64 20 	call	0x40c8	; 0x40c8 <initBehaviors>

	startTime = getTime100MicroSec();
     1f6:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     1fa:	7b 01       	movw	r14, r22
     1fc:	8c 01       	movw	r16, r24
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     1fe:	1e 82       	std	Y+6, r1	; 0x06
     200:	1d 82       	std	Y+5, r1	; 0x05


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     202:	cc 24       	eor	r12, r12
#include "sensors.h"


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     204:	88 24       	eor	r8, r8
     206:	99 24       	eor	r9, r9
     208:	54 01       	movw	r10, r8
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     20a:	dd 24       	eor	r13, r13
     20c:	da 94       	dec	r13
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
     20e:	52 e0       	ldi	r21, 0x02	; 2
     210:	25 2e       	mov	r2, r21
				}

			} else if(currentSelector==7) {

				srand(TCNT3);
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     212:	4e e1       	ldi	r20, 0x1E	; 30
     214:	64 2e       	mov	r6, r20
     216:	71 2c       	mov	r7, r1
				currRand = (currRand + rand()%30) % 128;
				pwm_blue = 255 - currRand;

			
				srand(TCNT3);
				currRand2 = rand()%128;
     218:	30 e8       	ldi	r19, 0x80	; 128
     21a:	43 2e       	mov	r4, r19
     21c:	51 2c       	mov	r5, r1
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     21e:	33 24       	eor	r3, r3
     220:	33 94       	inc	r3
	startTime = getTime100MicroSec();


	while(1) {

		currentSelector = getSelector();	// update selector position
     222:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <getSelector>
     226:	80 93 3f 05 	sts	0x053F, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     22a:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <readAccelXYZ>

		computeAngle();
     22e:	0e 94 30 2a 	call	0x5460	; 0x5460 <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     232:	80 91 3f 05 	lds	r24, 0x053F
     236:	87 30       	cpi	r24, 0x07	; 7
     238:	09 f4       	brne	.+2      	; 0x23c <main+0x7e>
     23a:	c6 c0       	rjmp	.+396    	; 0x3c8 <main+0x20a>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     23c:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     240:	6e 19       	sub	r22, r14
     242:	7f 09       	sbc	r23, r15
     244:	80 0b       	sbc	r24, r16
     246:	91 0b       	sbc	r25, r17
     248:	6e 31       	cpi	r22, 0x1E	; 30
     24a:	3b e4       	ldi	r19, 0x4B	; 75
     24c:	73 07       	cpc	r23, r19
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	83 07       	cpc	r24, r19
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	93 07       	cpc	r25, r19
     256:	08 f0       	brcs	.+2      	; 0x25a <main+0x9c>
     258:	75 c0       	rjmp	.+234    	; 0x344 <main+0x186>

			startTime = getTime100MicroSec();
		}


		handleIRRemoteCommands();
     25a:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <handleIRRemoteCommands>


		handleRFCommands();
     25e:	0e 94 04 0a 	call	0x1408	; 0x1408 <handleRFCommands>

		if(currentSelector!=6 && currentSelector!=15) {
     262:	80 91 3f 05 	lds	r24, 0x053F
     266:	86 30       	cpi	r24, 0x06	; 6
     268:	09 f4       	brne	.+2      	; 0x26c <main+0xae>
     26a:	88 c0       	rjmp	.+272    	; 0x37c <main+0x1be>
     26c:	8f 30       	cpi	r24, 0x0F	; 15
     26e:	09 f0       	breq	.+2      	; 0x272 <main+0xb4>
     270:	4a c0       	rjmp	.+148    	; 0x306 <main+0x148>
					break;

		}

		if(currentSelector != 0) {
			handleMotorsWithSpeedController();  
     272:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <handleMotorsWithSpeedController>
     276:	80 91 3f 05 	lds	r24, 0x053F
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     27a:	c8 16       	cp	r12, r24
     27c:	91 f2       	breq	.-92     	; 0x222 <main+0x64>
			disableObstacleAvoidance();
     27e:	0e 94 75 22 	call	0x44ea	; 0x44ea <disableObstacleAvoidance>
			disableCliffAvoidance();
     282:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     286:	80 91 0b 01 	lds	r24, 0x010B
     28a:	81 60       	ori	r24, 0x01	; 1
     28c:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     290:	80 91 0b 01 	lds	r24, 0x010B
     294:	82 60       	ori	r24, 0x02	; 2
     296:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     29a:	80 91 0b 01 	lds	r24, 0x010B
     29e:	84 60       	ori	r24, 0x04	; 4
     2a0:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     2a4:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     2a6:	80 91 0b 01 	lds	r24, 0x010B
     2aa:	80 61       	ori	r24, 0x10	; 16
     2ac:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     2b0:	80 91 0b 01 	lds	r24, 0x010B
     2b4:	80 62       	ori	r24, 0x20	; 32
     2b6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     2ba:	80 91 0b 01 	lds	r24, 0x010B
     2be:	80 64       	ori	r24, 0x40	; 64
     2c0:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     2c4:	80 91 0b 01 	lds	r24, 0x010B
     2c8:	80 68       	ori	r24, 0x80	; 128
     2ca:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     2ce:	d0 92 0c 02 	sts	0x020C, r13
			pwm_green = 255;
     2d2:	d0 92 0d 02 	sts	0x020D, r13
			pwm_blue = 255;
     2d6:	d0 92 0e 02 	sts	0x020E, r13
			updateRedLed(pwm_red);
     2da:	8f ef       	ldi	r24, 0xFF	; 255
     2dc:	0e 94 bc 22 	call	0x4578	; 0x4578 <updateRedLed>
			updateGreenLed(pwm_green);
     2e0:	80 91 0d 02 	lds	r24, 0x020D
     2e4:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <updateGreenLed>
			updateBlueLed(pwm_blue);
     2e8:	80 91 0e 02 	lds	r24, 0x020E
     2ec:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <updateBlueLed>
			setRightSpeed(0);
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
			setLeftSpeed(0);
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
			rgbState = 0;
     2fc:	10 92 10 04 	sts	0x0410, r1
     300:	c0 90 3f 05 	lds	r12, 0x053F
     304:	8e cf       	rjmp	.-228    	; 0x222 <main+0x64>


		handleRFCommands();

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
		}

		switch(currentSelector) {
     30c:	90 91 3f 05 	lds	r25, 0x053F
     310:	89 2f       	mov	r24, r25
     312:	96 30       	cpi	r25, 0x06	; 6
     314:	99 f1       	breq	.+102    	; 0x37c <main+0x1be>
     316:	97 30       	cpi	r25, 0x07	; 7
     318:	08 f0       	brcs	.+2      	; 0x31c <main+0x15e>
     31a:	73 c0       	rjmp	.+230    	; 0x402 <main+0x244>
     31c:	92 30       	cpi	r25, 0x02	; 2
     31e:	09 f4       	brne	.+2      	; 0x322 <main+0x164>
     320:	6b c0       	rjmp	.+214    	; 0x3f8 <main+0x23a>
     322:	93 30       	cpi	r25, 0x03	; 3
     324:	08 f0       	brcs	.+2      	; 0x328 <main+0x16a>
     326:	51 c1       	rjmp	.+674    	; 0x5ca <main+0x40c>
     328:	99 23       	and	r25, r25
     32a:	09 f4       	brne	.+2      	; 0x32e <main+0x170>
     32c:	30 c1       	rjmp	.+608    	; 0x58e <main+0x3d0>
     32e:	91 30       	cpi	r25, 0x01	; 1
     330:	21 f4       	brne	.+8      	; 0x33a <main+0x17c>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     332:	0e 94 71 22 	call	0x44e2	; 0x44e2 <enableObstacleAvoidance>
     336:	90 91 3f 05 	lds	r25, 0x053F
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector != 0) {
     33a:	99 23       	and	r25, r25
     33c:	09 f0       	breq	.+2      	; 0x340 <main+0x182>
     33e:	99 cf       	rjmp	.-206    	; 0x272 <main+0xb4>
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	9b cf       	rjmp	.-202    	; 0x27a <main+0xbc>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     344:	0e 94 c9 18 	call	0x3192	; 0x3192 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     348:	80 91 3f 05 	lds	r24, 0x053F
     34c:	98 2f       	mov	r25, r24
     34e:	94 50       	subi	r25, 0x04	; 4
     350:	92 30       	cpi	r25, 0x02	; 2
     352:	08 f4       	brcc	.+2      	; 0x356 <main+0x198>
     354:	af c1       	rjmp	.+862    	; 0x6b4 <main+0x4f6>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     356:	87 30       	cpi	r24, 0x07	; 7
     358:	09 f4       	brne	.+2      	; 0x35c <main+0x19e>
     35a:	da c1       	rjmp	.+948    	; 0x710 <main+0x552>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     35c:	86 30       	cpi	r24, 0x06	; 6
     35e:	09 f4       	brne	.+2      	; 0x362 <main+0x1a4>
     360:	1b c1       	rjmp	.+566    	; 0x598 <main+0x3da>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     362:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     366:	7b 01       	movw	r14, r22
     368:	8c 01       	movw	r16, r24
		}


		handleIRRemoteCommands();
     36a:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <handleIRRemoteCommands>


		handleRFCommands();
     36e:	0e 94 04 0a 	call	0x1408	; 0x1408 <handleRFCommands>

		if(currentSelector!=6 && currentSelector!=15) {
     372:	80 91 3f 05 	lds	r24, 0x053F
     376:	86 30       	cpi	r24, 0x06	; 6
     378:	09 f0       	breq	.+2      	; 0x37c <main+0x1be>
     37a:	78 cf       	rjmp	.-272    	; 0x26c <main+0xae>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     37c:	90 91 17 05 	lds	r25, 0x0517
     380:	91 30       	cpi	r25, 0x01	; 1
     382:	09 f4       	brne	.+2      	; 0x386 <main+0x1c8>
     384:	95 c2       	rjmp	.+1322   	; 0x8b0 <main+0x6f2>
     386:	91 30       	cpi	r25, 0x01	; 1
     388:	08 f0       	brcs	.+2      	; 0x38c <main+0x1ce>
     38a:	18 c2       	rjmp	.+1072   	; 0x7bc <main+0x5fe>
						case 0:
							setRightSpeed(0);
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
							setLeftSpeed(0);
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
							turnOffGreenLeds();
     398:	0e 94 95 23 	call	0x472a	; 0x472a <turnOffGreenLeds>
							pwm_red=255;
     39c:	d0 92 0c 02 	sts	0x020C, r13
							pwm_green=255;
     3a0:	d0 92 0d 02 	sts	0x020D, r13
							pwm_blue=255;
     3a4:	d0 92 0e 02 	sts	0x020E, r13
							updateRedLed(pwm_red);
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	0e 94 bc 22 	call	0x4578	; 0x4578 <updateRedLed>
							updateGreenLed(pwm_green);
     3ae:	80 91 0d 02 	lds	r24, 0x020D
     3b2:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <updateGreenLed>
							updateBlueLed(pwm_blue);
     3b6:	80 91 0e 02 	lds	r24, 0x020E
     3ba:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <updateBlueLed>
							LED_IR1_HIGH;
     3be:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     3c0:	45 9a       	sbi	0x08, 5	; 8
     3c2:	90 91 3f 05 	lds	r25, 0x053F
							break;
     3c6:	b9 cf       	rjmp	.-142    	; 0x33a <main+0x17c>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     3c8:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     3cc:	68 19       	sub	r22, r8
     3ce:	79 09       	sbc	r23, r9
     3d0:	8a 09       	sbc	r24, r10
     3d2:	9b 09       	sbc	r25, r11
     3d4:	68 3c       	cpi	r22, 0xC8	; 200
     3d6:	22 e1       	ldi	r18, 0x12	; 18
     3d8:	72 07       	cpc	r23, r18
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	82 07       	cpc	r24, r18
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	92 07       	cpc	r25, r18
     3e2:	08 f4       	brcc	.+2      	; 0x3e6 <main+0x228>
     3e4:	2b cf       	rjmp	.-426    	; 0x23c <main+0x7e>
				pwm_red = 255;
     3e6:	d0 92 0c 02 	sts	0x020C, r13
				pwm_green = 255;
     3ea:	d0 92 0d 02 	sts	0x020D, r13
				pwm_blue = 255;			
     3ee:	d0 92 0e 02 	sts	0x020E, r13
     3f2:	24 cf       	rjmp	.-440    	; 0x23c <main+0x7e>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     3f4:	0e 94 71 22 	call	0x44e2	; 0x44e2 <enableObstacleAvoidance>
					enableCliffAvoidance();
     3f8:	0e 94 78 22 	call	0x44f0	; 0x44f0 <enableCliffAvoidance>
     3fc:	90 91 3f 05 	lds	r25, 0x053F
					break;
     400:	9c cf       	rjmp	.-200    	; 0x33a <main+0x17c>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     402:	9a 30       	cpi	r25, 0x0A	; 10
     404:	09 f4       	brne	.+2      	; 0x408 <main+0x24a>
     406:	a9 c0       	rjmp	.+338    	; 0x55a <main+0x39c>
     408:	9b 30       	cpi	r25, 0x0B	; 11
     40a:	f0 f4       	brcc	.+60     	; 0x448 <main+0x28a>
     40c:	98 30       	cpi	r25, 0x08	; 8
     40e:	09 f4       	brne	.+2      	; 0x412 <main+0x254>
     410:	8a c0       	rjmp	.+276    	; 0x526 <main+0x368>
     412:	99 30       	cpi	r25, 0x09	; 9
     414:	d8 f1       	brcs	.+118    	; 0x48c <main+0x2ce>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 9:	if(leftMotSteps <= 3000) {
     416:	80 91 db 03 	lds	r24, 0x03DB
     41a:	90 91 dc 03 	lds	r25, 0x03DC
     41e:	a0 91 dd 03 	lds	r26, 0x03DD
     422:	b0 91 de 03 	lds	r27, 0x03DE
     426:	89 3b       	cpi	r24, 0xB9	; 185
     428:	fb e0       	ldi	r31, 0x0B	; 11
     42a:	9f 07       	cpc	r25, r31
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	af 07       	cpc	r26, r31
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	bf 07       	cpc	r27, r31
     434:	14 f1       	brlt	.+68     	; 0x47a <main+0x2bc>

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
						setRightSpeed(0);
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
     442:	90 91 3f 05 	lds	r25, 0x053F
     446:	79 cf       	rjmp	.-270    	; 0x33a <main+0x17c>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     448:	9c 30       	cpi	r25, 0x0C	; 12
     44a:	09 f4       	brne	.+2      	; 0x44e <main+0x290>
     44c:	19 c1       	rjmp	.+562    	; 0x680 <main+0x4c2>
     44e:	9c 30       	cpi	r25, 0x0C	; 12
     450:	08 f4       	brcc	.+2      	; 0x454 <main+0x296>
     452:	fc c0       	rjmp	.+504    	; 0x64c <main+0x48e>
     454:	9d 30       	cpi	r25, 0x0D	; 13
     456:	09 f0       	breq	.+2      	; 0x45a <main+0x29c>
     458:	70 cf       	rjmp	.-288    	; 0x33a <main+0x17c>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
     45a:	80 91 db 03 	lds	r24, 0x03DB
     45e:	90 91 dc 03 	lds	r25, 0x03DC
     462:	a0 91 dd 03 	lds	r26, 0x03DD
     466:	b0 91 de 03 	lds	r27, 0x03DE
     46a:	89 35       	cpi	r24, 0x59	; 89
     46c:	6b e1       	ldi	r22, 0x1B	; 27
     46e:	96 07       	cpc	r25, r22
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	a6 07       	cpc	r26, r22
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	b6 07       	cpc	r27, r22
     478:	f4 f6       	brge	.-68     	; 0x436 <main+0x278>
						setLeftSpeed(40);
     47a:	88 e2       	ldi	r24, 0x28	; 40
     47c:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
						setRightSpeed(40);
     480:	88 e2       	ldi	r24, 0x28	; 40
     482:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
     486:	90 91 3f 05 	lds	r25, 0x053F
     48a:	57 cf       	rjmp	.-338    	; 0x33a <main+0x17c>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     48c:	80 91 43 05 	lds	r24, 0x0543
     490:	82 30       	cpi	r24, 0x02	; 2
     492:	09 f4       	brne	.+2      	; 0x496 <main+0x2d8>
     494:	75 c4       	rjmp	.+2282   	; 0xd80 <main+0xbc2>
     496:	83 30       	cpi	r24, 0x03	; 3
     498:	08 f0       	brcs	.+2      	; 0x49c <main+0x2de>
     49a:	af c1       	rjmp	.+862    	; 0x7fa <main+0x63c>
     49c:	88 23       	and	r24, r24
     49e:	09 f0       	breq	.+2      	; 0x4a2 <main+0x2e4>
     4a0:	96 c3       	rjmp	.+1836   	; 0xbce <main+0xa10>
						case 0:	// move around
							turnOffGreenLeds();
     4a2:	0e 94 95 23 	call	0x472a	; 0x472a <turnOffGreenLeds>
							GREEN_LED0_ON;
     4a6:	80 91 0b 01 	lds	r24, 0x010B
     4aa:	8e 7f       	andi	r24, 0xFE	; 254
     4ac:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     4b0:	10 92 44 05 	sts	0x0544, r1
							enableObstacleAvoidance();
     4b4:	0e 94 71 22 	call	0x44e2	; 0x44e2 <enableObstacleAvoidance>
							setRightSpeed(20);
     4b8:	84 e1       	ldi	r24, 0x14	; 20
     4ba:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
							setLeftSpeed(20);
     4be:	84 e1       	ldi	r24, 0x14	; 20
     4c0:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     4c4:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     4c8:	9b 01       	movw	r18, r22
     4ca:	ac 01       	movw	r20, r24
     4cc:	60 93 4b 05 	sts	0x054B, r22
     4d0:	70 93 4c 05 	sts	0x054C, r23
     4d4:	80 93 4d 05 	sts	0x054D, r24
     4d8:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     4dc:	80 91 47 05 	lds	r24, 0x0547
     4e0:	90 91 48 05 	lds	r25, 0x0548
     4e4:	a0 91 49 05 	lds	r26, 0x0549
     4e8:	b0 91 4a 05 	lds	r27, 0x054A
     4ec:	28 1b       	sub	r18, r24
     4ee:	39 0b       	sbc	r19, r25
     4f0:	4a 0b       	sbc	r20, r26
     4f2:	5b 0b       	sbc	r21, r27
     4f4:	23 33       	cpi	r18, 0x33	; 51
     4f6:	9f ee       	ldi	r25, 0xEF	; 239
     4f8:	39 07       	cpc	r19, r25
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	49 07       	cpc	r20, r25
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	59 07       	cpc	r21, r25
     502:	10 f0       	brcs	.+4      	; 0x508 <main+0x34a>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     504:	30 92 43 05 	sts	0x0543, r3
							//pwm_green = 0;
							//pwm_blue = 0;													
							break;							
					}

					updateRedLed(pwm_red);
     508:	80 91 0c 02 	lds	r24, 0x020C
     50c:	0e 94 bc 22 	call	0x4578	; 0x4578 <updateRedLed>
					updateGreenLed(pwm_green);
     510:	80 91 0d 02 	lds	r24, 0x020D
     514:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <updateGreenLed>
					updateBlueLed(pwm_blue);
     518:	80 91 0e 02 	lds	r24, 0x020E
     51c:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <updateBlueLed>
     520:	90 91 3f 05 	lds	r25, 0x053F

					break;
     524:	0a cf       	rjmp	.-492    	; 0x33a <main+0x17c>
  
			case 8:	if(leftMotSteps <= 2000) {
     526:	80 91 db 03 	lds	r24, 0x03DB
     52a:	90 91 dc 03 	lds	r25, 0x03DC
     52e:	a0 91 dd 03 	lds	r26, 0x03DD
     532:	b0 91 de 03 	lds	r27, 0x03DE
     536:	81 3d       	cpi	r24, 0xD1	; 209
     538:	e7 e0       	ldi	r30, 0x07	; 7
     53a:	9e 07       	cpc	r25, r30
     53c:	e0 e0       	ldi	r30, 0x00	; 0
     53e:	ae 07       	cpc	r26, r30
     540:	e0 e0       	ldi	r30, 0x00	; 0
     542:	be 07       	cpc	r27, r30
     544:	0c f0       	brlt	.+2      	; 0x548 <main+0x38a>
     546:	77 cf       	rjmp	.-274    	; 0x436 <main+0x278>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     548:	88 e2       	ldi	r24, 0x28	; 40
     54a:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
						setRightSpeed(40);
     54e:	88 e2       	ldi	r24, 0x28	; 40
     550:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
     554:	90 91 3f 05 	lds	r25, 0x053F
     558:	f0 ce       	rjmp	.-544    	; 0x33a <main+0x17c>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 10:if(leftMotSteps <= 4000) {
     55a:	80 91 db 03 	lds	r24, 0x03DB
     55e:	90 91 dc 03 	lds	r25, 0x03DC
     562:	a0 91 dd 03 	lds	r26, 0x03DD
     566:	b0 91 de 03 	lds	r27, 0x03DE
     56a:	81 3a       	cpi	r24, 0xA1	; 161
     56c:	2f e0       	ldi	r18, 0x0F	; 15
     56e:	92 07       	cpc	r25, r18
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	a2 07       	cpc	r26, r18
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	b2 07       	cpc	r27, r18
     578:	0c f0       	brlt	.+2      	; 0x57c <main+0x3be>
     57a:	5d cf       	rjmp	.-326    	; 0x436 <main+0x278>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     57c:	88 e2       	ldi	r24, 0x28	; 40
     57e:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
						setRightSpeed(40);
     582:	88 e2       	ldi	r24, 0x28	; 40
     584:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
     588:	90 91 3f 05 	lds	r25, 0x053F
     58c:	d6 ce       	rjmp	.-596    	; 0x33a <main+0x17c>
		}

		switch(currentSelector) {
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     58e:	0e 94 00 1c 	call	0x3800	; 0x3800 <handleMotorsWithNoController>
     592:	90 91 3f 05 	lds	r25, 0x053F
					break;
     596:	d1 ce       	rjmp	.-606    	; 0x33a <main+0x17c>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     598:	80 91 17 05 	lds	r24, 0x0517
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	09 f0       	breq	.+2      	; 0x5a2 <main+0x3e4>
     5a0:	e0 ce       	rjmp	.-576    	; 0x362 <main+0x1a4>
     5a2:	90 91 0d 04 	lds	r25, 0x040D
     5a6:	92 30       	cpi	r25, 0x02	; 2
     5a8:	08 f0       	brcs	.+2      	; 0x5ac <main+0x3ee>
     5aa:	db ce       	rjmp	.-586    	; 0x362 <main+0x1a4>
					if(rgbState == 0) {
     5ac:	90 91 10 04 	lds	r25, 0x0410
     5b0:	99 23       	and	r25, r25
     5b2:	09 f0       	breq	.+2      	; 0x5b6 <main+0x3f8>
     5b4:	dd c4       	rjmp	.+2490   	; 0xf70 <main+0xdb2>
						pwm_red = 254;
     5b6:	ee ef       	ldi	r30, 0xFE	; 254
     5b8:	e0 93 0c 02 	sts	0x020C, r30
						pwm_green = 255;
     5bc:	d0 92 0d 02 	sts	0x020D, r13
						pwm_blue = 255;
     5c0:	d0 92 0e 02 	sts	0x020E, r13
						rgbState = 1;
     5c4:	80 93 10 04 	sts	0x0410, r24
     5c8:	cc ce       	rjmp	.-616    	; 0x362 <main+0x1a4>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     5ca:	94 30       	cpi	r25, 0x04	; 4
     5cc:	d1 f0       	breq	.+52     	; 0x602 <main+0x444>
     5ce:	95 30       	cpi	r25, 0x05	; 5
     5d0:	08 f4       	brcc	.+2      	; 0x5d4 <main+0x416>
     5d2:	10 cf       	rjmp	.-480    	; 0x3f4 <main+0x236>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     5d4:	80 91 0c 02 	lds	r24, 0x020C
     5d8:	0e 94 bc 22 	call	0x4578	; 0x4578 <updateRedLed>
					updateGreenLed(pwm_green);
     5dc:	80 91 0d 02 	lds	r24, 0x020D
     5e0:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <updateGreenLed>
					updateBlueLed(pwm_blue);
     5e4:	80 91 0e 02 	lds	r24, 0x020E
     5e8:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <updateBlueLed>
					enableObstacleAvoidance();
     5ec:	0e 94 71 22 	call	0x44e2	; 0x44e2 <enableObstacleAvoidance>
					setLeftSpeed(25);
     5f0:	89 e1       	ldi	r24, 0x19	; 25
     5f2:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
					setRightSpeed(25);
     5f6:	89 e1       	ldi	r24, 0x19	; 25
     5f8:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
     5fc:	90 91 3f 05 	lds	r25, 0x053F
					break;
     600:	9c ce       	rjmp	.-712    	; 0x33a <main+0x17c>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     602:	80 91 0b 01 	lds	r24, 0x010B
     606:	8e 7f       	andi	r24, 0xFE	; 254
     608:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     60c:	80 91 0b 01 	lds	r24, 0x010B
     610:	8d 7f       	andi	r24, 0xFD	; 253
     612:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     616:	80 91 0b 01 	lds	r24, 0x010B
     61a:	8b 7f       	andi	r24, 0xFB	; 251
     61c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     620:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     622:	80 91 0b 01 	lds	r24, 0x010B
     626:	8f 7e       	andi	r24, 0xEF	; 239
     628:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     62c:	80 91 0b 01 	lds	r24, 0x010B
     630:	8f 7d       	andi	r24, 0xDF	; 223
     632:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     636:	80 91 0b 01 	lds	r24, 0x010B
     63a:	8f 7b       	andi	r24, 0xBF	; 191
     63c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     640:	80 91 0b 01 	lds	r24, 0x010B
     644:	8f 77       	andi	r24, 0x7F	; 127
     646:	80 93 0b 01 	sts	0x010B, r24
     64a:	5e cf       	rjmp	.-324    	; 0x508 <main+0x34a>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 11:if(leftMotSteps <= 5000) {
     64c:	80 91 db 03 	lds	r24, 0x03DB
     650:	90 91 dc 03 	lds	r25, 0x03DC
     654:	a0 91 dd 03 	lds	r26, 0x03DD
     658:	b0 91 de 03 	lds	r27, 0x03DE
     65c:	89 38       	cpi	r24, 0x89	; 137
     65e:	33 e1       	ldi	r19, 0x13	; 19
     660:	93 07       	cpc	r25, r19
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	a3 07       	cpc	r26, r19
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	b3 07       	cpc	r27, r19
     66a:	0c f0       	brlt	.+2      	; 0x66e <main+0x4b0>
     66c:	e4 ce       	rjmp	.-568    	; 0x436 <main+0x278>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     66e:	88 e2       	ldi	r24, 0x28	; 40
     670:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
						setRightSpeed(40);
     674:	88 e2       	ldi	r24, 0x28	; 40
     676:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
     67a:	90 91 3f 05 	lds	r25, 0x053F
     67e:	5d ce       	rjmp	.-838    	; 0x33a <main+0x17c>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     680:	80 91 db 03 	lds	r24, 0x03DB
     684:	90 91 dc 03 	lds	r25, 0x03DC
     688:	a0 91 dd 03 	lds	r26, 0x03DD
     68c:	b0 91 de 03 	lds	r27, 0x03DE
     690:	81 37       	cpi	r24, 0x71	; 113
     692:	47 e1       	ldi	r20, 0x17	; 23
     694:	94 07       	cpc	r25, r20
     696:	40 e0       	ldi	r20, 0x00	; 0
     698:	a4 07       	cpc	r26, r20
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	b4 07       	cpc	r27, r20
     69e:	0c f4       	brge	.+2      	; 0x6a2 <main+0x4e4>
     6a0:	ec ce       	rjmp	.-552    	; 0x47a <main+0x2bc>
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
						setRightSpeed(0);
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
     6ae:	90 91 3f 05 	lds	r25, 0x053F
     6b2:	43 ce       	rjmp	.-890    	; 0x33a <main+0x17c>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     6b4:	0e 94 b1 2e 	call	0x5d62	; 0x5d62 <rand>
     6b8:	b3 01       	movw	r22, r6
     6ba:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__divmodhi4>
     6be:	ad 81       	ldd	r26, Y+5	; 0x05
     6c0:	be 81       	ldd	r27, Y+6	; 0x06
     6c2:	a8 0f       	add	r26, r24
     6c4:	b9 1f       	adc	r27, r25
     6c6:	af 77       	andi	r26, 0x7F	; 127
     6c8:	b0 70       	andi	r27, 0x00	; 0
     6ca:	be 83       	std	Y+6, r27	; 0x06
     6cc:	ad 83       	std	Y+5, r26	; 0x05

				switch(rgbState) {
     6ce:	80 91 10 04 	lds	r24, 0x0410
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <main+0x51a>
     6d6:	b6 c2       	rjmp	.+1388   	; 0xc44 <main+0xa86>
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	08 f0       	brcs	.+2      	; 0x6de <main+0x520>
     6dc:	6e c2       	rjmp	.+1244   	; 0xbba <main+0x9fc>
					case 0:
						pwm_red = 255 - currRand;	
     6de:	8d 81       	ldd	r24, Y+5	; 0x05
     6e0:	80 95       	com	r24
     6e2:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     6e6:	30 92 10 04 	sts	0x0410, r3
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     6ea:	ed 81       	ldd	r30, Y+5	; 0x05
     6ec:	fe 81       	ldd	r31, Y+6	; 0x06
     6ee:	e0 32       	cpi	r30, 0x20	; 32
     6f0:	f1 05       	cpc	r31, r1
     6f2:	08 f0       	brcs	.+2      	; 0x6f6 <main+0x538>
     6f4:	c5 c0       	rjmp	.+394    	; 0x880 <main+0x6c2>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn off all leds
     6f6:	80 91 0d 02 	lds	r24, 0x020D
     6fa:	8f 3f       	cpi	r24, 0xFF	; 255
     6fc:	09 f4       	brne	.+2      	; 0x700 <main+0x542>
     6fe:	31 ce       	rjmp	.-926    	; 0x362 <main+0x1a4>
     700:	80 91 0e 02 	lds	r24, 0x020E
     704:	8f 3f       	cpi	r24, 0xFF	; 255
     706:	09 f4       	brne	.+2      	; 0x70a <main+0x54c>
     708:	2c ce       	rjmp	.-936    	; 0x362 <main+0x1a4>
						pwm_red = 255;
     70a:	d0 92 0c 02 	sts	0x020C, r13
     70e:	29 ce       	rjmp	.-942    	; 0x362 <main+0x1a4>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     710:	80 91 94 00 	lds	r24, 0x0094
     714:	90 91 95 00 	lds	r25, 0x0095
     718:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     71c:	0e 94 b1 2e 	call	0x5d62	; 0x5d62 <rand>
     720:	b3 01       	movw	r22, r6
     722:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__divmodhi4>
     726:	7c 01       	movw	r14, r24
     728:	ad 81       	ldd	r26, Y+5	; 0x05
     72a:	be 81       	ldd	r27, Y+6	; 0x06
     72c:	ea 0e       	add	r14, r26
     72e:	fb 1e       	adc	r15, r27
     730:	bf e7       	ldi	r27, 0x7F	; 127
     732:	eb 22       	and	r14, r27
     734:	ff 24       	eor	r15, r15

				pwm_red = 255 - currRand;
     736:	8e 2d       	mov	r24, r14
     738:	80 95       	com	r24
     73a:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     73e:	80 91 94 00 	lds	r24, 0x0094
     742:	90 91 95 00 	lds	r25, 0x0095
     746:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <srand>
				currRand = (currRand + rand()%30) % 128;	
     74a:	0e 94 b1 2e 	call	0x5d62	; 0x5d62 <rand>
     74e:	b3 01       	movw	r22, r6
     750:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__divmodhi4>
     754:	8c 01       	movw	r16, r24
     756:	0e 0d       	add	r16, r14
     758:	1f 1d       	adc	r17, r15
     75a:	0f 77       	andi	r16, 0x7F	; 127
     75c:	10 70       	andi	r17, 0x00	; 0
				pwm_green = 255 - currRand;
     75e:	80 2f       	mov	r24, r16
     760:	80 95       	com	r24
     762:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     766:	80 91 94 00 	lds	r24, 0x0094
     76a:	90 91 95 00 	lds	r25, 0x0095
     76e:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <srand>
				currRand = (currRand + rand()%30) % 128;
     772:	0e 94 b1 2e 	call	0x5d62	; 0x5d62 <rand>
     776:	b3 01       	movw	r22, r6
     778:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__divmodhi4>
     77c:	80 0f       	add	r24, r16
     77e:	91 1f       	adc	r25, r17
     780:	8f 77       	andi	r24, 0x7F	; 127
     782:	90 70       	andi	r25, 0x00	; 0
     784:	9e 83       	std	Y+6, r25	; 0x06
     786:	8d 83       	std	Y+5, r24	; 0x05
				pwm_blue = 255 - currRand;
     788:	8d 81       	ldd	r24, Y+5	; 0x05
     78a:	80 95       	com	r24
     78c:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     790:	80 91 94 00 	lds	r24, 0x0094
     794:	90 91 95 00 	lds	r25, 0x0095
     798:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <srand>
				currRand2 = rand()%128;
     79c:	0e 94 b1 2e 	call	0x5d62	; 0x5d62 <rand>
     7a0:	b2 01       	movw	r22, r4
     7a2:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__divmodhi4>
				if(currRand2<32) {
     7a6:	80 32       	cpi	r24, 0x20	; 32
     7a8:	91 05       	cpc	r25, r1
     7aa:	08 f0       	brcs	.+2      	; 0x7ae <main+0x5f0>
     7ac:	7a c0       	rjmp	.+244    	; 0x8a2 <main+0x6e4>
					pwm_red = 255;
     7ae:	d0 92 0c 02 	sts	0x020C, r13
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     7b2:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     7b6:	4b 01       	movw	r8, r22
     7b8:	5c 01       	movw	r10, r24
     7ba:	d3 cd       	rjmp	.-1114   	; 0x362 <main+0x1a4>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     7bc:	92 30       	cpi	r25, 0x02	; 2
     7be:	11 f0       	breq	.+4      	; 0x7c4 <main+0x606>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     7c0:	98 2f       	mov	r25, r24
     7c2:	bb cd       	rjmp	.-1162   	; 0x33a <main+0x17c>
     7c4:	90 91 18 05 	lds	r25, 0x0518
     7c8:	99 23       	and	r25, r25
     7ca:	d1 f3       	breq	.-12     	; 0x7c0 <main+0x602>
								turnOnGreenLeds();
     7cc:	0e 94 ae 23 	call	0x475c	; 0x475c <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     7d0:	60 91 0b 04 	lds	r22, 0x040B
     7d4:	70 91 0c 04 	lds	r23, 0x040C
     7d8:	8e ef       	ldi	r24, 0xFE	; 254
     7da:	9f e0       	ldi	r25, 0x0F	; 15
     7dc:	0e 94 86 30 	call	0x610c	; 0x610c <__eewr_word_m2560>
								turnOffGreenLeds();
     7e0:	0e 94 95 23 	call	0x472a	; 0x472a <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     7e4:	8a ea       	ldi	r24, 0xAA	; 170
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
								addressReceived = 0;
     7ec:	10 92 18 05 	sts	0x0518, r1
								menuChoice = 0;
     7f0:	10 92 17 05 	sts	0x0517, r1
     7f4:	90 91 3f 05 	lds	r25, 0x053F
     7f8:	a0 cd       	rjmp	.-1216   	; 0x33a <main+0x17c>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     7fa:	84 30       	cpi	r24, 0x04	; 4
     7fc:	09 f4       	brne	.+2      	; 0x800 <main+0x642>
     7fe:	7f c2       	rjmp	.+1278   	; 0xcfe <main+0xb40>
     800:	84 30       	cpi	r24, 0x04	; 4
     802:	08 f4       	brcc	.+2      	; 0x806 <main+0x648>
     804:	37 c2       	rjmp	.+1134   	; 0xc74 <main+0xab6>
     806:	85 30       	cpi	r24, 0x05	; 5
     808:	09 f0       	breq	.+2      	; 0x80c <main+0x64e>
     80a:	7e ce       	rjmp	.-772    	; 0x508 <main+0x34a>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     80c:	0e 94 95 23 	call	0x472a	; 0x472a <turnOffGreenLeds>
							GREEN_LED6_ON;
     810:	80 91 0b 01 	lds	r24, 0x010B
     814:	8f 7b       	andi	r24, 0xBF	; 191
     816:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     81a:	80 91 0b 01 	lds	r24, 0x010B
     81e:	8f 77       	andi	r24, 0x7F	; 127
     820:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     824:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     828:	9b 01       	movw	r18, r22
     82a:	ac 01       	movw	r20, r24
     82c:	60 93 4b 05 	sts	0x054B, r22
     830:	70 93 4c 05 	sts	0x054C, r23
     834:	80 93 4d 05 	sts	0x054D, r24
     838:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     83c:	80 91 47 05 	lds	r24, 0x0547
     840:	90 91 48 05 	lds	r25, 0x0548
     844:	a0 91 49 05 	lds	r26, 0x0549
     848:	b0 91 4a 05 	lds	r27, 0x054A
     84c:	28 1b       	sub	r18, r24
     84e:	39 0b       	sbc	r19, r25
     850:	4a 0b       	sbc	r20, r26
     852:	5b 0b       	sbc	r21, r27
     854:	2b 32       	cpi	r18, 0x2B	; 43
     856:	9c e1       	ldi	r25, 0x1C	; 28
     858:	39 07       	cpc	r19, r25
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	49 07       	cpc	r20, r25
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	59 07       	cpc	r21, r25
     862:	08 f4       	brcc	.+2      	; 0x866 <main+0x6a8>
     864:	51 ce       	rjmp	.-862    	; 0x508 <main+0x34a>
								demoStartTime = getTime100MicroSec();
     866:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     86a:	60 93 47 05 	sts	0x0547, r22
     86e:	70 93 48 05 	sts	0x0548, r23
     872:	80 93 49 05 	sts	0x0549, r24
     876:	90 93 4a 05 	sts	0x054A, r25
								demoState = 0;							
     87a:	10 92 43 05 	sts	0x0543, r1
     87e:	44 ce       	rjmp	.-888    	; 0x508 <main+0x34a>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn off all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     880:	e0 34       	cpi	r30, 0x40	; 64
     882:	f1 05       	cpc	r31, r1
     884:	08 f0       	brcs	.+2      	; 0x888 <main+0x6ca>
     886:	e5 c1       	rjmp	.+970    	; 0xc52 <main+0xa94>
					if(pwm_red!=255 && pwm_blue!=255) {
     888:	80 91 0c 02 	lds	r24, 0x020C
     88c:	8f 3f       	cpi	r24, 0xFF	; 255
     88e:	09 f4       	brne	.+2      	; 0x892 <main+0x6d4>
     890:	68 cd       	rjmp	.-1328   	; 0x362 <main+0x1a4>
     892:	80 91 0e 02 	lds	r24, 0x020E
     896:	8f 3f       	cpi	r24, 0xFF	; 255
     898:	09 f4       	brne	.+2      	; 0x89c <main+0x6de>
     89a:	63 cd       	rjmp	.-1338   	; 0x362 <main+0x1a4>
						pwm_green = 255;
     89c:	d0 92 0d 02 	sts	0x020D, r13
     8a0:	60 cd       	rjmp	.-1344   	; 0x362 <main+0x1a4>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     8a2:	80 34       	cpi	r24, 0x40	; 64
     8a4:	91 05       	cpc	r25, r1
     8a6:	08 f0       	brcs	.+2      	; 0x8aa <main+0x6ec>
     8a8:	00 c3       	rjmp	.+1536   	; 0xeaa <main+0xcec>
					pwm_green = 255;
     8aa:	d0 92 0d 02 	sts	0x020D, r13
     8ae:	81 cf       	rjmp	.-254    	; 0x7b2 <main+0x5f4>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     8b0:	0e 94 ae 23 	call	0x475c	; 0x475c <turnOnGreenLeds>
							updateRedLed(pwm_red);
     8b4:	80 91 0c 02 	lds	r24, 0x020C
     8b8:	0e 94 bc 22 	call	0x4578	; 0x4578 <updateRedLed>
							updateGreenLed(pwm_green);
     8bc:	80 91 0d 02 	lds	r24, 0x020D
     8c0:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <updateGreenLed>
							updateBlueLed(pwm_blue);
     8c4:	80 91 0e 02 	lds	r24, 0x020E
     8c8:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <updateBlueLed>
							LED_IR1_LOW;
     8cc:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     8ce:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     8d0:	80 91 1a 05 	lds	r24, 0x051A
     8d4:	88 23       	and	r24, r24
     8d6:	09 f4       	brne	.+2      	; 0x8da <main+0x71c>
     8d8:	b4 cd       	rjmp	.-1176   	; 0x442 <main+0x284>
								getDataNow = 0;	
     8da:	10 92 1a 05 	sts	0x051A, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     8de:	80 91 5f 03 	lds	r24, 0x035F
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     8e8:	80 91 60 03 	lds	r24, 0x0360
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     8f2:	80 91 2f 03 	lds	r24, 0x032F
     8f6:	90 91 30 03 	lds	r25, 0x0330
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     900:	80 91 2f 03 	lds	r24, 0x032F
     904:	90 91 30 03 	lds	r25, 0x0330
     908:	89 2f       	mov	r24, r25
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     910:	80 91 61 03 	lds	r24, 0x0361
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     91a:	80 91 62 03 	lds	r24, 0x0362
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     924:	80 91 33 03 	lds	r24, 0x0333
     928:	90 91 34 03 	lds	r25, 0x0334
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     932:	80 91 33 03 	lds	r24, 0x0333
     936:	90 91 34 03 	lds	r25, 0x0334
     93a:	89 2f       	mov	r24, r25
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     942:	80 91 63 03 	lds	r24, 0x0363
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     94c:	80 91 64 03 	lds	r24, 0x0364
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     956:	80 91 37 03 	lds	r24, 0x0337
     95a:	90 91 38 03 	lds	r25, 0x0338
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     964:	80 91 37 03 	lds	r24, 0x0337
     968:	90 91 38 03 	lds	r25, 0x0338
     96c:	89 2f       	mov	r24, r25
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     974:	80 91 65 03 	lds	r24, 0x0365
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     97e:	80 91 66 03 	lds	r24, 0x0366
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     988:	80 91 3b 03 	lds	r24, 0x033B
     98c:	90 91 3c 03 	lds	r25, 0x033C
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     996:	80 91 3b 03 	lds	r24, 0x033B
     99a:	90 91 3c 03 	lds	r25, 0x033C
     99e:	89 2f       	mov	r24, r25
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     9a6:	80 91 67 03 	lds	r24, 0x0367
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     9b0:	80 91 68 03 	lds	r24, 0x0368
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     9ba:	80 91 3f 03 	lds	r24, 0x033F
     9be:	90 91 40 03 	lds	r25, 0x0340
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     9c8:	80 91 3f 03 	lds	r24, 0x033F
     9cc:	90 91 40 03 	lds	r25, 0x0340
     9d0:	89 2f       	mov	r24, r25
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     9d8:	80 91 69 03 	lds	r24, 0x0369
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     9e2:	80 91 6a 03 	lds	r24, 0x036A
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     9ec:	80 91 43 03 	lds	r24, 0x0343
     9f0:	90 91 44 03 	lds	r25, 0x0344
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     9fa:	80 91 43 03 	lds	r24, 0x0343
     9fe:	90 91 44 03 	lds	r25, 0x0344
     a02:	89 2f       	mov	r24, r25
     a04:	61 e0       	ldi	r22, 0x01	; 1
     a06:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     a0a:	80 91 6b 03 	lds	r24, 0x036B
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     a14:	80 91 6c 03 	lds	r24, 0x036C
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     a1e:	80 91 47 03 	lds	r24, 0x0347
     a22:	90 91 48 03 	lds	r25, 0x0348
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     a2c:	80 91 47 03 	lds	r24, 0x0347
     a30:	90 91 48 03 	lds	r25, 0x0348
     a34:	89 2f       	mov	r24, r25
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     a3c:	80 91 6d 03 	lds	r24, 0x036D
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     a46:	80 91 6e 03 	lds	r24, 0x036E
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     a50:	80 91 4b 03 	lds	r24, 0x034B
     a54:	90 91 4c 03 	lds	r25, 0x034C
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     a5e:	80 91 4b 03 	lds	r24, 0x034B
     a62:	90 91 4c 03 	lds	r25, 0x034C
     a66:	89 2f       	mov	r24, r25
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     a6e:	80 91 6f 03 	lds	r24, 0x036F
     a72:	61 e0       	ldi	r22, 0x01	; 1
     a74:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     a78:	80 91 70 03 	lds	r24, 0x0370
     a7c:	61 e0       	ldi	r22, 0x01	; 1
     a7e:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     a82:	80 91 4f 03 	lds	r24, 0x034F
     a86:	90 91 50 03 	lds	r25, 0x0350
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     a90:	80 91 4f 03 	lds	r24, 0x034F
     a94:	90 91 50 03 	lds	r25, 0x0350
     a98:	89 2f       	mov	r24, r25
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     aa0:	80 91 71 03 	lds	r24, 0x0371
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     aaa:	80 91 72 03 	lds	r24, 0x0372
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ab4:	80 91 53 03 	lds	r24, 0x0353
     ab8:	90 91 54 03 	lds	r25, 0x0354
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ac2:	80 91 53 03 	lds	r24, 0x0353
     ac6:	90 91 54 03 	lds	r25, 0x0354
     aca:	89 2f       	mov	r24, r25
     acc:	61 e0       	ldi	r22, 0x01	; 1
     ace:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ad2:	80 91 73 03 	lds	r24, 0x0373
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     adc:	80 91 74 03 	lds	r24, 0x0374
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ae6:	80 91 57 03 	lds	r24, 0x0357
     aea:	90 91 58 03 	lds	r25, 0x0358
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     af4:	80 91 57 03 	lds	r24, 0x0357
     af8:	90 91 58 03 	lds	r25, 0x0358
     afc:	89 2f       	mov	r24, r25
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b04:	80 91 75 03 	lds	r24, 0x0375
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     b0e:	80 91 76 03 	lds	r24, 0x0376
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     b18:	80 91 5b 03 	lds	r24, 0x035B
     b1c:	90 91 5c 03 	lds	r25, 0x035C
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     b26:	80 91 5b 03 	lds	r24, 0x035B
     b2a:	90 91 5c 03 	lds	r25, 0x035C
     b2e:	89 2f       	mov	r24, r25
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     b36:	80 91 20 05 	lds	r24, 0x0520
     b3a:	61 e0       	ldi	r22, 0x01	; 1
     b3c:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
								usart0Transmit(accX>>8,1);
     b40:	80 91 21 05 	lds	r24, 0x0521
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     b4a:	80 91 22 05 	lds	r24, 0x0522
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
								usart0Transmit(accY>>8,1);
     b54:	80 91 23 05 	lds	r24, 0x0523
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     b5e:	80 91 24 05 	lds	r24, 0x0524
     b62:	61 e0       	ldi	r22, 0x01	; 1
     b64:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     b68:	80 91 25 05 	lds	r24, 0x0525
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
								usart0Transmit(irCommand,1);
     b72:	80 91 1b 05 	lds	r24, 0x051B
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
								usart0Transmit(currentSelector,1);
     b7c:	80 91 3f 05 	lds	r24, 0x053F
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     b86:	80 91 03 01 	lds	r24, 0x0103
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	80 72       	andi	r24, 0x20	; 32
     b8e:	90 70       	andi	r25, 0x00	; 0
     b90:	95 95       	asr	r25
     b92:	87 95       	ror	r24
     b94:	95 95       	asr	r25
     b96:	87 95       	ror	r24
     b98:	95 95       	asr	r25
     b9a:	87 95       	ror	r24
     b9c:	95 95       	asr	r25
     b9e:	87 95       	ror	r24
     ba0:	95 95       	asr	r25
     ba2:	87 95       	ror	r24
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
								usart0Transmit(rfFlags,1);
     baa:	80 91 0d 04 	lds	r24, 0x040D
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <usart0Transmit>
     bb4:	90 91 3f 05 	lds	r25, 0x053F
     bb8:	c0 cb       	rjmp	.-2176   	; 0x33a <main+0x17c>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <main+0xa02>
     bbe:	95 cd       	rjmp	.-1238   	; 0x6ea <main+0x52c>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	80 95       	com	r24
     bc4:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
     bc8:	10 92 10 04 	sts	0x0410, r1
						break;
     bcc:	8e cd       	rjmp	.-1252   	; 0x6ea <main+0x52c>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <main+0xa16>
     bd2:	9a cc       	rjmp	.-1740   	; 0x508 <main+0x34a>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
     bd4:	0e 94 95 23 	call	0x472a	; 0x472a <turnOffGreenLeds>
							GREEN_LED2_ON;
     bd8:	80 91 0b 01 	lds	r24, 0x010B
     bdc:	8b 7f       	andi	r24, 0xFB	; 251
     bde:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
     be2:	10 92 45 05 	sts	0x0545, r1
							enableObstacleAvoidance();
     be6:	0e 94 71 22 	call	0x44e2	; 0x44e2 <enableObstacleAvoidance>
							setRightSpeed(20);
     bea:	84 e1       	ldi	r24, 0x14	; 20
     bec:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
							setLeftSpeed(20);
     bf0:	84 e1       	ldi	r24, 0x14	; 20
     bf2:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
     bf6:	80 91 71 03 	lds	r24, 0x0371
     bfa:	90 91 72 03 	lds	r25, 0x0372
     bfe:	a1 e0       	ldi	r26, 0x01	; 1
     c00:	80 39       	cpi	r24, 0x90	; 144
     c02:	9a 07       	cpc	r25, r26
     c04:	0c f4       	brge	.+2      	; 0xc08 <main+0xa4a>
     c06:	38 c1       	rjmp	.+624    	; 0xe78 <main+0xcba>
     c08:	80 91 73 03 	lds	r24, 0x0373
     c0c:	90 91 74 03 	lds	r25, 0x0374
     c10:	b1 e0       	ldi	r27, 0x01	; 1
     c12:	80 39       	cpi	r24, 0x90	; 144
     c14:	9b 07       	cpc	r25, r27
     c16:	0c f4       	brge	.+2      	; 0xc1a <main+0xa5c>
     c18:	2f c1       	rjmp	.+606    	; 0xe78 <main+0xcba>
     c1a:	80 91 6f 03 	lds	r24, 0x036F
     c1e:	90 91 70 03 	lds	r25, 0x0370
     c22:	e1 e0       	ldi	r30, 0x01	; 1
     c24:	80 39       	cpi	r24, 0x90	; 144
     c26:	9e 07       	cpc	r25, r30
     c28:	0c f4       	brge	.+2      	; 0xc2c <main+0xa6e>
     c2a:	26 c1       	rjmp	.+588    	; 0xe78 <main+0xcba>
     c2c:	80 91 75 03 	lds	r24, 0x0375
     c30:	90 91 76 03 	lds	r25, 0x0376
     c34:	f1 e0       	ldi	r31, 0x01	; 1
     c36:	80 39       	cpi	r24, 0x90	; 144
     c38:	9f 07       	cpc	r25, r31
     c3a:	0c f4       	brge	.+2      	; 0xc3e <main+0xa80>
     c3c:	1d c1       	rjmp	.+570    	; 0xe78 <main+0xcba>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
     c3e:	10 92 44 05 	sts	0x0544, r1
     c42:	62 cc       	rjmp	.-1852   	; 0x508 <main+0x34a>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	80 95       	com	r24
     c48:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
     c4c:	20 92 10 04 	sts	0x0410, r2
						break;
     c50:	4c cd       	rjmp	.-1384   	; 0x6ea <main+0x52c>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
     c52:	e0 36       	cpi	r30, 0x60	; 96
     c54:	f1 05       	cpc	r31, r1
     c56:	08 f0       	brcs	.+2      	; 0xc5a <main+0xa9c>
     c58:	84 cb       	rjmp	.-2296   	; 0x362 <main+0x1a4>
					if(pwm_red!=255 && pwm_green!=255) {
     c5a:	80 91 0c 02 	lds	r24, 0x020C
     c5e:	8f 3f       	cpi	r24, 0xFF	; 255
     c60:	09 f4       	brne	.+2      	; 0xc64 <main+0xaa6>
     c62:	7f cb       	rjmp	.-2306   	; 0x362 <main+0x1a4>
     c64:	80 91 0d 02 	lds	r24, 0x020D
     c68:	8f 3f       	cpi	r24, 0xFF	; 255
     c6a:	09 f4       	brne	.+2      	; 0xc6e <main+0xab0>
     c6c:	7a cb       	rjmp	.-2316   	; 0x362 <main+0x1a4>
						pwm_blue = 255;
     c6e:	d0 92 0e 02 	sts	0x020E, r13
     c72:	77 cb       	rjmp	.-2322   	; 0x362 <main+0x1a4>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
     c74:	0e 94 95 23 	call	0x472a	; 0x472a <turnOffGreenLeds>
							GREEN_LED6_ON;
     c78:	80 91 0b 01 	lds	r24, 0x010B
     c7c:	8f 7b       	andi	r24, 0xBF	; 191
     c7e:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
     c82:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     c86:	9b 01       	movw	r18, r22
     c88:	ac 01       	movw	r20, r24
     c8a:	60 93 4b 05 	sts	0x054B, r22
     c8e:	70 93 4c 05 	sts	0x054C, r23
     c92:	80 93 4d 05 	sts	0x054D, r24
     c96:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
     c9a:	80 91 47 05 	lds	r24, 0x0547
     c9e:	90 91 48 05 	lds	r25, 0x0548
     ca2:	a0 91 49 05 	lds	r26, 0x0549
     ca6:	b0 91 4a 05 	lds	r27, 0x054A
     caa:	28 1b       	sub	r18, r24
     cac:	39 0b       	sbc	r19, r25
     cae:	4a 0b       	sbc	r20, r26
     cb0:	5b 0b       	sbc	r21, r27
     cb2:	2d 3c       	cpi	r18, 0xCD	; 205
     cb4:	96 e6       	ldi	r25, 0x66	; 102
     cb6:	39 07       	cpc	r19, r25
     cb8:	94 e0       	ldi	r25, 0x04	; 4
     cba:	49 07       	cpc	r20, r25
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	59 07       	cpc	r21, r25
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <main+0xb06>
     cc2:	fa c0       	rjmp	.+500    	; 0xeb8 <main+0xcfa>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
     cc4:	80 91 c3 03 	lds	r24, 0x03C3
     cc8:	90 91 c4 03 	lds	r25, 0x03C4
     ccc:	a3 e0       	ldi	r26, 0x03	; 3
     cce:	8a 37       	cpi	r24, 0x7A	; 122
     cd0:	9a 07       	cpc	r25, r26
     cd2:	08 f4       	brcc	.+2      	; 0xcd6 <main+0xb18>
     cd4:	fb c0       	rjmp	.+502    	; 0xecc <main+0xd0e>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-20);
     cd6:	8c ee       	ldi	r24, 0xEC	; 236
     cd8:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
									setLeftSpeed(-20);
     cdc:	8c ee       	ldi	r24, 0xEC	; 236
     cde:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
     ce2:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     ce6:	60 93 47 05 	sts	0x0547, r22
     cea:	70 93 48 05 	sts	0x0548, r23
     cee:	80 93 49 05 	sts	0x0549, r24
     cf2:	90 93 4a 05 	sts	0x054A, r25
									demoState = 4;
     cf6:	b4 e0       	ldi	r27, 0x04	; 4
     cf8:	b0 93 43 05 	sts	0x0543, r27
									break;
     cfc:	05 cc       	rjmp	.-2038   	; 0x508 <main+0x34a>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
     cfe:	0e 94 95 23 	call	0x472a	; 0x472a <turnOffGreenLeds>
							GREEN_LED6_ON;
     d02:	80 91 0b 01 	lds	r24, 0x010B
     d06:	8f 7b       	andi	r24, 0xBF	; 191
     d08:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     d0c:	80 91 0b 01 	lds	r24, 0x010B
     d10:	8f 77       	andi	r24, 0x7F	; 127
     d12:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     d16:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     d1a:	9b 01       	movw	r18, r22
     d1c:	ac 01       	movw	r20, r24
     d1e:	60 93 4b 05 	sts	0x054B, r22
     d22:	70 93 4c 05 	sts	0x054C, r23
     d26:	80 93 4d 05 	sts	0x054D, r24
     d2a:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
     d2e:	80 91 47 05 	lds	r24, 0x0547
     d32:	90 91 48 05 	lds	r25, 0x0548
     d36:	a0 91 49 05 	lds	r26, 0x0549
     d3a:	b0 91 4a 05 	lds	r27, 0x054A
     d3e:	28 1b       	sub	r18, r24
     d40:	39 0b       	sbc	r19, r25
     d42:	4a 0b       	sbc	r20, r26
     d44:	5b 0b       	sbc	r21, r27
     d46:	2f 38       	cpi	r18, 0x8F	; 143
     d48:	95 e2       	ldi	r25, 0x25	; 37
     d4a:	39 07       	cpc	r19, r25
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	49 07       	cpc	r20, r25
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	59 07       	cpc	r21, r25
     d54:	08 f4       	brcc	.+2      	; 0xd58 <main+0xb9a>
     d56:	d8 cb       	rjmp	.-2128   	; 0x508 <main+0x34a>
								setRightSpeed(20);
     d58:	84 e1       	ldi	r24, 0x14	; 20
     d5a:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
								setLeftSpeed(-20);								
     d5e:	8c ee       	ldi	r24, 0xEC	; 236
     d60:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
     d64:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     d68:	60 93 47 05 	sts	0x0547, r22
     d6c:	70 93 48 05 	sts	0x0548, r23
     d70:	80 93 49 05 	sts	0x0549, r24
     d74:	90 93 4a 05 	sts	0x054A, r25
								demoState = 5;							
     d78:	a5 e0       	ldi	r26, 0x05	; 5
     d7a:	a0 93 43 05 	sts	0x0543, r26
     d7e:	c4 cb       	rjmp	.-2168   	; 0x508 <main+0x34a>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
     d80:	0e 94 95 23 	call	0x472a	; 0x472a <turnOffGreenLeds>
							GREEN_LED4_ON;
     d84:	80 91 0b 01 	lds	r24, 0x010B
     d88:	8f 7e       	andi	r24, 0xEF	; 239
     d8a:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
     d8e:	0e 94 75 22 	call	0x44ea	; 0x44ea <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
     d92:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     d96:	9b 01       	movw	r18, r22
     d98:	ac 01       	movw	r20, r24
     d9a:	60 93 4b 05 	sts	0x054B, r22
     d9e:	70 93 4c 05 	sts	0x054C, r23
     da2:	80 93 4d 05 	sts	0x054D, r24
     da6:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
     daa:	80 91 47 05 	lds	r24, 0x0547
     dae:	90 91 48 05 	lds	r25, 0x0548
     db2:	a0 91 49 05 	lds	r26, 0x0549
     db6:	b0 91 4a 05 	lds	r27, 0x054A
     dba:	28 1b       	sub	r18, r24
     dbc:	39 0b       	sbc	r19, r25
     dbe:	4a 0b       	sbc	r20, r26
     dc0:	5b 0b       	sbc	r21, r27
     dc2:	23 33       	cpi	r18, 0x33	; 51
     dc4:	9f ee       	ldi	r25, 0xEF	; 239
     dc6:	39 07       	cpc	r19, r25
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	49 07       	cpc	r20, r25
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	59 07       	cpc	r21, r25
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <main+0xc16>
     dd2:	b7 c0       	rjmp	.+366    	; 0xf42 <main+0xd84>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
     dd4:	80 91 03 01 	lds	r24, 0x0103
     dd8:	84 ff       	sbrs	r24, 4
     dda:	98 c0       	rjmp	.+304    	; 0xf0c <main+0xd4e>
								outOfLine = 0;
     ddc:	10 92 45 05 	sts	0x0545, r1
								chargeContact++;
     de0:	80 91 46 05 	lds	r24, 0x0546
     de4:	8f 5f       	subi	r24, 0xFF	; 255
     de6:	80 93 46 05 	sts	0x0546, r24
								if(chargeContact > 20) {
     dea:	85 31       	cpi	r24, 0x15	; 21
     dec:	08 f0       	brcs	.+2      	; 0xdf0 <main+0xc32>
     dee:	d6 c0       	rjmp	.+428    	; 0xf9c <main+0xdde>
     df0:	20 91 71 03 	lds	r18, 0x0371
     df4:	30 91 72 03 	lds	r19, 0x0372
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
     df8:	40 91 6f 03 	lds	r20, 0x036F
     dfc:	50 91 70 03 	lds	r21, 0x0370
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	42 3c       	cpi	r20, 0xC2	; 194
     e04:	56 07       	cpc	r21, r22
     e06:	ac f4       	brge	.+42     	; 0xe32 <main+0xc74>
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	23 3c       	cpi	r18, 0xC3	; 195
     e0c:	38 07       	cpc	r19, r24
     e0e:	8c f0       	brlt	.+34     	; 0xe32 <main+0xc74>
     e10:	80 91 73 03 	lds	r24, 0x0373
     e14:	90 91 74 03 	lds	r25, 0x0374
     e18:	a1 e0       	ldi	r26, 0x01	; 1
     e1a:	83 3c       	cpi	r24, 0xC3	; 195
     e1c:	9a 07       	cpc	r25, r26
     e1e:	4c f0       	brlt	.+18     	; 0xe32 <main+0xc74>
     e20:	80 91 75 03 	lds	r24, 0x0375
     e24:	90 91 76 03 	lds	r25, 0x0376
     e28:	b1 e0       	ldi	r27, 0x01	; 1
     e2a:	83 3c       	cpi	r24, 0xC3	; 195
     e2c:	9b 07       	cpc	r25, r27
     e2e:	0c f0       	brlt	.+2      	; 0xe32 <main+0xc74>
     e30:	da c0       	rjmp	.+436    	; 0xfe6 <main+0xe28>
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
     e32:	80 91 75 03 	lds	r24, 0x0375
     e36:	90 91 76 03 	lds	r25, 0x0376
     e3a:	e1 e0       	ldi	r30, 0x01	; 1
     e3c:	82 3c       	cpi	r24, 0xC2	; 194
     e3e:	9e 07       	cpc	r25, r30
     e40:	0c f0       	brlt	.+2      	; 0xe44 <main+0xc86>
     e42:	4f c0       	rjmp	.+158    	; 0xee2 <main+0xd24>
     e44:	f1 e0       	ldi	r31, 0x01	; 1
     e46:	43 3c       	cpi	r20, 0xC3	; 195
     e48:	5f 07       	cpc	r21, r31
     e4a:	0c f4       	brge	.+2      	; 0xe4e <main+0xc90>
     e4c:	4a c0       	rjmp	.+148    	; 0xee2 <main+0xd24>
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	23 3c       	cpi	r18, 0xC3	; 195
     e52:	34 07       	cpc	r19, r20
     e54:	0c f4       	brge	.+2      	; 0xe58 <main+0xc9a>
     e56:	4a c0       	rjmp	.+148    	; 0xeec <main+0xd2e>
     e58:	80 91 73 03 	lds	r24, 0x0373
     e5c:	90 91 74 03 	lds	r25, 0x0374
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	83 3c       	cpi	r24, 0xC3	; 195
     e64:	96 07       	cpc	r25, r22
     e66:	0c f0       	brlt	.+2      	; 0xe6a <main+0xcac>
     e68:	b7 c0       	rjmp	.+366    	; 0xfd8 <main+0xe1a>
								setLeftSpeed(20);
								setRightSpeed(-15);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(20);
     e6a:	84 e1       	ldi	r24, 0x14	; 20
     e6c:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
								setRightSpeed(-10);
     e70:	86 ef       	ldi	r24, 0xF6	; 246
     e72:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
     e76:	48 cb       	rjmp	.-2416   	; 0x508 <main+0x34a>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(20);
							setLeftSpeed(20);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
     e78:	80 91 44 05 	lds	r24, 0x0544
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	80 93 44 05 	sts	0x0544, r24
								if(lineFound > 10) {
     e82:	8b 30       	cpi	r24, 0x0B	; 11
     e84:	08 f4       	brcc	.+2      	; 0xe88 <main+0xcca>
     e86:	40 cb       	rjmp	.-2432   	; 0x508 <main+0x34a>
									outOfLine = 0;
     e88:	10 92 45 05 	sts	0x0545, r1
									chargeContact = 0;
     e8c:	10 92 46 05 	sts	0x0546, r1
									demoStartTime = getTime100MicroSec();
     e90:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     e94:	60 93 47 05 	sts	0x0547, r22
     e98:	70 93 48 05 	sts	0x0548, r23
     e9c:	80 93 49 05 	sts	0x0549, r24
     ea0:	90 93 4a 05 	sts	0x054A, r25
									demoState = 2;
     ea4:	20 92 43 05 	sts	0x0543, r2
									break;
     ea8:	2f cb       	rjmp	.-2466   	; 0x508 <main+0x34a>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
     eaa:	80 36       	cpi	r24, 0x60	; 96
     eac:	91 05       	cpc	r25, r1
     eae:	08 f0       	brcs	.+2      	; 0xeb2 <main+0xcf4>
     eb0:	80 cc       	rjmp	.-1792   	; 0x7b2 <main+0x5f4>
					pwm_blue = 255;
     eb2:	d0 92 0e 02 	sts	0x020E, r13
     eb6:	7d cc       	rjmp	.-1798   	; 0x7b2 <main+0x5f4>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
     eb8:	80 91 03 01 	lds	r24, 0x0103
     ebc:	84 fd       	sbrc	r24, 4
     ebe:	24 cb       	rjmp	.-2488   	; 0x508 <main+0x34a>
								chargeContact = 0;
     ec0:	10 92 46 05 	sts	0x0546, r1
								outOfLine = 0;
     ec4:	10 92 45 05 	sts	0x0545, r1
								demoState = 2;
     ec8:	20 92 43 05 	sts	0x0543, r2
								demoStartTime = getTime100MicroSec();
     ecc:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     ed0:	60 93 47 05 	sts	0x0547, r22
     ed4:	70 93 48 05 	sts	0x0548, r23
     ed8:	80 93 49 05 	sts	0x0549, r24
     edc:	90 93 4a 05 	sts	0x054A, r25
								break;						
     ee0:	13 cb       	rjmp	.-2522   	; 0x508 <main+0x34a>
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(20);
								setRightSpeed(-15);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	23 3c       	cpi	r18, 0xC3	; 195
     ee6:	38 07       	cpc	r19, r24
     ee8:	0c f0       	brlt	.+2      	; 0xeec <main+0xd2e>
     eea:	bf cf       	rjmp	.-130    	; 0xe6a <main+0xcac>
								setRightSpeed(-10);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
     eec:	80 91 73 03 	lds	r24, 0x0373
     ef0:	90 91 74 03 	lds	r25, 0x0374
     ef4:	a1 e0       	ldi	r26, 0x01	; 1
     ef6:	83 3c       	cpi	r24, 0xC3	; 195
     ef8:	9a 07       	cpc	r25, r26
     efa:	0c f4       	brge	.+2      	; 0xefe <main+0xd40>
     efc:	48 c0       	rjmp	.+144    	; 0xf8e <main+0xdd0>
								setLeftSpeed(-10);
     efe:	86 ef       	ldi	r24, 0xF6	; 246
     f00:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
								setRightSpeed(20);
     f04:	84 e1       	ldi	r24, 0x14	; 20
     f06:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
     f0a:	fe ca       	rjmp	.-2564   	; 0x508 <main+0x34a>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
     f0c:	10 92 46 05 	sts	0x0546, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
     f10:	20 91 71 03 	lds	r18, 0x0371
     f14:	30 91 72 03 	lds	r19, 0x0372
     f18:	e1 e0       	ldi	r30, 0x01	; 1
     f1a:	23 3c       	cpi	r18, 0xC3	; 195
     f1c:	3e 07       	cpc	r19, r30
     f1e:	2c f1       	brlt	.+74     	; 0xf6a <main+0xdac>
     f20:	80 91 73 03 	lds	r24, 0x0373
     f24:	90 91 74 03 	lds	r25, 0x0374
     f28:	f1 e0       	ldi	r31, 0x01	; 1
     f2a:	83 3c       	cpi	r24, 0xC3	; 195
     f2c:	9f 07       	cpc	r25, r31
     f2e:	ec f0       	brlt	.+58     	; 0xf6a <main+0xdac>
									outOfLine++;
     f30:	80 91 45 05 	lds	r24, 0x0545
     f34:	8f 5f       	subi	r24, 0xFF	; 255
     f36:	80 93 45 05 	sts	0x0545, r24
									if(outOfLine > 250) {
     f3a:	8b 3f       	cpi	r24, 0xFB	; 251
     f3c:	08 f4       	brcc	.+2      	; 0xf40 <main+0xd82>
     f3e:	5c cf       	rjmp	.-328    	; 0xdf8 <main+0xc3a>
     f40:	e1 ca       	rjmp	.-2622   	; 0x504 <main+0x346>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
     f42:	8c ee       	ldi	r24, 0xEC	; 236
     f44:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
								setLeftSpeed(-20);
     f48:	8c ee       	ldi	r24, 0xEC	; 236
     f4a:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
     f4e:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     f52:	60 93 47 05 	sts	0x0547, r22
     f56:	70 93 48 05 	sts	0x0548, r23
     f5a:	80 93 49 05 	sts	0x0549, r24
     f5e:	90 93 4a 05 	sts	0x054A, r25
								demoState = 4;
     f62:	a4 e0       	ldi	r26, 0x04	; 4
     f64:	a0 93 43 05 	sts	0x0543, r26
								break;
     f68:	cf ca       	rjmp	.-2658   	; 0x508 <main+0x34a>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
     f6a:	10 92 45 05 	sts	0x0545, r1
     f6e:	44 cf       	rjmp	.-376    	; 0xdf8 <main+0xc3a>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
     f70:	91 30       	cpi	r25, 0x01	; 1
     f72:	41 f1       	breq	.+80     	; 0xfc4 <main+0xe06>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
     f74:	92 30       	cpi	r25, 0x02	; 2
     f76:	09 f0       	breq	.+2      	; 0xf7a <main+0xdbc>
     f78:	f4 c9       	rjmp	.-3096   	; 0x362 <main+0x1a4>
						pwm_red = 255;
     f7a:	d0 92 0c 02 	sts	0x020C, r13
						pwm_green = 255;
     f7e:	d0 92 0d 02 	sts	0x020D, r13
						pwm_blue = 254;
     f82:	2e ef       	ldi	r18, 0xFE	; 254
     f84:	20 93 0e 02 	sts	0x020E, r18
						rgbState = 0;
     f88:	10 92 10 04 	sts	0x0410, r1
     f8c:	ea c9       	rjmp	.-3116   	; 0x362 <main+0x1a4>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(20);
     f8e:	84 e1       	ldi	r24, 0x14	; 20
     f90:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
								setLeftSpeed(20);
     f94:	84 e1       	ldi	r24, 0x14	; 20
     f96:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
     f9a:	b6 ca       	rjmp	.-2708   	; 0x508 <main+0x34a>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
									setRightSpeed(0);
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
									demoStartTime = getTime100MicroSec();
     fa8:	0e 94 c0 18 	call	0x3180	; 0x3180 <getTime100MicroSec>
     fac:	60 93 47 05 	sts	0x0547, r22
     fb0:	70 93 48 05 	sts	0x0548, r23
     fb4:	80 93 49 05 	sts	0x0549, r24
     fb8:	90 93 4a 05 	sts	0x054A, r25
									demoState = 3;
     fbc:	b3 e0       	ldi	r27, 0x03	; 3
     fbe:	b0 93 43 05 	sts	0x0543, r27
									break;
     fc2:	a2 ca       	rjmp	.-2748   	; 0x508 <main+0x34a>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
     fc4:	d0 92 0c 02 	sts	0x020C, r13
						pwm_green = 254;
     fc8:	fe ef       	ldi	r31, 0xFE	; 254
     fca:	f0 93 0d 02 	sts	0x020D, r31
						pwm_blue = 255;
     fce:	d0 92 0e 02 	sts	0x020E, r13
						rgbState = 2;
     fd2:	20 92 10 04 	sts	0x0410, r2
     fd6:	c5 c9       	rjmp	.-3190   	; 0x362 <main+0x1a4>
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(20);
     fd8:	84 e1       	ldi	r24, 0x14	; 20
     fda:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
								setRightSpeed(-15);
     fde:	81 ef       	ldi	r24, 0xF1	; 241
     fe0:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
     fe4:	91 ca       	rjmp	.-2782   	; 0x508 <main+0x34a>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-15);
     fe6:	81 ef       	ldi	r24, 0xF1	; 241
     fe8:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <setLeftSpeed>
								setRightSpeed(20);
     fec:	84 e1       	ldi	r24, 0x14	; 20
     fee:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <setRightSpeed>
     ff2:	8a ca       	rjmp	.-2796   	; 0x508 <main+0x34a>

00000ff4 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
     ff8:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
     ffa:	0d b4       	in	r0, 0x2d	; 45
     ffc:	07 fc       	sbrc	r0, 7
     ffe:	0a c0       	rjmp	.+20     	; 0x1014 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1000:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1002:	37 e2       	ldi	r19, 0x27	; 39
    1004:	80 31       	cpi	r24, 0x10	; 16
    1006:	93 07       	cpc	r25, r19
    1008:	c0 f3       	brcs	.-16     	; 0xffa <SPI_WAIT+0x6>
			spiCommError = 1;
    100a:	20 93 0e 04 	sts	0x040E, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    100e:	0d b4       	in	r0, 0x2d	; 45
    1010:	07 fe       	sbrs	r0, 7
    1012:	f6 cf       	rjmp	.-20     	; 0x1000 <SPI_WAIT+0xc>
			return;
		}
	}
}
    1014:	08 95       	ret

00001016 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1016:	84 b1       	in	r24, 0x04	; 4
    1018:	80 7f       	andi	r24, 0xF0	; 240
    101a:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    101c:	84 b1       	in	r24, 0x04	; 4
    101e:	87 60       	ori	r24, 0x07	; 7
    1020:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1022:	80 e5       	ldi	r24, 0x50	; 80
    1024:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1026:	8d b5       	in	r24, 0x2d	; 45
    1028:	81 60       	ori	r24, 0x01	; 1
    102a:	8d bd       	out	0x2d, r24	; 45

}
    102c:	08 95       	ret

0000102e <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    102e:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1030:	1d bc       	out	0x2d, r1	; 45
}
    1032:	08 95       	ret

00001034 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1034:	44 23       	and	r20, r20
    1036:	09 f1       	breq	.+66     	; 0x107a <SPI_ReadWrite_Block+0x46>
    1038:	a6 2f       	mov	r26, r22
    103a:	b7 2f       	mov	r27, r23
    103c:	e8 2f       	mov	r30, r24
    103e:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1040:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1042:	21 91       	ld	r18, Z+
    1044:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1046:	21 e0       	ldi	r18, 0x01	; 1
    1048:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    104a:	0d b4       	in	r0, 0x2d	; 45
    104c:	07 fc       	sbrc	r0, 7
    104e:	0b c0       	rjmp	.+22     	; 0x1066 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1050:	2f 5f       	subi	r18, 0xFF	; 255
    1052:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1054:	57 e2       	ldi	r21, 0x27	; 39
    1056:	20 31       	cpi	r18, 0x10	; 16
    1058:	35 07       	cpc	r19, r21
    105a:	b8 f3       	brcs	.-18     	; 0x104a <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    105c:	90 93 0e 04 	sts	0x040E, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1060:	0d b4       	in	r0, 0x2d	; 45
    1062:	07 fe       	sbrs	r0, 7
    1064:	f5 cf       	rjmp	.-22     	; 0x1050 <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1066:	20 91 0e 04 	lds	r18, 0x040E
    106a:	22 23       	and	r18, r18
    106c:	31 f4       	brne	.+12     	; 0x107a <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    106e:	2e b5       	in	r18, 0x2e	; 46
    1070:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1072:	2e 2f       	mov	r18, r30
    1074:	28 1b       	sub	r18, r24
    1076:	24 17       	cp	r18, r20
    1078:	20 f3       	brcs	.-56     	; 0x1042 <SPI_ReadWrite_Block+0xe>
    107a:	08 95       	ret

0000107c <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    107c:	66 23       	and	r22, r22
    107e:	e9 f0       	breq	.+58     	; 0x10ba <SPI_Write_Block+0x3e>
    1080:	e8 2f       	mov	r30, r24
    1082:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1084:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1086:	21 91       	ld	r18, Z+
    1088:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    108a:	21 e0       	ldi	r18, 0x01	; 1
    108c:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    108e:	0d b4       	in	r0, 0x2d	; 45
    1090:	07 fc       	sbrc	r0, 7
    1092:	0b c0       	rjmp	.+22     	; 0x10aa <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1094:	2f 5f       	subi	r18, 0xFF	; 255
    1096:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1098:	47 e2       	ldi	r20, 0x27	; 39
    109a:	20 31       	cpi	r18, 0x10	; 16
    109c:	34 07       	cpc	r19, r20
    109e:	b8 f3       	brcs	.-18     	; 0x108e <SPI_Write_Block+0x12>
			spiCommError = 1;
    10a0:	90 93 0e 04 	sts	0x040E, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    10a4:	0d b4       	in	r0, 0x2d	; 45
    10a6:	07 fe       	sbrs	r0, 7
    10a8:	f5 cf       	rjmp	.-22     	; 0x1094 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    10aa:	20 91 0e 04 	lds	r18, 0x040E
    10ae:	22 23       	and	r18, r18
    10b0:	21 f4       	brne	.+8      	; 0x10ba <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    10b2:	2e 2f       	mov	r18, r30
    10b4:	28 1b       	sub	r18, r24
    10b6:	26 17       	cp	r18, r22
    10b8:	30 f3       	brcs	.-52     	; 0x1086 <SPI_Write_Block+0xa>
    10ba:	08 95       	ret

000010bc <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    10bc:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    10c2:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    10c4:	0d b4       	in	r0, 0x2d	; 45
    10c6:	07 fc       	sbrc	r0, 7
    10c8:	0a c0       	rjmp	.+20     	; 0x10de <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    10ca:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    10cc:	37 e2       	ldi	r19, 0x27	; 39
    10ce:	80 31       	cpi	r24, 0x10	; 16
    10d0:	93 07       	cpc	r25, r19
    10d2:	c0 f3       	brcs	.-16     	; 0x10c4 <SPI_Write_Byte+0x8>
			spiCommError = 1;
    10d4:	20 93 0e 04 	sts	0x040E, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    10d8:	0d b4       	in	r0, 0x2d	; 45
    10da:	07 fe       	sbrs	r0, 7
    10dc:	f6 cf       	rjmp	.-20     	; 0x10ca <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    10de:	8e b5       	in	r24, 0x2e	; 46
}
    10e0:	08 95       	ret

000010e2 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <mirf_config+0xa>
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    10f0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    10f2:	80 e2       	ldi	r24, 0x20	; 32
    10f4:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    10f8:	8d e0       	ldi	r24, 0x0D	; 13
    10fa:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    10fe:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1100:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1102:	83 e2       	ldi	r24, 0x23	; 35
    1104:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    110e:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    1110:	80 91 0b 04 	lds	r24, 0x040B
    1114:	90 91 0c 04 	lds	r25, 0x040C
    1118:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    111a:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    111c:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    111e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1120:	80 e3       	ldi	r24, 0x30	; 48
    1122:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1126:	8e 01       	movw	r16, r28
    1128:	0f 5f       	subi	r16, 0xFF	; 255
    112a:	1f 4f       	sbci	r17, 0xFF	; 255
    112c:	c8 01       	movw	r24, r16
    112e:	63 e0       	ldi	r22, 0x03	; 3
    1130:	0e 94 3e 08 	call	0x107c	; 0x107c <SPI_Write_Block>
    mirf_CSN_hi;
    1134:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1136:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1138:	8a e2       	ldi	r24, 0x2A	; 42
    113a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    113e:	c8 01       	movw	r24, r16
    1140:	63 e0       	ldi	r22, 0x03	; 3
    1142:	0e 94 3e 08 	call	0x107c	; 0x107c <SPI_Write_Block>
    mirf_CSN_hi;
    1146:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1148:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    114a:	81 e2       	ldi	r24, 0x21	; 33
    114c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    1156:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1158:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    115a:	82 e2       	ldi	r24, 0x22	; 34
    115c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    1166:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1168:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    116a:	84 e2       	ldi	r24, 0x24	; 36
    116c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1170:	82 e1       	ldi	r24, 0x12	; 18
    1172:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    1176:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1178:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    117a:	85 e2       	ldi	r24, 0x25	; 37
    117c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1180:	88 e2       	ldi	r24, 0x28	; 40
    1182:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    1186:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1188:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    118a:	81 e3       	ldi	r24, 0x31	; 49
    118c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1190:	8d e0       	ldi	r24, 0x0D	; 13
    1192:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    1196:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    1198:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    119a:	80 e5       	ldi	r24, 0x50	; 80
    119c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    11a0:	83 e7       	ldi	r24, 0x73	; 115
    11a2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    11a6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    11a8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    11aa:	8c e3       	ldi	r24, 0x3C	; 60
    11ac:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    11b6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    11b8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    11ba:	8d e3       	ldi	r24, 0x3D	; 61
    11bc:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    11c0:	86 e0       	ldi	r24, 0x06	; 6
    11c2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    11c6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    11c8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    11ca:	80 e2       	ldi	r24, 0x20	; 32
    11cc:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    11d0:	8f e0       	ldi	r24, 0x0F	; 15
    11d2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    11d6:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	08 95       	ret

000011e8 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    11e8:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    11ea:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    11ec:	0e 94 71 08 	call	0x10e2	; 0x10e2 <mirf_config>
}
    11f0:	08 95       	ret

000011f2 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    11f8:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    11fa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    11fc:	8a e2       	ldi	r24, 0x2A	; 42
    11fe:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1202:	ce 01       	movw	r24, r28
    1204:	65 e0       	ldi	r22, 0x05	; 5
    1206:	0e 94 3e 08 	call	0x107c	; 0x107c <SPI_Write_Block>
    mirf_CSN_hi;
    120a:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    120c:	2c 9a       	sbi	0x05, 4	; 5
}
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    121a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    121c:	80 e3       	ldi	r24, 0x30	; 48
    121e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1222:	ce 01       	movw	r24, r28
    1224:	65 e0       	ldi	r22, 0x05	; 5
    1226:	0e 94 3e 08 	call	0x107c	; 0x107c <SPI_Write_Block>
    mirf_CSN_hi;
    122a:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	08 95       	ret

00001232 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1232:	80 91 52 05 	lds	r24, 0x0552
    1236:	88 23       	and	r24, r24
    1238:	11 f0       	breq	.+4      	; 0x123e <mirf_data_ready+0xc>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    123c:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    123e:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1240:	8f ef       	ldi	r24, 0xFF	; 255
    1242:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1246:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1248:	80 74       	andi	r24, 0x40	; 64
    124a:	08 95       	ret

0000124c <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	0f 92       	push	r0
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1256:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1258:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    125a:	87 e1       	ldi	r24, 0x17	; 23
    125c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1260:	be 01       	movw	r22, r28
    1262:	6f 5f       	subi	r22, 0xFF	; 255
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	cb 01       	movw	r24, r22
    1268:	41 e0       	ldi	r20, 0x01	; 1
    126a:	0e 94 1a 08 	call	0x1034	; 0x1034 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    126e:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1270:	89 81       	ldd	r24, Y+1	; 0x01
}
    1272:	81 70       	andi	r24, 0x01	; 1
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    127c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    127e:	82 ee       	ldi	r24, 0xE2	; 226
    1280:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    1284:	28 9a       	sbi	0x05, 0	; 5

}
    1286:	08 95       	ret

00001288 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    128e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1290:	81 e6       	ldi	r24, 0x61	; 97
    1292:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1296:	ce 01       	movw	r24, r28
    1298:	be 01       	movw	r22, r28
    129a:	4d e0       	ldi	r20, 0x0D	; 13
    129c:	0e 94 1a 08 	call	0x1034	; 0x1034 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    12a0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    12a2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    12a4:	87 e2       	ldi	r24, 0x27	; 39
    12a6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    12aa:	80 e4       	ldi	r24, 0x40	; 64
    12ac:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    12b0:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	0f 92       	push	r0
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    12c2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    12c4:	8f 71       	andi	r24, 0x1F	; 31
    12c6:	80 62       	ori	r24, 0x20	; 32
    12c8:	69 83       	std	Y+1, r22	; 0x01
    12ca:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    12ce:	69 81       	ldd	r22, Y+1	; 0x01
    12d0:	86 2f       	mov	r24, r22
    12d2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    12d6:	28 9a       	sbi	0x05, 0	; 5
}
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	0f 92       	push	r0
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    12f0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    12f2:	8f 71       	andi	r24, 0x1F	; 31
    12f4:	49 83       	std	Y+1, r20	; 0x01
    12f6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    12fa:	c8 01       	movw	r24, r16
    12fc:	b8 01       	movw	r22, r16
    12fe:	49 81       	ldd	r20, Y+1	; 0x01
    1300:	0e 94 1a 08 	call	0x1034	; 0x1034 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1304:	28 9a       	sbi	0x05, 0	; 5
}
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	08 95       	ret

00001312 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	0f 92       	push	r0
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1322:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1324:	8f 71       	andi	r24, 0x1F	; 31
    1326:	80 62       	ori	r24, 0x20	; 32
    1328:	49 83       	std	Y+1, r20	; 0x01
    132a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    132e:	c8 01       	movw	r24, r16
    1330:	49 81       	ldd	r20, Y+1	; 0x01
    1332:	64 2f       	mov	r22, r20
    1334:	0e 94 3e 08 	call	0x107c	; 0x107c <SPI_Write_Block>
    mirf_CSN_hi;
    1338:	28 9a       	sbi	0x05, 0	; 5
}
    133a:	0f 90       	pop	r0
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	08 95       	ret

00001346 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	0f 92       	push	r0
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1356:	80 91 52 05 	lds	r24, 0x0552
    135a:	88 23       	and	r24, r24
    135c:	e1 f7       	brne	.-8      	; 0x1356 <mirf_send+0x10>

    mirf_CE_lo;
    135e:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	80 93 52 05 	sts	0x0552, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1366:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1368:	80 e2       	ldi	r24, 0x20	; 32
    136a:	69 83       	std	Y+1, r22	; 0x01
    136c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1370:	8a e4       	ldi	r24, 0x4A	; 74
    1372:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    1376:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1378:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    137a:	81 ee       	ldi	r24, 0xE1	; 225
    137c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1380:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1382:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1384:	80 ea       	ldi	r24, 0xA0	; 160
    1386:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    138a:	c8 01       	movw	r24, r16
    138c:	69 81       	ldd	r22, Y+1	; 0x01
    138e:	0e 94 3e 08 	call	0x107c	; 0x107c <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1392:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1394:	2c 9a       	sbi	0x05, 4	; 5
}
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	0f 92       	push	r0
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	18 2f       	mov	r17, r24
    13b6:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    13b8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    13ba:	81 ee       	ldi	r24, 0xE1	; 225
    13bc:	99 83       	std	Y+1, r25	; 0x01
    13be:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    13c2:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    13c4:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    13c6:	88 ea       	ldi	r24, 0xA8	; 168
    13c8:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    13cc:	99 81       	ldd	r25, Y+1	; 0x01
    13ce:	00 23       	and	r16, r16
    13d0:	61 f0       	breq	.+24     	; 0x13ea <writeAckPayload+0x48>
    13d2:	61 2f       	mov	r22, r17
    13d4:	79 2f       	mov	r23, r25
    13d6:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    13d8:	f7 01       	movw	r30, r14
    13da:	81 91       	ld	r24, Z+
    13dc:	7f 01       	movw	r14, r30
    13de:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    13e2:	8e 2d       	mov	r24, r14
    13e4:	81 1b       	sub	r24, r17
    13e6:	80 17       	cp	r24, r16
    13e8:	b8 f3       	brcs	.-18     	; 0x13d8 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    13ea:	28 9a       	sbi	0x05, 0	; 5


}
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	08 95       	ret

000013fc <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    13fc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    13fe:	81 ee       	ldi	r24, 0xE1	; 225
    1400:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    1404:	28 9a       	sbi	0x05, 0	; 5

}
    1406:	08 95       	ret

00001408 <handleRFCommands>:

void handleRFCommands() {
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    140e:	80 91 52 05 	lds	r24, 0x0552
    1412:	88 23       	and	r24, r24
    1414:	21 f0       	breq	.+8      	; 0x141e <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    141e:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1426:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
    1428:	86 ff       	sbrs	r24, 6
    142a:	f5 cf       	rjmp	.-22     	; 0x1416 <handleRFCommands+0xe>

		rfFlags |= 0x02;
    142c:	80 91 0d 04 	lds	r24, 0x040D
    1430:	82 60       	ori	r24, 0x02	; 2
    1432:	80 93 0d 04 	sts	0x040D, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1436:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1438:	87 e2       	ldi	r24, 0x27	; 39
    143a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    143e:	80 e7       	ldi	r24, 0x70	; 112
    1440:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    1444:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    1446:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1448:	81 e6       	ldi	r24, 0x61	; 97
    144a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    144e:	80 e7       	ldi	r24, 0x70	; 112
    1450:	95 e0       	ldi	r25, 0x05	; 5
    1452:	bc 01       	movw	r22, r24
    1454:	4d e0       	ldi	r20, 0x0D	; 13
    1456:	0e 94 1a 08 	call	0x1034	; 0x1034 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    145a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    145c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    145e:	87 e2       	ldi	r24, 0x27	; 39
    1460:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1464:	80 e4       	ldi	r24, 0x40	; 64
    1466:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    146a:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    146c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    146e:	82 ee       	ldi	r24, 0xE2	; 226
    1470:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    1474:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1476:	60 91 70 05 	lds	r22, 0x0570
    147a:	66 23       	and	r22, r22
    147c:	09 f4       	brne	.+2      	; 0x1480 <handleRFCommands+0x78>
    147e:	95 c1       	rjmp	.+810    	; 0x17aa <handleRFCommands+0x3a2>
    1480:	50 91 74 05 	lds	r21, 0x0574
    1484:	40 91 75 05 	lds	r20, 0x0575
    1488:	e0 91 71 05 	lds	r30, 0x0571
    148c:	70 91 72 05 	lds	r23, 0x0572

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1490:	25 2f       	mov	r18, r21
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	2f 77       	andi	r18, 0x7F	; 127
    1496:	30 70       	andi	r19, 0x00	; 0
    1498:	30 93 0a 04 	sts	0x040A, r19
    149c:	20 93 09 04 	sts	0x0409, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    14a0:	84 2f       	mov	r24, r20
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	8f 77       	andi	r24, 0x7F	; 127
    14a6:	90 70       	andi	r25, 0x00	; 0
    14a8:	90 93 08 04 	sts	0x0408, r25
    14ac:	80 93 07 04 	sts	0x0407, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
    14b0:	57 fd       	sbrc	r21, 7
    14b2:	7f c2       	rjmp	.+1278   	; 0x19b2 <handleRFCommands+0x5aa>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
    14b4:	22 0f       	add	r18, r18
    14b6:	33 1f       	adc	r19, r19
    14b8:	22 0f       	add	r18, r18
    14ba:	33 1f       	adc	r19, r19
    14bc:	30 95       	com	r19
    14be:	21 95       	neg	r18
    14c0:	3f 4f       	sbci	r19, 0xFF	; 255
    14c2:	30 93 f8 03 	sts	0x03F8, r19
    14c6:	20 93 f7 03 	sts	0x03F7, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    14ca:	47 fd       	sbrc	r20, 7
    14cc:	7c c2       	rjmp	.+1272   	; 0x19c6 <handleRFCommands+0x5be>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	90 95       	com	r25
    14d8:	81 95       	neg	r24
    14da:	9f 4f       	sbci	r25, 0xFF	; 255
    14dc:	90 93 fa 03 	sts	0x03FA, r25
    14e0:	80 93 f9 03 	sts	0x03F9, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    14e4:	42 e0       	ldi	r20, 0x02	; 2
    14e6:	21 30       	cpi	r18, 0x01	; 1
    14e8:	34 07       	cpc	r19, r20
    14ea:	44 f0       	brlt	.+16     	; 0x14fc <handleRFCommands+0xf4>
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	52 e0       	ldi	r21, 0x02	; 2
    14f0:	50 93 f8 03 	sts	0x03F8, r21
    14f4:	40 93 f7 03 	sts	0x03F7, r20
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    14fc:	42 e0       	ldi	r20, 0x02	; 2
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	94 07       	cpc	r25, r20
    1502:	34 f0       	brlt	.+12     	; 0x1510 <handleRFCommands+0x108>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	92 e0       	ldi	r25, 0x02	; 2
    1508:	90 93 fa 03 	sts	0x03FA, r25
    150c:	80 93 f9 03 	sts	0x03F9, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1510:	4e ef       	ldi	r20, 0xFE	; 254
    1512:	20 30       	cpi	r18, 0x00	; 0
    1514:	34 07       	cpc	r19, r20
    1516:	34 f4       	brge	.+12     	; 0x1524 <handleRFCommands+0x11c>
    1518:	40 e0       	ldi	r20, 0x00	; 0
    151a:	5e ef       	ldi	r21, 0xFE	; 254
    151c:	50 93 f8 03 	sts	0x03F8, r21
    1520:	40 93 f7 03 	sts	0x03F7, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1524:	2e ef       	ldi	r18, 0xFE	; 254
    1526:	80 30       	cpi	r24, 0x00	; 0
    1528:	92 07       	cpc	r25, r18
    152a:	34 f4       	brge	.+12     	; 0x1538 <handleRFCommands+0x130>
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	9e ef       	ldi	r25, 0xFE	; 254
    1530:	90 93 fa 03 	sts	0x03FA, r25
    1534:	80 93 f9 03 	sts	0x03F9, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    1538:	26 2f       	mov	r18, r22
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	30 93 69 05 	sts	0x0569, r19
    1540:	20 93 68 05 	sts	0x0568, r18
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	f0 93 6b 05 	sts	0x056B, r31
    154a:	e0 93 6a 05 	sts	0x056A, r30
    154e:	c7 2f       	mov	r28, r23
    1550:	d0 e0       	ldi	r29, 0x00	; 0
    1552:	d0 93 6d 05 	sts	0x056D, r29
    1556:	c0 93 6c 05 	sts	0x056C, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    155a:	92 2f       	mov	r25, r18
    155c:	88 27       	eor	r24, r24
    155e:	82 1b       	sub	r24, r18
    1560:	93 0b       	sbc	r25, r19
    1562:	24 e6       	ldi	r18, 0x64	; 100
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	b9 01       	movw	r22, r18
    1568:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__udivmodhi4>
    156c:	16 2f       	mov	r17, r22
    156e:	10 95       	com	r17
    1570:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    1574:	5e 2f       	mov	r21, r30
    1576:	44 27       	eor	r20, r20
    1578:	4e 1b       	sub	r20, r30
    157a:	5f 0b       	sbc	r21, r31
    157c:	ca 01       	movw	r24, r20
    157e:	b9 01       	movw	r22, r18
    1580:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__udivmodhi4>
    1584:	60 95       	com	r22
    1586:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    158a:	5c 2f       	mov	r21, r28
    158c:	44 27       	eor	r20, r20
    158e:	4c 1b       	sub	r20, r28
    1590:	5d 0b       	sbc	r21, r29
    1592:	ca 01       	movw	r24, r20
    1594:	b9 01       	movw	r22, r18
    1596:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__udivmodhi4>
    159a:	60 95       	com	r22
    159c:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    15a0:	81 2f       	mov	r24, r17
    15a2:	0e 94 bc 22 	call	0x4578	; 0x4578 <updateRedLed>
		updateGreenLed(pwm_green);
    15a6:	80 91 0d 02 	lds	r24, 0x020D
    15aa:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <updateGreenLed>
		updateBlueLed(pwm_blue);
    15ae:	80 91 0e 02 	lds	r24, 0x020E
    15b2:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    15b6:	80 91 73 05 	lds	r24, 0x0573
    15ba:	80 ff       	sbrs	r24, 0
    15bc:	02 c1       	rjmp	.+516    	; 0x17c2 <handleRFCommands+0x3ba>
			LED_IR1_LOW;
    15be:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    15c0:	81 ff       	sbrs	r24, 1
    15c2:	02 c1       	rjmp	.+516    	; 0x17c8 <handleRFCommands+0x3c0>
			LED_IR2_LOW;
    15c4:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    15c6:	98 2f       	mov	r25, r24
    15c8:	82 ff       	sbrs	r24, 2
    15ca:	02 c1       	rjmp	.+516    	; 0x17d0 <handleRFCommands+0x3c8>
			irEnabled = 1;
    15cc:	21 e0       	ldi	r18, 0x01	; 1
    15ce:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    15d2:	84 fd       	sbrc	r24, 4
    15d4:	01 c1       	rjmp	.+514    	; 0x17d8 <handleRFCommands+0x3d0>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    15d6:	86 ff       	sbrs	r24, 6
    15d8:	06 c1       	rjmp	.+524    	; 0x17e6 <handleRFCommands+0x3de>
			obstacleAvoidanceEnabled = 1;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	80 93 4f 05 	sts	0x054F, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    15e0:	97 fd       	sbrc	r25, 7
    15e2:	05 c1       	rjmp	.+522    	; 0x17ee <handleRFCommands+0x3e6>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    15e4:	10 92 50 05 	sts	0x0550, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    15e8:	80 91 76 05 	lds	r24, 0x0576
    15ec:	80 ff       	sbrs	r24, 0
    15ee:	06 c1       	rjmp	.+524    	; 0x17fc <handleRFCommands+0x3f4>
				GREEN_LED0_ON;
    15f0:	80 91 0b 01 	lds	r24, 0x010B
    15f4:	8e 7f       	andi	r24, 0xFE	; 254
    15f6:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    15fa:	80 91 76 05 	lds	r24, 0x0576
    15fe:	81 ff       	sbrs	r24, 1
    1600:	06 c1       	rjmp	.+524    	; 0x180e <handleRFCommands+0x406>
				GREEN_LED1_ON;
    1602:	80 91 0b 01 	lds	r24, 0x010B
    1606:	8d 7f       	andi	r24, 0xFD	; 253
    1608:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    160c:	80 91 76 05 	lds	r24, 0x0576
    1610:	82 ff       	sbrs	r24, 2
    1612:	06 c1       	rjmp	.+524    	; 0x1820 <handleRFCommands+0x418>
				GREEN_LED2_ON;
    1614:	80 91 0b 01 	lds	r24, 0x010B
    1618:	8b 7f       	andi	r24, 0xFB	; 251
    161a:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    161e:	80 91 76 05 	lds	r24, 0x0576
    1622:	83 ff       	sbrs	r24, 3
    1624:	06 c1       	rjmp	.+524    	; 0x1832 <handleRFCommands+0x42a>
				GREEN_LED3_ON;
    1626:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    1628:	80 91 76 05 	lds	r24, 0x0576
    162c:	84 ff       	sbrs	r24, 4
    162e:	06 c1       	rjmp	.+524    	; 0x183c <handleRFCommands+0x434>
				GREEN_LED4_ON;
    1630:	80 91 0b 01 	lds	r24, 0x010B
    1634:	8f 7e       	andi	r24, 0xEF	; 239
    1636:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    163a:	80 91 76 05 	lds	r24, 0x0576
    163e:	85 ff       	sbrs	r24, 5
    1640:	06 c1       	rjmp	.+524    	; 0x184e <handleRFCommands+0x446>
				GREEN_LED5_ON;
    1642:	80 91 0b 01 	lds	r24, 0x010B
    1646:	8f 7d       	andi	r24, 0xDF	; 223
    1648:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    164c:	80 91 76 05 	lds	r24, 0x0576
    1650:	86 ff       	sbrs	r24, 6
    1652:	06 c1       	rjmp	.+524    	; 0x1860 <handleRFCommands+0x458>
				GREEN_LED6_ON;
    1654:	80 91 0b 01 	lds	r24, 0x010B
    1658:	8f 7b       	andi	r24, 0xBF	; 191
    165a:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    165e:	80 91 76 05 	lds	r24, 0x0576
    1662:	87 fd       	sbrc	r24, 7
    1664:	06 c1       	rjmp	.+524    	; 0x1872 <handleRFCommands+0x46a>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    1666:	80 91 0b 01 	lds	r24, 0x010B
    166a:	80 68       	ori	r24, 0x80	; 128
    166c:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1670:	80 91 0b 02 	lds	r24, 0x020B
    1674:	80 93 58 05 	sts	0x0558, r24

		switch(packetId) {
    1678:	85 30       	cpi	r24, 0x05	; 5
    167a:	09 f4       	brne	.+2      	; 0x167e <handleRFCommands+0x276>
    167c:	06 c1       	rjmp	.+524    	; 0x188a <handleRFCommands+0x482>
    167e:	86 30       	cpi	r24, 0x06	; 6
    1680:	08 f0       	brcs	.+2      	; 0x1684 <handleRFCommands+0x27c>
    1682:	5f c1       	rjmp	.+702    	; 0x1942 <handleRFCommands+0x53a>
    1684:	83 30       	cpi	r24, 0x03	; 3
    1686:	09 f4       	brne	.+2      	; 0x168a <handleRFCommands+0x282>
    1688:	0e c2       	rjmp	.+1052   	; 0x1aa6 <handleRFCommands+0x69e>
    168a:	84 30       	cpi	r24, 0x04	; 4
    168c:	09 f0       	breq	.+2      	; 0x1690 <handleRFCommands+0x288>
    168e:	3f c0       	rjmp	.+126    	; 0x170e <handleRFCommands+0x306>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    1690:	90 91 67 03 	lds	r25, 0x0367
    1694:	80 91 68 03 	lds	r24, 0x0368
    1698:	90 93 59 05 	sts	0x0559, r25
				ackPayload[2] = proximityResult[4]>>8;
    169c:	80 93 5a 05 	sts	0x055A, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    16a0:	90 91 6f 03 	lds	r25, 0x036F
    16a4:	80 91 70 03 	lds	r24, 0x0370
    16a8:	90 93 5b 05 	sts	0x055B, r25
				ackPayload[4] = proximityResult[8]>>8;
    16ac:	80 93 5c 05 	sts	0x055C, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    16b0:	90 91 71 03 	lds	r25, 0x0371
    16b4:	80 91 72 03 	lds	r24, 0x0372
    16b8:	90 93 5d 05 	sts	0x055D, r25
				ackPayload[6] = proximityResult[9]>>8;
    16bc:	80 93 5e 05 	sts	0x055E, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    16c0:	90 91 73 03 	lds	r25, 0x0373
    16c4:	80 91 74 03 	lds	r24, 0x0374
    16c8:	90 93 5f 05 	sts	0x055F, r25
				ackPayload[8] = proximityResult[10]>>8;
    16cc:	80 93 60 05 	sts	0x0560, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    16d0:	90 91 75 03 	lds	r25, 0x0375
    16d4:	80 91 76 03 	lds	r24, 0x0376
    16d8:	90 93 61 05 	sts	0x0561, r25
				ackPayload[10] = proximityResult[11]>>8;
    16dc:	80 93 62 05 	sts	0x0562, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    16e0:	90 91 20 05 	lds	r25, 0x0520
    16e4:	80 91 21 05 	lds	r24, 0x0521
    16e8:	90 93 63 05 	sts	0x0563, r25
				ackPayload[12] = accX>>8;
    16ec:	80 93 64 05 	sts	0x0564, r24
				ackPayload[13] = accY&0xFF;
    16f0:	90 91 22 05 	lds	r25, 0x0522
    16f4:	80 91 23 05 	lds	r24, 0x0523
    16f8:	90 93 65 05 	sts	0x0565, r25
				ackPayload[14] = accY>>8;
    16fc:	80 93 66 05 	sts	0x0566, r24
				ackPayload[15] = irCommand;
    1700:	80 91 1b 05 	lds	r24, 0x051B
    1704:	80 93 67 05 	sts	0x0567, r24
				packetId = 5;
    1708:	85 e0       	ldi	r24, 0x05	; 5
    170a:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
    170e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1710:	81 ee       	ldi	r24, 0xE1	; 225
    1712:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    mirf_CSN_hi;
    1716:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1718:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    171a:	88 ea       	ldi	r24, 0xA8	; 168
    171c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    1720:	80 91 58 05 	lds	r24, 0x0558
    1724:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1728:	80 91 59 05 	lds	r24, 0x0559
    172c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1730:	80 91 5a 05 	lds	r24, 0x055A
    1734:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1738:	80 91 5b 05 	lds	r24, 0x055B
    173c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1740:	80 91 5c 05 	lds	r24, 0x055C
    1744:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1748:	80 91 5d 05 	lds	r24, 0x055D
    174c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1750:	80 91 5e 05 	lds	r24, 0x055E
    1754:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1758:	80 91 5f 05 	lds	r24, 0x055F
    175c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1760:	80 91 60 05 	lds	r24, 0x0560
    1764:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1768:	80 91 61 05 	lds	r24, 0x0561
    176c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1770:	80 91 62 05 	lds	r24, 0x0562
    1774:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1778:	80 91 63 05 	lds	r24, 0x0563
    177c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1780:	80 91 64 05 	lds	r24, 0x0564
    1784:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1788:	80 91 65 05 	lds	r24, 0x0565
    178c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1790:	80 91 66 05 	lds	r24, 0x0566
    1794:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
    1798:	80 91 67 05 	lds	r24, 0x0567
    179c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    17a0:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    17aa:	e0 91 71 05 	lds	r30, 0x0571
    17ae:	ee 23       	and	r30, r30
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <handleRFCommands+0x3ac>
    17b2:	12 c1       	rjmp	.+548    	; 0x19d8 <handleRFCommands+0x5d0>
    17b4:	50 91 74 05 	lds	r21, 0x0574
    17b8:	40 91 75 05 	lds	r20, 0x0575
    17bc:	70 91 72 05 	lds	r23, 0x0572
    17c0:	67 ce       	rjmp	.-818    	; 0x1490 <handleRFCommands+0x88>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    17c2:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    17c4:	81 fd       	sbrc	r24, 1
    17c6:	fe ce       	rjmp	.-516    	; 0x15c4 <handleRFCommands+0x1bc>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    17c8:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    17ca:	98 2f       	mov	r25, r24
    17cc:	82 fd       	sbrc	r24, 2
    17ce:	fe ce       	rjmp	.-516    	; 0x15cc <handleRFCommands+0x1c4>
			irEnabled = 1;
		} else {
			irEnabled = 0;
    17d0:	10 92 12 02 	sts	0x0212, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    17d4:	84 ff       	sbrs	r24, 4
    17d6:	ff ce       	rjmp	.-514    	; 0x15d6 <handleRFCommands+0x1ce>
			calibrateSensors();
    17d8:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <calibrateSensors>
    17dc:	90 91 73 05 	lds	r25, 0x0573
    17e0:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    17e2:	86 fd       	sbrc	r24, 6
    17e4:	fa ce       	rjmp	.-524    	; 0x15da <handleRFCommands+0x1d2>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    17e6:	10 92 4f 05 	sts	0x054F, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    17ea:	97 ff       	sbrs	r25, 7
    17ec:	fb ce       	rjmp	.-522    	; 0x15e4 <handleRFCommands+0x1dc>
			cliffAvoidanceEnabled = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	80 93 50 05 	sts	0x0550, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    17f4:	80 91 76 05 	lds	r24, 0x0576
    17f8:	80 fd       	sbrc	r24, 0
    17fa:	fa ce       	rjmp	.-524    	; 0x15f0 <handleRFCommands+0x1e8>
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    17fc:	80 91 0b 01 	lds	r24, 0x010B
    1800:	81 60       	ori	r24, 0x01	; 1
    1802:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1806:	80 91 76 05 	lds	r24, 0x0576
    180a:	81 fd       	sbrc	r24, 1
    180c:	fa ce       	rjmp	.-524    	; 0x1602 <handleRFCommands+0x1fa>
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    180e:	80 91 0b 01 	lds	r24, 0x010B
    1812:	82 60       	ori	r24, 0x02	; 2
    1814:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1818:	80 91 76 05 	lds	r24, 0x0576
    181c:	82 fd       	sbrc	r24, 2
    181e:	fa ce       	rjmp	.-524    	; 0x1614 <handleRFCommands+0x20c>
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    1820:	80 91 0b 01 	lds	r24, 0x010B
    1824:	84 60       	ori	r24, 0x04	; 4
    1826:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
    182a:	80 91 76 05 	lds	r24, 0x0576
    182e:	83 fd       	sbrc	r24, 3
    1830:	fa ce       	rjmp	.-524    	; 0x1626 <handleRFCommands+0x21e>
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    1832:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
    1834:	80 91 76 05 	lds	r24, 0x0576
    1838:	84 fd       	sbrc	r24, 4
    183a:	fa ce       	rjmp	.-524    	; 0x1630 <handleRFCommands+0x228>
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    183c:	80 91 0b 01 	lds	r24, 0x010B
    1840:	80 61       	ori	r24, 0x10	; 16
    1842:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
    1846:	80 91 76 05 	lds	r24, 0x0576
    184a:	85 fd       	sbrc	r24, 5
    184c:	fa ce       	rjmp	.-524    	; 0x1642 <handleRFCommands+0x23a>
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    184e:	80 91 0b 01 	lds	r24, 0x010B
    1852:	80 62       	ori	r24, 0x20	; 32
    1854:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
    1858:	80 91 76 05 	lds	r24, 0x0576
    185c:	86 fd       	sbrc	r24, 6
    185e:	fa ce       	rjmp	.-524    	; 0x1654 <handleRFCommands+0x24c>
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    1860:	80 91 0b 01 	lds	r24, 0x010B
    1864:	80 64       	ori	r24, 0x40	; 64
    1866:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
    186a:	80 91 76 05 	lds	r24, 0x0576
    186e:	87 ff       	sbrs	r24, 7
    1870:	fa ce       	rjmp	.-524    	; 0x1666 <handleRFCommands+0x25e>
				GREEN_LED7_ON;
    1872:	80 91 0b 01 	lds	r24, 0x010B
    1876:	8f 77       	andi	r24, 0x7F	; 127
    1878:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    187c:	80 91 0b 02 	lds	r24, 0x020B
    1880:	80 93 58 05 	sts	0x0558, r24

		switch(packetId) {
    1884:	85 30       	cpi	r24, 0x05	; 5
    1886:	09 f0       	breq	.+2      	; 0x188a <handleRFCommands+0x482>
    1888:	fa ce       	rjmp	.-524    	; 0x167e <handleRFCommands+0x276>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    188a:	80 91 2f 03 	lds	r24, 0x032F
    188e:	90 91 30 03 	lds	r25, 0x0330
    1892:	80 93 59 05 	sts	0x0559, r24
				ackPayload[2] = proximityValue[0]>>8;
    1896:	80 91 2f 03 	lds	r24, 0x032F
    189a:	90 91 30 03 	lds	r25, 0x0330
    189e:	90 93 5a 05 	sts	0x055A, r25
				ackPayload[3] = proximityValue[2]&0xFF;
    18a2:	80 91 33 03 	lds	r24, 0x0333
    18a6:	90 91 34 03 	lds	r25, 0x0334
    18aa:	80 93 5b 05 	sts	0x055B, r24
				ackPayload[4] = proximityValue[2]>>8;
    18ae:	80 91 33 03 	lds	r24, 0x0333
    18b2:	90 91 34 03 	lds	r25, 0x0334
    18b6:	90 93 5c 05 	sts	0x055C, r25
				ackPayload[5] = proximityValue[4]&0xFF;
    18ba:	80 91 37 03 	lds	r24, 0x0337
    18be:	90 91 38 03 	lds	r25, 0x0338
    18c2:	80 93 5d 05 	sts	0x055D, r24
				ackPayload[6] = proximityValue[4]>>8;
    18c6:	80 91 37 03 	lds	r24, 0x0337
    18ca:	90 91 38 03 	lds	r25, 0x0338
    18ce:	90 93 5e 05 	sts	0x055E, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    18d2:	80 91 3b 03 	lds	r24, 0x033B
    18d6:	90 91 3c 03 	lds	r25, 0x033C
    18da:	80 93 5f 05 	sts	0x055F, r24
				ackPayload[8] = proximityValue[6]>>8;
    18de:	80 91 3b 03 	lds	r24, 0x033B
    18e2:	90 91 3c 03 	lds	r25, 0x033C
    18e6:	90 93 60 05 	sts	0x0560, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    18ea:	80 91 43 03 	lds	r24, 0x0343
    18ee:	90 91 44 03 	lds	r25, 0x0344
    18f2:	80 93 61 05 	sts	0x0561, r24
				ackPayload[10] = proximityValue[10]>>8;
    18f6:	80 91 43 03 	lds	r24, 0x0343
    18fa:	90 91 44 03 	lds	r25, 0x0344
    18fe:	90 93 62 05 	sts	0x0562, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    1902:	80 91 47 03 	lds	r24, 0x0347
    1906:	90 91 48 03 	lds	r25, 0x0348
    190a:	80 93 63 05 	sts	0x0563, r24
				ackPayload[12] = proximityValue[12]>>8;
    190e:	80 91 47 03 	lds	r24, 0x0347
    1912:	90 91 48 03 	lds	r25, 0x0348
    1916:	90 93 64 05 	sts	0x0564, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    191a:	80 91 4b 03 	lds	r24, 0x034B
    191e:	90 91 4c 03 	lds	r25, 0x034C
    1922:	80 93 65 05 	sts	0x0565, r24
				ackPayload[14] = proximityValue[14]>>8;
    1926:	80 91 4b 03 	lds	r24, 0x034B
    192a:	90 91 4c 03 	lds	r25, 0x034C
    192e:	90 93 66 05 	sts	0x0566, r25
				ackPayload[15] = currentSelector;
    1932:	80 91 3f 05 	lds	r24, 0x053F
    1936:	80 93 67 05 	sts	0x0567, r24
				packetId = 6;
    193a:	86 e0       	ldi	r24, 0x06	; 6
    193c:	80 93 0b 02 	sts	0x020B, r24
				break;
    1940:	e6 ce       	rjmp	.-564    	; 0x170e <handleRFCommands+0x306>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    1942:	86 30       	cpi	r24, 0x06	; 6
    1944:	09 f4       	brne	.+2      	; 0x1948 <handleRFCommands+0x540>
    1946:	5d c0       	rjmp	.+186    	; 0x1a02 <handleRFCommands+0x5fa>
    1948:	87 30       	cpi	r24, 0x07	; 7
    194a:	09 f0       	breq	.+2      	; 0x194e <handleRFCommands+0x546>
    194c:	e0 ce       	rjmp	.-576    	; 0x170e <handleRFCommands+0x306>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = leftMotSteps&0xFF;
    194e:	30 91 db 03 	lds	r19, 0x03DB
    1952:	20 91 dc 03 	lds	r18, 0x03DC
    1956:	90 91 dd 03 	lds	r25, 0x03DD
    195a:	80 91 de 03 	lds	r24, 0x03DE
    195e:	30 93 59 05 	sts	0x0559, r19
				ackPayload[2] = leftMotSteps>>8;
    1962:	20 93 5a 05 	sts	0x055A, r18
				ackPayload[3] = leftMotSteps>>16;
    1966:	90 93 5b 05 	sts	0x055B, r25
				ackPayload[4] = leftMotSteps>>24;
    196a:	80 93 5c 05 	sts	0x055C, r24
				ackPayload[5] = rightMotSteps&0xFF;
    196e:	30 91 d7 03 	lds	r19, 0x03D7
    1972:	20 91 d8 03 	lds	r18, 0x03D8
    1976:	90 91 d9 03 	lds	r25, 0x03D9
    197a:	80 91 da 03 	lds	r24, 0x03DA
    197e:	30 93 5d 05 	sts	0x055D, r19
				ackPayload[6] = rightMotSteps>>8;
    1982:	20 93 5e 05 	sts	0x055E, r18
				ackPayload[7] = rightMotSteps>>16;
    1986:	90 93 5f 05 	sts	0x055F, r25
				ackPayload[8] = rightMotSteps>>24;
    198a:	80 93 60 05 	sts	0x0560, r24
				ackPayload[9] = 0;
    198e:	10 92 61 05 	sts	0x0561, r1
				ackPayload[10] = 0;
    1992:	10 92 62 05 	sts	0x0562, r1
				ackPayload[11] = 0;
    1996:	10 92 63 05 	sts	0x0563, r1
				ackPayload[12] = 0;
    199a:	10 92 64 05 	sts	0x0564, r1
				ackPayload[13] = 0;
    199e:	10 92 65 05 	sts	0x0565, r1
				ackPayload[14] = 0;
    19a2:	10 92 66 05 	sts	0x0566, r1
				ackPayload[15] = 0;
    19a6:	10 92 67 05 	sts	0x0567, r1
				packetId = 3;
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	80 93 0b 02 	sts	0x020B, r24
				break;
    19b0:	ae ce       	rjmp	.-676    	; 0x170e <handleRFCommands+0x306>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    19b2:	22 0f       	add	r18, r18
    19b4:	33 1f       	adc	r19, r19
    19b6:	22 0f       	add	r18, r18
    19b8:	33 1f       	adc	r19, r19
    19ba:	30 93 f8 03 	sts	0x03F8, r19
    19be:	20 93 f7 03 	sts	0x03F7, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    19c2:	47 ff       	sbrs	r20, 7
    19c4:	84 cd       	rjmp	.-1272   	; 0x14ce <handleRFCommands+0xc6>
			pwm_left_desired = speedl<<2;
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	90 93 fa 03 	sts	0x03FA, r25
    19d2:	80 93 f9 03 	sts	0x03F9, r24
    19d6:	86 cd       	rjmp	.-1268   	; 0x14e4 <handleRFCommands+0xdc>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    19d8:	70 91 72 05 	lds	r23, 0x0572
    19dc:	77 23       	and	r23, r23
    19de:	61 f4       	brne	.+24     	; 0x19f8 <handleRFCommands+0x5f0>
    19e0:	80 91 73 05 	lds	r24, 0x0573
    19e4:	88 30       	cpi	r24, 0x08	; 8
    19e6:	41 f4       	brne	.+16     	; 0x19f8 <handleRFCommands+0x5f0>
    19e8:	50 91 74 05 	lds	r21, 0x0574
    19ec:	55 23       	and	r21, r21
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <handleRFCommands+0x5ea>
    19f0:	c0 c0       	rjmp	.+384    	; 0x1b72 <handleRFCommands+0x76a>
    19f2:	40 91 75 05 	lds	r20, 0x0575
    19f6:	4c cd       	rjmp	.-1384   	; 0x1490 <handleRFCommands+0x88>
    19f8:	50 91 74 05 	lds	r21, 0x0574
    19fc:	40 91 75 05 	lds	r20, 0x0575
    1a00:	47 cd       	rjmp	.-1394   	; 0x1490 <handleRFCommands+0x88>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    1a02:	80 91 3f 03 	lds	r24, 0x033F
    1a06:	90 91 40 03 	lds	r25, 0x0340
    1a0a:	80 93 59 05 	sts	0x0559, r24
				ackPayload[2] = proximityValue[8]>>8;
    1a0e:	80 91 3f 03 	lds	r24, 0x033F
    1a12:	90 91 40 03 	lds	r25, 0x0340
    1a16:	90 93 5a 05 	sts	0x055A, r25
				ackPayload[3] = proximityValue[16]&0xFF;
    1a1a:	80 91 4f 03 	lds	r24, 0x034F
    1a1e:	90 91 50 03 	lds	r25, 0x0350
    1a22:	80 93 5b 05 	sts	0x055B, r24
				ackPayload[4] = proximityValue[16]>>8;
    1a26:	80 91 4f 03 	lds	r24, 0x034F
    1a2a:	90 91 50 03 	lds	r25, 0x0350
    1a2e:	90 93 5c 05 	sts	0x055C, r25
				ackPayload[5] = proximityValue[18]&0xFF;
    1a32:	80 91 53 03 	lds	r24, 0x0353
    1a36:	90 91 54 03 	lds	r25, 0x0354
    1a3a:	80 93 5d 05 	sts	0x055D, r24
				ackPayload[6] = proximityValue[18]>>8;
    1a3e:	80 91 53 03 	lds	r24, 0x0353
    1a42:	90 91 54 03 	lds	r25, 0x0354
    1a46:	90 93 5e 05 	sts	0x055E, r25
				ackPayload[7] = proximityValue[20]&0xFF;
    1a4a:	80 91 57 03 	lds	r24, 0x0357
    1a4e:	90 91 58 03 	lds	r25, 0x0358
    1a52:	80 93 5f 05 	sts	0x055F, r24
				ackPayload[8] = proximityValue[20]>>8;
    1a56:	80 91 57 03 	lds	r24, 0x0357
    1a5a:	90 91 58 03 	lds	r25, 0x0358
    1a5e:	90 93 60 05 	sts	0x0560, r25
				ackPayload[9] = proximityValue[22]&0xFF;
    1a62:	80 91 5b 03 	lds	r24, 0x035B
    1a66:	90 91 5c 03 	lds	r25, 0x035C
    1a6a:	80 93 61 05 	sts	0x0561, r24
				ackPayload[10] = proximityValue[22]>>8;
    1a6e:	80 91 5b 03 	lds	r24, 0x035B
    1a72:	90 91 5c 03 	lds	r25, 0x035C
    1a76:	90 93 62 05 	sts	0x0562, r25
				ackPayload[11] = accZ&0xFF;
    1a7a:	90 91 24 05 	lds	r25, 0x0524
    1a7e:	80 91 25 05 	lds	r24, 0x0525
    1a82:	90 93 63 05 	sts	0x0563, r25
				ackPayload[12] = accZ>>8;
    1a86:	80 93 64 05 	sts	0x0564, r24
				ackPayload[13] = batteryLevel&0xFF;
    1a8a:	90 91 c3 03 	lds	r25, 0x03C3
    1a8e:	80 91 c4 03 	lds	r24, 0x03C4
    1a92:	90 93 65 05 	sts	0x0565, r25
				ackPayload[14] = batteryLevel>>8;
    1a96:	80 93 66 05 	sts	0x0566, r24
				ackPayload[15] = 0;
    1a9a:	10 92 67 05 	sts	0x0567, r1
				packetId = 7;
    1a9e:	87 e0       	ldi	r24, 0x07	; 7
    1aa0:	80 93 0b 02 	sts	0x020B, r24
				break;
    1aa4:	34 ce       	rjmp	.-920    	; 0x170e <handleRFCommands+0x306>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
    1aa6:	90 91 5f 03 	lds	r25, 0x035F
    1aaa:	80 91 60 03 	lds	r24, 0x0360
    1aae:	90 93 59 05 	sts	0x0559, r25
				ackPayload[2] = proximityResult[0]>>8;
    1ab2:	80 93 5a 05 	sts	0x055A, r24
				ackPayload[3] = proximityResult[1]&0xFF;
    1ab6:	90 91 61 03 	lds	r25, 0x0361
    1aba:	80 91 62 03 	lds	r24, 0x0362
    1abe:	90 93 5b 05 	sts	0x055B, r25
				ackPayload[4] = proximityResult[1]>>8;
    1ac2:	80 93 5c 05 	sts	0x055C, r24
				ackPayload[5] = proximityResult[2]&0xFF;
    1ac6:	90 91 63 03 	lds	r25, 0x0363
    1aca:	80 91 64 03 	lds	r24, 0x0364
    1ace:	90 93 5d 05 	sts	0x055D, r25
				ackPayload[6] = proximityResult[2]>>8;
    1ad2:	80 93 5e 05 	sts	0x055E, r24
				ackPayload[7] = proximityResult[3]&0xFF;
    1ad6:	90 91 65 03 	lds	r25, 0x0365
    1ada:	80 91 66 03 	lds	r24, 0x0366
    1ade:	90 93 5f 05 	sts	0x055F, r25
				ackPayload[8] = proximityResult[3]>>8;
    1ae2:	80 93 60 05 	sts	0x0560, r24
				ackPayload[9] = proximityResult[5]&0xFF;
    1ae6:	90 91 69 03 	lds	r25, 0x0369
    1aea:	80 91 6a 03 	lds	r24, 0x036A
    1aee:	90 93 61 05 	sts	0x0561, r25
				ackPayload[10] = proximityResult[5]>>8;
    1af2:	80 93 62 05 	sts	0x0562, r24
				ackPayload[11] = proximityResult[6]&0xFF;
    1af6:	90 91 6b 03 	lds	r25, 0x036B
    1afa:	80 91 6c 03 	lds	r24, 0x036C
    1afe:	90 93 63 05 	sts	0x0563, r25
				ackPayload[12] = proximityResult[6]>>8;
    1b02:	80 93 64 05 	sts	0x0564, r24
				ackPayload[13] = proximityResult[7]&0xFF;
    1b06:	90 91 6d 03 	lds	r25, 0x036D
    1b0a:	80 91 6e 03 	lds	r24, 0x036E
    1b0e:	90 93 65 05 	sts	0x0565, r25
				ackPayload[14] = proximityResult[7]>>8;
    1b12:	80 93 66 05 	sts	0x0566, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    1b16:	30 91 03 01 	lds	r19, 0x0103
    1b1a:	80 91 03 01 	lds	r24, 0x0103
    1b1e:	20 91 03 01 	lds	r18, 0x0103
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	80 72       	andi	r24, 0x20	; 32
    1b26:	90 70       	andi	r25, 0x00	; 0
    1b28:	95 95       	asr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	95 95       	asr	r25
    1b2e:	87 95       	ror	r24
    1b30:	95 95       	asr	r25
    1b32:	87 95       	ror	r24
    1b34:	95 95       	asr	r25
    1b36:	87 95       	ror	r24
    1b38:	95 95       	asr	r25
    1b3a:	87 95       	ror	r24
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	22 1f       	adc	r18, r18
    1b42:	22 27       	eor	r18, r18
    1b44:	22 1f       	adc	r18, r18
    1b46:	22 0f       	add	r18, r18
    1b48:	22 0f       	add	r18, r18
    1b4a:	28 2b       	or	r18, r24
    1b4c:	83 2f       	mov	r24, r19
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	80 71       	andi	r24, 0x10	; 16
    1b52:	90 70       	andi	r25, 0x00	; 0
    1b54:	95 95       	asr	r25
    1b56:	87 95       	ror	r24
    1b58:	95 95       	asr	r25
    1b5a:	87 95       	ror	r24
    1b5c:	95 95       	asr	r25
    1b5e:	87 95       	ror	r24
    1b60:	95 95       	asr	r25
    1b62:	87 95       	ror	r24
    1b64:	28 2b       	or	r18, r24
    1b66:	20 93 67 05 	sts	0x0567, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    1b6a:	84 e0       	ldi	r24, 0x04	; 4
    1b6c:	80 93 0b 02 	sts	0x020B, r24
				break;
    1b70:	ce cd       	rjmp	.-1124   	; 0x170e <handleRFCommands+0x306>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1b72:	40 91 75 05 	lds	r20, 0x0575
    1b76:	44 23       	and	r20, r20
    1b78:	79 f0       	breq	.+30     	; 0x1b98 <handleRFCommands+0x790>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1b7a:	10 92 0a 04 	sts	0x040A, r1
    1b7e:	10 92 09 04 	sts	0x0409, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1b82:	84 2f       	mov	r24, r20
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	8f 77       	andi	r24, 0x7F	; 127
    1b88:	90 70       	andi	r25, 0x00	; 0
    1b8a:	90 93 08 04 	sts	0x0408, r25
    1b8e:	80 93 07 04 	sts	0x0407, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	8e cc       	rjmp	.-1764   	; 0x14b4 <handleRFCommands+0xac>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    1b98:	8c e3       	ldi	r24, 0x3C	; 60
    1b9a:	0e 94 54 18 	call	0x30a8	; 0x30a8 <sleep>
    1b9e:	50 91 74 05 	lds	r21, 0x0574
    1ba2:	40 91 75 05 	lds	r20, 0x0575
    1ba6:	60 91 70 05 	lds	r22, 0x0570
    1baa:	e0 91 71 05 	lds	r30, 0x0571
    1bae:	70 91 72 05 	lds	r23, 0x0572
    1bb2:	6e cc       	rjmp	.-1828   	; 0x1490 <handleRFCommands+0x88>

00001bb4 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29

	PCICR = 0;
    1bb8:	c8 e6       	ldi	r28, 0x68	; 104
    1bba:	d0 e0       	ldi	r29, 0x00	; 0
    1bbc:	18 82       	st	Y, r1
	PCMSK1 = 0;
    1bbe:	ac e6       	ldi	r26, 0x6C	; 108
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	1c 92       	st	X, r1
	TCCR2A = 0;
    1bc4:	e0 eb       	ldi	r30, 0xB0	; 176
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	10 82       	st	Z, r1
	TCCR2B = 0;
    1bca:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    1bce:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    1bd2:	88 81       	ld	r24, Y
    1bd4:	82 60       	ori	r24, 0x02	; 2
    1bd6:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    1bd8:	8c 91       	ld	r24, X
    1bda:	80 68       	ori	r24, 0x80	; 128
    1bdc:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    1bde:	80 81       	ld	r24, Z
    1be0:	82 60       	ori	r24, 0x02	; 2
    1be2:	80 83       	st	Z, r24

}
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	08 95       	ret

00001bea <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    1bea:	1f 92       	push	r1
    1bec:	0f 92       	push	r0
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	0f 92       	push	r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    1bf6:	80 91 12 02 	lds	r24, 0x0212
    1bfa:	88 23       	and	r24, r24
    1bfc:	21 f1       	breq	.+72     	; 0x1c46 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    1bfe:	80 91 03 01 	lds	r24, 0x0103
    1c02:	86 fd       	sbrc	r24, 6
    1c04:	20 c0       	rjmp	.+64     	; 0x1c46 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    1c06:	80 91 68 00 	lds	r24, 0x0068
    1c0a:	8d 7f       	andi	r24, 0xFD	; 253
    1c0c:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    1c10:	80 91 6c 00 	lds	r24, 0x006C
    1c14:	8f 77       	andi	r24, 0x7F	; 127
    1c16:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    1c20:	8d e0       	ldi	r24, 0x0D	; 13
    1c22:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1c26:	80 91 b1 00 	lds	r24, 0x00B1
    1c2a:	86 60       	ori	r24, 0x06	; 6
    1c2c:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    1c30:	80 91 70 00 	lds	r24, 0x0070
    1c34:	82 60       	ori	r24, 0x02	; 2
    1c36:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    1c3a:	10 92 26 03 	sts	0x0326, r1
    1c3e:	10 92 27 03 	sts	0x0327, r1
    1c42:	10 92 28 03 	sts	0x0328, r1

		}

	}
	
}
    1c46:	8f 91       	pop	r24
    1c48:	0f 90       	pop	r0
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	0f 90       	pop	r0
    1c4e:	1f 90       	pop	r1
    1c50:	18 95       	reti

00001c52 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    1c52:	1f 92       	push	r1
    1c54:	0f 92       	push	r0
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	0f 92       	push	r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	2f 93       	push	r18
    1c5e:	3f 93       	push	r19
    1c60:	4f 93       	push	r20
    1c62:	5f 93       	push	r21
    1c64:	8f 93       	push	r24
    1c66:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    1c68:	80 91 b1 00 	lds	r24, 0x00B1
    1c6c:	88 7f       	andi	r24, 0xF8	; 248
    1c6e:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    1c72:	80 91 13 02 	lds	r24, 0x0213
    1c76:	88 23       	and	r24, r24
    1c78:	a9 f0       	breq	.+42     	; 0x1ca4 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    1c7a:	80 91 03 01 	lds	r24, 0x0103
    1c7e:	86 ff       	sbrs	r24, 6
    1c80:	65 c0       	rjmp	.+202    	; 0x1d4c <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1c82:	80 91 68 00 	lds	r24, 0x0068
    1c86:	82 60       	ori	r24, 0x02	; 2
    1c88:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1c8c:	80 91 6c 00 	lds	r24, 0x006C
    1c90:	80 68       	ori	r24, 0x80	; 128
    1c92:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1c96:	8f ef       	ldi	r24, 0xFF	; 255
    1c98:	9f ef       	ldi	r25, 0xFF	; 255
    1c9a:	90 93 02 02 	sts	0x0202, r25
    1c9e:	80 93 01 02 	sts	0x0201, r24
    1ca2:	49 c0       	rjmp	.+146    	; 0x1d36 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    1ca4:	80 91 01 02 	lds	r24, 0x0201
    1ca8:	90 91 02 02 	lds	r25, 0x0202
    1cac:	2f ef       	ldi	r18, 0xFF	; 255
    1cae:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb0:	92 07       	cpc	r25, r18
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <__vector_13+0x64>
    1cb4:	63 c0       	rjmp	.+198    	; 0x1d7c <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    1cb6:	81 30       	cpi	r24, 0x01	; 1
    1cb8:	91 05       	cpc	r25, r1
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <__vector_13+0x6c>
    1cbc:	98 c0       	rjmp	.+304    	; 0x1dee <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    1cbe:	9c 01       	movw	r18, r24
    1cc0:	22 50       	subi	r18, 0x02	; 2
    1cc2:	30 40       	sbci	r19, 0x00	; 0
    1cc4:	25 30       	cpi	r18, 0x05	; 5
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	08 f4       	brcc	.+2      	; 0x1ccc <__vector_13+0x7a>
    1cca:	67 c0       	rjmp	.+206    	; 0x1d9a <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    1ccc:	9c 01       	movw	r18, r24
    1cce:	27 50       	subi	r18, 0x07	; 7
    1cd0:	30 40       	sbci	r19, 0x00	; 0
    1cd2:	26 30       	cpi	r18, 0x06	; 6
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	08 f0       	brcs	.+2      	; 0x1cda <__vector_13+0x88>
    1cd8:	bd c0       	rjmp	.+378    	; 0x1e54 <__vector_13+0x202>

				OCR2A = 54;
    1cda:	26 e3       	ldi	r18, 0x36	; 54
    1cdc:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1ce0:	20 91 b1 00 	lds	r18, 0x00B1
    1ce4:	26 60       	ori	r18, 0x06	; 6
    1ce6:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1cea:	20 91 70 00 	lds	r18, 0x0070
    1cee:	22 60       	ori	r18, 0x02	; 2
    1cf0:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1cf4:	20 91 03 01 	lds	r18, 0x0103
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	20 74       	andi	r18, 0x40	; 64
    1cfc:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    1cfe:	00 24       	eor	r0, r0
    1d00:	22 0f       	add	r18, r18
    1d02:	33 1f       	adc	r19, r19
    1d04:	00 1c       	adc	r0, r0
    1d06:	22 0f       	add	r18, r18
    1d08:	33 1f       	adc	r19, r19
    1d0a:	00 1c       	adc	r0, r0
    1d0c:	23 2f       	mov	r18, r19
    1d0e:	30 2d       	mov	r19, r0
    1d10:	4c e0       	ldi	r20, 0x0C	; 12
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	48 1b       	sub	r20, r24
    1d16:	59 0b       	sbc	r21, r25
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <__vector_13+0xcc>
    1d1a:	22 0f       	add	r18, r18
    1d1c:	33 1f       	adc	r19, r19
    1d1e:	4a 95       	dec	r20
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <__vector_13+0xc8>
				data_temp += temp;
    1d22:	40 91 26 03 	lds	r20, 0x0326
    1d26:	42 0f       	add	r20, r18
    1d28:	40 93 26 03 	sts	0x0326, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    1d2c:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    1d2e:	90 93 02 02 	sts	0x0202, r25
    1d32:	80 93 01 02 	sts	0x0201, r24

		}

}
    1d36:	9f 91       	pop	r25
    1d38:	8f 91       	pop	r24
    1d3a:	5f 91       	pop	r21
    1d3c:	4f 91       	pop	r20
    1d3e:	3f 91       	pop	r19
    1d40:	2f 91       	pop	r18
    1d42:	0f 90       	pop	r0
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	0f 90       	pop	r0
    1d48:	1f 90       	pop	r1
    1d4a:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    1d4c:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    1d50:	83 e3       	ldi	r24, 0x33	; 51
    1d52:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1d56:	80 91 b1 00 	lds	r24, 0x00B1
    1d5a:	86 60       	ori	r24, 0x06	; 6
    1d5c:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1d60:	80 91 70 00 	lds	r24, 0x0070
    1d64:	82 60       	ori	r24, 0x02	; 2
    1d66:	80 93 70 00 	sts	0x0070, r24
    1d6a:	80 91 01 02 	lds	r24, 0x0201
    1d6e:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    1d72:	2f ef       	ldi	r18, 0xFF	; 255
    1d74:	8f 3f       	cpi	r24, 0xFF	; 255
    1d76:	92 07       	cpc	r25, r18
    1d78:	c9 f6       	brne	.-78     	; 0x1d2c <__vector_13+0xda>
    1d7a:	dd cf       	rjmp	.-70     	; 0x1d36 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    1d7c:	20 91 03 01 	lds	r18, 0x0103
    1d80:	26 ff       	sbrs	r18, 6
    1d82:	52 c0       	rjmp	.+164    	; 0x1e28 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1d84:	20 91 68 00 	lds	r18, 0x0068
    1d88:	22 60       	ori	r18, 0x02	; 2
    1d8a:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1d8e:	20 91 6c 00 	lds	r18, 0x006C
    1d92:	20 68       	ori	r18, 0x80	; 128
    1d94:	20 93 6c 00 	sts	0x006C, r18
    1d98:	ce cf       	rjmp	.-100    	; 0x1d36 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    1d9a:	26 e3       	ldi	r18, 0x36	; 54
    1d9c:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1da0:	20 91 b1 00 	lds	r18, 0x00B1
    1da4:	26 60       	ori	r18, 0x06	; 6
    1da6:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1daa:	20 91 70 00 	lds	r18, 0x0070
    1dae:	22 60       	ori	r18, 0x02	; 2
    1db0:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1db4:	20 91 03 01 	lds	r18, 0x0103
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	20 74       	andi	r18, 0x40	; 64
    1dbc:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    1dbe:	00 24       	eor	r0, r0
    1dc0:	22 0f       	add	r18, r18
    1dc2:	33 1f       	adc	r19, r19
    1dc4:	00 1c       	adc	r0, r0
    1dc6:	22 0f       	add	r18, r18
    1dc8:	33 1f       	adc	r19, r19
    1dca:	00 1c       	adc	r0, r0
    1dcc:	23 2f       	mov	r18, r19
    1dce:	30 2d       	mov	r19, r0
    1dd0:	46 e0       	ldi	r20, 0x06	; 6
    1dd2:	50 e0       	ldi	r21, 0x00	; 0
    1dd4:	48 1b       	sub	r20, r24
    1dd6:	59 0b       	sbc	r21, r25
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <__vector_13+0x18c>
    1dda:	22 0f       	add	r18, r18
    1ddc:	33 1f       	adc	r19, r19
    1dde:	4a 95       	dec	r20
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <__vector_13+0x188>
				address_temp += temp;
    1de2:	40 91 27 03 	lds	r20, 0x0327
    1de6:	42 0f       	add	r20, r18
    1de8:	40 93 27 03 	sts	0x0327, r20
    1dec:	9f cf       	rjmp	.-194    	; 0x1d2c <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    1dee:	20 91 03 01 	lds	r18, 0x0103
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	20 74       	andi	r18, 0x40	; 64
    1df6:	30 70       	andi	r19, 0x00	; 0
    1df8:	02 2e       	mov	r0, r18
    1dfa:	23 2f       	mov	r18, r19
    1dfc:	00 0c       	add	r0, r0
    1dfe:	22 1f       	adc	r18, r18
    1e00:	33 0b       	sbc	r19, r19
    1e02:	00 0c       	add	r0, r0
    1e04:	22 1f       	adc	r18, r18
    1e06:	33 1f       	adc	r19, r19
    1e08:	20 93 28 03 	sts	0x0328, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    1e0c:	26 e3       	ldi	r18, 0x36	; 54
    1e0e:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1e12:	20 91 b1 00 	lds	r18, 0x00B1
    1e16:	26 60       	ori	r18, 0x06	; 6
    1e18:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1e1c:	20 91 70 00 	lds	r18, 0x0070
    1e20:	22 60       	ori	r18, 0x02	; 2
    1e22:	20 93 70 00 	sts	0x0070, r18
    1e26:	82 cf       	rjmp	.-252    	; 0x1d2c <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    1e28:	8c e1       	ldi	r24, 0x1C	; 28
    1e2a:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1e2e:	80 91 b1 00 	lds	r24, 0x00B1
    1e32:	86 60       	ori	r24, 0x06	; 6
    1e34:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    1e38:	80 91 70 00 	lds	r24, 0x0070
    1e3c:	82 60       	ori	r24, 0x02	; 2
    1e3e:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    1e42:	10 92 26 03 	sts	0x0326, r1
    1e46:	10 92 27 03 	sts	0x0327, r1
    1e4a:	10 92 28 03 	sts	0x0328, r1
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	6d cf       	rjmp	.-294    	; 0x1d2e <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    1e54:	8d 30       	cpi	r24, 0x0D	; 13
    1e56:	91 05       	cpc	r25, r1
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <__vector_13+0x20a>
    1e5a:	68 cf       	rjmp	.-304    	; 0x1d2c <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    1e5c:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    1e60:	80 91 68 00 	lds	r24, 0x0068
    1e64:	82 60       	ori	r24, 0x02	; 2
    1e66:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    1e6a:	80 91 6c 00 	lds	r24, 0x006C
    1e6e:	80 68       	ori	r24, 0x80	; 128
    1e70:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    1e74:	8f ef       	ldi	r24, 0xFF	; 255
    1e76:	9f ef       	ldi	r25, 0xFF	; 255
    1e78:	90 93 02 02 	sts	0x0202, r25
    1e7c:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    1e80:	80 91 28 03 	lds	r24, 0x0328
    1e84:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    1e88:	80 91 27 03 	lds	r24, 0x0327
    1e8c:	80 93 24 03 	sts	0x0324, r24
				data_ir = data_temp;
    1e90:	80 91 26 03 	lds	r24, 0x0326
    1e94:	80 93 25 03 	sts	0x0325, r24
				command_received=1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	80 93 1c 05 	sts	0x051C, r24
    1e9e:	4b cf       	rjmp	.-362    	; 0x1d36 <__vector_13+0xe4>

00001ea0 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    1ea0:	80 91 00 02 	lds	r24, 0x0200
    1ea4:	08 95       	ret

00001ea6 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    1ea6:	80 91 24 03 	lds	r24, 0x0324
    1eaa:	08 95       	ret

00001eac <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    1eac:	80 91 25 03 	lds	r24, 0x0325
    1eb0:	08 95       	ret

00001eb2 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    1eb2:	80 91 12 02 	lds	r24, 0x0212
    1eb6:	88 23       	and	r24, r24
    1eb8:	b1 f1       	breq	.+108    	; 0x1f26 <handleIRRemoteCommands+0x74>

		if(command_received) {
    1eba:	80 91 1c 05 	lds	r24, 0x051C
    1ebe:	88 23       	and	r24, r24
    1ec0:	91 f1       	breq	.+100    	; 0x1f26 <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    1ec2:	e0 91 25 03 	lds	r30, 0x0325

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    1ec6:	e0 93 1b 05 	sts	0x051B, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    1eca:	10 92 1c 05 	sts	0x051C, r1

			switch(irCommand) {
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	e5 33       	cpi	r30, 0x35	; 53
    1ed2:	f1 05       	cpc	r31, r1
    1ed4:	48 f1       	brcs	.+82     	; 0x1f28 <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    1ed6:	20 91 f7 03 	lds	r18, 0x03F7
    1eda:	30 91 f8 03 	lds	r19, 0x03F8
    1ede:	80 91 f9 03 	lds	r24, 0x03F9
    1ee2:	90 91 fa 03 	lds	r25, 0x03FA
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    1ee6:	37 fd       	sbrc	r19, 7
    1ee8:	27 c0       	rjmp	.+78     	; 0x1f38 <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    1eea:	35 95       	asr	r19
    1eec:	27 95       	ror	r18
    1eee:	35 95       	asr	r19
    1ef0:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    1ef2:	30 93 0a 04 	sts	0x040A, r19
    1ef6:	20 93 09 04 	sts	0x0409, r18
			}
			if(pwm_left_desired >= 0) {
    1efa:	97 fd       	sbrc	r25, 7
    1efc:	09 c0       	rjmp	.+18     	; 0x1f10 <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    1efe:	95 95       	asr	r25
    1f00:	87 95       	ror	r24
    1f02:	95 95       	asr	r25
    1f04:	87 95       	ror	r24
    1f06:	90 93 08 04 	sts	0x0408, r25
    1f0a:	80 93 07 04 	sts	0x0407, r24
    1f0e:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    1f10:	90 95       	com	r25
    1f12:	81 95       	neg	r24
    1f14:	9f 4f       	sbci	r25, 0xFF	; 255
    1f16:	95 95       	asr	r25
    1f18:	87 95       	ror	r24
    1f1a:	95 95       	asr	r25
    1f1c:	87 95       	ror	r24
    1f1e:	90 93 08 04 	sts	0x0408, r25
    1f22:	80 93 07 04 	sts	0x0407, r24
    1f26:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    1f28:	ee 58       	subi	r30, 0x8E	; 142
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	ee 0f       	add	r30, r30
    1f2e:	ff 1f       	adc	r31, r31
    1f30:	05 90       	lpm	r0, Z+
    1f32:	f4 91       	lpm	r31, Z+
    1f34:	e0 2d       	mov	r30, r0
    1f36:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    1f38:	30 95       	com	r19
    1f3a:	21 95       	neg	r18
    1f3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3e:	d5 cf       	rjmp	.-86     	; 0x1eea <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    1f40:	80 93 4f 05 	sts	0x054F, r24
							cliffAvoidanceEnabled = 0;
    1f44:	10 92 50 05 	sts	0x0550, r1
    1f48:	c6 cf       	rjmp	.-116    	; 0x1ed6 <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    1f4a:	10 92 4f 05 	sts	0x054F, r1
							cliffAvoidanceEnabled = 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	80 93 50 05 	sts	0x0550, r24
    1f54:	20 91 f7 03 	lds	r18, 0x03F7
    1f58:	30 91 f8 03 	lds	r19, 0x03F8
    1f5c:	80 91 f9 03 	lds	r24, 0x03F9
    1f60:	90 91 fa 03 	lds	r25, 0x03FA
							break;
    1f64:	c0 cf       	rjmp	.-128    	; 0x1ee6 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    1f66:	10 92 4f 05 	sts	0x054F, r1
    1f6a:	20 91 f7 03 	lds	r18, 0x03F7
    1f6e:	30 91 f8 03 	lds	r19, 0x03F8
    1f72:	80 91 f9 03 	lds	r24, 0x03F9
    1f76:	90 91 fa 03 	lds	r25, 0x03FA
					break;
    1f7a:	b5 cf       	rjmp	.-150    	; 0x1ee6 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	80 93 4f 05 	sts	0x054F, r24
    1f82:	20 91 f7 03 	lds	r18, 0x03F7
    1f86:	30 91 f8 03 	lds	r19, 0x03F8
    1f8a:	80 91 f9 03 	lds	r24, 0x03F9
    1f8e:	90 91 fa 03 	lds	r25, 0x03FA
					break;
    1f92:	a9 cf       	rjmp	.-174    	; 0x1ee6 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    1f94:	80 91 f9 03 	lds	r24, 0x03F9
    1f98:	90 91 fa 03 	lds	r25, 0x03FA
    1f9c:	4e 97       	sbiw	r24, 0x1e	; 30
    1f9e:	90 93 fa 03 	sts	0x03FA, r25
    1fa2:	80 93 f9 03 	sts	0x03F9, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1fa6:	2e ef       	ldi	r18, 0xFE	; 254
    1fa8:	80 30       	cpi	r24, 0x00	; 0
    1faa:	92 07       	cpc	r25, r18
    1fac:	9c f5       	brge	.+102    	; 0x2014 <handleIRRemoteCommands+0x162>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	9e ef       	ldi	r25, 0xFE	; 254
    1fb2:	90 93 fa 03 	sts	0x03FA, r25
    1fb6:	80 93 f9 03 	sts	0x03F9, r24
    1fba:	20 91 f7 03 	lds	r18, 0x03F7
    1fbe:	30 91 f8 03 	lds	r19, 0x03F8
    1fc2:	91 cf       	rjmp	.-222    	; 0x1ee6 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    1fc4:	20 91 f7 03 	lds	r18, 0x03F7
    1fc8:	30 91 f8 03 	lds	r19, 0x03F8
    1fcc:	80 91 f5 03 	lds	r24, 0x03F5
    1fd0:	90 91 f6 03 	lds	r25, 0x03F6
    1fd4:	28 17       	cp	r18, r24
    1fd6:	39 07       	cpc	r19, r25
    1fd8:	24 f0       	brlt	.+8      	; 0x1fe2 <handleIRRemoteCommands+0x130>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    1fda:	20 91 f9 03 	lds	r18, 0x03F9
    1fde:	30 91 fa 03 	lds	r19, 0x03FA
					}
					pwm_right_desired -= STEP_MOTORS;
    1fe2:	2e 51       	subi	r18, 0x1E	; 30
    1fe4:	30 40       	sbci	r19, 0x00	; 0
    1fe6:	30 93 f8 03 	sts	0x03F8, r19
    1fea:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired -= STEP_MOTORS;
    1fee:	c9 01       	movw	r24, r18
    1ff0:	30 93 fa 03 	sts	0x03FA, r19
    1ff4:	20 93 f9 03 	sts	0x03F9, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    1ff8:	4e ef       	ldi	r20, 0xFE	; 254
    1ffa:	20 30       	cpi	r18, 0x00	; 0
    1ffc:	34 07       	cpc	r19, r20
    1ffe:	34 f4       	brge	.+12     	; 0x200c <handleIRRemoteCommands+0x15a>
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	5e ef       	ldi	r21, 0xFE	; 254
    2004:	50 93 f8 03 	sts	0x03F8, r21
    2008:	40 93 f7 03 	sts	0x03F7, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    200c:	4e ef       	ldi	r20, 0xFE	; 254
    200e:	20 30       	cpi	r18, 0x00	; 0
    2010:	34 07       	cpc	r19, r20
    2012:	6c f2       	brlt	.-102    	; 0x1fae <handleIRRemoteCommands+0xfc>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2014:	20 91 f7 03 	lds	r18, 0x03F7
    2018:	30 91 f8 03 	lds	r19, 0x03F8
    201c:	64 cf       	rjmp	.-312    	; 0x1ee6 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    201e:	20 91 f7 03 	lds	r18, 0x03F7
    2022:	30 91 f8 03 	lds	r19, 0x03F8
    2026:	2e 51       	subi	r18, 0x1E	; 30
    2028:	30 40       	sbci	r19, 0x00	; 0
    202a:	30 93 f8 03 	sts	0x03F8, r19
    202e:	20 93 f7 03 	sts	0x03F7, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2032:	4e ef       	ldi	r20, 0xFE	; 254
    2034:	20 30       	cpi	r18, 0x00	; 0
    2036:	34 07       	cpc	r19, r20
    2038:	0c f0       	brlt	.+2      	; 0x203c <handleIRRemoteCommands+0x18a>
    203a:	17 c1       	rjmp	.+558    	; 0x226a <__stack+0x6b>
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	9e ef       	ldi	r25, 0xFE	; 254
    2040:	90 93 f8 03 	sts	0x03F8, r25
    2044:	80 93 f7 03 	sts	0x03F7, r24
    2048:	80 91 f9 03 	lds	r24, 0x03F9
    204c:	90 91 fa 03 	lds	r25, 0x03FA
    2050:	20 e8       	ldi	r18, 0x80	; 128
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4e cf       	rjmp	.-356    	; 0x1ef2 <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    2056:	20 91 f7 03 	lds	r18, 0x03F7
    205a:	30 91 f8 03 	lds	r19, 0x03F8
    205e:	2e 51       	subi	r18, 0x1E	; 30
    2060:	30 40       	sbci	r19, 0x00	; 0
    2062:	30 93 f8 03 	sts	0x03F8, r19
    2066:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired += STEP_MOTORS;
    206a:	80 91 f9 03 	lds	r24, 0x03F9
    206e:	90 91 fa 03 	lds	r25, 0x03FA
    2072:	4e 96       	adiw	r24, 0x1e	; 30
    2074:	90 93 fa 03 	sts	0x03FA, r25
    2078:	80 93 f9 03 	sts	0x03F9, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    207c:	4e ef       	ldi	r20, 0xFE	; 254
    207e:	20 30       	cpi	r18, 0x00	; 0
    2080:	34 07       	cpc	r19, r20
    2082:	34 f4       	brge	.+12     	; 0x2090 <handleIRRemoteCommands+0x1de>
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	3e ef       	ldi	r19, 0xFE	; 254
    2088:	30 93 f8 03 	sts	0x03F8, r19
    208c:	20 93 f7 03 	sts	0x03F7, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2090:	42 e0       	ldi	r20, 0x02	; 2
    2092:	81 30       	cpi	r24, 0x01	; 1
    2094:	94 07       	cpc	r25, r20
    2096:	0c f4       	brge	.+2      	; 0x209a <handleIRRemoteCommands+0x1e8>
    2098:	26 cf       	rjmp	.-436    	; 0x1ee6 <handleIRRemoteCommands+0x34>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	92 e0       	ldi	r25, 0x02	; 2
    209e:	90 93 fa 03 	sts	0x03FA, r25
    20a2:	80 93 f9 03 	sts	0x03F9, r24
    20a6:	1f cf       	rjmp	.-450    	; 0x1ee6 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    20a8:	20 91 f7 03 	lds	r18, 0x03F7
    20ac:	30 91 f8 03 	lds	r19, 0x03F8
    20b0:	80 91 f9 03 	lds	r24, 0x03F9
    20b4:	90 91 fa 03 	lds	r25, 0x03FA
    20b8:	82 17       	cp	r24, r18
    20ba:	93 07       	cpc	r25, r19
    20bc:	0c f4       	brge	.+2      	; 0x20c0 <handleIRRemoteCommands+0x20e>
    20be:	da c0       	rjmp	.+436    	; 0x2274 <__stack+0x75>
    20c0:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    20c2:	22 5e       	subi	r18, 0xE2	; 226
    20c4:	3f 4f       	sbci	r19, 0xFF	; 255
    20c6:	30 93 f8 03 	sts	0x03F8, r19
    20ca:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired += STEP_MOTORS;
    20ce:	4e 96       	adiw	r24, 0x1e	; 30
    20d0:	90 93 fa 03 	sts	0x03FA, r25
    20d4:	80 93 f9 03 	sts	0x03F9, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    20d8:	42 e0       	ldi	r20, 0x02	; 2
    20da:	21 30       	cpi	r18, 0x01	; 1
    20dc:	34 07       	cpc	r19, r20
    20de:	34 f0       	brlt	.+12     	; 0x20ec <handleIRRemoteCommands+0x23a>
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	32 e0       	ldi	r19, 0x02	; 2
    20e4:	30 93 f8 03 	sts	0x03F8, r19
    20e8:	20 93 f7 03 	sts	0x03F7, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    20ec:	22 e0       	ldi	r18, 0x02	; 2
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	92 07       	cpc	r25, r18
    20f2:	0c f4       	brge	.+2      	; 0x20f6 <handleIRRemoteCommands+0x244>
    20f4:	8f cf       	rjmp	.-226    	; 0x2014 <handleIRRemoteCommands+0x162>
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	92 e0       	ldi	r25, 0x02	; 2
    20fa:	90 93 fa 03 	sts	0x03FA, r25
    20fe:	80 93 f9 03 	sts	0x03F9, r24
    2102:	20 91 f7 03 	lds	r18, 0x03F7
    2106:	30 91 f8 03 	lds	r19, 0x03F8
    210a:	ed ce       	rjmp	.-550    	; 0x1ee6 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    210c:	20 91 f7 03 	lds	r18, 0x03F7
    2110:	30 91 f8 03 	lds	r19, 0x03F8
    2114:	22 5e       	subi	r18, 0xE2	; 226
    2116:	3f 4f       	sbci	r19, 0xFF	; 255
    2118:	30 93 f8 03 	sts	0x03F8, r19
    211c:	20 93 f7 03 	sts	0x03F7, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2120:	42 e0       	ldi	r20, 0x02	; 2
    2122:	21 30       	cpi	r18, 0x01	; 1
    2124:	34 07       	cpc	r19, r20
    2126:	0c f4       	brge	.+2      	; 0x212a <handleIRRemoteCommands+0x278>
    2128:	a0 c0       	rjmp	.+320    	; 0x226a <__stack+0x6b>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	92 e0       	ldi	r25, 0x02	; 2
    212e:	90 93 f8 03 	sts	0x03F8, r25
    2132:	80 93 f7 03 	sts	0x03F7, r24
    2136:	80 91 f9 03 	lds	r24, 0x03F9
    213a:	90 91 fa 03 	lds	r25, 0x03FA
    213e:	20 e8       	ldi	r18, 0x80	; 128
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	d7 ce       	rjmp	.-594    	; 0x1ef2 <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    2144:	80 91 1d 05 	lds	r24, 0x051D
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	01 96       	adiw	r24, 0x01	; 1
    214c:	65 e0       	ldi	r22, 0x05	; 5
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__divmodhi4>
    2154:	80 93 1d 05 	sts	0x051D, r24

					if(colorState==0) {			// turn on blue and off all IRs
    2158:	88 23       	and	r24, r24
    215a:	09 f0       	breq	.+2      	; 0x215e <handleIRRemoteCommands+0x2ac>
    215c:	8d c0       	rjmp	.+282    	; 0x2278 <__stack+0x79>
						LED_IR1_HIGH;
    215e:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    2160:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    2162:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    2166:	8f ef       	ldi	r24, 0xFF	; 255
    2168:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    216c:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    2170:	0e 94 bc 22 	call	0x4578	; 0x4578 <updateRedLed>
					updateGreenLed(pwm_green);
    2174:	80 91 0d 02 	lds	r24, 0x020D
    2178:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <updateGreenLed>
					updateBlueLed(pwm_blue);
    217c:	80 91 0e 02 	lds	r24, 0x020E
    2180:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <updateBlueLed>
    2184:	20 91 f7 03 	lds	r18, 0x03F7
    2188:	30 91 f8 03 	lds	r19, 0x03F8
    218c:	80 91 f9 03 	lds	r24, 0x03F9
    2190:	90 91 fa 03 	lds	r25, 0x03FA

	               	break;
    2194:	a8 ce       	rjmp	.-688    	; 0x1ee6 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    2196:	80 91 1e 05 	lds	r24, 0x051E
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	83 70       	andi	r24, 0x03	; 3
    21a0:	90 70       	andi	r25, 0x00	; 0
    21a2:	80 93 1e 05 	sts	0x051E, r24
					switch(behaviorState) {
    21a6:	82 30       	cpi	r24, 0x02	; 2
    21a8:	09 f4       	brne	.+2      	; 0x21ac <handleIRRemoteCommands+0x2fa>
    21aa:	cf ce       	rjmp	.-610    	; 0x1f4a <handleIRRemoteCommands+0x98>
    21ac:	83 30       	cpi	r24, 0x03	; 3
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <handleIRRemoteCommands+0x300>
    21b0:	53 c0       	rjmp	.+166    	; 0x2258 <__stack+0x59>
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <handleIRRemoteCommands+0x306>
    21b6:	c4 ce       	rjmp	.-632    	; 0x1f40 <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    21b8:	10 92 4f 05 	sts	0x054F, r1
							cliffAvoidanceEnabled = 0;
    21bc:	10 92 50 05 	sts	0x0550, r1
    21c0:	8a ce       	rjmp	.-748    	; 0x1ed6 <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    21c2:	20 91 f7 03 	lds	r18, 0x03F7
    21c6:	30 91 f8 03 	lds	r19, 0x03F8
    21ca:	22 5e       	subi	r18, 0xE2	; 226
    21cc:	3f 4f       	sbci	r19, 0xFF	; 255
    21ce:	30 93 f8 03 	sts	0x03F8, r19
    21d2:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired -= STEP_MOTORS;
    21d6:	80 91 f9 03 	lds	r24, 0x03F9
    21da:	90 91 fa 03 	lds	r25, 0x03FA
    21de:	4e 97       	sbiw	r24, 0x1e	; 30
    21e0:	90 93 fa 03 	sts	0x03FA, r25
    21e4:	80 93 f9 03 	sts	0x03F9, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    21e8:	42 e0       	ldi	r20, 0x02	; 2
    21ea:	21 30       	cpi	r18, 0x01	; 1
    21ec:	34 07       	cpc	r19, r20
    21ee:	34 f0       	brlt	.+12     	; 0x21fc <handleIRRemoteCommands+0x34a>
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	32 e0       	ldi	r19, 0x02	; 2
    21f4:	30 93 f8 03 	sts	0x03F8, r19
    21f8:	20 93 f7 03 	sts	0x03F7, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    21fc:	4e ef       	ldi	r20, 0xFE	; 254
    21fe:	80 30       	cpi	r24, 0x00	; 0
    2200:	94 07       	cpc	r25, r20
    2202:	0c f0       	brlt	.+2      	; 0x2206 <__stack+0x7>
    2204:	70 ce       	rjmp	.-800    	; 0x1ee6 <handleIRRemoteCommands+0x34>
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	9e ef       	ldi	r25, 0xFE	; 254
    220a:	90 93 fa 03 	sts	0x03FA, r25
    220e:	80 93 f9 03 	sts	0x03F9, r24
    2212:	69 ce       	rjmp	.-814    	; 0x1ee6 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    2214:	10 92 f8 03 	sts	0x03F8, r1
    2218:	10 92 f7 03 	sts	0x03F7, r1
					pwm_left_desired = 0;
    221c:	10 92 fa 03 	sts	0x03FA, r1
    2220:	10 92 f9 03 	sts	0x03F9, r1
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	5e ce       	rjmp	.-836    	; 0x1eea <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    222e:	80 91 f9 03 	lds	r24, 0x03F9
    2232:	90 91 fa 03 	lds	r25, 0x03FA
    2236:	4e 96       	adiw	r24, 0x1e	; 30
    2238:	90 93 fa 03 	sts	0x03FA, r25
    223c:	80 93 f9 03 	sts	0x03F9, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2240:	22 e0       	ldi	r18, 0x02	; 2
    2242:	81 30       	cpi	r24, 0x01	; 1
    2244:	92 07       	cpc	r25, r18
    2246:	0c f4       	brge	.+2      	; 0x224a <__stack+0x4b>
    2248:	e5 ce       	rjmp	.-566    	; 0x2014 <handleIRRemoteCommands+0x162>
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	92 e0       	ldi	r25, 0x02	; 2
    224e:	90 93 fa 03 	sts	0x03FA, r25
    2252:	80 93 f9 03 	sts	0x03F9, r24
    2256:	de ce       	rjmp	.-580    	; 0x2014 <handleIRRemoteCommands+0x162>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	80 93 4f 05 	sts	0x054F, r24
							cliffAvoidanceEnabled = 1;
    225e:	80 93 50 05 	sts	0x0550, r24
    2262:	20 91 f7 03 	lds	r18, 0x03F7
    2266:	30 91 f8 03 	lds	r19, 0x03F8
    226a:	80 91 f9 03 	lds	r24, 0x03F9
    226e:	90 91 fa 03 	lds	r25, 0x03FA
							break;
    2272:	39 ce       	rjmp	.-910    	; 0x1ee6 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2274:	c9 01       	movw	r24, r18
    2276:	25 cf       	rjmp	.-438    	; 0x20c2 <handleIRRemoteCommands+0x210>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    2278:	81 30       	cpi	r24, 0x01	; 1
    227a:	61 f0       	breq	.+24     	; 0x2294 <__stack+0x95>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    227c:	82 30       	cpi	r24, 0x02	; 2
    227e:	91 f0       	breq	.+36     	; 0x22a4 <__stack+0xa5>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    2280:	83 30       	cpi	r24, 0x03	; 3
    2282:	d9 f0       	breq	.+54     	; 0x22ba <__stack+0xbb>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    2284:	8f ef       	ldi	r24, 0xFF	; 255
    2286:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    228a:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    228e:	80 93 0c 02 	sts	0x020C, r24
    2292:	6e cf       	rjmp	.-292    	; 0x2170 <handleIRRemoteCommands+0x2be>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    2294:	8f ef       	ldi	r24, 0xFF	; 255
    2296:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    229a:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    229e:	80 93 0c 02 	sts	0x020C, r24
    22a2:	66 cf       	rjmp	.-308    	; 0x2170 <handleIRRemoteCommands+0x2be>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    22a4:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    22a6:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    22a8:	8f ef       	ldi	r24, 0xFF	; 255
    22aa:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    22ae:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    22b2:	10 92 0c 02 	sts	0x020C, r1
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	5b cf       	rjmp	.-330    	; 0x2170 <handleIRRemoteCommands+0x2be>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    22ba:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    22be:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    22c2:	10 92 0c 02 	sts	0x020C, r1
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	53 cf       	rjmp	.-346    	; 0x2170 <handleIRRemoteCommands+0x2be>

000022ca <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    22ca:	08 95       	ret

000022cc <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    22cc:	0f 93       	push	r16
    22ce:	1f 93       	push	r17
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <start_vertical_speed_control_left+0x14>
    22de:	b8 c0       	rjmp	.+368    	; 0x2450 <start_vertical_speed_control_left+0x184>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    22e0:	20 91 32 05 	lds	r18, 0x0532
    22e4:	30 91 33 05 	lds	r19, 0x0533
    22e8:	41 e0       	ldi	r20, 0x01	; 1
    22ea:	2e 30       	cpi	r18, 0x0E	; 14
    22ec:	34 07       	cpc	r19, r20
    22ee:	0c f4       	brge	.+2      	; 0x22f2 <start_vertical_speed_control_left+0x26>
    22f0:	89 c0       	rjmp	.+274    	; 0x2404 <start_vertical_speed_control_left+0x138>
		if(*pwm_left > 0) {
    22f2:	18 16       	cp	r1, r24
    22f4:	19 06       	cpc	r1, r25
    22f6:	0c f0       	brlt	.+2      	; 0x22fa <start_vertical_speed_control_left+0x2e>
    22f8:	14 c1       	rjmp	.+552    	; 0x2522 <start_vertical_speed_control_left+0x256>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    22fa:	88 e6       	ldi	r24, 0x68	; 104
    22fc:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    22fe:	82 1b       	sub	r24, r18
    2300:	93 0b       	sbc	r25, r19
    2302:	95 95       	asr	r25
    2304:	87 95       	ror	r24
    2306:	95 95       	asr	r25
    2308:	87 95       	ror	r24
    230a:	29 e1       	ldi	r18, 0x19	; 25
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	28 1b       	sub	r18, r24
    2310:	39 0b       	sbc	r19, r25
    2312:	30 93 04 02 	sts	0x0204, r19
    2316:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    231a:	80 91 54 05 	lds	r24, 0x0554
    231e:	90 91 55 05 	lds	r25, 0x0555
    2322:	90 93 6f 05 	sts	0x056F, r25
    2326:	80 93 6e 05 	sts	0x056E, r24
	if(*pwm_left >= 0) {
    232a:	20 81       	ld	r18, Z
    232c:	31 81       	ldd	r19, Z+1	; 0x01
    232e:	37 fd       	sbrc	r19, 7
    2330:	d3 c0       	rjmp	.+422    	; 0x24d8 <start_vertical_speed_control_left+0x20c>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2332:	40 91 ef 03 	lds	r20, 0x03EF
    2336:	50 91 f0 03 	lds	r21, 0x03F0
    233a:	b9 01       	movw	r22, r18
    233c:	64 1b       	sub	r22, r20
    233e:	75 0b       	sbc	r23, r21
    2340:	ab 01       	movw	r20, r22
    2342:	70 93 55 05 	sts	0x0555, r23
    2346:	60 93 54 05 	sts	0x0554, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    234a:	20 91 ff 03 	lds	r18, 0x03FF
    234e:	30 91 00 04 	lds	r19, 0x0400
    2352:	24 0f       	add	r18, r20
    2354:	35 1f       	adc	r19, r21
    2356:	30 93 00 04 	sts	0x0400, r19
    235a:	20 93 ff 03 	sts	0x03FF, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    235e:	76 e0       	ldi	r23, 0x06	; 6
    2360:	21 34       	cpi	r18, 0x41	; 65
    2362:	37 07       	cpc	r19, r23
    2364:	0c f4       	brge	.+2      	; 0x2368 <start_vertical_speed_control_left+0x9c>
    2366:	85 c0       	rjmp	.+266    	; 0x2472 <start_vertical_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    2368:	20 e4       	ldi	r18, 0x40	; 64
    236a:	36 e0       	ldi	r19, 0x06	; 6
    236c:	30 93 00 04 	sts	0x0400, r19
    2370:	20 93 ff 03 	sts	0x03FF, r18
    2374:	60 ec       	ldi	r22, 0xC0	; 192
    2376:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    2378:	9a 01       	movw	r18, r20
    237a:	22 0f       	add	r18, r18
    237c:	33 1f       	adc	r19, r19
    237e:	24 0f       	add	r18, r20
    2380:	35 1f       	adc	r19, r21
    2382:	22 0f       	add	r18, r18
    2384:	33 1f       	adc	r19, r19
    2386:	22 0f       	add	r18, r18
    2388:	33 1f       	adc	r19, r19
    238a:	22 0f       	add	r18, r18
    238c:	33 1f       	adc	r19, r19
    238e:	24 0f       	add	r18, r20
    2390:	35 1f       	adc	r19, r21
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    2392:	00 81       	ld	r16, Z
    2394:	11 81       	ldd	r17, Z+1	; 0x01
    2396:	c0 91 03 02 	lds	r28, 0x0203
    239a:	d0 91 04 02 	lds	r29, 0x0204
    239e:	0c 9f       	mul	r16, r28
    23a0:	d0 01       	movw	r26, r0
    23a2:	0d 9f       	mul	r16, r29
    23a4:	b0 0d       	add	r27, r0
    23a6:	1c 9f       	mul	r17, r28
    23a8:	b0 0d       	add	r27, r0
    23aa:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    23ac:	2a 0f       	add	r18, r26
    23ae:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    23b0:	84 1b       	sub	r24, r20
    23b2:	95 0b       	sbc	r25, r21
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	28 0f       	add	r18, r24
    23ba:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    23bc:	26 0f       	add	r18, r22
    23be:	37 1f       	adc	r19, r23
    23c0:	30 93 fe 03 	sts	0x03FE, r19
    23c4:	20 93 fd 03 	sts	0x03FD, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    23c8:	37 fd       	sbrc	r19, 7
    23ca:	69 c0       	rjmp	.+210    	; 0x249e <start_vertical_speed_control_left+0x1d2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    23cc:	12 16       	cp	r1, r18
    23ce:	13 06       	cpc	r1, r19
    23d0:	0c f0       	brlt	.+2      	; 0x23d4 <start_vertical_speed_control_left+0x108>
    23d2:	6f c0       	rjmp	.+222    	; 0x24b2 <start_vertical_speed_control_left+0x1e6>
    23d4:	80 81       	ld	r24, Z
    23d6:	91 81       	ldd	r25, Z+1	; 0x01
    23d8:	97 fd       	sbrc	r25, 7
    23da:	89 c0       	rjmp	.+274    	; 0x24ee <start_vertical_speed_control_left+0x222>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    23dc:	7d e5       	ldi	r23, 0x5D	; 93
    23de:	21 3c       	cpi	r18, 0xC1	; 193
    23e0:	37 07       	cpc	r19, r23
    23e2:	0c f4       	brge	.+2      	; 0x23e6 <start_vertical_speed_control_left+0x11a>
    23e4:	66 c0       	rjmp	.+204    	; 0x24b2 <start_vertical_speed_control_left+0x1e6>
    23e6:	80 ec       	ldi	r24, 0xC0	; 192
    23e8:	9d e5       	ldi	r25, 0x5D	; 93
    23ea:	90 93 fe 03 	sts	0x03FE, r25
    23ee:	80 93 fd 03 	sts	0x03FD, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	92 e0       	ldi	r25, 0x02	; 2
    23f6:	91 83       	std	Z+1, r25	; 0x01
    23f8:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	1f 91       	pop	r17
    2400:	0f 91       	pop	r16
    2402:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2404:	24 3b       	cpi	r18, 0xB4	; 180
    2406:	31 05       	cpc	r19, r1
    2408:	94 f4       	brge	.+36     	; 0x242e <start_vertical_speed_control_left+0x162>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    240a:	2a 35       	cpi	r18, 0x5A	; 90
    240c:	31 05       	cpc	r19, r1
    240e:	7c f4       	brge	.+30     	; 0x242e <start_vertical_speed_control_left+0x162>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    2410:	18 16       	cp	r1, r24
    2412:	19 06       	cpc	r1, r25
    2414:	0c f0       	brlt	.+2      	; 0x2418 <start_vertical_speed_control_left+0x14c>
    2416:	93 c0       	rjmp	.+294    	; 0x253e <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2418:	35 95       	asr	r19
    241a:	27 95       	ror	r18
    241c:	35 95       	asr	r19
    241e:	27 95       	ror	r18
    2420:	27 5e       	subi	r18, 0xE7	; 231
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	30 93 04 02 	sts	0x0204, r19
    2428:	20 93 03 02 	sts	0x0203, r18
    242c:	76 cf       	rjmp	.-276    	; 0x231a <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    242e:	18 16       	cp	r1, r24
    2430:	19 06       	cpc	r1, r25
    2432:	94 f5       	brge	.+100    	; 0x2498 <start_vertical_speed_control_left+0x1cc>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    2434:	84 eb       	ldi	r24, 0xB4	; 180
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	82 1b       	sub	r24, r18
    243a:	93 0b       	sbc	r25, r19
    243c:	95 95       	asr	r25
    243e:	87 95       	ror	r24
    2440:	95 95       	asr	r25
    2442:	87 95       	ror	r24
    2444:	49 96       	adiw	r24, 0x19	; 25
    2446:	90 93 04 02 	sts	0x0204, r25
    244a:	80 93 03 02 	sts	0x0203, r24
    244e:	65 cf       	rjmp	.-310    	; 0x231a <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2450:	10 92 00 04 	sts	0x0400, r1
    2454:	10 92 ff 03 	sts	0x03FF, r1
		delta_left_speed_current = 0;
    2458:	10 92 55 05 	sts	0x0555, r1
    245c:	10 92 54 05 	sts	0x0554, r1
		delta_left_speed_prev = 0;
    2460:	10 92 6f 05 	sts	0x056F, r1
    2464:	10 92 6e 05 	sts	0x056E, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2472:	69 ef       	ldi	r22, 0xF9	; 249
    2474:	20 3c       	cpi	r18, 0xC0	; 192
    2476:	36 07       	cpc	r19, r22
    2478:	4c f4       	brge	.+18     	; 0x248c <start_vertical_speed_control_left+0x1c0>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    247a:	20 ec       	ldi	r18, 0xC0	; 192
    247c:	39 ef       	ldi	r19, 0xF9	; 249
    247e:	30 93 00 04 	sts	0x0400, r19
    2482:	20 93 ff 03 	sts	0x03FF, r18
    2486:	60 e4       	ldi	r22, 0x40	; 64
    2488:	7d ee       	ldi	r23, 0xED	; 237
    248a:	76 cf       	rjmp	.-276    	; 0x2378 <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    248c:	b9 01       	movw	r22, r18
    248e:	66 0f       	add	r22, r22
    2490:	77 1f       	adc	r23, r23
    2492:	62 0f       	add	r22, r18
    2494:	73 1f       	adc	r23, r19
    2496:	70 cf       	rjmp	.-288    	; 0x2378 <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2498:	84 eb       	ldi	r24, 0xB4	; 180
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	30 cf       	rjmp	.-416    	; 0x22fe <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    249e:	80 81       	ld	r24, Z
    24a0:	91 81       	ldd	r25, Z+1	; 0x01
    24a2:	97 fd       	sbrc	r25, 7
    24a4:	06 c0       	rjmp	.+12     	; 0x24b2 <start_vertical_speed_control_left+0x1e6>
		pwm_left_speed_controller = 0;
    24a6:	10 92 fe 03 	sts	0x03FE, r1
    24aa:	10 92 fd 03 	sts	0x03FD, r1
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    24b2:	82 ea       	ldi	r24, 0xA2	; 162
    24b4:	20 34       	cpi	r18, 0x40	; 64
    24b6:	38 07       	cpc	r19, r24
    24b8:	04 f5       	brge	.+64     	; 0x24fa <start_vertical_speed_control_left+0x22e>
    24ba:	80 e4       	ldi	r24, 0x40	; 64
    24bc:	92 ea       	ldi	r25, 0xA2	; 162
    24be:	90 93 fe 03 	sts	0x03FE, r25
    24c2:	80 93 fd 03 	sts	0x03FD, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	9e ef       	ldi	r25, 0xFE	; 254
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	80 83       	st	Z, r24


}
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	1f 91       	pop	r17
    24d4:	0f 91       	pop	r16
    24d6:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    24d8:	40 91 ef 03 	lds	r20, 0x03EF
    24dc:	50 91 f0 03 	lds	r21, 0x03F0
    24e0:	42 0f       	add	r20, r18
    24e2:	53 1f       	adc	r21, r19
    24e4:	50 93 55 05 	sts	0x0555, r21
    24e8:	40 93 54 05 	sts	0x0554, r20
    24ec:	2e cf       	rjmp	.-420    	; 0x234a <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    24ee:	10 92 fe 03 	sts	0x03FE, r1
    24f2:	10 92 fd 03 	sts	0x03FD, r1
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    24fa:	35 95       	asr	r19
    24fc:	27 95       	ror	r18
    24fe:	35 95       	asr	r19
    2500:	27 95       	ror	r18
    2502:	35 95       	asr	r19
    2504:	27 95       	ror	r18
    2506:	35 95       	asr	r19
    2508:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    250a:	31 83       	std	Z+1, r19	; 0x01
    250c:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    250e:	42 e0       	ldi	r20, 0x02	; 2
    2510:	21 30       	cpi	r18, 0x01	; 1
    2512:	34 07       	cpc	r19, r20
    2514:	0c f0       	brlt	.+2      	; 0x2518 <start_vertical_speed_control_left+0x24c>
    2516:	6d cf       	rjmp	.-294    	; 0x23f2 <start_vertical_speed_control_left+0x126>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2518:	6e ef       	ldi	r22, 0xFE	; 254
    251a:	20 30       	cpi	r18, 0x00	; 0
    251c:	36 07       	cpc	r19, r22
    251e:	9c f2       	brlt	.-90     	; 0x24c6 <start_vertical_speed_control_left+0x1fa>
    2520:	6c cf       	rjmp	.-296    	; 0x23fa <start_vertical_speed_control_left+0x12e>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    2522:	88 e6       	ldi	r24, 0x68	; 104
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	82 1b       	sub	r24, r18
    2528:	93 0b       	sbc	r25, r19
    252a:	95 95       	asr	r25
    252c:	87 95       	ror	r24
    252e:	95 95       	asr	r25
    2530:	87 95       	ror	r24
    2532:	49 96       	adiw	r24, 0x19	; 25
    2534:	90 93 04 02 	sts	0x0204, r25
    2538:	80 93 03 02 	sts	0x0203, r24
    253c:	ee ce       	rjmp	.-548    	; 0x231a <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    253e:	35 95       	asr	r19
    2540:	27 95       	ror	r18
    2542:	35 95       	asr	r19
    2544:	27 95       	ror	r18
    2546:	89 e1       	ldi	r24, 0x19	; 25
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	82 1b       	sub	r24, r18
    254c:	93 0b       	sbc	r25, r19
    254e:	90 93 04 02 	sts	0x0204, r25
    2552:	80 93 03 02 	sts	0x0203, r24
    2556:	e1 ce       	rjmp	.-574    	; 0x231a <start_vertical_speed_control_left+0x4e>

00002558 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2558:	0f 93       	push	r16
    255a:	1f 93       	push	r17
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	09 f4       	brne	.+2      	; 0x256c <start_vertical_speed_control_right+0x14>
    256a:	b8 c0       	rjmp	.+368    	; 0x26dc <start_vertical_speed_control_right+0x184>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    256c:	20 91 32 05 	lds	r18, 0x0532
    2570:	30 91 33 05 	lds	r19, 0x0533
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	2e 30       	cpi	r18, 0x0E	; 14
    2578:	34 07       	cpc	r19, r20
    257a:	0c f4       	brge	.+2      	; 0x257e <start_vertical_speed_control_right+0x26>
    257c:	89 c0       	rjmp	.+274    	; 0x2690 <start_vertical_speed_control_right+0x138>
		if(*pwm_right > 0) {
    257e:	18 16       	cp	r1, r24
    2580:	19 06       	cpc	r1, r25
    2582:	0c f0       	brlt	.+2      	; 0x2586 <start_vertical_speed_control_right+0x2e>
    2584:	14 c1       	rjmp	.+552    	; 0x27ae <start_vertical_speed_control_right+0x256>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    2586:	88 e6       	ldi	r24, 0x68	; 104
    2588:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    258a:	82 1b       	sub	r24, r18
    258c:	93 0b       	sbc	r25, r19
    258e:	95 95       	asr	r25
    2590:	87 95       	ror	r24
    2592:	95 95       	asr	r25
    2594:	87 95       	ror	r24
    2596:	29 e1       	ldi	r18, 0x19	; 25
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	28 1b       	sub	r18, r24
    259c:	39 0b       	sbc	r19, r25
    259e:	30 93 06 02 	sts	0x0206, r19
    25a2:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    25a6:	80 91 7d 05 	lds	r24, 0x057D
    25aa:	90 91 7e 05 	lds	r25, 0x057E
    25ae:	90 93 57 05 	sts	0x0557, r25
    25b2:	80 93 56 05 	sts	0x0556, r24
	if(*pwm_right >= 0) {
    25b6:	20 81       	ld	r18, Z
    25b8:	31 81       	ldd	r19, Z+1	; 0x01
    25ba:	37 fd       	sbrc	r19, 7
    25bc:	d3 c0       	rjmp	.+422    	; 0x2764 <start_vertical_speed_control_right+0x20c>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    25be:	40 91 f1 03 	lds	r20, 0x03F1
    25c2:	50 91 f2 03 	lds	r21, 0x03F2
    25c6:	b9 01       	movw	r22, r18
    25c8:	64 1b       	sub	r22, r20
    25ca:	75 0b       	sbc	r23, r21
    25cc:	ab 01       	movw	r20, r22
    25ce:	70 93 7e 05 	sts	0x057E, r23
    25d2:	60 93 7d 05 	sts	0x057D, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    25d6:	20 91 01 04 	lds	r18, 0x0401
    25da:	30 91 02 04 	lds	r19, 0x0402
    25de:	24 0f       	add	r18, r20
    25e0:	35 1f       	adc	r19, r21
    25e2:	30 93 02 04 	sts	0x0402, r19
    25e6:	20 93 01 04 	sts	0x0401, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    25ea:	76 e0       	ldi	r23, 0x06	; 6
    25ec:	21 34       	cpi	r18, 0x41	; 65
    25ee:	37 07       	cpc	r19, r23
    25f0:	0c f4       	brge	.+2      	; 0x25f4 <start_vertical_speed_control_right+0x9c>
    25f2:	85 c0       	rjmp	.+266    	; 0x26fe <start_vertical_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    25f4:	20 e4       	ldi	r18, 0x40	; 64
    25f6:	36 e0       	ldi	r19, 0x06	; 6
    25f8:	30 93 02 04 	sts	0x0402, r19
    25fc:	20 93 01 04 	sts	0x0401, r18
    2600:	60 ec       	ldi	r22, 0xC0	; 192
    2602:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    2604:	9a 01       	movw	r18, r20
    2606:	22 0f       	add	r18, r18
    2608:	33 1f       	adc	r19, r19
    260a:	24 0f       	add	r18, r20
    260c:	35 1f       	adc	r19, r21
    260e:	22 0f       	add	r18, r18
    2610:	33 1f       	adc	r19, r19
    2612:	22 0f       	add	r18, r18
    2614:	33 1f       	adc	r19, r19
    2616:	22 0f       	add	r18, r18
    2618:	33 1f       	adc	r19, r19
    261a:	24 0f       	add	r18, r20
    261c:	35 1f       	adc	r19, r21
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    261e:	00 81       	ld	r16, Z
    2620:	11 81       	ldd	r17, Z+1	; 0x01
    2622:	c0 91 05 02 	lds	r28, 0x0205
    2626:	d0 91 06 02 	lds	r29, 0x0206
    262a:	0c 9f       	mul	r16, r28
    262c:	d0 01       	movw	r26, r0
    262e:	0d 9f       	mul	r16, r29
    2630:	b0 0d       	add	r27, r0
    2632:	1c 9f       	mul	r17, r28
    2634:	b0 0d       	add	r27, r0
    2636:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    2638:	2a 0f       	add	r18, r26
    263a:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    263c:	84 1b       	sub	r24, r20
    263e:	95 0b       	sbc	r25, r21
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	28 0f       	add	r18, r24
    2646:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    2648:	26 0f       	add	r18, r22
    264a:	37 1f       	adc	r19, r23
    264c:	30 93 fc 03 	sts	0x03FC, r19
    2650:	20 93 fb 03 	sts	0x03FB, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2654:	37 fd       	sbrc	r19, 7
    2656:	69 c0       	rjmp	.+210    	; 0x272a <start_vertical_speed_control_right+0x1d2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2658:	12 16       	cp	r1, r18
    265a:	13 06       	cpc	r1, r19
    265c:	0c f0       	brlt	.+2      	; 0x2660 <start_vertical_speed_control_right+0x108>
    265e:	6f c0       	rjmp	.+222    	; 0x273e <start_vertical_speed_control_right+0x1e6>
    2660:	80 81       	ld	r24, Z
    2662:	91 81       	ldd	r25, Z+1	; 0x01
    2664:	97 fd       	sbrc	r25, 7
    2666:	89 c0       	rjmp	.+274    	; 0x277a <start_vertical_speed_control_right+0x222>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2668:	7d e5       	ldi	r23, 0x5D	; 93
    266a:	21 3c       	cpi	r18, 0xC1	; 193
    266c:	37 07       	cpc	r19, r23
    266e:	0c f4       	brge	.+2      	; 0x2672 <start_vertical_speed_control_right+0x11a>
    2670:	66 c0       	rjmp	.+204    	; 0x273e <start_vertical_speed_control_right+0x1e6>
    2672:	80 ec       	ldi	r24, 0xC0	; 192
    2674:	9d e5       	ldi	r25, 0x5D	; 93
    2676:	90 93 fc 03 	sts	0x03FC, r25
    267a:	80 93 fb 03 	sts	0x03FB, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	92 e0       	ldi	r25, 0x02	; 2
    2682:	91 83       	std	Z+1, r25	; 0x01
    2684:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2690:	24 3b       	cpi	r18, 0xB4	; 180
    2692:	31 05       	cpc	r19, r1
    2694:	94 f4       	brge	.+36     	; 0x26ba <start_vertical_speed_control_right+0x162>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2696:	2a 35       	cpi	r18, 0x5A	; 90
    2698:	31 05       	cpc	r19, r1
    269a:	7c f4       	brge	.+30     	; 0x26ba <start_vertical_speed_control_right+0x162>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    269c:	18 16       	cp	r1, r24
    269e:	19 06       	cpc	r1, r25
    26a0:	0c f0       	brlt	.+2      	; 0x26a4 <start_vertical_speed_control_right+0x14c>
    26a2:	93 c0       	rjmp	.+294    	; 0x27ca <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    26a4:	35 95       	asr	r19
    26a6:	27 95       	ror	r18
    26a8:	35 95       	asr	r19
    26aa:	27 95       	ror	r18
    26ac:	27 5e       	subi	r18, 0xE7	; 231
    26ae:	3f 4f       	sbci	r19, 0xFF	; 255
    26b0:	30 93 06 02 	sts	0x0206, r19
    26b4:	20 93 05 02 	sts	0x0205, r18
    26b8:	76 cf       	rjmp	.-276    	; 0x25a6 <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    26ba:	18 16       	cp	r1, r24
    26bc:	19 06       	cpc	r1, r25
    26be:	94 f5       	brge	.+100    	; 0x2724 <start_vertical_speed_control_right+0x1cc>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    26c0:	84 eb       	ldi	r24, 0xB4	; 180
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	82 1b       	sub	r24, r18
    26c6:	93 0b       	sbc	r25, r19
    26c8:	95 95       	asr	r25
    26ca:	87 95       	ror	r24
    26cc:	95 95       	asr	r25
    26ce:	87 95       	ror	r24
    26d0:	49 96       	adiw	r24, 0x19	; 25
    26d2:	90 93 06 02 	sts	0x0206, r25
    26d6:	80 93 05 02 	sts	0x0205, r24
    26da:	65 cf       	rjmp	.-310    	; 0x25a6 <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    26dc:	10 92 02 04 	sts	0x0402, r1
    26e0:	10 92 01 04 	sts	0x0401, r1
		delta_right_speed_current = 0;
    26e4:	10 92 7e 05 	sts	0x057E, r1
    26e8:	10 92 7d 05 	sts	0x057D, r1
		delta_right_speed_prev = 0;
    26ec:	10 92 57 05 	sts	0x0557, r1
    26f0:	10 92 56 05 	sts	0x0556, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    26fe:	69 ef       	ldi	r22, 0xF9	; 249
    2700:	20 3c       	cpi	r18, 0xC0	; 192
    2702:	36 07       	cpc	r19, r22
    2704:	4c f4       	brge	.+18     	; 0x2718 <start_vertical_speed_control_right+0x1c0>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    2706:	20 ec       	ldi	r18, 0xC0	; 192
    2708:	39 ef       	ldi	r19, 0xF9	; 249
    270a:	30 93 02 04 	sts	0x0402, r19
    270e:	20 93 01 04 	sts	0x0401, r18
    2712:	60 e4       	ldi	r22, 0x40	; 64
    2714:	7d ee       	ldi	r23, 0xED	; 237
    2716:	76 cf       	rjmp	.-276    	; 0x2604 <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2718:	b9 01       	movw	r22, r18
    271a:	66 0f       	add	r22, r22
    271c:	77 1f       	adc	r23, r23
    271e:	62 0f       	add	r22, r18
    2720:	73 1f       	adc	r23, r19
    2722:	70 cf       	rjmp	.-288    	; 0x2604 <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2724:	84 eb       	ldi	r24, 0xB4	; 180
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	30 cf       	rjmp	.-416    	; 0x258a <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	97 fd       	sbrc	r25, 7
    2730:	06 c0       	rjmp	.+12     	; 0x273e <start_vertical_speed_control_right+0x1e6>
		pwm_right_speed_controller = 0;
    2732:	10 92 fc 03 	sts	0x03FC, r1
    2736:	10 92 fb 03 	sts	0x03FB, r1
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    273e:	82 ea       	ldi	r24, 0xA2	; 162
    2740:	20 34       	cpi	r18, 0x40	; 64
    2742:	38 07       	cpc	r19, r24
    2744:	04 f5       	brge	.+64     	; 0x2786 <start_vertical_speed_control_right+0x22e>
    2746:	80 e4       	ldi	r24, 0x40	; 64
    2748:	92 ea       	ldi	r25, 0xA2	; 162
    274a:	90 93 fc 03 	sts	0x03FC, r25
    274e:	80 93 fb 03 	sts	0x03FB, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	9e ef       	ldi	r25, 0xFE	; 254
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24

}
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2764:	40 91 f1 03 	lds	r20, 0x03F1
    2768:	50 91 f2 03 	lds	r21, 0x03F2
    276c:	42 0f       	add	r20, r18
    276e:	53 1f       	adc	r21, r19
    2770:	50 93 7e 05 	sts	0x057E, r21
    2774:	40 93 7d 05 	sts	0x057D, r20
    2778:	2e cf       	rjmp	.-420    	; 0x25d6 <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    277a:	10 92 fc 03 	sts	0x03FC, r1
    277e:	10 92 fb 03 	sts	0x03FB, r1
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2786:	35 95       	asr	r19
    2788:	27 95       	ror	r18
    278a:	35 95       	asr	r19
    278c:	27 95       	ror	r18
    278e:	35 95       	asr	r19
    2790:	27 95       	ror	r18
    2792:	35 95       	asr	r19
    2794:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2796:	31 83       	std	Z+1, r19	; 0x01
    2798:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    279a:	42 e0       	ldi	r20, 0x02	; 2
    279c:	21 30       	cpi	r18, 0x01	; 1
    279e:	34 07       	cpc	r19, r20
    27a0:	0c f0       	brlt	.+2      	; 0x27a4 <start_vertical_speed_control_right+0x24c>
    27a2:	6d cf       	rjmp	.-294    	; 0x267e <start_vertical_speed_control_right+0x126>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    27a4:	6e ef       	ldi	r22, 0xFE	; 254
    27a6:	20 30       	cpi	r18, 0x00	; 0
    27a8:	36 07       	cpc	r19, r22
    27aa:	9c f2       	brlt	.-90     	; 0x2752 <start_vertical_speed_control_right+0x1fa>
    27ac:	6c cf       	rjmp	.-296    	; 0x2686 <start_vertical_speed_control_right+0x12e>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    27ae:	88 e6       	ldi	r24, 0x68	; 104
    27b0:	91 e0       	ldi	r25, 0x01	; 1
    27b2:	82 1b       	sub	r24, r18
    27b4:	93 0b       	sbc	r25, r19
    27b6:	95 95       	asr	r25
    27b8:	87 95       	ror	r24
    27ba:	95 95       	asr	r25
    27bc:	87 95       	ror	r24
    27be:	49 96       	adiw	r24, 0x19	; 25
    27c0:	90 93 06 02 	sts	0x0206, r25
    27c4:	80 93 05 02 	sts	0x0205, r24
    27c8:	ee ce       	rjmp	.-548    	; 0x25a6 <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    27ca:	35 95       	asr	r19
    27cc:	27 95       	ror	r18
    27ce:	35 95       	asr	r19
    27d0:	27 95       	ror	r18
    27d2:	89 e1       	ldi	r24, 0x19	; 25
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	82 1b       	sub	r24, r18
    27d8:	93 0b       	sbc	r25, r19
    27da:	90 93 06 02 	sts	0x0206, r25
    27de:	80 93 05 02 	sts	0x0205, r24
    27e2:	e1 ce       	rjmp	.-574    	; 0x25a6 <start_vertical_speed_control_right+0x4e>

000027e4 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    27e4:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    27e6:	80 81       	ld	r24, Z
    27e8:	91 81       	ldd	r25, Z+1	; 0x01
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <start_horizontal_speed_control_right+0xc>
    27ee:	7b c0       	rjmp	.+246    	; 0x28e6 <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    27f0:	a0 91 7d 05 	lds	r26, 0x057D
    27f4:	b0 91 7e 05 	lds	r27, 0x057E
    27f8:	b0 93 57 05 	sts	0x0557, r27
    27fc:	a0 93 56 05 	sts	0x0556, r26
	if(*pwm_right >= 0) {
    2800:	20 81       	ld	r18, Z
    2802:	31 81       	ldd	r19, Z+1	; 0x01
    2804:	37 fd       	sbrc	r19, 7
    2806:	89 c0       	rjmp	.+274    	; 0x291a <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2808:	80 91 f1 03 	lds	r24, 0x03F1
    280c:	90 91 f2 03 	lds	r25, 0x03F2
    2810:	a9 01       	movw	r20, r18
    2812:	48 1b       	sub	r20, r24
    2814:	59 0b       	sbc	r21, r25
    2816:	ca 01       	movw	r24, r20
    2818:	50 93 7e 05 	sts	0x057E, r21
    281c:	40 93 7d 05 	sts	0x057D, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2820:	20 91 01 04 	lds	r18, 0x0401
    2824:	30 91 02 04 	lds	r19, 0x0402
    2828:	28 0f       	add	r18, r24
    282a:	39 1f       	adc	r19, r25
    282c:	30 93 02 04 	sts	0x0402, r19
    2830:	20 93 01 04 	sts	0x0401, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    2834:	56 e0       	ldi	r21, 0x06	; 6
    2836:	21 34       	cpi	r18, 0x41	; 65
    2838:	35 07       	cpc	r19, r21
    283a:	0c f4       	brge	.+2      	; 0x283e <start_horizontal_speed_control_right+0x5a>
    283c:	61 c0       	rjmp	.+194    	; 0x2900 <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    283e:	20 e4       	ldi	r18, 0x40	; 64
    2840:	36 e0       	ldi	r19, 0x06	; 6
    2842:	30 93 02 04 	sts	0x0402, r19
    2846:	20 93 01 04 	sts	0x0401, r18
    284a:	60 e8       	ldi	r22, 0x80	; 128
    284c:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    284e:	9c 01       	movw	r18, r24
    2850:	22 0f       	add	r18, r18
    2852:	33 1f       	adc	r19, r19
    2854:	28 0f       	add	r18, r24
    2856:	39 1f       	adc	r19, r25
    2858:	22 0f       	add	r18, r18
    285a:	33 1f       	adc	r19, r19
    285c:	22 0f       	add	r18, r18
    285e:	33 1f       	adc	r19, r19
    2860:	22 0f       	add	r18, r18
    2862:	33 1f       	adc	r19, r19
    2864:	28 0f       	add	r18, r24
    2866:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    2868:	40 81       	ld	r20, Z
    286a:	51 81       	ldd	r21, Z+1	; 0x01
    286c:	44 0f       	add	r20, r20
    286e:	55 1f       	adc	r21, r21
    2870:	44 0f       	add	r20, r20
    2872:	55 1f       	adc	r21, r21
    2874:	44 0f       	add	r20, r20
    2876:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    2878:	24 0f       	add	r18, r20
    287a:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    287c:	ad 01       	movw	r20, r26
    287e:	48 1b       	sub	r20, r24
    2880:	59 0b       	sbc	r21, r25
    2882:	ca 01       	movw	r24, r20
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	84 0f       	add	r24, r20
    288a:	95 1f       	adc	r25, r21
    288c:	28 0f       	add	r18, r24
    288e:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    2890:	26 0f       	add	r18, r22
    2892:	37 1f       	adc	r19, r23
    2894:	30 93 fc 03 	sts	0x03FC, r19
    2898:	20 93 fb 03 	sts	0x03FB, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    289c:	37 fd       	sbrc	r19, 7
    289e:	4c c0       	rjmp	.+152    	; 0x2938 <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    28a0:	12 16       	cp	r1, r18
    28a2:	13 06       	cpc	r1, r19
    28a4:	0c f0       	brlt	.+2      	; 0x28a8 <start_horizontal_speed_control_right+0xc4>
    28a6:	52 c0       	rjmp	.+164    	; 0x294c <start_horizontal_speed_control_right+0x168>
    28a8:	80 81       	ld	r24, Z
    28aa:	91 81       	ldd	r25, Z+1	; 0x01
    28ac:	97 fd       	sbrc	r25, 7
    28ae:	67 c0       	rjmp	.+206    	; 0x297e <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    28b0:	5d e5       	ldi	r21, 0x5D	; 93
    28b2:	21 3c       	cpi	r18, 0xC1	; 193
    28b4:	35 07       	cpc	r19, r21
    28b6:	0c f4       	brge	.+2      	; 0x28ba <start_horizontal_speed_control_right+0xd6>
    28b8:	49 c0       	rjmp	.+146    	; 0x294c <start_horizontal_speed_control_right+0x168>
    28ba:	80 ec       	ldi	r24, 0xC0	; 192
    28bc:	9d e5       	ldi	r25, 0x5D	; 93
    28be:	90 93 fc 03 	sts	0x03FC, r25
    28c2:	80 93 fb 03 	sts	0x03FB, r24
    28c6:	2c ed       	ldi	r18, 0xDC	; 220
    28c8:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    28ca:	22 5e       	subi	r18, 0xE2	; 226
    28cc:	3f 4f       	sbci	r19, 0xFF	; 255
    28ce:	31 83       	std	Z+1, r19	; 0x01
    28d0:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    28d2:	42 e0       	ldi	r20, 0x02	; 2
    28d4:	21 30       	cpi	r18, 0x01	; 1
    28d6:	34 07       	cpc	r19, r20
    28d8:	0c f4       	brge	.+2      	; 0x28dc <start_horizontal_speed_control_right+0xf8>
    28da:	48 c0       	rjmp	.+144    	; 0x296c <start_horizontal_speed_control_right+0x188>
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	92 e0       	ldi	r25, 0x02	; 2
    28e0:	91 83       	std	Z+1, r25	; 0x01
    28e2:	80 83       	st	Z, r24
    28e4:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    28e6:	10 92 02 04 	sts	0x0402, r1
    28ea:	10 92 01 04 	sts	0x0401, r1
		delta_right_speed_current = 0;
    28ee:	10 92 7e 05 	sts	0x057E, r1
    28f2:	10 92 7d 05 	sts	0x057D, r1
		delta_right_speed_prev = 0;
    28f6:	10 92 57 05 	sts	0x0557, r1
    28fa:	10 92 56 05 	sts	0x0556, r1
		return;
    28fe:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2900:	49 ef       	ldi	r20, 0xF9	; 249
    2902:	20 3c       	cpi	r18, 0xC0	; 192
    2904:	34 07       	cpc	r19, r20
    2906:	a4 f4       	brge	.+40     	; 0x2930 <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    2908:	20 ec       	ldi	r18, 0xC0	; 192
    290a:	39 ef       	ldi	r19, 0xF9	; 249
    290c:	30 93 02 04 	sts	0x0402, r19
    2910:	20 93 01 04 	sts	0x0401, r18
    2914:	60 e8       	ldi	r22, 0x80	; 128
    2916:	73 ef       	ldi	r23, 0xF3	; 243
    2918:	9a cf       	rjmp	.-204    	; 0x284e <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    291a:	80 91 f1 03 	lds	r24, 0x03F1
    291e:	90 91 f2 03 	lds	r25, 0x03F2
    2922:	82 0f       	add	r24, r18
    2924:	93 1f       	adc	r25, r19
    2926:	90 93 7e 05 	sts	0x057E, r25
    292a:	80 93 7d 05 	sts	0x057D, r24
    292e:	78 cf       	rjmp	.-272    	; 0x2820 <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2930:	b9 01       	movw	r22, r18
    2932:	66 0f       	add	r22, r22
    2934:	77 1f       	adc	r23, r23
    2936:	8b cf       	rjmp	.-234    	; 0x284e <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2938:	80 81       	ld	r24, Z
    293a:	91 81       	ldd	r25, Z+1	; 0x01
    293c:	97 fd       	sbrc	r25, 7
    293e:	06 c0       	rjmp	.+12     	; 0x294c <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    2940:	10 92 fc 03 	sts	0x03FC, r1
    2944:	10 92 fb 03 	sts	0x03FB, r1
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    294c:	82 ea       	ldi	r24, 0xA2	; 162
    294e:	20 34       	cpi	r18, 0x40	; 64
    2950:	38 07       	cpc	r19, r24
    2952:	dc f4       	brge	.+54     	; 0x298a <start_horizontal_speed_control_right+0x1a6>
    2954:	80 e4       	ldi	r24, 0x40	; 64
    2956:	92 ea       	ldi	r25, 0xA2	; 162
    2958:	90 93 fc 03 	sts	0x03FC, r25
    295c:	80 93 fb 03 	sts	0x03FB, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2960:	24 e2       	ldi	r18, 0x24	; 36
    2962:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    2964:	2e 51       	subi	r18, 0x1E	; 30
    2966:	30 40       	sbci	r19, 0x00	; 0
    2968:	31 83       	std	Z+1, r19	; 0x01
    296a:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    296c:	5e ef       	ldi	r21, 0xFE	; 254
    296e:	20 30       	cpi	r18, 0x00	; 0
    2970:	35 07       	cpc	r19, r21
    2972:	24 f4       	brge	.+8      	; 0x297c <start_horizontal_speed_control_right+0x198>
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	9e ef       	ldi	r25, 0xFE	; 254
    2978:	91 83       	std	Z+1, r25	; 0x01
    297a:	80 83       	st	Z, r24
    297c:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    297e:	10 92 fc 03 	sts	0x03FC, r1
    2982:	10 92 fb 03 	sts	0x03FB, r1
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    298a:	35 95       	asr	r19
    298c:	27 95       	ror	r18
    298e:	35 95       	asr	r19
    2990:	27 95       	ror	r18
    2992:	35 95       	asr	r19
    2994:	27 95       	ror	r18
    2996:	35 95       	asr	r19
    2998:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    299a:	31 83       	std	Z+1, r19	; 0x01
    299c:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    299e:	12 16       	cp	r1, r18
    29a0:	13 06       	cpc	r1, r19
    29a2:	0c f4       	brge	.+2      	; 0x29a6 <start_horizontal_speed_control_right+0x1c2>
    29a4:	92 cf       	rjmp	.-220    	; 0x28ca <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    29a6:	21 15       	cp	r18, r1
    29a8:	31 05       	cpc	r19, r1
    29aa:	e1 f6       	brne	.-72     	; 0x2964 <start_horizontal_speed_control_right+0x180>
    29ac:	08 95       	ret

000029ae <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    29ae:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    29b0:	80 81       	ld	r24, Z
    29b2:	91 81       	ldd	r25, Z+1	; 0x01
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	09 f4       	brne	.+2      	; 0x29ba <start_horizontal_speed_control_left+0xc>
    29b8:	7b c0       	rjmp	.+246    	; 0x2ab0 <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    29ba:	a0 91 54 05 	lds	r26, 0x0554
    29be:	b0 91 55 05 	lds	r27, 0x0555
    29c2:	b0 93 6f 05 	sts	0x056F, r27
    29c6:	a0 93 6e 05 	sts	0x056E, r26
	if(*pwm_left >= 0) {
    29ca:	20 81       	ld	r18, Z
    29cc:	31 81       	ldd	r19, Z+1	; 0x01
    29ce:	37 fd       	sbrc	r19, 7
    29d0:	89 c0       	rjmp	.+274    	; 0x2ae4 <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    29d2:	80 91 ef 03 	lds	r24, 0x03EF
    29d6:	90 91 f0 03 	lds	r25, 0x03F0
    29da:	a9 01       	movw	r20, r18
    29dc:	48 1b       	sub	r20, r24
    29de:	59 0b       	sbc	r21, r25
    29e0:	ca 01       	movw	r24, r20
    29e2:	50 93 55 05 	sts	0x0555, r21
    29e6:	40 93 54 05 	sts	0x0554, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    29ea:	20 91 ff 03 	lds	r18, 0x03FF
    29ee:	30 91 00 04 	lds	r19, 0x0400
    29f2:	28 0f       	add	r18, r24
    29f4:	39 1f       	adc	r19, r25
    29f6:	30 93 00 04 	sts	0x0400, r19
    29fa:	20 93 ff 03 	sts	0x03FF, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    29fe:	56 e0       	ldi	r21, 0x06	; 6
    2a00:	21 34       	cpi	r18, 0x41	; 65
    2a02:	35 07       	cpc	r19, r21
    2a04:	0c f4       	brge	.+2      	; 0x2a08 <start_horizontal_speed_control_left+0x5a>
    2a06:	61 c0       	rjmp	.+194    	; 0x2aca <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    2a08:	20 e4       	ldi	r18, 0x40	; 64
    2a0a:	36 e0       	ldi	r19, 0x06	; 6
    2a0c:	30 93 00 04 	sts	0x0400, r19
    2a10:	20 93 ff 03 	sts	0x03FF, r18
    2a14:	60 e8       	ldi	r22, 0x80	; 128
    2a16:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    2a18:	9c 01       	movw	r18, r24
    2a1a:	22 0f       	add	r18, r18
    2a1c:	33 1f       	adc	r19, r19
    2a1e:	28 0f       	add	r18, r24
    2a20:	39 1f       	adc	r19, r25
    2a22:	22 0f       	add	r18, r18
    2a24:	33 1f       	adc	r19, r19
    2a26:	22 0f       	add	r18, r18
    2a28:	33 1f       	adc	r19, r19
    2a2a:	22 0f       	add	r18, r18
    2a2c:	33 1f       	adc	r19, r19
    2a2e:	28 0f       	add	r18, r24
    2a30:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    2a32:	40 81       	ld	r20, Z
    2a34:	51 81       	ldd	r21, Z+1	; 0x01
    2a36:	44 0f       	add	r20, r20
    2a38:	55 1f       	adc	r21, r21
    2a3a:	44 0f       	add	r20, r20
    2a3c:	55 1f       	adc	r21, r21
    2a3e:	44 0f       	add	r20, r20
    2a40:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    2a42:	24 0f       	add	r18, r20
    2a44:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    2a46:	ad 01       	movw	r20, r26
    2a48:	48 1b       	sub	r20, r24
    2a4a:	59 0b       	sbc	r21, r25
    2a4c:	ca 01       	movw	r24, r20
    2a4e:	88 0f       	add	r24, r24
    2a50:	99 1f       	adc	r25, r25
    2a52:	84 0f       	add	r24, r20
    2a54:	95 1f       	adc	r25, r21
    2a56:	28 0f       	add	r18, r24
    2a58:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    2a5a:	26 0f       	add	r18, r22
    2a5c:	37 1f       	adc	r19, r23
    2a5e:	30 93 fe 03 	sts	0x03FE, r19
    2a62:	20 93 fd 03 	sts	0x03FD, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2a66:	37 fd       	sbrc	r19, 7
    2a68:	4c c0       	rjmp	.+152    	; 0x2b02 <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2a6a:	12 16       	cp	r1, r18
    2a6c:	13 06       	cpc	r1, r19
    2a6e:	0c f0       	brlt	.+2      	; 0x2a72 <start_horizontal_speed_control_left+0xc4>
    2a70:	52 c0       	rjmp	.+164    	; 0x2b16 <start_horizontal_speed_control_left+0x168>
    2a72:	80 81       	ld	r24, Z
    2a74:	91 81       	ldd	r25, Z+1	; 0x01
    2a76:	97 fd       	sbrc	r25, 7
    2a78:	67 c0       	rjmp	.+206    	; 0x2b48 <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2a7a:	5d e5       	ldi	r21, 0x5D	; 93
    2a7c:	21 3c       	cpi	r18, 0xC1	; 193
    2a7e:	35 07       	cpc	r19, r21
    2a80:	0c f4       	brge	.+2      	; 0x2a84 <start_horizontal_speed_control_left+0xd6>
    2a82:	49 c0       	rjmp	.+146    	; 0x2b16 <start_horizontal_speed_control_left+0x168>
    2a84:	80 ec       	ldi	r24, 0xC0	; 192
    2a86:	9d e5       	ldi	r25, 0x5D	; 93
    2a88:	90 93 fe 03 	sts	0x03FE, r25
    2a8c:	80 93 fd 03 	sts	0x03FD, r24
    2a90:	2c ed       	ldi	r18, 0xDC	; 220
    2a92:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    2a94:	22 5e       	subi	r18, 0xE2	; 226
    2a96:	3f 4f       	sbci	r19, 0xFF	; 255
    2a98:	31 83       	std	Z+1, r19	; 0x01
    2a9a:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2a9c:	42 e0       	ldi	r20, 0x02	; 2
    2a9e:	21 30       	cpi	r18, 0x01	; 1
    2aa0:	34 07       	cpc	r19, r20
    2aa2:	0c f4       	brge	.+2      	; 0x2aa6 <start_horizontal_speed_control_left+0xf8>
    2aa4:	48 c0       	rjmp	.+144    	; 0x2b36 <start_horizontal_speed_control_left+0x188>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	92 e0       	ldi	r25, 0x02	; 2
    2aaa:	91 83       	std	Z+1, r25	; 0x01
    2aac:	80 83       	st	Z, r24
    2aae:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2ab0:	10 92 00 04 	sts	0x0400, r1
    2ab4:	10 92 ff 03 	sts	0x03FF, r1
		delta_left_speed_current = 0;
    2ab8:	10 92 55 05 	sts	0x0555, r1
    2abc:	10 92 54 05 	sts	0x0554, r1
		delta_left_speed_prev = 0;
    2ac0:	10 92 6f 05 	sts	0x056F, r1
    2ac4:	10 92 6e 05 	sts	0x056E, r1
		return;
    2ac8:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2aca:	49 ef       	ldi	r20, 0xF9	; 249
    2acc:	20 3c       	cpi	r18, 0xC0	; 192
    2ace:	34 07       	cpc	r19, r20
    2ad0:	a4 f4       	brge	.+40     	; 0x2afa <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    2ad2:	20 ec       	ldi	r18, 0xC0	; 192
    2ad4:	39 ef       	ldi	r19, 0xF9	; 249
    2ad6:	30 93 00 04 	sts	0x0400, r19
    2ada:	20 93 ff 03 	sts	0x03FF, r18
    2ade:	60 e8       	ldi	r22, 0x80	; 128
    2ae0:	73 ef       	ldi	r23, 0xF3	; 243
    2ae2:	9a cf       	rjmp	.-204    	; 0x2a18 <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2ae4:	80 91 ef 03 	lds	r24, 0x03EF
    2ae8:	90 91 f0 03 	lds	r25, 0x03F0
    2aec:	82 0f       	add	r24, r18
    2aee:	93 1f       	adc	r25, r19
    2af0:	90 93 55 05 	sts	0x0555, r25
    2af4:	80 93 54 05 	sts	0x0554, r24
    2af8:	78 cf       	rjmp	.-272    	; 0x29ea <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2afa:	b9 01       	movw	r22, r18
    2afc:	66 0f       	add	r22, r22
    2afe:	77 1f       	adc	r23, r23
    2b00:	8b cf       	rjmp	.-234    	; 0x2a18 <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2b02:	80 81       	ld	r24, Z
    2b04:	91 81       	ldd	r25, Z+1	; 0x01
    2b06:	97 fd       	sbrc	r25, 7
    2b08:	06 c0       	rjmp	.+12     	; 0x2b16 <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    2b0a:	10 92 fe 03 	sts	0x03FE, r1
    2b0e:	10 92 fd 03 	sts	0x03FD, r1
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2b16:	82 ea       	ldi	r24, 0xA2	; 162
    2b18:	20 34       	cpi	r18, 0x40	; 64
    2b1a:	38 07       	cpc	r19, r24
    2b1c:	dc f4       	brge	.+54     	; 0x2b54 <start_horizontal_speed_control_left+0x1a6>
    2b1e:	80 e4       	ldi	r24, 0x40	; 64
    2b20:	92 ea       	ldi	r25, 0xA2	; 162
    2b22:	90 93 fe 03 	sts	0x03FE, r25
    2b26:	80 93 fd 03 	sts	0x03FD, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2b2a:	24 e2       	ldi	r18, 0x24	; 36
    2b2c:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    2b2e:	2e 51       	subi	r18, 0x1E	; 30
    2b30:	30 40       	sbci	r19, 0x00	; 0
    2b32:	31 83       	std	Z+1, r19	; 0x01
    2b34:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2b36:	5e ef       	ldi	r21, 0xFE	; 254
    2b38:	20 30       	cpi	r18, 0x00	; 0
    2b3a:	35 07       	cpc	r19, r21
    2b3c:	24 f4       	brge	.+8      	; 0x2b46 <start_horizontal_speed_control_left+0x198>
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	9e ef       	ldi	r25, 0xFE	; 254
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	80 83       	st	Z, r24
    2b46:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2b48:	10 92 fe 03 	sts	0x03FE, r1
    2b4c:	10 92 fd 03 	sts	0x03FD, r1
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2b54:	35 95       	asr	r19
    2b56:	27 95       	ror	r18
    2b58:	35 95       	asr	r19
    2b5a:	27 95       	ror	r18
    2b5c:	35 95       	asr	r19
    2b5e:	27 95       	ror	r18
    2b60:	35 95       	asr	r19
    2b62:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2b64:	31 83       	std	Z+1, r19	; 0x01
    2b66:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    2b68:	12 16       	cp	r1, r18
    2b6a:	13 06       	cpc	r1, r19
    2b6c:	0c f4       	brge	.+2      	; 0x2b70 <start_horizontal_speed_control_left+0x1c2>
    2b6e:	92 cf       	rjmp	.-220    	; 0x2a94 <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    2b70:	21 15       	cp	r18, r1
    2b72:	31 05       	cpc	r19, r1
    2b74:	e1 f6       	brne	.-72     	; 0x2b2e <start_horizontal_speed_control_left+0x180>
    2b76:	08 95       	ret

00002b78 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    2b78:	85 b7       	in	r24, 0x35	; 53
    2b7a:	80 61       	ori	r24, 0x10	; 16
    2b7c:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    2b7e:	8f ef       	ldi	r24, 0xFF	; 255
    2b80:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    2b82:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    2b84:	97 ef       	ldi	r25, 0xF7	; 247
    2b86:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    2b88:	90 ee       	ldi	r25, 0xE0	; 224
    2b8a:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    2b8c:	90 ef       	ldi	r25, 0xF0	; 240
    2b8e:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    2b90:	90 eb       	ldi	r25, 0xB0	; 176
    2b92:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    2b94:	9c ef       	ldi	r25, 0xFC	; 252
    2b96:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    2b98:	93 e0       	ldi	r25, 0x03	; 3
    2b9a:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    2b9c:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    2b9e:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    2ba0:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    2ba2:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    2ba4:	80 91 42 05 	lds	r24, 0x0542
    2ba8:	88 23       	and	r24, r24
    2baa:	e1 f0       	breq	.+56     	; 0x2be4 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    2bac:	81 30       	cpi	r24, 0x01	; 1
    2bae:	d1 f0       	breq	.+52     	; 0x2be4 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    2bb0:	82 30       	cpi	r24, 0x02	; 2
    2bb2:	51 f1       	breq	.+84     	; 0x2c08 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    2bb4:	9f ef       	ldi	r25, 0xFF	; 255
    2bb6:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    2bba:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    2bbe:	9f e0       	ldi	r25, 0x0F	; 15
    2bc0:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    2bc4:	88 23       	and	r24, r24
    2bc6:	a9 f4       	brne	.+42     	; 0x2bf2 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    2bc8:	90 91 05 01 	lds	r25, 0x0105
    2bcc:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    2bd0:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    2bd4:	9f ef       	ldi	r25, 0xFF	; 255
    2bd6:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    2bda:	88 23       	and	r24, r24
    2bdc:	29 f4       	brne	.+10     	; 0x2be8 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    2bde:	10 92 0b 01 	sts	0x010B, r1
    2be2:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    2be4:	14 ba       	out	0x14, r1	; 20
    2be6:	e6 cf       	rjmp	.-52     	; 0x2bb4 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    2be8:	81 30       	cpi	r24, 0x01	; 1
    2bea:	c9 f3       	breq	.-14     	; 0x2bde <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    2bec:	82 30       	cpi	r24, 0x02	; 2
    2bee:	41 f0       	breq	.+16     	; 0x2c00 <initPortsIO+0x88>
    2bf0:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    2bf2:	81 30       	cpi	r24, 0x01	; 1
    2bf4:	11 f0       	breq	.+4      	; 0x2bfa <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    2bf6:	82 30       	cpi	r24, 0x02	; 2
    2bf8:	59 f7       	brne	.-42     	; 0x2bd0 <initPortsIO+0x58>
		PORTJ = 0x0F;
    2bfa:	90 93 05 01 	sts	0x0105, r25
    2bfe:	e8 cf       	rjmp	.-48     	; 0x2bd0 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    2c00:	87 ef       	ldi	r24, 0xF7	; 247
    2c02:	80 93 0b 01 	sts	0x010B, r24
    2c06:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    2c08:	98 e0       	ldi	r25, 0x08	; 8
    2c0a:	94 bb       	out	0x14, r25	; 20
    2c0c:	d3 cf       	rjmp	.-90     	; 0x2bb4 <initPortsIO+0x3c>

00002c0e <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    2c0e:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    2c12:	10 92 bc 00 	sts	0x00BC, r1
}
    2c16:	08 95       	ret

00002c18 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    2c18:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    2c1a:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    2c1c:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    2c26:	08 95       	ret

00002c28 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2c28:	94 ea       	ldi	r25, 0xA4	; 164
    2c2a:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2c2e:	90 91 bc 00 	lds	r25, 0x00BC
    2c32:	97 ff       	sbrs	r25, 7
    2c34:	fc cf       	rjmp	.-8      	; 0x2c2e <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2c36:	90 91 b9 00 	lds	r25, 0x00B9
    2c3a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2c3c:	98 30       	cpi	r25, 0x08	; 8
    2c3e:	21 f0       	breq	.+8      	; 0x2c48 <i2c_start+0x20>
    2c40:	90 31       	cpi	r25, 0x10	; 16
    2c42:	11 f0       	breq	.+4      	; 0x2c48 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2c48:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2c4c:	84 e8       	ldi	r24, 0x84	; 132
    2c4e:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2c52:	80 91 bc 00 	lds	r24, 0x00BC
    2c56:	87 ff       	sbrs	r24, 7
    2c58:	fc cf       	rjmp	.-8      	; 0x2c52 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2c5a:	90 91 b9 00 	lds	r25, 0x00B9
    2c5e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2c60:	98 31       	cpi	r25, 0x18	; 24
    2c62:	21 f0       	breq	.+8      	; 0x2c6c <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	90 34       	cpi	r25, 0x40	; 64
    2c68:	19 f0       	breq	.+6      	; 0x2c70 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2c6a:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2c6c:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2c6e:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	08 95       	ret

00002c74 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2c74:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2c76:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2c78:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2c7a:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2c7e:	90 91 bc 00 	lds	r25, 0x00BC
    2c82:	97 ff       	sbrs	r25, 7
    2c84:	fc cf       	rjmp	.-8      	; 0x2c7e <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2c86:	90 91 b9 00 	lds	r25, 0x00B9
    2c8a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2c8c:	98 30       	cpi	r25, 0x08	; 8
    2c8e:	11 f0       	breq	.+4      	; 0x2c94 <i2c_start_wait+0x20>
    2c90:	90 31       	cpi	r25, 0x10	; 16
    2c92:	99 f7       	brne	.-26     	; 0x2c7a <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2c94:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2c98:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2c9c:	90 91 bc 00 	lds	r25, 0x00BC
    2ca0:	97 ff       	sbrs	r25, 7
    2ca2:	fc cf       	rjmp	.-8      	; 0x2c9c <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2ca4:	90 91 b9 00 	lds	r25, 0x00B9
    2ca8:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2caa:	90 32       	cpi	r25, 0x20	; 32
    2cac:	19 f0       	breq	.+6      	; 0x2cb4 <i2c_start_wait+0x40>
    2cae:	98 35       	cpi	r25, 0x58	; 88
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <i2c_start_wait+0x40>
    2cb2:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2cb4:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2cb8:	90 91 bc 00 	lds	r25, 0x00BC
    2cbc:	94 fd       	sbrc	r25, 4
    2cbe:	fc cf       	rjmp	.-8      	; 0x2cb8 <i2c_start_wait+0x44>
    2cc0:	dc cf       	rjmp	.-72     	; 0x2c7a <i2c_start_wait+0x6>

00002cc2 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2cc2:	94 ea       	ldi	r25, 0xA4	; 164
    2cc4:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2cc8:	90 91 bc 00 	lds	r25, 0x00BC
    2ccc:	97 ff       	sbrs	r25, 7
    2cce:	fc cf       	rjmp	.-8      	; 0x2cc8 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2cd0:	90 91 b9 00 	lds	r25, 0x00B9
    2cd4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2cd6:	98 30       	cpi	r25, 0x08	; 8
    2cd8:	21 f0       	breq	.+8      	; 0x2ce2 <i2c_rep_start+0x20>
    2cda:	90 31       	cpi	r25, 0x10	; 16
    2cdc:	11 f0       	breq	.+4      	; 0x2ce2 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2ce2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2ce6:	84 e8       	ldi	r24, 0x84	; 132
    2ce8:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2cec:	80 91 bc 00 	lds	r24, 0x00BC
    2cf0:	87 ff       	sbrs	r24, 7
    2cf2:	fc cf       	rjmp	.-8      	; 0x2cec <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2cf4:	90 91 b9 00 	lds	r25, 0x00B9
    2cf8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2cfa:	98 31       	cpi	r25, 0x18	; 24
    2cfc:	21 f0       	breq	.+8      	; 0x2d06 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	90 34       	cpi	r25, 0x40	; 64
    2d02:	19 f0       	breq	.+6      	; 0x2d0a <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    2d04:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2d06:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2d08:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	08 95       	ret

00002d0e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2d0e:	84 e9       	ldi	r24, 0x94	; 148
    2d10:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2d14:	80 91 bc 00 	lds	r24, 0x00BC
    2d18:	84 fd       	sbrc	r24, 4
    2d1a:	fc cf       	rjmp	.-8      	; 0x2d14 <i2c_stop+0x6>

}/* i2c_stop */
    2d1c:	08 95       	ret

00002d1e <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2d1e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2d22:	84 e8       	ldi	r24, 0x84	; 132
    2d24:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2d28:	80 91 bc 00 	lds	r24, 0x00BC
    2d2c:	87 ff       	sbrs	r24, 7
    2d2e:	fc cf       	rjmp	.-8      	; 0x2d28 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2d30:	90 91 b9 00 	lds	r25, 0x00B9
    2d34:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	98 32       	cpi	r25, 0x28	; 40
    2d3a:	09 f0       	breq	.+2      	; 0x2d3e <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2d3c:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2d40:	08 95       	ret

00002d42 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2d42:	84 ec       	ldi	r24, 0xC4	; 196
    2d44:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    2d48:	80 91 bc 00 	lds	r24, 0x00BC
    2d4c:	87 ff       	sbrs	r24, 7
    2d4e:	fc cf       	rjmp	.-8      	; 0x2d48 <i2c_readAck+0x6>

    return TWDR;
    2d50:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2d54:	08 95       	ret

00002d56 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2d56:	84 e8       	ldi	r24, 0x84	; 132
    2d58:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2d5c:	80 91 bc 00 	lds	r24, 0x00BC
    2d60:	87 ff       	sbrs	r24, 7
    2d62:	fc cf       	rjmp	.-8      	; 0x2d5c <i2c_readNak+0x6>
	
    return TWDR;
    2d64:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2d68:	08 95       	ret

00002d6a <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    2d6a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    2d6e:	80 e1       	ldi	r24, 0x10	; 16
    2d70:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2d74:	e0 ec       	ldi	r30, 0xC0	; 192
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	82 60       	ori	r24, 0x02	; 2
    2d7c:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    2d7e:	e1 ec       	ldi	r30, 0xC1	; 193
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	88 69       	ori	r24, 0x98	; 152
    2d86:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    2d88:	e2 ec       	ldi	r30, 0xC2	; 194
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	86 60       	ori	r24, 0x06	; 6
    2d90:	80 83       	st	Z, r24



}
    2d92:	08 95       	ret

00002d94 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    2d94:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    2d98:	80 e1       	ldi	r24, 0x10	; 16
    2d9a:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    2d9e:	e8 ec       	ldi	r30, 0xC8	; 200
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	82 60       	ori	r24, 0x02	; 2
    2da6:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    2da8:	e9 ec       	ldi	r30, 0xC9	; 201
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	88 61       	ori	r24, 0x18	; 24
    2db0:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    2db2:	ea ec       	ldi	r30, 0xCA	; 202
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	86 60       	ori	r24, 0x06	; 6
    2dba:	80 83       	st	Z, r24

}
    2dbc:	08 95       	ret

00002dbe <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    2dbe:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    2dc2:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    2dc6:	10 92 c2 00 	sts	0x00C2, r1

}
    2dca:	08 95       	ret

00002dcc <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    2dcc:	90 91 c0 00 	lds	r25, 0x00C0
    2dd0:	95 ff       	sbrs	r25, 5
    2dd2:	fc cf       	rjmp	.-8      	; 0x2dcc <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    2dd4:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    2dd8:	66 23       	and	r22, r22
    2dda:	21 f0       	breq	.+8      	; 0x2de4 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    2ddc:	80 91 c0 00 	lds	r24, 0x00C0
    2de0:	86 ff       	sbrs	r24, 6
    2de2:	fc cf       	rjmp	.-8      	; 0x2ddc <usart0Transmit+0x10>
    2de4:	08 95       	ret

00002de6 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    2de6:	90 91 c8 00 	lds	r25, 0x00C8
    2dea:	95 ff       	sbrs	r25, 5
    2dec:	fc cf       	rjmp	.-8      	; 0x2de6 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    2dee:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    2df2:	66 23       	and	r22, r22
    2df4:	21 f0       	breq	.+8      	; 0x2dfe <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    2df6:	80 91 c8 00 	lds	r24, 0x00C8
    2dfa:	86 ff       	sbrs	r24, 6
    2dfc:	fc cf       	rjmp	.-8      	; 0x2df6 <usart1Transmit+0x10>
    2dfe:	08 95       	ret

00002e00 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    2e00:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    2e04:	80 95       	com	r24
	} else {
		return 1;
	}

}
    2e06:	88 1f       	adc	r24, r24
    2e08:	88 27       	eor	r24, r24
    2e0a:	88 1f       	adc	r24, r24
    2e0c:	08 95       	ret

00002e0e <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    2e0e:	87 e9       	ldi	r24, 0x97	; 151
    2e10:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    2e12:	20 91 c0 00 	lds	r18, 0x00C0
    2e16:	27 fd       	sbrc	r18, 7
    2e18:	07 c0       	rjmp	.+14     	; 0x2e28 <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    2e1a:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    2e1c:	d1 f7       	brne	.-12     	; 0x2e12 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	80 93 12 04 	sts	0x0412, r24
			return 0;				// timeout
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    2e28:	80 91 c6 00 	lds	r24, 0x00C6

}
    2e2c:	08 95       	ret

00002e2e <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    2e2e:	1f 92       	push	r1
    2e30:	0f 92       	push	r0
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	0f 92       	push	r0
    2e36:	0b b6       	in	r0, 0x3b	; 59
    2e38:	0f 92       	push	r0
    2e3a:	11 24       	eor	r1, r1
    2e3c:	2f 93       	push	r18
    2e3e:	3f 93       	push	r19
    2e40:	4f 93       	push	r20
    2e42:	5f 93       	push	r21
    2e44:	6f 93       	push	r22
    2e46:	7f 93       	push	r23
    2e48:	8f 93       	push	r24
    2e4a:	9f 93       	push	r25
    2e4c:	af 93       	push	r26
    2e4e:	bf 93       	push	r27
    2e50:	ef 93       	push	r30
    2e52:	ff 93       	push	r31

	char receivedByte = UDR0;
    2e54:	80 91 c6 00 	lds	r24, 0x00C6

	if(currentSelector==15) {
    2e58:	90 91 3f 05 	lds	r25, 0x053F
    2e5c:	9f 30       	cpi	r25, 0x0F	; 15
    2e5e:	21 f1       	breq	.+72     	; 0x2ea8 <__vector_25+0x7a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    2e60:	90 91 11 02 	lds	r25, 0x0211
    2e64:	99 23       	and	r25, r25
    2e66:	d9 f4       	brne	.+54     	; 0x2e9e <__vector_25+0x70>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    2e68:	90 91 17 05 	lds	r25, 0x0517
    2e6c:	91 30       	cpi	r25, 0x01	; 1
    2e6e:	09 f4       	brne	.+2      	; 0x2e72 <__vector_25+0x44>
    2e70:	60 c0       	rjmp	.+192    	; 0x2f32 <__vector_25+0x104>
    2e72:	92 30       	cpi	r25, 0x02	; 2
    2e74:	09 f4       	brne	.+2      	; 0x2e78 <__vector_25+0x4a>
    2e76:	43 c0       	rjmp	.+134    	; 0x2efe <__vector_25+0xd0>
			}
		}

	}

}
    2e78:	ff 91       	pop	r31
    2e7a:	ef 91       	pop	r30
    2e7c:	bf 91       	pop	r27
    2e7e:	af 91       	pop	r26
    2e80:	9f 91       	pop	r25
    2e82:	8f 91       	pop	r24
    2e84:	7f 91       	pop	r23
    2e86:	6f 91       	pop	r22
    2e88:	5f 91       	pop	r21
    2e8a:	4f 91       	pop	r20
    2e8c:	3f 91       	pop	r19
    2e8e:	2f 91       	pop	r18
    2e90:	0f 90       	pop	r0
    2e92:	0b be       	out	0x3b, r0	; 59
    2e94:	0f 90       	pop	r0
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	0f 90       	pop	r0
    2e9a:	1f 90       	pop	r1
    2e9c:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    2e9e:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    2ea2:	80 93 17 05 	sts	0x0517, r24
    2ea6:	e8 cf       	rjmp	.-48     	; 0x2e78 <__vector_25+0x4a>

	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
    2ea8:	8b 32       	cpi	r24, 0x2B	; 43
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <__vector_25+0x80>
    2eac:	4c c0       	rjmp	.+152    	; 0x2f46 <__vector_25+0x118>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    2eae:	8d 32       	cpi	r24, 0x2D	; 45
    2eb0:	f1 f0       	breq	.+60     	; 0x2eee <__vector_25+0xc0>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    2eb2:	87 36       	cpi	r24, 0x67	; 103
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <__vector_25+0x8a>
    2eb6:	5b c0       	rjmp	.+182    	; 0x2f6e <__vector_25+0x140>
			usart0Transmit(irCommand,1);
    2eb8:	90 91 1b 05 	lds	r25, 0x051B

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    2ebc:	80 91 c0 00 	lds	r24, 0x00C0
    2ec0:	85 ff       	sbrs	r24, 5
    2ec2:	fc cf       	rjmp	.-8      	; 0x2ebc <__vector_25+0x8e>
	UDR0 = data;						// put data into buffer, sends the data
    2ec4:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    2ec8:	80 91 c0 00 	lds	r24, 0x00C0
    2ecc:	86 ff       	sbrs	r24, 6
    2ece:	fc cf       	rjmp	.-8      	; 0x2ec8 <__vector_25+0x9a>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    2ed0:	90 91 66 00 	lds	r25, 0x0066
    2ed4:	90 93 53 05 	sts	0x0553, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    2ed8:	80 91 c0 00 	lds	r24, 0x00C0
    2edc:	85 ff       	sbrs	r24, 5
    2ede:	fc cf       	rjmp	.-8      	; 0x2ed8 <__vector_25+0xaa>
	UDR0 = data;						// put data into buffer, sends the data
    2ee0:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    2ee4:	80 91 c0 00 	lds	r24, 0x00C0
    2ee8:	86 ff       	sbrs	r24, 6
    2eea:	fc cf       	rjmp	.-8      	; 0x2ee4 <__vector_25+0xb6>
    2eec:	c5 cf       	rjmp	.-118    	; 0x2e78 <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    2eee:	80 91 53 05 	lds	r24, 0x0553
    2ef2:	88 23       	and	r24, r24
    2ef4:	d1 f1       	breq	.+116    	; 0x2f6a <__vector_25+0x13c>
				currentOsccal--;	
    2ef6:	81 50       	subi	r24, 0x01	; 1
    2ef8:	80 93 53 05 	sts	0x0553, r24
    2efc:	2b c0       	rjmp	.+86     	; 0x2f54 <__vector_25+0x126>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    2efe:	40 91 19 05 	lds	r20, 0x0519
    2f02:	44 23       	and	r20, r20
    2f04:	51 f1       	breq	.+84     	; 0x2f5a <__vector_25+0x12c>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    2f06:	41 30       	cpi	r20, 0x01	; 1
    2f08:	09 f0       	breq	.+2      	; 0x2f0c <__vector_25+0xde>
    2f0a:	b6 cf       	rjmp	.-148    	; 0x2e78 <__vector_25+0x4a>
						rfAddress |= ((unsigned int)receivedByte<<8);
    2f0c:	38 2f       	mov	r19, r24
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	80 91 0b 04 	lds	r24, 0x040B
    2f14:	90 91 0c 04 	lds	r25, 0x040C
    2f18:	82 2b       	or	r24, r18
    2f1a:	93 2b       	or	r25, r19
    2f1c:	90 93 0c 04 	sts	0x040C, r25
    2f20:	80 93 0b 04 	sts	0x040B, r24
						addressReceived = 1;
    2f24:	40 93 18 05 	sts	0x0518, r20
						menuState = 0;
    2f28:	10 92 19 05 	sts	0x0519, r1
						chooseMenu = 1;
    2f2c:	40 93 11 02 	sts	0x0211, r20
    2f30:	a3 cf       	rjmp	.-186    	; 0x2e78 <__vector_25+0x4a>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    2f32:	8a 3a       	cpi	r24, 0xAA	; 170
    2f34:	31 f1       	breq	.+76     	; 0x2f82 <__vector_25+0x154>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    2f36:	85 35       	cpi	r24, 0x55	; 85
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <__vector_25+0x10e>
    2f3a:	9e cf       	rjmp	.-196    	; 0x2e78 <__vector_25+0x4a>
						chooseMenu = 1;
    2f3c:	90 93 11 02 	sts	0x0211, r25
						menuChoice = 0;
    2f40:	10 92 17 05 	sts	0x0517, r1
    2f44:	99 cf       	rjmp	.-206    	; 0x2e78 <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    2f46:	80 91 53 05 	lds	r24, 0x0553
    2f4a:	8f 3f       	cpi	r24, 0xFF	; 255
    2f4c:	e9 f0       	breq	.+58     	; 0x2f88 <__vector_25+0x15a>
				currentOsccal++;
    2f4e:	8f 5f       	subi	r24, 0xFF	; 255
    2f50:	80 93 53 05 	sts	0x0553, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    2f54:	80 93 66 00 	sts	0x0066, r24
    2f58:	8f cf       	rjmp	.-226    	; 0x2e78 <__vector_25+0x4a>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    2f5a:	80 93 0b 04 	sts	0x040B, r24
    2f5e:	10 92 0c 04 	sts	0x040C, r1
						menuState = 1;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	80 93 19 05 	sts	0x0519, r24
    2f68:	87 cf       	rjmp	.-242    	; 0x2e78 <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	f3 cf       	rjmp	.-26     	; 0x2f54 <__vector_25+0x126>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    2f6e:	83 37       	cpi	r24, 0x73	; 115
    2f70:	09 f0       	breq	.+2      	; 0x2f74 <__vector_25+0x146>
    2f72:	82 cf       	rjmp	.-252    	; 0x2e78 <__vector_25+0x4a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    2f74:	8d ef       	ldi	r24, 0xFD	; 253
    2f76:	9f e0       	ldi	r25, 0x0F	; 15
    2f78:	60 91 53 05 	lds	r22, 0x0553
    2f7c:	0e 94 78 30 	call	0x60f0	; 0x60f0 <__eewr_byte_m2560>
    2f80:	7b cf       	rjmp	.-266    	; 0x2e78 <__vector_25+0x4a>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    2f82:	90 93 1a 05 	sts	0x051A, r25
    2f86:	78 cf       	rjmp	.-272    	; 0x2e78 <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    2f88:	8f ef       	ldi	r24, 0xFF	; 255
    2f8a:	e4 cf       	rjmp	.-56     	; 0x2f54 <__vector_25+0x126>

00002f8c <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    2f8c:	86 b1       	in	r24, 0x06	; 6
    2f8e:	66 b1       	in	r22, 0x06	; 6
    2f90:	26 b1       	in	r18, 0x06	; 6
    2f92:	46 b1       	in	r20, 0x06	; 6
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	28 70       	andi	r18, 0x08	; 8
    2f98:	30 70       	andi	r19, 0x00	; 0
    2f9a:	35 95       	asr	r19
    2f9c:	27 95       	ror	r18
    2f9e:	35 95       	asr	r19
    2fa0:	27 95       	ror	r18
    2fa2:	35 95       	asr	r19
    2fa4:	27 95       	ror	r18
    2fa6:	22 0f       	add	r18, r18
    2fa8:	33 1f       	adc	r19, r19
    2faa:	70 e0       	ldi	r23, 0x00	; 0
    2fac:	64 70       	andi	r22, 0x04	; 4
    2fae:	70 70       	andi	r23, 0x00	; 0
    2fb0:	75 95       	asr	r23
    2fb2:	67 95       	ror	r22
    2fb4:	75 95       	asr	r23
    2fb6:	67 95       	ror	r22
    2fb8:	26 0f       	add	r18, r22
    2fba:	37 1f       	adc	r19, r23
    2fbc:	22 0f       	add	r18, r18
    2fbe:	33 1f       	adc	r19, r19
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	42 70       	andi	r20, 0x02	; 2
    2fc4:	50 70       	andi	r21, 0x00	; 0
    2fc6:	55 95       	asr	r21
    2fc8:	47 95       	ror	r20
    2fca:	24 0f       	add	r18, r20
    2fcc:	35 1f       	adc	r19, r21
    2fce:	22 0f       	add	r18, r18
    2fd0:	81 70       	andi	r24, 0x01	; 1
}
    2fd2:	82 0f       	add	r24, r18
    2fd4:	08 95       	ret

00002fd6 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2fd6:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    2fd8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    2fda:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    2fdc:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    2fe0:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    2fe4:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    2fe8:	8e ef       	ldi	r24, 0xFE	; 254
    2fea:	9f e0       	ldi	r25, 0x0F	; 15
    2fec:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__eerd_word_m2560>
    2ff0:	90 93 0c 04 	sts	0x040C, r25
    2ff4:	80 93 0b 04 	sts	0x040B, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    2ff8:	8d ef       	ldi	r24, 0xFD	; 253
    2ffa:	9f e0       	ldi	r25, 0x0F	; 15
    2ffc:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <__eerd_byte_m2560>
    3000:	80 93 53 05 	sts	0x0553, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    3004:	98 2f       	mov	r25, r24
    3006:	91 50       	subi	r25, 0x01	; 1
    3008:	9e 3f       	cpi	r25, 0xFE	; 254
    300a:	d8 f5       	brcc	.+118    	; 0x3082 <initPeripherals+0xac>
		OSCCAL = currentOsccal;
    300c:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    3010:	80 91 0b 04 	lds	r24, 0x040B
    3014:	90 91 0c 04 	lds	r25, 0x040C
    3018:	9c 01       	movw	r18, r24
    301a:	21 58       	subi	r18, 0x81	; 129
    301c:	3c 40       	sbci	r19, 0x0C	; 12
    301e:	23 30       	cpi	r18, 0x03	; 3
    3020:	31 05       	cpc	r19, r1
    3022:	f8 f4       	brcc	.+62     	; 0x3062 <initPeripherals+0x8c>
		hardwareRevision = HW_REV_3_0;
    3024:	10 92 42 05 	sts	0x0542, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    3028:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <initPortsIO>
	initAdc();
    302c:	0e 94 cd 18 	call	0x319a	; 0x319a <initAdc>
	initMotors();
    3030:	0e 94 a2 1b 	call	0x3744	; 0x3744 <initMotors>
	initRGBleds();
    3034:	0e 94 7f 22 	call	0x44fe	; 0x44fe <initRGBleds>
	initSPI();
    3038:	0e 94 0b 08 	call	0x1016	; 0x1016 <initSPI>
	mirf_init();
    303c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <mirf_init>
	if(spiCommError==0) {
    3040:	80 91 0e 04 	lds	r24, 0x040E
    3044:	88 23       	and	r24, r24
    3046:	29 f4       	brne	.+10     	; 0x3052 <initPeripherals+0x7c>
		rfFlags |= 1;
    3048:	80 91 0d 04 	lds	r24, 0x040D
    304c:	81 60       	ori	r24, 0x01	; 1
    304e:	80 93 0d 04 	sts	0x040D, r24
	}
	initUsart0();
    3052:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <initUsart0>
	initAccelerometer();
    3056:	0e 94 c7 23 	call	0x478e	; 0x478e <initAccelerometer>
	init_ir_remote_control();
    305a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <init_ir_remote_control>

	sei();			// enable global interrupts
    305e:	78 94       	sei

	
}
    3060:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    3062:	2c e0       	ldi	r18, 0x0C	; 12
    3064:	80 38       	cpi	r24, 0x80	; 128
    3066:	92 07       	cpc	r25, r18
    3068:	21 f4       	brne	.+8      	; 0x3072 <initPeripherals+0x9c>
		hardwareRevision = HW_REV_3_0_1;
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	80 93 42 05 	sts	0x0542, r24
    3070:	db cf       	rjmp	.-74     	; 0x3028 <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    3072:	2c e0       	ldi	r18, 0x0C	; 12
    3074:	84 38       	cpi	r24, 0x84	; 132
    3076:	92 07       	cpc	r25, r18
    3078:	b8 f2       	brcs	.-82     	; 0x3028 <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    307a:	82 e0       	ldi	r24, 0x02	; 2
    307c:	80 93 42 05 	sts	0x0542, r24
    3080:	d3 cf       	rjmp	.-90     	; 0x3028 <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    3082:	60 91 66 00 	lds	r22, 0x0066
    3086:	60 93 53 05 	sts	0x0553, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    308a:	8d ef       	ldi	r24, 0xFD	; 253
    308c:	9f e0       	ldi	r25, 0x0F	; 15
    308e:	0e 94 78 30 	call	0x60f0	; 0x60f0 <__eewr_byte_m2560>
    3092:	be cf       	rjmp	.-132    	; 0x3010 <initPeripherals+0x3a>

00003094 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    3094:	1f 92       	push	r1
    3096:	0f 92       	push	r0
    3098:	0f b6       	in	r0, 0x3f	; 63
    309a:	0f 92       	push	r0
    309c:	11 24       	eor	r1, r1

}
    309e:	0f 90       	pop	r0
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	0f 90       	pop	r0
    30a4:	1f 90       	pop	r1
    30a6:	18 95       	reti

000030a8 <sleep>:

void sleep(unsigned char seconds) {
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    30ac:	9e e1       	ldi	r25, 0x1E	; 30
    30ae:	89 9f       	mul	r24, r25
    30b0:	e0 01       	movw	r28, r0
    30b2:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    30b4:	80 91 68 00 	lds	r24, 0x0068
    30b8:	8d 7f       	andi	r24, 0xFD	; 253
    30ba:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    30be:	80 91 6c 00 	lds	r24, 0x006C
    30c2:	8f 77       	andi	r24, 0x7F	; 127
    30c4:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    30c8:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    30ca:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    30ce:	80 91 7a 00 	lds	r24, 0x007A
    30d2:	80 61       	ori	r24, 0x10	; 16
    30d4:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    30d8:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    30dc:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    30e0:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    30e4:	88 b3       	in	r24, 0x18	; 24
    30e6:	87 60       	ori	r24, 0x07	; 7
    30e8:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    30ea:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    30ee:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    30f2:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    30f6:	89 b3       	in	r24, 0x19	; 25
    30f8:	87 60       	ori	r24, 0x07	; 7
    30fa:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    30fc:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    3100:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    3104:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <closeUsart>
	closeSPI();
    3108:	0e 94 17 08 	call	0x102e	; 0x102e <closeSPI>
	i2c_close();
    310c:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <i2c_close>

	// set port pins
	initPortsIO();
    3110:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    3114:	83 b7       	in	r24, 0x33	; 51
    3116:	8f 60       	ori	r24, 0x0F	; 15
    3118:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    3120:	80 91 b0 00 	lds	r24, 0x00B0
    3124:	8d 7f       	andi	r24, 0xFD	; 253
    3126:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    312a:	80 91 b1 00 	lds	r24, 0x00B1
    312e:	87 60       	ori	r24, 0x07	; 7
    3130:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    3134:	20 97       	sbiw	r28, 0x00	; 0
    3136:	19 f0       	breq	.+6      	; 0x313e <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3138:	88 95       	sleep
		pause--;
    313a:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    313c:	e9 f7       	brne	.-6      	; 0x3138 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    313e:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    3140:	80 91 b1 00 	lds	r24, 0x00B1
    3144:	88 7f       	andi	r24, 0xF8	; 248
    3146:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    314a:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    314e:	80 91 b0 00 	lds	r24, 0x00B0
    3152:	82 60       	ori	r24, 0x02	; 2
    3154:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3158:	8f ef       	ldi	r24, 0xFF	; 255
    315a:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    315e:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3162:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    3166:	10 92 f4 03 	sts	0x03F4, r1
    316a:	10 92 f3 03 	sts	0x03F3, r1
	pwm_left = 0;
    316e:	10 92 f6 03 	sts	0x03F6, r1
    3172:	10 92 f5 03 	sts	0x03F5, r1
	initPeripherals();
    3176:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <initPeripherals>

}
    317a:	df 91       	pop	r29
    317c:	cf 91       	pop	r28
    317e:	08 95       	ret

00003180 <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    3180:	60 91 3b 05 	lds	r22, 0x053B
    3184:	70 91 3c 05 	lds	r23, 0x053C
	return clockTick;
}
    3188:	80 91 3d 05 	lds	r24, 0x053D
    318c:	90 91 3e 05 	lds	r25, 0x053E
    3190:	08 95       	ret

00003192 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	80 93 c5 03 	sts	0x03C5, r24
}
    3198:	08 95       	ret

0000319a <initAdc>:

#include "adc.h"


void initAdc(void) {
    319a:	cf 93       	push	r28
    319c:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    319e:	ea e7       	ldi	r30, 0x7A	; 122
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	10 82       	st	Z, r1
	ADCSRB = 0;
    31a4:	ab e7       	ldi	r26, 0x7B	; 123
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	1c 92       	st	X, r1
	ADMUX = 0;
    31aa:	cc e7       	ldi	r28, 0x7C	; 124
    31ac:	d0 e0       	ldi	r29, 0x00	; 0
    31ae:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    31b0:	80 81       	ld	r24, Z
    31b2:	86 60       	ori	r24, 0x06	; 6
    31b4:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    31b6:	88 81       	ld	r24, Y
    31b8:	80 64       	ori	r24, 0x40	; 64
    31ba:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    31bc:	80 81       	ld	r24, Z
    31be:	80 62       	ori	r24, 0x20	; 32
    31c0:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    31c2:	8c 91       	ld	r24, X
    31c4:	88 7f       	andi	r24, 0xF8	; 248
    31c6:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    31c8:	80 81       	ld	r24, Z
    31ca:	88 60       	ori	r24, 0x08	; 8
    31cc:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    31ce:	80 81       	ld	r24, Z
    31d0:	80 68       	ori	r24, 0x80	; 128
    31d2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    31d4:	80 81       	ld	r24, Z
    31d6:	80 64       	ori	r24, 0x40	; 64
    31d8:	80 83       	st	Z, r24

}
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	08 95       	ret

000031e0 <__vector_29>:

ISR(ADC_vect) {
    31e0:	1f 92       	push	r1
    31e2:	0f 92       	push	r0
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	0f 92       	push	r0
    31e8:	0b b6       	in	r0, 0x3b	; 59
    31ea:	0f 92       	push	r0
    31ec:	11 24       	eor	r1, r1
    31ee:	2f 93       	push	r18
    31f0:	3f 93       	push	r19
    31f2:	4f 93       	push	r20
    31f4:	5f 93       	push	r21
    31f6:	6f 93       	push	r22
    31f8:	8f 93       	push	r24
    31fa:	9f 93       	push	r25
    31fc:	af 93       	push	r26
    31fe:	bf 93       	push	r27
    3200:	ef 93       	push	r30
    3202:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    3204:	80 91 3b 05 	lds	r24, 0x053B
    3208:	90 91 3c 05 	lds	r25, 0x053C
    320c:	a0 91 3d 05 	lds	r26, 0x053D
    3210:	b0 91 3e 05 	lds	r27, 0x053E
    3214:	01 96       	adiw	r24, 0x01	; 1
    3216:	a1 1d       	adc	r26, r1
    3218:	b1 1d       	adc	r27, r1
    321a:	80 93 3b 05 	sts	0x053B, r24
    321e:	90 93 3c 05 	sts	0x053C, r25
    3222:	a0 93 3d 05 	sts	0x053D, r26
    3226:	b0 93 3e 05 	sts	0x053E, r27
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    322a:	20 91 78 00 	lds	r18, 0x0078
    322e:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    3230:	40 91 79 00 	lds	r20, 0x0079
    3234:	94 2f       	mov	r25, r20
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	28 2b       	or	r18, r24
    323a:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    323c:	80 91 bf 03 	lds	r24, 0x03BF
    3240:	82 30       	cpi	r24, 0x02	; 2
    3242:	09 f4       	brne	.+2      	; 0x3246 <__vector_29+0x66>
    3244:	ac c1       	rjmp	.+856    	; 0x359e <__vector_29+0x3be>
    3246:	83 30       	cpi	r24, 0x03	; 3
    3248:	08 f4       	brcc	.+2      	; 0x324c <__vector_29+0x6c>
    324a:	45 c0       	rjmp	.+138    	; 0x32d6 <__vector_29+0xf6>
    324c:	83 30       	cpi	r24, 0x03	; 3
    324e:	09 f4       	brne	.+2      	; 0x3252 <__vector_29+0x72>
    3250:	c9 c1       	rjmp	.+914    	; 0x35e4 <__vector_29+0x404>
    3252:	84 30       	cpi	r24, 0x04	; 4
    3254:	09 f4       	brne	.+2      	; 0x3258 <__vector_29+0x78>
    3256:	68 c1       	rjmp	.+720    	; 0x3528 <__vector_29+0x348>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3258:	80 91 c0 03 	lds	r24, 0x03C0
    325c:	82 30       	cpi	r24, 0x02	; 2
    325e:	09 f4       	brne	.+2      	; 0x3262 <__vector_29+0x82>
    3260:	4f c1       	rjmp	.+670    	; 0x3500 <__vector_29+0x320>
    3262:	83 30       	cpi	r24, 0x03	; 3
    3264:	08 f0       	brcs	.+2      	; 0x3268 <__vector_29+0x88>
    3266:	cd c0       	rjmp	.+410    	; 0x3402 <__vector_29+0x222>
    3268:	88 23       	and	r24, r24
    326a:	09 f0       	breq	.+2      	; 0x326e <__vector_29+0x8e>
    326c:	24 c1       	rjmp	.+584    	; 0x34b6 <__vector_29+0x2d6>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    326e:	80 91 2a 03 	lds	r24, 0x032A
    3272:	86 95       	lsr	r24
    3274:	80 93 29 03 	sts	0x0329, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    3278:	80 91 c1 03 	lds	r24, 0x03C1
    327c:	88 23       	and	r24, r24
    327e:	09 f0       	breq	.+2      	; 0x3282 <__vector_29+0xa2>
    3280:	e1 c1       	rjmp	.+962    	; 0x3644 <__vector_29+0x464>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	80 93 c0 03 	sts	0x03C0, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    328e:	90 91 29 03 	lds	r25, 0x0329
    3292:	98 30       	cpi	r25, 0x08	; 8
    3294:	08 f0       	brcs	.+2      	; 0x3298 <__vector_29+0xb8>
    3296:	ed c0       	rjmp	.+474    	; 0x3472 <__vector_29+0x292>
		ADCSRB &= ~(1 << MUX5);
    3298:	90 91 7b 00 	lds	r25, 0x007B
    329c:	97 7f       	andi	r25, 0xF7	; 247
    329e:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    32a2:	90 91 29 03 	lds	r25, 0x0329
    32a6:	90 5c       	subi	r25, 0xC0	; 192
    32a8:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    32ac:	82 30       	cpi	r24, 0x02	; 2
    32ae:	09 f4       	brne	.+2      	; 0x32b2 <__vector_29+0xd2>
    32b0:	ed c0       	rjmp	.+474    	; 0x348c <__vector_29+0x2ac>

	}

	//LED_BLUE_OFF;

}
    32b2:	ff 91       	pop	r31
    32b4:	ef 91       	pop	r30
    32b6:	bf 91       	pop	r27
    32b8:	af 91       	pop	r26
    32ba:	9f 91       	pop	r25
    32bc:	8f 91       	pop	r24
    32be:	6f 91       	pop	r22
    32c0:	5f 91       	pop	r21
    32c2:	4f 91       	pop	r20
    32c4:	3f 91       	pop	r19
    32c6:	2f 91       	pop	r18
    32c8:	0f 90       	pop	r0
    32ca:	0b be       	out	0x3b, r0	; 59
    32cc:	0f 90       	pop	r0
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	0f 90       	pop	r0
    32d2:	1f 90       	pop	r1
    32d4:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    32d6:	88 23       	and	r24, r24
    32d8:	09 f0       	breq	.+2      	; 0x32dc <__vector_29+0xfc>
    32da:	fe c0       	rjmp	.+508    	; 0x34d8 <__vector_29+0x2f8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    32dc:	60 91 2a 03 	lds	r22, 0x032A
    32e0:	6e 30       	cpi	r22, 0x0E	; 14
    32e2:	09 f4       	brne	.+2      	; 0x32e6 <__vector_29+0x106>
    32e4:	d0 c1       	rjmp	.+928    	; 0x3686 <__vector_29+0x4a6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    32e6:	46 2f       	mov	r20, r22
    32e8:	50 e0       	ldi	r21, 0x00	; 0
    32ea:	fa 01       	movw	r30, r20
    32ec:	ee 0f       	add	r30, r30
    32ee:	ff 1f       	adc	r31, r31
    32f0:	e1 5d       	subi	r30, 0xD1	; 209
    32f2:	fc 4f       	sbci	r31, 0xFC	; 252
    32f4:	31 83       	std	Z+1, r19	; 0x01
    32f6:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    32f8:	40 ff       	sbrs	r20, 0
    32fa:	77 c0       	rjmp	.+238    	; 0x33ea <__vector_29+0x20a>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    32fc:	fa 01       	movw	r30, r20
    32fe:	ee 0f       	add	r30, r30
    3300:	ff 1f       	adc	r31, r31
    3302:	e3 5d       	subi	r30, 0xD3	; 211
    3304:	fc 4f       	sbci	r31, 0xFC	; 252
    3306:	80 81       	ld	r24, Z
    3308:	91 81       	ldd	r25, Z+1	; 0x01
    330a:	fa 01       	movw	r30, r20
    330c:	ee 0f       	add	r30, r30
    330e:	ff 1f       	adc	r31, r31
    3310:	e1 5d       	subi	r30, 0xD1	; 209
    3312:	fc 4f       	sbci	r31, 0xFC	; 252
    3314:	40 81       	ld	r20, Z
    3316:	51 81       	ldd	r21, Z+1	; 0x01
    3318:	26 2f       	mov	r18, r22
    331a:	26 95       	lsr	r18
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	84 1b       	sub	r24, r20
    3320:	95 0b       	sbc	r25, r21
    3322:	22 0f       	add	r18, r18
    3324:	33 1f       	adc	r19, r19
    3326:	f9 01       	movw	r30, r18
    3328:	e9 58       	subi	r30, 0x89	; 137
    332a:	fc 4f       	sbci	r31, 0xFC	; 252
    332c:	40 81       	ld	r20, Z
    332e:	51 81       	ldd	r21, Z+1	; 0x01
    3330:	84 1b       	sub	r24, r20
    3332:	95 0b       	sbc	r25, r21
    3334:	f9 01       	movw	r30, r18
    3336:	e1 5a       	subi	r30, 0xA1	; 161
    3338:	fc 4f       	sbci	r31, 0xFC	; 252
    333a:	91 83       	std	Z+1, r25	; 0x01
    333c:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    333e:	97 fd       	sbrc	r25, 7
    3340:	bd c1       	rjmp	.+890    	; 0x36bc <__vector_29+0x4dc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    3342:	44 e0       	ldi	r20, 0x04	; 4
    3344:	81 30       	cpi	r24, 0x01	; 1
    3346:	94 07       	cpc	r25, r20
    3348:	24 f0       	brlt	.+8      	; 0x3352 <__vector_29+0x172>
					proximityResult[currentProx>>1] = 1024;
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	94 e0       	ldi	r25, 0x04	; 4
    334e:	91 83       	std	Z+1, r25	; 0x01
    3350:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    3352:	60 31       	cpi	r22, 0x10	; 16
    3354:	48 f4       	brcc	.+18     	; 0x3368 <__vector_29+0x188>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    3356:	8c 33       	cpi	r24, 0x3C	; 60
    3358:	91 05       	cpc	r25, r1
    335a:	0c f0       	brlt	.+2      	; 0x335e <__vector_29+0x17e>
    335c:	b4 c1       	rjmp	.+872    	; 0x36c6 <__vector_29+0x4e6>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    335e:	29 53       	subi	r18, 0x39	; 57
    3360:	3c 4f       	sbci	r19, 0xFC	; 252
    3362:	f9 01       	movw	r30, r18
    3364:	91 83       	std	Z+1, r25	; 0x01
    3366:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    3368:	80 91 50 05 	lds	r24, 0x0550
    336c:	88 23       	and	r24, r24
    336e:	09 f4       	brne	.+2      	; 0x3372 <__vector_29+0x192>
    3370:	75 c1       	rjmp	.+746    	; 0x365c <__vector_29+0x47c>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3372:	80 91 6f 03 	lds	r24, 0x036F
    3376:	90 91 70 03 	lds	r25, 0x0370
    337a:	f1 e0       	ldi	r31, 0x01	; 1
    337c:	84 3a       	cpi	r24, 0xA4	; 164
    337e:	9f 07       	cpc	r25, r31
    3380:	cc f0       	brlt	.+50     	; 0x33b4 <__vector_29+0x1d4>
    3382:	80 91 71 03 	lds	r24, 0x0371
    3386:	90 91 72 03 	lds	r25, 0x0372
    338a:	21 e0       	ldi	r18, 0x01	; 1
    338c:	84 3a       	cpi	r24, 0xA4	; 164
    338e:	92 07       	cpc	r25, r18
    3390:	8c f0       	brlt	.+34     	; 0x33b4 <__vector_29+0x1d4>
    3392:	80 91 73 03 	lds	r24, 0x0373
    3396:	90 91 74 03 	lds	r25, 0x0374
    339a:	41 e0       	ldi	r20, 0x01	; 1
    339c:	84 3a       	cpi	r24, 0xA4	; 164
    339e:	94 07       	cpc	r25, r20
    33a0:	4c f0       	brlt	.+18     	; 0x33b4 <__vector_29+0x1d4>
    33a2:	80 91 75 03 	lds	r24, 0x0375
    33a6:	90 91 76 03 	lds	r25, 0x0376
    33aa:	e1 e0       	ldi	r30, 0x01	; 1
    33ac:	84 3a       	cpi	r24, 0xA4	; 164
    33ae:	9e 07       	cpc	r25, r30
    33b0:	0c f0       	brlt	.+2      	; 0x33b4 <__vector_29+0x1d4>
    33b2:	54 c1       	rjmp	.+680    	; 0x365c <__vector_29+0x47c>
						cliffDetectedFlag = 1;
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	80 93 51 05 	sts	0x0551, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    33ba:	10 92 f6 03 	sts	0x03F6, r1
    33be:	10 92 f5 03 	sts	0x03F5, r1
						OCR4A = 0;
    33c2:	10 92 a9 00 	sts	0x00A9, r1
    33c6:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    33ca:	10 92 ab 00 	sts	0x00AB, r1
    33ce:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    33d2:	10 92 f4 03 	sts	0x03F4, r1
    33d6:	10 92 f3 03 	sts	0x03F3, r1
						OCR3A = 0;
    33da:	10 92 99 00 	sts	0x0099, r1
    33de:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    33e2:	10 92 9b 00 	sts	0x009B, r1
    33e6:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    33ea:	6f 5f       	subi	r22, 0xFF	; 255
    33ec:	60 93 2a 03 	sts	0x032A, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    33f0:	68 31       	cpi	r22, 0x18	; 24
    33f2:	08 f4       	brcc	.+2      	; 0x33f6 <__vector_29+0x216>
    33f4:	31 cf       	rjmp	.-414    	; 0x3258 <__vector_29+0x78>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    33f6:	10 92 2a 03 	sts	0x032A, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	80 93 c6 03 	sts	0x03C6, r24
    3400:	2b cf       	rjmp	.-426    	; 0x3258 <__vector_29+0x78>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3402:	83 30       	cpi	r24, 0x03	; 3
    3404:	09 f4       	brne	.+2      	; 0x3408 <__vector_29+0x228>
    3406:	b7 c0       	rjmp	.+366    	; 0x3576 <__vector_29+0x396>
    3408:	84 30       	cpi	r24, 0x04	; 4
    340a:	09 f0       	breq	.+2      	; 0x340e <__vector_29+0x22e>
    340c:	40 cf       	rjmp	.-384    	; 0x328e <__vector_29+0xae>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    340e:	90 91 2c 03 	lds	r25, 0x032C
    3412:	90 93 29 03 	sts	0x0329, r25
			rightChannelPhase = rightMotorPhase;
    3416:	90 91 2d 03 	lds	r25, 0x032D
    341a:	90 93 c1 03 	sts	0x03C1, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    341e:	90 91 c2 03 	lds	r25, 0x03C2
    3422:	99 23       	and	r25, r25
    3424:	09 f0       	breq	.+2      	; 0x3428 <__vector_29+0x248>
    3426:	08 c1       	rjmp	.+528    	; 0x3638 <__vector_29+0x458>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3428:	83 e0       	ldi	r24, 0x03	; 3
    342a:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    342e:	10 92 c0 03 	sts	0x03C0, r1

			if(currentProx==14 && measBattery==1) {
    3432:	60 91 2a 03 	lds	r22, 0x032A
    3436:	6e 30       	cpi	r22, 0x0E	; 14
    3438:	09 f4       	brne	.+2      	; 0x343c <__vector_29+0x25c>
    343a:	1f c1       	rjmp	.+574    	; 0x367a <__vector_29+0x49a>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    343c:	86 2f       	mov	r24, r22
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	60 ff       	sbrs	r22, 0
    3442:	f1 c0       	rjmp	.+482    	; 0x3626 <__vector_29+0x446>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    3444:	60 31       	cpi	r22, 0x10	; 16
    3446:	08 f4       	brcc	.+2      	; 0x344a <__vector_29+0x26a>
    3448:	0c c1       	rjmp	.+536    	; 0x3662 <__vector_29+0x482>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    344a:	20 91 42 05 	lds	r18, 0x0542
    344e:	22 23       	and	r18, r18
    3450:	09 f0       	breq	.+2      	; 0x3454 <__vector_29+0x274>
    3452:	d5 c0       	rjmp	.+426    	; 0x35fe <__vector_29+0x41e>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    3454:	40 97       	sbiw	r24, 0x10	; 16
    3456:	95 95       	asr	r25
    3458:	87 95       	ror	r24
    345a:	21 e0       	ldi	r18, 0x01	; 1
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	02 c0       	rjmp	.+4      	; 0x3464 <__vector_29+0x284>
    3460:	22 0f       	add	r18, r18
    3462:	33 1f       	adc	r19, r19
    3464:	8a 95       	dec	r24
    3466:	e2 f7       	brpl	.-8      	; 0x3460 <__vector_29+0x280>
    3468:	20 93 05 01 	sts	0x0105, r18
    346c:	80 91 c0 03 	lds	r24, 0x03C0
    3470:	0e cf       	rjmp	.-484    	; 0x328e <__vector_29+0xae>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    3472:	90 91 7b 00 	lds	r25, 0x007B
    3476:	98 60       	ori	r25, 0x08	; 8
    3478:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    347c:	90 91 29 03 	lds	r25, 0x0329
    3480:	98 5c       	subi	r25, 0xC8	; 200
    3482:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3486:	82 30       	cpi	r24, 0x02	; 2
    3488:	09 f0       	breq	.+2      	; 0x348c <__vector_29+0x2ac>
    348a:	13 cf       	rjmp	.-474    	; 0x32b2 <__vector_29+0xd2>

		if(hardwareRevision == HW_REV_3_0) {
    348c:	20 91 42 05 	lds	r18, 0x0542
    3490:	22 23       	and	r18, r18
    3492:	51 f0       	breq	.+20     	; 0x34a8 <__vector_29+0x2c8>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    3494:	21 30       	cpi	r18, 0x01	; 1
    3496:	19 f0       	breq	.+6      	; 0x349e <__vector_29+0x2be>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    3498:	22 30       	cpi	r18, 0x02	; 2
    349a:	09 f0       	breq	.+2      	; 0x349e <__vector_29+0x2be>
    349c:	0a cf       	rjmp	.-492    	; 0x32b2 <__vector_29+0xd2>
			PORTJ = 0xFF;
    349e:	8f ef       	ldi	r24, 0xFF	; 255
    34a0:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    34a4:	12 b8       	out	0x02, r1	; 2
    34a6:	05 cf       	rjmp	.-502    	; 0x32b2 <__vector_29+0xd2>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    34a8:	80 91 05 01 	lds	r24, 0x0105
    34ac:	80 7f       	andi	r24, 0xF0	; 240
    34ae:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    34b2:	12 b8       	out	0x02, r1	; 2
    34b4:	fe ce       	rjmp	.-516    	; 0x32b2 <__vector_29+0xd2>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    34b6:	81 30       	cpi	r24, 0x01	; 1
    34b8:	09 f0       	breq	.+2      	; 0x34bc <__vector_29+0x2dc>
    34ba:	e9 ce       	rjmp	.-558    	; 0x328e <__vector_29+0xae>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    34bc:	80 91 2b 03 	lds	r24, 0x032B
    34c0:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    34c4:	80 91 2e 03 	lds	r24, 0x032E
    34c8:	80 93 c2 03 	sts	0x03C2, r24
			adcSaveDataTo = SAVE_TO_PROX;
    34cc:	10 92 bf 03 	sts	0x03BF, r1
			adcSamplingState = 2;
    34d0:	82 e0       	ldi	r24, 0x02	; 2
    34d2:	80 93 c0 03 	sts	0x03C0, r24
			break;
    34d6:	db ce       	rjmp	.-586    	; 0x328e <__vector_29+0xae>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    34d8:	81 30       	cpi	r24, 0x01	; 1
    34da:	09 f0       	breq	.+2      	; 0x34de <__vector_29+0x2fe>
    34dc:	bd ce       	rjmp	.-646    	; 0x3258 <__vector_29+0x78>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    34de:	80 91 e1 03 	lds	r24, 0x03E1
    34e2:	90 91 e2 03 	lds	r25, 0x03E2
    34e6:	82 0f       	add	r24, r18
    34e8:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    34ea:	96 95       	lsr	r25
    34ec:	87 95       	ror	r24
    34ee:	90 93 e2 03 	sts	0x03E2, r25
    34f2:	80 93 e1 03 	sts	0x03E1, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    34f6:	80 91 c0 03 	lds	r24, 0x03C0
    34fa:	82 30       	cpi	r24, 0x02	; 2
    34fc:	09 f0       	breq	.+2      	; 0x3500 <__vector_29+0x320>
    34fe:	b1 ce       	rjmp	.-670    	; 0x3262 <__vector_29+0x82>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    3500:	80 91 2c 03 	lds	r24, 0x032C
    3504:	80 93 29 03 	sts	0x0329, r24
			rightChannelPhase = rightMotorPhase;
    3508:	80 91 2d 03 	lds	r24, 0x032D
    350c:	80 93 c1 03 	sts	0x03C1, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3510:	80 91 c2 03 	lds	r24, 0x03C2
    3514:	88 23       	and	r24, r24
    3516:	09 f0       	breq	.+2      	; 0x351a <__vector_29+0x33a>
    3518:	9b c0       	rjmp	.+310    	; 0x3650 <__vector_29+0x470>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    351a:	83 e0       	ldi	r24, 0x03	; 3
    351c:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3520:	83 e0       	ldi	r24, 0x03	; 3
    3522:	80 93 c0 03 	sts	0x03C0, r24
			break;
    3526:	b3 ce       	rjmp	.-666    	; 0x328e <__vector_29+0xae>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    3528:	80 91 0a 02 	lds	r24, 0x020A
    352c:	88 23       	and	r24, r24
    352e:	09 f4       	brne	.+2      	; 0x3532 <__vector_29+0x352>
    3530:	93 ce       	rjmp	.-730    	; 0x3258 <__vector_29+0x78>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    3532:	90 91 00 01 	lds	r25, 0x0100
    3536:	93 fd       	sbrc	r25, 3
    3538:	8f ce       	rjmp	.-738    	; 0x3258 <__vector_29+0x78>
    353a:	90 91 00 01 	lds	r25, 0x0100
    353e:	94 fd       	sbrc	r25, 4
    3540:	8b ce       	rjmp	.-746    	; 0x3258 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    3542:	48 2f       	mov	r20, r24
    3544:	4f 5f       	subi	r20, 0xFF	; 255
    3546:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    354a:	45 30       	cpi	r20, 0x05	; 5
    354c:	08 f4       	brcc	.+2      	; 0x3550 <__vector_29+0x370>
    354e:	84 ce       	rjmp	.-760    	; 0x3258 <__vector_29+0x78>
					left_vel_sum += value;
    3550:	80 91 eb 03 	lds	r24, 0x03EB
    3554:	90 91 ec 03 	lds	r25, 0x03EC
    3558:	82 0f       	add	r24, r18
    355a:	93 1f       	adc	r25, r19
    355c:	90 93 ec 03 	sts	0x03EC, r25
    3560:	80 93 eb 03 	sts	0x03EB, r24
					if(firstSampleLeft==8) {
    3564:	48 30       	cpi	r20, 0x08	; 8
    3566:	09 f0       	breq	.+2      	; 0x356a <__vector_29+0x38a>
    3568:	77 ce       	rjmp	.-786    	; 0x3258 <__vector_29+0x78>
						firstSampleLeft = 0;
    356a:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	80 93 07 02 	sts	0x0207, r24
    3574:	71 ce       	rjmp	.-798    	; 0x3258 <__vector_29+0x78>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    3576:	80 91 2b 03 	lds	r24, 0x032B
    357a:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    357e:	80 91 2e 03 	lds	r24, 0x032E
    3582:	80 93 c2 03 	sts	0x03C2, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    3586:	80 91 c1 03 	lds	r24, 0x03C1
    358a:	88 23       	and	r24, r24
    358c:	09 f0       	breq	.+2      	; 0x3590 <__vector_29+0x3b0>
    358e:	4e c0       	rjmp	.+156    	; 0x362c <__vector_29+0x44c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    3596:	84 e0       	ldi	r24, 0x04	; 4
    3598:	80 93 c0 03 	sts	0x03C0, r24
			break;
    359c:	78 ce       	rjmp	.-784    	; 0x328e <__vector_29+0xae>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    359e:	80 91 09 02 	lds	r24, 0x0209
    35a2:	88 23       	and	r24, r24
    35a4:	09 f4       	brne	.+2      	; 0x35a8 <__vector_29+0x3c8>
    35a6:	58 ce       	rjmp	.-848    	; 0x3258 <__vector_29+0x78>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    35a8:	63 99       	sbic	0x0c, 3	; 12
    35aa:	56 ce       	rjmp	.-852    	; 0x3258 <__vector_29+0x78>
    35ac:	64 99       	sbic	0x0c, 4	; 12
    35ae:	54 ce       	rjmp	.-856    	; 0x3258 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    35b0:	48 2f       	mov	r20, r24
    35b2:	4f 5f       	subi	r20, 0xFF	; 255
    35b4:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    35b8:	45 30       	cpi	r20, 0x05	; 5
    35ba:	08 f4       	brcc	.+2      	; 0x35be <__vector_29+0x3de>
    35bc:	4d ce       	rjmp	.-870    	; 0x3258 <__vector_29+0x78>
					right_vel_sum += value;
    35be:	80 91 ed 03 	lds	r24, 0x03ED
    35c2:	90 91 ee 03 	lds	r25, 0x03EE
    35c6:	82 0f       	add	r24, r18
    35c8:	93 1f       	adc	r25, r19
    35ca:	90 93 ee 03 	sts	0x03EE, r25
    35ce:	80 93 ed 03 	sts	0x03ED, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    35d2:	48 30       	cpi	r20, 0x08	; 8
    35d4:	09 f0       	breq	.+2      	; 0x35d8 <__vector_29+0x3f8>
    35d6:	40 ce       	rjmp	.-896    	; 0x3258 <__vector_29+0x78>
						firstSampleRight = 0;
    35d8:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	80 93 08 02 	sts	0x0208, r24
    35e2:	3a ce       	rjmp	.-908    	; 0x3258 <__vector_29+0x78>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    35e4:	80 91 df 03 	lds	r24, 0x03DF
    35e8:	90 91 e0 03 	lds	r25, 0x03E0
    35ec:	82 0f       	add	r24, r18
    35ee:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    35f0:	96 95       	lsr	r25
    35f2:	87 95       	ror	r24
    35f4:	90 93 e0 03 	sts	0x03E0, r25
    35f8:	80 93 df 03 	sts	0x03DF, r24
			break;
    35fc:	2d ce       	rjmp	.-934    	; 0x3258 <__vector_29+0x78>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    35fe:	21 30       	cpi	r18, 0x01	; 1
    3600:	11 f0       	breq	.+4      	; 0x3606 <__vector_29+0x426>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    3602:	22 30       	cpi	r18, 0x02	; 2
    3604:	81 f4       	brne	.+32     	; 0x3626 <__vector_29+0x446>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    3606:	40 91 05 01 	lds	r20, 0x0105
    360a:	40 97       	sbiw	r24, 0x10	; 16
    360c:	95 95       	asr	r25
    360e:	87 95       	ror	r24
    3610:	21 e0       	ldi	r18, 0x01	; 1
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	02 c0       	rjmp	.+4      	; 0x361a <__vector_29+0x43a>
    3616:	22 0f       	add	r18, r18
    3618:	33 1f       	adc	r19, r19
    361a:	8a 95       	dec	r24
    361c:	e2 f7       	brpl	.-8      	; 0x3616 <__vector_29+0x436>
    361e:	20 95       	com	r18
    3620:	24 23       	and	r18, r20
    3622:	20 93 05 01 	sts	0x0105, r18
    3626:	80 91 c0 03 	lds	r24, 0x03C0
    362a:	31 ce       	rjmp	.-926    	; 0x328e <__vector_29+0xae>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    362c:	81 30       	cpi	r24, 0x01	; 1
    362e:	d1 f1       	breq	.+116    	; 0x36a4 <__vector_29+0x4c4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3630:	85 e0       	ldi	r24, 0x05	; 5
    3632:	80 93 bf 03 	sts	0x03BF, r24
    3636:	af cf       	rjmp	.-162    	; 0x3596 <__vector_29+0x3b6>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3638:	91 30       	cpi	r25, 0x01	; 1
    363a:	09 f0       	breq	.+2      	; 0x363e <__vector_29+0x45e>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    363c:	85 e0       	ldi	r24, 0x05	; 5
    363e:	80 93 bf 03 	sts	0x03BF, r24
    3642:	f5 ce       	rjmp	.-534    	; 0x342e <__vector_29+0x24e>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3644:	81 30       	cpi	r24, 0x01	; 1
    3646:	b1 f1       	breq	.+108    	; 0x36b4 <__vector_29+0x4d4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3648:	85 e0       	ldi	r24, 0x05	; 5
    364a:	80 93 bf 03 	sts	0x03BF, r24
    364e:	1c ce       	rjmp	.-968    	; 0x3288 <__vector_29+0xa8>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3650:	81 30       	cpi	r24, 0x01	; 1
    3652:	61 f1       	breq	.+88     	; 0x36ac <__vector_29+0x4cc>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3654:	85 e0       	ldi	r24, 0x05	; 5
    3656:	80 93 bf 03 	sts	0x03BF, r24
    365a:	62 cf       	rjmp	.-316    	; 0x3520 <__vector_29+0x340>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    365c:	10 92 51 05 	sts	0x0551, r1
    3660:	c4 ce       	rjmp	.-632    	; 0x33ea <__vector_29+0x20a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    3662:	66 95       	lsr	r22
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	02 c0       	rjmp	.+4      	; 0x366e <__vector_29+0x48e>
    366a:	88 0f       	add	r24, r24
    366c:	99 1f       	adc	r25, r25
    366e:	6a 95       	dec	r22
    3670:	e2 f7       	brpl	.-8      	; 0x366a <__vector_29+0x48a>
    3672:	82 b9       	out	0x02, r24	; 2
    3674:	80 91 c0 03 	lds	r24, 0x03C0
    3678:	0a ce       	rjmp	.-1004   	; 0x328e <__vector_29+0xae>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    367a:	80 91 c5 03 	lds	r24, 0x03C5
    367e:	81 30       	cpi	r24, 0x01	; 1
    3680:	a1 f1       	breq	.+104    	; 0x36ea <__vector_29+0x50a>
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	04 ce       	rjmp	.-1016   	; 0x328e <__vector_29+0xae>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3686:	80 91 c5 03 	lds	r24, 0x03C5
    368a:	82 30       	cpi	r24, 0x02	; 2
    368c:	09 f0       	breq	.+2      	; 0x3690 <__vector_29+0x4b0>
    368e:	2b ce       	rjmp	.-938    	; 0x32e6 <__vector_29+0x106>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    3690:	30 93 c4 03 	sts	0x03C4, r19
    3694:	20 93 c3 03 	sts	0x03C3, r18
				measBattery = 0;
    3698:	10 92 c5 03 	sts	0x03C5, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    369c:	46 98       	cbi	0x08, 6	; 8
    369e:	4e e0       	ldi	r20, 0x0E	; 14
    36a0:	50 e0       	ldi	r21, 0x00	; 0
    36a2:	2a ce       	rjmp	.-940    	; 0x32f8 <__vector_29+0x118>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    36a4:	82 e0       	ldi	r24, 0x02	; 2
    36a6:	80 93 bf 03 	sts	0x03BF, r24
    36aa:	75 cf       	rjmp	.-278    	; 0x3596 <__vector_29+0x3b6>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    36ac:	84 e0       	ldi	r24, 0x04	; 4
    36ae:	80 93 bf 03 	sts	0x03BF, r24
    36b2:	36 cf       	rjmp	.-404    	; 0x3520 <__vector_29+0x340>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    36b4:	82 e0       	ldi	r24, 0x02	; 2
    36b6:	80 93 bf 03 	sts	0x03BF, r24
    36ba:	e6 cd       	rjmp	.-1076   	; 0x3288 <__vector_29+0xa8>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    36bc:	11 82       	std	Z+1, r1	; 0x01
    36be:	10 82       	st	Z, r1
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	46 ce       	rjmp	.-884    	; 0x3352 <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    36c6:	ac 01       	movw	r20, r24
    36c8:	44 5c       	subi	r20, 0xC4	; 196
    36ca:	5f 4f       	sbci	r21, 0xFF	; 255
    36cc:	55 95       	asr	r21
    36ce:	47 95       	ror	r20
    36d0:	48 37       	cpi	r20, 0x78	; 120
    36d2:	51 05       	cpc	r21, r1
    36d4:	7c f4       	brge	.+30     	; 0x36f4 <__vector_29+0x514>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    36d6:	29 53       	subi	r18, 0x39	; 57
    36d8:	3c 4f       	sbci	r19, 0xFC	; 252
    36da:	cc 97       	sbiw	r24, 0x3c	; 60
    36dc:	95 95       	asr	r25
    36de:	87 95       	ror	r24
    36e0:	cc 96       	adiw	r24, 0x3c	; 60
    36e2:	f9 01       	movw	r30, r18
    36e4:	91 83       	std	Z+1, r25	; 0x01
    36e6:	80 83       	st	Z, r24
    36e8:	3f ce       	rjmp	.-898    	; 0x3368 <__vector_29+0x188>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    36ea:	82 e0       	ldi	r24, 0x02	; 2
    36ec:	80 93 c5 03 	sts	0x03C5, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    36f0:	46 9a       	sbi	0x08, 6	; 8
    36f2:	a4 ce       	rjmp	.-696    	; 0x343c <__vector_29+0x25c>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    36f4:	ac 01       	movw	r20, r24
    36f6:	44 5d       	subi	r20, 0xD4	; 212
    36f8:	5e 4f       	sbci	r21, 0xFE	; 254
    36fa:	55 95       	asr	r21
    36fc:	47 95       	ror	r20
    36fe:	55 95       	asr	r21
    3700:	47 95       	ror	r20
    3702:	44 3b       	cpi	r20, 0xB4	; 180
    3704:	51 05       	cpc	r21, r1
    3706:	74 f4       	brge	.+28     	; 0x3724 <__vector_29+0x544>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    3708:	29 53       	subi	r18, 0x39	; 57
    370a:	3c 4f       	sbci	r19, 0xFC	; 252
    370c:	84 5b       	subi	r24, 0xB4	; 180
    370e:	90 40       	sbci	r25, 0x00	; 0
    3710:	95 95       	asr	r25
    3712:	87 95       	ror	r24
    3714:	95 95       	asr	r25
    3716:	87 95       	ror	r24
    3718:	88 58       	subi	r24, 0x88	; 136
    371a:	9f 4f       	sbci	r25, 0xFF	; 255
    371c:	f9 01       	movw	r30, r18
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
    3722:	22 ce       	rjmp	.-956    	; 0x3368 <__vector_29+0x188>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    3724:	29 53       	subi	r18, 0x39	; 57
    3726:	3c 4f       	sbci	r19, 0xFC	; 252
    3728:	84 5a       	subi	r24, 0xA4	; 164
    372a:	91 40       	sbci	r25, 0x01	; 1
    372c:	95 95       	asr	r25
    372e:	87 95       	ror	r24
    3730:	95 95       	asr	r25
    3732:	87 95       	ror	r24
    3734:	95 95       	asr	r25
    3736:	87 95       	ror	r24
    3738:	8c 54       	subi	r24, 0x4C	; 76
    373a:	9f 4f       	sbci	r25, 0xFF	; 255
    373c:	f9 01       	movw	r30, r18
    373e:	91 83       	std	Z+1, r25	; 0x01
    3740:	80 83       	st	Z, r24
    3742:	12 ce       	rjmp	.-988    	; 0x3368 <__vector_29+0x188>

00003744 <initMotors>:

#include "motors.h"

void initMotors() {
    3744:	0f 93       	push	r16
    3746:	1f 93       	push	r17
    3748:	cf 93       	push	r28
    374a:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    374c:	e0 e9       	ldi	r30, 0x90	; 144
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	10 82       	st	Z, r1
	TCCR3B = 0;
    3752:	41 e9       	ldi	r20, 0x91	; 145
    3754:	50 e0       	ldi	r21, 0x00	; 0
    3756:	da 01       	movw	r26, r20
    3758:	1c 92       	st	X, r1
	TIMSK3 = 0;
    375a:	21 e7       	ldi	r18, 0x71	; 113
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	e9 01       	movw	r28, r18
    3760:	18 82       	st	Y, r1
	TCCR4A = 0;
    3762:	a0 ea       	ldi	r26, 0xA0	; 160
    3764:	b0 e0       	ldi	r27, 0x00	; 0
    3766:	1c 92       	st	X, r1
	TCCR4B = 0;
    3768:	81 ea       	ldi	r24, 0xA1	; 161
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	ec 01       	movw	r28, r24
    376e:	18 82       	st	Y, r1
	TIMSK4 = 0;
    3770:	02 e7       	ldi	r16, 0x72	; 114
    3772:	10 e0       	ldi	r17, 0x00	; 0
    3774:	e8 01       	movw	r28, r16
    3776:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    3778:	60 81       	ld	r22, Z
    377a:	63 68       	ori	r22, 0x83	; 131
    377c:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    377e:	60 81       	ld	r22, Z
    3780:	63 60       	ori	r22, 0x03	; 3
    3782:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3784:	ea 01       	movw	r28, r20
    3786:	68 81       	ld	r22, Y
    3788:	6b 60       	ori	r22, 0x0B	; 11
    378a:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    378c:	40 91 f3 03 	lds	r20, 0x03F3
    3790:	50 91 f4 03 	lds	r21, 0x03F4
    3794:	50 93 99 00 	sts	0x0099, r21
    3798:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    379c:	10 92 9b 00 	sts	0x009B, r1
    37a0:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    37a4:	e9 01       	movw	r28, r18
    37a6:	48 81       	ld	r20, Y
    37a8:	41 60       	ori	r20, 0x01	; 1
    37aa:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    37ac:	20 81       	ld	r18, Z
    37ae:	2f 75       	andi	r18, 0x5F	; 95
    37b0:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    37b2:	2e b1       	in	r18, 0x0e	; 14
    37b4:	27 7e       	andi	r18, 0xE7	; 231
    37b6:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    37b8:	2c 91       	ld	r18, X
    37ba:	23 68       	ori	r18, 0x83	; 131
    37bc:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    37be:	fc 01       	movw	r30, r24
    37c0:	20 81       	ld	r18, Z
    37c2:	2b 60       	ori	r18, 0x0B	; 11
    37c4:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    37c6:	80 91 f5 03 	lds	r24, 0x03F5
    37ca:	90 91 f6 03 	lds	r25, 0x03F6
    37ce:	90 93 a9 00 	sts	0x00A9, r25
    37d2:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    37d6:	10 92 ab 00 	sts	0x00AB, r1
    37da:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    37de:	e8 01       	movw	r28, r16
    37e0:	88 81       	ld	r24, Y
    37e2:	81 60       	ori	r24, 0x01	; 1
    37e4:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    37e6:	8c 91       	ld	r24, X
    37e8:	8f 75       	andi	r24, 0x5F	; 95
    37ea:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    37ec:	e2 e0       	ldi	r30, 0x02	; 2
    37ee:	f1 e0       	ldi	r31, 0x01	; 1
    37f0:	80 81       	ld	r24, Z
    37f2:	87 7e       	andi	r24, 0xE7	; 231
    37f4:	80 83       	st	Z, r24


}
    37f6:	df 91       	pop	r29
    37f8:	cf 91       	pop	r28
    37fa:	1f 91       	pop	r17
    37fc:	0f 91       	pop	r16
    37fe:	08 95       	ret

00003800 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    3800:	80 91 07 02 	lds	r24, 0x0207
    3804:	88 23       	and	r24, r24
    3806:	09 f0       	breq	.+2      	; 0x380a <handleMotorsWithNoController+0xa>
    3808:	41 c0       	rjmp	.+130    	; 0x388c <handleMotorsWithNoController+0x8c>
    380a:	60 91 f9 03 	lds	r22, 0x03F9
    380e:	70 91 fa 03 	lds	r23, 0x03FA
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    3812:	80 91 08 02 	lds	r24, 0x0208
    3816:	88 23       	and	r24, r24
    3818:	09 f0       	breq	.+2      	; 0x381c <handleMotorsWithNoController+0x1c>
    381a:	73 c0       	rjmp	.+230    	; 0x3902 <handleMotorsWithNoController+0x102>
    381c:	e0 91 f7 03 	lds	r30, 0x03F7
    3820:	f0 91 f8 03 	lds	r31, 0x03F8
			rightMotSteps -= (last_right_vel>>3);
		}
	}


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    3824:	f0 93 04 04 	sts	0x0404, r31
    3828:	e0 93 03 04 	sts	0x0403, r30
	pwm_left_working = pwm_left_desired;
    382c:	96 2f       	mov	r25, r22
    382e:	87 2f       	mov	r24, r23
    3830:	60 93 05 04 	sts	0x0405, r22
    3834:	70 93 06 04 	sts	0x0406, r23
	if(obstacleAvoidanceEnabled) {
    3838:	20 91 4f 05 	lds	r18, 0x054F
    383c:	22 23       	and	r18, r18
    383e:	09 f0       	breq	.+2      	; 0x3842 <handleMotorsWithNoController+0x42>
    3840:	a3 c0       	rjmp	.+326    	; 0x3988 <handleMotorsWithNoController+0x188>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    3842:	90 93 e9 03 	sts	0x03E9, r25
    3846:	80 93 ea 03 	sts	0x03EA, r24
	pwm_right_desired_to_control = pwm_right_working;
    384a:	f0 93 e8 03 	sts	0x03E8, r31
    384e:	e0 93 e7 03 	sts	0x03E7, r30

	pwm_left = pwm_left_working;
    3852:	90 93 f5 03 	sts	0x03F5, r25
    3856:	80 93 f6 03 	sts	0x03F6, r24
	pwm_right = pwm_right_working;
    385a:	f0 93 f4 03 	sts	0x03F4, r31
    385e:	e0 93 f3 03 	sts	0x03F3, r30

	if(pwm_right > 0) {
    3862:	1e 16       	cp	r1, r30
    3864:	1f 06       	cpc	r1, r31
    3866:	0c f0       	brlt	.+2      	; 0x386a <handleMotorsWithNoController+0x6a>
    3868:	9e c0       	rjmp	.+316    	; 0x39a6 <handleMotorsWithNoController+0x1a6>
		OCR3A = (unsigned int)pwm_right;
    386a:	f0 93 99 00 	sts	0x0099, r31
    386e:	e0 93 98 00 	sts	0x0098, r30
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    3872:	80 91 f5 03 	lds	r24, 0x03F5
    3876:	90 91 f6 03 	lds	r25, 0x03F6
    387a:	18 16       	cp	r1, r24
    387c:	19 06       	cpc	r1, r25
    387e:	0c f0       	brlt	.+2      	; 0x3882 <handleMotorsWithNoController+0x82>
    3880:	77 c0       	rjmp	.+238    	; 0x3970 <handleMotorsWithNoController+0x170>
		OCR4A = (unsigned int)pwm_left;
    3882:	90 93 a9 00 	sts	0x00A9, r25
    3886:	80 93 a8 00 	sts	0x00A8, r24
    388a:	08 95       	ret

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
		last_left_vel = left_vel_sum>>2;
    388c:	20 91 eb 03 	lds	r18, 0x03EB
    3890:	30 91 ec 03 	lds	r19, 0x03EC
    3894:	36 95       	lsr	r19
    3896:	27 95       	ror	r18
    3898:	36 95       	lsr	r19
    389a:	27 95       	ror	r18
    389c:	30 93 f0 03 	sts	0x03F0, r19
    38a0:	20 93 ef 03 	sts	0x03EF, r18
		compute_left_vel = 0;
    38a4:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    38a8:	10 92 ec 03 	sts	0x03EC, r1
    38ac:	10 92 eb 03 	sts	0x03EB, r1

		if(pwm_left_desired >= 0) {
    38b0:	60 91 f9 03 	lds	r22, 0x03F9
    38b4:	70 91 fa 03 	lds	r23, 0x03FA
    38b8:	77 fd       	sbrc	r23, 7
    38ba:	a0 c0       	rjmp	.+320    	; 0x39fc <handleMotorsWithNoController+0x1fc>
			leftMotSteps += (last_left_vel>>3);
    38bc:	35 95       	asr	r19
    38be:	27 95       	ror	r18
    38c0:	35 95       	asr	r19
    38c2:	27 95       	ror	r18
    38c4:	35 95       	asr	r19
    38c6:	27 95       	ror	r18
    38c8:	44 27       	eor	r20, r20
    38ca:	37 fd       	sbrc	r19, 7
    38cc:	40 95       	com	r20
    38ce:	54 2f       	mov	r21, r20
    38d0:	80 91 db 03 	lds	r24, 0x03DB
    38d4:	90 91 dc 03 	lds	r25, 0x03DC
    38d8:	a0 91 dd 03 	lds	r26, 0x03DD
    38dc:	b0 91 de 03 	lds	r27, 0x03DE
    38e0:	82 0f       	add	r24, r18
    38e2:	93 1f       	adc	r25, r19
    38e4:	a4 1f       	adc	r26, r20
    38e6:	b5 1f       	adc	r27, r21
    38e8:	80 93 db 03 	sts	0x03DB, r24
    38ec:	90 93 dc 03 	sts	0x03DC, r25
    38f0:	a0 93 dd 03 	sts	0x03DD, r26
    38f4:	b0 93 de 03 	sts	0x03DE, r27
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    38f8:	80 91 08 02 	lds	r24, 0x0208
    38fc:	88 23       	and	r24, r24
    38fe:	09 f4       	brne	.+2      	; 0x3902 <handleMotorsWithNoController+0x102>
    3900:	8d cf       	rjmp	.-230    	; 0x381c <handleMotorsWithNoController+0x1c>
		last_right_vel = right_vel_sum>>2;
    3902:	20 91 ed 03 	lds	r18, 0x03ED
    3906:	30 91 ee 03 	lds	r19, 0x03EE
    390a:	36 95       	lsr	r19
    390c:	27 95       	ror	r18
    390e:	36 95       	lsr	r19
    3910:	27 95       	ror	r18
    3912:	30 93 f2 03 	sts	0x03F2, r19
    3916:	20 93 f1 03 	sts	0x03F1, r18
		compute_right_vel = 0;
    391a:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    391e:	10 92 ee 03 	sts	0x03EE, r1
    3922:	10 92 ed 03 	sts	0x03ED, r1

		if(pwm_right_desired >= 0) {
    3926:	e0 91 f7 03 	lds	r30, 0x03F7
    392a:	f0 91 f8 03 	lds	r31, 0x03F8
    392e:	f7 fd       	sbrc	r31, 7
    3930:	46 c0       	rjmp	.+140    	; 0x39be <handleMotorsWithNoController+0x1be>
			rightMotSteps += (last_right_vel>>3);
    3932:	35 95       	asr	r19
    3934:	27 95       	ror	r18
    3936:	35 95       	asr	r19
    3938:	27 95       	ror	r18
    393a:	35 95       	asr	r19
    393c:	27 95       	ror	r18
    393e:	44 27       	eor	r20, r20
    3940:	37 fd       	sbrc	r19, 7
    3942:	40 95       	com	r20
    3944:	54 2f       	mov	r21, r20
    3946:	80 91 d7 03 	lds	r24, 0x03D7
    394a:	90 91 d8 03 	lds	r25, 0x03D8
    394e:	a0 91 d9 03 	lds	r26, 0x03D9
    3952:	b0 91 da 03 	lds	r27, 0x03DA
    3956:	82 0f       	add	r24, r18
    3958:	93 1f       	adc	r25, r19
    395a:	a4 1f       	adc	r26, r20
    395c:	b5 1f       	adc	r27, r21
    395e:	80 93 d7 03 	sts	0x03D7, r24
    3962:	90 93 d8 03 	sts	0x03D8, r25
    3966:	a0 93 d9 03 	sts	0x03D9, r26
    396a:	b0 93 da 03 	sts	0x03DA, r27
    396e:	5a cf       	rjmp	.-332    	; 0x3824 <handleMotorsWithNoController+0x24>
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
    3970:	00 97       	sbiw	r24, 0x00	; 0
    3972:	09 f0       	breq	.+2      	; 0x3976 <handleMotorsWithNoController+0x176>
    3974:	6a c0       	rjmp	.+212    	; 0x3a4a <handleMotorsWithNoController+0x24a>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    3976:	10 92 a9 00 	sts	0x00A9, r1
    397a:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    397e:	10 92 ab 00 	sts	0x00AB, r1
    3982:	10 92 aa 00 	sts	0x00AA, r1
    3986:	08 95       	ret


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	pwm_left_working = pwm_left_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    3988:	85 e0       	ldi	r24, 0x05	; 5
    398a:	94 e0       	ldi	r25, 0x04	; 4
    398c:	63 e0       	ldi	r22, 0x03	; 3
    398e:	74 e0       	ldi	r23, 0x04	; 4
    3990:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <obstacleAvoidance>
    3994:	90 91 05 04 	lds	r25, 0x0405
    3998:	80 91 06 04 	lds	r24, 0x0406
    399c:	e0 91 03 04 	lds	r30, 0x0403
    39a0:	f0 91 04 04 	lds	r31, 0x0404
    39a4:	4e cf       	rjmp	.-356    	; 0x3842 <handleMotorsWithNoController+0x42>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    39a6:	30 97       	sbiw	r30, 0x00	; 0
    39a8:	09 f0       	breq	.+2      	; 0x39ac <handleMotorsWithNoController+0x1ac>
    39aa:	47 c0       	rjmp	.+142    	; 0x3a3a <handleMotorsWithNoController+0x23a>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    39ac:	10 92 99 00 	sts	0x0099, r1
    39b0:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    39b4:	10 92 9b 00 	sts	0x009B, r1
    39b8:	10 92 9a 00 	sts	0x009A, r1
    39bc:	5a cf       	rjmp	.-332    	; 0x3872 <handleMotorsWithNoController+0x72>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    39be:	35 95       	asr	r19
    39c0:	27 95       	ror	r18
    39c2:	35 95       	asr	r19
    39c4:	27 95       	ror	r18
    39c6:	35 95       	asr	r19
    39c8:	27 95       	ror	r18
    39ca:	44 27       	eor	r20, r20
    39cc:	37 fd       	sbrc	r19, 7
    39ce:	40 95       	com	r20
    39d0:	54 2f       	mov	r21, r20
    39d2:	80 91 d7 03 	lds	r24, 0x03D7
    39d6:	90 91 d8 03 	lds	r25, 0x03D8
    39da:	a0 91 d9 03 	lds	r26, 0x03D9
    39de:	b0 91 da 03 	lds	r27, 0x03DA
    39e2:	82 1b       	sub	r24, r18
    39e4:	93 0b       	sbc	r25, r19
    39e6:	a4 0b       	sbc	r26, r20
    39e8:	b5 0b       	sbc	r27, r21
    39ea:	80 93 d7 03 	sts	0x03D7, r24
    39ee:	90 93 d8 03 	sts	0x03D8, r25
    39f2:	a0 93 d9 03 	sts	0x03D9, r26
    39f6:	b0 93 da 03 	sts	0x03DA, r27
    39fa:	14 cf       	rjmp	.-472    	; 0x3824 <handleMotorsWithNoController+0x24>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    39fc:	35 95       	asr	r19
    39fe:	27 95       	ror	r18
    3a00:	35 95       	asr	r19
    3a02:	27 95       	ror	r18
    3a04:	35 95       	asr	r19
    3a06:	27 95       	ror	r18
    3a08:	44 27       	eor	r20, r20
    3a0a:	37 fd       	sbrc	r19, 7
    3a0c:	40 95       	com	r20
    3a0e:	54 2f       	mov	r21, r20
    3a10:	80 91 db 03 	lds	r24, 0x03DB
    3a14:	90 91 dc 03 	lds	r25, 0x03DC
    3a18:	a0 91 dd 03 	lds	r26, 0x03DD
    3a1c:	b0 91 de 03 	lds	r27, 0x03DE
    3a20:	82 1b       	sub	r24, r18
    3a22:	93 0b       	sbc	r25, r19
    3a24:	a4 0b       	sbc	r26, r20
    3a26:	b5 0b       	sbc	r27, r21
    3a28:	80 93 db 03 	sts	0x03DB, r24
    3a2c:	90 93 dc 03 	sts	0x03DC, r25
    3a30:	a0 93 dd 03 	sts	0x03DD, r26
    3a34:	b0 93 de 03 	sts	0x03DE, r27
    3a38:	ec ce       	rjmp	.-552    	; 0x3812 <handleMotorsWithNoController+0x12>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    3a3a:	f0 95       	com	r31
    3a3c:	e1 95       	neg	r30
    3a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a40:	f0 93 9b 00 	sts	0x009B, r31
    3a44:	e0 93 9a 00 	sts	0x009A, r30
    3a48:	14 cf       	rjmp	.-472    	; 0x3872 <handleMotorsWithNoController+0x72>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    3a4a:	90 95       	com	r25
    3a4c:	81 95       	neg	r24
    3a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a50:	90 93 ab 00 	sts	0x00AB, r25
    3a54:	80 93 aa 00 	sts	0x00AA, r24
    3a58:	08 95       	ret

00003a5a <handleMotorsWithSpeedController>:

}

void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
    3a5a:	80 91 f9 03 	lds	r24, 0x03F9
    3a5e:	90 91 fa 03 	lds	r25, 0x03FA
    3a62:	90 93 06 04 	sts	0x0406, r25
    3a66:	80 93 05 04 	sts	0x0405, r24
	pwm_right_working = pwm_right_desired;
    3a6a:	20 91 f7 03 	lds	r18, 0x03F7
    3a6e:	30 91 f8 03 	lds	r19, 0x03F8
    3a72:	30 93 04 04 	sts	0x0404, r19
    3a76:	20 93 03 04 	sts	0x0403, r18
	if(obstacleAvoidanceEnabled) {
    3a7a:	40 91 4f 05 	lds	r20, 0x054F
    3a7e:	44 23       	and	r20, r20
    3a80:	09 f0       	breq	.+2      	; 0x3a84 <handleMotorsWithSpeedController+0x2a>
    3a82:	b8 c0       	rjmp	.+368    	; 0x3bf4 <handleMotorsWithSpeedController+0x19a>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    3a84:	90 93 ea 03 	sts	0x03EA, r25
    3a88:	80 93 e9 03 	sts	0x03E9, r24
	pwm_right_desired_to_control = pwm_right_working;
    3a8c:	30 93 e8 03 	sts	0x03E8, r19
    3a90:	20 93 e7 03 	sts	0x03E7, r18

	if(compute_left_vel) {
    3a94:	20 91 07 02 	lds	r18, 0x0207
    3a98:	22 23       	and	r18, r18
    3a9a:	09 f4       	brne	.+2      	; 0x3a9e <handleMotorsWithSpeedController+0x44>
    3a9c:	4b c0       	rjmp	.+150    	; 0x3b34 <handleMotorsWithSpeedController+0xda>

		last_left_vel = left_vel_sum>>2;
    3a9e:	20 91 eb 03 	lds	r18, 0x03EB
    3aa2:	30 91 ec 03 	lds	r19, 0x03EC
    3aa6:	36 95       	lsr	r19
    3aa8:	27 95       	ror	r18
    3aaa:	36 95       	lsr	r19
    3aac:	27 95       	ror	r18
    3aae:	30 93 f0 03 	sts	0x03F0, r19
    3ab2:	20 93 ef 03 	sts	0x03EF, r18
		compute_left_vel = 0;
    3ab6:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    3aba:	10 92 ec 03 	sts	0x03EC, r1
    3abe:	10 92 eb 03 	sts	0x03EB, r1

		if(pwm_left_desired_to_control >= 0) {
    3ac2:	97 fd       	sbrc	r25, 7
    3ac4:	ce c0       	rjmp	.+412    	; 0x3c62 <handleMotorsWithSpeedController+0x208>
			leftMotSteps += (last_left_vel>>3);
    3ac6:	35 95       	asr	r19
    3ac8:	27 95       	ror	r18
    3aca:	35 95       	asr	r19
    3acc:	27 95       	ror	r18
    3ace:	35 95       	asr	r19
    3ad0:	27 95       	ror	r18
    3ad2:	44 27       	eor	r20, r20
    3ad4:	37 fd       	sbrc	r19, 7
    3ad6:	40 95       	com	r20
    3ad8:	54 2f       	mov	r21, r20
    3ada:	80 91 db 03 	lds	r24, 0x03DB
    3ade:	90 91 dc 03 	lds	r25, 0x03DC
    3ae2:	a0 91 dd 03 	lds	r26, 0x03DD
    3ae6:	b0 91 de 03 	lds	r27, 0x03DE
    3aea:	82 0f       	add	r24, r18
    3aec:	93 1f       	adc	r25, r19
    3aee:	a4 1f       	adc	r26, r20
    3af0:	b5 1f       	adc	r27, r21
    3af2:	80 93 db 03 	sts	0x03DB, r24
    3af6:	90 93 dc 03 	sts	0x03DC, r25
    3afa:	a0 93 dd 03 	sts	0x03DD, r26
    3afe:	b0 93 de 03 	sts	0x03DE, r27
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}

		if(robotPosition == HORIZONTAL_POS) {
    3b02:	80 91 17 02 	lds	r24, 0x0217
    3b06:	81 30       	cpi	r24, 0x01	; 1
    3b08:	09 f4       	brne	.+2      	; 0x3b0c <handleMotorsWithSpeedController+0xb2>
    3b0a:	ce c0       	rjmp	.+412    	; 0x3ca8 <handleMotorsWithSpeedController+0x24e>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    3b0c:	85 e0       	ldi	r24, 0x05	; 5
    3b0e:	94 e0       	ldi	r25, 0x04	; 4
    3b10:	0e 94 66 11 	call	0x22cc	; 0x22cc <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    3b14:	80 91 05 04 	lds	r24, 0x0405
    3b18:	90 91 06 04 	lds	r25, 0x0406
    3b1c:	90 93 f6 03 	sts	0x03F6, r25
    3b20:	80 93 f5 03 	sts	0x03F5, r24

		if(pwm_left > 0) {
    3b24:	18 16       	cp	r1, r24
    3b26:	19 06       	cpc	r1, r25
    3b28:	0c f0       	brlt	.+2      	; 0x3b2c <handleMotorsWithSpeedController+0xd2>
    3b2a:	c3 c0       	rjmp	.+390    	; 0x3cb2 <handleMotorsWithSpeedController+0x258>
			OCR4A = (unsigned int)pwm_left;
    3b2c:	90 93 a9 00 	sts	0x00A9, r25
    3b30:	80 93 a8 00 	sts	0x00A8, r24
			OCR4B = 0;
		}

	}

	if(compute_right_vel) {
    3b34:	80 91 08 02 	lds	r24, 0x0208
    3b38:	88 23       	and	r24, r24
    3b3a:	09 f4       	brne	.+2      	; 0x3b3e <handleMotorsWithSpeedController+0xe4>
    3b3c:	5a c0       	rjmp	.+180    	; 0x3bf2 <handleMotorsWithSpeedController+0x198>

		last_right_vel = right_vel_sum>>2;
    3b3e:	20 91 ed 03 	lds	r18, 0x03ED
    3b42:	30 91 ee 03 	lds	r19, 0x03EE
    3b46:	36 95       	lsr	r19
    3b48:	27 95       	ror	r18
    3b4a:	36 95       	lsr	r19
    3b4c:	27 95       	ror	r18
    3b4e:	30 93 f2 03 	sts	0x03F2, r19
    3b52:	20 93 f1 03 	sts	0x03F1, r18
		compute_right_vel = 0;
    3b56:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    3b5a:	10 92 ee 03 	sts	0x03EE, r1
    3b5e:	10 92 ed 03 	sts	0x03ED, r1

		if(pwm_right_desired_to_control >= 0) {
    3b62:	80 91 e7 03 	lds	r24, 0x03E7
    3b66:	90 91 e8 03 	lds	r25, 0x03E8
    3b6a:	97 fd       	sbrc	r25, 7
    3b6c:	52 c0       	rjmp	.+164    	; 0x3c12 <handleMotorsWithSpeedController+0x1b8>
			rightMotSteps += (last_right_vel>>3);
    3b6e:	35 95       	asr	r19
    3b70:	27 95       	ror	r18
    3b72:	35 95       	asr	r19
    3b74:	27 95       	ror	r18
    3b76:	35 95       	asr	r19
    3b78:	27 95       	ror	r18
    3b7a:	44 27       	eor	r20, r20
    3b7c:	37 fd       	sbrc	r19, 7
    3b7e:	40 95       	com	r20
    3b80:	54 2f       	mov	r21, r20
    3b82:	80 91 d7 03 	lds	r24, 0x03D7
    3b86:	90 91 d8 03 	lds	r25, 0x03D8
    3b8a:	a0 91 d9 03 	lds	r26, 0x03D9
    3b8e:	b0 91 da 03 	lds	r27, 0x03DA
    3b92:	82 0f       	add	r24, r18
    3b94:	93 1f       	adc	r25, r19
    3b96:	a4 1f       	adc	r26, r20
    3b98:	b5 1f       	adc	r27, r21
    3b9a:	80 93 d7 03 	sts	0x03D7, r24
    3b9e:	90 93 d8 03 	sts	0x03D8, r25
    3ba2:	a0 93 d9 03 	sts	0x03D9, r26
    3ba6:	b0 93 da 03 	sts	0x03DA, r27
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}

		if(robotPosition == HORIZONTAL_POS) {
    3baa:	80 91 17 02 	lds	r24, 0x0217
    3bae:	81 30       	cpi	r24, 0x01	; 1
    3bb0:	09 f4       	brne	.+2      	; 0x3bb4 <handleMotorsWithSpeedController+0x15a>
    3bb2:	52 c0       	rjmp	.+164    	; 0x3c58 <handleMotorsWithSpeedController+0x1fe>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    3bb4:	83 e0       	ldi	r24, 0x03	; 3
    3bb6:	94 e0       	ldi	r25, 0x04	; 4
    3bb8:	0e 94 ac 12 	call	0x2558	; 0x2558 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    3bbc:	80 91 03 04 	lds	r24, 0x0403
    3bc0:	90 91 04 04 	lds	r25, 0x0404
    3bc4:	90 93 f4 03 	sts	0x03F4, r25
    3bc8:	80 93 f3 03 	sts	0x03F3, r24

		if(pwm_right > 0) {
    3bcc:	18 16       	cp	r1, r24
    3bce:	19 06       	cpc	r1, r25
    3bd0:	2c f4       	brge	.+10     	; 0x3bdc <handleMotorsWithSpeedController+0x182>
			OCR3A = (unsigned int)pwm_right;
    3bd2:	90 93 99 00 	sts	0x0099, r25
    3bd6:	80 93 98 00 	sts	0x0098, r24
    3bda:	08 95       	ret
		} else if(pwm_right < 0) {
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	09 f0       	breq	.+2      	; 0x3be2 <handleMotorsWithSpeedController+0x188>
    3be0:	73 c0       	rjmp	.+230    	; 0x3cc8 <handleMotorsWithSpeedController+0x26e>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    3be2:	10 92 99 00 	sts	0x0099, r1
    3be6:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    3bea:	10 92 9b 00 	sts	0x009B, r1
    3bee:	10 92 9a 00 	sts	0x009A, r1
    3bf2:	08 95       	ret
void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
	pwm_right_working = pwm_right_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    3bf4:	85 e0       	ldi	r24, 0x05	; 5
    3bf6:	94 e0       	ldi	r25, 0x04	; 4
    3bf8:	63 e0       	ldi	r22, 0x03	; 3
    3bfa:	74 e0       	ldi	r23, 0x04	; 4
    3bfc:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <obstacleAvoidance>
    3c00:	80 91 05 04 	lds	r24, 0x0405
    3c04:	90 91 06 04 	lds	r25, 0x0406
    3c08:	20 91 03 04 	lds	r18, 0x0403
    3c0c:	30 91 04 04 	lds	r19, 0x0404
    3c10:	39 cf       	rjmp	.-398    	; 0x3a84 <handleMotorsWithSpeedController+0x2a>
		right_vel_sum = 0;

		if(pwm_right_desired_to_control >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    3c12:	35 95       	asr	r19
    3c14:	27 95       	ror	r18
    3c16:	35 95       	asr	r19
    3c18:	27 95       	ror	r18
    3c1a:	35 95       	asr	r19
    3c1c:	27 95       	ror	r18
    3c1e:	44 27       	eor	r20, r20
    3c20:	37 fd       	sbrc	r19, 7
    3c22:	40 95       	com	r20
    3c24:	54 2f       	mov	r21, r20
    3c26:	80 91 d7 03 	lds	r24, 0x03D7
    3c2a:	90 91 d8 03 	lds	r25, 0x03D8
    3c2e:	a0 91 d9 03 	lds	r26, 0x03D9
    3c32:	b0 91 da 03 	lds	r27, 0x03DA
    3c36:	82 1b       	sub	r24, r18
    3c38:	93 0b       	sbc	r25, r19
    3c3a:	a4 0b       	sbc	r26, r20
    3c3c:	b5 0b       	sbc	r27, r21
    3c3e:	80 93 d7 03 	sts	0x03D7, r24
    3c42:	90 93 d8 03 	sts	0x03D8, r25
    3c46:	a0 93 d9 03 	sts	0x03D9, r26
    3c4a:	b0 93 da 03 	sts	0x03DA, r27
		}

		if(robotPosition == HORIZONTAL_POS) {
    3c4e:	80 91 17 02 	lds	r24, 0x0217
    3c52:	81 30       	cpi	r24, 0x01	; 1
    3c54:	09 f0       	breq	.+2      	; 0x3c58 <handleMotorsWithSpeedController+0x1fe>
    3c56:	ae cf       	rjmp	.-164    	; 0x3bb4 <handleMotorsWithSpeedController+0x15a>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    3c58:	83 e0       	ldi	r24, 0x03	; 3
    3c5a:	94 e0       	ldi	r25, 0x04	; 4
    3c5c:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <start_horizontal_speed_control_right>
    3c60:	ad cf       	rjmp	.-166    	; 0x3bbc <handleMotorsWithSpeedController+0x162>
		left_vel_sum = 0;

		if(pwm_left_desired_to_control >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    3c62:	35 95       	asr	r19
    3c64:	27 95       	ror	r18
    3c66:	35 95       	asr	r19
    3c68:	27 95       	ror	r18
    3c6a:	35 95       	asr	r19
    3c6c:	27 95       	ror	r18
    3c6e:	44 27       	eor	r20, r20
    3c70:	37 fd       	sbrc	r19, 7
    3c72:	40 95       	com	r20
    3c74:	54 2f       	mov	r21, r20
    3c76:	80 91 db 03 	lds	r24, 0x03DB
    3c7a:	90 91 dc 03 	lds	r25, 0x03DC
    3c7e:	a0 91 dd 03 	lds	r26, 0x03DD
    3c82:	b0 91 de 03 	lds	r27, 0x03DE
    3c86:	82 1b       	sub	r24, r18
    3c88:	93 0b       	sbc	r25, r19
    3c8a:	a4 0b       	sbc	r26, r20
    3c8c:	b5 0b       	sbc	r27, r21
    3c8e:	80 93 db 03 	sts	0x03DB, r24
    3c92:	90 93 dc 03 	sts	0x03DC, r25
    3c96:	a0 93 dd 03 	sts	0x03DD, r26
    3c9a:	b0 93 de 03 	sts	0x03DE, r27
		}

		if(robotPosition == HORIZONTAL_POS) {
    3c9e:	80 91 17 02 	lds	r24, 0x0217
    3ca2:	81 30       	cpi	r24, 0x01	; 1
    3ca4:	09 f0       	breq	.+2      	; 0x3ca8 <handleMotorsWithSpeedController+0x24e>
    3ca6:	32 cf       	rjmp	.-412    	; 0x3b0c <handleMotorsWithSpeedController+0xb2>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    3ca8:	85 e0       	ldi	r24, 0x05	; 5
    3caa:	94 e0       	ldi	r25, 0x04	; 4
    3cac:	0e 94 d7 14 	call	0x29ae	; 0x29ae <start_horizontal_speed_control_left>
    3cb0:	31 cf       	rjmp	.-414    	; 0x3b14 <handleMotorsWithSpeedController+0xba>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    3cb2:	00 97       	sbiw	r24, 0x00	; 0
    3cb4:	89 f4       	brne	.+34     	; 0x3cd8 <handleMotorsWithSpeedController+0x27e>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    3cb6:	10 92 a9 00 	sts	0x00A9, r1
    3cba:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    3cbe:	10 92 ab 00 	sts	0x00AB, r1
    3cc2:	10 92 aa 00 	sts	0x00AA, r1
    3cc6:	36 cf       	rjmp	.-404    	; 0x3b34 <handleMotorsWithSpeedController+0xda>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    3cc8:	90 95       	com	r25
    3cca:	81 95       	neg	r24
    3ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cce:	90 93 9b 00 	sts	0x009B, r25
    3cd2:	80 93 9a 00 	sts	0x009A, r24
    3cd6:	08 95       	ret
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    3cd8:	90 95       	com	r25
    3cda:	81 95       	neg	r24
    3cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cde:	90 93 ab 00 	sts	0x00AB, r25
    3ce2:	80 93 aa 00 	sts	0x00AA, r24
    3ce6:	26 cf       	rjmp	.-436    	; 0x3b34 <handleMotorsWithSpeedController+0xda>

00003ce8 <setLeftSpeed>:

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    3ce8:	28 2f       	mov	r18, r24
    3cea:	33 27       	eor	r19, r19
    3cec:	27 fd       	sbrc	r18, 7
    3cee:	30 95       	com	r19
    3cf0:	37 fd       	sbrc	r19, 7
    3cf2:	30 c0       	rjmp	.+96     	; 0x3d54 <setLeftSpeed+0x6c>
    3cf4:	30 93 08 04 	sts	0x0408, r19
    3cf8:	20 93 07 04 	sts	0x0407, r18

    if(vel >= 0) {
    3cfc:	87 fd       	sbrc	r24, 7
    3cfe:	1e c0       	rjmp	.+60     	; 0x3d3c <setLeftSpeed+0x54>
        pwm_left_desired = speedl<<2;
    3d00:	22 0f       	add	r18, r18
    3d02:	33 1f       	adc	r19, r19
    3d04:	22 0f       	add	r18, r18
    3d06:	33 1f       	adc	r19, r19
    3d08:	30 93 fa 03 	sts	0x03FA, r19
    3d0c:	20 93 f9 03 	sts	0x03F9, r18
    } else {
        pwm_left_desired = -(speedl<<2);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    3d10:	82 e0       	ldi	r24, 0x02	; 2
    3d12:	21 30       	cpi	r18, 0x01	; 1
    3d14:	38 07       	cpc	r19, r24
    3d16:	3c f0       	brlt	.+14     	; 0x3d26 <setLeftSpeed+0x3e>
    3d18:	80 e0       	ldi	r24, 0x00	; 0
    3d1a:	92 e0       	ldi	r25, 0x02	; 2
    3d1c:	90 93 fa 03 	sts	0x03FA, r25
    3d20:	80 93 f9 03 	sts	0x03F9, r24
    3d24:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    3d26:	8e ef       	ldi	r24, 0xFE	; 254
    3d28:	20 30       	cpi	r18, 0x00	; 0
    3d2a:	38 07       	cpc	r19, r24
    3d2c:	34 f4       	brge	.+12     	; 0x3d3a <setLeftSpeed+0x52>
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	9e ef       	ldi	r25, 0xFE	; 254
    3d32:	90 93 fa 03 	sts	0x03FA, r25
    3d36:	80 93 f9 03 	sts	0x03F9, r24
    3d3a:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl<<2;
    } else {
        pwm_left_desired = -(speedl<<2);
    3d3c:	22 0f       	add	r18, r18
    3d3e:	33 1f       	adc	r19, r19
    3d40:	22 0f       	add	r18, r18
    3d42:	33 1f       	adc	r19, r19
    3d44:	30 95       	com	r19
    3d46:	21 95       	neg	r18
    3d48:	3f 4f       	sbci	r19, 0xFF	; 255
    3d4a:	30 93 fa 03 	sts	0x03FA, r19
    3d4e:	20 93 f9 03 	sts	0x03F9, r18
    3d52:	de cf       	rjmp	.-68     	; 0x3d10 <setLeftSpeed+0x28>

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    3d54:	30 95       	com	r19
    3d56:	21 95       	neg	r18
    3d58:	3f 4f       	sbci	r19, 0xFF	; 255
    3d5a:	cc cf       	rjmp	.-104    	; 0x3cf4 <setLeftSpeed+0xc>

00003d5c <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    3d5c:	28 2f       	mov	r18, r24
    3d5e:	33 27       	eor	r19, r19
    3d60:	27 fd       	sbrc	r18, 7
    3d62:	30 95       	com	r19
    3d64:	37 fd       	sbrc	r19, 7
    3d66:	30 c0       	rjmp	.+96     	; 0x3dc8 <setRightSpeed+0x6c>
    3d68:	30 93 0a 04 	sts	0x040A, r19
    3d6c:	20 93 09 04 	sts	0x0409, r18

    if(vel >= 0) {
    3d70:	87 fd       	sbrc	r24, 7
    3d72:	1e c0       	rjmp	.+60     	; 0x3db0 <setRightSpeed+0x54>
        pwm_right_desired = speedr<<2;
    3d74:	22 0f       	add	r18, r18
    3d76:	33 1f       	adc	r19, r19
    3d78:	22 0f       	add	r18, r18
    3d7a:	33 1f       	adc	r19, r19
    3d7c:	30 93 f8 03 	sts	0x03F8, r19
    3d80:	20 93 f7 03 	sts	0x03F7, r18
    } else {
        pwm_right_desired = -(speedr<<2);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    3d84:	82 e0       	ldi	r24, 0x02	; 2
    3d86:	21 30       	cpi	r18, 0x01	; 1
    3d88:	38 07       	cpc	r19, r24
    3d8a:	3c f0       	brlt	.+14     	; 0x3d9a <setRightSpeed+0x3e>
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
    3d8e:	92 e0       	ldi	r25, 0x02	; 2
    3d90:	90 93 f8 03 	sts	0x03F8, r25
    3d94:	80 93 f7 03 	sts	0x03F7, r24
    3d98:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    3d9a:	8e ef       	ldi	r24, 0xFE	; 254
    3d9c:	20 30       	cpi	r18, 0x00	; 0
    3d9e:	38 07       	cpc	r19, r24
    3da0:	34 f4       	brge	.+12     	; 0x3dae <setRightSpeed+0x52>
    3da2:	80 e0       	ldi	r24, 0x00	; 0
    3da4:	9e ef       	ldi	r25, 0xFE	; 254
    3da6:	90 93 f8 03 	sts	0x03F8, r25
    3daa:	80 93 f7 03 	sts	0x03F7, r24
    3dae:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr<<2;
    } else {
        pwm_right_desired = -(speedr<<2);
    3db0:	22 0f       	add	r18, r18
    3db2:	33 1f       	adc	r19, r19
    3db4:	22 0f       	add	r18, r18
    3db6:	33 1f       	adc	r19, r19
    3db8:	30 95       	com	r19
    3dba:	21 95       	neg	r18
    3dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dbe:	30 93 f8 03 	sts	0x03F8, r19
    3dc2:	20 93 f7 03 	sts	0x03F7, r18
    3dc6:	de cf       	rjmp	.-68     	; 0x3d84 <setRightSpeed+0x28>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    3dc8:	30 95       	com	r19
    3dca:	21 95       	neg	r18
    3dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dce:	cc cf       	rjmp	.-104    	; 0x3d68 <setRightSpeed+0xc>

00003dd0 <__vector_45>:
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);

}

// Motor left
ISR(TIMER4_OVF_vect) {
    3dd0:	1f 92       	push	r1
    3dd2:	0f 92       	push	r0
    3dd4:	0f b6       	in	r0, 0x3f	; 63
    3dd6:	0f 92       	push	r0
    3dd8:	11 24       	eor	r1, r1
    3dda:	8f 93       	push	r24
    3ddc:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    3dde:	80 91 51 05 	lds	r24, 0x0551
    3de2:	88 23       	and	r24, r24
    3de4:	61 f0       	breq	.+24     	; 0x3dfe <__vector_45+0x2e>
		pwm_left = 0;
    3de6:	10 92 f6 03 	sts	0x03F6, r1
    3dea:	10 92 f5 03 	sts	0x03F5, r1
		OCR4A = 0;
    3dee:	10 92 a9 00 	sts	0x00A9, r1
    3df2:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    3df6:	10 92 ab 00 	sts	0x00AB, r1
    3dfa:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    3dfe:	10 92 e0 03 	sts	0x03E0, r1
    3e02:	10 92 df 03 	sts	0x03DF, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    3e06:	80 91 f5 03 	lds	r24, 0x03F5
    3e0a:	90 91 f6 03 	lds	r25, 0x03F6
    3e0e:	00 97       	sbiw	r24, 0x00	; 0
    3e10:	41 f5       	brne	.+80     	; 0x3e62 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    3e12:	80 91 e9 03 	lds	r24, 0x03E9
    3e16:	90 91 ea 03 	lds	r25, 0x03EA
    3e1a:	97 fd       	sbrc	r25, 7
    3e1c:	69 c0       	rjmp	.+210    	; 0x3ef0 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 14;
    3e24:	8e e0       	ldi	r24, 0x0E	; 14
    3e26:	80 93 2b 03 	sts	0x032B, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3e30:	80 91 a0 00 	lds	r24, 0x00A0
    3e34:	8f 75       	andi	r24, 0x5F	; 95
    3e36:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3e3a:	80 91 02 01 	lds	r24, 0x0102
    3e3e:	87 7e       	andi	r24, 0xE7	; 231
    3e40:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    3e44:	80 91 72 00 	lds	r24, 0x0072
    3e48:	89 7f       	andi	r24, 0xF9	; 249
    3e4a:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    3e4e:	89 b3       	in	r24, 0x19	; 25
    3e50:	86 60       	ori	r24, 0x06	; 6
    3e52:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    3e54:	9f 91       	pop	r25
    3e56:	8f 91       	pop	r24
    3e58:	0f 90       	pop	r0
    3e5a:	0f be       	out	0x3f, r0	; 63
    3e5c:	0f 90       	pop	r0
    3e5e:	1f 90       	pop	r1
    3e60:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    3e62:	18 16       	cp	r1, r24
    3e64:	19 06       	cpc	r1, r25
    3e66:	2c f5       	brge	.+74     	; 0x3eb2 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    3e68:	10 92 2e 03 	sts	0x032E, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    3e6c:	8f e0       	ldi	r24, 0x0F	; 15
    3e6e:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    3e72:	80 91 a0 00 	lds	r24, 0x00A0
    3e76:	8f 7d       	andi	r24, 0xDF	; 223
    3e78:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    3e7c:	80 91 72 00 	lds	r24, 0x0072
    3e80:	8b 7f       	andi	r24, 0xFB	; 251
    3e82:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    3e86:	80 91 02 01 	lds	r24, 0x0102
    3e8a:	8f 7e       	andi	r24, 0xEF	; 239
    3e8c:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    3e90:	80 91 a0 00 	lds	r24, 0x00A0
    3e94:	80 68       	ori	r24, 0x80	; 128
    3e96:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    3e9a:	80 91 72 00 	lds	r24, 0x0072
    3e9e:	82 60       	ori	r24, 0x02	; 2
    3ea0:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    3ea4:	9f 91       	pop	r25
    3ea6:	8f 91       	pop	r24
    3ea8:	0f 90       	pop	r0
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	0f 90       	pop	r0
    3eae:	1f 90       	pop	r1
    3eb0:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    3eb2:	10 92 2e 03 	sts	0x032E, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    3eb6:	8e e0       	ldi	r24, 0x0E	; 14
    3eb8:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    3ebc:	80 91 a0 00 	lds	r24, 0x00A0
    3ec0:	8f 77       	andi	r24, 0x7F	; 127
    3ec2:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    3ec6:	80 91 72 00 	lds	r24, 0x0072
    3eca:	8d 7f       	andi	r24, 0xFD	; 253
    3ecc:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    3ed0:	80 91 02 01 	lds	r24, 0x0102
    3ed4:	87 7f       	andi	r24, 0xF7	; 247
    3ed6:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    3eda:	80 91 a0 00 	lds	r24, 0x00A0
    3ede:	80 62       	ori	r24, 0x20	; 32
    3ee0:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    3ee4:	80 91 72 00 	lds	r24, 0x0072
    3ee8:	84 60       	ori	r24, 0x04	; 4
    3eea:	80 93 72 00 	sts	0x0072, r24
    3eee:	b2 cf       	rjmp	.-156    	; 0x3e54 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 15;
    3ef6:	8f e0       	ldi	r24, 0x0F	; 15
    3ef8:	80 93 2b 03 	sts	0x032B, r24
    3efc:	96 cf       	rjmp	.-212    	; 0x3e2a <__vector_45+0x5a>

00003efe <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    3efe:	1f 92       	push	r1
    3f00:	0f 92       	push	r0
    3f02:	0f b6       	in	r0, 0x3f	; 63
    3f04:	0f 92       	push	r0
    3f06:	11 24       	eor	r1, r1
    3f08:	8f 93       	push	r24
    3f0a:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	80 93 2e 03 	sts	0x032E, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    3f12:	9e e0       	ldi	r25, 0x0E	; 14
    3f14:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    3f18:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    3f1c:	9f 91       	pop	r25
    3f1e:	8f 91       	pop	r24
    3f20:	0f 90       	pop	r0
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	0f 90       	pop	r0
    3f26:	1f 90       	pop	r1
    3f28:	18 95       	reti

00003f2a <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    3f2a:	1f 92       	push	r1
    3f2c:	0f 92       	push	r0
    3f2e:	0f b6       	in	r0, 0x3f	; 63
    3f30:	0f 92       	push	r0
    3f32:	11 24       	eor	r1, r1
    3f34:	8f 93       	push	r24
    3f36:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3f38:	81 e0       	ldi	r24, 0x01	; 1
    3f3a:	80 93 2e 03 	sts	0x032E, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    3f3e:	9f e0       	ldi	r25, 0x0F	; 15
    3f40:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    3f44:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    3f48:	9f 91       	pop	r25
    3f4a:	8f 91       	pop	r24
    3f4c:	0f 90       	pop	r0
    3f4e:	0f be       	out	0x3f, r0	; 63
    3f50:	0f 90       	pop	r0
    3f52:	1f 90       	pop	r1
    3f54:	18 95       	reti

00003f56 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    3f56:	1f 92       	push	r1
    3f58:	0f 92       	push	r0
    3f5a:	0f b6       	in	r0, 0x3f	; 63
    3f5c:	0f 92       	push	r0
    3f5e:	11 24       	eor	r1, r1
    3f60:	8f 93       	push	r24
    3f62:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    3f64:	80 91 51 05 	lds	r24, 0x0551
    3f68:	88 23       	and	r24, r24
    3f6a:	61 f0       	breq	.+24     	; 0x3f84 <__vector_35+0x2e>
		pwm_right = 0;
    3f6c:	10 92 f4 03 	sts	0x03F4, r1
    3f70:	10 92 f3 03 	sts	0x03F3, r1
		OCR3A = 0;
    3f74:	10 92 99 00 	sts	0x0099, r1
    3f78:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    3f7c:	10 92 9b 00 	sts	0x009B, r1
    3f80:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    3f84:	10 92 e2 03 	sts	0x03E2, r1
    3f88:	10 92 e1 03 	sts	0x03E1, r1


	if(pwm_right == 0) {
    3f8c:	80 91 f3 03 	lds	r24, 0x03F3
    3f90:	90 91 f4 03 	lds	r25, 0x03F4
    3f94:	00 97       	sbiw	r24, 0x00	; 0
    3f96:	31 f5       	brne	.+76     	; 0x3fe4 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    3f98:	80 91 e7 03 	lds	r24, 0x03E7
    3f9c:	90 91 e8 03 	lds	r25, 0x03E8
    3fa0:	97 fd       	sbrc	r25, 7
    3fa2:	5f c0       	rjmp	.+190    	; 0x4062 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    3fa4:	81 e0       	ldi	r24, 0x01	; 1
    3fa6:	80 93 2d 03 	sts	0x032D, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    3faa:	8c e0       	ldi	r24, 0x0C	; 12
    3fac:	80 93 2c 03 	sts	0x032C, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3fb6:	80 91 90 00 	lds	r24, 0x0090
    3fba:	8f 75       	andi	r24, 0x5F	; 95
    3fbc:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3fc0:	8e b1       	in	r24, 0x0e	; 14
    3fc2:	87 7e       	andi	r24, 0xE7	; 231
    3fc4:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    3fc6:	80 91 71 00 	lds	r24, 0x0071
    3fca:	89 7f       	andi	r24, 0xF9	; 249
    3fcc:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    3fd0:	88 b3       	in	r24, 0x18	; 24
    3fd2:	86 60       	ori	r24, 0x06	; 6
    3fd4:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    3fd6:	9f 91       	pop	r25
    3fd8:	8f 91       	pop	r24
    3fda:	0f 90       	pop	r0
    3fdc:	0f be       	out	0x3f, r0	; 63
    3fde:	0f 90       	pop	r0
    3fe0:	1f 90       	pop	r1
    3fe2:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    3fe4:	18 16       	cp	r1, r24
    3fe6:	19 06       	cpc	r1, r25
    3fe8:	0c f5       	brge	.+66     	; 0x402c <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    3fea:	10 92 2d 03 	sts	0x032D, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    3fee:	8d e0       	ldi	r24, 0x0D	; 13
    3ff0:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    3ff4:	80 91 90 00 	lds	r24, 0x0090
    3ff8:	8f 7d       	andi	r24, 0xDF	; 223
    3ffa:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    3ffe:	80 91 71 00 	lds	r24, 0x0071
    4002:	8b 7f       	andi	r24, 0xFB	; 251
    4004:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    4008:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    400a:	80 91 90 00 	lds	r24, 0x0090
    400e:	80 68       	ori	r24, 0x80	; 128
    4010:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    4014:	80 91 71 00 	lds	r24, 0x0071
    4018:	82 60       	ori	r24, 0x02	; 2
    401a:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    401e:	9f 91       	pop	r25
    4020:	8f 91       	pop	r24
    4022:	0f 90       	pop	r0
    4024:	0f be       	out	0x3f, r0	; 63
    4026:	0f 90       	pop	r0
    4028:	1f 90       	pop	r1
    402a:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    402c:	10 92 2d 03 	sts	0x032D, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    4030:	8c e0       	ldi	r24, 0x0C	; 12
    4032:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    4036:	80 91 90 00 	lds	r24, 0x0090
    403a:	8f 77       	andi	r24, 0x7F	; 127
    403c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    4040:	80 91 71 00 	lds	r24, 0x0071
    4044:	8d 7f       	andi	r24, 0xFD	; 253
    4046:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    404a:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    404c:	80 91 90 00 	lds	r24, 0x0090
    4050:	80 62       	ori	r24, 0x20	; 32
    4052:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    4056:	80 91 71 00 	lds	r24, 0x0071
    405a:	84 60       	ori	r24, 0x04	; 4
    405c:	80 93 71 00 	sts	0x0071, r24
    4060:	ba cf       	rjmp	.-140    	; 0x3fd6 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	80 93 2d 03 	sts	0x032D, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    4068:	8d e0       	ldi	r24, 0x0D	; 13
    406a:	80 93 2c 03 	sts	0x032C, r24
    406e:	a0 cf       	rjmp	.-192    	; 0x3fb0 <__vector_35+0x5a>

00004070 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    4070:	1f 92       	push	r1
    4072:	0f 92       	push	r0
    4074:	0f b6       	in	r0, 0x3f	; 63
    4076:	0f 92       	push	r0
    4078:	11 24       	eor	r1, r1
    407a:	8f 93       	push	r24
    407c:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	80 93 2d 03 	sts	0x032D, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    4084:	9c e0       	ldi	r25, 0x0C	; 12
    4086:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    408a:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    408e:	9f 91       	pop	r25
    4090:	8f 91       	pop	r24
    4092:	0f 90       	pop	r0
    4094:	0f be       	out	0x3f, r0	; 63
    4096:	0f 90       	pop	r0
    4098:	1f 90       	pop	r1
    409a:	18 95       	reti

0000409c <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    409c:	1f 92       	push	r1
    409e:	0f 92       	push	r0
    40a0:	0f b6       	in	r0, 0x3f	; 63
    40a2:	0f 92       	push	r0
    40a4:	11 24       	eor	r1, r1
    40a6:	8f 93       	push	r24
    40a8:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	80 93 2d 03 	sts	0x032D, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    40b0:	9d e0       	ldi	r25, 0x0D	; 13
    40b2:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    40b6:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    40ba:	9f 91       	pop	r25
    40bc:	8f 91       	pop	r24
    40be:	0f 90       	pop	r0
    40c0:	0f be       	out	0x3f, r0	; 63
    40c2:	0f 90       	pop	r0
    40c4:	1f 90       	pop	r1
    40c6:	18 95       	reti

000040c8 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    40c8:	80 91 94 00 	lds	r24, 0x0094
    40cc:	90 91 95 00 	lds	r25, 0x0095
    40d0:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <srand>

}
    40d4:	08 95       	ret

000040d6 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    40d6:	2f 92       	push	r2
    40d8:	3f 92       	push	r3
    40da:	4f 92       	push	r4
    40dc:	5f 92       	push	r5
    40de:	6f 92       	push	r6
    40e0:	7f 92       	push	r7
    40e2:	8f 92       	push	r8
    40e4:	9f 92       	push	r9
    40e6:	af 92       	push	r10
    40e8:	bf 92       	push	r11
    40ea:	cf 92       	push	r12
    40ec:	df 92       	push	r13
    40ee:	ef 92       	push	r14
    40f0:	ff 92       	push	r15
    40f2:	0f 93       	push	r16
    40f4:	1f 93       	push	r17
    40f6:	df 93       	push	r29
    40f8:	cf 93       	push	r28
    40fa:	cd b7       	in	r28, 0x3d	; 61
    40fc:	de b7       	in	r29, 0x3e	; 62
    40fe:	28 97       	sbiw	r28, 0x08	; 8
    4100:	0f b6       	in	r0, 0x3f	; 63
    4102:	f8 94       	cli
    4104:	de bf       	out	0x3e, r29	; 62
    4106:	0f be       	out	0x3f, r0	; 63
    4108:	cd bf       	out	0x3d, r28	; 61
    410a:	2c 01       	movw	r4, r24
    410c:	7a 83       	std	Y+2, r23	; 0x02
    410e:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    4110:	fc 01       	movw	r30, r24
    4112:	01 90       	ld	r0, Z+
    4114:	f0 81       	ld	r31, Z
    4116:	e0 2d       	mov	r30, r0
    4118:	fc 83       	std	Y+4, r31	; 0x04
    411a:	eb 83       	std	Y+3, r30	; 0x03
    411c:	fb 01       	movw	r30, r22
    411e:	01 90       	ld	r0, Z+
    4120:	f0 81       	ld	r31, Z
    4122:	e0 2d       	mov	r30, r0
    4124:	fe 83       	std	Y+6, r31	; 0x06
    4126:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    4128:	60 91 c7 03 	lds	r22, 0x03C7
    412c:	70 91 c8 03 	lds	r23, 0x03C8
    4130:	65 30       	cpi	r22, 0x05	; 5
    4132:	71 05       	cpc	r23, r1
    4134:	34 f4       	brge	.+12     	; 0x4142 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    4136:	10 92 c8 03 	sts	0x03C8, r1
    413a:	10 92 c7 03 	sts	0x03C7, r1
    413e:	60 e0       	ldi	r22, 0x00	; 0
    4140:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    4142:	40 91 c9 03 	lds	r20, 0x03C9
    4146:	50 91 ca 03 	lds	r21, 0x03CA
    414a:	45 30       	cpi	r20, 0x05	; 5
    414c:	51 05       	cpc	r21, r1
    414e:	34 f4       	brge	.+12     	; 0x415c <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    4150:	10 92 ca 03 	sts	0x03CA, r1
    4154:	10 92 c9 03 	sts	0x03C9, r1
    4158:	40 e0       	ldi	r20, 0x00	; 0
    415a:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    415c:	80 91 cb 03 	lds	r24, 0x03CB
    4160:	90 91 cc 03 	lds	r25, 0x03CC
    4164:	85 30       	cpi	r24, 0x05	; 5
    4166:	91 05       	cpc	r25, r1
    4168:	24 f4       	brge	.+8      	; 0x4172 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    416a:	10 92 cc 03 	sts	0x03CC, r1
    416e:	10 92 cb 03 	sts	0x03CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    4172:	00 91 cd 03 	lds	r16, 0x03CD
    4176:	10 91 ce 03 	lds	r17, 0x03CE
    417a:	05 30       	cpi	r16, 0x05	; 5
    417c:	11 05       	cpc	r17, r1
    417e:	34 f4       	brge	.+12     	; 0x418c <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    4180:	10 92 ce 03 	sts	0x03CE, r1
    4184:	10 92 cd 03 	sts	0x03CD, r1
    4188:	00 e0       	ldi	r16, 0x00	; 0
    418a:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    418c:	60 90 cf 03 	lds	r6, 0x03CF
    4190:	70 90 d0 03 	lds	r7, 0x03D0
    4194:	f5 e0       	ldi	r31, 0x05	; 5
    4196:	6f 16       	cp	r6, r31
    4198:	71 04       	cpc	r7, r1
    419a:	34 f4       	brge	.+12     	; 0x41a8 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    419c:	10 92 d0 03 	sts	0x03D0, r1
    41a0:	10 92 cf 03 	sts	0x03CF, r1
    41a4:	66 24       	eor	r6, r6
    41a6:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    41a8:	20 91 d1 03 	lds	r18, 0x03D1
    41ac:	30 91 d2 03 	lds	r19, 0x03D2
    41b0:	25 30       	cpi	r18, 0x05	; 5
    41b2:	31 05       	cpc	r19, r1
    41b4:	34 f4       	brge	.+12     	; 0x41c2 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    41b6:	10 92 d2 03 	sts	0x03D2, r1
    41ba:	10 92 d1 03 	sts	0x03D1, r1
    41be:	20 e0       	ldi	r18, 0x00	; 0
    41c0:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    41c2:	80 91 d3 03 	lds	r24, 0x03D3
    41c6:	90 91 d4 03 	lds	r25, 0x03D4
    41ca:	85 30       	cpi	r24, 0x05	; 5
    41cc:	91 05       	cpc	r25, r1
    41ce:	24 f4       	brge	.+8      	; 0x41d8 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    41d0:	10 92 d4 03 	sts	0x03D4, r1
    41d4:	10 92 d3 03 	sts	0x03D3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    41d8:	80 91 d5 03 	lds	r24, 0x03D5
    41dc:	90 91 d6 03 	lds	r25, 0x03D6
    41e0:	85 30       	cpi	r24, 0x05	; 5
    41e2:	91 05       	cpc	r25, r1
    41e4:	34 f4       	brge	.+12     	; 0x41f2 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    41e6:	10 92 d6 03 	sts	0x03D6, r1
    41ea:	10 92 d5 03 	sts	0x03D5, r1
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    41f2:	ee 24       	eor	r14, r14
    41f4:	ff 24       	eor	r15, r15
    41f6:	e6 1a       	sub	r14, r22
    41f8:	f7 0a       	sbc	r15, r23
    41fa:	5a 01       	movw	r10, r20
    41fc:	b5 94       	asr	r11
    41fe:	a7 94       	ror	r10
    4200:	15 95       	asr	r17
    4202:	07 95       	ror	r16
    4204:	69 01       	movw	r12, r18
    4206:	d5 94       	asr	r13
    4208:	c7 94       	ror	r12
    420a:	4c 01       	movw	r8, r24
    420c:	95 94       	asr	r9
    420e:	87 94       	ror	r8
    4210:	0e 94 b1 2e 	call	0x5d62	; 0x5d62 <rand>
    4214:	93 01       	movw	r18, r6
    4216:	2e 51       	subi	r18, 0x1E	; 30
    4218:	30 40       	sbci	r19, 0x00	; 0
    421a:	2e 0d       	add	r18, r14
    421c:	3f 1d       	adc	r19, r15
    421e:	20 0f       	add	r18, r16
    4220:	31 1f       	adc	r19, r17
    4222:	2c 0d       	add	r18, r12
    4224:	3d 1d       	adc	r19, r13
    4226:	2a 19       	sub	r18, r10
    4228:	3b 09       	sbc	r19, r11
    422a:	28 19       	sub	r18, r8
    422c:	39 09       	sbc	r19, r9
    422e:	4c e3       	ldi	r20, 0x3C	; 60
    4230:	24 2e       	mov	r2, r20
    4232:	31 2c       	mov	r3, r1
    4234:	b1 01       	movw	r22, r2
    4236:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__divmodhi4>
    423a:	28 0f       	add	r18, r24
    423c:	39 1f       	adc	r19, r25
    423e:	38 87       	std	Y+8, r19	; 0x08
    4240:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    4242:	e0 90 c9 03 	lds	r14, 0x03C9
    4246:	f0 90 ca 03 	lds	r15, 0x03CA
    424a:	f5 94       	asr	r15
    424c:	e7 94       	ror	r14
    424e:	00 91 cb 03 	lds	r16, 0x03CB
    4252:	10 91 cc 03 	lds	r17, 0x03CC
    4256:	15 95       	asr	r17
    4258:	07 95       	ror	r16
    425a:	15 95       	asr	r17
    425c:	07 95       	ror	r16
    425e:	c0 90 cd 03 	lds	r12, 0x03CD
    4262:	d0 90 ce 03 	lds	r13, 0x03CE
    4266:	d5 94       	asr	r13
    4268:	c7 94       	ror	r12
    426a:	80 90 d1 03 	lds	r8, 0x03D1
    426e:	90 90 d2 03 	lds	r9, 0x03D2
    4272:	95 94       	asr	r9
    4274:	87 94       	ror	r8
    4276:	60 90 d3 03 	lds	r6, 0x03D3
    427a:	70 90 d4 03 	lds	r7, 0x03D4
    427e:	75 94       	asr	r7
    4280:	67 94       	ror	r6
    4282:	75 94       	asr	r7
    4284:	67 94       	ror	r6
    4286:	a0 90 d5 03 	lds	r10, 0x03D5
    428a:	b0 90 d6 03 	lds	r11, 0x03D6
    428e:	b5 94       	asr	r11
    4290:	a7 94       	ror	r10
    4292:	0e 94 b1 2e 	call	0x5d62	; 0x5d62 <rand>
    4296:	97 01       	movw	r18, r14
    4298:	20 0f       	add	r18, r16
    429a:	31 1f       	adc	r19, r17
    429c:	2e 51       	subi	r18, 0x1E	; 30
    429e:	30 40       	sbci	r19, 0x00	; 0
    42a0:	2c 0d       	add	r18, r12
    42a2:	3d 1d       	adc	r19, r13
    42a4:	2a 19       	sub	r18, r10
    42a6:	3b 09       	sbc	r19, r11
    42a8:	28 19       	sub	r18, r8
    42aa:	39 09       	sbc	r19, r9
    42ac:	26 19       	sub	r18, r6
    42ae:	37 09       	sbc	r19, r7
    42b0:	b1 01       	movw	r22, r2
    42b2:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__divmodhi4>
    42b6:	28 0f       	add	r18, r24
    42b8:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    42ba:	4b 81       	ldd	r20, Y+3	; 0x03
    42bc:	5c 81       	ldd	r21, Y+4	; 0x04
    42be:	57 fd       	sbrc	r21, 7
    42c0:	97 c0       	rjmp	.+302    	; 0x43f0 <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    42c2:	5a 01       	movw	r10, r20
    42c4:	cc 24       	eor	r12, r12
    42c6:	b7 fc       	sbrc	r11, 7
    42c8:	c0 94       	com	r12
    42ca:	dc 2c       	mov	r13, r12
    42cc:	8f 81       	ldd	r24, Y+7	; 0x07
    42ce:	98 85       	ldd	r25, Y+8	; 0x08
    42d0:	3c 01       	movw	r6, r24
    42d2:	88 24       	eor	r8, r8
    42d4:	77 fc       	sbrc	r7, 7
    42d6:	80 94       	com	r8
    42d8:	98 2c       	mov	r9, r8
    42da:	79 01       	movw	r14, r18
    42dc:	00 27       	eor	r16, r16
    42de:	f7 fc       	sbrc	r15, 7
    42e0:	00 95       	com	r16
    42e2:	10 2f       	mov	r17, r16
    42e4:	c4 01       	movw	r24, r8
    42e6:	b3 01       	movw	r22, r6
    42e8:	6e 19       	sub	r22, r14
    42ea:	7f 09       	sbc	r23, r15
    42ec:	80 0b       	sbc	r24, r16
    42ee:	91 0b       	sbc	r25, r17
    42f0:	a6 01       	movw	r20, r12
    42f2:	95 01       	movw	r18, r10
    42f4:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__mulsi3>
    42f8:	f6 e0       	ldi	r31, 0x06	; 6
    42fa:	95 95       	asr	r25
    42fc:	87 95       	ror	r24
    42fe:	77 95       	ror	r23
    4300:	67 95       	ror	r22
    4302:	fa 95       	dec	r31
    4304:	d1 f7       	brne	.-12     	; 0x42fa <obstacleAvoidance+0x224>
    4306:	6a 0d       	add	r22, r10
    4308:	7b 1d       	adc	r23, r11
    430a:	8c 1d       	adc	r24, r12
    430c:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    430e:	f2 01       	movw	r30, r4
    4310:	71 83       	std	Z+1, r23	; 0x01
    4312:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    4314:	2d 81       	ldd	r18, Y+5	; 0x05
    4316:	3e 81       	ldd	r19, Y+6	; 0x06
    4318:	37 fd       	sbrc	r19, 7
    431a:	99 c0       	rjmp	.+306    	; 0x444e <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    431c:	59 01       	movw	r10, r18
    431e:	cc 24       	eor	r12, r12
    4320:	b7 fc       	sbrc	r11, 7
    4322:	c0 94       	com	r12
    4324:	dc 2c       	mov	r13, r12
    4326:	c8 01       	movw	r24, r16
    4328:	b7 01       	movw	r22, r14
    432a:	66 0d       	add	r22, r6
    432c:	77 1d       	adc	r23, r7
    432e:	88 1d       	adc	r24, r8
    4330:	99 1d       	adc	r25, r9
    4332:	a6 01       	movw	r20, r12
    4334:	95 01       	movw	r18, r10
    4336:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__mulsi3>
    433a:	36 e0       	ldi	r19, 0x06	; 6
    433c:	95 95       	asr	r25
    433e:	87 95       	ror	r24
    4340:	77 95       	ror	r23
    4342:	67 95       	ror	r22
    4344:	3a 95       	dec	r19
    4346:	d1 f7       	brne	.-12     	; 0x433c <obstacleAvoidance+0x266>
    4348:	6a 0d       	add	r22, r10
    434a:	7b 1d       	adc	r23, r11
    434c:	8c 1d       	adc	r24, r12
    434e:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    4350:	9b 01       	movw	r18, r22
    4352:	e9 81       	ldd	r30, Y+1	; 0x01
    4354:	fa 81       	ldd	r31, Y+2	; 0x02
    4356:	71 83       	std	Z+1, r23	; 0x01
    4358:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    435a:	f2 e0       	ldi	r31, 0x02	; 2
    435c:	21 30       	cpi	r18, 0x01	; 1
    435e:	3f 07       	cpc	r19, r31
    4360:	44 f0       	brlt	.+16     	; 0x4372 <obstacleAvoidance+0x29c>
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	92 e0       	ldi	r25, 0x02	; 2
    4366:	e9 81       	ldd	r30, Y+1	; 0x01
    4368:	fa 81       	ldd	r31, Y+2	; 0x02
    436a:	91 83       	std	Z+1, r25	; 0x01
    436c:	80 83       	st	Z, r24
    436e:	20 e0       	ldi	r18, 0x00	; 0
    4370:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    4372:	f2 01       	movw	r30, r4
    4374:	80 81       	ld	r24, Z
    4376:	91 81       	ldd	r25, Z+1	; 0x01
    4378:	f2 e0       	ldi	r31, 0x02	; 2
    437a:	81 30       	cpi	r24, 0x01	; 1
    437c:	9f 07       	cpc	r25, r31
    437e:	4c f0       	brlt	.+18     	; 0x4392 <obstacleAvoidance+0x2bc>
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	92 e0       	ldi	r25, 0x02	; 2
    4384:	f2 01       	movw	r30, r4
    4386:	91 83       	std	Z+1, r25	; 0x01
    4388:	80 83       	st	Z, r24
    438a:	e9 81       	ldd	r30, Y+1	; 0x01
    438c:	fa 81       	ldd	r31, Y+2	; 0x02
    438e:	20 81       	ld	r18, Z
    4390:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    4392:	fe ef       	ldi	r31, 0xFE	; 254
    4394:	20 30       	cpi	r18, 0x00	; 0
    4396:	3f 07       	cpc	r19, r31
    4398:	4c f4       	brge	.+18     	; 0x43ac <obstacleAvoidance+0x2d6>
    439a:	80 e0       	ldi	r24, 0x00	; 0
    439c:	9e ef       	ldi	r25, 0xFE	; 254
    439e:	e9 81       	ldd	r30, Y+1	; 0x01
    43a0:	fa 81       	ldd	r31, Y+2	; 0x02
    43a2:	91 83       	std	Z+1, r25	; 0x01
    43a4:	80 83       	st	Z, r24
    43a6:	f2 01       	movw	r30, r4
    43a8:	80 81       	ld	r24, Z
    43aa:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    43ac:	fe ef       	ldi	r31, 0xFE	; 254
    43ae:	80 30       	cpi	r24, 0x00	; 0
    43b0:	9f 07       	cpc	r25, r31
    43b2:	2c f4       	brge	.+10     	; 0x43be <obstacleAvoidance+0x2e8>
    43b4:	80 e0       	ldi	r24, 0x00	; 0
    43b6:	9e ef       	ldi	r25, 0xFE	; 254
    43b8:	f2 01       	movw	r30, r4
    43ba:	91 83       	std	Z+1, r25	; 0x01
    43bc:	80 83       	st	Z, r24

}
    43be:	28 96       	adiw	r28, 0x08	; 8
    43c0:	0f b6       	in	r0, 0x3f	; 63
    43c2:	f8 94       	cli
    43c4:	de bf       	out	0x3e, r29	; 62
    43c6:	0f be       	out	0x3f, r0	; 63
    43c8:	cd bf       	out	0x3d, r28	; 61
    43ca:	cf 91       	pop	r28
    43cc:	df 91       	pop	r29
    43ce:	1f 91       	pop	r17
    43d0:	0f 91       	pop	r16
    43d2:	ff 90       	pop	r15
    43d4:	ef 90       	pop	r14
    43d6:	df 90       	pop	r13
    43d8:	cf 90       	pop	r12
    43da:	bf 90       	pop	r11
    43dc:	af 90       	pop	r10
    43de:	9f 90       	pop	r9
    43e0:	8f 90       	pop	r8
    43e2:	7f 90       	pop	r7
    43e4:	6f 90       	pop	r6
    43e6:	5f 90       	pop	r5
    43e8:	4f 90       	pop	r4
    43ea:	3f 90       	pop	r3
    43ec:	2f 90       	pop	r2
    43ee:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    43f0:	4d 81       	ldd	r20, Y+5	; 0x05
    43f2:	5e 81       	ldd	r21, Y+6	; 0x06
    43f4:	5a 01       	movw	r10, r20
    43f6:	cc 24       	eor	r12, r12
    43f8:	b7 fc       	sbrc	r11, 7
    43fa:	c0 94       	com	r12
    43fc:	dc 2c       	mov	r13, r12
    43fe:	8f 81       	ldd	r24, Y+7	; 0x07
    4400:	98 85       	ldd	r25, Y+8	; 0x08
    4402:	3c 01       	movw	r6, r24
    4404:	88 24       	eor	r8, r8
    4406:	77 fc       	sbrc	r7, 7
    4408:	80 94       	com	r8
    440a:	98 2c       	mov	r9, r8
    440c:	79 01       	movw	r14, r18
    440e:	00 27       	eor	r16, r16
    4410:	f7 fc       	sbrc	r15, 7
    4412:	00 95       	com	r16
    4414:	10 2f       	mov	r17, r16
    4416:	c8 01       	movw	r24, r16
    4418:	b7 01       	movw	r22, r14
    441a:	66 0d       	add	r22, r6
    441c:	77 1d       	adc	r23, r7
    441e:	88 1d       	adc	r24, r8
    4420:	99 1d       	adc	r25, r9
    4422:	a6 01       	movw	r20, r12
    4424:	95 01       	movw	r18, r10
    4426:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__mulsi3>
    442a:	e6 e0       	ldi	r30, 0x06	; 6
    442c:	95 95       	asr	r25
    442e:	87 95       	ror	r24
    4430:	77 95       	ror	r23
    4432:	67 95       	ror	r22
    4434:	ea 95       	dec	r30
    4436:	d1 f7       	brne	.-12     	; 0x442c <obstacleAvoidance+0x356>
    4438:	26 1b       	sub	r18, r22
    443a:	37 0b       	sbc	r19, r23
    443c:	48 0b       	sbc	r20, r24
    443e:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    4440:	f2 01       	movw	r30, r4
    4442:	31 83       	std	Z+1, r19	; 0x01
    4444:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    4446:	2d 81       	ldd	r18, Y+5	; 0x05
    4448:	3e 81       	ldd	r19, Y+6	; 0x06
    444a:	37 ff       	sbrs	r19, 7
    444c:	67 cf       	rjmp	.-306    	; 0x431c <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    444e:	2b 81       	ldd	r18, Y+3	; 0x03
    4450:	3c 81       	ldd	r19, Y+4	; 0x04
    4452:	59 01       	movw	r10, r18
    4454:	cc 24       	eor	r12, r12
    4456:	b7 fc       	sbrc	r11, 7
    4458:	c0 94       	com	r12
    445a:	dc 2c       	mov	r13, r12
    445c:	c4 01       	movw	r24, r8
    445e:	b3 01       	movw	r22, r6
    4460:	6e 19       	sub	r22, r14
    4462:	7f 09       	sbc	r23, r15
    4464:	80 0b       	sbc	r24, r16
    4466:	91 0b       	sbc	r25, r17
    4468:	a6 01       	movw	r20, r12
    446a:	95 01       	movw	r18, r10
    446c:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__mulsi3>
    4470:	26 e0       	ldi	r18, 0x06	; 6
    4472:	95 95       	asr	r25
    4474:	87 95       	ror	r24
    4476:	77 95       	ror	r23
    4478:	67 95       	ror	r22
    447a:	2a 95       	dec	r18
    447c:	d1 f7       	brne	.-12     	; 0x4472 <obstacleAvoidance+0x39c>
    447e:	a6 1a       	sub	r10, r22
    4480:	b7 0a       	sbc	r11, r23
    4482:	c8 0a       	sbc	r12, r24
    4484:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    4486:	95 01       	movw	r18, r10
    4488:	e9 81       	ldd	r30, Y+1	; 0x01
    448a:	fa 81       	ldd	r31, Y+2	; 0x02
    448c:	b1 82       	std	Z+1, r11	; 0x01
    448e:	a0 82       	st	Z, r10
    4490:	64 cf       	rjmp	.-312    	; 0x435a <obstacleAvoidance+0x284>

00004492 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    4492:	80 91 6f 03 	lds	r24, 0x036F
    4496:	90 91 70 03 	lds	r25, 0x0370
    449a:	21 e0       	ldi	r18, 0x01	; 1
    449c:	84 3a       	cpi	r24, 0xA4	; 164
    449e:	92 07       	cpc	r25, r18
    44a0:	d4 f0       	brlt	.+52     	; 0x44d6 <cliffDetected+0x44>
    44a2:	80 91 71 03 	lds	r24, 0x0371
    44a6:	90 91 72 03 	lds	r25, 0x0372
    44aa:	21 e0       	ldi	r18, 0x01	; 1
    44ac:	84 3a       	cpi	r24, 0xA4	; 164
    44ae:	92 07       	cpc	r25, r18
    44b0:	94 f0       	brlt	.+36     	; 0x44d6 <cliffDetected+0x44>
    44b2:	80 91 73 03 	lds	r24, 0x0373
    44b6:	90 91 74 03 	lds	r25, 0x0374
    44ba:	21 e0       	ldi	r18, 0x01	; 1
    44bc:	84 3a       	cpi	r24, 0xA4	; 164
    44be:	92 07       	cpc	r25, r18
    44c0:	74 f0       	brlt	.+28     	; 0x44de <cliffDetected+0x4c>
		return 1;
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	20 91 75 03 	lds	r18, 0x0375
    44c8:	30 91 76 03 	lds	r19, 0x0376
    44cc:	91 e0       	ldi	r25, 0x01	; 1
    44ce:	24 3a       	cpi	r18, 0xA4	; 164
    44d0:	39 07       	cpc	r19, r25
    44d2:	1c f4       	brge	.+6      	; 0x44da <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    44d4:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    44d6:	81 e0       	ldi	r24, 0x01	; 1
    44d8:	08 95       	ret
    44da:	80 e0       	ldi	r24, 0x00	; 0
    44dc:	08 95       	ret
    44de:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    44e0:	08 95       	ret

000044e2 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	80 93 4f 05 	sts	0x054F, r24
}
    44e8:	08 95       	ret

000044ea <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    44ea:	10 92 4f 05 	sts	0x054F, r1
}
    44ee:	08 95       	ret

000044f0 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	80 93 50 05 	sts	0x0550, r24
}
    44f6:	08 95       	ret

000044f8 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    44f8:	10 92 50 05 	sts	0x0550, r1
}
    44fc:	08 95       	ret

000044fe <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    44fe:	a0 e8       	ldi	r26, 0x80	; 128
    4500:	b0 e0       	ldi	r27, 0x00	; 0
    4502:	1c 92       	st	X, r1
	TCCR1B = 0;
    4504:	e1 e8       	ldi	r30, 0x81	; 129
    4506:	f0 e0       	ldi	r31, 0x00	; 0
    4508:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    450a:	8c 91       	ld	r24, X
    450c:	89 6a       	ori	r24, 0xA9	; 169
    450e:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    4510:	80 81       	ld	r24, Z
    4512:	89 60       	ori	r24, 0x09	; 9
    4514:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    4516:	80 91 0c 02 	lds	r24, 0x020C
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	90 93 89 00 	sts	0x0089, r25
    4520:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    4524:	80 91 0d 02 	lds	r24, 0x020D
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	90 93 8b 00 	sts	0x008B, r25
    452e:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    4532:	80 91 0e 02 	lds	r24, 0x020E
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	90 93 8d 00 	sts	0x008D, r25
    453c:	80 93 8c 00 	sts	0x008C, r24

}
    4540:	08 95       	ret

00004542 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    4542:	81 e0       	ldi	r24, 0x01	; 1
    4544:	90 91 0f 04 	lds	r25, 0x040F
    4548:	89 1b       	sub	r24, r25
    454a:	80 93 0f 04 	sts	0x040F, r24

	if(blinkState) {
    454e:	88 23       	and	r24, r24
    4550:	39 f4       	brne	.+14     	; 0x4560 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    4552:	80 91 80 00 	lds	r24, 0x0080
    4556:	87 7f       	andi	r24, 0xF7	; 247
    4558:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    455c:	2f 98       	cbi	0x05, 7	; 5
    455e:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    4560:	80 91 80 00 	lds	r24, 0x0080
    4564:	88 60       	ori	r24, 0x08	; 8
    4566:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    456a:	8f ef       	ldi	r24, 0xFF	; 255
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	90 93 8d 00 	sts	0x008D, r25
    4572:	80 93 8c 00 	sts	0x008C, r24
    4576:	08 95       	ret

00004578 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    4578:	88 23       	and	r24, r24
    457a:	59 f0       	breq	.+22     	; 0x4592 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    457c:	90 91 80 00 	lds	r25, 0x0080
    4580:	90 68       	ori	r25, 0x80	; 128
    4582:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    4586:	90 e0       	ldi	r25, 0x00	; 0
    4588:	90 93 89 00 	sts	0x0089, r25
    458c:	80 93 88 00 	sts	0x0088, r24
    4590:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    4592:	80 91 80 00 	lds	r24, 0x0080
    4596:	8f 77       	andi	r24, 0x7F	; 127
    4598:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    459c:	2d 98       	cbi	0x05, 5	; 5
    459e:	08 95       	ret

000045a0 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    45a0:	88 23       	and	r24, r24
    45a2:	59 f0       	breq	.+22     	; 0x45ba <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    45a4:	90 91 80 00 	lds	r25, 0x0080
    45a8:	90 62       	ori	r25, 0x20	; 32
    45aa:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	90 93 8b 00 	sts	0x008B, r25
    45b4:	80 93 8a 00 	sts	0x008A, r24
    45b8:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    45ba:	80 91 80 00 	lds	r24, 0x0080
    45be:	8f 7d       	andi	r24, 0xDF	; 223
    45c0:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    45c4:	2e 98       	cbi	0x05, 6	; 5
    45c6:	08 95       	ret

000045c8 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    45c8:	88 23       	and	r24, r24
    45ca:	59 f0       	breq	.+22     	; 0x45e2 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    45cc:	90 91 80 00 	lds	r25, 0x0080
    45d0:	98 60       	ori	r25, 0x08	; 8
    45d2:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	90 93 8d 00 	sts	0x008D, r25
    45dc:	80 93 8c 00 	sts	0x008C, r24
    45e0:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    45e2:	80 91 80 00 	lds	r24, 0x0080
    45e6:	87 7f       	andi	r24, 0xF7	; 247
    45e8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    45ec:	2f 98       	cbi	0x05, 7	; 5
    45ee:	08 95       	ret

000045f0 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    45f0:	83 30       	cpi	r24, 0x03	; 3
    45f2:	09 f4       	brne	.+2      	; 0x45f6 <setGreenLed+0x6>
    45f4:	5a c0       	rjmp	.+180    	; 0x46aa <setGreenLed+0xba>
    45f6:	84 30       	cpi	r24, 0x04	; 4
    45f8:	80 f0       	brcs	.+32     	; 0x461a <setGreenLed+0x2a>
    45fa:	85 30       	cpi	r24, 0x05	; 5
    45fc:	09 f4       	brne	.+2      	; 0x4600 <setGreenLed+0x10>
    45fe:	41 c0       	rjmp	.+130    	; 0x4682 <setGreenLed+0x92>
    4600:	85 30       	cpi	r24, 0x05	; 5
    4602:	d0 f4       	brcc	.+52     	; 0x4638 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    4604:	66 23       	and	r22, r22
    4606:	09 f4       	brne	.+2      	; 0x460a <setGreenLed+0x1a>
    4608:	68 c0       	rjmp	.+208    	; 0x46da <setGreenLed+0xea>
    460a:	80 91 0b 01 	lds	r24, 0x010B
    460e:	8f 7e       	andi	r24, 0xEF	; 239
    4610:	80 93 0b 01 	sts	0x010B, r24
    4614:	80 91 0b 01 	lds	r24, 0x010B
    4618:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    461a:	81 30       	cpi	r24, 0x01	; 1
    461c:	e1 f1       	breq	.+120    	; 0x4696 <setGreenLed+0xa6>
    461e:	82 30       	cpi	r24, 0x02	; 2
    4620:	80 f0       	brcs	.+32     	; 0x4642 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    4622:	66 23       	and	r22, r22
    4624:	09 f4       	brne	.+2      	; 0x4628 <setGreenLed+0x38>
    4626:	46 c0       	rjmp	.+140    	; 0x46b4 <setGreenLed+0xc4>
    4628:	80 91 0b 01 	lds	r24, 0x010B
    462c:	8b 7f       	andi	r24, 0xFB	; 251
    462e:	80 93 0b 01 	sts	0x010B, r24
    4632:	80 91 0b 01 	lds	r24, 0x010B
    4636:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    4638:	86 30       	cpi	r24, 0x06	; 6
    463a:	c9 f0       	breq	.+50     	; 0x466e <setGreenLed+0x7e>
    463c:	87 30       	cpi	r24, 0x07	; 7
    463e:	61 f0       	breq	.+24     	; 0x4658 <setGreenLed+0x68>
    4640:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    4642:	66 23       	and	r22, r22
    4644:	09 f4       	brne	.+2      	; 0x4648 <setGreenLed+0x58>
    4646:	51 c0       	rjmp	.+162    	; 0x46ea <setGreenLed+0xfa>
    4648:	80 91 0b 01 	lds	r24, 0x010B
    464c:	8e 7f       	andi	r24, 0xFE	; 254
    464e:	80 93 0b 01 	sts	0x010B, r24
    4652:	80 91 0b 01 	lds	r24, 0x010B
    4656:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    4658:	66 23       	and	r22, r22
    465a:	09 f0       	breq	.+2      	; 0x465e <setGreenLed+0x6e>
    465c:	5e c0       	rjmp	.+188    	; 0x471a <setGreenLed+0x12a>
    465e:	80 91 0b 01 	lds	r24, 0x010B
    4662:	80 68       	ori	r24, 0x80	; 128
    4664:	80 93 0b 01 	sts	0x010B, r24
    4668:	80 91 0b 01 	lds	r24, 0x010B
    466c:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    466e:	66 23       	and	r22, r22
    4670:	49 f1       	breq	.+82     	; 0x46c4 <setGreenLed+0xd4>
    4672:	80 91 0b 01 	lds	r24, 0x010B
    4676:	8f 7b       	andi	r24, 0xBF	; 191
    4678:	80 93 0b 01 	sts	0x010B, r24
    467c:	80 91 0b 01 	lds	r24, 0x010B
    4680:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    4682:	66 23       	and	r22, r22
    4684:	d1 f1       	breq	.+116    	; 0x46fa <setGreenLed+0x10a>
    4686:	80 91 0b 01 	lds	r24, 0x010B
    468a:	8f 7d       	andi	r24, 0xDF	; 223
    468c:	80 93 0b 01 	sts	0x010B, r24
    4690:	80 91 0b 01 	lds	r24, 0x010B
    4694:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    4696:	66 23       	and	r22, r22
    4698:	c1 f1       	breq	.+112    	; 0x470a <setGreenLed+0x11a>
    469a:	80 91 0b 01 	lds	r24, 0x010B
    469e:	8d 7f       	andi	r24, 0xFD	; 253
    46a0:	80 93 0b 01 	sts	0x010B, r24
    46a4:	80 91 0b 01 	lds	r24, 0x010B
    46a8:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    46aa:	66 23       	and	r22, r22
    46ac:	99 f0       	breq	.+38     	; 0x46d4 <setGreenLed+0xe4>
    46ae:	a3 98       	cbi	0x14, 3	; 20
    46b0:	84 b3       	in	r24, 0x14	; 20
    46b2:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    46b4:	80 91 0b 01 	lds	r24, 0x010B
    46b8:	84 60       	ori	r24, 0x04	; 4
    46ba:	80 93 0b 01 	sts	0x010B, r24
    46be:	80 91 0b 01 	lds	r24, 0x010B
    46c2:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    46c4:	80 91 0b 01 	lds	r24, 0x010B
    46c8:	80 64       	ori	r24, 0x40	; 64
    46ca:	80 93 0b 01 	sts	0x010B, r24
    46ce:	80 91 0b 01 	lds	r24, 0x010B
    46d2:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    46d4:	a3 9a       	sbi	0x14, 3	; 20
    46d6:	84 b3       	in	r24, 0x14	; 20
    46d8:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    46da:	80 91 0b 01 	lds	r24, 0x010B
    46de:	80 61       	ori	r24, 0x10	; 16
    46e0:	80 93 0b 01 	sts	0x010B, r24
    46e4:	80 91 0b 01 	lds	r24, 0x010B
    46e8:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    46ea:	80 91 0b 01 	lds	r24, 0x010B
    46ee:	81 60       	ori	r24, 0x01	; 1
    46f0:	80 93 0b 01 	sts	0x010B, r24
    46f4:	80 91 0b 01 	lds	r24, 0x010B
    46f8:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    46fa:	80 91 0b 01 	lds	r24, 0x010B
    46fe:	80 62       	ori	r24, 0x20	; 32
    4700:	80 93 0b 01 	sts	0x010B, r24
    4704:	80 91 0b 01 	lds	r24, 0x010B
    4708:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    470a:	80 91 0b 01 	lds	r24, 0x010B
    470e:	82 60       	ori	r24, 0x02	; 2
    4710:	80 93 0b 01 	sts	0x010B, r24
    4714:	80 91 0b 01 	lds	r24, 0x010B
    4718:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    471a:	80 91 0b 01 	lds	r24, 0x010B
    471e:	8f 77       	andi	r24, 0x7F	; 127
    4720:	80 93 0b 01 	sts	0x010B, r24
    4724:	80 91 0b 01 	lds	r24, 0x010B
    4728:	08 95       	ret

0000472a <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    472a:	eb e0       	ldi	r30, 0x0B	; 11
    472c:	f1 e0       	ldi	r31, 0x01	; 1
    472e:	80 81       	ld	r24, Z
    4730:	81 60       	ori	r24, 0x01	; 1
    4732:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    4734:	80 81       	ld	r24, Z
    4736:	82 60       	ori	r24, 0x02	; 2
    4738:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    473a:	80 81       	ld	r24, Z
    473c:	84 60       	ori	r24, 0x04	; 4
    473e:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    4740:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    4742:	80 81       	ld	r24, Z
    4744:	80 61       	ori	r24, 0x10	; 16
    4746:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    4748:	80 81       	ld	r24, Z
    474a:	80 62       	ori	r24, 0x20	; 32
    474c:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    474e:	80 81       	ld	r24, Z
    4750:	80 64       	ori	r24, 0x40	; 64
    4752:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    4754:	80 81       	ld	r24, Z
    4756:	80 68       	ori	r24, 0x80	; 128
    4758:	80 83       	st	Z, r24

}
    475a:	08 95       	ret

0000475c <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    475c:	eb e0       	ldi	r30, 0x0B	; 11
    475e:	f1 e0       	ldi	r31, 0x01	; 1
    4760:	80 81       	ld	r24, Z
    4762:	8e 7f       	andi	r24, 0xFE	; 254
    4764:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    4766:	80 81       	ld	r24, Z
    4768:	8d 7f       	andi	r24, 0xFD	; 253
    476a:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    476c:	80 81       	ld	r24, Z
    476e:	8b 7f       	andi	r24, 0xFB	; 251
    4770:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    4772:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    4774:	80 81       	ld	r24, Z
    4776:	8f 7e       	andi	r24, 0xEF	; 239
    4778:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    477a:	80 81       	ld	r24, Z
    477c:	8f 7d       	andi	r24, 0xDF	; 223
    477e:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    4780:	80 81       	ld	r24, Z
    4782:	8f 7b       	andi	r24, 0xBF	; 191
    4784:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    4786:	80 81       	ld	r24, Z
    4788:	8f 77       	andi	r24, 0x7F	; 127
    478a:	80 83       	st	Z, r24

}
    478c:	08 95       	ret

0000478e <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    478e:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4792:	80 91 14 02 	lds	r24, 0x0214
    4796:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    479a:	88 23       	and	r24, r24
    479c:	49 f4       	brne	.+18     	; 0x47b0 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    479e:	86 e1       	ldi	r24, 0x16	; 22
    47a0:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    47a4:	85 e4       	ldi	r24, 0x45	; 69
    47a6:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    47aa:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>
    47ae:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    47b0:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    47b4:	86 ea       	ldi	r24, 0xA6	; 166
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	90 93 15 02 	sts	0x0215, r25
    47bc:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    47c0:	86 ea       	ldi	r24, 0xA6	; 166
    47c2:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    47c6:	88 23       	and	r24, r24
    47c8:	41 f5       	brne	.+80     	; 0x481a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    47ca:	8d e2       	ldi	r24, 0x2D	; 45
    47cc:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_write(0x08);	// measurement mode
    47d0:	88 e0       	ldi	r24, 0x08	; 8
    47d2:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    47d6:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    47da:	80 91 14 02 	lds	r24, 0x0214
    47de:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    47e2:	88 23       	and	r24, r24
    47e4:	d1 f4       	brne	.+52     	; 0x481a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    47e6:	81 e3       	ldi	r24, 0x31	; 49
    47e8:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    47ec:	80 e0       	ldi	r24, 0x00	; 0
    47ee:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    47f2:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    47f6:	80 91 14 02 	lds	r24, 0x0214
    47fa:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    47fe:	88 23       	and	r24, r24
    4800:	61 f4       	brne	.+24     	; 0x481a <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    4802:	8c e2       	ldi	r24, 0x2C	; 44
    4804:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    4808:	89 e0       	ldi	r24, 0x09	; 9
    480a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    480e:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    4812:	81 e0       	ldi	r24, 0x01	; 1
    4814:	80 93 1f 05 	sts	0x051F, r24
    4818:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    481a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    481e:	82 e0       	ldi	r24, 0x02	; 2
    4820:	80 93 1f 05 	sts	0x051F, r24
    4824:	08 95       	ret

00004826 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4826:	80 91 14 02 	lds	r24, 0x0214
    482a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    482e:	88 23       	and	r24, r24
    4830:	51 f4       	brne	.+20     	; 0x4846 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    4832:	86 e1       	ldi	r24, 0x16	; 22
    4834:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    4838:	85 e4       	ldi	r24, 0x45	; 69
    483a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    483e:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>
    }

	return 0;				// configuration ok
    4842:	80 e0       	ldi	r24, 0x00	; 0

}
    4844:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4846:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>
		return 1;
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	08 95       	ret

0000484e <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    484e:	80 91 14 02 	lds	r24, 0x0214
    4852:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4856:	88 23       	and	r24, r24
    4858:	31 f5       	brne	.+76     	; 0x48a6 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    485a:	8d e2       	ldi	r24, 0x2D	; 45
    485c:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_write(0x08);	// measurement mode
    4860:	88 e0       	ldi	r24, 0x08	; 8
    4862:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4866:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    486a:	80 91 14 02 	lds	r24, 0x0214
    486e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4872:	88 23       	and	r24, r24
    4874:	c1 f4       	brne	.+48     	; 0x48a6 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    4876:	81 e3       	ldi	r24, 0x31	; 49
    4878:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    487c:	80 e0       	ldi	r24, 0x00	; 0
    487e:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4882:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4886:	80 91 14 02 	lds	r24, 0x0214
    488a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    488e:	88 23       	and	r24, r24
    4890:	51 f4       	brne	.+20     	; 0x48a6 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    4892:	8c e2       	ldi	r24, 0x2C	; 44
    4894:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    4898:	89 e0       	ldi	r24, 0x09	; 9
    489a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    489e:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>
    }

	return 0;
    48a2:	80 e0       	ldi	r24, 0x00	; 0

}
    48a4:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    48a6:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>
		return 1;
    48aa:	81 e0       	ldi	r24, 0x01	; 1
    48ac:	08 95       	ret

000048ae <readAccelXY>:

	return 0;

}

void readAccelXY() {
    48ae:	ff 92       	push	r15
    48b0:	0f 93       	push	r16
    48b2:	1f 93       	push	r17
    48b4:	df 93       	push	r29
    48b6:	cf 93       	push	r28
    48b8:	0f 92       	push	r0
    48ba:	cd b7       	in	r28, 0x3d	; 61
    48bc:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    48be:	80 91 1f 05 	lds	r24, 0x051F
    48c2:	88 23       	and	r24, r24
    48c4:	91 f0       	breq	.+36     	; 0x48ea <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    48c6:	81 30       	cpi	r24, 0x01	; 1
    48c8:	09 f4       	brne	.+2      	; 0x48cc <readAccelXY+0x1e>
    48ca:	88 c0       	rjmp	.+272    	; 0x49dc <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    48cc:	10 92 21 05 	sts	0x0521, r1
    48d0:	10 92 20 05 	sts	0x0520, r1
		accY = 0;
    48d4:	10 92 23 05 	sts	0x0523, r1
    48d8:	10 92 22 05 	sts	0x0522, r1

	}

}
    48dc:	0f 90       	pop	r0
    48de:	cf 91       	pop	r28
    48e0:	df 91       	pop	r29
    48e2:	1f 91       	pop	r17
    48e4:	0f 91       	pop	r16
    48e6:	ff 90       	pop	r15
    48e8:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    48ea:	80 91 14 02 	lds	r24, 0x0214
    48ee:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    48f2:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    48f4:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    48f8:	80 91 14 02 	lds	r24, 0x0214
    48fc:	8f 5f       	subi	r24, 0xFF	; 255
    48fe:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    4902:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    4906:	08 2f       	mov	r16, r24
    4908:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    490c:	f8 2e       	mov	r15, r24
    490e:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    4912:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    4914:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    4918:	89 83       	std	Y+1, r24	; 0x01
    491a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    491e:	90 91 7f 05 	lds	r25, 0x057F
    4922:	89 81       	ldd	r24, Y+1	; 0x01
    4924:	99 23       	and	r25, r25
    4926:	39 f1       	breq	.+78     	; 0x4976 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    4928:	4f 2d       	mov	r20, r15
    492a:	55 27       	eor	r21, r21
    492c:	47 fd       	sbrc	r20, 7
    492e:	50 95       	com	r21
    4930:	54 2f       	mov	r21, r20
    4932:	44 27       	eor	r20, r20
    4934:	60 2f       	mov	r22, r16
    4936:	77 27       	eor	r23, r23
    4938:	67 fd       	sbrc	r22, 7
    493a:	70 95       	com	r23
    493c:	46 2b       	or	r20, r22
    493e:	57 2b       	or	r21, r23
    4940:	50 93 21 05 	sts	0x0521, r21
    4944:	40 93 20 05 	sts	0x0520, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    4948:	28 2f       	mov	r18, r24
    494a:	33 27       	eor	r19, r19
    494c:	27 fd       	sbrc	r18, 7
    494e:	30 95       	com	r19
    4950:	32 2f       	mov	r19, r18
    4952:	22 27       	eor	r18, r18
    4954:	81 2f       	mov	r24, r17
    4956:	99 27       	eor	r25, r25
    4958:	87 fd       	sbrc	r24, 7
    495a:	90 95       	com	r25
    495c:	28 2b       	or	r18, r24
    495e:	39 2b       	or	r19, r25
    4960:	30 93 23 05 	sts	0x0523, r19
    4964:	20 93 22 05 	sts	0x0522, r18
		accX = 0;
		accY = 0;

	}

}
    4968:	0f 90       	pop	r0
    496a:	cf 91       	pop	r28
    496c:	df 91       	pop	r29
    496e:	1f 91       	pop	r17
    4970:	0f 91       	pop	r16
    4972:	ff 90       	pop	r15
    4974:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    4976:	4f 2d       	mov	r20, r15
    4978:	55 27       	eor	r21, r21
    497a:	47 fd       	sbrc	r20, 7
    497c:	50 95       	com	r21
    497e:	54 2f       	mov	r21, r20
    4980:	44 27       	eor	r20, r20
    4982:	60 2f       	mov	r22, r16
    4984:	77 27       	eor	r23, r23
    4986:	67 fd       	sbrc	r22, 7
    4988:	70 95       	com	r23
    498a:	46 2b       	or	r20, r22
    498c:	57 2b       	or	r21, r23
    498e:	60 91 26 05 	lds	r22, 0x0526
    4992:	70 91 27 05 	lds	r23, 0x0527
    4996:	46 1b       	sub	r20, r22
    4998:	57 0b       	sbc	r21, r23
    499a:	50 93 21 05 	sts	0x0521, r21
    499e:	40 93 20 05 	sts	0x0520, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    49a2:	28 2f       	mov	r18, r24
    49a4:	33 27       	eor	r19, r19
    49a6:	27 fd       	sbrc	r18, 7
    49a8:	30 95       	com	r19
    49aa:	32 2f       	mov	r19, r18
    49ac:	22 27       	eor	r18, r18
    49ae:	81 2f       	mov	r24, r17
    49b0:	99 27       	eor	r25, r25
    49b2:	87 fd       	sbrc	r24, 7
    49b4:	90 95       	com	r25
    49b6:	28 2b       	or	r18, r24
    49b8:	39 2b       	or	r19, r25
    49ba:	80 91 28 05 	lds	r24, 0x0528
    49be:	90 91 29 05 	lds	r25, 0x0529
    49c2:	28 1b       	sub	r18, r24
    49c4:	39 0b       	sbc	r19, r25
    49c6:	30 93 23 05 	sts	0x0523, r19
    49ca:	20 93 22 05 	sts	0x0522, r18
		accX = 0;
		accY = 0;

	}

}
    49ce:	0f 90       	pop	r0
    49d0:	cf 91       	pop	r28
    49d2:	df 91       	pop	r29
    49d4:	1f 91       	pop	r17
    49d6:	0f 91       	pop	r16
    49d8:	ff 90       	pop	r15
    49da:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    49dc:	80 91 14 02 	lds	r24, 0x0214
    49e0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    49e4:	82 e3       	ldi	r24, 0x32	; 50
    49e6:	86 cf       	rjmp	.-244    	; 0x48f4 <readAccelXY+0x46>

000049e8 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    49e8:	df 93       	push	r29
    49ea:	cf 93       	push	r28
    49ec:	00 d0       	rcall	.+0      	; 0x49ee <readAccelXYZ+0x6>
    49ee:	00 d0       	rcall	.+0      	; 0x49f0 <readAccelXYZ+0x8>
    49f0:	cd b7       	in	r28, 0x3d	; 61
    49f2:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    49f4:	80 91 1f 05 	lds	r24, 0x051F
    49f8:	88 23       	and	r24, r24
    49fa:	c1 f0       	breq	.+48     	; 0x4a2c <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    49fc:	81 30       	cpi	r24, 0x01	; 1
    49fe:	09 f4       	brne	.+2      	; 0x4a02 <readAccelXYZ+0x1a>
    4a00:	ad c0       	rjmp	.+346    	; 0x4b5c <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    4a02:	10 92 21 05 	sts	0x0521, r1
    4a06:	10 92 20 05 	sts	0x0520, r1
		accY = 0;
    4a0a:	10 92 23 05 	sts	0x0523, r1
    4a0e:	10 92 22 05 	sts	0x0522, r1
		accZ = 0;
    4a12:	10 92 25 05 	sts	0x0525, r1
    4a16:	10 92 24 05 	sts	0x0524, r1

	}

}
    4a1a:	26 96       	adiw	r28, 0x06	; 6
    4a1c:	0f b6       	in	r0, 0x3f	; 63
    4a1e:	f8 94       	cli
    4a20:	de bf       	out	0x3e, r29	; 62
    4a22:	0f be       	out	0x3f, r0	; 63
    4a24:	cd bf       	out	0x3d, r28	; 61
    4a26:	cf 91       	pop	r28
    4a28:	df 91       	pop	r29
    4a2a:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    4a2c:	80 91 14 02 	lds	r24, 0x0214
    4a30:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    4a34:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    4a36:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    4a3a:	80 91 14 02 	lds	r24, 0x0214
    4a3e:	8f 5f       	subi	r24, 0xFF	; 255
    4a40:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    4a44:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    4a48:	89 83       	std	Y+1, r24	; 0x01
    4a4a:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    4a4e:	8a 83       	std	Y+2, r24	; 0x02
    4a50:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    4a54:	8b 83       	std	Y+3, r24	; 0x03
    4a56:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    4a5a:	8c 83       	std	Y+4, r24	; 0x04
    4a5c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    4a60:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    4a62:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <i2c_readNak>
    4a66:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    4a68:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    4a6c:	80 91 7f 05 	lds	r24, 0x057F
    4a70:	88 23       	and	r24, r24
    4a72:	89 f1       	breq	.+98     	; 0x4ad6 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    4a74:	8a 81       	ldd	r24, Y+2	; 0x02
    4a76:	99 27       	eor	r25, r25
    4a78:	87 fd       	sbrc	r24, 7
    4a7a:	90 95       	com	r25
    4a7c:	98 2f       	mov	r25, r24
    4a7e:	88 27       	eor	r24, r24
    4a80:	29 81       	ldd	r18, Y+1	; 0x01
    4a82:	33 27       	eor	r19, r19
    4a84:	27 fd       	sbrc	r18, 7
    4a86:	30 95       	com	r19
    4a88:	82 2b       	or	r24, r18
    4a8a:	93 2b       	or	r25, r19
    4a8c:	90 93 21 05 	sts	0x0521, r25
    4a90:	80 93 20 05 	sts	0x0520, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    4a94:	8c 81       	ldd	r24, Y+4	; 0x04
    4a96:	99 27       	eor	r25, r25
    4a98:	87 fd       	sbrc	r24, 7
    4a9a:	90 95       	com	r25
    4a9c:	98 2f       	mov	r25, r24
    4a9e:	88 27       	eor	r24, r24
    4aa0:	2b 81       	ldd	r18, Y+3	; 0x03
    4aa2:	33 27       	eor	r19, r19
    4aa4:	27 fd       	sbrc	r18, 7
    4aa6:	30 95       	com	r19
    4aa8:	82 2b       	or	r24, r18
    4aaa:	93 2b       	or	r25, r19
    4aac:	90 93 23 05 	sts	0x0523, r25
    4ab0:	80 93 22 05 	sts	0x0522, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    4ab4:	8e 81       	ldd	r24, Y+6	; 0x06
    4ab6:	99 27       	eor	r25, r25
    4ab8:	87 fd       	sbrc	r24, 7
    4aba:	90 95       	com	r25
    4abc:	98 2f       	mov	r25, r24
    4abe:	88 27       	eor	r24, r24
    4ac0:	2d 81       	ldd	r18, Y+5	; 0x05
    4ac2:	33 27       	eor	r19, r19
    4ac4:	27 fd       	sbrc	r18, 7
    4ac6:	30 95       	com	r19
    4ac8:	82 2b       	or	r24, r18
    4aca:	93 2b       	or	r25, r19
    4acc:	90 93 25 05 	sts	0x0525, r25
    4ad0:	80 93 24 05 	sts	0x0524, r24
    4ad4:	a2 cf       	rjmp	.-188    	; 0x4a1a <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    4ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad8:	99 27       	eor	r25, r25
    4ada:	87 fd       	sbrc	r24, 7
    4adc:	90 95       	com	r25
    4ade:	98 2f       	mov	r25, r24
    4ae0:	88 27       	eor	r24, r24
    4ae2:	29 81       	ldd	r18, Y+1	; 0x01
    4ae4:	33 27       	eor	r19, r19
    4ae6:	27 fd       	sbrc	r18, 7
    4ae8:	30 95       	com	r19
    4aea:	82 2b       	or	r24, r18
    4aec:	93 2b       	or	r25, r19
    4aee:	20 91 26 05 	lds	r18, 0x0526
    4af2:	30 91 27 05 	lds	r19, 0x0527
    4af6:	82 1b       	sub	r24, r18
    4af8:	93 0b       	sbc	r25, r19
    4afa:	90 93 21 05 	sts	0x0521, r25
    4afe:	80 93 20 05 	sts	0x0520, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    4b02:	8c 81       	ldd	r24, Y+4	; 0x04
    4b04:	99 27       	eor	r25, r25
    4b06:	87 fd       	sbrc	r24, 7
    4b08:	90 95       	com	r25
    4b0a:	98 2f       	mov	r25, r24
    4b0c:	88 27       	eor	r24, r24
    4b0e:	2b 81       	ldd	r18, Y+3	; 0x03
    4b10:	33 27       	eor	r19, r19
    4b12:	27 fd       	sbrc	r18, 7
    4b14:	30 95       	com	r19
    4b16:	82 2b       	or	r24, r18
    4b18:	93 2b       	or	r25, r19
    4b1a:	20 91 28 05 	lds	r18, 0x0528
    4b1e:	30 91 29 05 	lds	r19, 0x0529
    4b22:	82 1b       	sub	r24, r18
    4b24:	93 0b       	sbc	r25, r19
    4b26:	90 93 23 05 	sts	0x0523, r25
    4b2a:	80 93 22 05 	sts	0x0522, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    4b2e:	8e 81       	ldd	r24, Y+6	; 0x06
    4b30:	99 27       	eor	r25, r25
    4b32:	87 fd       	sbrc	r24, 7
    4b34:	90 95       	com	r25
    4b36:	98 2f       	mov	r25, r24
    4b38:	88 27       	eor	r24, r24
    4b3a:	2d 81       	ldd	r18, Y+5	; 0x05
    4b3c:	33 27       	eor	r19, r19
    4b3e:	27 fd       	sbrc	r18, 7
    4b40:	30 95       	com	r19
    4b42:	82 2b       	or	r24, r18
    4b44:	93 2b       	or	r25, r19
    4b46:	20 91 2a 05 	lds	r18, 0x052A
    4b4a:	30 91 2b 05 	lds	r19, 0x052B
    4b4e:	82 1b       	sub	r24, r18
    4b50:	93 0b       	sbc	r25, r19
    4b52:	90 93 25 05 	sts	0x0525, r25
    4b56:	80 93 24 05 	sts	0x0524, r24
    4b5a:	5f cf       	rjmp	.-322    	; 0x4a1a <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    4b5c:	80 91 14 02 	lds	r24, 0x0214
    4b60:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    4b64:	82 e3       	ldi	r24, 0x32	; 50
    4b66:	67 cf       	rjmp	.-306    	; 0x4a36 <readAccelXYZ+0x4e>

00004b68 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    4b68:	cf 93       	push	r28
    4b6a:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    4b6c:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    4b70:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    4b74:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    4b78:	80 e0       	ldi	r24, 0x00	; 0
    4b7a:	0e 94 bc 22 	call	0x4578	; 0x4578 <updateRedLed>
	updateGreenLed(pwm_green);
    4b7e:	80 91 0d 02 	lds	r24, 0x020D
    4b82:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <updateGreenLed>
	updateBlueLed(pwm_blue);
    4b86:	80 91 0e 02 	lds	r24, 0x020E
    4b8a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <updateBlueLed>

	calibrationCycle = 0;
    4b8e:	10 92 41 05 	sts	0x0541, r1
    4b92:	10 92 40 05 	sts	0x0540, r1
	startCalibration = 1;
    4b96:	81 e0       	ldi	r24, 0x01	; 1
    4b98:	80 93 7f 05 	sts	0x057F, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    4b9c:	c1 e0       	ldi	r28, 0x01	; 1
    4b9e:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    4ba0:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    4ba4:	20 91 40 05 	lds	r18, 0x0540
    4ba8:	30 91 41 05 	lds	r19, 0x0541
    4bac:	21 31       	cpi	r18, 0x11	; 17
    4bae:	31 05       	cpc	r19, r1
    4bb0:	0c f4       	brge	.+2      	; 0x4bb4 <calibrateSensors+0x4c>
    4bb2:	35 c1       	rjmp	.+618    	; 0x4e1e <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    4bb4:	80 91 8f 03 	lds	r24, 0x038F
    4bb8:	90 91 90 03 	lds	r25, 0x0390
    4bbc:	a0 91 91 03 	lds	r26, 0x0391
    4bc0:	b0 91 92 03 	lds	r27, 0x0392
    4bc4:	54 e0       	ldi	r21, 0x04	; 4
    4bc6:	b6 95       	lsr	r27
    4bc8:	a7 95       	ror	r26
    4bca:	97 95       	ror	r25
    4bcc:	87 95       	ror	r24
    4bce:	5a 95       	dec	r21
    4bd0:	d1 f7       	brne	.-12     	; 0x4bc6 <calibrateSensors+0x5e>
    4bd2:	90 93 78 03 	sts	0x0378, r25
    4bd6:	80 93 77 03 	sts	0x0377, r24
    4bda:	80 91 93 03 	lds	r24, 0x0393
    4bde:	90 91 94 03 	lds	r25, 0x0394
    4be2:	a0 91 95 03 	lds	r26, 0x0395
    4be6:	b0 91 96 03 	lds	r27, 0x0396
    4bea:	44 e0       	ldi	r20, 0x04	; 4
    4bec:	b6 95       	lsr	r27
    4bee:	a7 95       	ror	r26
    4bf0:	97 95       	ror	r25
    4bf2:	87 95       	ror	r24
    4bf4:	4a 95       	dec	r20
    4bf6:	d1 f7       	brne	.-12     	; 0x4bec <calibrateSensors+0x84>
    4bf8:	90 93 7a 03 	sts	0x037A, r25
    4bfc:	80 93 79 03 	sts	0x0379, r24
    4c00:	80 91 97 03 	lds	r24, 0x0397
    4c04:	90 91 98 03 	lds	r25, 0x0398
    4c08:	a0 91 99 03 	lds	r26, 0x0399
    4c0c:	b0 91 9a 03 	lds	r27, 0x039A
    4c10:	34 e0       	ldi	r19, 0x04	; 4
    4c12:	b6 95       	lsr	r27
    4c14:	a7 95       	ror	r26
    4c16:	97 95       	ror	r25
    4c18:	87 95       	ror	r24
    4c1a:	3a 95       	dec	r19
    4c1c:	d1 f7       	brne	.-12     	; 0x4c12 <calibrateSensors+0xaa>
    4c1e:	90 93 7c 03 	sts	0x037C, r25
    4c22:	80 93 7b 03 	sts	0x037B, r24
    4c26:	80 91 9b 03 	lds	r24, 0x039B
    4c2a:	90 91 9c 03 	lds	r25, 0x039C
    4c2e:	a0 91 9d 03 	lds	r26, 0x039D
    4c32:	b0 91 9e 03 	lds	r27, 0x039E
    4c36:	24 e0       	ldi	r18, 0x04	; 4
    4c38:	b6 95       	lsr	r27
    4c3a:	a7 95       	ror	r26
    4c3c:	97 95       	ror	r25
    4c3e:	87 95       	ror	r24
    4c40:	2a 95       	dec	r18
    4c42:	d1 f7       	brne	.-12     	; 0x4c38 <calibrateSensors+0xd0>
    4c44:	90 93 7e 03 	sts	0x037E, r25
    4c48:	80 93 7d 03 	sts	0x037D, r24
    4c4c:	80 91 9f 03 	lds	r24, 0x039F
    4c50:	90 91 a0 03 	lds	r25, 0x03A0
    4c54:	a0 91 a1 03 	lds	r26, 0x03A1
    4c58:	b0 91 a2 03 	lds	r27, 0x03A2
    4c5c:	f4 e0       	ldi	r31, 0x04	; 4
    4c5e:	b6 95       	lsr	r27
    4c60:	a7 95       	ror	r26
    4c62:	97 95       	ror	r25
    4c64:	87 95       	ror	r24
    4c66:	fa 95       	dec	r31
    4c68:	d1 f7       	brne	.-12     	; 0x4c5e <calibrateSensors+0xf6>
    4c6a:	90 93 80 03 	sts	0x0380, r25
    4c6e:	80 93 7f 03 	sts	0x037F, r24
    4c72:	80 91 a3 03 	lds	r24, 0x03A3
    4c76:	90 91 a4 03 	lds	r25, 0x03A4
    4c7a:	a0 91 a5 03 	lds	r26, 0x03A5
    4c7e:	b0 91 a6 03 	lds	r27, 0x03A6
    4c82:	e4 e0       	ldi	r30, 0x04	; 4
    4c84:	b6 95       	lsr	r27
    4c86:	a7 95       	ror	r26
    4c88:	97 95       	ror	r25
    4c8a:	87 95       	ror	r24
    4c8c:	ea 95       	dec	r30
    4c8e:	d1 f7       	brne	.-12     	; 0x4c84 <calibrateSensors+0x11c>
    4c90:	90 93 82 03 	sts	0x0382, r25
    4c94:	80 93 81 03 	sts	0x0381, r24
    4c98:	80 91 a7 03 	lds	r24, 0x03A7
    4c9c:	90 91 a8 03 	lds	r25, 0x03A8
    4ca0:	a0 91 a9 03 	lds	r26, 0x03A9
    4ca4:	b0 91 aa 03 	lds	r27, 0x03AA
    4ca8:	74 e0       	ldi	r23, 0x04	; 4
    4caa:	b6 95       	lsr	r27
    4cac:	a7 95       	ror	r26
    4cae:	97 95       	ror	r25
    4cb0:	87 95       	ror	r24
    4cb2:	7a 95       	dec	r23
    4cb4:	d1 f7       	brne	.-12     	; 0x4caa <calibrateSensors+0x142>
    4cb6:	90 93 84 03 	sts	0x0384, r25
    4cba:	80 93 83 03 	sts	0x0383, r24
    4cbe:	80 91 ab 03 	lds	r24, 0x03AB
    4cc2:	90 91 ac 03 	lds	r25, 0x03AC
    4cc6:	a0 91 ad 03 	lds	r26, 0x03AD
    4cca:	b0 91 ae 03 	lds	r27, 0x03AE
    4cce:	64 e0       	ldi	r22, 0x04	; 4
    4cd0:	b6 95       	lsr	r27
    4cd2:	a7 95       	ror	r26
    4cd4:	97 95       	ror	r25
    4cd6:	87 95       	ror	r24
    4cd8:	6a 95       	dec	r22
    4cda:	d1 f7       	brne	.-12     	; 0x4cd0 <calibrateSensors+0x168>
    4cdc:	90 93 86 03 	sts	0x0386, r25
    4ce0:	80 93 85 03 	sts	0x0385, r24
    4ce4:	80 91 b3 03 	lds	r24, 0x03B3
    4ce8:	90 91 b4 03 	lds	r25, 0x03B4
    4cec:	a0 91 b5 03 	lds	r26, 0x03B5
    4cf0:	b0 91 b6 03 	lds	r27, 0x03B6
    4cf4:	54 e0       	ldi	r21, 0x04	; 4
    4cf6:	b6 95       	lsr	r27
    4cf8:	a7 95       	ror	r26
    4cfa:	97 95       	ror	r25
    4cfc:	87 95       	ror	r24
    4cfe:	5a 95       	dec	r21
    4d00:	d1 f7       	brne	.-12     	; 0x4cf6 <calibrateSensors+0x18e>
    4d02:	9c 01       	movw	r18, r24
    4d04:	80 91 b7 03 	lds	r24, 0x03B7
    4d08:	90 91 b8 03 	lds	r25, 0x03B8
    4d0c:	a0 91 b9 03 	lds	r26, 0x03B9
    4d10:	b0 91 ba 03 	lds	r27, 0x03BA
    4d14:	44 e0       	ldi	r20, 0x04	; 4
    4d16:	b6 95       	lsr	r27
    4d18:	a7 95       	ror	r26
    4d1a:	97 95       	ror	r25
    4d1c:	87 95       	ror	r24
    4d1e:	4a 95       	dec	r20
    4d20:	d1 f7       	brne	.-12     	; 0x4d16 <calibrateSensors+0x1ae>
    4d22:	bc 01       	movw	r22, r24
    4d24:	80 91 bb 03 	lds	r24, 0x03BB
    4d28:	90 91 bc 03 	lds	r25, 0x03BC
    4d2c:	a0 91 bd 03 	lds	r26, 0x03BD
    4d30:	b0 91 be 03 	lds	r27, 0x03BE
    4d34:	f4 e0       	ldi	r31, 0x04	; 4
    4d36:	b6 95       	lsr	r27
    4d38:	a7 95       	ror	r26
    4d3a:	97 95       	ror	r25
    4d3c:	87 95       	ror	r24
    4d3e:	fa 95       	dec	r31
    4d40:	d1 f7       	brne	.-12     	; 0x4d36 <calibrateSensors+0x1ce>
    4d42:	ac 01       	movw	r20, r24
    4d44:	80 91 af 03 	lds	r24, 0x03AF
    4d48:	90 91 b0 03 	lds	r25, 0x03B0
    4d4c:	a0 91 b1 03 	lds	r26, 0x03B1
    4d50:	b0 91 b2 03 	lds	r27, 0x03B2
    4d54:	e4 e0       	ldi	r30, 0x04	; 4
    4d56:	b6 95       	lsr	r27
    4d58:	a7 95       	ror	r26
    4d5a:	97 95       	ror	r25
    4d5c:	87 95       	ror	r24
    4d5e:	ea 95       	dec	r30
    4d60:	d1 f7       	brne	.-12     	; 0x4d56 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    4d62:	80 50       	subi	r24, 0x00	; 0
    4d64:	92 40       	sbci	r25, 0x02	; 2
    4d66:	90 93 88 03 	sts	0x0388, r25
    4d6a:	80 93 87 03 	sts	0x0387, r24
    4d6e:	20 50       	subi	r18, 0x00	; 0
    4d70:	32 40       	sbci	r19, 0x02	; 2
    4d72:	30 93 8a 03 	sts	0x038A, r19
    4d76:	20 93 89 03 	sts	0x0389, r18
    4d7a:	60 50       	subi	r22, 0x00	; 0
    4d7c:	72 40       	sbci	r23, 0x02	; 2
    4d7e:	70 93 8c 03 	sts	0x038C, r23
    4d82:	60 93 8b 03 	sts	0x038B, r22
    4d86:	40 50       	subi	r20, 0x00	; 0
    4d88:	52 40       	sbci	r21, 0x02	; 2
    4d8a:	50 93 8e 03 	sts	0x038E, r21
    4d8e:	40 93 8d 03 	sts	0x038D, r20
			}

			accOffsetX = accOffsetXSum>>4;
    4d92:	80 91 2c 05 	lds	r24, 0x052C
    4d96:	90 91 2d 05 	lds	r25, 0x052D
    4d9a:	95 95       	asr	r25
    4d9c:	87 95       	ror	r24
    4d9e:	95 95       	asr	r25
    4da0:	87 95       	ror	r24
    4da2:	95 95       	asr	r25
    4da4:	87 95       	ror	r24
    4da6:	95 95       	asr	r25
    4da8:	87 95       	ror	r24
    4daa:	90 93 27 05 	sts	0x0527, r25
    4dae:	80 93 26 05 	sts	0x0526, r24
			accOffsetY = accOffsetYSum>>4;
    4db2:	80 91 2e 05 	lds	r24, 0x052E
    4db6:	90 91 2f 05 	lds	r25, 0x052F
    4dba:	95 95       	asr	r25
    4dbc:	87 95       	ror	r24
    4dbe:	95 95       	asr	r25
    4dc0:	87 95       	ror	r24
    4dc2:	95 95       	asr	r25
    4dc4:	87 95       	ror	r24
    4dc6:	95 95       	asr	r25
    4dc8:	87 95       	ror	r24
    4dca:	90 93 29 05 	sts	0x0529, r25
    4dce:	80 93 28 05 	sts	0x0528, r24
			accOffsetZ = accOffsetZSum>>4;
    4dd2:	80 91 30 05 	lds	r24, 0x0530
    4dd6:	90 91 31 05 	lds	r25, 0x0531
    4dda:	95 95       	asr	r25
    4ddc:	87 95       	ror	r24
    4dde:	95 95       	asr	r25
    4de0:	87 95       	ror	r24
    4de2:	95 95       	asr	r25
    4de4:	87 95       	ror	r24
    4de6:	95 95       	asr	r25
    4de8:	87 95       	ror	r24
    4dea:	90 93 2b 05 	sts	0x052B, r25
    4dee:	80 93 2a 05 	sts	0x052A, r24

			startCalibration = 0;
    4df2:	10 92 7f 05 	sts	0x057F, r1

		}

	}

	pwm_red = 255;
    4df6:	8f ef       	ldi	r24, 0xFF	; 255
    4df8:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    4dfc:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    4e00:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    4e04:	0e 94 bc 22 	call	0x4578	; 0x4578 <updateRedLed>
	updateGreenLed(pwm_green);
    4e08:	80 91 0d 02 	lds	r24, 0x020D
    4e0c:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <updateGreenLed>
	updateBlueLed(pwm_blue);
    4e10:	80 91 0e 02 	lds	r24, 0x020E
    4e14:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <updateBlueLed>

}
    4e18:	df 91       	pop	r29
    4e1a:	cf 91       	pop	r28
    4e1c:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    4e1e:	80 91 c6 03 	lds	r24, 0x03C6
    4e22:	88 23       	and	r24, r24
    4e24:	09 f4       	brne	.+2      	; 0x4e28 <calibrateSensors+0x2c0>
    4e26:	86 c1       	rjmp	.+780    	; 0x5134 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    4e28:	10 92 c6 03 	sts	0x03C6, r1

				if(calibrationCycle==0) {		// reset all variables
    4e2c:	21 15       	cp	r18, r1
    4e2e:	31 05       	cpc	r19, r1
    4e30:	09 f4       	brne	.+2      	; 0x4e34 <calibrateSensors+0x2cc>
    4e32:	86 c1       	rjmp	.+780    	; 0x5140 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    4e34:	80 91 5f 03 	lds	r24, 0x035F
    4e38:	90 91 60 03 	lds	r25, 0x0360
    4e3c:	aa 27       	eor	r26, r26
    4e3e:	97 fd       	sbrc	r25, 7
    4e40:	a0 95       	com	r26
    4e42:	ba 2f       	mov	r27, r26
    4e44:	40 91 8f 03 	lds	r20, 0x038F
    4e48:	50 91 90 03 	lds	r21, 0x0390
    4e4c:	60 91 91 03 	lds	r22, 0x0391
    4e50:	70 91 92 03 	lds	r23, 0x0392
    4e54:	84 0f       	add	r24, r20
    4e56:	95 1f       	adc	r25, r21
    4e58:	a6 1f       	adc	r26, r22
    4e5a:	b7 1f       	adc	r27, r23
    4e5c:	80 93 8f 03 	sts	0x038F, r24
    4e60:	90 93 90 03 	sts	0x0390, r25
    4e64:	a0 93 91 03 	sts	0x0391, r26
    4e68:	b0 93 92 03 	sts	0x0392, r27
    4e6c:	80 91 61 03 	lds	r24, 0x0361
    4e70:	90 91 62 03 	lds	r25, 0x0362
    4e74:	aa 27       	eor	r26, r26
    4e76:	97 fd       	sbrc	r25, 7
    4e78:	a0 95       	com	r26
    4e7a:	ba 2f       	mov	r27, r26
    4e7c:	40 91 93 03 	lds	r20, 0x0393
    4e80:	50 91 94 03 	lds	r21, 0x0394
    4e84:	60 91 95 03 	lds	r22, 0x0395
    4e88:	70 91 96 03 	lds	r23, 0x0396
    4e8c:	84 0f       	add	r24, r20
    4e8e:	95 1f       	adc	r25, r21
    4e90:	a6 1f       	adc	r26, r22
    4e92:	b7 1f       	adc	r27, r23
    4e94:	80 93 93 03 	sts	0x0393, r24
    4e98:	90 93 94 03 	sts	0x0394, r25
    4e9c:	a0 93 95 03 	sts	0x0395, r26
    4ea0:	b0 93 96 03 	sts	0x0396, r27
    4ea4:	80 91 63 03 	lds	r24, 0x0363
    4ea8:	90 91 64 03 	lds	r25, 0x0364
    4eac:	aa 27       	eor	r26, r26
    4eae:	97 fd       	sbrc	r25, 7
    4eb0:	a0 95       	com	r26
    4eb2:	ba 2f       	mov	r27, r26
    4eb4:	40 91 97 03 	lds	r20, 0x0397
    4eb8:	50 91 98 03 	lds	r21, 0x0398
    4ebc:	60 91 99 03 	lds	r22, 0x0399
    4ec0:	70 91 9a 03 	lds	r23, 0x039A
    4ec4:	84 0f       	add	r24, r20
    4ec6:	95 1f       	adc	r25, r21
    4ec8:	a6 1f       	adc	r26, r22
    4eca:	b7 1f       	adc	r27, r23
    4ecc:	80 93 97 03 	sts	0x0397, r24
    4ed0:	90 93 98 03 	sts	0x0398, r25
    4ed4:	a0 93 99 03 	sts	0x0399, r26
    4ed8:	b0 93 9a 03 	sts	0x039A, r27
    4edc:	80 91 65 03 	lds	r24, 0x0365
    4ee0:	90 91 66 03 	lds	r25, 0x0366
    4ee4:	aa 27       	eor	r26, r26
    4ee6:	97 fd       	sbrc	r25, 7
    4ee8:	a0 95       	com	r26
    4eea:	ba 2f       	mov	r27, r26
    4eec:	40 91 9b 03 	lds	r20, 0x039B
    4ef0:	50 91 9c 03 	lds	r21, 0x039C
    4ef4:	60 91 9d 03 	lds	r22, 0x039D
    4ef8:	70 91 9e 03 	lds	r23, 0x039E
    4efc:	84 0f       	add	r24, r20
    4efe:	95 1f       	adc	r25, r21
    4f00:	a6 1f       	adc	r26, r22
    4f02:	b7 1f       	adc	r27, r23
    4f04:	80 93 9b 03 	sts	0x039B, r24
    4f08:	90 93 9c 03 	sts	0x039C, r25
    4f0c:	a0 93 9d 03 	sts	0x039D, r26
    4f10:	b0 93 9e 03 	sts	0x039E, r27
    4f14:	80 91 67 03 	lds	r24, 0x0367
    4f18:	90 91 68 03 	lds	r25, 0x0368
    4f1c:	aa 27       	eor	r26, r26
    4f1e:	97 fd       	sbrc	r25, 7
    4f20:	a0 95       	com	r26
    4f22:	ba 2f       	mov	r27, r26
    4f24:	40 91 9f 03 	lds	r20, 0x039F
    4f28:	50 91 a0 03 	lds	r21, 0x03A0
    4f2c:	60 91 a1 03 	lds	r22, 0x03A1
    4f30:	70 91 a2 03 	lds	r23, 0x03A2
    4f34:	84 0f       	add	r24, r20
    4f36:	95 1f       	adc	r25, r21
    4f38:	a6 1f       	adc	r26, r22
    4f3a:	b7 1f       	adc	r27, r23
    4f3c:	80 93 9f 03 	sts	0x039F, r24
    4f40:	90 93 a0 03 	sts	0x03A0, r25
    4f44:	a0 93 a1 03 	sts	0x03A1, r26
    4f48:	b0 93 a2 03 	sts	0x03A2, r27
    4f4c:	80 91 69 03 	lds	r24, 0x0369
    4f50:	90 91 6a 03 	lds	r25, 0x036A
    4f54:	aa 27       	eor	r26, r26
    4f56:	97 fd       	sbrc	r25, 7
    4f58:	a0 95       	com	r26
    4f5a:	ba 2f       	mov	r27, r26
    4f5c:	40 91 a3 03 	lds	r20, 0x03A3
    4f60:	50 91 a4 03 	lds	r21, 0x03A4
    4f64:	60 91 a5 03 	lds	r22, 0x03A5
    4f68:	70 91 a6 03 	lds	r23, 0x03A6
    4f6c:	84 0f       	add	r24, r20
    4f6e:	95 1f       	adc	r25, r21
    4f70:	a6 1f       	adc	r26, r22
    4f72:	b7 1f       	adc	r27, r23
    4f74:	80 93 a3 03 	sts	0x03A3, r24
    4f78:	90 93 a4 03 	sts	0x03A4, r25
    4f7c:	a0 93 a5 03 	sts	0x03A5, r26
    4f80:	b0 93 a6 03 	sts	0x03A6, r27
    4f84:	80 91 6b 03 	lds	r24, 0x036B
    4f88:	90 91 6c 03 	lds	r25, 0x036C
    4f8c:	aa 27       	eor	r26, r26
    4f8e:	97 fd       	sbrc	r25, 7
    4f90:	a0 95       	com	r26
    4f92:	ba 2f       	mov	r27, r26
    4f94:	40 91 a7 03 	lds	r20, 0x03A7
    4f98:	50 91 a8 03 	lds	r21, 0x03A8
    4f9c:	60 91 a9 03 	lds	r22, 0x03A9
    4fa0:	70 91 aa 03 	lds	r23, 0x03AA
    4fa4:	84 0f       	add	r24, r20
    4fa6:	95 1f       	adc	r25, r21
    4fa8:	a6 1f       	adc	r26, r22
    4faa:	b7 1f       	adc	r27, r23
    4fac:	80 93 a7 03 	sts	0x03A7, r24
    4fb0:	90 93 a8 03 	sts	0x03A8, r25
    4fb4:	a0 93 a9 03 	sts	0x03A9, r26
    4fb8:	b0 93 aa 03 	sts	0x03AA, r27
    4fbc:	80 91 6d 03 	lds	r24, 0x036D
    4fc0:	90 91 6e 03 	lds	r25, 0x036E
    4fc4:	aa 27       	eor	r26, r26
    4fc6:	97 fd       	sbrc	r25, 7
    4fc8:	a0 95       	com	r26
    4fca:	ba 2f       	mov	r27, r26
    4fcc:	40 91 ab 03 	lds	r20, 0x03AB
    4fd0:	50 91 ac 03 	lds	r21, 0x03AC
    4fd4:	60 91 ad 03 	lds	r22, 0x03AD
    4fd8:	70 91 ae 03 	lds	r23, 0x03AE
    4fdc:	84 0f       	add	r24, r20
    4fde:	95 1f       	adc	r25, r21
    4fe0:	a6 1f       	adc	r26, r22
    4fe2:	b7 1f       	adc	r27, r23
    4fe4:	80 93 ab 03 	sts	0x03AB, r24
    4fe8:	90 93 ac 03 	sts	0x03AC, r25
    4fec:	a0 93 ad 03 	sts	0x03AD, r26
    4ff0:	b0 93 ae 03 	sts	0x03AE, r27
    4ff4:	80 91 6f 03 	lds	r24, 0x036F
    4ff8:	90 91 70 03 	lds	r25, 0x0370
    4ffc:	aa 27       	eor	r26, r26
    4ffe:	97 fd       	sbrc	r25, 7
    5000:	a0 95       	com	r26
    5002:	ba 2f       	mov	r27, r26
    5004:	40 91 af 03 	lds	r20, 0x03AF
    5008:	50 91 b0 03 	lds	r21, 0x03B0
    500c:	60 91 b1 03 	lds	r22, 0x03B1
    5010:	70 91 b2 03 	lds	r23, 0x03B2
    5014:	84 0f       	add	r24, r20
    5016:	95 1f       	adc	r25, r21
    5018:	a6 1f       	adc	r26, r22
    501a:	b7 1f       	adc	r27, r23
    501c:	80 93 af 03 	sts	0x03AF, r24
    5020:	90 93 b0 03 	sts	0x03B0, r25
    5024:	a0 93 b1 03 	sts	0x03B1, r26
    5028:	b0 93 b2 03 	sts	0x03B2, r27
    502c:	80 91 71 03 	lds	r24, 0x0371
    5030:	90 91 72 03 	lds	r25, 0x0372
    5034:	aa 27       	eor	r26, r26
    5036:	97 fd       	sbrc	r25, 7
    5038:	a0 95       	com	r26
    503a:	ba 2f       	mov	r27, r26
    503c:	40 91 b3 03 	lds	r20, 0x03B3
    5040:	50 91 b4 03 	lds	r21, 0x03B4
    5044:	60 91 b5 03 	lds	r22, 0x03B5
    5048:	70 91 b6 03 	lds	r23, 0x03B6
    504c:	84 0f       	add	r24, r20
    504e:	95 1f       	adc	r25, r21
    5050:	a6 1f       	adc	r26, r22
    5052:	b7 1f       	adc	r27, r23
    5054:	80 93 b3 03 	sts	0x03B3, r24
    5058:	90 93 b4 03 	sts	0x03B4, r25
    505c:	a0 93 b5 03 	sts	0x03B5, r26
    5060:	b0 93 b6 03 	sts	0x03B6, r27
    5064:	80 91 73 03 	lds	r24, 0x0373
    5068:	90 91 74 03 	lds	r25, 0x0374
    506c:	aa 27       	eor	r26, r26
    506e:	97 fd       	sbrc	r25, 7
    5070:	a0 95       	com	r26
    5072:	ba 2f       	mov	r27, r26
    5074:	40 91 b7 03 	lds	r20, 0x03B7
    5078:	50 91 b8 03 	lds	r21, 0x03B8
    507c:	60 91 b9 03 	lds	r22, 0x03B9
    5080:	70 91 ba 03 	lds	r23, 0x03BA
    5084:	84 0f       	add	r24, r20
    5086:	95 1f       	adc	r25, r21
    5088:	a6 1f       	adc	r26, r22
    508a:	b7 1f       	adc	r27, r23
    508c:	80 93 b7 03 	sts	0x03B7, r24
    5090:	90 93 b8 03 	sts	0x03B8, r25
    5094:	a0 93 b9 03 	sts	0x03B9, r26
    5098:	b0 93 ba 03 	sts	0x03BA, r27
    509c:	80 91 75 03 	lds	r24, 0x0375
    50a0:	90 91 76 03 	lds	r25, 0x0376
    50a4:	aa 27       	eor	r26, r26
    50a6:	97 fd       	sbrc	r25, 7
    50a8:	a0 95       	com	r26
    50aa:	ba 2f       	mov	r27, r26
    50ac:	40 91 bb 03 	lds	r20, 0x03BB
    50b0:	50 91 bc 03 	lds	r21, 0x03BC
    50b4:	60 91 bd 03 	lds	r22, 0x03BD
    50b8:	70 91 be 03 	lds	r23, 0x03BE
    50bc:	84 0f       	add	r24, r20
    50be:	95 1f       	adc	r25, r21
    50c0:	a6 1f       	adc	r26, r22
    50c2:	b7 1f       	adc	r27, r23
    50c4:	80 93 bb 03 	sts	0x03BB, r24
    50c8:	90 93 bc 03 	sts	0x03BC, r25
    50cc:	a0 93 bd 03 	sts	0x03BD, r26
    50d0:	b0 93 be 03 	sts	0x03BE, r27
				}

				accOffsetXSum += accX;
    50d4:	80 91 2c 05 	lds	r24, 0x052C
    50d8:	90 91 2d 05 	lds	r25, 0x052D
    50dc:	40 91 20 05 	lds	r20, 0x0520
    50e0:	50 91 21 05 	lds	r21, 0x0521
    50e4:	84 0f       	add	r24, r20
    50e6:	95 1f       	adc	r25, r21
    50e8:	90 93 2d 05 	sts	0x052D, r25
    50ec:	80 93 2c 05 	sts	0x052C, r24
				accOffsetYSum += accY;
    50f0:	80 91 2e 05 	lds	r24, 0x052E
    50f4:	90 91 2f 05 	lds	r25, 0x052F
    50f8:	40 91 22 05 	lds	r20, 0x0522
    50fc:	50 91 23 05 	lds	r21, 0x0523
    5100:	84 0f       	add	r24, r20
    5102:	95 1f       	adc	r25, r21
    5104:	90 93 2f 05 	sts	0x052F, r25
    5108:	80 93 2e 05 	sts	0x052E, r24
				accOffsetZSum += accZ;
    510c:	80 91 30 05 	lds	r24, 0x0530
    5110:	90 91 31 05 	lds	r25, 0x0531
    5114:	40 91 24 05 	lds	r20, 0x0524
    5118:	50 91 25 05 	lds	r21, 0x0525
    511c:	84 0f       	add	r24, r20
    511e:	95 1f       	adc	r25, r21
    5120:	90 93 31 05 	sts	0x0531, r25
    5124:	80 93 30 05 	sts	0x0530, r24

				calibrationCycle++;
    5128:	2f 5f       	subi	r18, 0xFF	; 255
    512a:	3f 4f       	sbci	r19, 0xFF	; 255
    512c:	30 93 41 05 	sts	0x0541, r19
    5130:	20 93 40 05 	sts	0x0540, r18
    5134:	80 91 7f 05 	lds	r24, 0x057F
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    5138:	88 23       	and	r24, r24
    513a:	09 f0       	breq	.+2      	; 0x513e <calibrateSensors+0x5d6>
    513c:	31 cd       	rjmp	.-1438   	; 0x4ba0 <calibrateSensors+0x38>
    513e:	5b ce       	rjmp	.-842    	; 0x4df6 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5140:	10 92 8f 03 	sts	0x038F, r1
    5144:	10 92 90 03 	sts	0x0390, r1
    5148:	10 92 91 03 	sts	0x0391, r1
    514c:	10 92 92 03 	sts	0x0392, r1
						proximityOffset[i] = 0;
    5150:	10 92 78 03 	sts	0x0378, r1
    5154:	10 92 77 03 	sts	0x0377, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5158:	10 92 93 03 	sts	0x0393, r1
    515c:	10 92 94 03 	sts	0x0394, r1
    5160:	10 92 95 03 	sts	0x0395, r1
    5164:	10 92 96 03 	sts	0x0396, r1
						proximityOffset[i] = 0;
    5168:	10 92 7a 03 	sts	0x037A, r1
    516c:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5170:	10 92 97 03 	sts	0x0397, r1
    5174:	10 92 98 03 	sts	0x0398, r1
    5178:	10 92 99 03 	sts	0x0399, r1
    517c:	10 92 9a 03 	sts	0x039A, r1
						proximityOffset[i] = 0;
    5180:	10 92 7c 03 	sts	0x037C, r1
    5184:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5188:	10 92 9b 03 	sts	0x039B, r1
    518c:	10 92 9c 03 	sts	0x039C, r1
    5190:	10 92 9d 03 	sts	0x039D, r1
    5194:	10 92 9e 03 	sts	0x039E, r1
						proximityOffset[i] = 0;
    5198:	10 92 7e 03 	sts	0x037E, r1
    519c:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    51a0:	10 92 9f 03 	sts	0x039F, r1
    51a4:	10 92 a0 03 	sts	0x03A0, r1
    51a8:	10 92 a1 03 	sts	0x03A1, r1
    51ac:	10 92 a2 03 	sts	0x03A2, r1
						proximityOffset[i] = 0;
    51b0:	10 92 80 03 	sts	0x0380, r1
    51b4:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    51b8:	10 92 a3 03 	sts	0x03A3, r1
    51bc:	10 92 a4 03 	sts	0x03A4, r1
    51c0:	10 92 a5 03 	sts	0x03A5, r1
    51c4:	10 92 a6 03 	sts	0x03A6, r1
						proximityOffset[i] = 0;
    51c8:	10 92 82 03 	sts	0x0382, r1
    51cc:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    51d0:	10 92 a7 03 	sts	0x03A7, r1
    51d4:	10 92 a8 03 	sts	0x03A8, r1
    51d8:	10 92 a9 03 	sts	0x03A9, r1
    51dc:	10 92 aa 03 	sts	0x03AA, r1
						proximityOffset[i] = 0;
    51e0:	10 92 84 03 	sts	0x0384, r1
    51e4:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    51e8:	10 92 ab 03 	sts	0x03AB, r1
    51ec:	10 92 ac 03 	sts	0x03AC, r1
    51f0:	10 92 ad 03 	sts	0x03AD, r1
    51f4:	10 92 ae 03 	sts	0x03AE, r1
						proximityOffset[i] = 0;
    51f8:	10 92 86 03 	sts	0x0386, r1
    51fc:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5200:	10 92 af 03 	sts	0x03AF, r1
    5204:	10 92 b0 03 	sts	0x03B0, r1
    5208:	10 92 b1 03 	sts	0x03B1, r1
    520c:	10 92 b2 03 	sts	0x03B2, r1
						proximityOffset[i] = 0;
    5210:	10 92 88 03 	sts	0x0388, r1
    5214:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5218:	10 92 b3 03 	sts	0x03B3, r1
    521c:	10 92 b4 03 	sts	0x03B4, r1
    5220:	10 92 b5 03 	sts	0x03B5, r1
    5224:	10 92 b6 03 	sts	0x03B6, r1
						proximityOffset[i] = 0;
    5228:	10 92 8a 03 	sts	0x038A, r1
    522c:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5230:	10 92 b7 03 	sts	0x03B7, r1
    5234:	10 92 b8 03 	sts	0x03B8, r1
    5238:	10 92 b9 03 	sts	0x03B9, r1
    523c:	10 92 ba 03 	sts	0x03BA, r1
						proximityOffset[i] = 0;
    5240:	10 92 8c 03 	sts	0x038C, r1
    5244:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5248:	10 92 bb 03 	sts	0x03BB, r1
    524c:	10 92 bc 03 	sts	0x03BC, r1
    5250:	10 92 bd 03 	sts	0x03BD, r1
    5254:	10 92 be 03 	sts	0x03BE, r1
						proximityOffset[i] = 0;
    5258:	10 92 8e 03 	sts	0x038E, r1
    525c:	10 92 8d 03 	sts	0x038D, r1
					}
					accOffsetXSum = 0;
    5260:	10 92 2d 05 	sts	0x052D, r1
    5264:	10 92 2c 05 	sts	0x052C, r1
					accOffsetYSum = 0;
    5268:	10 92 2f 05 	sts	0x052F, r1
    526c:	10 92 2e 05 	sts	0x052E, r1
					accOffsetZSum = 0;
    5270:	10 92 31 05 	sts	0x0531, r1
    5274:	10 92 30 05 	sts	0x0530, r1

					calibrationCycle++;
    5278:	d0 93 41 05 	sts	0x0541, r29
    527c:	c0 93 40 05 	sts	0x0540, r28
    5280:	80 91 7f 05 	lds	r24, 0x057F

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    5284:	59 cf       	rjmp	.-334    	; 0x5138 <calibrateSensors+0x5d0>

00005286 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    5286:	80 91 1f 05 	lds	r24, 0x051F
    528a:	88 23       	and	r24, r24
    528c:	79 f0       	breq	.+30     	; 0x52ac <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    528e:	81 30       	cpi	r24, 0x01	; 1
    5290:	11 f1       	breq	.+68     	; 0x52d6 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    5292:	10 92 21 05 	sts	0x0521, r1
    5296:	10 92 20 05 	sts	0x0520, r1
		accY = 0;
    529a:	10 92 23 05 	sts	0x0523, r1
    529e:	10 92 22 05 	sts	0x0522, r1
		accZ = 0;
    52a2:	10 92 25 05 	sts	0x0525, r1
    52a6:	10 92 24 05 	sts	0x0524, r1
    52aa:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    52ac:	80 91 14 02 	lds	r24, 0x0214
    52b0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    52b4:	80 e0       	ldi	r24, 0x00	; 0
    52b6:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    52ba:	80 91 14 02 	lds	r24, 0x0214
    52be:	8f 5f       	subi	r24, 0xFF	; 255
    52c0:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    52c4:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    52c8:	80 93 35 05 	sts	0x0535, r24
    52cc:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    52d0:	80 93 36 05 	sts	0x0536, r24
    52d4:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    52d6:	80 91 14 02 	lds	r24, 0x0214
    52da:	0e 94 14 16 	call	0x2c28	; 0x2c28 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    52de:	82 e3       	ldi	r24, 0x32	; 50
    52e0:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    52e4:	80 91 14 02 	lds	r24, 0x0214
    52e8:	8f 5f       	subi	r24, 0xFF	; 255
    52ea:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    52ee:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    52f2:	80 93 35 05 	sts	0x0535, r24
    52f6:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    52fa:	80 93 36 05 	sts	0x0536, r24
    52fe:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    5302:	80 93 37 05 	sts	0x0537, r24
    5306:	08 95       	ret

00005308 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    5308:	80 91 1f 05 	lds	r24, 0x051F
    530c:	88 23       	and	r24, r24
    530e:	09 f0       	breq	.+2      	; 0x5312 <readAccelXYZ_2+0xa>
    5310:	4e c0       	rjmp	.+156    	; 0x53ae <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    5312:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    5316:	80 93 37 05 	sts	0x0537, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    531a:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    531e:	80 93 38 05 	sts	0x0538, r24
    5322:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <i2c_readAck>
    5326:	80 93 39 05 	sts	0x0539, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    532a:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <i2c_readNak>
    532e:	80 93 3a 05 	sts	0x053A, r24
		i2c_stop();													// set stop conditon = release bus
    5332:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    5336:	80 91 7f 05 	lds	r24, 0x057F
    533a:	88 23       	and	r24, r24
    533c:	09 f4       	brne	.+2      	; 0x5340 <readAccelXYZ_2+0x38>
    533e:	47 c0       	rjmp	.+142    	; 0x53ce <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    5340:	80 91 36 05 	lds	r24, 0x0536
    5344:	99 27       	eor	r25, r25
    5346:	87 fd       	sbrc	r24, 7
    5348:	90 95       	com	r25
    534a:	98 2f       	mov	r25, r24
    534c:	88 27       	eor	r24, r24
    534e:	20 91 35 05 	lds	r18, 0x0535
    5352:	33 27       	eor	r19, r19
    5354:	27 fd       	sbrc	r18, 7
    5356:	30 95       	com	r19
    5358:	82 2b       	or	r24, r18
    535a:	93 2b       	or	r25, r19
    535c:	90 93 21 05 	sts	0x0521, r25
    5360:	80 93 20 05 	sts	0x0520, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    5364:	80 91 38 05 	lds	r24, 0x0538
    5368:	99 27       	eor	r25, r25
    536a:	87 fd       	sbrc	r24, 7
    536c:	90 95       	com	r25
    536e:	98 2f       	mov	r25, r24
    5370:	88 27       	eor	r24, r24
    5372:	20 91 37 05 	lds	r18, 0x0537
    5376:	33 27       	eor	r19, r19
    5378:	27 fd       	sbrc	r18, 7
    537a:	30 95       	com	r19
    537c:	82 2b       	or	r24, r18
    537e:	93 2b       	or	r25, r19
    5380:	90 93 23 05 	sts	0x0523, r25
    5384:	80 93 22 05 	sts	0x0522, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    5388:	80 91 3a 05 	lds	r24, 0x053A
    538c:	99 27       	eor	r25, r25
    538e:	87 fd       	sbrc	r24, 7
    5390:	90 95       	com	r25
    5392:	98 2f       	mov	r25, r24
    5394:	88 27       	eor	r24, r24
    5396:	20 91 39 05 	lds	r18, 0x0539
    539a:	33 27       	eor	r19, r19
    539c:	27 fd       	sbrc	r18, 7
    539e:	30 95       	com	r19
    53a0:	82 2b       	or	r24, r18
    53a2:	93 2b       	or	r25, r19
    53a4:	90 93 25 05 	sts	0x0525, r25
    53a8:	80 93 24 05 	sts	0x0524, r24
    53ac:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    53ae:	81 30       	cpi	r24, 0x01	; 1
    53b0:	09 f4       	brne	.+2      	; 0x53b4 <readAccelXYZ_2+0xac>
    53b2:	b3 cf       	rjmp	.-154    	; 0x531a <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    53b4:	10 92 21 05 	sts	0x0521, r1
    53b8:	10 92 20 05 	sts	0x0520, r1
		accY = 0;
    53bc:	10 92 23 05 	sts	0x0523, r1
    53c0:	10 92 22 05 	sts	0x0522, r1
		accZ = 0;
    53c4:	10 92 25 05 	sts	0x0525, r1
    53c8:	10 92 24 05 	sts	0x0524, r1
    53cc:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    53ce:	80 91 36 05 	lds	r24, 0x0536
    53d2:	99 27       	eor	r25, r25
    53d4:	87 fd       	sbrc	r24, 7
    53d6:	90 95       	com	r25
    53d8:	98 2f       	mov	r25, r24
    53da:	88 27       	eor	r24, r24
    53dc:	20 91 35 05 	lds	r18, 0x0535
    53e0:	33 27       	eor	r19, r19
    53e2:	27 fd       	sbrc	r18, 7
    53e4:	30 95       	com	r19
    53e6:	82 2b       	or	r24, r18
    53e8:	93 2b       	or	r25, r19
    53ea:	20 91 26 05 	lds	r18, 0x0526
    53ee:	30 91 27 05 	lds	r19, 0x0527
    53f2:	82 1b       	sub	r24, r18
    53f4:	93 0b       	sbc	r25, r19
    53f6:	90 93 21 05 	sts	0x0521, r25
    53fa:	80 93 20 05 	sts	0x0520, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    53fe:	80 91 38 05 	lds	r24, 0x0538
    5402:	99 27       	eor	r25, r25
    5404:	87 fd       	sbrc	r24, 7
    5406:	90 95       	com	r25
    5408:	98 2f       	mov	r25, r24
    540a:	88 27       	eor	r24, r24
    540c:	20 91 37 05 	lds	r18, 0x0537
    5410:	33 27       	eor	r19, r19
    5412:	27 fd       	sbrc	r18, 7
    5414:	30 95       	com	r19
    5416:	82 2b       	or	r24, r18
    5418:	93 2b       	or	r25, r19
    541a:	20 91 28 05 	lds	r18, 0x0528
    541e:	30 91 29 05 	lds	r19, 0x0529
    5422:	82 1b       	sub	r24, r18
    5424:	93 0b       	sbc	r25, r19
    5426:	90 93 23 05 	sts	0x0523, r25
    542a:	80 93 22 05 	sts	0x0522, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    542e:	80 91 3a 05 	lds	r24, 0x053A
    5432:	99 27       	eor	r25, r25
    5434:	87 fd       	sbrc	r24, 7
    5436:	90 95       	com	r25
    5438:	98 2f       	mov	r25, r24
    543a:	88 27       	eor	r24, r24
    543c:	20 91 39 05 	lds	r18, 0x0539
    5440:	33 27       	eor	r19, r19
    5442:	27 fd       	sbrc	r18, 7
    5444:	30 95       	com	r19
    5446:	82 2b       	or	r24, r18
    5448:	93 2b       	or	r25, r19
    544a:	20 91 2a 05 	lds	r18, 0x052A
    544e:	30 91 2b 05 	lds	r19, 0x052B
    5452:	82 1b       	sub	r24, r18
    5454:	93 0b       	sbc	r25, r19
    5456:	90 93 25 05 	sts	0x0525, r25
    545a:	80 93 24 05 	sts	0x0524, r24
    545e:	08 95       	ret

00005460 <computeAngle>:

	}

}

void computeAngle() {
    5460:	ef 92       	push	r14
    5462:	ff 92       	push	r15
    5464:	0f 93       	push	r16
    5466:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    5468:	80 91 24 05 	lds	r24, 0x0524
    546c:	90 91 25 05 	lds	r25, 0x0525
    5470:	97 fd       	sbrc	r25, 7
    5472:	5b c0       	rjmp	.+182    	; 0x552a <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    5474:	80 31       	cpi	r24, 0x10	; 16
    5476:	91 05       	cpc	r25, r1
    5478:	08 f0       	brcs	.+2      	; 0x547c <computeAngle+0x1c>
    547a:	42 c0       	rjmp	.+132    	; 0x5500 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    547c:	81 e0       	ldi	r24, 0x01	; 1
    547e:	80 93 16 02 	sts	0x0216, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    5482:	90 91 15 02 	lds	r25, 0x0215
    5486:	98 17       	cp	r25, r24
    5488:	09 f4       	brne	.+2      	; 0x548c <computeAngle+0x2c>
    548a:	42 c0       	rjmp	.+132    	; 0x5510 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    548c:	10 92 34 05 	sts	0x0534, r1
	}
	prevPosition = currPosition;
    5490:	80 93 15 02 	sts	0x0215, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2((float)accX, (float)accY)*RAD_2_DEG);
    5494:	60 91 20 05 	lds	r22, 0x0520
    5498:	70 91 21 05 	lds	r23, 0x0521
    549c:	88 27       	eor	r24, r24
    549e:	77 fd       	sbrc	r23, 7
    54a0:	80 95       	com	r24
    54a2:	98 2f       	mov	r25, r24
    54a4:	0e 94 98 2b 	call	0x5730	; 0x5730 <__floatsisf>
    54a8:	7b 01       	movw	r14, r22
    54aa:	8c 01       	movw	r16, r24
    54ac:	60 91 22 05 	lds	r22, 0x0522
    54b0:	70 91 23 05 	lds	r23, 0x0523
    54b4:	88 27       	eor	r24, r24
    54b6:	77 fd       	sbrc	r23, 7
    54b8:	80 95       	com	r24
    54ba:	98 2f       	mov	r25, r24
    54bc:	0e 94 98 2b 	call	0x5730	; 0x5730 <__floatsisf>
    54c0:	9b 01       	movw	r18, r22
    54c2:	ac 01       	movw	r20, r24
    54c4:	c8 01       	movw	r24, r16
    54c6:	b7 01       	movw	r22, r14
    54c8:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <atan2>
    54cc:	21 ee       	ldi	r18, 0xE1	; 225
    54ce:	3e e2       	ldi	r19, 0x2E	; 46
    54d0:	45 e6       	ldi	r20, 0x65	; 101
    54d2:	52 e4       	ldi	r21, 0x42	; 66
    54d4:	0e 94 99 2a 	call	0x5532	; 0x5532 <__mulsf3>
    54d8:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <__fixsfsi>
    54dc:	9b 01       	movw	r18, r22
    54de:	70 93 33 05 	sts	0x0533, r23
    54e2:	60 93 32 05 	sts	0x0532, r22

	if(currentAngle < 0) {
    54e6:	77 ff       	sbrs	r23, 7
    54e8:	06 c0       	rjmp	.+12     	; 0x54f6 <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    54ea:	28 59       	subi	r18, 0x98	; 152
    54ec:	3e 4f       	sbci	r19, 0xFE	; 254
    54ee:	30 93 33 05 	sts	0x0533, r19
    54f2:	20 93 32 05 	sts	0x0532, r18
	}

}
    54f6:	1f 91       	pop	r17
    54f8:	0f 91       	pop	r16
    54fa:	ff 90       	pop	r15
    54fc:	ef 90       	pop	r14
    54fe:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    5500:	10 92 16 02 	sts	0x0216, r1
    5504:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    5506:	90 91 15 02 	lds	r25, 0x0215
    550a:	98 17       	cp	r25, r24
    550c:	09 f0       	breq	.+2      	; 0x5510 <computeAngle+0xb0>
    550e:	be cf       	rjmp	.-132    	; 0x548c <computeAngle+0x2c>
		timesInSamePos++;
    5510:	90 91 34 05 	lds	r25, 0x0534
    5514:	9f 5f       	subi	r25, 0xFF	; 255
    5516:	90 93 34 05 	sts	0x0534, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    551a:	95 30       	cpi	r25, 0x05	; 5
    551c:	08 f4       	brcc	.+2      	; 0x5520 <computeAngle+0xc0>
    551e:	b8 cf       	rjmp	.-144    	; 0x5490 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    5520:	10 92 34 05 	sts	0x0534, r1
			robotPosition = currPosition;
    5524:	80 93 17 02 	sts	0x0217, r24
    5528:	b3 cf       	rjmp	.-154    	; 0x5490 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    552a:	90 95       	com	r25
    552c:	81 95       	neg	r24
    552e:	9f 4f       	sbci	r25, 0xFF	; 255
    5530:	a1 cf       	rjmp	.-190    	; 0x5474 <computeAngle+0x14>

00005532 <__mulsf3>:
    5532:	a0 e2       	ldi	r26, 0x20	; 32
    5534:	b0 e0       	ldi	r27, 0x00	; 0
    5536:	ef e9       	ldi	r30, 0x9F	; 159
    5538:	fa e2       	ldi	r31, 0x2A	; 42
    553a:	0c 94 2e 2e 	jmp	0x5c5c	; 0x5c5c <__prologue_saves__+0x4>
    553e:	69 83       	std	Y+1, r22	; 0x01
    5540:	7a 83       	std	Y+2, r23	; 0x02
    5542:	8b 83       	std	Y+3, r24	; 0x03
    5544:	9c 83       	std	Y+4, r25	; 0x04
    5546:	2d 83       	std	Y+5, r18	; 0x05
    5548:	3e 83       	std	Y+6, r19	; 0x06
    554a:	4f 83       	std	Y+7, r20	; 0x07
    554c:	58 87       	std	Y+8, r21	; 0x08
    554e:	99 e0       	ldi	r25, 0x09	; 9
    5550:	e9 2e       	mov	r14, r25
    5552:	f1 2c       	mov	r15, r1
    5554:	ec 0e       	add	r14, r28
    5556:	fd 1e       	adc	r15, r29
    5558:	b7 01       	movw	r22, r14
    555a:	ce 01       	movw	r24, r28
    555c:	01 96       	adiw	r24, 0x01	; 1
    555e:	0e 94 76 2d 	call	0x5aec	; 0x5aec <__unpack_f>
    5562:	8e 01       	movw	r16, r28
    5564:	0f 5e       	subi	r16, 0xEF	; 239
    5566:	1f 4f       	sbci	r17, 0xFF	; 255
    5568:	b8 01       	movw	r22, r16
    556a:	ce 01       	movw	r24, r28
    556c:	05 96       	adiw	r24, 0x05	; 5
    556e:	0e 94 76 2d 	call	0x5aec	; 0x5aec <__unpack_f>
    5572:	99 85       	ldd	r25, Y+9	; 0x09
    5574:	92 30       	cpi	r25, 0x02	; 2
    5576:	88 f0       	brcs	.+34     	; 0x559a <__mulsf3+0x68>
    5578:	89 89       	ldd	r24, Y+17	; 0x11
    557a:	82 30       	cpi	r24, 0x02	; 2
    557c:	c0 f0       	brcs	.+48     	; 0x55ae <__mulsf3+0x7c>
    557e:	94 30       	cpi	r25, 0x04	; 4
    5580:	19 f4       	brne	.+6      	; 0x5588 <__mulsf3+0x56>
    5582:	82 30       	cpi	r24, 0x02	; 2
    5584:	29 f0       	breq	.+10     	; 0x5590 <__mulsf3+0x5e>
    5586:	09 c0       	rjmp	.+18     	; 0x559a <__mulsf3+0x68>
    5588:	84 30       	cpi	r24, 0x04	; 4
    558a:	29 f4       	brne	.+10     	; 0x5596 <__mulsf3+0x64>
    558c:	92 30       	cpi	r25, 0x02	; 2
    558e:	79 f4       	brne	.+30     	; 0x55ae <__mulsf3+0x7c>
    5590:	68 e1       	ldi	r22, 0x18	; 24
    5592:	72 e0       	ldi	r23, 0x02	; 2
    5594:	c6 c0       	rjmp	.+396    	; 0x5722 <__mulsf3+0x1f0>
    5596:	92 30       	cpi	r25, 0x02	; 2
    5598:	41 f4       	brne	.+16     	; 0x55aa <__mulsf3+0x78>
    559a:	20 e0       	ldi	r18, 0x00	; 0
    559c:	9a 85       	ldd	r25, Y+10	; 0x0a
    559e:	8a 89       	ldd	r24, Y+18	; 0x12
    55a0:	98 13       	cpse	r25, r24
    55a2:	21 e0       	ldi	r18, 0x01	; 1
    55a4:	2a 87       	std	Y+10, r18	; 0x0a
    55a6:	b7 01       	movw	r22, r14
    55a8:	bc c0       	rjmp	.+376    	; 0x5722 <__mulsf3+0x1f0>
    55aa:	82 30       	cpi	r24, 0x02	; 2
    55ac:	41 f4       	brne	.+16     	; 0x55be <__mulsf3+0x8c>
    55ae:	20 e0       	ldi	r18, 0x00	; 0
    55b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    55b2:	8a 89       	ldd	r24, Y+18	; 0x12
    55b4:	98 13       	cpse	r25, r24
    55b6:	21 e0       	ldi	r18, 0x01	; 1
    55b8:	2a 8b       	std	Y+18, r18	; 0x12
    55ba:	b8 01       	movw	r22, r16
    55bc:	b2 c0       	rjmp	.+356    	; 0x5722 <__mulsf3+0x1f0>
    55be:	cd 84       	ldd	r12, Y+13	; 0x0d
    55c0:	de 84       	ldd	r13, Y+14	; 0x0e
    55c2:	ef 84       	ldd	r14, Y+15	; 0x0f
    55c4:	f8 88       	ldd	r15, Y+16	; 0x10
    55c6:	0d 89       	ldd	r16, Y+21	; 0x15
    55c8:	1e 89       	ldd	r17, Y+22	; 0x16
    55ca:	2f 89       	ldd	r18, Y+23	; 0x17
    55cc:	38 8d       	ldd	r19, Y+24	; 0x18
    55ce:	88 24       	eor	r8, r8
    55d0:	99 24       	eor	r9, r9
    55d2:	54 01       	movw	r10, r8
    55d4:	40 e0       	ldi	r20, 0x00	; 0
    55d6:	50 e0       	ldi	r21, 0x00	; 0
    55d8:	60 e0       	ldi	r22, 0x00	; 0
    55da:	70 e0       	ldi	r23, 0x00	; 0
    55dc:	44 24       	eor	r4, r4
    55de:	55 24       	eor	r5, r5
    55e0:	32 01       	movw	r6, r4
    55e2:	e0 e0       	ldi	r30, 0x00	; 0
    55e4:	f0 e0       	ldi	r31, 0x00	; 0
    55e6:	c6 01       	movw	r24, r12
    55e8:	81 70       	andi	r24, 0x01	; 1
    55ea:	90 70       	andi	r25, 0x00	; 0
    55ec:	89 2b       	or	r24, r25
    55ee:	d9 f0       	breq	.+54     	; 0x5626 <__mulsf3+0xf4>
    55f0:	80 0e       	add	r8, r16
    55f2:	91 1e       	adc	r9, r17
    55f4:	a2 1e       	adc	r10, r18
    55f6:	b3 1e       	adc	r11, r19
    55f8:	db 01       	movw	r26, r22
    55fa:	ca 01       	movw	r24, r20
    55fc:	84 0d       	add	r24, r4
    55fe:	95 1d       	adc	r25, r5
    5600:	a6 1d       	adc	r26, r6
    5602:	b7 1d       	adc	r27, r7
    5604:	40 e0       	ldi	r20, 0x00	; 0
    5606:	50 e0       	ldi	r21, 0x00	; 0
    5608:	60 e0       	ldi	r22, 0x00	; 0
    560a:	70 e0       	ldi	r23, 0x00	; 0
    560c:	80 16       	cp	r8, r16
    560e:	91 06       	cpc	r9, r17
    5610:	a2 06       	cpc	r10, r18
    5612:	b3 06       	cpc	r11, r19
    5614:	20 f4       	brcc	.+8      	; 0x561e <__mulsf3+0xec>
    5616:	41 e0       	ldi	r20, 0x01	; 1
    5618:	50 e0       	ldi	r21, 0x00	; 0
    561a:	60 e0       	ldi	r22, 0x00	; 0
    561c:	70 e0       	ldi	r23, 0x00	; 0
    561e:	48 0f       	add	r20, r24
    5620:	59 1f       	adc	r21, r25
    5622:	6a 1f       	adc	r22, r26
    5624:	7b 1f       	adc	r23, r27
    5626:	44 0c       	add	r4, r4
    5628:	55 1c       	adc	r5, r5
    562a:	66 1c       	adc	r6, r6
    562c:	77 1c       	adc	r7, r7
    562e:	37 ff       	sbrs	r19, 7
    5630:	08 c0       	rjmp	.+16     	; 0x5642 <__mulsf3+0x110>
    5632:	81 e0       	ldi	r24, 0x01	; 1
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	a0 e0       	ldi	r26, 0x00	; 0
    5638:	b0 e0       	ldi	r27, 0x00	; 0
    563a:	48 2a       	or	r4, r24
    563c:	59 2a       	or	r5, r25
    563e:	6a 2a       	or	r6, r26
    5640:	7b 2a       	or	r7, r27
    5642:	31 96       	adiw	r30, 0x01	; 1
    5644:	e0 32       	cpi	r30, 0x20	; 32
    5646:	f1 05       	cpc	r31, r1
    5648:	49 f0       	breq	.+18     	; 0x565c <__mulsf3+0x12a>
    564a:	00 0f       	add	r16, r16
    564c:	11 1f       	adc	r17, r17
    564e:	22 1f       	adc	r18, r18
    5650:	33 1f       	adc	r19, r19
    5652:	f6 94       	lsr	r15
    5654:	e7 94       	ror	r14
    5656:	d7 94       	ror	r13
    5658:	c7 94       	ror	r12
    565a:	c5 cf       	rjmp	.-118    	; 0x55e6 <__mulsf3+0xb4>
    565c:	8b 89       	ldd	r24, Y+19	; 0x13
    565e:	9c 89       	ldd	r25, Y+20	; 0x14
    5660:	2b 85       	ldd	r18, Y+11	; 0x0b
    5662:	3c 85       	ldd	r19, Y+12	; 0x0c
    5664:	82 0f       	add	r24, r18
    5666:	93 1f       	adc	r25, r19
    5668:	02 96       	adiw	r24, 0x02	; 2
    566a:	9c 8f       	std	Y+28, r25	; 0x1c
    566c:	8b 8f       	std	Y+27, r24	; 0x1b
    566e:	1a 8e       	std	Y+26, r1	; 0x1a
    5670:	9a 85       	ldd	r25, Y+10	; 0x0a
    5672:	8a 89       	ldd	r24, Y+18	; 0x12
    5674:	98 17       	cp	r25, r24
    5676:	11 f0       	breq	.+4      	; 0x567c <__mulsf3+0x14a>
    5678:	81 e0       	ldi	r24, 0x01	; 1
    567a:	8a 8f       	std	Y+26, r24	; 0x1a
    567c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    567e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5680:	17 c0       	rjmp	.+46     	; 0x56b0 <__mulsf3+0x17e>
    5682:	ca 01       	movw	r24, r20
    5684:	81 70       	andi	r24, 0x01	; 1
    5686:	90 70       	andi	r25, 0x00	; 0
    5688:	89 2b       	or	r24, r25
    568a:	61 f0       	breq	.+24     	; 0x56a4 <__mulsf3+0x172>
    568c:	b6 94       	lsr	r11
    568e:	a7 94       	ror	r10
    5690:	97 94       	ror	r9
    5692:	87 94       	ror	r8
    5694:	80 e0       	ldi	r24, 0x00	; 0
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	a0 e0       	ldi	r26, 0x00	; 0
    569a:	b0 e8       	ldi	r27, 0x80	; 128
    569c:	88 2a       	or	r8, r24
    569e:	99 2a       	or	r9, r25
    56a0:	aa 2a       	or	r10, r26
    56a2:	bb 2a       	or	r11, r27
    56a4:	76 95       	lsr	r23
    56a6:	67 95       	ror	r22
    56a8:	57 95       	ror	r21
    56aa:	47 95       	ror	r20
    56ac:	2f 5f       	subi	r18, 0xFF	; 255
    56ae:	3f 4f       	sbci	r19, 0xFF	; 255
    56b0:	77 fd       	sbrc	r23, 7
    56b2:	e7 cf       	rjmp	.-50     	; 0x5682 <__mulsf3+0x150>
    56b4:	c9 01       	movw	r24, r18
    56b6:	0b c0       	rjmp	.+22     	; 0x56ce <__mulsf3+0x19c>
    56b8:	44 0f       	add	r20, r20
    56ba:	55 1f       	adc	r21, r21
    56bc:	66 1f       	adc	r22, r22
    56be:	77 1f       	adc	r23, r23
    56c0:	b7 fc       	sbrc	r11, 7
    56c2:	41 60       	ori	r20, 0x01	; 1
    56c4:	88 0c       	add	r8, r8
    56c6:	99 1c       	adc	r9, r9
    56c8:	aa 1c       	adc	r10, r10
    56ca:	bb 1c       	adc	r11, r11
    56cc:	01 97       	sbiw	r24, 0x01	; 1
    56ce:	40 30       	cpi	r20, 0x00	; 0
    56d0:	a0 e0       	ldi	r26, 0x00	; 0
    56d2:	5a 07       	cpc	r21, r26
    56d4:	a0 e0       	ldi	r26, 0x00	; 0
    56d6:	6a 07       	cpc	r22, r26
    56d8:	a0 e4       	ldi	r26, 0x40	; 64
    56da:	7a 07       	cpc	r23, r26
    56dc:	68 f3       	brcs	.-38     	; 0x56b8 <__mulsf3+0x186>
    56de:	9c 8f       	std	Y+28, r25	; 0x1c
    56e0:	8b 8f       	std	Y+27, r24	; 0x1b
    56e2:	db 01       	movw	r26, r22
    56e4:	ca 01       	movw	r24, r20
    56e6:	8f 77       	andi	r24, 0x7F	; 127
    56e8:	90 70       	andi	r25, 0x00	; 0
    56ea:	a0 70       	andi	r26, 0x00	; 0
    56ec:	b0 70       	andi	r27, 0x00	; 0
    56ee:	80 34       	cpi	r24, 0x40	; 64
    56f0:	91 05       	cpc	r25, r1
    56f2:	a1 05       	cpc	r26, r1
    56f4:	b1 05       	cpc	r27, r1
    56f6:	61 f4       	brne	.+24     	; 0x5710 <__mulsf3+0x1de>
    56f8:	47 fd       	sbrc	r20, 7
    56fa:	0a c0       	rjmp	.+20     	; 0x5710 <__mulsf3+0x1de>
    56fc:	81 14       	cp	r8, r1
    56fe:	91 04       	cpc	r9, r1
    5700:	a1 04       	cpc	r10, r1
    5702:	b1 04       	cpc	r11, r1
    5704:	29 f0       	breq	.+10     	; 0x5710 <__mulsf3+0x1de>
    5706:	40 5c       	subi	r20, 0xC0	; 192
    5708:	5f 4f       	sbci	r21, 0xFF	; 255
    570a:	6f 4f       	sbci	r22, 0xFF	; 255
    570c:	7f 4f       	sbci	r23, 0xFF	; 255
    570e:	40 78       	andi	r20, 0x80	; 128
    5710:	4d 8f       	std	Y+29, r20	; 0x1d
    5712:	5e 8f       	std	Y+30, r21	; 0x1e
    5714:	6f 8f       	std	Y+31, r22	; 0x1f
    5716:	78 a3       	std	Y+32, r23	; 0x20
    5718:	83 e0       	ldi	r24, 0x03	; 3
    571a:	89 8f       	std	Y+25, r24	; 0x19
    571c:	be 01       	movw	r22, r28
    571e:	67 5e       	subi	r22, 0xE7	; 231
    5720:	7f 4f       	sbci	r23, 0xFF	; 255
    5722:	cb 01       	movw	r24, r22
    5724:	0e 94 96 2c 	call	0x592c	; 0x592c <__pack_f>
    5728:	e0 e1       	ldi	r30, 0x10	; 16
    572a:	a0 96       	adiw	r28, 0x20	; 32
    572c:	0c 94 4a 2e 	jmp	0x5c94	; 0x5c94 <__epilogue_restores__+0x4>

00005730 <__floatsisf>:
    5730:	a8 e0       	ldi	r26, 0x08	; 8
    5732:	b0 e0       	ldi	r27, 0x00	; 0
    5734:	ee e9       	ldi	r30, 0x9E	; 158
    5736:	fb e2       	ldi	r31, 0x2B	; 43
    5738:	0c 94 35 2e 	jmp	0x5c6a	; 0x5c6a <__prologue_saves__+0x12>
    573c:	9b 01       	movw	r18, r22
    573e:	ac 01       	movw	r20, r24
    5740:	83 e0       	ldi	r24, 0x03	; 3
    5742:	89 83       	std	Y+1, r24	; 0x01
    5744:	da 01       	movw	r26, r20
    5746:	c9 01       	movw	r24, r18
    5748:	88 27       	eor	r24, r24
    574a:	b7 fd       	sbrc	r27, 7
    574c:	83 95       	inc	r24
    574e:	99 27       	eor	r25, r25
    5750:	aa 27       	eor	r26, r26
    5752:	bb 27       	eor	r27, r27
    5754:	b8 2e       	mov	r11, r24
    5756:	21 15       	cp	r18, r1
    5758:	31 05       	cpc	r19, r1
    575a:	41 05       	cpc	r20, r1
    575c:	51 05       	cpc	r21, r1
    575e:	19 f4       	brne	.+6      	; 0x5766 <__floatsisf+0x36>
    5760:	82 e0       	ldi	r24, 0x02	; 2
    5762:	89 83       	std	Y+1, r24	; 0x01
    5764:	3a c0       	rjmp	.+116    	; 0x57da <__floatsisf+0xaa>
    5766:	88 23       	and	r24, r24
    5768:	a9 f0       	breq	.+42     	; 0x5794 <__floatsisf+0x64>
    576a:	20 30       	cpi	r18, 0x00	; 0
    576c:	80 e0       	ldi	r24, 0x00	; 0
    576e:	38 07       	cpc	r19, r24
    5770:	80 e0       	ldi	r24, 0x00	; 0
    5772:	48 07       	cpc	r20, r24
    5774:	80 e8       	ldi	r24, 0x80	; 128
    5776:	58 07       	cpc	r21, r24
    5778:	29 f4       	brne	.+10     	; 0x5784 <__floatsisf+0x54>
    577a:	60 e0       	ldi	r22, 0x00	; 0
    577c:	70 e0       	ldi	r23, 0x00	; 0
    577e:	80 e0       	ldi	r24, 0x00	; 0
    5780:	9f ec       	ldi	r25, 0xCF	; 207
    5782:	30 c0       	rjmp	.+96     	; 0x57e4 <__floatsisf+0xb4>
    5784:	ee 24       	eor	r14, r14
    5786:	ff 24       	eor	r15, r15
    5788:	87 01       	movw	r16, r14
    578a:	e2 1a       	sub	r14, r18
    578c:	f3 0a       	sbc	r15, r19
    578e:	04 0b       	sbc	r16, r20
    5790:	15 0b       	sbc	r17, r21
    5792:	02 c0       	rjmp	.+4      	; 0x5798 <__floatsisf+0x68>
    5794:	79 01       	movw	r14, r18
    5796:	8a 01       	movw	r16, r20
    5798:	8e e1       	ldi	r24, 0x1E	; 30
    579a:	c8 2e       	mov	r12, r24
    579c:	d1 2c       	mov	r13, r1
    579e:	dc 82       	std	Y+4, r13	; 0x04
    57a0:	cb 82       	std	Y+3, r12	; 0x03
    57a2:	ed 82       	std	Y+5, r14	; 0x05
    57a4:	fe 82       	std	Y+6, r15	; 0x06
    57a6:	0f 83       	std	Y+7, r16	; 0x07
    57a8:	18 87       	std	Y+8, r17	; 0x08
    57aa:	c8 01       	movw	r24, r16
    57ac:	b7 01       	movw	r22, r14
    57ae:	0e 94 49 2c 	call	0x5892	; 0x5892 <__clzsi2>
    57b2:	01 97       	sbiw	r24, 0x01	; 1
    57b4:	18 16       	cp	r1, r24
    57b6:	19 06       	cpc	r1, r25
    57b8:	84 f4       	brge	.+32     	; 0x57da <__floatsisf+0xaa>
    57ba:	08 2e       	mov	r0, r24
    57bc:	04 c0       	rjmp	.+8      	; 0x57c6 <__floatsisf+0x96>
    57be:	ee 0c       	add	r14, r14
    57c0:	ff 1c       	adc	r15, r15
    57c2:	00 1f       	adc	r16, r16
    57c4:	11 1f       	adc	r17, r17
    57c6:	0a 94       	dec	r0
    57c8:	d2 f7       	brpl	.-12     	; 0x57be <__floatsisf+0x8e>
    57ca:	ed 82       	std	Y+5, r14	; 0x05
    57cc:	fe 82       	std	Y+6, r15	; 0x06
    57ce:	0f 83       	std	Y+7, r16	; 0x07
    57d0:	18 87       	std	Y+8, r17	; 0x08
    57d2:	c8 1a       	sub	r12, r24
    57d4:	d9 0a       	sbc	r13, r25
    57d6:	dc 82       	std	Y+4, r13	; 0x04
    57d8:	cb 82       	std	Y+3, r12	; 0x03
    57da:	ba 82       	std	Y+2, r11	; 0x02
    57dc:	ce 01       	movw	r24, r28
    57de:	01 96       	adiw	r24, 0x01	; 1
    57e0:	0e 94 96 2c 	call	0x592c	; 0x592c <__pack_f>
    57e4:	e9 e0       	ldi	r30, 0x09	; 9
    57e6:	28 96       	adiw	r28, 0x08	; 8
    57e8:	0c 94 51 2e 	jmp	0x5ca2	; 0x5ca2 <__epilogue_restores__+0x12>

000057ec <__fixsfsi>:
    57ec:	ac e0       	ldi	r26, 0x0C	; 12
    57ee:	b0 e0       	ldi	r27, 0x00	; 0
    57f0:	ec ef       	ldi	r30, 0xFC	; 252
    57f2:	fb e2       	ldi	r31, 0x2B	; 43
    57f4:	0c 94 3c 2e 	jmp	0x5c78	; 0x5c78 <__prologue_saves__+0x20>
    57f8:	69 83       	std	Y+1, r22	; 0x01
    57fa:	7a 83       	std	Y+2, r23	; 0x02
    57fc:	8b 83       	std	Y+3, r24	; 0x03
    57fe:	9c 83       	std	Y+4, r25	; 0x04
    5800:	be 01       	movw	r22, r28
    5802:	6b 5f       	subi	r22, 0xFB	; 251
    5804:	7f 4f       	sbci	r23, 0xFF	; 255
    5806:	ce 01       	movw	r24, r28
    5808:	01 96       	adiw	r24, 0x01	; 1
    580a:	0e 94 76 2d 	call	0x5aec	; 0x5aec <__unpack_f>
    580e:	8d 81       	ldd	r24, Y+5	; 0x05
    5810:	82 30       	cpi	r24, 0x02	; 2
    5812:	a9 f1       	breq	.+106    	; 0x587e <__fixsfsi+0x92>
    5814:	82 30       	cpi	r24, 0x02	; 2
    5816:	98 f1       	brcs	.+102    	; 0x587e <__fixsfsi+0x92>
    5818:	84 30       	cpi	r24, 0x04	; 4
    581a:	21 f4       	brne	.+8      	; 0x5824 <__fixsfsi+0x38>
    581c:	8e 81       	ldd	r24, Y+6	; 0x06
    581e:	88 23       	and	r24, r24
    5820:	59 f4       	brne	.+22     	; 0x5838 <__fixsfsi+0x4c>
    5822:	0f c0       	rjmp	.+30     	; 0x5842 <__fixsfsi+0x56>
    5824:	2f 81       	ldd	r18, Y+7	; 0x07
    5826:	38 85       	ldd	r19, Y+8	; 0x08
    5828:	37 fd       	sbrc	r19, 7
    582a:	29 c0       	rjmp	.+82     	; 0x587e <__fixsfsi+0x92>
    582c:	6e 81       	ldd	r22, Y+6	; 0x06
    582e:	2f 31       	cpi	r18, 0x1F	; 31
    5830:	31 05       	cpc	r19, r1
    5832:	64 f0       	brlt	.+24     	; 0x584c <__fixsfsi+0x60>
    5834:	66 23       	and	r22, r22
    5836:	29 f0       	breq	.+10     	; 0x5842 <__fixsfsi+0x56>
    5838:	20 e0       	ldi	r18, 0x00	; 0
    583a:	30 e0       	ldi	r19, 0x00	; 0
    583c:	40 e0       	ldi	r20, 0x00	; 0
    583e:	50 e8       	ldi	r21, 0x80	; 128
    5840:	22 c0       	rjmp	.+68     	; 0x5886 <__fixsfsi+0x9a>
    5842:	2f ef       	ldi	r18, 0xFF	; 255
    5844:	3f ef       	ldi	r19, 0xFF	; 255
    5846:	4f ef       	ldi	r20, 0xFF	; 255
    5848:	5f e7       	ldi	r21, 0x7F	; 127
    584a:	1d c0       	rjmp	.+58     	; 0x5886 <__fixsfsi+0x9a>
    584c:	8e e1       	ldi	r24, 0x1E	; 30
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	82 1b       	sub	r24, r18
    5852:	93 0b       	sbc	r25, r19
    5854:	29 85       	ldd	r18, Y+9	; 0x09
    5856:	3a 85       	ldd	r19, Y+10	; 0x0a
    5858:	4b 85       	ldd	r20, Y+11	; 0x0b
    585a:	5c 85       	ldd	r21, Y+12	; 0x0c
    585c:	04 c0       	rjmp	.+8      	; 0x5866 <__fixsfsi+0x7a>
    585e:	56 95       	lsr	r21
    5860:	47 95       	ror	r20
    5862:	37 95       	ror	r19
    5864:	27 95       	ror	r18
    5866:	8a 95       	dec	r24
    5868:	d2 f7       	brpl	.-12     	; 0x585e <__fixsfsi+0x72>
    586a:	66 23       	and	r22, r22
    586c:	61 f0       	breq	.+24     	; 0x5886 <__fixsfsi+0x9a>
    586e:	50 95       	com	r21
    5870:	40 95       	com	r20
    5872:	30 95       	com	r19
    5874:	21 95       	neg	r18
    5876:	3f 4f       	sbci	r19, 0xFF	; 255
    5878:	4f 4f       	sbci	r20, 0xFF	; 255
    587a:	5f 4f       	sbci	r21, 0xFF	; 255
    587c:	04 c0       	rjmp	.+8      	; 0x5886 <__fixsfsi+0x9a>
    587e:	20 e0       	ldi	r18, 0x00	; 0
    5880:	30 e0       	ldi	r19, 0x00	; 0
    5882:	40 e0       	ldi	r20, 0x00	; 0
    5884:	50 e0       	ldi	r21, 0x00	; 0
    5886:	ca 01       	movw	r24, r20
    5888:	b9 01       	movw	r22, r18
    588a:	e2 e0       	ldi	r30, 0x02	; 2
    588c:	2c 96       	adiw	r28, 0x0c	; 12
    588e:	0c 94 58 2e 	jmp	0x5cb0	; 0x5cb0 <__epilogue_restores__+0x20>

00005892 <__clzsi2>:
    5892:	ef 92       	push	r14
    5894:	ff 92       	push	r15
    5896:	0f 93       	push	r16
    5898:	1f 93       	push	r17
    589a:	9b 01       	movw	r18, r22
    589c:	ac 01       	movw	r20, r24
    589e:	20 30       	cpi	r18, 0x00	; 0
    58a0:	80 e0       	ldi	r24, 0x00	; 0
    58a2:	38 07       	cpc	r19, r24
    58a4:	81 e0       	ldi	r24, 0x01	; 1
    58a6:	48 07       	cpc	r20, r24
    58a8:	80 e0       	ldi	r24, 0x00	; 0
    58aa:	58 07       	cpc	r21, r24
    58ac:	80 f4       	brcc	.+32     	; 0x58ce <__clzsi2+0x3c>
    58ae:	2f 3f       	cpi	r18, 0xFF	; 255
    58b0:	31 05       	cpc	r19, r1
    58b2:	41 05       	cpc	r20, r1
    58b4:	51 05       	cpc	r21, r1
    58b6:	09 f0       	breq	.+2      	; 0x58ba <__clzsi2+0x28>
    58b8:	20 f4       	brcc	.+8      	; 0x58c2 <__clzsi2+0x30>
    58ba:	ee 24       	eor	r14, r14
    58bc:	ff 24       	eor	r15, r15
    58be:	87 01       	movw	r16, r14
    58c0:	19 c0       	rjmp	.+50     	; 0x58f4 <__clzsi2+0x62>
    58c2:	68 e0       	ldi	r22, 0x08	; 8
    58c4:	e6 2e       	mov	r14, r22
    58c6:	f1 2c       	mov	r15, r1
    58c8:	01 2d       	mov	r16, r1
    58ca:	11 2d       	mov	r17, r1
    58cc:	13 c0       	rjmp	.+38     	; 0x58f4 <__clzsi2+0x62>
    58ce:	20 30       	cpi	r18, 0x00	; 0
    58d0:	80 e0       	ldi	r24, 0x00	; 0
    58d2:	38 07       	cpc	r19, r24
    58d4:	80 e0       	ldi	r24, 0x00	; 0
    58d6:	48 07       	cpc	r20, r24
    58d8:	81 e0       	ldi	r24, 0x01	; 1
    58da:	58 07       	cpc	r21, r24
    58dc:	30 f4       	brcc	.+12     	; 0x58ea <__clzsi2+0x58>
    58de:	90 e1       	ldi	r25, 0x10	; 16
    58e0:	e9 2e       	mov	r14, r25
    58e2:	f1 2c       	mov	r15, r1
    58e4:	01 2d       	mov	r16, r1
    58e6:	11 2d       	mov	r17, r1
    58e8:	05 c0       	rjmp	.+10     	; 0x58f4 <__clzsi2+0x62>
    58ea:	88 e1       	ldi	r24, 0x18	; 24
    58ec:	e8 2e       	mov	r14, r24
    58ee:	f1 2c       	mov	r15, r1
    58f0:	01 2d       	mov	r16, r1
    58f2:	11 2d       	mov	r17, r1
    58f4:	80 e2       	ldi	r24, 0x20	; 32
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	a0 e0       	ldi	r26, 0x00	; 0
    58fa:	b0 e0       	ldi	r27, 0x00	; 0
    58fc:	8e 19       	sub	r24, r14
    58fe:	9f 09       	sbc	r25, r15
    5900:	a0 0b       	sbc	r26, r16
    5902:	b1 0b       	sbc	r27, r17
    5904:	04 c0       	rjmp	.+8      	; 0x590e <__clzsi2+0x7c>
    5906:	56 95       	lsr	r21
    5908:	47 95       	ror	r20
    590a:	37 95       	ror	r19
    590c:	27 95       	ror	r18
    590e:	ea 94       	dec	r14
    5910:	d2 f7       	brpl	.-12     	; 0x5906 <__clzsi2+0x74>
    5912:	f9 01       	movw	r30, r18
    5914:	e0 5e       	subi	r30, 0xE0	; 224
    5916:	fd 4f       	sbci	r31, 0xFD	; 253
    5918:	20 81       	ld	r18, Z
    591a:	82 1b       	sub	r24, r18
    591c:	91 09       	sbc	r25, r1
    591e:	a1 09       	sbc	r26, r1
    5920:	b1 09       	sbc	r27, r1
    5922:	1f 91       	pop	r17
    5924:	0f 91       	pop	r16
    5926:	ff 90       	pop	r15
    5928:	ef 90       	pop	r14
    592a:	08 95       	ret

0000592c <__pack_f>:
    592c:	9f 92       	push	r9
    592e:	af 92       	push	r10
    5930:	bf 92       	push	r11
    5932:	cf 92       	push	r12
    5934:	df 92       	push	r13
    5936:	ef 92       	push	r14
    5938:	ff 92       	push	r15
    593a:	0f 93       	push	r16
    593c:	1f 93       	push	r17
    593e:	ee 24       	eor	r14, r14
    5940:	ff 24       	eor	r15, r15
    5942:	87 01       	movw	r16, r14
    5944:	fc 01       	movw	r30, r24
    5946:	24 81       	ldd	r18, Z+4	; 0x04
    5948:	35 81       	ldd	r19, Z+5	; 0x05
    594a:	46 81       	ldd	r20, Z+6	; 0x06
    594c:	57 81       	ldd	r21, Z+7	; 0x07
    594e:	91 80       	ldd	r9, Z+1	; 0x01
    5950:	80 81       	ld	r24, Z
    5952:	82 30       	cpi	r24, 0x02	; 2
    5954:	10 f4       	brcc	.+4      	; 0x595a <__pack_f+0x2e>
    5956:	40 61       	ori	r20, 0x10	; 16
    5958:	a2 c0       	rjmp	.+324    	; 0x5a9e <__pack_f+0x172>
    595a:	84 30       	cpi	r24, 0x04	; 4
    595c:	09 f4       	brne	.+2      	; 0x5960 <__pack_f+0x34>
    595e:	9b c0       	rjmp	.+310    	; 0x5a96 <__pack_f+0x16a>
    5960:	82 30       	cpi	r24, 0x02	; 2
    5962:	29 f4       	brne	.+10     	; 0x596e <__pack_f+0x42>
    5964:	20 e0       	ldi	r18, 0x00	; 0
    5966:	30 e0       	ldi	r19, 0x00	; 0
    5968:	40 e0       	ldi	r20, 0x00	; 0
    596a:	50 e0       	ldi	r21, 0x00	; 0
    596c:	05 c0       	rjmp	.+10     	; 0x5978 <__pack_f+0x4c>
    596e:	21 15       	cp	r18, r1
    5970:	31 05       	cpc	r19, r1
    5972:	41 05       	cpc	r20, r1
    5974:	51 05       	cpc	r21, r1
    5976:	19 f4       	brne	.+6      	; 0x597e <__pack_f+0x52>
    5978:	e0 e0       	ldi	r30, 0x00	; 0
    597a:	f0 e0       	ldi	r31, 0x00	; 0
    597c:	92 c0       	rjmp	.+292    	; 0x5aa2 <__pack_f+0x176>
    597e:	82 81       	ldd	r24, Z+2	; 0x02
    5980:	93 81       	ldd	r25, Z+3	; 0x03
    5982:	6f ef       	ldi	r22, 0xFF	; 255
    5984:	82 38       	cpi	r24, 0x82	; 130
    5986:	96 07       	cpc	r25, r22
    5988:	0c f0       	brlt	.+2      	; 0x598c <__pack_f+0x60>
    598a:	5a c0       	rjmp	.+180    	; 0x5a40 <__pack_f+0x114>
    598c:	62 e8       	ldi	r22, 0x82	; 130
    598e:	7f ef       	ldi	r23, 0xFF	; 255
    5990:	68 1b       	sub	r22, r24
    5992:	79 0b       	sbc	r23, r25
    5994:	6a 31       	cpi	r22, 0x1A	; 26
    5996:	71 05       	cpc	r23, r1
    5998:	2c f0       	brlt	.+10     	; 0x59a4 <__pack_f+0x78>
    599a:	20 e0       	ldi	r18, 0x00	; 0
    599c:	30 e0       	ldi	r19, 0x00	; 0
    599e:	40 e0       	ldi	r20, 0x00	; 0
    59a0:	50 e0       	ldi	r21, 0x00	; 0
    59a2:	2a c0       	rjmp	.+84     	; 0x59f8 <__pack_f+0xcc>
    59a4:	aa 24       	eor	r10, r10
    59a6:	bb 24       	eor	r11, r11
    59a8:	65 01       	movw	r12, r10
    59aa:	81 e0       	ldi	r24, 0x01	; 1
    59ac:	90 e0       	ldi	r25, 0x00	; 0
    59ae:	a0 e0       	ldi	r26, 0x00	; 0
    59b0:	b0 e0       	ldi	r27, 0x00	; 0
    59b2:	06 2e       	mov	r0, r22
    59b4:	04 c0       	rjmp	.+8      	; 0x59be <__pack_f+0x92>
    59b6:	88 0f       	add	r24, r24
    59b8:	99 1f       	adc	r25, r25
    59ba:	aa 1f       	adc	r26, r26
    59bc:	bb 1f       	adc	r27, r27
    59be:	0a 94       	dec	r0
    59c0:	d2 f7       	brpl	.-12     	; 0x59b6 <__pack_f+0x8a>
    59c2:	01 97       	sbiw	r24, 0x01	; 1
    59c4:	a1 09       	sbc	r26, r1
    59c6:	b1 09       	sbc	r27, r1
    59c8:	82 23       	and	r24, r18
    59ca:	93 23       	and	r25, r19
    59cc:	a4 23       	and	r26, r20
    59ce:	b5 23       	and	r27, r21
    59d0:	00 97       	sbiw	r24, 0x00	; 0
    59d2:	a1 05       	cpc	r26, r1
    59d4:	b1 05       	cpc	r27, r1
    59d6:	29 f0       	breq	.+10     	; 0x59e2 <__pack_f+0xb6>
    59d8:	71 e0       	ldi	r23, 0x01	; 1
    59da:	a7 2e       	mov	r10, r23
    59dc:	b1 2c       	mov	r11, r1
    59de:	c1 2c       	mov	r12, r1
    59e0:	d1 2c       	mov	r13, r1
    59e2:	04 c0       	rjmp	.+8      	; 0x59ec <__pack_f+0xc0>
    59e4:	56 95       	lsr	r21
    59e6:	47 95       	ror	r20
    59e8:	37 95       	ror	r19
    59ea:	27 95       	ror	r18
    59ec:	6a 95       	dec	r22
    59ee:	d2 f7       	brpl	.-12     	; 0x59e4 <__pack_f+0xb8>
    59f0:	2a 29       	or	r18, r10
    59f2:	3b 29       	or	r19, r11
    59f4:	4c 29       	or	r20, r12
    59f6:	5d 29       	or	r21, r13
    59f8:	da 01       	movw	r26, r20
    59fa:	c9 01       	movw	r24, r18
    59fc:	8f 77       	andi	r24, 0x7F	; 127
    59fe:	90 70       	andi	r25, 0x00	; 0
    5a00:	a0 70       	andi	r26, 0x00	; 0
    5a02:	b0 70       	andi	r27, 0x00	; 0
    5a04:	80 34       	cpi	r24, 0x40	; 64
    5a06:	91 05       	cpc	r25, r1
    5a08:	a1 05       	cpc	r26, r1
    5a0a:	b1 05       	cpc	r27, r1
    5a0c:	39 f4       	brne	.+14     	; 0x5a1c <__pack_f+0xf0>
    5a0e:	27 ff       	sbrs	r18, 7
    5a10:	09 c0       	rjmp	.+18     	; 0x5a24 <__pack_f+0xf8>
    5a12:	20 5c       	subi	r18, 0xC0	; 192
    5a14:	3f 4f       	sbci	r19, 0xFF	; 255
    5a16:	4f 4f       	sbci	r20, 0xFF	; 255
    5a18:	5f 4f       	sbci	r21, 0xFF	; 255
    5a1a:	04 c0       	rjmp	.+8      	; 0x5a24 <__pack_f+0xf8>
    5a1c:	21 5c       	subi	r18, 0xC1	; 193
    5a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    5a20:	4f 4f       	sbci	r20, 0xFF	; 255
    5a22:	5f 4f       	sbci	r21, 0xFF	; 255
    5a24:	80 e0       	ldi	r24, 0x00	; 0
    5a26:	90 e0       	ldi	r25, 0x00	; 0
    5a28:	20 30       	cpi	r18, 0x00	; 0
    5a2a:	60 e0       	ldi	r22, 0x00	; 0
    5a2c:	36 07       	cpc	r19, r22
    5a2e:	60 e0       	ldi	r22, 0x00	; 0
    5a30:	46 07       	cpc	r20, r22
    5a32:	60 e4       	ldi	r22, 0x40	; 64
    5a34:	56 07       	cpc	r21, r22
    5a36:	10 f0       	brcs	.+4      	; 0x5a3c <__pack_f+0x110>
    5a38:	81 e0       	ldi	r24, 0x01	; 1
    5a3a:	90 e0       	ldi	r25, 0x00	; 0
    5a3c:	fc 01       	movw	r30, r24
    5a3e:	23 c0       	rjmp	.+70     	; 0x5a86 <__pack_f+0x15a>
    5a40:	80 38       	cpi	r24, 0x80	; 128
    5a42:	91 05       	cpc	r25, r1
    5a44:	44 f5       	brge	.+80     	; 0x5a96 <__pack_f+0x16a>
    5a46:	fc 01       	movw	r30, r24
    5a48:	e1 58       	subi	r30, 0x81	; 129
    5a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a4c:	da 01       	movw	r26, r20
    5a4e:	c9 01       	movw	r24, r18
    5a50:	8f 77       	andi	r24, 0x7F	; 127
    5a52:	90 70       	andi	r25, 0x00	; 0
    5a54:	a0 70       	andi	r26, 0x00	; 0
    5a56:	b0 70       	andi	r27, 0x00	; 0
    5a58:	80 34       	cpi	r24, 0x40	; 64
    5a5a:	91 05       	cpc	r25, r1
    5a5c:	a1 05       	cpc	r26, r1
    5a5e:	b1 05       	cpc	r27, r1
    5a60:	39 f4       	brne	.+14     	; 0x5a70 <__pack_f+0x144>
    5a62:	27 ff       	sbrs	r18, 7
    5a64:	09 c0       	rjmp	.+18     	; 0x5a78 <__pack_f+0x14c>
    5a66:	20 5c       	subi	r18, 0xC0	; 192
    5a68:	3f 4f       	sbci	r19, 0xFF	; 255
    5a6a:	4f 4f       	sbci	r20, 0xFF	; 255
    5a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    5a6e:	04 c0       	rjmp	.+8      	; 0x5a78 <__pack_f+0x14c>
    5a70:	21 5c       	subi	r18, 0xC1	; 193
    5a72:	3f 4f       	sbci	r19, 0xFF	; 255
    5a74:	4f 4f       	sbci	r20, 0xFF	; 255
    5a76:	5f 4f       	sbci	r21, 0xFF	; 255
    5a78:	57 ff       	sbrs	r21, 7
    5a7a:	05 c0       	rjmp	.+10     	; 0x5a86 <__pack_f+0x15a>
    5a7c:	56 95       	lsr	r21
    5a7e:	47 95       	ror	r20
    5a80:	37 95       	ror	r19
    5a82:	27 95       	ror	r18
    5a84:	31 96       	adiw	r30, 0x01	; 1
    5a86:	87 e0       	ldi	r24, 0x07	; 7
    5a88:	56 95       	lsr	r21
    5a8a:	47 95       	ror	r20
    5a8c:	37 95       	ror	r19
    5a8e:	27 95       	ror	r18
    5a90:	8a 95       	dec	r24
    5a92:	d1 f7       	brne	.-12     	; 0x5a88 <__pack_f+0x15c>
    5a94:	06 c0       	rjmp	.+12     	; 0x5aa2 <__pack_f+0x176>
    5a96:	20 e0       	ldi	r18, 0x00	; 0
    5a98:	30 e0       	ldi	r19, 0x00	; 0
    5a9a:	40 e0       	ldi	r20, 0x00	; 0
    5a9c:	50 e0       	ldi	r21, 0x00	; 0
    5a9e:	ef ef       	ldi	r30, 0xFF	; 255
    5aa0:	f0 e0       	ldi	r31, 0x00	; 0
    5aa2:	e2 2e       	mov	r14, r18
    5aa4:	f3 2e       	mov	r15, r19
    5aa6:	94 2f       	mov	r25, r20
    5aa8:	9f 77       	andi	r25, 0x7F	; 127
    5aaa:	80 2f       	mov	r24, r16
    5aac:	80 78       	andi	r24, 0x80	; 128
    5aae:	89 2b       	or	r24, r25
    5ab0:	9e 2f       	mov	r25, r30
    5ab2:	97 95       	ror	r25
    5ab4:	99 27       	eor	r25, r25
    5ab6:	97 95       	ror	r25
    5ab8:	8f 77       	andi	r24, 0x7F	; 127
    5aba:	08 2f       	mov	r16, r24
    5abc:	09 2b       	or	r16, r25
    5abe:	9e 2f       	mov	r25, r30
    5ac0:	96 95       	lsr	r25
    5ac2:	81 2f       	mov	r24, r17
    5ac4:	80 78       	andi	r24, 0x80	; 128
    5ac6:	89 2b       	or	r24, r25
    5ac8:	97 94       	ror	r9
    5aca:	99 24       	eor	r9, r9
    5acc:	97 94       	ror	r9
    5ace:	8f 77       	andi	r24, 0x7F	; 127
    5ad0:	18 2f       	mov	r17, r24
    5ad2:	19 29       	or	r17, r9
    5ad4:	c8 01       	movw	r24, r16
    5ad6:	b7 01       	movw	r22, r14
    5ad8:	1f 91       	pop	r17
    5ada:	0f 91       	pop	r16
    5adc:	ff 90       	pop	r15
    5ade:	ef 90       	pop	r14
    5ae0:	df 90       	pop	r13
    5ae2:	cf 90       	pop	r12
    5ae4:	bf 90       	pop	r11
    5ae6:	af 90       	pop	r10
    5ae8:	9f 90       	pop	r9
    5aea:	08 95       	ret

00005aec <__unpack_f>:
    5aec:	cf 93       	push	r28
    5aee:	df 93       	push	r29
    5af0:	fc 01       	movw	r30, r24
    5af2:	db 01       	movw	r26, r22
    5af4:	20 81       	ld	r18, Z
    5af6:	31 81       	ldd	r19, Z+1	; 0x01
    5af8:	92 81       	ldd	r25, Z+2	; 0x02
    5afa:	49 2f       	mov	r20, r25
    5afc:	4f 77       	andi	r20, 0x7F	; 127
    5afe:	50 e0       	ldi	r21, 0x00	; 0
    5b00:	99 1f       	adc	r25, r25
    5b02:	99 27       	eor	r25, r25
    5b04:	99 1f       	adc	r25, r25
    5b06:	83 81       	ldd	r24, Z+3	; 0x03
    5b08:	e8 2f       	mov	r30, r24
    5b0a:	ee 0f       	add	r30, r30
    5b0c:	e9 2b       	or	r30, r25
    5b0e:	6e 2f       	mov	r22, r30
    5b10:	70 e0       	ldi	r23, 0x00	; 0
    5b12:	88 1f       	adc	r24, r24
    5b14:	88 27       	eor	r24, r24
    5b16:	88 1f       	adc	r24, r24
    5b18:	ed 01       	movw	r28, r26
    5b1a:	89 83       	std	Y+1, r24	; 0x01
    5b1c:	ee 23       	and	r30, r30
    5b1e:	71 f5       	brne	.+92     	; 0x5b7c <__unpack_f+0x90>
    5b20:	21 15       	cp	r18, r1
    5b22:	31 05       	cpc	r19, r1
    5b24:	41 05       	cpc	r20, r1
    5b26:	51 05       	cpc	r21, r1
    5b28:	11 f4       	brne	.+4      	; 0x5b2e <__unpack_f+0x42>
    5b2a:	82 e0       	ldi	r24, 0x02	; 2
    5b2c:	2f c0       	rjmp	.+94     	; 0x5b8c <__unpack_f+0xa0>
    5b2e:	6e 57       	subi	r22, 0x7E	; 126
    5b30:	70 40       	sbci	r23, 0x00	; 0
    5b32:	fd 01       	movw	r30, r26
    5b34:	73 83       	std	Z+3, r23	; 0x03
    5b36:	62 83       	std	Z+2, r22	; 0x02
    5b38:	67 e0       	ldi	r22, 0x07	; 7
    5b3a:	22 0f       	add	r18, r18
    5b3c:	33 1f       	adc	r19, r19
    5b3e:	44 1f       	adc	r20, r20
    5b40:	55 1f       	adc	r21, r21
    5b42:	6a 95       	dec	r22
    5b44:	d1 f7       	brne	.-12     	; 0x5b3a <__unpack_f+0x4e>
    5b46:	83 e0       	ldi	r24, 0x03	; 3
    5b48:	8c 93       	st	X, r24
    5b4a:	0a c0       	rjmp	.+20     	; 0x5b60 <__unpack_f+0x74>
    5b4c:	22 0f       	add	r18, r18
    5b4e:	33 1f       	adc	r19, r19
    5b50:	44 1f       	adc	r20, r20
    5b52:	55 1f       	adc	r21, r21
    5b54:	ed 01       	movw	r28, r26
    5b56:	8a 81       	ldd	r24, Y+2	; 0x02
    5b58:	9b 81       	ldd	r25, Y+3	; 0x03
    5b5a:	01 97       	sbiw	r24, 0x01	; 1
    5b5c:	9b 83       	std	Y+3, r25	; 0x03
    5b5e:	8a 83       	std	Y+2, r24	; 0x02
    5b60:	20 30       	cpi	r18, 0x00	; 0
    5b62:	e0 e0       	ldi	r30, 0x00	; 0
    5b64:	3e 07       	cpc	r19, r30
    5b66:	e0 e0       	ldi	r30, 0x00	; 0
    5b68:	4e 07       	cpc	r20, r30
    5b6a:	e0 e4       	ldi	r30, 0x40	; 64
    5b6c:	5e 07       	cpc	r21, r30
    5b6e:	70 f3       	brcs	.-36     	; 0x5b4c <__unpack_f+0x60>
    5b70:	ed 01       	movw	r28, r26
    5b72:	2c 83       	std	Y+4, r18	; 0x04
    5b74:	3d 83       	std	Y+5, r19	; 0x05
    5b76:	4e 83       	std	Y+6, r20	; 0x06
    5b78:	5f 83       	std	Y+7, r21	; 0x07
    5b7a:	25 c0       	rjmp	.+74     	; 0x5bc6 <__unpack_f+0xda>
    5b7c:	ef 3f       	cpi	r30, 0xFF	; 255
    5b7e:	79 f4       	brne	.+30     	; 0x5b9e <__unpack_f+0xb2>
    5b80:	21 15       	cp	r18, r1
    5b82:	31 05       	cpc	r19, r1
    5b84:	41 05       	cpc	r20, r1
    5b86:	51 05       	cpc	r21, r1
    5b88:	19 f4       	brne	.+6      	; 0x5b90 <__unpack_f+0xa4>
    5b8a:	84 e0       	ldi	r24, 0x04	; 4
    5b8c:	8c 93       	st	X, r24
    5b8e:	1b c0       	rjmp	.+54     	; 0x5bc6 <__unpack_f+0xda>
    5b90:	44 ff       	sbrs	r20, 4
    5b92:	03 c0       	rjmp	.+6      	; 0x5b9a <__unpack_f+0xae>
    5b94:	81 e0       	ldi	r24, 0x01	; 1
    5b96:	8c 93       	st	X, r24
    5b98:	11 c0       	rjmp	.+34     	; 0x5bbc <__unpack_f+0xd0>
    5b9a:	1c 92       	st	X, r1
    5b9c:	0f c0       	rjmp	.+30     	; 0x5bbc <__unpack_f+0xd0>
    5b9e:	6f 57       	subi	r22, 0x7F	; 127
    5ba0:	70 40       	sbci	r23, 0x00	; 0
    5ba2:	ed 01       	movw	r28, r26
    5ba4:	7b 83       	std	Y+3, r23	; 0x03
    5ba6:	6a 83       	std	Y+2, r22	; 0x02
    5ba8:	83 e0       	ldi	r24, 0x03	; 3
    5baa:	8c 93       	st	X, r24
    5bac:	87 e0       	ldi	r24, 0x07	; 7
    5bae:	22 0f       	add	r18, r18
    5bb0:	33 1f       	adc	r19, r19
    5bb2:	44 1f       	adc	r20, r20
    5bb4:	55 1f       	adc	r21, r21
    5bb6:	8a 95       	dec	r24
    5bb8:	d1 f7       	brne	.-12     	; 0x5bae <__unpack_f+0xc2>
    5bba:	50 64       	ori	r21, 0x40	; 64
    5bbc:	fd 01       	movw	r30, r26
    5bbe:	24 83       	std	Z+4, r18	; 0x04
    5bc0:	35 83       	std	Z+5, r19	; 0x05
    5bc2:	46 83       	std	Z+6, r20	; 0x06
    5bc4:	57 83       	std	Z+7, r21	; 0x07
    5bc6:	df 91       	pop	r29
    5bc8:	cf 91       	pop	r28
    5bca:	08 95       	ret

00005bcc <__mulsi3>:
    5bcc:	62 9f       	mul	r22, r18
    5bce:	d0 01       	movw	r26, r0
    5bd0:	73 9f       	mul	r23, r19
    5bd2:	f0 01       	movw	r30, r0
    5bd4:	82 9f       	mul	r24, r18
    5bd6:	e0 0d       	add	r30, r0
    5bd8:	f1 1d       	adc	r31, r1
    5bda:	64 9f       	mul	r22, r20
    5bdc:	e0 0d       	add	r30, r0
    5bde:	f1 1d       	adc	r31, r1
    5be0:	92 9f       	mul	r25, r18
    5be2:	f0 0d       	add	r31, r0
    5be4:	83 9f       	mul	r24, r19
    5be6:	f0 0d       	add	r31, r0
    5be8:	74 9f       	mul	r23, r20
    5bea:	f0 0d       	add	r31, r0
    5bec:	65 9f       	mul	r22, r21
    5bee:	f0 0d       	add	r31, r0
    5bf0:	99 27       	eor	r25, r25
    5bf2:	72 9f       	mul	r23, r18
    5bf4:	b0 0d       	add	r27, r0
    5bf6:	e1 1d       	adc	r30, r1
    5bf8:	f9 1f       	adc	r31, r25
    5bfa:	63 9f       	mul	r22, r19
    5bfc:	b0 0d       	add	r27, r0
    5bfe:	e1 1d       	adc	r30, r1
    5c00:	f9 1f       	adc	r31, r25
    5c02:	bd 01       	movw	r22, r26
    5c04:	cf 01       	movw	r24, r30
    5c06:	11 24       	eor	r1, r1
    5c08:	08 95       	ret

00005c0a <__udivmodhi4>:
    5c0a:	aa 1b       	sub	r26, r26
    5c0c:	bb 1b       	sub	r27, r27
    5c0e:	51 e1       	ldi	r21, 0x11	; 17
    5c10:	07 c0       	rjmp	.+14     	; 0x5c20 <__udivmodhi4_ep>

00005c12 <__udivmodhi4_loop>:
    5c12:	aa 1f       	adc	r26, r26
    5c14:	bb 1f       	adc	r27, r27
    5c16:	a6 17       	cp	r26, r22
    5c18:	b7 07       	cpc	r27, r23
    5c1a:	10 f0       	brcs	.+4      	; 0x5c20 <__udivmodhi4_ep>
    5c1c:	a6 1b       	sub	r26, r22
    5c1e:	b7 0b       	sbc	r27, r23

00005c20 <__udivmodhi4_ep>:
    5c20:	88 1f       	adc	r24, r24
    5c22:	99 1f       	adc	r25, r25
    5c24:	5a 95       	dec	r21
    5c26:	a9 f7       	brne	.-22     	; 0x5c12 <__udivmodhi4_loop>
    5c28:	80 95       	com	r24
    5c2a:	90 95       	com	r25
    5c2c:	bc 01       	movw	r22, r24
    5c2e:	cd 01       	movw	r24, r26
    5c30:	08 95       	ret

00005c32 <__divmodhi4>:
    5c32:	97 fb       	bst	r25, 7
    5c34:	09 2e       	mov	r0, r25
    5c36:	07 26       	eor	r0, r23
    5c38:	0a d0       	rcall	.+20     	; 0x5c4e <__divmodhi4_neg1>
    5c3a:	77 fd       	sbrc	r23, 7
    5c3c:	04 d0       	rcall	.+8      	; 0x5c46 <__divmodhi4_neg2>
    5c3e:	e5 df       	rcall	.-54     	; 0x5c0a <__udivmodhi4>
    5c40:	06 d0       	rcall	.+12     	; 0x5c4e <__divmodhi4_neg1>
    5c42:	00 20       	and	r0, r0
    5c44:	1a f4       	brpl	.+6      	; 0x5c4c <__divmodhi4_exit>

00005c46 <__divmodhi4_neg2>:
    5c46:	70 95       	com	r23
    5c48:	61 95       	neg	r22
    5c4a:	7f 4f       	sbci	r23, 0xFF	; 255

00005c4c <__divmodhi4_exit>:
    5c4c:	08 95       	ret

00005c4e <__divmodhi4_neg1>:
    5c4e:	f6 f7       	brtc	.-4      	; 0x5c4c <__divmodhi4_exit>
    5c50:	90 95       	com	r25
    5c52:	81 95       	neg	r24
    5c54:	9f 4f       	sbci	r25, 0xFF	; 255
    5c56:	08 95       	ret

00005c58 <__prologue_saves__>:
    5c58:	2f 92       	push	r2
    5c5a:	3f 92       	push	r3
    5c5c:	4f 92       	push	r4
    5c5e:	5f 92       	push	r5
    5c60:	6f 92       	push	r6
    5c62:	7f 92       	push	r7
    5c64:	8f 92       	push	r8
    5c66:	9f 92       	push	r9
    5c68:	af 92       	push	r10
    5c6a:	bf 92       	push	r11
    5c6c:	cf 92       	push	r12
    5c6e:	df 92       	push	r13
    5c70:	ef 92       	push	r14
    5c72:	ff 92       	push	r15
    5c74:	0f 93       	push	r16
    5c76:	1f 93       	push	r17
    5c78:	cf 93       	push	r28
    5c7a:	df 93       	push	r29
    5c7c:	cd b7       	in	r28, 0x3d	; 61
    5c7e:	de b7       	in	r29, 0x3e	; 62
    5c80:	ca 1b       	sub	r28, r26
    5c82:	db 0b       	sbc	r29, r27
    5c84:	0f b6       	in	r0, 0x3f	; 63
    5c86:	f8 94       	cli
    5c88:	de bf       	out	0x3e, r29	; 62
    5c8a:	0f be       	out	0x3f, r0	; 63
    5c8c:	cd bf       	out	0x3d, r28	; 61
    5c8e:	19 94       	eijmp

00005c90 <__epilogue_restores__>:
    5c90:	2a 88       	ldd	r2, Y+18	; 0x12
    5c92:	39 88       	ldd	r3, Y+17	; 0x11
    5c94:	48 88       	ldd	r4, Y+16	; 0x10
    5c96:	5f 84       	ldd	r5, Y+15	; 0x0f
    5c98:	6e 84       	ldd	r6, Y+14	; 0x0e
    5c9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5c9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5c9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5ca0:	aa 84       	ldd	r10, Y+10	; 0x0a
    5ca2:	b9 84       	ldd	r11, Y+9	; 0x09
    5ca4:	c8 84       	ldd	r12, Y+8	; 0x08
    5ca6:	df 80       	ldd	r13, Y+7	; 0x07
    5ca8:	ee 80       	ldd	r14, Y+6	; 0x06
    5caa:	fd 80       	ldd	r15, Y+5	; 0x05
    5cac:	0c 81       	ldd	r16, Y+4	; 0x04
    5cae:	1b 81       	ldd	r17, Y+3	; 0x03
    5cb0:	aa 81       	ldd	r26, Y+2	; 0x02
    5cb2:	b9 81       	ldd	r27, Y+1	; 0x01
    5cb4:	ce 0f       	add	r28, r30
    5cb6:	d1 1d       	adc	r29, r1
    5cb8:	0f b6       	in	r0, 0x3f	; 63
    5cba:	f8 94       	cli
    5cbc:	de bf       	out	0x3e, r29	; 62
    5cbe:	0f be       	out	0x3f, r0	; 63
    5cc0:	cd bf       	out	0x3d, r28	; 61
    5cc2:	ed 01       	movw	r28, r26
    5cc4:	08 95       	ret

00005cc6 <do_rand>:
    5cc6:	af 92       	push	r10
    5cc8:	bf 92       	push	r11
    5cca:	cf 92       	push	r12
    5ccc:	df 92       	push	r13
    5cce:	ef 92       	push	r14
    5cd0:	ff 92       	push	r15
    5cd2:	0f 93       	push	r16
    5cd4:	1f 93       	push	r17
    5cd6:	cf 93       	push	r28
    5cd8:	df 93       	push	r29
    5cda:	ec 01       	movw	r28, r24
    5cdc:	68 81       	ld	r22, Y
    5cde:	79 81       	ldd	r23, Y+1	; 0x01
    5ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ce4:	61 15       	cp	r22, r1
    5ce6:	71 05       	cpc	r23, r1
    5ce8:	81 05       	cpc	r24, r1
    5cea:	91 05       	cpc	r25, r1
    5cec:	21 f4       	brne	.+8      	; 0x5cf6 <do_rand+0x30>
    5cee:	64 e2       	ldi	r22, 0x24	; 36
    5cf0:	79 ed       	ldi	r23, 0xD9	; 217
    5cf2:	8b e5       	ldi	r24, 0x5B	; 91
    5cf4:	97 e0       	ldi	r25, 0x07	; 7
    5cf6:	2d e1       	ldi	r18, 0x1D	; 29
    5cf8:	33 ef       	ldi	r19, 0xF3	; 243
    5cfa:	41 e0       	ldi	r20, 0x01	; 1
    5cfc:	50 e0       	ldi	r21, 0x00	; 0
    5cfe:	0e 94 02 31 	call	0x6204	; 0x6204 <__divmodsi4>
    5d02:	79 01       	movw	r14, r18
    5d04:	8a 01       	movw	r16, r20
    5d06:	27 ea       	ldi	r18, 0xA7	; 167
    5d08:	31 e4       	ldi	r19, 0x41	; 65
    5d0a:	40 e0       	ldi	r20, 0x00	; 0
    5d0c:	50 e0       	ldi	r21, 0x00	; 0
    5d0e:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__mulsi3>
    5d12:	5b 01       	movw	r10, r22
    5d14:	6c 01       	movw	r12, r24
    5d16:	c8 01       	movw	r24, r16
    5d18:	b7 01       	movw	r22, r14
    5d1a:	2c ee       	ldi	r18, 0xEC	; 236
    5d1c:	34 ef       	ldi	r19, 0xF4	; 244
    5d1e:	4f ef       	ldi	r20, 0xFF	; 255
    5d20:	5f ef       	ldi	r21, 0xFF	; 255
    5d22:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__mulsi3>
    5d26:	6a 0d       	add	r22, r10
    5d28:	7b 1d       	adc	r23, r11
    5d2a:	8c 1d       	adc	r24, r12
    5d2c:	9d 1d       	adc	r25, r13
    5d2e:	97 ff       	sbrs	r25, 7
    5d30:	04 c0       	rjmp	.+8      	; 0x5d3a <do_rand+0x74>
    5d32:	61 50       	subi	r22, 0x01	; 1
    5d34:	70 40       	sbci	r23, 0x00	; 0
    5d36:	80 40       	sbci	r24, 0x00	; 0
    5d38:	90 48       	sbci	r25, 0x80	; 128
    5d3a:	68 83       	st	Y, r22
    5d3c:	79 83       	std	Y+1, r23	; 0x01
    5d3e:	8a 83       	std	Y+2, r24	; 0x02
    5d40:	9b 83       	std	Y+3, r25	; 0x03
    5d42:	7f 77       	andi	r23, 0x7F	; 127
    5d44:	cb 01       	movw	r24, r22
    5d46:	df 91       	pop	r29
    5d48:	cf 91       	pop	r28
    5d4a:	1f 91       	pop	r17
    5d4c:	0f 91       	pop	r16
    5d4e:	ff 90       	pop	r15
    5d50:	ef 90       	pop	r14
    5d52:	df 90       	pop	r13
    5d54:	cf 90       	pop	r12
    5d56:	bf 90       	pop	r11
    5d58:	af 90       	pop	r10
    5d5a:	08 95       	ret

00005d5c <rand_r>:
    5d5c:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <do_rand>
    5d60:	08 95       	ret

00005d62 <rand>:
    5d62:	80 e2       	ldi	r24, 0x20	; 32
    5d64:	93 e0       	ldi	r25, 0x03	; 3
    5d66:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <do_rand>
    5d6a:	08 95       	ret

00005d6c <srand>:
    5d6c:	a0 e0       	ldi	r26, 0x00	; 0
    5d6e:	b0 e0       	ldi	r27, 0x00	; 0
    5d70:	80 93 20 03 	sts	0x0320, r24
    5d74:	90 93 21 03 	sts	0x0321, r25
    5d78:	a0 93 22 03 	sts	0x0322, r26
    5d7c:	b0 93 23 03 	sts	0x0323, r27
    5d80:	08 95       	ret
    5d82:	f5 d0       	rcall	.+490    	; 0x5f6e <__fp_pscA>
    5d84:	58 f0       	brcs	.+22     	; 0x5d9c <srand+0x30>
    5d86:	80 e8       	ldi	r24, 0x80	; 128
    5d88:	91 e0       	ldi	r25, 0x01	; 1
    5d8a:	09 f4       	brne	.+2      	; 0x5d8e <srand+0x22>
    5d8c:	9e ef       	ldi	r25, 0xFE	; 254
    5d8e:	f6 d0       	rcall	.+492    	; 0x5f7c <__fp_pscB>
    5d90:	28 f0       	brcs	.+10     	; 0x5d9c <srand+0x30>
    5d92:	40 e8       	ldi	r20, 0x80	; 128
    5d94:	51 e0       	ldi	r21, 0x01	; 1
    5d96:	59 f4       	brne	.+22     	; 0x5dae <atan2+0xe>
    5d98:	5e ef       	ldi	r21, 0xFE	; 254
    5d9a:	09 c0       	rjmp	.+18     	; 0x5dae <atan2+0xe>
    5d9c:	c0 c0       	rjmp	.+384    	; 0x5f1e <__fp_nan>
    5d9e:	28 c1       	rjmp	.+592    	; 0x5ff0 <__fp_zero>

00005da0 <atan2>:
    5da0:	e9 2f       	mov	r30, r25
    5da2:	e0 78       	andi	r30, 0x80	; 128
    5da4:	03 d1       	rcall	.+518    	; 0x5fac <__fp_split3>
    5da6:	68 f3       	brcs	.-38     	; 0x5d82 <srand+0x16>
    5da8:	09 2e       	mov	r0, r25
    5daa:	05 2a       	or	r0, r21
    5dac:	c1 f3       	breq	.-16     	; 0x5d9e <srand+0x32>
    5dae:	26 17       	cp	r18, r22
    5db0:	37 07       	cpc	r19, r23
    5db2:	48 07       	cpc	r20, r24
    5db4:	59 07       	cpc	r21, r25
    5db6:	38 f0       	brcs	.+14     	; 0x5dc6 <atan2+0x26>
    5db8:	0e 2e       	mov	r0, r30
    5dba:	07 f8       	bld	r0, 7
    5dbc:	e0 25       	eor	r30, r0
    5dbe:	69 f0       	breq	.+26     	; 0x5dda <atan2+0x3a>
    5dc0:	e0 25       	eor	r30, r0
    5dc2:	e0 64       	ori	r30, 0x40	; 64
    5dc4:	0a c0       	rjmp	.+20     	; 0x5dda <atan2+0x3a>
    5dc6:	ef 63       	ori	r30, 0x3F	; 63
    5dc8:	07 f8       	bld	r0, 7
    5dca:	00 94       	com	r0
    5dcc:	07 fa       	bst	r0, 7
    5dce:	db 01       	movw	r26, r22
    5dd0:	b9 01       	movw	r22, r18
    5dd2:	9d 01       	movw	r18, r26
    5dd4:	dc 01       	movw	r26, r24
    5dd6:	ca 01       	movw	r24, r20
    5dd8:	ad 01       	movw	r20, r26
    5dda:	ef 93       	push	r30
    5ddc:	41 d0       	rcall	.+130    	; 0x5e60 <__divsf3_pse>
    5dde:	d5 d0       	rcall	.+426    	; 0x5f8a <__fp_round>
    5de0:	0a d0       	rcall	.+20     	; 0x5df6 <atan>
    5de2:	5f 91       	pop	r21
    5de4:	55 23       	and	r21, r21
    5de6:	31 f0       	breq	.+12     	; 0x5df4 <atan2+0x54>
    5de8:	2b ed       	ldi	r18, 0xDB	; 219
    5dea:	3f e0       	ldi	r19, 0x0F	; 15
    5dec:	49 e4       	ldi	r20, 0x49	; 73
    5dee:	50 fd       	sbrc	r21, 0
    5df0:	49 ec       	ldi	r20, 0xC9	; 201
    5df2:	92 c1       	rjmp	.+804    	; 0x6118 <__addsf3>
    5df4:	08 95       	ret

00005df6 <atan>:
    5df6:	df 93       	push	r29
    5df8:	dd 27       	eor	r29, r29
    5dfa:	b9 2f       	mov	r27, r25
    5dfc:	bf 77       	andi	r27, 0x7F	; 127
    5dfe:	40 e8       	ldi	r20, 0x80	; 128
    5e00:	5f e3       	ldi	r21, 0x3F	; 63
    5e02:	16 16       	cp	r1, r22
    5e04:	17 06       	cpc	r1, r23
    5e06:	48 07       	cpc	r20, r24
    5e08:	5b 07       	cpc	r21, r27
    5e0a:	10 f4       	brcc	.+4      	; 0x5e10 <atan+0x1a>
    5e0c:	d9 2f       	mov	r29, r25
    5e0e:	f7 d0       	rcall	.+494    	; 0x5ffe <inverse>
    5e10:	9f 93       	push	r25
    5e12:	8f 93       	push	r24
    5e14:	7f 93       	push	r23
    5e16:	6f 93       	push	r22
    5e18:	5a d1       	rcall	.+692    	; 0x60ce <square>
    5e1a:	ee e4       	ldi	r30, 0x4E	; 78
    5e1c:	f1 e0       	ldi	r31, 0x01	; 1
    5e1e:	82 d0       	rcall	.+260    	; 0x5f24 <__fp_powser>
    5e20:	b4 d0       	rcall	.+360    	; 0x5f8a <__fp_round>
    5e22:	2f 91       	pop	r18
    5e24:	3f 91       	pop	r19
    5e26:	4f 91       	pop	r20
    5e28:	5f 91       	pop	r21
    5e2a:	fa d0       	rcall	.+500    	; 0x6020 <__mulsf3x>
    5e2c:	dd 23       	and	r29, r29
    5e2e:	49 f0       	breq	.+18     	; 0x5e42 <atan+0x4c>
    5e30:	90 58       	subi	r25, 0x80	; 128
    5e32:	a2 ea       	ldi	r26, 0xA2	; 162
    5e34:	2a ed       	ldi	r18, 0xDA	; 218
    5e36:	3f e0       	ldi	r19, 0x0F	; 15
    5e38:	49 ec       	ldi	r20, 0xC9	; 201
    5e3a:	5f e3       	ldi	r21, 0x3F	; 63
    5e3c:	d0 78       	andi	r29, 0x80	; 128
    5e3e:	5d 27       	eor	r21, r29
    5e40:	7c d1       	rcall	.+760    	; 0x613a <__addsf3x>
    5e42:	df 91       	pop	r29
    5e44:	a2 c0       	rjmp	.+324    	; 0x5f8a <__fp_round>
    5e46:	9a d0       	rcall	.+308    	; 0x5f7c <__fp_pscB>
    5e48:	40 f0       	brcs	.+16     	; 0x5e5a <atan+0x64>
    5e4a:	91 d0       	rcall	.+290    	; 0x5f6e <__fp_pscA>
    5e4c:	30 f0       	brcs	.+12     	; 0x5e5a <atan+0x64>
    5e4e:	21 f4       	brne	.+8      	; 0x5e58 <atan+0x62>
    5e50:	5f 3f       	cpi	r21, 0xFF	; 255
    5e52:	19 f0       	breq	.+6      	; 0x5e5a <atan+0x64>
    5e54:	5e c0       	rjmp	.+188    	; 0x5f12 <__fp_inf>
    5e56:	51 11       	cpse	r21, r1
    5e58:	cc c0       	rjmp	.+408    	; 0x5ff2 <__fp_szero>
    5e5a:	61 c0       	rjmp	.+194    	; 0x5f1e <__fp_nan>

00005e5c <__divsf3x>:
    5e5c:	a7 d0       	rcall	.+334    	; 0x5fac <__fp_split3>
    5e5e:	98 f3       	brcs	.-26     	; 0x5e46 <atan+0x50>

00005e60 <__divsf3_pse>:
    5e60:	99 23       	and	r25, r25
    5e62:	c9 f3       	breq	.-14     	; 0x5e56 <atan+0x60>
    5e64:	55 23       	and	r21, r21
    5e66:	b1 f3       	breq	.-20     	; 0x5e54 <atan+0x5e>
    5e68:	95 1b       	sub	r25, r21
    5e6a:	55 0b       	sbc	r21, r21
    5e6c:	bb 27       	eor	r27, r27
    5e6e:	aa 27       	eor	r26, r26
    5e70:	62 17       	cp	r22, r18
    5e72:	73 07       	cpc	r23, r19
    5e74:	84 07       	cpc	r24, r20
    5e76:	38 f0       	brcs	.+14     	; 0x5e86 <__divsf3_pse+0x26>
    5e78:	9f 5f       	subi	r25, 0xFF	; 255
    5e7a:	5f 4f       	sbci	r21, 0xFF	; 255
    5e7c:	22 0f       	add	r18, r18
    5e7e:	33 1f       	adc	r19, r19
    5e80:	44 1f       	adc	r20, r20
    5e82:	aa 1f       	adc	r26, r26
    5e84:	a9 f3       	breq	.-22     	; 0x5e70 <__divsf3_pse+0x10>
    5e86:	33 d0       	rcall	.+102    	; 0x5eee <__divsf3_pse+0x8e>
    5e88:	0e 2e       	mov	r0, r30
    5e8a:	3a f0       	brmi	.+14     	; 0x5e9a <__divsf3_pse+0x3a>
    5e8c:	e0 e8       	ldi	r30, 0x80	; 128
    5e8e:	30 d0       	rcall	.+96     	; 0x5ef0 <__divsf3_pse+0x90>
    5e90:	91 50       	subi	r25, 0x01	; 1
    5e92:	50 40       	sbci	r21, 0x00	; 0
    5e94:	e6 95       	lsr	r30
    5e96:	00 1c       	adc	r0, r0
    5e98:	ca f7       	brpl	.-14     	; 0x5e8c <__divsf3_pse+0x2c>
    5e9a:	29 d0       	rcall	.+82     	; 0x5eee <__divsf3_pse+0x8e>
    5e9c:	fe 2f       	mov	r31, r30
    5e9e:	27 d0       	rcall	.+78     	; 0x5eee <__divsf3_pse+0x8e>
    5ea0:	66 0f       	add	r22, r22
    5ea2:	77 1f       	adc	r23, r23
    5ea4:	88 1f       	adc	r24, r24
    5ea6:	bb 1f       	adc	r27, r27
    5ea8:	26 17       	cp	r18, r22
    5eaa:	37 07       	cpc	r19, r23
    5eac:	48 07       	cpc	r20, r24
    5eae:	ab 07       	cpc	r26, r27
    5eb0:	b0 e8       	ldi	r27, 0x80	; 128
    5eb2:	09 f0       	breq	.+2      	; 0x5eb6 <__divsf3_pse+0x56>
    5eb4:	bb 0b       	sbc	r27, r27
    5eb6:	80 2d       	mov	r24, r0
    5eb8:	bf 01       	movw	r22, r30
    5eba:	ff 27       	eor	r31, r31
    5ebc:	93 58       	subi	r25, 0x83	; 131
    5ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    5ec0:	2a f0       	brmi	.+10     	; 0x5ecc <__divsf3_pse+0x6c>
    5ec2:	9e 3f       	cpi	r25, 0xFE	; 254
    5ec4:	51 05       	cpc	r21, r1
    5ec6:	68 f0       	brcs	.+26     	; 0x5ee2 <__divsf3_pse+0x82>
    5ec8:	24 c0       	rjmp	.+72     	; 0x5f12 <__fp_inf>
    5eca:	93 c0       	rjmp	.+294    	; 0x5ff2 <__fp_szero>
    5ecc:	5f 3f       	cpi	r21, 0xFF	; 255
    5ece:	ec f3       	brlt	.-6      	; 0x5eca <__divsf3_pse+0x6a>
    5ed0:	98 3e       	cpi	r25, 0xE8	; 232
    5ed2:	dc f3       	brlt	.-10     	; 0x5eca <__divsf3_pse+0x6a>
    5ed4:	86 95       	lsr	r24
    5ed6:	77 95       	ror	r23
    5ed8:	67 95       	ror	r22
    5eda:	b7 95       	ror	r27
    5edc:	f7 95       	ror	r31
    5ede:	9f 5f       	subi	r25, 0xFF	; 255
    5ee0:	c9 f7       	brne	.-14     	; 0x5ed4 <__divsf3_pse+0x74>
    5ee2:	88 0f       	add	r24, r24
    5ee4:	91 1d       	adc	r25, r1
    5ee6:	96 95       	lsr	r25
    5ee8:	87 95       	ror	r24
    5eea:	97 f9       	bld	r25, 7
    5eec:	08 95       	ret
    5eee:	e1 e0       	ldi	r30, 0x01	; 1
    5ef0:	66 0f       	add	r22, r22
    5ef2:	77 1f       	adc	r23, r23
    5ef4:	88 1f       	adc	r24, r24
    5ef6:	bb 1f       	adc	r27, r27
    5ef8:	62 17       	cp	r22, r18
    5efa:	73 07       	cpc	r23, r19
    5efc:	84 07       	cpc	r24, r20
    5efe:	ba 07       	cpc	r27, r26
    5f00:	20 f0       	brcs	.+8      	; 0x5f0a <__divsf3_pse+0xaa>
    5f02:	62 1b       	sub	r22, r18
    5f04:	73 0b       	sbc	r23, r19
    5f06:	84 0b       	sbc	r24, r20
    5f08:	ba 0b       	sbc	r27, r26
    5f0a:	ee 1f       	adc	r30, r30
    5f0c:	88 f7       	brcc	.-30     	; 0x5ef0 <__divsf3_pse+0x90>
    5f0e:	e0 95       	com	r30
    5f10:	08 95       	ret

00005f12 <__fp_inf>:
    5f12:	97 f9       	bld	r25, 7
    5f14:	9f 67       	ori	r25, 0x7F	; 127
    5f16:	80 e8       	ldi	r24, 0x80	; 128
    5f18:	70 e0       	ldi	r23, 0x00	; 0
    5f1a:	60 e0       	ldi	r22, 0x00	; 0
    5f1c:	08 95       	ret

00005f1e <__fp_nan>:
    5f1e:	9f ef       	ldi	r25, 0xFF	; 255
    5f20:	80 ec       	ldi	r24, 0xC0	; 192
    5f22:	08 95       	ret

00005f24 <__fp_powser>:
    5f24:	df 93       	push	r29
    5f26:	cf 93       	push	r28
    5f28:	1f 93       	push	r17
    5f2a:	0f 93       	push	r16
    5f2c:	ff 92       	push	r15
    5f2e:	ef 92       	push	r14
    5f30:	df 92       	push	r13
    5f32:	7b 01       	movw	r14, r22
    5f34:	8c 01       	movw	r16, r24
    5f36:	68 94       	set
    5f38:	05 c0       	rjmp	.+10     	; 0x5f44 <__fp_powser+0x20>
    5f3a:	da 2e       	mov	r13, r26
    5f3c:	ef 01       	movw	r28, r30
    5f3e:	70 d0       	rcall	.+224    	; 0x6020 <__mulsf3x>
    5f40:	fe 01       	movw	r30, r28
    5f42:	e8 94       	clt
    5f44:	a5 91       	lpm	r26, Z+
    5f46:	25 91       	lpm	r18, Z+
    5f48:	35 91       	lpm	r19, Z+
    5f4a:	45 91       	lpm	r20, Z+
    5f4c:	55 91       	lpm	r21, Z+
    5f4e:	ae f3       	brts	.-22     	; 0x5f3a <__fp_powser+0x16>
    5f50:	ef 01       	movw	r28, r30
    5f52:	f3 d0       	rcall	.+486    	; 0x613a <__addsf3x>
    5f54:	fe 01       	movw	r30, r28
    5f56:	97 01       	movw	r18, r14
    5f58:	a8 01       	movw	r20, r16
    5f5a:	da 94       	dec	r13
    5f5c:	79 f7       	brne	.-34     	; 0x5f3c <__fp_powser+0x18>
    5f5e:	df 90       	pop	r13
    5f60:	ef 90       	pop	r14
    5f62:	ff 90       	pop	r15
    5f64:	0f 91       	pop	r16
    5f66:	1f 91       	pop	r17
    5f68:	cf 91       	pop	r28
    5f6a:	df 91       	pop	r29
    5f6c:	08 95       	ret

00005f6e <__fp_pscA>:
    5f6e:	00 24       	eor	r0, r0
    5f70:	0a 94       	dec	r0
    5f72:	16 16       	cp	r1, r22
    5f74:	17 06       	cpc	r1, r23
    5f76:	18 06       	cpc	r1, r24
    5f78:	09 06       	cpc	r0, r25
    5f7a:	08 95       	ret

00005f7c <__fp_pscB>:
    5f7c:	00 24       	eor	r0, r0
    5f7e:	0a 94       	dec	r0
    5f80:	12 16       	cp	r1, r18
    5f82:	13 06       	cpc	r1, r19
    5f84:	14 06       	cpc	r1, r20
    5f86:	05 06       	cpc	r0, r21
    5f88:	08 95       	ret

00005f8a <__fp_round>:
    5f8a:	09 2e       	mov	r0, r25
    5f8c:	03 94       	inc	r0
    5f8e:	00 0c       	add	r0, r0
    5f90:	11 f4       	brne	.+4      	; 0x5f96 <__fp_round+0xc>
    5f92:	88 23       	and	r24, r24
    5f94:	52 f0       	brmi	.+20     	; 0x5faa <__fp_round+0x20>
    5f96:	bb 0f       	add	r27, r27
    5f98:	40 f4       	brcc	.+16     	; 0x5faa <__fp_round+0x20>
    5f9a:	bf 2b       	or	r27, r31
    5f9c:	11 f4       	brne	.+4      	; 0x5fa2 <__fp_round+0x18>
    5f9e:	60 ff       	sbrs	r22, 0
    5fa0:	04 c0       	rjmp	.+8      	; 0x5faa <__fp_round+0x20>
    5fa2:	6f 5f       	subi	r22, 0xFF	; 255
    5fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    5fa6:	8f 4f       	sbci	r24, 0xFF	; 255
    5fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    5faa:	08 95       	ret

00005fac <__fp_split3>:
    5fac:	57 fd       	sbrc	r21, 7
    5fae:	90 58       	subi	r25, 0x80	; 128
    5fb0:	44 0f       	add	r20, r20
    5fb2:	55 1f       	adc	r21, r21
    5fb4:	59 f0       	breq	.+22     	; 0x5fcc <__fp_splitA+0x10>
    5fb6:	5f 3f       	cpi	r21, 0xFF	; 255
    5fb8:	71 f0       	breq	.+28     	; 0x5fd6 <__fp_splitA+0x1a>
    5fba:	47 95       	ror	r20

00005fbc <__fp_splitA>:
    5fbc:	88 0f       	add	r24, r24
    5fbe:	97 fb       	bst	r25, 7
    5fc0:	99 1f       	adc	r25, r25
    5fc2:	61 f0       	breq	.+24     	; 0x5fdc <__fp_splitA+0x20>
    5fc4:	9f 3f       	cpi	r25, 0xFF	; 255
    5fc6:	79 f0       	breq	.+30     	; 0x5fe6 <__fp_splitA+0x2a>
    5fc8:	87 95       	ror	r24
    5fca:	08 95       	ret
    5fcc:	12 16       	cp	r1, r18
    5fce:	13 06       	cpc	r1, r19
    5fd0:	14 06       	cpc	r1, r20
    5fd2:	55 1f       	adc	r21, r21
    5fd4:	f2 cf       	rjmp	.-28     	; 0x5fba <__fp_split3+0xe>
    5fd6:	46 95       	lsr	r20
    5fd8:	f1 df       	rcall	.-30     	; 0x5fbc <__fp_splitA>
    5fda:	08 c0       	rjmp	.+16     	; 0x5fec <__fp_splitA+0x30>
    5fdc:	16 16       	cp	r1, r22
    5fde:	17 06       	cpc	r1, r23
    5fe0:	18 06       	cpc	r1, r24
    5fe2:	99 1f       	adc	r25, r25
    5fe4:	f1 cf       	rjmp	.-30     	; 0x5fc8 <__fp_splitA+0xc>
    5fe6:	86 95       	lsr	r24
    5fe8:	71 05       	cpc	r23, r1
    5fea:	61 05       	cpc	r22, r1
    5fec:	08 94       	sec
    5fee:	08 95       	ret

00005ff0 <__fp_zero>:
    5ff0:	e8 94       	clt

00005ff2 <__fp_szero>:
    5ff2:	bb 27       	eor	r27, r27
    5ff4:	66 27       	eor	r22, r22
    5ff6:	77 27       	eor	r23, r23
    5ff8:	cb 01       	movw	r24, r22
    5ffa:	97 f9       	bld	r25, 7
    5ffc:	08 95       	ret

00005ffe <inverse>:
    5ffe:	9b 01       	movw	r18, r22
    6000:	ac 01       	movw	r20, r24
    6002:	60 e0       	ldi	r22, 0x00	; 0
    6004:	70 e0       	ldi	r23, 0x00	; 0
    6006:	80 e8       	ldi	r24, 0x80	; 128
    6008:	9f e3       	ldi	r25, 0x3F	; 63
    600a:	ea c0       	rjmp	.+468    	; 0x61e0 <__divsf3>
    600c:	b0 df       	rcall	.-160    	; 0x5f6e <__fp_pscA>
    600e:	28 f0       	brcs	.+10     	; 0x601a <inverse+0x1c>
    6010:	b5 df       	rcall	.-150    	; 0x5f7c <__fp_pscB>
    6012:	18 f0       	brcs	.+6      	; 0x601a <inverse+0x1c>
    6014:	95 23       	and	r25, r21
    6016:	09 f0       	breq	.+2      	; 0x601a <inverse+0x1c>
    6018:	7c cf       	rjmp	.-264    	; 0x5f12 <__fp_inf>
    601a:	81 cf       	rjmp	.-254    	; 0x5f1e <__fp_nan>
    601c:	11 24       	eor	r1, r1
    601e:	e9 cf       	rjmp	.-46     	; 0x5ff2 <__fp_szero>

00006020 <__mulsf3x>:
    6020:	c5 df       	rcall	.-118    	; 0x5fac <__fp_split3>
    6022:	a0 f3       	brcs	.-24     	; 0x600c <inverse+0xe>

00006024 <__mulsf3_pse>:
    6024:	95 9f       	mul	r25, r21
    6026:	d1 f3       	breq	.-12     	; 0x601c <inverse+0x1e>
    6028:	95 0f       	add	r25, r21
    602a:	50 e0       	ldi	r21, 0x00	; 0
    602c:	55 1f       	adc	r21, r21
    602e:	62 9f       	mul	r22, r18
    6030:	f0 01       	movw	r30, r0
    6032:	72 9f       	mul	r23, r18
    6034:	bb 27       	eor	r27, r27
    6036:	f0 0d       	add	r31, r0
    6038:	b1 1d       	adc	r27, r1
    603a:	63 9f       	mul	r22, r19
    603c:	aa 27       	eor	r26, r26
    603e:	f0 0d       	add	r31, r0
    6040:	b1 1d       	adc	r27, r1
    6042:	aa 1f       	adc	r26, r26
    6044:	64 9f       	mul	r22, r20
    6046:	66 27       	eor	r22, r22
    6048:	b0 0d       	add	r27, r0
    604a:	a1 1d       	adc	r26, r1
    604c:	66 1f       	adc	r22, r22
    604e:	82 9f       	mul	r24, r18
    6050:	22 27       	eor	r18, r18
    6052:	b0 0d       	add	r27, r0
    6054:	a1 1d       	adc	r26, r1
    6056:	62 1f       	adc	r22, r18
    6058:	73 9f       	mul	r23, r19
    605a:	b0 0d       	add	r27, r0
    605c:	a1 1d       	adc	r26, r1
    605e:	62 1f       	adc	r22, r18
    6060:	83 9f       	mul	r24, r19
    6062:	a0 0d       	add	r26, r0
    6064:	61 1d       	adc	r22, r1
    6066:	22 1f       	adc	r18, r18
    6068:	74 9f       	mul	r23, r20
    606a:	33 27       	eor	r19, r19
    606c:	a0 0d       	add	r26, r0
    606e:	61 1d       	adc	r22, r1
    6070:	23 1f       	adc	r18, r19
    6072:	84 9f       	mul	r24, r20
    6074:	60 0d       	add	r22, r0
    6076:	21 1d       	adc	r18, r1
    6078:	82 2f       	mov	r24, r18
    607a:	76 2f       	mov	r23, r22
    607c:	6a 2f       	mov	r22, r26
    607e:	11 24       	eor	r1, r1
    6080:	9f 57       	subi	r25, 0x7F	; 127
    6082:	50 40       	sbci	r21, 0x00	; 0
    6084:	8a f0       	brmi	.+34     	; 0x60a8 <__mulsf3_pse+0x84>
    6086:	e1 f0       	breq	.+56     	; 0x60c0 <__mulsf3_pse+0x9c>
    6088:	88 23       	and	r24, r24
    608a:	4a f0       	brmi	.+18     	; 0x609e <__mulsf3_pse+0x7a>
    608c:	ee 0f       	add	r30, r30
    608e:	ff 1f       	adc	r31, r31
    6090:	bb 1f       	adc	r27, r27
    6092:	66 1f       	adc	r22, r22
    6094:	77 1f       	adc	r23, r23
    6096:	88 1f       	adc	r24, r24
    6098:	91 50       	subi	r25, 0x01	; 1
    609a:	50 40       	sbci	r21, 0x00	; 0
    609c:	a9 f7       	brne	.-22     	; 0x6088 <__mulsf3_pse+0x64>
    609e:	9e 3f       	cpi	r25, 0xFE	; 254
    60a0:	51 05       	cpc	r21, r1
    60a2:	70 f0       	brcs	.+28     	; 0x60c0 <__mulsf3_pse+0x9c>
    60a4:	36 cf       	rjmp	.-404    	; 0x5f12 <__fp_inf>
    60a6:	a5 cf       	rjmp	.-182    	; 0x5ff2 <__fp_szero>
    60a8:	5f 3f       	cpi	r21, 0xFF	; 255
    60aa:	ec f3       	brlt	.-6      	; 0x60a6 <__mulsf3_pse+0x82>
    60ac:	98 3e       	cpi	r25, 0xE8	; 232
    60ae:	dc f3       	brlt	.-10     	; 0x60a6 <__mulsf3_pse+0x82>
    60b0:	86 95       	lsr	r24
    60b2:	77 95       	ror	r23
    60b4:	67 95       	ror	r22
    60b6:	b7 95       	ror	r27
    60b8:	f7 95       	ror	r31
    60ba:	e7 95       	ror	r30
    60bc:	9f 5f       	subi	r25, 0xFF	; 255
    60be:	c1 f7       	brne	.-16     	; 0x60b0 <__mulsf3_pse+0x8c>
    60c0:	fe 2b       	or	r31, r30
    60c2:	88 0f       	add	r24, r24
    60c4:	91 1d       	adc	r25, r1
    60c6:	96 95       	lsr	r25
    60c8:	87 95       	ror	r24
    60ca:	97 f9       	bld	r25, 7
    60cc:	08 95       	ret

000060ce <square>:
    60ce:	9b 01       	movw	r18, r22
    60d0:	ac 01       	movw	r20, r24
    60d2:	2f ca       	rjmp	.-2978   	; 0x5532 <__mulsf3>

000060d4 <__eerd_byte_m2560>:
    60d4:	f9 99       	sbic	0x1f, 1	; 31
    60d6:	fe cf       	rjmp	.-4      	; 0x60d4 <__eerd_byte_m2560>
    60d8:	92 bd       	out	0x22, r25	; 34
    60da:	81 bd       	out	0x21, r24	; 33
    60dc:	f8 9a       	sbi	0x1f, 0	; 31
    60de:	99 27       	eor	r25, r25
    60e0:	80 b5       	in	r24, 0x20	; 32
    60e2:	08 95       	ret

000060e4 <__eerd_word_m2560>:
    60e4:	a8 e1       	ldi	r26, 0x18	; 24
    60e6:	b0 e0       	ldi	r27, 0x00	; 0
    60e8:	42 e0       	ldi	r20, 0x02	; 2
    60ea:	50 e0       	ldi	r21, 0x00	; 0
    60ec:	0c 94 f4 30 	jmp	0x61e8	; 0x61e8 <__eerd_blraw_m2560>

000060f0 <__eewr_byte_m2560>:
    60f0:	26 2f       	mov	r18, r22

000060f2 <__eewr_r18_m2560>:
    60f2:	f9 99       	sbic	0x1f, 1	; 31
    60f4:	fe cf       	rjmp	.-4      	; 0x60f2 <__eewr_r18_m2560>
    60f6:	1f ba       	out	0x1f, r1	; 31
    60f8:	92 bd       	out	0x22, r25	; 34
    60fa:	81 bd       	out	0x21, r24	; 33
    60fc:	20 bd       	out	0x20, r18	; 32
    60fe:	0f b6       	in	r0, 0x3f	; 63
    6100:	f8 94       	cli
    6102:	fa 9a       	sbi	0x1f, 2	; 31
    6104:	f9 9a       	sbi	0x1f, 1	; 31
    6106:	0f be       	out	0x3f, r0	; 63
    6108:	01 96       	adiw	r24, 0x01	; 1
    610a:	08 95       	ret

0000610c <__eewr_word_m2560>:
    610c:	0e 94 78 30 	call	0x60f0	; 0x60f0 <__eewr_byte_m2560>
    6110:	27 2f       	mov	r18, r23
    6112:	0c 94 79 30 	jmp	0x60f2	; 0x60f2 <__eewr_r18_m2560>

00006116 <__subsf3>:
    6116:	50 58       	subi	r21, 0x80	; 128

00006118 <__addsf3>:
    6118:	bb 27       	eor	r27, r27
    611a:	aa 27       	eor	r26, r26
    611c:	0e d0       	rcall	.+28     	; 0x613a <__addsf3x>
    611e:	35 cf       	rjmp	.-406    	; 0x5f8a <__fp_round>
    6120:	26 df       	rcall	.-436    	; 0x5f6e <__fp_pscA>
    6122:	30 f0       	brcs	.+12     	; 0x6130 <__addsf3+0x18>
    6124:	2b df       	rcall	.-426    	; 0x5f7c <__fp_pscB>
    6126:	20 f0       	brcs	.+8      	; 0x6130 <__addsf3+0x18>
    6128:	31 f4       	brne	.+12     	; 0x6136 <__addsf3+0x1e>
    612a:	9f 3f       	cpi	r25, 0xFF	; 255
    612c:	11 f4       	brne	.+4      	; 0x6132 <__addsf3+0x1a>
    612e:	1e f4       	brtc	.+6      	; 0x6136 <__addsf3+0x1e>
    6130:	f6 ce       	rjmp	.-532    	; 0x5f1e <__fp_nan>
    6132:	0e f4       	brtc	.+2      	; 0x6136 <__addsf3+0x1e>
    6134:	e0 95       	com	r30
    6136:	e7 fb       	bst	r30, 7
    6138:	ec ce       	rjmp	.-552    	; 0x5f12 <__fp_inf>

0000613a <__addsf3x>:
    613a:	e9 2f       	mov	r30, r25
    613c:	37 df       	rcall	.-402    	; 0x5fac <__fp_split3>
    613e:	80 f3       	brcs	.-32     	; 0x6120 <__addsf3+0x8>
    6140:	ba 17       	cp	r27, r26
    6142:	62 07       	cpc	r22, r18
    6144:	73 07       	cpc	r23, r19
    6146:	84 07       	cpc	r24, r20
    6148:	95 07       	cpc	r25, r21
    614a:	18 f0       	brcs	.+6      	; 0x6152 <__addsf3x+0x18>
    614c:	71 f4       	brne	.+28     	; 0x616a <__addsf3x+0x30>
    614e:	9e f5       	brtc	.+102    	; 0x61b6 <__addsf3x+0x7c>
    6150:	4f cf       	rjmp	.-354    	; 0x5ff0 <__fp_zero>
    6152:	0e f4       	brtc	.+2      	; 0x6156 <__addsf3x+0x1c>
    6154:	e0 95       	com	r30
    6156:	0b 2e       	mov	r0, r27
    6158:	ba 2f       	mov	r27, r26
    615a:	a0 2d       	mov	r26, r0
    615c:	0b 01       	movw	r0, r22
    615e:	b9 01       	movw	r22, r18
    6160:	90 01       	movw	r18, r0
    6162:	0c 01       	movw	r0, r24
    6164:	ca 01       	movw	r24, r20
    6166:	a0 01       	movw	r20, r0
    6168:	11 24       	eor	r1, r1
    616a:	ff 27       	eor	r31, r31
    616c:	59 1b       	sub	r21, r25
    616e:	99 f0       	breq	.+38     	; 0x6196 <__addsf3x+0x5c>
    6170:	59 3f       	cpi	r21, 0xF9	; 249
    6172:	50 f4       	brcc	.+20     	; 0x6188 <__addsf3x+0x4e>
    6174:	50 3e       	cpi	r21, 0xE0	; 224
    6176:	68 f1       	brcs	.+90     	; 0x61d2 <__addsf3x+0x98>
    6178:	1a 16       	cp	r1, r26
    617a:	f0 40       	sbci	r31, 0x00	; 0
    617c:	a2 2f       	mov	r26, r18
    617e:	23 2f       	mov	r18, r19
    6180:	34 2f       	mov	r19, r20
    6182:	44 27       	eor	r20, r20
    6184:	58 5f       	subi	r21, 0xF8	; 248
    6186:	f3 cf       	rjmp	.-26     	; 0x616e <__addsf3x+0x34>
    6188:	46 95       	lsr	r20
    618a:	37 95       	ror	r19
    618c:	27 95       	ror	r18
    618e:	a7 95       	ror	r26
    6190:	f0 40       	sbci	r31, 0x00	; 0
    6192:	53 95       	inc	r21
    6194:	c9 f7       	brne	.-14     	; 0x6188 <__addsf3x+0x4e>
    6196:	7e f4       	brtc	.+30     	; 0x61b6 <__addsf3x+0x7c>
    6198:	1f 16       	cp	r1, r31
    619a:	ba 0b       	sbc	r27, r26
    619c:	62 0b       	sbc	r22, r18
    619e:	73 0b       	sbc	r23, r19
    61a0:	84 0b       	sbc	r24, r20
    61a2:	ba f0       	brmi	.+46     	; 0x61d2 <__addsf3x+0x98>
    61a4:	91 50       	subi	r25, 0x01	; 1
    61a6:	a1 f0       	breq	.+40     	; 0x61d0 <__addsf3x+0x96>
    61a8:	ff 0f       	add	r31, r31
    61aa:	bb 1f       	adc	r27, r27
    61ac:	66 1f       	adc	r22, r22
    61ae:	77 1f       	adc	r23, r23
    61b0:	88 1f       	adc	r24, r24
    61b2:	c2 f7       	brpl	.-16     	; 0x61a4 <__addsf3x+0x6a>
    61b4:	0e c0       	rjmp	.+28     	; 0x61d2 <__addsf3x+0x98>
    61b6:	ba 0f       	add	r27, r26
    61b8:	62 1f       	adc	r22, r18
    61ba:	73 1f       	adc	r23, r19
    61bc:	84 1f       	adc	r24, r20
    61be:	48 f4       	brcc	.+18     	; 0x61d2 <__addsf3x+0x98>
    61c0:	87 95       	ror	r24
    61c2:	77 95       	ror	r23
    61c4:	67 95       	ror	r22
    61c6:	b7 95       	ror	r27
    61c8:	f7 95       	ror	r31
    61ca:	9e 3f       	cpi	r25, 0xFE	; 254
    61cc:	08 f0       	brcs	.+2      	; 0x61d0 <__addsf3x+0x96>
    61ce:	b3 cf       	rjmp	.-154    	; 0x6136 <__addsf3+0x1e>
    61d0:	93 95       	inc	r25
    61d2:	88 0f       	add	r24, r24
    61d4:	08 f0       	brcs	.+2      	; 0x61d8 <__addsf3x+0x9e>
    61d6:	99 27       	eor	r25, r25
    61d8:	ee 0f       	add	r30, r30
    61da:	97 95       	ror	r25
    61dc:	87 95       	ror	r24
    61de:	08 95       	ret

000061e0 <__divsf3>:
    61e0:	3d de       	rcall	.-902    	; 0x5e5c <__divsf3x>
    61e2:	d3 ce       	rjmp	.-602    	; 0x5f8a <__fp_round>

000061e4 <__eerd_block_m2560>:
    61e4:	dc 01       	movw	r26, r24
    61e6:	cb 01       	movw	r24, r22

000061e8 <__eerd_blraw_m2560>:
    61e8:	fc 01       	movw	r30, r24
    61ea:	f9 99       	sbic	0x1f, 1	; 31
    61ec:	fe cf       	rjmp	.-4      	; 0x61ea <__eerd_blraw_m2560+0x2>
    61ee:	06 c0       	rjmp	.+12     	; 0x61fc <__eerd_blraw_m2560+0x14>
    61f0:	f2 bd       	out	0x22, r31	; 34
    61f2:	e1 bd       	out	0x21, r30	; 33
    61f4:	f8 9a       	sbi	0x1f, 0	; 31
    61f6:	31 96       	adiw	r30, 0x01	; 1
    61f8:	00 b4       	in	r0, 0x20	; 32
    61fa:	0d 92       	st	X+, r0
    61fc:	41 50       	subi	r20, 0x01	; 1
    61fe:	50 40       	sbci	r21, 0x00	; 0
    6200:	b8 f7       	brcc	.-18     	; 0x61f0 <__eerd_blraw_m2560+0x8>
    6202:	08 95       	ret

00006204 <__divmodsi4>:
    6204:	97 fb       	bst	r25, 7
    6206:	09 2e       	mov	r0, r25
    6208:	05 26       	eor	r0, r21
    620a:	0e d0       	rcall	.+28     	; 0x6228 <__divmodsi4_neg1>
    620c:	57 fd       	sbrc	r21, 7
    620e:	04 d0       	rcall	.+8      	; 0x6218 <__divmodsi4_neg2>
    6210:	14 d0       	rcall	.+40     	; 0x623a <__udivmodsi4>
    6212:	0a d0       	rcall	.+20     	; 0x6228 <__divmodsi4_neg1>
    6214:	00 1c       	adc	r0, r0
    6216:	38 f4       	brcc	.+14     	; 0x6226 <__divmodsi4_exit>

00006218 <__divmodsi4_neg2>:
    6218:	50 95       	com	r21
    621a:	40 95       	com	r20
    621c:	30 95       	com	r19
    621e:	21 95       	neg	r18
    6220:	3f 4f       	sbci	r19, 0xFF	; 255
    6222:	4f 4f       	sbci	r20, 0xFF	; 255
    6224:	5f 4f       	sbci	r21, 0xFF	; 255

00006226 <__divmodsi4_exit>:
    6226:	08 95       	ret

00006228 <__divmodsi4_neg1>:
    6228:	f6 f7       	brtc	.-4      	; 0x6226 <__divmodsi4_exit>
    622a:	90 95       	com	r25
    622c:	80 95       	com	r24
    622e:	70 95       	com	r23
    6230:	61 95       	neg	r22
    6232:	7f 4f       	sbci	r23, 0xFF	; 255
    6234:	8f 4f       	sbci	r24, 0xFF	; 255
    6236:	9f 4f       	sbci	r25, 0xFF	; 255
    6238:	08 95       	ret

0000623a <__udivmodsi4>:
    623a:	a1 e2       	ldi	r26, 0x21	; 33
    623c:	1a 2e       	mov	r1, r26
    623e:	aa 1b       	sub	r26, r26
    6240:	bb 1b       	sub	r27, r27
    6242:	fd 01       	movw	r30, r26
    6244:	0d c0       	rjmp	.+26     	; 0x6260 <__udivmodsi4_ep>

00006246 <__udivmodsi4_loop>:
    6246:	aa 1f       	adc	r26, r26
    6248:	bb 1f       	adc	r27, r27
    624a:	ee 1f       	adc	r30, r30
    624c:	ff 1f       	adc	r31, r31
    624e:	a2 17       	cp	r26, r18
    6250:	b3 07       	cpc	r27, r19
    6252:	e4 07       	cpc	r30, r20
    6254:	f5 07       	cpc	r31, r21
    6256:	20 f0       	brcs	.+8      	; 0x6260 <__udivmodsi4_ep>
    6258:	a2 1b       	sub	r26, r18
    625a:	b3 0b       	sbc	r27, r19
    625c:	e4 0b       	sbc	r30, r20
    625e:	f5 0b       	sbc	r31, r21

00006260 <__udivmodsi4_ep>:
    6260:	66 1f       	adc	r22, r22
    6262:	77 1f       	adc	r23, r23
    6264:	88 1f       	adc	r24, r24
    6266:	99 1f       	adc	r25, r25
    6268:	1a 94       	dec	r1
    626a:	69 f7       	brne	.-38     	; 0x6246 <__udivmodsi4_loop>
    626c:	60 95       	com	r22
    626e:	70 95       	com	r23
    6270:	80 95       	com	r24
    6272:	90 95       	com	r25
    6274:	9b 01       	movw	r18, r22
    6276:	ac 01       	movw	r20, r24
    6278:	bd 01       	movw	r22, r26
    627a:	cf 01       	movw	r24, r30
    627c:	08 95       	ret

0000627e <_exit>:
    627e:	ff cf       	rjmp	.-2      	; 0x627e <_exit>
