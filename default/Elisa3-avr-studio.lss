
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00005f96  0000602a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005f96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025c  00800324  00800324  0000614e  2**0
                  ALLOC
  3 .stab         0000267c  00000000  00000000  00006150  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008f2  00000000  00000000  000087cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b8  00000000  00000000  000090be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001208  00000000  00000000  00009376  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004a43  00000000  00000000  0000a57e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000181a  00000000  00000000  0000efc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000057bb  00000000  00000000  000107db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007e0  00000000  00000000  00015f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000116b  00000000  00000000  00016778  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017cc  00000000  00000000  000178e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000219  00000000  00000000  000190af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000178  00000000  00000000  000192c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__vector_32>
      84:	0c 94 d9 1e 	jmp	0x3db2	; 0x3db2 <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 36 1e 	jmp	0x3c6c	; 0x3c6c <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 0a 1e 	jmp	0x3c14	; 0x3c14 <__vector_42>
      ac:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	2f 0f       	add	r18, r31
      e6:	13 0f       	add	r17, r19
      e8:	e1 0e       	add	r14, r17
      ea:	a4 0f       	add	r26, r20
      ec:	6e 0f       	add	r22, r30
      ee:	97 0f       	add	r25, r23
      f0:	b8 0e       	add	r11, r24
      f2:	9c 0e       	add	r9, r28
      f4:	6f 0e       	add	r6, r31
      f6:	57 0e       	add	r5, r23
      f8:	f8 0d       	add	r31, r8
      fa:	f8 0d       	add	r31, r8
      fc:	f8 0d       	add	r31, r8
      fe:	f8 0d       	add	r31, r8
     100:	f8 0d       	add	r31, r8
     102:	f8 0d       	add	r31, r8
     104:	4b 0e       	add	r4, r27
     106:	40 0e       	add	r4, r16
     108:	f8 0d       	add	r31, r8
     10a:	f8 0d       	add	r31, r8
     10c:	f8 0d       	add	r31, r8
     10e:	f8 0d       	add	r31, r8
     110:	f8 0d       	add	r31, r8
     112:	f8 0d       	add	r31, r8
     114:	f8 0d       	add	r31, r8
     116:	f8 0d       	add	r31, r8
     118:	f8 0d       	add	r31, r8
     11a:	f8 0d       	add	r31, r8
     11c:	f8 0d       	add	r31, r8
     11e:	f8 0d       	add	r31, r8
     120:	6f 0e       	add	r6, r31
     122:	e1 0e       	add	r14, r17
     124:	34 0e       	add	r3, r20
     126:	2f 0e       	add	r2, r31
     128:	f8 0d       	add	r31, r8
     12a:	f8 0d       	add	r31, r8
     12c:	f8 0d       	add	r31, r8
     12e:	f8 0d       	add	r31, r8
     130:	f8 0d       	add	r31, r8
     132:	f8 0d       	add	r31, r8
     134:	f8 0d       	add	r31, r8
     136:	f8 0d       	add	r31, r8
     138:	f8 0d       	add	r31, r8
     13a:	f8 0d       	add	r31, r8
     13c:	f8 0d       	add	r31, r8
     13e:	f8 0d       	add	r31, r8
     140:	6e 0f       	add	r22, r30
     142:	b8 0e       	add	r11, r24
     144:	f8 0d       	add	r31, r8
     146:	f8 0d       	add	r31, r8
     148:	2f 0f       	add	r18, r31
     14a:	97 0f       	add	r25, r23
     14c:	58 0f       	add	r21, r24
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e6 e9       	ldi	r30, 0x96	; 150
     194:	ff e5       	ldi	r31, 0x5F	; 95
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a4 32       	cpi	r26, 0x24	; 36
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	15 e0       	ldi	r17, 0x05	; 5
     1a4:	a4 e2       	ldi	r26, 0x24	; 36
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a0 38       	cpi	r26, 0x80	; 128
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 ca 2f 	jmp	0x5f94	; 0x5f94 <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	8f 92       	push	r8
     1c0:	9f 92       	push	r9
     1c2:	af 92       	push	r10
     1c4:	bf 92       	push	r11
     1c6:	cf 92       	push	r12
     1c8:	df 92       	push	r13
     1ca:	ef 92       	push	r14
     1cc:	ff 92       	push	r15
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;

	initPeripherals();
     1d6:	0e 94 76 16 	call	0x2cec	; 0x2cec <initPeripherals>

	calibrateSensors();
     1da:	0e 94 3f 24 	call	0x487e	; 0x487e <calibrateSensors>

	initBehaviors();
     1de:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <initBehaviors>

	startTime = getTime100MicroSec();
     1e2:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
     1e6:	7b 01       	movw	r14, r22
     1e8:	8c 01       	movw	r16, r24


int main(void) {

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;
     1ea:	cc 24       	eor	r12, r12
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5 || currentSelector==7) {
				pwm_red = rand() % 255;
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d0 e0       	ldi	r29, 0x00	; 0
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
						pwm_red = 255;
     1f0:	dd 24       	eor	r13, r13
     1f2:	da 94       	dec	r13
						pwm_green = 255;
						pwm_blue = 254;
     1f4:	6e ef       	ldi	r22, 0xFE	; 254
     1f6:	96 2e       	mov	r9, r22
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
     1f8:	52 e0       	ldi	r21, 0x02	; 2
     1fa:	b5 2e       	mov	r11, r21
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
								setLeftSpeed(-20);
								demoStartTime = getTime100MicroSec();
								demoState = 4;
     1fc:	44 e0       	ldi	r20, 0x04	; 4
     1fe:	a4 2e       	mov	r10, r20
							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
								setRightSpeed(20);
								setLeftSpeed(-20);								
								demoStartTime = getTime100MicroSec();
								demoState = 5;							
     200:	35 e0       	ldi	r19, 0x05	; 5
     202:	83 2e       	mov	r8, r19
	startTime = getTime100MicroSec();


	while(1) {

		currentSelector = getSelector();	// update selector position
     204:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <getSelector>
     208:	80 93 3f 05 	sts	0x053F, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     20c:	0e 94 7f 23 	call	0x46fe	; 0x46fe <readAccelXYZ>

		computeAngle();
     210:	0e 94 bb 28 	call	0x5176	; 0x5176 <computeAngle>
	
		endTime = getTime100MicroSec();
     214:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     218:	6e 19       	sub	r22, r14
     21a:	7f 09       	sbc	r23, r15
     21c:	80 0b       	sbc	r24, r16
     21e:	91 0b       	sbc	r25, r17
     220:	6e 31       	cpi	r22, 0x1E	; 30
     222:	2b e4       	ldi	r18, 0x4B	; 75
     224:	72 07       	cpc	r23, r18
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	82 07       	cpc	r24, r18
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	92 07       	cpc	r25, r18
     22e:	08 f0       	brcs	.+2      	; 0x232 <main+0x74>
     230:	73 c0       	rjmp	.+230    	; 0x318 <main+0x15a>

			startTime = getTime100MicroSec();
		}


		handleIRRemoteCommands();
     232:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <handleIRRemoteCommands>


		handleRFCommands();
     236:	0e 94 91 08 	call	0x1122	; 0x1122 <handleRFCommands>

		if(currentSelector!=6 && currentSelector!=15) {
     23a:	80 91 3f 05 	lds	r24, 0x053F
     23e:	86 30       	cpi	r24, 0x06	; 6
     240:	09 f4       	brne	.+2      	; 0x244 <main+0x86>
     242:	86 c0       	rjmp	.+268    	; 0x350 <main+0x192>
     244:	8f 30       	cpi	r24, 0x0F	; 15
     246:	09 f0       	breq	.+2      	; 0x24a <main+0x8c>
     248:	48 c0       	rjmp	.+144    	; 0x2da <main+0x11c>
					break;

		}

		if(currentSelector != 0) {
			handleMotorsWithSpeedController();  
     24a:	0e 94 b8 1b 	call	0x3770	; 0x3770 <handleMotorsWithSpeedController>
     24e:	80 91 3f 05 	lds	r24, 0x053F
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     252:	c8 16       	cp	r12, r24
     254:	b9 f2       	breq	.-82     	; 0x204 <main+0x46>
			disableObstacleAvoidance();
     256:	0e 94 00 21 	call	0x4200	; 0x4200 <disableObstacleAvoidance>
			disableCliffAvoidance();
     25a:	0e 94 07 21 	call	0x420e	; 0x420e <disableCliffAvoidance>
			GREEN_LED0_OFF;
     25e:	80 91 0b 01 	lds	r24, 0x010B
     262:	81 60       	ori	r24, 0x01	; 1
     264:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     268:	80 91 0b 01 	lds	r24, 0x010B
     26c:	82 60       	ori	r24, 0x02	; 2
     26e:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     272:	80 91 0b 01 	lds	r24, 0x010B
     276:	84 60       	ori	r24, 0x04	; 4
     278:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     27c:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     27e:	80 91 0b 01 	lds	r24, 0x010B
     282:	80 61       	ori	r24, 0x10	; 16
     284:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     288:	80 91 0b 01 	lds	r24, 0x010B
     28c:	80 62       	ori	r24, 0x20	; 32
     28e:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     292:	80 91 0b 01 	lds	r24, 0x010B
     296:	80 64       	ori	r24, 0x40	; 64
     298:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     29c:	80 91 0b 01 	lds	r24, 0x010B
     2a0:	80 68       	ori	r24, 0x80	; 128
     2a2:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     2a6:	d0 92 0c 02 	sts	0x020C, r13
			pwm_green = 255;
     2aa:	d0 92 0d 02 	sts	0x020D, r13
			pwm_blue = 255;
     2ae:	d0 92 0e 02 	sts	0x020E, r13
			updateRedLed(pwm_red);
     2b2:	8f ef       	ldi	r24, 0xFF	; 255
     2b4:	0e 94 47 21 	call	0x428e	; 0x428e <updateRedLed>
			updateGreenLed(pwm_green);
     2b8:	80 91 0d 02 	lds	r24, 0x020D
     2bc:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <updateGreenLed>
			updateBlueLed(pwm_blue);
     2c0:	80 91 0e 02 	lds	r24, 0x020E
     2c4:	0e 94 6f 21 	call	0x42de	; 0x42de <updateBlueLed>
			setRightSpeed(0);
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
			setLeftSpeed(0);
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
     2d4:	c0 90 3f 05 	lds	r12, 0x053F
     2d8:	95 cf       	rjmp	.-214    	; 0x204 <main+0x46>


		handleRFCommands();

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
		}

		switch(currentSelector) {
     2e0:	90 91 3f 05 	lds	r25, 0x053F
     2e4:	89 2f       	mov	r24, r25
     2e6:	96 30       	cpi	r25, 0x06	; 6
     2e8:	99 f1       	breq	.+102    	; 0x350 <main+0x192>
     2ea:	97 30       	cpi	r25, 0x07	; 7
     2ec:	08 f0       	brcs	.+2      	; 0x2f0 <main+0x132>
     2ee:	5d c0       	rjmp	.+186    	; 0x3aa <main+0x1ec>
     2f0:	92 30       	cpi	r25, 0x02	; 2
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <main+0x138>
     2f4:	55 c0       	rjmp	.+170    	; 0x3a0 <main+0x1e2>
     2f6:	93 30       	cpi	r25, 0x03	; 3
     2f8:	08 f0       	brcs	.+2      	; 0x2fc <main+0x13e>
     2fa:	4d c1       	rjmp	.+666    	; 0x596 <main+0x3d8>
     2fc:	99 23       	and	r25, r25
     2fe:	09 f4       	brne	.+2      	; 0x302 <main+0x144>
     300:	f9 c0       	rjmp	.+498    	; 0x4f4 <main+0x336>
     302:	91 30       	cpi	r25, 0x01	; 1
     304:	21 f4       	brne	.+8      	; 0x30e <main+0x150>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     306:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <enableObstacleAvoidance>
     30a:	90 91 3f 05 	lds	r25, 0x053F
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector != 0) {
     30e:	99 23       	and	r25, r25
     310:	09 f0       	breq	.+2      	; 0x314 <main+0x156>
     312:	9b cf       	rjmp	.-202    	; 0x24a <main+0x8c>
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	9d cf       	rjmp	.-198    	; 0x252 <main+0x94>

		computeAngle();
	
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     318:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5 || currentSelector==7) {
     31c:	80 91 3f 05 	lds	r24, 0x053F
     320:	98 2f       	mov	r25, r24
     322:	94 50       	subi	r25, 0x04	; 4
     324:	92 30       	cpi	r25, 0x02	; 2
     326:	08 f4       	brcc	.+2      	; 0x32a <main+0x16c>
     328:	86 c0       	rjmp	.+268    	; 0x436 <main+0x278>
     32a:	87 30       	cpi	r24, 0x07	; 7
     32c:	09 f4       	brne	.+2      	; 0x330 <main+0x172>
     32e:	83 c0       	rjmp	.+262    	; 0x436 <main+0x278>
				pwm_red = rand() % 255;
				pwm_green = rand() % 255;
				pwm_blue = rand() % 255;
			} else if(currentSelector==6) {
     330:	86 30       	cpi	r24, 0x06	; 6
     332:	09 f4       	brne	.+2      	; 0x336 <main+0x178>
     334:	18 c1       	rjmp	.+560    	; 0x566 <main+0x3a8>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     336:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
     33a:	7b 01       	movw	r14, r22
     33c:	8c 01       	movw	r16, r24
		}


		handleIRRemoteCommands();
     33e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <handleIRRemoteCommands>


		handleRFCommands();
     342:	0e 94 91 08 	call	0x1122	; 0x1122 <handleRFCommands>

		if(currentSelector!=6 && currentSelector!=15) {
     346:	80 91 3f 05 	lds	r24, 0x053F
     34a:	86 30       	cpi	r24, 0x06	; 6
     34c:	09 f0       	breq	.+2      	; 0x350 <main+0x192>
     34e:	7a cf       	rjmp	.-268    	; 0x244 <main+0x86>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     350:	90 91 17 05 	lds	r25, 0x0517
     354:	91 30       	cpi	r25, 0x01	; 1
     356:	09 f4       	brne	.+2      	; 0x35a <main+0x19c>
     358:	eb c1       	rjmp	.+982    	; 0x730 <main+0x572>
     35a:	91 30       	cpi	r25, 0x01	; 1
     35c:	08 f0       	brcs	.+2      	; 0x360 <main+0x1a2>
     35e:	c9 c1       	rjmp	.+914    	; 0x6f2 <main+0x534>
						case 0:
							setRightSpeed(0);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
							setLeftSpeed(0);
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
							turnOffGreenLeds();
     36c:	0e 94 20 22 	call	0x4440	; 0x4440 <turnOffGreenLeds>
							pwm_red=255;
     370:	d0 92 0c 02 	sts	0x020C, r13
							pwm_green=255;
     374:	d0 92 0d 02 	sts	0x020D, r13
							pwm_blue=255;
     378:	d0 92 0e 02 	sts	0x020E, r13
							updateRedLed(pwm_red);
     37c:	8f ef       	ldi	r24, 0xFF	; 255
     37e:	0e 94 47 21 	call	0x428e	; 0x428e <updateRedLed>
							updateGreenLed(pwm_green);
     382:	80 91 0d 02 	lds	r24, 0x020D
     386:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <updateGreenLed>
							updateBlueLed(pwm_blue);
     38a:	80 91 0e 02 	lds	r24, 0x020E
     38e:	0e 94 6f 21 	call	0x42de	; 0x42de <updateBlueLed>
							LED_IR1_HIGH;
     392:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     394:	45 9a       	sbi	0x08, 5	; 8
     396:	90 91 3f 05 	lds	r25, 0x053F
							break;
     39a:	b9 cf       	rjmp	.-142    	; 0x30e <main+0x150>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     39c:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <enableObstacleAvoidance>
					enableCliffAvoidance();
     3a0:	0e 94 03 21 	call	0x4206	; 0x4206 <enableCliffAvoidance>
     3a4:	90 91 3f 05 	lds	r25, 0x053F
					break;
     3a8:	b2 cf       	rjmp	.-156    	; 0x30e <main+0x150>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     3aa:	9a 30       	cpi	r25, 0x0A	; 10
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <main+0x1f2>
     3ae:	c1 c0       	rjmp	.+386    	; 0x532 <main+0x374>
     3b0:	9b 30       	cpi	r25, 0x0B	; 11
     3b2:	f8 f4       	brcc	.+62     	; 0x3f2 <main+0x234>
     3b4:	98 30       	cpi	r25, 0x08	; 8
     3b6:	09 f4       	brne	.+2      	; 0x3ba <main+0x1fc>
     3b8:	a2 c0       	rjmp	.+324    	; 0x4fe <main+0x340>
     3ba:	99 30       	cpi	r25, 0x09	; 9
     3bc:	08 f4       	brcc	.+2      	; 0x3c0 <main+0x202>
     3be:	51 c0       	rjmp	.+162    	; 0x462 <main+0x2a4>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 9:	if(leftMotSteps <= 3000) {
     3c0:	80 91 db 03 	lds	r24, 0x03DB
     3c4:	90 91 dc 03 	lds	r25, 0x03DC
     3c8:	a0 91 dd 03 	lds	r26, 0x03DD
     3cc:	b0 91 de 03 	lds	r27, 0x03DE
     3d0:	89 3b       	cpi	r24, 0xB9	; 185
     3d2:	4b e0       	ldi	r20, 0x0B	; 11
     3d4:	94 07       	cpc	r25, r20
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	a4 07       	cpc	r26, r20
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	b4 07       	cpc	r27, r20
     3de:	14 f1       	brlt	.+68     	; 0x424 <main+0x266>

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
						setRightSpeed(0);
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
     3ec:	90 91 3f 05 	lds	r25, 0x053F
     3f0:	8e cf       	rjmp	.-228    	; 0x30e <main+0x150>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     3f2:	9c 30       	cpi	r25, 0x0C	; 12
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <main+0x23a>
     3f6:	2a c1       	rjmp	.+596    	; 0x64c <main+0x48e>
     3f8:	9c 30       	cpi	r25, 0x0C	; 12
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <main+0x240>
     3fc:	0d c1       	rjmp	.+538    	; 0x618 <main+0x45a>
     3fe:	9d 30       	cpi	r25, 0x0D	; 13
     400:	09 f0       	breq	.+2      	; 0x404 <main+0x246>
     402:	85 cf       	rjmp	.-246    	; 0x30e <main+0x150>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
     404:	80 91 db 03 	lds	r24, 0x03DB
     408:	90 91 dc 03 	lds	r25, 0x03DC
     40c:	a0 91 dd 03 	lds	r26, 0x03DD
     410:	b0 91 de 03 	lds	r27, 0x03DE
     414:	89 35       	cpi	r24, 0x59	; 89
     416:	4b e1       	ldi	r20, 0x1B	; 27
     418:	94 07       	cpc	r25, r20
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	a4 07       	cpc	r26, r20
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	b4 07       	cpc	r27, r20
     422:	f4 f6       	brge	.-68     	; 0x3e0 <main+0x222>
						setLeftSpeed(40);
     424:	88 e2       	ldi	r24, 0x28	; 40
     426:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
						setRightSpeed(40);
     42a:	88 e2       	ldi	r24, 0x28	; 40
     42c:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
     430:	90 91 3f 05 	lds	r25, 0x053F
     434:	6c cf       	rjmp	.-296    	; 0x30e <main+0x150>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5 || currentSelector==7) {
				pwm_red = rand() % 255;
     436:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <rand>
     43a:	be 01       	movw	r22, r28
     43c:	0e 94 a4 2c 	call	0x5948	; 0x5948 <__divmodhi4>
     440:	80 93 0c 02 	sts	0x020C, r24
				pwm_green = rand() % 255;
     444:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <rand>
     448:	be 01       	movw	r22, r28
     44a:	0e 94 a4 2c 	call	0x5948	; 0x5948 <__divmodhi4>
     44e:	80 93 0d 02 	sts	0x020D, r24
				pwm_blue = rand() % 255;
     452:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <rand>
     456:	be 01       	movw	r22, r28
     458:	0e 94 a4 2c 	call	0x5948	; 0x5948 <__divmodhi4>
     45c:	80 93 0e 02 	sts	0x020E, r24
     460:	6a cf       	rjmp	.-300    	; 0x336 <main+0x178>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     462:	80 91 43 05 	lds	r24, 0x0543
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	09 f4       	brne	.+2      	; 0x46c <main+0x2ae>
     46a:	42 c3       	rjmp	.+1668   	; 0xaf0 <main+0x932>
     46c:	83 30       	cpi	r24, 0x03	; 3
     46e:	08 f0       	brcs	.+2      	; 0x472 <main+0x2b4>
     470:	07 c1       	rjmp	.+526    	; 0x680 <main+0x4c2>
     472:	88 23       	and	r24, r24
     474:	09 f0       	breq	.+2      	; 0x478 <main+0x2ba>
     476:	e1 c2       	rjmp	.+1474   	; 0xa3a <main+0x87c>
						case 0:	// move around
							turnOnGreenLeds();
     478:	0e 94 39 22 	call	0x4472	; 0x4472 <turnOnGreenLeds>
							lineFound = 0;
     47c:	10 92 44 05 	sts	0x0544, r1
							enableObstacleAvoidance();
     480:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <enableObstacleAvoidance>
							setRightSpeed(20);
     484:	84 e1       	ldi	r24, 0x14	; 20
     486:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
							setLeftSpeed(20);
     48a:	84 e1       	ldi	r24, 0x14	; 20
     48c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     490:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
     494:	9b 01       	movw	r18, r22
     496:	ac 01       	movw	r20, r24
     498:	60 93 4b 05 	sts	0x054B, r22
     49c:	70 93 4c 05 	sts	0x054C, r23
     4a0:	80 93 4d 05 	sts	0x054D, r24
     4a4:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     4a8:	80 91 47 05 	lds	r24, 0x0547
     4ac:	90 91 48 05 	lds	r25, 0x0548
     4b0:	a0 91 49 05 	lds	r26, 0x0549
     4b4:	b0 91 4a 05 	lds	r27, 0x054A
     4b8:	28 1b       	sub	r18, r24
     4ba:	39 0b       	sbc	r19, r25
     4bc:	4a 0b       	sbc	r20, r26
     4be:	5b 0b       	sbc	r21, r27
     4c0:	23 33       	cpi	r18, 0x33	; 51
     4c2:	8f ee       	ldi	r24, 0xEF	; 239
     4c4:	38 07       	cpc	r19, r24
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	48 07       	cpc	r20, r24
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	58 07       	cpc	r21, r24
     4ce:	18 f0       	brcs	.+6      	; 0x4d6 <main+0x318>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 43 05 	sts	0x0543, r24
							//pwm_green = 0;
							//pwm_blue = 0;													
							break;							
					}

					updateRedLed(pwm_red);
     4d6:	80 91 0c 02 	lds	r24, 0x020C
     4da:	0e 94 47 21 	call	0x428e	; 0x428e <updateRedLed>
					updateGreenLed(pwm_green);
     4de:	80 91 0d 02 	lds	r24, 0x020D
     4e2:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <updateGreenLed>
					updateBlueLed(pwm_blue);
     4e6:	80 91 0e 02 	lds	r24, 0x020E
     4ea:	0e 94 6f 21 	call	0x42de	; 0x42de <updateBlueLed>
     4ee:	90 91 3f 05 	lds	r25, 0x053F

					break;
     4f2:	0d cf       	rjmp	.-486    	; 0x30e <main+0x150>
		}

		switch(currentSelector) {
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     4f4:	0e 94 8b 1a 	call	0x3516	; 0x3516 <handleMotorsWithNoController>
     4f8:	90 91 3f 05 	lds	r25, 0x053F
					break;
     4fc:	08 cf       	rjmp	.-496    	; 0x30e <main+0x150>
					updateGreenLed(pwm_green);
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	if(leftMotSteps <= 2000) {
     4fe:	80 91 db 03 	lds	r24, 0x03DB
     502:	90 91 dc 03 	lds	r25, 0x03DC
     506:	a0 91 dd 03 	lds	r26, 0x03DD
     50a:	b0 91 de 03 	lds	r27, 0x03DE
     50e:	81 3d       	cpi	r24, 0xD1	; 209
     510:	27 e0       	ldi	r18, 0x07	; 7
     512:	92 07       	cpc	r25, r18
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	a2 07       	cpc	r26, r18
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	b2 07       	cpc	r27, r18
     51c:	0c f0       	brlt	.+2      	; 0x520 <main+0x362>
     51e:	60 cf       	rjmp	.-320    	; 0x3e0 <main+0x222>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     520:	88 e2       	ldi	r24, 0x28	; 40
     522:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
						setRightSpeed(40);
     526:	88 e2       	ldi	r24, 0x28	; 40
     528:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
     52c:	90 91 3f 05 	lds	r25, 0x053F
     530:	ee ce       	rjmp	.-548    	; 0x30e <main+0x150>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 10:if(leftMotSteps <= 4000) {
     532:	80 91 db 03 	lds	r24, 0x03DB
     536:	90 91 dc 03 	lds	r25, 0x03DC
     53a:	a0 91 dd 03 	lds	r26, 0x03DD
     53e:	b0 91 de 03 	lds	r27, 0x03DE
     542:	81 3a       	cpi	r24, 0xA1	; 161
     544:	2f e0       	ldi	r18, 0x0F	; 15
     546:	92 07       	cpc	r25, r18
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	a2 07       	cpc	r26, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	b2 07       	cpc	r27, r18
     550:	0c f0       	brlt	.+2      	; 0x554 <main+0x396>
     552:	46 cf       	rjmp	.-372    	; 0x3e0 <main+0x222>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     554:	88 e2       	ldi	r24, 0x28	; 40
     556:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
						setRightSpeed(40);
     55a:	88 e2       	ldi	r24, 0x28	; 40
     55c:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
     560:	90 91 3f 05 	lds	r25, 0x053F
     564:	d4 ce       	rjmp	.-600    	; 0x30e <main+0x150>
			if(currentSelector==4 || currentSelector==5 || currentSelector==7) {
				pwm_red = rand() % 255;
				pwm_green = rand() % 255;
				pwm_blue = rand() % 255;
			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     566:	80 91 17 05 	lds	r24, 0x0517
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	09 f0       	breq	.+2      	; 0x570 <main+0x3b2>
     56e:	e3 ce       	rjmp	.-570    	; 0x336 <main+0x178>
     570:	90 91 0d 04 	lds	r25, 0x040D
     574:	92 30       	cpi	r25, 0x02	; 2
     576:	08 f0       	brcs	.+2      	; 0x57a <main+0x3bc>
     578:	de ce       	rjmp	.-580    	; 0x336 <main+0x178>
					if(rgbState == 0) {
     57a:	90 91 10 04 	lds	r25, 0x0410
     57e:	99 23       	and	r25, r25
     580:	09 f0       	breq	.+2      	; 0x584 <main+0x3c6>
     582:	93 c3       	rjmp	.+1830   	; 0xcaa <main+0xaec>
						pwm_red = 254;
     584:	90 92 0c 02 	sts	0x020C, r9
						pwm_green = 255;
     588:	d0 92 0d 02 	sts	0x020D, r13
						pwm_blue = 255;
     58c:	d0 92 0e 02 	sts	0x020E, r13
						rgbState = 1;
     590:	80 93 10 04 	sts	0x0410, r24
     594:	d0 ce       	rjmp	.-608    	; 0x336 <main+0x178>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     596:	94 30       	cpi	r25, 0x04	; 4
     598:	d1 f0       	breq	.+52     	; 0x5ce <main+0x410>
     59a:	95 30       	cpi	r25, 0x05	; 5
     59c:	08 f4       	brcc	.+2      	; 0x5a0 <main+0x3e2>
     59e:	fe ce       	rjmp	.-516    	; 0x39c <main+0x1de>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     5a0:	80 91 0c 02 	lds	r24, 0x020C
     5a4:	0e 94 47 21 	call	0x428e	; 0x428e <updateRedLed>
					updateGreenLed(pwm_green);
     5a8:	80 91 0d 02 	lds	r24, 0x020D
     5ac:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <updateGreenLed>
					updateBlueLed(pwm_blue);
     5b0:	80 91 0e 02 	lds	r24, 0x020E
     5b4:	0e 94 6f 21 	call	0x42de	; 0x42de <updateBlueLed>
					enableObstacleAvoidance();
     5b8:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <enableObstacleAvoidance>
					setLeftSpeed(25);
     5bc:	89 e1       	ldi	r24, 0x19	; 25
     5be:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
					setRightSpeed(25);
     5c2:	89 e1       	ldi	r24, 0x19	; 25
     5c4:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
     5c8:	90 91 3f 05 	lds	r25, 0x053F
					break;
     5cc:	a0 ce       	rjmp	.-704    	; 0x30e <main+0x150>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     5ce:	80 91 0b 01 	lds	r24, 0x010B
     5d2:	8e 7f       	andi	r24, 0xFE	; 254
     5d4:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     5d8:	80 91 0b 01 	lds	r24, 0x010B
     5dc:	8d 7f       	andi	r24, 0xFD	; 253
     5de:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     5e2:	80 91 0b 01 	lds	r24, 0x010B
     5e6:	8b 7f       	andi	r24, 0xFB	; 251
     5e8:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     5ec:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     5ee:	80 91 0b 01 	lds	r24, 0x010B
     5f2:	8f 7e       	andi	r24, 0xEF	; 239
     5f4:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     5f8:	80 91 0b 01 	lds	r24, 0x010B
     5fc:	8f 7d       	andi	r24, 0xDF	; 223
     5fe:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     602:	80 91 0b 01 	lds	r24, 0x010B
     606:	8f 7b       	andi	r24, 0xBF	; 191
     608:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     60c:	80 91 0b 01 	lds	r24, 0x010B
     610:	8f 77       	andi	r24, 0x7F	; 127
     612:	80 93 0b 01 	sts	0x010B, r24
     616:	5f cf       	rjmp	.-322    	; 0x4d6 <main+0x318>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 11:if(leftMotSteps <= 5000) {
     618:	80 91 db 03 	lds	r24, 0x03DB
     61c:	90 91 dc 03 	lds	r25, 0x03DC
     620:	a0 91 dd 03 	lds	r26, 0x03DD
     624:	b0 91 de 03 	lds	r27, 0x03DE
     628:	89 38       	cpi	r24, 0x89	; 137
     62a:	43 e1       	ldi	r20, 0x13	; 19
     62c:	94 07       	cpc	r25, r20
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	a4 07       	cpc	r26, r20
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	b4 07       	cpc	r27, r20
     636:	0c f0       	brlt	.+2      	; 0x63a <main+0x47c>
     638:	d3 ce       	rjmp	.-602    	; 0x3e0 <main+0x222>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     63a:	88 e2       	ldi	r24, 0x28	; 40
     63c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
						setRightSpeed(40);
     640:	88 e2       	ldi	r24, 0x28	; 40
     642:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
     646:	90 91 3f 05 	lds	r25, 0x053F
     64a:	61 ce       	rjmp	.-830    	; 0x30e <main+0x150>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     64c:	80 91 db 03 	lds	r24, 0x03DB
     650:	90 91 dc 03 	lds	r25, 0x03DC
     654:	a0 91 dd 03 	lds	r26, 0x03DD
     658:	b0 91 de 03 	lds	r27, 0x03DE
     65c:	81 37       	cpi	r24, 0x71	; 113
     65e:	27 e1       	ldi	r18, 0x17	; 23
     660:	92 07       	cpc	r25, r18
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	a2 07       	cpc	r26, r18
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	b2 07       	cpc	r27, r18
     66a:	0c f4       	brge	.+2      	; 0x66e <main+0x4b0>
     66c:	db ce       	rjmp	.-586    	; 0x424 <main+0x266>
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
						setRightSpeed(0);
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
     67a:	90 91 3f 05 	lds	r25, 0x053F
     67e:	47 ce       	rjmp	.-882    	; 0x30e <main+0x150>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     680:	84 30       	cpi	r24, 0x04	; 4
     682:	09 f4       	brne	.+2      	; 0x686 <main+0x4c8>
     684:	81 c2       	rjmp	.+1282   	; 0xb88 <main+0x9ca>
     686:	84 30       	cpi	r24, 0x04	; 4
     688:	08 f4       	brcc	.+2      	; 0x68c <main+0x4ce>
     68a:	fb c1       	rjmp	.+1014   	; 0xa82 <main+0x8c4>
     68c:	85 30       	cpi	r24, 0x05	; 5
     68e:	09 f0       	breq	.+2      	; 0x692 <main+0x4d4>
     690:	22 cf       	rjmp	.-444    	; 0x4d6 <main+0x318>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     692:	0e 94 20 22 	call	0x4440	; 0x4440 <turnOffGreenLeds>
							demoEndTime = getTime100MicroSec();
     696:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
     69a:	9b 01       	movw	r18, r22
     69c:	ac 01       	movw	r20, r24
     69e:	60 93 4b 05 	sts	0x054B, r22
     6a2:	70 93 4c 05 	sts	0x054C, r23
     6a6:	80 93 4d 05 	sts	0x054D, r24
     6aa:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     6ae:	80 91 47 05 	lds	r24, 0x0547
     6b2:	90 91 48 05 	lds	r25, 0x0548
     6b6:	a0 91 49 05 	lds	r26, 0x0549
     6ba:	b0 91 4a 05 	lds	r27, 0x054A
     6be:	28 1b       	sub	r18, r24
     6c0:	39 0b       	sbc	r19, r25
     6c2:	4a 0b       	sbc	r20, r26
     6c4:	5b 0b       	sbc	r21, r27
     6c6:	2b 32       	cpi	r18, 0x2B	; 43
     6c8:	8c e1       	ldi	r24, 0x1C	; 28
     6ca:	38 07       	cpc	r19, r24
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	48 07       	cpc	r20, r24
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	58 07       	cpc	r21, r24
     6d4:	08 f4       	brcc	.+2      	; 0x6d8 <main+0x51a>
     6d6:	ff ce       	rjmp	.-514    	; 0x4d6 <main+0x318>
								demoStartTime = getTime100MicroSec();
     6d8:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
     6dc:	60 93 47 05 	sts	0x0547, r22
     6e0:	70 93 48 05 	sts	0x0548, r23
     6e4:	80 93 49 05 	sts	0x0549, r24
     6e8:	90 93 4a 05 	sts	0x054A, r25
								demoState = 0;							
     6ec:	10 92 43 05 	sts	0x0543, r1
     6f0:	f2 ce       	rjmp	.-540    	; 0x4d6 <main+0x318>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     6f2:	92 30       	cpi	r25, 0x02	; 2
     6f4:	11 f0       	breq	.+4      	; 0x6fa <main+0x53c>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     6f6:	98 2f       	mov	r25, r24
     6f8:	0a ce       	rjmp	.-1004   	; 0x30e <main+0x150>
     6fa:	90 91 18 05 	lds	r25, 0x0518
     6fe:	99 23       	and	r25, r25
     700:	d1 f3       	breq	.-12     	; 0x6f6 <main+0x538>
								turnOnGreenLeds();
     702:	0e 94 39 22 	call	0x4472	; 0x4472 <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     706:	60 91 0b 04 	lds	r22, 0x040B
     70a:	70 91 0c 04 	lds	r23, 0x040C
     70e:	8e ef       	ldi	r24, 0xFE	; 254
     710:	9f e0       	ldi	r25, 0x0F	; 15
     712:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__eewr_word_m2560>
								turnOffGreenLeds();
     716:	0e 94 20 22 	call	0x4440	; 0x4440 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     71a:	8a ea       	ldi	r24, 0xAA	; 170
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
								addressReceived = 0;
     722:	10 92 18 05 	sts	0x0518, r1
								menuChoice = 0;
     726:	10 92 17 05 	sts	0x0517, r1
     72a:	90 91 3f 05 	lds	r25, 0x053F
     72e:	ef cd       	rjmp	.-1058   	; 0x30e <main+0x150>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     730:	0e 94 39 22 	call	0x4472	; 0x4472 <turnOnGreenLeds>
							updateRedLed(pwm_red);
     734:	80 91 0c 02 	lds	r24, 0x020C
     738:	0e 94 47 21 	call	0x428e	; 0x428e <updateRedLed>
							updateGreenLed(pwm_green);
     73c:	80 91 0d 02 	lds	r24, 0x020D
     740:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <updateGreenLed>
							updateBlueLed(pwm_blue);
     744:	80 91 0e 02 	lds	r24, 0x020E
     748:	0e 94 6f 21 	call	0x42de	; 0x42de <updateBlueLed>
							LED_IR1_LOW;
     74c:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     74e:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     750:	80 91 1a 05 	lds	r24, 0x051A
     754:	88 23       	and	r24, r24
     756:	09 f4       	brne	.+2      	; 0x75a <main+0x59c>
     758:	49 ce       	rjmp	.-878    	; 0x3ec <main+0x22e>
								getDataNow = 0;	
     75a:	10 92 1a 05 	sts	0x051A, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     75e:	80 91 5f 03 	lds	r24, 0x035F
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     768:	80 91 60 03 	lds	r24, 0x0360
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     772:	80 91 2f 03 	lds	r24, 0x032F
     776:	90 91 30 03 	lds	r25, 0x0330
     77a:	61 e0       	ldi	r22, 0x01	; 1
     77c:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     780:	80 91 2f 03 	lds	r24, 0x032F
     784:	90 91 30 03 	lds	r25, 0x0330
     788:	89 2f       	mov	r24, r25
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     790:	80 91 61 03 	lds	r24, 0x0361
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     79a:	80 91 62 03 	lds	r24, 0x0362
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     7a4:	80 91 33 03 	lds	r24, 0x0333
     7a8:	90 91 34 03 	lds	r25, 0x0334
     7ac:	61 e0       	ldi	r22, 0x01	; 1
     7ae:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     7b2:	80 91 33 03 	lds	r24, 0x0333
     7b6:	90 91 34 03 	lds	r25, 0x0334
     7ba:	89 2f       	mov	r24, r25
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     7c2:	80 91 63 03 	lds	r24, 0x0363
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     7cc:	80 91 64 03 	lds	r24, 0x0364
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     7d6:	80 91 37 03 	lds	r24, 0x0337
     7da:	90 91 38 03 	lds	r25, 0x0338
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     7e4:	80 91 37 03 	lds	r24, 0x0337
     7e8:	90 91 38 03 	lds	r25, 0x0338
     7ec:	89 2f       	mov	r24, r25
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     7f4:	80 91 65 03 	lds	r24, 0x0365
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     7fe:	80 91 66 03 	lds	r24, 0x0366
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     808:	80 91 3b 03 	lds	r24, 0x033B
     80c:	90 91 3c 03 	lds	r25, 0x033C
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     816:	80 91 3b 03 	lds	r24, 0x033B
     81a:	90 91 3c 03 	lds	r25, 0x033C
     81e:	89 2f       	mov	r24, r25
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     826:	80 91 67 03 	lds	r24, 0x0367
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     830:	80 91 68 03 	lds	r24, 0x0368
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     83a:	80 91 3f 03 	lds	r24, 0x033F
     83e:	90 91 40 03 	lds	r25, 0x0340
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     848:	80 91 3f 03 	lds	r24, 0x033F
     84c:	90 91 40 03 	lds	r25, 0x0340
     850:	89 2f       	mov	r24, r25
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     858:	80 91 69 03 	lds	r24, 0x0369
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     862:	80 91 6a 03 	lds	r24, 0x036A
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     86c:	80 91 43 03 	lds	r24, 0x0343
     870:	90 91 44 03 	lds	r25, 0x0344
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     87a:	80 91 43 03 	lds	r24, 0x0343
     87e:	90 91 44 03 	lds	r25, 0x0344
     882:	89 2f       	mov	r24, r25
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     88a:	80 91 6b 03 	lds	r24, 0x036B
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     894:	80 91 6c 03 	lds	r24, 0x036C
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     89e:	80 91 47 03 	lds	r24, 0x0347
     8a2:	90 91 48 03 	lds	r25, 0x0348
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     8ac:	80 91 47 03 	lds	r24, 0x0347
     8b0:	90 91 48 03 	lds	r25, 0x0348
     8b4:	89 2f       	mov	r24, r25
     8b6:	61 e0       	ldi	r22, 0x01	; 1
     8b8:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     8bc:	80 91 6d 03 	lds	r24, 0x036D
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     8c6:	80 91 6e 03 	lds	r24, 0x036E
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     8d0:	80 91 4b 03 	lds	r24, 0x034B
     8d4:	90 91 4c 03 	lds	r25, 0x034C
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     8de:	80 91 4b 03 	lds	r24, 0x034B
     8e2:	90 91 4c 03 	lds	r25, 0x034C
     8e6:	89 2f       	mov	r24, r25
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     8ee:	80 91 6f 03 	lds	r24, 0x036F
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     8f8:	80 91 70 03 	lds	r24, 0x0370
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     902:	80 91 4f 03 	lds	r24, 0x034F
     906:	90 91 50 03 	lds	r25, 0x0350
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     910:	80 91 4f 03 	lds	r24, 0x034F
     914:	90 91 50 03 	lds	r25, 0x0350
     918:	89 2f       	mov	r24, r25
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     920:	80 91 71 03 	lds	r24, 0x0371
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     92a:	80 91 72 03 	lds	r24, 0x0372
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     934:	80 91 53 03 	lds	r24, 0x0353
     938:	90 91 54 03 	lds	r25, 0x0354
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     942:	80 91 53 03 	lds	r24, 0x0353
     946:	90 91 54 03 	lds	r25, 0x0354
     94a:	89 2f       	mov	r24, r25
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     952:	80 91 73 03 	lds	r24, 0x0373
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     95c:	80 91 74 03 	lds	r24, 0x0374
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     966:	80 91 57 03 	lds	r24, 0x0357
     96a:	90 91 58 03 	lds	r25, 0x0358
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     974:	80 91 57 03 	lds	r24, 0x0357
     978:	90 91 58 03 	lds	r25, 0x0358
     97c:	89 2f       	mov	r24, r25
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     984:	80 91 75 03 	lds	r24, 0x0375
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     98e:	80 91 76 03 	lds	r24, 0x0376
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     998:	80 91 5b 03 	lds	r24, 0x035B
     99c:	90 91 5c 03 	lds	r25, 0x035C
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     9a6:	80 91 5b 03 	lds	r24, 0x035B
     9aa:	90 91 5c 03 	lds	r25, 0x035C
     9ae:	89 2f       	mov	r24, r25
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     9b6:	80 91 20 05 	lds	r24, 0x0520
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
								usart0Transmit(accX>>8,1);
     9c0:	80 91 21 05 	lds	r24, 0x0521
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     9ca:	80 91 22 05 	lds	r24, 0x0522
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
								usart0Transmit(accY>>8,1);
     9d4:	80 91 23 05 	lds	r24, 0x0523
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     9de:	80 91 24 05 	lds	r24, 0x0524
     9e2:	61 e0       	ldi	r22, 0x01	; 1
     9e4:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     9e8:	80 91 25 05 	lds	r24, 0x0525
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
								usart0Transmit(irCommand,1);
     9f2:	80 91 1b 05 	lds	r24, 0x051B
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
								usart0Transmit(currentSelector,1);
     9fc:	80 91 3f 05 	lds	r24, 0x053F
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     a06:	80 91 03 01 	lds	r24, 0x0103
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	80 72       	andi	r24, 0x20	; 32
     a0e:	90 70       	andi	r25, 0x00	; 0
     a10:	95 95       	asr	r25
     a12:	87 95       	ror	r24
     a14:	95 95       	asr	r25
     a16:	87 95       	ror	r24
     a18:	95 95       	asr	r25
     a1a:	87 95       	ror	r24
     a1c:	95 95       	asr	r25
     a1e:	87 95       	ror	r24
     a20:	95 95       	asr	r25
     a22:	87 95       	ror	r24
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
								usart0Transmit(rfFlags,1);
     a2a:	80 91 0d 04 	lds	r24, 0x040D
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <usart0Transmit>
     a34:	90 91 3f 05 	lds	r25, 0x053F
     a38:	6a cc       	rjmp	.-1836   	; 0x30e <main+0x150>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	09 f0       	breq	.+2      	; 0xa40 <main+0x882>
     a3e:	4b cd       	rjmp	.-1386   	; 0x4d6 <main+0x318>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
     a40:	0e 94 20 22 	call	0x4440	; 0x4440 <turnOffGreenLeds>
							outOfLine = 0;
     a44:	10 92 45 05 	sts	0x0545, r1
							enableObstacleAvoidance();
     a48:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <enableObstacleAvoidance>
							setRightSpeed(20);
     a4c:	84 e1       	ldi	r24, 0x14	; 20
     a4e:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
							setLeftSpeed(20);
     a52:	84 e1       	ldi	r24, 0x14	; 20
     a54:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR) {
     a58:	80 91 71 03 	lds	r24, 0x0371
     a5c:	90 91 72 03 	lds	r25, 0x0372
     a60:	21 e0       	ldi	r18, 0x01	; 1
     a62:	80 39       	cpi	r24, 0x90	; 144
     a64:	92 07       	cpc	r25, r18
     a66:	0c f4       	brge	.+2      	; 0xa6a <main+0x8ac>
     a68:	c5 c0       	rjmp	.+394    	; 0xbf4 <main+0xa36>
     a6a:	80 91 73 03 	lds	r24, 0x0373
     a6e:	90 91 74 03 	lds	r25, 0x0374
     a72:	41 e0       	ldi	r20, 0x01	; 1
     a74:	80 39       	cpi	r24, 0x90	; 144
     a76:	94 07       	cpc	r25, r20
     a78:	0c f4       	brge	.+2      	; 0xa7c <main+0x8be>
     a7a:	bc c0       	rjmp	.+376    	; 0xbf4 <main+0xa36>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
     a7c:	10 92 44 05 	sts	0x0544, r1
     a80:	2a cd       	rjmp	.-1452   	; 0x4d6 <main+0x318>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
     a82:	0e 94 20 22 	call	0x4440	; 0x4440 <turnOffGreenLeds>
							demoEndTime = getTime100MicroSec();
     a86:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
     a8a:	9b 01       	movw	r18, r22
     a8c:	ac 01       	movw	r20, r24
     a8e:	60 93 4b 05 	sts	0x054B, r22
     a92:	70 93 4c 05 	sts	0x054C, r23
     a96:	80 93 4d 05 	sts	0x054D, r24
     a9a:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
     a9e:	80 91 47 05 	lds	r24, 0x0547
     aa2:	90 91 48 05 	lds	r25, 0x0548
     aa6:	a0 91 49 05 	lds	r26, 0x0549
     aaa:	b0 91 4a 05 	lds	r27, 0x054A
     aae:	28 1b       	sub	r18, r24
     ab0:	39 0b       	sbc	r19, r25
     ab2:	4a 0b       	sbc	r20, r26
     ab4:	5b 0b       	sbc	r21, r27
     ab6:	2d 3c       	cpi	r18, 0xCD	; 205
     ab8:	86 e6       	ldi	r24, 0x66	; 102
     aba:	38 07       	cpc	r19, r24
     abc:	84 e0       	ldi	r24, 0x04	; 4
     abe:	48 07       	cpc	r20, r24
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	58 07       	cpc	r21, r24
     ac4:	08 f4       	brcc	.+2      	; 0xac8 <main+0x90a>
     ac6:	c2 c0       	rjmp	.+388    	; 0xc4c <main+0xa8e>
								if(batteryLevel<800) {	// stay in charge if too much discharged
     ac8:	80 91 c3 03 	lds	r24, 0x03C3
     acc:	90 91 c4 03 	lds	r25, 0x03C4
     ad0:	23 e0       	ldi	r18, 0x03	; 3
     ad2:	80 32       	cpi	r24, 0x20	; 32
     ad4:	92 07       	cpc	r25, r18
     ad6:	08 f0       	brcs	.+2      	; 0xada <main+0x91c>
     ad8:	a6 c0       	rjmp	.+332    	; 0xc26 <main+0xa68>
							}
							if(!CHARGE_ON) {
								chargeContact = 0;
								outOfLine = 0;
								demoState = 2;
								demoStartTime = getTime100MicroSec();
     ada:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
     ade:	60 93 47 05 	sts	0x0547, r22
     ae2:	70 93 48 05 	sts	0x0548, r23
     ae6:	80 93 49 05 	sts	0x0549, r24
     aea:	90 93 4a 05 	sts	0x054A, r25
								break;						
     aee:	f3 cc       	rjmp	.-1562   	; 0x4d6 <main+0x318>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOnGreenLeds();
     af0:	0e 94 39 22 	call	0x4472	; 0x4472 <turnOnGreenLeds>
							disableObstacleAvoidance();
     af4:	0e 94 00 21 	call	0x4200	; 0x4200 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
     af8:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
     afc:	9b 01       	movw	r18, r22
     afe:	ac 01       	movw	r20, r24
     b00:	60 93 4b 05 	sts	0x054B, r22
     b04:	70 93 4c 05 	sts	0x054C, r23
     b08:	80 93 4d 05 	sts	0x054D, r24
     b0c:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
     b10:	80 91 47 05 	lds	r24, 0x0547
     b14:	90 91 48 05 	lds	r25, 0x0548
     b18:	a0 91 49 05 	lds	r26, 0x0549
     b1c:	b0 91 4a 05 	lds	r27, 0x054A
     b20:	28 1b       	sub	r18, r24
     b22:	39 0b       	sbc	r19, r25
     b24:	4a 0b       	sbc	r20, r26
     b26:	5b 0b       	sbc	r21, r27
     b28:	23 33       	cpi	r18, 0x33	; 51
     b2a:	8f ee       	ldi	r24, 0xEF	; 239
     b2c:	38 07       	cpc	r19, r24
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	48 07       	cpc	r20, r24
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	58 07       	cpc	r21, r24
     b36:	08 f0       	brcs	.+2      	; 0xb3a <main+0x97c>
     b38:	76 c0       	rjmp	.+236    	; 0xc26 <main+0xa68>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
     b3a:	80 91 03 01 	lds	r24, 0x0103
     b3e:	84 ff       	sbrs	r24, 4
     b40:	90 c0       	rjmp	.+288    	; 0xc62 <main+0xaa4>
								outOfLine = 0;
     b42:	10 92 45 05 	sts	0x0545, r1
								chargeContact++;
     b46:	80 91 46 05 	lds	r24, 0x0546
     b4a:	8f 5f       	subi	r24, 0xFF	; 255
     b4c:	80 93 46 05 	sts	0x0546, r24
								if(chargeContact > 20) {
     b50:	85 31       	cpi	r24, 0x15	; 21
     b52:	08 f0       	brcs	.+2      	; 0xb56 <main+0x998>
     b54:	bf c0       	rjmp	.+382    	; 0xcd4 <main+0xb16>
     b56:	80 91 71 03 	lds	r24, 0x0371
     b5a:	90 91 72 03 	lds	r25, 0x0372
								} else {
									outOfLine = 0;
								}
							}
	
							if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
     b5e:	21 e0       	ldi	r18, 0x01	; 1
     b60:	83 3c       	cpi	r24, 0xC3	; 195
     b62:	92 07       	cpc	r25, r18
     b64:	0c f0       	brlt	.+2      	; 0xb68 <main+0x9aa>
     b66:	97 c0       	rjmp	.+302    	; 0xc96 <main+0xad8>
								setRightSpeed(-10);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
     b68:	80 91 73 03 	lds	r24, 0x0373
     b6c:	90 91 74 03 	lds	r25, 0x0374
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	83 3c       	cpi	r24, 0xC3	; 195
     b74:	94 07       	cpc	r25, r20
     b76:	0c f4       	brge	.+2      	; 0xb7a <main+0x9bc>
     b78:	a6 c0       	rjmp	.+332    	; 0xcc6 <main+0xb08>
								setLeftSpeed(-10);
     b7a:	86 ef       	ldi	r24, 0xF6	; 246
     b7c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
								setRightSpeed(20);
     b80:	84 e1       	ldi	r24, 0x14	; 20
     b82:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
     b86:	a7 cc       	rjmp	.-1714   	; 0x4d6 <main+0x318>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOnGreenLeds();
     b88:	0e 94 39 22 	call	0x4472	; 0x4472 <turnOnGreenLeds>
							demoEndTime = getTime100MicroSec();
     b8c:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
     b90:	9b 01       	movw	r18, r22
     b92:	ac 01       	movw	r20, r24
     b94:	60 93 4b 05 	sts	0x054B, r22
     b98:	70 93 4c 05 	sts	0x054C, r23
     b9c:	80 93 4d 05 	sts	0x054D, r24
     ba0:	90 93 4e 05 	sts	0x054E, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
     ba4:	80 91 47 05 	lds	r24, 0x0547
     ba8:	90 91 48 05 	lds	r25, 0x0548
     bac:	a0 91 49 05 	lds	r26, 0x0549
     bb0:	b0 91 4a 05 	lds	r27, 0x054A
     bb4:	28 1b       	sub	r18, r24
     bb6:	39 0b       	sbc	r19, r25
     bb8:	4a 0b       	sbc	r20, r26
     bba:	5b 0b       	sbc	r21, r27
     bbc:	2f 38       	cpi	r18, 0x8F	; 143
     bbe:	85 e2       	ldi	r24, 0x25	; 37
     bc0:	38 07       	cpc	r19, r24
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	48 07       	cpc	r20, r24
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	58 07       	cpc	r21, r24
     bca:	08 f4       	brcc	.+2      	; 0xbce <main+0xa10>
     bcc:	84 cc       	rjmp	.-1784   	; 0x4d6 <main+0x318>
								setRightSpeed(20);
     bce:	84 e1       	ldi	r24, 0x14	; 20
     bd0:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
								setLeftSpeed(-20);								
     bd4:	8c ee       	ldi	r24, 0xEC	; 236
     bd6:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
     bda:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
     bde:	60 93 47 05 	sts	0x0547, r22
     be2:	70 93 48 05 	sts	0x0548, r23
     be6:	80 93 49 05 	sts	0x0549, r24
     bea:	90 93 4a 05 	sts	0x054A, r25
								demoState = 5;							
     bee:	80 92 43 05 	sts	0x0543, r8
     bf2:	71 cc       	rjmp	.-1822   	; 0x4d6 <main+0x318>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(20);
							setLeftSpeed(20);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR) {
								lineFound++;
     bf4:	80 91 44 05 	lds	r24, 0x0544
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	80 93 44 05 	sts	0x0544, r24
								if(lineFound > 10) {
     bfe:	8b 30       	cpi	r24, 0x0B	; 11
     c00:	08 f4       	brcc	.+2      	; 0xc04 <main+0xa46>
     c02:	69 cc       	rjmp	.-1838   	; 0x4d6 <main+0x318>
									outOfLine = 0;
     c04:	10 92 45 05 	sts	0x0545, r1
									chargeContact = 0;
     c08:	10 92 46 05 	sts	0x0546, r1
									demoStartTime = getTime100MicroSec();
     c0c:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
     c10:	60 93 47 05 	sts	0x0547, r22
     c14:	70 93 48 05 	sts	0x0548, r23
     c18:	80 93 49 05 	sts	0x0549, r24
     c1c:	90 93 4a 05 	sts	0x054A, r25
									demoState = 2;
     c20:	b0 92 43 05 	sts	0x0543, r11
									break;
     c24:	58 cc       	rjmp	.-1872   	; 0x4d6 <main+0x318>
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
								if(batteryLevel<800) {	// stay in charge if too much discharged
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-20);
     c26:	8c ee       	ldi	r24, 0xEC	; 236
     c28:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
									setLeftSpeed(-20);
     c2c:	8c ee       	ldi	r24, 0xEC	; 236
     c2e:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
     c32:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
     c36:	60 93 47 05 	sts	0x0547, r22
     c3a:	70 93 48 05 	sts	0x0548, r23
     c3e:	80 93 49 05 	sts	0x0549, r24
     c42:	90 93 4a 05 	sts	0x054A, r25
									demoState = 4;
     c46:	a0 92 43 05 	sts	0x0543, r10
									break;
     c4a:	45 cc       	rjmp	.-1910   	; 0x4d6 <main+0x318>
								}
							}
							if(!CHARGE_ON) {
     c4c:	80 91 03 01 	lds	r24, 0x0103
     c50:	84 fd       	sbrc	r24, 4
     c52:	41 cc       	rjmp	.-1918   	; 0x4d6 <main+0x318>
								chargeContact = 0;
     c54:	10 92 46 05 	sts	0x0546, r1
								outOfLine = 0;
     c58:	10 92 45 05 	sts	0x0545, r1
								demoState = 2;
     c5c:	b0 92 43 05 	sts	0x0543, r11
     c60:	3c cf       	rjmp	.-392    	; 0xada <main+0x91c>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
     c62:	10 92 46 05 	sts	0x0546, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
     c66:	80 91 71 03 	lds	r24, 0x0371
     c6a:	90 91 72 03 	lds	r25, 0x0372
     c6e:	41 e0       	ldi	r20, 0x01	; 1
     c70:	83 3c       	cpi	r24, 0xC3	; 195
     c72:	94 07       	cpc	r25, r20
     c74:	bc f0       	brlt	.+46     	; 0xca4 <main+0xae6>
     c76:	20 91 73 03 	lds	r18, 0x0373
     c7a:	30 91 74 03 	lds	r19, 0x0374
     c7e:	41 e0       	ldi	r20, 0x01	; 1
     c80:	23 3c       	cpi	r18, 0xC3	; 195
     c82:	34 07       	cpc	r19, r20
     c84:	7c f0       	brlt	.+30     	; 0xca4 <main+0xae6>
									outOfLine++;
     c86:	80 91 45 05 	lds	r24, 0x0545
     c8a:	8f 5f       	subi	r24, 0xFF	; 255
     c8c:	80 93 45 05 	sts	0x0545, r24
									if(outOfLine > 250) {
     c90:	8b 3f       	cpi	r24, 0xFB	; 251
     c92:	08 f0       	brcs	.+2      	; 0xc96 <main+0xad8>
     c94:	1d cc       	rjmp	.-1990   	; 0x4d0 <main+0x312>
									outOfLine = 0;
								}
							}
	
							if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(20);
     c96:	84 e1       	ldi	r24, 0x14	; 20
     c98:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
								setRightSpeed(-10);
     c9c:	86 ef       	ldi	r24, 0xF6	; 246
     c9e:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
     ca2:	19 cc       	rjmp	.-1998   	; 0x4d6 <main+0x318>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
     ca4:	10 92 45 05 	sts	0x0545, r1
     ca8:	5a cf       	rjmp	.-332    	; 0xb5e <main+0x9a0>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
     caa:	91 30       	cpi	r25, 0x01	; 1
     cac:	39 f1       	breq	.+78     	; 0xcfc <main+0xb3e>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
     cae:	92 30       	cpi	r25, 0x02	; 2
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <main+0xaf6>
     cb2:	41 cb       	rjmp	.-2430   	; 0x336 <main+0x178>
						pwm_red = 255;
     cb4:	d0 92 0c 02 	sts	0x020C, r13
						pwm_green = 255;
     cb8:	d0 92 0d 02 	sts	0x020D, r13
						pwm_blue = 254;
     cbc:	90 92 0e 02 	sts	0x020E, r9
						rgbState = 0;
     cc0:	10 92 10 04 	sts	0x0410, r1
     cc4:	38 cb       	rjmp	.-2448   	; 0x336 <main+0x178>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(20);
     cc6:	84 e1       	ldi	r24, 0x14	; 20
     cc8:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
								setLeftSpeed(20);
     ccc:	84 e1       	ldi	r24, 0x14	; 20
     cce:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
     cd2:	01 cc       	rjmp	.-2046   	; 0x4d6 <main+0x318>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <setLeftSpeed>
									setRightSpeed(0);
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <setRightSpeed>
									demoStartTime = getTime100MicroSec();
     ce0:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <getTime100MicroSec>
     ce4:	60 93 47 05 	sts	0x0547, r22
     ce8:	70 93 48 05 	sts	0x0548, r23
     cec:	80 93 49 05 	sts	0x0549, r24
     cf0:	90 93 4a 05 	sts	0x054A, r25
									demoState = 3;
     cf4:	23 e0       	ldi	r18, 0x03	; 3
     cf6:	20 93 43 05 	sts	0x0543, r18
									break;
     cfa:	ed cb       	rjmp	.-2086   	; 0x4d6 <main+0x318>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
     cfc:	d0 92 0c 02 	sts	0x020C, r13
						pwm_green = 254;
     d00:	90 92 0d 02 	sts	0x020D, r9
						pwm_blue = 255;
     d04:	d0 92 0e 02 	sts	0x020E, r13
						rgbState = 2;
     d08:	b0 92 10 04 	sts	0x0410, r11
     d0c:	14 cb       	rjmp	.-2520   	; 0x336 <main+0x178>

00000d0e <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
     d12:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
     d14:	0d b4       	in	r0, 0x2d	; 45
     d16:	07 fc       	sbrc	r0, 7
     d18:	0a c0       	rjmp	.+20     	; 0xd2e <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     d1a:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     d1c:	37 e2       	ldi	r19, 0x27	; 39
     d1e:	80 31       	cpi	r24, 0x10	; 16
     d20:	93 07       	cpc	r25, r19
     d22:	c0 f3       	brcs	.-16     	; 0xd14 <SPI_WAIT+0x6>
			spiCommError = 1;
     d24:	20 93 0e 04 	sts	0x040E, r18
		}
	
		if(SPSR & _BV(SPIF)) {
     d28:	0d b4       	in	r0, 0x2d	; 45
     d2a:	07 fe       	sbrs	r0, 7
     d2c:	f6 cf       	rjmp	.-20     	; 0xd1a <SPI_WAIT+0xc>
			return;
		}
	}
}
     d2e:	08 95       	ret

00000d30 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     d30:	84 b1       	in	r24, 0x04	; 4
     d32:	80 7f       	andi	r24, 0xF0	; 240
     d34:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     d36:	84 b1       	in	r24, 0x04	; 4
     d38:	87 60       	ori	r24, 0x07	; 7
     d3a:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     d3c:	80 e5       	ldi	r24, 0x50	; 80
     d3e:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     d40:	8d b5       	in	r24, 0x2d	; 45
     d42:	81 60       	ori	r24, 0x01	; 1
     d44:	8d bd       	out	0x2d, r24	; 45

}
     d46:	08 95       	ret

00000d48 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     d48:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     d4a:	1d bc       	out	0x2d, r1	; 45
}
     d4c:	08 95       	ret

00000d4e <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     d4e:	44 23       	and	r20, r20
     d50:	09 f1       	breq	.+66     	; 0xd94 <SPI_ReadWrite_Block+0x46>
     d52:	a6 2f       	mov	r26, r22
     d54:	b7 2f       	mov	r27, r23
     d56:	e8 2f       	mov	r30, r24
     d58:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
     d5a:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
     d5c:	21 91       	ld	r18, Z+
     d5e:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     d60:	21 e0       	ldi	r18, 0x01	; 1
     d62:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     d64:	0d b4       	in	r0, 0x2d	; 45
     d66:	07 fc       	sbrc	r0, 7
     d68:	0b c0       	rjmp	.+22     	; 0xd80 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     d6a:	2f 5f       	subi	r18, 0xFF	; 255
     d6c:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
     d6e:	57 e2       	ldi	r21, 0x27	; 39
     d70:	20 31       	cpi	r18, 0x10	; 16
     d72:	35 07       	cpc	r19, r21
     d74:	b8 f3       	brcs	.-18     	; 0xd64 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
     d76:	90 93 0e 04 	sts	0x040E, r25
		}
	
		if(SPSR & _BV(SPIF)) {
     d7a:	0d b4       	in	r0, 0x2d	; 45
     d7c:	07 fe       	sbrs	r0, 7
     d7e:	f5 cf       	rjmp	.-22     	; 0xd6a <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     d80:	20 91 0e 04 	lds	r18, 0x040E
     d84:	22 23       	and	r18, r18
     d86:	31 f4       	brne	.+12     	; 0xd94 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
     d88:	2e b5       	in	r18, 0x2e	; 46
     d8a:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     d8c:	2e 2f       	mov	r18, r30
     d8e:	28 1b       	sub	r18, r24
     d90:	24 17       	cp	r18, r20
     d92:	20 f3       	brcs	.-56     	; 0xd5c <SPI_ReadWrite_Block+0xe>
     d94:	08 95       	ret

00000d96 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     d96:	66 23       	and	r22, r22
     d98:	e9 f0       	breq	.+58     	; 0xdd4 <SPI_Write_Block+0x3e>
     d9a:	e8 2f       	mov	r30, r24
     d9c:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
     d9e:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
     da0:	21 91       	ld	r18, Z+
     da2:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     da4:	21 e0       	ldi	r18, 0x01	; 1
     da6:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     da8:	0d b4       	in	r0, 0x2d	; 45
     daa:	07 fc       	sbrc	r0, 7
     dac:	0b c0       	rjmp	.+22     	; 0xdc4 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     dae:	2f 5f       	subi	r18, 0xFF	; 255
     db0:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
     db2:	47 e2       	ldi	r20, 0x27	; 39
     db4:	20 31       	cpi	r18, 0x10	; 16
     db6:	34 07       	cpc	r19, r20
     db8:	b8 f3       	brcs	.-18     	; 0xda8 <SPI_Write_Block+0x12>
			spiCommError = 1;
     dba:	90 93 0e 04 	sts	0x040E, r25
		}
	
		if(SPSR & _BV(SPIF)) {
     dbe:	0d b4       	in	r0, 0x2d	; 45
     dc0:	07 fe       	sbrs	r0, 7
     dc2:	f5 cf       	rjmp	.-22     	; 0xdae <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     dc4:	20 91 0e 04 	lds	r18, 0x040E
     dc8:	22 23       	and	r18, r18
     dca:	21 f4       	brne	.+8      	; 0xdd4 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     dcc:	2e 2f       	mov	r18, r30
     dce:	28 1b       	sub	r18, r24
     dd0:	26 17       	cp	r18, r22
     dd2:	30 f3       	brcs	.-52     	; 0xda0 <SPI_Write_Block+0xa>
     dd4:	08 95       	ret

00000dd6 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     dd6:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
     ddc:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
     dde:	0d b4       	in	r0, 0x2d	; 45
     de0:	07 fc       	sbrc	r0, 7
     de2:	0a c0       	rjmp	.+20     	; 0xdf8 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     de4:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     de6:	37 e2       	ldi	r19, 0x27	; 39
     de8:	80 31       	cpi	r24, 0x10	; 16
     dea:	93 07       	cpc	r25, r19
     dec:	c0 f3       	brcs	.-16     	; 0xdde <SPI_Write_Byte+0x8>
			spiCommError = 1;
     dee:	20 93 0e 04 	sts	0x040E, r18
		}
	
		if(SPSR & _BV(SPIF)) {
     df2:	0d b4       	in	r0, 0x2d	; 45
     df4:	07 fe       	sbrs	r0, 7
     df6:	f6 cf       	rjmp	.-20     	; 0xde4 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
     df8:	8e b5       	in	r24, 0x2e	; 46
}
     dfa:	08 95       	ret

00000dfc <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <mirf_config+0xa>
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e0a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e0c:	80 e2       	ldi	r24, 0x20	; 32
     e0e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e12:	8d e0       	ldi	r24, 0x0D	; 13
     e14:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     e18:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e1a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e1c:	83 e2       	ldi	r24, 0x23	; 35
     e1e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     e28:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
     e2a:	80 91 0b 04 	lds	r24, 0x040B
     e2e:	90 91 0c 04 	lds	r25, 0x040C
     e32:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
     e34:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     e36:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     e38:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e3a:	80 e3       	ldi	r24, 0x30	; 48
     e3c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     e40:	8e 01       	movw	r16, r28
     e42:	0f 5f       	subi	r16, 0xFF	; 255
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	c8 01       	movw	r24, r16
     e48:	63 e0       	ldi	r22, 0x03	; 3
     e4a:	0e 94 cb 06 	call	0xd96	; 0xd96 <SPI_Write_Block>
    mirf_CSN_hi;
     e4e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     e50:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e52:	8a e2       	ldi	r24, 0x2A	; 42
     e54:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     e58:	c8 01       	movw	r24, r16
     e5a:	63 e0       	ldi	r22, 0x03	; 3
     e5c:	0e 94 cb 06 	call	0xd96	; 0xd96 <SPI_Write_Block>
    mirf_CSN_hi;
     e60:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e62:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e64:	81 e2       	ldi	r24, 0x21	; 33
     e66:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     e70:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e72:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e74:	82 e2       	ldi	r24, 0x22	; 34
     e76:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     e80:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e82:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e84:	84 e2       	ldi	r24, 0x24	; 36
     e86:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e8a:	82 e1       	ldi	r24, 0x12	; 18
     e8c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     e90:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     e92:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     e94:	85 e2       	ldi	r24, 0x25	; 37
     e96:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     e9a:	88 e2       	ldi	r24, 0x28	; 40
     e9c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     ea0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     ea2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     ea4:	81 e3       	ldi	r24, 0x31	; 49
     ea6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     eaa:	8d e0       	ldi	r24, 0x0D	; 13
     eac:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     eb0:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     eb2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     eb4:	80 e5       	ldi	r24, 0x50	; 80
     eb6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     eba:	83 e7       	ldi	r24, 0x73	; 115
     ebc:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     ec0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     ec2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     ec4:	8c e3       	ldi	r24, 0x3C	; 60
     ec6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     ed0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     ed2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     ed4:	8d e3       	ldi	r24, 0x3D	; 61
     ed6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     eda:	86 e0       	ldi	r24, 0x06	; 6
     edc:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     ee0:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     ee2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     ee4:	80 e2       	ldi	r24, 0x20	; 32
     ee6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     eea:	8f e0       	ldi	r24, 0x0F	; 15
     eec:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     ef0:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	08 95       	ret

00000f02 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     f02:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     f04:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     f06:	0e 94 fe 06 	call	0xdfc	; 0xdfc <mirf_config>
}
     f0a:	08 95       	ret

00000f0c <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	ec 01       	movw	r28, r24
    mirf_CE_lo;
     f12:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     f14:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     f16:	8a e2       	ldi	r24, 0x2A	; 42
     f18:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     f1c:	ce 01       	movw	r24, r28
     f1e:	65 e0       	ldi	r22, 0x05	; 5
     f20:	0e 94 cb 06 	call	0xd96	; 0xd96 <SPI_Write_Block>
    mirf_CSN_hi;
     f24:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     f26:	2c 9a       	sbi	0x05, 4	; 5
}
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     f34:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     f36:	80 e3       	ldi	r24, 0x30	; 48
     f38:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     f3c:	ce 01       	movw	r24, r28
     f3e:	65 e0       	ldi	r22, 0x05	; 5
     f40:	0e 94 cb 06 	call	0xd96	; 0xd96 <SPI_Write_Block>
    mirf_CSN_hi;
     f44:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     f4c:	80 91 52 05 	lds	r24, 0x0552
     f50:	88 23       	and	r24, r24
     f52:	11 f0       	breq	.+4      	; 0xf58 <mirf_data_ready+0xc>
     f54:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
     f56:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     f58:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     f60:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     f62:	80 74       	andi	r24, 0x40	; 64
     f64:	08 95       	ret

00000f66 <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	0f 92       	push	r0
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     f70:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     f72:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     f74:	87 e1       	ldi	r24, 0x17	; 23
     f76:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     f7a:	be 01       	movw	r22, r28
     f7c:	6f 5f       	subi	r22, 0xFF	; 255
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	cb 01       	movw	r24, r22
     f82:	41 e0       	ldi	r20, 0x01	; 1
     f84:	0e 94 a7 06 	call	0xd4e	; 0xd4e <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     f88:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f8c:	81 70       	andi	r24, 0x01	; 1
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
     f96:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     f98:	82 ee       	ldi	r24, 0xE2	; 226
     f9a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     f9e:	28 9a       	sbi	0x05, 0	; 5

}
     fa0:	08 95       	ret

00000fa2 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
     fa8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     faa:	81 e6       	ldi	r24, 0x61	; 97
     fac:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     fb0:	ce 01       	movw	r24, r28
     fb2:	be 01       	movw	r22, r28
     fb4:	4d e0       	ldi	r20, 0x0D	; 13
     fb6:	0e 94 a7 06 	call	0xd4e	; 0xd4e <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     fba:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     fbc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     fbe:	87 e2       	ldi	r24, 0x27	; 39
     fc0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     fc4:	80 e4       	ldi	r24, 0x40	; 64
     fc6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     fca:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	0f 92       	push	r0
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
     fdc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     fde:	8f 71       	andi	r24, 0x1F	; 31
     fe0:	80 62       	ori	r24, 0x20	; 32
     fe2:	69 83       	std	Y+1, r22	; 0x01
     fe4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     fe8:	69 81       	ldd	r22, Y+1	; 0x01
     fea:	86 2f       	mov	r24, r22
     fec:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
     ff0:	28 9a       	sbi	0x05, 0	; 5
}
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    100a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    100c:	8f 71       	andi	r24, 0x1F	; 31
    100e:	49 83       	std	Y+1, r20	; 0x01
    1010:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1014:	c8 01       	movw	r24, r16
    1016:	b8 01       	movw	r22, r16
    1018:	49 81       	ldd	r20, Y+1	; 0x01
    101a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    101e:	28 9a       	sbi	0x05, 0	; 5
}
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	0f 92       	push	r0
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    103c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    103e:	8f 71       	andi	r24, 0x1F	; 31
    1040:	80 62       	ori	r24, 0x20	; 32
    1042:	49 83       	std	Y+1, r20	; 0x01
    1044:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1048:	c8 01       	movw	r24, r16
    104a:	49 81       	ldd	r20, Y+1	; 0x01
    104c:	64 2f       	mov	r22, r20
    104e:	0e 94 cb 06 	call	0xd96	; 0xd96 <SPI_Write_Block>
    mirf_CSN_hi;
    1052:	28 9a       	sbi	0x05, 0	; 5
}
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	08 95       	ret

00001060 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	0f 92       	push	r0
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1070:	80 91 52 05 	lds	r24, 0x0552
    1074:	88 23       	and	r24, r24
    1076:	e1 f7       	brne	.-8      	; 0x1070 <mirf_send+0x10>

    mirf_CE_lo;
    1078:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	80 93 52 05 	sts	0x0552, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1080:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1082:	80 e2       	ldi	r24, 0x20	; 32
    1084:	69 83       	std	Y+1, r22	; 0x01
    1086:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    108a:	8a e4       	ldi	r24, 0x4A	; 74
    108c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1090:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1092:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1094:	81 ee       	ldi	r24, 0xE1	; 225
    1096:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    109a:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    109c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    109e:	80 ea       	ldi	r24, 0xA0	; 160
    10a0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    10a4:	c8 01       	movw	r24, r16
    10a6:	69 81       	ldd	r22, Y+1	; 0x01
    10a8:	0e 94 cb 06 	call	0xd96	; 0xd96 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    10ac:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    10ae:	2c 9a       	sbi	0x05, 4	; 5
}
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	08 95       	ret

000010bc <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	0f 92       	push	r0
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	18 2f       	mov	r17, r24
    10d0:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    10d2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    10d4:	81 ee       	ldi	r24, 0xE1	; 225
    10d6:	99 83       	std	Y+1, r25	; 0x01
    10d8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
    10dc:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    10de:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    10e0:	88 ea       	ldi	r24, 0xA8	; 168
    10e2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    10e6:	99 81       	ldd	r25, Y+1	; 0x01
    10e8:	00 23       	and	r16, r16
    10ea:	61 f0       	breq	.+24     	; 0x1104 <writeAckPayload+0x48>
    10ec:	61 2f       	mov	r22, r17
    10ee:	79 2f       	mov	r23, r25
    10f0:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    10f2:	f7 01       	movw	r30, r14
    10f4:	81 91       	ld	r24, Z+
    10f6:	7f 01       	movw	r14, r30
    10f8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    10fc:	8e 2d       	mov	r24, r14
    10fe:	81 1b       	sub	r24, r17
    1100:	80 17       	cp	r24, r16
    1102:	b8 f3       	brcs	.-18     	; 0x10f2 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1104:	28 9a       	sbi	0x05, 0	; 5


}
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	08 95       	ret

00001116 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    1116:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1118:	81 ee       	ldi	r24, 0xE1	; 225
    111a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
    111e:	28 9a       	sbi	0x05, 0	; 5

}
    1120:	08 95       	ret

00001122 <handleRFCommands>:

void handleRFCommands() {
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1128:	80 91 52 05 	lds	r24, 0x0552
    112c:	88 23       	and	r24, r24
    112e:	21 f0       	breq	.+8      	; 0x1138 <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1138:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    113a:	8f ef       	ldi	r24, 0xFF	; 255
    113c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1140:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
    1142:	86 ff       	sbrs	r24, 6
    1144:	f5 cf       	rjmp	.-22     	; 0x1130 <handleRFCommands+0xe>

		rfFlags |= 0x02;
    1146:	80 91 0d 04 	lds	r24, 0x040D
    114a:	82 60       	ori	r24, 0x02	; 2
    114c:	80 93 0d 04 	sts	0x040D, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1150:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1152:	87 e2       	ldi	r24, 0x27	; 39
    1154:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1158:	80 e7       	ldi	r24, 0x70	; 112
    115a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
    115e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    1160:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1162:	81 e6       	ldi	r24, 0x61	; 97
    1164:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1168:	80 e7       	ldi	r24, 0x70	; 112
    116a:	95 e0       	ldi	r25, 0x05	; 5
    116c:	bc 01       	movw	r22, r24
    116e:	4d e0       	ldi	r20, 0x0D	; 13
    1170:	0e 94 a7 06 	call	0xd4e	; 0xd4e <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1174:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1176:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1178:	87 e2       	ldi	r24, 0x27	; 39
    117a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    117e:	80 e4       	ldi	r24, 0x40	; 64
    1180:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1184:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    1186:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1188:	82 ee       	ldi	r24, 0xE2	; 226
    118a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
    118e:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1190:	60 91 70 05 	lds	r22, 0x0570
    1194:	66 23       	and	r22, r22
    1196:	09 f4       	brne	.+2      	; 0x119a <handleRFCommands+0x78>
    1198:	95 c1       	rjmp	.+810    	; 0x14c4 <handleRFCommands+0x3a2>
    119a:	50 91 74 05 	lds	r21, 0x0574
    119e:	40 91 75 05 	lds	r20, 0x0575
    11a2:	e0 91 71 05 	lds	r30, 0x0571
    11a6:	70 91 72 05 	lds	r23, 0x0572

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    11aa:	25 2f       	mov	r18, r21
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	2f 77       	andi	r18, 0x7F	; 127
    11b0:	30 70       	andi	r19, 0x00	; 0
    11b2:	30 93 0a 04 	sts	0x040A, r19
    11b6:	20 93 09 04 	sts	0x0409, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    11ba:	84 2f       	mov	r24, r20
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	8f 77       	andi	r24, 0x7F	; 127
    11c0:	90 70       	andi	r25, 0x00	; 0
    11c2:	90 93 08 04 	sts	0x0408, r25
    11c6:	80 93 07 04 	sts	0x0407, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
    11ca:	57 fd       	sbrc	r21, 7
    11cc:	7f c2       	rjmp	.+1278   	; 0x16cc <handleRFCommands+0x5aa>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
    11ce:	22 0f       	add	r18, r18
    11d0:	33 1f       	adc	r19, r19
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	30 95       	com	r19
    11d8:	21 95       	neg	r18
    11da:	3f 4f       	sbci	r19, 0xFF	; 255
    11dc:	30 93 f8 03 	sts	0x03F8, r19
    11e0:	20 93 f7 03 	sts	0x03F7, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    11e4:	47 fd       	sbrc	r20, 7
    11e6:	7c c2       	rjmp	.+1272   	; 0x16e0 <handleRFCommands+0x5be>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	90 95       	com	r25
    11f2:	81 95       	neg	r24
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	90 93 fa 03 	sts	0x03FA, r25
    11fa:	80 93 f9 03 	sts	0x03F9, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    11fe:	42 e0       	ldi	r20, 0x02	; 2
    1200:	21 30       	cpi	r18, 0x01	; 1
    1202:	34 07       	cpc	r19, r20
    1204:	44 f0       	brlt	.+16     	; 0x1216 <handleRFCommands+0xf4>
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	52 e0       	ldi	r21, 0x02	; 2
    120a:	50 93 f8 03 	sts	0x03F8, r21
    120e:	40 93 f7 03 	sts	0x03F7, r20
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1216:	42 e0       	ldi	r20, 0x02	; 2
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	94 07       	cpc	r25, r20
    121c:	34 f0       	brlt	.+12     	; 0x122a <handleRFCommands+0x108>
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	92 e0       	ldi	r25, 0x02	; 2
    1222:	90 93 fa 03 	sts	0x03FA, r25
    1226:	80 93 f9 03 	sts	0x03F9, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    122a:	4e ef       	ldi	r20, 0xFE	; 254
    122c:	20 30       	cpi	r18, 0x00	; 0
    122e:	34 07       	cpc	r19, r20
    1230:	34 f4       	brge	.+12     	; 0x123e <handleRFCommands+0x11c>
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	5e ef       	ldi	r21, 0xFE	; 254
    1236:	50 93 f8 03 	sts	0x03F8, r21
    123a:	40 93 f7 03 	sts	0x03F7, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    123e:	2e ef       	ldi	r18, 0xFE	; 254
    1240:	80 30       	cpi	r24, 0x00	; 0
    1242:	92 07       	cpc	r25, r18
    1244:	34 f4       	brge	.+12     	; 0x1252 <handleRFCommands+0x130>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	9e ef       	ldi	r25, 0xFE	; 254
    124a:	90 93 fa 03 	sts	0x03FA, r25
    124e:	80 93 f9 03 	sts	0x03F9, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    1252:	26 2f       	mov	r18, r22
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	30 93 69 05 	sts	0x0569, r19
    125a:	20 93 68 05 	sts	0x0568, r18
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	f0 93 6b 05 	sts	0x056B, r31
    1264:	e0 93 6a 05 	sts	0x056A, r30
    1268:	c7 2f       	mov	r28, r23
    126a:	d0 e0       	ldi	r29, 0x00	; 0
    126c:	d0 93 6d 05 	sts	0x056D, r29
    1270:	c0 93 6c 05 	sts	0x056C, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1274:	92 2f       	mov	r25, r18
    1276:	88 27       	eor	r24, r24
    1278:	82 1b       	sub	r24, r18
    127a:	93 0b       	sbc	r25, r19
    127c:	24 e6       	ldi	r18, 0x64	; 100
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	b9 01       	movw	r22, r18
    1282:	0e 94 90 2c 	call	0x5920	; 0x5920 <__udivmodhi4>
    1286:	16 2f       	mov	r17, r22
    1288:	10 95       	com	r17
    128a:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    128e:	5e 2f       	mov	r21, r30
    1290:	44 27       	eor	r20, r20
    1292:	4e 1b       	sub	r20, r30
    1294:	5f 0b       	sbc	r21, r31
    1296:	ca 01       	movw	r24, r20
    1298:	b9 01       	movw	r22, r18
    129a:	0e 94 90 2c 	call	0x5920	; 0x5920 <__udivmodhi4>
    129e:	60 95       	com	r22
    12a0:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    12a4:	5c 2f       	mov	r21, r28
    12a6:	44 27       	eor	r20, r20
    12a8:	4c 1b       	sub	r20, r28
    12aa:	5d 0b       	sbc	r21, r29
    12ac:	ca 01       	movw	r24, r20
    12ae:	b9 01       	movw	r22, r18
    12b0:	0e 94 90 2c 	call	0x5920	; 0x5920 <__udivmodhi4>
    12b4:	60 95       	com	r22
    12b6:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    12ba:	81 2f       	mov	r24, r17
    12bc:	0e 94 47 21 	call	0x428e	; 0x428e <updateRedLed>
		updateGreenLed(pwm_green);
    12c0:	80 91 0d 02 	lds	r24, 0x020D
    12c4:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <updateGreenLed>
		updateBlueLed(pwm_blue);
    12c8:	80 91 0e 02 	lds	r24, 0x020E
    12cc:	0e 94 6f 21 	call	0x42de	; 0x42de <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    12d0:	80 91 73 05 	lds	r24, 0x0573
    12d4:	80 ff       	sbrs	r24, 0
    12d6:	02 c1       	rjmp	.+516    	; 0x14dc <handleRFCommands+0x3ba>
			LED_IR1_LOW;
    12d8:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    12da:	81 ff       	sbrs	r24, 1
    12dc:	02 c1       	rjmp	.+516    	; 0x14e2 <handleRFCommands+0x3c0>
			LED_IR2_LOW;
    12de:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    12e0:	98 2f       	mov	r25, r24
    12e2:	82 ff       	sbrs	r24, 2
    12e4:	02 c1       	rjmp	.+516    	; 0x14ea <handleRFCommands+0x3c8>
			irEnabled = 1;
    12e6:	21 e0       	ldi	r18, 0x01	; 1
    12e8:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    12ec:	84 fd       	sbrc	r24, 4
    12ee:	01 c1       	rjmp	.+514    	; 0x14f2 <handleRFCommands+0x3d0>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    12f0:	86 ff       	sbrs	r24, 6
    12f2:	06 c1       	rjmp	.+524    	; 0x1500 <handleRFCommands+0x3de>
			obstacleAvoidanceEnabled = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 4f 05 	sts	0x054F, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    12fa:	97 fd       	sbrc	r25, 7
    12fc:	05 c1       	rjmp	.+522    	; 0x1508 <handleRFCommands+0x3e6>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    12fe:	10 92 50 05 	sts	0x0550, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1302:	80 91 76 05 	lds	r24, 0x0576
    1306:	80 ff       	sbrs	r24, 0
    1308:	06 c1       	rjmp	.+524    	; 0x1516 <handleRFCommands+0x3f4>
				GREEN_LED0_ON;
    130a:	80 91 0b 01 	lds	r24, 0x010B
    130e:	8e 7f       	andi	r24, 0xFE	; 254
    1310:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1314:	80 91 76 05 	lds	r24, 0x0576
    1318:	81 ff       	sbrs	r24, 1
    131a:	06 c1       	rjmp	.+524    	; 0x1528 <handleRFCommands+0x406>
				GREEN_LED1_ON;
    131c:	80 91 0b 01 	lds	r24, 0x010B
    1320:	8d 7f       	andi	r24, 0xFD	; 253
    1322:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1326:	80 91 76 05 	lds	r24, 0x0576
    132a:	82 ff       	sbrs	r24, 2
    132c:	06 c1       	rjmp	.+524    	; 0x153a <handleRFCommands+0x418>
				GREEN_LED2_ON;
    132e:	80 91 0b 01 	lds	r24, 0x010B
    1332:	8b 7f       	andi	r24, 0xFB	; 251
    1334:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1338:	80 91 76 05 	lds	r24, 0x0576
    133c:	83 ff       	sbrs	r24, 3
    133e:	06 c1       	rjmp	.+524    	; 0x154c <handleRFCommands+0x42a>
				GREEN_LED3_ON;
    1340:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    1342:	80 91 76 05 	lds	r24, 0x0576
    1346:	84 ff       	sbrs	r24, 4
    1348:	06 c1       	rjmp	.+524    	; 0x1556 <handleRFCommands+0x434>
				GREEN_LED4_ON;
    134a:	80 91 0b 01 	lds	r24, 0x010B
    134e:	8f 7e       	andi	r24, 0xEF	; 239
    1350:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    1354:	80 91 76 05 	lds	r24, 0x0576
    1358:	85 ff       	sbrs	r24, 5
    135a:	06 c1       	rjmp	.+524    	; 0x1568 <handleRFCommands+0x446>
				GREEN_LED5_ON;
    135c:	80 91 0b 01 	lds	r24, 0x010B
    1360:	8f 7d       	andi	r24, 0xDF	; 223
    1362:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    1366:	80 91 76 05 	lds	r24, 0x0576
    136a:	86 ff       	sbrs	r24, 6
    136c:	06 c1       	rjmp	.+524    	; 0x157a <handleRFCommands+0x458>
				GREEN_LED6_ON;
    136e:	80 91 0b 01 	lds	r24, 0x010B
    1372:	8f 7b       	andi	r24, 0xBF	; 191
    1374:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    1378:	80 91 76 05 	lds	r24, 0x0576
    137c:	87 fd       	sbrc	r24, 7
    137e:	06 c1       	rjmp	.+524    	; 0x158c <handleRFCommands+0x46a>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    1380:	80 91 0b 01 	lds	r24, 0x010B
    1384:	80 68       	ori	r24, 0x80	; 128
    1386:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    138a:	80 91 0b 02 	lds	r24, 0x020B
    138e:	80 93 58 05 	sts	0x0558, r24

		switch(packetId) {
    1392:	85 30       	cpi	r24, 0x05	; 5
    1394:	09 f4       	brne	.+2      	; 0x1398 <handleRFCommands+0x276>
    1396:	06 c1       	rjmp	.+524    	; 0x15a4 <handleRFCommands+0x482>
    1398:	86 30       	cpi	r24, 0x06	; 6
    139a:	08 f0       	brcs	.+2      	; 0x139e <handleRFCommands+0x27c>
    139c:	5f c1       	rjmp	.+702    	; 0x165c <handleRFCommands+0x53a>
    139e:	83 30       	cpi	r24, 0x03	; 3
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <handleRFCommands+0x282>
    13a2:	0e c2       	rjmp	.+1052   	; 0x17c0 <handleRFCommands+0x69e>
    13a4:	84 30       	cpi	r24, 0x04	; 4
    13a6:	09 f0       	breq	.+2      	; 0x13aa <handleRFCommands+0x288>
    13a8:	3f c0       	rjmp	.+126    	; 0x1428 <handleRFCommands+0x306>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    13aa:	90 91 67 03 	lds	r25, 0x0367
    13ae:	80 91 68 03 	lds	r24, 0x0368
    13b2:	90 93 59 05 	sts	0x0559, r25
				ackPayload[2] = proximityResult[4]>>8;
    13b6:	80 93 5a 05 	sts	0x055A, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    13ba:	90 91 6f 03 	lds	r25, 0x036F
    13be:	80 91 70 03 	lds	r24, 0x0370
    13c2:	90 93 5b 05 	sts	0x055B, r25
				ackPayload[4] = proximityResult[8]>>8;
    13c6:	80 93 5c 05 	sts	0x055C, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    13ca:	90 91 71 03 	lds	r25, 0x0371
    13ce:	80 91 72 03 	lds	r24, 0x0372
    13d2:	90 93 5d 05 	sts	0x055D, r25
				ackPayload[6] = proximityResult[9]>>8;
    13d6:	80 93 5e 05 	sts	0x055E, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    13da:	90 91 73 03 	lds	r25, 0x0373
    13de:	80 91 74 03 	lds	r24, 0x0374
    13e2:	90 93 5f 05 	sts	0x055F, r25
				ackPayload[8] = proximityResult[10]>>8;
    13e6:	80 93 60 05 	sts	0x0560, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    13ea:	90 91 75 03 	lds	r25, 0x0375
    13ee:	80 91 76 03 	lds	r24, 0x0376
    13f2:	90 93 61 05 	sts	0x0561, r25
				ackPayload[10] = proximityResult[11]>>8;
    13f6:	80 93 62 05 	sts	0x0562, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    13fa:	90 91 20 05 	lds	r25, 0x0520
    13fe:	80 91 21 05 	lds	r24, 0x0521
    1402:	90 93 63 05 	sts	0x0563, r25
				ackPayload[12] = accX>>8;
    1406:	80 93 64 05 	sts	0x0564, r24
				ackPayload[13] = accY&0xFF;
    140a:	90 91 22 05 	lds	r25, 0x0522
    140e:	80 91 23 05 	lds	r24, 0x0523
    1412:	90 93 65 05 	sts	0x0565, r25
				ackPayload[14] = accY>>8;
    1416:	80 93 66 05 	sts	0x0566, r24
				ackPayload[15] = irCommand;
    141a:	80 91 1b 05 	lds	r24, 0x051B
    141e:	80 93 67 05 	sts	0x0567, r24
				packetId = 5;
    1422:	85 e0       	ldi	r24, 0x05	; 5
    1424:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
    1428:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    142a:	81 ee       	ldi	r24, 0xE1	; 225
    142c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    mirf_CSN_hi;
    1430:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1432:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1434:	88 ea       	ldi	r24, 0xA8	; 168
    1436:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    143a:	80 91 58 05 	lds	r24, 0x0558
    143e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    1442:	80 91 59 05 	lds	r24, 0x0559
    1446:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    144a:	80 91 5a 05 	lds	r24, 0x055A
    144e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    1452:	80 91 5b 05 	lds	r24, 0x055B
    1456:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    145a:	80 91 5c 05 	lds	r24, 0x055C
    145e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    1462:	80 91 5d 05 	lds	r24, 0x055D
    1466:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    146a:	80 91 5e 05 	lds	r24, 0x055E
    146e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    1472:	80 91 5f 05 	lds	r24, 0x055F
    1476:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    147a:	80 91 60 05 	lds	r24, 0x0560
    147e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    1482:	80 91 61 05 	lds	r24, 0x0561
    1486:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    148a:	80 91 62 05 	lds	r24, 0x0562
    148e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    1492:	80 91 63 05 	lds	r24, 0x0563
    1496:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    149a:	80 91 64 05 	lds	r24, 0x0564
    149e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    14a2:	80 91 65 05 	lds	r24, 0x0565
    14a6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    14aa:	80 91 66 05 	lds	r24, 0x0566
    14ae:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
    14b2:	80 91 67 05 	lds	r24, 0x0567
    14b6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    14ba:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    14c4:	e0 91 71 05 	lds	r30, 0x0571
    14c8:	ee 23       	and	r30, r30
    14ca:	09 f4       	brne	.+2      	; 0x14ce <handleRFCommands+0x3ac>
    14cc:	12 c1       	rjmp	.+548    	; 0x16f2 <handleRFCommands+0x5d0>
    14ce:	50 91 74 05 	lds	r21, 0x0574
    14d2:	40 91 75 05 	lds	r20, 0x0575
    14d6:	70 91 72 05 	lds	r23, 0x0572
    14da:	67 ce       	rjmp	.-818    	; 0x11aa <handleRFCommands+0x88>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    14dc:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    14de:	81 fd       	sbrc	r24, 1
    14e0:	fe ce       	rjmp	.-516    	; 0x12de <handleRFCommands+0x1bc>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    14e2:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    14e4:	98 2f       	mov	r25, r24
    14e6:	82 fd       	sbrc	r24, 2
    14e8:	fe ce       	rjmp	.-516    	; 0x12e6 <handleRFCommands+0x1c4>
			irEnabled = 1;
		} else {
			irEnabled = 0;
    14ea:	10 92 12 02 	sts	0x0212, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    14ee:	84 ff       	sbrs	r24, 4
    14f0:	ff ce       	rjmp	.-514    	; 0x12f0 <handleRFCommands+0x1ce>
			calibrateSensors();
    14f2:	0e 94 3f 24 	call	0x487e	; 0x487e <calibrateSensors>
    14f6:	90 91 73 05 	lds	r25, 0x0573
    14fa:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    14fc:	86 fd       	sbrc	r24, 6
    14fe:	fa ce       	rjmp	.-524    	; 0x12f4 <handleRFCommands+0x1d2>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    1500:	10 92 4f 05 	sts	0x054F, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1504:	97 ff       	sbrs	r25, 7
    1506:	fb ce       	rjmp	.-522    	; 0x12fe <handleRFCommands+0x1dc>
			cliffAvoidanceEnabled = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	80 93 50 05 	sts	0x0550, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    150e:	80 91 76 05 	lds	r24, 0x0576
    1512:	80 fd       	sbrc	r24, 0
    1514:	fa ce       	rjmp	.-524    	; 0x130a <handleRFCommands+0x1e8>
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    1516:	80 91 0b 01 	lds	r24, 0x010B
    151a:	81 60       	ori	r24, 0x01	; 1
    151c:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1520:	80 91 76 05 	lds	r24, 0x0576
    1524:	81 fd       	sbrc	r24, 1
    1526:	fa ce       	rjmp	.-524    	; 0x131c <handleRFCommands+0x1fa>
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    1528:	80 91 0b 01 	lds	r24, 0x010B
    152c:	82 60       	ori	r24, 0x02	; 2
    152e:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1532:	80 91 76 05 	lds	r24, 0x0576
    1536:	82 fd       	sbrc	r24, 2
    1538:	fa ce       	rjmp	.-524    	; 0x132e <handleRFCommands+0x20c>
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    153a:	80 91 0b 01 	lds	r24, 0x010B
    153e:	84 60       	ori	r24, 0x04	; 4
    1540:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1544:	80 91 76 05 	lds	r24, 0x0576
    1548:	83 fd       	sbrc	r24, 3
    154a:	fa ce       	rjmp	.-524    	; 0x1340 <handleRFCommands+0x21e>
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    154c:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
    154e:	80 91 76 05 	lds	r24, 0x0576
    1552:	84 fd       	sbrc	r24, 4
    1554:	fa ce       	rjmp	.-524    	; 0x134a <handleRFCommands+0x228>
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    1556:	80 91 0b 01 	lds	r24, 0x010B
    155a:	80 61       	ori	r24, 0x10	; 16
    155c:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
    1560:	80 91 76 05 	lds	r24, 0x0576
    1564:	85 fd       	sbrc	r24, 5
    1566:	fa ce       	rjmp	.-524    	; 0x135c <handleRFCommands+0x23a>
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    1568:	80 91 0b 01 	lds	r24, 0x010B
    156c:	80 62       	ori	r24, 0x20	; 32
    156e:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
    1572:	80 91 76 05 	lds	r24, 0x0576
    1576:	86 fd       	sbrc	r24, 6
    1578:	fa ce       	rjmp	.-524    	; 0x136e <handleRFCommands+0x24c>
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    157a:	80 91 0b 01 	lds	r24, 0x010B
    157e:	80 64       	ori	r24, 0x40	; 64
    1580:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
    1584:	80 91 76 05 	lds	r24, 0x0576
    1588:	87 ff       	sbrs	r24, 7
    158a:	fa ce       	rjmp	.-524    	; 0x1380 <handleRFCommands+0x25e>
				GREEN_LED7_ON;
    158c:	80 91 0b 01 	lds	r24, 0x010B
    1590:	8f 77       	andi	r24, 0x7F	; 127
    1592:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1596:	80 91 0b 02 	lds	r24, 0x020B
    159a:	80 93 58 05 	sts	0x0558, r24

		switch(packetId) {
    159e:	85 30       	cpi	r24, 0x05	; 5
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <handleRFCommands+0x482>
    15a2:	fa ce       	rjmp	.-524    	; 0x1398 <handleRFCommands+0x276>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    15a4:	80 91 2f 03 	lds	r24, 0x032F
    15a8:	90 91 30 03 	lds	r25, 0x0330
    15ac:	80 93 59 05 	sts	0x0559, r24
				ackPayload[2] = proximityValue[0]>>8;
    15b0:	80 91 2f 03 	lds	r24, 0x032F
    15b4:	90 91 30 03 	lds	r25, 0x0330
    15b8:	90 93 5a 05 	sts	0x055A, r25
				ackPayload[3] = proximityValue[2]&0xFF;
    15bc:	80 91 33 03 	lds	r24, 0x0333
    15c0:	90 91 34 03 	lds	r25, 0x0334
    15c4:	80 93 5b 05 	sts	0x055B, r24
				ackPayload[4] = proximityValue[2]>>8;
    15c8:	80 91 33 03 	lds	r24, 0x0333
    15cc:	90 91 34 03 	lds	r25, 0x0334
    15d0:	90 93 5c 05 	sts	0x055C, r25
				ackPayload[5] = proximityValue[4]&0xFF;
    15d4:	80 91 37 03 	lds	r24, 0x0337
    15d8:	90 91 38 03 	lds	r25, 0x0338
    15dc:	80 93 5d 05 	sts	0x055D, r24
				ackPayload[6] = proximityValue[4]>>8;
    15e0:	80 91 37 03 	lds	r24, 0x0337
    15e4:	90 91 38 03 	lds	r25, 0x0338
    15e8:	90 93 5e 05 	sts	0x055E, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    15ec:	80 91 3b 03 	lds	r24, 0x033B
    15f0:	90 91 3c 03 	lds	r25, 0x033C
    15f4:	80 93 5f 05 	sts	0x055F, r24
				ackPayload[8] = proximityValue[6]>>8;
    15f8:	80 91 3b 03 	lds	r24, 0x033B
    15fc:	90 91 3c 03 	lds	r25, 0x033C
    1600:	90 93 60 05 	sts	0x0560, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    1604:	80 91 43 03 	lds	r24, 0x0343
    1608:	90 91 44 03 	lds	r25, 0x0344
    160c:	80 93 61 05 	sts	0x0561, r24
				ackPayload[10] = proximityValue[10]>>8;
    1610:	80 91 43 03 	lds	r24, 0x0343
    1614:	90 91 44 03 	lds	r25, 0x0344
    1618:	90 93 62 05 	sts	0x0562, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    161c:	80 91 47 03 	lds	r24, 0x0347
    1620:	90 91 48 03 	lds	r25, 0x0348
    1624:	80 93 63 05 	sts	0x0563, r24
				ackPayload[12] = proximityValue[12]>>8;
    1628:	80 91 47 03 	lds	r24, 0x0347
    162c:	90 91 48 03 	lds	r25, 0x0348
    1630:	90 93 64 05 	sts	0x0564, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    1634:	80 91 4b 03 	lds	r24, 0x034B
    1638:	90 91 4c 03 	lds	r25, 0x034C
    163c:	80 93 65 05 	sts	0x0565, r24
				ackPayload[14] = proximityValue[14]>>8;
    1640:	80 91 4b 03 	lds	r24, 0x034B
    1644:	90 91 4c 03 	lds	r25, 0x034C
    1648:	90 93 66 05 	sts	0x0566, r25
				ackPayload[15] = currentSelector;
    164c:	80 91 3f 05 	lds	r24, 0x053F
    1650:	80 93 67 05 	sts	0x0567, r24
				packetId = 6;
    1654:	86 e0       	ldi	r24, 0x06	; 6
    1656:	80 93 0b 02 	sts	0x020B, r24
				break;
    165a:	e6 ce       	rjmp	.-564    	; 0x1428 <handleRFCommands+0x306>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    165c:	86 30       	cpi	r24, 0x06	; 6
    165e:	09 f4       	brne	.+2      	; 0x1662 <handleRFCommands+0x540>
    1660:	5d c0       	rjmp	.+186    	; 0x171c <handleRFCommands+0x5fa>
    1662:	87 30       	cpi	r24, 0x07	; 7
    1664:	09 f0       	breq	.+2      	; 0x1668 <handleRFCommands+0x546>
    1666:	e0 ce       	rjmp	.-576    	; 0x1428 <handleRFCommands+0x306>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = leftMotSteps&0xFF;
    1668:	30 91 db 03 	lds	r19, 0x03DB
    166c:	20 91 dc 03 	lds	r18, 0x03DC
    1670:	90 91 dd 03 	lds	r25, 0x03DD
    1674:	80 91 de 03 	lds	r24, 0x03DE
    1678:	30 93 59 05 	sts	0x0559, r19
				ackPayload[2] = leftMotSteps>>8;
    167c:	20 93 5a 05 	sts	0x055A, r18
				ackPayload[3] = leftMotSteps>>16;
    1680:	90 93 5b 05 	sts	0x055B, r25
				ackPayload[4] = leftMotSteps>>24;
    1684:	80 93 5c 05 	sts	0x055C, r24
				ackPayload[5] = rightMotSteps&0xFF;
    1688:	30 91 d7 03 	lds	r19, 0x03D7
    168c:	20 91 d8 03 	lds	r18, 0x03D8
    1690:	90 91 d9 03 	lds	r25, 0x03D9
    1694:	80 91 da 03 	lds	r24, 0x03DA
    1698:	30 93 5d 05 	sts	0x055D, r19
				ackPayload[6] = rightMotSteps>>8;
    169c:	20 93 5e 05 	sts	0x055E, r18
				ackPayload[7] = rightMotSteps>>16;
    16a0:	90 93 5f 05 	sts	0x055F, r25
				ackPayload[8] = rightMotSteps>>24;
    16a4:	80 93 60 05 	sts	0x0560, r24
				ackPayload[9] = 0;
    16a8:	10 92 61 05 	sts	0x0561, r1
				ackPayload[10] = 0;
    16ac:	10 92 62 05 	sts	0x0562, r1
				ackPayload[11] = 0;
    16b0:	10 92 63 05 	sts	0x0563, r1
				ackPayload[12] = 0;
    16b4:	10 92 64 05 	sts	0x0564, r1
				ackPayload[13] = 0;
    16b8:	10 92 65 05 	sts	0x0565, r1
				ackPayload[14] = 0;
    16bc:	10 92 66 05 	sts	0x0566, r1
				ackPayload[15] = 0;
    16c0:	10 92 67 05 	sts	0x0567, r1
				packetId = 3;
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	80 93 0b 02 	sts	0x020B, r24
				break;
    16ca:	ae ce       	rjmp	.-676    	; 0x1428 <handleRFCommands+0x306>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    16cc:	22 0f       	add	r18, r18
    16ce:	33 1f       	adc	r19, r19
    16d0:	22 0f       	add	r18, r18
    16d2:	33 1f       	adc	r19, r19
    16d4:	30 93 f8 03 	sts	0x03F8, r19
    16d8:	20 93 f7 03 	sts	0x03F7, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    16dc:	47 ff       	sbrs	r20, 7
    16de:	84 cd       	rjmp	.-1272   	; 0x11e8 <handleRFCommands+0xc6>
			pwm_left_desired = speedl<<2;
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	90 93 fa 03 	sts	0x03FA, r25
    16ec:	80 93 f9 03 	sts	0x03F9, r24
    16f0:	86 cd       	rjmp	.-1268   	; 0x11fe <handleRFCommands+0xdc>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    16f2:	70 91 72 05 	lds	r23, 0x0572
    16f6:	77 23       	and	r23, r23
    16f8:	61 f4       	brne	.+24     	; 0x1712 <handleRFCommands+0x5f0>
    16fa:	80 91 73 05 	lds	r24, 0x0573
    16fe:	88 30       	cpi	r24, 0x08	; 8
    1700:	41 f4       	brne	.+16     	; 0x1712 <handleRFCommands+0x5f0>
    1702:	50 91 74 05 	lds	r21, 0x0574
    1706:	55 23       	and	r21, r21
    1708:	09 f4       	brne	.+2      	; 0x170c <handleRFCommands+0x5ea>
    170a:	c0 c0       	rjmp	.+384    	; 0x188c <handleRFCommands+0x76a>
    170c:	40 91 75 05 	lds	r20, 0x0575
    1710:	4c cd       	rjmp	.-1384   	; 0x11aa <handleRFCommands+0x88>
    1712:	50 91 74 05 	lds	r21, 0x0574
    1716:	40 91 75 05 	lds	r20, 0x0575
    171a:	47 cd       	rjmp	.-1394   	; 0x11aa <handleRFCommands+0x88>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    171c:	80 91 3f 03 	lds	r24, 0x033F
    1720:	90 91 40 03 	lds	r25, 0x0340
    1724:	80 93 59 05 	sts	0x0559, r24
				ackPayload[2] = proximityValue[8]>>8;
    1728:	80 91 3f 03 	lds	r24, 0x033F
    172c:	90 91 40 03 	lds	r25, 0x0340
    1730:	90 93 5a 05 	sts	0x055A, r25
				ackPayload[3] = proximityValue[16]&0xFF;
    1734:	80 91 4f 03 	lds	r24, 0x034F
    1738:	90 91 50 03 	lds	r25, 0x0350
    173c:	80 93 5b 05 	sts	0x055B, r24
				ackPayload[4] = proximityValue[16]>>8;
    1740:	80 91 4f 03 	lds	r24, 0x034F
    1744:	90 91 50 03 	lds	r25, 0x0350
    1748:	90 93 5c 05 	sts	0x055C, r25
				ackPayload[5] = proximityValue[18]&0xFF;
    174c:	80 91 53 03 	lds	r24, 0x0353
    1750:	90 91 54 03 	lds	r25, 0x0354
    1754:	80 93 5d 05 	sts	0x055D, r24
				ackPayload[6] = proximityValue[18]>>8;
    1758:	80 91 53 03 	lds	r24, 0x0353
    175c:	90 91 54 03 	lds	r25, 0x0354
    1760:	90 93 5e 05 	sts	0x055E, r25
				ackPayload[7] = proximityValue[20]&0xFF;
    1764:	80 91 57 03 	lds	r24, 0x0357
    1768:	90 91 58 03 	lds	r25, 0x0358
    176c:	80 93 5f 05 	sts	0x055F, r24
				ackPayload[8] = proximityValue[20]>>8;
    1770:	80 91 57 03 	lds	r24, 0x0357
    1774:	90 91 58 03 	lds	r25, 0x0358
    1778:	90 93 60 05 	sts	0x0560, r25
				ackPayload[9] = proximityValue[22]&0xFF;
    177c:	80 91 5b 03 	lds	r24, 0x035B
    1780:	90 91 5c 03 	lds	r25, 0x035C
    1784:	80 93 61 05 	sts	0x0561, r24
				ackPayload[10] = proximityValue[22]>>8;
    1788:	80 91 5b 03 	lds	r24, 0x035B
    178c:	90 91 5c 03 	lds	r25, 0x035C
    1790:	90 93 62 05 	sts	0x0562, r25
				ackPayload[11] = accZ&0xFF;
    1794:	90 91 24 05 	lds	r25, 0x0524
    1798:	80 91 25 05 	lds	r24, 0x0525
    179c:	90 93 63 05 	sts	0x0563, r25
				ackPayload[12] = accZ>>8;
    17a0:	80 93 64 05 	sts	0x0564, r24
				ackPayload[13] = batteryLevel&0xFF;
    17a4:	90 91 c3 03 	lds	r25, 0x03C3
    17a8:	80 91 c4 03 	lds	r24, 0x03C4
    17ac:	90 93 65 05 	sts	0x0565, r25
				ackPayload[14] = batteryLevel>>8;
    17b0:	80 93 66 05 	sts	0x0566, r24
				ackPayload[15] = 0;
    17b4:	10 92 67 05 	sts	0x0567, r1
				packetId = 7;
    17b8:	87 e0       	ldi	r24, 0x07	; 7
    17ba:	80 93 0b 02 	sts	0x020B, r24
				break;
    17be:	34 ce       	rjmp	.-920    	; 0x1428 <handleRFCommands+0x306>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
    17c0:	90 91 5f 03 	lds	r25, 0x035F
    17c4:	80 91 60 03 	lds	r24, 0x0360
    17c8:	90 93 59 05 	sts	0x0559, r25
				ackPayload[2] = proximityResult[0]>>8;
    17cc:	80 93 5a 05 	sts	0x055A, r24
				ackPayload[3] = proximityResult[1]&0xFF;
    17d0:	90 91 61 03 	lds	r25, 0x0361
    17d4:	80 91 62 03 	lds	r24, 0x0362
    17d8:	90 93 5b 05 	sts	0x055B, r25
				ackPayload[4] = proximityResult[1]>>8;
    17dc:	80 93 5c 05 	sts	0x055C, r24
				ackPayload[5] = proximityResult[2]&0xFF;
    17e0:	90 91 63 03 	lds	r25, 0x0363
    17e4:	80 91 64 03 	lds	r24, 0x0364
    17e8:	90 93 5d 05 	sts	0x055D, r25
				ackPayload[6] = proximityResult[2]>>8;
    17ec:	80 93 5e 05 	sts	0x055E, r24
				ackPayload[7] = proximityResult[3]&0xFF;
    17f0:	90 91 65 03 	lds	r25, 0x0365
    17f4:	80 91 66 03 	lds	r24, 0x0366
    17f8:	90 93 5f 05 	sts	0x055F, r25
				ackPayload[8] = proximityResult[3]>>8;
    17fc:	80 93 60 05 	sts	0x0560, r24
				ackPayload[9] = proximityResult[5]&0xFF;
    1800:	90 91 69 03 	lds	r25, 0x0369
    1804:	80 91 6a 03 	lds	r24, 0x036A
    1808:	90 93 61 05 	sts	0x0561, r25
				ackPayload[10] = proximityResult[5]>>8;
    180c:	80 93 62 05 	sts	0x0562, r24
				ackPayload[11] = proximityResult[6]&0xFF;
    1810:	90 91 6b 03 	lds	r25, 0x036B
    1814:	80 91 6c 03 	lds	r24, 0x036C
    1818:	90 93 63 05 	sts	0x0563, r25
				ackPayload[12] = proximityResult[6]>>8;
    181c:	80 93 64 05 	sts	0x0564, r24
				ackPayload[13] = proximityResult[7]&0xFF;
    1820:	90 91 6d 03 	lds	r25, 0x036D
    1824:	80 91 6e 03 	lds	r24, 0x036E
    1828:	90 93 65 05 	sts	0x0565, r25
				ackPayload[14] = proximityResult[7]>>8;
    182c:	80 93 66 05 	sts	0x0566, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    1830:	30 91 03 01 	lds	r19, 0x0103
    1834:	80 91 03 01 	lds	r24, 0x0103
    1838:	20 91 03 01 	lds	r18, 0x0103
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	80 72       	andi	r24, 0x20	; 32
    1840:	90 70       	andi	r25, 0x00	; 0
    1842:	95 95       	asr	r25
    1844:	87 95       	ror	r24
    1846:	95 95       	asr	r25
    1848:	87 95       	ror	r24
    184a:	95 95       	asr	r25
    184c:	87 95       	ror	r24
    184e:	95 95       	asr	r25
    1850:	87 95       	ror	r24
    1852:	95 95       	asr	r25
    1854:	87 95       	ror	r24
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	22 1f       	adc	r18, r18
    185c:	22 27       	eor	r18, r18
    185e:	22 1f       	adc	r18, r18
    1860:	22 0f       	add	r18, r18
    1862:	22 0f       	add	r18, r18
    1864:	28 2b       	or	r18, r24
    1866:	83 2f       	mov	r24, r19
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	80 71       	andi	r24, 0x10	; 16
    186c:	90 70       	andi	r25, 0x00	; 0
    186e:	95 95       	asr	r25
    1870:	87 95       	ror	r24
    1872:	95 95       	asr	r25
    1874:	87 95       	ror	r24
    1876:	95 95       	asr	r25
    1878:	87 95       	ror	r24
    187a:	95 95       	asr	r25
    187c:	87 95       	ror	r24
    187e:	28 2b       	or	r18, r24
    1880:	20 93 67 05 	sts	0x0567, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    1884:	84 e0       	ldi	r24, 0x04	; 4
    1886:	80 93 0b 02 	sts	0x020B, r24
				break;
    188a:	ce cd       	rjmp	.-1124   	; 0x1428 <handleRFCommands+0x306>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    188c:	40 91 75 05 	lds	r20, 0x0575
    1890:	44 23       	and	r20, r20
    1892:	79 f0       	breq	.+30     	; 0x18b2 <handleRFCommands+0x790>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1894:	10 92 0a 04 	sts	0x040A, r1
    1898:	10 92 09 04 	sts	0x0409, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    189c:	84 2f       	mov	r24, r20
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	8f 77       	andi	r24, 0x7F	; 127
    18a2:	90 70       	andi	r25, 0x00	; 0
    18a4:	90 93 08 04 	sts	0x0408, r25
    18a8:	80 93 07 04 	sts	0x0407, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	8e cc       	rjmp	.-1764   	; 0x11ce <handleRFCommands+0xac>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    18b2:	8c e3       	ldi	r24, 0x3C	; 60
    18b4:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <sleep>
    18b8:	50 91 74 05 	lds	r21, 0x0574
    18bc:	40 91 75 05 	lds	r20, 0x0575
    18c0:	60 91 70 05 	lds	r22, 0x0570
    18c4:	e0 91 71 05 	lds	r30, 0x0571
    18c8:	70 91 72 05 	lds	r23, 0x0572
    18cc:	6e cc       	rjmp	.-1828   	; 0x11aa <handleRFCommands+0x88>

000018ce <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29

	PCICR = 0;
    18d2:	c8 e6       	ldi	r28, 0x68	; 104
    18d4:	d0 e0       	ldi	r29, 0x00	; 0
    18d6:	18 82       	st	Y, r1
	PCMSK1 = 0;
    18d8:	ac e6       	ldi	r26, 0x6C	; 108
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	1c 92       	st	X, r1
	TCCR2A = 0;
    18de:	e0 eb       	ldi	r30, 0xB0	; 176
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	10 82       	st	Z, r1
	TCCR2B = 0;
    18e4:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    18e8:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    18ec:	88 81       	ld	r24, Y
    18ee:	82 60       	ori	r24, 0x02	; 2
    18f0:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    18f2:	8c 91       	ld	r24, X
    18f4:	80 68       	ori	r24, 0x80	; 128
    18f6:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    18f8:	80 81       	ld	r24, Z
    18fa:	82 60       	ori	r24, 0x02	; 2
    18fc:	80 83       	st	Z, r24

}
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	08 95       	ret

00001904 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    1904:	1f 92       	push	r1
    1906:	0f 92       	push	r0
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	0f 92       	push	r0
    190c:	11 24       	eor	r1, r1
    190e:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    1910:	80 91 12 02 	lds	r24, 0x0212
    1914:	88 23       	and	r24, r24
    1916:	21 f1       	breq	.+72     	; 0x1960 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    1918:	80 91 03 01 	lds	r24, 0x0103
    191c:	86 fd       	sbrc	r24, 6
    191e:	20 c0       	rjmp	.+64     	; 0x1960 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    1920:	80 91 68 00 	lds	r24, 0x0068
    1924:	8d 7f       	andi	r24, 0xFD	; 253
    1926:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    192a:	80 91 6c 00 	lds	r24, 0x006C
    192e:	8f 77       	andi	r24, 0x7F	; 127
    1930:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    193a:	8d e0       	ldi	r24, 0x0D	; 13
    193c:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1940:	80 91 b1 00 	lds	r24, 0x00B1
    1944:	86 60       	ori	r24, 0x06	; 6
    1946:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    194a:	80 91 70 00 	lds	r24, 0x0070
    194e:	82 60       	ori	r24, 0x02	; 2
    1950:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    1954:	10 92 26 03 	sts	0x0326, r1
    1958:	10 92 27 03 	sts	0x0327, r1
    195c:	10 92 28 03 	sts	0x0328, r1

		}

	}
	
}
    1960:	8f 91       	pop	r24
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	0f 90       	pop	r0
    1968:	1f 90       	pop	r1
    196a:	18 95       	reti

0000196c <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    196c:	1f 92       	push	r1
    196e:	0f 92       	push	r0
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	0f 92       	push	r0
    1974:	11 24       	eor	r1, r1
    1976:	2f 93       	push	r18
    1978:	3f 93       	push	r19
    197a:	4f 93       	push	r20
    197c:	5f 93       	push	r21
    197e:	8f 93       	push	r24
    1980:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    1982:	80 91 b1 00 	lds	r24, 0x00B1
    1986:	88 7f       	andi	r24, 0xF8	; 248
    1988:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    198c:	80 91 13 02 	lds	r24, 0x0213
    1990:	88 23       	and	r24, r24
    1992:	a9 f0       	breq	.+42     	; 0x19be <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    1994:	80 91 03 01 	lds	r24, 0x0103
    1998:	86 ff       	sbrs	r24, 6
    199a:	65 c0       	rjmp	.+202    	; 0x1a66 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    199c:	80 91 68 00 	lds	r24, 0x0068
    19a0:	82 60       	ori	r24, 0x02	; 2
    19a2:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    19a6:	80 91 6c 00 	lds	r24, 0x006C
    19aa:	80 68       	ori	r24, 0x80	; 128
    19ac:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	9f ef       	ldi	r25, 0xFF	; 255
    19b4:	90 93 02 02 	sts	0x0202, r25
    19b8:	80 93 01 02 	sts	0x0201, r24
    19bc:	49 c0       	rjmp	.+146    	; 0x1a50 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    19be:	80 91 01 02 	lds	r24, 0x0201
    19c2:	90 91 02 02 	lds	r25, 0x0202
    19c6:	2f ef       	ldi	r18, 0xFF	; 255
    19c8:	8f 3f       	cpi	r24, 0xFF	; 255
    19ca:	92 07       	cpc	r25, r18
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <__vector_13+0x64>
    19ce:	63 c0       	rjmp	.+198    	; 0x1a96 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	91 05       	cpc	r25, r1
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <__vector_13+0x6c>
    19d6:	98 c0       	rjmp	.+304    	; 0x1b08 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    19d8:	9c 01       	movw	r18, r24
    19da:	22 50       	subi	r18, 0x02	; 2
    19dc:	30 40       	sbci	r19, 0x00	; 0
    19de:	25 30       	cpi	r18, 0x05	; 5
    19e0:	31 05       	cpc	r19, r1
    19e2:	08 f4       	brcc	.+2      	; 0x19e6 <__vector_13+0x7a>
    19e4:	67 c0       	rjmp	.+206    	; 0x1ab4 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    19e6:	9c 01       	movw	r18, r24
    19e8:	27 50       	subi	r18, 0x07	; 7
    19ea:	30 40       	sbci	r19, 0x00	; 0
    19ec:	26 30       	cpi	r18, 0x06	; 6
    19ee:	31 05       	cpc	r19, r1
    19f0:	08 f0       	brcs	.+2      	; 0x19f4 <__vector_13+0x88>
    19f2:	bd c0       	rjmp	.+378    	; 0x1b6e <__vector_13+0x202>

				OCR2A = 54;
    19f4:	26 e3       	ldi	r18, 0x36	; 54
    19f6:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    19fa:	20 91 b1 00 	lds	r18, 0x00B1
    19fe:	26 60       	ori	r18, 0x06	; 6
    1a00:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1a04:	20 91 70 00 	lds	r18, 0x0070
    1a08:	22 60       	ori	r18, 0x02	; 2
    1a0a:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1a0e:	20 91 03 01 	lds	r18, 0x0103
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	20 74       	andi	r18, 0x40	; 64
    1a16:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    1a18:	00 24       	eor	r0, r0
    1a1a:	22 0f       	add	r18, r18
    1a1c:	33 1f       	adc	r19, r19
    1a1e:	00 1c       	adc	r0, r0
    1a20:	22 0f       	add	r18, r18
    1a22:	33 1f       	adc	r19, r19
    1a24:	00 1c       	adc	r0, r0
    1a26:	23 2f       	mov	r18, r19
    1a28:	30 2d       	mov	r19, r0
    1a2a:	4c e0       	ldi	r20, 0x0C	; 12
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	48 1b       	sub	r20, r24
    1a30:	59 0b       	sbc	r21, r25
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <__vector_13+0xcc>
    1a34:	22 0f       	add	r18, r18
    1a36:	33 1f       	adc	r19, r19
    1a38:	4a 95       	dec	r20
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <__vector_13+0xc8>
				data_temp += temp;
    1a3c:	40 91 26 03 	lds	r20, 0x0326
    1a40:	42 0f       	add	r20, r18
    1a42:	40 93 26 03 	sts	0x0326, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    1a46:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    1a48:	90 93 02 02 	sts	0x0202, r25
    1a4c:	80 93 01 02 	sts	0x0201, r24

		}

}
    1a50:	9f 91       	pop	r25
    1a52:	8f 91       	pop	r24
    1a54:	5f 91       	pop	r21
    1a56:	4f 91       	pop	r20
    1a58:	3f 91       	pop	r19
    1a5a:	2f 91       	pop	r18
    1a5c:	0f 90       	pop	r0
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	0f 90       	pop	r0
    1a62:	1f 90       	pop	r1
    1a64:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    1a66:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    1a6a:	83 e3       	ldi	r24, 0x33	; 51
    1a6c:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1a70:	80 91 b1 00 	lds	r24, 0x00B1
    1a74:	86 60       	ori	r24, 0x06	; 6
    1a76:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1a7a:	80 91 70 00 	lds	r24, 0x0070
    1a7e:	82 60       	ori	r24, 0x02	; 2
    1a80:	80 93 70 00 	sts	0x0070, r24
    1a84:	80 91 01 02 	lds	r24, 0x0201
    1a88:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    1a8c:	2f ef       	ldi	r18, 0xFF	; 255
    1a8e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a90:	92 07       	cpc	r25, r18
    1a92:	c9 f6       	brne	.-78     	; 0x1a46 <__vector_13+0xda>
    1a94:	dd cf       	rjmp	.-70     	; 0x1a50 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    1a96:	20 91 03 01 	lds	r18, 0x0103
    1a9a:	26 ff       	sbrs	r18, 6
    1a9c:	52 c0       	rjmp	.+164    	; 0x1b42 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1a9e:	20 91 68 00 	lds	r18, 0x0068
    1aa2:	22 60       	ori	r18, 0x02	; 2
    1aa4:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1aa8:	20 91 6c 00 	lds	r18, 0x006C
    1aac:	20 68       	ori	r18, 0x80	; 128
    1aae:	20 93 6c 00 	sts	0x006C, r18
    1ab2:	ce cf       	rjmp	.-100    	; 0x1a50 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    1ab4:	26 e3       	ldi	r18, 0x36	; 54
    1ab6:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1aba:	20 91 b1 00 	lds	r18, 0x00B1
    1abe:	26 60       	ori	r18, 0x06	; 6
    1ac0:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1ac4:	20 91 70 00 	lds	r18, 0x0070
    1ac8:	22 60       	ori	r18, 0x02	; 2
    1aca:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1ace:	20 91 03 01 	lds	r18, 0x0103
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	20 74       	andi	r18, 0x40	; 64
    1ad6:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    1ad8:	00 24       	eor	r0, r0
    1ada:	22 0f       	add	r18, r18
    1adc:	33 1f       	adc	r19, r19
    1ade:	00 1c       	adc	r0, r0
    1ae0:	22 0f       	add	r18, r18
    1ae2:	33 1f       	adc	r19, r19
    1ae4:	00 1c       	adc	r0, r0
    1ae6:	23 2f       	mov	r18, r19
    1ae8:	30 2d       	mov	r19, r0
    1aea:	46 e0       	ldi	r20, 0x06	; 6
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	48 1b       	sub	r20, r24
    1af0:	59 0b       	sbc	r21, r25
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <__vector_13+0x18c>
    1af4:	22 0f       	add	r18, r18
    1af6:	33 1f       	adc	r19, r19
    1af8:	4a 95       	dec	r20
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <__vector_13+0x188>
				address_temp += temp;
    1afc:	40 91 27 03 	lds	r20, 0x0327
    1b00:	42 0f       	add	r20, r18
    1b02:	40 93 27 03 	sts	0x0327, r20
    1b06:	9f cf       	rjmp	.-194    	; 0x1a46 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    1b08:	20 91 03 01 	lds	r18, 0x0103
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	20 74       	andi	r18, 0x40	; 64
    1b10:	30 70       	andi	r19, 0x00	; 0
    1b12:	02 2e       	mov	r0, r18
    1b14:	23 2f       	mov	r18, r19
    1b16:	00 0c       	add	r0, r0
    1b18:	22 1f       	adc	r18, r18
    1b1a:	33 0b       	sbc	r19, r19
    1b1c:	00 0c       	add	r0, r0
    1b1e:	22 1f       	adc	r18, r18
    1b20:	33 1f       	adc	r19, r19
    1b22:	20 93 28 03 	sts	0x0328, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    1b26:	26 e3       	ldi	r18, 0x36	; 54
    1b28:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1b2c:	20 91 b1 00 	lds	r18, 0x00B1
    1b30:	26 60       	ori	r18, 0x06	; 6
    1b32:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1b36:	20 91 70 00 	lds	r18, 0x0070
    1b3a:	22 60       	ori	r18, 0x02	; 2
    1b3c:	20 93 70 00 	sts	0x0070, r18
    1b40:	82 cf       	rjmp	.-252    	; 0x1a46 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    1b42:	8c e1       	ldi	r24, 0x1C	; 28
    1b44:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    1b48:	80 91 b1 00 	lds	r24, 0x00B1
    1b4c:	86 60       	ori	r24, 0x06	; 6
    1b4e:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    1b52:	80 91 70 00 	lds	r24, 0x0070
    1b56:	82 60       	ori	r24, 0x02	; 2
    1b58:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    1b5c:	10 92 26 03 	sts	0x0326, r1
    1b60:	10 92 27 03 	sts	0x0327, r1
    1b64:	10 92 28 03 	sts	0x0328, r1
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	6d cf       	rjmp	.-294    	; 0x1a48 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    1b6e:	8d 30       	cpi	r24, 0x0D	; 13
    1b70:	91 05       	cpc	r25, r1
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <__vector_13+0x20a>
    1b74:	68 cf       	rjmp	.-304    	; 0x1a46 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    1b76:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    1b7a:	80 91 68 00 	lds	r24, 0x0068
    1b7e:	82 60       	ori	r24, 0x02	; 2
    1b80:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    1b84:	80 91 6c 00 	lds	r24, 0x006C
    1b88:	80 68       	ori	r24, 0x80	; 128
    1b8a:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    1b8e:	8f ef       	ldi	r24, 0xFF	; 255
    1b90:	9f ef       	ldi	r25, 0xFF	; 255
    1b92:	90 93 02 02 	sts	0x0202, r25
    1b96:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    1b9a:	80 91 28 03 	lds	r24, 0x0328
    1b9e:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    1ba2:	80 91 27 03 	lds	r24, 0x0327
    1ba6:	80 93 24 03 	sts	0x0324, r24
				data_ir = data_temp;
    1baa:	80 91 26 03 	lds	r24, 0x0326
    1bae:	80 93 25 03 	sts	0x0325, r24
				command_received=1;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	80 93 1c 05 	sts	0x051C, r24
    1bb8:	4b cf       	rjmp	.-362    	; 0x1a50 <__vector_13+0xe4>

00001bba <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    1bba:	80 91 00 02 	lds	r24, 0x0200
    1bbe:	08 95       	ret

00001bc0 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    1bc0:	80 91 24 03 	lds	r24, 0x0324
    1bc4:	08 95       	ret

00001bc6 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    1bc6:	80 91 25 03 	lds	r24, 0x0325
    1bca:	08 95       	ret

00001bcc <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    1bcc:	80 91 12 02 	lds	r24, 0x0212
    1bd0:	88 23       	and	r24, r24
    1bd2:	b1 f1       	breq	.+108    	; 0x1c40 <handleIRRemoteCommands+0x74>

		if(command_received) {
    1bd4:	80 91 1c 05 	lds	r24, 0x051C
    1bd8:	88 23       	and	r24, r24
    1bda:	91 f1       	breq	.+100    	; 0x1c40 <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    1bdc:	e0 91 25 03 	lds	r30, 0x0325

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    1be0:	e0 93 1b 05 	sts	0x051B, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    1be4:	10 92 1c 05 	sts	0x051C, r1

			switch(irCommand) {
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	e5 33       	cpi	r30, 0x35	; 53
    1bec:	f1 05       	cpc	r31, r1
    1bee:	48 f1       	brcs	.+82     	; 0x1c42 <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    1bf0:	20 91 f7 03 	lds	r18, 0x03F7
    1bf4:	30 91 f8 03 	lds	r19, 0x03F8
    1bf8:	80 91 f9 03 	lds	r24, 0x03F9
    1bfc:	90 91 fa 03 	lds	r25, 0x03FA
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    1c00:	37 fd       	sbrc	r19, 7
    1c02:	27 c0       	rjmp	.+78     	; 0x1c52 <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    1c04:	35 95       	asr	r19
    1c06:	27 95       	ror	r18
    1c08:	35 95       	asr	r19
    1c0a:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    1c0c:	30 93 0a 04 	sts	0x040A, r19
    1c10:	20 93 09 04 	sts	0x0409, r18
			}
			if(pwm_left_desired >= 0) {
    1c14:	97 fd       	sbrc	r25, 7
    1c16:	09 c0       	rjmp	.+18     	; 0x1c2a <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    1c18:	95 95       	asr	r25
    1c1a:	87 95       	ror	r24
    1c1c:	95 95       	asr	r25
    1c1e:	87 95       	ror	r24
    1c20:	90 93 08 04 	sts	0x0408, r25
    1c24:	80 93 07 04 	sts	0x0407, r24
    1c28:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    1c2a:	90 95       	com	r25
    1c2c:	81 95       	neg	r24
    1c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c30:	95 95       	asr	r25
    1c32:	87 95       	ror	r24
    1c34:	95 95       	asr	r25
    1c36:	87 95       	ror	r24
    1c38:	90 93 08 04 	sts	0x0408, r25
    1c3c:	80 93 07 04 	sts	0x0407, r24
    1c40:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    1c42:	ee 58       	subi	r30, 0x8E	; 142
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	05 90       	lpm	r0, Z+
    1c4c:	f4 91       	lpm	r31, Z+
    1c4e:	e0 2d       	mov	r30, r0
    1c50:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    1c52:	30 95       	com	r19
    1c54:	21 95       	neg	r18
    1c56:	3f 4f       	sbci	r19, 0xFF	; 255
    1c58:	d5 cf       	rjmp	.-86     	; 0x1c04 <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    1c5a:	80 93 4f 05 	sts	0x054F, r24
							cliffAvoidanceEnabled = 0;
    1c5e:	10 92 50 05 	sts	0x0550, r1
    1c62:	c6 cf       	rjmp	.-116    	; 0x1bf0 <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    1c64:	10 92 4f 05 	sts	0x054F, r1
							cliffAvoidanceEnabled = 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	80 93 50 05 	sts	0x0550, r24
    1c6e:	20 91 f7 03 	lds	r18, 0x03F7
    1c72:	30 91 f8 03 	lds	r19, 0x03F8
    1c76:	80 91 f9 03 	lds	r24, 0x03F9
    1c7a:	90 91 fa 03 	lds	r25, 0x03FA
							break;
    1c7e:	c0 cf       	rjmp	.-128    	; 0x1c00 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    1c80:	10 92 4f 05 	sts	0x054F, r1
    1c84:	20 91 f7 03 	lds	r18, 0x03F7
    1c88:	30 91 f8 03 	lds	r19, 0x03F8
    1c8c:	80 91 f9 03 	lds	r24, 0x03F9
    1c90:	90 91 fa 03 	lds	r25, 0x03FA
					break;
    1c94:	b5 cf       	rjmp	.-150    	; 0x1c00 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	80 93 4f 05 	sts	0x054F, r24
    1c9c:	20 91 f7 03 	lds	r18, 0x03F7
    1ca0:	30 91 f8 03 	lds	r19, 0x03F8
    1ca4:	80 91 f9 03 	lds	r24, 0x03F9
    1ca8:	90 91 fa 03 	lds	r25, 0x03FA
					break;
    1cac:	a9 cf       	rjmp	.-174    	; 0x1c00 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    1cae:	80 91 f9 03 	lds	r24, 0x03F9
    1cb2:	90 91 fa 03 	lds	r25, 0x03FA
    1cb6:	4e 97       	sbiw	r24, 0x1e	; 30
    1cb8:	90 93 fa 03 	sts	0x03FA, r25
    1cbc:	80 93 f9 03 	sts	0x03F9, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1cc0:	2e ef       	ldi	r18, 0xFE	; 254
    1cc2:	80 30       	cpi	r24, 0x00	; 0
    1cc4:	92 07       	cpc	r25, r18
    1cc6:	9c f5       	brge	.+102    	; 0x1d2e <handleIRRemoteCommands+0x162>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	9e ef       	ldi	r25, 0xFE	; 254
    1ccc:	90 93 fa 03 	sts	0x03FA, r25
    1cd0:	80 93 f9 03 	sts	0x03F9, r24
    1cd4:	20 91 f7 03 	lds	r18, 0x03F7
    1cd8:	30 91 f8 03 	lds	r19, 0x03F8
    1cdc:	91 cf       	rjmp	.-222    	; 0x1c00 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    1cde:	20 91 f7 03 	lds	r18, 0x03F7
    1ce2:	30 91 f8 03 	lds	r19, 0x03F8
    1ce6:	80 91 f5 03 	lds	r24, 0x03F5
    1cea:	90 91 f6 03 	lds	r25, 0x03F6
    1cee:	28 17       	cp	r18, r24
    1cf0:	39 07       	cpc	r19, r25
    1cf2:	24 f0       	brlt	.+8      	; 0x1cfc <handleIRRemoteCommands+0x130>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    1cf4:	20 91 f9 03 	lds	r18, 0x03F9
    1cf8:	30 91 fa 03 	lds	r19, 0x03FA
					}
					pwm_right_desired -= STEP_MOTORS;
    1cfc:	2e 51       	subi	r18, 0x1E	; 30
    1cfe:	30 40       	sbci	r19, 0x00	; 0
    1d00:	30 93 f8 03 	sts	0x03F8, r19
    1d04:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired -= STEP_MOTORS;
    1d08:	c9 01       	movw	r24, r18
    1d0a:	30 93 fa 03 	sts	0x03FA, r19
    1d0e:	20 93 f9 03 	sts	0x03F9, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    1d12:	4e ef       	ldi	r20, 0xFE	; 254
    1d14:	20 30       	cpi	r18, 0x00	; 0
    1d16:	34 07       	cpc	r19, r20
    1d18:	34 f4       	brge	.+12     	; 0x1d26 <handleIRRemoteCommands+0x15a>
    1d1a:	40 e0       	ldi	r20, 0x00	; 0
    1d1c:	5e ef       	ldi	r21, 0xFE	; 254
    1d1e:	50 93 f8 03 	sts	0x03F8, r21
    1d22:	40 93 f7 03 	sts	0x03F7, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    1d26:	4e ef       	ldi	r20, 0xFE	; 254
    1d28:	20 30       	cpi	r18, 0x00	; 0
    1d2a:	34 07       	cpc	r19, r20
    1d2c:	6c f2       	brlt	.-102    	; 0x1cc8 <handleIRRemoteCommands+0xfc>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1d2e:	20 91 f7 03 	lds	r18, 0x03F7
    1d32:	30 91 f8 03 	lds	r19, 0x03F8
    1d36:	64 cf       	rjmp	.-312    	; 0x1c00 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    1d38:	20 91 f7 03 	lds	r18, 0x03F7
    1d3c:	30 91 f8 03 	lds	r19, 0x03F8
    1d40:	2e 51       	subi	r18, 0x1E	; 30
    1d42:	30 40       	sbci	r19, 0x00	; 0
    1d44:	30 93 f8 03 	sts	0x03F8, r19
    1d48:	20 93 f7 03 	sts	0x03F7, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1d4c:	4e ef       	ldi	r20, 0xFE	; 254
    1d4e:	20 30       	cpi	r18, 0x00	; 0
    1d50:	34 07       	cpc	r19, r20
    1d52:	0c f0       	brlt	.+2      	; 0x1d56 <handleIRRemoteCommands+0x18a>
    1d54:	17 c1       	rjmp	.+558    	; 0x1f84 <handleIRRemoteCommands+0x3b8>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	9e ef       	ldi	r25, 0xFE	; 254
    1d5a:	90 93 f8 03 	sts	0x03F8, r25
    1d5e:	80 93 f7 03 	sts	0x03F7, r24
    1d62:	80 91 f9 03 	lds	r24, 0x03F9
    1d66:	90 91 fa 03 	lds	r25, 0x03FA
    1d6a:	20 e8       	ldi	r18, 0x80	; 128
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4e cf       	rjmp	.-356    	; 0x1c0c <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    1d70:	20 91 f7 03 	lds	r18, 0x03F7
    1d74:	30 91 f8 03 	lds	r19, 0x03F8
    1d78:	2e 51       	subi	r18, 0x1E	; 30
    1d7a:	30 40       	sbci	r19, 0x00	; 0
    1d7c:	30 93 f8 03 	sts	0x03F8, r19
    1d80:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired += STEP_MOTORS;
    1d84:	80 91 f9 03 	lds	r24, 0x03F9
    1d88:	90 91 fa 03 	lds	r25, 0x03FA
    1d8c:	4e 96       	adiw	r24, 0x1e	; 30
    1d8e:	90 93 fa 03 	sts	0x03FA, r25
    1d92:	80 93 f9 03 	sts	0x03F9, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    1d96:	4e ef       	ldi	r20, 0xFE	; 254
    1d98:	20 30       	cpi	r18, 0x00	; 0
    1d9a:	34 07       	cpc	r19, r20
    1d9c:	34 f4       	brge	.+12     	; 0x1daa <handleIRRemoteCommands+0x1de>
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	3e ef       	ldi	r19, 0xFE	; 254
    1da2:	30 93 f8 03 	sts	0x03F8, r19
    1da6:	20 93 f7 03 	sts	0x03F7, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1daa:	42 e0       	ldi	r20, 0x02	; 2
    1dac:	81 30       	cpi	r24, 0x01	; 1
    1dae:	94 07       	cpc	r25, r20
    1db0:	0c f4       	brge	.+2      	; 0x1db4 <handleIRRemoteCommands+0x1e8>
    1db2:	26 cf       	rjmp	.-436    	; 0x1c00 <handleIRRemoteCommands+0x34>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	92 e0       	ldi	r25, 0x02	; 2
    1db8:	90 93 fa 03 	sts	0x03FA, r25
    1dbc:	80 93 f9 03 	sts	0x03F9, r24
    1dc0:	1f cf       	rjmp	.-450    	; 0x1c00 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1dc2:	20 91 f7 03 	lds	r18, 0x03F7
    1dc6:	30 91 f8 03 	lds	r19, 0x03F8
    1dca:	80 91 f9 03 	lds	r24, 0x03F9
    1dce:	90 91 fa 03 	lds	r25, 0x03FA
    1dd2:	82 17       	cp	r24, r18
    1dd4:	93 07       	cpc	r25, r19
    1dd6:	0c f4       	brge	.+2      	; 0x1dda <handleIRRemoteCommands+0x20e>
    1dd8:	da c0       	rjmp	.+436    	; 0x1f8e <handleIRRemoteCommands+0x3c2>
    1dda:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    1ddc:	22 5e       	subi	r18, 0xE2	; 226
    1dde:	3f 4f       	sbci	r19, 0xFF	; 255
    1de0:	30 93 f8 03 	sts	0x03F8, r19
    1de4:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired += STEP_MOTORS;
    1de8:	4e 96       	adiw	r24, 0x1e	; 30
    1dea:	90 93 fa 03 	sts	0x03FA, r25
    1dee:	80 93 f9 03 	sts	0x03F9, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    1df2:	42 e0       	ldi	r20, 0x02	; 2
    1df4:	21 30       	cpi	r18, 0x01	; 1
    1df6:	34 07       	cpc	r19, r20
    1df8:	34 f0       	brlt	.+12     	; 0x1e06 <handleIRRemoteCommands+0x23a>
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	32 e0       	ldi	r19, 0x02	; 2
    1dfe:	30 93 f8 03 	sts	0x03F8, r19
    1e02:	20 93 f7 03 	sts	0x03F7, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    1e06:	22 e0       	ldi	r18, 0x02	; 2
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	92 07       	cpc	r25, r18
    1e0c:	0c f4       	brge	.+2      	; 0x1e10 <handleIRRemoteCommands+0x244>
    1e0e:	8f cf       	rjmp	.-226    	; 0x1d2e <handleIRRemoteCommands+0x162>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	92 e0       	ldi	r25, 0x02	; 2
    1e14:	90 93 fa 03 	sts	0x03FA, r25
    1e18:	80 93 f9 03 	sts	0x03F9, r24
    1e1c:	20 91 f7 03 	lds	r18, 0x03F7
    1e20:	30 91 f8 03 	lds	r19, 0x03F8
    1e24:	ed ce       	rjmp	.-550    	; 0x1c00 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    1e26:	20 91 f7 03 	lds	r18, 0x03F7
    1e2a:	30 91 f8 03 	lds	r19, 0x03F8
    1e2e:	22 5e       	subi	r18, 0xE2	; 226
    1e30:	3f 4f       	sbci	r19, 0xFF	; 255
    1e32:	30 93 f8 03 	sts	0x03F8, r19
    1e36:	20 93 f7 03 	sts	0x03F7, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1e3a:	42 e0       	ldi	r20, 0x02	; 2
    1e3c:	21 30       	cpi	r18, 0x01	; 1
    1e3e:	34 07       	cpc	r19, r20
    1e40:	0c f4       	brge	.+2      	; 0x1e44 <handleIRRemoteCommands+0x278>
    1e42:	a0 c0       	rjmp	.+320    	; 0x1f84 <handleIRRemoteCommands+0x3b8>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	92 e0       	ldi	r25, 0x02	; 2
    1e48:	90 93 f8 03 	sts	0x03F8, r25
    1e4c:	80 93 f7 03 	sts	0x03F7, r24
    1e50:	80 91 f9 03 	lds	r24, 0x03F9
    1e54:	90 91 fa 03 	lds	r25, 0x03FA
    1e58:	20 e8       	ldi	r18, 0x80	; 128
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	d7 ce       	rjmp	.-594    	; 0x1c0c <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    1e5e:	80 91 1d 05 	lds	r24, 0x051D
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	01 96       	adiw	r24, 0x01	; 1
    1e66:	65 e0       	ldi	r22, 0x05	; 5
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	0e 94 a4 2c 	call	0x5948	; 0x5948 <__divmodhi4>
    1e6e:	80 93 1d 05 	sts	0x051D, r24

					if(colorState==0) {			// turn on blue and off all IRs
    1e72:	88 23       	and	r24, r24
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <handleIRRemoteCommands+0x2ac>
    1e76:	8d c0       	rjmp	.+282    	; 0x1f92 <handleIRRemoteCommands+0x3c6>
						LED_IR1_HIGH;
    1e78:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    1e7a:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    1e7c:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    1e80:	8f ef       	ldi	r24, 0xFF	; 255
    1e82:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1e86:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    1e8a:	0e 94 47 21 	call	0x428e	; 0x428e <updateRedLed>
					updateGreenLed(pwm_green);
    1e8e:	80 91 0d 02 	lds	r24, 0x020D
    1e92:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <updateGreenLed>
					updateBlueLed(pwm_blue);
    1e96:	80 91 0e 02 	lds	r24, 0x020E
    1e9a:	0e 94 6f 21 	call	0x42de	; 0x42de <updateBlueLed>
    1e9e:	20 91 f7 03 	lds	r18, 0x03F7
    1ea2:	30 91 f8 03 	lds	r19, 0x03F8
    1ea6:	80 91 f9 03 	lds	r24, 0x03F9
    1eaa:	90 91 fa 03 	lds	r25, 0x03FA

	               	break;
    1eae:	a8 ce       	rjmp	.-688    	; 0x1c00 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    1eb0:	80 91 1e 05 	lds	r24, 0x051E
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	01 96       	adiw	r24, 0x01	; 1
    1eb8:	83 70       	andi	r24, 0x03	; 3
    1eba:	90 70       	andi	r25, 0x00	; 0
    1ebc:	80 93 1e 05 	sts	0x051E, r24
					switch(behaviorState) {
    1ec0:	82 30       	cpi	r24, 0x02	; 2
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <handleIRRemoteCommands+0x2fa>
    1ec4:	cf ce       	rjmp	.-610    	; 0x1c64 <handleIRRemoteCommands+0x98>
    1ec6:	83 30       	cpi	r24, 0x03	; 3
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <handleIRRemoteCommands+0x300>
    1eca:	53 c0       	rjmp	.+166    	; 0x1f72 <handleIRRemoteCommands+0x3a6>
    1ecc:	81 30       	cpi	r24, 0x01	; 1
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <handleIRRemoteCommands+0x306>
    1ed0:	c4 ce       	rjmp	.-632    	; 0x1c5a <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    1ed2:	10 92 4f 05 	sts	0x054F, r1
							cliffAvoidanceEnabled = 0;
    1ed6:	10 92 50 05 	sts	0x0550, r1
    1eda:	8a ce       	rjmp	.-748    	; 0x1bf0 <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    1edc:	20 91 f7 03 	lds	r18, 0x03F7
    1ee0:	30 91 f8 03 	lds	r19, 0x03F8
    1ee4:	22 5e       	subi	r18, 0xE2	; 226
    1ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee8:	30 93 f8 03 	sts	0x03F8, r19
    1eec:	20 93 f7 03 	sts	0x03F7, r18
					pwm_left_desired -= STEP_MOTORS;
    1ef0:	80 91 f9 03 	lds	r24, 0x03F9
    1ef4:	90 91 fa 03 	lds	r25, 0x03FA
    1ef8:	4e 97       	sbiw	r24, 0x1e	; 30
    1efa:	90 93 fa 03 	sts	0x03FA, r25
    1efe:	80 93 f9 03 	sts	0x03F9, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1f02:	42 e0       	ldi	r20, 0x02	; 2
    1f04:	21 30       	cpi	r18, 0x01	; 1
    1f06:	34 07       	cpc	r19, r20
    1f08:	34 f0       	brlt	.+12     	; 0x1f16 <handleIRRemoteCommands+0x34a>
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	32 e0       	ldi	r19, 0x02	; 2
    1f0e:	30 93 f8 03 	sts	0x03F8, r19
    1f12:	20 93 f7 03 	sts	0x03F7, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1f16:	4e ef       	ldi	r20, 0xFE	; 254
    1f18:	80 30       	cpi	r24, 0x00	; 0
    1f1a:	94 07       	cpc	r25, r20
    1f1c:	0c f0       	brlt	.+2      	; 0x1f20 <handleIRRemoteCommands+0x354>
    1f1e:	70 ce       	rjmp	.-800    	; 0x1c00 <handleIRRemoteCommands+0x34>
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	9e ef       	ldi	r25, 0xFE	; 254
    1f24:	90 93 fa 03 	sts	0x03FA, r25
    1f28:	80 93 f9 03 	sts	0x03F9, r24
    1f2c:	69 ce       	rjmp	.-814    	; 0x1c00 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    1f2e:	10 92 f8 03 	sts	0x03F8, r1
    1f32:	10 92 f7 03 	sts	0x03F7, r1
					pwm_left_desired = 0;
    1f36:	10 92 fa 03 	sts	0x03FA, r1
    1f3a:	10 92 f9 03 	sts	0x03F9, r1
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	5e ce       	rjmp	.-836    	; 0x1c04 <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    1f48:	80 91 f9 03 	lds	r24, 0x03F9
    1f4c:	90 91 fa 03 	lds	r25, 0x03FA
    1f50:	4e 96       	adiw	r24, 0x1e	; 30
    1f52:	90 93 fa 03 	sts	0x03FA, r25
    1f56:	80 93 f9 03 	sts	0x03F9, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1f5a:	22 e0       	ldi	r18, 0x02	; 2
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	92 07       	cpc	r25, r18
    1f60:	0c f4       	brge	.+2      	; 0x1f64 <handleIRRemoteCommands+0x398>
    1f62:	e5 ce       	rjmp	.-566    	; 0x1d2e <handleIRRemoteCommands+0x162>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	92 e0       	ldi	r25, 0x02	; 2
    1f68:	90 93 fa 03 	sts	0x03FA, r25
    1f6c:	80 93 f9 03 	sts	0x03F9, r24
    1f70:	de ce       	rjmp	.-580    	; 0x1d2e <handleIRRemoteCommands+0x162>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	80 93 4f 05 	sts	0x054F, r24
							cliffAvoidanceEnabled = 1;
    1f78:	80 93 50 05 	sts	0x0550, r24
    1f7c:	20 91 f7 03 	lds	r18, 0x03F7
    1f80:	30 91 f8 03 	lds	r19, 0x03F8
    1f84:	80 91 f9 03 	lds	r24, 0x03F9
    1f88:	90 91 fa 03 	lds	r25, 0x03FA
							break;
    1f8c:	39 ce       	rjmp	.-910    	; 0x1c00 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1f8e:	c9 01       	movw	r24, r18
    1f90:	25 cf       	rjmp	.-438    	; 0x1ddc <handleIRRemoteCommands+0x210>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    1f92:	81 30       	cpi	r24, 0x01	; 1
    1f94:	61 f0       	breq	.+24     	; 0x1fae <handleIRRemoteCommands+0x3e2>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    1f96:	82 30       	cpi	r24, 0x02	; 2
    1f98:	91 f0       	breq	.+36     	; 0x1fbe <handleIRRemoteCommands+0x3f2>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    1f9a:	83 30       	cpi	r24, 0x03	; 3
    1f9c:	d9 f0       	breq	.+54     	; 0x1fd4 <handleIRRemoteCommands+0x408>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    1f9e:	8f ef       	ldi	r24, 0xFF	; 255
    1fa0:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1fa4:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1fa8:	80 93 0c 02 	sts	0x020C, r24
    1fac:	6e cf       	rjmp	.-292    	; 0x1e8a <handleIRRemoteCommands+0x2be>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    1fae:	8f ef       	ldi	r24, 0xFF	; 255
    1fb0:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    1fb4:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    1fb8:	80 93 0c 02 	sts	0x020C, r24
    1fbc:	66 cf       	rjmp	.-308    	; 0x1e8a <handleIRRemoteCommands+0x2be>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    1fbe:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    1fc0:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    1fc2:	8f ef       	ldi	r24, 0xFF	; 255
    1fc4:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1fc8:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    1fcc:	10 92 0c 02 	sts	0x020C, r1
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	5b cf       	rjmp	.-330    	; 0x1e8a <handleIRRemoteCommands+0x2be>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    1fd4:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    1fd8:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    1fdc:	10 92 0c 02 	sts	0x020C, r1
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	53 cf       	rjmp	.-346    	; 0x1e8a <handleIRRemoteCommands+0x2be>

00001fe4 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    1fe4:	08 95       	ret

00001fe6 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <start_vertical_speed_control_left+0x14>
    1ff8:	b7 c0       	rjmp	.+366    	; 0x2168 <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1ffa:	20 91 32 05 	lds	r18, 0x0532
    1ffe:	30 91 33 05 	lds	r19, 0x0533
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	2e 30       	cpi	r18, 0x0E	; 14
    2006:	34 07       	cpc	r19, r20
    2008:	0c f4       	brge	.+2      	; 0x200c <start_vertical_speed_control_left+0x26>
    200a:	88 c0       	rjmp	.+272    	; 0x211c <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    200c:	18 16       	cp	r1, r24
    200e:	19 06       	cpc	r1, r25
    2010:	0c f0       	brlt	.+2      	; 0x2014 <start_vertical_speed_control_left+0x2e>
    2012:	13 c1       	rjmp	.+550    	; 0x223a <__stack+0x3b>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    2014:	88 e6       	ldi	r24, 0x68	; 104
    2016:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2018:	82 1b       	sub	r24, r18
    201a:	93 0b       	sbc	r25, r19
    201c:	95 95       	asr	r25
    201e:	87 95       	ror	r24
    2020:	95 95       	asr	r25
    2022:	87 95       	ror	r24
    2024:	29 e1       	ldi	r18, 0x19	; 25
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	28 1b       	sub	r18, r24
    202a:	39 0b       	sbc	r19, r25
    202c:	30 93 04 02 	sts	0x0204, r19
    2030:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2034:	40 91 54 05 	lds	r20, 0x0554
    2038:	50 91 55 05 	lds	r21, 0x0555
    203c:	50 93 6f 05 	sts	0x056F, r21
    2040:	40 93 6e 05 	sts	0x056E, r20
	if(*pwm_left >= 0) {
    2044:	20 81       	ld	r18, Z
    2046:	31 81       	ldd	r19, Z+1	; 0x01
    2048:	37 fd       	sbrc	r19, 7
    204a:	d2 c0       	rjmp	.+420    	; 0x21f0 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    204c:	80 91 ef 03 	lds	r24, 0x03EF
    2050:	90 91 f0 03 	lds	r25, 0x03F0
    2054:	b9 01       	movw	r22, r18
    2056:	68 1b       	sub	r22, r24
    2058:	79 0b       	sbc	r23, r25
    205a:	cb 01       	movw	r24, r22
    205c:	70 93 55 05 	sts	0x0555, r23
    2060:	60 93 54 05 	sts	0x0554, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    2064:	20 91 ff 03 	lds	r18, 0x03FF
    2068:	30 91 00 04 	lds	r19, 0x0400
    206c:	28 0f       	add	r18, r24
    206e:	39 1f       	adc	r19, r25
    2070:	30 93 00 04 	sts	0x0400, r19
    2074:	20 93 ff 03 	sts	0x03FF, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    2078:	76 e0       	ldi	r23, 0x06	; 6
    207a:	21 34       	cpi	r18, 0x41	; 65
    207c:	37 07       	cpc	r19, r23
    207e:	0c f4       	brge	.+2      	; 0x2082 <start_vertical_speed_control_left+0x9c>
    2080:	84 c0       	rjmp	.+264    	; 0x218a <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    2082:	20 e4       	ldi	r18, 0x40	; 64
    2084:	36 e0       	ldi	r19, 0x06	; 6
    2086:	30 93 00 04 	sts	0x0400, r19
    208a:	20 93 ff 03 	sts	0x03FF, r18
    208e:	60 ec       	ldi	r22, 0xC0	; 192
    2090:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    2092:	9c 01       	movw	r18, r24
    2094:	22 0f       	add	r18, r18
    2096:	33 1f       	adc	r19, r19
    2098:	dc 01       	movw	r26, r24
    209a:	aa 0f       	add	r26, r26
    209c:	bb 1f       	adc	r27, r27
    209e:	aa 0f       	add	r26, r26
    20a0:	bb 1f       	adc	r27, r27
    20a2:	aa 0f       	add	r26, r26
    20a4:	bb 1f       	adc	r27, r27
    20a6:	2a 0f       	add	r18, r26
    20a8:	3b 1f       	adc	r19, r27
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    20aa:	00 81       	ld	r16, Z
    20ac:	11 81       	ldd	r17, Z+1	; 0x01
    20ae:	c0 91 03 02 	lds	r28, 0x0203
    20b2:	d0 91 04 02 	lds	r29, 0x0204
    20b6:	0c 9f       	mul	r16, r28
    20b8:	d0 01       	movw	r26, r0
    20ba:	0d 9f       	mul	r16, r29
    20bc:	b0 0d       	add	r27, r0
    20be:	1c 9f       	mul	r17, r28
    20c0:	b0 0d       	add	r27, r0
    20c2:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    20c4:	2a 0f       	add	r18, r26
    20c6:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    20c8:	48 1b       	sub	r20, r24
    20ca:	59 0b       	sbc	r21, r25
    20cc:	44 0f       	add	r20, r20
    20ce:	55 1f       	adc	r21, r21
    20d0:	24 0f       	add	r18, r20
    20d2:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    20d4:	26 0f       	add	r18, r22
    20d6:	37 1f       	adc	r19, r23
    20d8:	30 93 fe 03 	sts	0x03FE, r19
    20dc:	20 93 fd 03 	sts	0x03FD, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    20e0:	37 fd       	sbrc	r19, 7
    20e2:	69 c0       	rjmp	.+210    	; 0x21b6 <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    20e4:	12 16       	cp	r1, r18
    20e6:	13 06       	cpc	r1, r19
    20e8:	0c f0       	brlt	.+2      	; 0x20ec <start_vertical_speed_control_left+0x106>
    20ea:	6f c0       	rjmp	.+222    	; 0x21ca <start_vertical_speed_control_left+0x1e4>
    20ec:	80 81       	ld	r24, Z
    20ee:	91 81       	ldd	r25, Z+1	; 0x01
    20f0:	97 fd       	sbrc	r25, 7
    20f2:	89 c0       	rjmp	.+274    	; 0x2206 <__stack+0x7>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    20f4:	7d e5       	ldi	r23, 0x5D	; 93
    20f6:	21 3c       	cpi	r18, 0xC1	; 193
    20f8:	37 07       	cpc	r19, r23
    20fa:	0c f4       	brge	.+2      	; 0x20fe <start_vertical_speed_control_left+0x118>
    20fc:	66 c0       	rjmp	.+204    	; 0x21ca <start_vertical_speed_control_left+0x1e4>
    20fe:	80 ec       	ldi	r24, 0xC0	; 192
    2100:	9d e5       	ldi	r25, 0x5D	; 93
    2102:	90 93 fe 03 	sts	0x03FE, r25
    2106:	80 93 fd 03 	sts	0x03FD, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	92 e0       	ldi	r25, 0x02	; 2
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	1f 91       	pop	r17
    2118:	0f 91       	pop	r16
    211a:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    211c:	24 3b       	cpi	r18, 0xB4	; 180
    211e:	31 05       	cpc	r19, r1
    2120:	94 f4       	brge	.+36     	; 0x2146 <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2122:	2a 35       	cpi	r18, 0x5A	; 90
    2124:	31 05       	cpc	r19, r1
    2126:	7c f4       	brge	.+30     	; 0x2146 <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    2128:	18 16       	cp	r1, r24
    212a:	19 06       	cpc	r1, r25
    212c:	0c f0       	brlt	.+2      	; 0x2130 <start_vertical_speed_control_left+0x14a>
    212e:	93 c0       	rjmp	.+294    	; 0x2256 <__stack+0x57>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2130:	35 95       	asr	r19
    2132:	27 95       	ror	r18
    2134:	35 95       	asr	r19
    2136:	27 95       	ror	r18
    2138:	27 5e       	subi	r18, 0xE7	; 231
    213a:	3f 4f       	sbci	r19, 0xFF	; 255
    213c:	30 93 04 02 	sts	0x0204, r19
    2140:	20 93 03 02 	sts	0x0203, r18
    2144:	77 cf       	rjmp	.-274    	; 0x2034 <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    2146:	18 16       	cp	r1, r24
    2148:	19 06       	cpc	r1, r25
    214a:	94 f5       	brge	.+100    	; 0x21b0 <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    214c:	84 eb       	ldi	r24, 0xB4	; 180
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	82 1b       	sub	r24, r18
    2152:	93 0b       	sbc	r25, r19
    2154:	95 95       	asr	r25
    2156:	87 95       	ror	r24
    2158:	95 95       	asr	r25
    215a:	87 95       	ror	r24
    215c:	49 96       	adiw	r24, 0x19	; 25
    215e:	90 93 04 02 	sts	0x0204, r25
    2162:	80 93 03 02 	sts	0x0203, r24
    2166:	66 cf       	rjmp	.-308    	; 0x2034 <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2168:	10 92 00 04 	sts	0x0400, r1
    216c:	10 92 ff 03 	sts	0x03FF, r1
		delta_left_speed_current = 0;
    2170:	10 92 55 05 	sts	0x0555, r1
    2174:	10 92 54 05 	sts	0x0554, r1
		delta_left_speed_prev = 0;
    2178:	10 92 6f 05 	sts	0x056F, r1
    217c:	10 92 6e 05 	sts	0x056E, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	1f 91       	pop	r17
    2186:	0f 91       	pop	r16
    2188:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    218a:	69 ef       	ldi	r22, 0xF9	; 249
    218c:	20 3c       	cpi	r18, 0xC0	; 192
    218e:	36 07       	cpc	r19, r22
    2190:	4c f4       	brge	.+18     	; 0x21a4 <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    2192:	20 ec       	ldi	r18, 0xC0	; 192
    2194:	39 ef       	ldi	r19, 0xF9	; 249
    2196:	30 93 00 04 	sts	0x0400, r19
    219a:	20 93 ff 03 	sts	0x03FF, r18
    219e:	60 e4       	ldi	r22, 0x40	; 64
    21a0:	7d ee       	ldi	r23, 0xED	; 237
    21a2:	77 cf       	rjmp	.-274    	; 0x2092 <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    21a4:	b9 01       	movw	r22, r18
    21a6:	66 0f       	add	r22, r22
    21a8:	77 1f       	adc	r23, r23
    21aa:	62 0f       	add	r22, r18
    21ac:	73 1f       	adc	r23, r19
    21ae:	71 cf       	rjmp	.-286    	; 0x2092 <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    21b0:	84 eb       	ldi	r24, 0xB4	; 180
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	31 cf       	rjmp	.-414    	; 0x2018 <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    21b6:	80 81       	ld	r24, Z
    21b8:	91 81       	ldd	r25, Z+1	; 0x01
    21ba:	97 fd       	sbrc	r25, 7
    21bc:	06 c0       	rjmp	.+12     	; 0x21ca <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    21be:	10 92 fe 03 	sts	0x03FE, r1
    21c2:	10 92 fd 03 	sts	0x03FD, r1
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    21ca:	82 ea       	ldi	r24, 0xA2	; 162
    21cc:	20 34       	cpi	r18, 0x40	; 64
    21ce:	38 07       	cpc	r19, r24
    21d0:	04 f5       	brge	.+64     	; 0x2212 <__stack+0x13>
    21d2:	80 e4       	ldi	r24, 0x40	; 64
    21d4:	92 ea       	ldi	r25, 0xA2	; 162
    21d6:	90 93 fe 03 	sts	0x03FE, r25
    21da:	80 93 fd 03 	sts	0x03FD, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	9e ef       	ldi	r25, 0xFE	; 254
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	80 83       	st	Z, r24


}
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	1f 91       	pop	r17
    21ec:	0f 91       	pop	r16
    21ee:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    21f0:	80 91 ef 03 	lds	r24, 0x03EF
    21f4:	90 91 f0 03 	lds	r25, 0x03F0
    21f8:	82 0f       	add	r24, r18
    21fa:	93 1f       	adc	r25, r19
    21fc:	90 93 55 05 	sts	0x0555, r25
    2200:	80 93 54 05 	sts	0x0554, r24
    2204:	2f cf       	rjmp	.-418    	; 0x2064 <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2206:	10 92 fe 03 	sts	0x03FE, r1
    220a:	10 92 fd 03 	sts	0x03FD, r1
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2212:	35 95       	asr	r19
    2214:	27 95       	ror	r18
    2216:	35 95       	asr	r19
    2218:	27 95       	ror	r18
    221a:	35 95       	asr	r19
    221c:	27 95       	ror	r18
    221e:	35 95       	asr	r19
    2220:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2222:	31 83       	std	Z+1, r19	; 0x01
    2224:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2226:	42 e0       	ldi	r20, 0x02	; 2
    2228:	21 30       	cpi	r18, 0x01	; 1
    222a:	34 07       	cpc	r19, r20
    222c:	0c f0       	brlt	.+2      	; 0x2230 <__stack+0x31>
    222e:	6d cf       	rjmp	.-294    	; 0x210a <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2230:	6e ef       	ldi	r22, 0xFE	; 254
    2232:	20 30       	cpi	r18, 0x00	; 0
    2234:	36 07       	cpc	r19, r22
    2236:	9c f2       	brlt	.-90     	; 0x21de <start_vertical_speed_control_left+0x1f8>
    2238:	6c cf       	rjmp	.-296    	; 0x2112 <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    223a:	88 e6       	ldi	r24, 0x68	; 104
    223c:	91 e0       	ldi	r25, 0x01	; 1
    223e:	82 1b       	sub	r24, r18
    2240:	93 0b       	sbc	r25, r19
    2242:	95 95       	asr	r25
    2244:	87 95       	ror	r24
    2246:	95 95       	asr	r25
    2248:	87 95       	ror	r24
    224a:	49 96       	adiw	r24, 0x19	; 25
    224c:	90 93 04 02 	sts	0x0204, r25
    2250:	80 93 03 02 	sts	0x0203, r24
    2254:	ef ce       	rjmp	.-546    	; 0x2034 <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2256:	35 95       	asr	r19
    2258:	27 95       	ror	r18
    225a:	35 95       	asr	r19
    225c:	27 95       	ror	r18
    225e:	89 e1       	ldi	r24, 0x19	; 25
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	82 1b       	sub	r24, r18
    2264:	93 0b       	sbc	r25, r19
    2266:	90 93 04 02 	sts	0x0204, r25
    226a:	80 93 03 02 	sts	0x0203, r24
    226e:	e2 ce       	rjmp	.-572    	; 0x2034 <start_vertical_speed_control_left+0x4e>

00002270 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2270:	0f 93       	push	r16
    2272:	1f 93       	push	r17
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	09 f4       	brne	.+2      	; 0x2284 <start_vertical_speed_control_right+0x14>
    2282:	b7 c0       	rjmp	.+366    	; 0x23f2 <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2284:	20 91 32 05 	lds	r18, 0x0532
    2288:	30 91 33 05 	lds	r19, 0x0533
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	2e 30       	cpi	r18, 0x0E	; 14
    2290:	34 07       	cpc	r19, r20
    2292:	0c f4       	brge	.+2      	; 0x2296 <start_vertical_speed_control_right+0x26>
    2294:	88 c0       	rjmp	.+272    	; 0x23a6 <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    2296:	18 16       	cp	r1, r24
    2298:	19 06       	cpc	r1, r25
    229a:	0c f0       	brlt	.+2      	; 0x229e <start_vertical_speed_control_right+0x2e>
    229c:	13 c1       	rjmp	.+550    	; 0x24c4 <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    229e:	88 e6       	ldi	r24, 0x68	; 104
    22a0:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    22a2:	82 1b       	sub	r24, r18
    22a4:	93 0b       	sbc	r25, r19
    22a6:	95 95       	asr	r25
    22a8:	87 95       	ror	r24
    22aa:	95 95       	asr	r25
    22ac:	87 95       	ror	r24
    22ae:	29 e1       	ldi	r18, 0x19	; 25
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	28 1b       	sub	r18, r24
    22b4:	39 0b       	sbc	r19, r25
    22b6:	30 93 06 02 	sts	0x0206, r19
    22ba:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    22be:	40 91 7d 05 	lds	r20, 0x057D
    22c2:	50 91 7e 05 	lds	r21, 0x057E
    22c6:	50 93 57 05 	sts	0x0557, r21
    22ca:	40 93 56 05 	sts	0x0556, r20
	if(*pwm_right >= 0) {
    22ce:	20 81       	ld	r18, Z
    22d0:	31 81       	ldd	r19, Z+1	; 0x01
    22d2:	37 fd       	sbrc	r19, 7
    22d4:	d2 c0       	rjmp	.+420    	; 0x247a <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    22d6:	80 91 f1 03 	lds	r24, 0x03F1
    22da:	90 91 f2 03 	lds	r25, 0x03F2
    22de:	b9 01       	movw	r22, r18
    22e0:	68 1b       	sub	r22, r24
    22e2:	79 0b       	sbc	r23, r25
    22e4:	cb 01       	movw	r24, r22
    22e6:	70 93 7e 05 	sts	0x057E, r23
    22ea:	60 93 7d 05 	sts	0x057D, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    22ee:	20 91 01 04 	lds	r18, 0x0401
    22f2:	30 91 02 04 	lds	r19, 0x0402
    22f6:	28 0f       	add	r18, r24
    22f8:	39 1f       	adc	r19, r25
    22fa:	30 93 02 04 	sts	0x0402, r19
    22fe:	20 93 01 04 	sts	0x0401, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2302:	76 e0       	ldi	r23, 0x06	; 6
    2304:	21 34       	cpi	r18, 0x41	; 65
    2306:	37 07       	cpc	r19, r23
    2308:	0c f4       	brge	.+2      	; 0x230c <start_vertical_speed_control_right+0x9c>
    230a:	84 c0       	rjmp	.+264    	; 0x2414 <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    230c:	20 e4       	ldi	r18, 0x40	; 64
    230e:	36 e0       	ldi	r19, 0x06	; 6
    2310:	30 93 02 04 	sts	0x0402, r19
    2314:	20 93 01 04 	sts	0x0401, r18
    2318:	60 ec       	ldi	r22, 0xC0	; 192
    231a:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    231c:	9c 01       	movw	r18, r24
    231e:	22 0f       	add	r18, r18
    2320:	33 1f       	adc	r19, r19
    2322:	dc 01       	movw	r26, r24
    2324:	aa 0f       	add	r26, r26
    2326:	bb 1f       	adc	r27, r27
    2328:	aa 0f       	add	r26, r26
    232a:	bb 1f       	adc	r27, r27
    232c:	aa 0f       	add	r26, r26
    232e:	bb 1f       	adc	r27, r27
    2330:	2a 0f       	add	r18, r26
    2332:	3b 1f       	adc	r19, r27
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2334:	00 81       	ld	r16, Z
    2336:	11 81       	ldd	r17, Z+1	; 0x01
    2338:	c0 91 05 02 	lds	r28, 0x0205
    233c:	d0 91 06 02 	lds	r29, 0x0206
    2340:	0c 9f       	mul	r16, r28
    2342:	d0 01       	movw	r26, r0
    2344:	0d 9f       	mul	r16, r29
    2346:	b0 0d       	add	r27, r0
    2348:	1c 9f       	mul	r17, r28
    234a:	b0 0d       	add	r27, r0
    234c:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    234e:	2a 0f       	add	r18, r26
    2350:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2352:	48 1b       	sub	r20, r24
    2354:	59 0b       	sbc	r21, r25
    2356:	44 0f       	add	r20, r20
    2358:	55 1f       	adc	r21, r21
    235a:	24 0f       	add	r18, r20
    235c:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    235e:	26 0f       	add	r18, r22
    2360:	37 1f       	adc	r19, r23
    2362:	30 93 fc 03 	sts	0x03FC, r19
    2366:	20 93 fb 03 	sts	0x03FB, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    236a:	37 fd       	sbrc	r19, 7
    236c:	69 c0       	rjmp	.+210    	; 0x2440 <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    236e:	12 16       	cp	r1, r18
    2370:	13 06       	cpc	r1, r19
    2372:	0c f0       	brlt	.+2      	; 0x2376 <start_vertical_speed_control_right+0x106>
    2374:	6f c0       	rjmp	.+222    	; 0x2454 <start_vertical_speed_control_right+0x1e4>
    2376:	80 81       	ld	r24, Z
    2378:	91 81       	ldd	r25, Z+1	; 0x01
    237a:	97 fd       	sbrc	r25, 7
    237c:	89 c0       	rjmp	.+274    	; 0x2490 <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    237e:	7d e5       	ldi	r23, 0x5D	; 93
    2380:	21 3c       	cpi	r18, 0xC1	; 193
    2382:	37 07       	cpc	r19, r23
    2384:	0c f4       	brge	.+2      	; 0x2388 <start_vertical_speed_control_right+0x118>
    2386:	66 c0       	rjmp	.+204    	; 0x2454 <start_vertical_speed_control_right+0x1e4>
    2388:	80 ec       	ldi	r24, 0xC0	; 192
    238a:	9d e5       	ldi	r25, 0x5D	; 93
    238c:	90 93 fc 03 	sts	0x03FC, r25
    2390:	80 93 fb 03 	sts	0x03FB, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	92 e0       	ldi	r25, 0x02	; 2
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	1f 91       	pop	r17
    23a2:	0f 91       	pop	r16
    23a4:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    23a6:	24 3b       	cpi	r18, 0xB4	; 180
    23a8:	31 05       	cpc	r19, r1
    23aa:	94 f4       	brge	.+36     	; 0x23d0 <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    23ac:	2a 35       	cpi	r18, 0x5A	; 90
    23ae:	31 05       	cpc	r19, r1
    23b0:	7c f4       	brge	.+30     	; 0x23d0 <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    23b2:	18 16       	cp	r1, r24
    23b4:	19 06       	cpc	r1, r25
    23b6:	0c f0       	brlt	.+2      	; 0x23ba <start_vertical_speed_control_right+0x14a>
    23b8:	93 c0       	rjmp	.+294    	; 0x24e0 <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    23ba:	35 95       	asr	r19
    23bc:	27 95       	ror	r18
    23be:	35 95       	asr	r19
    23c0:	27 95       	ror	r18
    23c2:	27 5e       	subi	r18, 0xE7	; 231
    23c4:	3f 4f       	sbci	r19, 0xFF	; 255
    23c6:	30 93 06 02 	sts	0x0206, r19
    23ca:	20 93 05 02 	sts	0x0205, r18
    23ce:	77 cf       	rjmp	.-274    	; 0x22be <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    23d0:	18 16       	cp	r1, r24
    23d2:	19 06       	cpc	r1, r25
    23d4:	94 f5       	brge	.+100    	; 0x243a <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    23d6:	84 eb       	ldi	r24, 0xB4	; 180
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	82 1b       	sub	r24, r18
    23dc:	93 0b       	sbc	r25, r19
    23de:	95 95       	asr	r25
    23e0:	87 95       	ror	r24
    23e2:	95 95       	asr	r25
    23e4:	87 95       	ror	r24
    23e6:	49 96       	adiw	r24, 0x19	; 25
    23e8:	90 93 06 02 	sts	0x0206, r25
    23ec:	80 93 05 02 	sts	0x0205, r24
    23f0:	66 cf       	rjmp	.-308    	; 0x22be <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    23f2:	10 92 02 04 	sts	0x0402, r1
    23f6:	10 92 01 04 	sts	0x0401, r1
		delta_right_speed_current = 0;
    23fa:	10 92 7e 05 	sts	0x057E, r1
    23fe:	10 92 7d 05 	sts	0x057D, r1
		delta_right_speed_prev = 0;
    2402:	10 92 57 05 	sts	0x0557, r1
    2406:	10 92 56 05 	sts	0x0556, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	1f 91       	pop	r17
    2410:	0f 91       	pop	r16
    2412:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2414:	69 ef       	ldi	r22, 0xF9	; 249
    2416:	20 3c       	cpi	r18, 0xC0	; 192
    2418:	36 07       	cpc	r19, r22
    241a:	4c f4       	brge	.+18     	; 0x242e <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    241c:	20 ec       	ldi	r18, 0xC0	; 192
    241e:	39 ef       	ldi	r19, 0xF9	; 249
    2420:	30 93 02 04 	sts	0x0402, r19
    2424:	20 93 01 04 	sts	0x0401, r18
    2428:	60 e4       	ldi	r22, 0x40	; 64
    242a:	7d ee       	ldi	r23, 0xED	; 237
    242c:	77 cf       	rjmp	.-274    	; 0x231c <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    242e:	b9 01       	movw	r22, r18
    2430:	66 0f       	add	r22, r22
    2432:	77 1f       	adc	r23, r23
    2434:	62 0f       	add	r22, r18
    2436:	73 1f       	adc	r23, r19
    2438:	71 cf       	rjmp	.-286    	; 0x231c <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    243a:	84 eb       	ldi	r24, 0xB4	; 180
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	31 cf       	rjmp	.-414    	; 0x22a2 <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	97 fd       	sbrc	r25, 7
    2446:	06 c0       	rjmp	.+12     	; 0x2454 <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    2448:	10 92 fc 03 	sts	0x03FC, r1
    244c:	10 92 fb 03 	sts	0x03FB, r1
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2454:	82 ea       	ldi	r24, 0xA2	; 162
    2456:	20 34       	cpi	r18, 0x40	; 64
    2458:	38 07       	cpc	r19, r24
    245a:	04 f5       	brge	.+64     	; 0x249c <start_vertical_speed_control_right+0x22c>
    245c:	80 e4       	ldi	r24, 0x40	; 64
    245e:	92 ea       	ldi	r25, 0xA2	; 162
    2460:	90 93 fc 03 	sts	0x03FC, r25
    2464:	80 93 fb 03 	sts	0x03FB, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	9e ef       	ldi	r25, 0xFE	; 254
    246c:	91 83       	std	Z+1, r25	; 0x01
    246e:	80 83       	st	Z, r24

}
    2470:	df 91       	pop	r29
    2472:	cf 91       	pop	r28
    2474:	1f 91       	pop	r17
    2476:	0f 91       	pop	r16
    2478:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    247a:	80 91 f1 03 	lds	r24, 0x03F1
    247e:	90 91 f2 03 	lds	r25, 0x03F2
    2482:	82 0f       	add	r24, r18
    2484:	93 1f       	adc	r25, r19
    2486:	90 93 7e 05 	sts	0x057E, r25
    248a:	80 93 7d 05 	sts	0x057D, r24
    248e:	2f cf       	rjmp	.-418    	; 0x22ee <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2490:	10 92 fc 03 	sts	0x03FC, r1
    2494:	10 92 fb 03 	sts	0x03FB, r1
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    249c:	35 95       	asr	r19
    249e:	27 95       	ror	r18
    24a0:	35 95       	asr	r19
    24a2:	27 95       	ror	r18
    24a4:	35 95       	asr	r19
    24a6:	27 95       	ror	r18
    24a8:	35 95       	asr	r19
    24aa:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    24ac:	31 83       	std	Z+1, r19	; 0x01
    24ae:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    24b0:	42 e0       	ldi	r20, 0x02	; 2
    24b2:	21 30       	cpi	r18, 0x01	; 1
    24b4:	34 07       	cpc	r19, r20
    24b6:	0c f0       	brlt	.+2      	; 0x24ba <start_vertical_speed_control_right+0x24a>
    24b8:	6d cf       	rjmp	.-294    	; 0x2394 <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    24ba:	6e ef       	ldi	r22, 0xFE	; 254
    24bc:	20 30       	cpi	r18, 0x00	; 0
    24be:	36 07       	cpc	r19, r22
    24c0:	9c f2       	brlt	.-90     	; 0x2468 <start_vertical_speed_control_right+0x1f8>
    24c2:	6c cf       	rjmp	.-296    	; 0x239c <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    24c4:	88 e6       	ldi	r24, 0x68	; 104
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	82 1b       	sub	r24, r18
    24ca:	93 0b       	sbc	r25, r19
    24cc:	95 95       	asr	r25
    24ce:	87 95       	ror	r24
    24d0:	95 95       	asr	r25
    24d2:	87 95       	ror	r24
    24d4:	49 96       	adiw	r24, 0x19	; 25
    24d6:	90 93 06 02 	sts	0x0206, r25
    24da:	80 93 05 02 	sts	0x0205, r24
    24de:	ef ce       	rjmp	.-546    	; 0x22be <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    24e0:	35 95       	asr	r19
    24e2:	27 95       	ror	r18
    24e4:	35 95       	asr	r19
    24e6:	27 95       	ror	r18
    24e8:	89 e1       	ldi	r24, 0x19	; 25
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	82 1b       	sub	r24, r18
    24ee:	93 0b       	sbc	r25, r19
    24f0:	90 93 06 02 	sts	0x0206, r25
    24f4:	80 93 05 02 	sts	0x0205, r24
    24f8:	e2 ce       	rjmp	.-572    	; 0x22be <start_vertical_speed_control_right+0x4e>

000024fa <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    24fa:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	09 f4       	brne	.+2      	; 0x2506 <start_horizontal_speed_control_right+0xc>
    2504:	7b c0       	rjmp	.+246    	; 0x25fc <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2506:	a0 91 7d 05 	lds	r26, 0x057D
    250a:	b0 91 7e 05 	lds	r27, 0x057E
    250e:	b0 93 57 05 	sts	0x0557, r27
    2512:	a0 93 56 05 	sts	0x0556, r26
	if(*pwm_right >= 0) {
    2516:	20 81       	ld	r18, Z
    2518:	31 81       	ldd	r19, Z+1	; 0x01
    251a:	37 fd       	sbrc	r19, 7
    251c:	89 c0       	rjmp	.+274    	; 0x2630 <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    251e:	80 91 f1 03 	lds	r24, 0x03F1
    2522:	90 91 f2 03 	lds	r25, 0x03F2
    2526:	a9 01       	movw	r20, r18
    2528:	48 1b       	sub	r20, r24
    252a:	59 0b       	sbc	r21, r25
    252c:	ca 01       	movw	r24, r20
    252e:	50 93 7e 05 	sts	0x057E, r21
    2532:	40 93 7d 05 	sts	0x057D, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2536:	20 91 01 04 	lds	r18, 0x0401
    253a:	30 91 02 04 	lds	r19, 0x0402
    253e:	28 0f       	add	r18, r24
    2540:	39 1f       	adc	r19, r25
    2542:	30 93 02 04 	sts	0x0402, r19
    2546:	20 93 01 04 	sts	0x0401, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    254a:	56 e0       	ldi	r21, 0x06	; 6
    254c:	21 34       	cpi	r18, 0x41	; 65
    254e:	35 07       	cpc	r19, r21
    2550:	0c f4       	brge	.+2      	; 0x2554 <start_horizontal_speed_control_right+0x5a>
    2552:	61 c0       	rjmp	.+194    	; 0x2616 <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    2554:	20 e4       	ldi	r18, 0x40	; 64
    2556:	36 e0       	ldi	r19, 0x06	; 6
    2558:	30 93 02 04 	sts	0x0402, r19
    255c:	20 93 01 04 	sts	0x0401, r18
    2560:	60 e8       	ldi	r22, 0x80	; 128
    2562:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    2564:	9c 01       	movw	r18, r24
    2566:	22 0f       	add	r18, r18
    2568:	33 1f       	adc	r19, r19
    256a:	28 0f       	add	r18, r24
    256c:	39 1f       	adc	r19, r25
    256e:	22 0f       	add	r18, r18
    2570:	33 1f       	adc	r19, r19
    2572:	22 0f       	add	r18, r18
    2574:	33 1f       	adc	r19, r19
    2576:	22 0f       	add	r18, r18
    2578:	33 1f       	adc	r19, r19
    257a:	28 0f       	add	r18, r24
    257c:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    257e:	40 81       	ld	r20, Z
    2580:	51 81       	ldd	r21, Z+1	; 0x01
    2582:	44 0f       	add	r20, r20
    2584:	55 1f       	adc	r21, r21
    2586:	44 0f       	add	r20, r20
    2588:	55 1f       	adc	r21, r21
    258a:	44 0f       	add	r20, r20
    258c:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    258e:	24 0f       	add	r18, r20
    2590:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    2592:	ad 01       	movw	r20, r26
    2594:	48 1b       	sub	r20, r24
    2596:	59 0b       	sbc	r21, r25
    2598:	ca 01       	movw	r24, r20
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	84 0f       	add	r24, r20
    25a0:	95 1f       	adc	r25, r21
    25a2:	28 0f       	add	r18, r24
    25a4:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    25a6:	26 0f       	add	r18, r22
    25a8:	37 1f       	adc	r19, r23
    25aa:	30 93 fc 03 	sts	0x03FC, r19
    25ae:	20 93 fb 03 	sts	0x03FB, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    25b2:	37 fd       	sbrc	r19, 7
    25b4:	4c c0       	rjmp	.+152    	; 0x264e <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    25b6:	12 16       	cp	r1, r18
    25b8:	13 06       	cpc	r1, r19
    25ba:	0c f0       	brlt	.+2      	; 0x25be <start_horizontal_speed_control_right+0xc4>
    25bc:	52 c0       	rjmp	.+164    	; 0x2662 <start_horizontal_speed_control_right+0x168>
    25be:	80 81       	ld	r24, Z
    25c0:	91 81       	ldd	r25, Z+1	; 0x01
    25c2:	97 fd       	sbrc	r25, 7
    25c4:	67 c0       	rjmp	.+206    	; 0x2694 <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    25c6:	5d e5       	ldi	r21, 0x5D	; 93
    25c8:	21 3c       	cpi	r18, 0xC1	; 193
    25ca:	35 07       	cpc	r19, r21
    25cc:	0c f4       	brge	.+2      	; 0x25d0 <start_horizontal_speed_control_right+0xd6>
    25ce:	49 c0       	rjmp	.+146    	; 0x2662 <start_horizontal_speed_control_right+0x168>
    25d0:	80 ec       	ldi	r24, 0xC0	; 192
    25d2:	9d e5       	ldi	r25, 0x5D	; 93
    25d4:	90 93 fc 03 	sts	0x03FC, r25
    25d8:	80 93 fb 03 	sts	0x03FB, r24
    25dc:	2c ed       	ldi	r18, 0xDC	; 220
    25de:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    25e0:	22 5e       	subi	r18, 0xE2	; 226
    25e2:	3f 4f       	sbci	r19, 0xFF	; 255
    25e4:	31 83       	std	Z+1, r19	; 0x01
    25e6:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    25e8:	42 e0       	ldi	r20, 0x02	; 2
    25ea:	21 30       	cpi	r18, 0x01	; 1
    25ec:	34 07       	cpc	r19, r20
    25ee:	0c f4       	brge	.+2      	; 0x25f2 <start_horizontal_speed_control_right+0xf8>
    25f0:	48 c0       	rjmp	.+144    	; 0x2682 <start_horizontal_speed_control_right+0x188>
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	92 e0       	ldi	r25, 0x02	; 2
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	80 83       	st	Z, r24
    25fa:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    25fc:	10 92 02 04 	sts	0x0402, r1
    2600:	10 92 01 04 	sts	0x0401, r1
		delta_right_speed_current = 0;
    2604:	10 92 7e 05 	sts	0x057E, r1
    2608:	10 92 7d 05 	sts	0x057D, r1
		delta_right_speed_prev = 0;
    260c:	10 92 57 05 	sts	0x0557, r1
    2610:	10 92 56 05 	sts	0x0556, r1
		return;
    2614:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2616:	49 ef       	ldi	r20, 0xF9	; 249
    2618:	20 3c       	cpi	r18, 0xC0	; 192
    261a:	34 07       	cpc	r19, r20
    261c:	a4 f4       	brge	.+40     	; 0x2646 <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    261e:	20 ec       	ldi	r18, 0xC0	; 192
    2620:	39 ef       	ldi	r19, 0xF9	; 249
    2622:	30 93 02 04 	sts	0x0402, r19
    2626:	20 93 01 04 	sts	0x0401, r18
    262a:	60 e8       	ldi	r22, 0x80	; 128
    262c:	73 ef       	ldi	r23, 0xF3	; 243
    262e:	9a cf       	rjmp	.-204    	; 0x2564 <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2630:	80 91 f1 03 	lds	r24, 0x03F1
    2634:	90 91 f2 03 	lds	r25, 0x03F2
    2638:	82 0f       	add	r24, r18
    263a:	93 1f       	adc	r25, r19
    263c:	90 93 7e 05 	sts	0x057E, r25
    2640:	80 93 7d 05 	sts	0x057D, r24
    2644:	78 cf       	rjmp	.-272    	; 0x2536 <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2646:	b9 01       	movw	r22, r18
    2648:	66 0f       	add	r22, r22
    264a:	77 1f       	adc	r23, r23
    264c:	8b cf       	rjmp	.-234    	; 0x2564 <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    264e:	80 81       	ld	r24, Z
    2650:	91 81       	ldd	r25, Z+1	; 0x01
    2652:	97 fd       	sbrc	r25, 7
    2654:	06 c0       	rjmp	.+12     	; 0x2662 <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    2656:	10 92 fc 03 	sts	0x03FC, r1
    265a:	10 92 fb 03 	sts	0x03FB, r1
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2662:	82 ea       	ldi	r24, 0xA2	; 162
    2664:	20 34       	cpi	r18, 0x40	; 64
    2666:	38 07       	cpc	r19, r24
    2668:	dc f4       	brge	.+54     	; 0x26a0 <start_horizontal_speed_control_right+0x1a6>
    266a:	80 e4       	ldi	r24, 0x40	; 64
    266c:	92 ea       	ldi	r25, 0xA2	; 162
    266e:	90 93 fc 03 	sts	0x03FC, r25
    2672:	80 93 fb 03 	sts	0x03FB, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2676:	24 e2       	ldi	r18, 0x24	; 36
    2678:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    267a:	2e 51       	subi	r18, 0x1E	; 30
    267c:	30 40       	sbci	r19, 0x00	; 0
    267e:	31 83       	std	Z+1, r19	; 0x01
    2680:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2682:	5e ef       	ldi	r21, 0xFE	; 254
    2684:	20 30       	cpi	r18, 0x00	; 0
    2686:	35 07       	cpc	r19, r21
    2688:	24 f4       	brge	.+8      	; 0x2692 <start_horizontal_speed_control_right+0x198>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	9e ef       	ldi	r25, 0xFE	; 254
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	80 83       	st	Z, r24
    2692:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2694:	10 92 fc 03 	sts	0x03FC, r1
    2698:	10 92 fb 03 	sts	0x03FB, r1
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    26a0:	35 95       	asr	r19
    26a2:	27 95       	ror	r18
    26a4:	35 95       	asr	r19
    26a6:	27 95       	ror	r18
    26a8:	35 95       	asr	r19
    26aa:	27 95       	ror	r18
    26ac:	35 95       	asr	r19
    26ae:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    26b0:	31 83       	std	Z+1, r19	; 0x01
    26b2:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    26b4:	12 16       	cp	r1, r18
    26b6:	13 06       	cpc	r1, r19
    26b8:	0c f4       	brge	.+2      	; 0x26bc <start_horizontal_speed_control_right+0x1c2>
    26ba:	92 cf       	rjmp	.-220    	; 0x25e0 <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    26bc:	21 15       	cp	r18, r1
    26be:	31 05       	cpc	r19, r1
    26c0:	e1 f6       	brne	.-72     	; 0x267a <start_horizontal_speed_control_right+0x180>
    26c2:	08 95       	ret

000026c4 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    26c4:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <start_horizontal_speed_control_left+0xc>
    26ce:	7b c0       	rjmp	.+246    	; 0x27c6 <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    26d0:	a0 91 54 05 	lds	r26, 0x0554
    26d4:	b0 91 55 05 	lds	r27, 0x0555
    26d8:	b0 93 6f 05 	sts	0x056F, r27
    26dc:	a0 93 6e 05 	sts	0x056E, r26
	if(*pwm_left >= 0) {
    26e0:	20 81       	ld	r18, Z
    26e2:	31 81       	ldd	r19, Z+1	; 0x01
    26e4:	37 fd       	sbrc	r19, 7
    26e6:	89 c0       	rjmp	.+274    	; 0x27fa <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    26e8:	80 91 ef 03 	lds	r24, 0x03EF
    26ec:	90 91 f0 03 	lds	r25, 0x03F0
    26f0:	a9 01       	movw	r20, r18
    26f2:	48 1b       	sub	r20, r24
    26f4:	59 0b       	sbc	r21, r25
    26f6:	ca 01       	movw	r24, r20
    26f8:	50 93 55 05 	sts	0x0555, r21
    26fc:	40 93 54 05 	sts	0x0554, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    2700:	20 91 ff 03 	lds	r18, 0x03FF
    2704:	30 91 00 04 	lds	r19, 0x0400
    2708:	28 0f       	add	r18, r24
    270a:	39 1f       	adc	r19, r25
    270c:	30 93 00 04 	sts	0x0400, r19
    2710:	20 93 ff 03 	sts	0x03FF, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    2714:	56 e0       	ldi	r21, 0x06	; 6
    2716:	21 34       	cpi	r18, 0x41	; 65
    2718:	35 07       	cpc	r19, r21
    271a:	0c f4       	brge	.+2      	; 0x271e <start_horizontal_speed_control_left+0x5a>
    271c:	61 c0       	rjmp	.+194    	; 0x27e0 <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    271e:	20 e4       	ldi	r18, 0x40	; 64
    2720:	36 e0       	ldi	r19, 0x06	; 6
    2722:	30 93 00 04 	sts	0x0400, r19
    2726:	20 93 ff 03 	sts	0x03FF, r18
    272a:	60 e8       	ldi	r22, 0x80	; 128
    272c:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    272e:	9c 01       	movw	r18, r24
    2730:	22 0f       	add	r18, r18
    2732:	33 1f       	adc	r19, r19
    2734:	28 0f       	add	r18, r24
    2736:	39 1f       	adc	r19, r25
    2738:	22 0f       	add	r18, r18
    273a:	33 1f       	adc	r19, r19
    273c:	22 0f       	add	r18, r18
    273e:	33 1f       	adc	r19, r19
    2740:	22 0f       	add	r18, r18
    2742:	33 1f       	adc	r19, r19
    2744:	28 0f       	add	r18, r24
    2746:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    2748:	40 81       	ld	r20, Z
    274a:	51 81       	ldd	r21, Z+1	; 0x01
    274c:	44 0f       	add	r20, r20
    274e:	55 1f       	adc	r21, r21
    2750:	44 0f       	add	r20, r20
    2752:	55 1f       	adc	r21, r21
    2754:	44 0f       	add	r20, r20
    2756:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    2758:	24 0f       	add	r18, r20
    275a:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    275c:	ad 01       	movw	r20, r26
    275e:	48 1b       	sub	r20, r24
    2760:	59 0b       	sbc	r21, r25
    2762:	ca 01       	movw	r24, r20
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	84 0f       	add	r24, r20
    276a:	95 1f       	adc	r25, r21
    276c:	28 0f       	add	r18, r24
    276e:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    2770:	26 0f       	add	r18, r22
    2772:	37 1f       	adc	r19, r23
    2774:	30 93 fe 03 	sts	0x03FE, r19
    2778:	20 93 fd 03 	sts	0x03FD, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    277c:	37 fd       	sbrc	r19, 7
    277e:	4c c0       	rjmp	.+152    	; 0x2818 <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2780:	12 16       	cp	r1, r18
    2782:	13 06       	cpc	r1, r19
    2784:	0c f0       	brlt	.+2      	; 0x2788 <start_horizontal_speed_control_left+0xc4>
    2786:	52 c0       	rjmp	.+164    	; 0x282c <start_horizontal_speed_control_left+0x168>
    2788:	80 81       	ld	r24, Z
    278a:	91 81       	ldd	r25, Z+1	; 0x01
    278c:	97 fd       	sbrc	r25, 7
    278e:	67 c0       	rjmp	.+206    	; 0x285e <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2790:	5d e5       	ldi	r21, 0x5D	; 93
    2792:	21 3c       	cpi	r18, 0xC1	; 193
    2794:	35 07       	cpc	r19, r21
    2796:	0c f4       	brge	.+2      	; 0x279a <start_horizontal_speed_control_left+0xd6>
    2798:	49 c0       	rjmp	.+146    	; 0x282c <start_horizontal_speed_control_left+0x168>
    279a:	80 ec       	ldi	r24, 0xC0	; 192
    279c:	9d e5       	ldi	r25, 0x5D	; 93
    279e:	90 93 fe 03 	sts	0x03FE, r25
    27a2:	80 93 fd 03 	sts	0x03FD, r24
    27a6:	2c ed       	ldi	r18, 0xDC	; 220
    27a8:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    27aa:	22 5e       	subi	r18, 0xE2	; 226
    27ac:	3f 4f       	sbci	r19, 0xFF	; 255
    27ae:	31 83       	std	Z+1, r19	; 0x01
    27b0:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    27b2:	42 e0       	ldi	r20, 0x02	; 2
    27b4:	21 30       	cpi	r18, 0x01	; 1
    27b6:	34 07       	cpc	r19, r20
    27b8:	0c f4       	brge	.+2      	; 0x27bc <start_horizontal_speed_control_left+0xf8>
    27ba:	48 c0       	rjmp	.+144    	; 0x284c <start_horizontal_speed_control_left+0x188>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	92 e0       	ldi	r25, 0x02	; 2
    27c0:	91 83       	std	Z+1, r25	; 0x01
    27c2:	80 83       	st	Z, r24
    27c4:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    27c6:	10 92 00 04 	sts	0x0400, r1
    27ca:	10 92 ff 03 	sts	0x03FF, r1
		delta_left_speed_current = 0;
    27ce:	10 92 55 05 	sts	0x0555, r1
    27d2:	10 92 54 05 	sts	0x0554, r1
		delta_left_speed_prev = 0;
    27d6:	10 92 6f 05 	sts	0x056F, r1
    27da:	10 92 6e 05 	sts	0x056E, r1
		return;
    27de:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    27e0:	49 ef       	ldi	r20, 0xF9	; 249
    27e2:	20 3c       	cpi	r18, 0xC0	; 192
    27e4:	34 07       	cpc	r19, r20
    27e6:	a4 f4       	brge	.+40     	; 0x2810 <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    27e8:	20 ec       	ldi	r18, 0xC0	; 192
    27ea:	39 ef       	ldi	r19, 0xF9	; 249
    27ec:	30 93 00 04 	sts	0x0400, r19
    27f0:	20 93 ff 03 	sts	0x03FF, r18
    27f4:	60 e8       	ldi	r22, 0x80	; 128
    27f6:	73 ef       	ldi	r23, 0xF3	; 243
    27f8:	9a cf       	rjmp	.-204    	; 0x272e <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    27fa:	80 91 ef 03 	lds	r24, 0x03EF
    27fe:	90 91 f0 03 	lds	r25, 0x03F0
    2802:	82 0f       	add	r24, r18
    2804:	93 1f       	adc	r25, r19
    2806:	90 93 55 05 	sts	0x0555, r25
    280a:	80 93 54 05 	sts	0x0554, r24
    280e:	78 cf       	rjmp	.-272    	; 0x2700 <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2810:	b9 01       	movw	r22, r18
    2812:	66 0f       	add	r22, r22
    2814:	77 1f       	adc	r23, r23
    2816:	8b cf       	rjmp	.-234    	; 0x272e <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	97 fd       	sbrc	r25, 7
    281e:	06 c0       	rjmp	.+12     	; 0x282c <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    2820:	10 92 fe 03 	sts	0x03FE, r1
    2824:	10 92 fd 03 	sts	0x03FD, r1
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    282c:	82 ea       	ldi	r24, 0xA2	; 162
    282e:	20 34       	cpi	r18, 0x40	; 64
    2830:	38 07       	cpc	r19, r24
    2832:	dc f4       	brge	.+54     	; 0x286a <start_horizontal_speed_control_left+0x1a6>
    2834:	80 e4       	ldi	r24, 0x40	; 64
    2836:	92 ea       	ldi	r25, 0xA2	; 162
    2838:	90 93 fe 03 	sts	0x03FE, r25
    283c:	80 93 fd 03 	sts	0x03FD, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2840:	24 e2       	ldi	r18, 0x24	; 36
    2842:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    2844:	2e 51       	subi	r18, 0x1E	; 30
    2846:	30 40       	sbci	r19, 0x00	; 0
    2848:	31 83       	std	Z+1, r19	; 0x01
    284a:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    284c:	5e ef       	ldi	r21, 0xFE	; 254
    284e:	20 30       	cpi	r18, 0x00	; 0
    2850:	35 07       	cpc	r19, r21
    2852:	24 f4       	brge	.+8      	; 0x285c <start_horizontal_speed_control_left+0x198>
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	9e ef       	ldi	r25, 0xFE	; 254
    2858:	91 83       	std	Z+1, r25	; 0x01
    285a:	80 83       	st	Z, r24
    285c:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    285e:	10 92 fe 03 	sts	0x03FE, r1
    2862:	10 92 fd 03 	sts	0x03FD, r1
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    286a:	35 95       	asr	r19
    286c:	27 95       	ror	r18
    286e:	35 95       	asr	r19
    2870:	27 95       	ror	r18
    2872:	35 95       	asr	r19
    2874:	27 95       	ror	r18
    2876:	35 95       	asr	r19
    2878:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    287a:	31 83       	std	Z+1, r19	; 0x01
    287c:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    287e:	12 16       	cp	r1, r18
    2880:	13 06       	cpc	r1, r19
    2882:	0c f4       	brge	.+2      	; 0x2886 <start_horizontal_speed_control_left+0x1c2>
    2884:	92 cf       	rjmp	.-220    	; 0x27aa <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    2886:	21 15       	cp	r18, r1
    2888:	31 05       	cpc	r19, r1
    288a:	e1 f6       	brne	.-72     	; 0x2844 <start_horizontal_speed_control_left+0x180>
    288c:	08 95       	ret

0000288e <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    288e:	85 b7       	in	r24, 0x35	; 53
    2890:	80 61       	ori	r24, 0x10	; 16
    2892:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    2894:	8f ef       	ldi	r24, 0xFF	; 255
    2896:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    2898:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    289a:	97 ef       	ldi	r25, 0xF7	; 247
    289c:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    289e:	90 ee       	ldi	r25, 0xE0	; 224
    28a0:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    28a2:	90 ef       	ldi	r25, 0xF0	; 240
    28a4:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    28a6:	90 eb       	ldi	r25, 0xB0	; 176
    28a8:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    28aa:	9c ef       	ldi	r25, 0xFC	; 252
    28ac:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    28ae:	93 e0       	ldi	r25, 0x03	; 3
    28b0:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    28b2:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    28b4:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    28b6:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    28b8:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    28ba:	80 91 42 05 	lds	r24, 0x0542
    28be:	88 23       	and	r24, r24
    28c0:	e1 f0       	breq	.+56     	; 0x28fa <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    28c2:	81 30       	cpi	r24, 0x01	; 1
    28c4:	d1 f0       	breq	.+52     	; 0x28fa <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    28c6:	82 30       	cpi	r24, 0x02	; 2
    28c8:	51 f1       	breq	.+84     	; 0x291e <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    28ca:	9f ef       	ldi	r25, 0xFF	; 255
    28cc:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    28d0:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    28d4:	9f e0       	ldi	r25, 0x0F	; 15
    28d6:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    28da:	88 23       	and	r24, r24
    28dc:	a9 f4       	brne	.+42     	; 0x2908 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    28de:	90 91 05 01 	lds	r25, 0x0105
    28e2:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    28e6:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    28ea:	9f ef       	ldi	r25, 0xFF	; 255
    28ec:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    28f0:	88 23       	and	r24, r24
    28f2:	29 f4       	brne	.+10     	; 0x28fe <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    28f4:	10 92 0b 01 	sts	0x010B, r1
    28f8:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    28fa:	14 ba       	out	0x14, r1	; 20
    28fc:	e6 cf       	rjmp	.-52     	; 0x28ca <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    28fe:	81 30       	cpi	r24, 0x01	; 1
    2900:	c9 f3       	breq	.-14     	; 0x28f4 <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    2902:	82 30       	cpi	r24, 0x02	; 2
    2904:	41 f0       	breq	.+16     	; 0x2916 <initPortsIO+0x88>
    2906:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    2908:	81 30       	cpi	r24, 0x01	; 1
    290a:	11 f0       	breq	.+4      	; 0x2910 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    290c:	82 30       	cpi	r24, 0x02	; 2
    290e:	59 f7       	brne	.-42     	; 0x28e6 <initPortsIO+0x58>
		PORTJ = 0x0F;
    2910:	90 93 05 01 	sts	0x0105, r25
    2914:	e8 cf       	rjmp	.-48     	; 0x28e6 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    2916:	87 ef       	ldi	r24, 0xF7	; 247
    2918:	80 93 0b 01 	sts	0x010B, r24
    291c:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    291e:	98 e0       	ldi	r25, 0x08	; 8
    2920:	94 bb       	out	0x14, r25	; 20
    2922:	d3 cf       	rjmp	.-90     	; 0x28ca <initPortsIO+0x3c>

00002924 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    2924:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    2928:	10 92 bc 00 	sts	0x00BC, r1
}
    292c:	08 95       	ret

0000292e <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    292e:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    2930:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    2932:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    293c:	08 95       	ret

0000293e <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    293e:	94 ea       	ldi	r25, 0xA4	; 164
    2940:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2944:	90 91 bc 00 	lds	r25, 0x00BC
    2948:	97 ff       	sbrs	r25, 7
    294a:	fc cf       	rjmp	.-8      	; 0x2944 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    294c:	90 91 b9 00 	lds	r25, 0x00B9
    2950:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2952:	98 30       	cpi	r25, 0x08	; 8
    2954:	21 f0       	breq	.+8      	; 0x295e <i2c_start+0x20>
    2956:	90 31       	cpi	r25, 0x10	; 16
    2958:	11 f0       	breq	.+4      	; 0x295e <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	08 95       	ret
	}

	// send device address
	TWDR = address;
    295e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2962:	84 e8       	ldi	r24, 0x84	; 132
    2964:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2968:	80 91 bc 00 	lds	r24, 0x00BC
    296c:	87 ff       	sbrs	r24, 7
    296e:	fc cf       	rjmp	.-8      	; 0x2968 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2970:	90 91 b9 00 	lds	r25, 0x00B9
    2974:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2976:	98 31       	cpi	r25, 0x18	; 24
    2978:	21 f0       	breq	.+8      	; 0x2982 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 34       	cpi	r25, 0x40	; 64
    297e:	19 f0       	breq	.+6      	; 0x2986 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2980:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2982:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2984:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	08 95       	ret

0000298a <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    298a:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    298c:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    298e:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2990:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2994:	90 91 bc 00 	lds	r25, 0x00BC
    2998:	97 ff       	sbrs	r25, 7
    299a:	fc cf       	rjmp	.-8      	; 0x2994 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    299c:	90 91 b9 00 	lds	r25, 0x00B9
    29a0:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    29a2:	98 30       	cpi	r25, 0x08	; 8
    29a4:	11 f0       	breq	.+4      	; 0x29aa <i2c_start_wait+0x20>
    29a6:	90 31       	cpi	r25, 0x10	; 16
    29a8:	99 f7       	brne	.-26     	; 0x2990 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    29aa:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    29ae:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    29b2:	90 91 bc 00 	lds	r25, 0x00BC
    29b6:	97 ff       	sbrs	r25, 7
    29b8:	fc cf       	rjmp	.-8      	; 0x29b2 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    29ba:	90 91 b9 00 	lds	r25, 0x00B9
    29be:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    29c0:	90 32       	cpi	r25, 0x20	; 32
    29c2:	19 f0       	breq	.+6      	; 0x29ca <i2c_start_wait+0x40>
    29c4:	98 35       	cpi	r25, 0x58	; 88
    29c6:	09 f0       	breq	.+2      	; 0x29ca <i2c_start_wait+0x40>
    29c8:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    29ca:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    29ce:	90 91 bc 00 	lds	r25, 0x00BC
    29d2:	94 fd       	sbrc	r25, 4
    29d4:	fc cf       	rjmp	.-8      	; 0x29ce <i2c_start_wait+0x44>
    29d6:	dc cf       	rjmp	.-72     	; 0x2990 <i2c_start_wait+0x6>

000029d8 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    29d8:	94 ea       	ldi	r25, 0xA4	; 164
    29da:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    29de:	90 91 bc 00 	lds	r25, 0x00BC
    29e2:	97 ff       	sbrs	r25, 7
    29e4:	fc cf       	rjmp	.-8      	; 0x29de <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    29e6:	90 91 b9 00 	lds	r25, 0x00B9
    29ea:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    29ec:	98 30       	cpi	r25, 0x08	; 8
    29ee:	21 f0       	breq	.+8      	; 0x29f8 <i2c_rep_start+0x20>
    29f0:	90 31       	cpi	r25, 0x10	; 16
    29f2:	11 f0       	breq	.+4      	; 0x29f8 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	08 95       	ret
	}

	// send device address
	TWDR = address;
    29f8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    29fc:	84 e8       	ldi	r24, 0x84	; 132
    29fe:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2a02:	80 91 bc 00 	lds	r24, 0x00BC
    2a06:	87 ff       	sbrs	r24, 7
    2a08:	fc cf       	rjmp	.-8      	; 0x2a02 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2a0a:	90 91 b9 00 	lds	r25, 0x00B9
    2a0e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2a10:	98 31       	cpi	r25, 0x18	; 24
    2a12:	21 f0       	breq	.+8      	; 0x2a1c <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 34       	cpi	r25, 0x40	; 64
    2a18:	19 f0       	breq	.+6      	; 0x2a20 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    2a1a:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2a1e:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	08 95       	ret

00002a24 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2a24:	84 e9       	ldi	r24, 0x94	; 148
    2a26:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2a2a:	80 91 bc 00 	lds	r24, 0x00BC
    2a2e:	84 fd       	sbrc	r24, 4
    2a30:	fc cf       	rjmp	.-8      	; 0x2a2a <i2c_stop+0x6>

}/* i2c_stop */
    2a32:	08 95       	ret

00002a34 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2a34:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2a38:	84 e8       	ldi	r24, 0x84	; 132
    2a3a:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2a3e:	80 91 bc 00 	lds	r24, 0x00BC
    2a42:	87 ff       	sbrs	r24, 7
    2a44:	fc cf       	rjmp	.-8      	; 0x2a3e <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2a46:	90 91 b9 00 	lds	r25, 0x00B9
    2a4a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	98 32       	cpi	r25, 0x28	; 40
    2a50:	09 f0       	breq	.+2      	; 0x2a54 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    2a52:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    2a54:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    2a56:	08 95       	ret

00002a58 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2a58:	84 ec       	ldi	r24, 0xC4	; 196
    2a5a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    2a5e:	80 91 bc 00 	lds	r24, 0x00BC
    2a62:	87 ff       	sbrs	r24, 7
    2a64:	fc cf       	rjmp	.-8      	; 0x2a5e <i2c_readAck+0x6>

    return TWDR;
    2a66:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2a6a:	08 95       	ret

00002a6c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2a6c:	84 e8       	ldi	r24, 0x84	; 132
    2a6e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2a72:	80 91 bc 00 	lds	r24, 0x00BC
    2a76:	87 ff       	sbrs	r24, 7
    2a78:	fc cf       	rjmp	.-8      	; 0x2a72 <i2c_readNak+0x6>
	
    return TWDR;
    2a7a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2a7e:	08 95       	ret

00002a80 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    2a80:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    2a84:	80 e1       	ldi	r24, 0x10	; 16
    2a86:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2a8a:	e0 ec       	ldi	r30, 0xC0	; 192
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	82 60       	ori	r24, 0x02	; 2
    2a92:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    2a94:	e1 ec       	ldi	r30, 0xC1	; 193
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	88 69       	ori	r24, 0x98	; 152
    2a9c:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    2a9e:	e2 ec       	ldi	r30, 0xC2	; 194
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	86 60       	ori	r24, 0x06	; 6
    2aa6:	80 83       	st	Z, r24



}
    2aa8:	08 95       	ret

00002aaa <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    2aaa:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    2aae:	80 e1       	ldi	r24, 0x10	; 16
    2ab0:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    2ab4:	e8 ec       	ldi	r30, 0xC8	; 200
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	82 60       	ori	r24, 0x02	; 2
    2abc:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    2abe:	e9 ec       	ldi	r30, 0xC9	; 201
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	88 61       	ori	r24, 0x18	; 24
    2ac6:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    2ac8:	ea ec       	ldi	r30, 0xCA	; 202
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	86 60       	ori	r24, 0x06	; 6
    2ad0:	80 83       	st	Z, r24

}
    2ad2:	08 95       	ret

00002ad4 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    2ad4:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    2ad8:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    2adc:	10 92 c2 00 	sts	0x00C2, r1

}
    2ae0:	08 95       	ret

00002ae2 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    2ae2:	90 91 c0 00 	lds	r25, 0x00C0
    2ae6:	95 ff       	sbrs	r25, 5
    2ae8:	fc cf       	rjmp	.-8      	; 0x2ae2 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    2aea:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    2aee:	66 23       	and	r22, r22
    2af0:	21 f0       	breq	.+8      	; 0x2afa <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    2af2:	80 91 c0 00 	lds	r24, 0x00C0
    2af6:	86 ff       	sbrs	r24, 6
    2af8:	fc cf       	rjmp	.-8      	; 0x2af2 <usart0Transmit+0x10>
    2afa:	08 95       	ret

00002afc <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    2afc:	90 91 c8 00 	lds	r25, 0x00C8
    2b00:	95 ff       	sbrs	r25, 5
    2b02:	fc cf       	rjmp	.-8      	; 0x2afc <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    2b04:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    2b08:	66 23       	and	r22, r22
    2b0a:	21 f0       	breq	.+8      	; 0x2b14 <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    2b0c:	80 91 c8 00 	lds	r24, 0x00C8
    2b10:	86 ff       	sbrs	r24, 6
    2b12:	fc cf       	rjmp	.-8      	; 0x2b0c <usart1Transmit+0x10>
    2b14:	08 95       	ret

00002b16 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    2b16:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    2b1a:	80 95       	com	r24
	} else {
		return 1;
	}

}
    2b1c:	88 1f       	adc	r24, r24
    2b1e:	88 27       	eor	r24, r24
    2b20:	88 1f       	adc	r24, r24
    2b22:	08 95       	ret

00002b24 <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    2b24:	87 e9       	ldi	r24, 0x97	; 151
    2b26:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    2b28:	20 91 c0 00 	lds	r18, 0x00C0
    2b2c:	27 fd       	sbrc	r18, 7
    2b2e:	07 c0       	rjmp	.+14     	; 0x2b3e <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    2b30:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    2b32:	d1 f7       	brne	.-12     	; 0x2b28 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	80 93 12 04 	sts	0x0412, r24
			return 0;				// timeout
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    2b3e:	80 91 c6 00 	lds	r24, 0x00C6

}
    2b42:	08 95       	ret

00002b44 <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    2b44:	1f 92       	push	r1
    2b46:	0f 92       	push	r0
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	0f 92       	push	r0
    2b4c:	0b b6       	in	r0, 0x3b	; 59
    2b4e:	0f 92       	push	r0
    2b50:	11 24       	eor	r1, r1
    2b52:	2f 93       	push	r18
    2b54:	3f 93       	push	r19
    2b56:	4f 93       	push	r20
    2b58:	5f 93       	push	r21
    2b5a:	6f 93       	push	r22
    2b5c:	7f 93       	push	r23
    2b5e:	8f 93       	push	r24
    2b60:	9f 93       	push	r25
    2b62:	af 93       	push	r26
    2b64:	bf 93       	push	r27
    2b66:	ef 93       	push	r30
    2b68:	ff 93       	push	r31

	char receivedByte = UDR0;
    2b6a:	80 91 c6 00 	lds	r24, 0x00C6

	if(currentSelector==15) {
    2b6e:	90 91 3f 05 	lds	r25, 0x053F
    2b72:	9f 30       	cpi	r25, 0x0F	; 15
    2b74:	21 f1       	breq	.+72     	; 0x2bbe <__vector_25+0x7a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    2b76:	90 91 11 02 	lds	r25, 0x0211
    2b7a:	99 23       	and	r25, r25
    2b7c:	d9 f4       	brne	.+54     	; 0x2bb4 <__vector_25+0x70>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    2b7e:	90 91 17 05 	lds	r25, 0x0517
    2b82:	91 30       	cpi	r25, 0x01	; 1
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <__vector_25+0x44>
    2b86:	60 c0       	rjmp	.+192    	; 0x2c48 <__vector_25+0x104>
    2b88:	92 30       	cpi	r25, 0x02	; 2
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <__vector_25+0x4a>
    2b8c:	43 c0       	rjmp	.+134    	; 0x2c14 <__vector_25+0xd0>
			}
		}

	}

}
    2b8e:	ff 91       	pop	r31
    2b90:	ef 91       	pop	r30
    2b92:	bf 91       	pop	r27
    2b94:	af 91       	pop	r26
    2b96:	9f 91       	pop	r25
    2b98:	8f 91       	pop	r24
    2b9a:	7f 91       	pop	r23
    2b9c:	6f 91       	pop	r22
    2b9e:	5f 91       	pop	r21
    2ba0:	4f 91       	pop	r20
    2ba2:	3f 91       	pop	r19
    2ba4:	2f 91       	pop	r18
    2ba6:	0f 90       	pop	r0
    2ba8:	0b be       	out	0x3b, r0	; 59
    2baa:	0f 90       	pop	r0
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	0f 90       	pop	r0
    2bb0:	1f 90       	pop	r1
    2bb2:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    2bb4:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    2bb8:	80 93 17 05 	sts	0x0517, r24
    2bbc:	e8 cf       	rjmp	.-48     	; 0x2b8e <__vector_25+0x4a>

	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
    2bbe:	8b 32       	cpi	r24, 0x2B	; 43
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <__vector_25+0x80>
    2bc2:	4c c0       	rjmp	.+152    	; 0x2c5c <__vector_25+0x118>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    2bc4:	8d 32       	cpi	r24, 0x2D	; 45
    2bc6:	f1 f0       	breq	.+60     	; 0x2c04 <__vector_25+0xc0>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    2bc8:	87 36       	cpi	r24, 0x67	; 103
    2bca:	09 f0       	breq	.+2      	; 0x2bce <__vector_25+0x8a>
    2bcc:	5b c0       	rjmp	.+182    	; 0x2c84 <__vector_25+0x140>
			usart0Transmit(irCommand,1);
    2bce:	90 91 1b 05 	lds	r25, 0x051B

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    2bd2:	80 91 c0 00 	lds	r24, 0x00C0
    2bd6:	85 ff       	sbrs	r24, 5
    2bd8:	fc cf       	rjmp	.-8      	; 0x2bd2 <__vector_25+0x8e>
	UDR0 = data;						// put data into buffer, sends the data
    2bda:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    2bde:	80 91 c0 00 	lds	r24, 0x00C0
    2be2:	86 ff       	sbrs	r24, 6
    2be4:	fc cf       	rjmp	.-8      	; 0x2bde <__vector_25+0x9a>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    2be6:	90 91 66 00 	lds	r25, 0x0066
    2bea:	90 93 53 05 	sts	0x0553, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    2bee:	80 91 c0 00 	lds	r24, 0x00C0
    2bf2:	85 ff       	sbrs	r24, 5
    2bf4:	fc cf       	rjmp	.-8      	; 0x2bee <__vector_25+0xaa>
	UDR0 = data;						// put data into buffer, sends the data
    2bf6:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    2bfa:	80 91 c0 00 	lds	r24, 0x00C0
    2bfe:	86 ff       	sbrs	r24, 6
    2c00:	fc cf       	rjmp	.-8      	; 0x2bfa <__vector_25+0xb6>
    2c02:	c5 cf       	rjmp	.-118    	; 0x2b8e <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    2c04:	80 91 53 05 	lds	r24, 0x0553
    2c08:	88 23       	and	r24, r24
    2c0a:	d1 f1       	breq	.+116    	; 0x2c80 <__vector_25+0x13c>
				currentOsccal--;	
    2c0c:	81 50       	subi	r24, 0x01	; 1
    2c0e:	80 93 53 05 	sts	0x0553, r24
    2c12:	2b c0       	rjmp	.+86     	; 0x2c6a <__vector_25+0x126>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    2c14:	40 91 19 05 	lds	r20, 0x0519
    2c18:	44 23       	and	r20, r20
    2c1a:	51 f1       	breq	.+84     	; 0x2c70 <__vector_25+0x12c>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    2c1c:	41 30       	cpi	r20, 0x01	; 1
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <__vector_25+0xde>
    2c20:	b6 cf       	rjmp	.-148    	; 0x2b8e <__vector_25+0x4a>
						rfAddress |= ((unsigned int)receivedByte<<8);
    2c22:	38 2f       	mov	r19, r24
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	80 91 0b 04 	lds	r24, 0x040B
    2c2a:	90 91 0c 04 	lds	r25, 0x040C
    2c2e:	82 2b       	or	r24, r18
    2c30:	93 2b       	or	r25, r19
    2c32:	90 93 0c 04 	sts	0x040C, r25
    2c36:	80 93 0b 04 	sts	0x040B, r24
						addressReceived = 1;
    2c3a:	40 93 18 05 	sts	0x0518, r20
						menuState = 0;
    2c3e:	10 92 19 05 	sts	0x0519, r1
						chooseMenu = 1;
    2c42:	40 93 11 02 	sts	0x0211, r20
    2c46:	a3 cf       	rjmp	.-186    	; 0x2b8e <__vector_25+0x4a>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    2c48:	8a 3a       	cpi	r24, 0xAA	; 170
    2c4a:	31 f1       	breq	.+76     	; 0x2c98 <__vector_25+0x154>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    2c4c:	85 35       	cpi	r24, 0x55	; 85
    2c4e:	09 f0       	breq	.+2      	; 0x2c52 <__vector_25+0x10e>
    2c50:	9e cf       	rjmp	.-196    	; 0x2b8e <__vector_25+0x4a>
						chooseMenu = 1;
    2c52:	90 93 11 02 	sts	0x0211, r25
						menuChoice = 0;
    2c56:	10 92 17 05 	sts	0x0517, r1
    2c5a:	99 cf       	rjmp	.-206    	; 0x2b8e <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    2c5c:	80 91 53 05 	lds	r24, 0x0553
    2c60:	8f 3f       	cpi	r24, 0xFF	; 255
    2c62:	e9 f0       	breq	.+58     	; 0x2c9e <__vector_25+0x15a>
				currentOsccal++;
    2c64:	8f 5f       	subi	r24, 0xFF	; 255
    2c66:	80 93 53 05 	sts	0x0553, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    2c6a:	80 93 66 00 	sts	0x0066, r24
    2c6e:	8f cf       	rjmp	.-226    	; 0x2b8e <__vector_25+0x4a>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    2c70:	80 93 0b 04 	sts	0x040B, r24
    2c74:	10 92 0c 04 	sts	0x040C, r1
						menuState = 1;
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	80 93 19 05 	sts	0x0519, r24
    2c7e:	87 cf       	rjmp	.-242    	; 0x2b8e <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	f3 cf       	rjmp	.-26     	; 0x2c6a <__vector_25+0x126>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    2c84:	83 37       	cpi	r24, 0x73	; 115
    2c86:	09 f0       	breq	.+2      	; 0x2c8a <__vector_25+0x146>
    2c88:	82 cf       	rjmp	.-252    	; 0x2b8e <__vector_25+0x4a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    2c8a:	8d ef       	ldi	r24, 0xFD	; 253
    2c8c:	9f e0       	ldi	r25, 0x0F	; 15
    2c8e:	60 91 53 05 	lds	r22, 0x0553
    2c92:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <__eewr_byte_m2560>
    2c96:	7b cf       	rjmp	.-266    	; 0x2b8e <__vector_25+0x4a>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    2c98:	90 93 1a 05 	sts	0x051A, r25
    2c9c:	78 cf       	rjmp	.-272    	; 0x2b8e <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    2c9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ca0:	e4 cf       	rjmp	.-56     	; 0x2c6a <__vector_25+0x126>

00002ca2 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    2ca2:	86 b1       	in	r24, 0x06	; 6
    2ca4:	66 b1       	in	r22, 0x06	; 6
    2ca6:	26 b1       	in	r18, 0x06	; 6
    2ca8:	46 b1       	in	r20, 0x06	; 6
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	28 70       	andi	r18, 0x08	; 8
    2cae:	30 70       	andi	r19, 0x00	; 0
    2cb0:	35 95       	asr	r19
    2cb2:	27 95       	ror	r18
    2cb4:	35 95       	asr	r19
    2cb6:	27 95       	ror	r18
    2cb8:	35 95       	asr	r19
    2cba:	27 95       	ror	r18
    2cbc:	22 0f       	add	r18, r18
    2cbe:	33 1f       	adc	r19, r19
    2cc0:	70 e0       	ldi	r23, 0x00	; 0
    2cc2:	64 70       	andi	r22, 0x04	; 4
    2cc4:	70 70       	andi	r23, 0x00	; 0
    2cc6:	75 95       	asr	r23
    2cc8:	67 95       	ror	r22
    2cca:	75 95       	asr	r23
    2ccc:	67 95       	ror	r22
    2cce:	26 0f       	add	r18, r22
    2cd0:	37 1f       	adc	r19, r23
    2cd2:	22 0f       	add	r18, r18
    2cd4:	33 1f       	adc	r19, r19
    2cd6:	50 e0       	ldi	r21, 0x00	; 0
    2cd8:	42 70       	andi	r20, 0x02	; 2
    2cda:	50 70       	andi	r21, 0x00	; 0
    2cdc:	55 95       	asr	r21
    2cde:	47 95       	ror	r20
    2ce0:	24 0f       	add	r18, r20
    2ce2:	35 1f       	adc	r19, r21
    2ce4:	22 0f       	add	r18, r18
    2ce6:	81 70       	andi	r24, 0x01	; 1
}
    2ce8:	82 0f       	add	r24, r18
    2cea:	08 95       	ret

00002cec <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2cec:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    2cee:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    2cf0:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    2cf2:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    2cf6:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    2cfa:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    2cfe:	8e ef       	ldi	r24, 0xFE	; 254
    2d00:	9f e0       	ldi	r25, 0x0F	; 15
    2d02:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__eerd_word_m2560>
    2d06:	90 93 0c 04 	sts	0x040C, r25
    2d0a:	80 93 0b 04 	sts	0x040B, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    2d0e:	8d ef       	ldi	r24, 0xFD	; 253
    2d10:	9f e0       	ldi	r25, 0x0F	; 15
    2d12:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <__eerd_byte_m2560>
    2d16:	80 93 53 05 	sts	0x0553, r24
	if(currentOsccal!=0 && currentOsccal!=255) {
    2d1a:	98 2f       	mov	r25, r24
    2d1c:	91 50       	subi	r25, 0x01	; 1
    2d1e:	9e 3f       	cpi	r25, 0xFE	; 254
    2d20:	d8 f5       	brcc	.+118    	; 0x2d98 <initPeripherals+0xac>
		OSCCAL = currentOsccal;
    2d22:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    2d26:	80 91 0b 04 	lds	r24, 0x040B
    2d2a:	90 91 0c 04 	lds	r25, 0x040C
    2d2e:	9c 01       	movw	r18, r24
    2d30:	21 58       	subi	r18, 0x81	; 129
    2d32:	3c 40       	sbci	r19, 0x0C	; 12
    2d34:	23 30       	cpi	r18, 0x03	; 3
    2d36:	31 05       	cpc	r19, r1
    2d38:	f8 f4       	brcc	.+62     	; 0x2d78 <initPeripherals+0x8c>
		hardwareRevision = HW_REV_3_0;
    2d3a:	10 92 42 05 	sts	0x0542, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    2d3e:	0e 94 47 14 	call	0x288e	; 0x288e <initPortsIO>
	initAdc();
    2d42:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <initAdc>
	initMotors();
    2d46:	0e 94 2d 1a 	call	0x345a	; 0x345a <initMotors>
	initRGBleds();
    2d4a:	0e 94 0a 21 	call	0x4214	; 0x4214 <initRGBleds>
	initSPI();
    2d4e:	0e 94 98 06 	call	0xd30	; 0xd30 <initSPI>
	mirf_init();
    2d52:	0e 94 81 07 	call	0xf02	; 0xf02 <mirf_init>
	if(spiCommError==0) {
    2d56:	80 91 0e 04 	lds	r24, 0x040E
    2d5a:	88 23       	and	r24, r24
    2d5c:	29 f4       	brne	.+10     	; 0x2d68 <initPeripherals+0x7c>
		rfFlags |= 1;
    2d5e:	80 91 0d 04 	lds	r24, 0x040D
    2d62:	81 60       	ori	r24, 0x01	; 1
    2d64:	80 93 0d 04 	sts	0x040D, r24
	}
	initUsart0();
    2d68:	0e 94 40 15 	call	0x2a80	; 0x2a80 <initUsart0>
	initAccelerometer();
    2d6c:	0e 94 52 22 	call	0x44a4	; 0x44a4 <initAccelerometer>
	init_ir_remote_control();
    2d70:	0e 94 67 0c 	call	0x18ce	; 0x18ce <init_ir_remote_control>

	sei();			// enable global interrupts
    2d74:	78 94       	sei

	
}
    2d76:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    2d78:	2c e0       	ldi	r18, 0x0C	; 12
    2d7a:	80 38       	cpi	r24, 0x80	; 128
    2d7c:	92 07       	cpc	r25, r18
    2d7e:	21 f4       	brne	.+8      	; 0x2d88 <initPeripherals+0x9c>
		hardwareRevision = HW_REV_3_0_1;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	80 93 42 05 	sts	0x0542, r24
    2d86:	db cf       	rjmp	.-74     	; 0x2d3e <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    2d88:	2c e0       	ldi	r18, 0x0C	; 12
    2d8a:	84 38       	cpi	r24, 0x84	; 132
    2d8c:	92 07       	cpc	r25, r18
    2d8e:	b8 f2       	brcs	.-82     	; 0x2d3e <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    2d90:	82 e0       	ldi	r24, 0x02	; 2
    2d92:	80 93 42 05 	sts	0x0542, r24
    2d96:	d3 cf       	rjmp	.-90     	; 0x2d3e <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) {
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    2d98:	60 91 66 00 	lds	r22, 0x0066
    2d9c:	60 93 53 05 	sts	0x0553, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    2da0:	8d ef       	ldi	r24, 0xFD	; 253
    2da2:	9f e0       	ldi	r25, 0x0F	; 15
    2da4:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <__eewr_byte_m2560>
    2da8:	be cf       	rjmp	.-132    	; 0x2d26 <initPeripherals+0x3a>

00002daa <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    2daa:	1f 92       	push	r1
    2dac:	0f 92       	push	r0
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	0f 92       	push	r0
    2db2:	11 24       	eor	r1, r1

}
    2db4:	0f 90       	pop	r0
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	0f 90       	pop	r0
    2dba:	1f 90       	pop	r1
    2dbc:	18 95       	reti

00002dbe <sleep>:

void sleep(unsigned char seconds) {
    2dbe:	cf 93       	push	r28
    2dc0:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    2dc2:	9e e1       	ldi	r25, 0x1E	; 30
    2dc4:	89 9f       	mul	r24, r25
    2dc6:	e0 01       	movw	r28, r0
    2dc8:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2dca:	80 91 68 00 	lds	r24, 0x0068
    2dce:	8d 7f       	andi	r24, 0xFD	; 253
    2dd0:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    2dd4:	80 91 6c 00 	lds	r24, 0x006C
    2dd8:	8f 77       	andi	r24, 0x7F	; 127
    2dda:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    2dde:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    2de0:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    2de4:	80 91 7a 00 	lds	r24, 0x007A
    2de8:	80 61       	ori	r24, 0x10	; 16
    2dea:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    2dee:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    2df2:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2df6:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    2dfa:	88 b3       	in	r24, 0x18	; 24
    2dfc:	87 60       	ori	r24, 0x07	; 7
    2dfe:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    2e00:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    2e04:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    2e08:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    2e0c:	89 b3       	in	r24, 0x19	; 25
    2e0e:	87 60       	ori	r24, 0x07	; 7
    2e10:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    2e12:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    2e16:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    2e1a:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <closeUsart>
	closeSPI();
    2e1e:	0e 94 a4 06 	call	0xd48	; 0xd48 <closeSPI>
	i2c_close();
    2e22:	0e 94 92 14 	call	0x2924	; 0x2924 <i2c_close>

	// set port pins
	initPortsIO();
    2e26:	0e 94 47 14 	call	0x288e	; 0x288e <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    2e2a:	83 b7       	in	r24, 0x33	; 51
    2e2c:	8f 60       	ori	r24, 0x0F	; 15
    2e2e:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    2e36:	80 91 b0 00 	lds	r24, 0x00B0
    2e3a:	8d 7f       	andi	r24, 0xFD	; 253
    2e3c:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    2e40:	80 91 b1 00 	lds	r24, 0x00B1
    2e44:	87 60       	ori	r24, 0x07	; 7
    2e46:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    2e4a:	20 97       	sbiw	r28, 0x00	; 0
    2e4c:	19 f0       	breq	.+6      	; 0x2e54 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    2e4e:	88 95       	sleep
		pause--;
    2e50:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    2e52:	e9 f7       	brne	.-6      	; 0x2e4e <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    2e54:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    2e56:	80 91 b1 00 	lds	r24, 0x00B1
    2e5a:	88 7f       	andi	r24, 0xF8	; 248
    2e5c:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    2e60:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    2e64:	80 91 b0 00 	lds	r24, 0x00B0
    2e68:	82 60       	ori	r24, 0x02	; 2
    2e6a:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    2e6e:	8f ef       	ldi	r24, 0xFF	; 255
    2e70:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    2e74:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    2e78:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    2e7c:	10 92 f4 03 	sts	0x03F4, r1
    2e80:	10 92 f3 03 	sts	0x03F3, r1
	pwm_left = 0;
    2e84:	10 92 f6 03 	sts	0x03F6, r1
    2e88:	10 92 f5 03 	sts	0x03F5, r1
	initPeripherals();
    2e8c:	0e 94 76 16 	call	0x2cec	; 0x2cec <initPeripherals>

}
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	08 95       	ret

00002e96 <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    2e96:	60 91 3b 05 	lds	r22, 0x053B
    2e9a:	70 91 3c 05 	lds	r23, 0x053C
	return clockTick;
}
    2e9e:	80 91 3d 05 	lds	r24, 0x053D
    2ea2:	90 91 3e 05 	lds	r25, 0x053E
    2ea6:	08 95       	ret

00002ea8 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	80 93 c5 03 	sts	0x03C5, r24
}
    2eae:	08 95       	ret

00002eb0 <initAdc>:

#include "adc.h"


void initAdc(void) {
    2eb0:	cf 93       	push	r28
    2eb2:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    2eb4:	ea e7       	ldi	r30, 0x7A	; 122
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	10 82       	st	Z, r1
	ADCSRB = 0;
    2eba:	ab e7       	ldi	r26, 0x7B	; 123
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	1c 92       	st	X, r1
	ADMUX = 0;
    2ec0:	cc e7       	ldi	r28, 0x7C	; 124
    2ec2:	d0 e0       	ldi	r29, 0x00	; 0
    2ec4:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    2ec6:	80 81       	ld	r24, Z
    2ec8:	86 60       	ori	r24, 0x06	; 6
    2eca:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    2ecc:	88 81       	ld	r24, Y
    2ece:	80 64       	ori	r24, 0x40	; 64
    2ed0:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    2ed2:	80 81       	ld	r24, Z
    2ed4:	80 62       	ori	r24, 0x20	; 32
    2ed6:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    2ed8:	8c 91       	ld	r24, X
    2eda:	88 7f       	andi	r24, 0xF8	; 248
    2edc:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    2ede:	80 81       	ld	r24, Z
    2ee0:	88 60       	ori	r24, 0x08	; 8
    2ee2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    2ee4:	80 81       	ld	r24, Z
    2ee6:	80 68       	ori	r24, 0x80	; 128
    2ee8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    2eea:	80 81       	ld	r24, Z
    2eec:	80 64       	ori	r24, 0x40	; 64
    2eee:	80 83       	st	Z, r24

}
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	08 95       	ret

00002ef6 <__vector_29>:

ISR(ADC_vect) {
    2ef6:	1f 92       	push	r1
    2ef8:	0f 92       	push	r0
    2efa:	0f b6       	in	r0, 0x3f	; 63
    2efc:	0f 92       	push	r0
    2efe:	0b b6       	in	r0, 0x3b	; 59
    2f00:	0f 92       	push	r0
    2f02:	11 24       	eor	r1, r1
    2f04:	2f 93       	push	r18
    2f06:	3f 93       	push	r19
    2f08:	4f 93       	push	r20
    2f0a:	5f 93       	push	r21
    2f0c:	6f 93       	push	r22
    2f0e:	8f 93       	push	r24
    2f10:	9f 93       	push	r25
    2f12:	af 93       	push	r26
    2f14:	bf 93       	push	r27
    2f16:	ef 93       	push	r30
    2f18:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    2f1a:	80 91 3b 05 	lds	r24, 0x053B
    2f1e:	90 91 3c 05 	lds	r25, 0x053C
    2f22:	a0 91 3d 05 	lds	r26, 0x053D
    2f26:	b0 91 3e 05 	lds	r27, 0x053E
    2f2a:	01 96       	adiw	r24, 0x01	; 1
    2f2c:	a1 1d       	adc	r26, r1
    2f2e:	b1 1d       	adc	r27, r1
    2f30:	80 93 3b 05 	sts	0x053B, r24
    2f34:	90 93 3c 05 	sts	0x053C, r25
    2f38:	a0 93 3d 05 	sts	0x053D, r26
    2f3c:	b0 93 3e 05 	sts	0x053E, r27
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    2f40:	20 91 78 00 	lds	r18, 0x0078
    2f44:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    2f46:	40 91 79 00 	lds	r20, 0x0079
    2f4a:	94 2f       	mov	r25, r20
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	28 2b       	or	r18, r24
    2f50:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2f52:	80 91 bf 03 	lds	r24, 0x03BF
    2f56:	82 30       	cpi	r24, 0x02	; 2
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <__vector_29+0x66>
    2f5a:	ac c1       	rjmp	.+856    	; 0x32b4 <__vector_29+0x3be>
    2f5c:	83 30       	cpi	r24, 0x03	; 3
    2f5e:	08 f4       	brcc	.+2      	; 0x2f62 <__vector_29+0x6c>
    2f60:	45 c0       	rjmp	.+138    	; 0x2fec <__vector_29+0xf6>
    2f62:	83 30       	cpi	r24, 0x03	; 3
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <__vector_29+0x72>
    2f66:	c9 c1       	rjmp	.+914    	; 0x32fa <__vector_29+0x404>
    2f68:	84 30       	cpi	r24, 0x04	; 4
    2f6a:	09 f4       	brne	.+2      	; 0x2f6e <__vector_29+0x78>
    2f6c:	68 c1       	rjmp	.+720    	; 0x323e <__vector_29+0x348>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2f6e:	80 91 c0 03 	lds	r24, 0x03C0
    2f72:	82 30       	cpi	r24, 0x02	; 2
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <__vector_29+0x82>
    2f76:	4f c1       	rjmp	.+670    	; 0x3216 <__vector_29+0x320>
    2f78:	83 30       	cpi	r24, 0x03	; 3
    2f7a:	08 f0       	brcs	.+2      	; 0x2f7e <__vector_29+0x88>
    2f7c:	cd c0       	rjmp	.+410    	; 0x3118 <__vector_29+0x222>
    2f7e:	88 23       	and	r24, r24
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <__vector_29+0x8e>
    2f82:	24 c1       	rjmp	.+584    	; 0x31cc <__vector_29+0x2d6>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    2f84:	80 91 2a 03 	lds	r24, 0x032A
    2f88:	86 95       	lsr	r24
    2f8a:	80 93 29 03 	sts	0x0329, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    2f8e:	80 91 c1 03 	lds	r24, 0x03C1
    2f92:	88 23       	and	r24, r24
    2f94:	09 f0       	breq	.+2      	; 0x2f98 <__vector_29+0xa2>
    2f96:	e1 c1       	rjmp	.+962    	; 0x335a <__vector_29+0x464>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	80 93 c0 03 	sts	0x03C0, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    2fa4:	90 91 29 03 	lds	r25, 0x0329
    2fa8:	98 30       	cpi	r25, 0x08	; 8
    2faa:	08 f0       	brcs	.+2      	; 0x2fae <__vector_29+0xb8>
    2fac:	ed c0       	rjmp	.+474    	; 0x3188 <__vector_29+0x292>
		ADCSRB &= ~(1 << MUX5);
    2fae:	90 91 7b 00 	lds	r25, 0x007B
    2fb2:	97 7f       	andi	r25, 0xF7	; 247
    2fb4:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    2fb8:	90 91 29 03 	lds	r25, 0x0329
    2fbc:	90 5c       	subi	r25, 0xC0	; 192
    2fbe:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    2fc2:	82 30       	cpi	r24, 0x02	; 2
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <__vector_29+0xd2>
    2fc6:	ed c0       	rjmp	.+474    	; 0x31a2 <__vector_29+0x2ac>

	}

	//LED_BLUE_OFF;

}
    2fc8:	ff 91       	pop	r31
    2fca:	ef 91       	pop	r30
    2fcc:	bf 91       	pop	r27
    2fce:	af 91       	pop	r26
    2fd0:	9f 91       	pop	r25
    2fd2:	8f 91       	pop	r24
    2fd4:	6f 91       	pop	r22
    2fd6:	5f 91       	pop	r21
    2fd8:	4f 91       	pop	r20
    2fda:	3f 91       	pop	r19
    2fdc:	2f 91       	pop	r18
    2fde:	0f 90       	pop	r0
    2fe0:	0b be       	out	0x3b, r0	; 59
    2fe2:	0f 90       	pop	r0
    2fe4:	0f be       	out	0x3f, r0	; 63
    2fe6:	0f 90       	pop	r0
    2fe8:	1f 90       	pop	r1
    2fea:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2fec:	88 23       	and	r24, r24
    2fee:	09 f0       	breq	.+2      	; 0x2ff2 <__vector_29+0xfc>
    2ff0:	fe c0       	rjmp	.+508    	; 0x31ee <__vector_29+0x2f8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2ff2:	60 91 2a 03 	lds	r22, 0x032A
    2ff6:	6e 30       	cpi	r22, 0x0E	; 14
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <__vector_29+0x106>
    2ffa:	d0 c1       	rjmp	.+928    	; 0x339c <__vector_29+0x4a6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    2ffc:	46 2f       	mov	r20, r22
    2ffe:	50 e0       	ldi	r21, 0x00	; 0
    3000:	fa 01       	movw	r30, r20
    3002:	ee 0f       	add	r30, r30
    3004:	ff 1f       	adc	r31, r31
    3006:	e1 5d       	subi	r30, 0xD1	; 209
    3008:	fc 4f       	sbci	r31, 0xFC	; 252
    300a:	31 83       	std	Z+1, r19	; 0x01
    300c:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    300e:	40 ff       	sbrs	r20, 0
    3010:	77 c0       	rjmp	.+238    	; 0x3100 <__vector_29+0x20a>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    3012:	fa 01       	movw	r30, r20
    3014:	ee 0f       	add	r30, r30
    3016:	ff 1f       	adc	r31, r31
    3018:	e3 5d       	subi	r30, 0xD3	; 211
    301a:	fc 4f       	sbci	r31, 0xFC	; 252
    301c:	80 81       	ld	r24, Z
    301e:	91 81       	ldd	r25, Z+1	; 0x01
    3020:	fa 01       	movw	r30, r20
    3022:	ee 0f       	add	r30, r30
    3024:	ff 1f       	adc	r31, r31
    3026:	e1 5d       	subi	r30, 0xD1	; 209
    3028:	fc 4f       	sbci	r31, 0xFC	; 252
    302a:	40 81       	ld	r20, Z
    302c:	51 81       	ldd	r21, Z+1	; 0x01
    302e:	26 2f       	mov	r18, r22
    3030:	26 95       	lsr	r18
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	84 1b       	sub	r24, r20
    3036:	95 0b       	sbc	r25, r21
    3038:	22 0f       	add	r18, r18
    303a:	33 1f       	adc	r19, r19
    303c:	f9 01       	movw	r30, r18
    303e:	e9 58       	subi	r30, 0x89	; 137
    3040:	fc 4f       	sbci	r31, 0xFC	; 252
    3042:	40 81       	ld	r20, Z
    3044:	51 81       	ldd	r21, Z+1	; 0x01
    3046:	84 1b       	sub	r24, r20
    3048:	95 0b       	sbc	r25, r21
    304a:	f9 01       	movw	r30, r18
    304c:	e1 5a       	subi	r30, 0xA1	; 161
    304e:	fc 4f       	sbci	r31, 0xFC	; 252
    3050:	91 83       	std	Z+1, r25	; 0x01
    3052:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    3054:	97 fd       	sbrc	r25, 7
    3056:	bd c1       	rjmp	.+890    	; 0x33d2 <__vector_29+0x4dc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    3058:	44 e0       	ldi	r20, 0x04	; 4
    305a:	81 30       	cpi	r24, 0x01	; 1
    305c:	94 07       	cpc	r25, r20
    305e:	24 f0       	brlt	.+8      	; 0x3068 <__vector_29+0x172>
					proximityResult[currentProx>>1] = 1024;
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	94 e0       	ldi	r25, 0x04	; 4
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    3068:	60 31       	cpi	r22, 0x10	; 16
    306a:	48 f4       	brcc	.+18     	; 0x307e <__vector_29+0x188>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    306c:	8c 33       	cpi	r24, 0x3C	; 60
    306e:	91 05       	cpc	r25, r1
    3070:	0c f0       	brlt	.+2      	; 0x3074 <__vector_29+0x17e>
    3072:	b4 c1       	rjmp	.+872    	; 0x33dc <__vector_29+0x4e6>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    3074:	29 53       	subi	r18, 0x39	; 57
    3076:	3c 4f       	sbci	r19, 0xFC	; 252
    3078:	f9 01       	movw	r30, r18
    307a:	91 83       	std	Z+1, r25	; 0x01
    307c:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    307e:	80 91 50 05 	lds	r24, 0x0550
    3082:	88 23       	and	r24, r24
    3084:	09 f4       	brne	.+2      	; 0x3088 <__vector_29+0x192>
    3086:	75 c1       	rjmp	.+746    	; 0x3372 <__vector_29+0x47c>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3088:	80 91 6f 03 	lds	r24, 0x036F
    308c:	90 91 70 03 	lds	r25, 0x0370
    3090:	f1 e0       	ldi	r31, 0x01	; 1
    3092:	84 3a       	cpi	r24, 0xA4	; 164
    3094:	9f 07       	cpc	r25, r31
    3096:	cc f0       	brlt	.+50     	; 0x30ca <__vector_29+0x1d4>
    3098:	80 91 71 03 	lds	r24, 0x0371
    309c:	90 91 72 03 	lds	r25, 0x0372
    30a0:	21 e0       	ldi	r18, 0x01	; 1
    30a2:	84 3a       	cpi	r24, 0xA4	; 164
    30a4:	92 07       	cpc	r25, r18
    30a6:	8c f0       	brlt	.+34     	; 0x30ca <__vector_29+0x1d4>
    30a8:	80 91 73 03 	lds	r24, 0x0373
    30ac:	90 91 74 03 	lds	r25, 0x0374
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	84 3a       	cpi	r24, 0xA4	; 164
    30b4:	94 07       	cpc	r25, r20
    30b6:	4c f0       	brlt	.+18     	; 0x30ca <__vector_29+0x1d4>
    30b8:	80 91 75 03 	lds	r24, 0x0375
    30bc:	90 91 76 03 	lds	r25, 0x0376
    30c0:	e1 e0       	ldi	r30, 0x01	; 1
    30c2:	84 3a       	cpi	r24, 0xA4	; 164
    30c4:	9e 07       	cpc	r25, r30
    30c6:	0c f0       	brlt	.+2      	; 0x30ca <__vector_29+0x1d4>
    30c8:	54 c1       	rjmp	.+680    	; 0x3372 <__vector_29+0x47c>
						cliffDetectedFlag = 1;
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	80 93 51 05 	sts	0x0551, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    30d0:	10 92 f6 03 	sts	0x03F6, r1
    30d4:	10 92 f5 03 	sts	0x03F5, r1
						OCR4A = 0;
    30d8:	10 92 a9 00 	sts	0x00A9, r1
    30dc:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    30e0:	10 92 ab 00 	sts	0x00AB, r1
    30e4:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    30e8:	10 92 f4 03 	sts	0x03F4, r1
    30ec:	10 92 f3 03 	sts	0x03F3, r1
						OCR3A = 0;
    30f0:	10 92 99 00 	sts	0x0099, r1
    30f4:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    30f8:	10 92 9b 00 	sts	0x009B, r1
    30fc:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    3100:	6f 5f       	subi	r22, 0xFF	; 255
    3102:	60 93 2a 03 	sts	0x032A, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    3106:	68 31       	cpi	r22, 0x18	; 24
    3108:	08 f4       	brcc	.+2      	; 0x310c <__vector_29+0x216>
    310a:	31 cf       	rjmp	.-414    	; 0x2f6e <__vector_29+0x78>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    310c:	10 92 2a 03 	sts	0x032A, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	80 93 c6 03 	sts	0x03C6, r24
    3116:	2b cf       	rjmp	.-426    	; 0x2f6e <__vector_29+0x78>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3118:	83 30       	cpi	r24, 0x03	; 3
    311a:	09 f4       	brne	.+2      	; 0x311e <__vector_29+0x228>
    311c:	b7 c0       	rjmp	.+366    	; 0x328c <__vector_29+0x396>
    311e:	84 30       	cpi	r24, 0x04	; 4
    3120:	09 f0       	breq	.+2      	; 0x3124 <__vector_29+0x22e>
    3122:	40 cf       	rjmp	.-384    	; 0x2fa4 <__vector_29+0xae>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    3124:	90 91 2c 03 	lds	r25, 0x032C
    3128:	90 93 29 03 	sts	0x0329, r25
			rightChannelPhase = rightMotorPhase;
    312c:	90 91 2d 03 	lds	r25, 0x032D
    3130:	90 93 c1 03 	sts	0x03C1, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    3134:	90 91 c2 03 	lds	r25, 0x03C2
    3138:	99 23       	and	r25, r25
    313a:	09 f0       	breq	.+2      	; 0x313e <__vector_29+0x248>
    313c:	08 c1       	rjmp	.+528    	; 0x334e <__vector_29+0x458>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    313e:	83 e0       	ldi	r24, 0x03	; 3
    3140:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    3144:	10 92 c0 03 	sts	0x03C0, r1

			if(currentProx==14 && measBattery==1) {
    3148:	60 91 2a 03 	lds	r22, 0x032A
    314c:	6e 30       	cpi	r22, 0x0E	; 14
    314e:	09 f4       	brne	.+2      	; 0x3152 <__vector_29+0x25c>
    3150:	1f c1       	rjmp	.+574    	; 0x3390 <__vector_29+0x49a>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    3152:	86 2f       	mov	r24, r22
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	60 ff       	sbrs	r22, 0
    3158:	f1 c0       	rjmp	.+482    	; 0x333c <__vector_29+0x446>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    315a:	60 31       	cpi	r22, 0x10	; 16
    315c:	08 f4       	brcc	.+2      	; 0x3160 <__vector_29+0x26a>
    315e:	0c c1       	rjmp	.+536    	; 0x3378 <__vector_29+0x482>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    3160:	20 91 42 05 	lds	r18, 0x0542
    3164:	22 23       	and	r18, r18
    3166:	09 f0       	breq	.+2      	; 0x316a <__vector_29+0x274>
    3168:	d5 c0       	rjmp	.+426    	; 0x3314 <__vector_29+0x41e>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    316a:	40 97       	sbiw	r24, 0x10	; 16
    316c:	95 95       	asr	r25
    316e:	87 95       	ror	r24
    3170:	21 e0       	ldi	r18, 0x01	; 1
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	02 c0       	rjmp	.+4      	; 0x317a <__vector_29+0x284>
    3176:	22 0f       	add	r18, r18
    3178:	33 1f       	adc	r19, r19
    317a:	8a 95       	dec	r24
    317c:	e2 f7       	brpl	.-8      	; 0x3176 <__vector_29+0x280>
    317e:	20 93 05 01 	sts	0x0105, r18
    3182:	80 91 c0 03 	lds	r24, 0x03C0
    3186:	0e cf       	rjmp	.-484    	; 0x2fa4 <__vector_29+0xae>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    3188:	90 91 7b 00 	lds	r25, 0x007B
    318c:	98 60       	ori	r25, 0x08	; 8
    318e:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    3192:	90 91 29 03 	lds	r25, 0x0329
    3196:	98 5c       	subi	r25, 0xC8	; 200
    3198:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    319c:	82 30       	cpi	r24, 0x02	; 2
    319e:	09 f0       	breq	.+2      	; 0x31a2 <__vector_29+0x2ac>
    31a0:	13 cf       	rjmp	.-474    	; 0x2fc8 <__vector_29+0xd2>

		if(hardwareRevision == HW_REV_3_0) {
    31a2:	20 91 42 05 	lds	r18, 0x0542
    31a6:	22 23       	and	r18, r18
    31a8:	51 f0       	breq	.+20     	; 0x31be <__vector_29+0x2c8>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    31aa:	21 30       	cpi	r18, 0x01	; 1
    31ac:	19 f0       	breq	.+6      	; 0x31b4 <__vector_29+0x2be>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    31ae:	22 30       	cpi	r18, 0x02	; 2
    31b0:	09 f0       	breq	.+2      	; 0x31b4 <__vector_29+0x2be>
    31b2:	0a cf       	rjmp	.-492    	; 0x2fc8 <__vector_29+0xd2>
			PORTJ = 0xFF;
    31b4:	8f ef       	ldi	r24, 0xFF	; 255
    31b6:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    31ba:	12 b8       	out	0x02, r1	; 2
    31bc:	05 cf       	rjmp	.-502    	; 0x2fc8 <__vector_29+0xd2>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    31be:	80 91 05 01 	lds	r24, 0x0105
    31c2:	80 7f       	andi	r24, 0xF0	; 240
    31c4:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    31c8:	12 b8       	out	0x02, r1	; 2
    31ca:	fe ce       	rjmp	.-516    	; 0x2fc8 <__vector_29+0xd2>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    31cc:	81 30       	cpi	r24, 0x01	; 1
    31ce:	09 f0       	breq	.+2      	; 0x31d2 <__vector_29+0x2dc>
    31d0:	e9 ce       	rjmp	.-558    	; 0x2fa4 <__vector_29+0xae>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    31d2:	80 91 2b 03 	lds	r24, 0x032B
    31d6:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    31da:	80 91 2e 03 	lds	r24, 0x032E
    31de:	80 93 c2 03 	sts	0x03C2, r24
			adcSaveDataTo = SAVE_TO_PROX;
    31e2:	10 92 bf 03 	sts	0x03BF, r1
			adcSamplingState = 2;
    31e6:	82 e0       	ldi	r24, 0x02	; 2
    31e8:	80 93 c0 03 	sts	0x03C0, r24
			break;
    31ec:	db ce       	rjmp	.-586    	; 0x2fa4 <__vector_29+0xae>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    31ee:	81 30       	cpi	r24, 0x01	; 1
    31f0:	09 f0       	breq	.+2      	; 0x31f4 <__vector_29+0x2fe>
    31f2:	bd ce       	rjmp	.-646    	; 0x2f6e <__vector_29+0x78>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    31f4:	80 91 e1 03 	lds	r24, 0x03E1
    31f8:	90 91 e2 03 	lds	r25, 0x03E2
    31fc:	82 0f       	add	r24, r18
    31fe:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    3200:	96 95       	lsr	r25
    3202:	87 95       	ror	r24
    3204:	90 93 e2 03 	sts	0x03E2, r25
    3208:	80 93 e1 03 	sts	0x03E1, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    320c:	80 91 c0 03 	lds	r24, 0x03C0
    3210:	82 30       	cpi	r24, 0x02	; 2
    3212:	09 f0       	breq	.+2      	; 0x3216 <__vector_29+0x320>
    3214:	b1 ce       	rjmp	.-670    	; 0x2f78 <__vector_29+0x82>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    3216:	80 91 2c 03 	lds	r24, 0x032C
    321a:	80 93 29 03 	sts	0x0329, r24
			rightChannelPhase = rightMotorPhase;
    321e:	80 91 2d 03 	lds	r24, 0x032D
    3222:	80 93 c1 03 	sts	0x03C1, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3226:	80 91 c2 03 	lds	r24, 0x03C2
    322a:	88 23       	and	r24, r24
    322c:	09 f0       	breq	.+2      	; 0x3230 <__vector_29+0x33a>
    322e:	9b c0       	rjmp	.+310    	; 0x3366 <__vector_29+0x470>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3230:	83 e0       	ldi	r24, 0x03	; 3
    3232:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3236:	83 e0       	ldi	r24, 0x03	; 3
    3238:	80 93 c0 03 	sts	0x03C0, r24
			break;
    323c:	b3 ce       	rjmp	.-666    	; 0x2fa4 <__vector_29+0xae>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    323e:	80 91 0a 02 	lds	r24, 0x020A
    3242:	88 23       	and	r24, r24
    3244:	09 f4       	brne	.+2      	; 0x3248 <__vector_29+0x352>
    3246:	93 ce       	rjmp	.-730    	; 0x2f6e <__vector_29+0x78>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    3248:	90 91 00 01 	lds	r25, 0x0100
    324c:	93 fd       	sbrc	r25, 3
    324e:	8f ce       	rjmp	.-738    	; 0x2f6e <__vector_29+0x78>
    3250:	90 91 00 01 	lds	r25, 0x0100
    3254:	94 fd       	sbrc	r25, 4
    3256:	8b ce       	rjmp	.-746    	; 0x2f6e <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    3258:	48 2f       	mov	r20, r24
    325a:	4f 5f       	subi	r20, 0xFF	; 255
    325c:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    3260:	45 30       	cpi	r20, 0x05	; 5
    3262:	08 f4       	brcc	.+2      	; 0x3266 <__vector_29+0x370>
    3264:	84 ce       	rjmp	.-760    	; 0x2f6e <__vector_29+0x78>
					left_vel_sum += value;
    3266:	80 91 eb 03 	lds	r24, 0x03EB
    326a:	90 91 ec 03 	lds	r25, 0x03EC
    326e:	82 0f       	add	r24, r18
    3270:	93 1f       	adc	r25, r19
    3272:	90 93 ec 03 	sts	0x03EC, r25
    3276:	80 93 eb 03 	sts	0x03EB, r24
					if(firstSampleLeft==8) {
    327a:	48 30       	cpi	r20, 0x08	; 8
    327c:	09 f0       	breq	.+2      	; 0x3280 <__vector_29+0x38a>
    327e:	77 ce       	rjmp	.-786    	; 0x2f6e <__vector_29+0x78>
						firstSampleLeft = 0;
    3280:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	80 93 07 02 	sts	0x0207, r24
    328a:	71 ce       	rjmp	.-798    	; 0x2f6e <__vector_29+0x78>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    328c:	80 91 2b 03 	lds	r24, 0x032B
    3290:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    3294:	80 91 2e 03 	lds	r24, 0x032E
    3298:	80 93 c2 03 	sts	0x03C2, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    329c:	80 91 c1 03 	lds	r24, 0x03C1
    32a0:	88 23       	and	r24, r24
    32a2:	09 f0       	breq	.+2      	; 0x32a6 <__vector_29+0x3b0>
    32a4:	4e c0       	rjmp	.+156    	; 0x3342 <__vector_29+0x44c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    32ac:	84 e0       	ldi	r24, 0x04	; 4
    32ae:	80 93 c0 03 	sts	0x03C0, r24
			break;
    32b2:	78 ce       	rjmp	.-784    	; 0x2fa4 <__vector_29+0xae>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    32b4:	80 91 09 02 	lds	r24, 0x0209
    32b8:	88 23       	and	r24, r24
    32ba:	09 f4       	brne	.+2      	; 0x32be <__vector_29+0x3c8>
    32bc:	58 ce       	rjmp	.-848    	; 0x2f6e <__vector_29+0x78>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    32be:	63 99       	sbic	0x0c, 3	; 12
    32c0:	56 ce       	rjmp	.-852    	; 0x2f6e <__vector_29+0x78>
    32c2:	64 99       	sbic	0x0c, 4	; 12
    32c4:	54 ce       	rjmp	.-856    	; 0x2f6e <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    32c6:	48 2f       	mov	r20, r24
    32c8:	4f 5f       	subi	r20, 0xFF	; 255
    32ca:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    32ce:	45 30       	cpi	r20, 0x05	; 5
    32d0:	08 f4       	brcc	.+2      	; 0x32d4 <__vector_29+0x3de>
    32d2:	4d ce       	rjmp	.-870    	; 0x2f6e <__vector_29+0x78>
					right_vel_sum += value;
    32d4:	80 91 ed 03 	lds	r24, 0x03ED
    32d8:	90 91 ee 03 	lds	r25, 0x03EE
    32dc:	82 0f       	add	r24, r18
    32de:	93 1f       	adc	r25, r19
    32e0:	90 93 ee 03 	sts	0x03EE, r25
    32e4:	80 93 ed 03 	sts	0x03ED, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    32e8:	48 30       	cpi	r20, 0x08	; 8
    32ea:	09 f0       	breq	.+2      	; 0x32ee <__vector_29+0x3f8>
    32ec:	40 ce       	rjmp	.-896    	; 0x2f6e <__vector_29+0x78>
						firstSampleRight = 0;
    32ee:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	80 93 08 02 	sts	0x0208, r24
    32f8:	3a ce       	rjmp	.-908    	; 0x2f6e <__vector_29+0x78>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    32fa:	80 91 df 03 	lds	r24, 0x03DF
    32fe:	90 91 e0 03 	lds	r25, 0x03E0
    3302:	82 0f       	add	r24, r18
    3304:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    3306:	96 95       	lsr	r25
    3308:	87 95       	ror	r24
    330a:	90 93 e0 03 	sts	0x03E0, r25
    330e:	80 93 df 03 	sts	0x03DF, r24
			break;
    3312:	2d ce       	rjmp	.-934    	; 0x2f6e <__vector_29+0x78>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    3314:	21 30       	cpi	r18, 0x01	; 1
    3316:	11 f0       	breq	.+4      	; 0x331c <__vector_29+0x426>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    3318:	22 30       	cpi	r18, 0x02	; 2
    331a:	81 f4       	brne	.+32     	; 0x333c <__vector_29+0x446>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    331c:	40 91 05 01 	lds	r20, 0x0105
    3320:	40 97       	sbiw	r24, 0x10	; 16
    3322:	95 95       	asr	r25
    3324:	87 95       	ror	r24
    3326:	21 e0       	ldi	r18, 0x01	; 1
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	02 c0       	rjmp	.+4      	; 0x3330 <__vector_29+0x43a>
    332c:	22 0f       	add	r18, r18
    332e:	33 1f       	adc	r19, r19
    3330:	8a 95       	dec	r24
    3332:	e2 f7       	brpl	.-8      	; 0x332c <__vector_29+0x436>
    3334:	20 95       	com	r18
    3336:	24 23       	and	r18, r20
    3338:	20 93 05 01 	sts	0x0105, r18
    333c:	80 91 c0 03 	lds	r24, 0x03C0
    3340:	31 ce       	rjmp	.-926    	; 0x2fa4 <__vector_29+0xae>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3342:	81 30       	cpi	r24, 0x01	; 1
    3344:	d1 f1       	breq	.+116    	; 0x33ba <__vector_29+0x4c4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3346:	85 e0       	ldi	r24, 0x05	; 5
    3348:	80 93 bf 03 	sts	0x03BF, r24
    334c:	af cf       	rjmp	.-162    	; 0x32ac <__vector_29+0x3b6>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    334e:	91 30       	cpi	r25, 0x01	; 1
    3350:	09 f0       	breq	.+2      	; 0x3354 <__vector_29+0x45e>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3352:	85 e0       	ldi	r24, 0x05	; 5
    3354:	80 93 bf 03 	sts	0x03BF, r24
    3358:	f5 ce       	rjmp	.-534    	; 0x3144 <__vector_29+0x24e>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    335a:	81 30       	cpi	r24, 0x01	; 1
    335c:	b1 f1       	breq	.+108    	; 0x33ca <__vector_29+0x4d4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    335e:	85 e0       	ldi	r24, 0x05	; 5
    3360:	80 93 bf 03 	sts	0x03BF, r24
    3364:	1c ce       	rjmp	.-968    	; 0x2f9e <__vector_29+0xa8>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3366:	81 30       	cpi	r24, 0x01	; 1
    3368:	61 f1       	breq	.+88     	; 0x33c2 <__vector_29+0x4cc>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    336a:	85 e0       	ldi	r24, 0x05	; 5
    336c:	80 93 bf 03 	sts	0x03BF, r24
    3370:	62 cf       	rjmp	.-316    	; 0x3236 <__vector_29+0x340>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    3372:	10 92 51 05 	sts	0x0551, r1
    3376:	c4 ce       	rjmp	.-632    	; 0x3100 <__vector_29+0x20a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    3378:	66 95       	lsr	r22
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <__vector_29+0x48e>
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	6a 95       	dec	r22
    3386:	e2 f7       	brpl	.-8      	; 0x3380 <__vector_29+0x48a>
    3388:	82 b9       	out	0x02, r24	; 2
    338a:	80 91 c0 03 	lds	r24, 0x03C0
    338e:	0a ce       	rjmp	.-1004   	; 0x2fa4 <__vector_29+0xae>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    3390:	80 91 c5 03 	lds	r24, 0x03C5
    3394:	81 30       	cpi	r24, 0x01	; 1
    3396:	a1 f1       	breq	.+104    	; 0x3400 <__vector_29+0x50a>
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	04 ce       	rjmp	.-1016   	; 0x2fa4 <__vector_29+0xae>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    339c:	80 91 c5 03 	lds	r24, 0x03C5
    33a0:	82 30       	cpi	r24, 0x02	; 2
    33a2:	09 f0       	breq	.+2      	; 0x33a6 <__vector_29+0x4b0>
    33a4:	2b ce       	rjmp	.-938    	; 0x2ffc <__vector_29+0x106>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    33a6:	30 93 c4 03 	sts	0x03C4, r19
    33aa:	20 93 c3 03 	sts	0x03C3, r18
				measBattery = 0;
    33ae:	10 92 c5 03 	sts	0x03C5, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    33b2:	46 98       	cbi	0x08, 6	; 8
    33b4:	4e e0       	ldi	r20, 0x0E	; 14
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	2a ce       	rjmp	.-940    	; 0x300e <__vector_29+0x118>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    33ba:	82 e0       	ldi	r24, 0x02	; 2
    33bc:	80 93 bf 03 	sts	0x03BF, r24
    33c0:	75 cf       	rjmp	.-278    	; 0x32ac <__vector_29+0x3b6>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    33c2:	84 e0       	ldi	r24, 0x04	; 4
    33c4:	80 93 bf 03 	sts	0x03BF, r24
    33c8:	36 cf       	rjmp	.-404    	; 0x3236 <__vector_29+0x340>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    33ca:	82 e0       	ldi	r24, 0x02	; 2
    33cc:	80 93 bf 03 	sts	0x03BF, r24
    33d0:	e6 cd       	rjmp	.-1076   	; 0x2f9e <__vector_29+0xa8>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    33d2:	11 82       	std	Z+1, r1	; 0x01
    33d4:	10 82       	st	Z, r1
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	46 ce       	rjmp	.-884    	; 0x3068 <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    33dc:	ac 01       	movw	r20, r24
    33de:	44 5c       	subi	r20, 0xC4	; 196
    33e0:	5f 4f       	sbci	r21, 0xFF	; 255
    33e2:	55 95       	asr	r21
    33e4:	47 95       	ror	r20
    33e6:	48 37       	cpi	r20, 0x78	; 120
    33e8:	51 05       	cpc	r21, r1
    33ea:	7c f4       	brge	.+30     	; 0x340a <__vector_29+0x514>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    33ec:	29 53       	subi	r18, 0x39	; 57
    33ee:	3c 4f       	sbci	r19, 0xFC	; 252
    33f0:	cc 97       	sbiw	r24, 0x3c	; 60
    33f2:	95 95       	asr	r25
    33f4:	87 95       	ror	r24
    33f6:	cc 96       	adiw	r24, 0x3c	; 60
    33f8:	f9 01       	movw	r30, r18
    33fa:	91 83       	std	Z+1, r25	; 0x01
    33fc:	80 83       	st	Z, r24
    33fe:	3f ce       	rjmp	.-898    	; 0x307e <__vector_29+0x188>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    3400:	82 e0       	ldi	r24, 0x02	; 2
    3402:	80 93 c5 03 	sts	0x03C5, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    3406:	46 9a       	sbi	0x08, 6	; 8
    3408:	a4 ce       	rjmp	.-696    	; 0x3152 <__vector_29+0x25c>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    340a:	ac 01       	movw	r20, r24
    340c:	44 5d       	subi	r20, 0xD4	; 212
    340e:	5e 4f       	sbci	r21, 0xFE	; 254
    3410:	55 95       	asr	r21
    3412:	47 95       	ror	r20
    3414:	55 95       	asr	r21
    3416:	47 95       	ror	r20
    3418:	44 3b       	cpi	r20, 0xB4	; 180
    341a:	51 05       	cpc	r21, r1
    341c:	74 f4       	brge	.+28     	; 0x343a <__vector_29+0x544>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    341e:	29 53       	subi	r18, 0x39	; 57
    3420:	3c 4f       	sbci	r19, 0xFC	; 252
    3422:	84 5b       	subi	r24, 0xB4	; 180
    3424:	90 40       	sbci	r25, 0x00	; 0
    3426:	95 95       	asr	r25
    3428:	87 95       	ror	r24
    342a:	95 95       	asr	r25
    342c:	87 95       	ror	r24
    342e:	88 58       	subi	r24, 0x88	; 136
    3430:	9f 4f       	sbci	r25, 0xFF	; 255
    3432:	f9 01       	movw	r30, r18
    3434:	91 83       	std	Z+1, r25	; 0x01
    3436:	80 83       	st	Z, r24
    3438:	22 ce       	rjmp	.-956    	; 0x307e <__vector_29+0x188>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    343a:	29 53       	subi	r18, 0x39	; 57
    343c:	3c 4f       	sbci	r19, 0xFC	; 252
    343e:	84 5a       	subi	r24, 0xA4	; 164
    3440:	91 40       	sbci	r25, 0x01	; 1
    3442:	95 95       	asr	r25
    3444:	87 95       	ror	r24
    3446:	95 95       	asr	r25
    3448:	87 95       	ror	r24
    344a:	95 95       	asr	r25
    344c:	87 95       	ror	r24
    344e:	8c 54       	subi	r24, 0x4C	; 76
    3450:	9f 4f       	sbci	r25, 0xFF	; 255
    3452:	f9 01       	movw	r30, r18
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	80 83       	st	Z, r24
    3458:	12 ce       	rjmp	.-988    	; 0x307e <__vector_29+0x188>

0000345a <initMotors>:

#include "motors.h"

void initMotors() {
    345a:	0f 93       	push	r16
    345c:	1f 93       	push	r17
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    3462:	e0 e9       	ldi	r30, 0x90	; 144
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	10 82       	st	Z, r1
	TCCR3B = 0;
    3468:	41 e9       	ldi	r20, 0x91	; 145
    346a:	50 e0       	ldi	r21, 0x00	; 0
    346c:	da 01       	movw	r26, r20
    346e:	1c 92       	st	X, r1
	TIMSK3 = 0;
    3470:	21 e7       	ldi	r18, 0x71	; 113
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	e9 01       	movw	r28, r18
    3476:	18 82       	st	Y, r1
	TCCR4A = 0;
    3478:	a0 ea       	ldi	r26, 0xA0	; 160
    347a:	b0 e0       	ldi	r27, 0x00	; 0
    347c:	1c 92       	st	X, r1
	TCCR4B = 0;
    347e:	81 ea       	ldi	r24, 0xA1	; 161
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	ec 01       	movw	r28, r24
    3484:	18 82       	st	Y, r1
	TIMSK4 = 0;
    3486:	02 e7       	ldi	r16, 0x72	; 114
    3488:	10 e0       	ldi	r17, 0x00	; 0
    348a:	e8 01       	movw	r28, r16
    348c:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    348e:	60 81       	ld	r22, Z
    3490:	63 68       	ori	r22, 0x83	; 131
    3492:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    3494:	60 81       	ld	r22, Z
    3496:	63 60       	ori	r22, 0x03	; 3
    3498:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    349a:	ea 01       	movw	r28, r20
    349c:	68 81       	ld	r22, Y
    349e:	6b 60       	ori	r22, 0x0B	; 11
    34a0:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    34a2:	40 91 f3 03 	lds	r20, 0x03F3
    34a6:	50 91 f4 03 	lds	r21, 0x03F4
    34aa:	50 93 99 00 	sts	0x0099, r21
    34ae:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    34b2:	10 92 9b 00 	sts	0x009B, r1
    34b6:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    34ba:	e9 01       	movw	r28, r18
    34bc:	48 81       	ld	r20, Y
    34be:	41 60       	ori	r20, 0x01	; 1
    34c0:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    34c2:	20 81       	ld	r18, Z
    34c4:	2f 75       	andi	r18, 0x5F	; 95
    34c6:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    34c8:	2e b1       	in	r18, 0x0e	; 14
    34ca:	27 7e       	andi	r18, 0xE7	; 231
    34cc:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    34ce:	2c 91       	ld	r18, X
    34d0:	23 68       	ori	r18, 0x83	; 131
    34d2:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    34d4:	fc 01       	movw	r30, r24
    34d6:	20 81       	ld	r18, Z
    34d8:	2b 60       	ori	r18, 0x0B	; 11
    34da:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    34dc:	80 91 f5 03 	lds	r24, 0x03F5
    34e0:	90 91 f6 03 	lds	r25, 0x03F6
    34e4:	90 93 a9 00 	sts	0x00A9, r25
    34e8:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    34ec:	10 92 ab 00 	sts	0x00AB, r1
    34f0:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    34f4:	e8 01       	movw	r28, r16
    34f6:	88 81       	ld	r24, Y
    34f8:	81 60       	ori	r24, 0x01	; 1
    34fa:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    34fc:	8c 91       	ld	r24, X
    34fe:	8f 75       	andi	r24, 0x5F	; 95
    3500:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3502:	e2 e0       	ldi	r30, 0x02	; 2
    3504:	f1 e0       	ldi	r31, 0x01	; 1
    3506:	80 81       	ld	r24, Z
    3508:	87 7e       	andi	r24, 0xE7	; 231
    350a:	80 83       	st	Z, r24


}
    350c:	df 91       	pop	r29
    350e:	cf 91       	pop	r28
    3510:	1f 91       	pop	r17
    3512:	0f 91       	pop	r16
    3514:	08 95       	ret

00003516 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    3516:	80 91 07 02 	lds	r24, 0x0207
    351a:	88 23       	and	r24, r24
    351c:	09 f0       	breq	.+2      	; 0x3520 <handleMotorsWithNoController+0xa>
    351e:	41 c0       	rjmp	.+130    	; 0x35a2 <handleMotorsWithNoController+0x8c>
    3520:	60 91 f9 03 	lds	r22, 0x03F9
    3524:	70 91 fa 03 	lds	r23, 0x03FA
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    3528:	80 91 08 02 	lds	r24, 0x0208
    352c:	88 23       	and	r24, r24
    352e:	09 f0       	breq	.+2      	; 0x3532 <handleMotorsWithNoController+0x1c>
    3530:	73 c0       	rjmp	.+230    	; 0x3618 <handleMotorsWithNoController+0x102>
    3532:	e0 91 f7 03 	lds	r30, 0x03F7
    3536:	f0 91 f8 03 	lds	r31, 0x03F8
			rightMotSteps -= (last_right_vel>>3);
		}
	}


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    353a:	f0 93 04 04 	sts	0x0404, r31
    353e:	e0 93 03 04 	sts	0x0403, r30
	pwm_left_working = pwm_left_desired;
    3542:	96 2f       	mov	r25, r22
    3544:	87 2f       	mov	r24, r23
    3546:	60 93 05 04 	sts	0x0405, r22
    354a:	70 93 06 04 	sts	0x0406, r23
	if(obstacleAvoidanceEnabled) {
    354e:	20 91 4f 05 	lds	r18, 0x054F
    3552:	22 23       	and	r18, r18
    3554:	09 f0       	breq	.+2      	; 0x3558 <handleMotorsWithNoController+0x42>
    3556:	a3 c0       	rjmp	.+326    	; 0x369e <handleMotorsWithNoController+0x188>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    3558:	90 93 e9 03 	sts	0x03E9, r25
    355c:	80 93 ea 03 	sts	0x03EA, r24
	pwm_right_desired_to_control = pwm_right_working;
    3560:	f0 93 e8 03 	sts	0x03E8, r31
    3564:	e0 93 e7 03 	sts	0x03E7, r30

	pwm_left = pwm_left_working;
    3568:	90 93 f5 03 	sts	0x03F5, r25
    356c:	80 93 f6 03 	sts	0x03F6, r24
	pwm_right = pwm_right_working;
    3570:	f0 93 f4 03 	sts	0x03F4, r31
    3574:	e0 93 f3 03 	sts	0x03F3, r30

	if(pwm_right > 0) {
    3578:	1e 16       	cp	r1, r30
    357a:	1f 06       	cpc	r1, r31
    357c:	0c f0       	brlt	.+2      	; 0x3580 <handleMotorsWithNoController+0x6a>
    357e:	9e c0       	rjmp	.+316    	; 0x36bc <handleMotorsWithNoController+0x1a6>
		OCR3A = (unsigned int)pwm_right;
    3580:	f0 93 99 00 	sts	0x0099, r31
    3584:	e0 93 98 00 	sts	0x0098, r30
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    3588:	80 91 f5 03 	lds	r24, 0x03F5
    358c:	90 91 f6 03 	lds	r25, 0x03F6
    3590:	18 16       	cp	r1, r24
    3592:	19 06       	cpc	r1, r25
    3594:	0c f0       	brlt	.+2      	; 0x3598 <handleMotorsWithNoController+0x82>
    3596:	77 c0       	rjmp	.+238    	; 0x3686 <handleMotorsWithNoController+0x170>
		OCR4A = (unsigned int)pwm_left;
    3598:	90 93 a9 00 	sts	0x00A9, r25
    359c:	80 93 a8 00 	sts	0x00A8, r24
    35a0:	08 95       	ret

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
		last_left_vel = left_vel_sum>>2;
    35a2:	20 91 eb 03 	lds	r18, 0x03EB
    35a6:	30 91 ec 03 	lds	r19, 0x03EC
    35aa:	36 95       	lsr	r19
    35ac:	27 95       	ror	r18
    35ae:	36 95       	lsr	r19
    35b0:	27 95       	ror	r18
    35b2:	30 93 f0 03 	sts	0x03F0, r19
    35b6:	20 93 ef 03 	sts	0x03EF, r18
		compute_left_vel = 0;
    35ba:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    35be:	10 92 ec 03 	sts	0x03EC, r1
    35c2:	10 92 eb 03 	sts	0x03EB, r1

		if(pwm_left_desired >= 0) {
    35c6:	60 91 f9 03 	lds	r22, 0x03F9
    35ca:	70 91 fa 03 	lds	r23, 0x03FA
    35ce:	77 fd       	sbrc	r23, 7
    35d0:	a0 c0       	rjmp	.+320    	; 0x3712 <handleMotorsWithNoController+0x1fc>
			leftMotSteps += (last_left_vel>>3);
    35d2:	35 95       	asr	r19
    35d4:	27 95       	ror	r18
    35d6:	35 95       	asr	r19
    35d8:	27 95       	ror	r18
    35da:	35 95       	asr	r19
    35dc:	27 95       	ror	r18
    35de:	44 27       	eor	r20, r20
    35e0:	37 fd       	sbrc	r19, 7
    35e2:	40 95       	com	r20
    35e4:	54 2f       	mov	r21, r20
    35e6:	80 91 db 03 	lds	r24, 0x03DB
    35ea:	90 91 dc 03 	lds	r25, 0x03DC
    35ee:	a0 91 dd 03 	lds	r26, 0x03DD
    35f2:	b0 91 de 03 	lds	r27, 0x03DE
    35f6:	82 0f       	add	r24, r18
    35f8:	93 1f       	adc	r25, r19
    35fa:	a4 1f       	adc	r26, r20
    35fc:	b5 1f       	adc	r27, r21
    35fe:	80 93 db 03 	sts	0x03DB, r24
    3602:	90 93 dc 03 	sts	0x03DC, r25
    3606:	a0 93 dd 03 	sts	0x03DD, r26
    360a:	b0 93 de 03 	sts	0x03DE, r27
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    360e:	80 91 08 02 	lds	r24, 0x0208
    3612:	88 23       	and	r24, r24
    3614:	09 f4       	brne	.+2      	; 0x3618 <handleMotorsWithNoController+0x102>
    3616:	8d cf       	rjmp	.-230    	; 0x3532 <handleMotorsWithNoController+0x1c>
		last_right_vel = right_vel_sum>>2;
    3618:	20 91 ed 03 	lds	r18, 0x03ED
    361c:	30 91 ee 03 	lds	r19, 0x03EE
    3620:	36 95       	lsr	r19
    3622:	27 95       	ror	r18
    3624:	36 95       	lsr	r19
    3626:	27 95       	ror	r18
    3628:	30 93 f2 03 	sts	0x03F2, r19
    362c:	20 93 f1 03 	sts	0x03F1, r18
		compute_right_vel = 0;
    3630:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    3634:	10 92 ee 03 	sts	0x03EE, r1
    3638:	10 92 ed 03 	sts	0x03ED, r1

		if(pwm_right_desired >= 0) {
    363c:	e0 91 f7 03 	lds	r30, 0x03F7
    3640:	f0 91 f8 03 	lds	r31, 0x03F8
    3644:	f7 fd       	sbrc	r31, 7
    3646:	46 c0       	rjmp	.+140    	; 0x36d4 <handleMotorsWithNoController+0x1be>
			rightMotSteps += (last_right_vel>>3);
    3648:	35 95       	asr	r19
    364a:	27 95       	ror	r18
    364c:	35 95       	asr	r19
    364e:	27 95       	ror	r18
    3650:	35 95       	asr	r19
    3652:	27 95       	ror	r18
    3654:	44 27       	eor	r20, r20
    3656:	37 fd       	sbrc	r19, 7
    3658:	40 95       	com	r20
    365a:	54 2f       	mov	r21, r20
    365c:	80 91 d7 03 	lds	r24, 0x03D7
    3660:	90 91 d8 03 	lds	r25, 0x03D8
    3664:	a0 91 d9 03 	lds	r26, 0x03D9
    3668:	b0 91 da 03 	lds	r27, 0x03DA
    366c:	82 0f       	add	r24, r18
    366e:	93 1f       	adc	r25, r19
    3670:	a4 1f       	adc	r26, r20
    3672:	b5 1f       	adc	r27, r21
    3674:	80 93 d7 03 	sts	0x03D7, r24
    3678:	90 93 d8 03 	sts	0x03D8, r25
    367c:	a0 93 d9 03 	sts	0x03D9, r26
    3680:	b0 93 da 03 	sts	0x03DA, r27
    3684:	5a cf       	rjmp	.-332    	; 0x353a <handleMotorsWithNoController+0x24>
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	09 f0       	breq	.+2      	; 0x368c <handleMotorsWithNoController+0x176>
    368a:	6a c0       	rjmp	.+212    	; 0x3760 <handleMotorsWithNoController+0x24a>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    368c:	10 92 a9 00 	sts	0x00A9, r1
    3690:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    3694:	10 92 ab 00 	sts	0x00AB, r1
    3698:	10 92 aa 00 	sts	0x00AA, r1
    369c:	08 95       	ret


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	pwm_left_working = pwm_left_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    369e:	85 e0       	ldi	r24, 0x05	; 5
    36a0:	94 e0       	ldi	r25, 0x04	; 4
    36a2:	63 e0       	ldi	r22, 0x03	; 3
    36a4:	74 e0       	ldi	r23, 0x04	; 4
    36a6:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <obstacleAvoidance>
    36aa:	90 91 05 04 	lds	r25, 0x0405
    36ae:	80 91 06 04 	lds	r24, 0x0406
    36b2:	e0 91 03 04 	lds	r30, 0x0403
    36b6:	f0 91 04 04 	lds	r31, 0x0404
    36ba:	4e cf       	rjmp	.-356    	; 0x3558 <handleMotorsWithNoController+0x42>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    36bc:	30 97       	sbiw	r30, 0x00	; 0
    36be:	09 f0       	breq	.+2      	; 0x36c2 <handleMotorsWithNoController+0x1ac>
    36c0:	47 c0       	rjmp	.+142    	; 0x3750 <handleMotorsWithNoController+0x23a>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    36c2:	10 92 99 00 	sts	0x0099, r1
    36c6:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    36ca:	10 92 9b 00 	sts	0x009B, r1
    36ce:	10 92 9a 00 	sts	0x009A, r1
    36d2:	5a cf       	rjmp	.-332    	; 0x3588 <handleMotorsWithNoController+0x72>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    36d4:	35 95       	asr	r19
    36d6:	27 95       	ror	r18
    36d8:	35 95       	asr	r19
    36da:	27 95       	ror	r18
    36dc:	35 95       	asr	r19
    36de:	27 95       	ror	r18
    36e0:	44 27       	eor	r20, r20
    36e2:	37 fd       	sbrc	r19, 7
    36e4:	40 95       	com	r20
    36e6:	54 2f       	mov	r21, r20
    36e8:	80 91 d7 03 	lds	r24, 0x03D7
    36ec:	90 91 d8 03 	lds	r25, 0x03D8
    36f0:	a0 91 d9 03 	lds	r26, 0x03D9
    36f4:	b0 91 da 03 	lds	r27, 0x03DA
    36f8:	82 1b       	sub	r24, r18
    36fa:	93 0b       	sbc	r25, r19
    36fc:	a4 0b       	sbc	r26, r20
    36fe:	b5 0b       	sbc	r27, r21
    3700:	80 93 d7 03 	sts	0x03D7, r24
    3704:	90 93 d8 03 	sts	0x03D8, r25
    3708:	a0 93 d9 03 	sts	0x03D9, r26
    370c:	b0 93 da 03 	sts	0x03DA, r27
    3710:	14 cf       	rjmp	.-472    	; 0x353a <handleMotorsWithNoController+0x24>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    3712:	35 95       	asr	r19
    3714:	27 95       	ror	r18
    3716:	35 95       	asr	r19
    3718:	27 95       	ror	r18
    371a:	35 95       	asr	r19
    371c:	27 95       	ror	r18
    371e:	44 27       	eor	r20, r20
    3720:	37 fd       	sbrc	r19, 7
    3722:	40 95       	com	r20
    3724:	54 2f       	mov	r21, r20
    3726:	80 91 db 03 	lds	r24, 0x03DB
    372a:	90 91 dc 03 	lds	r25, 0x03DC
    372e:	a0 91 dd 03 	lds	r26, 0x03DD
    3732:	b0 91 de 03 	lds	r27, 0x03DE
    3736:	82 1b       	sub	r24, r18
    3738:	93 0b       	sbc	r25, r19
    373a:	a4 0b       	sbc	r26, r20
    373c:	b5 0b       	sbc	r27, r21
    373e:	80 93 db 03 	sts	0x03DB, r24
    3742:	90 93 dc 03 	sts	0x03DC, r25
    3746:	a0 93 dd 03 	sts	0x03DD, r26
    374a:	b0 93 de 03 	sts	0x03DE, r27
    374e:	ec ce       	rjmp	.-552    	; 0x3528 <handleMotorsWithNoController+0x12>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    3750:	f0 95       	com	r31
    3752:	e1 95       	neg	r30
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	f0 93 9b 00 	sts	0x009B, r31
    375a:	e0 93 9a 00 	sts	0x009A, r30
    375e:	14 cf       	rjmp	.-472    	; 0x3588 <handleMotorsWithNoController+0x72>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    3760:	90 95       	com	r25
    3762:	81 95       	neg	r24
    3764:	9f 4f       	sbci	r25, 0xFF	; 255
    3766:	90 93 ab 00 	sts	0x00AB, r25
    376a:	80 93 aa 00 	sts	0x00AA, r24
    376e:	08 95       	ret

00003770 <handleMotorsWithSpeedController>:

}

void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
    3770:	80 91 f9 03 	lds	r24, 0x03F9
    3774:	90 91 fa 03 	lds	r25, 0x03FA
    3778:	90 93 06 04 	sts	0x0406, r25
    377c:	80 93 05 04 	sts	0x0405, r24
	pwm_right_working = pwm_right_desired;
    3780:	20 91 f7 03 	lds	r18, 0x03F7
    3784:	30 91 f8 03 	lds	r19, 0x03F8
    3788:	30 93 04 04 	sts	0x0404, r19
    378c:	20 93 03 04 	sts	0x0403, r18
	if(obstacleAvoidanceEnabled) {
    3790:	40 91 4f 05 	lds	r20, 0x054F
    3794:	44 23       	and	r20, r20
    3796:	09 f0       	breq	.+2      	; 0x379a <handleMotorsWithSpeedController+0x2a>
    3798:	b8 c0       	rjmp	.+368    	; 0x390a <handleMotorsWithSpeedController+0x19a>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    379a:	90 93 ea 03 	sts	0x03EA, r25
    379e:	80 93 e9 03 	sts	0x03E9, r24
	pwm_right_desired_to_control = pwm_right_working;
    37a2:	30 93 e8 03 	sts	0x03E8, r19
    37a6:	20 93 e7 03 	sts	0x03E7, r18

	if(compute_left_vel) {
    37aa:	20 91 07 02 	lds	r18, 0x0207
    37ae:	22 23       	and	r18, r18
    37b0:	09 f4       	brne	.+2      	; 0x37b4 <handleMotorsWithSpeedController+0x44>
    37b2:	4b c0       	rjmp	.+150    	; 0x384a <handleMotorsWithSpeedController+0xda>

		last_left_vel = left_vel_sum>>2;
    37b4:	20 91 eb 03 	lds	r18, 0x03EB
    37b8:	30 91 ec 03 	lds	r19, 0x03EC
    37bc:	36 95       	lsr	r19
    37be:	27 95       	ror	r18
    37c0:	36 95       	lsr	r19
    37c2:	27 95       	ror	r18
    37c4:	30 93 f0 03 	sts	0x03F0, r19
    37c8:	20 93 ef 03 	sts	0x03EF, r18
		compute_left_vel = 0;
    37cc:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    37d0:	10 92 ec 03 	sts	0x03EC, r1
    37d4:	10 92 eb 03 	sts	0x03EB, r1

		if(pwm_left_desired_to_control >= 0) {
    37d8:	97 fd       	sbrc	r25, 7
    37da:	ce c0       	rjmp	.+412    	; 0x3978 <handleMotorsWithSpeedController+0x208>
			leftMotSteps += (last_left_vel>>3);
    37dc:	35 95       	asr	r19
    37de:	27 95       	ror	r18
    37e0:	35 95       	asr	r19
    37e2:	27 95       	ror	r18
    37e4:	35 95       	asr	r19
    37e6:	27 95       	ror	r18
    37e8:	44 27       	eor	r20, r20
    37ea:	37 fd       	sbrc	r19, 7
    37ec:	40 95       	com	r20
    37ee:	54 2f       	mov	r21, r20
    37f0:	80 91 db 03 	lds	r24, 0x03DB
    37f4:	90 91 dc 03 	lds	r25, 0x03DC
    37f8:	a0 91 dd 03 	lds	r26, 0x03DD
    37fc:	b0 91 de 03 	lds	r27, 0x03DE
    3800:	82 0f       	add	r24, r18
    3802:	93 1f       	adc	r25, r19
    3804:	a4 1f       	adc	r26, r20
    3806:	b5 1f       	adc	r27, r21
    3808:	80 93 db 03 	sts	0x03DB, r24
    380c:	90 93 dc 03 	sts	0x03DC, r25
    3810:	a0 93 dd 03 	sts	0x03DD, r26
    3814:	b0 93 de 03 	sts	0x03DE, r27
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}

		if(robotPosition == HORIZONTAL_POS) {
    3818:	80 91 17 02 	lds	r24, 0x0217
    381c:	81 30       	cpi	r24, 0x01	; 1
    381e:	09 f4       	brne	.+2      	; 0x3822 <handleMotorsWithSpeedController+0xb2>
    3820:	ce c0       	rjmp	.+412    	; 0x39be <handleMotorsWithSpeedController+0x24e>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    3822:	85 e0       	ldi	r24, 0x05	; 5
    3824:	94 e0       	ldi	r25, 0x04	; 4
    3826:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    382a:	80 91 05 04 	lds	r24, 0x0405
    382e:	90 91 06 04 	lds	r25, 0x0406
    3832:	90 93 f6 03 	sts	0x03F6, r25
    3836:	80 93 f5 03 	sts	0x03F5, r24

		if(pwm_left > 0) {
    383a:	18 16       	cp	r1, r24
    383c:	19 06       	cpc	r1, r25
    383e:	0c f0       	brlt	.+2      	; 0x3842 <handleMotorsWithSpeedController+0xd2>
    3840:	c3 c0       	rjmp	.+390    	; 0x39c8 <handleMotorsWithSpeedController+0x258>
			OCR4A = (unsigned int)pwm_left;
    3842:	90 93 a9 00 	sts	0x00A9, r25
    3846:	80 93 a8 00 	sts	0x00A8, r24
			OCR4B = 0;
		}

	}

	if(compute_right_vel) {
    384a:	80 91 08 02 	lds	r24, 0x0208
    384e:	88 23       	and	r24, r24
    3850:	09 f4       	brne	.+2      	; 0x3854 <handleMotorsWithSpeedController+0xe4>
    3852:	5a c0       	rjmp	.+180    	; 0x3908 <handleMotorsWithSpeedController+0x198>

		last_right_vel = right_vel_sum>>2;
    3854:	20 91 ed 03 	lds	r18, 0x03ED
    3858:	30 91 ee 03 	lds	r19, 0x03EE
    385c:	36 95       	lsr	r19
    385e:	27 95       	ror	r18
    3860:	36 95       	lsr	r19
    3862:	27 95       	ror	r18
    3864:	30 93 f2 03 	sts	0x03F2, r19
    3868:	20 93 f1 03 	sts	0x03F1, r18
		compute_right_vel = 0;
    386c:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    3870:	10 92 ee 03 	sts	0x03EE, r1
    3874:	10 92 ed 03 	sts	0x03ED, r1

		if(pwm_right_desired_to_control >= 0) {
    3878:	80 91 e7 03 	lds	r24, 0x03E7
    387c:	90 91 e8 03 	lds	r25, 0x03E8
    3880:	97 fd       	sbrc	r25, 7
    3882:	52 c0       	rjmp	.+164    	; 0x3928 <handleMotorsWithSpeedController+0x1b8>
			rightMotSteps += (last_right_vel>>3);
    3884:	35 95       	asr	r19
    3886:	27 95       	ror	r18
    3888:	35 95       	asr	r19
    388a:	27 95       	ror	r18
    388c:	35 95       	asr	r19
    388e:	27 95       	ror	r18
    3890:	44 27       	eor	r20, r20
    3892:	37 fd       	sbrc	r19, 7
    3894:	40 95       	com	r20
    3896:	54 2f       	mov	r21, r20
    3898:	80 91 d7 03 	lds	r24, 0x03D7
    389c:	90 91 d8 03 	lds	r25, 0x03D8
    38a0:	a0 91 d9 03 	lds	r26, 0x03D9
    38a4:	b0 91 da 03 	lds	r27, 0x03DA
    38a8:	82 0f       	add	r24, r18
    38aa:	93 1f       	adc	r25, r19
    38ac:	a4 1f       	adc	r26, r20
    38ae:	b5 1f       	adc	r27, r21
    38b0:	80 93 d7 03 	sts	0x03D7, r24
    38b4:	90 93 d8 03 	sts	0x03D8, r25
    38b8:	a0 93 d9 03 	sts	0x03D9, r26
    38bc:	b0 93 da 03 	sts	0x03DA, r27
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}

		if(robotPosition == HORIZONTAL_POS) {
    38c0:	80 91 17 02 	lds	r24, 0x0217
    38c4:	81 30       	cpi	r24, 0x01	; 1
    38c6:	09 f4       	brne	.+2      	; 0x38ca <handleMotorsWithSpeedController+0x15a>
    38c8:	52 c0       	rjmp	.+164    	; 0x396e <handleMotorsWithSpeedController+0x1fe>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    38ca:	83 e0       	ldi	r24, 0x03	; 3
    38cc:	94 e0       	ldi	r25, 0x04	; 4
    38ce:	0e 94 38 11 	call	0x2270	; 0x2270 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    38d2:	80 91 03 04 	lds	r24, 0x0403
    38d6:	90 91 04 04 	lds	r25, 0x0404
    38da:	90 93 f4 03 	sts	0x03F4, r25
    38de:	80 93 f3 03 	sts	0x03F3, r24

		if(pwm_right > 0) {
    38e2:	18 16       	cp	r1, r24
    38e4:	19 06       	cpc	r1, r25
    38e6:	2c f4       	brge	.+10     	; 0x38f2 <handleMotorsWithSpeedController+0x182>
			OCR3A = (unsigned int)pwm_right;
    38e8:	90 93 99 00 	sts	0x0099, r25
    38ec:	80 93 98 00 	sts	0x0098, r24
    38f0:	08 95       	ret
		} else if(pwm_right < 0) {
    38f2:	00 97       	sbiw	r24, 0x00	; 0
    38f4:	09 f0       	breq	.+2      	; 0x38f8 <handleMotorsWithSpeedController+0x188>
    38f6:	73 c0       	rjmp	.+230    	; 0x39de <handleMotorsWithSpeedController+0x26e>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    38f8:	10 92 99 00 	sts	0x0099, r1
    38fc:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    3900:	10 92 9b 00 	sts	0x009B, r1
    3904:	10 92 9a 00 	sts	0x009A, r1
    3908:	08 95       	ret
void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
	pwm_right_working = pwm_right_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    390a:	85 e0       	ldi	r24, 0x05	; 5
    390c:	94 e0       	ldi	r25, 0x04	; 4
    390e:	63 e0       	ldi	r22, 0x03	; 3
    3910:	74 e0       	ldi	r23, 0x04	; 4
    3912:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <obstacleAvoidance>
    3916:	80 91 05 04 	lds	r24, 0x0405
    391a:	90 91 06 04 	lds	r25, 0x0406
    391e:	20 91 03 04 	lds	r18, 0x0403
    3922:	30 91 04 04 	lds	r19, 0x0404
    3926:	39 cf       	rjmp	.-398    	; 0x379a <handleMotorsWithSpeedController+0x2a>
		right_vel_sum = 0;

		if(pwm_right_desired_to_control >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    3928:	35 95       	asr	r19
    392a:	27 95       	ror	r18
    392c:	35 95       	asr	r19
    392e:	27 95       	ror	r18
    3930:	35 95       	asr	r19
    3932:	27 95       	ror	r18
    3934:	44 27       	eor	r20, r20
    3936:	37 fd       	sbrc	r19, 7
    3938:	40 95       	com	r20
    393a:	54 2f       	mov	r21, r20
    393c:	80 91 d7 03 	lds	r24, 0x03D7
    3940:	90 91 d8 03 	lds	r25, 0x03D8
    3944:	a0 91 d9 03 	lds	r26, 0x03D9
    3948:	b0 91 da 03 	lds	r27, 0x03DA
    394c:	82 1b       	sub	r24, r18
    394e:	93 0b       	sbc	r25, r19
    3950:	a4 0b       	sbc	r26, r20
    3952:	b5 0b       	sbc	r27, r21
    3954:	80 93 d7 03 	sts	0x03D7, r24
    3958:	90 93 d8 03 	sts	0x03D8, r25
    395c:	a0 93 d9 03 	sts	0x03D9, r26
    3960:	b0 93 da 03 	sts	0x03DA, r27
		}

		if(robotPosition == HORIZONTAL_POS) {
    3964:	80 91 17 02 	lds	r24, 0x0217
    3968:	81 30       	cpi	r24, 0x01	; 1
    396a:	09 f0       	breq	.+2      	; 0x396e <handleMotorsWithSpeedController+0x1fe>
    396c:	ae cf       	rjmp	.-164    	; 0x38ca <handleMotorsWithSpeedController+0x15a>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    396e:	83 e0       	ldi	r24, 0x03	; 3
    3970:	94 e0       	ldi	r25, 0x04	; 4
    3972:	0e 94 7d 12 	call	0x24fa	; 0x24fa <start_horizontal_speed_control_right>
    3976:	ad cf       	rjmp	.-166    	; 0x38d2 <handleMotorsWithSpeedController+0x162>
		left_vel_sum = 0;

		if(pwm_left_desired_to_control >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    3978:	35 95       	asr	r19
    397a:	27 95       	ror	r18
    397c:	35 95       	asr	r19
    397e:	27 95       	ror	r18
    3980:	35 95       	asr	r19
    3982:	27 95       	ror	r18
    3984:	44 27       	eor	r20, r20
    3986:	37 fd       	sbrc	r19, 7
    3988:	40 95       	com	r20
    398a:	54 2f       	mov	r21, r20
    398c:	80 91 db 03 	lds	r24, 0x03DB
    3990:	90 91 dc 03 	lds	r25, 0x03DC
    3994:	a0 91 dd 03 	lds	r26, 0x03DD
    3998:	b0 91 de 03 	lds	r27, 0x03DE
    399c:	82 1b       	sub	r24, r18
    399e:	93 0b       	sbc	r25, r19
    39a0:	a4 0b       	sbc	r26, r20
    39a2:	b5 0b       	sbc	r27, r21
    39a4:	80 93 db 03 	sts	0x03DB, r24
    39a8:	90 93 dc 03 	sts	0x03DC, r25
    39ac:	a0 93 dd 03 	sts	0x03DD, r26
    39b0:	b0 93 de 03 	sts	0x03DE, r27
		}

		if(robotPosition == HORIZONTAL_POS) {
    39b4:	80 91 17 02 	lds	r24, 0x0217
    39b8:	81 30       	cpi	r24, 0x01	; 1
    39ba:	09 f0       	breq	.+2      	; 0x39be <handleMotorsWithSpeedController+0x24e>
    39bc:	32 cf       	rjmp	.-412    	; 0x3822 <handleMotorsWithSpeedController+0xb2>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    39be:	85 e0       	ldi	r24, 0x05	; 5
    39c0:	94 e0       	ldi	r25, 0x04	; 4
    39c2:	0e 94 62 13 	call	0x26c4	; 0x26c4 <start_horizontal_speed_control_left>
    39c6:	31 cf       	rjmp	.-414    	; 0x382a <handleMotorsWithSpeedController+0xba>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    39c8:	00 97       	sbiw	r24, 0x00	; 0
    39ca:	89 f4       	brne	.+34     	; 0x39ee <handleMotorsWithSpeedController+0x27e>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    39cc:	10 92 a9 00 	sts	0x00A9, r1
    39d0:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    39d4:	10 92 ab 00 	sts	0x00AB, r1
    39d8:	10 92 aa 00 	sts	0x00AA, r1
    39dc:	36 cf       	rjmp	.-404    	; 0x384a <handleMotorsWithSpeedController+0xda>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    39de:	90 95       	com	r25
    39e0:	81 95       	neg	r24
    39e2:	9f 4f       	sbci	r25, 0xFF	; 255
    39e4:	90 93 9b 00 	sts	0x009B, r25
    39e8:	80 93 9a 00 	sts	0x009A, r24
    39ec:	08 95       	ret
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    39ee:	90 95       	com	r25
    39f0:	81 95       	neg	r24
    39f2:	9f 4f       	sbci	r25, 0xFF	; 255
    39f4:	90 93 ab 00 	sts	0x00AB, r25
    39f8:	80 93 aa 00 	sts	0x00AA, r24
    39fc:	26 cf       	rjmp	.-436    	; 0x384a <handleMotorsWithSpeedController+0xda>

000039fe <setLeftSpeed>:

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    39fe:	28 2f       	mov	r18, r24
    3a00:	33 27       	eor	r19, r19
    3a02:	27 fd       	sbrc	r18, 7
    3a04:	30 95       	com	r19
    3a06:	37 fd       	sbrc	r19, 7
    3a08:	30 c0       	rjmp	.+96     	; 0x3a6a <setLeftSpeed+0x6c>
    3a0a:	30 93 08 04 	sts	0x0408, r19
    3a0e:	20 93 07 04 	sts	0x0407, r18

    if(vel >= 0) {
    3a12:	87 fd       	sbrc	r24, 7
    3a14:	1e c0       	rjmp	.+60     	; 0x3a52 <setLeftSpeed+0x54>
        pwm_left_desired = speedl<<2;
    3a16:	22 0f       	add	r18, r18
    3a18:	33 1f       	adc	r19, r19
    3a1a:	22 0f       	add	r18, r18
    3a1c:	33 1f       	adc	r19, r19
    3a1e:	30 93 fa 03 	sts	0x03FA, r19
    3a22:	20 93 f9 03 	sts	0x03F9, r18
    } else {
        pwm_left_desired = -(speedl<<2);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    3a26:	82 e0       	ldi	r24, 0x02	; 2
    3a28:	21 30       	cpi	r18, 0x01	; 1
    3a2a:	38 07       	cpc	r19, r24
    3a2c:	3c f0       	brlt	.+14     	; 0x3a3c <setLeftSpeed+0x3e>
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
    3a30:	92 e0       	ldi	r25, 0x02	; 2
    3a32:	90 93 fa 03 	sts	0x03FA, r25
    3a36:	80 93 f9 03 	sts	0x03F9, r24
    3a3a:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    3a3c:	8e ef       	ldi	r24, 0xFE	; 254
    3a3e:	20 30       	cpi	r18, 0x00	; 0
    3a40:	38 07       	cpc	r19, r24
    3a42:	34 f4       	brge	.+12     	; 0x3a50 <setLeftSpeed+0x52>
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	9e ef       	ldi	r25, 0xFE	; 254
    3a48:	90 93 fa 03 	sts	0x03FA, r25
    3a4c:	80 93 f9 03 	sts	0x03F9, r24
    3a50:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl<<2;
    } else {
        pwm_left_desired = -(speedl<<2);
    3a52:	22 0f       	add	r18, r18
    3a54:	33 1f       	adc	r19, r19
    3a56:	22 0f       	add	r18, r18
    3a58:	33 1f       	adc	r19, r19
    3a5a:	30 95       	com	r19
    3a5c:	21 95       	neg	r18
    3a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a60:	30 93 fa 03 	sts	0x03FA, r19
    3a64:	20 93 f9 03 	sts	0x03F9, r18
    3a68:	de cf       	rjmp	.-68     	; 0x3a26 <setLeftSpeed+0x28>

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    3a6a:	30 95       	com	r19
    3a6c:	21 95       	neg	r18
    3a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a70:	cc cf       	rjmp	.-104    	; 0x3a0a <setLeftSpeed+0xc>

00003a72 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    3a72:	28 2f       	mov	r18, r24
    3a74:	33 27       	eor	r19, r19
    3a76:	27 fd       	sbrc	r18, 7
    3a78:	30 95       	com	r19
    3a7a:	37 fd       	sbrc	r19, 7
    3a7c:	30 c0       	rjmp	.+96     	; 0x3ade <setRightSpeed+0x6c>
    3a7e:	30 93 0a 04 	sts	0x040A, r19
    3a82:	20 93 09 04 	sts	0x0409, r18

    if(vel >= 0) {
    3a86:	87 fd       	sbrc	r24, 7
    3a88:	1e c0       	rjmp	.+60     	; 0x3ac6 <setRightSpeed+0x54>
        pwm_right_desired = speedr<<2;
    3a8a:	22 0f       	add	r18, r18
    3a8c:	33 1f       	adc	r19, r19
    3a8e:	22 0f       	add	r18, r18
    3a90:	33 1f       	adc	r19, r19
    3a92:	30 93 f8 03 	sts	0x03F8, r19
    3a96:	20 93 f7 03 	sts	0x03F7, r18
    } else {
        pwm_right_desired = -(speedr<<2);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    3a9a:	82 e0       	ldi	r24, 0x02	; 2
    3a9c:	21 30       	cpi	r18, 0x01	; 1
    3a9e:	38 07       	cpc	r19, r24
    3aa0:	3c f0       	brlt	.+14     	; 0x3ab0 <setRightSpeed+0x3e>
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	92 e0       	ldi	r25, 0x02	; 2
    3aa6:	90 93 f8 03 	sts	0x03F8, r25
    3aaa:	80 93 f7 03 	sts	0x03F7, r24
    3aae:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    3ab0:	8e ef       	ldi	r24, 0xFE	; 254
    3ab2:	20 30       	cpi	r18, 0x00	; 0
    3ab4:	38 07       	cpc	r19, r24
    3ab6:	34 f4       	brge	.+12     	; 0x3ac4 <setRightSpeed+0x52>
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	9e ef       	ldi	r25, 0xFE	; 254
    3abc:	90 93 f8 03 	sts	0x03F8, r25
    3ac0:	80 93 f7 03 	sts	0x03F7, r24
    3ac4:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr<<2;
    } else {
        pwm_right_desired = -(speedr<<2);
    3ac6:	22 0f       	add	r18, r18
    3ac8:	33 1f       	adc	r19, r19
    3aca:	22 0f       	add	r18, r18
    3acc:	33 1f       	adc	r19, r19
    3ace:	30 95       	com	r19
    3ad0:	21 95       	neg	r18
    3ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad4:	30 93 f8 03 	sts	0x03F8, r19
    3ad8:	20 93 f7 03 	sts	0x03F7, r18
    3adc:	de cf       	rjmp	.-68     	; 0x3a9a <setRightSpeed+0x28>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    3ade:	30 95       	com	r19
    3ae0:	21 95       	neg	r18
    3ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae4:	cc cf       	rjmp	.-104    	; 0x3a7e <setRightSpeed+0xc>

00003ae6 <__vector_45>:
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);

}

// Motor left
ISR(TIMER4_OVF_vect) {
    3ae6:	1f 92       	push	r1
    3ae8:	0f 92       	push	r0
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	0f 92       	push	r0
    3aee:	11 24       	eor	r1, r1
    3af0:	8f 93       	push	r24
    3af2:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    3af4:	80 91 51 05 	lds	r24, 0x0551
    3af8:	88 23       	and	r24, r24
    3afa:	61 f0       	breq	.+24     	; 0x3b14 <__vector_45+0x2e>
		pwm_left = 0;
    3afc:	10 92 f6 03 	sts	0x03F6, r1
    3b00:	10 92 f5 03 	sts	0x03F5, r1
		OCR4A = 0;
    3b04:	10 92 a9 00 	sts	0x00A9, r1
    3b08:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    3b0c:	10 92 ab 00 	sts	0x00AB, r1
    3b10:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    3b14:	10 92 e0 03 	sts	0x03E0, r1
    3b18:	10 92 df 03 	sts	0x03DF, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    3b1c:	80 91 f5 03 	lds	r24, 0x03F5
    3b20:	90 91 f6 03 	lds	r25, 0x03F6
    3b24:	00 97       	sbiw	r24, 0x00	; 0
    3b26:	41 f5       	brne	.+80     	; 0x3b78 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    3b28:	80 91 e9 03 	lds	r24, 0x03E9
    3b2c:	90 91 ea 03 	lds	r25, 0x03EA
    3b30:	97 fd       	sbrc	r25, 7
    3b32:	69 c0       	rjmp	.+210    	; 0x3c06 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 14;
    3b3a:	8e e0       	ldi	r24, 0x0E	; 14
    3b3c:	80 93 2b 03 	sts	0x032B, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3b46:	80 91 a0 00 	lds	r24, 0x00A0
    3b4a:	8f 75       	andi	r24, 0x5F	; 95
    3b4c:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3b50:	80 91 02 01 	lds	r24, 0x0102
    3b54:	87 7e       	andi	r24, 0xE7	; 231
    3b56:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    3b5a:	80 91 72 00 	lds	r24, 0x0072
    3b5e:	89 7f       	andi	r24, 0xF9	; 249
    3b60:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    3b64:	89 b3       	in	r24, 0x19	; 25
    3b66:	86 60       	ori	r24, 0x06	; 6
    3b68:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    3b6a:	9f 91       	pop	r25
    3b6c:	8f 91       	pop	r24
    3b6e:	0f 90       	pop	r0
    3b70:	0f be       	out	0x3f, r0	; 63
    3b72:	0f 90       	pop	r0
    3b74:	1f 90       	pop	r1
    3b76:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    3b78:	18 16       	cp	r1, r24
    3b7a:	19 06       	cpc	r1, r25
    3b7c:	2c f5       	brge	.+74     	; 0x3bc8 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    3b7e:	10 92 2e 03 	sts	0x032E, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    3b82:	8f e0       	ldi	r24, 0x0F	; 15
    3b84:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    3b88:	80 91 a0 00 	lds	r24, 0x00A0
    3b8c:	8f 7d       	andi	r24, 0xDF	; 223
    3b8e:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    3b92:	80 91 72 00 	lds	r24, 0x0072
    3b96:	8b 7f       	andi	r24, 0xFB	; 251
    3b98:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    3b9c:	80 91 02 01 	lds	r24, 0x0102
    3ba0:	8f 7e       	andi	r24, 0xEF	; 239
    3ba2:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    3ba6:	80 91 a0 00 	lds	r24, 0x00A0
    3baa:	80 68       	ori	r24, 0x80	; 128
    3bac:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    3bb0:	80 91 72 00 	lds	r24, 0x0072
    3bb4:	82 60       	ori	r24, 0x02	; 2
    3bb6:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    3bba:	9f 91       	pop	r25
    3bbc:	8f 91       	pop	r24
    3bbe:	0f 90       	pop	r0
    3bc0:	0f be       	out	0x3f, r0	; 63
    3bc2:	0f 90       	pop	r0
    3bc4:	1f 90       	pop	r1
    3bc6:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    3bc8:	10 92 2e 03 	sts	0x032E, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    3bcc:	8e e0       	ldi	r24, 0x0E	; 14
    3bce:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    3bd2:	80 91 a0 00 	lds	r24, 0x00A0
    3bd6:	8f 77       	andi	r24, 0x7F	; 127
    3bd8:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    3bdc:	80 91 72 00 	lds	r24, 0x0072
    3be0:	8d 7f       	andi	r24, 0xFD	; 253
    3be2:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    3be6:	80 91 02 01 	lds	r24, 0x0102
    3bea:	87 7f       	andi	r24, 0xF7	; 247
    3bec:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    3bf0:	80 91 a0 00 	lds	r24, 0x00A0
    3bf4:	80 62       	ori	r24, 0x20	; 32
    3bf6:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    3bfa:	80 91 72 00 	lds	r24, 0x0072
    3bfe:	84 60       	ori	r24, 0x04	; 4
    3c00:	80 93 72 00 	sts	0x0072, r24
    3c04:	b2 cf       	rjmp	.-156    	; 0x3b6a <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 15;
    3c0c:	8f e0       	ldi	r24, 0x0F	; 15
    3c0e:	80 93 2b 03 	sts	0x032B, r24
    3c12:	96 cf       	rjmp	.-212    	; 0x3b40 <__vector_45+0x5a>

00003c14 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    3c14:	1f 92       	push	r1
    3c16:	0f 92       	push	r0
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	0f 92       	push	r0
    3c1c:	11 24       	eor	r1, r1
    3c1e:	8f 93       	push	r24
    3c20:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	80 93 2e 03 	sts	0x032E, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    3c28:	9e e0       	ldi	r25, 0x0E	; 14
    3c2a:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    3c2e:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    3c32:	9f 91       	pop	r25
    3c34:	8f 91       	pop	r24
    3c36:	0f 90       	pop	r0
    3c38:	0f be       	out	0x3f, r0	; 63
    3c3a:	0f 90       	pop	r0
    3c3c:	1f 90       	pop	r1
    3c3e:	18 95       	reti

00003c40 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    3c40:	1f 92       	push	r1
    3c42:	0f 92       	push	r0
    3c44:	0f b6       	in	r0, 0x3f	; 63
    3c46:	0f 92       	push	r0
    3c48:	11 24       	eor	r1, r1
    3c4a:	8f 93       	push	r24
    3c4c:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	80 93 2e 03 	sts	0x032E, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    3c54:	9f e0       	ldi	r25, 0x0F	; 15
    3c56:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    3c5a:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    3c5e:	9f 91       	pop	r25
    3c60:	8f 91       	pop	r24
    3c62:	0f 90       	pop	r0
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	0f 90       	pop	r0
    3c68:	1f 90       	pop	r1
    3c6a:	18 95       	reti

00003c6c <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    3c6c:	1f 92       	push	r1
    3c6e:	0f 92       	push	r0
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	0f 92       	push	r0
    3c74:	11 24       	eor	r1, r1
    3c76:	8f 93       	push	r24
    3c78:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    3c7a:	80 91 51 05 	lds	r24, 0x0551
    3c7e:	88 23       	and	r24, r24
    3c80:	61 f0       	breq	.+24     	; 0x3c9a <__vector_35+0x2e>
		pwm_right = 0;
    3c82:	10 92 f4 03 	sts	0x03F4, r1
    3c86:	10 92 f3 03 	sts	0x03F3, r1
		OCR3A = 0;
    3c8a:	10 92 99 00 	sts	0x0099, r1
    3c8e:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    3c92:	10 92 9b 00 	sts	0x009B, r1
    3c96:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    3c9a:	10 92 e2 03 	sts	0x03E2, r1
    3c9e:	10 92 e1 03 	sts	0x03E1, r1


	if(pwm_right == 0) {
    3ca2:	80 91 f3 03 	lds	r24, 0x03F3
    3ca6:	90 91 f4 03 	lds	r25, 0x03F4
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	31 f5       	brne	.+76     	; 0x3cfa <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    3cae:	80 91 e7 03 	lds	r24, 0x03E7
    3cb2:	90 91 e8 03 	lds	r25, 0x03E8
    3cb6:	97 fd       	sbrc	r25, 7
    3cb8:	5f c0       	rjmp	.+190    	; 0x3d78 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	80 93 2d 03 	sts	0x032D, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    3cc0:	8c e0       	ldi	r24, 0x0C	; 12
    3cc2:	80 93 2c 03 	sts	0x032C, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3ccc:	80 91 90 00 	lds	r24, 0x0090
    3cd0:	8f 75       	andi	r24, 0x5F	; 95
    3cd2:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3cd6:	8e b1       	in	r24, 0x0e	; 14
    3cd8:	87 7e       	andi	r24, 0xE7	; 231
    3cda:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    3cdc:	80 91 71 00 	lds	r24, 0x0071
    3ce0:	89 7f       	andi	r24, 0xF9	; 249
    3ce2:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    3ce6:	88 b3       	in	r24, 0x18	; 24
    3ce8:	86 60       	ori	r24, 0x06	; 6
    3cea:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    3cec:	9f 91       	pop	r25
    3cee:	8f 91       	pop	r24
    3cf0:	0f 90       	pop	r0
    3cf2:	0f be       	out	0x3f, r0	; 63
    3cf4:	0f 90       	pop	r0
    3cf6:	1f 90       	pop	r1
    3cf8:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    3cfa:	18 16       	cp	r1, r24
    3cfc:	19 06       	cpc	r1, r25
    3cfe:	0c f5       	brge	.+66     	; 0x3d42 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    3d00:	10 92 2d 03 	sts	0x032D, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    3d04:	8d e0       	ldi	r24, 0x0D	; 13
    3d06:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    3d0a:	80 91 90 00 	lds	r24, 0x0090
    3d0e:	8f 7d       	andi	r24, 0xDF	; 223
    3d10:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    3d14:	80 91 71 00 	lds	r24, 0x0071
    3d18:	8b 7f       	andi	r24, 0xFB	; 251
    3d1a:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    3d1e:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    3d20:	80 91 90 00 	lds	r24, 0x0090
    3d24:	80 68       	ori	r24, 0x80	; 128
    3d26:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    3d2a:	80 91 71 00 	lds	r24, 0x0071
    3d2e:	82 60       	ori	r24, 0x02	; 2
    3d30:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    3d34:	9f 91       	pop	r25
    3d36:	8f 91       	pop	r24
    3d38:	0f 90       	pop	r0
    3d3a:	0f be       	out	0x3f, r0	; 63
    3d3c:	0f 90       	pop	r0
    3d3e:	1f 90       	pop	r1
    3d40:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    3d42:	10 92 2d 03 	sts	0x032D, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    3d46:	8c e0       	ldi	r24, 0x0C	; 12
    3d48:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    3d4c:	80 91 90 00 	lds	r24, 0x0090
    3d50:	8f 77       	andi	r24, 0x7F	; 127
    3d52:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    3d56:	80 91 71 00 	lds	r24, 0x0071
    3d5a:	8d 7f       	andi	r24, 0xFD	; 253
    3d5c:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    3d60:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    3d62:	80 91 90 00 	lds	r24, 0x0090
    3d66:	80 62       	ori	r24, 0x20	; 32
    3d68:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    3d6c:	80 91 71 00 	lds	r24, 0x0071
    3d70:	84 60       	ori	r24, 0x04	; 4
    3d72:	80 93 71 00 	sts	0x0071, r24
    3d76:	ba cf       	rjmp	.-140    	; 0x3cec <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	80 93 2d 03 	sts	0x032D, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    3d7e:	8d e0       	ldi	r24, 0x0D	; 13
    3d80:	80 93 2c 03 	sts	0x032C, r24
    3d84:	a0 cf       	rjmp	.-192    	; 0x3cc6 <__vector_35+0x5a>

00003d86 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    3d86:	1f 92       	push	r1
    3d88:	0f 92       	push	r0
    3d8a:	0f b6       	in	r0, 0x3f	; 63
    3d8c:	0f 92       	push	r0
    3d8e:	11 24       	eor	r1, r1
    3d90:	8f 93       	push	r24
    3d92:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	80 93 2d 03 	sts	0x032D, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    3d9a:	9c e0       	ldi	r25, 0x0C	; 12
    3d9c:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    3da0:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    3da4:	9f 91       	pop	r25
    3da6:	8f 91       	pop	r24
    3da8:	0f 90       	pop	r0
    3daa:	0f be       	out	0x3f, r0	; 63
    3dac:	0f 90       	pop	r0
    3dae:	1f 90       	pop	r1
    3db0:	18 95       	reti

00003db2 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    3db2:	1f 92       	push	r1
    3db4:	0f 92       	push	r0
    3db6:	0f b6       	in	r0, 0x3f	; 63
    3db8:	0f 92       	push	r0
    3dba:	11 24       	eor	r1, r1
    3dbc:	8f 93       	push	r24
    3dbe:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	80 93 2d 03 	sts	0x032D, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    3dc6:	9d e0       	ldi	r25, 0x0D	; 13
    3dc8:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    3dcc:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    3dd0:	9f 91       	pop	r25
    3dd2:	8f 91       	pop	r24
    3dd4:	0f 90       	pop	r0
    3dd6:	0f be       	out	0x3f, r0	; 63
    3dd8:	0f 90       	pop	r0
    3dda:	1f 90       	pop	r1
    3ddc:	18 95       	reti

00003dde <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    3dde:	80 91 94 00 	lds	r24, 0x0094
    3de2:	90 91 95 00 	lds	r25, 0x0095
    3de6:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <srand>

}
    3dea:	08 95       	ret

00003dec <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    3dec:	2f 92       	push	r2
    3dee:	3f 92       	push	r3
    3df0:	4f 92       	push	r4
    3df2:	5f 92       	push	r5
    3df4:	6f 92       	push	r6
    3df6:	7f 92       	push	r7
    3df8:	8f 92       	push	r8
    3dfa:	9f 92       	push	r9
    3dfc:	af 92       	push	r10
    3dfe:	bf 92       	push	r11
    3e00:	cf 92       	push	r12
    3e02:	df 92       	push	r13
    3e04:	ef 92       	push	r14
    3e06:	ff 92       	push	r15
    3e08:	0f 93       	push	r16
    3e0a:	1f 93       	push	r17
    3e0c:	df 93       	push	r29
    3e0e:	cf 93       	push	r28
    3e10:	cd b7       	in	r28, 0x3d	; 61
    3e12:	de b7       	in	r29, 0x3e	; 62
    3e14:	28 97       	sbiw	r28, 0x08	; 8
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	f8 94       	cli
    3e1a:	de bf       	out	0x3e, r29	; 62
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	cd bf       	out	0x3d, r28	; 61
    3e20:	2c 01       	movw	r4, r24
    3e22:	7a 83       	std	Y+2, r23	; 0x02
    3e24:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    3e26:	fc 01       	movw	r30, r24
    3e28:	01 90       	ld	r0, Z+
    3e2a:	f0 81       	ld	r31, Z
    3e2c:	e0 2d       	mov	r30, r0
    3e2e:	fc 83       	std	Y+4, r31	; 0x04
    3e30:	eb 83       	std	Y+3, r30	; 0x03
    3e32:	fb 01       	movw	r30, r22
    3e34:	01 90       	ld	r0, Z+
    3e36:	f0 81       	ld	r31, Z
    3e38:	e0 2d       	mov	r30, r0
    3e3a:	fe 83       	std	Y+6, r31	; 0x06
    3e3c:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3e3e:	60 91 c7 03 	lds	r22, 0x03C7
    3e42:	70 91 c8 03 	lds	r23, 0x03C8
    3e46:	65 30       	cpi	r22, 0x05	; 5
    3e48:	71 05       	cpc	r23, r1
    3e4a:	34 f4       	brge	.+12     	; 0x3e58 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    3e4c:	10 92 c8 03 	sts	0x03C8, r1
    3e50:	10 92 c7 03 	sts	0x03C7, r1
    3e54:	60 e0       	ldi	r22, 0x00	; 0
    3e56:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3e58:	40 91 c9 03 	lds	r20, 0x03C9
    3e5c:	50 91 ca 03 	lds	r21, 0x03CA
    3e60:	45 30       	cpi	r20, 0x05	; 5
    3e62:	51 05       	cpc	r21, r1
    3e64:	34 f4       	brge	.+12     	; 0x3e72 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    3e66:	10 92 ca 03 	sts	0x03CA, r1
    3e6a:	10 92 c9 03 	sts	0x03C9, r1
    3e6e:	40 e0       	ldi	r20, 0x00	; 0
    3e70:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3e72:	80 91 cb 03 	lds	r24, 0x03CB
    3e76:	90 91 cc 03 	lds	r25, 0x03CC
    3e7a:	85 30       	cpi	r24, 0x05	; 5
    3e7c:	91 05       	cpc	r25, r1
    3e7e:	24 f4       	brge	.+8      	; 0x3e88 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    3e80:	10 92 cc 03 	sts	0x03CC, r1
    3e84:	10 92 cb 03 	sts	0x03CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3e88:	00 91 cd 03 	lds	r16, 0x03CD
    3e8c:	10 91 ce 03 	lds	r17, 0x03CE
    3e90:	05 30       	cpi	r16, 0x05	; 5
    3e92:	11 05       	cpc	r17, r1
    3e94:	34 f4       	brge	.+12     	; 0x3ea2 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    3e96:	10 92 ce 03 	sts	0x03CE, r1
    3e9a:	10 92 cd 03 	sts	0x03CD, r1
    3e9e:	00 e0       	ldi	r16, 0x00	; 0
    3ea0:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3ea2:	60 90 cf 03 	lds	r6, 0x03CF
    3ea6:	70 90 d0 03 	lds	r7, 0x03D0
    3eaa:	f5 e0       	ldi	r31, 0x05	; 5
    3eac:	6f 16       	cp	r6, r31
    3eae:	71 04       	cpc	r7, r1
    3eb0:	34 f4       	brge	.+12     	; 0x3ebe <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    3eb2:	10 92 d0 03 	sts	0x03D0, r1
    3eb6:	10 92 cf 03 	sts	0x03CF, r1
    3eba:	66 24       	eor	r6, r6
    3ebc:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3ebe:	20 91 d1 03 	lds	r18, 0x03D1
    3ec2:	30 91 d2 03 	lds	r19, 0x03D2
    3ec6:	25 30       	cpi	r18, 0x05	; 5
    3ec8:	31 05       	cpc	r19, r1
    3eca:	34 f4       	brge	.+12     	; 0x3ed8 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    3ecc:	10 92 d2 03 	sts	0x03D2, r1
    3ed0:	10 92 d1 03 	sts	0x03D1, r1
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3ed8:	80 91 d3 03 	lds	r24, 0x03D3
    3edc:	90 91 d4 03 	lds	r25, 0x03D4
    3ee0:	85 30       	cpi	r24, 0x05	; 5
    3ee2:	91 05       	cpc	r25, r1
    3ee4:	24 f4       	brge	.+8      	; 0x3eee <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    3ee6:	10 92 d4 03 	sts	0x03D4, r1
    3eea:	10 92 d3 03 	sts	0x03D3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3eee:	80 91 d5 03 	lds	r24, 0x03D5
    3ef2:	90 91 d6 03 	lds	r25, 0x03D6
    3ef6:	85 30       	cpi	r24, 0x05	; 5
    3ef8:	91 05       	cpc	r25, r1
    3efa:	34 f4       	brge	.+12     	; 0x3f08 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    3efc:	10 92 d6 03 	sts	0x03D6, r1
    3f00:	10 92 d5 03 	sts	0x03D5, r1
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    3f08:	ee 24       	eor	r14, r14
    3f0a:	ff 24       	eor	r15, r15
    3f0c:	e6 1a       	sub	r14, r22
    3f0e:	f7 0a       	sbc	r15, r23
    3f10:	5a 01       	movw	r10, r20
    3f12:	b5 94       	asr	r11
    3f14:	a7 94       	ror	r10
    3f16:	15 95       	asr	r17
    3f18:	07 95       	ror	r16
    3f1a:	69 01       	movw	r12, r18
    3f1c:	d5 94       	asr	r13
    3f1e:	c7 94       	ror	r12
    3f20:	4c 01       	movw	r8, r24
    3f22:	95 94       	asr	r9
    3f24:	87 94       	ror	r8
    3f26:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <rand>
    3f2a:	93 01       	movw	r18, r6
    3f2c:	2e 51       	subi	r18, 0x1E	; 30
    3f2e:	30 40       	sbci	r19, 0x00	; 0
    3f30:	2e 0d       	add	r18, r14
    3f32:	3f 1d       	adc	r19, r15
    3f34:	20 0f       	add	r18, r16
    3f36:	31 1f       	adc	r19, r17
    3f38:	2c 0d       	add	r18, r12
    3f3a:	3d 1d       	adc	r19, r13
    3f3c:	2a 19       	sub	r18, r10
    3f3e:	3b 09       	sbc	r19, r11
    3f40:	28 19       	sub	r18, r8
    3f42:	39 09       	sbc	r19, r9
    3f44:	4c e3       	ldi	r20, 0x3C	; 60
    3f46:	24 2e       	mov	r2, r20
    3f48:	31 2c       	mov	r3, r1
    3f4a:	b1 01       	movw	r22, r2
    3f4c:	0e 94 a4 2c 	call	0x5948	; 0x5948 <__divmodhi4>
    3f50:	28 0f       	add	r18, r24
    3f52:	39 1f       	adc	r19, r25
    3f54:	38 87       	std	Y+8, r19	; 0x08
    3f56:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    3f58:	e0 90 c9 03 	lds	r14, 0x03C9
    3f5c:	f0 90 ca 03 	lds	r15, 0x03CA
    3f60:	f5 94       	asr	r15
    3f62:	e7 94       	ror	r14
    3f64:	00 91 cb 03 	lds	r16, 0x03CB
    3f68:	10 91 cc 03 	lds	r17, 0x03CC
    3f6c:	15 95       	asr	r17
    3f6e:	07 95       	ror	r16
    3f70:	15 95       	asr	r17
    3f72:	07 95       	ror	r16
    3f74:	c0 90 cd 03 	lds	r12, 0x03CD
    3f78:	d0 90 ce 03 	lds	r13, 0x03CE
    3f7c:	d5 94       	asr	r13
    3f7e:	c7 94       	ror	r12
    3f80:	80 90 d1 03 	lds	r8, 0x03D1
    3f84:	90 90 d2 03 	lds	r9, 0x03D2
    3f88:	95 94       	asr	r9
    3f8a:	87 94       	ror	r8
    3f8c:	60 90 d3 03 	lds	r6, 0x03D3
    3f90:	70 90 d4 03 	lds	r7, 0x03D4
    3f94:	75 94       	asr	r7
    3f96:	67 94       	ror	r6
    3f98:	75 94       	asr	r7
    3f9a:	67 94       	ror	r6
    3f9c:	a0 90 d5 03 	lds	r10, 0x03D5
    3fa0:	b0 90 d6 03 	lds	r11, 0x03D6
    3fa4:	b5 94       	asr	r11
    3fa6:	a7 94       	ror	r10
    3fa8:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <rand>
    3fac:	97 01       	movw	r18, r14
    3fae:	20 0f       	add	r18, r16
    3fb0:	31 1f       	adc	r19, r17
    3fb2:	2e 51       	subi	r18, 0x1E	; 30
    3fb4:	30 40       	sbci	r19, 0x00	; 0
    3fb6:	2c 0d       	add	r18, r12
    3fb8:	3d 1d       	adc	r19, r13
    3fba:	2a 19       	sub	r18, r10
    3fbc:	3b 09       	sbc	r19, r11
    3fbe:	28 19       	sub	r18, r8
    3fc0:	39 09       	sbc	r19, r9
    3fc2:	26 19       	sub	r18, r6
    3fc4:	37 09       	sbc	r19, r7
    3fc6:	b1 01       	movw	r22, r2
    3fc8:	0e 94 a4 2c 	call	0x5948	; 0x5948 <__divmodhi4>
    3fcc:	28 0f       	add	r18, r24
    3fce:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    3fd0:	4b 81       	ldd	r20, Y+3	; 0x03
    3fd2:	5c 81       	ldd	r21, Y+4	; 0x04
    3fd4:	57 fd       	sbrc	r21, 7
    3fd6:	97 c0       	rjmp	.+302    	; 0x4106 <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    3fd8:	5a 01       	movw	r10, r20
    3fda:	cc 24       	eor	r12, r12
    3fdc:	b7 fc       	sbrc	r11, 7
    3fde:	c0 94       	com	r12
    3fe0:	dc 2c       	mov	r13, r12
    3fe2:	8f 81       	ldd	r24, Y+7	; 0x07
    3fe4:	98 85       	ldd	r25, Y+8	; 0x08
    3fe6:	3c 01       	movw	r6, r24
    3fe8:	88 24       	eor	r8, r8
    3fea:	77 fc       	sbrc	r7, 7
    3fec:	80 94       	com	r8
    3fee:	98 2c       	mov	r9, r8
    3ff0:	79 01       	movw	r14, r18
    3ff2:	00 27       	eor	r16, r16
    3ff4:	f7 fc       	sbrc	r15, 7
    3ff6:	00 95       	com	r16
    3ff8:	10 2f       	mov	r17, r16
    3ffa:	c4 01       	movw	r24, r8
    3ffc:	b3 01       	movw	r22, r6
    3ffe:	6e 19       	sub	r22, r14
    4000:	7f 09       	sbc	r23, r15
    4002:	80 0b       	sbc	r24, r16
    4004:	91 0b       	sbc	r25, r17
    4006:	a6 01       	movw	r20, r12
    4008:	95 01       	movw	r18, r10
    400a:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__mulsi3>
    400e:	f7 e0       	ldi	r31, 0x07	; 7
    4010:	95 95       	asr	r25
    4012:	87 95       	ror	r24
    4014:	77 95       	ror	r23
    4016:	67 95       	ror	r22
    4018:	fa 95       	dec	r31
    401a:	d1 f7       	brne	.-12     	; 0x4010 <obstacleAvoidance+0x224>
    401c:	6a 0d       	add	r22, r10
    401e:	7b 1d       	adc	r23, r11
    4020:	8c 1d       	adc	r24, r12
    4022:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    4024:	f2 01       	movw	r30, r4
    4026:	71 83       	std	Z+1, r23	; 0x01
    4028:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    402a:	2d 81       	ldd	r18, Y+5	; 0x05
    402c:	3e 81       	ldd	r19, Y+6	; 0x06
    402e:	37 fd       	sbrc	r19, 7
    4030:	99 c0       	rjmp	.+306    	; 0x4164 <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    4032:	59 01       	movw	r10, r18
    4034:	cc 24       	eor	r12, r12
    4036:	b7 fc       	sbrc	r11, 7
    4038:	c0 94       	com	r12
    403a:	dc 2c       	mov	r13, r12
    403c:	c8 01       	movw	r24, r16
    403e:	b7 01       	movw	r22, r14
    4040:	66 0d       	add	r22, r6
    4042:	77 1d       	adc	r23, r7
    4044:	88 1d       	adc	r24, r8
    4046:	99 1d       	adc	r25, r9
    4048:	a6 01       	movw	r20, r12
    404a:	95 01       	movw	r18, r10
    404c:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__mulsi3>
    4050:	37 e0       	ldi	r19, 0x07	; 7
    4052:	95 95       	asr	r25
    4054:	87 95       	ror	r24
    4056:	77 95       	ror	r23
    4058:	67 95       	ror	r22
    405a:	3a 95       	dec	r19
    405c:	d1 f7       	brne	.-12     	; 0x4052 <obstacleAvoidance+0x266>
    405e:	6a 0d       	add	r22, r10
    4060:	7b 1d       	adc	r23, r11
    4062:	8c 1d       	adc	r24, r12
    4064:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    4066:	9b 01       	movw	r18, r22
    4068:	e9 81       	ldd	r30, Y+1	; 0x01
    406a:	fa 81       	ldd	r31, Y+2	; 0x02
    406c:	71 83       	std	Z+1, r23	; 0x01
    406e:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    4070:	f2 e0       	ldi	r31, 0x02	; 2
    4072:	21 30       	cpi	r18, 0x01	; 1
    4074:	3f 07       	cpc	r19, r31
    4076:	44 f0       	brlt	.+16     	; 0x4088 <obstacleAvoidance+0x29c>
    4078:	80 e0       	ldi	r24, 0x00	; 0
    407a:	92 e0       	ldi	r25, 0x02	; 2
    407c:	e9 81       	ldd	r30, Y+1	; 0x01
    407e:	fa 81       	ldd	r31, Y+2	; 0x02
    4080:	91 83       	std	Z+1, r25	; 0x01
    4082:	80 83       	st	Z, r24
    4084:	20 e0       	ldi	r18, 0x00	; 0
    4086:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    4088:	f2 01       	movw	r30, r4
    408a:	80 81       	ld	r24, Z
    408c:	91 81       	ldd	r25, Z+1	; 0x01
    408e:	f2 e0       	ldi	r31, 0x02	; 2
    4090:	81 30       	cpi	r24, 0x01	; 1
    4092:	9f 07       	cpc	r25, r31
    4094:	4c f0       	brlt	.+18     	; 0x40a8 <obstacleAvoidance+0x2bc>
    4096:	80 e0       	ldi	r24, 0x00	; 0
    4098:	92 e0       	ldi	r25, 0x02	; 2
    409a:	f2 01       	movw	r30, r4
    409c:	91 83       	std	Z+1, r25	; 0x01
    409e:	80 83       	st	Z, r24
    40a0:	e9 81       	ldd	r30, Y+1	; 0x01
    40a2:	fa 81       	ldd	r31, Y+2	; 0x02
    40a4:	20 81       	ld	r18, Z
    40a6:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    40a8:	fe ef       	ldi	r31, 0xFE	; 254
    40aa:	20 30       	cpi	r18, 0x00	; 0
    40ac:	3f 07       	cpc	r19, r31
    40ae:	4c f4       	brge	.+18     	; 0x40c2 <obstacleAvoidance+0x2d6>
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	9e ef       	ldi	r25, 0xFE	; 254
    40b4:	e9 81       	ldd	r30, Y+1	; 0x01
    40b6:	fa 81       	ldd	r31, Y+2	; 0x02
    40b8:	91 83       	std	Z+1, r25	; 0x01
    40ba:	80 83       	st	Z, r24
    40bc:	f2 01       	movw	r30, r4
    40be:	80 81       	ld	r24, Z
    40c0:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    40c2:	fe ef       	ldi	r31, 0xFE	; 254
    40c4:	80 30       	cpi	r24, 0x00	; 0
    40c6:	9f 07       	cpc	r25, r31
    40c8:	2c f4       	brge	.+10     	; 0x40d4 <obstacleAvoidance+0x2e8>
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	9e ef       	ldi	r25, 0xFE	; 254
    40ce:	f2 01       	movw	r30, r4
    40d0:	91 83       	std	Z+1, r25	; 0x01
    40d2:	80 83       	st	Z, r24

}
    40d4:	28 96       	adiw	r28, 0x08	; 8
    40d6:	0f b6       	in	r0, 0x3f	; 63
    40d8:	f8 94       	cli
    40da:	de bf       	out	0x3e, r29	; 62
    40dc:	0f be       	out	0x3f, r0	; 63
    40de:	cd bf       	out	0x3d, r28	; 61
    40e0:	cf 91       	pop	r28
    40e2:	df 91       	pop	r29
    40e4:	1f 91       	pop	r17
    40e6:	0f 91       	pop	r16
    40e8:	ff 90       	pop	r15
    40ea:	ef 90       	pop	r14
    40ec:	df 90       	pop	r13
    40ee:	cf 90       	pop	r12
    40f0:	bf 90       	pop	r11
    40f2:	af 90       	pop	r10
    40f4:	9f 90       	pop	r9
    40f6:	8f 90       	pop	r8
    40f8:	7f 90       	pop	r7
    40fa:	6f 90       	pop	r6
    40fc:	5f 90       	pop	r5
    40fe:	4f 90       	pop	r4
    4100:	3f 90       	pop	r3
    4102:	2f 90       	pop	r2
    4104:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    4106:	4d 81       	ldd	r20, Y+5	; 0x05
    4108:	5e 81       	ldd	r21, Y+6	; 0x06
    410a:	5a 01       	movw	r10, r20
    410c:	cc 24       	eor	r12, r12
    410e:	b7 fc       	sbrc	r11, 7
    4110:	c0 94       	com	r12
    4112:	dc 2c       	mov	r13, r12
    4114:	8f 81       	ldd	r24, Y+7	; 0x07
    4116:	98 85       	ldd	r25, Y+8	; 0x08
    4118:	3c 01       	movw	r6, r24
    411a:	88 24       	eor	r8, r8
    411c:	77 fc       	sbrc	r7, 7
    411e:	80 94       	com	r8
    4120:	98 2c       	mov	r9, r8
    4122:	79 01       	movw	r14, r18
    4124:	00 27       	eor	r16, r16
    4126:	f7 fc       	sbrc	r15, 7
    4128:	00 95       	com	r16
    412a:	10 2f       	mov	r17, r16
    412c:	c8 01       	movw	r24, r16
    412e:	b7 01       	movw	r22, r14
    4130:	66 0d       	add	r22, r6
    4132:	77 1d       	adc	r23, r7
    4134:	88 1d       	adc	r24, r8
    4136:	99 1d       	adc	r25, r9
    4138:	a6 01       	movw	r20, r12
    413a:	95 01       	movw	r18, r10
    413c:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__mulsi3>
    4140:	e7 e0       	ldi	r30, 0x07	; 7
    4142:	95 95       	asr	r25
    4144:	87 95       	ror	r24
    4146:	77 95       	ror	r23
    4148:	67 95       	ror	r22
    414a:	ea 95       	dec	r30
    414c:	d1 f7       	brne	.-12     	; 0x4142 <obstacleAvoidance+0x356>
    414e:	26 1b       	sub	r18, r22
    4150:	37 0b       	sbc	r19, r23
    4152:	48 0b       	sbc	r20, r24
    4154:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    4156:	f2 01       	movw	r30, r4
    4158:	31 83       	std	Z+1, r19	; 0x01
    415a:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    415c:	2d 81       	ldd	r18, Y+5	; 0x05
    415e:	3e 81       	ldd	r19, Y+6	; 0x06
    4160:	37 ff       	sbrs	r19, 7
    4162:	67 cf       	rjmp	.-306    	; 0x4032 <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    4164:	2b 81       	ldd	r18, Y+3	; 0x03
    4166:	3c 81       	ldd	r19, Y+4	; 0x04
    4168:	59 01       	movw	r10, r18
    416a:	cc 24       	eor	r12, r12
    416c:	b7 fc       	sbrc	r11, 7
    416e:	c0 94       	com	r12
    4170:	dc 2c       	mov	r13, r12
    4172:	c4 01       	movw	r24, r8
    4174:	b3 01       	movw	r22, r6
    4176:	6e 19       	sub	r22, r14
    4178:	7f 09       	sbc	r23, r15
    417a:	80 0b       	sbc	r24, r16
    417c:	91 0b       	sbc	r25, r17
    417e:	a6 01       	movw	r20, r12
    4180:	95 01       	movw	r18, r10
    4182:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__mulsi3>
    4186:	27 e0       	ldi	r18, 0x07	; 7
    4188:	95 95       	asr	r25
    418a:	87 95       	ror	r24
    418c:	77 95       	ror	r23
    418e:	67 95       	ror	r22
    4190:	2a 95       	dec	r18
    4192:	d1 f7       	brne	.-12     	; 0x4188 <obstacleAvoidance+0x39c>
    4194:	a6 1a       	sub	r10, r22
    4196:	b7 0a       	sbc	r11, r23
    4198:	c8 0a       	sbc	r12, r24
    419a:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    419c:	95 01       	movw	r18, r10
    419e:	e9 81       	ldd	r30, Y+1	; 0x01
    41a0:	fa 81       	ldd	r31, Y+2	; 0x02
    41a2:	b1 82       	std	Z+1, r11	; 0x01
    41a4:	a0 82       	st	Z, r10
    41a6:	64 cf       	rjmp	.-312    	; 0x4070 <obstacleAvoidance+0x284>

000041a8 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    41a8:	80 91 6f 03 	lds	r24, 0x036F
    41ac:	90 91 70 03 	lds	r25, 0x0370
    41b0:	21 e0       	ldi	r18, 0x01	; 1
    41b2:	84 3a       	cpi	r24, 0xA4	; 164
    41b4:	92 07       	cpc	r25, r18
    41b6:	d4 f0       	brlt	.+52     	; 0x41ec <cliffDetected+0x44>
    41b8:	80 91 71 03 	lds	r24, 0x0371
    41bc:	90 91 72 03 	lds	r25, 0x0372
    41c0:	21 e0       	ldi	r18, 0x01	; 1
    41c2:	84 3a       	cpi	r24, 0xA4	; 164
    41c4:	92 07       	cpc	r25, r18
    41c6:	94 f0       	brlt	.+36     	; 0x41ec <cliffDetected+0x44>
    41c8:	80 91 73 03 	lds	r24, 0x0373
    41cc:	90 91 74 03 	lds	r25, 0x0374
    41d0:	21 e0       	ldi	r18, 0x01	; 1
    41d2:	84 3a       	cpi	r24, 0xA4	; 164
    41d4:	92 07       	cpc	r25, r18
    41d6:	74 f0       	brlt	.+28     	; 0x41f4 <cliffDetected+0x4c>
		return 1;
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	20 91 75 03 	lds	r18, 0x0375
    41de:	30 91 76 03 	lds	r19, 0x0376
    41e2:	91 e0       	ldi	r25, 0x01	; 1
    41e4:	24 3a       	cpi	r18, 0xA4	; 164
    41e6:	39 07       	cpc	r19, r25
    41e8:	1c f4       	brge	.+6      	; 0x41f0 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    41ea:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	08 95       	ret
    41f0:	80 e0       	ldi	r24, 0x00	; 0
    41f2:	08 95       	ret
    41f4:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    41f6:	08 95       	ret

000041f8 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	80 93 4f 05 	sts	0x054F, r24
}
    41fe:	08 95       	ret

00004200 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    4200:	10 92 4f 05 	sts	0x054F, r1
}
    4204:	08 95       	ret

00004206 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    4206:	81 e0       	ldi	r24, 0x01	; 1
    4208:	80 93 50 05 	sts	0x0550, r24
}
    420c:	08 95       	ret

0000420e <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    420e:	10 92 50 05 	sts	0x0550, r1
}
    4212:	08 95       	ret

00004214 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    4214:	a0 e8       	ldi	r26, 0x80	; 128
    4216:	b0 e0       	ldi	r27, 0x00	; 0
    4218:	1c 92       	st	X, r1
	TCCR1B = 0;
    421a:	e1 e8       	ldi	r30, 0x81	; 129
    421c:	f0 e0       	ldi	r31, 0x00	; 0
    421e:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    4220:	8c 91       	ld	r24, X
    4222:	89 6a       	ori	r24, 0xA9	; 169
    4224:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    4226:	80 81       	ld	r24, Z
    4228:	89 60       	ori	r24, 0x09	; 9
    422a:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    422c:	80 91 0c 02 	lds	r24, 0x020C
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	90 93 89 00 	sts	0x0089, r25
    4236:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    423a:	80 91 0d 02 	lds	r24, 0x020D
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	90 93 8b 00 	sts	0x008B, r25
    4244:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    4248:	80 91 0e 02 	lds	r24, 0x020E
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	90 93 8d 00 	sts	0x008D, r25
    4252:	80 93 8c 00 	sts	0x008C, r24

}
    4256:	08 95       	ret

00004258 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	90 91 0f 04 	lds	r25, 0x040F
    425e:	89 1b       	sub	r24, r25
    4260:	80 93 0f 04 	sts	0x040F, r24

	if(blinkState) {
    4264:	88 23       	and	r24, r24
    4266:	39 f4       	brne	.+14     	; 0x4276 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    4268:	80 91 80 00 	lds	r24, 0x0080
    426c:	87 7f       	andi	r24, 0xF7	; 247
    426e:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    4272:	2f 98       	cbi	0x05, 7	; 5
    4274:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    4276:	80 91 80 00 	lds	r24, 0x0080
    427a:	88 60       	ori	r24, 0x08	; 8
    427c:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    4280:	8f ef       	ldi	r24, 0xFF	; 255
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	90 93 8d 00 	sts	0x008D, r25
    4288:	80 93 8c 00 	sts	0x008C, r24
    428c:	08 95       	ret

0000428e <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    428e:	88 23       	and	r24, r24
    4290:	59 f0       	breq	.+22     	; 0x42a8 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    4292:	90 91 80 00 	lds	r25, 0x0080
    4296:	90 68       	ori	r25, 0x80	; 128
    4298:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	90 93 89 00 	sts	0x0089, r25
    42a2:	80 93 88 00 	sts	0x0088, r24
    42a6:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    42a8:	80 91 80 00 	lds	r24, 0x0080
    42ac:	8f 77       	andi	r24, 0x7F	; 127
    42ae:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    42b2:	2d 98       	cbi	0x05, 5	; 5
    42b4:	08 95       	ret

000042b6 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    42b6:	88 23       	and	r24, r24
    42b8:	59 f0       	breq	.+22     	; 0x42d0 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    42ba:	90 91 80 00 	lds	r25, 0x0080
    42be:	90 62       	ori	r25, 0x20	; 32
    42c0:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	90 93 8b 00 	sts	0x008B, r25
    42ca:	80 93 8a 00 	sts	0x008A, r24
    42ce:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    42d0:	80 91 80 00 	lds	r24, 0x0080
    42d4:	8f 7d       	andi	r24, 0xDF	; 223
    42d6:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    42da:	2e 98       	cbi	0x05, 6	; 5
    42dc:	08 95       	ret

000042de <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    42de:	88 23       	and	r24, r24
    42e0:	59 f0       	breq	.+22     	; 0x42f8 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    42e2:	90 91 80 00 	lds	r25, 0x0080
    42e6:	98 60       	ori	r25, 0x08	; 8
    42e8:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	90 93 8d 00 	sts	0x008D, r25
    42f2:	80 93 8c 00 	sts	0x008C, r24
    42f6:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    42f8:	80 91 80 00 	lds	r24, 0x0080
    42fc:	87 7f       	andi	r24, 0xF7	; 247
    42fe:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    4302:	2f 98       	cbi	0x05, 7	; 5
    4304:	08 95       	ret

00004306 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    4306:	83 30       	cpi	r24, 0x03	; 3
    4308:	09 f4       	brne	.+2      	; 0x430c <setGreenLed+0x6>
    430a:	5a c0       	rjmp	.+180    	; 0x43c0 <setGreenLed+0xba>
    430c:	84 30       	cpi	r24, 0x04	; 4
    430e:	80 f0       	brcs	.+32     	; 0x4330 <setGreenLed+0x2a>
    4310:	85 30       	cpi	r24, 0x05	; 5
    4312:	09 f4       	brne	.+2      	; 0x4316 <setGreenLed+0x10>
    4314:	41 c0       	rjmp	.+130    	; 0x4398 <setGreenLed+0x92>
    4316:	85 30       	cpi	r24, 0x05	; 5
    4318:	d0 f4       	brcc	.+52     	; 0x434e <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    431a:	66 23       	and	r22, r22
    431c:	09 f4       	brne	.+2      	; 0x4320 <setGreenLed+0x1a>
    431e:	68 c0       	rjmp	.+208    	; 0x43f0 <setGreenLed+0xea>
    4320:	80 91 0b 01 	lds	r24, 0x010B
    4324:	8f 7e       	andi	r24, 0xEF	; 239
    4326:	80 93 0b 01 	sts	0x010B, r24
    432a:	80 91 0b 01 	lds	r24, 0x010B
    432e:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    4330:	81 30       	cpi	r24, 0x01	; 1
    4332:	e1 f1       	breq	.+120    	; 0x43ac <setGreenLed+0xa6>
    4334:	82 30       	cpi	r24, 0x02	; 2
    4336:	80 f0       	brcs	.+32     	; 0x4358 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    4338:	66 23       	and	r22, r22
    433a:	09 f4       	brne	.+2      	; 0x433e <setGreenLed+0x38>
    433c:	46 c0       	rjmp	.+140    	; 0x43ca <setGreenLed+0xc4>
    433e:	80 91 0b 01 	lds	r24, 0x010B
    4342:	8b 7f       	andi	r24, 0xFB	; 251
    4344:	80 93 0b 01 	sts	0x010B, r24
    4348:	80 91 0b 01 	lds	r24, 0x010B
    434c:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    434e:	86 30       	cpi	r24, 0x06	; 6
    4350:	c9 f0       	breq	.+50     	; 0x4384 <setGreenLed+0x7e>
    4352:	87 30       	cpi	r24, 0x07	; 7
    4354:	61 f0       	breq	.+24     	; 0x436e <setGreenLed+0x68>
    4356:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    4358:	66 23       	and	r22, r22
    435a:	09 f4       	brne	.+2      	; 0x435e <setGreenLed+0x58>
    435c:	51 c0       	rjmp	.+162    	; 0x4400 <setGreenLed+0xfa>
    435e:	80 91 0b 01 	lds	r24, 0x010B
    4362:	8e 7f       	andi	r24, 0xFE	; 254
    4364:	80 93 0b 01 	sts	0x010B, r24
    4368:	80 91 0b 01 	lds	r24, 0x010B
    436c:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    436e:	66 23       	and	r22, r22
    4370:	09 f0       	breq	.+2      	; 0x4374 <setGreenLed+0x6e>
    4372:	5e c0       	rjmp	.+188    	; 0x4430 <setGreenLed+0x12a>
    4374:	80 91 0b 01 	lds	r24, 0x010B
    4378:	80 68       	ori	r24, 0x80	; 128
    437a:	80 93 0b 01 	sts	0x010B, r24
    437e:	80 91 0b 01 	lds	r24, 0x010B
    4382:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    4384:	66 23       	and	r22, r22
    4386:	49 f1       	breq	.+82     	; 0x43da <setGreenLed+0xd4>
    4388:	80 91 0b 01 	lds	r24, 0x010B
    438c:	8f 7b       	andi	r24, 0xBF	; 191
    438e:	80 93 0b 01 	sts	0x010B, r24
    4392:	80 91 0b 01 	lds	r24, 0x010B
    4396:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    4398:	66 23       	and	r22, r22
    439a:	d1 f1       	breq	.+116    	; 0x4410 <setGreenLed+0x10a>
    439c:	80 91 0b 01 	lds	r24, 0x010B
    43a0:	8f 7d       	andi	r24, 0xDF	; 223
    43a2:	80 93 0b 01 	sts	0x010B, r24
    43a6:	80 91 0b 01 	lds	r24, 0x010B
    43aa:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    43ac:	66 23       	and	r22, r22
    43ae:	c1 f1       	breq	.+112    	; 0x4420 <setGreenLed+0x11a>
    43b0:	80 91 0b 01 	lds	r24, 0x010B
    43b4:	8d 7f       	andi	r24, 0xFD	; 253
    43b6:	80 93 0b 01 	sts	0x010B, r24
    43ba:	80 91 0b 01 	lds	r24, 0x010B
    43be:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    43c0:	66 23       	and	r22, r22
    43c2:	99 f0       	breq	.+38     	; 0x43ea <setGreenLed+0xe4>
    43c4:	a3 98       	cbi	0x14, 3	; 20
    43c6:	84 b3       	in	r24, 0x14	; 20
    43c8:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    43ca:	80 91 0b 01 	lds	r24, 0x010B
    43ce:	84 60       	ori	r24, 0x04	; 4
    43d0:	80 93 0b 01 	sts	0x010B, r24
    43d4:	80 91 0b 01 	lds	r24, 0x010B
    43d8:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    43da:	80 91 0b 01 	lds	r24, 0x010B
    43de:	80 64       	ori	r24, 0x40	; 64
    43e0:	80 93 0b 01 	sts	0x010B, r24
    43e4:	80 91 0b 01 	lds	r24, 0x010B
    43e8:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    43ea:	a3 9a       	sbi	0x14, 3	; 20
    43ec:	84 b3       	in	r24, 0x14	; 20
    43ee:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    43f0:	80 91 0b 01 	lds	r24, 0x010B
    43f4:	80 61       	ori	r24, 0x10	; 16
    43f6:	80 93 0b 01 	sts	0x010B, r24
    43fa:	80 91 0b 01 	lds	r24, 0x010B
    43fe:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    4400:	80 91 0b 01 	lds	r24, 0x010B
    4404:	81 60       	ori	r24, 0x01	; 1
    4406:	80 93 0b 01 	sts	0x010B, r24
    440a:	80 91 0b 01 	lds	r24, 0x010B
    440e:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    4410:	80 91 0b 01 	lds	r24, 0x010B
    4414:	80 62       	ori	r24, 0x20	; 32
    4416:	80 93 0b 01 	sts	0x010B, r24
    441a:	80 91 0b 01 	lds	r24, 0x010B
    441e:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    4420:	80 91 0b 01 	lds	r24, 0x010B
    4424:	82 60       	ori	r24, 0x02	; 2
    4426:	80 93 0b 01 	sts	0x010B, r24
    442a:	80 91 0b 01 	lds	r24, 0x010B
    442e:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    4430:	80 91 0b 01 	lds	r24, 0x010B
    4434:	8f 77       	andi	r24, 0x7F	; 127
    4436:	80 93 0b 01 	sts	0x010B, r24
    443a:	80 91 0b 01 	lds	r24, 0x010B
    443e:	08 95       	ret

00004440 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    4440:	eb e0       	ldi	r30, 0x0B	; 11
    4442:	f1 e0       	ldi	r31, 0x01	; 1
    4444:	80 81       	ld	r24, Z
    4446:	81 60       	ori	r24, 0x01	; 1
    4448:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    444a:	80 81       	ld	r24, Z
    444c:	82 60       	ori	r24, 0x02	; 2
    444e:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    4450:	80 81       	ld	r24, Z
    4452:	84 60       	ori	r24, 0x04	; 4
    4454:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    4456:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    4458:	80 81       	ld	r24, Z
    445a:	80 61       	ori	r24, 0x10	; 16
    445c:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    445e:	80 81       	ld	r24, Z
    4460:	80 62       	ori	r24, 0x20	; 32
    4462:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    4464:	80 81       	ld	r24, Z
    4466:	80 64       	ori	r24, 0x40	; 64
    4468:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    446a:	80 81       	ld	r24, Z
    446c:	80 68       	ori	r24, 0x80	; 128
    446e:	80 83       	st	Z, r24

}
    4470:	08 95       	ret

00004472 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    4472:	eb e0       	ldi	r30, 0x0B	; 11
    4474:	f1 e0       	ldi	r31, 0x01	; 1
    4476:	80 81       	ld	r24, Z
    4478:	8e 7f       	andi	r24, 0xFE	; 254
    447a:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    447c:	80 81       	ld	r24, Z
    447e:	8d 7f       	andi	r24, 0xFD	; 253
    4480:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    4482:	80 81       	ld	r24, Z
    4484:	8b 7f       	andi	r24, 0xFB	; 251
    4486:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    4488:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    448a:	80 81       	ld	r24, Z
    448c:	8f 7e       	andi	r24, 0xEF	; 239
    448e:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    4490:	80 81       	ld	r24, Z
    4492:	8f 7d       	andi	r24, 0xDF	; 223
    4494:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    4496:	80 81       	ld	r24, Z
    4498:	8f 7b       	andi	r24, 0xBF	; 191
    449a:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    449c:	80 81       	ld	r24, Z
    449e:	8f 77       	andi	r24, 0x7F	; 127
    44a0:	80 83       	st	Z, r24

}
    44a2:	08 95       	ret

000044a4 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    44a4:	0e 94 97 14 	call	0x292e	; 0x292e <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    44a8:	80 91 14 02 	lds	r24, 0x0214
    44ac:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    44b0:	88 23       	and	r24, r24
    44b2:	49 f4       	brne	.+18     	; 0x44c6 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    44b4:	86 e1       	ldi	r24, 0x16	; 22
    44b6:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    44ba:	85 e4       	ldi	r24, 0x45	; 69
    44bc:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    44c0:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>
    44c4:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    44c6:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    44ca:	86 ea       	ldi	r24, 0xA6	; 166
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	90 93 15 02 	sts	0x0215, r25
    44d2:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    44d6:	86 ea       	ldi	r24, 0xA6	; 166
    44d8:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    44dc:	88 23       	and	r24, r24
    44de:	41 f5       	brne	.+80     	; 0x4530 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    44e0:	8d e2       	ldi	r24, 0x2D	; 45
    44e2:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_write(0x08);	// measurement mode
    44e6:	88 e0       	ldi	r24, 0x08	; 8
    44e8:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    44ec:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    44f0:	80 91 14 02 	lds	r24, 0x0214
    44f4:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    44f8:	88 23       	and	r24, r24
    44fa:	d1 f4       	brne	.+52     	; 0x4530 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    44fc:	81 e3       	ldi	r24, 0x31	; 49
    44fe:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4508:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    450c:	80 91 14 02 	lds	r24, 0x0214
    4510:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4514:	88 23       	and	r24, r24
    4516:	61 f4       	brne	.+24     	; 0x4530 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    4518:	8c e2       	ldi	r24, 0x2C	; 44
    451a:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    451e:	89 e0       	ldi	r24, 0x09	; 9
    4520:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4524:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	80 93 1f 05 	sts	0x051F, r24
    452e:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4530:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    4534:	82 e0       	ldi	r24, 0x02	; 2
    4536:	80 93 1f 05 	sts	0x051F, r24
    453a:	08 95       	ret

0000453c <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    453c:	80 91 14 02 	lds	r24, 0x0214
    4540:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4544:	88 23       	and	r24, r24
    4546:	51 f4       	brne	.+20     	; 0x455c <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    4548:	86 e1       	ldi	r24, 0x16	; 22
    454a:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    454e:	85 e4       	ldi	r24, 0x45	; 69
    4550:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4554:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>
    }

	return 0;				// configuration ok
    4558:	80 e0       	ldi	r24, 0x00	; 0

}
    455a:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    455c:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>
		return 1;
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	08 95       	ret

00004564 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4564:	80 91 14 02 	lds	r24, 0x0214
    4568:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    456c:	88 23       	and	r24, r24
    456e:	31 f5       	brne	.+76     	; 0x45bc <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    4570:	8d e2       	ldi	r24, 0x2D	; 45
    4572:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_write(0x08);	// measurement mode
    4576:	88 e0       	ldi	r24, 0x08	; 8
    4578:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    457c:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4580:	80 91 14 02 	lds	r24, 0x0214
    4584:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4588:	88 23       	and	r24, r24
    458a:	c1 f4       	brne	.+48     	; 0x45bc <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    458c:	81 e3       	ldi	r24, 0x31	; 49
    458e:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4598:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    459c:	80 91 14 02 	lds	r24, 0x0214
    45a0:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    45a4:	88 23       	and	r24, r24
    45a6:	51 f4       	brne	.+20     	; 0x45bc <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    45a8:	8c e2       	ldi	r24, 0x2C	; 44
    45aa:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    45ae:	89 e0       	ldi	r24, 0x09	; 9
    45b0:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    45b4:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>
    }

	return 0;
    45b8:	80 e0       	ldi	r24, 0x00	; 0

}
    45ba:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    45bc:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>
		return 1;
    45c0:	81 e0       	ldi	r24, 0x01	; 1
    45c2:	08 95       	ret

000045c4 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    45c4:	ff 92       	push	r15
    45c6:	0f 93       	push	r16
    45c8:	1f 93       	push	r17
    45ca:	df 93       	push	r29
    45cc:	cf 93       	push	r28
    45ce:	0f 92       	push	r0
    45d0:	cd b7       	in	r28, 0x3d	; 61
    45d2:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    45d4:	80 91 1f 05 	lds	r24, 0x051F
    45d8:	88 23       	and	r24, r24
    45da:	91 f0       	breq	.+36     	; 0x4600 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    45dc:	81 30       	cpi	r24, 0x01	; 1
    45de:	09 f4       	brne	.+2      	; 0x45e2 <readAccelXY+0x1e>
    45e0:	88 c0       	rjmp	.+272    	; 0x46f2 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    45e2:	10 92 21 05 	sts	0x0521, r1
    45e6:	10 92 20 05 	sts	0x0520, r1
		accY = 0;
    45ea:	10 92 23 05 	sts	0x0523, r1
    45ee:	10 92 22 05 	sts	0x0522, r1

	}

}
    45f2:	0f 90       	pop	r0
    45f4:	cf 91       	pop	r28
    45f6:	df 91       	pop	r29
    45f8:	1f 91       	pop	r17
    45fa:	0f 91       	pop	r16
    45fc:	ff 90       	pop	r15
    45fe:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    4600:	80 91 14 02 	lds	r24, 0x0214
    4604:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    4608:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    460a:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    460e:	80 91 14 02 	lds	r24, 0x0214
    4612:	8f 5f       	subi	r24, 0xFF	; 255
    4614:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    4618:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    461c:	08 2f       	mov	r16, r24
    461e:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    4622:	f8 2e       	mov	r15, r24
    4624:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    4628:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    462a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    462e:	89 83       	std	Y+1, r24	; 0x01
    4630:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    4634:	90 91 7f 05 	lds	r25, 0x057F
    4638:	89 81       	ldd	r24, Y+1	; 0x01
    463a:	99 23       	and	r25, r25
    463c:	39 f1       	breq	.+78     	; 0x468c <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    463e:	4f 2d       	mov	r20, r15
    4640:	55 27       	eor	r21, r21
    4642:	47 fd       	sbrc	r20, 7
    4644:	50 95       	com	r21
    4646:	54 2f       	mov	r21, r20
    4648:	44 27       	eor	r20, r20
    464a:	60 2f       	mov	r22, r16
    464c:	77 27       	eor	r23, r23
    464e:	67 fd       	sbrc	r22, 7
    4650:	70 95       	com	r23
    4652:	46 2b       	or	r20, r22
    4654:	57 2b       	or	r21, r23
    4656:	50 93 21 05 	sts	0x0521, r21
    465a:	40 93 20 05 	sts	0x0520, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    465e:	28 2f       	mov	r18, r24
    4660:	33 27       	eor	r19, r19
    4662:	27 fd       	sbrc	r18, 7
    4664:	30 95       	com	r19
    4666:	32 2f       	mov	r19, r18
    4668:	22 27       	eor	r18, r18
    466a:	81 2f       	mov	r24, r17
    466c:	99 27       	eor	r25, r25
    466e:	87 fd       	sbrc	r24, 7
    4670:	90 95       	com	r25
    4672:	28 2b       	or	r18, r24
    4674:	39 2b       	or	r19, r25
    4676:	30 93 23 05 	sts	0x0523, r19
    467a:	20 93 22 05 	sts	0x0522, r18
		accX = 0;
		accY = 0;

	}

}
    467e:	0f 90       	pop	r0
    4680:	cf 91       	pop	r28
    4682:	df 91       	pop	r29
    4684:	1f 91       	pop	r17
    4686:	0f 91       	pop	r16
    4688:	ff 90       	pop	r15
    468a:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    468c:	4f 2d       	mov	r20, r15
    468e:	55 27       	eor	r21, r21
    4690:	47 fd       	sbrc	r20, 7
    4692:	50 95       	com	r21
    4694:	54 2f       	mov	r21, r20
    4696:	44 27       	eor	r20, r20
    4698:	60 2f       	mov	r22, r16
    469a:	77 27       	eor	r23, r23
    469c:	67 fd       	sbrc	r22, 7
    469e:	70 95       	com	r23
    46a0:	46 2b       	or	r20, r22
    46a2:	57 2b       	or	r21, r23
    46a4:	60 91 26 05 	lds	r22, 0x0526
    46a8:	70 91 27 05 	lds	r23, 0x0527
    46ac:	46 1b       	sub	r20, r22
    46ae:	57 0b       	sbc	r21, r23
    46b0:	50 93 21 05 	sts	0x0521, r21
    46b4:	40 93 20 05 	sts	0x0520, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    46b8:	28 2f       	mov	r18, r24
    46ba:	33 27       	eor	r19, r19
    46bc:	27 fd       	sbrc	r18, 7
    46be:	30 95       	com	r19
    46c0:	32 2f       	mov	r19, r18
    46c2:	22 27       	eor	r18, r18
    46c4:	81 2f       	mov	r24, r17
    46c6:	99 27       	eor	r25, r25
    46c8:	87 fd       	sbrc	r24, 7
    46ca:	90 95       	com	r25
    46cc:	28 2b       	or	r18, r24
    46ce:	39 2b       	or	r19, r25
    46d0:	80 91 28 05 	lds	r24, 0x0528
    46d4:	90 91 29 05 	lds	r25, 0x0529
    46d8:	28 1b       	sub	r18, r24
    46da:	39 0b       	sbc	r19, r25
    46dc:	30 93 23 05 	sts	0x0523, r19
    46e0:	20 93 22 05 	sts	0x0522, r18
		accX = 0;
		accY = 0;

	}

}
    46e4:	0f 90       	pop	r0
    46e6:	cf 91       	pop	r28
    46e8:	df 91       	pop	r29
    46ea:	1f 91       	pop	r17
    46ec:	0f 91       	pop	r16
    46ee:	ff 90       	pop	r15
    46f0:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    46f2:	80 91 14 02 	lds	r24, 0x0214
    46f6:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    46fa:	82 e3       	ldi	r24, 0x32	; 50
    46fc:	86 cf       	rjmp	.-244    	; 0x460a <readAccelXY+0x46>

000046fe <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    46fe:	df 93       	push	r29
    4700:	cf 93       	push	r28
    4702:	00 d0       	rcall	.+0      	; 0x4704 <readAccelXYZ+0x6>
    4704:	00 d0       	rcall	.+0      	; 0x4706 <readAccelXYZ+0x8>
    4706:	cd b7       	in	r28, 0x3d	; 61
    4708:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    470a:	80 91 1f 05 	lds	r24, 0x051F
    470e:	88 23       	and	r24, r24
    4710:	c1 f0       	breq	.+48     	; 0x4742 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    4712:	81 30       	cpi	r24, 0x01	; 1
    4714:	09 f4       	brne	.+2      	; 0x4718 <readAccelXYZ+0x1a>
    4716:	ad c0       	rjmp	.+346    	; 0x4872 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    4718:	10 92 21 05 	sts	0x0521, r1
    471c:	10 92 20 05 	sts	0x0520, r1
		accY = 0;
    4720:	10 92 23 05 	sts	0x0523, r1
    4724:	10 92 22 05 	sts	0x0522, r1
		accZ = 0;
    4728:	10 92 25 05 	sts	0x0525, r1
    472c:	10 92 24 05 	sts	0x0524, r1

	}

}
    4730:	26 96       	adiw	r28, 0x06	; 6
    4732:	0f b6       	in	r0, 0x3f	; 63
    4734:	f8 94       	cli
    4736:	de bf       	out	0x3e, r29	; 62
    4738:	0f be       	out	0x3f, r0	; 63
    473a:	cd bf       	out	0x3d, r28	; 61
    473c:	cf 91       	pop	r28
    473e:	df 91       	pop	r29
    4740:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    4742:	80 91 14 02 	lds	r24, 0x0214
    4746:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    474a:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    474c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    4750:	80 91 14 02 	lds	r24, 0x0214
    4754:	8f 5f       	subi	r24, 0xFF	; 255
    4756:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    475a:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    475e:	89 83       	std	Y+1, r24	; 0x01
    4760:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    4764:	8a 83       	std	Y+2, r24	; 0x02
    4766:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    476a:	8b 83       	std	Y+3, r24	; 0x03
    476c:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    4770:	8c 83       	std	Y+4, r24	; 0x04
    4772:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    4776:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    4778:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <i2c_readNak>
    477c:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    477e:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    4782:	80 91 7f 05 	lds	r24, 0x057F
    4786:	88 23       	and	r24, r24
    4788:	89 f1       	breq	.+98     	; 0x47ec <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    478a:	8a 81       	ldd	r24, Y+2	; 0x02
    478c:	99 27       	eor	r25, r25
    478e:	87 fd       	sbrc	r24, 7
    4790:	90 95       	com	r25
    4792:	98 2f       	mov	r25, r24
    4794:	88 27       	eor	r24, r24
    4796:	29 81       	ldd	r18, Y+1	; 0x01
    4798:	33 27       	eor	r19, r19
    479a:	27 fd       	sbrc	r18, 7
    479c:	30 95       	com	r19
    479e:	82 2b       	or	r24, r18
    47a0:	93 2b       	or	r25, r19
    47a2:	90 93 21 05 	sts	0x0521, r25
    47a6:	80 93 20 05 	sts	0x0520, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    47aa:	8c 81       	ldd	r24, Y+4	; 0x04
    47ac:	99 27       	eor	r25, r25
    47ae:	87 fd       	sbrc	r24, 7
    47b0:	90 95       	com	r25
    47b2:	98 2f       	mov	r25, r24
    47b4:	88 27       	eor	r24, r24
    47b6:	2b 81       	ldd	r18, Y+3	; 0x03
    47b8:	33 27       	eor	r19, r19
    47ba:	27 fd       	sbrc	r18, 7
    47bc:	30 95       	com	r19
    47be:	82 2b       	or	r24, r18
    47c0:	93 2b       	or	r25, r19
    47c2:	90 93 23 05 	sts	0x0523, r25
    47c6:	80 93 22 05 	sts	0x0522, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    47ca:	8e 81       	ldd	r24, Y+6	; 0x06
    47cc:	99 27       	eor	r25, r25
    47ce:	87 fd       	sbrc	r24, 7
    47d0:	90 95       	com	r25
    47d2:	98 2f       	mov	r25, r24
    47d4:	88 27       	eor	r24, r24
    47d6:	2d 81       	ldd	r18, Y+5	; 0x05
    47d8:	33 27       	eor	r19, r19
    47da:	27 fd       	sbrc	r18, 7
    47dc:	30 95       	com	r19
    47de:	82 2b       	or	r24, r18
    47e0:	93 2b       	or	r25, r19
    47e2:	90 93 25 05 	sts	0x0525, r25
    47e6:	80 93 24 05 	sts	0x0524, r24
    47ea:	a2 cf       	rjmp	.-188    	; 0x4730 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    47ec:	8a 81       	ldd	r24, Y+2	; 0x02
    47ee:	99 27       	eor	r25, r25
    47f0:	87 fd       	sbrc	r24, 7
    47f2:	90 95       	com	r25
    47f4:	98 2f       	mov	r25, r24
    47f6:	88 27       	eor	r24, r24
    47f8:	29 81       	ldd	r18, Y+1	; 0x01
    47fa:	33 27       	eor	r19, r19
    47fc:	27 fd       	sbrc	r18, 7
    47fe:	30 95       	com	r19
    4800:	82 2b       	or	r24, r18
    4802:	93 2b       	or	r25, r19
    4804:	20 91 26 05 	lds	r18, 0x0526
    4808:	30 91 27 05 	lds	r19, 0x0527
    480c:	82 1b       	sub	r24, r18
    480e:	93 0b       	sbc	r25, r19
    4810:	90 93 21 05 	sts	0x0521, r25
    4814:	80 93 20 05 	sts	0x0520, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    4818:	8c 81       	ldd	r24, Y+4	; 0x04
    481a:	99 27       	eor	r25, r25
    481c:	87 fd       	sbrc	r24, 7
    481e:	90 95       	com	r25
    4820:	98 2f       	mov	r25, r24
    4822:	88 27       	eor	r24, r24
    4824:	2b 81       	ldd	r18, Y+3	; 0x03
    4826:	33 27       	eor	r19, r19
    4828:	27 fd       	sbrc	r18, 7
    482a:	30 95       	com	r19
    482c:	82 2b       	or	r24, r18
    482e:	93 2b       	or	r25, r19
    4830:	20 91 28 05 	lds	r18, 0x0528
    4834:	30 91 29 05 	lds	r19, 0x0529
    4838:	82 1b       	sub	r24, r18
    483a:	93 0b       	sbc	r25, r19
    483c:	90 93 23 05 	sts	0x0523, r25
    4840:	80 93 22 05 	sts	0x0522, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    4844:	8e 81       	ldd	r24, Y+6	; 0x06
    4846:	99 27       	eor	r25, r25
    4848:	87 fd       	sbrc	r24, 7
    484a:	90 95       	com	r25
    484c:	98 2f       	mov	r25, r24
    484e:	88 27       	eor	r24, r24
    4850:	2d 81       	ldd	r18, Y+5	; 0x05
    4852:	33 27       	eor	r19, r19
    4854:	27 fd       	sbrc	r18, 7
    4856:	30 95       	com	r19
    4858:	82 2b       	or	r24, r18
    485a:	93 2b       	or	r25, r19
    485c:	20 91 2a 05 	lds	r18, 0x052A
    4860:	30 91 2b 05 	lds	r19, 0x052B
    4864:	82 1b       	sub	r24, r18
    4866:	93 0b       	sbc	r25, r19
    4868:	90 93 25 05 	sts	0x0525, r25
    486c:	80 93 24 05 	sts	0x0524, r24
    4870:	5f cf       	rjmp	.-322    	; 0x4730 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    4872:	80 91 14 02 	lds	r24, 0x0214
    4876:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    487a:	82 e3       	ldi	r24, 0x32	; 50
    487c:	67 cf       	rjmp	.-306    	; 0x474c <readAccelXYZ+0x4e>

0000487e <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    487e:	cf 93       	push	r28
    4880:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    4882:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    4886:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    488a:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    488e:	80 e0       	ldi	r24, 0x00	; 0
    4890:	0e 94 47 21 	call	0x428e	; 0x428e <updateRedLed>
	updateGreenLed(pwm_green);
    4894:	80 91 0d 02 	lds	r24, 0x020D
    4898:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <updateGreenLed>
	updateBlueLed(pwm_blue);
    489c:	80 91 0e 02 	lds	r24, 0x020E
    48a0:	0e 94 6f 21 	call	0x42de	; 0x42de <updateBlueLed>

	calibrationCycle = 0;
    48a4:	10 92 41 05 	sts	0x0541, r1
    48a8:	10 92 40 05 	sts	0x0540, r1
	startCalibration = 1;
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	80 93 7f 05 	sts	0x057F, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    48b2:	c1 e0       	ldi	r28, 0x01	; 1
    48b4:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    48b6:	0e 94 7f 23 	call	0x46fe	; 0x46fe <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    48ba:	20 91 40 05 	lds	r18, 0x0540
    48be:	30 91 41 05 	lds	r19, 0x0541
    48c2:	21 31       	cpi	r18, 0x11	; 17
    48c4:	31 05       	cpc	r19, r1
    48c6:	0c f4       	brge	.+2      	; 0x48ca <calibrateSensors+0x4c>
    48c8:	35 c1       	rjmp	.+618    	; 0x4b34 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    48ca:	80 91 8f 03 	lds	r24, 0x038F
    48ce:	90 91 90 03 	lds	r25, 0x0390
    48d2:	a0 91 91 03 	lds	r26, 0x0391
    48d6:	b0 91 92 03 	lds	r27, 0x0392
    48da:	54 e0       	ldi	r21, 0x04	; 4
    48dc:	b6 95       	lsr	r27
    48de:	a7 95       	ror	r26
    48e0:	97 95       	ror	r25
    48e2:	87 95       	ror	r24
    48e4:	5a 95       	dec	r21
    48e6:	d1 f7       	brne	.-12     	; 0x48dc <calibrateSensors+0x5e>
    48e8:	90 93 78 03 	sts	0x0378, r25
    48ec:	80 93 77 03 	sts	0x0377, r24
    48f0:	80 91 93 03 	lds	r24, 0x0393
    48f4:	90 91 94 03 	lds	r25, 0x0394
    48f8:	a0 91 95 03 	lds	r26, 0x0395
    48fc:	b0 91 96 03 	lds	r27, 0x0396
    4900:	44 e0       	ldi	r20, 0x04	; 4
    4902:	b6 95       	lsr	r27
    4904:	a7 95       	ror	r26
    4906:	97 95       	ror	r25
    4908:	87 95       	ror	r24
    490a:	4a 95       	dec	r20
    490c:	d1 f7       	brne	.-12     	; 0x4902 <calibrateSensors+0x84>
    490e:	90 93 7a 03 	sts	0x037A, r25
    4912:	80 93 79 03 	sts	0x0379, r24
    4916:	80 91 97 03 	lds	r24, 0x0397
    491a:	90 91 98 03 	lds	r25, 0x0398
    491e:	a0 91 99 03 	lds	r26, 0x0399
    4922:	b0 91 9a 03 	lds	r27, 0x039A
    4926:	34 e0       	ldi	r19, 0x04	; 4
    4928:	b6 95       	lsr	r27
    492a:	a7 95       	ror	r26
    492c:	97 95       	ror	r25
    492e:	87 95       	ror	r24
    4930:	3a 95       	dec	r19
    4932:	d1 f7       	brne	.-12     	; 0x4928 <calibrateSensors+0xaa>
    4934:	90 93 7c 03 	sts	0x037C, r25
    4938:	80 93 7b 03 	sts	0x037B, r24
    493c:	80 91 9b 03 	lds	r24, 0x039B
    4940:	90 91 9c 03 	lds	r25, 0x039C
    4944:	a0 91 9d 03 	lds	r26, 0x039D
    4948:	b0 91 9e 03 	lds	r27, 0x039E
    494c:	24 e0       	ldi	r18, 0x04	; 4
    494e:	b6 95       	lsr	r27
    4950:	a7 95       	ror	r26
    4952:	97 95       	ror	r25
    4954:	87 95       	ror	r24
    4956:	2a 95       	dec	r18
    4958:	d1 f7       	brne	.-12     	; 0x494e <calibrateSensors+0xd0>
    495a:	90 93 7e 03 	sts	0x037E, r25
    495e:	80 93 7d 03 	sts	0x037D, r24
    4962:	80 91 9f 03 	lds	r24, 0x039F
    4966:	90 91 a0 03 	lds	r25, 0x03A0
    496a:	a0 91 a1 03 	lds	r26, 0x03A1
    496e:	b0 91 a2 03 	lds	r27, 0x03A2
    4972:	f4 e0       	ldi	r31, 0x04	; 4
    4974:	b6 95       	lsr	r27
    4976:	a7 95       	ror	r26
    4978:	97 95       	ror	r25
    497a:	87 95       	ror	r24
    497c:	fa 95       	dec	r31
    497e:	d1 f7       	brne	.-12     	; 0x4974 <calibrateSensors+0xf6>
    4980:	90 93 80 03 	sts	0x0380, r25
    4984:	80 93 7f 03 	sts	0x037F, r24
    4988:	80 91 a3 03 	lds	r24, 0x03A3
    498c:	90 91 a4 03 	lds	r25, 0x03A4
    4990:	a0 91 a5 03 	lds	r26, 0x03A5
    4994:	b0 91 a6 03 	lds	r27, 0x03A6
    4998:	e4 e0       	ldi	r30, 0x04	; 4
    499a:	b6 95       	lsr	r27
    499c:	a7 95       	ror	r26
    499e:	97 95       	ror	r25
    49a0:	87 95       	ror	r24
    49a2:	ea 95       	dec	r30
    49a4:	d1 f7       	brne	.-12     	; 0x499a <calibrateSensors+0x11c>
    49a6:	90 93 82 03 	sts	0x0382, r25
    49aa:	80 93 81 03 	sts	0x0381, r24
    49ae:	80 91 a7 03 	lds	r24, 0x03A7
    49b2:	90 91 a8 03 	lds	r25, 0x03A8
    49b6:	a0 91 a9 03 	lds	r26, 0x03A9
    49ba:	b0 91 aa 03 	lds	r27, 0x03AA
    49be:	74 e0       	ldi	r23, 0x04	; 4
    49c0:	b6 95       	lsr	r27
    49c2:	a7 95       	ror	r26
    49c4:	97 95       	ror	r25
    49c6:	87 95       	ror	r24
    49c8:	7a 95       	dec	r23
    49ca:	d1 f7       	brne	.-12     	; 0x49c0 <calibrateSensors+0x142>
    49cc:	90 93 84 03 	sts	0x0384, r25
    49d0:	80 93 83 03 	sts	0x0383, r24
    49d4:	80 91 ab 03 	lds	r24, 0x03AB
    49d8:	90 91 ac 03 	lds	r25, 0x03AC
    49dc:	a0 91 ad 03 	lds	r26, 0x03AD
    49e0:	b0 91 ae 03 	lds	r27, 0x03AE
    49e4:	64 e0       	ldi	r22, 0x04	; 4
    49e6:	b6 95       	lsr	r27
    49e8:	a7 95       	ror	r26
    49ea:	97 95       	ror	r25
    49ec:	87 95       	ror	r24
    49ee:	6a 95       	dec	r22
    49f0:	d1 f7       	brne	.-12     	; 0x49e6 <calibrateSensors+0x168>
    49f2:	90 93 86 03 	sts	0x0386, r25
    49f6:	80 93 85 03 	sts	0x0385, r24
    49fa:	80 91 b3 03 	lds	r24, 0x03B3
    49fe:	90 91 b4 03 	lds	r25, 0x03B4
    4a02:	a0 91 b5 03 	lds	r26, 0x03B5
    4a06:	b0 91 b6 03 	lds	r27, 0x03B6
    4a0a:	54 e0       	ldi	r21, 0x04	; 4
    4a0c:	b6 95       	lsr	r27
    4a0e:	a7 95       	ror	r26
    4a10:	97 95       	ror	r25
    4a12:	87 95       	ror	r24
    4a14:	5a 95       	dec	r21
    4a16:	d1 f7       	brne	.-12     	; 0x4a0c <calibrateSensors+0x18e>
    4a18:	9c 01       	movw	r18, r24
    4a1a:	80 91 b7 03 	lds	r24, 0x03B7
    4a1e:	90 91 b8 03 	lds	r25, 0x03B8
    4a22:	a0 91 b9 03 	lds	r26, 0x03B9
    4a26:	b0 91 ba 03 	lds	r27, 0x03BA
    4a2a:	44 e0       	ldi	r20, 0x04	; 4
    4a2c:	b6 95       	lsr	r27
    4a2e:	a7 95       	ror	r26
    4a30:	97 95       	ror	r25
    4a32:	87 95       	ror	r24
    4a34:	4a 95       	dec	r20
    4a36:	d1 f7       	brne	.-12     	; 0x4a2c <calibrateSensors+0x1ae>
    4a38:	bc 01       	movw	r22, r24
    4a3a:	80 91 bb 03 	lds	r24, 0x03BB
    4a3e:	90 91 bc 03 	lds	r25, 0x03BC
    4a42:	a0 91 bd 03 	lds	r26, 0x03BD
    4a46:	b0 91 be 03 	lds	r27, 0x03BE
    4a4a:	f4 e0       	ldi	r31, 0x04	; 4
    4a4c:	b6 95       	lsr	r27
    4a4e:	a7 95       	ror	r26
    4a50:	97 95       	ror	r25
    4a52:	87 95       	ror	r24
    4a54:	fa 95       	dec	r31
    4a56:	d1 f7       	brne	.-12     	; 0x4a4c <calibrateSensors+0x1ce>
    4a58:	ac 01       	movw	r20, r24
    4a5a:	80 91 af 03 	lds	r24, 0x03AF
    4a5e:	90 91 b0 03 	lds	r25, 0x03B0
    4a62:	a0 91 b1 03 	lds	r26, 0x03B1
    4a66:	b0 91 b2 03 	lds	r27, 0x03B2
    4a6a:	e4 e0       	ldi	r30, 0x04	; 4
    4a6c:	b6 95       	lsr	r27
    4a6e:	a7 95       	ror	r26
    4a70:	97 95       	ror	r25
    4a72:	87 95       	ror	r24
    4a74:	ea 95       	dec	r30
    4a76:	d1 f7       	brne	.-12     	; 0x4a6c <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    4a78:	80 50       	subi	r24, 0x00	; 0
    4a7a:	92 40       	sbci	r25, 0x02	; 2
    4a7c:	90 93 88 03 	sts	0x0388, r25
    4a80:	80 93 87 03 	sts	0x0387, r24
    4a84:	20 50       	subi	r18, 0x00	; 0
    4a86:	32 40       	sbci	r19, 0x02	; 2
    4a88:	30 93 8a 03 	sts	0x038A, r19
    4a8c:	20 93 89 03 	sts	0x0389, r18
    4a90:	60 50       	subi	r22, 0x00	; 0
    4a92:	72 40       	sbci	r23, 0x02	; 2
    4a94:	70 93 8c 03 	sts	0x038C, r23
    4a98:	60 93 8b 03 	sts	0x038B, r22
    4a9c:	40 50       	subi	r20, 0x00	; 0
    4a9e:	52 40       	sbci	r21, 0x02	; 2
    4aa0:	50 93 8e 03 	sts	0x038E, r21
    4aa4:	40 93 8d 03 	sts	0x038D, r20
			}

			accOffsetX = accOffsetXSum>>4;
    4aa8:	80 91 2c 05 	lds	r24, 0x052C
    4aac:	90 91 2d 05 	lds	r25, 0x052D
    4ab0:	95 95       	asr	r25
    4ab2:	87 95       	ror	r24
    4ab4:	95 95       	asr	r25
    4ab6:	87 95       	ror	r24
    4ab8:	95 95       	asr	r25
    4aba:	87 95       	ror	r24
    4abc:	95 95       	asr	r25
    4abe:	87 95       	ror	r24
    4ac0:	90 93 27 05 	sts	0x0527, r25
    4ac4:	80 93 26 05 	sts	0x0526, r24
			accOffsetY = accOffsetYSum>>4;
    4ac8:	80 91 2e 05 	lds	r24, 0x052E
    4acc:	90 91 2f 05 	lds	r25, 0x052F
    4ad0:	95 95       	asr	r25
    4ad2:	87 95       	ror	r24
    4ad4:	95 95       	asr	r25
    4ad6:	87 95       	ror	r24
    4ad8:	95 95       	asr	r25
    4ada:	87 95       	ror	r24
    4adc:	95 95       	asr	r25
    4ade:	87 95       	ror	r24
    4ae0:	90 93 29 05 	sts	0x0529, r25
    4ae4:	80 93 28 05 	sts	0x0528, r24
			accOffsetZ = accOffsetZSum>>4;
    4ae8:	80 91 30 05 	lds	r24, 0x0530
    4aec:	90 91 31 05 	lds	r25, 0x0531
    4af0:	95 95       	asr	r25
    4af2:	87 95       	ror	r24
    4af4:	95 95       	asr	r25
    4af6:	87 95       	ror	r24
    4af8:	95 95       	asr	r25
    4afa:	87 95       	ror	r24
    4afc:	95 95       	asr	r25
    4afe:	87 95       	ror	r24
    4b00:	90 93 2b 05 	sts	0x052B, r25
    4b04:	80 93 2a 05 	sts	0x052A, r24

			startCalibration = 0;
    4b08:	10 92 7f 05 	sts	0x057F, r1

		}

	}

	pwm_red = 255;
    4b0c:	8f ef       	ldi	r24, 0xFF	; 255
    4b0e:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    4b12:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    4b16:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    4b1a:	0e 94 47 21 	call	0x428e	; 0x428e <updateRedLed>
	updateGreenLed(pwm_green);
    4b1e:	80 91 0d 02 	lds	r24, 0x020D
    4b22:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <updateGreenLed>
	updateBlueLed(pwm_blue);
    4b26:	80 91 0e 02 	lds	r24, 0x020E
    4b2a:	0e 94 6f 21 	call	0x42de	; 0x42de <updateBlueLed>

}
    4b2e:	df 91       	pop	r29
    4b30:	cf 91       	pop	r28
    4b32:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    4b34:	80 91 c6 03 	lds	r24, 0x03C6
    4b38:	88 23       	and	r24, r24
    4b3a:	09 f4       	brne	.+2      	; 0x4b3e <calibrateSensors+0x2c0>
    4b3c:	86 c1       	rjmp	.+780    	; 0x4e4a <calibrateSensors+0x5cc>

				proxUpdated = 0;
    4b3e:	10 92 c6 03 	sts	0x03C6, r1

				if(calibrationCycle==0) {		// reset all variables
    4b42:	21 15       	cp	r18, r1
    4b44:	31 05       	cpc	r19, r1
    4b46:	09 f4       	brne	.+2      	; 0x4b4a <calibrateSensors+0x2cc>
    4b48:	86 c1       	rjmp	.+780    	; 0x4e56 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    4b4a:	80 91 5f 03 	lds	r24, 0x035F
    4b4e:	90 91 60 03 	lds	r25, 0x0360
    4b52:	aa 27       	eor	r26, r26
    4b54:	97 fd       	sbrc	r25, 7
    4b56:	a0 95       	com	r26
    4b58:	ba 2f       	mov	r27, r26
    4b5a:	40 91 8f 03 	lds	r20, 0x038F
    4b5e:	50 91 90 03 	lds	r21, 0x0390
    4b62:	60 91 91 03 	lds	r22, 0x0391
    4b66:	70 91 92 03 	lds	r23, 0x0392
    4b6a:	84 0f       	add	r24, r20
    4b6c:	95 1f       	adc	r25, r21
    4b6e:	a6 1f       	adc	r26, r22
    4b70:	b7 1f       	adc	r27, r23
    4b72:	80 93 8f 03 	sts	0x038F, r24
    4b76:	90 93 90 03 	sts	0x0390, r25
    4b7a:	a0 93 91 03 	sts	0x0391, r26
    4b7e:	b0 93 92 03 	sts	0x0392, r27
    4b82:	80 91 61 03 	lds	r24, 0x0361
    4b86:	90 91 62 03 	lds	r25, 0x0362
    4b8a:	aa 27       	eor	r26, r26
    4b8c:	97 fd       	sbrc	r25, 7
    4b8e:	a0 95       	com	r26
    4b90:	ba 2f       	mov	r27, r26
    4b92:	40 91 93 03 	lds	r20, 0x0393
    4b96:	50 91 94 03 	lds	r21, 0x0394
    4b9a:	60 91 95 03 	lds	r22, 0x0395
    4b9e:	70 91 96 03 	lds	r23, 0x0396
    4ba2:	84 0f       	add	r24, r20
    4ba4:	95 1f       	adc	r25, r21
    4ba6:	a6 1f       	adc	r26, r22
    4ba8:	b7 1f       	adc	r27, r23
    4baa:	80 93 93 03 	sts	0x0393, r24
    4bae:	90 93 94 03 	sts	0x0394, r25
    4bb2:	a0 93 95 03 	sts	0x0395, r26
    4bb6:	b0 93 96 03 	sts	0x0396, r27
    4bba:	80 91 63 03 	lds	r24, 0x0363
    4bbe:	90 91 64 03 	lds	r25, 0x0364
    4bc2:	aa 27       	eor	r26, r26
    4bc4:	97 fd       	sbrc	r25, 7
    4bc6:	a0 95       	com	r26
    4bc8:	ba 2f       	mov	r27, r26
    4bca:	40 91 97 03 	lds	r20, 0x0397
    4bce:	50 91 98 03 	lds	r21, 0x0398
    4bd2:	60 91 99 03 	lds	r22, 0x0399
    4bd6:	70 91 9a 03 	lds	r23, 0x039A
    4bda:	84 0f       	add	r24, r20
    4bdc:	95 1f       	adc	r25, r21
    4bde:	a6 1f       	adc	r26, r22
    4be0:	b7 1f       	adc	r27, r23
    4be2:	80 93 97 03 	sts	0x0397, r24
    4be6:	90 93 98 03 	sts	0x0398, r25
    4bea:	a0 93 99 03 	sts	0x0399, r26
    4bee:	b0 93 9a 03 	sts	0x039A, r27
    4bf2:	80 91 65 03 	lds	r24, 0x0365
    4bf6:	90 91 66 03 	lds	r25, 0x0366
    4bfa:	aa 27       	eor	r26, r26
    4bfc:	97 fd       	sbrc	r25, 7
    4bfe:	a0 95       	com	r26
    4c00:	ba 2f       	mov	r27, r26
    4c02:	40 91 9b 03 	lds	r20, 0x039B
    4c06:	50 91 9c 03 	lds	r21, 0x039C
    4c0a:	60 91 9d 03 	lds	r22, 0x039D
    4c0e:	70 91 9e 03 	lds	r23, 0x039E
    4c12:	84 0f       	add	r24, r20
    4c14:	95 1f       	adc	r25, r21
    4c16:	a6 1f       	adc	r26, r22
    4c18:	b7 1f       	adc	r27, r23
    4c1a:	80 93 9b 03 	sts	0x039B, r24
    4c1e:	90 93 9c 03 	sts	0x039C, r25
    4c22:	a0 93 9d 03 	sts	0x039D, r26
    4c26:	b0 93 9e 03 	sts	0x039E, r27
    4c2a:	80 91 67 03 	lds	r24, 0x0367
    4c2e:	90 91 68 03 	lds	r25, 0x0368
    4c32:	aa 27       	eor	r26, r26
    4c34:	97 fd       	sbrc	r25, 7
    4c36:	a0 95       	com	r26
    4c38:	ba 2f       	mov	r27, r26
    4c3a:	40 91 9f 03 	lds	r20, 0x039F
    4c3e:	50 91 a0 03 	lds	r21, 0x03A0
    4c42:	60 91 a1 03 	lds	r22, 0x03A1
    4c46:	70 91 a2 03 	lds	r23, 0x03A2
    4c4a:	84 0f       	add	r24, r20
    4c4c:	95 1f       	adc	r25, r21
    4c4e:	a6 1f       	adc	r26, r22
    4c50:	b7 1f       	adc	r27, r23
    4c52:	80 93 9f 03 	sts	0x039F, r24
    4c56:	90 93 a0 03 	sts	0x03A0, r25
    4c5a:	a0 93 a1 03 	sts	0x03A1, r26
    4c5e:	b0 93 a2 03 	sts	0x03A2, r27
    4c62:	80 91 69 03 	lds	r24, 0x0369
    4c66:	90 91 6a 03 	lds	r25, 0x036A
    4c6a:	aa 27       	eor	r26, r26
    4c6c:	97 fd       	sbrc	r25, 7
    4c6e:	a0 95       	com	r26
    4c70:	ba 2f       	mov	r27, r26
    4c72:	40 91 a3 03 	lds	r20, 0x03A3
    4c76:	50 91 a4 03 	lds	r21, 0x03A4
    4c7a:	60 91 a5 03 	lds	r22, 0x03A5
    4c7e:	70 91 a6 03 	lds	r23, 0x03A6
    4c82:	84 0f       	add	r24, r20
    4c84:	95 1f       	adc	r25, r21
    4c86:	a6 1f       	adc	r26, r22
    4c88:	b7 1f       	adc	r27, r23
    4c8a:	80 93 a3 03 	sts	0x03A3, r24
    4c8e:	90 93 a4 03 	sts	0x03A4, r25
    4c92:	a0 93 a5 03 	sts	0x03A5, r26
    4c96:	b0 93 a6 03 	sts	0x03A6, r27
    4c9a:	80 91 6b 03 	lds	r24, 0x036B
    4c9e:	90 91 6c 03 	lds	r25, 0x036C
    4ca2:	aa 27       	eor	r26, r26
    4ca4:	97 fd       	sbrc	r25, 7
    4ca6:	a0 95       	com	r26
    4ca8:	ba 2f       	mov	r27, r26
    4caa:	40 91 a7 03 	lds	r20, 0x03A7
    4cae:	50 91 a8 03 	lds	r21, 0x03A8
    4cb2:	60 91 a9 03 	lds	r22, 0x03A9
    4cb6:	70 91 aa 03 	lds	r23, 0x03AA
    4cba:	84 0f       	add	r24, r20
    4cbc:	95 1f       	adc	r25, r21
    4cbe:	a6 1f       	adc	r26, r22
    4cc0:	b7 1f       	adc	r27, r23
    4cc2:	80 93 a7 03 	sts	0x03A7, r24
    4cc6:	90 93 a8 03 	sts	0x03A8, r25
    4cca:	a0 93 a9 03 	sts	0x03A9, r26
    4cce:	b0 93 aa 03 	sts	0x03AA, r27
    4cd2:	80 91 6d 03 	lds	r24, 0x036D
    4cd6:	90 91 6e 03 	lds	r25, 0x036E
    4cda:	aa 27       	eor	r26, r26
    4cdc:	97 fd       	sbrc	r25, 7
    4cde:	a0 95       	com	r26
    4ce0:	ba 2f       	mov	r27, r26
    4ce2:	40 91 ab 03 	lds	r20, 0x03AB
    4ce6:	50 91 ac 03 	lds	r21, 0x03AC
    4cea:	60 91 ad 03 	lds	r22, 0x03AD
    4cee:	70 91 ae 03 	lds	r23, 0x03AE
    4cf2:	84 0f       	add	r24, r20
    4cf4:	95 1f       	adc	r25, r21
    4cf6:	a6 1f       	adc	r26, r22
    4cf8:	b7 1f       	adc	r27, r23
    4cfa:	80 93 ab 03 	sts	0x03AB, r24
    4cfe:	90 93 ac 03 	sts	0x03AC, r25
    4d02:	a0 93 ad 03 	sts	0x03AD, r26
    4d06:	b0 93 ae 03 	sts	0x03AE, r27
    4d0a:	80 91 6f 03 	lds	r24, 0x036F
    4d0e:	90 91 70 03 	lds	r25, 0x0370
    4d12:	aa 27       	eor	r26, r26
    4d14:	97 fd       	sbrc	r25, 7
    4d16:	a0 95       	com	r26
    4d18:	ba 2f       	mov	r27, r26
    4d1a:	40 91 af 03 	lds	r20, 0x03AF
    4d1e:	50 91 b0 03 	lds	r21, 0x03B0
    4d22:	60 91 b1 03 	lds	r22, 0x03B1
    4d26:	70 91 b2 03 	lds	r23, 0x03B2
    4d2a:	84 0f       	add	r24, r20
    4d2c:	95 1f       	adc	r25, r21
    4d2e:	a6 1f       	adc	r26, r22
    4d30:	b7 1f       	adc	r27, r23
    4d32:	80 93 af 03 	sts	0x03AF, r24
    4d36:	90 93 b0 03 	sts	0x03B0, r25
    4d3a:	a0 93 b1 03 	sts	0x03B1, r26
    4d3e:	b0 93 b2 03 	sts	0x03B2, r27
    4d42:	80 91 71 03 	lds	r24, 0x0371
    4d46:	90 91 72 03 	lds	r25, 0x0372
    4d4a:	aa 27       	eor	r26, r26
    4d4c:	97 fd       	sbrc	r25, 7
    4d4e:	a0 95       	com	r26
    4d50:	ba 2f       	mov	r27, r26
    4d52:	40 91 b3 03 	lds	r20, 0x03B3
    4d56:	50 91 b4 03 	lds	r21, 0x03B4
    4d5a:	60 91 b5 03 	lds	r22, 0x03B5
    4d5e:	70 91 b6 03 	lds	r23, 0x03B6
    4d62:	84 0f       	add	r24, r20
    4d64:	95 1f       	adc	r25, r21
    4d66:	a6 1f       	adc	r26, r22
    4d68:	b7 1f       	adc	r27, r23
    4d6a:	80 93 b3 03 	sts	0x03B3, r24
    4d6e:	90 93 b4 03 	sts	0x03B4, r25
    4d72:	a0 93 b5 03 	sts	0x03B5, r26
    4d76:	b0 93 b6 03 	sts	0x03B6, r27
    4d7a:	80 91 73 03 	lds	r24, 0x0373
    4d7e:	90 91 74 03 	lds	r25, 0x0374
    4d82:	aa 27       	eor	r26, r26
    4d84:	97 fd       	sbrc	r25, 7
    4d86:	a0 95       	com	r26
    4d88:	ba 2f       	mov	r27, r26
    4d8a:	40 91 b7 03 	lds	r20, 0x03B7
    4d8e:	50 91 b8 03 	lds	r21, 0x03B8
    4d92:	60 91 b9 03 	lds	r22, 0x03B9
    4d96:	70 91 ba 03 	lds	r23, 0x03BA
    4d9a:	84 0f       	add	r24, r20
    4d9c:	95 1f       	adc	r25, r21
    4d9e:	a6 1f       	adc	r26, r22
    4da0:	b7 1f       	adc	r27, r23
    4da2:	80 93 b7 03 	sts	0x03B7, r24
    4da6:	90 93 b8 03 	sts	0x03B8, r25
    4daa:	a0 93 b9 03 	sts	0x03B9, r26
    4dae:	b0 93 ba 03 	sts	0x03BA, r27
    4db2:	80 91 75 03 	lds	r24, 0x0375
    4db6:	90 91 76 03 	lds	r25, 0x0376
    4dba:	aa 27       	eor	r26, r26
    4dbc:	97 fd       	sbrc	r25, 7
    4dbe:	a0 95       	com	r26
    4dc0:	ba 2f       	mov	r27, r26
    4dc2:	40 91 bb 03 	lds	r20, 0x03BB
    4dc6:	50 91 bc 03 	lds	r21, 0x03BC
    4dca:	60 91 bd 03 	lds	r22, 0x03BD
    4dce:	70 91 be 03 	lds	r23, 0x03BE
    4dd2:	84 0f       	add	r24, r20
    4dd4:	95 1f       	adc	r25, r21
    4dd6:	a6 1f       	adc	r26, r22
    4dd8:	b7 1f       	adc	r27, r23
    4dda:	80 93 bb 03 	sts	0x03BB, r24
    4dde:	90 93 bc 03 	sts	0x03BC, r25
    4de2:	a0 93 bd 03 	sts	0x03BD, r26
    4de6:	b0 93 be 03 	sts	0x03BE, r27
				}

				accOffsetXSum += accX;
    4dea:	80 91 2c 05 	lds	r24, 0x052C
    4dee:	90 91 2d 05 	lds	r25, 0x052D
    4df2:	40 91 20 05 	lds	r20, 0x0520
    4df6:	50 91 21 05 	lds	r21, 0x0521
    4dfa:	84 0f       	add	r24, r20
    4dfc:	95 1f       	adc	r25, r21
    4dfe:	90 93 2d 05 	sts	0x052D, r25
    4e02:	80 93 2c 05 	sts	0x052C, r24
				accOffsetYSum += accY;
    4e06:	80 91 2e 05 	lds	r24, 0x052E
    4e0a:	90 91 2f 05 	lds	r25, 0x052F
    4e0e:	40 91 22 05 	lds	r20, 0x0522
    4e12:	50 91 23 05 	lds	r21, 0x0523
    4e16:	84 0f       	add	r24, r20
    4e18:	95 1f       	adc	r25, r21
    4e1a:	90 93 2f 05 	sts	0x052F, r25
    4e1e:	80 93 2e 05 	sts	0x052E, r24
				accOffsetZSum += accZ;
    4e22:	80 91 30 05 	lds	r24, 0x0530
    4e26:	90 91 31 05 	lds	r25, 0x0531
    4e2a:	40 91 24 05 	lds	r20, 0x0524
    4e2e:	50 91 25 05 	lds	r21, 0x0525
    4e32:	84 0f       	add	r24, r20
    4e34:	95 1f       	adc	r25, r21
    4e36:	90 93 31 05 	sts	0x0531, r25
    4e3a:	80 93 30 05 	sts	0x0530, r24

				calibrationCycle++;
    4e3e:	2f 5f       	subi	r18, 0xFF	; 255
    4e40:	3f 4f       	sbci	r19, 0xFF	; 255
    4e42:	30 93 41 05 	sts	0x0541, r19
    4e46:	20 93 40 05 	sts	0x0540, r18
    4e4a:	80 91 7f 05 	lds	r24, 0x057F
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    4e4e:	88 23       	and	r24, r24
    4e50:	09 f0       	breq	.+2      	; 0x4e54 <calibrateSensors+0x5d6>
    4e52:	31 cd       	rjmp	.-1438   	; 0x48b6 <calibrateSensors+0x38>
    4e54:	5b ce       	rjmp	.-842    	; 0x4b0c <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4e56:	10 92 8f 03 	sts	0x038F, r1
    4e5a:	10 92 90 03 	sts	0x0390, r1
    4e5e:	10 92 91 03 	sts	0x0391, r1
    4e62:	10 92 92 03 	sts	0x0392, r1
						proximityOffset[i] = 0;
    4e66:	10 92 78 03 	sts	0x0378, r1
    4e6a:	10 92 77 03 	sts	0x0377, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4e6e:	10 92 93 03 	sts	0x0393, r1
    4e72:	10 92 94 03 	sts	0x0394, r1
    4e76:	10 92 95 03 	sts	0x0395, r1
    4e7a:	10 92 96 03 	sts	0x0396, r1
						proximityOffset[i] = 0;
    4e7e:	10 92 7a 03 	sts	0x037A, r1
    4e82:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4e86:	10 92 97 03 	sts	0x0397, r1
    4e8a:	10 92 98 03 	sts	0x0398, r1
    4e8e:	10 92 99 03 	sts	0x0399, r1
    4e92:	10 92 9a 03 	sts	0x039A, r1
						proximityOffset[i] = 0;
    4e96:	10 92 7c 03 	sts	0x037C, r1
    4e9a:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4e9e:	10 92 9b 03 	sts	0x039B, r1
    4ea2:	10 92 9c 03 	sts	0x039C, r1
    4ea6:	10 92 9d 03 	sts	0x039D, r1
    4eaa:	10 92 9e 03 	sts	0x039E, r1
						proximityOffset[i] = 0;
    4eae:	10 92 7e 03 	sts	0x037E, r1
    4eb2:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4eb6:	10 92 9f 03 	sts	0x039F, r1
    4eba:	10 92 a0 03 	sts	0x03A0, r1
    4ebe:	10 92 a1 03 	sts	0x03A1, r1
    4ec2:	10 92 a2 03 	sts	0x03A2, r1
						proximityOffset[i] = 0;
    4ec6:	10 92 80 03 	sts	0x0380, r1
    4eca:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4ece:	10 92 a3 03 	sts	0x03A3, r1
    4ed2:	10 92 a4 03 	sts	0x03A4, r1
    4ed6:	10 92 a5 03 	sts	0x03A5, r1
    4eda:	10 92 a6 03 	sts	0x03A6, r1
						proximityOffset[i] = 0;
    4ede:	10 92 82 03 	sts	0x0382, r1
    4ee2:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4ee6:	10 92 a7 03 	sts	0x03A7, r1
    4eea:	10 92 a8 03 	sts	0x03A8, r1
    4eee:	10 92 a9 03 	sts	0x03A9, r1
    4ef2:	10 92 aa 03 	sts	0x03AA, r1
						proximityOffset[i] = 0;
    4ef6:	10 92 84 03 	sts	0x0384, r1
    4efa:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4efe:	10 92 ab 03 	sts	0x03AB, r1
    4f02:	10 92 ac 03 	sts	0x03AC, r1
    4f06:	10 92 ad 03 	sts	0x03AD, r1
    4f0a:	10 92 ae 03 	sts	0x03AE, r1
						proximityOffset[i] = 0;
    4f0e:	10 92 86 03 	sts	0x0386, r1
    4f12:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4f16:	10 92 af 03 	sts	0x03AF, r1
    4f1a:	10 92 b0 03 	sts	0x03B0, r1
    4f1e:	10 92 b1 03 	sts	0x03B1, r1
    4f22:	10 92 b2 03 	sts	0x03B2, r1
						proximityOffset[i] = 0;
    4f26:	10 92 88 03 	sts	0x0388, r1
    4f2a:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4f2e:	10 92 b3 03 	sts	0x03B3, r1
    4f32:	10 92 b4 03 	sts	0x03B4, r1
    4f36:	10 92 b5 03 	sts	0x03B5, r1
    4f3a:	10 92 b6 03 	sts	0x03B6, r1
						proximityOffset[i] = 0;
    4f3e:	10 92 8a 03 	sts	0x038A, r1
    4f42:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4f46:	10 92 b7 03 	sts	0x03B7, r1
    4f4a:	10 92 b8 03 	sts	0x03B8, r1
    4f4e:	10 92 b9 03 	sts	0x03B9, r1
    4f52:	10 92 ba 03 	sts	0x03BA, r1
						proximityOffset[i] = 0;
    4f56:	10 92 8c 03 	sts	0x038C, r1
    4f5a:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4f5e:	10 92 bb 03 	sts	0x03BB, r1
    4f62:	10 92 bc 03 	sts	0x03BC, r1
    4f66:	10 92 bd 03 	sts	0x03BD, r1
    4f6a:	10 92 be 03 	sts	0x03BE, r1
						proximityOffset[i] = 0;
    4f6e:	10 92 8e 03 	sts	0x038E, r1
    4f72:	10 92 8d 03 	sts	0x038D, r1
					}
					accOffsetXSum = 0;
    4f76:	10 92 2d 05 	sts	0x052D, r1
    4f7a:	10 92 2c 05 	sts	0x052C, r1
					accOffsetYSum = 0;
    4f7e:	10 92 2f 05 	sts	0x052F, r1
    4f82:	10 92 2e 05 	sts	0x052E, r1
					accOffsetZSum = 0;
    4f86:	10 92 31 05 	sts	0x0531, r1
    4f8a:	10 92 30 05 	sts	0x0530, r1

					calibrationCycle++;
    4f8e:	d0 93 41 05 	sts	0x0541, r29
    4f92:	c0 93 40 05 	sts	0x0540, r28
    4f96:	80 91 7f 05 	lds	r24, 0x057F

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    4f9a:	59 cf       	rjmp	.-334    	; 0x4e4e <calibrateSensors+0x5d0>

00004f9c <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    4f9c:	80 91 1f 05 	lds	r24, 0x051F
    4fa0:	88 23       	and	r24, r24
    4fa2:	79 f0       	breq	.+30     	; 0x4fc2 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    4fa4:	81 30       	cpi	r24, 0x01	; 1
    4fa6:	11 f1       	breq	.+68     	; 0x4fec <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    4fa8:	10 92 21 05 	sts	0x0521, r1
    4fac:	10 92 20 05 	sts	0x0520, r1
		accY = 0;
    4fb0:	10 92 23 05 	sts	0x0523, r1
    4fb4:	10 92 22 05 	sts	0x0522, r1
		accZ = 0;
    4fb8:	10 92 25 05 	sts	0x0525, r1
    4fbc:	10 92 24 05 	sts	0x0524, r1
    4fc0:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    4fc2:	80 91 14 02 	lds	r24, 0x0214
    4fc6:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    4fca:	80 e0       	ldi	r24, 0x00	; 0
    4fcc:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    4fd0:	80 91 14 02 	lds	r24, 0x0214
    4fd4:	8f 5f       	subi	r24, 0xFF	; 255
    4fd6:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    4fda:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    4fde:	80 93 35 05 	sts	0x0535, r24
    4fe2:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    4fe6:	80 93 36 05 	sts	0x0536, r24
    4fea:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    4fec:	80 91 14 02 	lds	r24, 0x0214
    4ff0:	0e 94 9f 14 	call	0x293e	; 0x293e <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    4ff4:	82 e3       	ldi	r24, 0x32	; 50
    4ff6:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    4ffa:	80 91 14 02 	lds	r24, 0x0214
    4ffe:	8f 5f       	subi	r24, 0xFF	; 255
    5000:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    5004:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    5008:	80 93 35 05 	sts	0x0535, r24
    500c:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    5010:	80 93 36 05 	sts	0x0536, r24
    5014:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    5018:	80 93 37 05 	sts	0x0537, r24
    501c:	08 95       	ret

0000501e <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    501e:	80 91 1f 05 	lds	r24, 0x051F
    5022:	88 23       	and	r24, r24
    5024:	09 f0       	breq	.+2      	; 0x5028 <readAccelXYZ_2+0xa>
    5026:	4e c0       	rjmp	.+156    	; 0x50c4 <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    5028:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    502c:	80 93 37 05 	sts	0x0537, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    5030:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    5034:	80 93 38 05 	sts	0x0538, r24
    5038:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <i2c_readAck>
    503c:	80 93 39 05 	sts	0x0539, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    5040:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <i2c_readNak>
    5044:	80 93 3a 05 	sts	0x053A, r24
		i2c_stop();													// set stop conditon = release bus
    5048:	0e 94 12 15 	call	0x2a24	; 0x2a24 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    504c:	80 91 7f 05 	lds	r24, 0x057F
    5050:	88 23       	and	r24, r24
    5052:	09 f4       	brne	.+2      	; 0x5056 <readAccelXYZ_2+0x38>
    5054:	47 c0       	rjmp	.+142    	; 0x50e4 <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    5056:	80 91 36 05 	lds	r24, 0x0536
    505a:	99 27       	eor	r25, r25
    505c:	87 fd       	sbrc	r24, 7
    505e:	90 95       	com	r25
    5060:	98 2f       	mov	r25, r24
    5062:	88 27       	eor	r24, r24
    5064:	20 91 35 05 	lds	r18, 0x0535
    5068:	33 27       	eor	r19, r19
    506a:	27 fd       	sbrc	r18, 7
    506c:	30 95       	com	r19
    506e:	82 2b       	or	r24, r18
    5070:	93 2b       	or	r25, r19
    5072:	90 93 21 05 	sts	0x0521, r25
    5076:	80 93 20 05 	sts	0x0520, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    507a:	80 91 38 05 	lds	r24, 0x0538
    507e:	99 27       	eor	r25, r25
    5080:	87 fd       	sbrc	r24, 7
    5082:	90 95       	com	r25
    5084:	98 2f       	mov	r25, r24
    5086:	88 27       	eor	r24, r24
    5088:	20 91 37 05 	lds	r18, 0x0537
    508c:	33 27       	eor	r19, r19
    508e:	27 fd       	sbrc	r18, 7
    5090:	30 95       	com	r19
    5092:	82 2b       	or	r24, r18
    5094:	93 2b       	or	r25, r19
    5096:	90 93 23 05 	sts	0x0523, r25
    509a:	80 93 22 05 	sts	0x0522, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    509e:	80 91 3a 05 	lds	r24, 0x053A
    50a2:	99 27       	eor	r25, r25
    50a4:	87 fd       	sbrc	r24, 7
    50a6:	90 95       	com	r25
    50a8:	98 2f       	mov	r25, r24
    50aa:	88 27       	eor	r24, r24
    50ac:	20 91 39 05 	lds	r18, 0x0539
    50b0:	33 27       	eor	r19, r19
    50b2:	27 fd       	sbrc	r18, 7
    50b4:	30 95       	com	r19
    50b6:	82 2b       	or	r24, r18
    50b8:	93 2b       	or	r25, r19
    50ba:	90 93 25 05 	sts	0x0525, r25
    50be:	80 93 24 05 	sts	0x0524, r24
    50c2:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    50c4:	81 30       	cpi	r24, 0x01	; 1
    50c6:	09 f4       	brne	.+2      	; 0x50ca <readAccelXYZ_2+0xac>
    50c8:	b3 cf       	rjmp	.-154    	; 0x5030 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    50ca:	10 92 21 05 	sts	0x0521, r1
    50ce:	10 92 20 05 	sts	0x0520, r1
		accY = 0;
    50d2:	10 92 23 05 	sts	0x0523, r1
    50d6:	10 92 22 05 	sts	0x0522, r1
		accZ = 0;
    50da:	10 92 25 05 	sts	0x0525, r1
    50de:	10 92 24 05 	sts	0x0524, r1
    50e2:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    50e4:	80 91 36 05 	lds	r24, 0x0536
    50e8:	99 27       	eor	r25, r25
    50ea:	87 fd       	sbrc	r24, 7
    50ec:	90 95       	com	r25
    50ee:	98 2f       	mov	r25, r24
    50f0:	88 27       	eor	r24, r24
    50f2:	20 91 35 05 	lds	r18, 0x0535
    50f6:	33 27       	eor	r19, r19
    50f8:	27 fd       	sbrc	r18, 7
    50fa:	30 95       	com	r19
    50fc:	82 2b       	or	r24, r18
    50fe:	93 2b       	or	r25, r19
    5100:	20 91 26 05 	lds	r18, 0x0526
    5104:	30 91 27 05 	lds	r19, 0x0527
    5108:	82 1b       	sub	r24, r18
    510a:	93 0b       	sbc	r25, r19
    510c:	90 93 21 05 	sts	0x0521, r25
    5110:	80 93 20 05 	sts	0x0520, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    5114:	80 91 38 05 	lds	r24, 0x0538
    5118:	99 27       	eor	r25, r25
    511a:	87 fd       	sbrc	r24, 7
    511c:	90 95       	com	r25
    511e:	98 2f       	mov	r25, r24
    5120:	88 27       	eor	r24, r24
    5122:	20 91 37 05 	lds	r18, 0x0537
    5126:	33 27       	eor	r19, r19
    5128:	27 fd       	sbrc	r18, 7
    512a:	30 95       	com	r19
    512c:	82 2b       	or	r24, r18
    512e:	93 2b       	or	r25, r19
    5130:	20 91 28 05 	lds	r18, 0x0528
    5134:	30 91 29 05 	lds	r19, 0x0529
    5138:	82 1b       	sub	r24, r18
    513a:	93 0b       	sbc	r25, r19
    513c:	90 93 23 05 	sts	0x0523, r25
    5140:	80 93 22 05 	sts	0x0522, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    5144:	80 91 3a 05 	lds	r24, 0x053A
    5148:	99 27       	eor	r25, r25
    514a:	87 fd       	sbrc	r24, 7
    514c:	90 95       	com	r25
    514e:	98 2f       	mov	r25, r24
    5150:	88 27       	eor	r24, r24
    5152:	20 91 39 05 	lds	r18, 0x0539
    5156:	33 27       	eor	r19, r19
    5158:	27 fd       	sbrc	r18, 7
    515a:	30 95       	com	r19
    515c:	82 2b       	or	r24, r18
    515e:	93 2b       	or	r25, r19
    5160:	20 91 2a 05 	lds	r18, 0x052A
    5164:	30 91 2b 05 	lds	r19, 0x052B
    5168:	82 1b       	sub	r24, r18
    516a:	93 0b       	sbc	r25, r19
    516c:	90 93 25 05 	sts	0x0525, r25
    5170:	80 93 24 05 	sts	0x0524, r24
    5174:	08 95       	ret

00005176 <computeAngle>:

	}

}

void computeAngle() {
    5176:	ef 92       	push	r14
    5178:	ff 92       	push	r15
    517a:	0f 93       	push	r16
    517c:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    517e:	80 91 24 05 	lds	r24, 0x0524
    5182:	90 91 25 05 	lds	r25, 0x0525
    5186:	97 fd       	sbrc	r25, 7
    5188:	5b c0       	rjmp	.+182    	; 0x5240 <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    518a:	80 31       	cpi	r24, 0x10	; 16
    518c:	91 05       	cpc	r25, r1
    518e:	08 f0       	brcs	.+2      	; 0x5192 <computeAngle+0x1c>
    5190:	42 c0       	rjmp	.+132    	; 0x5216 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    5192:	81 e0       	ldi	r24, 0x01	; 1
    5194:	80 93 16 02 	sts	0x0216, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    5198:	90 91 15 02 	lds	r25, 0x0215
    519c:	98 17       	cp	r25, r24
    519e:	09 f4       	brne	.+2      	; 0x51a2 <computeAngle+0x2c>
    51a0:	42 c0       	rjmp	.+132    	; 0x5226 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    51a2:	10 92 34 05 	sts	0x0534, r1
	}
	prevPosition = currPosition;
    51a6:	80 93 15 02 	sts	0x0215, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2((float)accX, (float)accY)*RAD_2_DEG);
    51aa:	60 91 20 05 	lds	r22, 0x0520
    51ae:	70 91 21 05 	lds	r23, 0x0521
    51b2:	88 27       	eor	r24, r24
    51b4:	77 fd       	sbrc	r23, 7
    51b6:	80 95       	com	r24
    51b8:	98 2f       	mov	r25, r24
    51ba:	0e 94 23 2a 	call	0x5446	; 0x5446 <__floatsisf>
    51be:	7b 01       	movw	r14, r22
    51c0:	8c 01       	movw	r16, r24
    51c2:	60 91 22 05 	lds	r22, 0x0522
    51c6:	70 91 23 05 	lds	r23, 0x0523
    51ca:	88 27       	eor	r24, r24
    51cc:	77 fd       	sbrc	r23, 7
    51ce:	80 95       	com	r24
    51d0:	98 2f       	mov	r25, r24
    51d2:	0e 94 23 2a 	call	0x5446	; 0x5446 <__floatsisf>
    51d6:	9b 01       	movw	r18, r22
    51d8:	ac 01       	movw	r20, r24
    51da:	c8 01       	movw	r24, r16
    51dc:	b7 01       	movw	r22, r14
    51de:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <atan2>
    51e2:	21 ee       	ldi	r18, 0xE1	; 225
    51e4:	3e e2       	ldi	r19, 0x2E	; 46
    51e6:	45 e6       	ldi	r20, 0x65	; 101
    51e8:	52 e4       	ldi	r21, 0x42	; 66
    51ea:	0e 94 24 29 	call	0x5248	; 0x5248 <__mulsf3>
    51ee:	0e 94 81 2a 	call	0x5502	; 0x5502 <__fixsfsi>
    51f2:	9b 01       	movw	r18, r22
    51f4:	70 93 33 05 	sts	0x0533, r23
    51f8:	60 93 32 05 	sts	0x0532, r22

	if(currentAngle < 0) {
    51fc:	77 ff       	sbrs	r23, 7
    51fe:	06 c0       	rjmp	.+12     	; 0x520c <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    5200:	28 59       	subi	r18, 0x98	; 152
    5202:	3e 4f       	sbci	r19, 0xFE	; 254
    5204:	30 93 33 05 	sts	0x0533, r19
    5208:	20 93 32 05 	sts	0x0532, r18
	}

}
    520c:	1f 91       	pop	r17
    520e:	0f 91       	pop	r16
    5210:	ff 90       	pop	r15
    5212:	ef 90       	pop	r14
    5214:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    5216:	10 92 16 02 	sts	0x0216, r1
    521a:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    521c:	90 91 15 02 	lds	r25, 0x0215
    5220:	98 17       	cp	r25, r24
    5222:	09 f0       	breq	.+2      	; 0x5226 <computeAngle+0xb0>
    5224:	be cf       	rjmp	.-132    	; 0x51a2 <computeAngle+0x2c>
		timesInSamePos++;
    5226:	90 91 34 05 	lds	r25, 0x0534
    522a:	9f 5f       	subi	r25, 0xFF	; 255
    522c:	90 93 34 05 	sts	0x0534, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    5230:	95 30       	cpi	r25, 0x05	; 5
    5232:	08 f4       	brcc	.+2      	; 0x5236 <computeAngle+0xc0>
    5234:	b8 cf       	rjmp	.-144    	; 0x51a6 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    5236:	10 92 34 05 	sts	0x0534, r1
			robotPosition = currPosition;
    523a:	80 93 17 02 	sts	0x0217, r24
    523e:	b3 cf       	rjmp	.-154    	; 0x51a6 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    5240:	90 95       	com	r25
    5242:	81 95       	neg	r24
    5244:	9f 4f       	sbci	r25, 0xFF	; 255
    5246:	a1 cf       	rjmp	.-190    	; 0x518a <computeAngle+0x14>

00005248 <__mulsf3>:
    5248:	a0 e2       	ldi	r26, 0x20	; 32
    524a:	b0 e0       	ldi	r27, 0x00	; 0
    524c:	ea e2       	ldi	r30, 0x2A	; 42
    524e:	f9 e2       	ldi	r31, 0x29	; 41
    5250:	0c 94 b9 2c 	jmp	0x5972	; 0x5972 <__prologue_saves__+0x4>
    5254:	69 83       	std	Y+1, r22	; 0x01
    5256:	7a 83       	std	Y+2, r23	; 0x02
    5258:	8b 83       	std	Y+3, r24	; 0x03
    525a:	9c 83       	std	Y+4, r25	; 0x04
    525c:	2d 83       	std	Y+5, r18	; 0x05
    525e:	3e 83       	std	Y+6, r19	; 0x06
    5260:	4f 83       	std	Y+7, r20	; 0x07
    5262:	58 87       	std	Y+8, r21	; 0x08
    5264:	99 e0       	ldi	r25, 0x09	; 9
    5266:	e9 2e       	mov	r14, r25
    5268:	f1 2c       	mov	r15, r1
    526a:	ec 0e       	add	r14, r28
    526c:	fd 1e       	adc	r15, r29
    526e:	b7 01       	movw	r22, r14
    5270:	ce 01       	movw	r24, r28
    5272:	01 96       	adiw	r24, 0x01	; 1
    5274:	0e 94 01 2c 	call	0x5802	; 0x5802 <__unpack_f>
    5278:	8e 01       	movw	r16, r28
    527a:	0f 5e       	subi	r16, 0xEF	; 239
    527c:	1f 4f       	sbci	r17, 0xFF	; 255
    527e:	b8 01       	movw	r22, r16
    5280:	ce 01       	movw	r24, r28
    5282:	05 96       	adiw	r24, 0x05	; 5
    5284:	0e 94 01 2c 	call	0x5802	; 0x5802 <__unpack_f>
    5288:	99 85       	ldd	r25, Y+9	; 0x09
    528a:	92 30       	cpi	r25, 0x02	; 2
    528c:	88 f0       	brcs	.+34     	; 0x52b0 <__mulsf3+0x68>
    528e:	89 89       	ldd	r24, Y+17	; 0x11
    5290:	82 30       	cpi	r24, 0x02	; 2
    5292:	c0 f0       	brcs	.+48     	; 0x52c4 <__mulsf3+0x7c>
    5294:	94 30       	cpi	r25, 0x04	; 4
    5296:	19 f4       	brne	.+6      	; 0x529e <__mulsf3+0x56>
    5298:	82 30       	cpi	r24, 0x02	; 2
    529a:	29 f0       	breq	.+10     	; 0x52a6 <__mulsf3+0x5e>
    529c:	09 c0       	rjmp	.+18     	; 0x52b0 <__mulsf3+0x68>
    529e:	84 30       	cpi	r24, 0x04	; 4
    52a0:	29 f4       	brne	.+10     	; 0x52ac <__mulsf3+0x64>
    52a2:	92 30       	cpi	r25, 0x02	; 2
    52a4:	79 f4       	brne	.+30     	; 0x52c4 <__mulsf3+0x7c>
    52a6:	68 e1       	ldi	r22, 0x18	; 24
    52a8:	72 e0       	ldi	r23, 0x02	; 2
    52aa:	c6 c0       	rjmp	.+396    	; 0x5438 <__mulsf3+0x1f0>
    52ac:	92 30       	cpi	r25, 0x02	; 2
    52ae:	41 f4       	brne	.+16     	; 0x52c0 <__mulsf3+0x78>
    52b0:	20 e0       	ldi	r18, 0x00	; 0
    52b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    52b4:	8a 89       	ldd	r24, Y+18	; 0x12
    52b6:	98 13       	cpse	r25, r24
    52b8:	21 e0       	ldi	r18, 0x01	; 1
    52ba:	2a 87       	std	Y+10, r18	; 0x0a
    52bc:	b7 01       	movw	r22, r14
    52be:	bc c0       	rjmp	.+376    	; 0x5438 <__mulsf3+0x1f0>
    52c0:	82 30       	cpi	r24, 0x02	; 2
    52c2:	41 f4       	brne	.+16     	; 0x52d4 <__mulsf3+0x8c>
    52c4:	20 e0       	ldi	r18, 0x00	; 0
    52c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    52c8:	8a 89       	ldd	r24, Y+18	; 0x12
    52ca:	98 13       	cpse	r25, r24
    52cc:	21 e0       	ldi	r18, 0x01	; 1
    52ce:	2a 8b       	std	Y+18, r18	; 0x12
    52d0:	b8 01       	movw	r22, r16
    52d2:	b2 c0       	rjmp	.+356    	; 0x5438 <__mulsf3+0x1f0>
    52d4:	cd 84       	ldd	r12, Y+13	; 0x0d
    52d6:	de 84       	ldd	r13, Y+14	; 0x0e
    52d8:	ef 84       	ldd	r14, Y+15	; 0x0f
    52da:	f8 88       	ldd	r15, Y+16	; 0x10
    52dc:	0d 89       	ldd	r16, Y+21	; 0x15
    52de:	1e 89       	ldd	r17, Y+22	; 0x16
    52e0:	2f 89       	ldd	r18, Y+23	; 0x17
    52e2:	38 8d       	ldd	r19, Y+24	; 0x18
    52e4:	88 24       	eor	r8, r8
    52e6:	99 24       	eor	r9, r9
    52e8:	54 01       	movw	r10, r8
    52ea:	40 e0       	ldi	r20, 0x00	; 0
    52ec:	50 e0       	ldi	r21, 0x00	; 0
    52ee:	60 e0       	ldi	r22, 0x00	; 0
    52f0:	70 e0       	ldi	r23, 0x00	; 0
    52f2:	44 24       	eor	r4, r4
    52f4:	55 24       	eor	r5, r5
    52f6:	32 01       	movw	r6, r4
    52f8:	e0 e0       	ldi	r30, 0x00	; 0
    52fa:	f0 e0       	ldi	r31, 0x00	; 0
    52fc:	c6 01       	movw	r24, r12
    52fe:	81 70       	andi	r24, 0x01	; 1
    5300:	90 70       	andi	r25, 0x00	; 0
    5302:	89 2b       	or	r24, r25
    5304:	d9 f0       	breq	.+54     	; 0x533c <__mulsf3+0xf4>
    5306:	80 0e       	add	r8, r16
    5308:	91 1e       	adc	r9, r17
    530a:	a2 1e       	adc	r10, r18
    530c:	b3 1e       	adc	r11, r19
    530e:	db 01       	movw	r26, r22
    5310:	ca 01       	movw	r24, r20
    5312:	84 0d       	add	r24, r4
    5314:	95 1d       	adc	r25, r5
    5316:	a6 1d       	adc	r26, r6
    5318:	b7 1d       	adc	r27, r7
    531a:	40 e0       	ldi	r20, 0x00	; 0
    531c:	50 e0       	ldi	r21, 0x00	; 0
    531e:	60 e0       	ldi	r22, 0x00	; 0
    5320:	70 e0       	ldi	r23, 0x00	; 0
    5322:	80 16       	cp	r8, r16
    5324:	91 06       	cpc	r9, r17
    5326:	a2 06       	cpc	r10, r18
    5328:	b3 06       	cpc	r11, r19
    532a:	20 f4       	brcc	.+8      	; 0x5334 <__mulsf3+0xec>
    532c:	41 e0       	ldi	r20, 0x01	; 1
    532e:	50 e0       	ldi	r21, 0x00	; 0
    5330:	60 e0       	ldi	r22, 0x00	; 0
    5332:	70 e0       	ldi	r23, 0x00	; 0
    5334:	48 0f       	add	r20, r24
    5336:	59 1f       	adc	r21, r25
    5338:	6a 1f       	adc	r22, r26
    533a:	7b 1f       	adc	r23, r27
    533c:	44 0c       	add	r4, r4
    533e:	55 1c       	adc	r5, r5
    5340:	66 1c       	adc	r6, r6
    5342:	77 1c       	adc	r7, r7
    5344:	37 ff       	sbrs	r19, 7
    5346:	08 c0       	rjmp	.+16     	; 0x5358 <__mulsf3+0x110>
    5348:	81 e0       	ldi	r24, 0x01	; 1
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	a0 e0       	ldi	r26, 0x00	; 0
    534e:	b0 e0       	ldi	r27, 0x00	; 0
    5350:	48 2a       	or	r4, r24
    5352:	59 2a       	or	r5, r25
    5354:	6a 2a       	or	r6, r26
    5356:	7b 2a       	or	r7, r27
    5358:	31 96       	adiw	r30, 0x01	; 1
    535a:	e0 32       	cpi	r30, 0x20	; 32
    535c:	f1 05       	cpc	r31, r1
    535e:	49 f0       	breq	.+18     	; 0x5372 <__mulsf3+0x12a>
    5360:	00 0f       	add	r16, r16
    5362:	11 1f       	adc	r17, r17
    5364:	22 1f       	adc	r18, r18
    5366:	33 1f       	adc	r19, r19
    5368:	f6 94       	lsr	r15
    536a:	e7 94       	ror	r14
    536c:	d7 94       	ror	r13
    536e:	c7 94       	ror	r12
    5370:	c5 cf       	rjmp	.-118    	; 0x52fc <__mulsf3+0xb4>
    5372:	8b 89       	ldd	r24, Y+19	; 0x13
    5374:	9c 89       	ldd	r25, Y+20	; 0x14
    5376:	2b 85       	ldd	r18, Y+11	; 0x0b
    5378:	3c 85       	ldd	r19, Y+12	; 0x0c
    537a:	82 0f       	add	r24, r18
    537c:	93 1f       	adc	r25, r19
    537e:	02 96       	adiw	r24, 0x02	; 2
    5380:	9c 8f       	std	Y+28, r25	; 0x1c
    5382:	8b 8f       	std	Y+27, r24	; 0x1b
    5384:	1a 8e       	std	Y+26, r1	; 0x1a
    5386:	9a 85       	ldd	r25, Y+10	; 0x0a
    5388:	8a 89       	ldd	r24, Y+18	; 0x12
    538a:	98 17       	cp	r25, r24
    538c:	11 f0       	breq	.+4      	; 0x5392 <__mulsf3+0x14a>
    538e:	81 e0       	ldi	r24, 0x01	; 1
    5390:	8a 8f       	std	Y+26, r24	; 0x1a
    5392:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5394:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5396:	17 c0       	rjmp	.+46     	; 0x53c6 <__mulsf3+0x17e>
    5398:	ca 01       	movw	r24, r20
    539a:	81 70       	andi	r24, 0x01	; 1
    539c:	90 70       	andi	r25, 0x00	; 0
    539e:	89 2b       	or	r24, r25
    53a0:	61 f0       	breq	.+24     	; 0x53ba <__mulsf3+0x172>
    53a2:	b6 94       	lsr	r11
    53a4:	a7 94       	ror	r10
    53a6:	97 94       	ror	r9
    53a8:	87 94       	ror	r8
    53aa:	80 e0       	ldi	r24, 0x00	; 0
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	a0 e0       	ldi	r26, 0x00	; 0
    53b0:	b0 e8       	ldi	r27, 0x80	; 128
    53b2:	88 2a       	or	r8, r24
    53b4:	99 2a       	or	r9, r25
    53b6:	aa 2a       	or	r10, r26
    53b8:	bb 2a       	or	r11, r27
    53ba:	76 95       	lsr	r23
    53bc:	67 95       	ror	r22
    53be:	57 95       	ror	r21
    53c0:	47 95       	ror	r20
    53c2:	2f 5f       	subi	r18, 0xFF	; 255
    53c4:	3f 4f       	sbci	r19, 0xFF	; 255
    53c6:	77 fd       	sbrc	r23, 7
    53c8:	e7 cf       	rjmp	.-50     	; 0x5398 <__mulsf3+0x150>
    53ca:	c9 01       	movw	r24, r18
    53cc:	0b c0       	rjmp	.+22     	; 0x53e4 <__mulsf3+0x19c>
    53ce:	44 0f       	add	r20, r20
    53d0:	55 1f       	adc	r21, r21
    53d2:	66 1f       	adc	r22, r22
    53d4:	77 1f       	adc	r23, r23
    53d6:	b7 fc       	sbrc	r11, 7
    53d8:	41 60       	ori	r20, 0x01	; 1
    53da:	88 0c       	add	r8, r8
    53dc:	99 1c       	adc	r9, r9
    53de:	aa 1c       	adc	r10, r10
    53e0:	bb 1c       	adc	r11, r11
    53e2:	01 97       	sbiw	r24, 0x01	; 1
    53e4:	40 30       	cpi	r20, 0x00	; 0
    53e6:	a0 e0       	ldi	r26, 0x00	; 0
    53e8:	5a 07       	cpc	r21, r26
    53ea:	a0 e0       	ldi	r26, 0x00	; 0
    53ec:	6a 07       	cpc	r22, r26
    53ee:	a0 e4       	ldi	r26, 0x40	; 64
    53f0:	7a 07       	cpc	r23, r26
    53f2:	68 f3       	brcs	.-38     	; 0x53ce <__mulsf3+0x186>
    53f4:	9c 8f       	std	Y+28, r25	; 0x1c
    53f6:	8b 8f       	std	Y+27, r24	; 0x1b
    53f8:	db 01       	movw	r26, r22
    53fa:	ca 01       	movw	r24, r20
    53fc:	8f 77       	andi	r24, 0x7F	; 127
    53fe:	90 70       	andi	r25, 0x00	; 0
    5400:	a0 70       	andi	r26, 0x00	; 0
    5402:	b0 70       	andi	r27, 0x00	; 0
    5404:	80 34       	cpi	r24, 0x40	; 64
    5406:	91 05       	cpc	r25, r1
    5408:	a1 05       	cpc	r26, r1
    540a:	b1 05       	cpc	r27, r1
    540c:	61 f4       	brne	.+24     	; 0x5426 <__mulsf3+0x1de>
    540e:	47 fd       	sbrc	r20, 7
    5410:	0a c0       	rjmp	.+20     	; 0x5426 <__mulsf3+0x1de>
    5412:	81 14       	cp	r8, r1
    5414:	91 04       	cpc	r9, r1
    5416:	a1 04       	cpc	r10, r1
    5418:	b1 04       	cpc	r11, r1
    541a:	29 f0       	breq	.+10     	; 0x5426 <__mulsf3+0x1de>
    541c:	40 5c       	subi	r20, 0xC0	; 192
    541e:	5f 4f       	sbci	r21, 0xFF	; 255
    5420:	6f 4f       	sbci	r22, 0xFF	; 255
    5422:	7f 4f       	sbci	r23, 0xFF	; 255
    5424:	40 78       	andi	r20, 0x80	; 128
    5426:	4d 8f       	std	Y+29, r20	; 0x1d
    5428:	5e 8f       	std	Y+30, r21	; 0x1e
    542a:	6f 8f       	std	Y+31, r22	; 0x1f
    542c:	78 a3       	std	Y+32, r23	; 0x20
    542e:	83 e0       	ldi	r24, 0x03	; 3
    5430:	89 8f       	std	Y+25, r24	; 0x19
    5432:	be 01       	movw	r22, r28
    5434:	67 5e       	subi	r22, 0xE7	; 231
    5436:	7f 4f       	sbci	r23, 0xFF	; 255
    5438:	cb 01       	movw	r24, r22
    543a:	0e 94 21 2b 	call	0x5642	; 0x5642 <__pack_f>
    543e:	e0 e1       	ldi	r30, 0x10	; 16
    5440:	a0 96       	adiw	r28, 0x20	; 32
    5442:	0c 94 d5 2c 	jmp	0x59aa	; 0x59aa <__epilogue_restores__+0x4>

00005446 <__floatsisf>:
    5446:	a8 e0       	ldi	r26, 0x08	; 8
    5448:	b0 e0       	ldi	r27, 0x00	; 0
    544a:	e9 e2       	ldi	r30, 0x29	; 41
    544c:	fa e2       	ldi	r31, 0x2A	; 42
    544e:	0c 94 c0 2c 	jmp	0x5980	; 0x5980 <__prologue_saves__+0x12>
    5452:	9b 01       	movw	r18, r22
    5454:	ac 01       	movw	r20, r24
    5456:	83 e0       	ldi	r24, 0x03	; 3
    5458:	89 83       	std	Y+1, r24	; 0x01
    545a:	da 01       	movw	r26, r20
    545c:	c9 01       	movw	r24, r18
    545e:	88 27       	eor	r24, r24
    5460:	b7 fd       	sbrc	r27, 7
    5462:	83 95       	inc	r24
    5464:	99 27       	eor	r25, r25
    5466:	aa 27       	eor	r26, r26
    5468:	bb 27       	eor	r27, r27
    546a:	b8 2e       	mov	r11, r24
    546c:	21 15       	cp	r18, r1
    546e:	31 05       	cpc	r19, r1
    5470:	41 05       	cpc	r20, r1
    5472:	51 05       	cpc	r21, r1
    5474:	19 f4       	brne	.+6      	; 0x547c <__floatsisf+0x36>
    5476:	82 e0       	ldi	r24, 0x02	; 2
    5478:	89 83       	std	Y+1, r24	; 0x01
    547a:	3a c0       	rjmp	.+116    	; 0x54f0 <__floatsisf+0xaa>
    547c:	88 23       	and	r24, r24
    547e:	a9 f0       	breq	.+42     	; 0x54aa <__floatsisf+0x64>
    5480:	20 30       	cpi	r18, 0x00	; 0
    5482:	80 e0       	ldi	r24, 0x00	; 0
    5484:	38 07       	cpc	r19, r24
    5486:	80 e0       	ldi	r24, 0x00	; 0
    5488:	48 07       	cpc	r20, r24
    548a:	80 e8       	ldi	r24, 0x80	; 128
    548c:	58 07       	cpc	r21, r24
    548e:	29 f4       	brne	.+10     	; 0x549a <__floatsisf+0x54>
    5490:	60 e0       	ldi	r22, 0x00	; 0
    5492:	70 e0       	ldi	r23, 0x00	; 0
    5494:	80 e0       	ldi	r24, 0x00	; 0
    5496:	9f ec       	ldi	r25, 0xCF	; 207
    5498:	30 c0       	rjmp	.+96     	; 0x54fa <__floatsisf+0xb4>
    549a:	ee 24       	eor	r14, r14
    549c:	ff 24       	eor	r15, r15
    549e:	87 01       	movw	r16, r14
    54a0:	e2 1a       	sub	r14, r18
    54a2:	f3 0a       	sbc	r15, r19
    54a4:	04 0b       	sbc	r16, r20
    54a6:	15 0b       	sbc	r17, r21
    54a8:	02 c0       	rjmp	.+4      	; 0x54ae <__floatsisf+0x68>
    54aa:	79 01       	movw	r14, r18
    54ac:	8a 01       	movw	r16, r20
    54ae:	8e e1       	ldi	r24, 0x1E	; 30
    54b0:	c8 2e       	mov	r12, r24
    54b2:	d1 2c       	mov	r13, r1
    54b4:	dc 82       	std	Y+4, r13	; 0x04
    54b6:	cb 82       	std	Y+3, r12	; 0x03
    54b8:	ed 82       	std	Y+5, r14	; 0x05
    54ba:	fe 82       	std	Y+6, r15	; 0x06
    54bc:	0f 83       	std	Y+7, r16	; 0x07
    54be:	18 87       	std	Y+8, r17	; 0x08
    54c0:	c8 01       	movw	r24, r16
    54c2:	b7 01       	movw	r22, r14
    54c4:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <__clzsi2>
    54c8:	01 97       	sbiw	r24, 0x01	; 1
    54ca:	18 16       	cp	r1, r24
    54cc:	19 06       	cpc	r1, r25
    54ce:	84 f4       	brge	.+32     	; 0x54f0 <__floatsisf+0xaa>
    54d0:	08 2e       	mov	r0, r24
    54d2:	04 c0       	rjmp	.+8      	; 0x54dc <__floatsisf+0x96>
    54d4:	ee 0c       	add	r14, r14
    54d6:	ff 1c       	adc	r15, r15
    54d8:	00 1f       	adc	r16, r16
    54da:	11 1f       	adc	r17, r17
    54dc:	0a 94       	dec	r0
    54de:	d2 f7       	brpl	.-12     	; 0x54d4 <__floatsisf+0x8e>
    54e0:	ed 82       	std	Y+5, r14	; 0x05
    54e2:	fe 82       	std	Y+6, r15	; 0x06
    54e4:	0f 83       	std	Y+7, r16	; 0x07
    54e6:	18 87       	std	Y+8, r17	; 0x08
    54e8:	c8 1a       	sub	r12, r24
    54ea:	d9 0a       	sbc	r13, r25
    54ec:	dc 82       	std	Y+4, r13	; 0x04
    54ee:	cb 82       	std	Y+3, r12	; 0x03
    54f0:	ba 82       	std	Y+2, r11	; 0x02
    54f2:	ce 01       	movw	r24, r28
    54f4:	01 96       	adiw	r24, 0x01	; 1
    54f6:	0e 94 21 2b 	call	0x5642	; 0x5642 <__pack_f>
    54fa:	e9 e0       	ldi	r30, 0x09	; 9
    54fc:	28 96       	adiw	r28, 0x08	; 8
    54fe:	0c 94 dc 2c 	jmp	0x59b8	; 0x59b8 <__epilogue_restores__+0x12>

00005502 <__fixsfsi>:
    5502:	ac e0       	ldi	r26, 0x0C	; 12
    5504:	b0 e0       	ldi	r27, 0x00	; 0
    5506:	e7 e8       	ldi	r30, 0x87	; 135
    5508:	fa e2       	ldi	r31, 0x2A	; 42
    550a:	0c 94 c7 2c 	jmp	0x598e	; 0x598e <__prologue_saves__+0x20>
    550e:	69 83       	std	Y+1, r22	; 0x01
    5510:	7a 83       	std	Y+2, r23	; 0x02
    5512:	8b 83       	std	Y+3, r24	; 0x03
    5514:	9c 83       	std	Y+4, r25	; 0x04
    5516:	be 01       	movw	r22, r28
    5518:	6b 5f       	subi	r22, 0xFB	; 251
    551a:	7f 4f       	sbci	r23, 0xFF	; 255
    551c:	ce 01       	movw	r24, r28
    551e:	01 96       	adiw	r24, 0x01	; 1
    5520:	0e 94 01 2c 	call	0x5802	; 0x5802 <__unpack_f>
    5524:	8d 81       	ldd	r24, Y+5	; 0x05
    5526:	82 30       	cpi	r24, 0x02	; 2
    5528:	a9 f1       	breq	.+106    	; 0x5594 <__fixsfsi+0x92>
    552a:	82 30       	cpi	r24, 0x02	; 2
    552c:	98 f1       	brcs	.+102    	; 0x5594 <__fixsfsi+0x92>
    552e:	84 30       	cpi	r24, 0x04	; 4
    5530:	21 f4       	brne	.+8      	; 0x553a <__fixsfsi+0x38>
    5532:	8e 81       	ldd	r24, Y+6	; 0x06
    5534:	88 23       	and	r24, r24
    5536:	59 f4       	brne	.+22     	; 0x554e <__fixsfsi+0x4c>
    5538:	0f c0       	rjmp	.+30     	; 0x5558 <__fixsfsi+0x56>
    553a:	2f 81       	ldd	r18, Y+7	; 0x07
    553c:	38 85       	ldd	r19, Y+8	; 0x08
    553e:	37 fd       	sbrc	r19, 7
    5540:	29 c0       	rjmp	.+82     	; 0x5594 <__fixsfsi+0x92>
    5542:	6e 81       	ldd	r22, Y+6	; 0x06
    5544:	2f 31       	cpi	r18, 0x1F	; 31
    5546:	31 05       	cpc	r19, r1
    5548:	64 f0       	brlt	.+24     	; 0x5562 <__fixsfsi+0x60>
    554a:	66 23       	and	r22, r22
    554c:	29 f0       	breq	.+10     	; 0x5558 <__fixsfsi+0x56>
    554e:	20 e0       	ldi	r18, 0x00	; 0
    5550:	30 e0       	ldi	r19, 0x00	; 0
    5552:	40 e0       	ldi	r20, 0x00	; 0
    5554:	50 e8       	ldi	r21, 0x80	; 128
    5556:	22 c0       	rjmp	.+68     	; 0x559c <__fixsfsi+0x9a>
    5558:	2f ef       	ldi	r18, 0xFF	; 255
    555a:	3f ef       	ldi	r19, 0xFF	; 255
    555c:	4f ef       	ldi	r20, 0xFF	; 255
    555e:	5f e7       	ldi	r21, 0x7F	; 127
    5560:	1d c0       	rjmp	.+58     	; 0x559c <__fixsfsi+0x9a>
    5562:	8e e1       	ldi	r24, 0x1E	; 30
    5564:	90 e0       	ldi	r25, 0x00	; 0
    5566:	82 1b       	sub	r24, r18
    5568:	93 0b       	sbc	r25, r19
    556a:	29 85       	ldd	r18, Y+9	; 0x09
    556c:	3a 85       	ldd	r19, Y+10	; 0x0a
    556e:	4b 85       	ldd	r20, Y+11	; 0x0b
    5570:	5c 85       	ldd	r21, Y+12	; 0x0c
    5572:	04 c0       	rjmp	.+8      	; 0x557c <__fixsfsi+0x7a>
    5574:	56 95       	lsr	r21
    5576:	47 95       	ror	r20
    5578:	37 95       	ror	r19
    557a:	27 95       	ror	r18
    557c:	8a 95       	dec	r24
    557e:	d2 f7       	brpl	.-12     	; 0x5574 <__fixsfsi+0x72>
    5580:	66 23       	and	r22, r22
    5582:	61 f0       	breq	.+24     	; 0x559c <__fixsfsi+0x9a>
    5584:	50 95       	com	r21
    5586:	40 95       	com	r20
    5588:	30 95       	com	r19
    558a:	21 95       	neg	r18
    558c:	3f 4f       	sbci	r19, 0xFF	; 255
    558e:	4f 4f       	sbci	r20, 0xFF	; 255
    5590:	5f 4f       	sbci	r21, 0xFF	; 255
    5592:	04 c0       	rjmp	.+8      	; 0x559c <__fixsfsi+0x9a>
    5594:	20 e0       	ldi	r18, 0x00	; 0
    5596:	30 e0       	ldi	r19, 0x00	; 0
    5598:	40 e0       	ldi	r20, 0x00	; 0
    559a:	50 e0       	ldi	r21, 0x00	; 0
    559c:	ca 01       	movw	r24, r20
    559e:	b9 01       	movw	r22, r18
    55a0:	e2 e0       	ldi	r30, 0x02	; 2
    55a2:	2c 96       	adiw	r28, 0x0c	; 12
    55a4:	0c 94 e3 2c 	jmp	0x59c6	; 0x59c6 <__epilogue_restores__+0x20>

000055a8 <__clzsi2>:
    55a8:	ef 92       	push	r14
    55aa:	ff 92       	push	r15
    55ac:	0f 93       	push	r16
    55ae:	1f 93       	push	r17
    55b0:	9b 01       	movw	r18, r22
    55b2:	ac 01       	movw	r20, r24
    55b4:	20 30       	cpi	r18, 0x00	; 0
    55b6:	80 e0       	ldi	r24, 0x00	; 0
    55b8:	38 07       	cpc	r19, r24
    55ba:	81 e0       	ldi	r24, 0x01	; 1
    55bc:	48 07       	cpc	r20, r24
    55be:	80 e0       	ldi	r24, 0x00	; 0
    55c0:	58 07       	cpc	r21, r24
    55c2:	80 f4       	brcc	.+32     	; 0x55e4 <__clzsi2+0x3c>
    55c4:	2f 3f       	cpi	r18, 0xFF	; 255
    55c6:	31 05       	cpc	r19, r1
    55c8:	41 05       	cpc	r20, r1
    55ca:	51 05       	cpc	r21, r1
    55cc:	09 f0       	breq	.+2      	; 0x55d0 <__clzsi2+0x28>
    55ce:	20 f4       	brcc	.+8      	; 0x55d8 <__clzsi2+0x30>
    55d0:	ee 24       	eor	r14, r14
    55d2:	ff 24       	eor	r15, r15
    55d4:	87 01       	movw	r16, r14
    55d6:	19 c0       	rjmp	.+50     	; 0x560a <__clzsi2+0x62>
    55d8:	68 e0       	ldi	r22, 0x08	; 8
    55da:	e6 2e       	mov	r14, r22
    55dc:	f1 2c       	mov	r15, r1
    55de:	01 2d       	mov	r16, r1
    55e0:	11 2d       	mov	r17, r1
    55e2:	13 c0       	rjmp	.+38     	; 0x560a <__clzsi2+0x62>
    55e4:	20 30       	cpi	r18, 0x00	; 0
    55e6:	80 e0       	ldi	r24, 0x00	; 0
    55e8:	38 07       	cpc	r19, r24
    55ea:	80 e0       	ldi	r24, 0x00	; 0
    55ec:	48 07       	cpc	r20, r24
    55ee:	81 e0       	ldi	r24, 0x01	; 1
    55f0:	58 07       	cpc	r21, r24
    55f2:	30 f4       	brcc	.+12     	; 0x5600 <__clzsi2+0x58>
    55f4:	90 e1       	ldi	r25, 0x10	; 16
    55f6:	e9 2e       	mov	r14, r25
    55f8:	f1 2c       	mov	r15, r1
    55fa:	01 2d       	mov	r16, r1
    55fc:	11 2d       	mov	r17, r1
    55fe:	05 c0       	rjmp	.+10     	; 0x560a <__clzsi2+0x62>
    5600:	88 e1       	ldi	r24, 0x18	; 24
    5602:	e8 2e       	mov	r14, r24
    5604:	f1 2c       	mov	r15, r1
    5606:	01 2d       	mov	r16, r1
    5608:	11 2d       	mov	r17, r1
    560a:	80 e2       	ldi	r24, 0x20	; 32
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	a0 e0       	ldi	r26, 0x00	; 0
    5610:	b0 e0       	ldi	r27, 0x00	; 0
    5612:	8e 19       	sub	r24, r14
    5614:	9f 09       	sbc	r25, r15
    5616:	a0 0b       	sbc	r26, r16
    5618:	b1 0b       	sbc	r27, r17
    561a:	04 c0       	rjmp	.+8      	; 0x5624 <__clzsi2+0x7c>
    561c:	56 95       	lsr	r21
    561e:	47 95       	ror	r20
    5620:	37 95       	ror	r19
    5622:	27 95       	ror	r18
    5624:	ea 94       	dec	r14
    5626:	d2 f7       	brpl	.-12     	; 0x561c <__clzsi2+0x74>
    5628:	f9 01       	movw	r30, r18
    562a:	e0 5e       	subi	r30, 0xE0	; 224
    562c:	fd 4f       	sbci	r31, 0xFD	; 253
    562e:	20 81       	ld	r18, Z
    5630:	82 1b       	sub	r24, r18
    5632:	91 09       	sbc	r25, r1
    5634:	a1 09       	sbc	r26, r1
    5636:	b1 09       	sbc	r27, r1
    5638:	1f 91       	pop	r17
    563a:	0f 91       	pop	r16
    563c:	ff 90       	pop	r15
    563e:	ef 90       	pop	r14
    5640:	08 95       	ret

00005642 <__pack_f>:
    5642:	9f 92       	push	r9
    5644:	af 92       	push	r10
    5646:	bf 92       	push	r11
    5648:	cf 92       	push	r12
    564a:	df 92       	push	r13
    564c:	ef 92       	push	r14
    564e:	ff 92       	push	r15
    5650:	0f 93       	push	r16
    5652:	1f 93       	push	r17
    5654:	ee 24       	eor	r14, r14
    5656:	ff 24       	eor	r15, r15
    5658:	87 01       	movw	r16, r14
    565a:	fc 01       	movw	r30, r24
    565c:	24 81       	ldd	r18, Z+4	; 0x04
    565e:	35 81       	ldd	r19, Z+5	; 0x05
    5660:	46 81       	ldd	r20, Z+6	; 0x06
    5662:	57 81       	ldd	r21, Z+7	; 0x07
    5664:	91 80       	ldd	r9, Z+1	; 0x01
    5666:	80 81       	ld	r24, Z
    5668:	82 30       	cpi	r24, 0x02	; 2
    566a:	10 f4       	brcc	.+4      	; 0x5670 <__pack_f+0x2e>
    566c:	40 61       	ori	r20, 0x10	; 16
    566e:	a2 c0       	rjmp	.+324    	; 0x57b4 <__pack_f+0x172>
    5670:	84 30       	cpi	r24, 0x04	; 4
    5672:	09 f4       	brne	.+2      	; 0x5676 <__pack_f+0x34>
    5674:	9b c0       	rjmp	.+310    	; 0x57ac <__pack_f+0x16a>
    5676:	82 30       	cpi	r24, 0x02	; 2
    5678:	29 f4       	brne	.+10     	; 0x5684 <__pack_f+0x42>
    567a:	20 e0       	ldi	r18, 0x00	; 0
    567c:	30 e0       	ldi	r19, 0x00	; 0
    567e:	40 e0       	ldi	r20, 0x00	; 0
    5680:	50 e0       	ldi	r21, 0x00	; 0
    5682:	05 c0       	rjmp	.+10     	; 0x568e <__pack_f+0x4c>
    5684:	21 15       	cp	r18, r1
    5686:	31 05       	cpc	r19, r1
    5688:	41 05       	cpc	r20, r1
    568a:	51 05       	cpc	r21, r1
    568c:	19 f4       	brne	.+6      	; 0x5694 <__pack_f+0x52>
    568e:	e0 e0       	ldi	r30, 0x00	; 0
    5690:	f0 e0       	ldi	r31, 0x00	; 0
    5692:	92 c0       	rjmp	.+292    	; 0x57b8 <__pack_f+0x176>
    5694:	82 81       	ldd	r24, Z+2	; 0x02
    5696:	93 81       	ldd	r25, Z+3	; 0x03
    5698:	6f ef       	ldi	r22, 0xFF	; 255
    569a:	82 38       	cpi	r24, 0x82	; 130
    569c:	96 07       	cpc	r25, r22
    569e:	0c f0       	brlt	.+2      	; 0x56a2 <__pack_f+0x60>
    56a0:	5a c0       	rjmp	.+180    	; 0x5756 <__pack_f+0x114>
    56a2:	62 e8       	ldi	r22, 0x82	; 130
    56a4:	7f ef       	ldi	r23, 0xFF	; 255
    56a6:	68 1b       	sub	r22, r24
    56a8:	79 0b       	sbc	r23, r25
    56aa:	6a 31       	cpi	r22, 0x1A	; 26
    56ac:	71 05       	cpc	r23, r1
    56ae:	2c f0       	brlt	.+10     	; 0x56ba <__pack_f+0x78>
    56b0:	20 e0       	ldi	r18, 0x00	; 0
    56b2:	30 e0       	ldi	r19, 0x00	; 0
    56b4:	40 e0       	ldi	r20, 0x00	; 0
    56b6:	50 e0       	ldi	r21, 0x00	; 0
    56b8:	2a c0       	rjmp	.+84     	; 0x570e <__pack_f+0xcc>
    56ba:	aa 24       	eor	r10, r10
    56bc:	bb 24       	eor	r11, r11
    56be:	65 01       	movw	r12, r10
    56c0:	81 e0       	ldi	r24, 0x01	; 1
    56c2:	90 e0       	ldi	r25, 0x00	; 0
    56c4:	a0 e0       	ldi	r26, 0x00	; 0
    56c6:	b0 e0       	ldi	r27, 0x00	; 0
    56c8:	06 2e       	mov	r0, r22
    56ca:	04 c0       	rjmp	.+8      	; 0x56d4 <__pack_f+0x92>
    56cc:	88 0f       	add	r24, r24
    56ce:	99 1f       	adc	r25, r25
    56d0:	aa 1f       	adc	r26, r26
    56d2:	bb 1f       	adc	r27, r27
    56d4:	0a 94       	dec	r0
    56d6:	d2 f7       	brpl	.-12     	; 0x56cc <__pack_f+0x8a>
    56d8:	01 97       	sbiw	r24, 0x01	; 1
    56da:	a1 09       	sbc	r26, r1
    56dc:	b1 09       	sbc	r27, r1
    56de:	82 23       	and	r24, r18
    56e0:	93 23       	and	r25, r19
    56e2:	a4 23       	and	r26, r20
    56e4:	b5 23       	and	r27, r21
    56e6:	00 97       	sbiw	r24, 0x00	; 0
    56e8:	a1 05       	cpc	r26, r1
    56ea:	b1 05       	cpc	r27, r1
    56ec:	29 f0       	breq	.+10     	; 0x56f8 <__pack_f+0xb6>
    56ee:	71 e0       	ldi	r23, 0x01	; 1
    56f0:	a7 2e       	mov	r10, r23
    56f2:	b1 2c       	mov	r11, r1
    56f4:	c1 2c       	mov	r12, r1
    56f6:	d1 2c       	mov	r13, r1
    56f8:	04 c0       	rjmp	.+8      	; 0x5702 <__pack_f+0xc0>
    56fa:	56 95       	lsr	r21
    56fc:	47 95       	ror	r20
    56fe:	37 95       	ror	r19
    5700:	27 95       	ror	r18
    5702:	6a 95       	dec	r22
    5704:	d2 f7       	brpl	.-12     	; 0x56fa <__pack_f+0xb8>
    5706:	2a 29       	or	r18, r10
    5708:	3b 29       	or	r19, r11
    570a:	4c 29       	or	r20, r12
    570c:	5d 29       	or	r21, r13
    570e:	da 01       	movw	r26, r20
    5710:	c9 01       	movw	r24, r18
    5712:	8f 77       	andi	r24, 0x7F	; 127
    5714:	90 70       	andi	r25, 0x00	; 0
    5716:	a0 70       	andi	r26, 0x00	; 0
    5718:	b0 70       	andi	r27, 0x00	; 0
    571a:	80 34       	cpi	r24, 0x40	; 64
    571c:	91 05       	cpc	r25, r1
    571e:	a1 05       	cpc	r26, r1
    5720:	b1 05       	cpc	r27, r1
    5722:	39 f4       	brne	.+14     	; 0x5732 <__pack_f+0xf0>
    5724:	27 ff       	sbrs	r18, 7
    5726:	09 c0       	rjmp	.+18     	; 0x573a <__pack_f+0xf8>
    5728:	20 5c       	subi	r18, 0xC0	; 192
    572a:	3f 4f       	sbci	r19, 0xFF	; 255
    572c:	4f 4f       	sbci	r20, 0xFF	; 255
    572e:	5f 4f       	sbci	r21, 0xFF	; 255
    5730:	04 c0       	rjmp	.+8      	; 0x573a <__pack_f+0xf8>
    5732:	21 5c       	subi	r18, 0xC1	; 193
    5734:	3f 4f       	sbci	r19, 0xFF	; 255
    5736:	4f 4f       	sbci	r20, 0xFF	; 255
    5738:	5f 4f       	sbci	r21, 0xFF	; 255
    573a:	80 e0       	ldi	r24, 0x00	; 0
    573c:	90 e0       	ldi	r25, 0x00	; 0
    573e:	20 30       	cpi	r18, 0x00	; 0
    5740:	60 e0       	ldi	r22, 0x00	; 0
    5742:	36 07       	cpc	r19, r22
    5744:	60 e0       	ldi	r22, 0x00	; 0
    5746:	46 07       	cpc	r20, r22
    5748:	60 e4       	ldi	r22, 0x40	; 64
    574a:	56 07       	cpc	r21, r22
    574c:	10 f0       	brcs	.+4      	; 0x5752 <__pack_f+0x110>
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	fc 01       	movw	r30, r24
    5754:	23 c0       	rjmp	.+70     	; 0x579c <__pack_f+0x15a>
    5756:	80 38       	cpi	r24, 0x80	; 128
    5758:	91 05       	cpc	r25, r1
    575a:	44 f5       	brge	.+80     	; 0x57ac <__pack_f+0x16a>
    575c:	fc 01       	movw	r30, r24
    575e:	e1 58       	subi	r30, 0x81	; 129
    5760:	ff 4f       	sbci	r31, 0xFF	; 255
    5762:	da 01       	movw	r26, r20
    5764:	c9 01       	movw	r24, r18
    5766:	8f 77       	andi	r24, 0x7F	; 127
    5768:	90 70       	andi	r25, 0x00	; 0
    576a:	a0 70       	andi	r26, 0x00	; 0
    576c:	b0 70       	andi	r27, 0x00	; 0
    576e:	80 34       	cpi	r24, 0x40	; 64
    5770:	91 05       	cpc	r25, r1
    5772:	a1 05       	cpc	r26, r1
    5774:	b1 05       	cpc	r27, r1
    5776:	39 f4       	brne	.+14     	; 0x5786 <__pack_f+0x144>
    5778:	27 ff       	sbrs	r18, 7
    577a:	09 c0       	rjmp	.+18     	; 0x578e <__pack_f+0x14c>
    577c:	20 5c       	subi	r18, 0xC0	; 192
    577e:	3f 4f       	sbci	r19, 0xFF	; 255
    5780:	4f 4f       	sbci	r20, 0xFF	; 255
    5782:	5f 4f       	sbci	r21, 0xFF	; 255
    5784:	04 c0       	rjmp	.+8      	; 0x578e <__pack_f+0x14c>
    5786:	21 5c       	subi	r18, 0xC1	; 193
    5788:	3f 4f       	sbci	r19, 0xFF	; 255
    578a:	4f 4f       	sbci	r20, 0xFF	; 255
    578c:	5f 4f       	sbci	r21, 0xFF	; 255
    578e:	57 ff       	sbrs	r21, 7
    5790:	05 c0       	rjmp	.+10     	; 0x579c <__pack_f+0x15a>
    5792:	56 95       	lsr	r21
    5794:	47 95       	ror	r20
    5796:	37 95       	ror	r19
    5798:	27 95       	ror	r18
    579a:	31 96       	adiw	r30, 0x01	; 1
    579c:	87 e0       	ldi	r24, 0x07	; 7
    579e:	56 95       	lsr	r21
    57a0:	47 95       	ror	r20
    57a2:	37 95       	ror	r19
    57a4:	27 95       	ror	r18
    57a6:	8a 95       	dec	r24
    57a8:	d1 f7       	brne	.-12     	; 0x579e <__pack_f+0x15c>
    57aa:	06 c0       	rjmp	.+12     	; 0x57b8 <__pack_f+0x176>
    57ac:	20 e0       	ldi	r18, 0x00	; 0
    57ae:	30 e0       	ldi	r19, 0x00	; 0
    57b0:	40 e0       	ldi	r20, 0x00	; 0
    57b2:	50 e0       	ldi	r21, 0x00	; 0
    57b4:	ef ef       	ldi	r30, 0xFF	; 255
    57b6:	f0 e0       	ldi	r31, 0x00	; 0
    57b8:	e2 2e       	mov	r14, r18
    57ba:	f3 2e       	mov	r15, r19
    57bc:	94 2f       	mov	r25, r20
    57be:	9f 77       	andi	r25, 0x7F	; 127
    57c0:	80 2f       	mov	r24, r16
    57c2:	80 78       	andi	r24, 0x80	; 128
    57c4:	89 2b       	or	r24, r25
    57c6:	9e 2f       	mov	r25, r30
    57c8:	97 95       	ror	r25
    57ca:	99 27       	eor	r25, r25
    57cc:	97 95       	ror	r25
    57ce:	8f 77       	andi	r24, 0x7F	; 127
    57d0:	08 2f       	mov	r16, r24
    57d2:	09 2b       	or	r16, r25
    57d4:	9e 2f       	mov	r25, r30
    57d6:	96 95       	lsr	r25
    57d8:	81 2f       	mov	r24, r17
    57da:	80 78       	andi	r24, 0x80	; 128
    57dc:	89 2b       	or	r24, r25
    57de:	97 94       	ror	r9
    57e0:	99 24       	eor	r9, r9
    57e2:	97 94       	ror	r9
    57e4:	8f 77       	andi	r24, 0x7F	; 127
    57e6:	18 2f       	mov	r17, r24
    57e8:	19 29       	or	r17, r9
    57ea:	c8 01       	movw	r24, r16
    57ec:	b7 01       	movw	r22, r14
    57ee:	1f 91       	pop	r17
    57f0:	0f 91       	pop	r16
    57f2:	ff 90       	pop	r15
    57f4:	ef 90       	pop	r14
    57f6:	df 90       	pop	r13
    57f8:	cf 90       	pop	r12
    57fa:	bf 90       	pop	r11
    57fc:	af 90       	pop	r10
    57fe:	9f 90       	pop	r9
    5800:	08 95       	ret

00005802 <__unpack_f>:
    5802:	cf 93       	push	r28
    5804:	df 93       	push	r29
    5806:	fc 01       	movw	r30, r24
    5808:	db 01       	movw	r26, r22
    580a:	20 81       	ld	r18, Z
    580c:	31 81       	ldd	r19, Z+1	; 0x01
    580e:	92 81       	ldd	r25, Z+2	; 0x02
    5810:	49 2f       	mov	r20, r25
    5812:	4f 77       	andi	r20, 0x7F	; 127
    5814:	50 e0       	ldi	r21, 0x00	; 0
    5816:	99 1f       	adc	r25, r25
    5818:	99 27       	eor	r25, r25
    581a:	99 1f       	adc	r25, r25
    581c:	83 81       	ldd	r24, Z+3	; 0x03
    581e:	e8 2f       	mov	r30, r24
    5820:	ee 0f       	add	r30, r30
    5822:	e9 2b       	or	r30, r25
    5824:	6e 2f       	mov	r22, r30
    5826:	70 e0       	ldi	r23, 0x00	; 0
    5828:	88 1f       	adc	r24, r24
    582a:	88 27       	eor	r24, r24
    582c:	88 1f       	adc	r24, r24
    582e:	ed 01       	movw	r28, r26
    5830:	89 83       	std	Y+1, r24	; 0x01
    5832:	ee 23       	and	r30, r30
    5834:	71 f5       	brne	.+92     	; 0x5892 <__unpack_f+0x90>
    5836:	21 15       	cp	r18, r1
    5838:	31 05       	cpc	r19, r1
    583a:	41 05       	cpc	r20, r1
    583c:	51 05       	cpc	r21, r1
    583e:	11 f4       	brne	.+4      	; 0x5844 <__unpack_f+0x42>
    5840:	82 e0       	ldi	r24, 0x02	; 2
    5842:	2f c0       	rjmp	.+94     	; 0x58a2 <__unpack_f+0xa0>
    5844:	6e 57       	subi	r22, 0x7E	; 126
    5846:	70 40       	sbci	r23, 0x00	; 0
    5848:	fd 01       	movw	r30, r26
    584a:	73 83       	std	Z+3, r23	; 0x03
    584c:	62 83       	std	Z+2, r22	; 0x02
    584e:	67 e0       	ldi	r22, 0x07	; 7
    5850:	22 0f       	add	r18, r18
    5852:	33 1f       	adc	r19, r19
    5854:	44 1f       	adc	r20, r20
    5856:	55 1f       	adc	r21, r21
    5858:	6a 95       	dec	r22
    585a:	d1 f7       	brne	.-12     	; 0x5850 <__unpack_f+0x4e>
    585c:	83 e0       	ldi	r24, 0x03	; 3
    585e:	8c 93       	st	X, r24
    5860:	0a c0       	rjmp	.+20     	; 0x5876 <__unpack_f+0x74>
    5862:	22 0f       	add	r18, r18
    5864:	33 1f       	adc	r19, r19
    5866:	44 1f       	adc	r20, r20
    5868:	55 1f       	adc	r21, r21
    586a:	ed 01       	movw	r28, r26
    586c:	8a 81       	ldd	r24, Y+2	; 0x02
    586e:	9b 81       	ldd	r25, Y+3	; 0x03
    5870:	01 97       	sbiw	r24, 0x01	; 1
    5872:	9b 83       	std	Y+3, r25	; 0x03
    5874:	8a 83       	std	Y+2, r24	; 0x02
    5876:	20 30       	cpi	r18, 0x00	; 0
    5878:	e0 e0       	ldi	r30, 0x00	; 0
    587a:	3e 07       	cpc	r19, r30
    587c:	e0 e0       	ldi	r30, 0x00	; 0
    587e:	4e 07       	cpc	r20, r30
    5880:	e0 e4       	ldi	r30, 0x40	; 64
    5882:	5e 07       	cpc	r21, r30
    5884:	70 f3       	brcs	.-36     	; 0x5862 <__unpack_f+0x60>
    5886:	ed 01       	movw	r28, r26
    5888:	2c 83       	std	Y+4, r18	; 0x04
    588a:	3d 83       	std	Y+5, r19	; 0x05
    588c:	4e 83       	std	Y+6, r20	; 0x06
    588e:	5f 83       	std	Y+7, r21	; 0x07
    5890:	25 c0       	rjmp	.+74     	; 0x58dc <__unpack_f+0xda>
    5892:	ef 3f       	cpi	r30, 0xFF	; 255
    5894:	79 f4       	brne	.+30     	; 0x58b4 <__unpack_f+0xb2>
    5896:	21 15       	cp	r18, r1
    5898:	31 05       	cpc	r19, r1
    589a:	41 05       	cpc	r20, r1
    589c:	51 05       	cpc	r21, r1
    589e:	19 f4       	brne	.+6      	; 0x58a6 <__unpack_f+0xa4>
    58a0:	84 e0       	ldi	r24, 0x04	; 4
    58a2:	8c 93       	st	X, r24
    58a4:	1b c0       	rjmp	.+54     	; 0x58dc <__unpack_f+0xda>
    58a6:	44 ff       	sbrs	r20, 4
    58a8:	03 c0       	rjmp	.+6      	; 0x58b0 <__unpack_f+0xae>
    58aa:	81 e0       	ldi	r24, 0x01	; 1
    58ac:	8c 93       	st	X, r24
    58ae:	11 c0       	rjmp	.+34     	; 0x58d2 <__unpack_f+0xd0>
    58b0:	1c 92       	st	X, r1
    58b2:	0f c0       	rjmp	.+30     	; 0x58d2 <__unpack_f+0xd0>
    58b4:	6f 57       	subi	r22, 0x7F	; 127
    58b6:	70 40       	sbci	r23, 0x00	; 0
    58b8:	ed 01       	movw	r28, r26
    58ba:	7b 83       	std	Y+3, r23	; 0x03
    58bc:	6a 83       	std	Y+2, r22	; 0x02
    58be:	83 e0       	ldi	r24, 0x03	; 3
    58c0:	8c 93       	st	X, r24
    58c2:	87 e0       	ldi	r24, 0x07	; 7
    58c4:	22 0f       	add	r18, r18
    58c6:	33 1f       	adc	r19, r19
    58c8:	44 1f       	adc	r20, r20
    58ca:	55 1f       	adc	r21, r21
    58cc:	8a 95       	dec	r24
    58ce:	d1 f7       	brne	.-12     	; 0x58c4 <__unpack_f+0xc2>
    58d0:	50 64       	ori	r21, 0x40	; 64
    58d2:	fd 01       	movw	r30, r26
    58d4:	24 83       	std	Z+4, r18	; 0x04
    58d6:	35 83       	std	Z+5, r19	; 0x05
    58d8:	46 83       	std	Z+6, r20	; 0x06
    58da:	57 83       	std	Z+7, r21	; 0x07
    58dc:	df 91       	pop	r29
    58de:	cf 91       	pop	r28
    58e0:	08 95       	ret

000058e2 <__mulsi3>:
    58e2:	62 9f       	mul	r22, r18
    58e4:	d0 01       	movw	r26, r0
    58e6:	73 9f       	mul	r23, r19
    58e8:	f0 01       	movw	r30, r0
    58ea:	82 9f       	mul	r24, r18
    58ec:	e0 0d       	add	r30, r0
    58ee:	f1 1d       	adc	r31, r1
    58f0:	64 9f       	mul	r22, r20
    58f2:	e0 0d       	add	r30, r0
    58f4:	f1 1d       	adc	r31, r1
    58f6:	92 9f       	mul	r25, r18
    58f8:	f0 0d       	add	r31, r0
    58fa:	83 9f       	mul	r24, r19
    58fc:	f0 0d       	add	r31, r0
    58fe:	74 9f       	mul	r23, r20
    5900:	f0 0d       	add	r31, r0
    5902:	65 9f       	mul	r22, r21
    5904:	f0 0d       	add	r31, r0
    5906:	99 27       	eor	r25, r25
    5908:	72 9f       	mul	r23, r18
    590a:	b0 0d       	add	r27, r0
    590c:	e1 1d       	adc	r30, r1
    590e:	f9 1f       	adc	r31, r25
    5910:	63 9f       	mul	r22, r19
    5912:	b0 0d       	add	r27, r0
    5914:	e1 1d       	adc	r30, r1
    5916:	f9 1f       	adc	r31, r25
    5918:	bd 01       	movw	r22, r26
    591a:	cf 01       	movw	r24, r30
    591c:	11 24       	eor	r1, r1
    591e:	08 95       	ret

00005920 <__udivmodhi4>:
    5920:	aa 1b       	sub	r26, r26
    5922:	bb 1b       	sub	r27, r27
    5924:	51 e1       	ldi	r21, 0x11	; 17
    5926:	07 c0       	rjmp	.+14     	; 0x5936 <__udivmodhi4_ep>

00005928 <__udivmodhi4_loop>:
    5928:	aa 1f       	adc	r26, r26
    592a:	bb 1f       	adc	r27, r27
    592c:	a6 17       	cp	r26, r22
    592e:	b7 07       	cpc	r27, r23
    5930:	10 f0       	brcs	.+4      	; 0x5936 <__udivmodhi4_ep>
    5932:	a6 1b       	sub	r26, r22
    5934:	b7 0b       	sbc	r27, r23

00005936 <__udivmodhi4_ep>:
    5936:	88 1f       	adc	r24, r24
    5938:	99 1f       	adc	r25, r25
    593a:	5a 95       	dec	r21
    593c:	a9 f7       	brne	.-22     	; 0x5928 <__udivmodhi4_loop>
    593e:	80 95       	com	r24
    5940:	90 95       	com	r25
    5942:	bc 01       	movw	r22, r24
    5944:	cd 01       	movw	r24, r26
    5946:	08 95       	ret

00005948 <__divmodhi4>:
    5948:	97 fb       	bst	r25, 7
    594a:	09 2e       	mov	r0, r25
    594c:	07 26       	eor	r0, r23
    594e:	0a d0       	rcall	.+20     	; 0x5964 <__divmodhi4_neg1>
    5950:	77 fd       	sbrc	r23, 7
    5952:	04 d0       	rcall	.+8      	; 0x595c <__divmodhi4_neg2>
    5954:	e5 df       	rcall	.-54     	; 0x5920 <__udivmodhi4>
    5956:	06 d0       	rcall	.+12     	; 0x5964 <__divmodhi4_neg1>
    5958:	00 20       	and	r0, r0
    595a:	1a f4       	brpl	.+6      	; 0x5962 <__divmodhi4_exit>

0000595c <__divmodhi4_neg2>:
    595c:	70 95       	com	r23
    595e:	61 95       	neg	r22
    5960:	7f 4f       	sbci	r23, 0xFF	; 255

00005962 <__divmodhi4_exit>:
    5962:	08 95       	ret

00005964 <__divmodhi4_neg1>:
    5964:	f6 f7       	brtc	.-4      	; 0x5962 <__divmodhi4_exit>
    5966:	90 95       	com	r25
    5968:	81 95       	neg	r24
    596a:	9f 4f       	sbci	r25, 0xFF	; 255
    596c:	08 95       	ret

0000596e <__prologue_saves__>:
    596e:	2f 92       	push	r2
    5970:	3f 92       	push	r3
    5972:	4f 92       	push	r4
    5974:	5f 92       	push	r5
    5976:	6f 92       	push	r6
    5978:	7f 92       	push	r7
    597a:	8f 92       	push	r8
    597c:	9f 92       	push	r9
    597e:	af 92       	push	r10
    5980:	bf 92       	push	r11
    5982:	cf 92       	push	r12
    5984:	df 92       	push	r13
    5986:	ef 92       	push	r14
    5988:	ff 92       	push	r15
    598a:	0f 93       	push	r16
    598c:	1f 93       	push	r17
    598e:	cf 93       	push	r28
    5990:	df 93       	push	r29
    5992:	cd b7       	in	r28, 0x3d	; 61
    5994:	de b7       	in	r29, 0x3e	; 62
    5996:	ca 1b       	sub	r28, r26
    5998:	db 0b       	sbc	r29, r27
    599a:	0f b6       	in	r0, 0x3f	; 63
    599c:	f8 94       	cli
    599e:	de bf       	out	0x3e, r29	; 62
    59a0:	0f be       	out	0x3f, r0	; 63
    59a2:	cd bf       	out	0x3d, r28	; 61
    59a4:	19 94       	eijmp

000059a6 <__epilogue_restores__>:
    59a6:	2a 88       	ldd	r2, Y+18	; 0x12
    59a8:	39 88       	ldd	r3, Y+17	; 0x11
    59aa:	48 88       	ldd	r4, Y+16	; 0x10
    59ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    59ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    59b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    59b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    59b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    59b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    59b8:	b9 84       	ldd	r11, Y+9	; 0x09
    59ba:	c8 84       	ldd	r12, Y+8	; 0x08
    59bc:	df 80       	ldd	r13, Y+7	; 0x07
    59be:	ee 80       	ldd	r14, Y+6	; 0x06
    59c0:	fd 80       	ldd	r15, Y+5	; 0x05
    59c2:	0c 81       	ldd	r16, Y+4	; 0x04
    59c4:	1b 81       	ldd	r17, Y+3	; 0x03
    59c6:	aa 81       	ldd	r26, Y+2	; 0x02
    59c8:	b9 81       	ldd	r27, Y+1	; 0x01
    59ca:	ce 0f       	add	r28, r30
    59cc:	d1 1d       	adc	r29, r1
    59ce:	0f b6       	in	r0, 0x3f	; 63
    59d0:	f8 94       	cli
    59d2:	de bf       	out	0x3e, r29	; 62
    59d4:	0f be       	out	0x3f, r0	; 63
    59d6:	cd bf       	out	0x3d, r28	; 61
    59d8:	ed 01       	movw	r28, r26
    59da:	08 95       	ret

000059dc <do_rand>:
    59dc:	af 92       	push	r10
    59de:	bf 92       	push	r11
    59e0:	cf 92       	push	r12
    59e2:	df 92       	push	r13
    59e4:	ef 92       	push	r14
    59e6:	ff 92       	push	r15
    59e8:	0f 93       	push	r16
    59ea:	1f 93       	push	r17
    59ec:	cf 93       	push	r28
    59ee:	df 93       	push	r29
    59f0:	ec 01       	movw	r28, r24
    59f2:	68 81       	ld	r22, Y
    59f4:	79 81       	ldd	r23, Y+1	; 0x01
    59f6:	8a 81       	ldd	r24, Y+2	; 0x02
    59f8:	9b 81       	ldd	r25, Y+3	; 0x03
    59fa:	61 15       	cp	r22, r1
    59fc:	71 05       	cpc	r23, r1
    59fe:	81 05       	cpc	r24, r1
    5a00:	91 05       	cpc	r25, r1
    5a02:	21 f4       	brne	.+8      	; 0x5a0c <do_rand+0x30>
    5a04:	64 e2       	ldi	r22, 0x24	; 36
    5a06:	79 ed       	ldi	r23, 0xD9	; 217
    5a08:	8b e5       	ldi	r24, 0x5B	; 91
    5a0a:	97 e0       	ldi	r25, 0x07	; 7
    5a0c:	2d e1       	ldi	r18, 0x1D	; 29
    5a0e:	33 ef       	ldi	r19, 0xF3	; 243
    5a10:	41 e0       	ldi	r20, 0x01	; 1
    5a12:	50 e0       	ldi	r21, 0x00	; 0
    5a14:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <__divmodsi4>
    5a18:	79 01       	movw	r14, r18
    5a1a:	8a 01       	movw	r16, r20
    5a1c:	27 ea       	ldi	r18, 0xA7	; 167
    5a1e:	31 e4       	ldi	r19, 0x41	; 65
    5a20:	40 e0       	ldi	r20, 0x00	; 0
    5a22:	50 e0       	ldi	r21, 0x00	; 0
    5a24:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__mulsi3>
    5a28:	5b 01       	movw	r10, r22
    5a2a:	6c 01       	movw	r12, r24
    5a2c:	c8 01       	movw	r24, r16
    5a2e:	b7 01       	movw	r22, r14
    5a30:	2c ee       	ldi	r18, 0xEC	; 236
    5a32:	34 ef       	ldi	r19, 0xF4	; 244
    5a34:	4f ef       	ldi	r20, 0xFF	; 255
    5a36:	5f ef       	ldi	r21, 0xFF	; 255
    5a38:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__mulsi3>
    5a3c:	6a 0d       	add	r22, r10
    5a3e:	7b 1d       	adc	r23, r11
    5a40:	8c 1d       	adc	r24, r12
    5a42:	9d 1d       	adc	r25, r13
    5a44:	97 ff       	sbrs	r25, 7
    5a46:	04 c0       	rjmp	.+8      	; 0x5a50 <do_rand+0x74>
    5a48:	61 50       	subi	r22, 0x01	; 1
    5a4a:	70 40       	sbci	r23, 0x00	; 0
    5a4c:	80 40       	sbci	r24, 0x00	; 0
    5a4e:	90 48       	sbci	r25, 0x80	; 128
    5a50:	68 83       	st	Y, r22
    5a52:	79 83       	std	Y+1, r23	; 0x01
    5a54:	8a 83       	std	Y+2, r24	; 0x02
    5a56:	9b 83       	std	Y+3, r25	; 0x03
    5a58:	7f 77       	andi	r23, 0x7F	; 127
    5a5a:	cb 01       	movw	r24, r22
    5a5c:	df 91       	pop	r29
    5a5e:	cf 91       	pop	r28
    5a60:	1f 91       	pop	r17
    5a62:	0f 91       	pop	r16
    5a64:	ff 90       	pop	r15
    5a66:	ef 90       	pop	r14
    5a68:	df 90       	pop	r13
    5a6a:	cf 90       	pop	r12
    5a6c:	bf 90       	pop	r11
    5a6e:	af 90       	pop	r10
    5a70:	08 95       	ret

00005a72 <rand_r>:
    5a72:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <do_rand>
    5a76:	08 95       	ret

00005a78 <rand>:
    5a78:	80 e2       	ldi	r24, 0x20	; 32
    5a7a:	93 e0       	ldi	r25, 0x03	; 3
    5a7c:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <do_rand>
    5a80:	08 95       	ret

00005a82 <srand>:
    5a82:	a0 e0       	ldi	r26, 0x00	; 0
    5a84:	b0 e0       	ldi	r27, 0x00	; 0
    5a86:	80 93 20 03 	sts	0x0320, r24
    5a8a:	90 93 21 03 	sts	0x0321, r25
    5a8e:	a0 93 22 03 	sts	0x0322, r26
    5a92:	b0 93 23 03 	sts	0x0323, r27
    5a96:	08 95       	ret
    5a98:	f5 d0       	rcall	.+490    	; 0x5c84 <__fp_pscA>
    5a9a:	58 f0       	brcs	.+22     	; 0x5ab2 <srand+0x30>
    5a9c:	80 e8       	ldi	r24, 0x80	; 128
    5a9e:	91 e0       	ldi	r25, 0x01	; 1
    5aa0:	09 f4       	brne	.+2      	; 0x5aa4 <srand+0x22>
    5aa2:	9e ef       	ldi	r25, 0xFE	; 254
    5aa4:	f6 d0       	rcall	.+492    	; 0x5c92 <__fp_pscB>
    5aa6:	28 f0       	brcs	.+10     	; 0x5ab2 <srand+0x30>
    5aa8:	40 e8       	ldi	r20, 0x80	; 128
    5aaa:	51 e0       	ldi	r21, 0x01	; 1
    5aac:	59 f4       	brne	.+22     	; 0x5ac4 <atan2+0xe>
    5aae:	5e ef       	ldi	r21, 0xFE	; 254
    5ab0:	09 c0       	rjmp	.+18     	; 0x5ac4 <atan2+0xe>
    5ab2:	c0 c0       	rjmp	.+384    	; 0x5c34 <__fp_nan>
    5ab4:	28 c1       	rjmp	.+592    	; 0x5d06 <__fp_zero>

00005ab6 <atan2>:
    5ab6:	e9 2f       	mov	r30, r25
    5ab8:	e0 78       	andi	r30, 0x80	; 128
    5aba:	03 d1       	rcall	.+518    	; 0x5cc2 <__fp_split3>
    5abc:	68 f3       	brcs	.-38     	; 0x5a98 <srand+0x16>
    5abe:	09 2e       	mov	r0, r25
    5ac0:	05 2a       	or	r0, r21
    5ac2:	c1 f3       	breq	.-16     	; 0x5ab4 <srand+0x32>
    5ac4:	26 17       	cp	r18, r22
    5ac6:	37 07       	cpc	r19, r23
    5ac8:	48 07       	cpc	r20, r24
    5aca:	59 07       	cpc	r21, r25
    5acc:	38 f0       	brcs	.+14     	; 0x5adc <atan2+0x26>
    5ace:	0e 2e       	mov	r0, r30
    5ad0:	07 f8       	bld	r0, 7
    5ad2:	e0 25       	eor	r30, r0
    5ad4:	69 f0       	breq	.+26     	; 0x5af0 <atan2+0x3a>
    5ad6:	e0 25       	eor	r30, r0
    5ad8:	e0 64       	ori	r30, 0x40	; 64
    5ada:	0a c0       	rjmp	.+20     	; 0x5af0 <atan2+0x3a>
    5adc:	ef 63       	ori	r30, 0x3F	; 63
    5ade:	07 f8       	bld	r0, 7
    5ae0:	00 94       	com	r0
    5ae2:	07 fa       	bst	r0, 7
    5ae4:	db 01       	movw	r26, r22
    5ae6:	b9 01       	movw	r22, r18
    5ae8:	9d 01       	movw	r18, r26
    5aea:	dc 01       	movw	r26, r24
    5aec:	ca 01       	movw	r24, r20
    5aee:	ad 01       	movw	r20, r26
    5af0:	ef 93       	push	r30
    5af2:	41 d0       	rcall	.+130    	; 0x5b76 <__divsf3_pse>
    5af4:	d5 d0       	rcall	.+426    	; 0x5ca0 <__fp_round>
    5af6:	0a d0       	rcall	.+20     	; 0x5b0c <atan>
    5af8:	5f 91       	pop	r21
    5afa:	55 23       	and	r21, r21
    5afc:	31 f0       	breq	.+12     	; 0x5b0a <atan2+0x54>
    5afe:	2b ed       	ldi	r18, 0xDB	; 219
    5b00:	3f e0       	ldi	r19, 0x0F	; 15
    5b02:	49 e4       	ldi	r20, 0x49	; 73
    5b04:	50 fd       	sbrc	r21, 0
    5b06:	49 ec       	ldi	r20, 0xC9	; 201
    5b08:	92 c1       	rjmp	.+804    	; 0x5e2e <__addsf3>
    5b0a:	08 95       	ret

00005b0c <atan>:
    5b0c:	df 93       	push	r29
    5b0e:	dd 27       	eor	r29, r29
    5b10:	b9 2f       	mov	r27, r25
    5b12:	bf 77       	andi	r27, 0x7F	; 127
    5b14:	40 e8       	ldi	r20, 0x80	; 128
    5b16:	5f e3       	ldi	r21, 0x3F	; 63
    5b18:	16 16       	cp	r1, r22
    5b1a:	17 06       	cpc	r1, r23
    5b1c:	48 07       	cpc	r20, r24
    5b1e:	5b 07       	cpc	r21, r27
    5b20:	10 f4       	brcc	.+4      	; 0x5b26 <atan+0x1a>
    5b22:	d9 2f       	mov	r29, r25
    5b24:	f7 d0       	rcall	.+494    	; 0x5d14 <inverse>
    5b26:	9f 93       	push	r25
    5b28:	8f 93       	push	r24
    5b2a:	7f 93       	push	r23
    5b2c:	6f 93       	push	r22
    5b2e:	5a d1       	rcall	.+692    	; 0x5de4 <square>
    5b30:	ee e4       	ldi	r30, 0x4E	; 78
    5b32:	f1 e0       	ldi	r31, 0x01	; 1
    5b34:	82 d0       	rcall	.+260    	; 0x5c3a <__fp_powser>
    5b36:	b4 d0       	rcall	.+360    	; 0x5ca0 <__fp_round>
    5b38:	2f 91       	pop	r18
    5b3a:	3f 91       	pop	r19
    5b3c:	4f 91       	pop	r20
    5b3e:	5f 91       	pop	r21
    5b40:	fa d0       	rcall	.+500    	; 0x5d36 <__mulsf3x>
    5b42:	dd 23       	and	r29, r29
    5b44:	49 f0       	breq	.+18     	; 0x5b58 <atan+0x4c>
    5b46:	90 58       	subi	r25, 0x80	; 128
    5b48:	a2 ea       	ldi	r26, 0xA2	; 162
    5b4a:	2a ed       	ldi	r18, 0xDA	; 218
    5b4c:	3f e0       	ldi	r19, 0x0F	; 15
    5b4e:	49 ec       	ldi	r20, 0xC9	; 201
    5b50:	5f e3       	ldi	r21, 0x3F	; 63
    5b52:	d0 78       	andi	r29, 0x80	; 128
    5b54:	5d 27       	eor	r21, r29
    5b56:	7c d1       	rcall	.+760    	; 0x5e50 <__addsf3x>
    5b58:	df 91       	pop	r29
    5b5a:	a2 c0       	rjmp	.+324    	; 0x5ca0 <__fp_round>
    5b5c:	9a d0       	rcall	.+308    	; 0x5c92 <__fp_pscB>
    5b5e:	40 f0       	brcs	.+16     	; 0x5b70 <atan+0x64>
    5b60:	91 d0       	rcall	.+290    	; 0x5c84 <__fp_pscA>
    5b62:	30 f0       	brcs	.+12     	; 0x5b70 <atan+0x64>
    5b64:	21 f4       	brne	.+8      	; 0x5b6e <atan+0x62>
    5b66:	5f 3f       	cpi	r21, 0xFF	; 255
    5b68:	19 f0       	breq	.+6      	; 0x5b70 <atan+0x64>
    5b6a:	5e c0       	rjmp	.+188    	; 0x5c28 <__fp_inf>
    5b6c:	51 11       	cpse	r21, r1
    5b6e:	cc c0       	rjmp	.+408    	; 0x5d08 <__fp_szero>
    5b70:	61 c0       	rjmp	.+194    	; 0x5c34 <__fp_nan>

00005b72 <__divsf3x>:
    5b72:	a7 d0       	rcall	.+334    	; 0x5cc2 <__fp_split3>
    5b74:	98 f3       	brcs	.-26     	; 0x5b5c <atan+0x50>

00005b76 <__divsf3_pse>:
    5b76:	99 23       	and	r25, r25
    5b78:	c9 f3       	breq	.-14     	; 0x5b6c <atan+0x60>
    5b7a:	55 23       	and	r21, r21
    5b7c:	b1 f3       	breq	.-20     	; 0x5b6a <atan+0x5e>
    5b7e:	95 1b       	sub	r25, r21
    5b80:	55 0b       	sbc	r21, r21
    5b82:	bb 27       	eor	r27, r27
    5b84:	aa 27       	eor	r26, r26
    5b86:	62 17       	cp	r22, r18
    5b88:	73 07       	cpc	r23, r19
    5b8a:	84 07       	cpc	r24, r20
    5b8c:	38 f0       	brcs	.+14     	; 0x5b9c <__divsf3_pse+0x26>
    5b8e:	9f 5f       	subi	r25, 0xFF	; 255
    5b90:	5f 4f       	sbci	r21, 0xFF	; 255
    5b92:	22 0f       	add	r18, r18
    5b94:	33 1f       	adc	r19, r19
    5b96:	44 1f       	adc	r20, r20
    5b98:	aa 1f       	adc	r26, r26
    5b9a:	a9 f3       	breq	.-22     	; 0x5b86 <__divsf3_pse+0x10>
    5b9c:	33 d0       	rcall	.+102    	; 0x5c04 <__divsf3_pse+0x8e>
    5b9e:	0e 2e       	mov	r0, r30
    5ba0:	3a f0       	brmi	.+14     	; 0x5bb0 <__divsf3_pse+0x3a>
    5ba2:	e0 e8       	ldi	r30, 0x80	; 128
    5ba4:	30 d0       	rcall	.+96     	; 0x5c06 <__divsf3_pse+0x90>
    5ba6:	91 50       	subi	r25, 0x01	; 1
    5ba8:	50 40       	sbci	r21, 0x00	; 0
    5baa:	e6 95       	lsr	r30
    5bac:	00 1c       	adc	r0, r0
    5bae:	ca f7       	brpl	.-14     	; 0x5ba2 <__divsf3_pse+0x2c>
    5bb0:	29 d0       	rcall	.+82     	; 0x5c04 <__divsf3_pse+0x8e>
    5bb2:	fe 2f       	mov	r31, r30
    5bb4:	27 d0       	rcall	.+78     	; 0x5c04 <__divsf3_pse+0x8e>
    5bb6:	66 0f       	add	r22, r22
    5bb8:	77 1f       	adc	r23, r23
    5bba:	88 1f       	adc	r24, r24
    5bbc:	bb 1f       	adc	r27, r27
    5bbe:	26 17       	cp	r18, r22
    5bc0:	37 07       	cpc	r19, r23
    5bc2:	48 07       	cpc	r20, r24
    5bc4:	ab 07       	cpc	r26, r27
    5bc6:	b0 e8       	ldi	r27, 0x80	; 128
    5bc8:	09 f0       	breq	.+2      	; 0x5bcc <__divsf3_pse+0x56>
    5bca:	bb 0b       	sbc	r27, r27
    5bcc:	80 2d       	mov	r24, r0
    5bce:	bf 01       	movw	r22, r30
    5bd0:	ff 27       	eor	r31, r31
    5bd2:	93 58       	subi	r25, 0x83	; 131
    5bd4:	5f 4f       	sbci	r21, 0xFF	; 255
    5bd6:	2a f0       	brmi	.+10     	; 0x5be2 <__divsf3_pse+0x6c>
    5bd8:	9e 3f       	cpi	r25, 0xFE	; 254
    5bda:	51 05       	cpc	r21, r1
    5bdc:	68 f0       	brcs	.+26     	; 0x5bf8 <__divsf3_pse+0x82>
    5bde:	24 c0       	rjmp	.+72     	; 0x5c28 <__fp_inf>
    5be0:	93 c0       	rjmp	.+294    	; 0x5d08 <__fp_szero>
    5be2:	5f 3f       	cpi	r21, 0xFF	; 255
    5be4:	ec f3       	brlt	.-6      	; 0x5be0 <__divsf3_pse+0x6a>
    5be6:	98 3e       	cpi	r25, 0xE8	; 232
    5be8:	dc f3       	brlt	.-10     	; 0x5be0 <__divsf3_pse+0x6a>
    5bea:	86 95       	lsr	r24
    5bec:	77 95       	ror	r23
    5bee:	67 95       	ror	r22
    5bf0:	b7 95       	ror	r27
    5bf2:	f7 95       	ror	r31
    5bf4:	9f 5f       	subi	r25, 0xFF	; 255
    5bf6:	c9 f7       	brne	.-14     	; 0x5bea <__divsf3_pse+0x74>
    5bf8:	88 0f       	add	r24, r24
    5bfa:	91 1d       	adc	r25, r1
    5bfc:	96 95       	lsr	r25
    5bfe:	87 95       	ror	r24
    5c00:	97 f9       	bld	r25, 7
    5c02:	08 95       	ret
    5c04:	e1 e0       	ldi	r30, 0x01	; 1
    5c06:	66 0f       	add	r22, r22
    5c08:	77 1f       	adc	r23, r23
    5c0a:	88 1f       	adc	r24, r24
    5c0c:	bb 1f       	adc	r27, r27
    5c0e:	62 17       	cp	r22, r18
    5c10:	73 07       	cpc	r23, r19
    5c12:	84 07       	cpc	r24, r20
    5c14:	ba 07       	cpc	r27, r26
    5c16:	20 f0       	brcs	.+8      	; 0x5c20 <__divsf3_pse+0xaa>
    5c18:	62 1b       	sub	r22, r18
    5c1a:	73 0b       	sbc	r23, r19
    5c1c:	84 0b       	sbc	r24, r20
    5c1e:	ba 0b       	sbc	r27, r26
    5c20:	ee 1f       	adc	r30, r30
    5c22:	88 f7       	brcc	.-30     	; 0x5c06 <__divsf3_pse+0x90>
    5c24:	e0 95       	com	r30
    5c26:	08 95       	ret

00005c28 <__fp_inf>:
    5c28:	97 f9       	bld	r25, 7
    5c2a:	9f 67       	ori	r25, 0x7F	; 127
    5c2c:	80 e8       	ldi	r24, 0x80	; 128
    5c2e:	70 e0       	ldi	r23, 0x00	; 0
    5c30:	60 e0       	ldi	r22, 0x00	; 0
    5c32:	08 95       	ret

00005c34 <__fp_nan>:
    5c34:	9f ef       	ldi	r25, 0xFF	; 255
    5c36:	80 ec       	ldi	r24, 0xC0	; 192
    5c38:	08 95       	ret

00005c3a <__fp_powser>:
    5c3a:	df 93       	push	r29
    5c3c:	cf 93       	push	r28
    5c3e:	1f 93       	push	r17
    5c40:	0f 93       	push	r16
    5c42:	ff 92       	push	r15
    5c44:	ef 92       	push	r14
    5c46:	df 92       	push	r13
    5c48:	7b 01       	movw	r14, r22
    5c4a:	8c 01       	movw	r16, r24
    5c4c:	68 94       	set
    5c4e:	05 c0       	rjmp	.+10     	; 0x5c5a <__fp_powser+0x20>
    5c50:	da 2e       	mov	r13, r26
    5c52:	ef 01       	movw	r28, r30
    5c54:	70 d0       	rcall	.+224    	; 0x5d36 <__mulsf3x>
    5c56:	fe 01       	movw	r30, r28
    5c58:	e8 94       	clt
    5c5a:	a5 91       	lpm	r26, Z+
    5c5c:	25 91       	lpm	r18, Z+
    5c5e:	35 91       	lpm	r19, Z+
    5c60:	45 91       	lpm	r20, Z+
    5c62:	55 91       	lpm	r21, Z+
    5c64:	ae f3       	brts	.-22     	; 0x5c50 <__fp_powser+0x16>
    5c66:	ef 01       	movw	r28, r30
    5c68:	f3 d0       	rcall	.+486    	; 0x5e50 <__addsf3x>
    5c6a:	fe 01       	movw	r30, r28
    5c6c:	97 01       	movw	r18, r14
    5c6e:	a8 01       	movw	r20, r16
    5c70:	da 94       	dec	r13
    5c72:	79 f7       	brne	.-34     	; 0x5c52 <__fp_powser+0x18>
    5c74:	df 90       	pop	r13
    5c76:	ef 90       	pop	r14
    5c78:	ff 90       	pop	r15
    5c7a:	0f 91       	pop	r16
    5c7c:	1f 91       	pop	r17
    5c7e:	cf 91       	pop	r28
    5c80:	df 91       	pop	r29
    5c82:	08 95       	ret

00005c84 <__fp_pscA>:
    5c84:	00 24       	eor	r0, r0
    5c86:	0a 94       	dec	r0
    5c88:	16 16       	cp	r1, r22
    5c8a:	17 06       	cpc	r1, r23
    5c8c:	18 06       	cpc	r1, r24
    5c8e:	09 06       	cpc	r0, r25
    5c90:	08 95       	ret

00005c92 <__fp_pscB>:
    5c92:	00 24       	eor	r0, r0
    5c94:	0a 94       	dec	r0
    5c96:	12 16       	cp	r1, r18
    5c98:	13 06       	cpc	r1, r19
    5c9a:	14 06       	cpc	r1, r20
    5c9c:	05 06       	cpc	r0, r21
    5c9e:	08 95       	ret

00005ca0 <__fp_round>:
    5ca0:	09 2e       	mov	r0, r25
    5ca2:	03 94       	inc	r0
    5ca4:	00 0c       	add	r0, r0
    5ca6:	11 f4       	brne	.+4      	; 0x5cac <__fp_round+0xc>
    5ca8:	88 23       	and	r24, r24
    5caa:	52 f0       	brmi	.+20     	; 0x5cc0 <__fp_round+0x20>
    5cac:	bb 0f       	add	r27, r27
    5cae:	40 f4       	brcc	.+16     	; 0x5cc0 <__fp_round+0x20>
    5cb0:	bf 2b       	or	r27, r31
    5cb2:	11 f4       	brne	.+4      	; 0x5cb8 <__fp_round+0x18>
    5cb4:	60 ff       	sbrs	r22, 0
    5cb6:	04 c0       	rjmp	.+8      	; 0x5cc0 <__fp_round+0x20>
    5cb8:	6f 5f       	subi	r22, 0xFF	; 255
    5cba:	7f 4f       	sbci	r23, 0xFF	; 255
    5cbc:	8f 4f       	sbci	r24, 0xFF	; 255
    5cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    5cc0:	08 95       	ret

00005cc2 <__fp_split3>:
    5cc2:	57 fd       	sbrc	r21, 7
    5cc4:	90 58       	subi	r25, 0x80	; 128
    5cc6:	44 0f       	add	r20, r20
    5cc8:	55 1f       	adc	r21, r21
    5cca:	59 f0       	breq	.+22     	; 0x5ce2 <__fp_splitA+0x10>
    5ccc:	5f 3f       	cpi	r21, 0xFF	; 255
    5cce:	71 f0       	breq	.+28     	; 0x5cec <__fp_splitA+0x1a>
    5cd0:	47 95       	ror	r20

00005cd2 <__fp_splitA>:
    5cd2:	88 0f       	add	r24, r24
    5cd4:	97 fb       	bst	r25, 7
    5cd6:	99 1f       	adc	r25, r25
    5cd8:	61 f0       	breq	.+24     	; 0x5cf2 <__fp_splitA+0x20>
    5cda:	9f 3f       	cpi	r25, 0xFF	; 255
    5cdc:	79 f0       	breq	.+30     	; 0x5cfc <__fp_splitA+0x2a>
    5cde:	87 95       	ror	r24
    5ce0:	08 95       	ret
    5ce2:	12 16       	cp	r1, r18
    5ce4:	13 06       	cpc	r1, r19
    5ce6:	14 06       	cpc	r1, r20
    5ce8:	55 1f       	adc	r21, r21
    5cea:	f2 cf       	rjmp	.-28     	; 0x5cd0 <__fp_split3+0xe>
    5cec:	46 95       	lsr	r20
    5cee:	f1 df       	rcall	.-30     	; 0x5cd2 <__fp_splitA>
    5cf0:	08 c0       	rjmp	.+16     	; 0x5d02 <__fp_splitA+0x30>
    5cf2:	16 16       	cp	r1, r22
    5cf4:	17 06       	cpc	r1, r23
    5cf6:	18 06       	cpc	r1, r24
    5cf8:	99 1f       	adc	r25, r25
    5cfa:	f1 cf       	rjmp	.-30     	; 0x5cde <__fp_splitA+0xc>
    5cfc:	86 95       	lsr	r24
    5cfe:	71 05       	cpc	r23, r1
    5d00:	61 05       	cpc	r22, r1
    5d02:	08 94       	sec
    5d04:	08 95       	ret

00005d06 <__fp_zero>:
    5d06:	e8 94       	clt

00005d08 <__fp_szero>:
    5d08:	bb 27       	eor	r27, r27
    5d0a:	66 27       	eor	r22, r22
    5d0c:	77 27       	eor	r23, r23
    5d0e:	cb 01       	movw	r24, r22
    5d10:	97 f9       	bld	r25, 7
    5d12:	08 95       	ret

00005d14 <inverse>:
    5d14:	9b 01       	movw	r18, r22
    5d16:	ac 01       	movw	r20, r24
    5d18:	60 e0       	ldi	r22, 0x00	; 0
    5d1a:	70 e0       	ldi	r23, 0x00	; 0
    5d1c:	80 e8       	ldi	r24, 0x80	; 128
    5d1e:	9f e3       	ldi	r25, 0x3F	; 63
    5d20:	ea c0       	rjmp	.+468    	; 0x5ef6 <__divsf3>
    5d22:	b0 df       	rcall	.-160    	; 0x5c84 <__fp_pscA>
    5d24:	28 f0       	brcs	.+10     	; 0x5d30 <inverse+0x1c>
    5d26:	b5 df       	rcall	.-150    	; 0x5c92 <__fp_pscB>
    5d28:	18 f0       	brcs	.+6      	; 0x5d30 <inverse+0x1c>
    5d2a:	95 23       	and	r25, r21
    5d2c:	09 f0       	breq	.+2      	; 0x5d30 <inverse+0x1c>
    5d2e:	7c cf       	rjmp	.-264    	; 0x5c28 <__fp_inf>
    5d30:	81 cf       	rjmp	.-254    	; 0x5c34 <__fp_nan>
    5d32:	11 24       	eor	r1, r1
    5d34:	e9 cf       	rjmp	.-46     	; 0x5d08 <__fp_szero>

00005d36 <__mulsf3x>:
    5d36:	c5 df       	rcall	.-118    	; 0x5cc2 <__fp_split3>
    5d38:	a0 f3       	brcs	.-24     	; 0x5d22 <inverse+0xe>

00005d3a <__mulsf3_pse>:
    5d3a:	95 9f       	mul	r25, r21
    5d3c:	d1 f3       	breq	.-12     	; 0x5d32 <inverse+0x1e>
    5d3e:	95 0f       	add	r25, r21
    5d40:	50 e0       	ldi	r21, 0x00	; 0
    5d42:	55 1f       	adc	r21, r21
    5d44:	62 9f       	mul	r22, r18
    5d46:	f0 01       	movw	r30, r0
    5d48:	72 9f       	mul	r23, r18
    5d4a:	bb 27       	eor	r27, r27
    5d4c:	f0 0d       	add	r31, r0
    5d4e:	b1 1d       	adc	r27, r1
    5d50:	63 9f       	mul	r22, r19
    5d52:	aa 27       	eor	r26, r26
    5d54:	f0 0d       	add	r31, r0
    5d56:	b1 1d       	adc	r27, r1
    5d58:	aa 1f       	adc	r26, r26
    5d5a:	64 9f       	mul	r22, r20
    5d5c:	66 27       	eor	r22, r22
    5d5e:	b0 0d       	add	r27, r0
    5d60:	a1 1d       	adc	r26, r1
    5d62:	66 1f       	adc	r22, r22
    5d64:	82 9f       	mul	r24, r18
    5d66:	22 27       	eor	r18, r18
    5d68:	b0 0d       	add	r27, r0
    5d6a:	a1 1d       	adc	r26, r1
    5d6c:	62 1f       	adc	r22, r18
    5d6e:	73 9f       	mul	r23, r19
    5d70:	b0 0d       	add	r27, r0
    5d72:	a1 1d       	adc	r26, r1
    5d74:	62 1f       	adc	r22, r18
    5d76:	83 9f       	mul	r24, r19
    5d78:	a0 0d       	add	r26, r0
    5d7a:	61 1d       	adc	r22, r1
    5d7c:	22 1f       	adc	r18, r18
    5d7e:	74 9f       	mul	r23, r20
    5d80:	33 27       	eor	r19, r19
    5d82:	a0 0d       	add	r26, r0
    5d84:	61 1d       	adc	r22, r1
    5d86:	23 1f       	adc	r18, r19
    5d88:	84 9f       	mul	r24, r20
    5d8a:	60 0d       	add	r22, r0
    5d8c:	21 1d       	adc	r18, r1
    5d8e:	82 2f       	mov	r24, r18
    5d90:	76 2f       	mov	r23, r22
    5d92:	6a 2f       	mov	r22, r26
    5d94:	11 24       	eor	r1, r1
    5d96:	9f 57       	subi	r25, 0x7F	; 127
    5d98:	50 40       	sbci	r21, 0x00	; 0
    5d9a:	8a f0       	brmi	.+34     	; 0x5dbe <__mulsf3_pse+0x84>
    5d9c:	e1 f0       	breq	.+56     	; 0x5dd6 <__mulsf3_pse+0x9c>
    5d9e:	88 23       	and	r24, r24
    5da0:	4a f0       	brmi	.+18     	; 0x5db4 <__mulsf3_pse+0x7a>
    5da2:	ee 0f       	add	r30, r30
    5da4:	ff 1f       	adc	r31, r31
    5da6:	bb 1f       	adc	r27, r27
    5da8:	66 1f       	adc	r22, r22
    5daa:	77 1f       	adc	r23, r23
    5dac:	88 1f       	adc	r24, r24
    5dae:	91 50       	subi	r25, 0x01	; 1
    5db0:	50 40       	sbci	r21, 0x00	; 0
    5db2:	a9 f7       	brne	.-22     	; 0x5d9e <__mulsf3_pse+0x64>
    5db4:	9e 3f       	cpi	r25, 0xFE	; 254
    5db6:	51 05       	cpc	r21, r1
    5db8:	70 f0       	brcs	.+28     	; 0x5dd6 <__mulsf3_pse+0x9c>
    5dba:	36 cf       	rjmp	.-404    	; 0x5c28 <__fp_inf>
    5dbc:	a5 cf       	rjmp	.-182    	; 0x5d08 <__fp_szero>
    5dbe:	5f 3f       	cpi	r21, 0xFF	; 255
    5dc0:	ec f3       	brlt	.-6      	; 0x5dbc <__mulsf3_pse+0x82>
    5dc2:	98 3e       	cpi	r25, 0xE8	; 232
    5dc4:	dc f3       	brlt	.-10     	; 0x5dbc <__mulsf3_pse+0x82>
    5dc6:	86 95       	lsr	r24
    5dc8:	77 95       	ror	r23
    5dca:	67 95       	ror	r22
    5dcc:	b7 95       	ror	r27
    5dce:	f7 95       	ror	r31
    5dd0:	e7 95       	ror	r30
    5dd2:	9f 5f       	subi	r25, 0xFF	; 255
    5dd4:	c1 f7       	brne	.-16     	; 0x5dc6 <__mulsf3_pse+0x8c>
    5dd6:	fe 2b       	or	r31, r30
    5dd8:	88 0f       	add	r24, r24
    5dda:	91 1d       	adc	r25, r1
    5ddc:	96 95       	lsr	r25
    5dde:	87 95       	ror	r24
    5de0:	97 f9       	bld	r25, 7
    5de2:	08 95       	ret

00005de4 <square>:
    5de4:	9b 01       	movw	r18, r22
    5de6:	ac 01       	movw	r20, r24
    5de8:	2f ca       	rjmp	.-2978   	; 0x5248 <__mulsf3>

00005dea <__eerd_byte_m2560>:
    5dea:	f9 99       	sbic	0x1f, 1	; 31
    5dec:	fe cf       	rjmp	.-4      	; 0x5dea <__eerd_byte_m2560>
    5dee:	92 bd       	out	0x22, r25	; 34
    5df0:	81 bd       	out	0x21, r24	; 33
    5df2:	f8 9a       	sbi	0x1f, 0	; 31
    5df4:	99 27       	eor	r25, r25
    5df6:	80 b5       	in	r24, 0x20	; 32
    5df8:	08 95       	ret

00005dfa <__eerd_word_m2560>:
    5dfa:	a8 e1       	ldi	r26, 0x18	; 24
    5dfc:	b0 e0       	ldi	r27, 0x00	; 0
    5dfe:	42 e0       	ldi	r20, 0x02	; 2
    5e00:	50 e0       	ldi	r21, 0x00	; 0
    5e02:	0c 94 7f 2f 	jmp	0x5efe	; 0x5efe <__eerd_blraw_m2560>

00005e06 <__eewr_byte_m2560>:
    5e06:	26 2f       	mov	r18, r22

00005e08 <__eewr_r18_m2560>:
    5e08:	f9 99       	sbic	0x1f, 1	; 31
    5e0a:	fe cf       	rjmp	.-4      	; 0x5e08 <__eewr_r18_m2560>
    5e0c:	1f ba       	out	0x1f, r1	; 31
    5e0e:	92 bd       	out	0x22, r25	; 34
    5e10:	81 bd       	out	0x21, r24	; 33
    5e12:	20 bd       	out	0x20, r18	; 32
    5e14:	0f b6       	in	r0, 0x3f	; 63
    5e16:	f8 94       	cli
    5e18:	fa 9a       	sbi	0x1f, 2	; 31
    5e1a:	f9 9a       	sbi	0x1f, 1	; 31
    5e1c:	0f be       	out	0x3f, r0	; 63
    5e1e:	01 96       	adiw	r24, 0x01	; 1
    5e20:	08 95       	ret

00005e22 <__eewr_word_m2560>:
    5e22:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <__eewr_byte_m2560>
    5e26:	27 2f       	mov	r18, r23
    5e28:	0c 94 04 2f 	jmp	0x5e08	; 0x5e08 <__eewr_r18_m2560>

00005e2c <__subsf3>:
    5e2c:	50 58       	subi	r21, 0x80	; 128

00005e2e <__addsf3>:
    5e2e:	bb 27       	eor	r27, r27
    5e30:	aa 27       	eor	r26, r26
    5e32:	0e d0       	rcall	.+28     	; 0x5e50 <__addsf3x>
    5e34:	35 cf       	rjmp	.-406    	; 0x5ca0 <__fp_round>
    5e36:	26 df       	rcall	.-436    	; 0x5c84 <__fp_pscA>
    5e38:	30 f0       	brcs	.+12     	; 0x5e46 <__addsf3+0x18>
    5e3a:	2b df       	rcall	.-426    	; 0x5c92 <__fp_pscB>
    5e3c:	20 f0       	brcs	.+8      	; 0x5e46 <__addsf3+0x18>
    5e3e:	31 f4       	brne	.+12     	; 0x5e4c <__addsf3+0x1e>
    5e40:	9f 3f       	cpi	r25, 0xFF	; 255
    5e42:	11 f4       	brne	.+4      	; 0x5e48 <__addsf3+0x1a>
    5e44:	1e f4       	brtc	.+6      	; 0x5e4c <__addsf3+0x1e>
    5e46:	f6 ce       	rjmp	.-532    	; 0x5c34 <__fp_nan>
    5e48:	0e f4       	brtc	.+2      	; 0x5e4c <__addsf3+0x1e>
    5e4a:	e0 95       	com	r30
    5e4c:	e7 fb       	bst	r30, 7
    5e4e:	ec ce       	rjmp	.-552    	; 0x5c28 <__fp_inf>

00005e50 <__addsf3x>:
    5e50:	e9 2f       	mov	r30, r25
    5e52:	37 df       	rcall	.-402    	; 0x5cc2 <__fp_split3>
    5e54:	80 f3       	brcs	.-32     	; 0x5e36 <__addsf3+0x8>
    5e56:	ba 17       	cp	r27, r26
    5e58:	62 07       	cpc	r22, r18
    5e5a:	73 07       	cpc	r23, r19
    5e5c:	84 07       	cpc	r24, r20
    5e5e:	95 07       	cpc	r25, r21
    5e60:	18 f0       	brcs	.+6      	; 0x5e68 <__addsf3x+0x18>
    5e62:	71 f4       	brne	.+28     	; 0x5e80 <__addsf3x+0x30>
    5e64:	9e f5       	brtc	.+102    	; 0x5ecc <__addsf3x+0x7c>
    5e66:	4f cf       	rjmp	.-354    	; 0x5d06 <__fp_zero>
    5e68:	0e f4       	brtc	.+2      	; 0x5e6c <__addsf3x+0x1c>
    5e6a:	e0 95       	com	r30
    5e6c:	0b 2e       	mov	r0, r27
    5e6e:	ba 2f       	mov	r27, r26
    5e70:	a0 2d       	mov	r26, r0
    5e72:	0b 01       	movw	r0, r22
    5e74:	b9 01       	movw	r22, r18
    5e76:	90 01       	movw	r18, r0
    5e78:	0c 01       	movw	r0, r24
    5e7a:	ca 01       	movw	r24, r20
    5e7c:	a0 01       	movw	r20, r0
    5e7e:	11 24       	eor	r1, r1
    5e80:	ff 27       	eor	r31, r31
    5e82:	59 1b       	sub	r21, r25
    5e84:	99 f0       	breq	.+38     	; 0x5eac <__addsf3x+0x5c>
    5e86:	59 3f       	cpi	r21, 0xF9	; 249
    5e88:	50 f4       	brcc	.+20     	; 0x5e9e <__addsf3x+0x4e>
    5e8a:	50 3e       	cpi	r21, 0xE0	; 224
    5e8c:	68 f1       	brcs	.+90     	; 0x5ee8 <__addsf3x+0x98>
    5e8e:	1a 16       	cp	r1, r26
    5e90:	f0 40       	sbci	r31, 0x00	; 0
    5e92:	a2 2f       	mov	r26, r18
    5e94:	23 2f       	mov	r18, r19
    5e96:	34 2f       	mov	r19, r20
    5e98:	44 27       	eor	r20, r20
    5e9a:	58 5f       	subi	r21, 0xF8	; 248
    5e9c:	f3 cf       	rjmp	.-26     	; 0x5e84 <__addsf3x+0x34>
    5e9e:	46 95       	lsr	r20
    5ea0:	37 95       	ror	r19
    5ea2:	27 95       	ror	r18
    5ea4:	a7 95       	ror	r26
    5ea6:	f0 40       	sbci	r31, 0x00	; 0
    5ea8:	53 95       	inc	r21
    5eaa:	c9 f7       	brne	.-14     	; 0x5e9e <__addsf3x+0x4e>
    5eac:	7e f4       	brtc	.+30     	; 0x5ecc <__addsf3x+0x7c>
    5eae:	1f 16       	cp	r1, r31
    5eb0:	ba 0b       	sbc	r27, r26
    5eb2:	62 0b       	sbc	r22, r18
    5eb4:	73 0b       	sbc	r23, r19
    5eb6:	84 0b       	sbc	r24, r20
    5eb8:	ba f0       	brmi	.+46     	; 0x5ee8 <__addsf3x+0x98>
    5eba:	91 50       	subi	r25, 0x01	; 1
    5ebc:	a1 f0       	breq	.+40     	; 0x5ee6 <__addsf3x+0x96>
    5ebe:	ff 0f       	add	r31, r31
    5ec0:	bb 1f       	adc	r27, r27
    5ec2:	66 1f       	adc	r22, r22
    5ec4:	77 1f       	adc	r23, r23
    5ec6:	88 1f       	adc	r24, r24
    5ec8:	c2 f7       	brpl	.-16     	; 0x5eba <__addsf3x+0x6a>
    5eca:	0e c0       	rjmp	.+28     	; 0x5ee8 <__addsf3x+0x98>
    5ecc:	ba 0f       	add	r27, r26
    5ece:	62 1f       	adc	r22, r18
    5ed0:	73 1f       	adc	r23, r19
    5ed2:	84 1f       	adc	r24, r20
    5ed4:	48 f4       	brcc	.+18     	; 0x5ee8 <__addsf3x+0x98>
    5ed6:	87 95       	ror	r24
    5ed8:	77 95       	ror	r23
    5eda:	67 95       	ror	r22
    5edc:	b7 95       	ror	r27
    5ede:	f7 95       	ror	r31
    5ee0:	9e 3f       	cpi	r25, 0xFE	; 254
    5ee2:	08 f0       	brcs	.+2      	; 0x5ee6 <__addsf3x+0x96>
    5ee4:	b3 cf       	rjmp	.-154    	; 0x5e4c <__addsf3+0x1e>
    5ee6:	93 95       	inc	r25
    5ee8:	88 0f       	add	r24, r24
    5eea:	08 f0       	brcs	.+2      	; 0x5eee <__addsf3x+0x9e>
    5eec:	99 27       	eor	r25, r25
    5eee:	ee 0f       	add	r30, r30
    5ef0:	97 95       	ror	r25
    5ef2:	87 95       	ror	r24
    5ef4:	08 95       	ret

00005ef6 <__divsf3>:
    5ef6:	3d de       	rcall	.-902    	; 0x5b72 <__divsf3x>
    5ef8:	d3 ce       	rjmp	.-602    	; 0x5ca0 <__fp_round>

00005efa <__eerd_block_m2560>:
    5efa:	dc 01       	movw	r26, r24
    5efc:	cb 01       	movw	r24, r22

00005efe <__eerd_blraw_m2560>:
    5efe:	fc 01       	movw	r30, r24
    5f00:	f9 99       	sbic	0x1f, 1	; 31
    5f02:	fe cf       	rjmp	.-4      	; 0x5f00 <__eerd_blraw_m2560+0x2>
    5f04:	06 c0       	rjmp	.+12     	; 0x5f12 <__eerd_blraw_m2560+0x14>
    5f06:	f2 bd       	out	0x22, r31	; 34
    5f08:	e1 bd       	out	0x21, r30	; 33
    5f0a:	f8 9a       	sbi	0x1f, 0	; 31
    5f0c:	31 96       	adiw	r30, 0x01	; 1
    5f0e:	00 b4       	in	r0, 0x20	; 32
    5f10:	0d 92       	st	X+, r0
    5f12:	41 50       	subi	r20, 0x01	; 1
    5f14:	50 40       	sbci	r21, 0x00	; 0
    5f16:	b8 f7       	brcc	.-18     	; 0x5f06 <__eerd_blraw_m2560+0x8>
    5f18:	08 95       	ret

00005f1a <__divmodsi4>:
    5f1a:	97 fb       	bst	r25, 7
    5f1c:	09 2e       	mov	r0, r25
    5f1e:	05 26       	eor	r0, r21
    5f20:	0e d0       	rcall	.+28     	; 0x5f3e <__divmodsi4_neg1>
    5f22:	57 fd       	sbrc	r21, 7
    5f24:	04 d0       	rcall	.+8      	; 0x5f2e <__divmodsi4_neg2>
    5f26:	14 d0       	rcall	.+40     	; 0x5f50 <__udivmodsi4>
    5f28:	0a d0       	rcall	.+20     	; 0x5f3e <__divmodsi4_neg1>
    5f2a:	00 1c       	adc	r0, r0
    5f2c:	38 f4       	brcc	.+14     	; 0x5f3c <__divmodsi4_exit>

00005f2e <__divmodsi4_neg2>:
    5f2e:	50 95       	com	r21
    5f30:	40 95       	com	r20
    5f32:	30 95       	com	r19
    5f34:	21 95       	neg	r18
    5f36:	3f 4f       	sbci	r19, 0xFF	; 255
    5f38:	4f 4f       	sbci	r20, 0xFF	; 255
    5f3a:	5f 4f       	sbci	r21, 0xFF	; 255

00005f3c <__divmodsi4_exit>:
    5f3c:	08 95       	ret

00005f3e <__divmodsi4_neg1>:
    5f3e:	f6 f7       	brtc	.-4      	; 0x5f3c <__divmodsi4_exit>
    5f40:	90 95       	com	r25
    5f42:	80 95       	com	r24
    5f44:	70 95       	com	r23
    5f46:	61 95       	neg	r22
    5f48:	7f 4f       	sbci	r23, 0xFF	; 255
    5f4a:	8f 4f       	sbci	r24, 0xFF	; 255
    5f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f4e:	08 95       	ret

00005f50 <__udivmodsi4>:
    5f50:	a1 e2       	ldi	r26, 0x21	; 33
    5f52:	1a 2e       	mov	r1, r26
    5f54:	aa 1b       	sub	r26, r26
    5f56:	bb 1b       	sub	r27, r27
    5f58:	fd 01       	movw	r30, r26
    5f5a:	0d c0       	rjmp	.+26     	; 0x5f76 <__udivmodsi4_ep>

00005f5c <__udivmodsi4_loop>:
    5f5c:	aa 1f       	adc	r26, r26
    5f5e:	bb 1f       	adc	r27, r27
    5f60:	ee 1f       	adc	r30, r30
    5f62:	ff 1f       	adc	r31, r31
    5f64:	a2 17       	cp	r26, r18
    5f66:	b3 07       	cpc	r27, r19
    5f68:	e4 07       	cpc	r30, r20
    5f6a:	f5 07       	cpc	r31, r21
    5f6c:	20 f0       	brcs	.+8      	; 0x5f76 <__udivmodsi4_ep>
    5f6e:	a2 1b       	sub	r26, r18
    5f70:	b3 0b       	sbc	r27, r19
    5f72:	e4 0b       	sbc	r30, r20
    5f74:	f5 0b       	sbc	r31, r21

00005f76 <__udivmodsi4_ep>:
    5f76:	66 1f       	adc	r22, r22
    5f78:	77 1f       	adc	r23, r23
    5f7a:	88 1f       	adc	r24, r24
    5f7c:	99 1f       	adc	r25, r25
    5f7e:	1a 94       	dec	r1
    5f80:	69 f7       	brne	.-38     	; 0x5f5c <__udivmodsi4_loop>
    5f82:	60 95       	com	r22
    5f84:	70 95       	com	r23
    5f86:	80 95       	com	r24
    5f88:	90 95       	com	r25
    5f8a:	9b 01       	movw	r18, r22
    5f8c:	ac 01       	movw	r20, r24
    5f8e:	bd 01       	movw	r22, r26
    5f90:	cf 01       	movw	r24, r30
    5f92:	08 95       	ret

00005f94 <_exit>:
    5f94:	ff cf       	rjmp	.-2      	; 0x5f94 <_exit>
