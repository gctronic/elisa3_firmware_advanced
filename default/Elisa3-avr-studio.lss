
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00005762  000057f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000247  00800324  00800324  0000591a  2**0
                  ALLOC
  3 .stab         000025ec  00000000  00000000  0000591c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000088f  00000000  00000000  00007f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b8  00000000  00000000  00008797  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001175  00000000  00000000  00008a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000047bd  00000000  00000000  00009bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000017df  00000000  00000000  0000e381  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005308  00000000  00000000  0000fb60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007e0  00000000  00000000  00014e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000010f3  00000000  00000000  00015648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001754  00000000  00000000  0001673b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000219  00000000  00000000  00017e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000190  00000000  00000000  000180a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__vector_10>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__vector_13>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__vector_15>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__vector_25>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__vector_29>
      78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      80:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__vector_32>
      84:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__vector_33>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      8c:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__vector_35>
      90:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      94:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      98:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      9c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      a8:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__vector_42>
      ac:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__vector_43>
      b0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      b4:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__vector_45>
      b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      bc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      c8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      cc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      d8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      dc:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      e4:	73 0c       	add	r7, r3
      e6:	57 0c       	add	r5, r7
      e8:	25 0c       	add	r2, r5
      ea:	e8 0c       	add	r14, r8
      ec:	b2 0c       	add	r11, r2
      ee:	db 0c       	add	r13, r11
      f0:	fc 0b       	sbc	r31, r28
      f2:	e0 0b       	sbc	r30, r16
      f4:	b3 0b       	sbc	r27, r19
      f6:	9b 0b       	sbc	r25, r27
      f8:	3c 0b       	sbc	r19, r28
      fa:	3c 0b       	sbc	r19, r28
      fc:	3c 0b       	sbc	r19, r28
      fe:	3c 0b       	sbc	r19, r28
     100:	3c 0b       	sbc	r19, r28
     102:	3c 0b       	sbc	r19, r28
     104:	8f 0b       	sbc	r24, r31
     106:	84 0b       	sbc	r24, r20
     108:	3c 0b       	sbc	r19, r28
     10a:	3c 0b       	sbc	r19, r28
     10c:	3c 0b       	sbc	r19, r28
     10e:	3c 0b       	sbc	r19, r28
     110:	3c 0b       	sbc	r19, r28
     112:	3c 0b       	sbc	r19, r28
     114:	3c 0b       	sbc	r19, r28
     116:	3c 0b       	sbc	r19, r28
     118:	3c 0b       	sbc	r19, r28
     11a:	3c 0b       	sbc	r19, r28
     11c:	3c 0b       	sbc	r19, r28
     11e:	3c 0b       	sbc	r19, r28
     120:	b3 0b       	sbc	r27, r19
     122:	25 0c       	add	r2, r5
     124:	78 0b       	sbc	r23, r24
     126:	73 0b       	sbc	r23, r19
     128:	3c 0b       	sbc	r19, r28
     12a:	3c 0b       	sbc	r19, r28
     12c:	3c 0b       	sbc	r19, r28
     12e:	3c 0b       	sbc	r19, r28
     130:	3c 0b       	sbc	r19, r28
     132:	3c 0b       	sbc	r19, r28
     134:	3c 0b       	sbc	r19, r28
     136:	3c 0b       	sbc	r19, r28
     138:	3c 0b       	sbc	r19, r28
     13a:	3c 0b       	sbc	r19, r28
     13c:	3c 0b       	sbc	r19, r28
     13e:	3c 0b       	sbc	r19, r28
     140:	b2 0c       	add	r11, r2
     142:	fc 0b       	sbc	r31, r28
     144:	3c 0b       	sbc	r19, r28
     146:	3c 0b       	sbc	r19, r28
     148:	73 0c       	add	r7, r3
     14a:	db 0c       	add	r13, r11
     14c:	9c 0c       	add	r9, r12
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 00       	.word	0x003f	; ????

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d1 e2       	ldi	r29, 0x21	; 33
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0c bf       	out	0x3c, r16	; 60

0000018c <__do_copy_data>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	e2 e6       	ldi	r30, 0x62	; 98
     194:	f7 e5       	ldi	r31, 0x57	; 87
     196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
     198:	05 90       	lpm	r0, Z+
     19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
     19c:	a4 32       	cpi	r26, 0x24	; 36
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
     1a2:	15 e0       	ldi	r17, 0x05	; 5
     1a4:	a4 e2       	ldi	r26, 0x24	; 36
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	ab 36       	cpi	r26, 0x6B	; 107
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
     1b6:	0c 94 b0 2b 	jmp	0x5760	; 0x5760 <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1be:	bf 92       	push	r11
     1c0:	cf 92       	push	r12
     1c2:	df 92       	push	r13
     1c4:	ef 92       	push	r14
     1c6:	ff 92       	push	r15
     1c8:	0f 93       	push	r16
     1ca:	1f 93       	push	r17
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;

	initPeripherals();
     1d0:	0e 94 5d 13 	call	0x26ba	; 0x26ba <initPeripherals>

	calibrateSensors();
     1d4:	0e 94 2d 20 	call	0x405a	; 0x405a <calibrateSensors>

	initBehaviors();
     1d8:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <initBehaviors>

	startTime = getTime100MicroSec();
     1dc:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <getTime100MicroSec>
     1e0:	7b 01       	movw	r14, r22
     1e2:	8c 01       	movw	r16, r24


int main(void) {

	unsigned long int startTime = 0, endTime = 0;
	unsigned char prevSelector=0;
     1e4:	cc 24       	eor	r12, r12
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
						pwm_red = 255;
     1e6:	dd 24       	eor	r13, r13
     1e8:	da 94       	dec	r13
						pwm_green = 255;
						pwm_blue = 254;
     1ea:	3e ef       	ldi	r19, 0xFE	; 254
     1ec:	b3 2e       	mov	r11, r19
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				pwm_red = rand() % 255;
     1ee:	cf ef       	ldi	r28, 0xFF	; 255
     1f0:	d0 e0       	ldi	r29, 0x00	; 0
	startTime = getTime100MicroSec();


	while(1) {

		currentSelector = getSelector();	// update selector position
     1f2:	0e 94 38 13 	call	0x2670	; 0x2670 <getSelector>
     1f6:	80 93 37 05 	sts	0x0537, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     1fa:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <readAccelXYZ>

		computeAngle();
     1fe:	0e 94 a9 24 	call	0x4952	; 0x4952 <computeAngle>
	
		endTime = getTime100MicroSec();
     202:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     206:	6e 19       	sub	r22, r14
     208:	7f 09       	sbc	r23, r15
     20a:	80 0b       	sbc	r24, r16
     20c:	91 0b       	sbc	r25, r17
     20e:	6e 31       	cpi	r22, 0x1E	; 30
     210:	2b e4       	ldi	r18, 0x4B	; 75
     212:	72 07       	cpc	r23, r18
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	82 07       	cpc	r24, r18
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	92 07       	cpc	r25, r18
     21c:	08 f0       	brcs	.+2      	; 0x220 <main+0x62>
     21e:	92 c0       	rjmp	.+292    	; 0x344 <main+0x186>

			startTime = getTime100MicroSec();
		}


		handleIRRemoteCommands();
     220:	0e 94 2a 0b 	call	0x1654	; 0x1654 <handleIRRemoteCommands>


		handleRFCommands();
     224:	0e 94 0a 06 	call	0xc14	; 0xc14 <handleRFCommands>

		if(currentSelector != 6) {
     228:	80 91 37 05 	lds	r24, 0x0537
     22c:	86 30       	cpi	r24, 0x06	; 6
     22e:	09 f0       	breq	.+2      	; 0x232 <main+0x74>
     230:	6e c0       	rjmp	.+220    	; 0x30e <main+0x150>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     232:	90 91 0f 05 	lds	r25, 0x050F
     236:	91 30       	cpi	r25, 0x01	; 1
     238:	09 f4       	brne	.+2      	; 0x23c <main+0x7e>
     23a:	aa c0       	rjmp	.+340    	; 0x390 <main+0x1d2>
     23c:	91 30       	cpi	r25, 0x01	; 1
     23e:	08 f0       	brcs	.+2      	; 0x242 <main+0x84>
     240:	92 c2       	rjmp	.+1316   	; 0x766 <main+0x5a8>
						case 0:
							setRightSpeed(0);
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	0e 94 27 19 	call	0x324e	; 0x324e <setRightSpeed>
							setLeftSpeed(0);
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 ed 18 	call	0x31da	; 0x31da <setLeftSpeed>
							turnOffGreenLeds();
     24e:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <turnOffGreenLeds>
							pwm_red=255;
     252:	d0 92 0c 02 	sts	0x020C, r13
							pwm_green=255;
     256:	d0 92 0d 02 	sts	0x020D, r13
							pwm_blue=255;
     25a:	d0 92 0e 02 	sts	0x020E, r13
							updateRedLed(pwm_red);
     25e:	8f ef       	ldi	r24, 0xFF	; 255
     260:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <updateRedLed>
							updateGreenLed(pwm_green);
     264:	80 91 0d 02 	lds	r24, 0x020D
     268:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <updateGreenLed>
							updateBlueLed(pwm_blue);
     26c:	80 91 0e 02 	lds	r24, 0x020E
     270:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <updateBlueLed>
							LED_IR1_HIGH;
     274:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     276:	45 9a       	sbi	0x08, 5	; 8
     278:	90 91 37 05 	lds	r25, 0x0537
					}
					break;
  
		}

		if(currentSelector != 0) {
     27c:	99 23       	and	r25, r25
     27e:	09 f0       	breq	.+2      	; 0x282 <main+0xc4>
     280:	5c c0       	rjmp	.+184    	; 0x33a <main+0x17c>
     282:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     284:	c8 16       	cp	r12, r24
     286:	09 f4       	brne	.+2      	; 0x28a <main+0xcc>
     288:	b4 cf       	rjmp	.-152    	; 0x1f2 <main+0x34>
			disableObstacleAvoidance();
     28a:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <disableObstacleAvoidance>
			disableCliffAvoidance();
     28e:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <disableCliffAvoidance>
			GREEN_LED0_OFF;
     292:	80 91 0b 01 	lds	r24, 0x010B
     296:	81 60       	ori	r24, 0x01	; 1
     298:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     29c:	80 91 0b 01 	lds	r24, 0x010B
     2a0:	82 60       	ori	r24, 0x02	; 2
     2a2:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     2a6:	80 91 0b 01 	lds	r24, 0x010B
     2aa:	84 60       	ori	r24, 0x04	; 4
     2ac:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     2b0:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     2b2:	80 91 0b 01 	lds	r24, 0x010B
     2b6:	80 61       	ori	r24, 0x10	; 16
     2b8:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     2bc:	80 91 0b 01 	lds	r24, 0x010B
     2c0:	80 62       	ori	r24, 0x20	; 32
     2c2:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     2c6:	80 91 0b 01 	lds	r24, 0x010B
     2ca:	80 64       	ori	r24, 0x40	; 64
     2cc:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     2d0:	80 91 0b 01 	lds	r24, 0x010B
     2d4:	80 68       	ori	r24, 0x80	; 128
     2d6:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     2da:	d0 92 0c 02 	sts	0x020C, r13
			pwm_green = 255;
     2de:	d0 92 0d 02 	sts	0x020D, r13
			pwm_blue = 255;
     2e2:	d0 92 0e 02 	sts	0x020E, r13
			updateRedLed(pwm_red);
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <updateRedLed>
			updateGreenLed(pwm_green);
     2ec:	80 91 0d 02 	lds	r24, 0x020D
     2f0:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <updateGreenLed>
			updateBlueLed(pwm_blue);
     2f4:	80 91 0e 02 	lds	r24, 0x020E
     2f8:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <updateBlueLed>
			setRightSpeed(0);
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	0e 94 27 19 	call	0x324e	; 0x324e <setRightSpeed>
			setLeftSpeed(0);
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	0e 94 ed 18 	call	0x31da	; 0x31da <setLeftSpeed>
     308:	c0 90 37 05 	lds	r12, 0x0537
     30c:	72 cf       	rjmp	.-284    	; 0x1f2 <main+0x34>


		handleRFCommands();

		if(currentSelector != 6) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
		}

		switch(currentSelector) {
     314:	90 91 37 05 	lds	r25, 0x0537
     318:	89 2f       	mov	r24, r25
     31a:	93 30       	cpi	r25, 0x03	; 3
     31c:	21 f1       	breq	.+72     	; 0x366 <main+0x1a8>
     31e:	94 30       	cpi	r25, 0x04	; 4
     320:	48 f5       	brcc	.+82     	; 0x374 <main+0x1b6>
     322:	91 30       	cpi	r25, 0x01	; 1
     324:	09 f4       	brne	.+2      	; 0x328 <main+0x16a>
     326:	b9 c1       	rjmp	.+882    	; 0x69a <main+0x4dc>
     328:	92 30       	cpi	r25, 0x02	; 2
     32a:	f8 f4       	brcc	.+62     	; 0x36a <main+0x1ac>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     32c:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <handleMotorsWithNoController>
     330:	90 91 37 05 	lds	r25, 0x0537
					}
					break;
  
		}

		if(currentSelector != 0) {
     334:	99 23       	and	r25, r25
     336:	09 f4       	brne	.+2      	; 0x33a <main+0x17c>
     338:	a4 cf       	rjmp	.-184    	; 0x282 <main+0xc4>
			handleMotorsWithSpeedController();  
     33a:	0e 94 34 18 	call	0x3068	; 0x3068 <handleMotorsWithSpeedController>
     33e:	80 91 37 05 	lds	r24, 0x0537
     342:	a0 cf       	rjmp	.-192    	; 0x284 <main+0xc6>

		computeAngle();
	
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     344:	0e 94 65 14 	call	0x28ca	; 0x28ca <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     348:	80 91 37 05 	lds	r24, 0x0537
     34c:	98 2f       	mov	r25, r24
     34e:	94 50       	subi	r25, 0x04	; 4
     350:	92 30       	cpi	r25, 0x02	; 2
     352:	08 f4       	brcc	.+2      	; 0x356 <main+0x198>
     354:	27 c2       	rjmp	.+1102   	; 0x7a4 <main+0x5e6>
				pwm_red = rand() % 255;
				pwm_green = rand() % 255;
				pwm_blue = rand() % 255;
			} else if(currentSelector==6) {
     356:	86 30       	cpi	r24, 0x06	; 6
     358:	09 f4       	brne	.+2      	; 0x35c <main+0x19e>
     35a:	ee c1       	rjmp	.+988    	; 0x738 <main+0x57a>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     35c:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <getTime100MicroSec>
     360:	7b 01       	movw	r14, r22
     362:	8c 01       	movw	r16, r24
     364:	5d cf       	rjmp	.-326    	; 0x220 <main+0x62>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     366:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <enableObstacleAvoidance>
					enableCliffAvoidance();
     36a:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <enableCliffAvoidance>
     36e:	90 91 37 05 	lds	r25, 0x0537
					break;
     372:	84 cf       	rjmp	.-248    	; 0x27c <main+0xbe>

		if(currentSelector != 6) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     374:	95 30       	cpi	r25, 0x05	; 5
     376:	09 f4       	brne	.+2      	; 0x37a <main+0x1bc>
     378:	c8 c1       	rjmp	.+912    	; 0x70a <main+0x54c>
     37a:	95 30       	cpi	r25, 0x05	; 5
     37c:	08 f4       	brcc	.+2      	; 0x380 <main+0x1c2>
     37e:	92 c1       	rjmp	.+804    	; 0x6a4 <main+0x4e6>
     380:	96 30       	cpi	r25, 0x06	; 6
     382:	09 f0       	breq	.+2      	; 0x386 <main+0x1c8>
     384:	7b cf       	rjmp	.-266    	; 0x27c <main+0xbe>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     386:	90 91 0f 05 	lds	r25, 0x050F
     38a:	91 30       	cpi	r25, 0x01	; 1
     38c:	09 f0       	breq	.+2      	; 0x390 <main+0x1d2>
     38e:	56 cf       	rjmp	.-340    	; 0x23c <main+0x7e>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     390:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <turnOnGreenLeds>
							updateRedLed(pwm_red);
     394:	80 91 0c 02 	lds	r24, 0x020C
     398:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <updateRedLed>
							updateGreenLed(pwm_green);
     39c:	80 91 0d 02 	lds	r24, 0x020D
     3a0:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <updateGreenLed>
							updateBlueLed(pwm_blue);
     3a4:	80 91 0e 02 	lds	r24, 0x020E
     3a8:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <updateBlueLed>
							LED_IR1_LOW;
     3ac:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     3ae:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     3b0:	80 91 12 05 	lds	r24, 0x0512
     3b4:	88 23       	and	r24, r24
     3b6:	09 f4       	brne	.+2      	; 0x3ba <main+0x1fc>
     3b8:	f2 c1       	rjmp	.+996    	; 0x79e <main+0x5e0>
								getDataNow = 0;	
     3ba:	10 92 12 05 	sts	0x0512, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     3be:	80 91 5f 03 	lds	r24, 0x035F
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     3c8:	80 91 60 03 	lds	r24, 0x0360
     3cc:	61 e0       	ldi	r22, 0x01	; 1
     3ce:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     3d2:	80 91 2f 03 	lds	r24, 0x032F
     3d6:	90 91 30 03 	lds	r25, 0x0330
     3da:	61 e0       	ldi	r22, 0x01	; 1
     3dc:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     3e0:	80 91 2f 03 	lds	r24, 0x032F
     3e4:	90 91 30 03 	lds	r25, 0x0330
     3e8:	89 2f       	mov	r24, r25
     3ea:	61 e0       	ldi	r22, 0x01	; 1
     3ec:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     3f0:	80 91 61 03 	lds	r24, 0x0361
     3f4:	61 e0       	ldi	r22, 0x01	; 1
     3f6:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     3fa:	80 91 62 03 	lds	r24, 0x0362
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     404:	80 91 33 03 	lds	r24, 0x0333
     408:	90 91 34 03 	lds	r25, 0x0334
     40c:	61 e0       	ldi	r22, 0x01	; 1
     40e:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     412:	80 91 33 03 	lds	r24, 0x0333
     416:	90 91 34 03 	lds	r25, 0x0334
     41a:	89 2f       	mov	r24, r25
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     422:	80 91 63 03 	lds	r24, 0x0363
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     42c:	80 91 64 03 	lds	r24, 0x0364
     430:	61 e0       	ldi	r22, 0x01	; 1
     432:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     436:	80 91 37 03 	lds	r24, 0x0337
     43a:	90 91 38 03 	lds	r25, 0x0338
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     444:	80 91 37 03 	lds	r24, 0x0337
     448:	90 91 38 03 	lds	r25, 0x0338
     44c:	89 2f       	mov	r24, r25
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     454:	80 91 65 03 	lds	r24, 0x0365
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     45e:	80 91 66 03 	lds	r24, 0x0366
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     468:	80 91 3b 03 	lds	r24, 0x033B
     46c:	90 91 3c 03 	lds	r25, 0x033C
     470:	61 e0       	ldi	r22, 0x01	; 1
     472:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     476:	80 91 3b 03 	lds	r24, 0x033B
     47a:	90 91 3c 03 	lds	r25, 0x033C
     47e:	89 2f       	mov	r24, r25
     480:	61 e0       	ldi	r22, 0x01	; 1
     482:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     486:	80 91 67 03 	lds	r24, 0x0367
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     490:	80 91 68 03 	lds	r24, 0x0368
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     49a:	80 91 3f 03 	lds	r24, 0x033F
     49e:	90 91 40 03 	lds	r25, 0x0340
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     4a8:	80 91 3f 03 	lds	r24, 0x033F
     4ac:	90 91 40 03 	lds	r25, 0x0340
     4b0:	89 2f       	mov	r24, r25
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     4b8:	80 91 69 03 	lds	r24, 0x0369
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     4c2:	80 91 6a 03 	lds	r24, 0x036A
     4c6:	61 e0       	ldi	r22, 0x01	; 1
     4c8:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     4cc:	80 91 43 03 	lds	r24, 0x0343
     4d0:	90 91 44 03 	lds	r25, 0x0344
     4d4:	61 e0       	ldi	r22, 0x01	; 1
     4d6:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     4da:	80 91 43 03 	lds	r24, 0x0343
     4de:	90 91 44 03 	lds	r25, 0x0344
     4e2:	89 2f       	mov	r24, r25
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     4ea:	80 91 6b 03 	lds	r24, 0x036B
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     4f4:	80 91 6c 03 	lds	r24, 0x036C
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     4fe:	80 91 47 03 	lds	r24, 0x0347
     502:	90 91 48 03 	lds	r25, 0x0348
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     50c:	80 91 47 03 	lds	r24, 0x0347
     510:	90 91 48 03 	lds	r25, 0x0348
     514:	89 2f       	mov	r24, r25
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     51c:	80 91 6d 03 	lds	r24, 0x036D
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     526:	80 91 6e 03 	lds	r24, 0x036E
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     530:	80 91 4b 03 	lds	r24, 0x034B
     534:	90 91 4c 03 	lds	r25, 0x034C
     538:	61 e0       	ldi	r22, 0x01	; 1
     53a:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     53e:	80 91 4b 03 	lds	r24, 0x034B
     542:	90 91 4c 03 	lds	r25, 0x034C
     546:	89 2f       	mov	r24, r25
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     54e:	80 91 6f 03 	lds	r24, 0x036F
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     558:	80 91 70 03 	lds	r24, 0x0370
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     562:	80 91 4f 03 	lds	r24, 0x034F
     566:	90 91 50 03 	lds	r25, 0x0350
     56a:	61 e0       	ldi	r22, 0x01	; 1
     56c:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     570:	80 91 4f 03 	lds	r24, 0x034F
     574:	90 91 50 03 	lds	r25, 0x0350
     578:	89 2f       	mov	r24, r25
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     580:	80 91 71 03 	lds	r24, 0x0371
     584:	61 e0       	ldi	r22, 0x01	; 1
     586:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     58a:	80 91 72 03 	lds	r24, 0x0372
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     594:	80 91 53 03 	lds	r24, 0x0353
     598:	90 91 54 03 	lds	r25, 0x0354
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     5a2:	80 91 53 03 	lds	r24, 0x0353
     5a6:	90 91 54 03 	lds	r25, 0x0354
     5aa:	89 2f       	mov	r24, r25
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     5b2:	80 91 73 03 	lds	r24, 0x0373
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     5bc:	80 91 74 03 	lds	r24, 0x0374
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     5c6:	80 91 57 03 	lds	r24, 0x0357
     5ca:	90 91 58 03 	lds	r25, 0x0358
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     5d4:	80 91 57 03 	lds	r24, 0x0357
     5d8:	90 91 58 03 	lds	r25, 0x0358
     5dc:	89 2f       	mov	r24, r25
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     5e4:	80 91 75 03 	lds	r24, 0x0375
     5e8:	61 e0       	ldi	r22, 0x01	; 1
     5ea:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     5ee:	80 91 76 03 	lds	r24, 0x0376
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     5f8:	80 91 5b 03 	lds	r24, 0x035B
     5fc:	90 91 5c 03 	lds	r25, 0x035C
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     606:	80 91 5b 03 	lds	r24, 0x035B
     60a:	90 91 5c 03 	lds	r25, 0x035C
     60e:	89 2f       	mov	r24, r25
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     616:	80 91 18 05 	lds	r24, 0x0518
     61a:	61 e0       	ldi	r22, 0x01	; 1
     61c:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
								usart0Transmit(accX>>8,1);
     620:	80 91 19 05 	lds	r24, 0x0519
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     62a:	80 91 1a 05 	lds	r24, 0x051A
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
								usart0Transmit(accY>>8,1);
     634:	80 91 1b 05 	lds	r24, 0x051B
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     63e:	80 91 1c 05 	lds	r24, 0x051C
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     648:	80 91 1d 05 	lds	r24, 0x051D
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
								usart0Transmit(irCommand,1);
     652:	80 91 13 05 	lds	r24, 0x0513
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
								usart0Transmit(currentSelector,1);
     65c:	80 91 37 05 	lds	r24, 0x0537
     660:	61 e0       	ldi	r22, 0x01	; 1
     662:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     666:	80 91 03 01 	lds	r24, 0x0103
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	80 72       	andi	r24, 0x20	; 32
     66e:	90 70       	andi	r25, 0x00	; 0
     670:	95 95       	asr	r25
     672:	87 95       	ror	r24
     674:	95 95       	asr	r25
     676:	87 95       	ror	r24
     678:	95 95       	asr	r25
     67a:	87 95       	ror	r24
     67c:	95 95       	asr	r25
     67e:	87 95       	ror	r24
     680:	95 95       	asr	r25
     682:	87 95       	ror	r24
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
								usart0Transmit(rfFlags,1);
     68a:	80 91 05 04 	lds	r24, 0x0405
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
     694:	90 91 37 05 	lds	r25, 0x0537
     698:	f1 cd       	rjmp	.-1054   	; 0x27c <main+0xbe>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     69a:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <enableObstacleAvoidance>
     69e:	90 91 37 05 	lds	r25, 0x0537
					break;
     6a2:	ec cd       	rjmp	.-1064   	; 0x27c <main+0xbe>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     6a4:	80 91 0b 01 	lds	r24, 0x010B
     6a8:	8e 7f       	andi	r24, 0xFE	; 254
     6aa:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     6ae:	80 91 0b 01 	lds	r24, 0x010B
     6b2:	8d 7f       	andi	r24, 0xFD	; 253
     6b4:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     6b8:	80 91 0b 01 	lds	r24, 0x010B
     6bc:	8b 7f       	andi	r24, 0xFB	; 251
     6be:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     6c2:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     6c4:	80 91 0b 01 	lds	r24, 0x010B
     6c8:	8f 7e       	andi	r24, 0xEF	; 239
     6ca:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     6ce:	80 91 0b 01 	lds	r24, 0x010B
     6d2:	8f 7d       	andi	r24, 0xDF	; 223
     6d4:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     6d8:	80 91 0b 01 	lds	r24, 0x010B
     6dc:	8f 7b       	andi	r24, 0xBF	; 191
     6de:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     6e2:	80 91 0b 01 	lds	r24, 0x010B
     6e6:	8f 77       	andi	r24, 0x7F	; 127
     6e8:	80 93 0b 01 	sts	0x010B, r24
					updateRedLed(pwm_red);
     6ec:	80 91 0c 02 	lds	r24, 0x020C
     6f0:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <updateRedLed>
					updateGreenLed(pwm_green);
     6f4:	80 91 0d 02 	lds	r24, 0x020D
     6f8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <updateGreenLed>
					updateBlueLed(pwm_blue);
     6fc:	80 91 0e 02 	lds	r24, 0x020E
     700:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <updateBlueLed>
     704:	90 91 37 05 	lds	r25, 0x0537
					break;
     708:	b9 cd       	rjmp	.-1166   	; 0x27c <main+0xbe>
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     70a:	80 91 0c 02 	lds	r24, 0x020C
     70e:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <updateRedLed>
					updateGreenLed(pwm_green);
     712:	80 91 0d 02 	lds	r24, 0x020D
     716:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <updateGreenLed>
					updateBlueLed(pwm_blue);
     71a:	80 91 0e 02 	lds	r24, 0x020E
     71e:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <updateBlueLed>
					enableObstacleAvoidance();
     722:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <enableObstacleAvoidance>
					setLeftSpeed(25);
     726:	89 e1       	ldi	r24, 0x19	; 25
     728:	0e 94 ed 18 	call	0x31da	; 0x31da <setLeftSpeed>
					setRightSpeed(25);
     72c:	89 e1       	ldi	r24, 0x19	; 25
     72e:	0e 94 27 19 	call	0x324e	; 0x324e <setRightSpeed>
     732:	90 91 37 05 	lds	r25, 0x0537
					break;
     736:	a2 cd       	rjmp	.-1212   	; 0x27c <main+0xbe>
			if(currentSelector==4 || currentSelector==5) {
				pwm_red = rand() % 255;
				pwm_green = rand() % 255;
				pwm_blue = rand() % 255;
			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     738:	80 91 0f 05 	lds	r24, 0x050F
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	09 f0       	breq	.+2      	; 0x742 <main+0x584>
     740:	0d ce       	rjmp	.-998    	; 0x35c <main+0x19e>
     742:	90 91 05 04 	lds	r25, 0x0405
     746:	92 30       	cpi	r25, 0x02	; 2
     748:	08 f0       	brcs	.+2      	; 0x74c <main+0x58e>
     74a:	08 ce       	rjmp	.-1008   	; 0x35c <main+0x19e>
					if(rgbState == 0) {
     74c:	90 91 08 04 	lds	r25, 0x0408
     750:	99 23       	and	r25, r25
     752:	f1 f5       	brne	.+124    	; 0x7d0 <main+0x612>
						pwm_red = 254;
     754:	b0 92 0c 02 	sts	0x020C, r11
						pwm_green = 255;
     758:	d0 92 0d 02 	sts	0x020D, r13
						pwm_blue = 255;
     75c:	d0 92 0e 02 	sts	0x020E, r13
						rgbState = 1;
     760:	80 93 08 04 	sts	0x0408, r24
     764:	fb cd       	rjmp	.-1034   	; 0x35c <main+0x19e>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     766:	92 30       	cpi	r25, 0x02	; 2
     768:	11 f0       	breq	.+4      	; 0x76e <main+0x5b0>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     76a:	98 2f       	mov	r25, r24
     76c:	87 cd       	rjmp	.-1266   	; 0x27c <main+0xbe>
     76e:	90 91 10 05 	lds	r25, 0x0510
     772:	99 23       	and	r25, r25
     774:	d1 f3       	breq	.-12     	; 0x76a <main+0x5ac>
								turnOnGreenLeds();
     776:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     77a:	60 91 03 04 	lds	r22, 0x0403
     77e:	70 91 04 04 	lds	r23, 0x0404
     782:	8e ef       	ldi	r24, 0xFE	; 254
     784:	9f e0       	ldi	r25, 0x0F	; 15
     786:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <__eewr_word_m2560>
								turnOffGreenLeds();
     78a:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     78e:	8a ea       	ldi	r24, 0xAA	; 170
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	0e 94 b5 12 	call	0x256a	; 0x256a <usart0Transmit>
								addressReceived = 0;
     796:	10 92 10 05 	sts	0x0510, r1
								menuChoice = 0;
     79a:	10 92 0f 05 	sts	0x050F, r1
     79e:	90 91 37 05 	lds	r25, 0x0537
     7a2:	6c cd       	rjmp	.-1320   	; 0x27c <main+0xbe>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				pwm_red = rand() % 255;
     7a4:	0e 94 2a 29 	call	0x5254	; 0x5254 <rand>
     7a8:	be 01       	movw	r22, r28
     7aa:	0e 94 92 28 	call	0x5124	; 0x5124 <__divmodhi4>
     7ae:	80 93 0c 02 	sts	0x020C, r24
				pwm_green = rand() % 255;
     7b2:	0e 94 2a 29 	call	0x5254	; 0x5254 <rand>
     7b6:	be 01       	movw	r22, r28
     7b8:	0e 94 92 28 	call	0x5124	; 0x5124 <__divmodhi4>
     7bc:	80 93 0d 02 	sts	0x020D, r24
				pwm_blue = rand() % 255;
     7c0:	0e 94 2a 29 	call	0x5254	; 0x5254 <rand>
     7c4:	be 01       	movw	r22, r28
     7c6:	0e 94 92 28 	call	0x5124	; 0x5124 <__divmodhi4>
     7ca:	80 93 0e 02 	sts	0x020E, r24
     7ce:	c6 cd       	rjmp	.-1140   	; 0x35c <main+0x19e>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
     7d0:	91 30       	cpi	r25, 0x01	; 1
     7d2:	61 f0       	breq	.+24     	; 0x7ec <main+0x62e>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
     7d4:	92 30       	cpi	r25, 0x02	; 2
     7d6:	09 f0       	breq	.+2      	; 0x7da <main+0x61c>
     7d8:	c1 cd       	rjmp	.-1150   	; 0x35c <main+0x19e>
						pwm_red = 255;
     7da:	d0 92 0c 02 	sts	0x020C, r13
						pwm_green = 255;
     7de:	d0 92 0d 02 	sts	0x020D, r13
						pwm_blue = 254;
     7e2:	b0 92 0e 02 	sts	0x020E, r11
						rgbState = 0;
     7e6:	10 92 08 04 	sts	0x0408, r1
     7ea:	b8 cd       	rjmp	.-1168   	; 0x35c <main+0x19e>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
     7ec:	d0 92 0c 02 	sts	0x020C, r13
						pwm_green = 254;
     7f0:	b0 92 0d 02 	sts	0x020D, r11
						pwm_blue = 255;
     7f4:	d0 92 0e 02 	sts	0x020E, r13
						rgbState = 2;
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	80 93 08 04 	sts	0x0408, r24
     7fe:	ae cd       	rjmp	.-1188   	; 0x35c <main+0x19e>

00000800 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
     804:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
     806:	0d b4       	in	r0, 0x2d	; 45
     808:	07 fc       	sbrc	r0, 7
     80a:	0a c0       	rjmp	.+20     	; 0x820 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     80c:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     80e:	37 e2       	ldi	r19, 0x27	; 39
     810:	80 31       	cpi	r24, 0x10	; 16
     812:	93 07       	cpc	r25, r19
     814:	c0 f3       	brcs	.-16     	; 0x806 <SPI_WAIT+0x6>
			spiCommError = 1;
     816:	20 93 06 04 	sts	0x0406, r18
		}
	
		if(SPSR & _BV(SPIF)) {
     81a:	0d b4       	in	r0, 0x2d	; 45
     81c:	07 fe       	sbrs	r0, 7
     81e:	f6 cf       	rjmp	.-20     	; 0x80c <SPI_WAIT+0xc>
			return;
		}
	}
}
     820:	08 95       	ret

00000822 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
     822:	84 b1       	in	r24, 0x04	; 4
     824:	80 7f       	andi	r24, 0xF0	; 240
     826:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
     828:	84 b1       	in	r24, 0x04	; 4
     82a:	87 60       	ori	r24, 0x07	; 7
     82c:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     82e:	80 e5       	ldi	r24, 0x50	; 80
     830:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
     832:	8d b5       	in	r24, 0x2d	; 45
     834:	81 60       	ori	r24, 0x01	; 1
     836:	8d bd       	out	0x2d, r24	; 45

}
     838:	08 95       	ret

0000083a <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
     83a:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
     83c:	1d bc       	out	0x2d, r1	; 45
}
     83e:	08 95       	ret

00000840 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     840:	44 23       	and	r20, r20
     842:	09 f1       	breq	.+66     	; 0x886 <SPI_ReadWrite_Block+0x46>
     844:	a6 2f       	mov	r26, r22
     846:	b7 2f       	mov	r27, r23
     848:	e8 2f       	mov	r30, r24
     84a:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
     84c:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
     84e:	21 91       	ld	r18, Z+
     850:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     852:	21 e0       	ldi	r18, 0x01	; 1
     854:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     856:	0d b4       	in	r0, 0x2d	; 45
     858:	07 fc       	sbrc	r0, 7
     85a:	0b c0       	rjmp	.+22     	; 0x872 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     85c:	2f 5f       	subi	r18, 0xFF	; 255
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
     860:	57 e2       	ldi	r21, 0x27	; 39
     862:	20 31       	cpi	r18, 0x10	; 16
     864:	35 07       	cpc	r19, r21
     866:	b8 f3       	brcs	.-18     	; 0x856 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
     868:	90 93 06 04 	sts	0x0406, r25
		}
	
		if(SPSR & _BV(SPIF)) {
     86c:	0d b4       	in	r0, 0x2d	; 45
     86e:	07 fe       	sbrs	r0, 7
     870:	f5 cf       	rjmp	.-22     	; 0x85c <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     872:	20 91 06 04 	lds	r18, 0x0406
     876:	22 23       	and	r18, r18
     878:	31 f4       	brne	.+12     	; 0x886 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
     87a:	2e b5       	in	r18, 0x2e	; 46
     87c:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     87e:	2e 2f       	mov	r18, r30
     880:	28 1b       	sub	r18, r24
     882:	24 17       	cp	r18, r20
     884:	20 f3       	brcs	.-56     	; 0x84e <SPI_ReadWrite_Block+0xe>
     886:	08 95       	ret

00000888 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     888:	66 23       	and	r22, r22
     88a:	e9 f0       	breq	.+58     	; 0x8c6 <SPI_Write_Block+0x3e>
     88c:	e8 2f       	mov	r30, r24
     88e:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
     890:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
     892:	21 91       	ld	r18, Z+
     894:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
     89a:	0d b4       	in	r0, 0x2d	; 45
     89c:	07 fc       	sbrc	r0, 7
     89e:	0b c0       	rjmp	.+22     	; 0x8b6 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     8a0:	2f 5f       	subi	r18, 0xFF	; 255
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
     8a4:	47 e2       	ldi	r20, 0x27	; 39
     8a6:	20 31       	cpi	r18, 0x10	; 16
     8a8:	34 07       	cpc	r19, r20
     8aa:	b8 f3       	brcs	.-18     	; 0x89a <SPI_Write_Block+0x12>
			spiCommError = 1;
     8ac:	90 93 06 04 	sts	0x0406, r25
		}
	
		if(SPSR & _BV(SPIF)) {
     8b0:	0d b4       	in	r0, 0x2d	; 45
     8b2:	07 fe       	sbrs	r0, 7
     8b4:	f5 cf       	rjmp	.-22     	; 0x8a0 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
     8b6:	20 91 06 04 	lds	r18, 0x0406
     8ba:	22 23       	and	r18, r18
     8bc:	21 f4       	brne	.+8      	; 0x8c6 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
     8be:	2e 2f       	mov	r18, r30
     8c0:	28 1b       	sub	r18, r24
     8c2:	26 17       	cp	r18, r22
     8c4:	30 f3       	brcs	.-52     	; 0x892 <SPI_Write_Block+0xa>
     8c6:	08 95       	ret

000008c8 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
     8c8:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
     8ce:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
     8d0:	0d b4       	in	r0, 0x2d	; 45
     8d2:	07 fc       	sbrc	r0, 7
     8d4:	0a c0       	rjmp	.+20     	; 0x8ea <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
     8d6:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
     8d8:	37 e2       	ldi	r19, 0x27	; 39
     8da:	80 31       	cpi	r24, 0x10	; 16
     8dc:	93 07       	cpc	r25, r19
     8de:	c0 f3       	brcs	.-16     	; 0x8d0 <SPI_Write_Byte+0x8>
			spiCommError = 1;
     8e0:	20 93 06 04 	sts	0x0406, r18
		}
	
		if(SPSR & _BV(SPIF)) {
     8e4:	0d b4       	in	r0, 0x2d	; 45
     8e6:	07 fe       	sbrs	r0, 7
     8e8:	f6 cf       	rjmp	.-20     	; 0x8d6 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
     8ea:	8e b5       	in	r24, 0x2e	; 46
}
     8ec:	08 95       	ret

000008ee <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	df 93       	push	r29
     8f4:	cf 93       	push	r28
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <mirf_config+0xa>
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     8fc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     8fe:	80 e2       	ldi	r24, 0x20	; 32
     900:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     904:	8d e0       	ldi	r24, 0x0D	; 13
     906:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     90a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     90c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     90e:	83 e2       	ldi	r24, 0x23	; 35
     910:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     91a:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
     91c:	80 91 03 04 	lds	r24, 0x0403
     920:	90 91 04 04 	lds	r25, 0x0404
     924:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
     926:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
     928:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     92a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     92c:	80 e3       	ldi	r24, 0x30	; 48
     92e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     932:	8e 01       	movw	r16, r28
     934:	0f 5f       	subi	r16, 0xFF	; 255
     936:	1f 4f       	sbci	r17, 0xFF	; 255
     938:	c8 01       	movw	r24, r16
     93a:	63 e0       	ldi	r22, 0x03	; 3
     93c:	0e 94 44 04 	call	0x888	; 0x888 <SPI_Write_Block>
    mirf_CSN_hi;
     940:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     942:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     944:	8a e2       	ldi	r24, 0x2A	; 42
     946:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     94a:	c8 01       	movw	r24, r16
     94c:	63 e0       	ldi	r22, 0x03	; 3
     94e:	0e 94 44 04 	call	0x888	; 0x888 <SPI_Write_Block>
    mirf_CSN_hi;
     952:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     954:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     956:	81 e2       	ldi	r24, 0x21	; 33
     958:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     962:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     964:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     966:	82 e2       	ldi	r24, 0x22	; 34
     968:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     972:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     974:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     976:	84 e2       	ldi	r24, 0x24	; 36
     978:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     97c:	82 e1       	ldi	r24, 0x12	; 18
     97e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     982:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     984:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     986:	85 e2       	ldi	r24, 0x25	; 37
     988:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     98c:	88 e2       	ldi	r24, 0x28	; 40
     98e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     992:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     994:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     996:	81 e3       	ldi	r24, 0x31	; 49
     998:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     99c:	8d e0       	ldi	r24, 0x0D	; 13
     99e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     9a2:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
     9a4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
     9a6:	80 e5       	ldi	r24, 0x50	; 80
     9a8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
     9ac:	83 e7       	ldi	r24, 0x73	; 115
     9ae:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     9b2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     9b4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     9b6:	8c e3       	ldi	r24, 0x3C	; 60
     9b8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     9c2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     9c4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     9c6:	8d e3       	ldi	r24, 0x3D	; 61
     9c8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     9cc:	86 e0       	ldi	r24, 0x06	; 6
     9ce:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     9d2:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     9d4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     9d6:	80 e2       	ldi	r24, 0x20	; 32
     9d8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     9dc:	8f e0       	ldi	r24, 0x0F	; 15
     9de:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     9e2:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	cf 91       	pop	r28
     9ec:	df 91       	pop	r29
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	08 95       	ret

000009f4 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
     9f4:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
     9f6:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
     9f8:	0e 94 77 04 	call	0x8ee	; 0x8ee <mirf_config>
}
     9fc:	08 95       	ret

000009fe <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ec 01       	movw	r28, r24
    mirf_CE_lo;
     a04:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     a06:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     a08:	8a e2       	ldi	r24, 0x2A	; 42
     a0a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     a0e:	ce 01       	movw	r24, r28
     a10:	65 e0       	ldi	r22, 0x05	; 5
     a12:	0e 94 44 04 	call	0x888	; 0x888 <SPI_Write_Block>
    mirf_CSN_hi;
     a16:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
     a18:	2c 9a       	sbi	0x05, 4	; 5
}
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
     a26:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     a28:	80 e3       	ldi	r24, 0x30	; 48
     a2a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     a2e:	ce 01       	movw	r24, r28
     a30:	65 e0       	ldi	r22, 0x05	; 5
     a32:	0e 94 44 04 	call	0x888	; 0x888 <SPI_Write_Block>
    mirf_CSN_hi;
     a36:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     a3e:	80 91 3e 05 	lds	r24, 0x053E
     a42:	88 23       	and	r24, r24
     a44:	11 f0       	breq	.+4      	; 0xa4a <mirf_data_ready+0xc>
     a46:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
     a48:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     a4a:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     a52:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
     a54:	80 74       	andi	r24, 0x40	; 64
     a56:	08 95       	ret

00000a58 <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
     a58:	df 93       	push	r29
     a5a:	cf 93       	push	r28
     a5c:	0f 92       	push	r0
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
     a62:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
     a64:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     a66:	87 e1       	ldi	r24, 0x17	; 23
     a68:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     a6c:	be 01       	movw	r22, r28
     a6e:	6f 5f       	subi	r22, 0xFF	; 255
     a70:	7f 4f       	sbci	r23, 0xFF	; 255
     a72:	cb 01       	movw	r24, r22
     a74:	41 e0       	ldi	r20, 0x01	; 1
     a76:	0e 94 20 04 	call	0x840	; 0x840 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     a7a:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     a7e:	81 70       	andi	r24, 0x01	; 1
     a80:	0f 90       	pop	r0
     a82:	cf 91       	pop	r28
     a84:	df 91       	pop	r29
     a86:	08 95       	ret

00000a88 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
     a88:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     a8a:	82 ee       	ldi	r24, 0xE2	; 226
     a8c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     a90:	28 9a       	sbi	0x05, 0	; 5

}
     a92:	08 95       	ret

00000a94 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
     a9a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     a9c:	81 e6       	ldi	r24, 0x61	; 97
     a9e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     aa2:	ce 01       	movw	r24, r28
     aa4:	be 01       	movw	r22, r28
     aa6:	4d e0       	ldi	r20, 0x0D	; 13
     aa8:	0e 94 20 04 	call	0x840	; 0x840 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     aac:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     aae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     ab0:	87 e2       	ldi	r24, 0x27	; 39
     ab2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     ab6:	80 e4       	ldi	r24, 0x40	; 64
     ab8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     abc:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     ac4:	df 93       	push	r29
     ac6:	cf 93       	push	r28
     ac8:	0f 92       	push	r0
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
     ace:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     ad0:	8f 71       	andi	r24, 0x1F	; 31
     ad2:	80 62       	ori	r24, 0x20	; 32
     ad4:	69 83       	std	Y+1, r22	; 0x01
     ad6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     ada:	69 81       	ldd	r22, Y+1	; 0x01
     adc:	86 2f       	mov	r24, r22
     ade:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     ae2:	28 9a       	sbi	0x05, 0	; 5
}
     ae4:	0f 90       	pop	r0
     ae6:	cf 91       	pop	r28
     ae8:	df 91       	pop	r29
     aea:	08 95       	ret

00000aec <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	df 93       	push	r29
     af2:	cf 93       	push	r28
     af4:	0f 92       	push	r0
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     afc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     afe:	8f 71       	andi	r24, 0x1F	; 31
     b00:	49 83       	std	Y+1, r20	; 0x01
     b02:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
     b06:	c8 01       	movw	r24, r16
     b08:	b8 01       	movw	r22, r16
     b0a:	49 81       	ldd	r20, Y+1	; 0x01
     b0c:	0e 94 20 04 	call	0x840	; 0x840 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
     b10:	28 9a       	sbi	0x05, 0	; 5
}
     b12:	0f 90       	pop	r0
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	08 95       	ret

00000b1e <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	df 93       	push	r29
     b24:	cf 93       	push	r28
     b26:	0f 92       	push	r0
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     b2e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     b30:	8f 71       	andi	r24, 0x1F	; 31
     b32:	80 62       	ori	r24, 0x20	; 32
     b34:	49 83       	std	Y+1, r20	; 0x01
     b36:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
     b3a:	c8 01       	movw	r24, r16
     b3c:	49 81       	ldd	r20, Y+1	; 0x01
     b3e:	64 2f       	mov	r22, r20
     b40:	0e 94 44 04 	call	0x888	; 0x888 <SPI_Write_Block>
    mirf_CSN_hi;
     b44:	28 9a       	sbi	0x05, 0	; 5
}
     b46:	0f 90       	pop	r0
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	08 95       	ret

00000b52 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	df 93       	push	r29
     b58:	cf 93       	push	r28
     b5a:	0f 92       	push	r0
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
     b62:	80 91 3e 05 	lds	r24, 0x053E
     b66:	88 23       	and	r24, r24
     b68:	e1 f7       	brne	.-8      	; 0xb62 <mirf_send+0x10>

    mirf_CE_lo;
     b6a:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 3e 05 	sts	0x053E, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     b72:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     b74:	80 e2       	ldi	r24, 0x20	; 32
     b76:	69 83       	std	Y+1, r22	; 0x01
     b78:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     b7c:	8a e4       	ldi	r24, 0x4A	; 74
     b7e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     b82:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
     b84:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
     b86:	81 ee       	ldi	r24, 0xE1	; 225
     b88:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
     b8c:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
     b8e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
     b90:	80 ea       	ldi	r24, 0xA0	; 160
     b92:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
     b96:	c8 01       	movw	r24, r16
     b98:	69 81       	ldd	r22, Y+1	; 0x01
     b9a:	0e 94 44 04 	call	0x888	; 0x888 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
     b9e:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
     ba0:	2c 9a       	sbi	0x05, 4	; 5
}
     ba2:	0f 90       	pop	r0
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	08 95       	ret

00000bae <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	18 2f       	mov	r17, r24
     bc2:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
     bc4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     bc6:	81 ee       	ldi	r24, 0xE1	; 225
     bc8:	99 83       	std	Y+1, r25	; 0x01
     bca:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     bce:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     bd0:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     bd2:	88 ea       	ldi	r24, 0xA8	; 168
     bd4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
     bd8:	99 81       	ldd	r25, Y+1	; 0x01
     bda:	00 23       	and	r16, r16
     bdc:	61 f0       	breq	.+24     	; 0xbf6 <writeAckPayload+0x48>
     bde:	61 2f       	mov	r22, r17
     be0:	79 2f       	mov	r23, r25
     be2:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
     be4:	f7 01       	movw	r30, r14
     be6:	81 91       	ld	r24, Z+
     be8:	7f 01       	movw	r14, r30
     bea:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
     bee:	8e 2d       	mov	r24, r14
     bf0:	81 1b       	sub	r24, r17
     bf2:	80 17       	cp	r24, r16
     bf4:	b8 f3       	brcs	.-18     	; 0xbe4 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
     bf6:	28 9a       	sbi	0x05, 0	; 5


}
     bf8:	0f 90       	pop	r0
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	08 95       	ret

00000c08 <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
     c08:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     c0a:	81 ee       	ldi	r24, 0xE1	; 225
     c0c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     c10:	28 9a       	sbi	0x05, 0	; 5

}
     c12:	08 95       	ret

00000c14 <handleRFCommands>:

void handleRFCommands() {
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     c1a:	80 91 3e 05 	lds	r24, 0x053E
     c1e:	88 23       	and	r24, r24
     c20:	21 f0       	breq	.+8      	; 0xc2a <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     c2a:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
     c2c:	8f ef       	ldi	r24, 0xFF	; 255
     c2e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
     c32:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
     c34:	86 ff       	sbrs	r24, 6
     c36:	f5 cf       	rjmp	.-22     	; 0xc22 <handleRFCommands+0xe>

		rfFlags |= 0x02;
     c38:	80 91 05 04 	lds	r24, 0x0405
     c3c:	82 60       	ori	r24, 0x02	; 2
     c3e:	80 93 05 04 	sts	0x0405, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     c42:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     c44:	87 e2       	ldi	r24, 0x27	; 39
     c46:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     c4a:	80 e7       	ldi	r24, 0x70	; 112
     c4c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     c50:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
     c52:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
     c54:	81 e6       	ldi	r24, 0x61	; 97
     c56:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
     c5a:	8b e5       	ldi	r24, 0x5B	; 91
     c5c:	95 e0       	ldi	r25, 0x05	; 5
     c5e:	bc 01       	movw	r22, r24
     c60:	4d e0       	ldi	r20, 0x0D	; 13
     c62:	0e 94 20 04 	call	0x840	; 0x840 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
     c66:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
     c68:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     c6a:	87 e2       	ldi	r24, 0x27	; 39
     c6c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    SPI_Write_Byte(value);
     c70:	80 e4       	ldi	r24, 0x40	; 64
     c72:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     c76:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
     c78:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
     c7a:	82 ee       	ldi	r24, 0xE2	; 226
     c7c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     c80:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     c82:	60 91 5b 05 	lds	r22, 0x055B
     c86:	66 23       	and	r22, r22
     c88:	09 f4       	brne	.+2      	; 0xc8c <handleRFCommands+0x78>
     c8a:	b8 c1       	rjmp	.+880    	; 0xffc <handleRFCommands+0x3e8>
     c8c:	50 91 5f 05 	lds	r21, 0x055F
     c90:	40 91 60 05 	lds	r20, 0x0560
     c94:	e0 91 5c 05 	lds	r30, 0x055C
     c98:	70 91 5d 05 	lds	r23, 0x055D

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
     c9c:	25 2f       	mov	r18, r21
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	2f 77       	andi	r18, 0x7F	; 127
     ca2:	30 70       	andi	r19, 0x00	; 0
     ca4:	30 93 02 04 	sts	0x0402, r19
     ca8:	20 93 01 04 	sts	0x0401, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
     cac:	84 2f       	mov	r24, r20
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	90 70       	andi	r25, 0x00	; 0
     cb4:	90 93 00 04 	sts	0x0400, r25
     cb8:	80 93 ff 03 	sts	0x03FF, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
     cbc:	57 fd       	sbrc	r21, 7
     cbe:	a6 c2       	rjmp	.+1356   	; 0x120c <handleRFCommands+0x5f8>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
     cc0:	22 0f       	add	r18, r18
     cc2:	33 1f       	adc	r19, r19
     cc4:	22 0f       	add	r18, r18
     cc6:	33 1f       	adc	r19, r19
     cc8:	30 95       	com	r19
     cca:	21 95       	neg	r18
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	30 93 f0 03 	sts	0x03F0, r19
     cd2:	20 93 ef 03 	sts	0x03EF, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
     cd6:	47 fd       	sbrc	r20, 7
     cd8:	a3 c2       	rjmp	.+1350   	; 0x1220 <handleRFCommands+0x60c>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	90 95       	com	r25
     ce4:	81 95       	neg	r24
     ce6:	9f 4f       	sbci	r25, 0xFF	; 255
     ce8:	90 93 f2 03 	sts	0x03F2, r25
     cec:	80 93 f1 03 	sts	0x03F1, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
     cf0:	42 e0       	ldi	r20, 0x02	; 2
     cf2:	21 30       	cpi	r18, 0x01	; 1
     cf4:	34 07       	cpc	r19, r20
     cf6:	44 f0       	brlt	.+16     	; 0xd08 <handleRFCommands+0xf4>
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	52 e0       	ldi	r21, 0x02	; 2
     cfc:	50 93 f0 03 	sts	0x03F0, r21
     d00:	40 93 ef 03 	sts	0x03EF, r20
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
     d08:	42 e0       	ldi	r20, 0x02	; 2
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	94 07       	cpc	r25, r20
     d0e:	34 f0       	brlt	.+12     	; 0xd1c <handleRFCommands+0x108>
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	90 93 f2 03 	sts	0x03F2, r25
     d18:	80 93 f1 03 	sts	0x03F1, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
     d1c:	4e ef       	ldi	r20, 0xFE	; 254
     d1e:	20 30       	cpi	r18, 0x00	; 0
     d20:	34 07       	cpc	r19, r20
     d22:	34 f4       	brge	.+12     	; 0xd30 <handleRFCommands+0x11c>
     d24:	40 e0       	ldi	r20, 0x00	; 0
     d26:	5e ef       	ldi	r21, 0xFE	; 254
     d28:	50 93 f0 03 	sts	0x03F0, r21
     d2c:	40 93 ef 03 	sts	0x03EF, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
     d30:	2e ef       	ldi	r18, 0xFE	; 254
     d32:	80 30       	cpi	r24, 0x00	; 0
     d34:	92 07       	cpc	r25, r18
     d36:	34 f4       	brge	.+12     	; 0xd44 <handleRFCommands+0x130>
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	9e ef       	ldi	r25, 0xFE	; 254
     d3c:	90 93 f2 03 	sts	0x03F2, r25
     d40:	80 93 f1 03 	sts	0x03F1, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
     d44:	26 2f       	mov	r18, r22
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	30 93 54 05 	sts	0x0554, r19
     d4c:	20 93 53 05 	sts	0x0553, r18
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	f0 93 56 05 	sts	0x0556, r31
     d56:	e0 93 55 05 	sts	0x0555, r30
     d5a:	c7 2f       	mov	r28, r23
     d5c:	d0 e0       	ldi	r29, 0x00	; 0
     d5e:	d0 93 58 05 	sts	0x0558, r29
     d62:	c0 93 57 05 	sts	0x0557, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
     d66:	92 2f       	mov	r25, r18
     d68:	88 27       	eor	r24, r24
     d6a:	82 1b       	sub	r24, r18
     d6c:	93 0b       	sbc	r25, r19
     d6e:	24 e6       	ldi	r18, 0x64	; 100
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	b9 01       	movw	r22, r18
     d74:	0e 94 7e 28 	call	0x50fc	; 0x50fc <__udivmodhi4>
     d78:	16 2f       	mov	r17, r22
     d7a:	10 95       	com	r17
     d7c:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
     d80:	5e 2f       	mov	r21, r30
     d82:	44 27       	eor	r20, r20
     d84:	4e 1b       	sub	r20, r30
     d86:	5f 0b       	sbc	r21, r31
     d88:	ca 01       	movw	r24, r20
     d8a:	b9 01       	movw	r22, r18
     d8c:	0e 94 7e 28 	call	0x50fc	; 0x50fc <__udivmodhi4>
     d90:	60 95       	com	r22
     d92:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
     d96:	5c 2f       	mov	r21, r28
     d98:	44 27       	eor	r20, r20
     d9a:	4c 1b       	sub	r20, r28
     d9c:	5d 0b       	sbc	r21, r29
     d9e:	ca 01       	movw	r24, r20
     da0:	b9 01       	movw	r22, r18
     da2:	0e 94 7e 28 	call	0x50fc	; 0x50fc <__udivmodhi4>
     da6:	60 95       	com	r22
     da8:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
     dac:	81 2f       	mov	r24, r17
     dae:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <updateRedLed>
		updateGreenLed(pwm_green);
     db2:	80 91 0d 02 	lds	r24, 0x020D
     db6:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <updateGreenLed>
		updateBlueLed(pwm_blue);
     dba:	80 91 0e 02 	lds	r24, 0x020E
     dbe:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
     dc2:	80 91 5e 05 	lds	r24, 0x055E
     dc6:	80 ff       	sbrs	r24, 0
     dc8:	25 c1       	rjmp	.+586    	; 0x1014 <handleRFCommands+0x400>
			LED_IR1_LOW;
     dca:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
     dcc:	81 ff       	sbrs	r24, 1
     dce:	25 c1       	rjmp	.+586    	; 0x101a <handleRFCommands+0x406>
			LED_IR2_LOW;
     dd0:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
     dd2:	98 2f       	mov	r25, r24
     dd4:	82 ff       	sbrs	r24, 2
     dd6:	25 c1       	rjmp	.+586    	; 0x1022 <handleRFCommands+0x40e>
			irEnabled = 1;
     dd8:	21 e0       	ldi	r18, 0x01	; 1
     dda:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
     dde:	84 fd       	sbrc	r24, 4
     de0:	24 c1       	rjmp	.+584    	; 0x102a <handleRFCommands+0x416>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
     de2:	86 ff       	sbrs	r24, 6
     de4:	29 c1       	rjmp	.+594    	; 0x1038 <handleRFCommands+0x424>
			obstacleAvoidanceEnabled = 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 3b 05 	sts	0x053B, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
     dec:	97 fd       	sbrc	r25, 7
     dee:	28 c1       	rjmp	.+592    	; 0x1040 <handleRFCommands+0x42c>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
     df0:	10 92 3c 05 	sts	0x053C, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
     df4:	80 91 61 05 	lds	r24, 0x0561
     df8:	80 ff       	sbrs	r24, 0
     dfa:	29 c1       	rjmp	.+594    	; 0x104e <handleRFCommands+0x43a>
				GREEN_LED0_ON;
     dfc:	80 91 0b 01 	lds	r24, 0x010B
     e00:	8e 7f       	andi	r24, 0xFE	; 254
     e02:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
     e06:	80 91 61 05 	lds	r24, 0x0561
     e0a:	81 ff       	sbrs	r24, 1
     e0c:	29 c1       	rjmp	.+594    	; 0x1060 <handleRFCommands+0x44c>
				GREEN_LED1_ON;
     e0e:	80 91 0b 01 	lds	r24, 0x010B
     e12:	8d 7f       	andi	r24, 0xFD	; 253
     e14:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
     e18:	80 91 61 05 	lds	r24, 0x0561
     e1c:	82 ff       	sbrs	r24, 2
     e1e:	29 c1       	rjmp	.+594    	; 0x1072 <handleRFCommands+0x45e>
				GREEN_LED2_ON;
     e20:	80 91 0b 01 	lds	r24, 0x010B
     e24:	8b 7f       	andi	r24, 0xFB	; 251
     e26:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
     e2a:	80 91 61 05 	lds	r24, 0x0561
     e2e:	83 ff       	sbrs	r24, 3
     e30:	29 c1       	rjmp	.+594    	; 0x1084 <handleRFCommands+0x470>
				GREEN_LED3_ON;
     e32:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
     e34:	80 91 61 05 	lds	r24, 0x0561
     e38:	84 ff       	sbrs	r24, 4
     e3a:	29 c1       	rjmp	.+594    	; 0x108e <handleRFCommands+0x47a>
				GREEN_LED4_ON;
     e3c:	80 91 0b 01 	lds	r24, 0x010B
     e40:	8f 7e       	andi	r24, 0xEF	; 239
     e42:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
     e46:	80 91 61 05 	lds	r24, 0x0561
     e4a:	85 ff       	sbrs	r24, 5
     e4c:	29 c1       	rjmp	.+594    	; 0x10a0 <handleRFCommands+0x48c>
				GREEN_LED5_ON;
     e4e:	80 91 0b 01 	lds	r24, 0x010B
     e52:	8f 7d       	andi	r24, 0xDF	; 223
     e54:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
     e58:	80 91 61 05 	lds	r24, 0x0561
     e5c:	86 ff       	sbrs	r24, 6
     e5e:	29 c1       	rjmp	.+594    	; 0x10b2 <handleRFCommands+0x49e>
				GREEN_LED6_ON;
     e60:	80 91 0b 01 	lds	r24, 0x010B
     e64:	8f 7b       	andi	r24, 0xBF	; 191
     e66:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
     e6a:	80 91 61 05 	lds	r24, 0x0561
     e6e:	87 fd       	sbrc	r24, 7
     e70:	29 c1       	rjmp	.+594    	; 0x10c4 <handleRFCommands+0x4b0>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
     e72:	80 91 0b 01 	lds	r24, 0x010B
     e76:	80 68       	ori	r24, 0x80	; 128
     e78:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
     e7c:	80 91 0b 02 	lds	r24, 0x020B
     e80:	80 93 43 05 	sts	0x0543, r24

		switch(packetId) {
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	09 f4       	brne	.+2      	; 0xe8a <handleRFCommands+0x276>
     e88:	29 c1       	rjmp	.+594    	; 0x10dc <handleRFCommands+0x4c8>
     e8a:	85 30       	cpi	r24, 0x05	; 5
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <handleRFCommands+0x27c>
     e8e:	66 c1       	rjmp	.+716    	; 0x115c <handleRFCommands+0x548>
     e90:	83 30       	cpi	r24, 0x03	; 3
     e92:	09 f0       	breq	.+2      	; 0xe96 <handleRFCommands+0x282>
     e94:	65 c0       	rjmp	.+202    	; 0xf60 <handleRFCommands+0x34c>
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
     e96:	90 91 5f 03 	lds	r25, 0x035F
     e9a:	80 91 60 03 	lds	r24, 0x0360
     e9e:	90 93 44 05 	sts	0x0544, r25
				ackPayload[2] = proximityResult[0]>>8;
     ea2:	80 93 45 05 	sts	0x0545, r24
				ackPayload[3] = proximityResult[1]&0xFF;
     ea6:	90 91 61 03 	lds	r25, 0x0361
     eaa:	80 91 62 03 	lds	r24, 0x0362
     eae:	90 93 46 05 	sts	0x0546, r25
				ackPayload[4] = proximityResult[1]>>8;
     eb2:	80 93 47 05 	sts	0x0547, r24
				ackPayload[5] = proximityResult[2]&0xFF;
     eb6:	90 91 63 03 	lds	r25, 0x0363
     eba:	80 91 64 03 	lds	r24, 0x0364
     ebe:	90 93 48 05 	sts	0x0548, r25
				ackPayload[6] = proximityResult[2]>>8;
     ec2:	80 93 49 05 	sts	0x0549, r24
				ackPayload[7] = proximityResult[3]&0xFF;
     ec6:	90 91 65 03 	lds	r25, 0x0365
     eca:	80 91 66 03 	lds	r24, 0x0366
     ece:	90 93 4a 05 	sts	0x054A, r25
				ackPayload[8] = proximityResult[3]>>8;
     ed2:	80 93 4b 05 	sts	0x054B, r24
				ackPayload[9] = proximityResult[5]&0xFF;
     ed6:	90 91 69 03 	lds	r25, 0x0369
     eda:	80 91 6a 03 	lds	r24, 0x036A
     ede:	90 93 4c 05 	sts	0x054C, r25
				ackPayload[10] = proximityResult[5]>>8;
     ee2:	80 93 4d 05 	sts	0x054D, r24
				ackPayload[11] = proximityResult[6]&0xFF;
     ee6:	90 91 6b 03 	lds	r25, 0x036B
     eea:	80 91 6c 03 	lds	r24, 0x036C
     eee:	90 93 4e 05 	sts	0x054E, r25
				ackPayload[12] = proximityResult[6]>>8;
     ef2:	80 93 4f 05 	sts	0x054F, r24
				ackPayload[13] = proximityResult[7]&0xFF;
     ef6:	90 91 6d 03 	lds	r25, 0x036D
     efa:	80 91 6e 03 	lds	r24, 0x036E
     efe:	90 93 50 05 	sts	0x0550, r25
				ackPayload[14] = proximityResult[7]>>8;
     f02:	80 93 51 05 	sts	0x0551, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
     f06:	30 91 03 01 	lds	r19, 0x0103
     f0a:	80 91 03 01 	lds	r24, 0x0103
     f0e:	20 91 03 01 	lds	r18, 0x0103
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	80 72       	andi	r24, 0x20	; 32
     f16:	90 70       	andi	r25, 0x00	; 0
     f18:	95 95       	asr	r25
     f1a:	87 95       	ror	r24
     f1c:	95 95       	asr	r25
     f1e:	87 95       	ror	r24
     f20:	95 95       	asr	r25
     f22:	87 95       	ror	r24
     f24:	95 95       	asr	r25
     f26:	87 95       	ror	r24
     f28:	95 95       	asr	r25
     f2a:	87 95       	ror	r24
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	22 1f       	adc	r18, r18
     f32:	22 27       	eor	r18, r18
     f34:	22 1f       	adc	r18, r18
     f36:	22 0f       	add	r18, r18
     f38:	22 0f       	add	r18, r18
     f3a:	28 2b       	or	r18, r24
     f3c:	83 2f       	mov	r24, r19
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	80 71       	andi	r24, 0x10	; 16
     f42:	90 70       	andi	r25, 0x00	; 0
     f44:	95 95       	asr	r25
     f46:	87 95       	ror	r24
     f48:	95 95       	asr	r25
     f4a:	87 95       	ror	r24
     f4c:	95 95       	asr	r25
     f4e:	87 95       	ror	r24
     f50:	95 95       	asr	r25
     f52:	87 95       	ror	r24
     f54:	28 2b       	or	r18, r24
     f56:	20 93 52 05 	sts	0x0552, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
     f5a:	84 e0       	ldi	r24, 0x04	; 4
     f5c:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
     f60:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
     f62:	81 ee       	ldi	r24, 0xE1	; 225
     f64:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
    mirf_CSN_hi;
     f68:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
     f6a:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
     f6c:	88 ea       	ldi	r24, 0xA8	; 168
     f6e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
     f72:	80 91 43 05 	lds	r24, 0x0543
     f76:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     f7a:	80 91 44 05 	lds	r24, 0x0544
     f7e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     f82:	80 91 45 05 	lds	r24, 0x0545
     f86:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     f8a:	80 91 46 05 	lds	r24, 0x0546
     f8e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     f92:	80 91 47 05 	lds	r24, 0x0547
     f96:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     f9a:	80 91 48 05 	lds	r24, 0x0548
     f9e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     fa2:	80 91 49 05 	lds	r24, 0x0549
     fa6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     faa:	80 91 4a 05 	lds	r24, 0x054A
     fae:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     fb2:	80 91 4b 05 	lds	r24, 0x054B
     fb6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     fba:	80 91 4c 05 	lds	r24, 0x054C
     fbe:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     fc2:	80 91 4d 05 	lds	r24, 0x054D
     fc6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     fca:	80 91 4e 05 	lds	r24, 0x054E
     fce:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     fd2:	80 91 4f 05 	lds	r24, 0x054F
     fd6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     fda:	80 91 50 05 	lds	r24, 0x0550
     fde:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     fe2:	80 91 51 05 	lds	r24, 0x0551
     fe6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
     fea:	80 91 52 05 	lds	r24, 0x0552
     fee:	0e 94 64 04 	call	0x8c8	; 0x8c8 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
     ff2:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
     ffc:	e0 91 5c 05 	lds	r30, 0x055C
    1000:	ee 23       	and	r30, r30
    1002:	09 f4       	brne	.+2      	; 0x1006 <handleRFCommands+0x3f2>
    1004:	16 c1       	rjmp	.+556    	; 0x1232 <handleRFCommands+0x61e>
    1006:	50 91 5f 05 	lds	r21, 0x055F
    100a:	40 91 60 05 	lds	r20, 0x0560
    100e:	70 91 5d 05 	lds	r23, 0x055D
    1012:	44 ce       	rjmp	.-888    	; 0xc9c <handleRFCommands+0x88>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    1014:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1016:	81 fd       	sbrc	r24, 1
    1018:	db ce       	rjmp	.-586    	; 0xdd0 <handleRFCommands+0x1bc>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    101a:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    101c:	98 2f       	mov	r25, r24
    101e:	82 fd       	sbrc	r24, 2
    1020:	db ce       	rjmp	.-586    	; 0xdd8 <handleRFCommands+0x1c4>
			irEnabled = 1;
		} else {
			irEnabled = 0;
    1022:	10 92 12 02 	sts	0x0212, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1026:	84 ff       	sbrs	r24, 4
    1028:	dc ce       	rjmp	.-584    	; 0xde2 <handleRFCommands+0x1ce>
			calibrateSensors();
    102a:	0e 94 2d 20 	call	0x405a	; 0x405a <calibrateSensors>
    102e:	90 91 5e 05 	lds	r25, 0x055E
    1032:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1034:	86 fd       	sbrc	r24, 6
    1036:	d7 ce       	rjmp	.-594    	; 0xde6 <handleRFCommands+0x1d2>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    1038:	10 92 3b 05 	sts	0x053B, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    103c:	97 ff       	sbrs	r25, 7
    103e:	d8 ce       	rjmp	.-592    	; 0xdf0 <handleRFCommands+0x1dc>
			cliffAvoidanceEnabled = 1;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	80 93 3c 05 	sts	0x053C, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1046:	80 91 61 05 	lds	r24, 0x0561
    104a:	80 fd       	sbrc	r24, 0
    104c:	d7 ce       	rjmp	.-594    	; 0xdfc <handleRFCommands+0x1e8>
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    104e:	80 91 0b 01 	lds	r24, 0x010B
    1052:	81 60       	ori	r24, 0x01	; 1
    1054:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1058:	80 91 61 05 	lds	r24, 0x0561
    105c:	81 fd       	sbrc	r24, 1
    105e:	d7 ce       	rjmp	.-594    	; 0xe0e <handleRFCommands+0x1fa>
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    1060:	80 91 0b 01 	lds	r24, 0x010B
    1064:	82 60       	ori	r24, 0x02	; 2
    1066:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    106a:	80 91 61 05 	lds	r24, 0x0561
    106e:	82 fd       	sbrc	r24, 2
    1070:	d7 ce       	rjmp	.-594    	; 0xe20 <handleRFCommands+0x20c>
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    1072:	80 91 0b 01 	lds	r24, 0x010B
    1076:	84 60       	ori	r24, 0x04	; 4
    1078:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
    107c:	80 91 61 05 	lds	r24, 0x0561
    1080:	83 fd       	sbrc	r24, 3
    1082:	d7 ce       	rjmp	.-594    	; 0xe32 <handleRFCommands+0x21e>
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    1084:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
    1086:	80 91 61 05 	lds	r24, 0x0561
    108a:	84 fd       	sbrc	r24, 4
    108c:	d7 ce       	rjmp	.-594    	; 0xe3c <handleRFCommands+0x228>
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    108e:	80 91 0b 01 	lds	r24, 0x010B
    1092:	80 61       	ori	r24, 0x10	; 16
    1094:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
    1098:	80 91 61 05 	lds	r24, 0x0561
    109c:	85 fd       	sbrc	r24, 5
    109e:	d7 ce       	rjmp	.-594    	; 0xe4e <handleRFCommands+0x23a>
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    10a0:	80 91 0b 01 	lds	r24, 0x010B
    10a4:	80 62       	ori	r24, 0x20	; 32
    10a6:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
    10aa:	80 91 61 05 	lds	r24, 0x0561
    10ae:	86 fd       	sbrc	r24, 6
    10b0:	d7 ce       	rjmp	.-594    	; 0xe60 <handleRFCommands+0x24c>
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    10b2:	80 91 0b 01 	lds	r24, 0x010B
    10b6:	80 64       	ori	r24, 0x40	; 64
    10b8:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
    10bc:	80 91 61 05 	lds	r24, 0x0561
    10c0:	87 ff       	sbrs	r24, 7
    10c2:	d7 ce       	rjmp	.-594    	; 0xe72 <handleRFCommands+0x25e>
				GREEN_LED7_ON;
    10c4:	80 91 0b 01 	lds	r24, 0x010B
    10c8:	8f 77       	andi	r24, 0x7F	; 127
    10ca:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    10ce:	80 91 0b 02 	lds	r24, 0x020B
    10d2:	80 93 43 05 	sts	0x0543, r24

		switch(packetId) {
    10d6:	84 30       	cpi	r24, 0x04	; 4
    10d8:	09 f0       	breq	.+2      	; 0x10dc <handleRFCommands+0x4c8>
    10da:	d7 ce       	rjmp	.-594    	; 0xe8a <handleRFCommands+0x276>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    10dc:	90 91 67 03 	lds	r25, 0x0367
    10e0:	80 91 68 03 	lds	r24, 0x0368
    10e4:	90 93 44 05 	sts	0x0544, r25
				ackPayload[2] = proximityResult[4]>>8;
    10e8:	80 93 45 05 	sts	0x0545, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    10ec:	90 91 6f 03 	lds	r25, 0x036F
    10f0:	80 91 70 03 	lds	r24, 0x0370
    10f4:	90 93 46 05 	sts	0x0546, r25
				ackPayload[4] = proximityResult[8]>>8;
    10f8:	80 93 47 05 	sts	0x0547, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    10fc:	90 91 71 03 	lds	r25, 0x0371
    1100:	80 91 72 03 	lds	r24, 0x0372
    1104:	90 93 48 05 	sts	0x0548, r25
				ackPayload[6] = proximityResult[9]>>8;
    1108:	80 93 49 05 	sts	0x0549, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    110c:	90 91 73 03 	lds	r25, 0x0373
    1110:	80 91 74 03 	lds	r24, 0x0374
    1114:	90 93 4a 05 	sts	0x054A, r25
				ackPayload[8] = proximityResult[10]>>8;
    1118:	80 93 4b 05 	sts	0x054B, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    111c:	90 91 75 03 	lds	r25, 0x0375
    1120:	80 91 76 03 	lds	r24, 0x0376
    1124:	90 93 4c 05 	sts	0x054C, r25
				ackPayload[10] = proximityResult[11]>>8;
    1128:	80 93 4d 05 	sts	0x054D, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    112c:	90 91 18 05 	lds	r25, 0x0518
    1130:	80 91 19 05 	lds	r24, 0x0519
    1134:	90 93 4e 05 	sts	0x054E, r25
				ackPayload[12] = accX>>8;
    1138:	80 93 4f 05 	sts	0x054F, r24
				ackPayload[13] = accY&0xFF;
    113c:	90 91 1a 05 	lds	r25, 0x051A
    1140:	80 91 1b 05 	lds	r24, 0x051B
    1144:	90 93 50 05 	sts	0x0550, r25
				ackPayload[14] = accY>>8;
    1148:	80 93 51 05 	sts	0x0551, r24
				ackPayload[15] = irCommand;
    114c:	80 91 13 05 	lds	r24, 0x0513
    1150:	80 93 52 05 	sts	0x0552, r24
				packetId = 5;
    1154:	85 e0       	ldi	r24, 0x05	; 5
    1156:	80 93 0b 02 	sts	0x020B, r24
				break;
    115a:	02 cf       	rjmp	.-508    	; 0xf60 <handleRFCommands+0x34c>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    115c:	85 30       	cpi	r24, 0x05	; 5
    115e:	09 f4       	brne	.+2      	; 0x1162 <handleRFCommands+0x54e>
    1160:	7d c0       	rjmp	.+250    	; 0x125c <handleRFCommands+0x648>
    1162:	86 30       	cpi	r24, 0x06	; 6
    1164:	09 f0       	breq	.+2      	; 0x1168 <handleRFCommands+0x554>
    1166:	fc ce       	rjmp	.-520    	; 0xf60 <handleRFCommands+0x34c>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    1168:	80 91 3f 03 	lds	r24, 0x033F
    116c:	90 91 40 03 	lds	r25, 0x0340
    1170:	80 93 44 05 	sts	0x0544, r24
				ackPayload[2] = proximityValue[8]>>8;
    1174:	80 91 3f 03 	lds	r24, 0x033F
    1178:	90 91 40 03 	lds	r25, 0x0340
    117c:	90 93 45 05 	sts	0x0545, r25
				ackPayload[3] = proximityValue[16]&0xFF;
    1180:	80 91 4f 03 	lds	r24, 0x034F
    1184:	90 91 50 03 	lds	r25, 0x0350
    1188:	80 93 46 05 	sts	0x0546, r24
				ackPayload[4] = proximityValue[16]>>8;
    118c:	80 91 4f 03 	lds	r24, 0x034F
    1190:	90 91 50 03 	lds	r25, 0x0350
    1194:	90 93 47 05 	sts	0x0547, r25
				ackPayload[5] = proximityValue[18]&0xFF;
    1198:	80 91 53 03 	lds	r24, 0x0353
    119c:	90 91 54 03 	lds	r25, 0x0354
    11a0:	80 93 48 05 	sts	0x0548, r24
				ackPayload[6] = proximityValue[18]>>8;
    11a4:	80 91 53 03 	lds	r24, 0x0353
    11a8:	90 91 54 03 	lds	r25, 0x0354
    11ac:	90 93 49 05 	sts	0x0549, r25
				ackPayload[7] = proximityValue[20]&0xFF;
    11b0:	80 91 57 03 	lds	r24, 0x0357
    11b4:	90 91 58 03 	lds	r25, 0x0358
    11b8:	80 93 4a 05 	sts	0x054A, r24
				ackPayload[8] = proximityValue[20]>>8;
    11bc:	80 91 57 03 	lds	r24, 0x0357
    11c0:	90 91 58 03 	lds	r25, 0x0358
    11c4:	90 93 4b 05 	sts	0x054B, r25
				ackPayload[9] = proximityValue[22]&0xFF;
    11c8:	80 91 5b 03 	lds	r24, 0x035B
    11cc:	90 91 5c 03 	lds	r25, 0x035C
    11d0:	80 93 4c 05 	sts	0x054C, r24
				ackPayload[10] = proximityValue[22]>>8;
    11d4:	80 91 5b 03 	lds	r24, 0x035B
    11d8:	90 91 5c 03 	lds	r25, 0x035C
    11dc:	90 93 4d 05 	sts	0x054D, r25
				ackPayload[11] = accZ&0xFF;
    11e0:	90 91 1c 05 	lds	r25, 0x051C
    11e4:	80 91 1d 05 	lds	r24, 0x051D
    11e8:	90 93 4e 05 	sts	0x054E, r25
				ackPayload[12] = accZ>>8;
    11ec:	80 93 4f 05 	sts	0x054F, r24
				ackPayload[13] = batteryLevel&0xFF;
    11f0:	90 91 c3 03 	lds	r25, 0x03C3
    11f4:	80 91 c4 03 	lds	r24, 0x03C4
    11f8:	90 93 50 05 	sts	0x0550, r25
				ackPayload[14] = batteryLevel>>8;
    11fc:	80 93 51 05 	sts	0x0551, r24
				ackPayload[15] = 0;
    1200:	10 92 52 05 	sts	0x0552, r1
				packetId = 3;
    1204:	83 e0       	ldi	r24, 0x03	; 3
    1206:	80 93 0b 02 	sts	0x020B, r24
				break;
    120a:	aa ce       	rjmp	.-684    	; 0xf60 <handleRFCommands+0x34c>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    120c:	22 0f       	add	r18, r18
    120e:	33 1f       	adc	r19, r19
    1210:	22 0f       	add	r18, r18
    1212:	33 1f       	adc	r19, r19
    1214:	30 93 f0 03 	sts	0x03F0, r19
    1218:	20 93 ef 03 	sts	0x03EF, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    121c:	47 ff       	sbrs	r20, 7
    121e:	5d cd       	rjmp	.-1350   	; 0xcda <handleRFCommands+0xc6>
			pwm_left_desired = speedl<<2;
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	90 93 f2 03 	sts	0x03F2, r25
    122c:	80 93 f1 03 	sts	0x03F1, r24
    1230:	5f cd       	rjmp	.-1346   	; 0xcf0 <handleRFCommands+0xdc>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1232:	70 91 5d 05 	lds	r23, 0x055D
    1236:	77 23       	and	r23, r23
    1238:	61 f4       	brne	.+24     	; 0x1252 <handleRFCommands+0x63e>
    123a:	80 91 5e 05 	lds	r24, 0x055E
    123e:	88 30       	cpi	r24, 0x08	; 8
    1240:	41 f4       	brne	.+16     	; 0x1252 <handleRFCommands+0x63e>
    1242:	50 91 5f 05 	lds	r21, 0x055F
    1246:	55 23       	and	r21, r21
    1248:	09 f4       	brne	.+2      	; 0x124c <handleRFCommands+0x638>
    124a:	64 c0       	rjmp	.+200    	; 0x1314 <handleRFCommands+0x700>
    124c:	40 91 60 05 	lds	r20, 0x0560
    1250:	25 cd       	rjmp	.-1462   	; 0xc9c <handleRFCommands+0x88>
    1252:	50 91 5f 05 	lds	r21, 0x055F
    1256:	40 91 60 05 	lds	r20, 0x0560
    125a:	20 cd       	rjmp	.-1472   	; 0xc9c <handleRFCommands+0x88>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    125c:	80 91 2f 03 	lds	r24, 0x032F
    1260:	90 91 30 03 	lds	r25, 0x0330
    1264:	80 93 44 05 	sts	0x0544, r24
				ackPayload[2] = proximityValue[0]>>8;
    1268:	80 91 2f 03 	lds	r24, 0x032F
    126c:	90 91 30 03 	lds	r25, 0x0330
    1270:	90 93 45 05 	sts	0x0545, r25
				ackPayload[3] = proximityValue[2]&0xFF;
    1274:	80 91 33 03 	lds	r24, 0x0333
    1278:	90 91 34 03 	lds	r25, 0x0334
    127c:	80 93 46 05 	sts	0x0546, r24
				ackPayload[4] = proximityValue[2]>>8;
    1280:	80 91 33 03 	lds	r24, 0x0333
    1284:	90 91 34 03 	lds	r25, 0x0334
    1288:	90 93 47 05 	sts	0x0547, r25
				ackPayload[5] = proximityValue[4]&0xFF;
    128c:	80 91 37 03 	lds	r24, 0x0337
    1290:	90 91 38 03 	lds	r25, 0x0338
    1294:	80 93 48 05 	sts	0x0548, r24
				ackPayload[6] = proximityValue[4]>>8;
    1298:	80 91 37 03 	lds	r24, 0x0337
    129c:	90 91 38 03 	lds	r25, 0x0338
    12a0:	90 93 49 05 	sts	0x0549, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    12a4:	80 91 3b 03 	lds	r24, 0x033B
    12a8:	90 91 3c 03 	lds	r25, 0x033C
    12ac:	80 93 4a 05 	sts	0x054A, r24
				ackPayload[8] = proximityValue[6]>>8;
    12b0:	80 91 3b 03 	lds	r24, 0x033B
    12b4:	90 91 3c 03 	lds	r25, 0x033C
    12b8:	90 93 4b 05 	sts	0x054B, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    12bc:	80 91 43 03 	lds	r24, 0x0343
    12c0:	90 91 44 03 	lds	r25, 0x0344
    12c4:	80 93 4c 05 	sts	0x054C, r24
				ackPayload[10] = proximityValue[10]>>8;
    12c8:	80 91 43 03 	lds	r24, 0x0343
    12cc:	90 91 44 03 	lds	r25, 0x0344
    12d0:	90 93 4d 05 	sts	0x054D, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    12d4:	80 91 47 03 	lds	r24, 0x0347
    12d8:	90 91 48 03 	lds	r25, 0x0348
    12dc:	80 93 4e 05 	sts	0x054E, r24
				ackPayload[12] = proximityValue[12]>>8;
    12e0:	80 91 47 03 	lds	r24, 0x0347
    12e4:	90 91 48 03 	lds	r25, 0x0348
    12e8:	90 93 4f 05 	sts	0x054F, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    12ec:	80 91 4b 03 	lds	r24, 0x034B
    12f0:	90 91 4c 03 	lds	r25, 0x034C
    12f4:	80 93 50 05 	sts	0x0550, r24
				ackPayload[14] = proximityValue[14]>>8;
    12f8:	80 91 4b 03 	lds	r24, 0x034B
    12fc:	90 91 4c 03 	lds	r25, 0x034C
    1300:	90 93 51 05 	sts	0x0551, r25
				ackPayload[15] = currentSelector;
    1304:	80 91 37 05 	lds	r24, 0x0537
    1308:	80 93 52 05 	sts	0x0552, r24
				packetId = 6;
    130c:	86 e0       	ldi	r24, 0x06	; 6
    130e:	80 93 0b 02 	sts	0x020B, r24
				break;
    1312:	26 ce       	rjmp	.-948    	; 0xf60 <handleRFCommands+0x34c>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1314:	40 91 60 05 	lds	r20, 0x0560
    1318:	44 23       	and	r20, r20
    131a:	79 f0       	breq	.+30     	; 0x133a <handleRFCommands+0x726>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    131c:	10 92 02 04 	sts	0x0402, r1
    1320:	10 92 01 04 	sts	0x0401, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1324:	84 2f       	mov	r24, r20
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	8f 77       	andi	r24, 0x7F	; 127
    132a:	90 70       	andi	r25, 0x00	; 0
    132c:	90 93 00 04 	sts	0x0400, r25
    1330:	80 93 ff 03 	sts	0x03FF, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	c3 cc       	rjmp	.-1658   	; 0xcc0 <handleRFCommands+0xac>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    133a:	8c e3       	ldi	r24, 0x3C	; 60
    133c:	0e 94 ad 13 	call	0x275a	; 0x275a <sleep>
    1340:	50 91 5f 05 	lds	r21, 0x055F
    1344:	40 91 60 05 	lds	r20, 0x0560
    1348:	60 91 5b 05 	lds	r22, 0x055B
    134c:	e0 91 5c 05 	lds	r30, 0x055C
    1350:	70 91 5d 05 	lds	r23, 0x055D
    1354:	a3 cc       	rjmp	.-1722   	; 0xc9c <handleRFCommands+0x88>

00001356 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29

	PCICR = 0;
    135a:	c8 e6       	ldi	r28, 0x68	; 104
    135c:	d0 e0       	ldi	r29, 0x00	; 0
    135e:	18 82       	st	Y, r1
	PCMSK1 = 0;
    1360:	ac e6       	ldi	r26, 0x6C	; 108
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	1c 92       	st	X, r1
	TCCR2A = 0;
    1366:	e0 eb       	ldi	r30, 0xB0	; 176
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	10 82       	st	Z, r1
	TCCR2B = 0;
    136c:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    1370:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    1374:	88 81       	ld	r24, Y
    1376:	82 60       	ori	r24, 0x02	; 2
    1378:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    137a:	8c 91       	ld	r24, X
    137c:	80 68       	ori	r24, 0x80	; 128
    137e:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    1380:	80 81       	ld	r24, Z
    1382:	82 60       	ori	r24, 0x02	; 2
    1384:	80 83       	st	Z, r24

}
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	08 95       	ret

0000138c <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    138c:	1f 92       	push	r1
    138e:	0f 92       	push	r0
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	0f 92       	push	r0
    1394:	11 24       	eor	r1, r1
    1396:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    1398:	80 91 12 02 	lds	r24, 0x0212
    139c:	88 23       	and	r24, r24
    139e:	21 f1       	breq	.+72     	; 0x13e8 <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    13a0:	80 91 03 01 	lds	r24, 0x0103
    13a4:	86 fd       	sbrc	r24, 6
    13a6:	20 c0       	rjmp	.+64     	; 0x13e8 <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    13a8:	80 91 68 00 	lds	r24, 0x0068
    13ac:	8d 7f       	andi	r24, 0xFD	; 253
    13ae:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    13b2:	80 91 6c 00 	lds	r24, 0x006C
    13b6:	8f 77       	andi	r24, 0x7F	; 127
    13b8:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    13c2:	8d e0       	ldi	r24, 0x0D	; 13
    13c4:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    13c8:	80 91 b1 00 	lds	r24, 0x00B1
    13cc:	86 60       	ori	r24, 0x06	; 6
    13ce:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    13d2:	80 91 70 00 	lds	r24, 0x0070
    13d6:	82 60       	ori	r24, 0x02	; 2
    13d8:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    13dc:	10 92 26 03 	sts	0x0326, r1
    13e0:	10 92 27 03 	sts	0x0327, r1
    13e4:	10 92 28 03 	sts	0x0328, r1

		}

	}
	
}
    13e8:	8f 91       	pop	r24
    13ea:	0f 90       	pop	r0
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	0f 90       	pop	r0
    13f0:	1f 90       	pop	r1
    13f2:	18 95       	reti

000013f4 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    13f4:	1f 92       	push	r1
    13f6:	0f 92       	push	r0
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	0f 92       	push	r0
    13fc:	11 24       	eor	r1, r1
    13fe:	2f 93       	push	r18
    1400:	3f 93       	push	r19
    1402:	4f 93       	push	r20
    1404:	5f 93       	push	r21
    1406:	8f 93       	push	r24
    1408:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    140a:	80 91 b1 00 	lds	r24, 0x00B1
    140e:	88 7f       	andi	r24, 0xF8	; 248
    1410:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    1414:	80 91 13 02 	lds	r24, 0x0213
    1418:	88 23       	and	r24, r24
    141a:	a9 f0       	breq	.+42     	; 0x1446 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    141c:	80 91 03 01 	lds	r24, 0x0103
    1420:	86 ff       	sbrs	r24, 6
    1422:	65 c0       	rjmp	.+202    	; 0x14ee <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1424:	80 91 68 00 	lds	r24, 0x0068
    1428:	82 60       	ori	r24, 0x02	; 2
    142a:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    142e:	80 91 6c 00 	lds	r24, 0x006C
    1432:	80 68       	ori	r24, 0x80	; 128
    1434:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	9f ef       	ldi	r25, 0xFF	; 255
    143c:	90 93 02 02 	sts	0x0202, r25
    1440:	80 93 01 02 	sts	0x0201, r24
    1444:	49 c0       	rjmp	.+146    	; 0x14d8 <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    1446:	80 91 01 02 	lds	r24, 0x0201
    144a:	90 91 02 02 	lds	r25, 0x0202
    144e:	2f ef       	ldi	r18, 0xFF	; 255
    1450:	8f 3f       	cpi	r24, 0xFF	; 255
    1452:	92 07       	cpc	r25, r18
    1454:	09 f4       	brne	.+2      	; 0x1458 <__vector_13+0x64>
    1456:	63 c0       	rjmp	.+198    	; 0x151e <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	91 05       	cpc	r25, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <__vector_13+0x6c>
    145e:	98 c0       	rjmp	.+304    	; 0x1590 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    1460:	9c 01       	movw	r18, r24
    1462:	22 50       	subi	r18, 0x02	; 2
    1464:	30 40       	sbci	r19, 0x00	; 0
    1466:	25 30       	cpi	r18, 0x05	; 5
    1468:	31 05       	cpc	r19, r1
    146a:	08 f4       	brcc	.+2      	; 0x146e <__vector_13+0x7a>
    146c:	67 c0       	rjmp	.+206    	; 0x153c <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    146e:	9c 01       	movw	r18, r24
    1470:	27 50       	subi	r18, 0x07	; 7
    1472:	30 40       	sbci	r19, 0x00	; 0
    1474:	26 30       	cpi	r18, 0x06	; 6
    1476:	31 05       	cpc	r19, r1
    1478:	08 f0       	brcs	.+2      	; 0x147c <__vector_13+0x88>
    147a:	bd c0       	rjmp	.+378    	; 0x15f6 <__vector_13+0x202>

				OCR2A = 54;
    147c:	26 e3       	ldi	r18, 0x36	; 54
    147e:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1482:	20 91 b1 00 	lds	r18, 0x00B1
    1486:	26 60       	ori	r18, 0x06	; 6
    1488:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    148c:	20 91 70 00 	lds	r18, 0x0070
    1490:	22 60       	ori	r18, 0x02	; 2
    1492:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1496:	20 91 03 01 	lds	r18, 0x0103
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	20 74       	andi	r18, 0x40	; 64
    149e:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    14a0:	00 24       	eor	r0, r0
    14a2:	22 0f       	add	r18, r18
    14a4:	33 1f       	adc	r19, r19
    14a6:	00 1c       	adc	r0, r0
    14a8:	22 0f       	add	r18, r18
    14aa:	33 1f       	adc	r19, r19
    14ac:	00 1c       	adc	r0, r0
    14ae:	23 2f       	mov	r18, r19
    14b0:	30 2d       	mov	r19, r0
    14b2:	4c e0       	ldi	r20, 0x0C	; 12
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	48 1b       	sub	r20, r24
    14b8:	59 0b       	sbc	r21, r25
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <__vector_13+0xcc>
    14bc:	22 0f       	add	r18, r18
    14be:	33 1f       	adc	r19, r19
    14c0:	4a 95       	dec	r20
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <__vector_13+0xc8>
				data_temp += temp;
    14c4:	40 91 26 03 	lds	r20, 0x0326
    14c8:	42 0f       	add	r20, r18
    14ca:	40 93 26 03 	sts	0x0326, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    14ce:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    14d0:	90 93 02 02 	sts	0x0202, r25
    14d4:	80 93 01 02 	sts	0x0201, r24

		}

}
    14d8:	9f 91       	pop	r25
    14da:	8f 91       	pop	r24
    14dc:	5f 91       	pop	r21
    14de:	4f 91       	pop	r20
    14e0:	3f 91       	pop	r19
    14e2:	2f 91       	pop	r18
    14e4:	0f 90       	pop	r0
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	0f 90       	pop	r0
    14ea:	1f 90       	pop	r1
    14ec:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    14ee:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    14f2:	83 e3       	ldi	r24, 0x33	; 51
    14f4:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    14f8:	80 91 b1 00 	lds	r24, 0x00B1
    14fc:	86 60       	ori	r24, 0x06	; 6
    14fe:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    1502:	80 91 70 00 	lds	r24, 0x0070
    1506:	82 60       	ori	r24, 0x02	; 2
    1508:	80 93 70 00 	sts	0x0070, r24
    150c:	80 91 01 02 	lds	r24, 0x0201
    1510:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    1514:	2f ef       	ldi	r18, 0xFF	; 255
    1516:	8f 3f       	cpi	r24, 0xFF	; 255
    1518:	92 07       	cpc	r25, r18
    151a:	c9 f6       	brne	.-78     	; 0x14ce <__vector_13+0xda>
    151c:	dd cf       	rjmp	.-70     	; 0x14d8 <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    151e:	20 91 03 01 	lds	r18, 0x0103
    1522:	26 ff       	sbrs	r18, 6
    1524:	52 c0       	rjmp	.+164    	; 0x15ca <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1526:	20 91 68 00 	lds	r18, 0x0068
    152a:	22 60       	ori	r18, 0x02	; 2
    152c:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1530:	20 91 6c 00 	lds	r18, 0x006C
    1534:	20 68       	ori	r18, 0x80	; 128
    1536:	20 93 6c 00 	sts	0x006C, r18
    153a:	ce cf       	rjmp	.-100    	; 0x14d8 <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    153c:	26 e3       	ldi	r18, 0x36	; 54
    153e:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1542:	20 91 b1 00 	lds	r18, 0x00B1
    1546:	26 60       	ori	r18, 0x06	; 6
    1548:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    154c:	20 91 70 00 	lds	r18, 0x0070
    1550:	22 60       	ori	r18, 0x02	; 2
    1552:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1556:	20 91 03 01 	lds	r18, 0x0103
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	20 74       	andi	r18, 0x40	; 64
    155e:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    1560:	00 24       	eor	r0, r0
    1562:	22 0f       	add	r18, r18
    1564:	33 1f       	adc	r19, r19
    1566:	00 1c       	adc	r0, r0
    1568:	22 0f       	add	r18, r18
    156a:	33 1f       	adc	r19, r19
    156c:	00 1c       	adc	r0, r0
    156e:	23 2f       	mov	r18, r19
    1570:	30 2d       	mov	r19, r0
    1572:	46 e0       	ldi	r20, 0x06	; 6
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	48 1b       	sub	r20, r24
    1578:	59 0b       	sbc	r21, r25
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <__vector_13+0x18c>
    157c:	22 0f       	add	r18, r18
    157e:	33 1f       	adc	r19, r19
    1580:	4a 95       	dec	r20
    1582:	e2 f7       	brpl	.-8      	; 0x157c <__vector_13+0x188>
				address_temp += temp;
    1584:	40 91 27 03 	lds	r20, 0x0327
    1588:	42 0f       	add	r20, r18
    158a:	40 93 27 03 	sts	0x0327, r20
    158e:	9f cf       	rjmp	.-194    	; 0x14ce <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    1590:	20 91 03 01 	lds	r18, 0x0103
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	20 74       	andi	r18, 0x40	; 64
    1598:	30 70       	andi	r19, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	23 2f       	mov	r18, r19
    159e:	00 0c       	add	r0, r0
    15a0:	22 1f       	adc	r18, r18
    15a2:	33 0b       	sbc	r19, r19
    15a4:	00 0c       	add	r0, r0
    15a6:	22 1f       	adc	r18, r18
    15a8:	33 1f       	adc	r19, r19
    15aa:	20 93 28 03 	sts	0x0328, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    15ae:	26 e3       	ldi	r18, 0x36	; 54
    15b0:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    15b4:	20 91 b1 00 	lds	r18, 0x00B1
    15b8:	26 60       	ori	r18, 0x06	; 6
    15ba:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    15be:	20 91 70 00 	lds	r18, 0x0070
    15c2:	22 60       	ori	r18, 0x02	; 2
    15c4:	20 93 70 00 	sts	0x0070, r18
    15c8:	82 cf       	rjmp	.-252    	; 0x14ce <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    15ca:	8c e1       	ldi	r24, 0x1C	; 28
    15cc:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    15d0:	80 91 b1 00 	lds	r24, 0x00B1
    15d4:	86 60       	ori	r24, 0x06	; 6
    15d6:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    15da:	80 91 70 00 	lds	r24, 0x0070
    15de:	82 60       	ori	r24, 0x02	; 2
    15e0:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    15e4:	10 92 26 03 	sts	0x0326, r1
    15e8:	10 92 27 03 	sts	0x0327, r1
    15ec:	10 92 28 03 	sts	0x0328, r1
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	6d cf       	rjmp	.-294    	; 0x14d0 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    15f6:	8d 30       	cpi	r24, 0x0D	; 13
    15f8:	91 05       	cpc	r25, r1
    15fa:	09 f0       	breq	.+2      	; 0x15fe <__vector_13+0x20a>
    15fc:	68 cf       	rjmp	.-304    	; 0x14ce <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    15fe:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    1602:	80 91 68 00 	lds	r24, 0x0068
    1606:	82 60       	ori	r24, 0x02	; 2
    1608:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    160c:	80 91 6c 00 	lds	r24, 0x006C
    1610:	80 68       	ori	r24, 0x80	; 128
    1612:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    1616:	8f ef       	ldi	r24, 0xFF	; 255
    1618:	9f ef       	ldi	r25, 0xFF	; 255
    161a:	90 93 02 02 	sts	0x0202, r25
    161e:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    1622:	80 91 28 03 	lds	r24, 0x0328
    1626:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    162a:	80 91 27 03 	lds	r24, 0x0327
    162e:	80 93 24 03 	sts	0x0324, r24
				data_ir = data_temp;
    1632:	80 91 26 03 	lds	r24, 0x0326
    1636:	80 93 25 03 	sts	0x0325, r24
				command_received=1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	80 93 14 05 	sts	0x0514, r24
    1640:	4b cf       	rjmp	.-362    	; 0x14d8 <__vector_13+0xe4>

00001642 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    1642:	80 91 00 02 	lds	r24, 0x0200
    1646:	08 95       	ret

00001648 <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    1648:	80 91 24 03 	lds	r24, 0x0324
    164c:	08 95       	ret

0000164e <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    164e:	80 91 25 03 	lds	r24, 0x0325
    1652:	08 95       	ret

00001654 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    1654:	80 91 12 02 	lds	r24, 0x0212
    1658:	88 23       	and	r24, r24
    165a:	b1 f1       	breq	.+108    	; 0x16c8 <handleIRRemoteCommands+0x74>

		if(command_received) {
    165c:	80 91 14 05 	lds	r24, 0x0514
    1660:	88 23       	and	r24, r24
    1662:	91 f1       	breq	.+100    	; 0x16c8 <handleIRRemoteCommands+0x74>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    1664:	e0 91 25 03 	lds	r30, 0x0325

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    1668:	e0 93 13 05 	sts	0x0513, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    166c:	10 92 14 05 	sts	0x0514, r1

			switch(irCommand) {
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	e5 33       	cpi	r30, 0x35	; 53
    1674:	f1 05       	cpc	r31, r1
    1676:	48 f1       	brcs	.+82     	; 0x16ca <handleIRRemoteCommands+0x76>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    1678:	20 91 ef 03 	lds	r18, 0x03EF
    167c:	30 91 f0 03 	lds	r19, 0x03F0
    1680:	80 91 f1 03 	lds	r24, 0x03F1
    1684:	90 91 f2 03 	lds	r25, 0x03F2
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    1688:	37 fd       	sbrc	r19, 7
    168a:	27 c0       	rjmp	.+78     	; 0x16da <handleIRRemoteCommands+0x86>
				speedr = pwm_right_desired >> 2;
    168c:	35 95       	asr	r19
    168e:	27 95       	ror	r18
    1690:	35 95       	asr	r19
    1692:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    1694:	30 93 02 04 	sts	0x0402, r19
    1698:	20 93 01 04 	sts	0x0401, r18
			}
			if(pwm_left_desired >= 0) {
    169c:	97 fd       	sbrc	r25, 7
    169e:	09 c0       	rjmp	.+18     	; 0x16b2 <handleIRRemoteCommands+0x5e>
				speedl = pwm_left_desired >> 2;
    16a0:	95 95       	asr	r25
    16a2:	87 95       	ror	r24
    16a4:	95 95       	asr	r25
    16a6:	87 95       	ror	r24
    16a8:	90 93 00 04 	sts	0x0400, r25
    16ac:	80 93 ff 03 	sts	0x03FF, r24
    16b0:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    16b2:	90 95       	com	r25
    16b4:	81 95       	neg	r24
    16b6:	9f 4f       	sbci	r25, 0xFF	; 255
    16b8:	95 95       	asr	r25
    16ba:	87 95       	ror	r24
    16bc:	95 95       	asr	r25
    16be:	87 95       	ror	r24
    16c0:	90 93 00 04 	sts	0x0400, r25
    16c4:	80 93 ff 03 	sts	0x03FF, r24
    16c8:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    16ca:	ee 58       	subi	r30, 0x8E	; 142
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	ee 0f       	add	r30, r30
    16d0:	ff 1f       	adc	r31, r31
    16d2:	05 90       	lpm	r0, Z+
    16d4:	f4 91       	lpm	r31, Z+
    16d6:	e0 2d       	mov	r30, r0
    16d8:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    16da:	30 95       	com	r19
    16dc:	21 95       	neg	r18
    16de:	3f 4f       	sbci	r19, 0xFF	; 255
    16e0:	d5 cf       	rjmp	.-86     	; 0x168c <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    16e2:	80 93 3b 05 	sts	0x053B, r24
							cliffAvoidanceEnabled = 0;
    16e6:	10 92 3c 05 	sts	0x053C, r1
    16ea:	c6 cf       	rjmp	.-116    	; 0x1678 <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    16ec:	10 92 3b 05 	sts	0x053B, r1
							cliffAvoidanceEnabled = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	80 93 3c 05 	sts	0x053C, r24
    16f6:	20 91 ef 03 	lds	r18, 0x03EF
    16fa:	30 91 f0 03 	lds	r19, 0x03F0
    16fe:	80 91 f1 03 	lds	r24, 0x03F1
    1702:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    1706:	c0 cf       	rjmp	.-128    	; 0x1688 <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    1708:	10 92 3b 05 	sts	0x053B, r1
    170c:	20 91 ef 03 	lds	r18, 0x03EF
    1710:	30 91 f0 03 	lds	r19, 0x03F0
    1714:	80 91 f1 03 	lds	r24, 0x03F1
    1718:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    171c:	b5 cf       	rjmp	.-150    	; 0x1688 <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	80 93 3b 05 	sts	0x053B, r24
    1724:	20 91 ef 03 	lds	r18, 0x03EF
    1728:	30 91 f0 03 	lds	r19, 0x03F0
    172c:	80 91 f1 03 	lds	r24, 0x03F1
    1730:	90 91 f2 03 	lds	r25, 0x03F2
					break;
    1734:	a9 cf       	rjmp	.-174    	; 0x1688 <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    1736:	80 91 f1 03 	lds	r24, 0x03F1
    173a:	90 91 f2 03 	lds	r25, 0x03F2
    173e:	4e 97       	sbiw	r24, 0x1e	; 30
    1740:	90 93 f2 03 	sts	0x03F2, r25
    1744:	80 93 f1 03 	sts	0x03F1, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    1748:	2e ef       	ldi	r18, 0xFE	; 254
    174a:	80 30       	cpi	r24, 0x00	; 0
    174c:	92 07       	cpc	r25, r18
    174e:	9c f5       	brge	.+102    	; 0x17b6 <handleIRRemoteCommands+0x162>
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	9e ef       	ldi	r25, 0xFE	; 254
    1754:	90 93 f2 03 	sts	0x03F2, r25
    1758:	80 93 f1 03 	sts	0x03F1, r24
    175c:	20 91 ef 03 	lds	r18, 0x03EF
    1760:	30 91 f0 03 	lds	r19, 0x03F0
    1764:	91 cf       	rjmp	.-222    	; 0x1688 <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    1766:	20 91 ef 03 	lds	r18, 0x03EF
    176a:	30 91 f0 03 	lds	r19, 0x03F0
    176e:	80 91 ed 03 	lds	r24, 0x03ED
    1772:	90 91 ee 03 	lds	r25, 0x03EE
    1776:	28 17       	cp	r18, r24
    1778:	39 07       	cpc	r19, r25
    177a:	24 f0       	brlt	.+8      	; 0x1784 <handleIRRemoteCommands+0x130>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    177c:	20 91 f1 03 	lds	r18, 0x03F1
    1780:	30 91 f2 03 	lds	r19, 0x03F2
					}
					pwm_right_desired -= STEP_MOTORS;
    1784:	2e 51       	subi	r18, 0x1E	; 30
    1786:	30 40       	sbci	r19, 0x00	; 0
    1788:	30 93 f0 03 	sts	0x03F0, r19
    178c:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    1790:	c9 01       	movw	r24, r18
    1792:	30 93 f2 03 	sts	0x03F2, r19
    1796:	20 93 f1 03 	sts	0x03F1, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    179a:	4e ef       	ldi	r20, 0xFE	; 254
    179c:	20 30       	cpi	r18, 0x00	; 0
    179e:	34 07       	cpc	r19, r20
    17a0:	34 f4       	brge	.+12     	; 0x17ae <handleIRRemoteCommands+0x15a>
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	5e ef       	ldi	r21, 0xFE	; 254
    17a6:	50 93 f0 03 	sts	0x03F0, r21
    17aa:	40 93 ef 03 	sts	0x03EF, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    17ae:	4e ef       	ldi	r20, 0xFE	; 254
    17b0:	20 30       	cpi	r18, 0x00	; 0
    17b2:	34 07       	cpc	r19, r20
    17b4:	6c f2       	brlt	.-102    	; 0x1750 <handleIRRemoteCommands+0xfc>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    17b6:	20 91 ef 03 	lds	r18, 0x03EF
    17ba:	30 91 f0 03 	lds	r19, 0x03F0
    17be:	64 cf       	rjmp	.-312    	; 0x1688 <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    17c0:	20 91 ef 03 	lds	r18, 0x03EF
    17c4:	30 91 f0 03 	lds	r19, 0x03F0
    17c8:	2e 51       	subi	r18, 0x1E	; 30
    17ca:	30 40       	sbci	r19, 0x00	; 0
    17cc:	30 93 f0 03 	sts	0x03F0, r19
    17d0:	20 93 ef 03 	sts	0x03EF, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    17d4:	4e ef       	ldi	r20, 0xFE	; 254
    17d6:	20 30       	cpi	r18, 0x00	; 0
    17d8:	34 07       	cpc	r19, r20
    17da:	0c f0       	brlt	.+2      	; 0x17de <handleIRRemoteCommands+0x18a>
    17dc:	17 c1       	rjmp	.+558    	; 0x1a0c <handleIRRemoteCommands+0x3b8>
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	9e ef       	ldi	r25, 0xFE	; 254
    17e2:	90 93 f0 03 	sts	0x03F0, r25
    17e6:	80 93 ef 03 	sts	0x03EF, r24
    17ea:	80 91 f1 03 	lds	r24, 0x03F1
    17ee:	90 91 f2 03 	lds	r25, 0x03F2
    17f2:	20 e8       	ldi	r18, 0x80	; 128
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4e cf       	rjmp	.-356    	; 0x1694 <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    17f8:	20 91 ef 03 	lds	r18, 0x03EF
    17fc:	30 91 f0 03 	lds	r19, 0x03F0
    1800:	2e 51       	subi	r18, 0x1E	; 30
    1802:	30 40       	sbci	r19, 0x00	; 0
    1804:	30 93 f0 03 	sts	0x03F0, r19
    1808:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    180c:	80 91 f1 03 	lds	r24, 0x03F1
    1810:	90 91 f2 03 	lds	r25, 0x03F2
    1814:	4e 96       	adiw	r24, 0x1e	; 30
    1816:	90 93 f2 03 	sts	0x03F2, r25
    181a:	80 93 f1 03 	sts	0x03F1, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    181e:	4e ef       	ldi	r20, 0xFE	; 254
    1820:	20 30       	cpi	r18, 0x00	; 0
    1822:	34 07       	cpc	r19, r20
    1824:	34 f4       	brge	.+12     	; 0x1832 <handleIRRemoteCommands+0x1de>
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3e ef       	ldi	r19, 0xFE	; 254
    182a:	30 93 f0 03 	sts	0x03F0, r19
    182e:	20 93 ef 03 	sts	0x03EF, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    1832:	42 e0       	ldi	r20, 0x02	; 2
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	94 07       	cpc	r25, r20
    1838:	0c f4       	brge	.+2      	; 0x183c <handleIRRemoteCommands+0x1e8>
    183a:	26 cf       	rjmp	.-436    	; 0x1688 <handleIRRemoteCommands+0x34>
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	92 e0       	ldi	r25, 0x02	; 2
    1840:	90 93 f2 03 	sts	0x03F2, r25
    1844:	80 93 f1 03 	sts	0x03F1, r24
    1848:	1f cf       	rjmp	.-450    	; 0x1688 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    184a:	20 91 ef 03 	lds	r18, 0x03EF
    184e:	30 91 f0 03 	lds	r19, 0x03F0
    1852:	80 91 f1 03 	lds	r24, 0x03F1
    1856:	90 91 f2 03 	lds	r25, 0x03F2
    185a:	82 17       	cp	r24, r18
    185c:	93 07       	cpc	r25, r19
    185e:	0c f4       	brge	.+2      	; 0x1862 <handleIRRemoteCommands+0x20e>
    1860:	da c0       	rjmp	.+436    	; 0x1a16 <handleIRRemoteCommands+0x3c2>
    1862:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    1864:	22 5e       	subi	r18, 0xE2	; 226
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	30 93 f0 03 	sts	0x03F0, r19
    186c:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired += STEP_MOTORS;
    1870:	4e 96       	adiw	r24, 0x1e	; 30
    1872:	90 93 f2 03 	sts	0x03F2, r25
    1876:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    187a:	42 e0       	ldi	r20, 0x02	; 2
    187c:	21 30       	cpi	r18, 0x01	; 1
    187e:	34 07       	cpc	r19, r20
    1880:	34 f0       	brlt	.+12     	; 0x188e <handleIRRemoteCommands+0x23a>
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	32 e0       	ldi	r19, 0x02	; 2
    1886:	30 93 f0 03 	sts	0x03F0, r19
    188a:	20 93 ef 03 	sts	0x03EF, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    188e:	22 e0       	ldi	r18, 0x02	; 2
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	92 07       	cpc	r25, r18
    1894:	0c f4       	brge	.+2      	; 0x1898 <handleIRRemoteCommands+0x244>
    1896:	8f cf       	rjmp	.-226    	; 0x17b6 <handleIRRemoteCommands+0x162>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	92 e0       	ldi	r25, 0x02	; 2
    189c:	90 93 f2 03 	sts	0x03F2, r25
    18a0:	80 93 f1 03 	sts	0x03F1, r24
    18a4:	20 91 ef 03 	lds	r18, 0x03EF
    18a8:	30 91 f0 03 	lds	r19, 0x03F0
    18ac:	ed ce       	rjmp	.-550    	; 0x1688 <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    18ae:	20 91 ef 03 	lds	r18, 0x03EF
    18b2:	30 91 f0 03 	lds	r19, 0x03F0
    18b6:	22 5e       	subi	r18, 0xE2	; 226
    18b8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ba:	30 93 f0 03 	sts	0x03F0, r19
    18be:	20 93 ef 03 	sts	0x03EF, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    18c2:	42 e0       	ldi	r20, 0x02	; 2
    18c4:	21 30       	cpi	r18, 0x01	; 1
    18c6:	34 07       	cpc	r19, r20
    18c8:	0c f4       	brge	.+2      	; 0x18cc <handleIRRemoteCommands+0x278>
    18ca:	a0 c0       	rjmp	.+320    	; 0x1a0c <handleIRRemoteCommands+0x3b8>
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	92 e0       	ldi	r25, 0x02	; 2
    18d0:	90 93 f0 03 	sts	0x03F0, r25
    18d4:	80 93 ef 03 	sts	0x03EF, r24
    18d8:	80 91 f1 03 	lds	r24, 0x03F1
    18dc:	90 91 f2 03 	lds	r25, 0x03F2
    18e0:	20 e8       	ldi	r18, 0x80	; 128
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	d7 ce       	rjmp	.-594    	; 0x1694 <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    18e6:	80 91 15 05 	lds	r24, 0x0515
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	65 e0       	ldi	r22, 0x05	; 5
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	0e 94 92 28 	call	0x5124	; 0x5124 <__divmodhi4>
    18f6:	80 93 15 05 	sts	0x0515, r24

					if(colorState==0) {			// turn on blue and off all IRs
    18fa:	88 23       	and	r24, r24
    18fc:	09 f0       	breq	.+2      	; 0x1900 <handleIRRemoteCommands+0x2ac>
    18fe:	8d c0       	rjmp	.+282    	; 0x1a1a <handleIRRemoteCommands+0x3c6>
						LED_IR1_HIGH;
    1900:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    1902:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    1904:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    1908:	8f ef       	ldi	r24, 0xFF	; 255
    190a:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    190e:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    1912:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <updateRedLed>
					updateGreenLed(pwm_green);
    1916:	80 91 0d 02 	lds	r24, 0x020D
    191a:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <updateGreenLed>
					updateBlueLed(pwm_blue);
    191e:	80 91 0e 02 	lds	r24, 0x020E
    1922:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <updateBlueLed>
    1926:	20 91 ef 03 	lds	r18, 0x03EF
    192a:	30 91 f0 03 	lds	r19, 0x03F0
    192e:	80 91 f1 03 	lds	r24, 0x03F1
    1932:	90 91 f2 03 	lds	r25, 0x03F2

	               	break;
    1936:	a8 ce       	rjmp	.-688    	; 0x1688 <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    1938:	80 91 16 05 	lds	r24, 0x0516
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	83 70       	andi	r24, 0x03	; 3
    1942:	90 70       	andi	r25, 0x00	; 0
    1944:	80 93 16 05 	sts	0x0516, r24
					switch(behaviorState) {
    1948:	82 30       	cpi	r24, 0x02	; 2
    194a:	09 f4       	brne	.+2      	; 0x194e <handleIRRemoteCommands+0x2fa>
    194c:	cf ce       	rjmp	.-610    	; 0x16ec <handleIRRemoteCommands+0x98>
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	09 f4       	brne	.+2      	; 0x1954 <handleIRRemoteCommands+0x300>
    1952:	53 c0       	rjmp	.+166    	; 0x19fa <handleIRRemoteCommands+0x3a6>
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	09 f4       	brne	.+2      	; 0x195a <handleIRRemoteCommands+0x306>
    1958:	c4 ce       	rjmp	.-632    	; 0x16e2 <handleIRRemoteCommands+0x8e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    195a:	10 92 3b 05 	sts	0x053B, r1
							cliffAvoidanceEnabled = 0;
    195e:	10 92 3c 05 	sts	0x053C, r1
    1962:	8a ce       	rjmp	.-748    	; 0x1678 <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    1964:	20 91 ef 03 	lds	r18, 0x03EF
    1968:	30 91 f0 03 	lds	r19, 0x03F0
    196c:	22 5e       	subi	r18, 0xE2	; 226
    196e:	3f 4f       	sbci	r19, 0xFF	; 255
    1970:	30 93 f0 03 	sts	0x03F0, r19
    1974:	20 93 ef 03 	sts	0x03EF, r18
					pwm_left_desired -= STEP_MOTORS;
    1978:	80 91 f1 03 	lds	r24, 0x03F1
    197c:	90 91 f2 03 	lds	r25, 0x03F2
    1980:	4e 97       	sbiw	r24, 0x1e	; 30
    1982:	90 93 f2 03 	sts	0x03F2, r25
    1986:	80 93 f1 03 	sts	0x03F1, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    198a:	42 e0       	ldi	r20, 0x02	; 2
    198c:	21 30       	cpi	r18, 0x01	; 1
    198e:	34 07       	cpc	r19, r20
    1990:	34 f0       	brlt	.+12     	; 0x199e <handleIRRemoteCommands+0x34a>
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	32 e0       	ldi	r19, 0x02	; 2
    1996:	30 93 f0 03 	sts	0x03F0, r19
    199a:	20 93 ef 03 	sts	0x03EF, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    199e:	4e ef       	ldi	r20, 0xFE	; 254
    19a0:	80 30       	cpi	r24, 0x00	; 0
    19a2:	94 07       	cpc	r25, r20
    19a4:	0c f0       	brlt	.+2      	; 0x19a8 <handleIRRemoteCommands+0x354>
    19a6:	70 ce       	rjmp	.-800    	; 0x1688 <handleIRRemoteCommands+0x34>
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	9e ef       	ldi	r25, 0xFE	; 254
    19ac:	90 93 f2 03 	sts	0x03F2, r25
    19b0:	80 93 f1 03 	sts	0x03F1, r24
    19b4:	69 ce       	rjmp	.-814    	; 0x1688 <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    19b6:	10 92 f0 03 	sts	0x03F0, r1
    19ba:	10 92 ef 03 	sts	0x03EF, r1
					pwm_left_desired = 0;
    19be:	10 92 f2 03 	sts	0x03F2, r1
    19c2:	10 92 f1 03 	sts	0x03F1, r1
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	5e ce       	rjmp	.-836    	; 0x168c <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    19d0:	80 91 f1 03 	lds	r24, 0x03F1
    19d4:	90 91 f2 03 	lds	r25, 0x03F2
    19d8:	4e 96       	adiw	r24, 0x1e	; 30
    19da:	90 93 f2 03 	sts	0x03F2, r25
    19de:	80 93 f1 03 	sts	0x03F1, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    19e2:	22 e0       	ldi	r18, 0x02	; 2
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	92 07       	cpc	r25, r18
    19e8:	0c f4       	brge	.+2      	; 0x19ec <handleIRRemoteCommands+0x398>
    19ea:	e5 ce       	rjmp	.-566    	; 0x17b6 <handleIRRemoteCommands+0x162>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	92 e0       	ldi	r25, 0x02	; 2
    19f0:	90 93 f2 03 	sts	0x03F2, r25
    19f4:	80 93 f1 03 	sts	0x03F1, r24
    19f8:	de ce       	rjmp	.-580    	; 0x17b6 <handleIRRemoteCommands+0x162>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	80 93 3b 05 	sts	0x053B, r24
							cliffAvoidanceEnabled = 1;
    1a00:	80 93 3c 05 	sts	0x053C, r24
    1a04:	20 91 ef 03 	lds	r18, 0x03EF
    1a08:	30 91 f0 03 	lds	r19, 0x03F0
    1a0c:	80 91 f1 03 	lds	r24, 0x03F1
    1a10:	90 91 f2 03 	lds	r25, 0x03F2
							break;
    1a14:	39 ce       	rjmp	.-910    	; 0x1688 <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    1a16:	c9 01       	movw	r24, r18
    1a18:	25 cf       	rjmp	.-438    	; 0x1864 <handleIRRemoteCommands+0x210>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	61 f0       	breq	.+24     	; 0x1a36 <handleIRRemoteCommands+0x3e2>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	91 f0       	breq	.+36     	; 0x1a46 <handleIRRemoteCommands+0x3f2>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    1a22:	83 30       	cpi	r24, 0x03	; 3
    1a24:	d9 f0       	breq	.+54     	; 0x1a5c <handleIRRemoteCommands+0x408>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1a2c:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    1a30:	80 93 0c 02 	sts	0x020C, r24
    1a34:	6e cf       	rjmp	.-292    	; 0x1912 <handleIRRemoteCommands+0x2be>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    1a36:	8f ef       	ldi	r24, 0xFF	; 255
    1a38:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    1a3c:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    1a40:	80 93 0c 02 	sts	0x020C, r24
    1a44:	66 cf       	rjmp	.-308    	; 0x1912 <handleIRRemoteCommands+0x2be>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    1a46:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    1a48:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    1a4a:	8f ef       	ldi	r24, 0xFF	; 255
    1a4c:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    1a50:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    1a54:	10 92 0c 02 	sts	0x020C, r1
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	5b cf       	rjmp	.-330    	; 0x1912 <handleIRRemoteCommands+0x2be>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    1a5c:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    1a60:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    1a64:	10 92 0c 02 	sts	0x020C, r1
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	53 cf       	rjmp	.-346    	; 0x1912 <handleIRRemoteCommands+0x2be>

00001a6c <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    1a6c:	08 95       	ret

00001a6e <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    1a78:	80 81       	ld	r24, Z
    1a7a:	91 81       	ldd	r25, Z+1	; 0x01
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <start_vertical_speed_control_left+0x14>
    1a80:	b7 c0       	rjmp	.+366    	; 0x1bf0 <start_vertical_speed_control_left+0x182>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1a82:	20 91 2a 05 	lds	r18, 0x052A
    1a86:	30 91 2b 05 	lds	r19, 0x052B
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	2e 30       	cpi	r18, 0x0E	; 14
    1a8e:	34 07       	cpc	r19, r20
    1a90:	0c f4       	brge	.+2      	; 0x1a94 <start_vertical_speed_control_left+0x26>
    1a92:	88 c0       	rjmp	.+272    	; 0x1ba4 <start_vertical_speed_control_left+0x136>
		if(*pwm_left > 0) {
    1a94:	18 16       	cp	r1, r24
    1a96:	19 06       	cpc	r1, r25
    1a98:	0c f0       	brlt	.+2      	; 0x1a9c <start_vertical_speed_control_left+0x2e>
    1a9a:	13 c1       	rjmp	.+550    	; 0x1cc2 <start_vertical_speed_control_left+0x254>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    1a9c:	88 e6       	ldi	r24, 0x68	; 104
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    1aa0:	82 1b       	sub	r24, r18
    1aa2:	93 0b       	sbc	r25, r19
    1aa4:	95 95       	asr	r25
    1aa6:	87 95       	ror	r24
    1aa8:	95 95       	asr	r25
    1aaa:	87 95       	ror	r24
    1aac:	29 e1       	ldi	r18, 0x19	; 25
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	28 1b       	sub	r18, r24
    1ab2:	39 0b       	sbc	r19, r25
    1ab4:	30 93 04 02 	sts	0x0204, r19
    1ab8:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    1abc:	40 91 3f 05 	lds	r20, 0x053F
    1ac0:	50 91 40 05 	lds	r21, 0x0540
    1ac4:	50 93 5a 05 	sts	0x055A, r21
    1ac8:	40 93 59 05 	sts	0x0559, r20
	if(*pwm_left >= 0) {
    1acc:	20 81       	ld	r18, Z
    1ace:	31 81       	ldd	r19, Z+1	; 0x01
    1ad0:	37 fd       	sbrc	r19, 7
    1ad2:	d2 c0       	rjmp	.+420    	; 0x1c78 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    1ad4:	80 91 e7 03 	lds	r24, 0x03E7
    1ad8:	90 91 e8 03 	lds	r25, 0x03E8
    1adc:	b9 01       	movw	r22, r18
    1ade:	68 1b       	sub	r22, r24
    1ae0:	79 0b       	sbc	r23, r25
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	70 93 40 05 	sts	0x0540, r23
    1ae8:	60 93 3f 05 	sts	0x053F, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    1aec:	20 91 f7 03 	lds	r18, 0x03F7
    1af0:	30 91 f8 03 	lds	r19, 0x03F8
    1af4:	28 0f       	add	r18, r24
    1af6:	39 1f       	adc	r19, r25
    1af8:	30 93 f8 03 	sts	0x03F8, r19
    1afc:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    1b00:	76 e0       	ldi	r23, 0x06	; 6
    1b02:	21 34       	cpi	r18, 0x41	; 65
    1b04:	37 07       	cpc	r19, r23
    1b06:	0c f4       	brge	.+2      	; 0x1b0a <start_vertical_speed_control_left+0x9c>
    1b08:	84 c0       	rjmp	.+264    	; 0x1c12 <start_vertical_speed_control_left+0x1a4>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    1b0a:	20 e4       	ldi	r18, 0x40	; 64
    1b0c:	36 e0       	ldi	r19, 0x06	; 6
    1b0e:	30 93 f8 03 	sts	0x03F8, r19
    1b12:	20 93 f7 03 	sts	0x03F7, r18
    1b16:	60 ec       	ldi	r22, 0xC0	; 192
    1b18:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1b1a:	9c 01       	movw	r18, r24
    1b1c:	22 0f       	add	r18, r18
    1b1e:	33 1f       	adc	r19, r19
    1b20:	dc 01       	movw	r26, r24
    1b22:	aa 0f       	add	r26, r26
    1b24:	bb 1f       	adc	r27, r27
    1b26:	aa 0f       	add	r26, r26
    1b28:	bb 1f       	adc	r27, r27
    1b2a:	aa 0f       	add	r26, r26
    1b2c:	bb 1f       	adc	r27, r27
    1b2e:	2a 0f       	add	r18, r26
    1b30:	3b 1f       	adc	r19, r27
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    1b32:	00 81       	ld	r16, Z
    1b34:	11 81       	ldd	r17, Z+1	; 0x01
    1b36:	c0 91 03 02 	lds	r28, 0x0203
    1b3a:	d0 91 04 02 	lds	r29, 0x0204
    1b3e:	0c 9f       	mul	r16, r28
    1b40:	d0 01       	movw	r26, r0
    1b42:	0d 9f       	mul	r16, r29
    1b44:	b0 0d       	add	r27, r0
    1b46:	1c 9f       	mul	r17, r28
    1b48:	b0 0d       	add	r27, r0
    1b4a:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    1b4c:	2a 0f       	add	r18, r26
    1b4e:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    1b50:	48 1b       	sub	r20, r24
    1b52:	59 0b       	sbc	r21, r25
    1b54:	44 0f       	add	r20, r20
    1b56:	55 1f       	adc	r21, r21
    1b58:	24 0f       	add	r18, r20
    1b5a:	35 1f       	adc	r19, r21
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    1b5c:	26 0f       	add	r18, r22
    1b5e:	37 1f       	adc	r19, r23
    1b60:	30 93 f6 03 	sts	0x03F6, r19
    1b64:	20 93 f5 03 	sts	0x03F5, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1b68:	37 fd       	sbrc	r19, 7
    1b6a:	69 c0       	rjmp	.+210    	; 0x1c3e <start_vertical_speed_control_left+0x1d0>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    1b6c:	12 16       	cp	r1, r18
    1b6e:	13 06       	cpc	r1, r19
    1b70:	0c f0       	brlt	.+2      	; 0x1b74 <start_vertical_speed_control_left+0x106>
    1b72:	6f c0       	rjmp	.+222    	; 0x1c52 <start_vertical_speed_control_left+0x1e4>
    1b74:	80 81       	ld	r24, Z
    1b76:	91 81       	ldd	r25, Z+1	; 0x01
    1b78:	97 fd       	sbrc	r25, 7
    1b7a:	89 c0       	rjmp	.+274    	; 0x1c8e <start_vertical_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    1b7c:	7d e5       	ldi	r23, 0x5D	; 93
    1b7e:	21 3c       	cpi	r18, 0xC1	; 193
    1b80:	37 07       	cpc	r19, r23
    1b82:	0c f4       	brge	.+2      	; 0x1b86 <start_vertical_speed_control_left+0x118>
    1b84:	66 c0       	rjmp	.+204    	; 0x1c52 <start_vertical_speed_control_left+0x1e4>
    1b86:	80 ec       	ldi	r24, 0xC0	; 192
    1b88:	9d e5       	ldi	r25, 0x5D	; 93
    1b8a:	90 93 f6 03 	sts	0x03F6, r25
    1b8e:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	92 e0       	ldi	r25, 0x02	; 2
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    1ba4:	24 3b       	cpi	r18, 0xB4	; 180
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	94 f4       	brge	.+36     	; 0x1bce <start_vertical_speed_control_left+0x160>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    1baa:	2a 35       	cpi	r18, 0x5A	; 90
    1bac:	31 05       	cpc	r19, r1
    1bae:	7c f4       	brge	.+30     	; 0x1bce <start_vertical_speed_control_left+0x160>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    1bb0:	18 16       	cp	r1, r24
    1bb2:	19 06       	cpc	r1, r25
    1bb4:	0c f0       	brlt	.+2      	; 0x1bb8 <start_vertical_speed_control_left+0x14a>
    1bb6:	93 c0       	rjmp	.+294    	; 0x1cde <start_vertical_speed_control_left+0x270>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    1bb8:	35 95       	asr	r19
    1bba:	27 95       	ror	r18
    1bbc:	35 95       	asr	r19
    1bbe:	27 95       	ror	r18
    1bc0:	27 5e       	subi	r18, 0xE7	; 231
    1bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc4:	30 93 04 02 	sts	0x0204, r19
    1bc8:	20 93 03 02 	sts	0x0203, r18
    1bcc:	77 cf       	rjmp	.-274    	; 0x1abc <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    1bce:	18 16       	cp	r1, r24
    1bd0:	19 06       	cpc	r1, r25
    1bd2:	94 f5       	brge	.+100    	; 0x1c38 <start_vertical_speed_control_left+0x1ca>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    1bd4:	84 eb       	ldi	r24, 0xB4	; 180
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	82 1b       	sub	r24, r18
    1bda:	93 0b       	sbc	r25, r19
    1bdc:	95 95       	asr	r25
    1bde:	87 95       	ror	r24
    1be0:	95 95       	asr	r25
    1be2:	87 95       	ror	r24
    1be4:	49 96       	adiw	r24, 0x19	; 25
    1be6:	90 93 04 02 	sts	0x0204, r25
    1bea:	80 93 03 02 	sts	0x0203, r24
    1bee:	66 cf       	rjmp	.-308    	; 0x1abc <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    1bf0:	10 92 f8 03 	sts	0x03F8, r1
    1bf4:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    1bf8:	10 92 40 05 	sts	0x0540, r1
    1bfc:	10 92 3f 05 	sts	0x053F, r1
		delta_left_speed_prev = 0;
    1c00:	10 92 5a 05 	sts	0x055A, r1
    1c04:	10 92 59 05 	sts	0x0559, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1c12:	69 ef       	ldi	r22, 0xF9	; 249
    1c14:	20 3c       	cpi	r18, 0xC0	; 192
    1c16:	36 07       	cpc	r19, r22
    1c18:	4c f4       	brge	.+18     	; 0x1c2c <start_vertical_speed_control_left+0x1be>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    1c1a:	20 ec       	ldi	r18, 0xC0	; 192
    1c1c:	39 ef       	ldi	r19, 0xF9	; 249
    1c1e:	30 93 f8 03 	sts	0x03F8, r19
    1c22:	20 93 f7 03 	sts	0x03F7, r18
    1c26:	60 e4       	ldi	r22, 0x40	; 64
    1c28:	7d ee       	ldi	r23, 0xED	; 237
    1c2a:	77 cf       	rjmp	.-274    	; 0x1b1a <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    1c2c:	b9 01       	movw	r22, r18
    1c2e:	66 0f       	add	r22, r22
    1c30:	77 1f       	adc	r23, r23
    1c32:	62 0f       	add	r22, r18
    1c34:	73 1f       	adc	r23, r19
    1c36:	71 cf       	rjmp	.-286    	; 0x1b1a <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    1c38:	84 eb       	ldi	r24, 0xB4	; 180
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	31 cf       	rjmp	.-414    	; 0x1aa0 <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    1c3e:	80 81       	ld	r24, Z
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
    1c42:	97 fd       	sbrc	r25, 7
    1c44:	06 c0       	rjmp	.+12     	; 0x1c52 <start_vertical_speed_control_left+0x1e4>
		pwm_left_speed_controller = 0;
    1c46:	10 92 f6 03 	sts	0x03F6, r1
    1c4a:	10 92 f5 03 	sts	0x03F5, r1
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1c52:	82 ea       	ldi	r24, 0xA2	; 162
    1c54:	20 34       	cpi	r18, 0x40	; 64
    1c56:	38 07       	cpc	r19, r24
    1c58:	04 f5       	brge	.+64     	; 0x1c9a <start_vertical_speed_control_left+0x22c>
    1c5a:	80 e4       	ldi	r24, 0x40	; 64
    1c5c:	92 ea       	ldi	r25, 0xA2	; 162
    1c5e:	90 93 f6 03 	sts	0x03F6, r25
    1c62:	80 93 f5 03 	sts	0x03F5, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	9e ef       	ldi	r25, 0xFE	; 254
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24


}
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	1f 91       	pop	r17
    1c74:	0f 91       	pop	r16
    1c76:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    1c78:	80 91 e7 03 	lds	r24, 0x03E7
    1c7c:	90 91 e8 03 	lds	r25, 0x03E8
    1c80:	82 0f       	add	r24, r18
    1c82:	93 1f       	adc	r25, r19
    1c84:	90 93 40 05 	sts	0x0540, r25
    1c88:	80 93 3f 05 	sts	0x053F, r24
    1c8c:	2f cf       	rjmp	.-418    	; 0x1aec <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    1c8e:	10 92 f6 03 	sts	0x03F6, r1
    1c92:	10 92 f5 03 	sts	0x03F5, r1
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    1c9a:	35 95       	asr	r19
    1c9c:	27 95       	ror	r18
    1c9e:	35 95       	asr	r19
    1ca0:	27 95       	ror	r18
    1ca2:	35 95       	asr	r19
    1ca4:	27 95       	ror	r18
    1ca6:	35 95       	asr	r19
    1ca8:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    1caa:	31 83       	std	Z+1, r19	; 0x01
    1cac:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    1cae:	42 e0       	ldi	r20, 0x02	; 2
    1cb0:	21 30       	cpi	r18, 0x01	; 1
    1cb2:	34 07       	cpc	r19, r20
    1cb4:	0c f0       	brlt	.+2      	; 0x1cb8 <start_vertical_speed_control_left+0x24a>
    1cb6:	6d cf       	rjmp	.-294    	; 0x1b92 <start_vertical_speed_control_left+0x124>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    1cb8:	6e ef       	ldi	r22, 0xFE	; 254
    1cba:	20 30       	cpi	r18, 0x00	; 0
    1cbc:	36 07       	cpc	r19, r22
    1cbe:	9c f2       	brlt	.-90     	; 0x1c66 <start_vertical_speed_control_left+0x1f8>
    1cc0:	6c cf       	rjmp	.-296    	; 0x1b9a <start_vertical_speed_control_left+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    1cc2:	88 e6       	ldi	r24, 0x68	; 104
    1cc4:	91 e0       	ldi	r25, 0x01	; 1
    1cc6:	82 1b       	sub	r24, r18
    1cc8:	93 0b       	sbc	r25, r19
    1cca:	95 95       	asr	r25
    1ccc:	87 95       	ror	r24
    1cce:	95 95       	asr	r25
    1cd0:	87 95       	ror	r24
    1cd2:	49 96       	adiw	r24, 0x19	; 25
    1cd4:	90 93 04 02 	sts	0x0204, r25
    1cd8:	80 93 03 02 	sts	0x0203, r24
    1cdc:	ef ce       	rjmp	.-546    	; 0x1abc <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    1cde:	35 95       	asr	r19
    1ce0:	27 95       	ror	r18
    1ce2:	35 95       	asr	r19
    1ce4:	27 95       	ror	r18
    1ce6:	89 e1       	ldi	r24, 0x19	; 25
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	82 1b       	sub	r24, r18
    1cec:	93 0b       	sbc	r25, r19
    1cee:	90 93 04 02 	sts	0x0204, r25
    1cf2:	80 93 03 02 	sts	0x0203, r24
    1cf6:	e2 ce       	rjmp	.-572    	; 0x1abc <start_vertical_speed_control_left+0x4e>

00001cf8 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <start_vertical_speed_control_right+0x14>
    1d0a:	b7 c0       	rjmp	.+366    	; 0x1e7a <start_vertical_speed_control_right+0x182>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    1d0c:	20 91 2a 05 	lds	r18, 0x052A
    1d10:	30 91 2b 05 	lds	r19, 0x052B
    1d14:	41 e0       	ldi	r20, 0x01	; 1
    1d16:	2e 30       	cpi	r18, 0x0E	; 14
    1d18:	34 07       	cpc	r19, r20
    1d1a:	0c f4       	brge	.+2      	; 0x1d1e <start_vertical_speed_control_right+0x26>
    1d1c:	88 c0       	rjmp	.+272    	; 0x1e2e <start_vertical_speed_control_right+0x136>
		if(*pwm_right > 0) {
    1d1e:	18 16       	cp	r1, r24
    1d20:	19 06       	cpc	r1, r25
    1d22:	0c f0       	brlt	.+2      	; 0x1d26 <start_vertical_speed_control_right+0x2e>
    1d24:	13 c1       	rjmp	.+550    	; 0x1f4c <start_vertical_speed_control_right+0x254>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    1d26:	88 e6       	ldi	r24, 0x68	; 104
    1d28:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1d2a:	82 1b       	sub	r24, r18
    1d2c:	93 0b       	sbc	r25, r19
    1d2e:	95 95       	asr	r25
    1d30:	87 95       	ror	r24
    1d32:	95 95       	asr	r25
    1d34:	87 95       	ror	r24
    1d36:	29 e1       	ldi	r18, 0x19	; 25
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	28 1b       	sub	r18, r24
    1d3c:	39 0b       	sbc	r19, r25
    1d3e:	30 93 06 02 	sts	0x0206, r19
    1d42:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    1d46:	40 91 68 05 	lds	r20, 0x0568
    1d4a:	50 91 69 05 	lds	r21, 0x0569
    1d4e:	50 93 42 05 	sts	0x0542, r21
    1d52:	40 93 41 05 	sts	0x0541, r20
	if(*pwm_right >= 0) {
    1d56:	20 81       	ld	r18, Z
    1d58:	31 81       	ldd	r19, Z+1	; 0x01
    1d5a:	37 fd       	sbrc	r19, 7
    1d5c:	d2 c0       	rjmp	.+420    	; 0x1f02 <start_vertical_speed_control_right+0x20a>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1d5e:	80 91 e9 03 	lds	r24, 0x03E9
    1d62:	90 91 ea 03 	lds	r25, 0x03EA
    1d66:	b9 01       	movw	r22, r18
    1d68:	68 1b       	sub	r22, r24
    1d6a:	79 0b       	sbc	r23, r25
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	70 93 69 05 	sts	0x0569, r23
    1d72:	60 93 68 05 	sts	0x0568, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    1d76:	20 91 f9 03 	lds	r18, 0x03F9
    1d7a:	30 91 fa 03 	lds	r19, 0x03FA
    1d7e:	28 0f       	add	r18, r24
    1d80:	39 1f       	adc	r19, r25
    1d82:	30 93 fa 03 	sts	0x03FA, r19
    1d86:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    1d8a:	76 e0       	ldi	r23, 0x06	; 6
    1d8c:	21 34       	cpi	r18, 0x41	; 65
    1d8e:	37 07       	cpc	r19, r23
    1d90:	0c f4       	brge	.+2      	; 0x1d94 <start_vertical_speed_control_right+0x9c>
    1d92:	84 c0       	rjmp	.+264    	; 0x1e9c <start_vertical_speed_control_right+0x1a4>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    1d94:	20 e4       	ldi	r18, 0x40	; 64
    1d96:	36 e0       	ldi	r19, 0x06	; 6
    1d98:	30 93 fa 03 	sts	0x03FA, r19
    1d9c:	20 93 f9 03 	sts	0x03F9, r18
    1da0:	60 ec       	ldi	r22, 0xC0	; 192
    1da2:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    1da4:	9c 01       	movw	r18, r24
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	dc 01       	movw	r26, r24
    1dac:	aa 0f       	add	r26, r26
    1dae:	bb 1f       	adc	r27, r27
    1db0:	aa 0f       	add	r26, r26
    1db2:	bb 1f       	adc	r27, r27
    1db4:	aa 0f       	add	r26, r26
    1db6:	bb 1f       	adc	r27, r27
    1db8:	2a 0f       	add	r18, r26
    1dba:	3b 1f       	adc	r19, r27
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    1dbc:	00 81       	ld	r16, Z
    1dbe:	11 81       	ldd	r17, Z+1	; 0x01
    1dc0:	c0 91 05 02 	lds	r28, 0x0205
    1dc4:	d0 91 06 02 	lds	r29, 0x0206
    1dc8:	0c 9f       	mul	r16, r28
    1dca:	d0 01       	movw	r26, r0
    1dcc:	0d 9f       	mul	r16, r29
    1dce:	b0 0d       	add	r27, r0
    1dd0:	1c 9f       	mul	r17, r28
    1dd2:	b0 0d       	add	r27, r0
    1dd4:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    1dd6:	2a 0f       	add	r18, r26
    1dd8:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    1dda:	48 1b       	sub	r20, r24
    1ddc:	59 0b       	sbc	r21, r25
    1dde:	44 0f       	add	r20, r20
    1de0:	55 1f       	adc	r21, r21
    1de2:	24 0f       	add	r18, r20
    1de4:	35 1f       	adc	r19, r21
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    1de6:	26 0f       	add	r18, r22
    1de8:	37 1f       	adc	r19, r23
    1dea:	30 93 f4 03 	sts	0x03F4, r19
    1dee:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1df2:	37 fd       	sbrc	r19, 7
    1df4:	69 c0       	rjmp	.+210    	; 0x1ec8 <start_vertical_speed_control_right+0x1d0>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    1df6:	12 16       	cp	r1, r18
    1df8:	13 06       	cpc	r1, r19
    1dfa:	0c f0       	brlt	.+2      	; 0x1dfe <start_vertical_speed_control_right+0x106>
    1dfc:	6f c0       	rjmp	.+222    	; 0x1edc <start_vertical_speed_control_right+0x1e4>
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	97 fd       	sbrc	r25, 7
    1e04:	89 c0       	rjmp	.+274    	; 0x1f18 <start_vertical_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    1e06:	7d e5       	ldi	r23, 0x5D	; 93
    1e08:	21 3c       	cpi	r18, 0xC1	; 193
    1e0a:	37 07       	cpc	r19, r23
    1e0c:	0c f4       	brge	.+2      	; 0x1e10 <start_vertical_speed_control_right+0x118>
    1e0e:	66 c0       	rjmp	.+204    	; 0x1edc <start_vertical_speed_control_right+0x1e4>
    1e10:	80 ec       	ldi	r24, 0xC0	; 192
    1e12:	9d e5       	ldi	r25, 0x5D	; 93
    1e14:	90 93 f4 03 	sts	0x03F4, r25
    1e18:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	92 e0       	ldi	r25, 0x02	; 2
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    1e2e:	24 3b       	cpi	r18, 0xB4	; 180
    1e30:	31 05       	cpc	r19, r1
    1e32:	94 f4       	brge	.+36     	; 0x1e58 <start_vertical_speed_control_right+0x160>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    1e34:	2a 35       	cpi	r18, 0x5A	; 90
    1e36:	31 05       	cpc	r19, r1
    1e38:	7c f4       	brge	.+30     	; 0x1e58 <start_vertical_speed_control_right+0x160>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    1e3a:	18 16       	cp	r1, r24
    1e3c:	19 06       	cpc	r1, r25
    1e3e:	0c f0       	brlt	.+2      	; 0x1e42 <start_vertical_speed_control_right+0x14a>
    1e40:	93 c0       	rjmp	.+294    	; 0x1f68 <start_vertical_speed_control_right+0x270>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    1e42:	35 95       	asr	r19
    1e44:	27 95       	ror	r18
    1e46:	35 95       	asr	r19
    1e48:	27 95       	ror	r18
    1e4a:	27 5e       	subi	r18, 0xE7	; 231
    1e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4e:	30 93 06 02 	sts	0x0206, r19
    1e52:	20 93 05 02 	sts	0x0205, r18
    1e56:	77 cf       	rjmp	.-274    	; 0x1d46 <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    1e58:	18 16       	cp	r1, r24
    1e5a:	19 06       	cpc	r1, r25
    1e5c:	94 f5       	brge	.+100    	; 0x1ec2 <start_vertical_speed_control_right+0x1ca>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    1e5e:	84 eb       	ldi	r24, 0xB4	; 180
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	82 1b       	sub	r24, r18
    1e64:	93 0b       	sbc	r25, r19
    1e66:	95 95       	asr	r25
    1e68:	87 95       	ror	r24
    1e6a:	95 95       	asr	r25
    1e6c:	87 95       	ror	r24
    1e6e:	49 96       	adiw	r24, 0x19	; 25
    1e70:	90 93 06 02 	sts	0x0206, r25
    1e74:	80 93 05 02 	sts	0x0205, r24
    1e78:	66 cf       	rjmp	.-308    	; 0x1d46 <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    1e7a:	10 92 fa 03 	sts	0x03FA, r1
    1e7e:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    1e82:	10 92 69 05 	sts	0x0569, r1
    1e86:	10 92 68 05 	sts	0x0568, r1
		delta_right_speed_prev = 0;
    1e8a:	10 92 42 05 	sts	0x0542, r1
    1e8e:	10 92 41 05 	sts	0x0541, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1e9c:	69 ef       	ldi	r22, 0xF9	; 249
    1e9e:	20 3c       	cpi	r18, 0xC0	; 192
    1ea0:	36 07       	cpc	r19, r22
    1ea2:	4c f4       	brge	.+18     	; 0x1eb6 <start_vertical_speed_control_right+0x1be>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    1ea4:	20 ec       	ldi	r18, 0xC0	; 192
    1ea6:	39 ef       	ldi	r19, 0xF9	; 249
    1ea8:	30 93 fa 03 	sts	0x03FA, r19
    1eac:	20 93 f9 03 	sts	0x03F9, r18
    1eb0:	60 e4       	ldi	r22, 0x40	; 64
    1eb2:	7d ee       	ldi	r23, 0xED	; 237
    1eb4:	77 cf       	rjmp	.-274    	; 0x1da4 <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    1eb6:	b9 01       	movw	r22, r18
    1eb8:	66 0f       	add	r22, r22
    1eba:	77 1f       	adc	r23, r23
    1ebc:	62 0f       	add	r22, r18
    1ebe:	73 1f       	adc	r23, r19
    1ec0:	71 cf       	rjmp	.-286    	; 0x1da4 <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    1ec2:	84 eb       	ldi	r24, 0xB4	; 180
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	31 cf       	rjmp	.-414    	; 0x1d2a <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	97 fd       	sbrc	r25, 7
    1ece:	06 c0       	rjmp	.+12     	; 0x1edc <start_vertical_speed_control_right+0x1e4>
		pwm_right_speed_controller = 0;
    1ed0:	10 92 f4 03 	sts	0x03F4, r1
    1ed4:	10 92 f3 03 	sts	0x03F3, r1
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1edc:	82 ea       	ldi	r24, 0xA2	; 162
    1ede:	20 34       	cpi	r18, 0x40	; 64
    1ee0:	38 07       	cpc	r19, r24
    1ee2:	04 f5       	brge	.+64     	; 0x1f24 <start_vertical_speed_control_right+0x22c>
    1ee4:	80 e4       	ldi	r24, 0x40	; 64
    1ee6:	92 ea       	ldi	r25, 0xA2	; 162
    1ee8:	90 93 f4 03 	sts	0x03F4, r25
    1eec:	80 93 f3 03 	sts	0x03F3, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	9e ef       	ldi	r25, 0xFE	; 254
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24

}
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	1f 91       	pop	r17
    1efe:	0f 91       	pop	r16
    1f00:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    1f02:	80 91 e9 03 	lds	r24, 0x03E9
    1f06:	90 91 ea 03 	lds	r25, 0x03EA
    1f0a:	82 0f       	add	r24, r18
    1f0c:	93 1f       	adc	r25, r19
    1f0e:	90 93 69 05 	sts	0x0569, r25
    1f12:	80 93 68 05 	sts	0x0568, r24
    1f16:	2f cf       	rjmp	.-418    	; 0x1d76 <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    1f18:	10 92 f4 03 	sts	0x03F4, r1
    1f1c:	10 92 f3 03 	sts	0x03F3, r1
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    1f24:	35 95       	asr	r19
    1f26:	27 95       	ror	r18
    1f28:	35 95       	asr	r19
    1f2a:	27 95       	ror	r18
    1f2c:	35 95       	asr	r19
    1f2e:	27 95       	ror	r18
    1f30:	35 95       	asr	r19
    1f32:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    1f34:	31 83       	std	Z+1, r19	; 0x01
    1f36:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    1f38:	42 e0       	ldi	r20, 0x02	; 2
    1f3a:	21 30       	cpi	r18, 0x01	; 1
    1f3c:	34 07       	cpc	r19, r20
    1f3e:	0c f0       	brlt	.+2      	; 0x1f42 <start_vertical_speed_control_right+0x24a>
    1f40:	6d cf       	rjmp	.-294    	; 0x1e1c <start_vertical_speed_control_right+0x124>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    1f42:	6e ef       	ldi	r22, 0xFE	; 254
    1f44:	20 30       	cpi	r18, 0x00	; 0
    1f46:	36 07       	cpc	r19, r22
    1f48:	9c f2       	brlt	.-90     	; 0x1ef0 <start_vertical_speed_control_right+0x1f8>
    1f4a:	6c cf       	rjmp	.-296    	; 0x1e24 <start_vertical_speed_control_right+0x12c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    1f4c:	88 e6       	ldi	r24, 0x68	; 104
    1f4e:	91 e0       	ldi	r25, 0x01	; 1
    1f50:	82 1b       	sub	r24, r18
    1f52:	93 0b       	sbc	r25, r19
    1f54:	95 95       	asr	r25
    1f56:	87 95       	ror	r24
    1f58:	95 95       	asr	r25
    1f5a:	87 95       	ror	r24
    1f5c:	49 96       	adiw	r24, 0x19	; 25
    1f5e:	90 93 06 02 	sts	0x0206, r25
    1f62:	80 93 05 02 	sts	0x0205, r24
    1f66:	ef ce       	rjmp	.-546    	; 0x1d46 <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    1f68:	35 95       	asr	r19
    1f6a:	27 95       	ror	r18
    1f6c:	35 95       	asr	r19
    1f6e:	27 95       	ror	r18
    1f70:	89 e1       	ldi	r24, 0x19	; 25
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	82 1b       	sub	r24, r18
    1f76:	93 0b       	sbc	r25, r19
    1f78:	90 93 06 02 	sts	0x0206, r25
    1f7c:	80 93 05 02 	sts	0x0205, r24
    1f80:	e2 ce       	rjmp	.-572    	; 0x1d46 <start_vertical_speed_control_right+0x4e>

00001f82 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    1f82:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    1f84:	80 81       	ld	r24, Z
    1f86:	91 81       	ldd	r25, Z+1	; 0x01
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <start_horizontal_speed_control_right+0xc>
    1f8c:	7b c0       	rjmp	.+246    	; 0x2084 <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    1f8e:	a0 91 68 05 	lds	r26, 0x0568
    1f92:	b0 91 69 05 	lds	r27, 0x0569
    1f96:	b0 93 42 05 	sts	0x0542, r27
    1f9a:	a0 93 41 05 	sts	0x0541, r26
	if(*pwm_right >= 0) {
    1f9e:	20 81       	ld	r18, Z
    1fa0:	31 81       	ldd	r19, Z+1	; 0x01
    1fa2:	37 fd       	sbrc	r19, 7
    1fa4:	89 c0       	rjmp	.+274    	; 0x20b8 <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    1fa6:	80 91 e9 03 	lds	r24, 0x03E9
    1faa:	90 91 ea 03 	lds	r25, 0x03EA
    1fae:	a9 01       	movw	r20, r18
    1fb0:	48 1b       	sub	r20, r24
    1fb2:	59 0b       	sbc	r21, r25
    1fb4:	ca 01       	movw	r24, r20
    1fb6:	50 93 69 05 	sts	0x0569, r21
    1fba:	40 93 68 05 	sts	0x0568, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    1fbe:	20 91 f9 03 	lds	r18, 0x03F9
    1fc2:	30 91 fa 03 	lds	r19, 0x03FA
    1fc6:	28 0f       	add	r18, r24
    1fc8:	39 1f       	adc	r19, r25
    1fca:	30 93 fa 03 	sts	0x03FA, r19
    1fce:	20 93 f9 03 	sts	0x03F9, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    1fd2:	56 e0       	ldi	r21, 0x06	; 6
    1fd4:	21 34       	cpi	r18, 0x41	; 65
    1fd6:	35 07       	cpc	r19, r21
    1fd8:	0c f4       	brge	.+2      	; 0x1fdc <start_horizontal_speed_control_right+0x5a>
    1fda:	61 c0       	rjmp	.+194    	; 0x209e <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    1fdc:	20 e4       	ldi	r18, 0x40	; 64
    1fde:	36 e0       	ldi	r19, 0x06	; 6
    1fe0:	30 93 fa 03 	sts	0x03FA, r19
    1fe4:	20 93 f9 03 	sts	0x03F9, r18
    1fe8:	60 e8       	ldi	r22, 0x80	; 128
    1fea:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    1fec:	9c 01       	movw	r18, r24
    1fee:	22 0f       	add	r18, r18
    1ff0:	33 1f       	adc	r19, r19
    1ff2:	28 0f       	add	r18, r24
    1ff4:	39 1f       	adc	r19, r25
    1ff6:	22 0f       	add	r18, r18
    1ff8:	33 1f       	adc	r19, r19
    1ffa:	22 0f       	add	r18, r18
    1ffc:	33 1f       	adc	r19, r19
    1ffe:	22 0f       	add	r18, r18
    2000:	33 1f       	adc	r19, r19
    2002:	28 0f       	add	r18, r24
    2004:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    2006:	40 81       	ld	r20, Z
    2008:	51 81       	ldd	r21, Z+1	; 0x01
    200a:	44 0f       	add	r20, r20
    200c:	55 1f       	adc	r21, r21
    200e:	44 0f       	add	r20, r20
    2010:	55 1f       	adc	r21, r21
    2012:	44 0f       	add	r20, r20
    2014:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    2016:	24 0f       	add	r18, r20
    2018:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    201a:	ad 01       	movw	r20, r26
    201c:	48 1b       	sub	r20, r24
    201e:	59 0b       	sbc	r21, r25
    2020:	ca 01       	movw	r24, r20
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	84 0f       	add	r24, r20
    2028:	95 1f       	adc	r25, r21
    202a:	28 0f       	add	r18, r24
    202c:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    202e:	26 0f       	add	r18, r22
    2030:	37 1f       	adc	r19, r23
    2032:	30 93 f4 03 	sts	0x03F4, r19
    2036:	20 93 f3 03 	sts	0x03F3, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    203a:	37 fd       	sbrc	r19, 7
    203c:	4c c0       	rjmp	.+152    	; 0x20d6 <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    203e:	12 16       	cp	r1, r18
    2040:	13 06       	cpc	r1, r19
    2042:	0c f0       	brlt	.+2      	; 0x2046 <start_horizontal_speed_control_right+0xc4>
    2044:	52 c0       	rjmp	.+164    	; 0x20ea <start_horizontal_speed_control_right+0x168>
    2046:	80 81       	ld	r24, Z
    2048:	91 81       	ldd	r25, Z+1	; 0x01
    204a:	97 fd       	sbrc	r25, 7
    204c:	67 c0       	rjmp	.+206    	; 0x211c <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    204e:	5d e5       	ldi	r21, 0x5D	; 93
    2050:	21 3c       	cpi	r18, 0xC1	; 193
    2052:	35 07       	cpc	r19, r21
    2054:	0c f4       	brge	.+2      	; 0x2058 <start_horizontal_speed_control_right+0xd6>
    2056:	49 c0       	rjmp	.+146    	; 0x20ea <start_horizontal_speed_control_right+0x168>
    2058:	80 ec       	ldi	r24, 0xC0	; 192
    205a:	9d e5       	ldi	r25, 0x5D	; 93
    205c:	90 93 f4 03 	sts	0x03F4, r25
    2060:	80 93 f3 03 	sts	0x03F3, r24
    2064:	2c ed       	ldi	r18, 0xDC	; 220
    2066:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    2068:	22 5e       	subi	r18, 0xE2	; 226
    206a:	3f 4f       	sbci	r19, 0xFF	; 255
    206c:	31 83       	std	Z+1, r19	; 0x01
    206e:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2070:	42 e0       	ldi	r20, 0x02	; 2
    2072:	21 30       	cpi	r18, 0x01	; 1
    2074:	34 07       	cpc	r19, r20
    2076:	0c f4       	brge	.+2      	; 0x207a <start_horizontal_speed_control_right+0xf8>
    2078:	48 c0       	rjmp	.+144    	; 0x210a <start_horizontal_speed_control_right+0x188>
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	92 e0       	ldi	r25, 0x02	; 2
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
    2082:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    2084:	10 92 fa 03 	sts	0x03FA, r1
    2088:	10 92 f9 03 	sts	0x03F9, r1
		delta_right_speed_current = 0;
    208c:	10 92 69 05 	sts	0x0569, r1
    2090:	10 92 68 05 	sts	0x0568, r1
		delta_right_speed_prev = 0;
    2094:	10 92 42 05 	sts	0x0542, r1
    2098:	10 92 41 05 	sts	0x0541, r1
		return;
    209c:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    209e:	49 ef       	ldi	r20, 0xF9	; 249
    20a0:	20 3c       	cpi	r18, 0xC0	; 192
    20a2:	34 07       	cpc	r19, r20
    20a4:	a4 f4       	brge	.+40     	; 0x20ce <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    20a6:	20 ec       	ldi	r18, 0xC0	; 192
    20a8:	39 ef       	ldi	r19, 0xF9	; 249
    20aa:	30 93 fa 03 	sts	0x03FA, r19
    20ae:	20 93 f9 03 	sts	0x03F9, r18
    20b2:	60 e8       	ldi	r22, 0x80	; 128
    20b4:	73 ef       	ldi	r23, 0xF3	; 243
    20b6:	9a cf       	rjmp	.-204    	; 0x1fec <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    20b8:	80 91 e9 03 	lds	r24, 0x03E9
    20bc:	90 91 ea 03 	lds	r25, 0x03EA
    20c0:	82 0f       	add	r24, r18
    20c2:	93 1f       	adc	r25, r19
    20c4:	90 93 69 05 	sts	0x0569, r25
    20c8:	80 93 68 05 	sts	0x0568, r24
    20cc:	78 cf       	rjmp	.-272    	; 0x1fbe <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    20ce:	b9 01       	movw	r22, r18
    20d0:	66 0f       	add	r22, r22
    20d2:	77 1f       	adc	r23, r23
    20d4:	8b cf       	rjmp	.-234    	; 0x1fec <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    20d6:	80 81       	ld	r24, Z
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	97 fd       	sbrc	r25, 7
    20dc:	06 c0       	rjmp	.+12     	; 0x20ea <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    20de:	10 92 f4 03 	sts	0x03F4, r1
    20e2:	10 92 f3 03 	sts	0x03F3, r1
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    20ea:	82 ea       	ldi	r24, 0xA2	; 162
    20ec:	20 34       	cpi	r18, 0x40	; 64
    20ee:	38 07       	cpc	r19, r24
    20f0:	dc f4       	brge	.+54     	; 0x2128 <start_horizontal_speed_control_right+0x1a6>
    20f2:	80 e4       	ldi	r24, 0x40	; 64
    20f4:	92 ea       	ldi	r25, 0xA2	; 162
    20f6:	90 93 f4 03 	sts	0x03F4, r25
    20fa:	80 93 f3 03 	sts	0x03F3, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    20fe:	24 e2       	ldi	r18, 0x24	; 36
    2100:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    2102:	2e 51       	subi	r18, 0x1E	; 30
    2104:	30 40       	sbci	r19, 0x00	; 0
    2106:	31 83       	std	Z+1, r19	; 0x01
    2108:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    210a:	5e ef       	ldi	r21, 0xFE	; 254
    210c:	20 30       	cpi	r18, 0x00	; 0
    210e:	35 07       	cpc	r19, r21
    2110:	24 f4       	brge	.+8      	; 0x211a <start_horizontal_speed_control_right+0x198>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	9e ef       	ldi	r25, 0xFE	; 254
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	80 83       	st	Z, r24
    211a:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    211c:	10 92 f4 03 	sts	0x03F4, r1
    2120:	10 92 f3 03 	sts	0x03F3, r1
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2128:	35 95       	asr	r19
    212a:	27 95       	ror	r18
    212c:	35 95       	asr	r19
    212e:	27 95       	ror	r18
    2130:	35 95       	asr	r19
    2132:	27 95       	ror	r18
    2134:	35 95       	asr	r19
    2136:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2138:	31 83       	std	Z+1, r19	; 0x01
    213a:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    213c:	12 16       	cp	r1, r18
    213e:	13 06       	cpc	r1, r19
    2140:	0c f4       	brge	.+2      	; 0x2144 <start_horizontal_speed_control_right+0x1c2>
    2142:	92 cf       	rjmp	.-220    	; 0x2068 <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    2144:	21 15       	cp	r18, r1
    2146:	31 05       	cpc	r19, r1
    2148:	e1 f6       	brne	.-72     	; 0x2102 <start_horizontal_speed_control_right+0x180>
    214a:	08 95       	ret

0000214c <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    214c:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    214e:	80 81       	ld	r24, Z
    2150:	91 81       	ldd	r25, Z+1	; 0x01
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	09 f4       	brne	.+2      	; 0x2158 <start_horizontal_speed_control_left+0xc>
    2156:	7b c0       	rjmp	.+246    	; 0x224e <__stack+0x4f>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2158:	a0 91 3f 05 	lds	r26, 0x053F
    215c:	b0 91 40 05 	lds	r27, 0x0540
    2160:	b0 93 5a 05 	sts	0x055A, r27
    2164:	a0 93 59 05 	sts	0x0559, r26
	if(*pwm_left >= 0) {
    2168:	20 81       	ld	r18, Z
    216a:	31 81       	ldd	r19, Z+1	; 0x01
    216c:	37 fd       	sbrc	r19, 7
    216e:	89 c0       	rjmp	.+274    	; 0x2282 <__stack+0x83>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2170:	80 91 e7 03 	lds	r24, 0x03E7
    2174:	90 91 e8 03 	lds	r25, 0x03E8
    2178:	a9 01       	movw	r20, r18
    217a:	48 1b       	sub	r20, r24
    217c:	59 0b       	sbc	r21, r25
    217e:	ca 01       	movw	r24, r20
    2180:	50 93 40 05 	sts	0x0540, r21
    2184:	40 93 3f 05 	sts	0x053F, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    2188:	20 91 f7 03 	lds	r18, 0x03F7
    218c:	30 91 f8 03 	lds	r19, 0x03F8
    2190:	28 0f       	add	r18, r24
    2192:	39 1f       	adc	r19, r25
    2194:	30 93 f8 03 	sts	0x03F8, r19
    2198:	20 93 f7 03 	sts	0x03F7, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    219c:	56 e0       	ldi	r21, 0x06	; 6
    219e:	21 34       	cpi	r18, 0x41	; 65
    21a0:	35 07       	cpc	r19, r21
    21a2:	0c f4       	brge	.+2      	; 0x21a6 <start_horizontal_speed_control_left+0x5a>
    21a4:	61 c0       	rjmp	.+194    	; 0x2268 <__stack+0x69>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    21a6:	20 e4       	ldi	r18, 0x40	; 64
    21a8:	36 e0       	ldi	r19, 0x06	; 6
    21aa:	30 93 f8 03 	sts	0x03F8, r19
    21ae:	20 93 f7 03 	sts	0x03F7, r18
    21b2:	60 e8       	ldi	r22, 0x80	; 128
    21b4:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    21b6:	9c 01       	movw	r18, r24
    21b8:	22 0f       	add	r18, r18
    21ba:	33 1f       	adc	r19, r19
    21bc:	28 0f       	add	r18, r24
    21be:	39 1f       	adc	r19, r25
    21c0:	22 0f       	add	r18, r18
    21c2:	33 1f       	adc	r19, r19
    21c4:	22 0f       	add	r18, r18
    21c6:	33 1f       	adc	r19, r19
    21c8:	22 0f       	add	r18, r18
    21ca:	33 1f       	adc	r19, r19
    21cc:	28 0f       	add	r18, r24
    21ce:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    21d0:	40 81       	ld	r20, Z
    21d2:	51 81       	ldd	r21, Z+1	; 0x01
    21d4:	44 0f       	add	r20, r20
    21d6:	55 1f       	adc	r21, r21
    21d8:	44 0f       	add	r20, r20
    21da:	55 1f       	adc	r21, r21
    21dc:	44 0f       	add	r20, r20
    21de:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    21e0:	24 0f       	add	r18, r20
    21e2:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    21e4:	ad 01       	movw	r20, r26
    21e6:	48 1b       	sub	r20, r24
    21e8:	59 0b       	sbc	r21, r25
    21ea:	ca 01       	movw	r24, r20
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	84 0f       	add	r24, r20
    21f2:	95 1f       	adc	r25, r21
    21f4:	28 0f       	add	r18, r24
    21f6:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    21f8:	26 0f       	add	r18, r22
    21fa:	37 1f       	adc	r19, r23
    21fc:	30 93 f6 03 	sts	0x03F6, r19
    2200:	20 93 f5 03 	sts	0x03F5, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2204:	37 fd       	sbrc	r19, 7
    2206:	4c c0       	rjmp	.+152    	; 0x22a0 <__stack+0xa1>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2208:	12 16       	cp	r1, r18
    220a:	13 06       	cpc	r1, r19
    220c:	0c f0       	brlt	.+2      	; 0x2210 <__stack+0x11>
    220e:	52 c0       	rjmp	.+164    	; 0x22b4 <__stack+0xb5>
    2210:	80 81       	ld	r24, Z
    2212:	91 81       	ldd	r25, Z+1	; 0x01
    2214:	97 fd       	sbrc	r25, 7
    2216:	67 c0       	rjmp	.+206    	; 0x22e6 <__stack+0xe7>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2218:	5d e5       	ldi	r21, 0x5D	; 93
    221a:	21 3c       	cpi	r18, 0xC1	; 193
    221c:	35 07       	cpc	r19, r21
    221e:	0c f4       	brge	.+2      	; 0x2222 <__stack+0x23>
    2220:	49 c0       	rjmp	.+146    	; 0x22b4 <__stack+0xb5>
    2222:	80 ec       	ldi	r24, 0xC0	; 192
    2224:	9d e5       	ldi	r25, 0x5D	; 93
    2226:	90 93 f6 03 	sts	0x03F6, r25
    222a:	80 93 f5 03 	sts	0x03F5, r24
    222e:	2c ed       	ldi	r18, 0xDC	; 220
    2230:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    2232:	22 5e       	subi	r18, 0xE2	; 226
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
    2236:	31 83       	std	Z+1, r19	; 0x01
    2238:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    223a:	42 e0       	ldi	r20, 0x02	; 2
    223c:	21 30       	cpi	r18, 0x01	; 1
    223e:	34 07       	cpc	r19, r20
    2240:	0c f4       	brge	.+2      	; 0x2244 <__stack+0x45>
    2242:	48 c0       	rjmp	.+144    	; 0x22d4 <__stack+0xd5>
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	92 e0       	ldi	r25, 0x02	; 2
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	80 83       	st	Z, r24
    224c:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    224e:	10 92 f8 03 	sts	0x03F8, r1
    2252:	10 92 f7 03 	sts	0x03F7, r1
		delta_left_speed_current = 0;
    2256:	10 92 40 05 	sts	0x0540, r1
    225a:	10 92 3f 05 	sts	0x053F, r1
		delta_left_speed_prev = 0;
    225e:	10 92 5a 05 	sts	0x055A, r1
    2262:	10 92 59 05 	sts	0x0559, r1
		return;
    2266:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2268:	49 ef       	ldi	r20, 0xF9	; 249
    226a:	20 3c       	cpi	r18, 0xC0	; 192
    226c:	34 07       	cpc	r19, r20
    226e:	a4 f4       	brge	.+40     	; 0x2298 <__stack+0x99>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    2270:	20 ec       	ldi	r18, 0xC0	; 192
    2272:	39 ef       	ldi	r19, 0xF9	; 249
    2274:	30 93 f8 03 	sts	0x03F8, r19
    2278:	20 93 f7 03 	sts	0x03F7, r18
    227c:	60 e8       	ldi	r22, 0x80	; 128
    227e:	73 ef       	ldi	r23, 0xF3	; 243
    2280:	9a cf       	rjmp	.-204    	; 0x21b6 <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2282:	80 91 e7 03 	lds	r24, 0x03E7
    2286:	90 91 e8 03 	lds	r25, 0x03E8
    228a:	82 0f       	add	r24, r18
    228c:	93 1f       	adc	r25, r19
    228e:	90 93 40 05 	sts	0x0540, r25
    2292:	80 93 3f 05 	sts	0x053F, r24
    2296:	78 cf       	rjmp	.-272    	; 0x2188 <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2298:	b9 01       	movw	r22, r18
    229a:	66 0f       	add	r22, r22
    229c:	77 1f       	adc	r23, r23
    229e:	8b cf       	rjmp	.-234    	; 0x21b6 <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    22a0:	80 81       	ld	r24, Z
    22a2:	91 81       	ldd	r25, Z+1	; 0x01
    22a4:	97 fd       	sbrc	r25, 7
    22a6:	06 c0       	rjmp	.+12     	; 0x22b4 <__stack+0xb5>
		pwm_left_speed_controller = 0;
    22a8:	10 92 f6 03 	sts	0x03F6, r1
    22ac:	10 92 f5 03 	sts	0x03F5, r1
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    22b4:	82 ea       	ldi	r24, 0xA2	; 162
    22b6:	20 34       	cpi	r18, 0x40	; 64
    22b8:	38 07       	cpc	r19, r24
    22ba:	dc f4       	brge	.+54     	; 0x22f2 <__stack+0xf3>
    22bc:	80 e4       	ldi	r24, 0x40	; 64
    22be:	92 ea       	ldi	r25, 0xA2	; 162
    22c0:	90 93 f6 03 	sts	0x03F6, r25
    22c4:	80 93 f5 03 	sts	0x03F5, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    22c8:	24 e2       	ldi	r18, 0x24	; 36
    22ca:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    22cc:	2e 51       	subi	r18, 0x1E	; 30
    22ce:	30 40       	sbci	r19, 0x00	; 0
    22d0:	31 83       	std	Z+1, r19	; 0x01
    22d2:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    22d4:	5e ef       	ldi	r21, 0xFE	; 254
    22d6:	20 30       	cpi	r18, 0x00	; 0
    22d8:	35 07       	cpc	r19, r21
    22da:	24 f4       	brge	.+8      	; 0x22e4 <__stack+0xe5>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	9e ef       	ldi	r25, 0xFE	; 254
    22e0:	91 83       	std	Z+1, r25	; 0x01
    22e2:	80 83       	st	Z, r24
    22e4:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    22e6:	10 92 f6 03 	sts	0x03F6, r1
    22ea:	10 92 f5 03 	sts	0x03F5, r1
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    22f2:	35 95       	asr	r19
    22f4:	27 95       	ror	r18
    22f6:	35 95       	asr	r19
    22f8:	27 95       	ror	r18
    22fa:	35 95       	asr	r19
    22fc:	27 95       	ror	r18
    22fe:	35 95       	asr	r19
    2300:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2302:	31 83       	std	Z+1, r19	; 0x01
    2304:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    2306:	12 16       	cp	r1, r18
    2308:	13 06       	cpc	r1, r19
    230a:	0c f4       	brge	.+2      	; 0x230e <__stack+0x10f>
    230c:	92 cf       	rjmp	.-220    	; 0x2232 <__stack+0x33>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    230e:	21 15       	cp	r18, r1
    2310:	31 05       	cpc	r19, r1
    2312:	e1 f6       	brne	.-72     	; 0x22cc <__stack+0xcd>
    2314:	08 95       	ret

00002316 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    2316:	85 b7       	in	r24, 0x35	; 53
    2318:	80 61       	ori	r24, 0x10	; 16
    231a:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    231c:	8f ef       	ldi	r24, 0xFF	; 255
    231e:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    2320:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    2322:	97 ef       	ldi	r25, 0xF7	; 247
    2324:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    2326:	90 ee       	ldi	r25, 0xE0	; 224
    2328:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    232a:	90 ef       	ldi	r25, 0xF0	; 240
    232c:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    232e:	90 eb       	ldi	r25, 0xB0	; 176
    2330:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    2332:	9c ef       	ldi	r25, 0xFC	; 252
    2334:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    2336:	93 e0       	ldi	r25, 0x03	; 3
    2338:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    233a:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    233c:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    233e:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    2340:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    2342:	80 91 3a 05 	lds	r24, 0x053A
    2346:	88 23       	and	r24, r24
    2348:	e1 f0       	breq	.+56     	; 0x2382 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    234a:	81 30       	cpi	r24, 0x01	; 1
    234c:	d1 f0       	breq	.+52     	; 0x2382 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    234e:	82 30       	cpi	r24, 0x02	; 2
    2350:	51 f1       	breq	.+84     	; 0x23a6 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    2352:	9f ef       	ldi	r25, 0xFF	; 255
    2354:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    2358:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    235c:	9f e0       	ldi	r25, 0x0F	; 15
    235e:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    2362:	88 23       	and	r24, r24
    2364:	a9 f4       	brne	.+42     	; 0x2390 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    2366:	90 91 05 01 	lds	r25, 0x0105
    236a:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    236e:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    2372:	9f ef       	ldi	r25, 0xFF	; 255
    2374:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    2378:	88 23       	and	r24, r24
    237a:	29 f4       	brne	.+10     	; 0x2386 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    237c:	10 92 0b 01 	sts	0x010B, r1
    2380:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    2382:	14 ba       	out	0x14, r1	; 20
    2384:	e6 cf       	rjmp	.-52     	; 0x2352 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    2386:	81 30       	cpi	r24, 0x01	; 1
    2388:	c9 f3       	breq	.-14     	; 0x237c <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    238a:	82 30       	cpi	r24, 0x02	; 2
    238c:	41 f0       	breq	.+16     	; 0x239e <initPortsIO+0x88>
    238e:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    2390:	81 30       	cpi	r24, 0x01	; 1
    2392:	11 f0       	breq	.+4      	; 0x2398 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    2394:	82 30       	cpi	r24, 0x02	; 2
    2396:	59 f7       	brne	.-42     	; 0x236e <initPortsIO+0x58>
		PORTJ = 0x0F;
    2398:	90 93 05 01 	sts	0x0105, r25
    239c:	e8 cf       	rjmp	.-48     	; 0x236e <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    239e:	87 ef       	ldi	r24, 0xF7	; 247
    23a0:	80 93 0b 01 	sts	0x010B, r24
    23a4:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    23a6:	98 e0       	ldi	r25, 0x08	; 8
    23a8:	94 bb       	out	0x14, r25	; 20
    23aa:	d3 cf       	rjmp	.-90     	; 0x2352 <initPortsIO+0x3c>

000023ac <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    23ac:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    23b0:	10 92 bc 00 	sts	0x00BC, r1
}
    23b4:	08 95       	ret

000023b6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    23b6:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    23b8:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    23ba:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    23c4:	08 95       	ret

000023c6 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    23c6:	94 ea       	ldi	r25, 0xA4	; 164
    23c8:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    23cc:	90 91 bc 00 	lds	r25, 0x00BC
    23d0:	97 ff       	sbrs	r25, 7
    23d2:	fc cf       	rjmp	.-8      	; 0x23cc <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    23d4:	90 91 b9 00 	lds	r25, 0x00B9
    23d8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    23da:	98 30       	cpi	r25, 0x08	; 8
    23dc:	21 f0       	breq	.+8      	; 0x23e6 <i2c_start+0x20>
    23de:	90 31       	cpi	r25, 0x10	; 16
    23e0:	11 f0       	breq	.+4      	; 0x23e6 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	08 95       	ret
	}

	// send device address
	TWDR = address;
    23e6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    23ea:	84 e8       	ldi	r24, 0x84	; 132
    23ec:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    23f0:	80 91 bc 00 	lds	r24, 0x00BC
    23f4:	87 ff       	sbrs	r24, 7
    23f6:	fc cf       	rjmp	.-8      	; 0x23f0 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    23f8:	90 91 b9 00 	lds	r25, 0x00B9
    23fc:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    23fe:	98 31       	cpi	r25, 0x18	; 24
    2400:	21 f0       	breq	.+8      	; 0x240a <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 34       	cpi	r25, 0x40	; 64
    2406:	19 f0       	breq	.+6      	; 0x240e <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2408:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    240a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    240c:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	08 95       	ret

00002412 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2412:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2414:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2416:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2418:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    241c:	90 91 bc 00 	lds	r25, 0x00BC
    2420:	97 ff       	sbrs	r25, 7
    2422:	fc cf       	rjmp	.-8      	; 0x241c <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2424:	90 91 b9 00 	lds	r25, 0x00B9
    2428:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    242a:	98 30       	cpi	r25, 0x08	; 8
    242c:	11 f0       	breq	.+4      	; 0x2432 <i2c_start_wait+0x20>
    242e:	90 31       	cpi	r25, 0x10	; 16
    2430:	99 f7       	brne	.-26     	; 0x2418 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2432:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2436:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    243a:	90 91 bc 00 	lds	r25, 0x00BC
    243e:	97 ff       	sbrs	r25, 7
    2440:	fc cf       	rjmp	.-8      	; 0x243a <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2442:	90 91 b9 00 	lds	r25, 0x00B9
    2446:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2448:	90 32       	cpi	r25, 0x20	; 32
    244a:	19 f0       	breq	.+6      	; 0x2452 <i2c_start_wait+0x40>
    244c:	98 35       	cpi	r25, 0x58	; 88
    244e:	09 f0       	breq	.+2      	; 0x2452 <i2c_start_wait+0x40>
    2450:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2452:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2456:	90 91 bc 00 	lds	r25, 0x00BC
    245a:	94 fd       	sbrc	r25, 4
    245c:	fc cf       	rjmp	.-8      	; 0x2456 <i2c_start_wait+0x44>
    245e:	dc cf       	rjmp	.-72     	; 0x2418 <i2c_start_wait+0x6>

00002460 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2460:	94 ea       	ldi	r25, 0xA4	; 164
    2462:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2466:	90 91 bc 00 	lds	r25, 0x00BC
    246a:	97 ff       	sbrs	r25, 7
    246c:	fc cf       	rjmp	.-8      	; 0x2466 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    246e:	90 91 b9 00 	lds	r25, 0x00B9
    2472:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2474:	98 30       	cpi	r25, 0x08	; 8
    2476:	21 f0       	breq	.+8      	; 0x2480 <i2c_rep_start+0x20>
    2478:	90 31       	cpi	r25, 0x10	; 16
    247a:	11 f0       	breq	.+4      	; 0x2480 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2480:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2484:	84 e8       	ldi	r24, 0x84	; 132
    2486:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    248a:	80 91 bc 00 	lds	r24, 0x00BC
    248e:	87 ff       	sbrs	r24, 7
    2490:	fc cf       	rjmp	.-8      	; 0x248a <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2492:	90 91 b9 00 	lds	r25, 0x00B9
    2496:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2498:	98 31       	cpi	r25, 0x18	; 24
    249a:	21 f0       	breq	.+8      	; 0x24a4 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 34       	cpi	r25, 0x40	; 64
    24a0:	19 f0       	breq	.+6      	; 0x24a8 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    24a2:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    24a4:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    24a6:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	08 95       	ret

000024ac <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    24ac:	84 e9       	ldi	r24, 0x94	; 148
    24ae:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    24b2:	80 91 bc 00 	lds	r24, 0x00BC
    24b6:	84 fd       	sbrc	r24, 4
    24b8:	fc cf       	rjmp	.-8      	; 0x24b2 <i2c_stop+0x6>

}/* i2c_stop */
    24ba:	08 95       	ret

000024bc <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    24bc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    24c0:	84 e8       	ldi	r24, 0x84	; 132
    24c2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    24c6:	80 91 bc 00 	lds	r24, 0x00BC
    24ca:	87 ff       	sbrs	r24, 7
    24cc:	fc cf       	rjmp	.-8      	; 0x24c6 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    24ce:	90 91 b9 00 	lds	r25, 0x00B9
    24d2:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	98 32       	cpi	r25, 0x28	; 40
    24d8:	09 f0       	breq	.+2      	; 0x24dc <i2c_write+0x20>
	return 0;

}/* i2c_write */
    24da:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    24dc:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    24de:	08 95       	ret

000024e0 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    24e0:	84 ec       	ldi	r24, 0xC4	; 196
    24e2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    24e6:	80 91 bc 00 	lds	r24, 0x00BC
    24ea:	87 ff       	sbrs	r24, 7
    24ec:	fc cf       	rjmp	.-8      	; 0x24e6 <i2c_readAck+0x6>

    return TWDR;
    24ee:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    24f2:	08 95       	ret

000024f4 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    24f4:	84 e8       	ldi	r24, 0x84	; 132
    24f6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    24fa:	80 91 bc 00 	lds	r24, 0x00BC
    24fe:	87 ff       	sbrs	r24, 7
    2500:	fc cf       	rjmp	.-8      	; 0x24fa <i2c_readNak+0x6>
	
    return TWDR;
    2502:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    2506:	08 95       	ret

00002508 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    2508:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    250c:	80 e1       	ldi	r24, 0x10	; 16
    250e:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    2512:	e0 ec       	ldi	r30, 0xC0	; 192
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	82 60       	ori	r24, 0x02	; 2
    251a:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    251c:	e1 ec       	ldi	r30, 0xC1	; 193
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	88 69       	ori	r24, 0x98	; 152
    2524:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    2526:	e2 ec       	ldi	r30, 0xC2	; 194
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	86 60       	ori	r24, 0x06	; 6
    252e:	80 83       	st	Z, r24



}
    2530:	08 95       	ret

00002532 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    2532:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    2536:	80 e1       	ldi	r24, 0x10	; 16
    2538:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    253c:	e8 ec       	ldi	r30, 0xC8	; 200
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	82 60       	ori	r24, 0x02	; 2
    2544:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    2546:	e9 ec       	ldi	r30, 0xC9	; 201
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	88 61       	ori	r24, 0x18	; 24
    254e:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    2550:	ea ec       	ldi	r30, 0xCA	; 202
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	86 60       	ori	r24, 0x06	; 6
    2558:	80 83       	st	Z, r24

}
    255a:	08 95       	ret

0000255c <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    255c:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    2560:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    2564:	10 92 c2 00 	sts	0x00C2, r1

}
    2568:	08 95       	ret

0000256a <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    256a:	90 91 c0 00 	lds	r25, 0x00C0
    256e:	95 ff       	sbrs	r25, 5
    2570:	fc cf       	rjmp	.-8      	; 0x256a <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    2572:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    2576:	66 23       	and	r22, r22
    2578:	21 f0       	breq	.+8      	; 0x2582 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    257a:	80 91 c0 00 	lds	r24, 0x00C0
    257e:	86 ff       	sbrs	r24, 6
    2580:	fc cf       	rjmp	.-8      	; 0x257a <usart0Transmit+0x10>
    2582:	08 95       	ret

00002584 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    2584:	90 91 c8 00 	lds	r25, 0x00C8
    2588:	95 ff       	sbrs	r25, 5
    258a:	fc cf       	rjmp	.-8      	; 0x2584 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    258c:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    2590:	66 23       	and	r22, r22
    2592:	21 f0       	breq	.+8      	; 0x259c <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    2594:	80 91 c8 00 	lds	r24, 0x00C8
    2598:	86 ff       	sbrs	r24, 6
    259a:	fc cf       	rjmp	.-8      	; 0x2594 <usart1Transmit+0x10>
    259c:	08 95       	ret

0000259e <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    259e:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    25a2:	80 95       	com	r24
	} else {
		return 1;
	}

}
    25a4:	88 1f       	adc	r24, r24
    25a6:	88 27       	eor	r24, r24
    25a8:	88 1f       	adc	r24, r24
    25aa:	08 95       	ret

000025ac <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    25ac:	87 e9       	ldi	r24, 0x97	; 151
    25ae:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    25b0:	20 91 c0 00 	lds	r18, 0x00C0
    25b4:	27 fd       	sbrc	r18, 7
    25b6:	07 c0       	rjmp	.+14     	; 0x25c6 <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    25b8:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    25ba:	d1 f7       	brne	.-12     	; 0x25b0 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	80 93 0a 04 	sts	0x040A, r24
			return 0;				// timeout
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    25c6:	80 91 c6 00 	lds	r24, 0x00C6

}
    25ca:	08 95       	ret

000025cc <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    25cc:	1f 92       	push	r1
    25ce:	0f 92       	push	r0
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	0f 92       	push	r0
    25d4:	11 24       	eor	r1, r1
    25d6:	2f 93       	push	r18
    25d8:	3f 93       	push	r19
    25da:	4f 93       	push	r20
    25dc:	8f 93       	push	r24
    25de:	9f 93       	push	r25

	char receivedByte = UDR0;
    25e0:	90 91 c6 00 	lds	r25, 0x00C6

	if(chooseMenu) {
    25e4:	80 91 11 02 	lds	r24, 0x0211
    25e8:	88 23       	and	r24, r24
    25ea:	c9 f4       	brne	.+50     	; 0x261e <__vector_25+0x52>
		chooseMenu = 0;
		menuChoice = receivedByte;
	} else {
		switch(menuChoice) {
    25ec:	80 91 0f 05 	lds	r24, 0x050F
    25f0:	81 30       	cpi	r24, 0x01	; 1
    25f2:	61 f0       	breq	.+24     	; 0x260c <__vector_25+0x40>
    25f4:	82 30       	cpi	r24, 0x02	; 2
    25f6:	c1 f0       	breq	.+48     	; 0x2628 <__vector_25+0x5c>
				}
				break;
		}
	}

}
    25f8:	9f 91       	pop	r25
    25fa:	8f 91       	pop	r24
    25fc:	4f 91       	pop	r20
    25fe:	3f 91       	pop	r19
    2600:	2f 91       	pop	r18
    2602:	0f 90       	pop	r0
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	0f 90       	pop	r0
    2608:	1f 90       	pop	r1
    260a:	18 95       	reti
		chooseMenu = 0;
		menuChoice = receivedByte;
	} else {
		switch(menuChoice) {
			case 1: // send sensors data and activate actuators
				if(receivedByte == 0xAA) {
    260c:	9a 3a       	cpi	r25, 0xAA	; 170
    260e:	69 f1       	breq	.+90     	; 0x266a <__vector_25+0x9e>
					getDataNow = 1;
				} else if(receivedByte == 0x55) {
    2610:	95 35       	cpi	r25, 0x55	; 85
    2612:	91 f7       	brne	.-28     	; 0x25f8 <__vector_25+0x2c>
					chooseMenu = 1;
    2614:	80 93 11 02 	sts	0x0211, r24
					menuChoice = 0;
    2618:	10 92 0f 05 	sts	0x050F, r1
    261c:	ed cf       	rjmp	.-38     	; 0x25f8 <__vector_25+0x2c>
ISR(USART0_RX_vect) {

	char receivedByte = UDR0;

	if(chooseMenu) {
		chooseMenu = 0;
    261e:	10 92 11 02 	sts	0x0211, r1
		menuChoice = receivedByte;
    2622:	90 93 0f 05 	sts	0x050F, r25
    2626:	e8 cf       	rjmp	.-48     	; 0x25f8 <__vector_25+0x2c>
					menuChoice = 0;
				}
				break;

			case 2:	// address writing in eeprom
				if(menuState == 0) { // receive rf address LSB:
    2628:	40 91 11 05 	lds	r20, 0x0511
    262c:	44 23       	and	r20, r20
    262e:	a9 f0       	breq	.+42     	; 0x265a <__vector_25+0x8e>
					rfAddress = (unsigned int)receivedByte&0x00FF;
					menuState = 1;
				} else if(menuState == 1) { // receive rf address MSB
    2630:	41 30       	cpi	r20, 0x01	; 1
    2632:	11 f7       	brne	.-60     	; 0x25f8 <__vector_25+0x2c>
					rfAddress |= ((unsigned int)receivedByte<<8);
    2634:	39 2f       	mov	r19, r25
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	80 91 03 04 	lds	r24, 0x0403
    263c:	90 91 04 04 	lds	r25, 0x0404
    2640:	82 2b       	or	r24, r18
    2642:	93 2b       	or	r25, r19
    2644:	90 93 04 04 	sts	0x0404, r25
    2648:	80 93 03 04 	sts	0x0403, r24
					addressReceived = 1;
    264c:	40 93 10 05 	sts	0x0510, r20
					menuState = 0;
    2650:	10 92 11 05 	sts	0x0511, r1
					chooseMenu = 1;
    2654:	40 93 11 02 	sts	0x0211, r20
    2658:	cf cf       	rjmp	.-98     	; 0x25f8 <__vector_25+0x2c>
				}
				break;

			case 2:	// address writing in eeprom
				if(menuState == 0) { // receive rf address LSB:
					rfAddress = (unsigned int)receivedByte&0x00FF;
    265a:	90 93 03 04 	sts	0x0403, r25
    265e:	10 92 04 04 	sts	0x0404, r1
					menuState = 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	80 93 11 05 	sts	0x0511, r24
    2668:	c7 cf       	rjmp	.-114    	; 0x25f8 <__vector_25+0x2c>
		menuChoice = receivedByte;
	} else {
		switch(menuChoice) {
			case 1: // send sensors data and activate actuators
				if(receivedByte == 0xAA) {
					getDataNow = 1;
    266a:	80 93 12 05 	sts	0x0512, r24
    266e:	c4 cf       	rjmp	.-120    	; 0x25f8 <__vector_25+0x2c>

00002670 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    2670:	86 b1       	in	r24, 0x06	; 6
    2672:	66 b1       	in	r22, 0x06	; 6
    2674:	26 b1       	in	r18, 0x06	; 6
    2676:	46 b1       	in	r20, 0x06	; 6
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	28 70       	andi	r18, 0x08	; 8
    267c:	30 70       	andi	r19, 0x00	; 0
    267e:	35 95       	asr	r19
    2680:	27 95       	ror	r18
    2682:	35 95       	asr	r19
    2684:	27 95       	ror	r18
    2686:	35 95       	asr	r19
    2688:	27 95       	ror	r18
    268a:	22 0f       	add	r18, r18
    268c:	33 1f       	adc	r19, r19
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	64 70       	andi	r22, 0x04	; 4
    2692:	70 70       	andi	r23, 0x00	; 0
    2694:	75 95       	asr	r23
    2696:	67 95       	ror	r22
    2698:	75 95       	asr	r23
    269a:	67 95       	ror	r22
    269c:	26 0f       	add	r18, r22
    269e:	37 1f       	adc	r19, r23
    26a0:	22 0f       	add	r18, r18
    26a2:	33 1f       	adc	r19, r19
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	42 70       	andi	r20, 0x02	; 2
    26a8:	50 70       	andi	r21, 0x00	; 0
    26aa:	55 95       	asr	r21
    26ac:	47 95       	ror	r20
    26ae:	24 0f       	add	r18, r20
    26b0:	35 1f       	adc	r19, r21
    26b2:	22 0f       	add	r18, r18
    26b4:	81 70       	andi	r24, 0x01	; 1
}
    26b6:	82 0f       	add	r24, r18
    26b8:	08 95       	ret

000026ba <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    26ba:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    26bc:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    26be:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    26c0:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    26c4:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    26c8:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    26cc:	8e ef       	ldi	r24, 0xFE	; 254
    26ce:	9f e0       	ldi	r25, 0x0F	; 15
    26d0:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <__eerd_word_m2560>
    26d4:	90 93 04 04 	sts	0x0404, r25
    26d8:	80 93 03 04 	sts	0x0403, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    26dc:	9c 01       	movw	r18, r24
    26de:	21 58       	subi	r18, 0x81	; 129
    26e0:	3c 40       	sbci	r19, 0x0C	; 12
    26e2:	23 30       	cpi	r18, 0x03	; 3
    26e4:	31 05       	cpc	r19, r1
    26e6:	f8 f4       	brcc	.+62     	; 0x2726 <initPeripherals+0x6c>
		hardwareRevision = HW_REV_3_0;
    26e8:	10 92 3a 05 	sts	0x053A, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    26ec:	0e 94 8b 11 	call	0x2316	; 0x2316 <initPortsIO>
	initAdc();
    26f0:	0e 94 69 14 	call	0x28d2	; 0x28d2 <initAdc>
	initMotors();
    26f4:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <initMotors>
	initRGBleds();
    26f8:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <initRGBleds>
	initSPI();
    26fc:	0e 94 11 04 	call	0x822	; 0x822 <initSPI>
	mirf_init();
    2700:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <mirf_init>
	if(spiCommError==0) {
    2704:	80 91 06 04 	lds	r24, 0x0406
    2708:	88 23       	and	r24, r24
    270a:	29 f4       	brne	.+10     	; 0x2716 <initPeripherals+0x5c>
		rfFlags |= 1;
    270c:	80 91 05 04 	lds	r24, 0x0405
    2710:	81 60       	ori	r24, 0x01	; 1
    2712:	80 93 05 04 	sts	0x0405, r24
	}
	initUsart0();
    2716:	0e 94 84 12 	call	0x2508	; 0x2508 <initUsart0>
	initAccelerometer();
    271a:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <initAccelerometer>
	init_ir_remote_control();
    271e:	0e 94 ab 09 	call	0x1356	; 0x1356 <init_ir_remote_control>

	sei();			// enable global interrupts
    2722:	78 94       	sei

	
}
    2724:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    2726:	2c e0       	ldi	r18, 0x0C	; 12
    2728:	80 38       	cpi	r24, 0x80	; 128
    272a:	92 07       	cpc	r25, r18
    272c:	21 f4       	brne	.+8      	; 0x2736 <initPeripherals+0x7c>
		hardwareRevision = HW_REV_3_0_1;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	80 93 3a 05 	sts	0x053A, r24
    2734:	db cf       	rjmp	.-74     	; 0x26ec <initPeripherals+0x32>
	}

	if(rfAddress > 3203) {
    2736:	2c e0       	ldi	r18, 0x0C	; 12
    2738:	84 38       	cpi	r24, 0x84	; 132
    273a:	92 07       	cpc	r25, r18
    273c:	b8 f2       	brcs	.-82     	; 0x26ec <initPeripherals+0x32>
		hardwareRevision = HW_REV_3_1;
    273e:	82 e0       	ldi	r24, 0x02	; 2
    2740:	80 93 3a 05 	sts	0x053A, r24
    2744:	d3 cf       	rjmp	.-90     	; 0x26ec <initPeripherals+0x32>

00002746 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    2746:	1f 92       	push	r1
    2748:	0f 92       	push	r0
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	0f 92       	push	r0
    274e:	11 24       	eor	r1, r1

}
    2750:	0f 90       	pop	r0
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	0f 90       	pop	r0
    2756:	1f 90       	pop	r1
    2758:	18 95       	reti

0000275a <sleep>:

void sleep(unsigned char seconds) {
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    275e:	9e e1       	ldi	r25, 0x1E	; 30
    2760:	89 9f       	mul	r24, r25
    2762:	e0 01       	movw	r28, r0
    2764:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    2766:	80 91 68 00 	lds	r24, 0x0068
    276a:	8d 7f       	andi	r24, 0xFD	; 253
    276c:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    2770:	80 91 6c 00 	lds	r24, 0x006C
    2774:	8f 77       	andi	r24, 0x7F	; 127
    2776:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    277a:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    277c:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    2780:	80 91 7a 00 	lds	r24, 0x007A
    2784:	80 61       	ori	r24, 0x10	; 16
    2786:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    278a:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    278e:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    2792:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    2796:	88 b3       	in	r24, 0x18	; 24
    2798:	87 60       	ori	r24, 0x07	; 7
    279a:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    279c:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    27a0:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    27a4:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    27a8:	89 b3       	in	r24, 0x19	; 25
    27aa:	87 60       	ori	r24, 0x07	; 7
    27ac:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    27ae:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    27b2:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    27b6:	0e 94 ae 12 	call	0x255c	; 0x255c <closeUsart>
	closeSPI();
    27ba:	0e 94 1d 04 	call	0x83a	; 0x83a <closeSPI>
	i2c_close();
    27be:	0e 94 d6 11 	call	0x23ac	; 0x23ac <i2c_close>

	// set port pins
	initPortsIO();
    27c2:	0e 94 8b 11 	call	0x2316	; 0x2316 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    27c6:	83 b7       	in	r24, 0x33	; 51
    27c8:	8f 60       	ori	r24, 0x0F	; 15
    27ca:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    27d2:	80 91 b0 00 	lds	r24, 0x00B0
    27d6:	8d 7f       	andi	r24, 0xFD	; 253
    27d8:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    27dc:	80 91 b1 00 	lds	r24, 0x00B1
    27e0:	87 60       	ori	r24, 0x07	; 7
    27e2:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    27e6:	20 97       	sbiw	r28, 0x00	; 0
    27e8:	19 f0       	breq	.+6      	; 0x27f0 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    27ea:	88 95       	sleep
		pause--;
    27ec:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    27ee:	e9 f7       	brne	.-6      	; 0x27ea <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    27f0:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    27f2:	80 91 b1 00 	lds	r24, 0x00B1
    27f6:	88 7f       	andi	r24, 0xF8	; 248
    27f8:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    27fc:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    2800:	80 91 b0 00 	lds	r24, 0x00B0
    2804:	82 60       	ori	r24, 0x02	; 2
    2806:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    280a:	8f ef       	ldi	r24, 0xFF	; 255
    280c:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    2810:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    2814:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    2818:	10 92 ec 03 	sts	0x03EC, r1
    281c:	10 92 eb 03 	sts	0x03EB, r1
	pwm_left = 0;
    2820:	10 92 ee 03 	sts	0x03EE, r1
    2824:	10 92 ed 03 	sts	0x03ED, r1
}
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    2828:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    282a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    282c:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    282e:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    2832:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    2836:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    283a:	8e ef       	ldi	r24, 0xFE	; 254
    283c:	9f e0       	ldi	r25, 0x0F	; 15
    283e:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <__eerd_word_m2560>
    2842:	90 93 04 04 	sts	0x0404, r25
    2846:	80 93 03 04 	sts	0x0403, r24

	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    284a:	9c 01       	movw	r18, r24
    284c:	21 58       	subi	r18, 0x81	; 129
    284e:	3c 40       	sbci	r19, 0x0C	; 12
    2850:	23 30       	cpi	r18, 0x03	; 3
    2852:	31 05       	cpc	r19, r1
    2854:	08 f5       	brcc	.+66     	; 0x2898 <sleep+0x13e>
		hardwareRevision = HW_REV_3_0;
    2856:	10 92 3a 05 	sts	0x053A, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    285a:	0e 94 8b 11 	call	0x2316	; 0x2316 <initPortsIO>
	initAdc();
    285e:	0e 94 69 14 	call	0x28d2	; 0x28d2 <initAdc>
	initMotors();
    2862:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <initMotors>
	initRGBleds();
    2866:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <initRGBleds>
	initSPI();
    286a:	0e 94 11 04 	call	0x822	; 0x822 <initSPI>
	mirf_init();
    286e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <mirf_init>
	if(spiCommError==0) {
    2872:	80 91 06 04 	lds	r24, 0x0406
    2876:	88 23       	and	r24, r24
    2878:	29 f4       	brne	.+10     	; 0x2884 <sleep+0x12a>
		rfFlags |= 1;
    287a:	80 91 05 04 	lds	r24, 0x0405
    287e:	81 60       	ori	r24, 0x01	; 1
    2880:	80 93 05 04 	sts	0x0405, r24
	}
	initUsart0();
    2884:	0e 94 84 12 	call	0x2508	; 0x2508 <initUsart0>
	initAccelerometer();
    2888:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <initAccelerometer>
	init_ir_remote_control();
    288c:	0e 94 ab 09 	call	0x1356	; 0x1356 <init_ir_remote_control>

	sei();			// enable global interrupts
    2890:	78 94       	sei
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();

}
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    2898:	2c e0       	ldi	r18, 0x0C	; 12
    289a:	80 38       	cpi	r24, 0x80	; 128
    289c:	92 07       	cpc	r25, r18
    289e:	21 f4       	brne	.+8      	; 0x28a8 <sleep+0x14e>
		hardwareRevision = HW_REV_3_0_1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	80 93 3a 05 	sts	0x053A, r24
    28a6:	d9 cf       	rjmp	.-78     	; 0x285a <sleep+0x100>
	}

	if(rfAddress > 3203) {
    28a8:	2c e0       	ldi	r18, 0x0C	; 12
    28aa:	84 38       	cpi	r24, 0x84	; 132
    28ac:	92 07       	cpc	r25, r18
    28ae:	a8 f2       	brcs	.-86     	; 0x285a <sleep+0x100>
		hardwareRevision = HW_REV_3_1;
    28b0:	82 e0       	ldi	r24, 0x02	; 2
    28b2:	80 93 3a 05 	sts	0x053A, r24
    28b6:	d1 cf       	rjmp	.-94     	; 0x285a <sleep+0x100>

000028b8 <getTime100MicroSec>:
	pwm_left = 0;
	initPeripherals();

}

unsigned long int getTime100MicroSec() {
    28b8:	60 91 33 05 	lds	r22, 0x0533
    28bc:	70 91 34 05 	lds	r23, 0x0534
	return clockTick;
}
    28c0:	80 91 35 05 	lds	r24, 0x0535
    28c4:	90 91 36 05 	lds	r25, 0x0536
    28c8:	08 95       	ret

000028ca <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	80 93 c5 03 	sts	0x03C5, r24
}
    28d0:	08 95       	ret

000028d2 <initAdc>:

#include "adc.h"


void initAdc(void) {
    28d2:	cf 93       	push	r28
    28d4:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    28d6:	ea e7       	ldi	r30, 0x7A	; 122
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	10 82       	st	Z, r1
	ADCSRB = 0;
    28dc:	ab e7       	ldi	r26, 0x7B	; 123
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	1c 92       	st	X, r1
	ADMUX = 0;
    28e2:	cc e7       	ldi	r28, 0x7C	; 124
    28e4:	d0 e0       	ldi	r29, 0x00	; 0
    28e6:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    28e8:	80 81       	ld	r24, Z
    28ea:	86 60       	ori	r24, 0x06	; 6
    28ec:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    28ee:	88 81       	ld	r24, Y
    28f0:	80 64       	ori	r24, 0x40	; 64
    28f2:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    28f4:	80 81       	ld	r24, Z
    28f6:	80 62       	ori	r24, 0x20	; 32
    28f8:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    28fa:	8c 91       	ld	r24, X
    28fc:	88 7f       	andi	r24, 0xF8	; 248
    28fe:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    2900:	80 81       	ld	r24, Z
    2902:	88 60       	ori	r24, 0x08	; 8
    2904:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    2906:	80 81       	ld	r24, Z
    2908:	80 68       	ori	r24, 0x80	; 128
    290a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    290c:	80 81       	ld	r24, Z
    290e:	80 64       	ori	r24, 0x40	; 64
    2910:	80 83       	st	Z, r24

}
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	08 95       	ret

00002918 <__vector_29>:

ISR(ADC_vect) {
    2918:	1f 92       	push	r1
    291a:	0f 92       	push	r0
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	0f 92       	push	r0
    2920:	0b b6       	in	r0, 0x3b	; 59
    2922:	0f 92       	push	r0
    2924:	11 24       	eor	r1, r1
    2926:	2f 93       	push	r18
    2928:	3f 93       	push	r19
    292a:	4f 93       	push	r20
    292c:	5f 93       	push	r21
    292e:	6f 93       	push	r22
    2930:	8f 93       	push	r24
    2932:	9f 93       	push	r25
    2934:	af 93       	push	r26
    2936:	bf 93       	push	r27
    2938:	ef 93       	push	r30
    293a:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    293c:	80 91 33 05 	lds	r24, 0x0533
    2940:	90 91 34 05 	lds	r25, 0x0534
    2944:	a0 91 35 05 	lds	r26, 0x0535
    2948:	b0 91 36 05 	lds	r27, 0x0536
    294c:	01 96       	adiw	r24, 0x01	; 1
    294e:	a1 1d       	adc	r26, r1
    2950:	b1 1d       	adc	r27, r1
    2952:	80 93 33 05 	sts	0x0533, r24
    2956:	90 93 34 05 	sts	0x0534, r25
    295a:	a0 93 35 05 	sts	0x0535, r26
    295e:	b0 93 36 05 	sts	0x0536, r27
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    2962:	20 91 78 00 	lds	r18, 0x0078
    2966:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    2968:	40 91 79 00 	lds	r20, 0x0079
    296c:	94 2f       	mov	r25, r20
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	28 2b       	or	r18, r24
    2972:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2974:	80 91 bf 03 	lds	r24, 0x03BF
    2978:	82 30       	cpi	r24, 0x02	; 2
    297a:	09 f4       	brne	.+2      	; 0x297e <__vector_29+0x66>
    297c:	ac c1       	rjmp	.+856    	; 0x2cd6 <__vector_29+0x3be>
    297e:	83 30       	cpi	r24, 0x03	; 3
    2980:	08 f4       	brcc	.+2      	; 0x2984 <__vector_29+0x6c>
    2982:	45 c0       	rjmp	.+138    	; 0x2a0e <__vector_29+0xf6>
    2984:	83 30       	cpi	r24, 0x03	; 3
    2986:	09 f4       	brne	.+2      	; 0x298a <__vector_29+0x72>
    2988:	c9 c1       	rjmp	.+914    	; 0x2d1c <__vector_29+0x404>
    298a:	84 30       	cpi	r24, 0x04	; 4
    298c:	09 f4       	brne	.+2      	; 0x2990 <__vector_29+0x78>
    298e:	68 c1       	rjmp	.+720    	; 0x2c60 <__vector_29+0x348>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2990:	80 91 c0 03 	lds	r24, 0x03C0
    2994:	82 30       	cpi	r24, 0x02	; 2
    2996:	09 f4       	brne	.+2      	; 0x299a <__vector_29+0x82>
    2998:	4f c1       	rjmp	.+670    	; 0x2c38 <__vector_29+0x320>
    299a:	83 30       	cpi	r24, 0x03	; 3
    299c:	08 f0       	brcs	.+2      	; 0x29a0 <__vector_29+0x88>
    299e:	cd c0       	rjmp	.+410    	; 0x2b3a <__vector_29+0x222>
    29a0:	88 23       	and	r24, r24
    29a2:	09 f0       	breq	.+2      	; 0x29a6 <__vector_29+0x8e>
    29a4:	24 c1       	rjmp	.+584    	; 0x2bee <__vector_29+0x2d6>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    29a6:	80 91 2a 03 	lds	r24, 0x032A
    29aa:	86 95       	lsr	r24
    29ac:	80 93 29 03 	sts	0x0329, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    29b0:	80 91 c1 03 	lds	r24, 0x03C1
    29b4:	88 23       	and	r24, r24
    29b6:	09 f0       	breq	.+2      	; 0x29ba <__vector_29+0xa2>
    29b8:	e1 c1       	rjmp	.+962    	; 0x2d7c <__vector_29+0x464>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	80 93 c0 03 	sts	0x03C0, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    29c6:	90 91 29 03 	lds	r25, 0x0329
    29ca:	98 30       	cpi	r25, 0x08	; 8
    29cc:	08 f0       	brcs	.+2      	; 0x29d0 <__vector_29+0xb8>
    29ce:	ed c0       	rjmp	.+474    	; 0x2baa <__vector_29+0x292>
		ADCSRB &= ~(1 << MUX5);
    29d0:	90 91 7b 00 	lds	r25, 0x007B
    29d4:	97 7f       	andi	r25, 0xF7	; 247
    29d6:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    29da:	90 91 29 03 	lds	r25, 0x0329
    29de:	90 5c       	subi	r25, 0xC0	; 192
    29e0:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    29e4:	82 30       	cpi	r24, 0x02	; 2
    29e6:	09 f4       	brne	.+2      	; 0x29ea <__vector_29+0xd2>
    29e8:	ed c0       	rjmp	.+474    	; 0x2bc4 <__vector_29+0x2ac>

	}

	//LED_BLUE_OFF;

}
    29ea:	ff 91       	pop	r31
    29ec:	ef 91       	pop	r30
    29ee:	bf 91       	pop	r27
    29f0:	af 91       	pop	r26
    29f2:	9f 91       	pop	r25
    29f4:	8f 91       	pop	r24
    29f6:	6f 91       	pop	r22
    29f8:	5f 91       	pop	r21
    29fa:	4f 91       	pop	r20
    29fc:	3f 91       	pop	r19
    29fe:	2f 91       	pop	r18
    2a00:	0f 90       	pop	r0
    2a02:	0b be       	out	0x3b, r0	; 59
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	0f 90       	pop	r0
    2a0a:	1f 90       	pop	r1
    2a0c:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2a0e:	88 23       	and	r24, r24
    2a10:	09 f0       	breq	.+2      	; 0x2a14 <__vector_29+0xfc>
    2a12:	fe c0       	rjmp	.+508    	; 0x2c10 <__vector_29+0x2f8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2a14:	60 91 2a 03 	lds	r22, 0x032A
    2a18:	6e 30       	cpi	r22, 0x0E	; 14
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <__vector_29+0x106>
    2a1c:	d0 c1       	rjmp	.+928    	; 0x2dbe <__vector_29+0x4a6>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    2a1e:	46 2f       	mov	r20, r22
    2a20:	50 e0       	ldi	r21, 0x00	; 0
    2a22:	fa 01       	movw	r30, r20
    2a24:	ee 0f       	add	r30, r30
    2a26:	ff 1f       	adc	r31, r31
    2a28:	e1 5d       	subi	r30, 0xD1	; 209
    2a2a:	fc 4f       	sbci	r31, 0xFC	; 252
    2a2c:	31 83       	std	Z+1, r19	; 0x01
    2a2e:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    2a30:	40 ff       	sbrs	r20, 0
    2a32:	77 c0       	rjmp	.+238    	; 0x2b22 <__vector_29+0x20a>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    2a34:	fa 01       	movw	r30, r20
    2a36:	ee 0f       	add	r30, r30
    2a38:	ff 1f       	adc	r31, r31
    2a3a:	e3 5d       	subi	r30, 0xD3	; 211
    2a3c:	fc 4f       	sbci	r31, 0xFC	; 252
    2a3e:	80 81       	ld	r24, Z
    2a40:	91 81       	ldd	r25, Z+1	; 0x01
    2a42:	fa 01       	movw	r30, r20
    2a44:	ee 0f       	add	r30, r30
    2a46:	ff 1f       	adc	r31, r31
    2a48:	e1 5d       	subi	r30, 0xD1	; 209
    2a4a:	fc 4f       	sbci	r31, 0xFC	; 252
    2a4c:	40 81       	ld	r20, Z
    2a4e:	51 81       	ldd	r21, Z+1	; 0x01
    2a50:	26 2f       	mov	r18, r22
    2a52:	26 95       	lsr	r18
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	84 1b       	sub	r24, r20
    2a58:	95 0b       	sbc	r25, r21
    2a5a:	22 0f       	add	r18, r18
    2a5c:	33 1f       	adc	r19, r19
    2a5e:	f9 01       	movw	r30, r18
    2a60:	e9 58       	subi	r30, 0x89	; 137
    2a62:	fc 4f       	sbci	r31, 0xFC	; 252
    2a64:	40 81       	ld	r20, Z
    2a66:	51 81       	ldd	r21, Z+1	; 0x01
    2a68:	84 1b       	sub	r24, r20
    2a6a:	95 0b       	sbc	r25, r21
    2a6c:	f9 01       	movw	r30, r18
    2a6e:	e1 5a       	subi	r30, 0xA1	; 161
    2a70:	fc 4f       	sbci	r31, 0xFC	; 252
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    2a76:	97 fd       	sbrc	r25, 7
    2a78:	bd c1       	rjmp	.+890    	; 0x2df4 <__vector_29+0x4dc>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    2a7a:	44 e0       	ldi	r20, 0x04	; 4
    2a7c:	81 30       	cpi	r24, 0x01	; 1
    2a7e:	94 07       	cpc	r25, r20
    2a80:	24 f0       	brlt	.+8      	; 0x2a8a <__vector_29+0x172>
					proximityResult[currentProx>>1] = 1024;
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	94 e0       	ldi	r25, 0x04	; 4
    2a86:	91 83       	std	Z+1, r25	; 0x01
    2a88:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    2a8a:	60 31       	cpi	r22, 0x10	; 16
    2a8c:	48 f4       	brcc	.+18     	; 0x2aa0 <__vector_29+0x188>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    2a8e:	8c 33       	cpi	r24, 0x3C	; 60
    2a90:	91 05       	cpc	r25, r1
    2a92:	0c f0       	brlt	.+2      	; 0x2a96 <__vector_29+0x17e>
    2a94:	b4 c1       	rjmp	.+872    	; 0x2dfe <__vector_29+0x4e6>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    2a96:	29 53       	subi	r18, 0x39	; 57
    2a98:	3c 4f       	sbci	r19, 0xFC	; 252
    2a9a:	f9 01       	movw	r30, r18
    2a9c:	91 83       	std	Z+1, r25	; 0x01
    2a9e:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    2aa0:	80 91 3c 05 	lds	r24, 0x053C
    2aa4:	88 23       	and	r24, r24
    2aa6:	09 f4       	brne	.+2      	; 0x2aaa <__vector_29+0x192>
    2aa8:	75 c1       	rjmp	.+746    	; 0x2d94 <__vector_29+0x47c>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    2aaa:	80 91 6f 03 	lds	r24, 0x036F
    2aae:	90 91 70 03 	lds	r25, 0x0370
    2ab2:	f1 e0       	ldi	r31, 0x01	; 1
    2ab4:	84 3a       	cpi	r24, 0xA4	; 164
    2ab6:	9f 07       	cpc	r25, r31
    2ab8:	cc f0       	brlt	.+50     	; 0x2aec <__vector_29+0x1d4>
    2aba:	80 91 71 03 	lds	r24, 0x0371
    2abe:	90 91 72 03 	lds	r25, 0x0372
    2ac2:	21 e0       	ldi	r18, 0x01	; 1
    2ac4:	84 3a       	cpi	r24, 0xA4	; 164
    2ac6:	92 07       	cpc	r25, r18
    2ac8:	8c f0       	brlt	.+34     	; 0x2aec <__vector_29+0x1d4>
    2aca:	80 91 73 03 	lds	r24, 0x0373
    2ace:	90 91 74 03 	lds	r25, 0x0374
    2ad2:	41 e0       	ldi	r20, 0x01	; 1
    2ad4:	84 3a       	cpi	r24, 0xA4	; 164
    2ad6:	94 07       	cpc	r25, r20
    2ad8:	4c f0       	brlt	.+18     	; 0x2aec <__vector_29+0x1d4>
    2ada:	80 91 75 03 	lds	r24, 0x0375
    2ade:	90 91 76 03 	lds	r25, 0x0376
    2ae2:	e1 e0       	ldi	r30, 0x01	; 1
    2ae4:	84 3a       	cpi	r24, 0xA4	; 164
    2ae6:	9e 07       	cpc	r25, r30
    2ae8:	0c f0       	brlt	.+2      	; 0x2aec <__vector_29+0x1d4>
    2aea:	54 c1       	rjmp	.+680    	; 0x2d94 <__vector_29+0x47c>
						cliffDetectedFlag = 1;
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	80 93 3d 05 	sts	0x053D, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    2af2:	10 92 ee 03 	sts	0x03EE, r1
    2af6:	10 92 ed 03 	sts	0x03ED, r1
						OCR4A = 0;
    2afa:	10 92 a9 00 	sts	0x00A9, r1
    2afe:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    2b02:	10 92 ab 00 	sts	0x00AB, r1
    2b06:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    2b0a:	10 92 ec 03 	sts	0x03EC, r1
    2b0e:	10 92 eb 03 	sts	0x03EB, r1
						OCR3A = 0;
    2b12:	10 92 99 00 	sts	0x0099, r1
    2b16:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    2b1a:	10 92 9b 00 	sts	0x009B, r1
    2b1e:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    2b22:	6f 5f       	subi	r22, 0xFF	; 255
    2b24:	60 93 2a 03 	sts	0x032A, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    2b28:	68 31       	cpi	r22, 0x18	; 24
    2b2a:	08 f4       	brcc	.+2      	; 0x2b2e <__vector_29+0x216>
    2b2c:	31 cf       	rjmp	.-414    	; 0x2990 <__vector_29+0x78>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    2b2e:	10 92 2a 03 	sts	0x032A, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	80 93 c6 03 	sts	0x03C6, r24
    2b38:	2b cf       	rjmp	.-426    	; 0x2990 <__vector_29+0x78>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2b3a:	83 30       	cpi	r24, 0x03	; 3
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <__vector_29+0x228>
    2b3e:	b7 c0       	rjmp	.+366    	; 0x2cae <__vector_29+0x396>
    2b40:	84 30       	cpi	r24, 0x04	; 4
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <__vector_29+0x22e>
    2b44:	40 cf       	rjmp	.-384    	; 0x29c6 <__vector_29+0xae>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    2b46:	90 91 2c 03 	lds	r25, 0x032C
    2b4a:	90 93 29 03 	sts	0x0329, r25
			rightChannelPhase = rightMotorPhase;
    2b4e:	90 91 2d 03 	lds	r25, 0x032D
    2b52:	90 93 c1 03 	sts	0x03C1, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    2b56:	90 91 c2 03 	lds	r25, 0x03C2
    2b5a:	99 23       	and	r25, r25
    2b5c:	09 f0       	breq	.+2      	; 0x2b60 <__vector_29+0x248>
    2b5e:	08 c1       	rjmp	.+528    	; 0x2d70 <__vector_29+0x458>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2b60:	83 e0       	ldi	r24, 0x03	; 3
    2b62:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    2b66:	10 92 c0 03 	sts	0x03C0, r1

			if(currentProx==14 && measBattery==1) {
    2b6a:	60 91 2a 03 	lds	r22, 0x032A
    2b6e:	6e 30       	cpi	r22, 0x0E	; 14
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <__vector_29+0x25c>
    2b72:	1f c1       	rjmp	.+574    	; 0x2db2 <__vector_29+0x49a>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    2b74:	86 2f       	mov	r24, r22
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	60 ff       	sbrs	r22, 0
    2b7a:	f1 c0       	rjmp	.+482    	; 0x2d5e <__vector_29+0x446>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    2b7c:	60 31       	cpi	r22, 0x10	; 16
    2b7e:	08 f4       	brcc	.+2      	; 0x2b82 <__vector_29+0x26a>
    2b80:	0c c1       	rjmp	.+536    	; 0x2d9a <__vector_29+0x482>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    2b82:	20 91 3a 05 	lds	r18, 0x053A
    2b86:	22 23       	and	r18, r18
    2b88:	09 f0       	breq	.+2      	; 0x2b8c <__vector_29+0x274>
    2b8a:	d5 c0       	rjmp	.+426    	; 0x2d36 <__vector_29+0x41e>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    2b8c:	40 97       	sbiw	r24, 0x10	; 16
    2b8e:	95 95       	asr	r25
    2b90:	87 95       	ror	r24
    2b92:	21 e0       	ldi	r18, 0x01	; 1
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <__vector_29+0x284>
    2b98:	22 0f       	add	r18, r18
    2b9a:	33 1f       	adc	r19, r19
    2b9c:	8a 95       	dec	r24
    2b9e:	e2 f7       	brpl	.-8      	; 0x2b98 <__vector_29+0x280>
    2ba0:	20 93 05 01 	sts	0x0105, r18
    2ba4:	80 91 c0 03 	lds	r24, 0x03C0
    2ba8:	0e cf       	rjmp	.-484    	; 0x29c6 <__vector_29+0xae>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    2baa:	90 91 7b 00 	lds	r25, 0x007B
    2bae:	98 60       	ori	r25, 0x08	; 8
    2bb0:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    2bb4:	90 91 29 03 	lds	r25, 0x0329
    2bb8:	98 5c       	subi	r25, 0xC8	; 200
    2bba:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    2bbe:	82 30       	cpi	r24, 0x02	; 2
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <__vector_29+0x2ac>
    2bc2:	13 cf       	rjmp	.-474    	; 0x29ea <__vector_29+0xd2>

		if(hardwareRevision == HW_REV_3_0) {
    2bc4:	20 91 3a 05 	lds	r18, 0x053A
    2bc8:	22 23       	and	r18, r18
    2bca:	51 f0       	breq	.+20     	; 0x2be0 <__vector_29+0x2c8>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    2bcc:	21 30       	cpi	r18, 0x01	; 1
    2bce:	19 f0       	breq	.+6      	; 0x2bd6 <__vector_29+0x2be>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    2bd0:	22 30       	cpi	r18, 0x02	; 2
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <__vector_29+0x2be>
    2bd4:	0a cf       	rjmp	.-492    	; 0x29ea <__vector_29+0xd2>
			PORTJ = 0xFF;
    2bd6:	8f ef       	ldi	r24, 0xFF	; 255
    2bd8:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    2bdc:	12 b8       	out	0x02, r1	; 2
    2bde:	05 cf       	rjmp	.-502    	; 0x29ea <__vector_29+0xd2>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    2be0:	80 91 05 01 	lds	r24, 0x0105
    2be4:	80 7f       	andi	r24, 0xF0	; 240
    2be6:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    2bea:	12 b8       	out	0x02, r1	; 2
    2bec:	fe ce       	rjmp	.-516    	; 0x29ea <__vector_29+0xd2>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2bee:	81 30       	cpi	r24, 0x01	; 1
    2bf0:	09 f0       	breq	.+2      	; 0x2bf4 <__vector_29+0x2dc>
    2bf2:	e9 ce       	rjmp	.-558    	; 0x29c6 <__vector_29+0xae>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    2bf4:	80 91 2b 03 	lds	r24, 0x032B
    2bf8:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    2bfc:	80 91 2e 03 	lds	r24, 0x032E
    2c00:	80 93 c2 03 	sts	0x03C2, r24
			adcSaveDataTo = SAVE_TO_PROX;
    2c04:	10 92 bf 03 	sts	0x03BF, r1
			adcSamplingState = 2;
    2c08:	82 e0       	ldi	r24, 0x02	; 2
    2c0a:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2c0e:	db ce       	rjmp	.-586    	; 0x29c6 <__vector_29+0xae>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    2c10:	81 30       	cpi	r24, 0x01	; 1
    2c12:	09 f0       	breq	.+2      	; 0x2c16 <__vector_29+0x2fe>
    2c14:	bd ce       	rjmp	.-646    	; 0x2990 <__vector_29+0x78>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    2c16:	80 91 d9 03 	lds	r24, 0x03D9
    2c1a:	90 91 da 03 	lds	r25, 0x03DA
    2c1e:	82 0f       	add	r24, r18
    2c20:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    2c22:	96 95       	lsr	r25
    2c24:	87 95       	ror	r24
    2c26:	90 93 da 03 	sts	0x03DA, r25
    2c2a:	80 93 d9 03 	sts	0x03D9, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    2c2e:	80 91 c0 03 	lds	r24, 0x03C0
    2c32:	82 30       	cpi	r24, 0x02	; 2
    2c34:	09 f0       	breq	.+2      	; 0x2c38 <__vector_29+0x320>
    2c36:	b1 ce       	rjmp	.-670    	; 0x299a <__vector_29+0x82>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    2c38:	80 91 2c 03 	lds	r24, 0x032C
    2c3c:	80 93 29 03 	sts	0x0329, r24
			rightChannelPhase = rightMotorPhase;
    2c40:	80 91 2d 03 	lds	r24, 0x032D
    2c44:	80 93 c1 03 	sts	0x03C1, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    2c48:	80 91 c2 03 	lds	r24, 0x03C2
    2c4c:	88 23       	and	r24, r24
    2c4e:	09 f0       	breq	.+2      	; 0x2c52 <__vector_29+0x33a>
    2c50:	9b c0       	rjmp	.+310    	; 0x2d88 <__vector_29+0x470>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    2c52:	83 e0       	ldi	r24, 0x03	; 3
    2c54:	80 93 bf 03 	sts	0x03BF, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    2c58:	83 e0       	ldi	r24, 0x03	; 3
    2c5a:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2c5e:	b3 ce       	rjmp	.-666    	; 0x29c6 <__vector_29+0xae>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    2c60:	80 91 0a 02 	lds	r24, 0x020A
    2c64:	88 23       	and	r24, r24
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <__vector_29+0x352>
    2c68:	93 ce       	rjmp	.-730    	; 0x2990 <__vector_29+0x78>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    2c6a:	90 91 00 01 	lds	r25, 0x0100
    2c6e:	93 fd       	sbrc	r25, 3
    2c70:	8f ce       	rjmp	.-738    	; 0x2990 <__vector_29+0x78>
    2c72:	90 91 00 01 	lds	r25, 0x0100
    2c76:	94 fd       	sbrc	r25, 4
    2c78:	8b ce       	rjmp	.-746    	; 0x2990 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    2c7a:	48 2f       	mov	r20, r24
    2c7c:	4f 5f       	subi	r20, 0xFF	; 255
    2c7e:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    2c82:	45 30       	cpi	r20, 0x05	; 5
    2c84:	08 f4       	brcc	.+2      	; 0x2c88 <__vector_29+0x370>
    2c86:	84 ce       	rjmp	.-760    	; 0x2990 <__vector_29+0x78>
					left_vel_sum += value;
    2c88:	80 91 e3 03 	lds	r24, 0x03E3
    2c8c:	90 91 e4 03 	lds	r25, 0x03E4
    2c90:	82 0f       	add	r24, r18
    2c92:	93 1f       	adc	r25, r19
    2c94:	90 93 e4 03 	sts	0x03E4, r25
    2c98:	80 93 e3 03 	sts	0x03E3, r24
					if(firstSampleLeft==8) {
    2c9c:	48 30       	cpi	r20, 0x08	; 8
    2c9e:	09 f0       	breq	.+2      	; 0x2ca2 <__vector_29+0x38a>
    2ca0:	77 ce       	rjmp	.-786    	; 0x2990 <__vector_29+0x78>
						firstSampleLeft = 0;
    2ca2:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	80 93 07 02 	sts	0x0207, r24
    2cac:	71 ce       	rjmp	.-798    	; 0x2990 <__vector_29+0x78>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    2cae:	80 91 2b 03 	lds	r24, 0x032B
    2cb2:	80 93 29 03 	sts	0x0329, r24
			leftChannelPhase = leftMotorPhase;
    2cb6:	80 91 2e 03 	lds	r24, 0x032E
    2cba:	80 93 c2 03 	sts	0x03C2, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    2cbe:	80 91 c1 03 	lds	r24, 0x03C1
    2cc2:	88 23       	and	r24, r24
    2cc4:	09 f0       	breq	.+2      	; 0x2cc8 <__vector_29+0x3b0>
    2cc6:	4e c0       	rjmp	.+156    	; 0x2d64 <__vector_29+0x44c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	80 93 bf 03 	sts	0x03BF, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    2cce:	84 e0       	ldi	r24, 0x04	; 4
    2cd0:	80 93 c0 03 	sts	0x03C0, r24
			break;
    2cd4:	78 ce       	rjmp	.-784    	; 0x29c6 <__vector_29+0xae>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    2cd6:	80 91 09 02 	lds	r24, 0x0209
    2cda:	88 23       	and	r24, r24
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <__vector_29+0x3c8>
    2cde:	58 ce       	rjmp	.-848    	; 0x2990 <__vector_29+0x78>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    2ce0:	63 99       	sbic	0x0c, 3	; 12
    2ce2:	56 ce       	rjmp	.-852    	; 0x2990 <__vector_29+0x78>
    2ce4:	64 99       	sbic	0x0c, 4	; 12
    2ce6:	54 ce       	rjmp	.-856    	; 0x2990 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    2ce8:	48 2f       	mov	r20, r24
    2cea:	4f 5f       	subi	r20, 0xFF	; 255
    2cec:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    2cf0:	45 30       	cpi	r20, 0x05	; 5
    2cf2:	08 f4       	brcc	.+2      	; 0x2cf6 <__vector_29+0x3de>
    2cf4:	4d ce       	rjmp	.-870    	; 0x2990 <__vector_29+0x78>
					right_vel_sum += value;
    2cf6:	80 91 e5 03 	lds	r24, 0x03E5
    2cfa:	90 91 e6 03 	lds	r25, 0x03E6
    2cfe:	82 0f       	add	r24, r18
    2d00:	93 1f       	adc	r25, r19
    2d02:	90 93 e6 03 	sts	0x03E6, r25
    2d06:	80 93 e5 03 	sts	0x03E5, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    2d0a:	48 30       	cpi	r20, 0x08	; 8
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <__vector_29+0x3f8>
    2d0e:	40 ce       	rjmp	.-896    	; 0x2990 <__vector_29+0x78>
						firstSampleRight = 0;
    2d10:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	80 93 08 02 	sts	0x0208, r24
    2d1a:	3a ce       	rjmp	.-908    	; 0x2990 <__vector_29+0x78>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    2d1c:	80 91 d7 03 	lds	r24, 0x03D7
    2d20:	90 91 d8 03 	lds	r25, 0x03D8
    2d24:	82 0f       	add	r24, r18
    2d26:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    2d28:	96 95       	lsr	r25
    2d2a:	87 95       	ror	r24
    2d2c:	90 93 d8 03 	sts	0x03D8, r25
    2d30:	80 93 d7 03 	sts	0x03D7, r24
			break;
    2d34:	2d ce       	rjmp	.-934    	; 0x2990 <__vector_29+0x78>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    2d36:	21 30       	cpi	r18, 0x01	; 1
    2d38:	11 f0       	breq	.+4      	; 0x2d3e <__vector_29+0x426>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    2d3a:	22 30       	cpi	r18, 0x02	; 2
    2d3c:	81 f4       	brne	.+32     	; 0x2d5e <__vector_29+0x446>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    2d3e:	40 91 05 01 	lds	r20, 0x0105
    2d42:	40 97       	sbiw	r24, 0x10	; 16
    2d44:	95 95       	asr	r25
    2d46:	87 95       	ror	r24
    2d48:	21 e0       	ldi	r18, 0x01	; 1
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	02 c0       	rjmp	.+4      	; 0x2d52 <__vector_29+0x43a>
    2d4e:	22 0f       	add	r18, r18
    2d50:	33 1f       	adc	r19, r19
    2d52:	8a 95       	dec	r24
    2d54:	e2 f7       	brpl	.-8      	; 0x2d4e <__vector_29+0x436>
    2d56:	20 95       	com	r18
    2d58:	24 23       	and	r18, r20
    2d5a:	20 93 05 01 	sts	0x0105, r18
    2d5e:	80 91 c0 03 	lds	r24, 0x03C0
    2d62:	31 ce       	rjmp	.-926    	; 0x29c6 <__vector_29+0xae>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2d64:	81 30       	cpi	r24, 0x01	; 1
    2d66:	d1 f1       	breq	.+116    	; 0x2ddc <__vector_29+0x4c4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2d68:	85 e0       	ldi	r24, 0x05	; 5
    2d6a:	80 93 bf 03 	sts	0x03BF, r24
    2d6e:	af cf       	rjmp	.-162    	; 0x2cce <__vector_29+0x3b6>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2d70:	91 30       	cpi	r25, 0x01	; 1
    2d72:	09 f0       	breq	.+2      	; 0x2d76 <__vector_29+0x45e>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2d74:	85 e0       	ldi	r24, 0x05	; 5
    2d76:	80 93 bf 03 	sts	0x03BF, r24
    2d7a:	f5 ce       	rjmp	.-534    	; 0x2b66 <__vector_29+0x24e>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    2d7c:	81 30       	cpi	r24, 0x01	; 1
    2d7e:	b1 f1       	breq	.+108    	; 0x2dec <__vector_29+0x4d4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2d80:	85 e0       	ldi	r24, 0x05	; 5
    2d82:	80 93 bf 03 	sts	0x03BF, r24
    2d86:	1c ce       	rjmp	.-968    	; 0x29c0 <__vector_29+0xa8>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    2d88:	81 30       	cpi	r24, 0x01	; 1
    2d8a:	61 f1       	breq	.+88     	; 0x2de4 <__vector_29+0x4cc>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    2d8c:	85 e0       	ldi	r24, 0x05	; 5
    2d8e:	80 93 bf 03 	sts	0x03BF, r24
    2d92:	62 cf       	rjmp	.-316    	; 0x2c58 <__vector_29+0x340>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    2d94:	10 92 3d 05 	sts	0x053D, r1
    2d98:	c4 ce       	rjmp	.-632    	; 0x2b22 <__vector_29+0x20a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    2d9a:	66 95       	lsr	r22
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <__vector_29+0x48e>
    2da2:	88 0f       	add	r24, r24
    2da4:	99 1f       	adc	r25, r25
    2da6:	6a 95       	dec	r22
    2da8:	e2 f7       	brpl	.-8      	; 0x2da2 <__vector_29+0x48a>
    2daa:	82 b9       	out	0x02, r24	; 2
    2dac:	80 91 c0 03 	lds	r24, 0x03C0
    2db0:	0a ce       	rjmp	.-1004   	; 0x29c6 <__vector_29+0xae>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    2db2:	80 91 c5 03 	lds	r24, 0x03C5
    2db6:	81 30       	cpi	r24, 0x01	; 1
    2db8:	a1 f1       	breq	.+104    	; 0x2e22 <__vector_29+0x50a>
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	04 ce       	rjmp	.-1016   	; 0x29c6 <__vector_29+0xae>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    2dbe:	80 91 c5 03 	lds	r24, 0x03C5
    2dc2:	82 30       	cpi	r24, 0x02	; 2
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <__vector_29+0x4b0>
    2dc6:	2b ce       	rjmp	.-938    	; 0x2a1e <__vector_29+0x106>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    2dc8:	30 93 c4 03 	sts	0x03C4, r19
    2dcc:	20 93 c3 03 	sts	0x03C3, r18
				measBattery = 0;
    2dd0:	10 92 c5 03 	sts	0x03C5, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    2dd4:	46 98       	cbi	0x08, 6	; 8
    2dd6:	4e e0       	ldi	r20, 0x0E	; 14
    2dd8:	50 e0       	ldi	r21, 0x00	; 0
    2dda:	2a ce       	rjmp	.-940    	; 0x2a30 <__vector_29+0x118>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2ddc:	82 e0       	ldi	r24, 0x02	; 2
    2dde:	80 93 bf 03 	sts	0x03BF, r24
    2de2:	75 cf       	rjmp	.-278    	; 0x2cce <__vector_29+0x3b6>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    2de4:	84 e0       	ldi	r24, 0x04	; 4
    2de6:	80 93 bf 03 	sts	0x03BF, r24
    2dea:	36 cf       	rjmp	.-404    	; 0x2c58 <__vector_29+0x340>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    2dec:	82 e0       	ldi	r24, 0x02	; 2
    2dee:	80 93 bf 03 	sts	0x03BF, r24
    2df2:	e6 cd       	rjmp	.-1076   	; 0x29c0 <__vector_29+0xa8>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    2df4:	11 82       	std	Z+1, r1	; 0x01
    2df6:	10 82       	st	Z, r1
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	46 ce       	rjmp	.-884    	; 0x2a8a <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    2dfe:	ac 01       	movw	r20, r24
    2e00:	44 5c       	subi	r20, 0xC4	; 196
    2e02:	5f 4f       	sbci	r21, 0xFF	; 255
    2e04:	55 95       	asr	r21
    2e06:	47 95       	ror	r20
    2e08:	48 37       	cpi	r20, 0x78	; 120
    2e0a:	51 05       	cpc	r21, r1
    2e0c:	7c f4       	brge	.+30     	; 0x2e2c <__vector_29+0x514>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    2e0e:	29 53       	subi	r18, 0x39	; 57
    2e10:	3c 4f       	sbci	r19, 0xFC	; 252
    2e12:	cc 97       	sbiw	r24, 0x3c	; 60
    2e14:	95 95       	asr	r25
    2e16:	87 95       	ror	r24
    2e18:	cc 96       	adiw	r24, 0x3c	; 60
    2e1a:	f9 01       	movw	r30, r18
    2e1c:	91 83       	std	Z+1, r25	; 0x01
    2e1e:	80 83       	st	Z, r24
    2e20:	3f ce       	rjmp	.-898    	; 0x2aa0 <__vector_29+0x188>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    2e22:	82 e0       	ldi	r24, 0x02	; 2
    2e24:	80 93 c5 03 	sts	0x03C5, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    2e28:	46 9a       	sbi	0x08, 6	; 8
    2e2a:	a4 ce       	rjmp	.-696    	; 0x2b74 <__vector_29+0x25c>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    2e2c:	ac 01       	movw	r20, r24
    2e2e:	44 5d       	subi	r20, 0xD4	; 212
    2e30:	5e 4f       	sbci	r21, 0xFE	; 254
    2e32:	55 95       	asr	r21
    2e34:	47 95       	ror	r20
    2e36:	55 95       	asr	r21
    2e38:	47 95       	ror	r20
    2e3a:	44 3b       	cpi	r20, 0xB4	; 180
    2e3c:	51 05       	cpc	r21, r1
    2e3e:	74 f4       	brge	.+28     	; 0x2e5c <__vector_29+0x544>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    2e40:	29 53       	subi	r18, 0x39	; 57
    2e42:	3c 4f       	sbci	r19, 0xFC	; 252
    2e44:	84 5b       	subi	r24, 0xB4	; 180
    2e46:	90 40       	sbci	r25, 0x00	; 0
    2e48:	95 95       	asr	r25
    2e4a:	87 95       	ror	r24
    2e4c:	95 95       	asr	r25
    2e4e:	87 95       	ror	r24
    2e50:	88 58       	subi	r24, 0x88	; 136
    2e52:	9f 4f       	sbci	r25, 0xFF	; 255
    2e54:	f9 01       	movw	r30, r18
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
    2e5a:	22 ce       	rjmp	.-956    	; 0x2aa0 <__vector_29+0x188>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    2e5c:	29 53       	subi	r18, 0x39	; 57
    2e5e:	3c 4f       	sbci	r19, 0xFC	; 252
    2e60:	84 5a       	subi	r24, 0xA4	; 164
    2e62:	91 40       	sbci	r25, 0x01	; 1
    2e64:	95 95       	asr	r25
    2e66:	87 95       	ror	r24
    2e68:	95 95       	asr	r25
    2e6a:	87 95       	ror	r24
    2e6c:	95 95       	asr	r25
    2e6e:	87 95       	ror	r24
    2e70:	8c 54       	subi	r24, 0x4C	; 76
    2e72:	9f 4f       	sbci	r25, 0xFF	; 255
    2e74:	f9 01       	movw	r30, r18
    2e76:	91 83       	std	Z+1, r25	; 0x01
    2e78:	80 83       	st	Z, r24
    2e7a:	12 ce       	rjmp	.-988    	; 0x2aa0 <__vector_29+0x188>

00002e7c <initMotors>:

#include "motors.h"

void initMotors() {
    2e7c:	0f 93       	push	r16
    2e7e:	1f 93       	push	r17
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    2e84:	e0 e9       	ldi	r30, 0x90	; 144
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	10 82       	st	Z, r1
	TCCR3B = 0;
    2e8a:	41 e9       	ldi	r20, 0x91	; 145
    2e8c:	50 e0       	ldi	r21, 0x00	; 0
    2e8e:	da 01       	movw	r26, r20
    2e90:	1c 92       	st	X, r1
	TIMSK3 = 0;
    2e92:	21 e7       	ldi	r18, 0x71	; 113
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	e9 01       	movw	r28, r18
    2e98:	18 82       	st	Y, r1
	TCCR4A = 0;
    2e9a:	a0 ea       	ldi	r26, 0xA0	; 160
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	1c 92       	st	X, r1
	TCCR4B = 0;
    2ea0:	81 ea       	ldi	r24, 0xA1	; 161
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	ec 01       	movw	r28, r24
    2ea6:	18 82       	st	Y, r1
	TIMSK4 = 0;
    2ea8:	02 e7       	ldi	r16, 0x72	; 114
    2eaa:	10 e0       	ldi	r17, 0x00	; 0
    2eac:	e8 01       	movw	r28, r16
    2eae:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    2eb0:	60 81       	ld	r22, Z
    2eb2:	63 68       	ori	r22, 0x83	; 131
    2eb4:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    2eb6:	60 81       	ld	r22, Z
    2eb8:	63 60       	ori	r22, 0x03	; 3
    2eba:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2ebc:	ea 01       	movw	r28, r20
    2ebe:	68 81       	ld	r22, Y
    2ec0:	6b 60       	ori	r22, 0x0B	; 11
    2ec2:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    2ec4:	40 91 eb 03 	lds	r20, 0x03EB
    2ec8:	50 91 ec 03 	lds	r21, 0x03EC
    2ecc:	50 93 99 00 	sts	0x0099, r21
    2ed0:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    2ed4:	10 92 9b 00 	sts	0x009B, r1
    2ed8:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    2edc:	e9 01       	movw	r28, r18
    2ede:	48 81       	ld	r20, Y
    2ee0:	41 60       	ori	r20, 0x01	; 1
    2ee2:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    2ee4:	20 81       	ld	r18, Z
    2ee6:	2f 75       	andi	r18, 0x5F	; 95
    2ee8:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2eea:	2e b1       	in	r18, 0x0e	; 14
    2eec:	27 7e       	andi	r18, 0xE7	; 231
    2eee:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    2ef0:	2c 91       	ld	r18, X
    2ef2:	23 68       	ori	r18, 0x83	; 131
    2ef4:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	20 81       	ld	r18, Z
    2efa:	2b 60       	ori	r18, 0x0B	; 11
    2efc:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    2efe:	80 91 ed 03 	lds	r24, 0x03ED
    2f02:	90 91 ee 03 	lds	r25, 0x03EE
    2f06:	90 93 a9 00 	sts	0x00A9, r25
    2f0a:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    2f0e:	10 92 ab 00 	sts	0x00AB, r1
    2f12:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    2f16:	e8 01       	movw	r28, r16
    2f18:	88 81       	ld	r24, Y
    2f1a:	81 60       	ori	r24, 0x01	; 1
    2f1c:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    2f1e:	8c 91       	ld	r24, X
    2f20:	8f 75       	andi	r24, 0x5F	; 95
    2f22:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    2f24:	e2 e0       	ldi	r30, 0x02	; 2
    2f26:	f1 e0       	ldi	r31, 0x01	; 1
    2f28:	80 81       	ld	r24, Z
    2f2a:	87 7e       	andi	r24, 0xE7	; 231
    2f2c:	80 83       	st	Z, r24


}
    2f2e:	df 91       	pop	r29
    2f30:	cf 91       	pop	r28
    2f32:	1f 91       	pop	r17
    2f34:	0f 91       	pop	r16
    2f36:	08 95       	ret

00002f38 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    2f38:	80 91 07 02 	lds	r24, 0x0207
    2f3c:	88 23       	and	r24, r24
    2f3e:	91 f0       	breq	.+36     	; 0x2f64 <handleMotorsWithNoController+0x2c>
		last_left_vel = left_vel_sum>>2;
    2f40:	80 91 e3 03 	lds	r24, 0x03E3
    2f44:	90 91 e4 03 	lds	r25, 0x03E4
    2f48:	96 95       	lsr	r25
    2f4a:	87 95       	ror	r24
    2f4c:	96 95       	lsr	r25
    2f4e:	87 95       	ror	r24
    2f50:	90 93 e8 03 	sts	0x03E8, r25
    2f54:	80 93 e7 03 	sts	0x03E7, r24
		compute_left_vel = 0;
    2f58:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    2f5c:	10 92 e4 03 	sts	0x03E4, r1
    2f60:	10 92 e3 03 	sts	0x03E3, r1
	}

	if(compute_right_vel) {
    2f64:	80 91 08 02 	lds	r24, 0x0208
    2f68:	88 23       	and	r24, r24
    2f6a:	91 f0       	breq	.+36     	; 0x2f90 <handleMotorsWithNoController+0x58>
		last_right_vel = right_vel_sum>>2;
    2f6c:	80 91 e5 03 	lds	r24, 0x03E5
    2f70:	90 91 e6 03 	lds	r25, 0x03E6
    2f74:	96 95       	lsr	r25
    2f76:	87 95       	ror	r24
    2f78:	96 95       	lsr	r25
    2f7a:	87 95       	ror	r24
    2f7c:	90 93 ea 03 	sts	0x03EA, r25
    2f80:	80 93 e9 03 	sts	0x03E9, r24
		compute_right_vel = 0;
    2f84:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    2f88:	10 92 e6 03 	sts	0x03E6, r1
    2f8c:	10 92 e5 03 	sts	0x03E5, r1
	}


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    2f90:	80 91 ef 03 	lds	r24, 0x03EF
    2f94:	90 91 f0 03 	lds	r25, 0x03F0
    2f98:	90 93 fc 03 	sts	0x03FC, r25
    2f9c:	80 93 fb 03 	sts	0x03FB, r24
	pwm_left_working = pwm_left_desired;
    2fa0:	20 91 f1 03 	lds	r18, 0x03F1
    2fa4:	30 91 f2 03 	lds	r19, 0x03F2
    2fa8:	30 93 fe 03 	sts	0x03FE, r19
    2fac:	20 93 fd 03 	sts	0x03FD, r18
	if(obstacleAvoidanceEnabled) {
    2fb0:	40 91 3b 05 	lds	r20, 0x053B
    2fb4:	44 23       	and	r20, r20
    2fb6:	71 f5       	brne	.+92     	; 0x3014 <handleMotorsWithNoController+0xdc>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    2fb8:	30 93 e2 03 	sts	0x03E2, r19
    2fbc:	20 93 e1 03 	sts	0x03E1, r18
	pwm_right_desired_to_control = pwm_right_working;
    2fc0:	90 93 e0 03 	sts	0x03E0, r25
    2fc4:	80 93 df 03 	sts	0x03DF, r24

	pwm_left = pwm_left_working;
    2fc8:	30 93 ee 03 	sts	0x03EE, r19
    2fcc:	20 93 ed 03 	sts	0x03ED, r18
	pwm_right = pwm_right_working;
    2fd0:	90 93 ec 03 	sts	0x03EC, r25
    2fd4:	80 93 eb 03 	sts	0x03EB, r24

	if(pwm_right > 0) {
    2fd8:	18 16       	cp	r1, r24
    2fda:	19 06       	cpc	r1, r25
    2fdc:	54 f5       	brge	.+84     	; 0x3032 <handleMotorsWithNoController+0xfa>
		OCR3A = (unsigned int)pwm_right;
    2fde:	90 93 99 00 	sts	0x0099, r25
    2fe2:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    2fe6:	80 91 ed 03 	lds	r24, 0x03ED
    2fea:	90 91 ee 03 	lds	r25, 0x03EE
    2fee:	18 16       	cp	r1, r24
    2ff0:	19 06       	cpc	r1, r25
    2ff2:	2c f4       	brge	.+10     	; 0x2ffe <handleMotorsWithNoController+0xc6>
		OCR4A = (unsigned int)pwm_left;
    2ff4:	90 93 a9 00 	sts	0x00A9, r25
    2ff8:	80 93 a8 00 	sts	0x00A8, r24
    2ffc:	08 95       	ret
	} else if(pwm_left < 0) {
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	59 f5       	brne	.+86     	; 0x3058 <handleMotorsWithNoController+0x120>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    3002:	10 92 a9 00 	sts	0x00A9, r1
    3006:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    300a:	10 92 ab 00 	sts	0x00AB, r1
    300e:	10 92 aa 00 	sts	0x00AA, r1
    3012:	08 95       	ret


	pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	pwm_left_working = pwm_left_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    3014:	8d ef       	ldi	r24, 0xFD	; 253
    3016:	93 e0       	ldi	r25, 0x03	; 3
    3018:	6b ef       	ldi	r22, 0xFB	; 251
    301a:	73 e0       	ldi	r23, 0x03	; 3
    301c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <obstacleAvoidance>
    3020:	20 91 fd 03 	lds	r18, 0x03FD
    3024:	30 91 fe 03 	lds	r19, 0x03FE
    3028:	80 91 fb 03 	lds	r24, 0x03FB
    302c:	90 91 fc 03 	lds	r25, 0x03FC
    3030:	c3 cf       	rjmp	.-122    	; 0x2fb8 <handleMotorsWithNoController+0x80>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	49 f4       	brne	.+18     	; 0x3048 <handleMotorsWithNoController+0x110>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    3036:	10 92 99 00 	sts	0x0099, r1
    303a:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    303e:	10 92 9b 00 	sts	0x009B, r1
    3042:	10 92 9a 00 	sts	0x009A, r1
    3046:	cf cf       	rjmp	.-98     	; 0x2fe6 <handleMotorsWithNoController+0xae>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    3048:	90 95       	com	r25
    304a:	81 95       	neg	r24
    304c:	9f 4f       	sbci	r25, 0xFF	; 255
    304e:	90 93 9b 00 	sts	0x009B, r25
    3052:	80 93 9a 00 	sts	0x009A, r24
    3056:	c7 cf       	rjmp	.-114    	; 0x2fe6 <handleMotorsWithNoController+0xae>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    3058:	90 95       	com	r25
    305a:	81 95       	neg	r24
    305c:	9f 4f       	sbci	r25, 0xFF	; 255
    305e:	90 93 ab 00 	sts	0x00AB, r25
    3062:	80 93 aa 00 	sts	0x00AA, r24
    3066:	08 95       	ret

00003068 <handleMotorsWithSpeedController>:

}

void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
    3068:	20 91 f1 03 	lds	r18, 0x03F1
    306c:	30 91 f2 03 	lds	r19, 0x03F2
    3070:	30 93 fe 03 	sts	0x03FE, r19
    3074:	20 93 fd 03 	sts	0x03FD, r18
	pwm_right_working = pwm_right_desired;
    3078:	80 91 ef 03 	lds	r24, 0x03EF
    307c:	90 91 f0 03 	lds	r25, 0x03F0
    3080:	90 93 fc 03 	sts	0x03FC, r25
    3084:	80 93 fb 03 	sts	0x03FB, r24
	if(obstacleAvoidanceEnabled) {
    3088:	40 91 3b 05 	lds	r20, 0x053B
    308c:	44 23       	and	r20, r20
    308e:	09 f0       	breq	.+2      	; 0x3092 <handleMotorsWithSpeedController+0x2a>
    3090:	70 c0       	rjmp	.+224    	; 0x3172 <handleMotorsWithSpeedController+0x10a>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    3092:	30 93 e2 03 	sts	0x03E2, r19
    3096:	20 93 e1 03 	sts	0x03E1, r18
	pwm_right_desired_to_control = pwm_right_working;
    309a:	90 93 e0 03 	sts	0x03E0, r25
    309e:	80 93 df 03 	sts	0x03DF, r24

	if(compute_left_vel) {
    30a2:	80 91 07 02 	lds	r24, 0x0207
    30a6:	88 23       	and	r24, r24
    30a8:	59 f1       	breq	.+86     	; 0x3100 <handleMotorsWithSpeedController+0x98>

		last_left_vel = left_vel_sum>>2;
    30aa:	80 91 e3 03 	lds	r24, 0x03E3
    30ae:	90 91 e4 03 	lds	r25, 0x03E4
    30b2:	96 95       	lsr	r25
    30b4:	87 95       	ror	r24
    30b6:	96 95       	lsr	r25
    30b8:	87 95       	ror	r24
    30ba:	90 93 e8 03 	sts	0x03E8, r25
    30be:	80 93 e7 03 	sts	0x03E7, r24
		compute_left_vel = 0;
    30c2:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    30c6:	10 92 e4 03 	sts	0x03E4, r1
    30ca:	10 92 e3 03 	sts	0x03E3, r1

		if(robotPosition == HORIZONTAL_POS) {
    30ce:	80 91 17 02 	lds	r24, 0x0217
    30d2:	81 30       	cpi	r24, 0x01	; 1
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <handleMotorsWithSpeedController+0x70>
    30d6:	61 c0       	rjmp	.+194    	; 0x319a <handleMotorsWithSpeedController+0x132>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    30d8:	8d ef       	ldi	r24, 0xFD	; 253
    30da:	93 e0       	ldi	r25, 0x03	; 3
    30dc:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    30e0:	80 91 fd 03 	lds	r24, 0x03FD
    30e4:	90 91 fe 03 	lds	r25, 0x03FE
    30e8:	90 93 ee 03 	sts	0x03EE, r25
    30ec:	80 93 ed 03 	sts	0x03ED, r24

		if(pwm_left > 0) {
    30f0:	18 16       	cp	r1, r24
    30f2:	19 06       	cpc	r1, r25
    30f4:	0c f0       	brlt	.+2      	; 0x30f8 <handleMotorsWithSpeedController+0x90>
    30f6:	56 c0       	rjmp	.+172    	; 0x31a4 <handleMotorsWithSpeedController+0x13c>
			OCR4A = (unsigned int)pwm_left;
    30f8:	90 93 a9 00 	sts	0x00A9, r25
    30fc:	80 93 a8 00 	sts	0x00A8, r24
			OCR4B = 0;
		}

	}

	if(compute_right_vel) {
    3100:	80 91 08 02 	lds	r24, 0x0208
    3104:	88 23       	and	r24, r24
    3106:	a1 f1       	breq	.+104    	; 0x3170 <handleMotorsWithSpeedController+0x108>

		last_right_vel = right_vel_sum>>2;
    3108:	80 91 e5 03 	lds	r24, 0x03E5
    310c:	90 91 e6 03 	lds	r25, 0x03E6
    3110:	96 95       	lsr	r25
    3112:	87 95       	ror	r24
    3114:	96 95       	lsr	r25
    3116:	87 95       	ror	r24
    3118:	90 93 ea 03 	sts	0x03EA, r25
    311c:	80 93 e9 03 	sts	0x03E9, r24
		compute_right_vel = 0;
    3120:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    3124:	10 92 e6 03 	sts	0x03E6, r1
    3128:	10 92 e5 03 	sts	0x03E5, r1

		if(robotPosition == HORIZONTAL_POS) {
    312c:	80 91 17 02 	lds	r24, 0x0217
    3130:	81 30       	cpi	r24, 0x01	; 1
    3132:	71 f1       	breq	.+92     	; 0x3190 <handleMotorsWithSpeedController+0x128>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    3134:	8b ef       	ldi	r24, 0xFB	; 251
    3136:	93 e0       	ldi	r25, 0x03	; 3
    3138:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    313c:	80 91 fb 03 	lds	r24, 0x03FB
    3140:	90 91 fc 03 	lds	r25, 0x03FC
    3144:	90 93 ec 03 	sts	0x03EC, r25
    3148:	80 93 eb 03 	sts	0x03EB, r24

		if(pwm_right > 0) {
    314c:	18 16       	cp	r1, r24
    314e:	19 06       	cpc	r1, r25
    3150:	2c f4       	brge	.+10     	; 0x315c <handleMotorsWithSpeedController+0xf4>
			OCR3A = (unsigned int)pwm_right;
    3152:	90 93 99 00 	sts	0x0099, r25
    3156:	80 93 98 00 	sts	0x0098, r24
    315a:	08 95       	ret
		} else if(pwm_right < 0) {
    315c:	00 97       	sbiw	r24, 0x00	; 0
    315e:	69 f5       	brne	.+90     	; 0x31ba <handleMotorsWithSpeedController+0x152>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    3160:	10 92 99 00 	sts	0x0099, r1
    3164:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    3168:	10 92 9b 00 	sts	0x009B, r1
    316c:	10 92 9a 00 	sts	0x009A, r1
    3170:	08 95       	ret
void handleMotorsWithSpeedController() {

	pwm_left_working = pwm_left_desired;
	pwm_right_working = pwm_right_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    3172:	8d ef       	ldi	r24, 0xFD	; 253
    3174:	93 e0       	ldi	r25, 0x03	; 3
    3176:	6b ef       	ldi	r22, 0xFB	; 251
    3178:	73 e0       	ldi	r23, 0x03	; 3
    317a:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <obstacleAvoidance>
    317e:	20 91 fd 03 	lds	r18, 0x03FD
    3182:	30 91 fe 03 	lds	r19, 0x03FE
    3186:	80 91 fb 03 	lds	r24, 0x03FB
    318a:	90 91 fc 03 	lds	r25, 0x03FC
    318e:	81 cf       	rjmp	.-254    	; 0x3092 <handleMotorsWithSpeedController+0x2a>
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    3190:	8b ef       	ldi	r24, 0xFB	; 251
    3192:	93 e0       	ldi	r25, 0x03	; 3
    3194:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <start_horizontal_speed_control_right>
    3198:	d1 cf       	rjmp	.-94     	; 0x313c <handleMotorsWithSpeedController+0xd4>
		compute_left_vel = 0;
		left_vel_sum = 0;

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    319a:	8d ef       	ldi	r24, 0xFD	; 253
    319c:	93 e0       	ldi	r25, 0x03	; 3
    319e:	0e 94 a6 10 	call	0x214c	; 0x214c <start_horizontal_speed_control_left>
    31a2:	9e cf       	rjmp	.-196    	; 0x30e0 <handleMotorsWithSpeedController+0x78>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    31a4:	00 97       	sbiw	r24, 0x00	; 0
    31a6:	89 f4       	brne	.+34     	; 0x31ca <handleMotorsWithSpeedController+0x162>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    31a8:	10 92 a9 00 	sts	0x00A9, r1
    31ac:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    31b0:	10 92 ab 00 	sts	0x00AB, r1
    31b4:	10 92 aa 00 	sts	0x00AA, r1
    31b8:	a3 cf       	rjmp	.-186    	; 0x3100 <handleMotorsWithSpeedController+0x98>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    31ba:	90 95       	com	r25
    31bc:	81 95       	neg	r24
    31be:	9f 4f       	sbci	r25, 0xFF	; 255
    31c0:	90 93 9b 00 	sts	0x009B, r25
    31c4:	80 93 9a 00 	sts	0x009A, r24
    31c8:	08 95       	ret
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    31ca:	90 95       	com	r25
    31cc:	81 95       	neg	r24
    31ce:	9f 4f       	sbci	r25, 0xFF	; 255
    31d0:	90 93 ab 00 	sts	0x00AB, r25
    31d4:	80 93 aa 00 	sts	0x00AA, r24
    31d8:	93 cf       	rjmp	.-218    	; 0x3100 <handleMotorsWithSpeedController+0x98>

000031da <setLeftSpeed>:

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    31da:	28 2f       	mov	r18, r24
    31dc:	33 27       	eor	r19, r19
    31de:	27 fd       	sbrc	r18, 7
    31e0:	30 95       	com	r19
    31e2:	37 fd       	sbrc	r19, 7
    31e4:	30 c0       	rjmp	.+96     	; 0x3246 <setLeftSpeed+0x6c>
    31e6:	30 93 00 04 	sts	0x0400, r19
    31ea:	20 93 ff 03 	sts	0x03FF, r18

    if(vel >= 0) {
    31ee:	87 fd       	sbrc	r24, 7
    31f0:	1e c0       	rjmp	.+60     	; 0x322e <setLeftSpeed+0x54>
        pwm_left_desired = speedl<<2;
    31f2:	22 0f       	add	r18, r18
    31f4:	33 1f       	adc	r19, r19
    31f6:	22 0f       	add	r18, r18
    31f8:	33 1f       	adc	r19, r19
    31fa:	30 93 f2 03 	sts	0x03F2, r19
    31fe:	20 93 f1 03 	sts	0x03F1, r18
    } else {
        pwm_left_desired = -(speedl<<2);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    3202:	82 e0       	ldi	r24, 0x02	; 2
    3204:	21 30       	cpi	r18, 0x01	; 1
    3206:	38 07       	cpc	r19, r24
    3208:	3c f0       	brlt	.+14     	; 0x3218 <setLeftSpeed+0x3e>
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	92 e0       	ldi	r25, 0x02	; 2
    320e:	90 93 f2 03 	sts	0x03F2, r25
    3212:	80 93 f1 03 	sts	0x03F1, r24
    3216:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    3218:	8e ef       	ldi	r24, 0xFE	; 254
    321a:	20 30       	cpi	r18, 0x00	; 0
    321c:	38 07       	cpc	r19, r24
    321e:	34 f4       	brge	.+12     	; 0x322c <setLeftSpeed+0x52>
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	9e ef       	ldi	r25, 0xFE	; 254
    3224:	90 93 f2 03 	sts	0x03F2, r25
    3228:	80 93 f1 03 	sts	0x03F1, r24
    322c:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl<<2;
    } else {
        pwm_left_desired = -(speedl<<2);
    322e:	22 0f       	add	r18, r18
    3230:	33 1f       	adc	r19, r19
    3232:	22 0f       	add	r18, r18
    3234:	33 1f       	adc	r19, r19
    3236:	30 95       	com	r19
    3238:	21 95       	neg	r18
    323a:	3f 4f       	sbci	r19, 0xFF	; 255
    323c:	30 93 f2 03 	sts	0x03F2, r19
    3240:	20 93 f1 03 	sts	0x03F1, r18
    3244:	de cf       	rjmp	.-68     	; 0x3202 <setLeftSpeed+0x28>

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    3246:	30 95       	com	r19
    3248:	21 95       	neg	r18
    324a:	3f 4f       	sbci	r19, 0xFF	; 255
    324c:	cc cf       	rjmp	.-104    	; 0x31e6 <setLeftSpeed+0xc>

0000324e <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    324e:	28 2f       	mov	r18, r24
    3250:	33 27       	eor	r19, r19
    3252:	27 fd       	sbrc	r18, 7
    3254:	30 95       	com	r19
    3256:	37 fd       	sbrc	r19, 7
    3258:	30 c0       	rjmp	.+96     	; 0x32ba <setRightSpeed+0x6c>
    325a:	30 93 02 04 	sts	0x0402, r19
    325e:	20 93 01 04 	sts	0x0401, r18

    if(vel >= 0) {
    3262:	87 fd       	sbrc	r24, 7
    3264:	1e c0       	rjmp	.+60     	; 0x32a2 <setRightSpeed+0x54>
        pwm_right_desired = speedr<<2;
    3266:	22 0f       	add	r18, r18
    3268:	33 1f       	adc	r19, r19
    326a:	22 0f       	add	r18, r18
    326c:	33 1f       	adc	r19, r19
    326e:	30 93 f0 03 	sts	0x03F0, r19
    3272:	20 93 ef 03 	sts	0x03EF, r18
    } else {
        pwm_right_desired = -(speedr<<2);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    3276:	82 e0       	ldi	r24, 0x02	; 2
    3278:	21 30       	cpi	r18, 0x01	; 1
    327a:	38 07       	cpc	r19, r24
    327c:	3c f0       	brlt	.+14     	; 0x328c <setRightSpeed+0x3e>
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	92 e0       	ldi	r25, 0x02	; 2
    3282:	90 93 f0 03 	sts	0x03F0, r25
    3286:	80 93 ef 03 	sts	0x03EF, r24
    328a:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    328c:	8e ef       	ldi	r24, 0xFE	; 254
    328e:	20 30       	cpi	r18, 0x00	; 0
    3290:	38 07       	cpc	r19, r24
    3292:	34 f4       	brge	.+12     	; 0x32a0 <setRightSpeed+0x52>
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	9e ef       	ldi	r25, 0xFE	; 254
    3298:	90 93 f0 03 	sts	0x03F0, r25
    329c:	80 93 ef 03 	sts	0x03EF, r24
    32a0:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr<<2;
    } else {
        pwm_right_desired = -(speedr<<2);
    32a2:	22 0f       	add	r18, r18
    32a4:	33 1f       	adc	r19, r19
    32a6:	22 0f       	add	r18, r18
    32a8:	33 1f       	adc	r19, r19
    32aa:	30 95       	com	r19
    32ac:	21 95       	neg	r18
    32ae:	3f 4f       	sbci	r19, 0xFF	; 255
    32b0:	30 93 f0 03 	sts	0x03F0, r19
    32b4:	20 93 ef 03 	sts	0x03EF, r18
    32b8:	de cf       	rjmp	.-68     	; 0x3276 <setRightSpeed+0x28>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    32ba:	30 95       	com	r19
    32bc:	21 95       	neg	r18
    32be:	3f 4f       	sbci	r19, 0xFF	; 255
    32c0:	cc cf       	rjmp	.-104    	; 0x325a <setRightSpeed+0xc>

000032c2 <__vector_45>:
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);

}

// Motor left
ISR(TIMER4_OVF_vect) {
    32c2:	1f 92       	push	r1
    32c4:	0f 92       	push	r0
    32c6:	0f b6       	in	r0, 0x3f	; 63
    32c8:	0f 92       	push	r0
    32ca:	11 24       	eor	r1, r1
    32cc:	8f 93       	push	r24
    32ce:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    32d0:	80 91 3d 05 	lds	r24, 0x053D
    32d4:	88 23       	and	r24, r24
    32d6:	61 f0       	breq	.+24     	; 0x32f0 <__vector_45+0x2e>
		pwm_left = 0;
    32d8:	10 92 ee 03 	sts	0x03EE, r1
    32dc:	10 92 ed 03 	sts	0x03ED, r1
		OCR4A = 0;
    32e0:	10 92 a9 00 	sts	0x00A9, r1
    32e4:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    32e8:	10 92 ab 00 	sts	0x00AB, r1
    32ec:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    32f0:	10 92 d8 03 	sts	0x03D8, r1
    32f4:	10 92 d7 03 	sts	0x03D7, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    32f8:	80 91 ed 03 	lds	r24, 0x03ED
    32fc:	90 91 ee 03 	lds	r25, 0x03EE
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	41 f5       	brne	.+80     	; 0x3354 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    3304:	80 91 e1 03 	lds	r24, 0x03E1
    3308:	90 91 e2 03 	lds	r25, 0x03E2
    330c:	97 fd       	sbrc	r25, 7
    330e:	69 c0       	rjmp	.+210    	; 0x33e2 <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 14;
    3316:	8e e0       	ldi	r24, 0x0E	; 14
    3318:	80 93 2b 03 	sts	0x032B, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3322:	80 91 a0 00 	lds	r24, 0x00A0
    3326:	8f 75       	andi	r24, 0x5F	; 95
    3328:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    332c:	80 91 02 01 	lds	r24, 0x0102
    3330:	87 7e       	andi	r24, 0xE7	; 231
    3332:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    3336:	80 91 72 00 	lds	r24, 0x0072
    333a:	89 7f       	andi	r24, 0xF9	; 249
    333c:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    3340:	89 b3       	in	r24, 0x19	; 25
    3342:	86 60       	ori	r24, 0x06	; 6
    3344:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    3346:	9f 91       	pop	r25
    3348:	8f 91       	pop	r24
    334a:	0f 90       	pop	r0
    334c:	0f be       	out	0x3f, r0	; 63
    334e:	0f 90       	pop	r0
    3350:	1f 90       	pop	r1
    3352:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    3354:	18 16       	cp	r1, r24
    3356:	19 06       	cpc	r1, r25
    3358:	2c f5       	brge	.+74     	; 0x33a4 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    335a:	10 92 2e 03 	sts	0x032E, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    335e:	8f e0       	ldi	r24, 0x0F	; 15
    3360:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    3364:	80 91 a0 00 	lds	r24, 0x00A0
    3368:	8f 7d       	andi	r24, 0xDF	; 223
    336a:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    336e:	80 91 72 00 	lds	r24, 0x0072
    3372:	8b 7f       	andi	r24, 0xFB	; 251
    3374:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    3378:	80 91 02 01 	lds	r24, 0x0102
    337c:	8f 7e       	andi	r24, 0xEF	; 239
    337e:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    3382:	80 91 a0 00 	lds	r24, 0x00A0
    3386:	80 68       	ori	r24, 0x80	; 128
    3388:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    338c:	80 91 72 00 	lds	r24, 0x0072
    3390:	82 60       	ori	r24, 0x02	; 2
    3392:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    3396:	9f 91       	pop	r25
    3398:	8f 91       	pop	r24
    339a:	0f 90       	pop	r0
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	0f 90       	pop	r0
    33a0:	1f 90       	pop	r1
    33a2:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    33a4:	10 92 2e 03 	sts	0x032E, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    33a8:	8e e0       	ldi	r24, 0x0E	; 14
    33aa:	80 93 2b 03 	sts	0x032B, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    33ae:	80 91 a0 00 	lds	r24, 0x00A0
    33b2:	8f 77       	andi	r24, 0x7F	; 127
    33b4:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    33b8:	80 91 72 00 	lds	r24, 0x0072
    33bc:	8d 7f       	andi	r24, 0xFD	; 253
    33be:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    33c2:	80 91 02 01 	lds	r24, 0x0102
    33c6:	87 7f       	andi	r24, 0xF7	; 247
    33c8:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    33cc:	80 91 a0 00 	lds	r24, 0x00A0
    33d0:	80 62       	ori	r24, 0x20	; 32
    33d2:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    33d6:	80 91 72 00 	lds	r24, 0x0072
    33da:	84 60       	ori	r24, 0x04	; 4
    33dc:	80 93 72 00 	sts	0x0072, r24
    33e0:	b2 cf       	rjmp	.-156    	; 0x3346 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	80 93 2e 03 	sts	0x032E, r24
			currentMotLeftChannel = 15;
    33e8:	8f e0       	ldi	r24, 0x0F	; 15
    33ea:	80 93 2b 03 	sts	0x032B, r24
    33ee:	96 cf       	rjmp	.-212    	; 0x331c <__vector_45+0x5a>

000033f0 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    33f0:	1f 92       	push	r1
    33f2:	0f 92       	push	r0
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	0f 92       	push	r0
    33f8:	11 24       	eor	r1, r1
    33fa:	8f 93       	push	r24
    33fc:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	80 93 2e 03 	sts	0x032E, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    3404:	9e e0       	ldi	r25, 0x0E	; 14
    3406:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    340a:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    340e:	9f 91       	pop	r25
    3410:	8f 91       	pop	r24
    3412:	0f 90       	pop	r0
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	0f 90       	pop	r0
    3418:	1f 90       	pop	r1
    341a:	18 95       	reti

0000341c <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    341c:	1f 92       	push	r1
    341e:	0f 92       	push	r0
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	0f 92       	push	r0
    3424:	11 24       	eor	r1, r1
    3426:	8f 93       	push	r24
    3428:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	80 93 2e 03 	sts	0x032E, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    3430:	9f e0       	ldi	r25, 0x0F	; 15
    3432:	90 93 2b 03 	sts	0x032B, r25

	firstSampleLeft = 1;
    3436:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    343a:	9f 91       	pop	r25
    343c:	8f 91       	pop	r24
    343e:	0f 90       	pop	r0
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	0f 90       	pop	r0
    3444:	1f 90       	pop	r1
    3446:	18 95       	reti

00003448 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    3448:	1f 92       	push	r1
    344a:	0f 92       	push	r0
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	0f 92       	push	r0
    3450:	11 24       	eor	r1, r1
    3452:	8f 93       	push	r24
    3454:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    3456:	80 91 3d 05 	lds	r24, 0x053D
    345a:	88 23       	and	r24, r24
    345c:	61 f0       	breq	.+24     	; 0x3476 <__vector_35+0x2e>
		pwm_right = 0;
    345e:	10 92 ec 03 	sts	0x03EC, r1
    3462:	10 92 eb 03 	sts	0x03EB, r1
		OCR3A = 0;
    3466:	10 92 99 00 	sts	0x0099, r1
    346a:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    346e:	10 92 9b 00 	sts	0x009B, r1
    3472:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    3476:	10 92 da 03 	sts	0x03DA, r1
    347a:	10 92 d9 03 	sts	0x03D9, r1


	if(pwm_right == 0) {
    347e:	80 91 eb 03 	lds	r24, 0x03EB
    3482:	90 91 ec 03 	lds	r25, 0x03EC
    3486:	00 97       	sbiw	r24, 0x00	; 0
    3488:	31 f5       	brne	.+76     	; 0x34d6 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    348a:	80 91 df 03 	lds	r24, 0x03DF
    348e:	90 91 e0 03 	lds	r25, 0x03E0
    3492:	97 fd       	sbrc	r25, 7
    3494:	5f c0       	rjmp	.+190    	; 0x3554 <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	80 93 2d 03 	sts	0x032D, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    349c:	8c e0       	ldi	r24, 0x0C	; 12
    349e:	80 93 2c 03 	sts	0x032C, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    34a8:	80 91 90 00 	lds	r24, 0x0090
    34ac:	8f 75       	andi	r24, 0x5F	; 95
    34ae:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    34b2:	8e b1       	in	r24, 0x0e	; 14
    34b4:	87 7e       	andi	r24, 0xE7	; 231
    34b6:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    34b8:	80 91 71 00 	lds	r24, 0x0071
    34bc:	89 7f       	andi	r24, 0xF9	; 249
    34be:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    34c2:	88 b3       	in	r24, 0x18	; 24
    34c4:	86 60       	ori	r24, 0x06	; 6
    34c6:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    34c8:	9f 91       	pop	r25
    34ca:	8f 91       	pop	r24
    34cc:	0f 90       	pop	r0
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	0f 90       	pop	r0
    34d2:	1f 90       	pop	r1
    34d4:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    34d6:	18 16       	cp	r1, r24
    34d8:	19 06       	cpc	r1, r25
    34da:	0c f5       	brge	.+66     	; 0x351e <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    34dc:	10 92 2d 03 	sts	0x032D, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    34e0:	8d e0       	ldi	r24, 0x0D	; 13
    34e2:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    34e6:	80 91 90 00 	lds	r24, 0x0090
    34ea:	8f 7d       	andi	r24, 0xDF	; 223
    34ec:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    34f0:	80 91 71 00 	lds	r24, 0x0071
    34f4:	8b 7f       	andi	r24, 0xFB	; 251
    34f6:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    34fa:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    34fc:	80 91 90 00 	lds	r24, 0x0090
    3500:	80 68       	ori	r24, 0x80	; 128
    3502:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    3506:	80 91 71 00 	lds	r24, 0x0071
    350a:	82 60       	ori	r24, 0x02	; 2
    350c:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    3510:	9f 91       	pop	r25
    3512:	8f 91       	pop	r24
    3514:	0f 90       	pop	r0
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	0f 90       	pop	r0
    351a:	1f 90       	pop	r1
    351c:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    351e:	10 92 2d 03 	sts	0x032D, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    3522:	8c e0       	ldi	r24, 0x0C	; 12
    3524:	80 93 2c 03 	sts	0x032C, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    3528:	80 91 90 00 	lds	r24, 0x0090
    352c:	8f 77       	andi	r24, 0x7F	; 127
    352e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    3532:	80 91 71 00 	lds	r24, 0x0071
    3536:	8d 7f       	andi	r24, 0xFD	; 253
    3538:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    353c:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    353e:	80 91 90 00 	lds	r24, 0x0090
    3542:	80 62       	ori	r24, 0x20	; 32
    3544:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    3548:	80 91 71 00 	lds	r24, 0x0071
    354c:	84 60       	ori	r24, 0x04	; 4
    354e:	80 93 71 00 	sts	0x0071, r24
    3552:	ba cf       	rjmp	.-140    	; 0x34c8 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	80 93 2d 03 	sts	0x032D, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    355a:	8d e0       	ldi	r24, 0x0D	; 13
    355c:	80 93 2c 03 	sts	0x032C, r24
    3560:	a0 cf       	rjmp	.-192    	; 0x34a2 <__vector_35+0x5a>

00003562 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    3562:	1f 92       	push	r1
    3564:	0f 92       	push	r0
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	0f 92       	push	r0
    356a:	11 24       	eor	r1, r1
    356c:	8f 93       	push	r24
    356e:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	80 93 2d 03 	sts	0x032D, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    3576:	9c e0       	ldi	r25, 0x0C	; 12
    3578:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    357c:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    3580:	9f 91       	pop	r25
    3582:	8f 91       	pop	r24
    3584:	0f 90       	pop	r0
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	0f 90       	pop	r0
    358a:	1f 90       	pop	r1
    358c:	18 95       	reti

0000358e <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    358e:	1f 92       	push	r1
    3590:	0f 92       	push	r0
    3592:	0f b6       	in	r0, 0x3f	; 63
    3594:	0f 92       	push	r0
    3596:	11 24       	eor	r1, r1
    3598:	8f 93       	push	r24
    359a:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    359c:	81 e0       	ldi	r24, 0x01	; 1
    359e:	80 93 2d 03 	sts	0x032D, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    35a2:	9d e0       	ldi	r25, 0x0D	; 13
    35a4:	90 93 2c 03 	sts	0x032C, r25

	firstSampleRight = 1;
    35a8:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    35ac:	9f 91       	pop	r25
    35ae:	8f 91       	pop	r24
    35b0:	0f 90       	pop	r0
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	0f 90       	pop	r0
    35b6:	1f 90       	pop	r1
    35b8:	18 95       	reti

000035ba <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    35ba:	80 91 94 00 	lds	r24, 0x0094
    35be:	90 91 95 00 	lds	r25, 0x0095
    35c2:	0e 94 2f 29 	call	0x525e	; 0x525e <srand>

}
    35c6:	08 95       	ret

000035c8 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    35c8:	2f 92       	push	r2
    35ca:	3f 92       	push	r3
    35cc:	4f 92       	push	r4
    35ce:	5f 92       	push	r5
    35d0:	6f 92       	push	r6
    35d2:	7f 92       	push	r7
    35d4:	8f 92       	push	r8
    35d6:	9f 92       	push	r9
    35d8:	af 92       	push	r10
    35da:	bf 92       	push	r11
    35dc:	cf 92       	push	r12
    35de:	df 92       	push	r13
    35e0:	ef 92       	push	r14
    35e2:	ff 92       	push	r15
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	df 93       	push	r29
    35ea:	cf 93       	push	r28
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	28 97       	sbiw	r28, 0x08	; 8
    35f2:	0f b6       	in	r0, 0x3f	; 63
    35f4:	f8 94       	cli
    35f6:	de bf       	out	0x3e, r29	; 62
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	cd bf       	out	0x3d, r28	; 61
    35fc:	2c 01       	movw	r4, r24
    35fe:	7a 83       	std	Y+2, r23	; 0x02
    3600:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    3602:	fc 01       	movw	r30, r24
    3604:	01 90       	ld	r0, Z+
    3606:	f0 81       	ld	r31, Z
    3608:	e0 2d       	mov	r30, r0
    360a:	fc 83       	std	Y+4, r31	; 0x04
    360c:	eb 83       	std	Y+3, r30	; 0x03
    360e:	fb 01       	movw	r30, r22
    3610:	01 90       	ld	r0, Z+
    3612:	f0 81       	ld	r31, Z
    3614:	e0 2d       	mov	r30, r0
    3616:	fe 83       	std	Y+6, r31	; 0x06
    3618:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    361a:	60 91 c7 03 	lds	r22, 0x03C7
    361e:	70 91 c8 03 	lds	r23, 0x03C8
    3622:	65 30       	cpi	r22, 0x05	; 5
    3624:	71 05       	cpc	r23, r1
    3626:	34 f4       	brge	.+12     	; 0x3634 <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    3628:	10 92 c8 03 	sts	0x03C8, r1
    362c:	10 92 c7 03 	sts	0x03C7, r1
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3634:	40 91 c9 03 	lds	r20, 0x03C9
    3638:	50 91 ca 03 	lds	r21, 0x03CA
    363c:	45 30       	cpi	r20, 0x05	; 5
    363e:	51 05       	cpc	r21, r1
    3640:	34 f4       	brge	.+12     	; 0x364e <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    3642:	10 92 ca 03 	sts	0x03CA, r1
    3646:	10 92 c9 03 	sts	0x03C9, r1
    364a:	40 e0       	ldi	r20, 0x00	; 0
    364c:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    364e:	80 91 cb 03 	lds	r24, 0x03CB
    3652:	90 91 cc 03 	lds	r25, 0x03CC
    3656:	85 30       	cpi	r24, 0x05	; 5
    3658:	91 05       	cpc	r25, r1
    365a:	24 f4       	brge	.+8      	; 0x3664 <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    365c:	10 92 cc 03 	sts	0x03CC, r1
    3660:	10 92 cb 03 	sts	0x03CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    3664:	00 91 cd 03 	lds	r16, 0x03CD
    3668:	10 91 ce 03 	lds	r17, 0x03CE
    366c:	05 30       	cpi	r16, 0x05	; 5
    366e:	11 05       	cpc	r17, r1
    3670:	34 f4       	brge	.+12     	; 0x367e <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    3672:	10 92 ce 03 	sts	0x03CE, r1
    3676:	10 92 cd 03 	sts	0x03CD, r1
    367a:	00 e0       	ldi	r16, 0x00	; 0
    367c:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    367e:	60 90 cf 03 	lds	r6, 0x03CF
    3682:	70 90 d0 03 	lds	r7, 0x03D0
    3686:	f5 e0       	ldi	r31, 0x05	; 5
    3688:	6f 16       	cp	r6, r31
    368a:	71 04       	cpc	r7, r1
    368c:	34 f4       	brge	.+12     	; 0x369a <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    368e:	10 92 d0 03 	sts	0x03D0, r1
    3692:	10 92 cf 03 	sts	0x03CF, r1
    3696:	66 24       	eor	r6, r6
    3698:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    369a:	20 91 d1 03 	lds	r18, 0x03D1
    369e:	30 91 d2 03 	lds	r19, 0x03D2
    36a2:	25 30       	cpi	r18, 0x05	; 5
    36a4:	31 05       	cpc	r19, r1
    36a6:	34 f4       	brge	.+12     	; 0x36b4 <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    36a8:	10 92 d2 03 	sts	0x03D2, r1
    36ac:	10 92 d1 03 	sts	0x03D1, r1
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    36b4:	80 91 d3 03 	lds	r24, 0x03D3
    36b8:	90 91 d4 03 	lds	r25, 0x03D4
    36bc:	85 30       	cpi	r24, 0x05	; 5
    36be:	91 05       	cpc	r25, r1
    36c0:	24 f4       	brge	.+8      	; 0x36ca <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    36c2:	10 92 d4 03 	sts	0x03D4, r1
    36c6:	10 92 d3 03 	sts	0x03D3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    36ca:	80 91 d5 03 	lds	r24, 0x03D5
    36ce:	90 91 d6 03 	lds	r25, 0x03D6
    36d2:	85 30       	cpi	r24, 0x05	; 5
    36d4:	91 05       	cpc	r25, r1
    36d6:	34 f4       	brge	.+12     	; 0x36e4 <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    36d8:	10 92 d6 03 	sts	0x03D6, r1
    36dc:	10 92 d5 03 	sts	0x03D5, r1
    36e0:	80 e0       	ldi	r24, 0x00	; 0
    36e2:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    36e4:	ee 24       	eor	r14, r14
    36e6:	ff 24       	eor	r15, r15
    36e8:	e6 1a       	sub	r14, r22
    36ea:	f7 0a       	sbc	r15, r23
    36ec:	5a 01       	movw	r10, r20
    36ee:	b5 94       	asr	r11
    36f0:	a7 94       	ror	r10
    36f2:	15 95       	asr	r17
    36f4:	07 95       	ror	r16
    36f6:	69 01       	movw	r12, r18
    36f8:	d5 94       	asr	r13
    36fa:	c7 94       	ror	r12
    36fc:	4c 01       	movw	r8, r24
    36fe:	95 94       	asr	r9
    3700:	87 94       	ror	r8
    3702:	0e 94 2a 29 	call	0x5254	; 0x5254 <rand>
    3706:	93 01       	movw	r18, r6
    3708:	2e 51       	subi	r18, 0x1E	; 30
    370a:	30 40       	sbci	r19, 0x00	; 0
    370c:	2e 0d       	add	r18, r14
    370e:	3f 1d       	adc	r19, r15
    3710:	20 0f       	add	r18, r16
    3712:	31 1f       	adc	r19, r17
    3714:	2c 0d       	add	r18, r12
    3716:	3d 1d       	adc	r19, r13
    3718:	2a 19       	sub	r18, r10
    371a:	3b 09       	sbc	r19, r11
    371c:	28 19       	sub	r18, r8
    371e:	39 09       	sbc	r19, r9
    3720:	4c e3       	ldi	r20, 0x3C	; 60
    3722:	24 2e       	mov	r2, r20
    3724:	31 2c       	mov	r3, r1
    3726:	b1 01       	movw	r22, r2
    3728:	0e 94 92 28 	call	0x5124	; 0x5124 <__divmodhi4>
    372c:	28 0f       	add	r18, r24
    372e:	39 1f       	adc	r19, r25
    3730:	38 87       	std	Y+8, r19	; 0x08
    3732:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    3734:	e0 90 c9 03 	lds	r14, 0x03C9
    3738:	f0 90 ca 03 	lds	r15, 0x03CA
    373c:	f5 94       	asr	r15
    373e:	e7 94       	ror	r14
    3740:	00 91 cb 03 	lds	r16, 0x03CB
    3744:	10 91 cc 03 	lds	r17, 0x03CC
    3748:	15 95       	asr	r17
    374a:	07 95       	ror	r16
    374c:	15 95       	asr	r17
    374e:	07 95       	ror	r16
    3750:	c0 90 cd 03 	lds	r12, 0x03CD
    3754:	d0 90 ce 03 	lds	r13, 0x03CE
    3758:	d5 94       	asr	r13
    375a:	c7 94       	ror	r12
    375c:	80 90 d1 03 	lds	r8, 0x03D1
    3760:	90 90 d2 03 	lds	r9, 0x03D2
    3764:	95 94       	asr	r9
    3766:	87 94       	ror	r8
    3768:	60 90 d3 03 	lds	r6, 0x03D3
    376c:	70 90 d4 03 	lds	r7, 0x03D4
    3770:	75 94       	asr	r7
    3772:	67 94       	ror	r6
    3774:	75 94       	asr	r7
    3776:	67 94       	ror	r6
    3778:	a0 90 d5 03 	lds	r10, 0x03D5
    377c:	b0 90 d6 03 	lds	r11, 0x03D6
    3780:	b5 94       	asr	r11
    3782:	a7 94       	ror	r10
    3784:	0e 94 2a 29 	call	0x5254	; 0x5254 <rand>
    3788:	97 01       	movw	r18, r14
    378a:	20 0f       	add	r18, r16
    378c:	31 1f       	adc	r19, r17
    378e:	2e 51       	subi	r18, 0x1E	; 30
    3790:	30 40       	sbci	r19, 0x00	; 0
    3792:	2c 0d       	add	r18, r12
    3794:	3d 1d       	adc	r19, r13
    3796:	2a 19       	sub	r18, r10
    3798:	3b 09       	sbc	r19, r11
    379a:	28 19       	sub	r18, r8
    379c:	39 09       	sbc	r19, r9
    379e:	26 19       	sub	r18, r6
    37a0:	37 09       	sbc	r19, r7
    37a2:	b1 01       	movw	r22, r2
    37a4:	0e 94 92 28 	call	0x5124	; 0x5124 <__divmodhi4>
    37a8:	28 0f       	add	r18, r24
    37aa:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    37ac:	4b 81       	ldd	r20, Y+3	; 0x03
    37ae:	5c 81       	ldd	r21, Y+4	; 0x04
    37b0:	57 fd       	sbrc	r21, 7
    37b2:	97 c0       	rjmp	.+302    	; 0x38e2 <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    37b4:	5a 01       	movw	r10, r20
    37b6:	cc 24       	eor	r12, r12
    37b8:	b7 fc       	sbrc	r11, 7
    37ba:	c0 94       	com	r12
    37bc:	dc 2c       	mov	r13, r12
    37be:	8f 81       	ldd	r24, Y+7	; 0x07
    37c0:	98 85       	ldd	r25, Y+8	; 0x08
    37c2:	3c 01       	movw	r6, r24
    37c4:	88 24       	eor	r8, r8
    37c6:	77 fc       	sbrc	r7, 7
    37c8:	80 94       	com	r8
    37ca:	98 2c       	mov	r9, r8
    37cc:	79 01       	movw	r14, r18
    37ce:	00 27       	eor	r16, r16
    37d0:	f7 fc       	sbrc	r15, 7
    37d2:	00 95       	com	r16
    37d4:	10 2f       	mov	r17, r16
    37d6:	c4 01       	movw	r24, r8
    37d8:	b3 01       	movw	r22, r6
    37da:	6e 19       	sub	r22, r14
    37dc:	7f 09       	sbc	r23, r15
    37de:	80 0b       	sbc	r24, r16
    37e0:	91 0b       	sbc	r25, r17
    37e2:	a6 01       	movw	r20, r12
    37e4:	95 01       	movw	r18, r10
    37e6:	0e 94 5f 28 	call	0x50be	; 0x50be <__mulsi3>
    37ea:	f7 e0       	ldi	r31, 0x07	; 7
    37ec:	95 95       	asr	r25
    37ee:	87 95       	ror	r24
    37f0:	77 95       	ror	r23
    37f2:	67 95       	ror	r22
    37f4:	fa 95       	dec	r31
    37f6:	d1 f7       	brne	.-12     	; 0x37ec <obstacleAvoidance+0x224>
    37f8:	6a 0d       	add	r22, r10
    37fa:	7b 1d       	adc	r23, r11
    37fc:	8c 1d       	adc	r24, r12
    37fe:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    3800:	f2 01       	movw	r30, r4
    3802:	71 83       	std	Z+1, r23	; 0x01
    3804:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    3806:	2d 81       	ldd	r18, Y+5	; 0x05
    3808:	3e 81       	ldd	r19, Y+6	; 0x06
    380a:	37 fd       	sbrc	r19, 7
    380c:	99 c0       	rjmp	.+306    	; 0x3940 <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    380e:	59 01       	movw	r10, r18
    3810:	cc 24       	eor	r12, r12
    3812:	b7 fc       	sbrc	r11, 7
    3814:	c0 94       	com	r12
    3816:	dc 2c       	mov	r13, r12
    3818:	c8 01       	movw	r24, r16
    381a:	b7 01       	movw	r22, r14
    381c:	66 0d       	add	r22, r6
    381e:	77 1d       	adc	r23, r7
    3820:	88 1d       	adc	r24, r8
    3822:	99 1d       	adc	r25, r9
    3824:	a6 01       	movw	r20, r12
    3826:	95 01       	movw	r18, r10
    3828:	0e 94 5f 28 	call	0x50be	; 0x50be <__mulsi3>
    382c:	37 e0       	ldi	r19, 0x07	; 7
    382e:	95 95       	asr	r25
    3830:	87 95       	ror	r24
    3832:	77 95       	ror	r23
    3834:	67 95       	ror	r22
    3836:	3a 95       	dec	r19
    3838:	d1 f7       	brne	.-12     	; 0x382e <obstacleAvoidance+0x266>
    383a:	6a 0d       	add	r22, r10
    383c:	7b 1d       	adc	r23, r11
    383e:	8c 1d       	adc	r24, r12
    3840:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    3842:	9b 01       	movw	r18, r22
    3844:	e9 81       	ldd	r30, Y+1	; 0x01
    3846:	fa 81       	ldd	r31, Y+2	; 0x02
    3848:	71 83       	std	Z+1, r23	; 0x01
    384a:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    384c:	f2 e0       	ldi	r31, 0x02	; 2
    384e:	21 30       	cpi	r18, 0x01	; 1
    3850:	3f 07       	cpc	r19, r31
    3852:	44 f0       	brlt	.+16     	; 0x3864 <obstacleAvoidance+0x29c>
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	92 e0       	ldi	r25, 0x02	; 2
    3858:	e9 81       	ldd	r30, Y+1	; 0x01
    385a:	fa 81       	ldd	r31, Y+2	; 0x02
    385c:	91 83       	std	Z+1, r25	; 0x01
    385e:	80 83       	st	Z, r24
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    3864:	f2 01       	movw	r30, r4
    3866:	80 81       	ld	r24, Z
    3868:	91 81       	ldd	r25, Z+1	; 0x01
    386a:	f2 e0       	ldi	r31, 0x02	; 2
    386c:	81 30       	cpi	r24, 0x01	; 1
    386e:	9f 07       	cpc	r25, r31
    3870:	4c f0       	brlt	.+18     	; 0x3884 <obstacleAvoidance+0x2bc>
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	92 e0       	ldi	r25, 0x02	; 2
    3876:	f2 01       	movw	r30, r4
    3878:	91 83       	std	Z+1, r25	; 0x01
    387a:	80 83       	st	Z, r24
    387c:	e9 81       	ldd	r30, Y+1	; 0x01
    387e:	fa 81       	ldd	r31, Y+2	; 0x02
    3880:	20 81       	ld	r18, Z
    3882:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    3884:	fe ef       	ldi	r31, 0xFE	; 254
    3886:	20 30       	cpi	r18, 0x00	; 0
    3888:	3f 07       	cpc	r19, r31
    388a:	4c f4       	brge	.+18     	; 0x389e <obstacleAvoidance+0x2d6>
    388c:	80 e0       	ldi	r24, 0x00	; 0
    388e:	9e ef       	ldi	r25, 0xFE	; 254
    3890:	e9 81       	ldd	r30, Y+1	; 0x01
    3892:	fa 81       	ldd	r31, Y+2	; 0x02
    3894:	91 83       	std	Z+1, r25	; 0x01
    3896:	80 83       	st	Z, r24
    3898:	f2 01       	movw	r30, r4
    389a:	80 81       	ld	r24, Z
    389c:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    389e:	fe ef       	ldi	r31, 0xFE	; 254
    38a0:	80 30       	cpi	r24, 0x00	; 0
    38a2:	9f 07       	cpc	r25, r31
    38a4:	2c f4       	brge	.+10     	; 0x38b0 <obstacleAvoidance+0x2e8>
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	9e ef       	ldi	r25, 0xFE	; 254
    38aa:	f2 01       	movw	r30, r4
    38ac:	91 83       	std	Z+1, r25	; 0x01
    38ae:	80 83       	st	Z, r24

}
    38b0:	28 96       	adiw	r28, 0x08	; 8
    38b2:	0f b6       	in	r0, 0x3f	; 63
    38b4:	f8 94       	cli
    38b6:	de bf       	out	0x3e, r29	; 62
    38b8:	0f be       	out	0x3f, r0	; 63
    38ba:	cd bf       	out	0x3d, r28	; 61
    38bc:	cf 91       	pop	r28
    38be:	df 91       	pop	r29
    38c0:	1f 91       	pop	r17
    38c2:	0f 91       	pop	r16
    38c4:	ff 90       	pop	r15
    38c6:	ef 90       	pop	r14
    38c8:	df 90       	pop	r13
    38ca:	cf 90       	pop	r12
    38cc:	bf 90       	pop	r11
    38ce:	af 90       	pop	r10
    38d0:	9f 90       	pop	r9
    38d2:	8f 90       	pop	r8
    38d4:	7f 90       	pop	r7
    38d6:	6f 90       	pop	r6
    38d8:	5f 90       	pop	r5
    38da:	4f 90       	pop	r4
    38dc:	3f 90       	pop	r3
    38de:	2f 90       	pop	r2
    38e0:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
    38e2:	4d 81       	ldd	r20, Y+5	; 0x05
    38e4:	5e 81       	ldd	r21, Y+6	; 0x06
    38e6:	5a 01       	movw	r10, r20
    38e8:	cc 24       	eor	r12, r12
    38ea:	b7 fc       	sbrc	r11, 7
    38ec:	c0 94       	com	r12
    38ee:	dc 2c       	mov	r13, r12
    38f0:	8f 81       	ldd	r24, Y+7	; 0x07
    38f2:	98 85       	ldd	r25, Y+8	; 0x08
    38f4:	3c 01       	movw	r6, r24
    38f6:	88 24       	eor	r8, r8
    38f8:	77 fc       	sbrc	r7, 7
    38fa:	80 94       	com	r8
    38fc:	98 2c       	mov	r9, r8
    38fe:	79 01       	movw	r14, r18
    3900:	00 27       	eor	r16, r16
    3902:	f7 fc       	sbrc	r15, 7
    3904:	00 95       	com	r16
    3906:	10 2f       	mov	r17, r16
    3908:	c8 01       	movw	r24, r16
    390a:	b7 01       	movw	r22, r14
    390c:	66 0d       	add	r22, r6
    390e:	77 1d       	adc	r23, r7
    3910:	88 1d       	adc	r24, r8
    3912:	99 1d       	adc	r25, r9
    3914:	a6 01       	movw	r20, r12
    3916:	95 01       	movw	r18, r10
    3918:	0e 94 5f 28 	call	0x50be	; 0x50be <__mulsi3>
    391c:	e7 e0       	ldi	r30, 0x07	; 7
    391e:	95 95       	asr	r25
    3920:	87 95       	ror	r24
    3922:	77 95       	ror	r23
    3924:	67 95       	ror	r22
    3926:	ea 95       	dec	r30
    3928:	d1 f7       	brne	.-12     	; 0x391e <obstacleAvoidance+0x356>
    392a:	26 1b       	sub	r18, r22
    392c:	37 0b       	sbc	r19, r23
    392e:	48 0b       	sbc	r20, r24
    3930:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    3932:	f2 01       	movw	r30, r4
    3934:	31 83       	std	Z+1, r19	; 0x01
    3936:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    3938:	2d 81       	ldd	r18, Y+5	; 0x05
    393a:	3e 81       	ldd	r19, Y+6	; 0x06
    393c:	37 ff       	sbrs	r19, 7
    393e:	67 cf       	rjmp	.-306    	; 0x380e <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>7);
    3940:	2b 81       	ldd	r18, Y+3	; 0x03
    3942:	3c 81       	ldd	r19, Y+4	; 0x04
    3944:	59 01       	movw	r10, r18
    3946:	cc 24       	eor	r12, r12
    3948:	b7 fc       	sbrc	r11, 7
    394a:	c0 94       	com	r12
    394c:	dc 2c       	mov	r13, r12
    394e:	c4 01       	movw	r24, r8
    3950:	b3 01       	movw	r22, r6
    3952:	6e 19       	sub	r22, r14
    3954:	7f 09       	sbc	r23, r15
    3956:	80 0b       	sbc	r24, r16
    3958:	91 0b       	sbc	r25, r17
    395a:	a6 01       	movw	r20, r12
    395c:	95 01       	movw	r18, r10
    395e:	0e 94 5f 28 	call	0x50be	; 0x50be <__mulsi3>
    3962:	27 e0       	ldi	r18, 0x07	; 7
    3964:	95 95       	asr	r25
    3966:	87 95       	ror	r24
    3968:	77 95       	ror	r23
    396a:	67 95       	ror	r22
    396c:	2a 95       	dec	r18
    396e:	d1 f7       	brne	.-12     	; 0x3964 <obstacleAvoidance+0x39c>
    3970:	a6 1a       	sub	r10, r22
    3972:	b7 0a       	sbc	r11, r23
    3974:	c8 0a       	sbc	r12, r24
    3976:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    3978:	95 01       	movw	r18, r10
    397a:	e9 81       	ldd	r30, Y+1	; 0x01
    397c:	fa 81       	ldd	r31, Y+2	; 0x02
    397e:	b1 82       	std	Z+1, r11	; 0x01
    3980:	a0 82       	st	Z, r10
    3982:	64 cf       	rjmp	.-312    	; 0x384c <obstacleAvoidance+0x284>

00003984 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3984:	80 91 6f 03 	lds	r24, 0x036F
    3988:	90 91 70 03 	lds	r25, 0x0370
    398c:	21 e0       	ldi	r18, 0x01	; 1
    398e:	84 3a       	cpi	r24, 0xA4	; 164
    3990:	92 07       	cpc	r25, r18
    3992:	d4 f0       	brlt	.+52     	; 0x39c8 <cliffDetected+0x44>
    3994:	80 91 71 03 	lds	r24, 0x0371
    3998:	90 91 72 03 	lds	r25, 0x0372
    399c:	21 e0       	ldi	r18, 0x01	; 1
    399e:	84 3a       	cpi	r24, 0xA4	; 164
    39a0:	92 07       	cpc	r25, r18
    39a2:	94 f0       	brlt	.+36     	; 0x39c8 <cliffDetected+0x44>
    39a4:	80 91 73 03 	lds	r24, 0x0373
    39a8:	90 91 74 03 	lds	r25, 0x0374
    39ac:	21 e0       	ldi	r18, 0x01	; 1
    39ae:	84 3a       	cpi	r24, 0xA4	; 164
    39b0:	92 07       	cpc	r25, r18
    39b2:	74 f0       	brlt	.+28     	; 0x39d0 <cliffDetected+0x4c>
		return 1;
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	20 91 75 03 	lds	r18, 0x0375
    39ba:	30 91 76 03 	lds	r19, 0x0376
    39be:	91 e0       	ldi	r25, 0x01	; 1
    39c0:	24 3a       	cpi	r18, 0xA4	; 164
    39c2:	39 07       	cpc	r19, r25
    39c4:	1c f4       	brge	.+6      	; 0x39cc <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    39c6:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	08 95       	ret
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	08 95       	ret
    39d0:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    39d2:	08 95       	ret

000039d4 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	80 93 3b 05 	sts	0x053B, r24
}
    39da:	08 95       	ret

000039dc <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    39dc:	10 92 3b 05 	sts	0x053B, r1
}
    39e0:	08 95       	ret

000039e2 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	80 93 3c 05 	sts	0x053C, r24
}
    39e8:	08 95       	ret

000039ea <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    39ea:	10 92 3c 05 	sts	0x053C, r1
}
    39ee:	08 95       	ret

000039f0 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    39f0:	a0 e8       	ldi	r26, 0x80	; 128
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	1c 92       	st	X, r1
	TCCR1B = 0;
    39f6:	e1 e8       	ldi	r30, 0x81	; 129
    39f8:	f0 e0       	ldi	r31, 0x00	; 0
    39fa:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    39fc:	8c 91       	ld	r24, X
    39fe:	89 6a       	ori	r24, 0xA9	; 169
    3a00:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    3a02:	80 81       	ld	r24, Z
    3a04:	89 60       	ori	r24, 0x09	; 9
    3a06:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    3a08:	80 91 0c 02 	lds	r24, 0x020C
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	90 93 89 00 	sts	0x0089, r25
    3a12:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    3a16:	80 91 0d 02 	lds	r24, 0x020D
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	90 93 8b 00 	sts	0x008B, r25
    3a20:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    3a24:	80 91 0e 02 	lds	r24, 0x020E
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	90 93 8d 00 	sts	0x008D, r25
    3a2e:	80 93 8c 00 	sts	0x008C, r24

}
    3a32:	08 95       	ret

00003a34 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	90 91 07 04 	lds	r25, 0x0407
    3a3a:	89 1b       	sub	r24, r25
    3a3c:	80 93 07 04 	sts	0x0407, r24

	if(blinkState) {
    3a40:	88 23       	and	r24, r24
    3a42:	39 f4       	brne	.+14     	; 0x3a52 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    3a44:	80 91 80 00 	lds	r24, 0x0080
    3a48:	87 7f       	andi	r24, 0xF7	; 247
    3a4a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    3a4e:	2f 98       	cbi	0x05, 7	; 5
    3a50:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    3a52:	80 91 80 00 	lds	r24, 0x0080
    3a56:	88 60       	ori	r24, 0x08	; 8
    3a58:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    3a5c:	8f ef       	ldi	r24, 0xFF	; 255
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	90 93 8d 00 	sts	0x008D, r25
    3a64:	80 93 8c 00 	sts	0x008C, r24
    3a68:	08 95       	ret

00003a6a <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    3a6a:	88 23       	and	r24, r24
    3a6c:	59 f0       	breq	.+22     	; 0x3a84 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    3a6e:	90 91 80 00 	lds	r25, 0x0080
    3a72:	90 68       	ori	r25, 0x80	; 128
    3a74:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	90 93 89 00 	sts	0x0089, r25
    3a7e:	80 93 88 00 	sts	0x0088, r24
    3a82:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    3a84:	80 91 80 00 	lds	r24, 0x0080
    3a88:	8f 77       	andi	r24, 0x7F	; 127
    3a8a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    3a8e:	2d 98       	cbi	0x05, 5	; 5
    3a90:	08 95       	ret

00003a92 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    3a92:	88 23       	and	r24, r24
    3a94:	59 f0       	breq	.+22     	; 0x3aac <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    3a96:	90 91 80 00 	lds	r25, 0x0080
    3a9a:	90 62       	ori	r25, 0x20	; 32
    3a9c:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	90 93 8b 00 	sts	0x008B, r25
    3aa6:	80 93 8a 00 	sts	0x008A, r24
    3aaa:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    3aac:	80 91 80 00 	lds	r24, 0x0080
    3ab0:	8f 7d       	andi	r24, 0xDF	; 223
    3ab2:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    3ab6:	2e 98       	cbi	0x05, 6	; 5
    3ab8:	08 95       	ret

00003aba <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    3aba:	88 23       	and	r24, r24
    3abc:	59 f0       	breq	.+22     	; 0x3ad4 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    3abe:	90 91 80 00 	lds	r25, 0x0080
    3ac2:	98 60       	ori	r25, 0x08	; 8
    3ac4:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	90 93 8d 00 	sts	0x008D, r25
    3ace:	80 93 8c 00 	sts	0x008C, r24
    3ad2:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    3ad4:	80 91 80 00 	lds	r24, 0x0080
    3ad8:	87 7f       	andi	r24, 0xF7	; 247
    3ada:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    3ade:	2f 98       	cbi	0x05, 7	; 5
    3ae0:	08 95       	ret

00003ae2 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    3ae2:	83 30       	cpi	r24, 0x03	; 3
    3ae4:	09 f4       	brne	.+2      	; 0x3ae8 <setGreenLed+0x6>
    3ae6:	5a c0       	rjmp	.+180    	; 0x3b9c <setGreenLed+0xba>
    3ae8:	84 30       	cpi	r24, 0x04	; 4
    3aea:	80 f0       	brcs	.+32     	; 0x3b0c <setGreenLed+0x2a>
    3aec:	85 30       	cpi	r24, 0x05	; 5
    3aee:	09 f4       	brne	.+2      	; 0x3af2 <setGreenLed+0x10>
    3af0:	41 c0       	rjmp	.+130    	; 0x3b74 <setGreenLed+0x92>
    3af2:	85 30       	cpi	r24, 0x05	; 5
    3af4:	d0 f4       	brcc	.+52     	; 0x3b2a <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    3af6:	66 23       	and	r22, r22
    3af8:	09 f4       	brne	.+2      	; 0x3afc <setGreenLed+0x1a>
    3afa:	68 c0       	rjmp	.+208    	; 0x3bcc <setGreenLed+0xea>
    3afc:	80 91 0b 01 	lds	r24, 0x010B
    3b00:	8f 7e       	andi	r24, 0xEF	; 239
    3b02:	80 93 0b 01 	sts	0x010B, r24
    3b06:	80 91 0b 01 	lds	r24, 0x010B
    3b0a:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    3b0c:	81 30       	cpi	r24, 0x01	; 1
    3b0e:	e1 f1       	breq	.+120    	; 0x3b88 <setGreenLed+0xa6>
    3b10:	82 30       	cpi	r24, 0x02	; 2
    3b12:	80 f0       	brcs	.+32     	; 0x3b34 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    3b14:	66 23       	and	r22, r22
    3b16:	09 f4       	brne	.+2      	; 0x3b1a <setGreenLed+0x38>
    3b18:	46 c0       	rjmp	.+140    	; 0x3ba6 <setGreenLed+0xc4>
    3b1a:	80 91 0b 01 	lds	r24, 0x010B
    3b1e:	8b 7f       	andi	r24, 0xFB	; 251
    3b20:	80 93 0b 01 	sts	0x010B, r24
    3b24:	80 91 0b 01 	lds	r24, 0x010B
    3b28:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    3b2a:	86 30       	cpi	r24, 0x06	; 6
    3b2c:	c9 f0       	breq	.+50     	; 0x3b60 <setGreenLed+0x7e>
    3b2e:	87 30       	cpi	r24, 0x07	; 7
    3b30:	61 f0       	breq	.+24     	; 0x3b4a <setGreenLed+0x68>
    3b32:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    3b34:	66 23       	and	r22, r22
    3b36:	09 f4       	brne	.+2      	; 0x3b3a <setGreenLed+0x58>
    3b38:	51 c0       	rjmp	.+162    	; 0x3bdc <setGreenLed+0xfa>
    3b3a:	80 91 0b 01 	lds	r24, 0x010B
    3b3e:	8e 7f       	andi	r24, 0xFE	; 254
    3b40:	80 93 0b 01 	sts	0x010B, r24
    3b44:	80 91 0b 01 	lds	r24, 0x010B
    3b48:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    3b4a:	66 23       	and	r22, r22
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <setGreenLed+0x6e>
    3b4e:	5e c0       	rjmp	.+188    	; 0x3c0c <setGreenLed+0x12a>
    3b50:	80 91 0b 01 	lds	r24, 0x010B
    3b54:	80 68       	ori	r24, 0x80	; 128
    3b56:	80 93 0b 01 	sts	0x010B, r24
    3b5a:	80 91 0b 01 	lds	r24, 0x010B
    3b5e:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    3b60:	66 23       	and	r22, r22
    3b62:	49 f1       	breq	.+82     	; 0x3bb6 <setGreenLed+0xd4>
    3b64:	80 91 0b 01 	lds	r24, 0x010B
    3b68:	8f 7b       	andi	r24, 0xBF	; 191
    3b6a:	80 93 0b 01 	sts	0x010B, r24
    3b6e:	80 91 0b 01 	lds	r24, 0x010B
    3b72:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    3b74:	66 23       	and	r22, r22
    3b76:	d1 f1       	breq	.+116    	; 0x3bec <setGreenLed+0x10a>
    3b78:	80 91 0b 01 	lds	r24, 0x010B
    3b7c:	8f 7d       	andi	r24, 0xDF	; 223
    3b7e:	80 93 0b 01 	sts	0x010B, r24
    3b82:	80 91 0b 01 	lds	r24, 0x010B
    3b86:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    3b88:	66 23       	and	r22, r22
    3b8a:	c1 f1       	breq	.+112    	; 0x3bfc <setGreenLed+0x11a>
    3b8c:	80 91 0b 01 	lds	r24, 0x010B
    3b90:	8d 7f       	andi	r24, 0xFD	; 253
    3b92:	80 93 0b 01 	sts	0x010B, r24
    3b96:	80 91 0b 01 	lds	r24, 0x010B
    3b9a:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    3b9c:	66 23       	and	r22, r22
    3b9e:	99 f0       	breq	.+38     	; 0x3bc6 <setGreenLed+0xe4>
    3ba0:	a3 98       	cbi	0x14, 3	; 20
    3ba2:	84 b3       	in	r24, 0x14	; 20
    3ba4:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    3ba6:	80 91 0b 01 	lds	r24, 0x010B
    3baa:	84 60       	ori	r24, 0x04	; 4
    3bac:	80 93 0b 01 	sts	0x010B, r24
    3bb0:	80 91 0b 01 	lds	r24, 0x010B
    3bb4:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    3bb6:	80 91 0b 01 	lds	r24, 0x010B
    3bba:	80 64       	ori	r24, 0x40	; 64
    3bbc:	80 93 0b 01 	sts	0x010B, r24
    3bc0:	80 91 0b 01 	lds	r24, 0x010B
    3bc4:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    3bc6:	a3 9a       	sbi	0x14, 3	; 20
    3bc8:	84 b3       	in	r24, 0x14	; 20
    3bca:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    3bcc:	80 91 0b 01 	lds	r24, 0x010B
    3bd0:	80 61       	ori	r24, 0x10	; 16
    3bd2:	80 93 0b 01 	sts	0x010B, r24
    3bd6:	80 91 0b 01 	lds	r24, 0x010B
    3bda:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    3bdc:	80 91 0b 01 	lds	r24, 0x010B
    3be0:	81 60       	ori	r24, 0x01	; 1
    3be2:	80 93 0b 01 	sts	0x010B, r24
    3be6:	80 91 0b 01 	lds	r24, 0x010B
    3bea:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    3bec:	80 91 0b 01 	lds	r24, 0x010B
    3bf0:	80 62       	ori	r24, 0x20	; 32
    3bf2:	80 93 0b 01 	sts	0x010B, r24
    3bf6:	80 91 0b 01 	lds	r24, 0x010B
    3bfa:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    3bfc:	80 91 0b 01 	lds	r24, 0x010B
    3c00:	82 60       	ori	r24, 0x02	; 2
    3c02:	80 93 0b 01 	sts	0x010B, r24
    3c06:	80 91 0b 01 	lds	r24, 0x010B
    3c0a:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    3c0c:	80 91 0b 01 	lds	r24, 0x010B
    3c10:	8f 77       	andi	r24, 0x7F	; 127
    3c12:	80 93 0b 01 	sts	0x010B, r24
    3c16:	80 91 0b 01 	lds	r24, 0x010B
    3c1a:	08 95       	ret

00003c1c <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    3c1c:	eb e0       	ldi	r30, 0x0B	; 11
    3c1e:	f1 e0       	ldi	r31, 0x01	; 1
    3c20:	80 81       	ld	r24, Z
    3c22:	81 60       	ori	r24, 0x01	; 1
    3c24:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    3c26:	80 81       	ld	r24, Z
    3c28:	82 60       	ori	r24, 0x02	; 2
    3c2a:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    3c2c:	80 81       	ld	r24, Z
    3c2e:	84 60       	ori	r24, 0x04	; 4
    3c30:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    3c32:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    3c34:	80 81       	ld	r24, Z
    3c36:	80 61       	ori	r24, 0x10	; 16
    3c38:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    3c3a:	80 81       	ld	r24, Z
    3c3c:	80 62       	ori	r24, 0x20	; 32
    3c3e:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    3c40:	80 81       	ld	r24, Z
    3c42:	80 64       	ori	r24, 0x40	; 64
    3c44:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    3c46:	80 81       	ld	r24, Z
    3c48:	80 68       	ori	r24, 0x80	; 128
    3c4a:	80 83       	st	Z, r24

}
    3c4c:	08 95       	ret

00003c4e <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    3c4e:	eb e0       	ldi	r30, 0x0B	; 11
    3c50:	f1 e0       	ldi	r31, 0x01	; 1
    3c52:	80 81       	ld	r24, Z
    3c54:	8e 7f       	andi	r24, 0xFE	; 254
    3c56:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    3c58:	80 81       	ld	r24, Z
    3c5a:	8d 7f       	andi	r24, 0xFD	; 253
    3c5c:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    3c5e:	80 81       	ld	r24, Z
    3c60:	8b 7f       	andi	r24, 0xFB	; 251
    3c62:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    3c64:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    3c66:	80 81       	ld	r24, Z
    3c68:	8f 7e       	andi	r24, 0xEF	; 239
    3c6a:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    3c6c:	80 81       	ld	r24, Z
    3c6e:	8f 7d       	andi	r24, 0xDF	; 223
    3c70:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    3c72:	80 81       	ld	r24, Z
    3c74:	8f 7b       	andi	r24, 0xBF	; 191
    3c76:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    3c78:	80 81       	ld	r24, Z
    3c7a:	8f 77       	andi	r24, 0x7F	; 127
    3c7c:	80 83       	st	Z, r24

}
    3c7e:	08 95       	ret

00003c80 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    3c80:	0e 94 db 11 	call	0x23b6	; 0x23b6 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3c84:	80 91 14 02 	lds	r24, 0x0214
    3c88:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3c8c:	88 23       	and	r24, r24
    3c8e:	49 f4       	brne	.+18     	; 0x3ca2 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3c90:	86 e1       	ldi	r24, 0x16	; 22
    3c92:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    3c96:	85 e4       	ldi	r24, 0x45	; 69
    3c98:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3c9c:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>
    3ca0:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3ca2:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    3ca6:	86 ea       	ldi	r24, 0xA6	; 166
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	90 93 15 02 	sts	0x0215, r25
    3cae:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3cb2:	86 ea       	ldi	r24, 0xA6	; 166
    3cb4:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3cb8:	88 23       	and	r24, r24
    3cba:	41 f5       	brne	.+80     	; 0x3d0c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    3cbc:	8d e2       	ldi	r24, 0x2D	; 45
    3cbe:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_write(0x08);	// measurement mode
    3cc2:	88 e0       	ldi	r24, 0x08	; 8
    3cc4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3cc8:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3ccc:	80 91 14 02 	lds	r24, 0x0214
    3cd0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3cd4:	88 23       	and	r24, r24
    3cd6:	d1 f4       	brne	.+52     	; 0x3d0c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3cd8:	81 e3       	ldi	r24, 0x31	; 49
    3cda:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3ce4:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3ce8:	80 91 14 02 	lds	r24, 0x0214
    3cec:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3cf0:	88 23       	and	r24, r24
    3cf2:	61 f4       	brne	.+24     	; 0x3d0c <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    3cf4:	8c e2       	ldi	r24, 0x2C	; 44
    3cf6:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    3cfa:	89 e0       	ldi	r24, 0x09	; 9
    3cfc:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3d00:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	80 93 17 05 	sts	0x0517, r24
    3d0a:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3d0c:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    3d10:	82 e0       	ldi	r24, 0x02	; 2
    3d12:	80 93 17 05 	sts	0x0517, r24
    3d16:	08 95       	ret

00003d18 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3d18:	80 91 14 02 	lds	r24, 0x0214
    3d1c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3d20:	88 23       	and	r24, r24
    3d22:	51 f4       	brne	.+20     	; 0x3d38 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    3d24:	86 e1       	ldi	r24, 0x16	; 22
    3d26:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    3d2a:	85 e4       	ldi	r24, 0x45	; 69
    3d2c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3d30:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>
    }

	return 0;				// configuration ok
    3d34:	80 e0       	ldi	r24, 0x00	; 0

}
    3d36:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3d38:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>
		return 1;
    3d3c:	81 e0       	ldi	r24, 0x01	; 1
    3d3e:	08 95       	ret

00003d40 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3d40:	80 91 14 02 	lds	r24, 0x0214
    3d44:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3d48:	88 23       	and	r24, r24
    3d4a:	31 f5       	brne	.+76     	; 0x3d98 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    3d4c:	8d e2       	ldi	r24, 0x2D	; 45
    3d4e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_write(0x08);	// measurement mode
    3d52:	88 e0       	ldi	r24, 0x08	; 8
    3d54:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3d58:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3d5c:	80 91 14 02 	lds	r24, 0x0214
    3d60:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3d64:	88 23       	and	r24, r24
    3d66:	c1 f4       	brne	.+48     	; 0x3d98 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    3d68:	81 e3       	ldi	r24, 0x31	; 49
    3d6a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    3d6e:	80 e0       	ldi	r24, 0x00	; 0
    3d70:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3d74:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    3d78:	80 91 14 02 	lds	r24, 0x0214
    3d7c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    3d80:	88 23       	and	r24, r24
    3d82:	51 f4       	brne	.+20     	; 0x3d98 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    3d84:	8c e2       	ldi	r24, 0x2C	; 44
    3d86:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    3d8a:	89 e0       	ldi	r24, 0x09	; 9
    3d8c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    3d90:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>
    }

	return 0;
    3d94:	80 e0       	ldi	r24, 0x00	; 0

}
    3d96:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    3d98:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>
		return 1;
    3d9c:	81 e0       	ldi	r24, 0x01	; 1
    3d9e:	08 95       	ret

00003da0 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    3da0:	ff 92       	push	r15
    3da2:	0f 93       	push	r16
    3da4:	1f 93       	push	r17
    3da6:	df 93       	push	r29
    3da8:	cf 93       	push	r28
    3daa:	0f 92       	push	r0
    3dac:	cd b7       	in	r28, 0x3d	; 61
    3dae:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    3db0:	80 91 17 05 	lds	r24, 0x0517
    3db4:	88 23       	and	r24, r24
    3db6:	91 f0       	breq	.+36     	; 0x3ddc <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    3db8:	81 30       	cpi	r24, 0x01	; 1
    3dba:	09 f4       	brne	.+2      	; 0x3dbe <readAccelXY+0x1e>
    3dbc:	88 c0       	rjmp	.+272    	; 0x3ece <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    3dbe:	10 92 19 05 	sts	0x0519, r1
    3dc2:	10 92 18 05 	sts	0x0518, r1
		accY = 0;
    3dc6:	10 92 1b 05 	sts	0x051B, r1
    3dca:	10 92 1a 05 	sts	0x051A, r1

	}

}
    3dce:	0f 90       	pop	r0
    3dd0:	cf 91       	pop	r28
    3dd2:	df 91       	pop	r29
    3dd4:	1f 91       	pop	r17
    3dd6:	0f 91       	pop	r16
    3dd8:	ff 90       	pop	r15
    3dda:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3ddc:	80 91 14 02 	lds	r24, 0x0214
    3de0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3de4:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    3de6:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    3dea:	80 91 14 02 	lds	r24, 0x0214
    3dee:	8f 5f       	subi	r24, 0xFF	; 255
    3df0:	0e 94 30 12 	call	0x2460	; 0x2460 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3df4:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    3df8:	08 2f       	mov	r16, r24
    3dfa:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    3dfe:	f8 2e       	mov	r15, r24
    3e00:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    3e04:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3e06:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    3e0a:	89 83       	std	Y+1, r24	; 0x01
    3e0c:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    3e10:	90 91 6a 05 	lds	r25, 0x056A
    3e14:	89 81       	ldd	r24, Y+1	; 0x01
    3e16:	99 23       	and	r25, r25
    3e18:	39 f1       	breq	.+78     	; 0x3e68 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3e1a:	4f 2d       	mov	r20, r15
    3e1c:	55 27       	eor	r21, r21
    3e1e:	47 fd       	sbrc	r20, 7
    3e20:	50 95       	com	r21
    3e22:	54 2f       	mov	r21, r20
    3e24:	44 27       	eor	r20, r20
    3e26:	60 2f       	mov	r22, r16
    3e28:	77 27       	eor	r23, r23
    3e2a:	67 fd       	sbrc	r22, 7
    3e2c:	70 95       	com	r23
    3e2e:	46 2b       	or	r20, r22
    3e30:	57 2b       	or	r21, r23
    3e32:	50 93 19 05 	sts	0x0519, r21
    3e36:	40 93 18 05 	sts	0x0518, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3e3a:	28 2f       	mov	r18, r24
    3e3c:	33 27       	eor	r19, r19
    3e3e:	27 fd       	sbrc	r18, 7
    3e40:	30 95       	com	r19
    3e42:	32 2f       	mov	r19, r18
    3e44:	22 27       	eor	r18, r18
    3e46:	81 2f       	mov	r24, r17
    3e48:	99 27       	eor	r25, r25
    3e4a:	87 fd       	sbrc	r24, 7
    3e4c:	90 95       	com	r25
    3e4e:	28 2b       	or	r18, r24
    3e50:	39 2b       	or	r19, r25
    3e52:	30 93 1b 05 	sts	0x051B, r19
    3e56:	20 93 1a 05 	sts	0x051A, r18
		accX = 0;
		accY = 0;

	}

}
    3e5a:	0f 90       	pop	r0
    3e5c:	cf 91       	pop	r28
    3e5e:	df 91       	pop	r29
    3e60:	1f 91       	pop	r17
    3e62:	0f 91       	pop	r16
    3e64:	ff 90       	pop	r15
    3e66:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3e68:	4f 2d       	mov	r20, r15
    3e6a:	55 27       	eor	r21, r21
    3e6c:	47 fd       	sbrc	r20, 7
    3e6e:	50 95       	com	r21
    3e70:	54 2f       	mov	r21, r20
    3e72:	44 27       	eor	r20, r20
    3e74:	60 2f       	mov	r22, r16
    3e76:	77 27       	eor	r23, r23
    3e78:	67 fd       	sbrc	r22, 7
    3e7a:	70 95       	com	r23
    3e7c:	46 2b       	or	r20, r22
    3e7e:	57 2b       	or	r21, r23
    3e80:	60 91 1e 05 	lds	r22, 0x051E
    3e84:	70 91 1f 05 	lds	r23, 0x051F
    3e88:	46 1b       	sub	r20, r22
    3e8a:	57 0b       	sbc	r21, r23
    3e8c:	50 93 19 05 	sts	0x0519, r21
    3e90:	40 93 18 05 	sts	0x0518, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3e94:	28 2f       	mov	r18, r24
    3e96:	33 27       	eor	r19, r19
    3e98:	27 fd       	sbrc	r18, 7
    3e9a:	30 95       	com	r19
    3e9c:	32 2f       	mov	r19, r18
    3e9e:	22 27       	eor	r18, r18
    3ea0:	81 2f       	mov	r24, r17
    3ea2:	99 27       	eor	r25, r25
    3ea4:	87 fd       	sbrc	r24, 7
    3ea6:	90 95       	com	r25
    3ea8:	28 2b       	or	r18, r24
    3eaa:	39 2b       	or	r19, r25
    3eac:	80 91 20 05 	lds	r24, 0x0520
    3eb0:	90 91 21 05 	lds	r25, 0x0521
    3eb4:	28 1b       	sub	r18, r24
    3eb6:	39 0b       	sbc	r19, r25
    3eb8:	30 93 1b 05 	sts	0x051B, r19
    3ebc:	20 93 1a 05 	sts	0x051A, r18
		accX = 0;
		accY = 0;

	}

}
    3ec0:	0f 90       	pop	r0
    3ec2:	cf 91       	pop	r28
    3ec4:	df 91       	pop	r29
    3ec6:	1f 91       	pop	r17
    3ec8:	0f 91       	pop	r16
    3eca:	ff 90       	pop	r15
    3ecc:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3ece:	80 91 14 02 	lds	r24, 0x0214
    3ed2:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    3ed6:	82 e3       	ldi	r24, 0x32	; 50
    3ed8:	86 cf       	rjmp	.-244    	; 0x3de6 <readAccelXY+0x46>

00003eda <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    3eda:	df 93       	push	r29
    3edc:	cf 93       	push	r28
    3ede:	00 d0       	rcall	.+0      	; 0x3ee0 <readAccelXYZ+0x6>
    3ee0:	00 d0       	rcall	.+0      	; 0x3ee2 <readAccelXYZ+0x8>
    3ee2:	cd b7       	in	r28, 0x3d	; 61
    3ee4:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    3ee6:	80 91 17 05 	lds	r24, 0x0517
    3eea:	88 23       	and	r24, r24
    3eec:	c1 f0       	breq	.+48     	; 0x3f1e <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    3eee:	81 30       	cpi	r24, 0x01	; 1
    3ef0:	09 f4       	brne	.+2      	; 0x3ef4 <readAccelXYZ+0x1a>
    3ef2:	ad c0       	rjmp	.+346    	; 0x404e <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    3ef4:	10 92 19 05 	sts	0x0519, r1
    3ef8:	10 92 18 05 	sts	0x0518, r1
		accY = 0;
    3efc:	10 92 1b 05 	sts	0x051B, r1
    3f00:	10 92 1a 05 	sts	0x051A, r1
		accZ = 0;
    3f04:	10 92 1d 05 	sts	0x051D, r1
    3f08:	10 92 1c 05 	sts	0x051C, r1

	}

}
    3f0c:	26 96       	adiw	r28, 0x06	; 6
    3f0e:	0f b6       	in	r0, 0x3f	; 63
    3f10:	f8 94       	cli
    3f12:	de bf       	out	0x3e, r29	; 62
    3f14:	0f be       	out	0x3f, r0	; 63
    3f16:	cd bf       	out	0x3d, r28	; 61
    3f18:	cf 91       	pop	r28
    3f1a:	df 91       	pop	r29
    3f1c:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    3f1e:	80 91 14 02 	lds	r24, 0x0214
    3f22:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    3f26:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    3f28:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    3f2c:	80 91 14 02 	lds	r24, 0x0214
    3f30:	8f 5f       	subi	r24, 0xFF	; 255
    3f32:	0e 94 30 12 	call	0x2460	; 0x2460 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    3f36:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    3f3a:	89 83       	std	Y+1, r24	; 0x01
    3f3c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    3f40:	8a 83       	std	Y+2, r24	; 0x02
    3f42:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    3f46:	8b 83       	std	Y+3, r24	; 0x03
    3f48:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    3f4c:	8c 83       	std	Y+4, r24	; 0x04
    3f4e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    3f52:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    3f54:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <i2c_readNak>
    3f58:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    3f5a:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    3f5e:	80 91 6a 05 	lds	r24, 0x056A
    3f62:	88 23       	and	r24, r24
    3f64:	89 f1       	breq	.+98     	; 0x3fc8 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    3f66:	8a 81       	ldd	r24, Y+2	; 0x02
    3f68:	99 27       	eor	r25, r25
    3f6a:	87 fd       	sbrc	r24, 7
    3f6c:	90 95       	com	r25
    3f6e:	98 2f       	mov	r25, r24
    3f70:	88 27       	eor	r24, r24
    3f72:	29 81       	ldd	r18, Y+1	; 0x01
    3f74:	33 27       	eor	r19, r19
    3f76:	27 fd       	sbrc	r18, 7
    3f78:	30 95       	com	r19
    3f7a:	82 2b       	or	r24, r18
    3f7c:	93 2b       	or	r25, r19
    3f7e:	90 93 19 05 	sts	0x0519, r25
    3f82:	80 93 18 05 	sts	0x0518, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    3f86:	8c 81       	ldd	r24, Y+4	; 0x04
    3f88:	99 27       	eor	r25, r25
    3f8a:	87 fd       	sbrc	r24, 7
    3f8c:	90 95       	com	r25
    3f8e:	98 2f       	mov	r25, r24
    3f90:	88 27       	eor	r24, r24
    3f92:	2b 81       	ldd	r18, Y+3	; 0x03
    3f94:	33 27       	eor	r19, r19
    3f96:	27 fd       	sbrc	r18, 7
    3f98:	30 95       	com	r19
    3f9a:	82 2b       	or	r24, r18
    3f9c:	93 2b       	or	r25, r19
    3f9e:	90 93 1b 05 	sts	0x051B, r25
    3fa2:	80 93 1a 05 	sts	0x051A, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    3fa6:	8e 81       	ldd	r24, Y+6	; 0x06
    3fa8:	99 27       	eor	r25, r25
    3faa:	87 fd       	sbrc	r24, 7
    3fac:	90 95       	com	r25
    3fae:	98 2f       	mov	r25, r24
    3fb0:	88 27       	eor	r24, r24
    3fb2:	2d 81       	ldd	r18, Y+5	; 0x05
    3fb4:	33 27       	eor	r19, r19
    3fb6:	27 fd       	sbrc	r18, 7
    3fb8:	30 95       	com	r19
    3fba:	82 2b       	or	r24, r18
    3fbc:	93 2b       	or	r25, r19
    3fbe:	90 93 1d 05 	sts	0x051D, r25
    3fc2:	80 93 1c 05 	sts	0x051C, r24
    3fc6:	a2 cf       	rjmp	.-188    	; 0x3f0c <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    3fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fca:	99 27       	eor	r25, r25
    3fcc:	87 fd       	sbrc	r24, 7
    3fce:	90 95       	com	r25
    3fd0:	98 2f       	mov	r25, r24
    3fd2:	88 27       	eor	r24, r24
    3fd4:	29 81       	ldd	r18, Y+1	; 0x01
    3fd6:	33 27       	eor	r19, r19
    3fd8:	27 fd       	sbrc	r18, 7
    3fda:	30 95       	com	r19
    3fdc:	82 2b       	or	r24, r18
    3fde:	93 2b       	or	r25, r19
    3fe0:	20 91 1e 05 	lds	r18, 0x051E
    3fe4:	30 91 1f 05 	lds	r19, 0x051F
    3fe8:	82 1b       	sub	r24, r18
    3fea:	93 0b       	sbc	r25, r19
    3fec:	90 93 19 05 	sts	0x0519, r25
    3ff0:	80 93 18 05 	sts	0x0518, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    3ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ff6:	99 27       	eor	r25, r25
    3ff8:	87 fd       	sbrc	r24, 7
    3ffa:	90 95       	com	r25
    3ffc:	98 2f       	mov	r25, r24
    3ffe:	88 27       	eor	r24, r24
    4000:	2b 81       	ldd	r18, Y+3	; 0x03
    4002:	33 27       	eor	r19, r19
    4004:	27 fd       	sbrc	r18, 7
    4006:	30 95       	com	r19
    4008:	82 2b       	or	r24, r18
    400a:	93 2b       	or	r25, r19
    400c:	20 91 20 05 	lds	r18, 0x0520
    4010:	30 91 21 05 	lds	r19, 0x0521
    4014:	82 1b       	sub	r24, r18
    4016:	93 0b       	sbc	r25, r19
    4018:	90 93 1b 05 	sts	0x051B, r25
    401c:	80 93 1a 05 	sts	0x051A, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    4020:	8e 81       	ldd	r24, Y+6	; 0x06
    4022:	99 27       	eor	r25, r25
    4024:	87 fd       	sbrc	r24, 7
    4026:	90 95       	com	r25
    4028:	98 2f       	mov	r25, r24
    402a:	88 27       	eor	r24, r24
    402c:	2d 81       	ldd	r18, Y+5	; 0x05
    402e:	33 27       	eor	r19, r19
    4030:	27 fd       	sbrc	r18, 7
    4032:	30 95       	com	r19
    4034:	82 2b       	or	r24, r18
    4036:	93 2b       	or	r25, r19
    4038:	20 91 22 05 	lds	r18, 0x0522
    403c:	30 91 23 05 	lds	r19, 0x0523
    4040:	82 1b       	sub	r24, r18
    4042:	93 0b       	sbc	r25, r19
    4044:	90 93 1d 05 	sts	0x051D, r25
    4048:	80 93 1c 05 	sts	0x051C, r24
    404c:	5f cf       	rjmp	.-322    	; 0x3f0c <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    404e:	80 91 14 02 	lds	r24, 0x0214
    4052:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    4056:	82 e3       	ldi	r24, 0x32	; 50
    4058:	67 cf       	rjmp	.-306    	; 0x3f28 <readAccelXYZ+0x4e>

0000405a <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    405a:	cf 93       	push	r28
    405c:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    405e:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    4062:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    4066:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <updateRedLed>
	updateGreenLed(pwm_green);
    4070:	80 91 0d 02 	lds	r24, 0x020D
    4074:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <updateGreenLed>
	updateBlueLed(pwm_blue);
    4078:	80 91 0e 02 	lds	r24, 0x020E
    407c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <updateBlueLed>

	calibrationCycle = 0;
    4080:	10 92 39 05 	sts	0x0539, r1
    4084:	10 92 38 05 	sts	0x0538, r1
	startCalibration = 1;
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	80 93 6a 05 	sts	0x056A, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    408e:	c1 e0       	ldi	r28, 0x01	; 1
    4090:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    4092:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    4096:	20 91 38 05 	lds	r18, 0x0538
    409a:	30 91 39 05 	lds	r19, 0x0539
    409e:	21 31       	cpi	r18, 0x11	; 17
    40a0:	31 05       	cpc	r19, r1
    40a2:	0c f4       	brge	.+2      	; 0x40a6 <calibrateSensors+0x4c>
    40a4:	35 c1       	rjmp	.+618    	; 0x4310 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    40a6:	80 91 8f 03 	lds	r24, 0x038F
    40aa:	90 91 90 03 	lds	r25, 0x0390
    40ae:	a0 91 91 03 	lds	r26, 0x0391
    40b2:	b0 91 92 03 	lds	r27, 0x0392
    40b6:	54 e0       	ldi	r21, 0x04	; 4
    40b8:	b6 95       	lsr	r27
    40ba:	a7 95       	ror	r26
    40bc:	97 95       	ror	r25
    40be:	87 95       	ror	r24
    40c0:	5a 95       	dec	r21
    40c2:	d1 f7       	brne	.-12     	; 0x40b8 <calibrateSensors+0x5e>
    40c4:	90 93 78 03 	sts	0x0378, r25
    40c8:	80 93 77 03 	sts	0x0377, r24
    40cc:	80 91 93 03 	lds	r24, 0x0393
    40d0:	90 91 94 03 	lds	r25, 0x0394
    40d4:	a0 91 95 03 	lds	r26, 0x0395
    40d8:	b0 91 96 03 	lds	r27, 0x0396
    40dc:	44 e0       	ldi	r20, 0x04	; 4
    40de:	b6 95       	lsr	r27
    40e0:	a7 95       	ror	r26
    40e2:	97 95       	ror	r25
    40e4:	87 95       	ror	r24
    40e6:	4a 95       	dec	r20
    40e8:	d1 f7       	brne	.-12     	; 0x40de <calibrateSensors+0x84>
    40ea:	90 93 7a 03 	sts	0x037A, r25
    40ee:	80 93 79 03 	sts	0x0379, r24
    40f2:	80 91 97 03 	lds	r24, 0x0397
    40f6:	90 91 98 03 	lds	r25, 0x0398
    40fa:	a0 91 99 03 	lds	r26, 0x0399
    40fe:	b0 91 9a 03 	lds	r27, 0x039A
    4102:	34 e0       	ldi	r19, 0x04	; 4
    4104:	b6 95       	lsr	r27
    4106:	a7 95       	ror	r26
    4108:	97 95       	ror	r25
    410a:	87 95       	ror	r24
    410c:	3a 95       	dec	r19
    410e:	d1 f7       	brne	.-12     	; 0x4104 <calibrateSensors+0xaa>
    4110:	90 93 7c 03 	sts	0x037C, r25
    4114:	80 93 7b 03 	sts	0x037B, r24
    4118:	80 91 9b 03 	lds	r24, 0x039B
    411c:	90 91 9c 03 	lds	r25, 0x039C
    4120:	a0 91 9d 03 	lds	r26, 0x039D
    4124:	b0 91 9e 03 	lds	r27, 0x039E
    4128:	24 e0       	ldi	r18, 0x04	; 4
    412a:	b6 95       	lsr	r27
    412c:	a7 95       	ror	r26
    412e:	97 95       	ror	r25
    4130:	87 95       	ror	r24
    4132:	2a 95       	dec	r18
    4134:	d1 f7       	brne	.-12     	; 0x412a <calibrateSensors+0xd0>
    4136:	90 93 7e 03 	sts	0x037E, r25
    413a:	80 93 7d 03 	sts	0x037D, r24
    413e:	80 91 9f 03 	lds	r24, 0x039F
    4142:	90 91 a0 03 	lds	r25, 0x03A0
    4146:	a0 91 a1 03 	lds	r26, 0x03A1
    414a:	b0 91 a2 03 	lds	r27, 0x03A2
    414e:	f4 e0       	ldi	r31, 0x04	; 4
    4150:	b6 95       	lsr	r27
    4152:	a7 95       	ror	r26
    4154:	97 95       	ror	r25
    4156:	87 95       	ror	r24
    4158:	fa 95       	dec	r31
    415a:	d1 f7       	brne	.-12     	; 0x4150 <calibrateSensors+0xf6>
    415c:	90 93 80 03 	sts	0x0380, r25
    4160:	80 93 7f 03 	sts	0x037F, r24
    4164:	80 91 a3 03 	lds	r24, 0x03A3
    4168:	90 91 a4 03 	lds	r25, 0x03A4
    416c:	a0 91 a5 03 	lds	r26, 0x03A5
    4170:	b0 91 a6 03 	lds	r27, 0x03A6
    4174:	e4 e0       	ldi	r30, 0x04	; 4
    4176:	b6 95       	lsr	r27
    4178:	a7 95       	ror	r26
    417a:	97 95       	ror	r25
    417c:	87 95       	ror	r24
    417e:	ea 95       	dec	r30
    4180:	d1 f7       	brne	.-12     	; 0x4176 <calibrateSensors+0x11c>
    4182:	90 93 82 03 	sts	0x0382, r25
    4186:	80 93 81 03 	sts	0x0381, r24
    418a:	80 91 a7 03 	lds	r24, 0x03A7
    418e:	90 91 a8 03 	lds	r25, 0x03A8
    4192:	a0 91 a9 03 	lds	r26, 0x03A9
    4196:	b0 91 aa 03 	lds	r27, 0x03AA
    419a:	74 e0       	ldi	r23, 0x04	; 4
    419c:	b6 95       	lsr	r27
    419e:	a7 95       	ror	r26
    41a0:	97 95       	ror	r25
    41a2:	87 95       	ror	r24
    41a4:	7a 95       	dec	r23
    41a6:	d1 f7       	brne	.-12     	; 0x419c <calibrateSensors+0x142>
    41a8:	90 93 84 03 	sts	0x0384, r25
    41ac:	80 93 83 03 	sts	0x0383, r24
    41b0:	80 91 ab 03 	lds	r24, 0x03AB
    41b4:	90 91 ac 03 	lds	r25, 0x03AC
    41b8:	a0 91 ad 03 	lds	r26, 0x03AD
    41bc:	b0 91 ae 03 	lds	r27, 0x03AE
    41c0:	64 e0       	ldi	r22, 0x04	; 4
    41c2:	b6 95       	lsr	r27
    41c4:	a7 95       	ror	r26
    41c6:	97 95       	ror	r25
    41c8:	87 95       	ror	r24
    41ca:	6a 95       	dec	r22
    41cc:	d1 f7       	brne	.-12     	; 0x41c2 <calibrateSensors+0x168>
    41ce:	90 93 86 03 	sts	0x0386, r25
    41d2:	80 93 85 03 	sts	0x0385, r24
    41d6:	80 91 b3 03 	lds	r24, 0x03B3
    41da:	90 91 b4 03 	lds	r25, 0x03B4
    41de:	a0 91 b5 03 	lds	r26, 0x03B5
    41e2:	b0 91 b6 03 	lds	r27, 0x03B6
    41e6:	54 e0       	ldi	r21, 0x04	; 4
    41e8:	b6 95       	lsr	r27
    41ea:	a7 95       	ror	r26
    41ec:	97 95       	ror	r25
    41ee:	87 95       	ror	r24
    41f0:	5a 95       	dec	r21
    41f2:	d1 f7       	brne	.-12     	; 0x41e8 <calibrateSensors+0x18e>
    41f4:	9c 01       	movw	r18, r24
    41f6:	80 91 b7 03 	lds	r24, 0x03B7
    41fa:	90 91 b8 03 	lds	r25, 0x03B8
    41fe:	a0 91 b9 03 	lds	r26, 0x03B9
    4202:	b0 91 ba 03 	lds	r27, 0x03BA
    4206:	44 e0       	ldi	r20, 0x04	; 4
    4208:	b6 95       	lsr	r27
    420a:	a7 95       	ror	r26
    420c:	97 95       	ror	r25
    420e:	87 95       	ror	r24
    4210:	4a 95       	dec	r20
    4212:	d1 f7       	brne	.-12     	; 0x4208 <calibrateSensors+0x1ae>
    4214:	bc 01       	movw	r22, r24
    4216:	80 91 bb 03 	lds	r24, 0x03BB
    421a:	90 91 bc 03 	lds	r25, 0x03BC
    421e:	a0 91 bd 03 	lds	r26, 0x03BD
    4222:	b0 91 be 03 	lds	r27, 0x03BE
    4226:	f4 e0       	ldi	r31, 0x04	; 4
    4228:	b6 95       	lsr	r27
    422a:	a7 95       	ror	r26
    422c:	97 95       	ror	r25
    422e:	87 95       	ror	r24
    4230:	fa 95       	dec	r31
    4232:	d1 f7       	brne	.-12     	; 0x4228 <calibrateSensors+0x1ce>
    4234:	ac 01       	movw	r20, r24
    4236:	80 91 af 03 	lds	r24, 0x03AF
    423a:	90 91 b0 03 	lds	r25, 0x03B0
    423e:	a0 91 b1 03 	lds	r26, 0x03B1
    4242:	b0 91 b2 03 	lds	r27, 0x03B2
    4246:	e4 e0       	ldi	r30, 0x04	; 4
    4248:	b6 95       	lsr	r27
    424a:	a7 95       	ror	r26
    424c:	97 95       	ror	r25
    424e:	87 95       	ror	r24
    4250:	ea 95       	dec	r30
    4252:	d1 f7       	brne	.-12     	; 0x4248 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    4254:	80 50       	subi	r24, 0x00	; 0
    4256:	92 40       	sbci	r25, 0x02	; 2
    4258:	90 93 88 03 	sts	0x0388, r25
    425c:	80 93 87 03 	sts	0x0387, r24
    4260:	20 50       	subi	r18, 0x00	; 0
    4262:	32 40       	sbci	r19, 0x02	; 2
    4264:	30 93 8a 03 	sts	0x038A, r19
    4268:	20 93 89 03 	sts	0x0389, r18
    426c:	60 50       	subi	r22, 0x00	; 0
    426e:	72 40       	sbci	r23, 0x02	; 2
    4270:	70 93 8c 03 	sts	0x038C, r23
    4274:	60 93 8b 03 	sts	0x038B, r22
    4278:	40 50       	subi	r20, 0x00	; 0
    427a:	52 40       	sbci	r21, 0x02	; 2
    427c:	50 93 8e 03 	sts	0x038E, r21
    4280:	40 93 8d 03 	sts	0x038D, r20
			}

			accOffsetX = accOffsetXSum>>4;
    4284:	80 91 24 05 	lds	r24, 0x0524
    4288:	90 91 25 05 	lds	r25, 0x0525
    428c:	95 95       	asr	r25
    428e:	87 95       	ror	r24
    4290:	95 95       	asr	r25
    4292:	87 95       	ror	r24
    4294:	95 95       	asr	r25
    4296:	87 95       	ror	r24
    4298:	95 95       	asr	r25
    429a:	87 95       	ror	r24
    429c:	90 93 1f 05 	sts	0x051F, r25
    42a0:	80 93 1e 05 	sts	0x051E, r24
			accOffsetY = accOffsetYSum>>4;
    42a4:	80 91 26 05 	lds	r24, 0x0526
    42a8:	90 91 27 05 	lds	r25, 0x0527
    42ac:	95 95       	asr	r25
    42ae:	87 95       	ror	r24
    42b0:	95 95       	asr	r25
    42b2:	87 95       	ror	r24
    42b4:	95 95       	asr	r25
    42b6:	87 95       	ror	r24
    42b8:	95 95       	asr	r25
    42ba:	87 95       	ror	r24
    42bc:	90 93 21 05 	sts	0x0521, r25
    42c0:	80 93 20 05 	sts	0x0520, r24
			accOffsetZ = accOffsetZSum>>4;
    42c4:	80 91 28 05 	lds	r24, 0x0528
    42c8:	90 91 29 05 	lds	r25, 0x0529
    42cc:	95 95       	asr	r25
    42ce:	87 95       	ror	r24
    42d0:	95 95       	asr	r25
    42d2:	87 95       	ror	r24
    42d4:	95 95       	asr	r25
    42d6:	87 95       	ror	r24
    42d8:	95 95       	asr	r25
    42da:	87 95       	ror	r24
    42dc:	90 93 23 05 	sts	0x0523, r25
    42e0:	80 93 22 05 	sts	0x0522, r24

			startCalibration = 0;
    42e4:	10 92 6a 05 	sts	0x056A, r1

		}

	}

	pwm_red = 255;
    42e8:	8f ef       	ldi	r24, 0xFF	; 255
    42ea:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    42ee:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    42f2:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    42f6:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <updateRedLed>
	updateGreenLed(pwm_green);
    42fa:	80 91 0d 02 	lds	r24, 0x020D
    42fe:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <updateGreenLed>
	updateBlueLed(pwm_blue);
    4302:	80 91 0e 02 	lds	r24, 0x020E
    4306:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <updateBlueLed>

}
    430a:	df 91       	pop	r29
    430c:	cf 91       	pop	r28
    430e:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    4310:	80 91 c6 03 	lds	r24, 0x03C6
    4314:	88 23       	and	r24, r24
    4316:	09 f4       	brne	.+2      	; 0x431a <calibrateSensors+0x2c0>
    4318:	86 c1       	rjmp	.+780    	; 0x4626 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    431a:	10 92 c6 03 	sts	0x03C6, r1

				if(calibrationCycle==0) {		// reset all variables
    431e:	21 15       	cp	r18, r1
    4320:	31 05       	cpc	r19, r1
    4322:	09 f4       	brne	.+2      	; 0x4326 <calibrateSensors+0x2cc>
    4324:	86 c1       	rjmp	.+780    	; 0x4632 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    4326:	80 91 5f 03 	lds	r24, 0x035F
    432a:	90 91 60 03 	lds	r25, 0x0360
    432e:	aa 27       	eor	r26, r26
    4330:	97 fd       	sbrc	r25, 7
    4332:	a0 95       	com	r26
    4334:	ba 2f       	mov	r27, r26
    4336:	40 91 8f 03 	lds	r20, 0x038F
    433a:	50 91 90 03 	lds	r21, 0x0390
    433e:	60 91 91 03 	lds	r22, 0x0391
    4342:	70 91 92 03 	lds	r23, 0x0392
    4346:	84 0f       	add	r24, r20
    4348:	95 1f       	adc	r25, r21
    434a:	a6 1f       	adc	r26, r22
    434c:	b7 1f       	adc	r27, r23
    434e:	80 93 8f 03 	sts	0x038F, r24
    4352:	90 93 90 03 	sts	0x0390, r25
    4356:	a0 93 91 03 	sts	0x0391, r26
    435a:	b0 93 92 03 	sts	0x0392, r27
    435e:	80 91 61 03 	lds	r24, 0x0361
    4362:	90 91 62 03 	lds	r25, 0x0362
    4366:	aa 27       	eor	r26, r26
    4368:	97 fd       	sbrc	r25, 7
    436a:	a0 95       	com	r26
    436c:	ba 2f       	mov	r27, r26
    436e:	40 91 93 03 	lds	r20, 0x0393
    4372:	50 91 94 03 	lds	r21, 0x0394
    4376:	60 91 95 03 	lds	r22, 0x0395
    437a:	70 91 96 03 	lds	r23, 0x0396
    437e:	84 0f       	add	r24, r20
    4380:	95 1f       	adc	r25, r21
    4382:	a6 1f       	adc	r26, r22
    4384:	b7 1f       	adc	r27, r23
    4386:	80 93 93 03 	sts	0x0393, r24
    438a:	90 93 94 03 	sts	0x0394, r25
    438e:	a0 93 95 03 	sts	0x0395, r26
    4392:	b0 93 96 03 	sts	0x0396, r27
    4396:	80 91 63 03 	lds	r24, 0x0363
    439a:	90 91 64 03 	lds	r25, 0x0364
    439e:	aa 27       	eor	r26, r26
    43a0:	97 fd       	sbrc	r25, 7
    43a2:	a0 95       	com	r26
    43a4:	ba 2f       	mov	r27, r26
    43a6:	40 91 97 03 	lds	r20, 0x0397
    43aa:	50 91 98 03 	lds	r21, 0x0398
    43ae:	60 91 99 03 	lds	r22, 0x0399
    43b2:	70 91 9a 03 	lds	r23, 0x039A
    43b6:	84 0f       	add	r24, r20
    43b8:	95 1f       	adc	r25, r21
    43ba:	a6 1f       	adc	r26, r22
    43bc:	b7 1f       	adc	r27, r23
    43be:	80 93 97 03 	sts	0x0397, r24
    43c2:	90 93 98 03 	sts	0x0398, r25
    43c6:	a0 93 99 03 	sts	0x0399, r26
    43ca:	b0 93 9a 03 	sts	0x039A, r27
    43ce:	80 91 65 03 	lds	r24, 0x0365
    43d2:	90 91 66 03 	lds	r25, 0x0366
    43d6:	aa 27       	eor	r26, r26
    43d8:	97 fd       	sbrc	r25, 7
    43da:	a0 95       	com	r26
    43dc:	ba 2f       	mov	r27, r26
    43de:	40 91 9b 03 	lds	r20, 0x039B
    43e2:	50 91 9c 03 	lds	r21, 0x039C
    43e6:	60 91 9d 03 	lds	r22, 0x039D
    43ea:	70 91 9e 03 	lds	r23, 0x039E
    43ee:	84 0f       	add	r24, r20
    43f0:	95 1f       	adc	r25, r21
    43f2:	a6 1f       	adc	r26, r22
    43f4:	b7 1f       	adc	r27, r23
    43f6:	80 93 9b 03 	sts	0x039B, r24
    43fa:	90 93 9c 03 	sts	0x039C, r25
    43fe:	a0 93 9d 03 	sts	0x039D, r26
    4402:	b0 93 9e 03 	sts	0x039E, r27
    4406:	80 91 67 03 	lds	r24, 0x0367
    440a:	90 91 68 03 	lds	r25, 0x0368
    440e:	aa 27       	eor	r26, r26
    4410:	97 fd       	sbrc	r25, 7
    4412:	a0 95       	com	r26
    4414:	ba 2f       	mov	r27, r26
    4416:	40 91 9f 03 	lds	r20, 0x039F
    441a:	50 91 a0 03 	lds	r21, 0x03A0
    441e:	60 91 a1 03 	lds	r22, 0x03A1
    4422:	70 91 a2 03 	lds	r23, 0x03A2
    4426:	84 0f       	add	r24, r20
    4428:	95 1f       	adc	r25, r21
    442a:	a6 1f       	adc	r26, r22
    442c:	b7 1f       	adc	r27, r23
    442e:	80 93 9f 03 	sts	0x039F, r24
    4432:	90 93 a0 03 	sts	0x03A0, r25
    4436:	a0 93 a1 03 	sts	0x03A1, r26
    443a:	b0 93 a2 03 	sts	0x03A2, r27
    443e:	80 91 69 03 	lds	r24, 0x0369
    4442:	90 91 6a 03 	lds	r25, 0x036A
    4446:	aa 27       	eor	r26, r26
    4448:	97 fd       	sbrc	r25, 7
    444a:	a0 95       	com	r26
    444c:	ba 2f       	mov	r27, r26
    444e:	40 91 a3 03 	lds	r20, 0x03A3
    4452:	50 91 a4 03 	lds	r21, 0x03A4
    4456:	60 91 a5 03 	lds	r22, 0x03A5
    445a:	70 91 a6 03 	lds	r23, 0x03A6
    445e:	84 0f       	add	r24, r20
    4460:	95 1f       	adc	r25, r21
    4462:	a6 1f       	adc	r26, r22
    4464:	b7 1f       	adc	r27, r23
    4466:	80 93 a3 03 	sts	0x03A3, r24
    446a:	90 93 a4 03 	sts	0x03A4, r25
    446e:	a0 93 a5 03 	sts	0x03A5, r26
    4472:	b0 93 a6 03 	sts	0x03A6, r27
    4476:	80 91 6b 03 	lds	r24, 0x036B
    447a:	90 91 6c 03 	lds	r25, 0x036C
    447e:	aa 27       	eor	r26, r26
    4480:	97 fd       	sbrc	r25, 7
    4482:	a0 95       	com	r26
    4484:	ba 2f       	mov	r27, r26
    4486:	40 91 a7 03 	lds	r20, 0x03A7
    448a:	50 91 a8 03 	lds	r21, 0x03A8
    448e:	60 91 a9 03 	lds	r22, 0x03A9
    4492:	70 91 aa 03 	lds	r23, 0x03AA
    4496:	84 0f       	add	r24, r20
    4498:	95 1f       	adc	r25, r21
    449a:	a6 1f       	adc	r26, r22
    449c:	b7 1f       	adc	r27, r23
    449e:	80 93 a7 03 	sts	0x03A7, r24
    44a2:	90 93 a8 03 	sts	0x03A8, r25
    44a6:	a0 93 a9 03 	sts	0x03A9, r26
    44aa:	b0 93 aa 03 	sts	0x03AA, r27
    44ae:	80 91 6d 03 	lds	r24, 0x036D
    44b2:	90 91 6e 03 	lds	r25, 0x036E
    44b6:	aa 27       	eor	r26, r26
    44b8:	97 fd       	sbrc	r25, 7
    44ba:	a0 95       	com	r26
    44bc:	ba 2f       	mov	r27, r26
    44be:	40 91 ab 03 	lds	r20, 0x03AB
    44c2:	50 91 ac 03 	lds	r21, 0x03AC
    44c6:	60 91 ad 03 	lds	r22, 0x03AD
    44ca:	70 91 ae 03 	lds	r23, 0x03AE
    44ce:	84 0f       	add	r24, r20
    44d0:	95 1f       	adc	r25, r21
    44d2:	a6 1f       	adc	r26, r22
    44d4:	b7 1f       	adc	r27, r23
    44d6:	80 93 ab 03 	sts	0x03AB, r24
    44da:	90 93 ac 03 	sts	0x03AC, r25
    44de:	a0 93 ad 03 	sts	0x03AD, r26
    44e2:	b0 93 ae 03 	sts	0x03AE, r27
    44e6:	80 91 6f 03 	lds	r24, 0x036F
    44ea:	90 91 70 03 	lds	r25, 0x0370
    44ee:	aa 27       	eor	r26, r26
    44f0:	97 fd       	sbrc	r25, 7
    44f2:	a0 95       	com	r26
    44f4:	ba 2f       	mov	r27, r26
    44f6:	40 91 af 03 	lds	r20, 0x03AF
    44fa:	50 91 b0 03 	lds	r21, 0x03B0
    44fe:	60 91 b1 03 	lds	r22, 0x03B1
    4502:	70 91 b2 03 	lds	r23, 0x03B2
    4506:	84 0f       	add	r24, r20
    4508:	95 1f       	adc	r25, r21
    450a:	a6 1f       	adc	r26, r22
    450c:	b7 1f       	adc	r27, r23
    450e:	80 93 af 03 	sts	0x03AF, r24
    4512:	90 93 b0 03 	sts	0x03B0, r25
    4516:	a0 93 b1 03 	sts	0x03B1, r26
    451a:	b0 93 b2 03 	sts	0x03B2, r27
    451e:	80 91 71 03 	lds	r24, 0x0371
    4522:	90 91 72 03 	lds	r25, 0x0372
    4526:	aa 27       	eor	r26, r26
    4528:	97 fd       	sbrc	r25, 7
    452a:	a0 95       	com	r26
    452c:	ba 2f       	mov	r27, r26
    452e:	40 91 b3 03 	lds	r20, 0x03B3
    4532:	50 91 b4 03 	lds	r21, 0x03B4
    4536:	60 91 b5 03 	lds	r22, 0x03B5
    453a:	70 91 b6 03 	lds	r23, 0x03B6
    453e:	84 0f       	add	r24, r20
    4540:	95 1f       	adc	r25, r21
    4542:	a6 1f       	adc	r26, r22
    4544:	b7 1f       	adc	r27, r23
    4546:	80 93 b3 03 	sts	0x03B3, r24
    454a:	90 93 b4 03 	sts	0x03B4, r25
    454e:	a0 93 b5 03 	sts	0x03B5, r26
    4552:	b0 93 b6 03 	sts	0x03B6, r27
    4556:	80 91 73 03 	lds	r24, 0x0373
    455a:	90 91 74 03 	lds	r25, 0x0374
    455e:	aa 27       	eor	r26, r26
    4560:	97 fd       	sbrc	r25, 7
    4562:	a0 95       	com	r26
    4564:	ba 2f       	mov	r27, r26
    4566:	40 91 b7 03 	lds	r20, 0x03B7
    456a:	50 91 b8 03 	lds	r21, 0x03B8
    456e:	60 91 b9 03 	lds	r22, 0x03B9
    4572:	70 91 ba 03 	lds	r23, 0x03BA
    4576:	84 0f       	add	r24, r20
    4578:	95 1f       	adc	r25, r21
    457a:	a6 1f       	adc	r26, r22
    457c:	b7 1f       	adc	r27, r23
    457e:	80 93 b7 03 	sts	0x03B7, r24
    4582:	90 93 b8 03 	sts	0x03B8, r25
    4586:	a0 93 b9 03 	sts	0x03B9, r26
    458a:	b0 93 ba 03 	sts	0x03BA, r27
    458e:	80 91 75 03 	lds	r24, 0x0375
    4592:	90 91 76 03 	lds	r25, 0x0376
    4596:	aa 27       	eor	r26, r26
    4598:	97 fd       	sbrc	r25, 7
    459a:	a0 95       	com	r26
    459c:	ba 2f       	mov	r27, r26
    459e:	40 91 bb 03 	lds	r20, 0x03BB
    45a2:	50 91 bc 03 	lds	r21, 0x03BC
    45a6:	60 91 bd 03 	lds	r22, 0x03BD
    45aa:	70 91 be 03 	lds	r23, 0x03BE
    45ae:	84 0f       	add	r24, r20
    45b0:	95 1f       	adc	r25, r21
    45b2:	a6 1f       	adc	r26, r22
    45b4:	b7 1f       	adc	r27, r23
    45b6:	80 93 bb 03 	sts	0x03BB, r24
    45ba:	90 93 bc 03 	sts	0x03BC, r25
    45be:	a0 93 bd 03 	sts	0x03BD, r26
    45c2:	b0 93 be 03 	sts	0x03BE, r27
				}

				accOffsetXSum += accX;
    45c6:	80 91 24 05 	lds	r24, 0x0524
    45ca:	90 91 25 05 	lds	r25, 0x0525
    45ce:	40 91 18 05 	lds	r20, 0x0518
    45d2:	50 91 19 05 	lds	r21, 0x0519
    45d6:	84 0f       	add	r24, r20
    45d8:	95 1f       	adc	r25, r21
    45da:	90 93 25 05 	sts	0x0525, r25
    45de:	80 93 24 05 	sts	0x0524, r24
				accOffsetYSum += accY;
    45e2:	80 91 26 05 	lds	r24, 0x0526
    45e6:	90 91 27 05 	lds	r25, 0x0527
    45ea:	40 91 1a 05 	lds	r20, 0x051A
    45ee:	50 91 1b 05 	lds	r21, 0x051B
    45f2:	84 0f       	add	r24, r20
    45f4:	95 1f       	adc	r25, r21
    45f6:	90 93 27 05 	sts	0x0527, r25
    45fa:	80 93 26 05 	sts	0x0526, r24
				accOffsetZSum += accZ;
    45fe:	80 91 28 05 	lds	r24, 0x0528
    4602:	90 91 29 05 	lds	r25, 0x0529
    4606:	40 91 1c 05 	lds	r20, 0x051C
    460a:	50 91 1d 05 	lds	r21, 0x051D
    460e:	84 0f       	add	r24, r20
    4610:	95 1f       	adc	r25, r21
    4612:	90 93 29 05 	sts	0x0529, r25
    4616:	80 93 28 05 	sts	0x0528, r24

				calibrationCycle++;
    461a:	2f 5f       	subi	r18, 0xFF	; 255
    461c:	3f 4f       	sbci	r19, 0xFF	; 255
    461e:	30 93 39 05 	sts	0x0539, r19
    4622:	20 93 38 05 	sts	0x0538, r18
    4626:	80 91 6a 05 	lds	r24, 0x056A
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    462a:	88 23       	and	r24, r24
    462c:	09 f0       	breq	.+2      	; 0x4630 <calibrateSensors+0x5d6>
    462e:	31 cd       	rjmp	.-1438   	; 0x4092 <calibrateSensors+0x38>
    4630:	5b ce       	rjmp	.-842    	; 0x42e8 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4632:	10 92 8f 03 	sts	0x038F, r1
    4636:	10 92 90 03 	sts	0x0390, r1
    463a:	10 92 91 03 	sts	0x0391, r1
    463e:	10 92 92 03 	sts	0x0392, r1
						proximityOffset[i] = 0;
    4642:	10 92 78 03 	sts	0x0378, r1
    4646:	10 92 77 03 	sts	0x0377, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    464a:	10 92 93 03 	sts	0x0393, r1
    464e:	10 92 94 03 	sts	0x0394, r1
    4652:	10 92 95 03 	sts	0x0395, r1
    4656:	10 92 96 03 	sts	0x0396, r1
						proximityOffset[i] = 0;
    465a:	10 92 7a 03 	sts	0x037A, r1
    465e:	10 92 79 03 	sts	0x0379, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4662:	10 92 97 03 	sts	0x0397, r1
    4666:	10 92 98 03 	sts	0x0398, r1
    466a:	10 92 99 03 	sts	0x0399, r1
    466e:	10 92 9a 03 	sts	0x039A, r1
						proximityOffset[i] = 0;
    4672:	10 92 7c 03 	sts	0x037C, r1
    4676:	10 92 7b 03 	sts	0x037B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    467a:	10 92 9b 03 	sts	0x039B, r1
    467e:	10 92 9c 03 	sts	0x039C, r1
    4682:	10 92 9d 03 	sts	0x039D, r1
    4686:	10 92 9e 03 	sts	0x039E, r1
						proximityOffset[i] = 0;
    468a:	10 92 7e 03 	sts	0x037E, r1
    468e:	10 92 7d 03 	sts	0x037D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4692:	10 92 9f 03 	sts	0x039F, r1
    4696:	10 92 a0 03 	sts	0x03A0, r1
    469a:	10 92 a1 03 	sts	0x03A1, r1
    469e:	10 92 a2 03 	sts	0x03A2, r1
						proximityOffset[i] = 0;
    46a2:	10 92 80 03 	sts	0x0380, r1
    46a6:	10 92 7f 03 	sts	0x037F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    46aa:	10 92 a3 03 	sts	0x03A3, r1
    46ae:	10 92 a4 03 	sts	0x03A4, r1
    46b2:	10 92 a5 03 	sts	0x03A5, r1
    46b6:	10 92 a6 03 	sts	0x03A6, r1
						proximityOffset[i] = 0;
    46ba:	10 92 82 03 	sts	0x0382, r1
    46be:	10 92 81 03 	sts	0x0381, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    46c2:	10 92 a7 03 	sts	0x03A7, r1
    46c6:	10 92 a8 03 	sts	0x03A8, r1
    46ca:	10 92 a9 03 	sts	0x03A9, r1
    46ce:	10 92 aa 03 	sts	0x03AA, r1
						proximityOffset[i] = 0;
    46d2:	10 92 84 03 	sts	0x0384, r1
    46d6:	10 92 83 03 	sts	0x0383, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    46da:	10 92 ab 03 	sts	0x03AB, r1
    46de:	10 92 ac 03 	sts	0x03AC, r1
    46e2:	10 92 ad 03 	sts	0x03AD, r1
    46e6:	10 92 ae 03 	sts	0x03AE, r1
						proximityOffset[i] = 0;
    46ea:	10 92 86 03 	sts	0x0386, r1
    46ee:	10 92 85 03 	sts	0x0385, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    46f2:	10 92 af 03 	sts	0x03AF, r1
    46f6:	10 92 b0 03 	sts	0x03B0, r1
    46fa:	10 92 b1 03 	sts	0x03B1, r1
    46fe:	10 92 b2 03 	sts	0x03B2, r1
						proximityOffset[i] = 0;
    4702:	10 92 88 03 	sts	0x0388, r1
    4706:	10 92 87 03 	sts	0x0387, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    470a:	10 92 b3 03 	sts	0x03B3, r1
    470e:	10 92 b4 03 	sts	0x03B4, r1
    4712:	10 92 b5 03 	sts	0x03B5, r1
    4716:	10 92 b6 03 	sts	0x03B6, r1
						proximityOffset[i] = 0;
    471a:	10 92 8a 03 	sts	0x038A, r1
    471e:	10 92 89 03 	sts	0x0389, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    4722:	10 92 b7 03 	sts	0x03B7, r1
    4726:	10 92 b8 03 	sts	0x03B8, r1
    472a:	10 92 b9 03 	sts	0x03B9, r1
    472e:	10 92 ba 03 	sts	0x03BA, r1
						proximityOffset[i] = 0;
    4732:	10 92 8c 03 	sts	0x038C, r1
    4736:	10 92 8b 03 	sts	0x038B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    473a:	10 92 bb 03 	sts	0x03BB, r1
    473e:	10 92 bc 03 	sts	0x03BC, r1
    4742:	10 92 bd 03 	sts	0x03BD, r1
    4746:	10 92 be 03 	sts	0x03BE, r1
						proximityOffset[i] = 0;
    474a:	10 92 8e 03 	sts	0x038E, r1
    474e:	10 92 8d 03 	sts	0x038D, r1
					}
					accOffsetXSum = 0;
    4752:	10 92 25 05 	sts	0x0525, r1
    4756:	10 92 24 05 	sts	0x0524, r1
					accOffsetYSum = 0;
    475a:	10 92 27 05 	sts	0x0527, r1
    475e:	10 92 26 05 	sts	0x0526, r1
					accOffsetZSum = 0;
    4762:	10 92 29 05 	sts	0x0529, r1
    4766:	10 92 28 05 	sts	0x0528, r1

					calibrationCycle++;
    476a:	d0 93 39 05 	sts	0x0539, r29
    476e:	c0 93 38 05 	sts	0x0538, r28
    4772:	80 91 6a 05 	lds	r24, 0x056A

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    4776:	59 cf       	rjmp	.-334    	; 0x462a <calibrateSensors+0x5d0>

00004778 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    4778:	80 91 17 05 	lds	r24, 0x0517
    477c:	88 23       	and	r24, r24
    477e:	79 f0       	breq	.+30     	; 0x479e <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    4780:	81 30       	cpi	r24, 0x01	; 1
    4782:	11 f1       	breq	.+68     	; 0x47c8 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    4784:	10 92 19 05 	sts	0x0519, r1
    4788:	10 92 18 05 	sts	0x0518, r1
		accY = 0;
    478c:	10 92 1b 05 	sts	0x051B, r1
    4790:	10 92 1a 05 	sts	0x051A, r1
		accZ = 0;
    4794:	10 92 1d 05 	sts	0x051D, r1
    4798:	10 92 1c 05 	sts	0x051C, r1
    479c:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    479e:	80 91 14 02 	lds	r24, 0x0214
    47a2:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    47a6:	80 e0       	ldi	r24, 0x00	; 0
    47a8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    47ac:	80 91 14 02 	lds	r24, 0x0214
    47b0:	8f 5f       	subi	r24, 0xFF	; 255
    47b2:	0e 94 30 12 	call	0x2460	; 0x2460 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    47b6:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    47ba:	80 93 2d 05 	sts	0x052D, r24
    47be:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    47c2:	80 93 2e 05 	sts	0x052E, r24
    47c6:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    47c8:	80 91 14 02 	lds	r24, 0x0214
    47cc:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    47d0:	82 e3       	ldi	r24, 0x32	; 50
    47d2:	0e 94 5e 12 	call	0x24bc	; 0x24bc <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    47d6:	80 91 14 02 	lds	r24, 0x0214
    47da:	8f 5f       	subi	r24, 0xFF	; 255
    47dc:	0e 94 30 12 	call	0x2460	; 0x2460 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    47e0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    47e4:	80 93 2d 05 	sts	0x052D, r24
    47e8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    47ec:	80 93 2e 05 	sts	0x052E, r24
    47f0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    47f4:	80 93 2f 05 	sts	0x052F, r24
    47f8:	08 95       	ret

000047fa <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    47fa:	80 91 17 05 	lds	r24, 0x0517
    47fe:	88 23       	and	r24, r24
    4800:	09 f0       	breq	.+2      	; 0x4804 <readAccelXYZ_2+0xa>
    4802:	4e c0       	rjmp	.+156    	; 0x48a0 <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    4804:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    4808:	80 93 2f 05 	sts	0x052F, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    480c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    4810:	80 93 30 05 	sts	0x0530, r24
    4814:	0e 94 70 12 	call	0x24e0	; 0x24e0 <i2c_readAck>
    4818:	80 93 31 05 	sts	0x0531, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    481c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <i2c_readNak>
    4820:	80 93 32 05 	sts	0x0532, r24
		i2c_stop();													// set stop conditon = release bus
    4824:	0e 94 56 12 	call	0x24ac	; 0x24ac <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    4828:	80 91 6a 05 	lds	r24, 0x056A
    482c:	88 23       	and	r24, r24
    482e:	09 f4       	brne	.+2      	; 0x4832 <readAccelXYZ_2+0x38>
    4830:	47 c0       	rjmp	.+142    	; 0x48c0 <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    4832:	80 91 2e 05 	lds	r24, 0x052E
    4836:	99 27       	eor	r25, r25
    4838:	87 fd       	sbrc	r24, 7
    483a:	90 95       	com	r25
    483c:	98 2f       	mov	r25, r24
    483e:	88 27       	eor	r24, r24
    4840:	20 91 2d 05 	lds	r18, 0x052D
    4844:	33 27       	eor	r19, r19
    4846:	27 fd       	sbrc	r18, 7
    4848:	30 95       	com	r19
    484a:	82 2b       	or	r24, r18
    484c:	93 2b       	or	r25, r19
    484e:	90 93 19 05 	sts	0x0519, r25
    4852:	80 93 18 05 	sts	0x0518, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    4856:	80 91 30 05 	lds	r24, 0x0530
    485a:	99 27       	eor	r25, r25
    485c:	87 fd       	sbrc	r24, 7
    485e:	90 95       	com	r25
    4860:	98 2f       	mov	r25, r24
    4862:	88 27       	eor	r24, r24
    4864:	20 91 2f 05 	lds	r18, 0x052F
    4868:	33 27       	eor	r19, r19
    486a:	27 fd       	sbrc	r18, 7
    486c:	30 95       	com	r19
    486e:	82 2b       	or	r24, r18
    4870:	93 2b       	or	r25, r19
    4872:	90 93 1b 05 	sts	0x051B, r25
    4876:	80 93 1a 05 	sts	0x051A, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    487a:	80 91 32 05 	lds	r24, 0x0532
    487e:	99 27       	eor	r25, r25
    4880:	87 fd       	sbrc	r24, 7
    4882:	90 95       	com	r25
    4884:	98 2f       	mov	r25, r24
    4886:	88 27       	eor	r24, r24
    4888:	20 91 31 05 	lds	r18, 0x0531
    488c:	33 27       	eor	r19, r19
    488e:	27 fd       	sbrc	r18, 7
    4890:	30 95       	com	r19
    4892:	82 2b       	or	r24, r18
    4894:	93 2b       	or	r25, r19
    4896:	90 93 1d 05 	sts	0x051D, r25
    489a:	80 93 1c 05 	sts	0x051C, r24
    489e:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    48a0:	81 30       	cpi	r24, 0x01	; 1
    48a2:	09 f4       	brne	.+2      	; 0x48a6 <readAccelXYZ_2+0xac>
    48a4:	b3 cf       	rjmp	.-154    	; 0x480c <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    48a6:	10 92 19 05 	sts	0x0519, r1
    48aa:	10 92 18 05 	sts	0x0518, r1
		accY = 0;
    48ae:	10 92 1b 05 	sts	0x051B, r1
    48b2:	10 92 1a 05 	sts	0x051A, r1
		accZ = 0;
    48b6:	10 92 1d 05 	sts	0x051D, r1
    48ba:	10 92 1c 05 	sts	0x051C, r1
    48be:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    48c0:	80 91 2e 05 	lds	r24, 0x052E
    48c4:	99 27       	eor	r25, r25
    48c6:	87 fd       	sbrc	r24, 7
    48c8:	90 95       	com	r25
    48ca:	98 2f       	mov	r25, r24
    48cc:	88 27       	eor	r24, r24
    48ce:	20 91 2d 05 	lds	r18, 0x052D
    48d2:	33 27       	eor	r19, r19
    48d4:	27 fd       	sbrc	r18, 7
    48d6:	30 95       	com	r19
    48d8:	82 2b       	or	r24, r18
    48da:	93 2b       	or	r25, r19
    48dc:	20 91 1e 05 	lds	r18, 0x051E
    48e0:	30 91 1f 05 	lds	r19, 0x051F
    48e4:	82 1b       	sub	r24, r18
    48e6:	93 0b       	sbc	r25, r19
    48e8:	90 93 19 05 	sts	0x0519, r25
    48ec:	80 93 18 05 	sts	0x0518, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    48f0:	80 91 30 05 	lds	r24, 0x0530
    48f4:	99 27       	eor	r25, r25
    48f6:	87 fd       	sbrc	r24, 7
    48f8:	90 95       	com	r25
    48fa:	98 2f       	mov	r25, r24
    48fc:	88 27       	eor	r24, r24
    48fe:	20 91 2f 05 	lds	r18, 0x052F
    4902:	33 27       	eor	r19, r19
    4904:	27 fd       	sbrc	r18, 7
    4906:	30 95       	com	r19
    4908:	82 2b       	or	r24, r18
    490a:	93 2b       	or	r25, r19
    490c:	20 91 20 05 	lds	r18, 0x0520
    4910:	30 91 21 05 	lds	r19, 0x0521
    4914:	82 1b       	sub	r24, r18
    4916:	93 0b       	sbc	r25, r19
    4918:	90 93 1b 05 	sts	0x051B, r25
    491c:	80 93 1a 05 	sts	0x051A, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    4920:	80 91 32 05 	lds	r24, 0x0532
    4924:	99 27       	eor	r25, r25
    4926:	87 fd       	sbrc	r24, 7
    4928:	90 95       	com	r25
    492a:	98 2f       	mov	r25, r24
    492c:	88 27       	eor	r24, r24
    492e:	20 91 31 05 	lds	r18, 0x0531
    4932:	33 27       	eor	r19, r19
    4934:	27 fd       	sbrc	r18, 7
    4936:	30 95       	com	r19
    4938:	82 2b       	or	r24, r18
    493a:	93 2b       	or	r25, r19
    493c:	20 91 22 05 	lds	r18, 0x0522
    4940:	30 91 23 05 	lds	r19, 0x0523
    4944:	82 1b       	sub	r24, r18
    4946:	93 0b       	sbc	r25, r19
    4948:	90 93 1d 05 	sts	0x051D, r25
    494c:	80 93 1c 05 	sts	0x051C, r24
    4950:	08 95       	ret

00004952 <computeAngle>:

	}

}

void computeAngle() {
    4952:	ef 92       	push	r14
    4954:	ff 92       	push	r15
    4956:	0f 93       	push	r16
    4958:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    495a:	80 91 1c 05 	lds	r24, 0x051C
    495e:	90 91 1d 05 	lds	r25, 0x051D
    4962:	97 fd       	sbrc	r25, 7
    4964:	5b c0       	rjmp	.+182    	; 0x4a1c <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    4966:	80 31       	cpi	r24, 0x10	; 16
    4968:	91 05       	cpc	r25, r1
    496a:	08 f0       	brcs	.+2      	; 0x496e <computeAngle+0x1c>
    496c:	42 c0       	rjmp	.+132    	; 0x49f2 <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    496e:	81 e0       	ldi	r24, 0x01	; 1
    4970:	80 93 16 02 	sts	0x0216, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    4974:	90 91 15 02 	lds	r25, 0x0215
    4978:	98 17       	cp	r25, r24
    497a:	09 f4       	brne	.+2      	; 0x497e <computeAngle+0x2c>
    497c:	42 c0       	rjmp	.+132    	; 0x4a02 <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    497e:	10 92 2c 05 	sts	0x052C, r1
	}
	prevPosition = currPosition;
    4982:	80 93 15 02 	sts	0x0215, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2((float)accX, (float)accY)*RAD_2_DEG);
    4986:	60 91 18 05 	lds	r22, 0x0518
    498a:	70 91 19 05 	lds	r23, 0x0519
    498e:	88 27       	eor	r24, r24
    4990:	77 fd       	sbrc	r23, 7
    4992:	80 95       	com	r24
    4994:	98 2f       	mov	r25, r24
    4996:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__floatsisf>
    499a:	7b 01       	movw	r14, r22
    499c:	8c 01       	movw	r16, r24
    499e:	60 91 1a 05 	lds	r22, 0x051A
    49a2:	70 91 1b 05 	lds	r23, 0x051B
    49a6:	88 27       	eor	r24, r24
    49a8:	77 fd       	sbrc	r23, 7
    49aa:	80 95       	com	r24
    49ac:	98 2f       	mov	r25, r24
    49ae:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__floatsisf>
    49b2:	9b 01       	movw	r18, r22
    49b4:	ac 01       	movw	r20, r24
    49b6:	c8 01       	movw	r24, r16
    49b8:	b7 01       	movw	r22, r14
    49ba:	0e 94 49 29 	call	0x5292	; 0x5292 <atan2>
    49be:	21 ee       	ldi	r18, 0xE1	; 225
    49c0:	3e e2       	ldi	r19, 0x2E	; 46
    49c2:	45 e6       	ldi	r20, 0x65	; 101
    49c4:	52 e4       	ldi	r21, 0x42	; 66
    49c6:	0e 94 12 25 	call	0x4a24	; 0x4a24 <__mulsf3>
    49ca:	0e 94 6f 26 	call	0x4cde	; 0x4cde <__fixsfsi>
    49ce:	9b 01       	movw	r18, r22
    49d0:	70 93 2b 05 	sts	0x052B, r23
    49d4:	60 93 2a 05 	sts	0x052A, r22

	if(currentAngle < 0) {
    49d8:	77 ff       	sbrs	r23, 7
    49da:	06 c0       	rjmp	.+12     	; 0x49e8 <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    49dc:	28 59       	subi	r18, 0x98	; 152
    49de:	3e 4f       	sbci	r19, 0xFE	; 254
    49e0:	30 93 2b 05 	sts	0x052B, r19
    49e4:	20 93 2a 05 	sts	0x052A, r18
	}

}
    49e8:	1f 91       	pop	r17
    49ea:	0f 91       	pop	r16
    49ec:	ff 90       	pop	r15
    49ee:	ef 90       	pop	r14
    49f0:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    49f2:	10 92 16 02 	sts	0x0216, r1
    49f6:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    49f8:	90 91 15 02 	lds	r25, 0x0215
    49fc:	98 17       	cp	r25, r24
    49fe:	09 f0       	breq	.+2      	; 0x4a02 <computeAngle+0xb0>
    4a00:	be cf       	rjmp	.-132    	; 0x497e <computeAngle+0x2c>
		timesInSamePos++;
    4a02:	90 91 2c 05 	lds	r25, 0x052C
    4a06:	9f 5f       	subi	r25, 0xFF	; 255
    4a08:	90 93 2c 05 	sts	0x052C, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    4a0c:	95 30       	cpi	r25, 0x05	; 5
    4a0e:	08 f4       	brcc	.+2      	; 0x4a12 <computeAngle+0xc0>
    4a10:	b8 cf       	rjmp	.-144    	; 0x4982 <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    4a12:	10 92 2c 05 	sts	0x052C, r1
			robotPosition = currPosition;
    4a16:	80 93 17 02 	sts	0x0217, r24
    4a1a:	b3 cf       	rjmp	.-154    	; 0x4982 <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    4a1c:	90 95       	com	r25
    4a1e:	81 95       	neg	r24
    4a20:	9f 4f       	sbci	r25, 0xFF	; 255
    4a22:	a1 cf       	rjmp	.-190    	; 0x4966 <computeAngle+0x14>

00004a24 <__mulsf3>:
    4a24:	a0 e2       	ldi	r26, 0x20	; 32
    4a26:	b0 e0       	ldi	r27, 0x00	; 0
    4a28:	e8 e1       	ldi	r30, 0x18	; 24
    4a2a:	f5 e2       	ldi	r31, 0x25	; 37
    4a2c:	0c 94 a7 28 	jmp	0x514e	; 0x514e <__prologue_saves__+0x4>
    4a30:	69 83       	std	Y+1, r22	; 0x01
    4a32:	7a 83       	std	Y+2, r23	; 0x02
    4a34:	8b 83       	std	Y+3, r24	; 0x03
    4a36:	9c 83       	std	Y+4, r25	; 0x04
    4a38:	2d 83       	std	Y+5, r18	; 0x05
    4a3a:	3e 83       	std	Y+6, r19	; 0x06
    4a3c:	4f 83       	std	Y+7, r20	; 0x07
    4a3e:	58 87       	std	Y+8, r21	; 0x08
    4a40:	99 e0       	ldi	r25, 0x09	; 9
    4a42:	e9 2e       	mov	r14, r25
    4a44:	f1 2c       	mov	r15, r1
    4a46:	ec 0e       	add	r14, r28
    4a48:	fd 1e       	adc	r15, r29
    4a4a:	b7 01       	movw	r22, r14
    4a4c:	ce 01       	movw	r24, r28
    4a4e:	01 96       	adiw	r24, 0x01	; 1
    4a50:	0e 94 ef 27 	call	0x4fde	; 0x4fde <__unpack_f>
    4a54:	8e 01       	movw	r16, r28
    4a56:	0f 5e       	subi	r16, 0xEF	; 239
    4a58:	1f 4f       	sbci	r17, 0xFF	; 255
    4a5a:	b8 01       	movw	r22, r16
    4a5c:	ce 01       	movw	r24, r28
    4a5e:	05 96       	adiw	r24, 0x05	; 5
    4a60:	0e 94 ef 27 	call	0x4fde	; 0x4fde <__unpack_f>
    4a64:	99 85       	ldd	r25, Y+9	; 0x09
    4a66:	92 30       	cpi	r25, 0x02	; 2
    4a68:	88 f0       	brcs	.+34     	; 0x4a8c <__mulsf3+0x68>
    4a6a:	89 89       	ldd	r24, Y+17	; 0x11
    4a6c:	82 30       	cpi	r24, 0x02	; 2
    4a6e:	c0 f0       	brcs	.+48     	; 0x4aa0 <__mulsf3+0x7c>
    4a70:	94 30       	cpi	r25, 0x04	; 4
    4a72:	19 f4       	brne	.+6      	; 0x4a7a <__mulsf3+0x56>
    4a74:	82 30       	cpi	r24, 0x02	; 2
    4a76:	29 f0       	breq	.+10     	; 0x4a82 <__mulsf3+0x5e>
    4a78:	09 c0       	rjmp	.+18     	; 0x4a8c <__mulsf3+0x68>
    4a7a:	84 30       	cpi	r24, 0x04	; 4
    4a7c:	29 f4       	brne	.+10     	; 0x4a88 <__mulsf3+0x64>
    4a7e:	92 30       	cpi	r25, 0x02	; 2
    4a80:	79 f4       	brne	.+30     	; 0x4aa0 <__mulsf3+0x7c>
    4a82:	68 e1       	ldi	r22, 0x18	; 24
    4a84:	72 e0       	ldi	r23, 0x02	; 2
    4a86:	c6 c0       	rjmp	.+396    	; 0x4c14 <__mulsf3+0x1f0>
    4a88:	92 30       	cpi	r25, 0x02	; 2
    4a8a:	41 f4       	brne	.+16     	; 0x4a9c <__mulsf3+0x78>
    4a8c:	20 e0       	ldi	r18, 0x00	; 0
    4a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a90:	8a 89       	ldd	r24, Y+18	; 0x12
    4a92:	98 13       	cpse	r25, r24
    4a94:	21 e0       	ldi	r18, 0x01	; 1
    4a96:	2a 87       	std	Y+10, r18	; 0x0a
    4a98:	b7 01       	movw	r22, r14
    4a9a:	bc c0       	rjmp	.+376    	; 0x4c14 <__mulsf3+0x1f0>
    4a9c:	82 30       	cpi	r24, 0x02	; 2
    4a9e:	41 f4       	brne	.+16     	; 0x4ab0 <__mulsf3+0x8c>
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aa4:	8a 89       	ldd	r24, Y+18	; 0x12
    4aa6:	98 13       	cpse	r25, r24
    4aa8:	21 e0       	ldi	r18, 0x01	; 1
    4aaa:	2a 8b       	std	Y+18, r18	; 0x12
    4aac:	b8 01       	movw	r22, r16
    4aae:	b2 c0       	rjmp	.+356    	; 0x4c14 <__mulsf3+0x1f0>
    4ab0:	cd 84       	ldd	r12, Y+13	; 0x0d
    4ab2:	de 84       	ldd	r13, Y+14	; 0x0e
    4ab4:	ef 84       	ldd	r14, Y+15	; 0x0f
    4ab6:	f8 88       	ldd	r15, Y+16	; 0x10
    4ab8:	0d 89       	ldd	r16, Y+21	; 0x15
    4aba:	1e 89       	ldd	r17, Y+22	; 0x16
    4abc:	2f 89       	ldd	r18, Y+23	; 0x17
    4abe:	38 8d       	ldd	r19, Y+24	; 0x18
    4ac0:	88 24       	eor	r8, r8
    4ac2:	99 24       	eor	r9, r9
    4ac4:	54 01       	movw	r10, r8
    4ac6:	40 e0       	ldi	r20, 0x00	; 0
    4ac8:	50 e0       	ldi	r21, 0x00	; 0
    4aca:	60 e0       	ldi	r22, 0x00	; 0
    4acc:	70 e0       	ldi	r23, 0x00	; 0
    4ace:	44 24       	eor	r4, r4
    4ad0:	55 24       	eor	r5, r5
    4ad2:	32 01       	movw	r6, r4
    4ad4:	e0 e0       	ldi	r30, 0x00	; 0
    4ad6:	f0 e0       	ldi	r31, 0x00	; 0
    4ad8:	c6 01       	movw	r24, r12
    4ada:	81 70       	andi	r24, 0x01	; 1
    4adc:	90 70       	andi	r25, 0x00	; 0
    4ade:	89 2b       	or	r24, r25
    4ae0:	d9 f0       	breq	.+54     	; 0x4b18 <__mulsf3+0xf4>
    4ae2:	80 0e       	add	r8, r16
    4ae4:	91 1e       	adc	r9, r17
    4ae6:	a2 1e       	adc	r10, r18
    4ae8:	b3 1e       	adc	r11, r19
    4aea:	db 01       	movw	r26, r22
    4aec:	ca 01       	movw	r24, r20
    4aee:	84 0d       	add	r24, r4
    4af0:	95 1d       	adc	r25, r5
    4af2:	a6 1d       	adc	r26, r6
    4af4:	b7 1d       	adc	r27, r7
    4af6:	40 e0       	ldi	r20, 0x00	; 0
    4af8:	50 e0       	ldi	r21, 0x00	; 0
    4afa:	60 e0       	ldi	r22, 0x00	; 0
    4afc:	70 e0       	ldi	r23, 0x00	; 0
    4afe:	80 16       	cp	r8, r16
    4b00:	91 06       	cpc	r9, r17
    4b02:	a2 06       	cpc	r10, r18
    4b04:	b3 06       	cpc	r11, r19
    4b06:	20 f4       	brcc	.+8      	; 0x4b10 <__mulsf3+0xec>
    4b08:	41 e0       	ldi	r20, 0x01	; 1
    4b0a:	50 e0       	ldi	r21, 0x00	; 0
    4b0c:	60 e0       	ldi	r22, 0x00	; 0
    4b0e:	70 e0       	ldi	r23, 0x00	; 0
    4b10:	48 0f       	add	r20, r24
    4b12:	59 1f       	adc	r21, r25
    4b14:	6a 1f       	adc	r22, r26
    4b16:	7b 1f       	adc	r23, r27
    4b18:	44 0c       	add	r4, r4
    4b1a:	55 1c       	adc	r5, r5
    4b1c:	66 1c       	adc	r6, r6
    4b1e:	77 1c       	adc	r7, r7
    4b20:	37 ff       	sbrs	r19, 7
    4b22:	08 c0       	rjmp	.+16     	; 0x4b34 <__mulsf3+0x110>
    4b24:	81 e0       	ldi	r24, 0x01	; 1
    4b26:	90 e0       	ldi	r25, 0x00	; 0
    4b28:	a0 e0       	ldi	r26, 0x00	; 0
    4b2a:	b0 e0       	ldi	r27, 0x00	; 0
    4b2c:	48 2a       	or	r4, r24
    4b2e:	59 2a       	or	r5, r25
    4b30:	6a 2a       	or	r6, r26
    4b32:	7b 2a       	or	r7, r27
    4b34:	31 96       	adiw	r30, 0x01	; 1
    4b36:	e0 32       	cpi	r30, 0x20	; 32
    4b38:	f1 05       	cpc	r31, r1
    4b3a:	49 f0       	breq	.+18     	; 0x4b4e <__mulsf3+0x12a>
    4b3c:	00 0f       	add	r16, r16
    4b3e:	11 1f       	adc	r17, r17
    4b40:	22 1f       	adc	r18, r18
    4b42:	33 1f       	adc	r19, r19
    4b44:	f6 94       	lsr	r15
    4b46:	e7 94       	ror	r14
    4b48:	d7 94       	ror	r13
    4b4a:	c7 94       	ror	r12
    4b4c:	c5 cf       	rjmp	.-118    	; 0x4ad8 <__mulsf3+0xb4>
    4b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    4b50:	9c 89       	ldd	r25, Y+20	; 0x14
    4b52:	2b 85       	ldd	r18, Y+11	; 0x0b
    4b54:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b56:	82 0f       	add	r24, r18
    4b58:	93 1f       	adc	r25, r19
    4b5a:	02 96       	adiw	r24, 0x02	; 2
    4b5c:	9c 8f       	std	Y+28, r25	; 0x1c
    4b5e:	8b 8f       	std	Y+27, r24	; 0x1b
    4b60:	1a 8e       	std	Y+26, r1	; 0x1a
    4b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b64:	8a 89       	ldd	r24, Y+18	; 0x12
    4b66:	98 17       	cp	r25, r24
    4b68:	11 f0       	breq	.+4      	; 0x4b6e <__mulsf3+0x14a>
    4b6a:	81 e0       	ldi	r24, 0x01	; 1
    4b6c:	8a 8f       	std	Y+26, r24	; 0x1a
    4b6e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4b70:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4b72:	17 c0       	rjmp	.+46     	; 0x4ba2 <__mulsf3+0x17e>
    4b74:	ca 01       	movw	r24, r20
    4b76:	81 70       	andi	r24, 0x01	; 1
    4b78:	90 70       	andi	r25, 0x00	; 0
    4b7a:	89 2b       	or	r24, r25
    4b7c:	61 f0       	breq	.+24     	; 0x4b96 <__mulsf3+0x172>
    4b7e:	b6 94       	lsr	r11
    4b80:	a7 94       	ror	r10
    4b82:	97 94       	ror	r9
    4b84:	87 94       	ror	r8
    4b86:	80 e0       	ldi	r24, 0x00	; 0
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	a0 e0       	ldi	r26, 0x00	; 0
    4b8c:	b0 e8       	ldi	r27, 0x80	; 128
    4b8e:	88 2a       	or	r8, r24
    4b90:	99 2a       	or	r9, r25
    4b92:	aa 2a       	or	r10, r26
    4b94:	bb 2a       	or	r11, r27
    4b96:	76 95       	lsr	r23
    4b98:	67 95       	ror	r22
    4b9a:	57 95       	ror	r21
    4b9c:	47 95       	ror	r20
    4b9e:	2f 5f       	subi	r18, 0xFF	; 255
    4ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ba2:	77 fd       	sbrc	r23, 7
    4ba4:	e7 cf       	rjmp	.-50     	; 0x4b74 <__mulsf3+0x150>
    4ba6:	c9 01       	movw	r24, r18
    4ba8:	0b c0       	rjmp	.+22     	; 0x4bc0 <__mulsf3+0x19c>
    4baa:	44 0f       	add	r20, r20
    4bac:	55 1f       	adc	r21, r21
    4bae:	66 1f       	adc	r22, r22
    4bb0:	77 1f       	adc	r23, r23
    4bb2:	b7 fc       	sbrc	r11, 7
    4bb4:	41 60       	ori	r20, 0x01	; 1
    4bb6:	88 0c       	add	r8, r8
    4bb8:	99 1c       	adc	r9, r9
    4bba:	aa 1c       	adc	r10, r10
    4bbc:	bb 1c       	adc	r11, r11
    4bbe:	01 97       	sbiw	r24, 0x01	; 1
    4bc0:	40 30       	cpi	r20, 0x00	; 0
    4bc2:	a0 e0       	ldi	r26, 0x00	; 0
    4bc4:	5a 07       	cpc	r21, r26
    4bc6:	a0 e0       	ldi	r26, 0x00	; 0
    4bc8:	6a 07       	cpc	r22, r26
    4bca:	a0 e4       	ldi	r26, 0x40	; 64
    4bcc:	7a 07       	cpc	r23, r26
    4bce:	68 f3       	brcs	.-38     	; 0x4baa <__mulsf3+0x186>
    4bd0:	9c 8f       	std	Y+28, r25	; 0x1c
    4bd2:	8b 8f       	std	Y+27, r24	; 0x1b
    4bd4:	db 01       	movw	r26, r22
    4bd6:	ca 01       	movw	r24, r20
    4bd8:	8f 77       	andi	r24, 0x7F	; 127
    4bda:	90 70       	andi	r25, 0x00	; 0
    4bdc:	a0 70       	andi	r26, 0x00	; 0
    4bde:	b0 70       	andi	r27, 0x00	; 0
    4be0:	80 34       	cpi	r24, 0x40	; 64
    4be2:	91 05       	cpc	r25, r1
    4be4:	a1 05       	cpc	r26, r1
    4be6:	b1 05       	cpc	r27, r1
    4be8:	61 f4       	brne	.+24     	; 0x4c02 <__mulsf3+0x1de>
    4bea:	47 fd       	sbrc	r20, 7
    4bec:	0a c0       	rjmp	.+20     	; 0x4c02 <__mulsf3+0x1de>
    4bee:	81 14       	cp	r8, r1
    4bf0:	91 04       	cpc	r9, r1
    4bf2:	a1 04       	cpc	r10, r1
    4bf4:	b1 04       	cpc	r11, r1
    4bf6:	29 f0       	breq	.+10     	; 0x4c02 <__mulsf3+0x1de>
    4bf8:	40 5c       	subi	r20, 0xC0	; 192
    4bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    4bfc:	6f 4f       	sbci	r22, 0xFF	; 255
    4bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    4c00:	40 78       	andi	r20, 0x80	; 128
    4c02:	4d 8f       	std	Y+29, r20	; 0x1d
    4c04:	5e 8f       	std	Y+30, r21	; 0x1e
    4c06:	6f 8f       	std	Y+31, r22	; 0x1f
    4c08:	78 a3       	std	Y+32, r23	; 0x20
    4c0a:	83 e0       	ldi	r24, 0x03	; 3
    4c0c:	89 8f       	std	Y+25, r24	; 0x19
    4c0e:	be 01       	movw	r22, r28
    4c10:	67 5e       	subi	r22, 0xE7	; 231
    4c12:	7f 4f       	sbci	r23, 0xFF	; 255
    4c14:	cb 01       	movw	r24, r22
    4c16:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <__pack_f>
    4c1a:	e0 e1       	ldi	r30, 0x10	; 16
    4c1c:	a0 96       	adiw	r28, 0x20	; 32
    4c1e:	0c 94 c3 28 	jmp	0x5186	; 0x5186 <__epilogue_restores__+0x4>

00004c22 <__floatsisf>:
    4c22:	a8 e0       	ldi	r26, 0x08	; 8
    4c24:	b0 e0       	ldi	r27, 0x00	; 0
    4c26:	e7 e1       	ldi	r30, 0x17	; 23
    4c28:	f6 e2       	ldi	r31, 0x26	; 38
    4c2a:	0c 94 ae 28 	jmp	0x515c	; 0x515c <__prologue_saves__+0x12>
    4c2e:	9b 01       	movw	r18, r22
    4c30:	ac 01       	movw	r20, r24
    4c32:	83 e0       	ldi	r24, 0x03	; 3
    4c34:	89 83       	std	Y+1, r24	; 0x01
    4c36:	da 01       	movw	r26, r20
    4c38:	c9 01       	movw	r24, r18
    4c3a:	88 27       	eor	r24, r24
    4c3c:	b7 fd       	sbrc	r27, 7
    4c3e:	83 95       	inc	r24
    4c40:	99 27       	eor	r25, r25
    4c42:	aa 27       	eor	r26, r26
    4c44:	bb 27       	eor	r27, r27
    4c46:	b8 2e       	mov	r11, r24
    4c48:	21 15       	cp	r18, r1
    4c4a:	31 05       	cpc	r19, r1
    4c4c:	41 05       	cpc	r20, r1
    4c4e:	51 05       	cpc	r21, r1
    4c50:	19 f4       	brne	.+6      	; 0x4c58 <__floatsisf+0x36>
    4c52:	82 e0       	ldi	r24, 0x02	; 2
    4c54:	89 83       	std	Y+1, r24	; 0x01
    4c56:	3a c0       	rjmp	.+116    	; 0x4ccc <__floatsisf+0xaa>
    4c58:	88 23       	and	r24, r24
    4c5a:	a9 f0       	breq	.+42     	; 0x4c86 <__floatsisf+0x64>
    4c5c:	20 30       	cpi	r18, 0x00	; 0
    4c5e:	80 e0       	ldi	r24, 0x00	; 0
    4c60:	38 07       	cpc	r19, r24
    4c62:	80 e0       	ldi	r24, 0x00	; 0
    4c64:	48 07       	cpc	r20, r24
    4c66:	80 e8       	ldi	r24, 0x80	; 128
    4c68:	58 07       	cpc	r21, r24
    4c6a:	29 f4       	brne	.+10     	; 0x4c76 <__floatsisf+0x54>
    4c6c:	60 e0       	ldi	r22, 0x00	; 0
    4c6e:	70 e0       	ldi	r23, 0x00	; 0
    4c70:	80 e0       	ldi	r24, 0x00	; 0
    4c72:	9f ec       	ldi	r25, 0xCF	; 207
    4c74:	30 c0       	rjmp	.+96     	; 0x4cd6 <__floatsisf+0xb4>
    4c76:	ee 24       	eor	r14, r14
    4c78:	ff 24       	eor	r15, r15
    4c7a:	87 01       	movw	r16, r14
    4c7c:	e2 1a       	sub	r14, r18
    4c7e:	f3 0a       	sbc	r15, r19
    4c80:	04 0b       	sbc	r16, r20
    4c82:	15 0b       	sbc	r17, r21
    4c84:	02 c0       	rjmp	.+4      	; 0x4c8a <__floatsisf+0x68>
    4c86:	79 01       	movw	r14, r18
    4c88:	8a 01       	movw	r16, r20
    4c8a:	8e e1       	ldi	r24, 0x1E	; 30
    4c8c:	c8 2e       	mov	r12, r24
    4c8e:	d1 2c       	mov	r13, r1
    4c90:	dc 82       	std	Y+4, r13	; 0x04
    4c92:	cb 82       	std	Y+3, r12	; 0x03
    4c94:	ed 82       	std	Y+5, r14	; 0x05
    4c96:	fe 82       	std	Y+6, r15	; 0x06
    4c98:	0f 83       	std	Y+7, r16	; 0x07
    4c9a:	18 87       	std	Y+8, r17	; 0x08
    4c9c:	c8 01       	movw	r24, r16
    4c9e:	b7 01       	movw	r22, r14
    4ca0:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__clzsi2>
    4ca4:	01 97       	sbiw	r24, 0x01	; 1
    4ca6:	18 16       	cp	r1, r24
    4ca8:	19 06       	cpc	r1, r25
    4caa:	84 f4       	brge	.+32     	; 0x4ccc <__floatsisf+0xaa>
    4cac:	08 2e       	mov	r0, r24
    4cae:	04 c0       	rjmp	.+8      	; 0x4cb8 <__floatsisf+0x96>
    4cb0:	ee 0c       	add	r14, r14
    4cb2:	ff 1c       	adc	r15, r15
    4cb4:	00 1f       	adc	r16, r16
    4cb6:	11 1f       	adc	r17, r17
    4cb8:	0a 94       	dec	r0
    4cba:	d2 f7       	brpl	.-12     	; 0x4cb0 <__floatsisf+0x8e>
    4cbc:	ed 82       	std	Y+5, r14	; 0x05
    4cbe:	fe 82       	std	Y+6, r15	; 0x06
    4cc0:	0f 83       	std	Y+7, r16	; 0x07
    4cc2:	18 87       	std	Y+8, r17	; 0x08
    4cc4:	c8 1a       	sub	r12, r24
    4cc6:	d9 0a       	sbc	r13, r25
    4cc8:	dc 82       	std	Y+4, r13	; 0x04
    4cca:	cb 82       	std	Y+3, r12	; 0x03
    4ccc:	ba 82       	std	Y+2, r11	; 0x02
    4cce:	ce 01       	movw	r24, r28
    4cd0:	01 96       	adiw	r24, 0x01	; 1
    4cd2:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <__pack_f>
    4cd6:	e9 e0       	ldi	r30, 0x09	; 9
    4cd8:	28 96       	adiw	r28, 0x08	; 8
    4cda:	0c 94 ca 28 	jmp	0x5194	; 0x5194 <__epilogue_restores__+0x12>

00004cde <__fixsfsi>:
    4cde:	ac e0       	ldi	r26, 0x0C	; 12
    4ce0:	b0 e0       	ldi	r27, 0x00	; 0
    4ce2:	e5 e7       	ldi	r30, 0x75	; 117
    4ce4:	f6 e2       	ldi	r31, 0x26	; 38
    4ce6:	0c 94 b5 28 	jmp	0x516a	; 0x516a <__prologue_saves__+0x20>
    4cea:	69 83       	std	Y+1, r22	; 0x01
    4cec:	7a 83       	std	Y+2, r23	; 0x02
    4cee:	8b 83       	std	Y+3, r24	; 0x03
    4cf0:	9c 83       	std	Y+4, r25	; 0x04
    4cf2:	be 01       	movw	r22, r28
    4cf4:	6b 5f       	subi	r22, 0xFB	; 251
    4cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    4cf8:	ce 01       	movw	r24, r28
    4cfa:	01 96       	adiw	r24, 0x01	; 1
    4cfc:	0e 94 ef 27 	call	0x4fde	; 0x4fde <__unpack_f>
    4d00:	8d 81       	ldd	r24, Y+5	; 0x05
    4d02:	82 30       	cpi	r24, 0x02	; 2
    4d04:	a9 f1       	breq	.+106    	; 0x4d70 <__fixsfsi+0x92>
    4d06:	82 30       	cpi	r24, 0x02	; 2
    4d08:	98 f1       	brcs	.+102    	; 0x4d70 <__fixsfsi+0x92>
    4d0a:	84 30       	cpi	r24, 0x04	; 4
    4d0c:	21 f4       	brne	.+8      	; 0x4d16 <__fixsfsi+0x38>
    4d0e:	8e 81       	ldd	r24, Y+6	; 0x06
    4d10:	88 23       	and	r24, r24
    4d12:	59 f4       	brne	.+22     	; 0x4d2a <__fixsfsi+0x4c>
    4d14:	0f c0       	rjmp	.+30     	; 0x4d34 <__fixsfsi+0x56>
    4d16:	2f 81       	ldd	r18, Y+7	; 0x07
    4d18:	38 85       	ldd	r19, Y+8	; 0x08
    4d1a:	37 fd       	sbrc	r19, 7
    4d1c:	29 c0       	rjmp	.+82     	; 0x4d70 <__fixsfsi+0x92>
    4d1e:	6e 81       	ldd	r22, Y+6	; 0x06
    4d20:	2f 31       	cpi	r18, 0x1F	; 31
    4d22:	31 05       	cpc	r19, r1
    4d24:	64 f0       	brlt	.+24     	; 0x4d3e <__fixsfsi+0x60>
    4d26:	66 23       	and	r22, r22
    4d28:	29 f0       	breq	.+10     	; 0x4d34 <__fixsfsi+0x56>
    4d2a:	20 e0       	ldi	r18, 0x00	; 0
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	40 e0       	ldi	r20, 0x00	; 0
    4d30:	50 e8       	ldi	r21, 0x80	; 128
    4d32:	22 c0       	rjmp	.+68     	; 0x4d78 <__fixsfsi+0x9a>
    4d34:	2f ef       	ldi	r18, 0xFF	; 255
    4d36:	3f ef       	ldi	r19, 0xFF	; 255
    4d38:	4f ef       	ldi	r20, 0xFF	; 255
    4d3a:	5f e7       	ldi	r21, 0x7F	; 127
    4d3c:	1d c0       	rjmp	.+58     	; 0x4d78 <__fixsfsi+0x9a>
    4d3e:	8e e1       	ldi	r24, 0x1E	; 30
    4d40:	90 e0       	ldi	r25, 0x00	; 0
    4d42:	82 1b       	sub	r24, r18
    4d44:	93 0b       	sbc	r25, r19
    4d46:	29 85       	ldd	r18, Y+9	; 0x09
    4d48:	3a 85       	ldd	r19, Y+10	; 0x0a
    4d4a:	4b 85       	ldd	r20, Y+11	; 0x0b
    4d4c:	5c 85       	ldd	r21, Y+12	; 0x0c
    4d4e:	04 c0       	rjmp	.+8      	; 0x4d58 <__fixsfsi+0x7a>
    4d50:	56 95       	lsr	r21
    4d52:	47 95       	ror	r20
    4d54:	37 95       	ror	r19
    4d56:	27 95       	ror	r18
    4d58:	8a 95       	dec	r24
    4d5a:	d2 f7       	brpl	.-12     	; 0x4d50 <__fixsfsi+0x72>
    4d5c:	66 23       	and	r22, r22
    4d5e:	61 f0       	breq	.+24     	; 0x4d78 <__fixsfsi+0x9a>
    4d60:	50 95       	com	r21
    4d62:	40 95       	com	r20
    4d64:	30 95       	com	r19
    4d66:	21 95       	neg	r18
    4d68:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6a:	4f 4f       	sbci	r20, 0xFF	; 255
    4d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d6e:	04 c0       	rjmp	.+8      	; 0x4d78 <__fixsfsi+0x9a>
    4d70:	20 e0       	ldi	r18, 0x00	; 0
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	40 e0       	ldi	r20, 0x00	; 0
    4d76:	50 e0       	ldi	r21, 0x00	; 0
    4d78:	ca 01       	movw	r24, r20
    4d7a:	b9 01       	movw	r22, r18
    4d7c:	e2 e0       	ldi	r30, 0x02	; 2
    4d7e:	2c 96       	adiw	r28, 0x0c	; 12
    4d80:	0c 94 d1 28 	jmp	0x51a2	; 0x51a2 <__epilogue_restores__+0x20>

00004d84 <__clzsi2>:
    4d84:	ef 92       	push	r14
    4d86:	ff 92       	push	r15
    4d88:	0f 93       	push	r16
    4d8a:	1f 93       	push	r17
    4d8c:	9b 01       	movw	r18, r22
    4d8e:	ac 01       	movw	r20, r24
    4d90:	20 30       	cpi	r18, 0x00	; 0
    4d92:	80 e0       	ldi	r24, 0x00	; 0
    4d94:	38 07       	cpc	r19, r24
    4d96:	81 e0       	ldi	r24, 0x01	; 1
    4d98:	48 07       	cpc	r20, r24
    4d9a:	80 e0       	ldi	r24, 0x00	; 0
    4d9c:	58 07       	cpc	r21, r24
    4d9e:	80 f4       	brcc	.+32     	; 0x4dc0 <__clzsi2+0x3c>
    4da0:	2f 3f       	cpi	r18, 0xFF	; 255
    4da2:	31 05       	cpc	r19, r1
    4da4:	41 05       	cpc	r20, r1
    4da6:	51 05       	cpc	r21, r1
    4da8:	09 f0       	breq	.+2      	; 0x4dac <__clzsi2+0x28>
    4daa:	20 f4       	brcc	.+8      	; 0x4db4 <__clzsi2+0x30>
    4dac:	ee 24       	eor	r14, r14
    4dae:	ff 24       	eor	r15, r15
    4db0:	87 01       	movw	r16, r14
    4db2:	19 c0       	rjmp	.+50     	; 0x4de6 <__clzsi2+0x62>
    4db4:	68 e0       	ldi	r22, 0x08	; 8
    4db6:	e6 2e       	mov	r14, r22
    4db8:	f1 2c       	mov	r15, r1
    4dba:	01 2d       	mov	r16, r1
    4dbc:	11 2d       	mov	r17, r1
    4dbe:	13 c0       	rjmp	.+38     	; 0x4de6 <__clzsi2+0x62>
    4dc0:	20 30       	cpi	r18, 0x00	; 0
    4dc2:	80 e0       	ldi	r24, 0x00	; 0
    4dc4:	38 07       	cpc	r19, r24
    4dc6:	80 e0       	ldi	r24, 0x00	; 0
    4dc8:	48 07       	cpc	r20, r24
    4dca:	81 e0       	ldi	r24, 0x01	; 1
    4dcc:	58 07       	cpc	r21, r24
    4dce:	30 f4       	brcc	.+12     	; 0x4ddc <__clzsi2+0x58>
    4dd0:	90 e1       	ldi	r25, 0x10	; 16
    4dd2:	e9 2e       	mov	r14, r25
    4dd4:	f1 2c       	mov	r15, r1
    4dd6:	01 2d       	mov	r16, r1
    4dd8:	11 2d       	mov	r17, r1
    4dda:	05 c0       	rjmp	.+10     	; 0x4de6 <__clzsi2+0x62>
    4ddc:	88 e1       	ldi	r24, 0x18	; 24
    4dde:	e8 2e       	mov	r14, r24
    4de0:	f1 2c       	mov	r15, r1
    4de2:	01 2d       	mov	r16, r1
    4de4:	11 2d       	mov	r17, r1
    4de6:	80 e2       	ldi	r24, 0x20	; 32
    4de8:	90 e0       	ldi	r25, 0x00	; 0
    4dea:	a0 e0       	ldi	r26, 0x00	; 0
    4dec:	b0 e0       	ldi	r27, 0x00	; 0
    4dee:	8e 19       	sub	r24, r14
    4df0:	9f 09       	sbc	r25, r15
    4df2:	a0 0b       	sbc	r26, r16
    4df4:	b1 0b       	sbc	r27, r17
    4df6:	04 c0       	rjmp	.+8      	; 0x4e00 <__clzsi2+0x7c>
    4df8:	56 95       	lsr	r21
    4dfa:	47 95       	ror	r20
    4dfc:	37 95       	ror	r19
    4dfe:	27 95       	ror	r18
    4e00:	ea 94       	dec	r14
    4e02:	d2 f7       	brpl	.-12     	; 0x4df8 <__clzsi2+0x74>
    4e04:	f9 01       	movw	r30, r18
    4e06:	e0 5e       	subi	r30, 0xE0	; 224
    4e08:	fd 4f       	sbci	r31, 0xFD	; 253
    4e0a:	20 81       	ld	r18, Z
    4e0c:	82 1b       	sub	r24, r18
    4e0e:	91 09       	sbc	r25, r1
    4e10:	a1 09       	sbc	r26, r1
    4e12:	b1 09       	sbc	r27, r1
    4e14:	1f 91       	pop	r17
    4e16:	0f 91       	pop	r16
    4e18:	ff 90       	pop	r15
    4e1a:	ef 90       	pop	r14
    4e1c:	08 95       	ret

00004e1e <__pack_f>:
    4e1e:	9f 92       	push	r9
    4e20:	af 92       	push	r10
    4e22:	bf 92       	push	r11
    4e24:	cf 92       	push	r12
    4e26:	df 92       	push	r13
    4e28:	ef 92       	push	r14
    4e2a:	ff 92       	push	r15
    4e2c:	0f 93       	push	r16
    4e2e:	1f 93       	push	r17
    4e30:	ee 24       	eor	r14, r14
    4e32:	ff 24       	eor	r15, r15
    4e34:	87 01       	movw	r16, r14
    4e36:	fc 01       	movw	r30, r24
    4e38:	24 81       	ldd	r18, Z+4	; 0x04
    4e3a:	35 81       	ldd	r19, Z+5	; 0x05
    4e3c:	46 81       	ldd	r20, Z+6	; 0x06
    4e3e:	57 81       	ldd	r21, Z+7	; 0x07
    4e40:	91 80       	ldd	r9, Z+1	; 0x01
    4e42:	80 81       	ld	r24, Z
    4e44:	82 30       	cpi	r24, 0x02	; 2
    4e46:	10 f4       	brcc	.+4      	; 0x4e4c <__pack_f+0x2e>
    4e48:	40 61       	ori	r20, 0x10	; 16
    4e4a:	a2 c0       	rjmp	.+324    	; 0x4f90 <__pack_f+0x172>
    4e4c:	84 30       	cpi	r24, 0x04	; 4
    4e4e:	09 f4       	brne	.+2      	; 0x4e52 <__pack_f+0x34>
    4e50:	9b c0       	rjmp	.+310    	; 0x4f88 <__pack_f+0x16a>
    4e52:	82 30       	cpi	r24, 0x02	; 2
    4e54:	29 f4       	brne	.+10     	; 0x4e60 <__pack_f+0x42>
    4e56:	20 e0       	ldi	r18, 0x00	; 0
    4e58:	30 e0       	ldi	r19, 0x00	; 0
    4e5a:	40 e0       	ldi	r20, 0x00	; 0
    4e5c:	50 e0       	ldi	r21, 0x00	; 0
    4e5e:	05 c0       	rjmp	.+10     	; 0x4e6a <__pack_f+0x4c>
    4e60:	21 15       	cp	r18, r1
    4e62:	31 05       	cpc	r19, r1
    4e64:	41 05       	cpc	r20, r1
    4e66:	51 05       	cpc	r21, r1
    4e68:	19 f4       	brne	.+6      	; 0x4e70 <__pack_f+0x52>
    4e6a:	e0 e0       	ldi	r30, 0x00	; 0
    4e6c:	f0 e0       	ldi	r31, 0x00	; 0
    4e6e:	92 c0       	rjmp	.+292    	; 0x4f94 <__pack_f+0x176>
    4e70:	82 81       	ldd	r24, Z+2	; 0x02
    4e72:	93 81       	ldd	r25, Z+3	; 0x03
    4e74:	6f ef       	ldi	r22, 0xFF	; 255
    4e76:	82 38       	cpi	r24, 0x82	; 130
    4e78:	96 07       	cpc	r25, r22
    4e7a:	0c f0       	brlt	.+2      	; 0x4e7e <__pack_f+0x60>
    4e7c:	5a c0       	rjmp	.+180    	; 0x4f32 <__pack_f+0x114>
    4e7e:	62 e8       	ldi	r22, 0x82	; 130
    4e80:	7f ef       	ldi	r23, 0xFF	; 255
    4e82:	68 1b       	sub	r22, r24
    4e84:	79 0b       	sbc	r23, r25
    4e86:	6a 31       	cpi	r22, 0x1A	; 26
    4e88:	71 05       	cpc	r23, r1
    4e8a:	2c f0       	brlt	.+10     	; 0x4e96 <__pack_f+0x78>
    4e8c:	20 e0       	ldi	r18, 0x00	; 0
    4e8e:	30 e0       	ldi	r19, 0x00	; 0
    4e90:	40 e0       	ldi	r20, 0x00	; 0
    4e92:	50 e0       	ldi	r21, 0x00	; 0
    4e94:	2a c0       	rjmp	.+84     	; 0x4eea <__pack_f+0xcc>
    4e96:	aa 24       	eor	r10, r10
    4e98:	bb 24       	eor	r11, r11
    4e9a:	65 01       	movw	r12, r10
    4e9c:	81 e0       	ldi	r24, 0x01	; 1
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	a0 e0       	ldi	r26, 0x00	; 0
    4ea2:	b0 e0       	ldi	r27, 0x00	; 0
    4ea4:	06 2e       	mov	r0, r22
    4ea6:	04 c0       	rjmp	.+8      	; 0x4eb0 <__pack_f+0x92>
    4ea8:	88 0f       	add	r24, r24
    4eaa:	99 1f       	adc	r25, r25
    4eac:	aa 1f       	adc	r26, r26
    4eae:	bb 1f       	adc	r27, r27
    4eb0:	0a 94       	dec	r0
    4eb2:	d2 f7       	brpl	.-12     	; 0x4ea8 <__pack_f+0x8a>
    4eb4:	01 97       	sbiw	r24, 0x01	; 1
    4eb6:	a1 09       	sbc	r26, r1
    4eb8:	b1 09       	sbc	r27, r1
    4eba:	82 23       	and	r24, r18
    4ebc:	93 23       	and	r25, r19
    4ebe:	a4 23       	and	r26, r20
    4ec0:	b5 23       	and	r27, r21
    4ec2:	00 97       	sbiw	r24, 0x00	; 0
    4ec4:	a1 05       	cpc	r26, r1
    4ec6:	b1 05       	cpc	r27, r1
    4ec8:	29 f0       	breq	.+10     	; 0x4ed4 <__pack_f+0xb6>
    4eca:	71 e0       	ldi	r23, 0x01	; 1
    4ecc:	a7 2e       	mov	r10, r23
    4ece:	b1 2c       	mov	r11, r1
    4ed0:	c1 2c       	mov	r12, r1
    4ed2:	d1 2c       	mov	r13, r1
    4ed4:	04 c0       	rjmp	.+8      	; 0x4ede <__pack_f+0xc0>
    4ed6:	56 95       	lsr	r21
    4ed8:	47 95       	ror	r20
    4eda:	37 95       	ror	r19
    4edc:	27 95       	ror	r18
    4ede:	6a 95       	dec	r22
    4ee0:	d2 f7       	brpl	.-12     	; 0x4ed6 <__pack_f+0xb8>
    4ee2:	2a 29       	or	r18, r10
    4ee4:	3b 29       	or	r19, r11
    4ee6:	4c 29       	or	r20, r12
    4ee8:	5d 29       	or	r21, r13
    4eea:	da 01       	movw	r26, r20
    4eec:	c9 01       	movw	r24, r18
    4eee:	8f 77       	andi	r24, 0x7F	; 127
    4ef0:	90 70       	andi	r25, 0x00	; 0
    4ef2:	a0 70       	andi	r26, 0x00	; 0
    4ef4:	b0 70       	andi	r27, 0x00	; 0
    4ef6:	80 34       	cpi	r24, 0x40	; 64
    4ef8:	91 05       	cpc	r25, r1
    4efa:	a1 05       	cpc	r26, r1
    4efc:	b1 05       	cpc	r27, r1
    4efe:	39 f4       	brne	.+14     	; 0x4f0e <__pack_f+0xf0>
    4f00:	27 ff       	sbrs	r18, 7
    4f02:	09 c0       	rjmp	.+18     	; 0x4f16 <__pack_f+0xf8>
    4f04:	20 5c       	subi	r18, 0xC0	; 192
    4f06:	3f 4f       	sbci	r19, 0xFF	; 255
    4f08:	4f 4f       	sbci	r20, 0xFF	; 255
    4f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f0c:	04 c0       	rjmp	.+8      	; 0x4f16 <__pack_f+0xf8>
    4f0e:	21 5c       	subi	r18, 0xC1	; 193
    4f10:	3f 4f       	sbci	r19, 0xFF	; 255
    4f12:	4f 4f       	sbci	r20, 0xFF	; 255
    4f14:	5f 4f       	sbci	r21, 0xFF	; 255
    4f16:	80 e0       	ldi	r24, 0x00	; 0
    4f18:	90 e0       	ldi	r25, 0x00	; 0
    4f1a:	20 30       	cpi	r18, 0x00	; 0
    4f1c:	60 e0       	ldi	r22, 0x00	; 0
    4f1e:	36 07       	cpc	r19, r22
    4f20:	60 e0       	ldi	r22, 0x00	; 0
    4f22:	46 07       	cpc	r20, r22
    4f24:	60 e4       	ldi	r22, 0x40	; 64
    4f26:	56 07       	cpc	r21, r22
    4f28:	10 f0       	brcs	.+4      	; 0x4f2e <__pack_f+0x110>
    4f2a:	81 e0       	ldi	r24, 0x01	; 1
    4f2c:	90 e0       	ldi	r25, 0x00	; 0
    4f2e:	fc 01       	movw	r30, r24
    4f30:	23 c0       	rjmp	.+70     	; 0x4f78 <__pack_f+0x15a>
    4f32:	80 38       	cpi	r24, 0x80	; 128
    4f34:	91 05       	cpc	r25, r1
    4f36:	44 f5       	brge	.+80     	; 0x4f88 <__pack_f+0x16a>
    4f38:	fc 01       	movw	r30, r24
    4f3a:	e1 58       	subi	r30, 0x81	; 129
    4f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3e:	da 01       	movw	r26, r20
    4f40:	c9 01       	movw	r24, r18
    4f42:	8f 77       	andi	r24, 0x7F	; 127
    4f44:	90 70       	andi	r25, 0x00	; 0
    4f46:	a0 70       	andi	r26, 0x00	; 0
    4f48:	b0 70       	andi	r27, 0x00	; 0
    4f4a:	80 34       	cpi	r24, 0x40	; 64
    4f4c:	91 05       	cpc	r25, r1
    4f4e:	a1 05       	cpc	r26, r1
    4f50:	b1 05       	cpc	r27, r1
    4f52:	39 f4       	brne	.+14     	; 0x4f62 <__pack_f+0x144>
    4f54:	27 ff       	sbrs	r18, 7
    4f56:	09 c0       	rjmp	.+18     	; 0x4f6a <__pack_f+0x14c>
    4f58:	20 5c       	subi	r18, 0xC0	; 192
    4f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f5c:	4f 4f       	sbci	r20, 0xFF	; 255
    4f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    4f60:	04 c0       	rjmp	.+8      	; 0x4f6a <__pack_f+0x14c>
    4f62:	21 5c       	subi	r18, 0xC1	; 193
    4f64:	3f 4f       	sbci	r19, 0xFF	; 255
    4f66:	4f 4f       	sbci	r20, 0xFF	; 255
    4f68:	5f 4f       	sbci	r21, 0xFF	; 255
    4f6a:	57 ff       	sbrs	r21, 7
    4f6c:	05 c0       	rjmp	.+10     	; 0x4f78 <__pack_f+0x15a>
    4f6e:	56 95       	lsr	r21
    4f70:	47 95       	ror	r20
    4f72:	37 95       	ror	r19
    4f74:	27 95       	ror	r18
    4f76:	31 96       	adiw	r30, 0x01	; 1
    4f78:	87 e0       	ldi	r24, 0x07	; 7
    4f7a:	56 95       	lsr	r21
    4f7c:	47 95       	ror	r20
    4f7e:	37 95       	ror	r19
    4f80:	27 95       	ror	r18
    4f82:	8a 95       	dec	r24
    4f84:	d1 f7       	brne	.-12     	; 0x4f7a <__pack_f+0x15c>
    4f86:	06 c0       	rjmp	.+12     	; 0x4f94 <__pack_f+0x176>
    4f88:	20 e0       	ldi	r18, 0x00	; 0
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	40 e0       	ldi	r20, 0x00	; 0
    4f8e:	50 e0       	ldi	r21, 0x00	; 0
    4f90:	ef ef       	ldi	r30, 0xFF	; 255
    4f92:	f0 e0       	ldi	r31, 0x00	; 0
    4f94:	e2 2e       	mov	r14, r18
    4f96:	f3 2e       	mov	r15, r19
    4f98:	94 2f       	mov	r25, r20
    4f9a:	9f 77       	andi	r25, 0x7F	; 127
    4f9c:	80 2f       	mov	r24, r16
    4f9e:	80 78       	andi	r24, 0x80	; 128
    4fa0:	89 2b       	or	r24, r25
    4fa2:	9e 2f       	mov	r25, r30
    4fa4:	97 95       	ror	r25
    4fa6:	99 27       	eor	r25, r25
    4fa8:	97 95       	ror	r25
    4faa:	8f 77       	andi	r24, 0x7F	; 127
    4fac:	08 2f       	mov	r16, r24
    4fae:	09 2b       	or	r16, r25
    4fb0:	9e 2f       	mov	r25, r30
    4fb2:	96 95       	lsr	r25
    4fb4:	81 2f       	mov	r24, r17
    4fb6:	80 78       	andi	r24, 0x80	; 128
    4fb8:	89 2b       	or	r24, r25
    4fba:	97 94       	ror	r9
    4fbc:	99 24       	eor	r9, r9
    4fbe:	97 94       	ror	r9
    4fc0:	8f 77       	andi	r24, 0x7F	; 127
    4fc2:	18 2f       	mov	r17, r24
    4fc4:	19 29       	or	r17, r9
    4fc6:	c8 01       	movw	r24, r16
    4fc8:	b7 01       	movw	r22, r14
    4fca:	1f 91       	pop	r17
    4fcc:	0f 91       	pop	r16
    4fce:	ff 90       	pop	r15
    4fd0:	ef 90       	pop	r14
    4fd2:	df 90       	pop	r13
    4fd4:	cf 90       	pop	r12
    4fd6:	bf 90       	pop	r11
    4fd8:	af 90       	pop	r10
    4fda:	9f 90       	pop	r9
    4fdc:	08 95       	ret

00004fde <__unpack_f>:
    4fde:	cf 93       	push	r28
    4fe0:	df 93       	push	r29
    4fe2:	fc 01       	movw	r30, r24
    4fe4:	db 01       	movw	r26, r22
    4fe6:	20 81       	ld	r18, Z
    4fe8:	31 81       	ldd	r19, Z+1	; 0x01
    4fea:	92 81       	ldd	r25, Z+2	; 0x02
    4fec:	49 2f       	mov	r20, r25
    4fee:	4f 77       	andi	r20, 0x7F	; 127
    4ff0:	50 e0       	ldi	r21, 0x00	; 0
    4ff2:	99 1f       	adc	r25, r25
    4ff4:	99 27       	eor	r25, r25
    4ff6:	99 1f       	adc	r25, r25
    4ff8:	83 81       	ldd	r24, Z+3	; 0x03
    4ffa:	e8 2f       	mov	r30, r24
    4ffc:	ee 0f       	add	r30, r30
    4ffe:	e9 2b       	or	r30, r25
    5000:	6e 2f       	mov	r22, r30
    5002:	70 e0       	ldi	r23, 0x00	; 0
    5004:	88 1f       	adc	r24, r24
    5006:	88 27       	eor	r24, r24
    5008:	88 1f       	adc	r24, r24
    500a:	ed 01       	movw	r28, r26
    500c:	89 83       	std	Y+1, r24	; 0x01
    500e:	ee 23       	and	r30, r30
    5010:	71 f5       	brne	.+92     	; 0x506e <__unpack_f+0x90>
    5012:	21 15       	cp	r18, r1
    5014:	31 05       	cpc	r19, r1
    5016:	41 05       	cpc	r20, r1
    5018:	51 05       	cpc	r21, r1
    501a:	11 f4       	brne	.+4      	; 0x5020 <__unpack_f+0x42>
    501c:	82 e0       	ldi	r24, 0x02	; 2
    501e:	2f c0       	rjmp	.+94     	; 0x507e <__unpack_f+0xa0>
    5020:	6e 57       	subi	r22, 0x7E	; 126
    5022:	70 40       	sbci	r23, 0x00	; 0
    5024:	fd 01       	movw	r30, r26
    5026:	73 83       	std	Z+3, r23	; 0x03
    5028:	62 83       	std	Z+2, r22	; 0x02
    502a:	67 e0       	ldi	r22, 0x07	; 7
    502c:	22 0f       	add	r18, r18
    502e:	33 1f       	adc	r19, r19
    5030:	44 1f       	adc	r20, r20
    5032:	55 1f       	adc	r21, r21
    5034:	6a 95       	dec	r22
    5036:	d1 f7       	brne	.-12     	; 0x502c <__unpack_f+0x4e>
    5038:	83 e0       	ldi	r24, 0x03	; 3
    503a:	8c 93       	st	X, r24
    503c:	0a c0       	rjmp	.+20     	; 0x5052 <__unpack_f+0x74>
    503e:	22 0f       	add	r18, r18
    5040:	33 1f       	adc	r19, r19
    5042:	44 1f       	adc	r20, r20
    5044:	55 1f       	adc	r21, r21
    5046:	ed 01       	movw	r28, r26
    5048:	8a 81       	ldd	r24, Y+2	; 0x02
    504a:	9b 81       	ldd	r25, Y+3	; 0x03
    504c:	01 97       	sbiw	r24, 0x01	; 1
    504e:	9b 83       	std	Y+3, r25	; 0x03
    5050:	8a 83       	std	Y+2, r24	; 0x02
    5052:	20 30       	cpi	r18, 0x00	; 0
    5054:	e0 e0       	ldi	r30, 0x00	; 0
    5056:	3e 07       	cpc	r19, r30
    5058:	e0 e0       	ldi	r30, 0x00	; 0
    505a:	4e 07       	cpc	r20, r30
    505c:	e0 e4       	ldi	r30, 0x40	; 64
    505e:	5e 07       	cpc	r21, r30
    5060:	70 f3       	brcs	.-36     	; 0x503e <__unpack_f+0x60>
    5062:	ed 01       	movw	r28, r26
    5064:	2c 83       	std	Y+4, r18	; 0x04
    5066:	3d 83       	std	Y+5, r19	; 0x05
    5068:	4e 83       	std	Y+6, r20	; 0x06
    506a:	5f 83       	std	Y+7, r21	; 0x07
    506c:	25 c0       	rjmp	.+74     	; 0x50b8 <__unpack_f+0xda>
    506e:	ef 3f       	cpi	r30, 0xFF	; 255
    5070:	79 f4       	brne	.+30     	; 0x5090 <__unpack_f+0xb2>
    5072:	21 15       	cp	r18, r1
    5074:	31 05       	cpc	r19, r1
    5076:	41 05       	cpc	r20, r1
    5078:	51 05       	cpc	r21, r1
    507a:	19 f4       	brne	.+6      	; 0x5082 <__unpack_f+0xa4>
    507c:	84 e0       	ldi	r24, 0x04	; 4
    507e:	8c 93       	st	X, r24
    5080:	1b c0       	rjmp	.+54     	; 0x50b8 <__unpack_f+0xda>
    5082:	44 ff       	sbrs	r20, 4
    5084:	03 c0       	rjmp	.+6      	; 0x508c <__unpack_f+0xae>
    5086:	81 e0       	ldi	r24, 0x01	; 1
    5088:	8c 93       	st	X, r24
    508a:	11 c0       	rjmp	.+34     	; 0x50ae <__unpack_f+0xd0>
    508c:	1c 92       	st	X, r1
    508e:	0f c0       	rjmp	.+30     	; 0x50ae <__unpack_f+0xd0>
    5090:	6f 57       	subi	r22, 0x7F	; 127
    5092:	70 40       	sbci	r23, 0x00	; 0
    5094:	ed 01       	movw	r28, r26
    5096:	7b 83       	std	Y+3, r23	; 0x03
    5098:	6a 83       	std	Y+2, r22	; 0x02
    509a:	83 e0       	ldi	r24, 0x03	; 3
    509c:	8c 93       	st	X, r24
    509e:	87 e0       	ldi	r24, 0x07	; 7
    50a0:	22 0f       	add	r18, r18
    50a2:	33 1f       	adc	r19, r19
    50a4:	44 1f       	adc	r20, r20
    50a6:	55 1f       	adc	r21, r21
    50a8:	8a 95       	dec	r24
    50aa:	d1 f7       	brne	.-12     	; 0x50a0 <__unpack_f+0xc2>
    50ac:	50 64       	ori	r21, 0x40	; 64
    50ae:	fd 01       	movw	r30, r26
    50b0:	24 83       	std	Z+4, r18	; 0x04
    50b2:	35 83       	std	Z+5, r19	; 0x05
    50b4:	46 83       	std	Z+6, r20	; 0x06
    50b6:	57 83       	std	Z+7, r21	; 0x07
    50b8:	df 91       	pop	r29
    50ba:	cf 91       	pop	r28
    50bc:	08 95       	ret

000050be <__mulsi3>:
    50be:	62 9f       	mul	r22, r18
    50c0:	d0 01       	movw	r26, r0
    50c2:	73 9f       	mul	r23, r19
    50c4:	f0 01       	movw	r30, r0
    50c6:	82 9f       	mul	r24, r18
    50c8:	e0 0d       	add	r30, r0
    50ca:	f1 1d       	adc	r31, r1
    50cc:	64 9f       	mul	r22, r20
    50ce:	e0 0d       	add	r30, r0
    50d0:	f1 1d       	adc	r31, r1
    50d2:	92 9f       	mul	r25, r18
    50d4:	f0 0d       	add	r31, r0
    50d6:	83 9f       	mul	r24, r19
    50d8:	f0 0d       	add	r31, r0
    50da:	74 9f       	mul	r23, r20
    50dc:	f0 0d       	add	r31, r0
    50de:	65 9f       	mul	r22, r21
    50e0:	f0 0d       	add	r31, r0
    50e2:	99 27       	eor	r25, r25
    50e4:	72 9f       	mul	r23, r18
    50e6:	b0 0d       	add	r27, r0
    50e8:	e1 1d       	adc	r30, r1
    50ea:	f9 1f       	adc	r31, r25
    50ec:	63 9f       	mul	r22, r19
    50ee:	b0 0d       	add	r27, r0
    50f0:	e1 1d       	adc	r30, r1
    50f2:	f9 1f       	adc	r31, r25
    50f4:	bd 01       	movw	r22, r26
    50f6:	cf 01       	movw	r24, r30
    50f8:	11 24       	eor	r1, r1
    50fa:	08 95       	ret

000050fc <__udivmodhi4>:
    50fc:	aa 1b       	sub	r26, r26
    50fe:	bb 1b       	sub	r27, r27
    5100:	51 e1       	ldi	r21, 0x11	; 17
    5102:	07 c0       	rjmp	.+14     	; 0x5112 <__udivmodhi4_ep>

00005104 <__udivmodhi4_loop>:
    5104:	aa 1f       	adc	r26, r26
    5106:	bb 1f       	adc	r27, r27
    5108:	a6 17       	cp	r26, r22
    510a:	b7 07       	cpc	r27, r23
    510c:	10 f0       	brcs	.+4      	; 0x5112 <__udivmodhi4_ep>
    510e:	a6 1b       	sub	r26, r22
    5110:	b7 0b       	sbc	r27, r23

00005112 <__udivmodhi4_ep>:
    5112:	88 1f       	adc	r24, r24
    5114:	99 1f       	adc	r25, r25
    5116:	5a 95       	dec	r21
    5118:	a9 f7       	brne	.-22     	; 0x5104 <__udivmodhi4_loop>
    511a:	80 95       	com	r24
    511c:	90 95       	com	r25
    511e:	bc 01       	movw	r22, r24
    5120:	cd 01       	movw	r24, r26
    5122:	08 95       	ret

00005124 <__divmodhi4>:
    5124:	97 fb       	bst	r25, 7
    5126:	09 2e       	mov	r0, r25
    5128:	07 26       	eor	r0, r23
    512a:	0a d0       	rcall	.+20     	; 0x5140 <__divmodhi4_neg1>
    512c:	77 fd       	sbrc	r23, 7
    512e:	04 d0       	rcall	.+8      	; 0x5138 <__divmodhi4_neg2>
    5130:	e5 df       	rcall	.-54     	; 0x50fc <__udivmodhi4>
    5132:	06 d0       	rcall	.+12     	; 0x5140 <__divmodhi4_neg1>
    5134:	00 20       	and	r0, r0
    5136:	1a f4       	brpl	.+6      	; 0x513e <__divmodhi4_exit>

00005138 <__divmodhi4_neg2>:
    5138:	70 95       	com	r23
    513a:	61 95       	neg	r22
    513c:	7f 4f       	sbci	r23, 0xFF	; 255

0000513e <__divmodhi4_exit>:
    513e:	08 95       	ret

00005140 <__divmodhi4_neg1>:
    5140:	f6 f7       	brtc	.-4      	; 0x513e <__divmodhi4_exit>
    5142:	90 95       	com	r25
    5144:	81 95       	neg	r24
    5146:	9f 4f       	sbci	r25, 0xFF	; 255
    5148:	08 95       	ret

0000514a <__prologue_saves__>:
    514a:	2f 92       	push	r2
    514c:	3f 92       	push	r3
    514e:	4f 92       	push	r4
    5150:	5f 92       	push	r5
    5152:	6f 92       	push	r6
    5154:	7f 92       	push	r7
    5156:	8f 92       	push	r8
    5158:	9f 92       	push	r9
    515a:	af 92       	push	r10
    515c:	bf 92       	push	r11
    515e:	cf 92       	push	r12
    5160:	df 92       	push	r13
    5162:	ef 92       	push	r14
    5164:	ff 92       	push	r15
    5166:	0f 93       	push	r16
    5168:	1f 93       	push	r17
    516a:	cf 93       	push	r28
    516c:	df 93       	push	r29
    516e:	cd b7       	in	r28, 0x3d	; 61
    5170:	de b7       	in	r29, 0x3e	; 62
    5172:	ca 1b       	sub	r28, r26
    5174:	db 0b       	sbc	r29, r27
    5176:	0f b6       	in	r0, 0x3f	; 63
    5178:	f8 94       	cli
    517a:	de bf       	out	0x3e, r29	; 62
    517c:	0f be       	out	0x3f, r0	; 63
    517e:	cd bf       	out	0x3d, r28	; 61
    5180:	19 94       	eijmp

00005182 <__epilogue_restores__>:
    5182:	2a 88       	ldd	r2, Y+18	; 0x12
    5184:	39 88       	ldd	r3, Y+17	; 0x11
    5186:	48 88       	ldd	r4, Y+16	; 0x10
    5188:	5f 84       	ldd	r5, Y+15	; 0x0f
    518a:	6e 84       	ldd	r6, Y+14	; 0x0e
    518c:	7d 84       	ldd	r7, Y+13	; 0x0d
    518e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5190:	9b 84       	ldd	r9, Y+11	; 0x0b
    5192:	aa 84       	ldd	r10, Y+10	; 0x0a
    5194:	b9 84       	ldd	r11, Y+9	; 0x09
    5196:	c8 84       	ldd	r12, Y+8	; 0x08
    5198:	df 80       	ldd	r13, Y+7	; 0x07
    519a:	ee 80       	ldd	r14, Y+6	; 0x06
    519c:	fd 80       	ldd	r15, Y+5	; 0x05
    519e:	0c 81       	ldd	r16, Y+4	; 0x04
    51a0:	1b 81       	ldd	r17, Y+3	; 0x03
    51a2:	aa 81       	ldd	r26, Y+2	; 0x02
    51a4:	b9 81       	ldd	r27, Y+1	; 0x01
    51a6:	ce 0f       	add	r28, r30
    51a8:	d1 1d       	adc	r29, r1
    51aa:	0f b6       	in	r0, 0x3f	; 63
    51ac:	f8 94       	cli
    51ae:	de bf       	out	0x3e, r29	; 62
    51b0:	0f be       	out	0x3f, r0	; 63
    51b2:	cd bf       	out	0x3d, r28	; 61
    51b4:	ed 01       	movw	r28, r26
    51b6:	08 95       	ret

000051b8 <do_rand>:
    51b8:	af 92       	push	r10
    51ba:	bf 92       	push	r11
    51bc:	cf 92       	push	r12
    51be:	df 92       	push	r13
    51c0:	ef 92       	push	r14
    51c2:	ff 92       	push	r15
    51c4:	0f 93       	push	r16
    51c6:	1f 93       	push	r17
    51c8:	cf 93       	push	r28
    51ca:	df 93       	push	r29
    51cc:	ec 01       	movw	r28, r24
    51ce:	68 81       	ld	r22, Y
    51d0:	79 81       	ldd	r23, Y+1	; 0x01
    51d2:	8a 81       	ldd	r24, Y+2	; 0x02
    51d4:	9b 81       	ldd	r25, Y+3	; 0x03
    51d6:	61 15       	cp	r22, r1
    51d8:	71 05       	cpc	r23, r1
    51da:	81 05       	cpc	r24, r1
    51dc:	91 05       	cpc	r25, r1
    51de:	21 f4       	brne	.+8      	; 0x51e8 <do_rand+0x30>
    51e0:	64 e2       	ldi	r22, 0x24	; 36
    51e2:	79 ed       	ldi	r23, 0xD9	; 217
    51e4:	8b e5       	ldi	r24, 0x5B	; 91
    51e6:	97 e0       	ldi	r25, 0x07	; 7
    51e8:	2d e1       	ldi	r18, 0x1D	; 29
    51ea:	33 ef       	ldi	r19, 0xF3	; 243
    51ec:	41 e0       	ldi	r20, 0x01	; 1
    51ee:	50 e0       	ldi	r21, 0x00	; 0
    51f0:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <__divmodsi4>
    51f4:	79 01       	movw	r14, r18
    51f6:	8a 01       	movw	r16, r20
    51f8:	27 ea       	ldi	r18, 0xA7	; 167
    51fa:	31 e4       	ldi	r19, 0x41	; 65
    51fc:	40 e0       	ldi	r20, 0x00	; 0
    51fe:	50 e0       	ldi	r21, 0x00	; 0
    5200:	0e 94 5f 28 	call	0x50be	; 0x50be <__mulsi3>
    5204:	5b 01       	movw	r10, r22
    5206:	6c 01       	movw	r12, r24
    5208:	c8 01       	movw	r24, r16
    520a:	b7 01       	movw	r22, r14
    520c:	2c ee       	ldi	r18, 0xEC	; 236
    520e:	34 ef       	ldi	r19, 0xF4	; 244
    5210:	4f ef       	ldi	r20, 0xFF	; 255
    5212:	5f ef       	ldi	r21, 0xFF	; 255
    5214:	0e 94 5f 28 	call	0x50be	; 0x50be <__mulsi3>
    5218:	6a 0d       	add	r22, r10
    521a:	7b 1d       	adc	r23, r11
    521c:	8c 1d       	adc	r24, r12
    521e:	9d 1d       	adc	r25, r13
    5220:	97 ff       	sbrs	r25, 7
    5222:	04 c0       	rjmp	.+8      	; 0x522c <do_rand+0x74>
    5224:	61 50       	subi	r22, 0x01	; 1
    5226:	70 40       	sbci	r23, 0x00	; 0
    5228:	80 40       	sbci	r24, 0x00	; 0
    522a:	90 48       	sbci	r25, 0x80	; 128
    522c:	68 83       	st	Y, r22
    522e:	79 83       	std	Y+1, r23	; 0x01
    5230:	8a 83       	std	Y+2, r24	; 0x02
    5232:	9b 83       	std	Y+3, r25	; 0x03
    5234:	7f 77       	andi	r23, 0x7F	; 127
    5236:	cb 01       	movw	r24, r22
    5238:	df 91       	pop	r29
    523a:	cf 91       	pop	r28
    523c:	1f 91       	pop	r17
    523e:	0f 91       	pop	r16
    5240:	ff 90       	pop	r15
    5242:	ef 90       	pop	r14
    5244:	df 90       	pop	r13
    5246:	cf 90       	pop	r12
    5248:	bf 90       	pop	r11
    524a:	af 90       	pop	r10
    524c:	08 95       	ret

0000524e <rand_r>:
    524e:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <do_rand>
    5252:	08 95       	ret

00005254 <rand>:
    5254:	80 e2       	ldi	r24, 0x20	; 32
    5256:	93 e0       	ldi	r25, 0x03	; 3
    5258:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <do_rand>
    525c:	08 95       	ret

0000525e <srand>:
    525e:	a0 e0       	ldi	r26, 0x00	; 0
    5260:	b0 e0       	ldi	r27, 0x00	; 0
    5262:	80 93 20 03 	sts	0x0320, r24
    5266:	90 93 21 03 	sts	0x0321, r25
    526a:	a0 93 22 03 	sts	0x0322, r26
    526e:	b0 93 23 03 	sts	0x0323, r27
    5272:	08 95       	ret
    5274:	f5 d0       	rcall	.+490    	; 0x5460 <__fp_pscA>
    5276:	58 f0       	brcs	.+22     	; 0x528e <srand+0x30>
    5278:	80 e8       	ldi	r24, 0x80	; 128
    527a:	91 e0       	ldi	r25, 0x01	; 1
    527c:	09 f4       	brne	.+2      	; 0x5280 <srand+0x22>
    527e:	9e ef       	ldi	r25, 0xFE	; 254
    5280:	f6 d0       	rcall	.+492    	; 0x546e <__fp_pscB>
    5282:	28 f0       	brcs	.+10     	; 0x528e <srand+0x30>
    5284:	40 e8       	ldi	r20, 0x80	; 128
    5286:	51 e0       	ldi	r21, 0x01	; 1
    5288:	59 f4       	brne	.+22     	; 0x52a0 <atan2+0xe>
    528a:	5e ef       	ldi	r21, 0xFE	; 254
    528c:	09 c0       	rjmp	.+18     	; 0x52a0 <atan2+0xe>
    528e:	c0 c0       	rjmp	.+384    	; 0x5410 <__fp_nan>
    5290:	28 c1       	rjmp	.+592    	; 0x54e2 <__fp_zero>

00005292 <atan2>:
    5292:	e9 2f       	mov	r30, r25
    5294:	e0 78       	andi	r30, 0x80	; 128
    5296:	03 d1       	rcall	.+518    	; 0x549e <__fp_split3>
    5298:	68 f3       	brcs	.-38     	; 0x5274 <srand+0x16>
    529a:	09 2e       	mov	r0, r25
    529c:	05 2a       	or	r0, r21
    529e:	c1 f3       	breq	.-16     	; 0x5290 <srand+0x32>
    52a0:	26 17       	cp	r18, r22
    52a2:	37 07       	cpc	r19, r23
    52a4:	48 07       	cpc	r20, r24
    52a6:	59 07       	cpc	r21, r25
    52a8:	38 f0       	brcs	.+14     	; 0x52b8 <atan2+0x26>
    52aa:	0e 2e       	mov	r0, r30
    52ac:	07 f8       	bld	r0, 7
    52ae:	e0 25       	eor	r30, r0
    52b0:	69 f0       	breq	.+26     	; 0x52cc <atan2+0x3a>
    52b2:	e0 25       	eor	r30, r0
    52b4:	e0 64       	ori	r30, 0x40	; 64
    52b6:	0a c0       	rjmp	.+20     	; 0x52cc <atan2+0x3a>
    52b8:	ef 63       	ori	r30, 0x3F	; 63
    52ba:	07 f8       	bld	r0, 7
    52bc:	00 94       	com	r0
    52be:	07 fa       	bst	r0, 7
    52c0:	db 01       	movw	r26, r22
    52c2:	b9 01       	movw	r22, r18
    52c4:	9d 01       	movw	r18, r26
    52c6:	dc 01       	movw	r26, r24
    52c8:	ca 01       	movw	r24, r20
    52ca:	ad 01       	movw	r20, r26
    52cc:	ef 93       	push	r30
    52ce:	41 d0       	rcall	.+130    	; 0x5352 <__divsf3_pse>
    52d0:	d5 d0       	rcall	.+426    	; 0x547c <__fp_round>
    52d2:	0a d0       	rcall	.+20     	; 0x52e8 <atan>
    52d4:	5f 91       	pop	r21
    52d6:	55 23       	and	r21, r21
    52d8:	31 f0       	breq	.+12     	; 0x52e6 <atan2+0x54>
    52da:	2b ed       	ldi	r18, 0xDB	; 219
    52dc:	3f e0       	ldi	r19, 0x0F	; 15
    52de:	49 e4       	ldi	r20, 0x49	; 73
    52e0:	50 fd       	sbrc	r21, 0
    52e2:	49 ec       	ldi	r20, 0xC9	; 201
    52e4:	7c c1       	rjmp	.+760    	; 0x55de <__addsf3>
    52e6:	08 95       	ret

000052e8 <atan>:
    52e8:	df 93       	push	r29
    52ea:	dd 27       	eor	r29, r29
    52ec:	b9 2f       	mov	r27, r25
    52ee:	bf 77       	andi	r27, 0x7F	; 127
    52f0:	40 e8       	ldi	r20, 0x80	; 128
    52f2:	5f e3       	ldi	r21, 0x3F	; 63
    52f4:	16 16       	cp	r1, r22
    52f6:	17 06       	cpc	r1, r23
    52f8:	48 07       	cpc	r20, r24
    52fa:	5b 07       	cpc	r21, r27
    52fc:	10 f4       	brcc	.+4      	; 0x5302 <atan+0x1a>
    52fe:	d9 2f       	mov	r29, r25
    5300:	f7 d0       	rcall	.+494    	; 0x54f0 <inverse>
    5302:	9f 93       	push	r25
    5304:	8f 93       	push	r24
    5306:	7f 93       	push	r23
    5308:	6f 93       	push	r22
    530a:	5a d1       	rcall	.+692    	; 0x55c0 <square>
    530c:	ee e4       	ldi	r30, 0x4E	; 78
    530e:	f1 e0       	ldi	r31, 0x01	; 1
    5310:	82 d0       	rcall	.+260    	; 0x5416 <__fp_powser>
    5312:	b4 d0       	rcall	.+360    	; 0x547c <__fp_round>
    5314:	2f 91       	pop	r18
    5316:	3f 91       	pop	r19
    5318:	4f 91       	pop	r20
    531a:	5f 91       	pop	r21
    531c:	fa d0       	rcall	.+500    	; 0x5512 <__mulsf3x>
    531e:	dd 23       	and	r29, r29
    5320:	49 f0       	breq	.+18     	; 0x5334 <atan+0x4c>
    5322:	90 58       	subi	r25, 0x80	; 128
    5324:	a2 ea       	ldi	r26, 0xA2	; 162
    5326:	2a ed       	ldi	r18, 0xDA	; 218
    5328:	3f e0       	ldi	r19, 0x0F	; 15
    532a:	49 ec       	ldi	r20, 0xC9	; 201
    532c:	5f e3       	ldi	r21, 0x3F	; 63
    532e:	d0 78       	andi	r29, 0x80	; 128
    5330:	5d 27       	eor	r21, r29
    5332:	66 d1       	rcall	.+716    	; 0x5600 <__addsf3x>
    5334:	df 91       	pop	r29
    5336:	a2 c0       	rjmp	.+324    	; 0x547c <__fp_round>
    5338:	9a d0       	rcall	.+308    	; 0x546e <__fp_pscB>
    533a:	40 f0       	brcs	.+16     	; 0x534c <atan+0x64>
    533c:	91 d0       	rcall	.+290    	; 0x5460 <__fp_pscA>
    533e:	30 f0       	brcs	.+12     	; 0x534c <atan+0x64>
    5340:	21 f4       	brne	.+8      	; 0x534a <atan+0x62>
    5342:	5f 3f       	cpi	r21, 0xFF	; 255
    5344:	19 f0       	breq	.+6      	; 0x534c <atan+0x64>
    5346:	5e c0       	rjmp	.+188    	; 0x5404 <__fp_inf>
    5348:	51 11       	cpse	r21, r1
    534a:	cc c0       	rjmp	.+408    	; 0x54e4 <__fp_szero>
    534c:	61 c0       	rjmp	.+194    	; 0x5410 <__fp_nan>

0000534e <__divsf3x>:
    534e:	a7 d0       	rcall	.+334    	; 0x549e <__fp_split3>
    5350:	98 f3       	brcs	.-26     	; 0x5338 <atan+0x50>

00005352 <__divsf3_pse>:
    5352:	99 23       	and	r25, r25
    5354:	c9 f3       	breq	.-14     	; 0x5348 <atan+0x60>
    5356:	55 23       	and	r21, r21
    5358:	b1 f3       	breq	.-20     	; 0x5346 <atan+0x5e>
    535a:	95 1b       	sub	r25, r21
    535c:	55 0b       	sbc	r21, r21
    535e:	bb 27       	eor	r27, r27
    5360:	aa 27       	eor	r26, r26
    5362:	62 17       	cp	r22, r18
    5364:	73 07       	cpc	r23, r19
    5366:	84 07       	cpc	r24, r20
    5368:	38 f0       	brcs	.+14     	; 0x5378 <__divsf3_pse+0x26>
    536a:	9f 5f       	subi	r25, 0xFF	; 255
    536c:	5f 4f       	sbci	r21, 0xFF	; 255
    536e:	22 0f       	add	r18, r18
    5370:	33 1f       	adc	r19, r19
    5372:	44 1f       	adc	r20, r20
    5374:	aa 1f       	adc	r26, r26
    5376:	a9 f3       	breq	.-22     	; 0x5362 <__divsf3_pse+0x10>
    5378:	33 d0       	rcall	.+102    	; 0x53e0 <__divsf3_pse+0x8e>
    537a:	0e 2e       	mov	r0, r30
    537c:	3a f0       	brmi	.+14     	; 0x538c <__divsf3_pse+0x3a>
    537e:	e0 e8       	ldi	r30, 0x80	; 128
    5380:	30 d0       	rcall	.+96     	; 0x53e2 <__divsf3_pse+0x90>
    5382:	91 50       	subi	r25, 0x01	; 1
    5384:	50 40       	sbci	r21, 0x00	; 0
    5386:	e6 95       	lsr	r30
    5388:	00 1c       	adc	r0, r0
    538a:	ca f7       	brpl	.-14     	; 0x537e <__divsf3_pse+0x2c>
    538c:	29 d0       	rcall	.+82     	; 0x53e0 <__divsf3_pse+0x8e>
    538e:	fe 2f       	mov	r31, r30
    5390:	27 d0       	rcall	.+78     	; 0x53e0 <__divsf3_pse+0x8e>
    5392:	66 0f       	add	r22, r22
    5394:	77 1f       	adc	r23, r23
    5396:	88 1f       	adc	r24, r24
    5398:	bb 1f       	adc	r27, r27
    539a:	26 17       	cp	r18, r22
    539c:	37 07       	cpc	r19, r23
    539e:	48 07       	cpc	r20, r24
    53a0:	ab 07       	cpc	r26, r27
    53a2:	b0 e8       	ldi	r27, 0x80	; 128
    53a4:	09 f0       	breq	.+2      	; 0x53a8 <__divsf3_pse+0x56>
    53a6:	bb 0b       	sbc	r27, r27
    53a8:	80 2d       	mov	r24, r0
    53aa:	bf 01       	movw	r22, r30
    53ac:	ff 27       	eor	r31, r31
    53ae:	93 58       	subi	r25, 0x83	; 131
    53b0:	5f 4f       	sbci	r21, 0xFF	; 255
    53b2:	2a f0       	brmi	.+10     	; 0x53be <__divsf3_pse+0x6c>
    53b4:	9e 3f       	cpi	r25, 0xFE	; 254
    53b6:	51 05       	cpc	r21, r1
    53b8:	68 f0       	brcs	.+26     	; 0x53d4 <__divsf3_pse+0x82>
    53ba:	24 c0       	rjmp	.+72     	; 0x5404 <__fp_inf>
    53bc:	93 c0       	rjmp	.+294    	; 0x54e4 <__fp_szero>
    53be:	5f 3f       	cpi	r21, 0xFF	; 255
    53c0:	ec f3       	brlt	.-6      	; 0x53bc <__divsf3_pse+0x6a>
    53c2:	98 3e       	cpi	r25, 0xE8	; 232
    53c4:	dc f3       	brlt	.-10     	; 0x53bc <__divsf3_pse+0x6a>
    53c6:	86 95       	lsr	r24
    53c8:	77 95       	ror	r23
    53ca:	67 95       	ror	r22
    53cc:	b7 95       	ror	r27
    53ce:	f7 95       	ror	r31
    53d0:	9f 5f       	subi	r25, 0xFF	; 255
    53d2:	c9 f7       	brne	.-14     	; 0x53c6 <__divsf3_pse+0x74>
    53d4:	88 0f       	add	r24, r24
    53d6:	91 1d       	adc	r25, r1
    53d8:	96 95       	lsr	r25
    53da:	87 95       	ror	r24
    53dc:	97 f9       	bld	r25, 7
    53de:	08 95       	ret
    53e0:	e1 e0       	ldi	r30, 0x01	; 1
    53e2:	66 0f       	add	r22, r22
    53e4:	77 1f       	adc	r23, r23
    53e6:	88 1f       	adc	r24, r24
    53e8:	bb 1f       	adc	r27, r27
    53ea:	62 17       	cp	r22, r18
    53ec:	73 07       	cpc	r23, r19
    53ee:	84 07       	cpc	r24, r20
    53f0:	ba 07       	cpc	r27, r26
    53f2:	20 f0       	brcs	.+8      	; 0x53fc <__divsf3_pse+0xaa>
    53f4:	62 1b       	sub	r22, r18
    53f6:	73 0b       	sbc	r23, r19
    53f8:	84 0b       	sbc	r24, r20
    53fa:	ba 0b       	sbc	r27, r26
    53fc:	ee 1f       	adc	r30, r30
    53fe:	88 f7       	brcc	.-30     	; 0x53e2 <__divsf3_pse+0x90>
    5400:	e0 95       	com	r30
    5402:	08 95       	ret

00005404 <__fp_inf>:
    5404:	97 f9       	bld	r25, 7
    5406:	9f 67       	ori	r25, 0x7F	; 127
    5408:	80 e8       	ldi	r24, 0x80	; 128
    540a:	70 e0       	ldi	r23, 0x00	; 0
    540c:	60 e0       	ldi	r22, 0x00	; 0
    540e:	08 95       	ret

00005410 <__fp_nan>:
    5410:	9f ef       	ldi	r25, 0xFF	; 255
    5412:	80 ec       	ldi	r24, 0xC0	; 192
    5414:	08 95       	ret

00005416 <__fp_powser>:
    5416:	df 93       	push	r29
    5418:	cf 93       	push	r28
    541a:	1f 93       	push	r17
    541c:	0f 93       	push	r16
    541e:	ff 92       	push	r15
    5420:	ef 92       	push	r14
    5422:	df 92       	push	r13
    5424:	7b 01       	movw	r14, r22
    5426:	8c 01       	movw	r16, r24
    5428:	68 94       	set
    542a:	05 c0       	rjmp	.+10     	; 0x5436 <__fp_powser+0x20>
    542c:	da 2e       	mov	r13, r26
    542e:	ef 01       	movw	r28, r30
    5430:	70 d0       	rcall	.+224    	; 0x5512 <__mulsf3x>
    5432:	fe 01       	movw	r30, r28
    5434:	e8 94       	clt
    5436:	a5 91       	lpm	r26, Z+
    5438:	25 91       	lpm	r18, Z+
    543a:	35 91       	lpm	r19, Z+
    543c:	45 91       	lpm	r20, Z+
    543e:	55 91       	lpm	r21, Z+
    5440:	ae f3       	brts	.-22     	; 0x542c <__fp_powser+0x16>
    5442:	ef 01       	movw	r28, r30
    5444:	dd d0       	rcall	.+442    	; 0x5600 <__addsf3x>
    5446:	fe 01       	movw	r30, r28
    5448:	97 01       	movw	r18, r14
    544a:	a8 01       	movw	r20, r16
    544c:	da 94       	dec	r13
    544e:	79 f7       	brne	.-34     	; 0x542e <__fp_powser+0x18>
    5450:	df 90       	pop	r13
    5452:	ef 90       	pop	r14
    5454:	ff 90       	pop	r15
    5456:	0f 91       	pop	r16
    5458:	1f 91       	pop	r17
    545a:	cf 91       	pop	r28
    545c:	df 91       	pop	r29
    545e:	08 95       	ret

00005460 <__fp_pscA>:
    5460:	00 24       	eor	r0, r0
    5462:	0a 94       	dec	r0
    5464:	16 16       	cp	r1, r22
    5466:	17 06       	cpc	r1, r23
    5468:	18 06       	cpc	r1, r24
    546a:	09 06       	cpc	r0, r25
    546c:	08 95       	ret

0000546e <__fp_pscB>:
    546e:	00 24       	eor	r0, r0
    5470:	0a 94       	dec	r0
    5472:	12 16       	cp	r1, r18
    5474:	13 06       	cpc	r1, r19
    5476:	14 06       	cpc	r1, r20
    5478:	05 06       	cpc	r0, r21
    547a:	08 95       	ret

0000547c <__fp_round>:
    547c:	09 2e       	mov	r0, r25
    547e:	03 94       	inc	r0
    5480:	00 0c       	add	r0, r0
    5482:	11 f4       	brne	.+4      	; 0x5488 <__fp_round+0xc>
    5484:	88 23       	and	r24, r24
    5486:	52 f0       	brmi	.+20     	; 0x549c <__fp_round+0x20>
    5488:	bb 0f       	add	r27, r27
    548a:	40 f4       	brcc	.+16     	; 0x549c <__fp_round+0x20>
    548c:	bf 2b       	or	r27, r31
    548e:	11 f4       	brne	.+4      	; 0x5494 <__fp_round+0x18>
    5490:	60 ff       	sbrs	r22, 0
    5492:	04 c0       	rjmp	.+8      	; 0x549c <__fp_round+0x20>
    5494:	6f 5f       	subi	r22, 0xFF	; 255
    5496:	7f 4f       	sbci	r23, 0xFF	; 255
    5498:	8f 4f       	sbci	r24, 0xFF	; 255
    549a:	9f 4f       	sbci	r25, 0xFF	; 255
    549c:	08 95       	ret

0000549e <__fp_split3>:
    549e:	57 fd       	sbrc	r21, 7
    54a0:	90 58       	subi	r25, 0x80	; 128
    54a2:	44 0f       	add	r20, r20
    54a4:	55 1f       	adc	r21, r21
    54a6:	59 f0       	breq	.+22     	; 0x54be <__fp_splitA+0x10>
    54a8:	5f 3f       	cpi	r21, 0xFF	; 255
    54aa:	71 f0       	breq	.+28     	; 0x54c8 <__fp_splitA+0x1a>
    54ac:	47 95       	ror	r20

000054ae <__fp_splitA>:
    54ae:	88 0f       	add	r24, r24
    54b0:	97 fb       	bst	r25, 7
    54b2:	99 1f       	adc	r25, r25
    54b4:	61 f0       	breq	.+24     	; 0x54ce <__fp_splitA+0x20>
    54b6:	9f 3f       	cpi	r25, 0xFF	; 255
    54b8:	79 f0       	breq	.+30     	; 0x54d8 <__fp_splitA+0x2a>
    54ba:	87 95       	ror	r24
    54bc:	08 95       	ret
    54be:	12 16       	cp	r1, r18
    54c0:	13 06       	cpc	r1, r19
    54c2:	14 06       	cpc	r1, r20
    54c4:	55 1f       	adc	r21, r21
    54c6:	f2 cf       	rjmp	.-28     	; 0x54ac <__fp_split3+0xe>
    54c8:	46 95       	lsr	r20
    54ca:	f1 df       	rcall	.-30     	; 0x54ae <__fp_splitA>
    54cc:	08 c0       	rjmp	.+16     	; 0x54de <__fp_splitA+0x30>
    54ce:	16 16       	cp	r1, r22
    54d0:	17 06       	cpc	r1, r23
    54d2:	18 06       	cpc	r1, r24
    54d4:	99 1f       	adc	r25, r25
    54d6:	f1 cf       	rjmp	.-30     	; 0x54ba <__fp_splitA+0xc>
    54d8:	86 95       	lsr	r24
    54da:	71 05       	cpc	r23, r1
    54dc:	61 05       	cpc	r22, r1
    54de:	08 94       	sec
    54e0:	08 95       	ret

000054e2 <__fp_zero>:
    54e2:	e8 94       	clt

000054e4 <__fp_szero>:
    54e4:	bb 27       	eor	r27, r27
    54e6:	66 27       	eor	r22, r22
    54e8:	77 27       	eor	r23, r23
    54ea:	cb 01       	movw	r24, r22
    54ec:	97 f9       	bld	r25, 7
    54ee:	08 95       	ret

000054f0 <inverse>:
    54f0:	9b 01       	movw	r18, r22
    54f2:	ac 01       	movw	r20, r24
    54f4:	60 e0       	ldi	r22, 0x00	; 0
    54f6:	70 e0       	ldi	r23, 0x00	; 0
    54f8:	80 e8       	ldi	r24, 0x80	; 128
    54fa:	9f e3       	ldi	r25, 0x3F	; 63
    54fc:	d4 c0       	rjmp	.+424    	; 0x56a6 <__divsf3>
    54fe:	b0 df       	rcall	.-160    	; 0x5460 <__fp_pscA>
    5500:	28 f0       	brcs	.+10     	; 0x550c <inverse+0x1c>
    5502:	b5 df       	rcall	.-150    	; 0x546e <__fp_pscB>
    5504:	18 f0       	brcs	.+6      	; 0x550c <inverse+0x1c>
    5506:	95 23       	and	r25, r21
    5508:	09 f0       	breq	.+2      	; 0x550c <inverse+0x1c>
    550a:	7c cf       	rjmp	.-264    	; 0x5404 <__fp_inf>
    550c:	81 cf       	rjmp	.-254    	; 0x5410 <__fp_nan>
    550e:	11 24       	eor	r1, r1
    5510:	e9 cf       	rjmp	.-46     	; 0x54e4 <__fp_szero>

00005512 <__mulsf3x>:
    5512:	c5 df       	rcall	.-118    	; 0x549e <__fp_split3>
    5514:	a0 f3       	brcs	.-24     	; 0x54fe <inverse+0xe>

00005516 <__mulsf3_pse>:
    5516:	95 9f       	mul	r25, r21
    5518:	d1 f3       	breq	.-12     	; 0x550e <inverse+0x1e>
    551a:	95 0f       	add	r25, r21
    551c:	50 e0       	ldi	r21, 0x00	; 0
    551e:	55 1f       	adc	r21, r21
    5520:	62 9f       	mul	r22, r18
    5522:	f0 01       	movw	r30, r0
    5524:	72 9f       	mul	r23, r18
    5526:	bb 27       	eor	r27, r27
    5528:	f0 0d       	add	r31, r0
    552a:	b1 1d       	adc	r27, r1
    552c:	63 9f       	mul	r22, r19
    552e:	aa 27       	eor	r26, r26
    5530:	f0 0d       	add	r31, r0
    5532:	b1 1d       	adc	r27, r1
    5534:	aa 1f       	adc	r26, r26
    5536:	64 9f       	mul	r22, r20
    5538:	66 27       	eor	r22, r22
    553a:	b0 0d       	add	r27, r0
    553c:	a1 1d       	adc	r26, r1
    553e:	66 1f       	adc	r22, r22
    5540:	82 9f       	mul	r24, r18
    5542:	22 27       	eor	r18, r18
    5544:	b0 0d       	add	r27, r0
    5546:	a1 1d       	adc	r26, r1
    5548:	62 1f       	adc	r22, r18
    554a:	73 9f       	mul	r23, r19
    554c:	b0 0d       	add	r27, r0
    554e:	a1 1d       	adc	r26, r1
    5550:	62 1f       	adc	r22, r18
    5552:	83 9f       	mul	r24, r19
    5554:	a0 0d       	add	r26, r0
    5556:	61 1d       	adc	r22, r1
    5558:	22 1f       	adc	r18, r18
    555a:	74 9f       	mul	r23, r20
    555c:	33 27       	eor	r19, r19
    555e:	a0 0d       	add	r26, r0
    5560:	61 1d       	adc	r22, r1
    5562:	23 1f       	adc	r18, r19
    5564:	84 9f       	mul	r24, r20
    5566:	60 0d       	add	r22, r0
    5568:	21 1d       	adc	r18, r1
    556a:	82 2f       	mov	r24, r18
    556c:	76 2f       	mov	r23, r22
    556e:	6a 2f       	mov	r22, r26
    5570:	11 24       	eor	r1, r1
    5572:	9f 57       	subi	r25, 0x7F	; 127
    5574:	50 40       	sbci	r21, 0x00	; 0
    5576:	8a f0       	brmi	.+34     	; 0x559a <__mulsf3_pse+0x84>
    5578:	e1 f0       	breq	.+56     	; 0x55b2 <__mulsf3_pse+0x9c>
    557a:	88 23       	and	r24, r24
    557c:	4a f0       	brmi	.+18     	; 0x5590 <__mulsf3_pse+0x7a>
    557e:	ee 0f       	add	r30, r30
    5580:	ff 1f       	adc	r31, r31
    5582:	bb 1f       	adc	r27, r27
    5584:	66 1f       	adc	r22, r22
    5586:	77 1f       	adc	r23, r23
    5588:	88 1f       	adc	r24, r24
    558a:	91 50       	subi	r25, 0x01	; 1
    558c:	50 40       	sbci	r21, 0x00	; 0
    558e:	a9 f7       	brne	.-22     	; 0x557a <__mulsf3_pse+0x64>
    5590:	9e 3f       	cpi	r25, 0xFE	; 254
    5592:	51 05       	cpc	r21, r1
    5594:	70 f0       	brcs	.+28     	; 0x55b2 <__mulsf3_pse+0x9c>
    5596:	36 cf       	rjmp	.-404    	; 0x5404 <__fp_inf>
    5598:	a5 cf       	rjmp	.-182    	; 0x54e4 <__fp_szero>
    559a:	5f 3f       	cpi	r21, 0xFF	; 255
    559c:	ec f3       	brlt	.-6      	; 0x5598 <__mulsf3_pse+0x82>
    559e:	98 3e       	cpi	r25, 0xE8	; 232
    55a0:	dc f3       	brlt	.-10     	; 0x5598 <__mulsf3_pse+0x82>
    55a2:	86 95       	lsr	r24
    55a4:	77 95       	ror	r23
    55a6:	67 95       	ror	r22
    55a8:	b7 95       	ror	r27
    55aa:	f7 95       	ror	r31
    55ac:	e7 95       	ror	r30
    55ae:	9f 5f       	subi	r25, 0xFF	; 255
    55b0:	c1 f7       	brne	.-16     	; 0x55a2 <__mulsf3_pse+0x8c>
    55b2:	fe 2b       	or	r31, r30
    55b4:	88 0f       	add	r24, r24
    55b6:	91 1d       	adc	r25, r1
    55b8:	96 95       	lsr	r25
    55ba:	87 95       	ror	r24
    55bc:	97 f9       	bld	r25, 7
    55be:	08 95       	ret

000055c0 <square>:
    55c0:	9b 01       	movw	r18, r22
    55c2:	ac 01       	movw	r20, r24
    55c4:	2f ca       	rjmp	.-2978   	; 0x4a24 <__mulsf3>

000055c6 <__eerd_word_m2560>:
    55c6:	a8 e1       	ldi	r26, 0x18	; 24
    55c8:	b0 e0       	ldi	r27, 0x00	; 0
    55ca:	42 e0       	ldi	r20, 0x02	; 2
    55cc:	50 e0       	ldi	r21, 0x00	; 0
    55ce:	0c 94 57 2b 	jmp	0x56ae	; 0x56ae <__eerd_blraw_m2560>

000055d2 <__eewr_word_m2560>:
    55d2:	0e 94 65 2b 	call	0x56ca	; 0x56ca <__eewr_byte_m2560>
    55d6:	27 2f       	mov	r18, r23
    55d8:	0c 94 66 2b 	jmp	0x56cc	; 0x56cc <__eewr_r18_m2560>

000055dc <__subsf3>:
    55dc:	50 58       	subi	r21, 0x80	; 128

000055de <__addsf3>:
    55de:	bb 27       	eor	r27, r27
    55e0:	aa 27       	eor	r26, r26
    55e2:	0e d0       	rcall	.+28     	; 0x5600 <__addsf3x>
    55e4:	4b cf       	rjmp	.-362    	; 0x547c <__fp_round>
    55e6:	3c df       	rcall	.-392    	; 0x5460 <__fp_pscA>
    55e8:	30 f0       	brcs	.+12     	; 0x55f6 <__addsf3+0x18>
    55ea:	41 df       	rcall	.-382    	; 0x546e <__fp_pscB>
    55ec:	20 f0       	brcs	.+8      	; 0x55f6 <__addsf3+0x18>
    55ee:	31 f4       	brne	.+12     	; 0x55fc <__addsf3+0x1e>
    55f0:	9f 3f       	cpi	r25, 0xFF	; 255
    55f2:	11 f4       	brne	.+4      	; 0x55f8 <__addsf3+0x1a>
    55f4:	1e f4       	brtc	.+6      	; 0x55fc <__addsf3+0x1e>
    55f6:	0c cf       	rjmp	.-488    	; 0x5410 <__fp_nan>
    55f8:	0e f4       	brtc	.+2      	; 0x55fc <__addsf3+0x1e>
    55fa:	e0 95       	com	r30
    55fc:	e7 fb       	bst	r30, 7
    55fe:	02 cf       	rjmp	.-508    	; 0x5404 <__fp_inf>

00005600 <__addsf3x>:
    5600:	e9 2f       	mov	r30, r25
    5602:	4d df       	rcall	.-358    	; 0x549e <__fp_split3>
    5604:	80 f3       	brcs	.-32     	; 0x55e6 <__addsf3+0x8>
    5606:	ba 17       	cp	r27, r26
    5608:	62 07       	cpc	r22, r18
    560a:	73 07       	cpc	r23, r19
    560c:	84 07       	cpc	r24, r20
    560e:	95 07       	cpc	r25, r21
    5610:	18 f0       	brcs	.+6      	; 0x5618 <__addsf3x+0x18>
    5612:	71 f4       	brne	.+28     	; 0x5630 <__addsf3x+0x30>
    5614:	9e f5       	brtc	.+102    	; 0x567c <__addsf3x+0x7c>
    5616:	65 cf       	rjmp	.-310    	; 0x54e2 <__fp_zero>
    5618:	0e f4       	brtc	.+2      	; 0x561c <__addsf3x+0x1c>
    561a:	e0 95       	com	r30
    561c:	0b 2e       	mov	r0, r27
    561e:	ba 2f       	mov	r27, r26
    5620:	a0 2d       	mov	r26, r0
    5622:	0b 01       	movw	r0, r22
    5624:	b9 01       	movw	r22, r18
    5626:	90 01       	movw	r18, r0
    5628:	0c 01       	movw	r0, r24
    562a:	ca 01       	movw	r24, r20
    562c:	a0 01       	movw	r20, r0
    562e:	11 24       	eor	r1, r1
    5630:	ff 27       	eor	r31, r31
    5632:	59 1b       	sub	r21, r25
    5634:	99 f0       	breq	.+38     	; 0x565c <__addsf3x+0x5c>
    5636:	59 3f       	cpi	r21, 0xF9	; 249
    5638:	50 f4       	brcc	.+20     	; 0x564e <__addsf3x+0x4e>
    563a:	50 3e       	cpi	r21, 0xE0	; 224
    563c:	68 f1       	brcs	.+90     	; 0x5698 <__addsf3x+0x98>
    563e:	1a 16       	cp	r1, r26
    5640:	f0 40       	sbci	r31, 0x00	; 0
    5642:	a2 2f       	mov	r26, r18
    5644:	23 2f       	mov	r18, r19
    5646:	34 2f       	mov	r19, r20
    5648:	44 27       	eor	r20, r20
    564a:	58 5f       	subi	r21, 0xF8	; 248
    564c:	f3 cf       	rjmp	.-26     	; 0x5634 <__addsf3x+0x34>
    564e:	46 95       	lsr	r20
    5650:	37 95       	ror	r19
    5652:	27 95       	ror	r18
    5654:	a7 95       	ror	r26
    5656:	f0 40       	sbci	r31, 0x00	; 0
    5658:	53 95       	inc	r21
    565a:	c9 f7       	brne	.-14     	; 0x564e <__addsf3x+0x4e>
    565c:	7e f4       	brtc	.+30     	; 0x567c <__addsf3x+0x7c>
    565e:	1f 16       	cp	r1, r31
    5660:	ba 0b       	sbc	r27, r26
    5662:	62 0b       	sbc	r22, r18
    5664:	73 0b       	sbc	r23, r19
    5666:	84 0b       	sbc	r24, r20
    5668:	ba f0       	brmi	.+46     	; 0x5698 <__addsf3x+0x98>
    566a:	91 50       	subi	r25, 0x01	; 1
    566c:	a1 f0       	breq	.+40     	; 0x5696 <__addsf3x+0x96>
    566e:	ff 0f       	add	r31, r31
    5670:	bb 1f       	adc	r27, r27
    5672:	66 1f       	adc	r22, r22
    5674:	77 1f       	adc	r23, r23
    5676:	88 1f       	adc	r24, r24
    5678:	c2 f7       	brpl	.-16     	; 0x566a <__addsf3x+0x6a>
    567a:	0e c0       	rjmp	.+28     	; 0x5698 <__addsf3x+0x98>
    567c:	ba 0f       	add	r27, r26
    567e:	62 1f       	adc	r22, r18
    5680:	73 1f       	adc	r23, r19
    5682:	84 1f       	adc	r24, r20
    5684:	48 f4       	brcc	.+18     	; 0x5698 <__addsf3x+0x98>
    5686:	87 95       	ror	r24
    5688:	77 95       	ror	r23
    568a:	67 95       	ror	r22
    568c:	b7 95       	ror	r27
    568e:	f7 95       	ror	r31
    5690:	9e 3f       	cpi	r25, 0xFE	; 254
    5692:	08 f0       	brcs	.+2      	; 0x5696 <__addsf3x+0x96>
    5694:	b3 cf       	rjmp	.-154    	; 0x55fc <__addsf3+0x1e>
    5696:	93 95       	inc	r25
    5698:	88 0f       	add	r24, r24
    569a:	08 f0       	brcs	.+2      	; 0x569e <__addsf3x+0x9e>
    569c:	99 27       	eor	r25, r25
    569e:	ee 0f       	add	r30, r30
    56a0:	97 95       	ror	r25
    56a2:	87 95       	ror	r24
    56a4:	08 95       	ret

000056a6 <__divsf3>:
    56a6:	53 de       	rcall	.-858    	; 0x534e <__divsf3x>
    56a8:	e9 ce       	rjmp	.-558    	; 0x547c <__fp_round>

000056aa <__eerd_block_m2560>:
    56aa:	dc 01       	movw	r26, r24
    56ac:	cb 01       	movw	r24, r22

000056ae <__eerd_blraw_m2560>:
    56ae:	fc 01       	movw	r30, r24
    56b0:	f9 99       	sbic	0x1f, 1	; 31
    56b2:	fe cf       	rjmp	.-4      	; 0x56b0 <__eerd_blraw_m2560+0x2>
    56b4:	06 c0       	rjmp	.+12     	; 0x56c2 <__eerd_blraw_m2560+0x14>
    56b6:	f2 bd       	out	0x22, r31	; 34
    56b8:	e1 bd       	out	0x21, r30	; 33
    56ba:	f8 9a       	sbi	0x1f, 0	; 31
    56bc:	31 96       	adiw	r30, 0x01	; 1
    56be:	00 b4       	in	r0, 0x20	; 32
    56c0:	0d 92       	st	X+, r0
    56c2:	41 50       	subi	r20, 0x01	; 1
    56c4:	50 40       	sbci	r21, 0x00	; 0
    56c6:	b8 f7       	brcc	.-18     	; 0x56b6 <__eerd_blraw_m2560+0x8>
    56c8:	08 95       	ret

000056ca <__eewr_byte_m2560>:
    56ca:	26 2f       	mov	r18, r22

000056cc <__eewr_r18_m2560>:
    56cc:	f9 99       	sbic	0x1f, 1	; 31
    56ce:	fe cf       	rjmp	.-4      	; 0x56cc <__eewr_r18_m2560>
    56d0:	1f ba       	out	0x1f, r1	; 31
    56d2:	92 bd       	out	0x22, r25	; 34
    56d4:	81 bd       	out	0x21, r24	; 33
    56d6:	20 bd       	out	0x20, r18	; 32
    56d8:	0f b6       	in	r0, 0x3f	; 63
    56da:	f8 94       	cli
    56dc:	fa 9a       	sbi	0x1f, 2	; 31
    56de:	f9 9a       	sbi	0x1f, 1	; 31
    56e0:	0f be       	out	0x3f, r0	; 63
    56e2:	01 96       	adiw	r24, 0x01	; 1
    56e4:	08 95       	ret

000056e6 <__divmodsi4>:
    56e6:	97 fb       	bst	r25, 7
    56e8:	09 2e       	mov	r0, r25
    56ea:	05 26       	eor	r0, r21
    56ec:	0e d0       	rcall	.+28     	; 0x570a <__divmodsi4_neg1>
    56ee:	57 fd       	sbrc	r21, 7
    56f0:	04 d0       	rcall	.+8      	; 0x56fa <__divmodsi4_neg2>
    56f2:	14 d0       	rcall	.+40     	; 0x571c <__udivmodsi4>
    56f4:	0a d0       	rcall	.+20     	; 0x570a <__divmodsi4_neg1>
    56f6:	00 1c       	adc	r0, r0
    56f8:	38 f4       	brcc	.+14     	; 0x5708 <__divmodsi4_exit>

000056fa <__divmodsi4_neg2>:
    56fa:	50 95       	com	r21
    56fc:	40 95       	com	r20
    56fe:	30 95       	com	r19
    5700:	21 95       	neg	r18
    5702:	3f 4f       	sbci	r19, 0xFF	; 255
    5704:	4f 4f       	sbci	r20, 0xFF	; 255
    5706:	5f 4f       	sbci	r21, 0xFF	; 255

00005708 <__divmodsi4_exit>:
    5708:	08 95       	ret

0000570a <__divmodsi4_neg1>:
    570a:	f6 f7       	brtc	.-4      	; 0x5708 <__divmodsi4_exit>
    570c:	90 95       	com	r25
    570e:	80 95       	com	r24
    5710:	70 95       	com	r23
    5712:	61 95       	neg	r22
    5714:	7f 4f       	sbci	r23, 0xFF	; 255
    5716:	8f 4f       	sbci	r24, 0xFF	; 255
    5718:	9f 4f       	sbci	r25, 0xFF	; 255
    571a:	08 95       	ret

0000571c <__udivmodsi4>:
    571c:	a1 e2       	ldi	r26, 0x21	; 33
    571e:	1a 2e       	mov	r1, r26
    5720:	aa 1b       	sub	r26, r26
    5722:	bb 1b       	sub	r27, r27
    5724:	fd 01       	movw	r30, r26
    5726:	0d c0       	rjmp	.+26     	; 0x5742 <__udivmodsi4_ep>

00005728 <__udivmodsi4_loop>:
    5728:	aa 1f       	adc	r26, r26
    572a:	bb 1f       	adc	r27, r27
    572c:	ee 1f       	adc	r30, r30
    572e:	ff 1f       	adc	r31, r31
    5730:	a2 17       	cp	r26, r18
    5732:	b3 07       	cpc	r27, r19
    5734:	e4 07       	cpc	r30, r20
    5736:	f5 07       	cpc	r31, r21
    5738:	20 f0       	brcs	.+8      	; 0x5742 <__udivmodsi4_ep>
    573a:	a2 1b       	sub	r26, r18
    573c:	b3 0b       	sbc	r27, r19
    573e:	e4 0b       	sbc	r30, r20
    5740:	f5 0b       	sbc	r31, r21

00005742 <__udivmodsi4_ep>:
    5742:	66 1f       	adc	r22, r22
    5744:	77 1f       	adc	r23, r23
    5746:	88 1f       	adc	r24, r24
    5748:	99 1f       	adc	r25, r25
    574a:	1a 94       	dec	r1
    574c:	69 f7       	brne	.-38     	; 0x5728 <__udivmodsi4_loop>
    574e:	60 95       	com	r22
    5750:	70 95       	com	r23
    5752:	80 95       	com	r24
    5754:	90 95       	com	r25
    5756:	9b 01       	movw	r18, r22
    5758:	ac 01       	movw	r20, r24
    575a:	bd 01       	movw	r22, r26
    575c:	cf 01       	movw	r24, r30
    575e:	08 95       	ret

00005760 <_exit>:
    5760:	ff cf       	rjmp	.-2      	; 0x5760 <_exit>
