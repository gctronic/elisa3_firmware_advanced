
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  00006264  000062f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006264  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028a  0080021e  0080021e  00006316  2**0
                  ALLOC
  3 .stab         0000324c  00000000  00000000  00006318  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cca  00000000  00000000  00009564  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001f8  00000000  00000000  0000a22e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000011f4  00000000  00000000  0000a426  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003c6a  00000000  00000000  0000b61a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000e69  00000000  00000000  0000f284  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005182  00000000  00000000  000100ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000720  00000000  00000000  00015270  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001008  00000000  00000000  00015990  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000014aa  00000000  00000000  00016998  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000219  00000000  00000000  00017e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  0001805b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__vector_32>
      84:	0c 94 f3 22 	jmp	0x45e6	; 0x45e6 <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 50 22 	jmp	0x44a0	; 0x44a0 <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 24 22 	jmp	0x4448	; 0x4448 <__vector_42>
      ac:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 8d 21 	jmp	0x431a	; 0x431a <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	1e 12       	cpse	r1, r30
      e6:	02 12       	cpse	r0, r18
      e8:	d0 11       	cpse	r29, r0
      ea:	93 12       	cpse	r9, r19
      ec:	5d 12       	cpse	r5, r29
      ee:	86 12       	cpse	r8, r22
      f0:	a7 11       	cpse	r26, r7
      f2:	8b 11       	cpse	r24, r11
      f4:	5e 11       	cpse	r21, r14
      f6:	46 11       	cpse	r20, r6
      f8:	e7 10       	cpse	r14, r7
      fa:	e7 10       	cpse	r14, r7
      fc:	e7 10       	cpse	r14, r7
      fe:	e7 10       	cpse	r14, r7
     100:	e7 10       	cpse	r14, r7
     102:	e7 10       	cpse	r14, r7
     104:	3a 11       	cpse	r19, r10
     106:	2f 11       	cpse	r18, r15
     108:	e7 10       	cpse	r14, r7
     10a:	e7 10       	cpse	r14, r7
     10c:	e7 10       	cpse	r14, r7
     10e:	e7 10       	cpse	r14, r7
     110:	e7 10       	cpse	r14, r7
     112:	e7 10       	cpse	r14, r7
     114:	e7 10       	cpse	r14, r7
     116:	e7 10       	cpse	r14, r7
     118:	e7 10       	cpse	r14, r7
     11a:	e7 10       	cpse	r14, r7
     11c:	e7 10       	cpse	r14, r7
     11e:	e7 10       	cpse	r14, r7
     120:	5e 11       	cpse	r21, r14
     122:	d0 11       	cpse	r29, r0
     124:	23 11       	cpse	r18, r3
     126:	1e 11       	cpse	r17, r14
     128:	e7 10       	cpse	r14, r7
     12a:	e7 10       	cpse	r14, r7
     12c:	e7 10       	cpse	r14, r7
     12e:	e7 10       	cpse	r14, r7
     130:	e7 10       	cpse	r14, r7
     132:	e7 10       	cpse	r14, r7
     134:	e7 10       	cpse	r14, r7
     136:	e7 10       	cpse	r14, r7
     138:	e7 10       	cpse	r14, r7
     13a:	e7 10       	cpse	r14, r7
     13c:	e7 10       	cpse	r14, r7
     13e:	e7 10       	cpse	r14, r7
     140:	5d 12       	cpse	r5, r29
     142:	a7 11       	cpse	r26, r7
     144:	e7 10       	cpse	r14, r7
     146:	e7 10       	cpse	r14, r7
     148:	1e 12       	cpse	r1, r30
     14a:	86 12       	cpse	r8, r22
     14c:	47 12       	cpse	r4, r23
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e4 e6       	ldi	r30, 0x64	; 100
     1b2:	f2 e6       	ldi	r31, 0x62	; 98
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ae 31       	cpi	r26, 0x1E	; 30
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	14 e0       	ldi	r17, 0x04	; 4
     1c2:	ae e1       	ldi	r26, 0x1E	; 30
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a8 3a       	cpi	r26, 0xA8	; 168
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 31 31 	jmp	0x6262	; 0x6262 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <main+0x26>
     202:	0f 92       	push	r0
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     208:	0e 94 67 19 	call	0x32ce	; 0x32ce <initPeripherals>

	calibrateSensors();
     20c:	0e 94 59 28 	call	0x50b2	; 0x50b2 <calibrateSensors>

	initBehaviors();
     210:	0e 94 09 23 	call	0x4612	; 0x4612 <initBehaviors>

	startTime = getTime100MicroSec();
     214:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     21c:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
     220:	9b 01       	movw	r18, r22
     222:	ac 01       	movw	r20, r24
     224:	60 93 59 04 	sts	0x0459, r22
     228:	30 93 5a 04 	sts	0x045A, r19
     22c:	40 93 5b 04 	sts	0x045B, r20
     230:	50 93 5c 04 	sts	0x045C, r21
     234:	10 92 5d 04 	sts	0x045D, r1
     238:	10 92 5e 04 	sts	0x045E, r1
     23c:	10 92 5f 04 	sts	0x045F, r1
     240:	10 92 60 04 	sts	0x0460, r1
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     244:	aa 24       	eor	r10, r10
     246:	bb 24       	eor	r11, r11


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
     24e:	1b 82       	std	Y+3, r1	; 0x03
     250:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     252:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     254:	22 24       	eor	r2, r2
     256:	23 94       	inc	r2

	speedStepCounter = getTime100MicroSec();

	while(1) {

		currentSelector = getSelector();	// update selector position
     258:	0e 94 42 19 	call	0x3284	; 0x3284 <getSelector>
     25c:	80 93 49 04 	sts	0x0449, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     260:	0e 94 99 27 	call	0x4f32	; 0x4f32 <readAccelXYZ>

		computeAngle();
     264:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     268:	80 91 49 04 	lds	r24, 0x0449
     26c:	87 30       	cpi	r24, 0x07	; 7
     26e:	09 f4       	brne	.+2      	; 0x272 <main+0x96>
     270:	c3 c1       	rjmp	.+902    	; 0x5f8 <main+0x41c>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     272:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     276:	6c 19       	sub	r22, r12
     278:	7d 09       	sbc	r23, r13
     27a:	8e 09       	sbc	r24, r14
     27c:	9f 09       	sbc	r25, r15
     27e:	6e 31       	cpi	r22, 0x1E	; 30
     280:	4b e4       	ldi	r20, 0x4B	; 75
     282:	74 07       	cpc	r23, r20
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	84 07       	cpc	r24, r20
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	94 07       	cpc	r25, r20
     28c:	08 f0       	brcs	.+2      	; 0x290 <main+0xb4>
     28e:	93 c1       	rjmp	.+806    	; 0x5b6 <main+0x3da>

			startTime = getTime100MicroSec();
		}


		handleIRRemoteCommands();
     290:	0e 94 d5 10 	call	0x21aa	; 0x21aa <handleIRRemoteCommands>


		handleRFCommands();
     294:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <handleRFCommands>
		
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     298:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
     29c:	9b 01       	movw	r18, r22
     29e:	ac 01       	movw	r20, r24
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	cb 01       	movw	r24, r22
     2a6:	f0 91 59 04 	lds	r31, 0x0459
     2aa:	e0 91 5a 04 	lds	r30, 0x045A
     2ae:	80 90 5b 04 	lds	r8, 0x045B
     2b2:	40 90 5c 04 	lds	r4, 0x045C
     2b6:	30 90 5d 04 	lds	r3, 0x045D
     2ba:	50 90 5e 04 	lds	r5, 0x045E
     2be:	60 90 5f 04 	lds	r6, 0x045F
     2c2:	70 90 60 04 	lds	r7, 0x0460
     2c6:	b2 2f       	mov	r27, r18
     2c8:	bf 1b       	sub	r27, r31
     2ca:	a1 e0       	ldi	r26, 0x01	; 1
     2cc:	2b 17       	cp	r18, r27
     2ce:	08 f0       	brcs	.+2      	; 0x2d2 <main+0xf6>
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	f3 2f       	mov	r31, r19
     2d4:	fe 1b       	sub	r31, r30
     2d6:	ef 2f       	mov	r30, r31
     2d8:	f1 e0       	ldi	r31, 0x01	; 1
     2da:	3e 17       	cp	r19, r30
     2dc:	08 f0       	brcs	.+2      	; 0x2e0 <main+0x104>
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	9e 2e       	mov	r9, r30
     2e2:	9a 1a       	sub	r9, r26
     2e4:	a9 2d       	mov	r26, r9
     2e6:	99 24       	eor	r9, r9
     2e8:	93 94       	inc	r9
     2ea:	ea 17       	cp	r30, r26
     2ec:	08 f0       	brcs	.+2      	; 0x2f0 <main+0x114>
     2ee:	99 24       	eor	r9, r9
     2f0:	f9 29       	or	r31, r9
     2f2:	e4 2f       	mov	r30, r20
     2f4:	e8 19       	sub	r30, r8
     2f6:	8e 2e       	mov	r8, r30
     2f8:	e1 e0       	ldi	r30, 0x01	; 1
     2fa:	48 15       	cp	r20, r8
     2fc:	08 f0       	brcs	.+2      	; 0x300 <main+0x124>
     2fe:	e0 e0       	ldi	r30, 0x00	; 0
     300:	98 2c       	mov	r9, r8
     302:	9f 1a       	sub	r9, r31
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	89 14       	cp	r8, r9
     308:	08 f0       	brcs	.+2      	; 0x30c <main+0x130>
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	ef 2b       	or	r30, r31
     30e:	f5 2f       	mov	r31, r21
     310:	f4 19       	sub	r31, r4
     312:	4f 2e       	mov	r4, r31
     314:	f1 e0       	ldi	r31, 0x01	; 1
     316:	54 15       	cp	r21, r4
     318:	08 f0       	brcs	.+2      	; 0x31c <main+0x140>
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	84 2c       	mov	r8, r4
     31e:	8e 1a       	sub	r8, r30
     320:	e1 e0       	ldi	r30, 0x01	; 1
     322:	48 14       	cp	r4, r8
     324:	08 f0       	brcs	.+2      	; 0x328 <main+0x14c>
     326:	e0 e0       	ldi	r30, 0x00	; 0
     328:	fe 2b       	or	r31, r30
     32a:	31 94       	neg	r3
     32c:	e1 e0       	ldi	r30, 0x01	; 1
     32e:	63 15       	cp	r22, r3
     330:	08 f0       	brcs	.+2      	; 0x334 <main+0x158>
     332:	e0 e0       	ldi	r30, 0x00	; 0
     334:	43 2c       	mov	r4, r3
     336:	4f 1a       	sub	r4, r31
     338:	f1 e0       	ldi	r31, 0x01	; 1
     33a:	34 14       	cp	r3, r4
     33c:	08 f0       	brcs	.+2      	; 0x340 <main+0x164>
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	ef 2b       	or	r30, r31
     342:	51 94       	neg	r5
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	75 15       	cp	r23, r5
     348:	08 f0       	brcs	.+2      	; 0x34c <main+0x170>
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	35 2c       	mov	r3, r5
     34e:	3e 1a       	sub	r3, r30
     350:	e1 e0       	ldi	r30, 0x01	; 1
     352:	53 14       	cp	r5, r3
     354:	08 f0       	brcs	.+2      	; 0x358 <main+0x17c>
     356:	e0 e0       	ldi	r30, 0x00	; 0
     358:	fe 2b       	or	r31, r30
     35a:	61 94       	neg	r6
     35c:	e1 e0       	ldi	r30, 0x01	; 1
     35e:	86 15       	cp	r24, r6
     360:	08 f0       	brcs	.+2      	; 0x364 <main+0x188>
     362:	e0 e0       	ldi	r30, 0x00	; 0
     364:	96 2d       	mov	r25, r6
     366:	9f 1b       	sub	r25, r31
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	69 16       	cp	r6, r25
     36c:	08 f0       	brcs	.+2      	; 0x370 <main+0x194>
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	e8 2b       	or	r30, r24
     372:	71 94       	neg	r7
     374:	7e 16       	cp	r7, r30
     376:	09 f0       	breq	.+2      	; 0x37a <main+0x19e>
     378:	8b c0       	rjmp	.+278    	; 0x490 <main+0x2b4>
     37a:	99 23       	and	r25, r25
     37c:	09 f0       	breq	.+2      	; 0x380 <main+0x1a4>
     37e:	88 c0       	rjmp	.+272    	; 0x490 <main+0x2b4>
     380:	33 20       	and	r3, r3
     382:	09 f0       	breq	.+2      	; 0x386 <main+0x1aa>
     384:	85 c0       	rjmp	.+266    	; 0x490 <main+0x2b4>
     386:	44 20       	and	r4, r4
     388:	09 f0       	breq	.+2      	; 0x38c <main+0x1b0>
     38a:	82 c0       	rjmp	.+260    	; 0x490 <main+0x2b4>
     38c:	88 20       	and	r8, r8
     38e:	09 f0       	breq	.+2      	; 0x392 <main+0x1b6>
     390:	7f c0       	rjmp	.+254    	; 0x490 <main+0x2b4>
     392:	99 20       	and	r9, r9
     394:	09 f0       	breq	.+2      	; 0x398 <main+0x1bc>
     396:	7c c0       	rjmp	.+248    	; 0x490 <main+0x2b4>
     398:	a2 30       	cpi	r26, 0x02	; 2
     39a:	08 f0       	brcs	.+2      	; 0x39e <main+0x1c2>
     39c:	79 c0       	rjmp	.+242    	; 0x490 <main+0x2b4>
     39e:	a1 30       	cpi	r26, 0x01	; 1
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <main+0x1c8>
     3a2:	73 c0       	rjmp	.+230    	; 0x48a <main+0x2ae>
				pwm_intermediate_left_desired = pwm_left_desired;
			}

		}

		if(currentSelector!=6 && currentSelector!=15) {
     3a4:	80 91 49 04 	lds	r24, 0x0449
     3a8:	86 30       	cpi	r24, 0x06	; 6
     3aa:	09 f4       	brne	.+2      	; 0x3ae <main+0x1d2>
     3ac:	de c0       	rjmp	.+444    	; 0x56a <main+0x38e>
     3ae:	8f 30       	cpi	r24, 0x0F	; 15
     3b0:	09 f0       	breq	.+2      	; 0x3b4 <main+0x1d8>
     3b2:	4b c0       	rjmp	.+150    	; 0x44a <main+0x26e>
					break;

		}

		if(currentSelector != 0) {
			handleMotorsWithSpeedController();  
     3b4:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <handleMotorsWithSpeedController>
     3b8:	80 91 49 04 	lds	r24, 0x0449
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     3bc:	08 17       	cp	r16, r24
     3be:	09 f4       	brne	.+2      	; 0x3c2 <main+0x1e6>
     3c0:	4b cf       	rjmp	.-362    	; 0x258 <main+0x7c>
			disableObstacleAvoidance();
     3c2:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <disableObstacleAvoidance>
			disableCliffAvoidance();
     3c6:	0e 94 21 25 	call	0x4a42	; 0x4a42 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     3ca:	80 91 0b 01 	lds	r24, 0x010B
     3ce:	81 60       	ori	r24, 0x01	; 1
     3d0:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     3d4:	80 91 0b 01 	lds	r24, 0x010B
     3d8:	82 60       	ori	r24, 0x02	; 2
     3da:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     3de:	80 91 0b 01 	lds	r24, 0x010B
     3e2:	84 60       	ori	r24, 0x04	; 4
     3e4:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     3e8:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     3ea:	80 91 0b 01 	lds	r24, 0x010B
     3ee:	80 61       	ori	r24, 0x10	; 16
     3f0:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     3f4:	80 91 0b 01 	lds	r24, 0x010B
     3f8:	80 62       	ori	r24, 0x20	; 32
     3fa:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     3fe:	80 91 0b 01 	lds	r24, 0x010B
     402:	80 64       	ori	r24, 0x40	; 64
     404:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     408:	80 91 0b 01 	lds	r24, 0x010B
     40c:	80 68       	ori	r24, 0x80	; 128
     40e:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     412:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     416:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     41a:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     41e:	8f ef       	ldi	r24, 0xFF	; 255
     420:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <updateRedLed>
			updateGreenLed(pwm_green);
     424:	80 91 0d 02 	lds	r24, 0x020D
     428:	0e 94 75 25 	call	0x4aea	; 0x4aea <updateGreenLed>
			updateBlueLed(pwm_blue);
     42c:	80 91 0e 02 	lds	r24, 0x020E
     430:	0e 94 89 25 	call	0x4b12	; 0x4b12 <updateBlueLed>
			setRightSpeed(0);
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
			setLeftSpeed(0);
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
			rgbState = 0;
     440:	10 92 16 03 	sts	0x0316, r1
     444:	00 91 49 04 	lds	r16, 0x0449
     448:	07 cf       	rjmp	.-498    	; 0x258 <main+0x7c>
			}

		}

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
		}

		switch(currentSelector) {
     450:	90 91 49 04 	lds	r25, 0x0449
     454:	89 2f       	mov	r24, r25
     456:	96 30       	cpi	r25, 0x06	; 6
     458:	09 f4       	brne	.+2      	; 0x45c <main+0x280>
     45a:	87 c0       	rjmp	.+270    	; 0x56a <main+0x38e>
     45c:	97 30       	cpi	r25, 0x07	; 7
     45e:	08 f0       	brcs	.+2      	; 0x462 <main+0x286>
     460:	ec c0       	rjmp	.+472    	; 0x63a <main+0x45e>
     462:	92 30       	cpi	r25, 0x02	; 2
     464:	09 f4       	brne	.+2      	; 0x468 <main+0x28c>
     466:	e4 c0       	rjmp	.+456    	; 0x630 <main+0x454>
     468:	93 30       	cpi	r25, 0x03	; 3
     46a:	08 f0       	brcs	.+2      	; 0x46e <main+0x292>
     46c:	db c1       	rjmp	.+950    	; 0x824 <main+0x648>
     46e:	99 23       	and	r25, r25
     470:	09 f4       	brne	.+2      	; 0x474 <main+0x298>
     472:	ba c1       	rjmp	.+884    	; 0x7e8 <main+0x60c>
     474:	91 30       	cpi	r25, 0x01	; 1
     476:	21 f4       	brne	.+8      	; 0x480 <main+0x2a4>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     478:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <enableObstacleAvoidance>
     47c:	90 91 49 04 	lds	r25, 0x0449
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector != 0) {
     480:	99 23       	and	r25, r25
     482:	09 f0       	breq	.+2      	; 0x486 <main+0x2aa>
     484:	97 cf       	rjmp	.-210    	; 0x3b4 <main+0x1d8>
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	99 cf       	rjmp	.-206    	; 0x3bc <main+0x1e0>
		handleIRRemoteCommands();


		handleRFCommands();
		
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     48a:	b0 39       	cpi	r27, 0x90	; 144
     48c:	08 f4       	brcc	.+2      	; 0x490 <main+0x2b4>
     48e:	8a cf       	rjmp	.-236    	; 0x3a4 <main+0x1c8>
			speedStepCounter = getTime100MicroSec();
     490:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
     494:	9b 01       	movw	r18, r22
     496:	ac 01       	movw	r20, r24
     498:	60 93 59 04 	sts	0x0459, r22
     49c:	30 93 5a 04 	sts	0x045A, r19
     4a0:	40 93 5b 04 	sts	0x045B, r20
     4a4:	50 93 5c 04 	sts	0x045C, r21
     4a8:	10 92 5d 04 	sts	0x045D, r1
     4ac:	10 92 5e 04 	sts	0x045E, r1
     4b0:	10 92 5f 04 	sts	0x045F, r1
     4b4:	10 92 60 04 	sts	0x0460, r1

			if(softAccEnabled) {
     4b8:	80 91 61 04 	lds	r24, 0x0461
     4bc:	88 23       	and	r24, r24
     4be:	09 f4       	brne	.+2      	; 0x4c2 <main+0x2e6>
     4c0:	8e c0       	rjmp	.+284    	; 0x5de <main+0x402>
				if(pwm_right_desired == 0) {
     4c2:	80 91 f9 02 	lds	r24, 0x02F9
     4c6:	90 91 fa 02 	lds	r25, 0x02FA
     4ca:	00 97       	sbiw	r24, 0x00	; 0
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <main+0x2f4>
     4ce:	fb c0       	rjmp	.+502    	; 0x6c6 <main+0x4ea>
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     4d0:	20 91 fd 02 	lds	r18, 0x02FD
     4d4:	30 91 fe 02 	lds	r19, 0x02FE
     4d8:	28 9f       	mul	r18, r24
     4da:	a0 01       	movw	r20, r0
     4dc:	29 9f       	mul	r18, r25
     4de:	50 0d       	add	r21, r0
     4e0:	38 9f       	mul	r19, r24
     4e2:	50 0d       	add	r21, r0
     4e4:	11 24       	eor	r1, r1
     4e6:	57 fd       	sbrc	r21, 7
     4e8:	ee c0       	rjmp	.+476    	; 0x6c6 <main+0x4ea>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     4ea:	28 17       	cp	r18, r24
     4ec:	39 07       	cpc	r19, r25
     4ee:	0c f0       	brlt	.+2      	; 0x4f2 <main+0x316>
     4f0:	94 c2       	rjmp	.+1320   	; 0xa1a <main+0x83e>
					pwm_intermediate_right_desired += speedStep;
     4f2:	40 91 18 02 	lds	r20, 0x0218
     4f6:	24 0f       	add	r18, r20
     4f8:	31 1d       	adc	r19, r1
     4fa:	30 93 fe 02 	sts	0x02FE, r19
     4fe:	20 93 fd 02 	sts	0x02FD, r18
					if(pwm_intermediate_right_desired > pwm_right_desired) {
     502:	82 17       	cp	r24, r18
     504:	93 07       	cpc	r25, r19
     506:	24 f4       	brge	.+8      	; 0x510 <main+0x334>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
     508:	90 93 fe 02 	sts	0x02FE, r25
     50c:	80 93 fd 02 	sts	0x02FD, r24
					}					
				}
	
				if(pwm_left_desired == 0) {
     510:	80 91 fb 02 	lds	r24, 0x02FB
     514:	90 91 fc 02 	lds	r25, 0x02FC
     518:	00 97       	sbiw	r24, 0x00	; 0
     51a:	09 f4       	brne	.+2      	; 0x51e <main+0x342>
     51c:	df c0       	rjmp	.+446    	; 0x6dc <main+0x500>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     51e:	20 91 ff 02 	lds	r18, 0x02FF
     522:	30 91 00 03 	lds	r19, 0x0300
     526:	28 9f       	mul	r18, r24
     528:	a0 01       	movw	r20, r0
     52a:	29 9f       	mul	r18, r25
     52c:	50 0d       	add	r21, r0
     52e:	38 9f       	mul	r19, r24
     530:	50 0d       	add	r21, r0
     532:	11 24       	eor	r1, r1
     534:	57 fd       	sbrc	r21, 7
     536:	d2 c0       	rjmp	.+420    	; 0x6dc <main+0x500>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     538:	28 17       	cp	r18, r24
     53a:	39 07       	cpc	r19, r25
     53c:	0c f0       	brlt	.+2      	; 0x540 <main+0x364>
     53e:	7e c2       	rjmp	.+1276   	; 0xa3c <main+0x860>
					pwm_intermediate_left_desired += speedStep;
     540:	40 91 18 02 	lds	r20, 0x0218
     544:	24 0f       	add	r18, r20
     546:	31 1d       	adc	r19, r1
     548:	30 93 00 03 	sts	0x0300, r19
     54c:	20 93 ff 02 	sts	0x02FF, r18
					if(pwm_intermediate_left_desired > pwm_left_desired) {
     550:	82 17       	cp	r24, r18
     552:	93 07       	cpc	r25, r19
     554:	0c f0       	brlt	.+2      	; 0x558 <main+0x37c>
     556:	26 cf       	rjmp	.-436    	; 0x3a4 <main+0x1c8>
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
				pwm_intermediate_left_desired = pwm_left_desired;
     558:	90 93 00 03 	sts	0x0300, r25
     55c:	80 93 ff 02 	sts	0x02FF, r24
			}

		}

		if(currentSelector!=6 && currentSelector!=15) {
     560:	80 91 49 04 	lds	r24, 0x0449
     564:	86 30       	cpi	r24, 0x06	; 6
     566:	09 f0       	breq	.+2      	; 0x56a <main+0x38e>
     568:	22 cf       	rjmp	.-444    	; 0x3ae <main+0x1d2>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     56a:	90 91 1d 04 	lds	r25, 0x041D
     56e:	91 30       	cpi	r25, 0x01	; 1
     570:	09 f4       	brne	.+2      	; 0x574 <main+0x398>
     572:	f0 c2       	rjmp	.+1504   	; 0xb54 <main+0x978>
     574:	91 30       	cpi	r25, 0x01	; 1
     576:	08 f0       	brcs	.+2      	; 0x57a <main+0x39e>
     578:	b5 c2       	rjmp	.+1386   	; 0xae4 <main+0x908>
						case 0:
							setRightSpeed(0);
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
							setLeftSpeed(0);
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
							turnOffGreenLeds();
     586:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <turnOffGreenLeds>
							pwm_red=255;
     58a:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     58e:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     592:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     596:	8f ef       	ldi	r24, 0xFF	; 255
     598:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <updateRedLed>
							updateGreenLed(pwm_green);
     59c:	80 91 0d 02 	lds	r24, 0x020D
     5a0:	0e 94 75 25 	call	0x4aea	; 0x4aea <updateGreenLed>
							updateBlueLed(pwm_blue);
     5a4:	80 91 0e 02 	lds	r24, 0x020E
     5a8:	0e 94 89 25 	call	0x4b12	; 0x4b12 <updateBlueLed>
							LED_IR1_HIGH;
     5ac:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     5ae:	45 9a       	sbi	0x08, 5	; 8
     5b0:	90 91 49 04 	lds	r25, 0x0449
							break;
     5b4:	65 cf       	rjmp	.-310    	; 0x480 <main+0x2a4>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     5b6:	0e 94 45 1a 	call	0x348a	; 0x348a <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     5ba:	80 91 49 04 	lds	r24, 0x0449
     5be:	98 2f       	mov	r25, r24
     5c0:	94 50       	subi	r25, 0x04	; 4
     5c2:	92 30       	cpi	r25, 0x02	; 2
     5c4:	08 f4       	brcc	.+2      	; 0x5c8 <main+0x3ec>
     5c6:	a3 c1       	rjmp	.+838    	; 0x90e <main+0x732>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     5c8:	87 30       	cpi	r24, 0x07	; 7
     5ca:	09 f4       	brne	.+2      	; 0x5ce <main+0x3f2>
     5cc:	cb c1       	rjmp	.+918    	; 0x964 <main+0x788>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     5ce:	86 30       	cpi	r24, 0x06	; 6
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <main+0x3f8>
     5d2:	0f c1       	rjmp	.+542    	; 0x7f2 <main+0x616>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     5d4:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
     5d8:	6b 01       	movw	r12, r22
     5da:	7c 01       	movw	r14, r24
     5dc:	59 ce       	rjmp	.-846    	; 0x290 <main+0xb4>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
     5de:	80 91 f9 02 	lds	r24, 0x02F9
     5e2:	90 91 fa 02 	lds	r25, 0x02FA
     5e6:	90 93 fe 02 	sts	0x02FE, r25
     5ea:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = pwm_left_desired;
     5ee:	80 91 fb 02 	lds	r24, 0x02FB
     5f2:	90 91 fc 02 	lds	r25, 0x02FC
     5f6:	b0 cf       	rjmp	.-160    	; 0x558 <main+0x37c>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     5f8:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
     5fc:	29 81       	ldd	r18, Y+1	; 0x01
     5fe:	3a 81       	ldd	r19, Y+2	; 0x02
     600:	4b 81       	ldd	r20, Y+3	; 0x03
     602:	5c 81       	ldd	r21, Y+4	; 0x04
     604:	62 1b       	sub	r22, r18
     606:	73 0b       	sbc	r23, r19
     608:	84 0b       	sbc	r24, r20
     60a:	95 0b       	sbc	r25, r21
     60c:	68 3c       	cpi	r22, 0xC8	; 200
     60e:	32 e1       	ldi	r19, 0x12	; 18
     610:	73 07       	cpc	r23, r19
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	83 07       	cpc	r24, r19
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	93 07       	cpc	r25, r19
     61a:	08 f4       	brcc	.+2      	; 0x61e <main+0x442>
     61c:	2a ce       	rjmp	.-940    	; 0x272 <main+0x96>
				pwm_red = 255;
     61e:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     622:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     626:	10 93 0e 02 	sts	0x020E, r17
     62a:	23 ce       	rjmp	.-954    	; 0x272 <main+0x96>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     62c:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <enableObstacleAvoidance>
					enableCliffAvoidance();
     630:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <enableCliffAvoidance>
     634:	90 91 49 04 	lds	r25, 0x0449
					break;
     638:	23 cf       	rjmp	.-442    	; 0x480 <main+0x2a4>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     63a:	9a 30       	cpi	r25, 0x0A	; 10
     63c:	09 f4       	brne	.+2      	; 0x640 <main+0x464>
     63e:	53 c0       	rjmp	.+166    	; 0x6e6 <main+0x50a>
     640:	9b 30       	cpi	r25, 0x0B	; 11
     642:	f8 f4       	brcc	.+62     	; 0x682 <main+0x4a6>
     644:	98 30       	cpi	r25, 0x08	; 8
     646:	09 f4       	brne	.+2      	; 0x64a <main+0x46e>
     648:	68 c0       	rjmp	.+208    	; 0x71a <main+0x53e>
     64a:	99 30       	cpi	r25, 0x09	; 9
     64c:	08 f4       	brcc	.+2      	; 0x650 <main+0x474>
     64e:	7f c0       	rjmp	.+254    	; 0x74e <main+0x572>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 9:	if(leftMotSteps <= 3000) {
     650:	80 91 d5 02 	lds	r24, 0x02D5
     654:	90 91 d6 02 	lds	r25, 0x02D6
     658:	a0 91 d7 02 	lds	r26, 0x02D7
     65c:	b0 91 d8 02 	lds	r27, 0x02D8
     660:	89 3b       	cpi	r24, 0xB9	; 185
     662:	fb e0       	ldi	r31, 0x0B	; 11
     664:	9f 07       	cpc	r25, r31
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	af 07       	cpc	r26, r31
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	bf 07       	cpc	r27, r31
     66e:	14 f1       	brlt	.+68     	; 0x6b4 <main+0x4d8>

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
						setRightSpeed(0);
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
     67c:	90 91 49 04 	lds	r25, 0x0449
     680:	ff ce       	rjmp	.-514    	; 0x480 <main+0x2a4>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     682:	9c 30       	cpi	r25, 0x0C	; 12
     684:	09 f4       	brne	.+2      	; 0x688 <main+0x4ac>
     686:	29 c1       	rjmp	.+594    	; 0x8da <main+0x6fe>
     688:	9c 30       	cpi	r25, 0x0C	; 12
     68a:	08 f4       	brcc	.+2      	; 0x68e <main+0x4b2>
     68c:	0c c1       	rjmp	.+536    	; 0x8a6 <main+0x6ca>
     68e:	9d 30       	cpi	r25, 0x0D	; 13
     690:	09 f0       	breq	.+2      	; 0x694 <main+0x4b8>
     692:	f6 ce       	rjmp	.-532    	; 0x480 <main+0x2a4>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
     694:	80 91 d5 02 	lds	r24, 0x02D5
     698:	90 91 d6 02 	lds	r25, 0x02D6
     69c:	a0 91 d7 02 	lds	r26, 0x02D7
     6a0:	b0 91 d8 02 	lds	r27, 0x02D8
     6a4:	89 35       	cpi	r24, 0x59	; 89
     6a6:	5b e1       	ldi	r21, 0x1B	; 27
     6a8:	95 07       	cpc	r25, r21
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	a5 07       	cpc	r26, r21
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	b5 07       	cpc	r27, r21
     6b2:	f4 f6       	brge	.-68     	; 0x670 <main+0x494>
						setLeftSpeed(40);
     6b4:	88 e2       	ldi	r24, 0x28	; 40
     6b6:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
						setRightSpeed(40);
     6ba:	88 e2       	ldi	r24, 0x28	; 40
     6bc:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
     6c0:	90 91 49 04 	lds	r25, 0x0449
     6c4:	dd ce       	rjmp	.-582    	; 0x480 <main+0x2a4>

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
					pwm_intermediate_right_desired = 0;
     6c6:	10 92 fe 02 	sts	0x02FE, r1
     6ca:	10 92 fd 02 	sts	0x02FD, r1
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
     6ce:	80 91 fb 02 	lds	r24, 0x02FB
     6d2:	90 91 fc 02 	lds	r25, 0x02FC
     6d6:	00 97       	sbiw	r24, 0x00	; 0
     6d8:	09 f0       	breq	.+2      	; 0x6dc <main+0x500>
     6da:	21 cf       	rjmp	.-446    	; 0x51e <main+0x342>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
     6dc:	10 92 00 03 	sts	0x0300, r1
     6e0:	10 92 ff 02 	sts	0x02FF, r1
     6e4:	5f ce       	rjmp	.-834    	; 0x3a4 <main+0x1c8>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 10:if(leftMotSteps <= 4000) {
     6e6:	80 91 d5 02 	lds	r24, 0x02D5
     6ea:	90 91 d6 02 	lds	r25, 0x02D6
     6ee:	a0 91 d7 02 	lds	r26, 0x02D7
     6f2:	b0 91 d8 02 	lds	r27, 0x02D8
     6f6:	81 3a       	cpi	r24, 0xA1	; 161
     6f8:	2f e0       	ldi	r18, 0x0F	; 15
     6fa:	92 07       	cpc	r25, r18
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	a2 07       	cpc	r26, r18
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	b2 07       	cpc	r27, r18
     704:	0c f0       	brlt	.+2      	; 0x708 <main+0x52c>
     706:	b4 cf       	rjmp	.-152    	; 0x670 <main+0x494>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     708:	88 e2       	ldi	r24, 0x28	; 40
     70a:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
						setRightSpeed(40);
     70e:	88 e2       	ldi	r24, 0x28	; 40
     710:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
     714:	90 91 49 04 	lds	r25, 0x0449
     718:	b3 ce       	rjmp	.-666    	; 0x480 <main+0x2a4>
					updateGreenLed(pwm_green);
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	if(leftMotSteps <= 2000) {
     71a:	80 91 d5 02 	lds	r24, 0x02D5
     71e:	90 91 d6 02 	lds	r25, 0x02D6
     722:	a0 91 d7 02 	lds	r26, 0x02D7
     726:	b0 91 d8 02 	lds	r27, 0x02D8
     72a:	81 3d       	cpi	r24, 0xD1	; 209
     72c:	e7 e0       	ldi	r30, 0x07	; 7
     72e:	9e 07       	cpc	r25, r30
     730:	e0 e0       	ldi	r30, 0x00	; 0
     732:	ae 07       	cpc	r26, r30
     734:	e0 e0       	ldi	r30, 0x00	; 0
     736:	be 07       	cpc	r27, r30
     738:	0c f0       	brlt	.+2      	; 0x73c <main+0x560>
     73a:	9a cf       	rjmp	.-204    	; 0x670 <main+0x494>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     73c:	88 e2       	ldi	r24, 0x28	; 40
     73e:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
						setRightSpeed(40);
     742:	88 e2       	ldi	r24, 0x28	; 40
     744:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
     748:	90 91 49 04 	lds	r25, 0x0449
     74c:	99 ce       	rjmp	.-718    	; 0x480 <main+0x2a4>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     74e:	80 91 4d 04 	lds	r24, 0x044D
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	09 f4       	brne	.+2      	; 0x758 <main+0x57c>
     756:	d0 c3       	rjmp	.+1952   	; 0xef8 <main+0xd1c>
     758:	83 30       	cpi	r24, 0x03	; 3
     75a:	08 f0       	brcs	.+2      	; 0x75e <main+0x582>
     75c:	80 c1       	rjmp	.+768    	; 0xa5e <main+0x882>
     75e:	88 23       	and	r24, r24
     760:	09 f0       	breq	.+2      	; 0x764 <main+0x588>
     762:	87 c3       	rjmp	.+1806   	; 0xe72 <main+0xc96>
						case 0:	// move around
							turnOffGreenLeds();
     764:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <turnOffGreenLeds>
							GREEN_LED0_ON;
     768:	80 91 0b 01 	lds	r24, 0x010B
     76c:	8e 7f       	andi	r24, 0xFE	; 254
     76e:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     772:	10 92 4e 04 	sts	0x044E, r1
							enableObstacleAvoidance();
     776:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <enableObstacleAvoidance>
							setRightSpeed(20);
     77a:	84 e1       	ldi	r24, 0x14	; 20
     77c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
							setLeftSpeed(20);
     780:	84 e1       	ldi	r24, 0x14	; 20
     782:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     786:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
     78a:	9b 01       	movw	r18, r22
     78c:	ac 01       	movw	r20, r24
     78e:	60 93 55 04 	sts	0x0455, r22
     792:	70 93 56 04 	sts	0x0456, r23
     796:	80 93 57 04 	sts	0x0457, r24
     79a:	90 93 58 04 	sts	0x0458, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     79e:	80 91 51 04 	lds	r24, 0x0451
     7a2:	90 91 52 04 	lds	r25, 0x0452
     7a6:	a0 91 53 04 	lds	r26, 0x0453
     7aa:	b0 91 54 04 	lds	r27, 0x0454
     7ae:	28 1b       	sub	r18, r24
     7b0:	39 0b       	sbc	r19, r25
     7b2:	4a 0b       	sbc	r20, r26
     7b4:	5b 0b       	sbc	r21, r27
     7b6:	23 33       	cpi	r18, 0x33	; 51
     7b8:	6f ee       	ldi	r22, 0xEF	; 239
     7ba:	36 07       	cpc	r19, r22
     7bc:	62 e0       	ldi	r22, 0x02	; 2
     7be:	46 07       	cpc	r20, r22
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	56 07       	cpc	r21, r22
     7c4:	10 f0       	brcs	.+4      	; 0x7ca <main+0x5ee>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     7c6:	20 92 4d 04 	sts	0x044D, r2
							//pwm_green = 0;
							//pwm_blue = 0;													
							break;							
					}

					updateRedLed(pwm_red);
     7ca:	80 91 0c 02 	lds	r24, 0x020C
     7ce:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <updateRedLed>
					updateGreenLed(pwm_green);
     7d2:	80 91 0d 02 	lds	r24, 0x020D
     7d6:	0e 94 75 25 	call	0x4aea	; 0x4aea <updateGreenLed>
					updateBlueLed(pwm_blue);
     7da:	80 91 0e 02 	lds	r24, 0x020E
     7de:	0e 94 89 25 	call	0x4b12	; 0x4b12 <updateBlueLed>
     7e2:	90 91 49 04 	lds	r25, 0x0449

					break;
     7e6:	4c ce       	rjmp	.-872    	; 0x480 <main+0x2a4>
		}

		switch(currentSelector) {
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     7e8:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <handleMotorsWithNoController>
     7ec:	90 91 49 04 	lds	r25, 0x0449
					break;
     7f0:	47 ce       	rjmp	.-882    	; 0x480 <main+0x2a4>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     7f2:	80 91 1d 04 	lds	r24, 0x041D
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	09 f0       	breq	.+2      	; 0x7fc <main+0x620>
     7fa:	ec ce       	rjmp	.-552    	; 0x5d4 <main+0x3f8>
     7fc:	90 91 13 03 	lds	r25, 0x0313
     800:	92 30       	cpi	r25, 0x02	; 2
     802:	08 f0       	brcs	.+2      	; 0x806 <main+0x62a>
     804:	e7 ce       	rjmp	.-562    	; 0x5d4 <main+0x3f8>
					if(rgbState == 0) {
     806:	90 91 16 03 	lds	r25, 0x0316
     80a:	99 23       	and	r25, r25
     80c:	09 f0       	breq	.+2      	; 0x810 <main+0x634>
     80e:	07 c5       	rjmp	.+2574   	; 0x121e <main+0x1042>
						pwm_red = 254;
     810:	4e ef       	ldi	r20, 0xFE	; 254
     812:	40 93 0c 02 	sts	0x020C, r20
						pwm_green = 255;
     816:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     81a:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     81e:	80 93 16 03 	sts	0x0316, r24
     822:	d8 ce       	rjmp	.-592    	; 0x5d4 <main+0x3f8>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     824:	94 30       	cpi	r25, 0x04	; 4
     826:	d1 f0       	breq	.+52     	; 0x85c <main+0x680>
     828:	95 30       	cpi	r25, 0x05	; 5
     82a:	08 f4       	brcc	.+2      	; 0x82e <main+0x652>
     82c:	ff ce       	rjmp	.-514    	; 0x62c <main+0x450>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     82e:	80 91 0c 02 	lds	r24, 0x020C
     832:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <updateRedLed>
					updateGreenLed(pwm_green);
     836:	80 91 0d 02 	lds	r24, 0x020D
     83a:	0e 94 75 25 	call	0x4aea	; 0x4aea <updateGreenLed>
					updateBlueLed(pwm_blue);
     83e:	80 91 0e 02 	lds	r24, 0x020E
     842:	0e 94 89 25 	call	0x4b12	; 0x4b12 <updateBlueLed>
					enableObstacleAvoidance();
     846:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <enableObstacleAvoidance>
					setLeftSpeed(25);
     84a:	89 e1       	ldi	r24, 0x19	; 25
     84c:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
					setRightSpeed(25);
     850:	89 e1       	ldi	r24, 0x19	; 25
     852:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
     856:	90 91 49 04 	lds	r25, 0x0449
					break;
     85a:	12 ce       	rjmp	.-988    	; 0x480 <main+0x2a4>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     85c:	80 91 0b 01 	lds	r24, 0x010B
     860:	8e 7f       	andi	r24, 0xFE	; 254
     862:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     866:	80 91 0b 01 	lds	r24, 0x010B
     86a:	8d 7f       	andi	r24, 0xFD	; 253
     86c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     870:	80 91 0b 01 	lds	r24, 0x010B
     874:	8b 7f       	andi	r24, 0xFB	; 251
     876:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     87a:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     87c:	80 91 0b 01 	lds	r24, 0x010B
     880:	8f 7e       	andi	r24, 0xEF	; 239
     882:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     886:	80 91 0b 01 	lds	r24, 0x010B
     88a:	8f 7d       	andi	r24, 0xDF	; 223
     88c:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     890:	80 91 0b 01 	lds	r24, 0x010B
     894:	8f 7b       	andi	r24, 0xBF	; 191
     896:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     89a:	80 91 0b 01 	lds	r24, 0x010B
     89e:	8f 77       	andi	r24, 0x7F	; 127
     8a0:	80 93 0b 01 	sts	0x010B, r24
     8a4:	92 cf       	rjmp	.-220    	; 0x7ca <main+0x5ee>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 11:if(leftMotSteps <= 5000) {
     8a6:	80 91 d5 02 	lds	r24, 0x02D5
     8aa:	90 91 d6 02 	lds	r25, 0x02D6
     8ae:	a0 91 d7 02 	lds	r26, 0x02D7
     8b2:	b0 91 d8 02 	lds	r27, 0x02D8
     8b6:	89 38       	cpi	r24, 0x89	; 137
     8b8:	33 e1       	ldi	r19, 0x13	; 19
     8ba:	93 07       	cpc	r25, r19
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	a3 07       	cpc	r26, r19
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	b3 07       	cpc	r27, r19
     8c4:	0c f0       	brlt	.+2      	; 0x8c8 <main+0x6ec>
     8c6:	d4 ce       	rjmp	.-600    	; 0x670 <main+0x494>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     8c8:	88 e2       	ldi	r24, 0x28	; 40
     8ca:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
						setRightSpeed(40);
     8ce:	88 e2       	ldi	r24, 0x28	; 40
     8d0:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
     8d4:	90 91 49 04 	lds	r25, 0x0449
     8d8:	d3 cd       	rjmp	.-1114   	; 0x480 <main+0x2a4>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     8da:	80 91 d5 02 	lds	r24, 0x02D5
     8de:	90 91 d6 02 	lds	r25, 0x02D6
     8e2:	a0 91 d7 02 	lds	r26, 0x02D7
     8e6:	b0 91 d8 02 	lds	r27, 0x02D8
     8ea:	81 37       	cpi	r24, 0x71	; 113
     8ec:	47 e1       	ldi	r20, 0x17	; 23
     8ee:	94 07       	cpc	r25, r20
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	a4 07       	cpc	r26, r20
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	b4 07       	cpc	r27, r20
     8f8:	0c f4       	brge	.+2      	; 0x8fc <main+0x720>
     8fa:	dc ce       	rjmp	.-584    	; 0x6b4 <main+0x4d8>
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
						setRightSpeed(0);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
     908:	90 91 49 04 	lds	r25, 0x0449
     90c:	b9 cd       	rjmp	.-1166   	; 0x480 <main+0x2a4>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     90e:	0e 94 b3 30 	call	0x6166	; 0x6166 <rand>
     912:	6e e1       	ldi	r22, 0x1E	; 30
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__divmodhi4>
     91a:	a8 0e       	add	r10, r24
     91c:	b9 1e       	adc	r11, r25
     91e:	5f e7       	ldi	r21, 0x7F	; 127
     920:	a5 22       	and	r10, r21
     922:	bb 24       	eor	r11, r11

				switch(rgbState) {
     924:	80 91 16 03 	lds	r24, 0x0316
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	09 f4       	brne	.+2      	; 0x92e <main+0x752>
     92c:	dd c2       	rjmp	.+1466   	; 0xee8 <main+0xd0c>
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	08 f0       	brcs	.+2      	; 0x934 <main+0x758>
     932:	95 c2       	rjmp	.+1322   	; 0xe5e <main+0xc82>
					case 0:
						pwm_red = 255 - currRand;	
     934:	8a 2d       	mov	r24, r10
     936:	80 95       	com	r24
     938:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     93c:	20 92 16 03 	sts	0x0316, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     940:	80 e2       	ldi	r24, 0x20	; 32
     942:	a8 16       	cp	r10, r24
     944:	b1 04       	cpc	r11, r1
     946:	08 f0       	brcs	.+2      	; 0x94a <main+0x76e>
     948:	ec c0       	rjmp	.+472    	; 0xb22 <main+0x946>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn off all leds
     94a:	80 91 0d 02 	lds	r24, 0x020D
     94e:	8f 3f       	cpi	r24, 0xFF	; 255
     950:	09 f4       	brne	.+2      	; 0x954 <main+0x778>
     952:	40 ce       	rjmp	.-896    	; 0x5d4 <main+0x3f8>
     954:	80 91 0e 02 	lds	r24, 0x020E
     958:	8f 3f       	cpi	r24, 0xFF	; 255
     95a:	09 f4       	brne	.+2      	; 0x95e <main+0x782>
     95c:	3b ce       	rjmp	.-906    	; 0x5d4 <main+0x3f8>
						pwm_red = 255;
     95e:	10 93 0c 02 	sts	0x020C, r17
     962:	38 ce       	rjmp	.-912    	; 0x5d4 <main+0x3f8>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     964:	80 91 94 00 	lds	r24, 0x0094
     968:	90 91 95 00 	lds	r25, 0x0095
     96c:	0e 94 b8 30 	call	0x6170	; 0x6170 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     970:	0e 94 b3 30 	call	0x6166	; 0x6166 <rand>
     974:	6e e1       	ldi	r22, 0x1E	; 30
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__divmodhi4>
     97c:	4c 01       	movw	r8, r24
     97e:	8a 0c       	add	r8, r10
     980:	9b 1c       	adc	r9, r11
     982:	ff e7       	ldi	r31, 0x7F	; 127
     984:	8f 22       	and	r8, r31
     986:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     988:	88 2d       	mov	r24, r8
     98a:	80 95       	com	r24
     98c:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     990:	80 91 94 00 	lds	r24, 0x0094
     994:	90 91 95 00 	lds	r25, 0x0095
     998:	0e 94 b8 30 	call	0x6170	; 0x6170 <srand>
				currRand = (currRand + rand()%30) % 128;	
     99c:	0e 94 b3 30 	call	0x6166	; 0x6166 <rand>
     9a0:	6e e1       	ldi	r22, 0x1E	; 30
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__divmodhi4>
     9a8:	6c 01       	movw	r12, r24
     9aa:	c8 0c       	add	r12, r8
     9ac:	d9 1c       	adc	r13, r9
     9ae:	2f e7       	ldi	r18, 0x7F	; 127
     9b0:	c2 22       	and	r12, r18
     9b2:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     9b4:	8c 2d       	mov	r24, r12
     9b6:	80 95       	com	r24
     9b8:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     9bc:	80 91 94 00 	lds	r24, 0x0094
     9c0:	90 91 95 00 	lds	r25, 0x0095
     9c4:	0e 94 b8 30 	call	0x6170	; 0x6170 <srand>
				currRand = (currRand + rand()%30) % 128;
     9c8:	0e 94 b3 30 	call	0x6166	; 0x6166 <rand>
     9cc:	6e e1       	ldi	r22, 0x1E	; 30
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__divmodhi4>
     9d4:	5c 01       	movw	r10, r24
     9d6:	ac 0c       	add	r10, r12
     9d8:	bd 1c       	adc	r11, r13
     9da:	3f e7       	ldi	r19, 0x7F	; 127
     9dc:	a3 22       	and	r10, r19
     9de:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     9e0:	8a 2d       	mov	r24, r10
     9e2:	80 95       	com	r24
     9e4:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     9e8:	80 91 94 00 	lds	r24, 0x0094
     9ec:	90 91 95 00 	lds	r25, 0x0095
     9f0:	0e 94 b8 30 	call	0x6170	; 0x6170 <srand>
				currRand2 = rand()%128;
     9f4:	0e 94 b3 30 	call	0x6166	; 0x6166 <rand>
     9f8:	60 e8       	ldi	r22, 0x80	; 128
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__divmodhi4>
				if(currRand2<32) {
     a00:	80 32       	cpi	r24, 0x20	; 32
     a02:	91 05       	cpc	r25, r1
     a04:	08 f0       	brcs	.+2      	; 0xa08 <main+0x82c>
     a06:	9f c0       	rjmp	.+318    	; 0xb46 <main+0x96a>
					pwm_red = 255;
     a08:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     a0c:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
     a10:	69 83       	std	Y+1, r22	; 0x01
     a12:	7a 83       	std	Y+2, r23	; 0x02
     a14:	8b 83       	std	Y+3, r24	; 0x03
     a16:	9c 83       	std	Y+4, r25	; 0x04
     a18:	dd cd       	rjmp	.-1094   	; 0x5d4 <main+0x3f8>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
     a1a:	82 17       	cp	r24, r18
     a1c:	93 07       	cpc	r25, r19
     a1e:	0c f0       	brlt	.+2      	; 0xa22 <main+0x846>
     a20:	77 cd       	rjmp	.-1298   	; 0x510 <main+0x334>
					pwm_intermediate_right_desired -= speedStep;
     a22:	40 91 18 02 	lds	r20, 0x0218
     a26:	24 1b       	sub	r18, r20
     a28:	31 09       	sbc	r19, r1
     a2a:	30 93 fe 02 	sts	0x02FE, r19
     a2e:	20 93 fd 02 	sts	0x02FD, r18
					if(pwm_intermediate_right_desired < pwm_right_desired) {
     a32:	28 17       	cp	r18, r24
     a34:	39 07       	cpc	r19, r25
     a36:	0c f0       	brlt	.+2      	; 0xa3a <main+0x85e>
     a38:	6b cd       	rjmp	.-1322   	; 0x510 <main+0x334>
     a3a:	66 cd       	rjmp	.-1332   	; 0x508 <main+0x32c>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
     a3c:	82 17       	cp	r24, r18
     a3e:	93 07       	cpc	r25, r19
     a40:	0c f0       	brlt	.+2      	; 0xa44 <main+0x868>
     a42:	b0 cc       	rjmp	.-1696   	; 0x3a4 <main+0x1c8>
					pwm_intermediate_left_desired -= speedStep;
     a44:	40 91 18 02 	lds	r20, 0x0218
     a48:	24 1b       	sub	r18, r20
     a4a:	31 09       	sbc	r19, r1
     a4c:	30 93 00 03 	sts	0x0300, r19
     a50:	20 93 ff 02 	sts	0x02FF, r18
					if(pwm_intermediate_left_desired < pwm_left_desired) {
     a54:	28 17       	cp	r18, r24
     a56:	39 07       	cpc	r19, r25
     a58:	0c f0       	brlt	.+2      	; 0xa5c <main+0x880>
     a5a:	a4 cc       	rjmp	.-1720   	; 0x3a4 <main+0x1c8>
     a5c:	7d cd       	rjmp	.-1286   	; 0x558 <main+0x37c>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     a5e:	84 30       	cpi	r24, 0x04	; 4
     a60:	09 f4       	brne	.+2      	; 0xa64 <main+0x888>
     a62:	1d c3       	rjmp	.+1594   	; 0x109e <main+0xec2>
     a64:	84 30       	cpi	r24, 0x04	; 4
     a66:	08 f4       	brcc	.+2      	; 0xa6a <main+0x88e>
     a68:	c3 c2       	rjmp	.+1414   	; 0xff0 <main+0xe14>
     a6a:	85 30       	cpi	r24, 0x05	; 5
     a6c:	09 f0       	breq	.+2      	; 0xa70 <main+0x894>
     a6e:	ad ce       	rjmp	.-678    	; 0x7ca <main+0x5ee>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     a70:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <turnOffGreenLeds>
							GREEN_LED6_ON;
     a74:	80 91 0b 01 	lds	r24, 0x010B
     a78:	8f 7b       	andi	r24, 0xBF	; 191
     a7a:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     a7e:	80 91 0b 01 	lds	r24, 0x010B
     a82:	8f 77       	andi	r24, 0x7F	; 127
     a84:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     a88:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
     a8c:	9b 01       	movw	r18, r22
     a8e:	ac 01       	movw	r20, r24
     a90:	60 93 55 04 	sts	0x0455, r22
     a94:	70 93 56 04 	sts	0x0456, r23
     a98:	80 93 57 04 	sts	0x0457, r24
     a9c:	90 93 58 04 	sts	0x0458, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     aa0:	80 91 51 04 	lds	r24, 0x0451
     aa4:	90 91 52 04 	lds	r25, 0x0452
     aa8:	a0 91 53 04 	lds	r26, 0x0453
     aac:	b0 91 54 04 	lds	r27, 0x0454
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	2b 32       	cpi	r18, 0x2B	; 43
     aba:	9c e1       	ldi	r25, 0x1C	; 28
     abc:	39 07       	cpc	r19, r25
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	49 07       	cpc	r20, r25
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	59 07       	cpc	r21, r25
     ac6:	08 f4       	brcc	.+2      	; 0xaca <main+0x8ee>
     ac8:	80 ce       	rjmp	.-768    	; 0x7ca <main+0x5ee>
								demoStartTime = getTime100MicroSec();
     aca:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
     ace:	60 93 51 04 	sts	0x0451, r22
     ad2:	70 93 52 04 	sts	0x0452, r23
     ad6:	80 93 53 04 	sts	0x0453, r24
     ada:	90 93 54 04 	sts	0x0454, r25
								demoState = 0;							
     ade:	10 92 4d 04 	sts	0x044D, r1
     ae2:	73 ce       	rjmp	.-794    	; 0x7ca <main+0x5ee>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     ae4:	92 30       	cpi	r25, 0x02	; 2
     ae6:	11 f0       	breq	.+4      	; 0xaec <main+0x910>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     ae8:	98 2f       	mov	r25, r24
     aea:	ca cc       	rjmp	.-1644   	; 0x480 <main+0x2a4>
     aec:	90 91 1e 04 	lds	r25, 0x041E
     af0:	99 23       	and	r25, r25
     af2:	d1 f3       	breq	.-12     	; 0xae8 <main+0x90c>
								turnOnGreenLeds();
     af4:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     af8:	60 91 11 03 	lds	r22, 0x0311
     afc:	70 91 12 03 	lds	r23, 0x0312
     b00:	8e ef       	ldi	r24, 0xFE	; 254
     b02:	9f e0       	ldi	r25, 0x0F	; 15
     b04:	0e 94 df 30 	call	0x61be	; 0x61be <__eewr_word_m2560>
								turnOffGreenLeds();
     b08:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     b0c:	8a ea       	ldi	r24, 0xAA	; 170
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
								addressReceived = 0;
     b14:	10 92 1e 04 	sts	0x041E, r1
								menuChoice = 0;
     b18:	10 92 1d 04 	sts	0x041D, r1
     b1c:	90 91 49 04 	lds	r25, 0x0449
     b20:	af cc       	rjmp	.-1698   	; 0x480 <main+0x2a4>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn off all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     b22:	90 e4       	ldi	r25, 0x40	; 64
     b24:	a9 16       	cp	r10, r25
     b26:	b1 04       	cpc	r11, r1
     b28:	08 f0       	brcs	.+2      	; 0xb2c <main+0x950>
     b2a:	a7 c2       	rjmp	.+1358   	; 0x107a <main+0xe9e>
					if(pwm_red!=255 && pwm_blue!=255) {
     b2c:	80 91 0c 02 	lds	r24, 0x020C
     b30:	8f 3f       	cpi	r24, 0xFF	; 255
     b32:	09 f4       	brne	.+2      	; 0xb36 <main+0x95a>
     b34:	4f cd       	rjmp	.-1378   	; 0x5d4 <main+0x3f8>
     b36:	80 91 0e 02 	lds	r24, 0x020E
     b3a:	8f 3f       	cpi	r24, 0xFF	; 255
     b3c:	09 f4       	brne	.+2      	; 0xb40 <main+0x964>
     b3e:	4a cd       	rjmp	.-1388   	; 0x5d4 <main+0x3f8>
						pwm_green = 255;
     b40:	10 93 0d 02 	sts	0x020D, r17
     b44:	47 cd       	rjmp	.-1394   	; 0x5d4 <main+0x3f8>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     b46:	80 34       	cpi	r24, 0x40	; 64
     b48:	91 05       	cpc	r25, r1
     b4a:	08 f0       	brcs	.+2      	; 0xb4e <main+0x972>
     b4c:	03 c3       	rjmp	.+1542   	; 0x1154 <main+0xf78>
					pwm_green = 255;
     b4e:	10 93 0d 02 	sts	0x020D, r17
     b52:	5c cf       	rjmp	.-328    	; 0xa0c <main+0x830>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     b54:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <turnOnGreenLeds>
							updateRedLed(pwm_red);
     b58:	80 91 0c 02 	lds	r24, 0x020C
     b5c:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <updateRedLed>
							updateGreenLed(pwm_green);
     b60:	80 91 0d 02 	lds	r24, 0x020D
     b64:	0e 94 75 25 	call	0x4aea	; 0x4aea <updateGreenLed>
							updateBlueLed(pwm_blue);
     b68:	80 91 0e 02 	lds	r24, 0x020E
     b6c:	0e 94 89 25 	call	0x4b12	; 0x4b12 <updateBlueLed>
							LED_IR1_LOW;
     b70:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     b72:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     b74:	80 91 20 04 	lds	r24, 0x0420
     b78:	88 23       	and	r24, r24
     b7a:	09 f4       	brne	.+2      	; 0xb7e <main+0x9a2>
     b7c:	7f cd       	rjmp	.-1282   	; 0x67c <main+0x4a0>
								getDataNow = 0;	
     b7e:	10 92 20 04 	sts	0x0420, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b82:	80 91 59 02 	lds	r24, 0x0259
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     b8c:	80 91 5a 02 	lds	r24, 0x025A
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     b96:	80 91 29 02 	lds	r24, 0x0229
     b9a:	90 91 2a 02 	lds	r25, 0x022A
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ba4:	80 91 29 02 	lds	r24, 0x0229
     ba8:	90 91 2a 02 	lds	r25, 0x022A
     bac:	89 2f       	mov	r24, r25
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     bb4:	80 91 5b 02 	lds	r24, 0x025B
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     bbe:	80 91 5c 02 	lds	r24, 0x025C
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     bc8:	80 91 2d 02 	lds	r24, 0x022D
     bcc:	90 91 2e 02 	lds	r25, 0x022E
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     bd6:	80 91 2d 02 	lds	r24, 0x022D
     bda:	90 91 2e 02 	lds	r25, 0x022E
     bde:	89 2f       	mov	r24, r25
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     be6:	80 91 5d 02 	lds	r24, 0x025D
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     bf0:	80 91 5e 02 	lds	r24, 0x025E
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     bfa:	80 91 31 02 	lds	r24, 0x0231
     bfe:	90 91 32 02 	lds	r25, 0x0232
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c08:	80 91 31 02 	lds	r24, 0x0231
     c0c:	90 91 32 02 	lds	r25, 0x0232
     c10:	89 2f       	mov	r24, r25
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c18:	80 91 5f 02 	lds	r24, 0x025F
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c22:	80 91 60 02 	lds	r24, 0x0260
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c2c:	80 91 35 02 	lds	r24, 0x0235
     c30:	90 91 36 02 	lds	r25, 0x0236
     c34:	61 e0       	ldi	r22, 0x01	; 1
     c36:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c3a:	80 91 35 02 	lds	r24, 0x0235
     c3e:	90 91 36 02 	lds	r25, 0x0236
     c42:	89 2f       	mov	r24, r25
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c4a:	80 91 61 02 	lds	r24, 0x0261
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c54:	80 91 62 02 	lds	r24, 0x0262
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c5e:	80 91 39 02 	lds	r24, 0x0239
     c62:	90 91 3a 02 	lds	r25, 0x023A
     c66:	61 e0       	ldi	r22, 0x01	; 1
     c68:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c6c:	80 91 39 02 	lds	r24, 0x0239
     c70:	90 91 3a 02 	lds	r25, 0x023A
     c74:	89 2f       	mov	r24, r25
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c7c:	80 91 63 02 	lds	r24, 0x0263
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c86:	80 91 64 02 	lds	r24, 0x0264
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c90:	80 91 3d 02 	lds	r24, 0x023D
     c94:	90 91 3e 02 	lds	r25, 0x023E
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c9e:	80 91 3d 02 	lds	r24, 0x023D
     ca2:	90 91 3e 02 	lds	r25, 0x023E
     ca6:	89 2f       	mov	r24, r25
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     cae:	80 91 65 02 	lds	r24, 0x0265
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     cb8:	80 91 66 02 	lds	r24, 0x0266
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     cc2:	80 91 41 02 	lds	r24, 0x0241
     cc6:	90 91 42 02 	lds	r25, 0x0242
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     cd0:	80 91 41 02 	lds	r24, 0x0241
     cd4:	90 91 42 02 	lds	r25, 0x0242
     cd8:	89 2f       	mov	r24, r25
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ce0:	80 91 67 02 	lds	r24, 0x0267
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     cea:	80 91 68 02 	lds	r24, 0x0268
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     cf4:	80 91 45 02 	lds	r24, 0x0245
     cf8:	90 91 46 02 	lds	r25, 0x0246
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d02:	80 91 45 02 	lds	r24, 0x0245
     d06:	90 91 46 02 	lds	r25, 0x0246
     d0a:	89 2f       	mov	r24, r25
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d12:	80 91 69 02 	lds	r24, 0x0269
     d16:	61 e0       	ldi	r22, 0x01	; 1
     d18:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d1c:	80 91 6a 02 	lds	r24, 0x026A
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d26:	80 91 49 02 	lds	r24, 0x0249
     d2a:	90 91 4a 02 	lds	r25, 0x024A
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d34:	80 91 49 02 	lds	r24, 0x0249
     d38:	90 91 4a 02 	lds	r25, 0x024A
     d3c:	89 2f       	mov	r24, r25
     d3e:	61 e0       	ldi	r22, 0x01	; 1
     d40:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d44:	80 91 6b 02 	lds	r24, 0x026B
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d4e:	80 91 6c 02 	lds	r24, 0x026C
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d58:	80 91 4d 02 	lds	r24, 0x024D
     d5c:	90 91 4e 02 	lds	r25, 0x024E
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d66:	80 91 4d 02 	lds	r24, 0x024D
     d6a:	90 91 4e 02 	lds	r25, 0x024E
     d6e:	89 2f       	mov	r24, r25
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d76:	80 91 6d 02 	lds	r24, 0x026D
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d80:	80 91 6e 02 	lds	r24, 0x026E
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d8a:	80 91 51 02 	lds	r24, 0x0251
     d8e:	90 91 52 02 	lds	r25, 0x0252
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d98:	80 91 51 02 	lds	r24, 0x0251
     d9c:	90 91 52 02 	lds	r25, 0x0252
     da0:	89 2f       	mov	r24, r25
     da2:	61 e0       	ldi	r22, 0x01	; 1
     da4:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     da8:	80 91 6f 02 	lds	r24, 0x026F
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     db2:	80 91 70 02 	lds	r24, 0x0270
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     dbc:	80 91 55 02 	lds	r24, 0x0255
     dc0:	90 91 56 02 	lds	r25, 0x0256
     dc4:	61 e0       	ldi	r22, 0x01	; 1
     dc6:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     dca:	80 91 55 02 	lds	r24, 0x0255
     dce:	90 91 56 02 	lds	r25, 0x0256
     dd2:	89 2f       	mov	r24, r25
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     dda:	80 91 26 04 	lds	r24, 0x0426
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
								usart0Transmit(accX>>8,1);
     de4:	80 91 27 04 	lds	r24, 0x0427
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     dee:	80 91 28 04 	lds	r24, 0x0428
     df2:	61 e0       	ldi	r22, 0x01	; 1
     df4:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
								usart0Transmit(accY>>8,1);
     df8:	80 91 29 04 	lds	r24, 0x0429
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     e02:	80 91 2a 04 	lds	r24, 0x042A
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     e0c:	80 91 2b 04 	lds	r24, 0x042B
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
								usart0Transmit(irCommand,1);
     e16:	80 91 21 04 	lds	r24, 0x0421
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
								usart0Transmit(currentSelector,1);
     e20:	80 91 49 04 	lds	r24, 0x0449
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     e2a:	80 91 03 01 	lds	r24, 0x0103
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	80 72       	andi	r24, 0x20	; 32
     e32:	90 70       	andi	r25, 0x00	; 0
     e34:	95 95       	asr	r25
     e36:	87 95       	ror	r24
     e38:	95 95       	asr	r25
     e3a:	87 95       	ror	r24
     e3c:	95 95       	asr	r25
     e3e:	87 95       	ror	r24
     e40:	95 95       	asr	r25
     e42:	87 95       	ror	r24
     e44:	95 95       	asr	r25
     e46:	87 95       	ror	r24
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
								usart0Transmit(rfFlags,1);
     e4e:	80 91 13 03 	lds	r24, 0x0313
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	0e 94 62 18 	call	0x30c4	; 0x30c4 <usart0Transmit>
     e58:	90 91 49 04 	lds	r25, 0x0449
     e5c:	11 cb       	rjmp	.-2526   	; 0x480 <main+0x2a4>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	09 f0       	breq	.+2      	; 0xe64 <main+0xc88>
     e62:	6e cd       	rjmp	.-1316   	; 0x940 <main+0x764>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
     e64:	8a 2d       	mov	r24, r10
     e66:	80 95       	com	r24
     e68:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
     e6c:	10 92 16 03 	sts	0x0316, r1
						break;
     e70:	67 cd       	rjmp	.-1330   	; 0x940 <main+0x764>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	09 f0       	breq	.+2      	; 0xe78 <main+0xc9c>
     e76:	a9 cc       	rjmp	.-1710   	; 0x7ca <main+0x5ee>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
     e78:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <turnOffGreenLeds>
							GREEN_LED2_ON;
     e7c:	80 91 0b 01 	lds	r24, 0x010B
     e80:	8b 7f       	andi	r24, 0xFB	; 251
     e82:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
     e86:	10 92 4f 04 	sts	0x044F, r1
							enableObstacleAvoidance();
     e8a:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <enableObstacleAvoidance>
							setRightSpeed(20);
     e8e:	84 e1       	ldi	r24, 0x14	; 20
     e90:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
							setLeftSpeed(20);
     e94:	84 e1       	ldi	r24, 0x14	; 20
     e96:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
     e9a:	80 91 6b 02 	lds	r24, 0x026B
     e9e:	90 91 6c 02 	lds	r25, 0x026C
     ea2:	e1 e0       	ldi	r30, 0x01	; 1
     ea4:	80 39       	cpi	r24, 0x90	; 144
     ea6:	9e 07       	cpc	r25, r30
     ea8:	0c f4       	brge	.+2      	; 0xeac <main+0xcd0>
     eaa:	3a c1       	rjmp	.+628    	; 0x1120 <main+0xf44>
     eac:	80 91 6d 02 	lds	r24, 0x026D
     eb0:	90 91 6e 02 	lds	r25, 0x026E
     eb4:	f1 e0       	ldi	r31, 0x01	; 1
     eb6:	80 39       	cpi	r24, 0x90	; 144
     eb8:	9f 07       	cpc	r25, r31
     eba:	0c f4       	brge	.+2      	; 0xebe <main+0xce2>
     ebc:	31 c1       	rjmp	.+610    	; 0x1120 <main+0xf44>
     ebe:	80 91 69 02 	lds	r24, 0x0269
     ec2:	90 91 6a 02 	lds	r25, 0x026A
     ec6:	21 e0       	ldi	r18, 0x01	; 1
     ec8:	80 39       	cpi	r24, 0x90	; 144
     eca:	92 07       	cpc	r25, r18
     ecc:	0c f4       	brge	.+2      	; 0xed0 <main+0xcf4>
     ece:	28 c1       	rjmp	.+592    	; 0x1120 <main+0xf44>
     ed0:	80 91 6f 02 	lds	r24, 0x026F
     ed4:	90 91 70 02 	lds	r25, 0x0270
     ed8:	31 e0       	ldi	r19, 0x01	; 1
     eda:	80 39       	cpi	r24, 0x90	; 144
     edc:	93 07       	cpc	r25, r19
     ede:	0c f4       	brge	.+2      	; 0xee2 <main+0xd06>
     ee0:	1f c1       	rjmp	.+574    	; 0x1120 <main+0xf44>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
     ee2:	10 92 4e 04 	sts	0x044E, r1
     ee6:	71 cc       	rjmp	.-1822   	; 0x7ca <main+0x5ee>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
     ee8:	8a 2d       	mov	r24, r10
     eea:	80 95       	com	r24
     eec:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
     ef0:	62 e0       	ldi	r22, 0x02	; 2
     ef2:	60 93 16 03 	sts	0x0316, r22
						break;
     ef6:	24 cd       	rjmp	.-1464   	; 0x940 <main+0x764>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
     ef8:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <turnOffGreenLeds>
							GREEN_LED4_ON;
     efc:	80 91 0b 01 	lds	r24, 0x010B
     f00:	8f 7e       	andi	r24, 0xEF	; 239
     f02:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
     f06:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
     f0a:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
     f0e:	9b 01       	movw	r18, r22
     f10:	ac 01       	movw	r20, r24
     f12:	60 93 55 04 	sts	0x0455, r22
     f16:	70 93 56 04 	sts	0x0456, r23
     f1a:	80 93 57 04 	sts	0x0457, r24
     f1e:	90 93 58 04 	sts	0x0458, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
     f22:	80 91 51 04 	lds	r24, 0x0451
     f26:	90 91 52 04 	lds	r25, 0x0452
     f2a:	a0 91 53 04 	lds	r26, 0x0453
     f2e:	b0 91 54 04 	lds	r27, 0x0454
     f32:	28 1b       	sub	r18, r24
     f34:	39 0b       	sbc	r19, r25
     f36:	4a 0b       	sbc	r20, r26
     f38:	5b 0b       	sbc	r21, r27
     f3a:	23 33       	cpi	r18, 0x33	; 51
     f3c:	6f ee       	ldi	r22, 0xEF	; 239
     f3e:	36 07       	cpc	r19, r22
     f40:	62 e0       	ldi	r22, 0x02	; 2
     f42:	46 07       	cpc	r20, r22
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	56 07       	cpc	r21, r22
     f48:	08 f0       	brcs	.+2      	; 0xf4c <main+0xd70>
     f4a:	52 c1       	rjmp	.+676    	; 0x11f0 <main+0x1014>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
     f4c:	80 91 03 01 	lds	r24, 0x0103
     f50:	84 ff       	sbrs	r24, 4
     f52:	33 c1       	rjmp	.+614    	; 0x11ba <main+0xfde>
								outOfLine = 0;
     f54:	10 92 4f 04 	sts	0x044F, r1
								chargeContact++;
     f58:	80 91 50 04 	lds	r24, 0x0450
     f5c:	8f 5f       	subi	r24, 0xFF	; 255
     f5e:	80 93 50 04 	sts	0x0450, r24
								if(chargeContact > 20) {
     f62:	85 31       	cpi	r24, 0x15	; 21
     f64:	08 f0       	brcs	.+2      	; 0xf68 <main+0xd8c>
     f66:	71 c1       	rjmp	.+738    	; 0x124a <main+0x106e>
     f68:	80 91 6b 02 	lds	r24, 0x026B
     f6c:	90 91 6c 02 	lds	r25, 0x026C
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
     f70:	20 91 69 02 	lds	r18, 0x0269
     f74:	30 91 6a 02 	lds	r19, 0x026A
     f78:	41 e0       	ldi	r20, 0x01	; 1
     f7a:	22 3c       	cpi	r18, 0xC2	; 194
     f7c:	34 07       	cpc	r19, r20
     f7e:	ac f4       	brge	.+42     	; 0xfaa <main+0xdce>
     f80:	51 e0       	ldi	r21, 0x01	; 1
     f82:	83 3c       	cpi	r24, 0xC3	; 195
     f84:	95 07       	cpc	r25, r21
     f86:	8c f0       	brlt	.+34     	; 0xfaa <main+0xdce>
     f88:	40 91 6d 02 	lds	r20, 0x026D
     f8c:	50 91 6e 02 	lds	r21, 0x026E
     f90:	61 e0       	ldi	r22, 0x01	; 1
     f92:	43 3c       	cpi	r20, 0xC3	; 195
     f94:	56 07       	cpc	r21, r22
     f96:	4c f0       	brlt	.+18     	; 0xfaa <main+0xdce>
     f98:	40 91 6f 02 	lds	r20, 0x026F
     f9c:	50 91 70 02 	lds	r21, 0x0270
     fa0:	e1 e0       	ldi	r30, 0x01	; 1
     fa2:	43 3c       	cpi	r20, 0xC3	; 195
     fa4:	5e 07       	cpc	r21, r30
     fa6:	0c f0       	brlt	.+2      	; 0xfaa <main+0xdce>
     fa8:	76 c1       	rjmp	.+748    	; 0x1296 <main+0x10ba>
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
     faa:	40 91 6f 02 	lds	r20, 0x026F
     fae:	50 91 70 02 	lds	r21, 0x0270
     fb2:	f1 e0       	ldi	r31, 0x01	; 1
     fb4:	42 3c       	cpi	r20, 0xC2	; 194
     fb6:	5f 07       	cpc	r21, r31
     fb8:	0c f0       	brlt	.+2      	; 0xfbc <main+0xde0>
     fba:	ea c0       	rjmp	.+468    	; 0x1190 <main+0xfb4>
     fbc:	41 e0       	ldi	r20, 0x01	; 1
     fbe:	23 3c       	cpi	r18, 0xC3	; 195
     fc0:	34 07       	cpc	r19, r20
     fc2:	0c f4       	brge	.+2      	; 0xfc6 <main+0xdea>
     fc4:	e5 c0       	rjmp	.+458    	; 0x1190 <main+0xfb4>
     fc6:	51 e0       	ldi	r21, 0x01	; 1
     fc8:	83 3c       	cpi	r24, 0xC3	; 195
     fca:	95 07       	cpc	r25, r21
     fcc:	0c f4       	brge	.+2      	; 0xfd0 <main+0xdf4>
     fce:	e5 c0       	rjmp	.+458    	; 0x119a <main+0xfbe>
     fd0:	80 91 6d 02 	lds	r24, 0x026D
     fd4:	90 91 6e 02 	lds	r25, 0x026E
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	83 3c       	cpi	r24, 0xC3	; 195
     fdc:	96 07       	cpc	r25, r22
     fde:	0c f0       	brlt	.+2      	; 0xfe2 <main+0xe06>
     fe0:	53 c1       	rjmp	.+678    	; 0x1288 <main+0x10ac>
								setLeftSpeed(20);
								setRightSpeed(-15);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(20);
     fe2:	84 e1       	ldi	r24, 0x14	; 20
     fe4:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
								setRightSpeed(-10);
     fe8:	86 ef       	ldi	r24, 0xF6	; 246
     fea:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
     fee:	ed cb       	rjmp	.-2086   	; 0x7ca <main+0x5ee>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
     ff0:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <turnOffGreenLeds>
							GREEN_LED6_ON;
     ff4:	80 91 0b 01 	lds	r24, 0x010B
     ff8:	8f 7b       	andi	r24, 0xBF	; 191
     ffa:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
     ffe:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
    1002:	9b 01       	movw	r18, r22
    1004:	ac 01       	movw	r20, r24
    1006:	60 93 55 04 	sts	0x0455, r22
    100a:	70 93 56 04 	sts	0x0456, r23
    100e:	80 93 57 04 	sts	0x0457, r24
    1012:	90 93 58 04 	sts	0x0458, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    1016:	80 91 51 04 	lds	r24, 0x0451
    101a:	90 91 52 04 	lds	r25, 0x0452
    101e:	a0 91 53 04 	lds	r26, 0x0453
    1022:	b0 91 54 04 	lds	r27, 0x0454
    1026:	28 1b       	sub	r18, r24
    1028:	39 0b       	sbc	r19, r25
    102a:	4a 0b       	sbc	r20, r26
    102c:	5b 0b       	sbc	r21, r27
    102e:	2d 3c       	cpi	r18, 0xCD	; 205
    1030:	66 e6       	ldi	r22, 0x66	; 102
    1032:	36 07       	cpc	r19, r22
    1034:	64 e0       	ldi	r22, 0x04	; 4
    1036:	46 07       	cpc	r20, r22
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	56 07       	cpc	r21, r22
    103c:	08 f4       	brcc	.+2      	; 0x1040 <main+0xe64>
    103e:	91 c0       	rjmp	.+290    	; 0x1162 <main+0xf86>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    1040:	80 91 bd 02 	lds	r24, 0x02BD
    1044:	90 91 be 02 	lds	r25, 0x02BE
    1048:	e3 e0       	ldi	r30, 0x03	; 3
    104a:	8a 37       	cpi	r24, 0x7A	; 122
    104c:	9e 07       	cpc	r25, r30
    104e:	08 f4       	brcc	.+2      	; 0x1052 <main+0xe76>
    1050:	94 c0       	rjmp	.+296    	; 0x117a <main+0xf9e>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-20);
    1052:	8c ee       	ldi	r24, 0xEC	; 236
    1054:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
									setLeftSpeed(-20);
    1058:	8c ee       	ldi	r24, 0xEC	; 236
    105a:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    105e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
    1062:	60 93 51 04 	sts	0x0451, r22
    1066:	70 93 52 04 	sts	0x0452, r23
    106a:	80 93 53 04 	sts	0x0453, r24
    106e:	90 93 54 04 	sts	0x0454, r25
									demoState = 4;
    1072:	f4 e0       	ldi	r31, 0x04	; 4
    1074:	f0 93 4d 04 	sts	0x044D, r31
									break;
    1078:	a8 cb       	rjmp	.-2224   	; 0x7ca <main+0x5ee>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    107a:	e0 e6       	ldi	r30, 0x60	; 96
    107c:	ae 16       	cp	r10, r30
    107e:	b1 04       	cpc	r11, r1
    1080:	08 f0       	brcs	.+2      	; 0x1084 <main+0xea8>
    1082:	a8 ca       	rjmp	.-2736   	; 0x5d4 <main+0x3f8>
					if(pwm_red!=255 && pwm_green!=255) {
    1084:	80 91 0c 02 	lds	r24, 0x020C
    1088:	8f 3f       	cpi	r24, 0xFF	; 255
    108a:	09 f4       	brne	.+2      	; 0x108e <main+0xeb2>
    108c:	a3 ca       	rjmp	.-2746   	; 0x5d4 <main+0x3f8>
    108e:	80 91 0d 02 	lds	r24, 0x020D
    1092:	8f 3f       	cpi	r24, 0xFF	; 255
    1094:	09 f4       	brne	.+2      	; 0x1098 <main+0xebc>
    1096:	9e ca       	rjmp	.-2756   	; 0x5d4 <main+0x3f8>
						pwm_blue = 255;
    1098:	10 93 0e 02 	sts	0x020E, r17
    109c:	9b ca       	rjmp	.-2762   	; 0x5d4 <main+0x3f8>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    109e:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <turnOffGreenLeds>
							GREEN_LED6_ON;
    10a2:	80 91 0b 01 	lds	r24, 0x010B
    10a6:	8f 7b       	andi	r24, 0xBF	; 191
    10a8:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    10ac:	80 91 0b 01 	lds	r24, 0x010B
    10b0:	8f 77       	andi	r24, 0x7F	; 127
    10b2:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    10b6:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
    10ba:	9b 01       	movw	r18, r22
    10bc:	ac 01       	movw	r20, r24
    10be:	60 93 55 04 	sts	0x0455, r22
    10c2:	70 93 56 04 	sts	0x0456, r23
    10c6:	80 93 57 04 	sts	0x0457, r24
    10ca:	90 93 58 04 	sts	0x0458, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    10ce:	80 91 51 04 	lds	r24, 0x0451
    10d2:	90 91 52 04 	lds	r25, 0x0452
    10d6:	a0 91 53 04 	lds	r26, 0x0453
    10da:	b0 91 54 04 	lds	r27, 0x0454
    10de:	28 1b       	sub	r18, r24
    10e0:	39 0b       	sbc	r19, r25
    10e2:	4a 0b       	sbc	r20, r26
    10e4:	5b 0b       	sbc	r21, r27
    10e6:	2f 38       	cpi	r18, 0x8F	; 143
    10e8:	65 e2       	ldi	r22, 0x25	; 37
    10ea:	36 07       	cpc	r19, r22
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	46 07       	cpc	r20, r22
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	56 07       	cpc	r21, r22
    10f4:	08 f4       	brcc	.+2      	; 0x10f8 <main+0xf1c>
    10f6:	69 cb       	rjmp	.-2350   	; 0x7ca <main+0x5ee>
								setRightSpeed(20);
    10f8:	84 e1       	ldi	r24, 0x14	; 20
    10fa:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
								setLeftSpeed(-20);								
    10fe:	8c ee       	ldi	r24, 0xEC	; 236
    1100:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1104:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
    1108:	60 93 51 04 	sts	0x0451, r22
    110c:	70 93 52 04 	sts	0x0452, r23
    1110:	80 93 53 04 	sts	0x0453, r24
    1114:	90 93 54 04 	sts	0x0454, r25
								demoState = 5;							
    1118:	85 e0       	ldi	r24, 0x05	; 5
    111a:	80 93 4d 04 	sts	0x044D, r24
    111e:	55 cb       	rjmp	.-2390   	; 0x7ca <main+0x5ee>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(20);
							setLeftSpeed(20);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    1120:	80 91 4e 04 	lds	r24, 0x044E
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	80 93 4e 04 	sts	0x044E, r24
								if(lineFound > 10) {
    112a:	8b 30       	cpi	r24, 0x0B	; 11
    112c:	08 f4       	brcc	.+2      	; 0x1130 <main+0xf54>
    112e:	4d cb       	rjmp	.-2406   	; 0x7ca <main+0x5ee>
									outOfLine = 0;
    1130:	10 92 4f 04 	sts	0x044F, r1
									chargeContact = 0;
    1134:	10 92 50 04 	sts	0x0450, r1
									demoStartTime = getTime100MicroSec();
    1138:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
    113c:	60 93 51 04 	sts	0x0451, r22
    1140:	70 93 52 04 	sts	0x0452, r23
    1144:	80 93 53 04 	sts	0x0453, r24
    1148:	90 93 54 04 	sts	0x0454, r25
									demoState = 2;
    114c:	42 e0       	ldi	r20, 0x02	; 2
    114e:	40 93 4d 04 	sts	0x044D, r20
									break;
    1152:	3b cb       	rjmp	.-2442   	; 0x7ca <main+0x5ee>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    1154:	80 36       	cpi	r24, 0x60	; 96
    1156:	91 05       	cpc	r25, r1
    1158:	08 f0       	brcs	.+2      	; 0x115c <main+0xf80>
    115a:	58 cc       	rjmp	.-1872   	; 0xa0c <main+0x830>
					pwm_blue = 255;
    115c:	10 93 0e 02 	sts	0x020E, r17
    1160:	55 cc       	rjmp	.-1878   	; 0xa0c <main+0x830>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    1162:	80 91 03 01 	lds	r24, 0x0103
    1166:	84 fd       	sbrc	r24, 4
    1168:	30 cb       	rjmp	.-2464   	; 0x7ca <main+0x5ee>
								chargeContact = 0;
    116a:	10 92 50 04 	sts	0x0450, r1
								outOfLine = 0;
    116e:	10 92 4f 04 	sts	0x044F, r1
								demoState = 2;
    1172:	82 e0       	ldi	r24, 0x02	; 2
    1174:	98 2e       	mov	r9, r24
    1176:	90 92 4d 04 	sts	0x044D, r9
								demoStartTime = getTime100MicroSec();
    117a:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
    117e:	60 93 51 04 	sts	0x0451, r22
    1182:	70 93 52 04 	sts	0x0452, r23
    1186:	80 93 53 04 	sts	0x0453, r24
    118a:	90 93 54 04 	sts	0x0454, r25
								break;						
    118e:	1d cb       	rjmp	.-2502   	; 0x7ca <main+0x5ee>
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(20);
								setRightSpeed(-15);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    1190:	e1 e0       	ldi	r30, 0x01	; 1
    1192:	83 3c       	cpi	r24, 0xC3	; 195
    1194:	9e 07       	cpc	r25, r30
    1196:	0c f0       	brlt	.+2      	; 0x119a <main+0xfbe>
    1198:	24 cf       	rjmp	.-440    	; 0xfe2 <main+0xe06>
								setRightSpeed(-10);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    119a:	80 91 6d 02 	lds	r24, 0x026D
    119e:	90 91 6e 02 	lds	r25, 0x026E
    11a2:	f1 e0       	ldi	r31, 0x01	; 1
    11a4:	83 3c       	cpi	r24, 0xC3	; 195
    11a6:	9f 07       	cpc	r25, r31
    11a8:	0c f4       	brge	.+2      	; 0x11ac <main+0xfd0>
    11aa:	48 c0       	rjmp	.+144    	; 0x123c <main+0x1060>
								setLeftSpeed(-10);
    11ac:	86 ef       	ldi	r24, 0xF6	; 246
    11ae:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
								setRightSpeed(20);
    11b2:	84 e1       	ldi	r24, 0x14	; 20
    11b4:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
    11b8:	08 cb       	rjmp	.-2544   	; 0x7ca <main+0x5ee>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    11ba:	10 92 50 04 	sts	0x0450, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    11be:	80 91 6b 02 	lds	r24, 0x026B
    11c2:	90 91 6c 02 	lds	r25, 0x026C
    11c6:	e1 e0       	ldi	r30, 0x01	; 1
    11c8:	83 3c       	cpi	r24, 0xC3	; 195
    11ca:	9e 07       	cpc	r25, r30
    11cc:	2c f1       	brlt	.+74     	; 0x1218 <main+0x103c>
    11ce:	20 91 6d 02 	lds	r18, 0x026D
    11d2:	30 91 6e 02 	lds	r19, 0x026E
    11d6:	f1 e0       	ldi	r31, 0x01	; 1
    11d8:	23 3c       	cpi	r18, 0xC3	; 195
    11da:	3f 07       	cpc	r19, r31
    11dc:	ec f0       	brlt	.+58     	; 0x1218 <main+0x103c>
									outOfLine++;
    11de:	20 91 4f 04 	lds	r18, 0x044F
    11e2:	2f 5f       	subi	r18, 0xFF	; 255
    11e4:	20 93 4f 04 	sts	0x044F, r18
									if(outOfLine > 250) {
    11e8:	2b 3f       	cpi	r18, 0xFB	; 251
    11ea:	08 f4       	brcc	.+2      	; 0x11ee <main+0x1012>
    11ec:	c1 ce       	rjmp	.-638    	; 0xf70 <main+0xd94>
    11ee:	eb ca       	rjmp	.-2602   	; 0x7c6 <main+0x5ea>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    11f0:	8c ee       	ldi	r24, 0xEC	; 236
    11f2:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
								setLeftSpeed(-20);
    11f6:	8c ee       	ldi	r24, 0xEC	; 236
    11f8:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    11fc:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
    1200:	60 93 51 04 	sts	0x0451, r22
    1204:	70 93 52 04 	sts	0x0452, r23
    1208:	80 93 53 04 	sts	0x0453, r24
    120c:	90 93 54 04 	sts	0x0454, r25
								demoState = 4;
    1210:	84 e0       	ldi	r24, 0x04	; 4
    1212:	80 93 4d 04 	sts	0x044D, r24
								break;
    1216:	d9 ca       	rjmp	.-2638   	; 0x7ca <main+0x5ee>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    1218:	10 92 4f 04 	sts	0x044F, r1
    121c:	a9 ce       	rjmp	.-686    	; 0xf70 <main+0xd94>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    121e:	91 30       	cpi	r25, 0x01	; 1
    1220:	41 f1       	breq	.+80     	; 0x1272 <main+0x1096>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    1222:	92 30       	cpi	r25, 0x02	; 2
    1224:	09 f0       	breq	.+2      	; 0x1228 <main+0x104c>
    1226:	d6 c9       	rjmp	.-3156   	; 0x5d4 <main+0x3f8>
						pwm_red = 255;
    1228:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    122c:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    1230:	8e ef       	ldi	r24, 0xFE	; 254
    1232:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    1236:	10 92 16 03 	sts	0x0316, r1
    123a:	cc c9       	rjmp	.-3176   	; 0x5d4 <main+0x3f8>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(20);
    123c:	84 e1       	ldi	r24, 0x14	; 20
    123e:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
								setLeftSpeed(20);
    1242:	84 e1       	ldi	r24, 0x14	; 20
    1244:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
    1248:	c0 ca       	rjmp	.-2688   	; 0x7ca <main+0x5ee>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
									setRightSpeed(0);
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    1256:	0e 94 3c 1a 	call	0x3478	; 0x3478 <getTime100MicroSec>
    125a:	60 93 51 04 	sts	0x0451, r22
    125e:	70 93 52 04 	sts	0x0452, r23
    1262:	80 93 53 04 	sts	0x0453, r24
    1266:	90 93 54 04 	sts	0x0454, r25
									demoState = 3;
    126a:	93 e0       	ldi	r25, 0x03	; 3
    126c:	90 93 4d 04 	sts	0x044D, r25
									break;
    1270:	ac ca       	rjmp	.-2728   	; 0x7ca <main+0x5ee>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1272:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1276:	5e ef       	ldi	r21, 0xFE	; 254
    1278:	50 93 0d 02 	sts	0x020D, r21
						pwm_blue = 255;
    127c:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    1280:	62 e0       	ldi	r22, 0x02	; 2
    1282:	60 93 16 03 	sts	0x0316, r22
    1286:	a6 c9       	rjmp	.-3252   	; 0x5d4 <main+0x3f8>
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-15);
								setRightSpeed(20);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(20);
    1288:	84 e1       	ldi	r24, 0x14	; 20
    128a:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
								setRightSpeed(-15);
    128e:	81 ef       	ldi	r24, 0xF1	; 241
    1290:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
    1294:	9a ca       	rjmp	.-2764   	; 0x7ca <main+0x5ee>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-15);
    1296:	81 ef       	ldi	r24, 0xF1	; 241
    1298:	0e 94 19 21 	call	0x4232	; 0x4232 <setLeftSpeed>
								setRightSpeed(20);
    129c:	84 e1       	ldi	r24, 0x14	; 20
    129e:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setRightSpeed>
    12a2:	93 ca       	rjmp	.-2778   	; 0x7ca <main+0x5ee>

000012a4 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    12a8:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    12aa:	0d b4       	in	r0, 0x2d	; 45
    12ac:	07 fc       	sbrc	r0, 7
    12ae:	0a c0       	rjmp	.+20     	; 0x12c4 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    12b0:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    12b2:	37 e2       	ldi	r19, 0x27	; 39
    12b4:	80 31       	cpi	r24, 0x10	; 16
    12b6:	93 07       	cpc	r25, r19
    12b8:	c0 f3       	brcs	.-16     	; 0x12aa <SPI_WAIT+0x6>
			spiCommError = 1;
    12ba:	20 93 14 03 	sts	0x0314, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    12be:	0d b4       	in	r0, 0x2d	; 45
    12c0:	07 fe       	sbrs	r0, 7
    12c2:	f6 cf       	rjmp	.-20     	; 0x12b0 <SPI_WAIT+0xc>
			return;
		}
	}
}
    12c4:	08 95       	ret

000012c6 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    12c6:	84 b1       	in	r24, 0x04	; 4
    12c8:	80 7f       	andi	r24, 0xF0	; 240
    12ca:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    12cc:	84 b1       	in	r24, 0x04	; 4
    12ce:	87 60       	ori	r24, 0x07	; 7
    12d0:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    12d2:	80 e5       	ldi	r24, 0x50	; 80
    12d4:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    12d6:	8d b5       	in	r24, 0x2d	; 45
    12d8:	81 60       	ori	r24, 0x01	; 1
    12da:	8d bd       	out	0x2d, r24	; 45

}
    12dc:	08 95       	ret

000012de <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    12de:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    12e0:	1d bc       	out	0x2d, r1	; 45
}
    12e2:	08 95       	ret

000012e4 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    12e4:	44 23       	and	r20, r20
    12e6:	09 f1       	breq	.+66     	; 0x132a <SPI_ReadWrite_Block+0x46>
    12e8:	a6 2f       	mov	r26, r22
    12ea:	b7 2f       	mov	r27, r23
    12ec:	e8 2f       	mov	r30, r24
    12ee:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    12f0:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    12f2:	21 91       	ld	r18, Z+
    12f4:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    12f6:	21 e0       	ldi	r18, 0x01	; 1
    12f8:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    12fa:	0d b4       	in	r0, 0x2d	; 45
    12fc:	07 fc       	sbrc	r0, 7
    12fe:	0b c0       	rjmp	.+22     	; 0x1316 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1300:	2f 5f       	subi	r18, 0xFF	; 255
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1304:	57 e2       	ldi	r21, 0x27	; 39
    1306:	20 31       	cpi	r18, 0x10	; 16
    1308:	35 07       	cpc	r19, r21
    130a:	b8 f3       	brcs	.-18     	; 0x12fa <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    130c:	90 93 14 03 	sts	0x0314, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1310:	0d b4       	in	r0, 0x2d	; 45
    1312:	07 fe       	sbrs	r0, 7
    1314:	f5 cf       	rjmp	.-22     	; 0x1300 <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    1316:	20 91 14 03 	lds	r18, 0x0314
    131a:	22 23       	and	r18, r18
    131c:	31 f4       	brne	.+12     	; 0x132a <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    131e:	2e b5       	in	r18, 0x2e	; 46
    1320:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1322:	2e 2f       	mov	r18, r30
    1324:	28 1b       	sub	r18, r24
    1326:	24 17       	cp	r18, r20
    1328:	20 f3       	brcs	.-56     	; 0x12f2 <SPI_ReadWrite_Block+0xe>
    132a:	08 95       	ret

0000132c <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    132c:	66 23       	and	r22, r22
    132e:	e9 f0       	breq	.+58     	; 0x136a <SPI_Write_Block+0x3e>
    1330:	e8 2f       	mov	r30, r24
    1332:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1334:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1336:	21 91       	ld	r18, Z+
    1338:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    133a:	21 e0       	ldi	r18, 0x01	; 1
    133c:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    133e:	0d b4       	in	r0, 0x2d	; 45
    1340:	07 fc       	sbrc	r0, 7
    1342:	0b c0       	rjmp	.+22     	; 0x135a <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1344:	2f 5f       	subi	r18, 0xFF	; 255
    1346:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1348:	47 e2       	ldi	r20, 0x27	; 39
    134a:	20 31       	cpi	r18, 0x10	; 16
    134c:	34 07       	cpc	r19, r20
    134e:	b8 f3       	brcs	.-18     	; 0x133e <SPI_Write_Block+0x12>
			spiCommError = 1;
    1350:	90 93 14 03 	sts	0x0314, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    1354:	0d b4       	in	r0, 0x2d	; 45
    1356:	07 fe       	sbrs	r0, 7
    1358:	f5 cf       	rjmp	.-22     	; 0x1344 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    135a:	20 91 14 03 	lds	r18, 0x0314
    135e:	22 23       	and	r18, r18
    1360:	21 f4       	brne	.+8      	; 0x136a <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1362:	2e 2f       	mov	r18, r30
    1364:	28 1b       	sub	r18, r24
    1366:	26 17       	cp	r18, r22
    1368:	30 f3       	brcs	.-52     	; 0x1336 <SPI_Write_Block+0xa>
    136a:	08 95       	ret

0000136c <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    136c:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1372:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1374:	0d b4       	in	r0, 0x2d	; 45
    1376:	07 fc       	sbrc	r0, 7
    1378:	0a c0       	rjmp	.+20     	; 0x138e <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    137a:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    137c:	37 e2       	ldi	r19, 0x27	; 39
    137e:	80 31       	cpi	r24, 0x10	; 16
    1380:	93 07       	cpc	r25, r19
    1382:	c0 f3       	brcs	.-16     	; 0x1374 <SPI_Write_Byte+0x8>
			spiCommError = 1;
    1384:	20 93 14 03 	sts	0x0314, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1388:	0d b4       	in	r0, 0x2d	; 45
    138a:	07 fe       	sbrs	r0, 7
    138c:	f6 cf       	rjmp	.-20     	; 0x137a <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    138e:	8e b5       	in	r24, 0x2e	; 46
}
    1390:	08 95       	ret

00001392 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1392:	0f 93       	push	r16
    1394:	1f 93       	push	r17
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <mirf_config+0xa>
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    13a0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    13a2:	80 e2       	ldi	r24, 0x20	; 32
    13a4:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    13a8:	8d e0       	ldi	r24, 0x0D	; 13
    13aa:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    13ae:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    13b0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    13b2:	83 e2       	ldi	r24, 0x23	; 35
    13b4:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    13be:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    13c0:	80 91 11 03 	lds	r24, 0x0311
    13c4:	90 91 12 03 	lds	r25, 0x0312
    13c8:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    13ca:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    13cc:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    13ce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    13d0:	80 e3       	ldi	r24, 0x30	; 48
    13d2:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    13d6:	8e 01       	movw	r16, r28
    13d8:	0f 5f       	subi	r16, 0xFF	; 255
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	c8 01       	movw	r24, r16
    13de:	63 e0       	ldi	r22, 0x03	; 3
    13e0:	0e 94 96 09 	call	0x132c	; 0x132c <SPI_Write_Block>
    mirf_CSN_hi;
    13e4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    13e6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    13e8:	8a e2       	ldi	r24, 0x2A	; 42
    13ea:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    13ee:	c8 01       	movw	r24, r16
    13f0:	63 e0       	ldi	r22, 0x03	; 3
    13f2:	0e 94 96 09 	call	0x132c	; 0x132c <SPI_Write_Block>
    mirf_CSN_hi;
    13f6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    13f8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    13fa:	81 e2       	ldi	r24, 0x21	; 33
    13fc:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1406:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1408:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    140a:	82 e2       	ldi	r24, 0x22	; 34
    140c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1416:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1418:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    141a:	84 e2       	ldi	r24, 0x24	; 36
    141c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1420:	82 e1       	ldi	r24, 0x12	; 18
    1422:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1426:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1428:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    142a:	85 e2       	ldi	r24, 0x25	; 37
    142c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1430:	88 e2       	ldi	r24, 0x28	; 40
    1432:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1436:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1438:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    143a:	81 e3       	ldi	r24, 0x31	; 49
    143c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1440:	8d e0       	ldi	r24, 0x0D	; 13
    1442:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1446:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    1448:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    144a:	80 e5       	ldi	r24, 0x50	; 80
    144c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    1450:	83 e7       	ldi	r24, 0x73	; 115
    1452:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1456:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1458:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    145a:	8c e3       	ldi	r24, 0x3C	; 60
    145c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1466:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1468:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    146a:	8d e3       	ldi	r24, 0x3D	; 61
    146c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1470:	86 e0       	ldi	r24, 0x06	; 6
    1472:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1476:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1478:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    147a:	80 e2       	ldi	r24, 0x20	; 32
    147c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1480:	8f e0       	ldi	r24, 0x0F	; 15
    1482:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1486:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	08 95       	ret

00001498 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1498:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    149a:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    149c:	0e 94 c9 09 	call	0x1392	; 0x1392 <mirf_config>
}
    14a0:	08 95       	ret

000014a2 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    14a8:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    14aa:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    14ac:	8a e2       	ldi	r24, 0x2A	; 42
    14ae:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    14b2:	ce 01       	movw	r24, r28
    14b4:	65 e0       	ldi	r22, 0x05	; 5
    14b6:	0e 94 96 09 	call	0x132c	; 0x132c <SPI_Write_Block>
    mirf_CSN_hi;
    14ba:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    14bc:	2c 9a       	sbi	0x05, 4	; 5
}
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    14ca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    14cc:	80 e3       	ldi	r24, 0x30	; 48
    14ce:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    14d2:	ce 01       	movw	r24, r28
    14d4:	65 e0       	ldi	r22, 0x05	; 5
    14d6:	0e 94 96 09 	call	0x132c	; 0x132c <SPI_Write_Block>
    mirf_CSN_hi;
    14da:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	08 95       	ret

000014e2 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    14e2:	80 91 7a 04 	lds	r24, 0x047A
    14e6:	88 23       	and	r24, r24
    14e8:	11 f0       	breq	.+4      	; 0x14ee <mirf_data_ready+0xc>
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    14ec:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    14ee:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    14f6:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    14f8:	80 74       	andi	r24, 0x40	; 64
    14fa:	08 95       	ret

000014fc <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	0f 92       	push	r0
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1506:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1508:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    150a:	87 e1       	ldi	r24, 0x17	; 23
    150c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1510:	be 01       	movw	r22, r28
    1512:	6f 5f       	subi	r22, 0xFF	; 255
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	cb 01       	movw	r24, r22
    1518:	41 e0       	ldi	r20, 0x01	; 1
    151a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    151e:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1520:	89 81       	ldd	r24, Y+1	; 0x01
}
    1522:	81 70       	andi	r24, 0x01	; 1
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    152c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    152e:	82 ee       	ldi	r24, 0xE2	; 226
    1530:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1534:	28 9a       	sbi	0x05, 0	; 5

}
    1536:	08 95       	ret

00001538 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    153e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1540:	81 e6       	ldi	r24, 0x61	; 97
    1542:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1546:	ce 01       	movw	r24, r28
    1548:	be 01       	movw	r22, r28
    154a:	4d e0       	ldi	r20, 0x0D	; 13
    154c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1550:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1552:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1554:	87 e2       	ldi	r24, 0x27	; 39
    1556:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    155a:	80 e4       	ldi	r24, 0x40	; 64
    155c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1560:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	08 95       	ret

00001568 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	0f 92       	push	r0
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1572:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1574:	8f 71       	andi	r24, 0x1F	; 31
    1576:	80 62       	ori	r24, 0x20	; 32
    1578:	69 83       	std	Y+1, r22	; 0x01
    157a:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    157e:	69 81       	ldd	r22, Y+1	; 0x01
    1580:	86 2f       	mov	r24, r22
    1582:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1586:	28 9a       	sbi	0x05, 0	; 5
}
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	0f 92       	push	r0
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    15a0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    15a2:	8f 71       	andi	r24, 0x1F	; 31
    15a4:	49 83       	std	Y+1, r20	; 0x01
    15a6:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    15aa:	c8 01       	movw	r24, r16
    15ac:	b8 01       	movw	r22, r16
    15ae:	49 81       	ldd	r20, Y+1	; 0x01
    15b0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    15b4:	28 9a       	sbi	0x05, 0	; 5
}
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	08 95       	ret

000015c2 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	0f 92       	push	r0
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    15d2:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15d4:	8f 71       	andi	r24, 0x1F	; 31
    15d6:	80 62       	ori	r24, 0x20	; 32
    15d8:	49 83       	std	Y+1, r20	; 0x01
    15da:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    15de:	c8 01       	movw	r24, r16
    15e0:	49 81       	ldd	r20, Y+1	; 0x01
    15e2:	64 2f       	mov	r22, r20
    15e4:	0e 94 96 09 	call	0x132c	; 0x132c <SPI_Write_Block>
    mirf_CSN_hi;
    15e8:	28 9a       	sbi	0x05, 0	; 5
}
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	08 95       	ret

000015f6 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	0f 92       	push	r0
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1606:	80 91 7a 04 	lds	r24, 0x047A
    160a:	88 23       	and	r24, r24
    160c:	e1 f7       	brne	.-8      	; 0x1606 <mirf_send+0x10>

    mirf_CE_lo;
    160e:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	80 93 7a 04 	sts	0x047A, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1616:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1618:	80 e2       	ldi	r24, 0x20	; 32
    161a:	69 83       	std	Y+1, r22	; 0x01
    161c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1620:	8a e4       	ldi	r24, 0x4A	; 74
    1622:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1626:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1628:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    162a:	81 ee       	ldi	r24, 0xE1	; 225
    162c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1630:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1632:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1634:	80 ea       	ldi	r24, 0xA0	; 160
    1636:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    163a:	c8 01       	movw	r24, r16
    163c:	69 81       	ldd	r22, Y+1	; 0x01
    163e:	0e 94 96 09 	call	0x132c	; 0x132c <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1642:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1644:	2c 9a       	sbi	0x05, 4	; 5
}
    1646:	0f 90       	pop	r0
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	08 95       	ret

00001652 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1652:	ef 92       	push	r14
    1654:	ff 92       	push	r15
    1656:	0f 93       	push	r16
    1658:	1f 93       	push	r17
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	0f 92       	push	r0
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	18 2f       	mov	r17, r24
    1666:	06 2f       	mov	r16, r22
}


void flushTxFifo() {

    mirf_CSN_lo;
    1668:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    166a:	81 ee       	ldi	r24, 0xE1	; 225
    166c:	99 83       	std	Y+1, r25	; 0x01
    166e:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1672:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1674:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1676:	88 ea       	ldi	r24, 0xA8	; 168
    1678:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    167c:	99 81       	ldd	r25, Y+1	; 0x01
    167e:	00 23       	and	r16, r16
    1680:	61 f0       	breq	.+24     	; 0x169a <writeAckPayload+0x48>
    1682:	61 2f       	mov	r22, r17
    1684:	79 2f       	mov	r23, r25
    1686:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1688:	f7 01       	movw	r30, r14
    168a:	81 91       	ld	r24, Z+
    168c:	7f 01       	movw	r14, r30
    168e:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1692:	8e 2d       	mov	r24, r14
    1694:	81 1b       	sub	r24, r17
    1696:	80 17       	cp	r24, r16
    1698:	b8 f3       	brcs	.-18     	; 0x1688 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    169a:	28 9a       	sbi	0x05, 0	; 5


}
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	08 95       	ret

000016ac <flushTxFifo>:


void flushTxFifo() {

    mirf_CSN_lo;
    16ac:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    16ae:	81 ee       	ldi	r24, 0xE1	; 225
    16b0:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    16b4:	28 9a       	sbi	0x05, 0	; 5

}
    16b6:	08 95       	ret

000016b8 <handleRFCommands>:

void handleRFCommands() {
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    16be:	80 91 7a 04 	lds	r24, 0x047A
    16c2:	88 23       	and	r24, r24
    16c4:	21 f0       	breq	.+8      	; 0x16ce <handleRFCommands+0x16>

		writeAckPayload(ackPayload, 16);

	}

}
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    16ce:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    16d6:	28 9a       	sbi	0x05, 0	; 5

void handleRFCommands() {

	unsigned int i=0;

	if(mirf_data_ready()) {
    16d8:	86 ff       	sbrs	r24, 6
    16da:	f5 cf       	rjmp	.-22     	; 0x16c6 <handleRFCommands+0xe>

		rfFlags |= 0x02;
    16dc:	80 91 13 03 	lds	r24, 0x0313
    16e0:	82 60       	ori	r24, 0x02	; 2
    16e2:	80 93 13 03 	sts	0x0313, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    16e6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    16e8:	87 e2       	ldi	r24, 0x27	; 39
    16ea:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    16ee:	80 e7       	ldi	r24, 0x70	; 112
    16f0:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    16f4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    16f6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    16f8:	81 e6       	ldi	r24, 0x61	; 97
    16fa:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    16fe:	88 e9       	ldi	r24, 0x98	; 152
    1700:	94 e0       	ldi	r25, 0x04	; 4
    1702:	bc 01       	movw	r22, r24
    1704:	4d e0       	ldi	r20, 0x0D	; 13
    1706:	0e 94 72 09 	call	0x12e4	; 0x12e4 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    170a:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    170c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    170e:	87 e2       	ldi	r24, 0x27	; 39
    1710:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1714:	80 e4       	ldi	r24, 0x40	; 64
    1716:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    171a:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    171c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    171e:	82 ee       	ldi	r24, 0xE2	; 226
    1720:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    1724:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1726:	60 91 98 04 	lds	r22, 0x0498
    172a:	66 23       	and	r22, r22
    172c:	09 f4       	brne	.+2      	; 0x1730 <handleRFCommands+0x78>
    172e:	95 c1       	rjmp	.+810    	; 0x1a5a <handleRFCommands+0x3a2>
    1730:	50 91 9c 04 	lds	r21, 0x049C
    1734:	40 91 9d 04 	lds	r20, 0x049D
    1738:	e0 91 99 04 	lds	r30, 0x0499
    173c:	70 91 9a 04 	lds	r23, 0x049A

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1740:	25 2f       	mov	r18, r21
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	2f 77       	andi	r18, 0x7F	; 127
    1746:	30 70       	andi	r19, 0x00	; 0
    1748:	30 93 10 03 	sts	0x0310, r19
    174c:	20 93 0f 03 	sts	0x030F, r18
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1750:	84 2f       	mov	r24, r20
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	8f 77       	andi	r24, 0x7F	; 127
    1756:	90 70       	andi	r25, 0x00	; 0
    1758:	90 93 0e 03 	sts	0x030E, r25
    175c:	80 93 0d 03 	sts	0x030D, r24
									// in the same range of the measured speed that is 0..800.
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
    1760:	57 fd       	sbrc	r21, 7
    1762:	a3 c2       	rjmp	.+1350   	; 0x1caa <handleRFCommands+0x5f2>
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
    1764:	22 0f       	add	r18, r18
    1766:	33 1f       	adc	r19, r19
    1768:	22 0f       	add	r18, r18
    176a:	33 1f       	adc	r19, r19
    176c:	30 95       	com	r19
    176e:	21 95       	neg	r18
    1770:	3f 4f       	sbci	r19, 0xFF	; 255
    1772:	30 93 fa 02 	sts	0x02FA, r19
    1776:	20 93 f9 02 	sts	0x02F9, r18
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    177a:	47 fd       	sbrc	r20, 7
    177c:	a0 c2       	rjmp	.+1344   	; 0x1cbe <handleRFCommands+0x606>
			pwm_left_desired = speedl<<2;
		} else {								// backward
			pwm_left_desired = -(speedl<<2);
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	90 95       	com	r25
    1788:	81 95       	neg	r24
    178a:	9f 4f       	sbci	r25, 0xFF	; 255
    178c:	90 93 fc 02 	sts	0x02FC, r25
    1790:	80 93 fb 02 	sts	0x02FB, r24
		}

		if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    1794:	42 e0       	ldi	r20, 0x02	; 2
    1796:	21 30       	cpi	r18, 0x01	; 1
    1798:	34 07       	cpc	r19, r20
    179a:	44 f0       	brlt	.+16     	; 0x17ac <handleRFCommands+0xf4>
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	52 e0       	ldi	r21, 0x02	; 2
    17a0:	50 93 fa 02 	sts	0x02FA, r21
    17a4:	40 93 f9 02 	sts	0x02F9, r20
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	32 e0       	ldi	r19, 0x02	; 2
		if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    17ac:	42 e0       	ldi	r20, 0x02	; 2
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	94 07       	cpc	r25, r20
    17b2:	34 f0       	brlt	.+12     	; 0x17c0 <handleRFCommands+0x108>
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	92 e0       	ldi	r25, 0x02	; 2
    17b8:	90 93 fc 02 	sts	0x02FC, r25
    17bc:	80 93 fb 02 	sts	0x02FB, r24
		if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    17c0:	4e ef       	ldi	r20, 0xFE	; 254
    17c2:	20 30       	cpi	r18, 0x00	; 0
    17c4:	34 07       	cpc	r19, r20
    17c6:	34 f4       	brge	.+12     	; 0x17d4 <handleRFCommands+0x11c>
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	5e ef       	ldi	r21, 0xFE	; 254
    17cc:	50 93 fa 02 	sts	0x02FA, r21
    17d0:	40 93 f9 02 	sts	0x02F9, r20
		if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    17d4:	2e ef       	ldi	r18, 0xFE	; 254
    17d6:	80 30       	cpi	r24, 0x00	; 0
    17d8:	92 07       	cpc	r25, r18
    17da:	34 f4       	brge	.+12     	; 0x17e8 <handleRFCommands+0x130>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	9e ef       	ldi	r25, 0xFE	; 254
    17e0:	90 93 fc 02 	sts	0x02FC, r25
    17e4:	80 93 fb 02 	sts	0x02FB, r24


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    17e8:	26 2f       	mov	r18, r22
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	30 93 91 04 	sts	0x0491, r19
    17f0:	20 93 90 04 	sts	0x0490, r18
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	f0 93 93 04 	sts	0x0493, r31
    17fa:	e0 93 92 04 	sts	0x0492, r30
    17fe:	c7 2f       	mov	r28, r23
    1800:	d0 e0       	ldi	r29, 0x00	; 0
    1802:	d0 93 95 04 	sts	0x0495, r29
    1806:	c0 93 94 04 	sts	0x0494, r28
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    180a:	92 2f       	mov	r25, r18
    180c:	88 27       	eor	r24, r24
    180e:	82 1b       	sub	r24, r18
    1810:	93 0b       	sbc	r25, r19
    1812:	24 e6       	ldi	r18, 0x64	; 100
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	b9 01       	movw	r22, r18
    1818:	0e 94 3e 30 	call	0x607c	; 0x607c <__udivmodhi4>
    181c:	16 2f       	mov	r17, r22
    181e:	10 95       	com	r17
    1820:	10 93 0c 02 	sts	0x020C, r17
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    1824:	5e 2f       	mov	r21, r30
    1826:	44 27       	eor	r20, r20
    1828:	4e 1b       	sub	r20, r30
    182a:	5f 0b       	sbc	r21, r31
    182c:	ca 01       	movw	r24, r20
    182e:	b9 01       	movw	r22, r18
    1830:	0e 94 3e 30 	call	0x607c	; 0x607c <__udivmodhi4>
    1834:	60 95       	com	r22
    1836:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    183a:	5c 2f       	mov	r21, r28
    183c:	44 27       	eor	r20, r20
    183e:	4c 1b       	sub	r20, r28
    1840:	5d 0b       	sbc	r21, r29
    1842:	ca 01       	movw	r24, r20
    1844:	b9 01       	movw	r22, r18
    1846:	0e 94 3e 30 	call	0x607c	; 0x607c <__udivmodhi4>
    184a:	60 95       	com	r22
    184c:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    1850:	81 2f       	mov	r24, r17
    1852:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <updateRedLed>
		updateGreenLed(pwm_green);
    1856:	80 91 0d 02 	lds	r24, 0x020D
    185a:	0e 94 75 25 	call	0x4aea	; 0x4aea <updateGreenLed>
		updateBlueLed(pwm_blue);
    185e:	80 91 0e 02 	lds	r24, 0x020E
    1862:	0e 94 89 25 	call	0x4b12	; 0x4b12 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    1866:	80 91 9b 04 	lds	r24, 0x049B
    186a:	80 ff       	sbrs	r24, 0
    186c:	02 c1       	rjmp	.+516    	; 0x1a72 <handleRFCommands+0x3ba>
			LED_IR1_LOW;
    186e:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1870:	81 ff       	sbrs	r24, 1
    1872:	02 c1       	rjmp	.+516    	; 0x1a78 <handleRFCommands+0x3c0>
			LED_IR2_LOW;
    1874:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1876:	98 2f       	mov	r25, r24
    1878:	82 ff       	sbrs	r24, 2
    187a:	02 c1       	rjmp	.+516    	; 0x1a80 <handleRFCommands+0x3c8>
			irEnabled = 1;
    187c:	21 e0       	ldi	r18, 0x01	; 1
    187e:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1882:	84 fd       	sbrc	r24, 4
    1884:	01 c1       	rjmp	.+514    	; 0x1a88 <handleRFCommands+0x3d0>
			calibrateSensors();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1886:	86 ff       	sbrs	r24, 6
    1888:	06 c1       	rjmp	.+524    	; 0x1a96 <handleRFCommands+0x3de>
			obstacleAvoidanceEnabled = 1;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	80 93 62 04 	sts	0x0462, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1890:	97 fd       	sbrc	r25, 7
    1892:	05 c1       	rjmp	.+522    	; 0x1a9e <handleRFCommands+0x3e6>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    1894:	10 92 63 04 	sts	0x0463, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1898:	80 91 9e 04 	lds	r24, 0x049E
    189c:	80 ff       	sbrs	r24, 0
    189e:	06 c1       	rjmp	.+524    	; 0x1aac <handleRFCommands+0x3f4>
				GREEN_LED0_ON;
    18a0:	80 91 0b 01 	lds	r24, 0x010B
    18a4:	8e 7f       	andi	r24, 0xFE	; 254
    18a6:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    18aa:	80 91 9e 04 	lds	r24, 0x049E
    18ae:	81 ff       	sbrs	r24, 1
    18b0:	06 c1       	rjmp	.+524    	; 0x1abe <handleRFCommands+0x406>
				GREEN_LED1_ON;
    18b2:	80 91 0b 01 	lds	r24, 0x010B
    18b6:	8d 7f       	andi	r24, 0xFD	; 253
    18b8:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    18bc:	80 91 9e 04 	lds	r24, 0x049E
    18c0:	82 ff       	sbrs	r24, 2
    18c2:	06 c1       	rjmp	.+524    	; 0x1ad0 <handleRFCommands+0x418>
				GREEN_LED2_ON;
    18c4:	80 91 0b 01 	lds	r24, 0x010B
    18c8:	8b 7f       	andi	r24, 0xFB	; 251
    18ca:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    18ce:	80 91 9e 04 	lds	r24, 0x049E
    18d2:	83 ff       	sbrs	r24, 3
    18d4:	06 c1       	rjmp	.+524    	; 0x1ae2 <handleRFCommands+0x42a>
				GREEN_LED3_ON;
    18d6:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    18d8:	80 91 9e 04 	lds	r24, 0x049E
    18dc:	84 ff       	sbrs	r24, 4
    18de:	06 c1       	rjmp	.+524    	; 0x1aec <handleRFCommands+0x434>
				GREEN_LED4_ON;
    18e0:	80 91 0b 01 	lds	r24, 0x010B
    18e4:	8f 7e       	andi	r24, 0xEF	; 239
    18e6:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    18ea:	80 91 9e 04 	lds	r24, 0x049E
    18ee:	85 ff       	sbrs	r24, 5
    18f0:	06 c1       	rjmp	.+524    	; 0x1afe <handleRFCommands+0x446>
				GREEN_LED5_ON;
    18f2:	80 91 0b 01 	lds	r24, 0x010B
    18f6:	8f 7d       	andi	r24, 0xDF	; 223
    18f8:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    18fc:	80 91 9e 04 	lds	r24, 0x049E
    1900:	86 ff       	sbrs	r24, 6
    1902:	06 c1       	rjmp	.+524    	; 0x1b10 <handleRFCommands+0x458>
				GREEN_LED6_ON;
    1904:	80 91 0b 01 	lds	r24, 0x010B
    1908:	8f 7b       	andi	r24, 0xBF	; 191
    190a:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    190e:	80 91 9e 04 	lds	r24, 0x049E
    1912:	87 fd       	sbrc	r24, 7
    1914:	06 c1       	rjmp	.+524    	; 0x1b22 <handleRFCommands+0x46a>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    1916:	80 91 0b 01 	lds	r24, 0x010B
    191a:	80 68       	ori	r24, 0x80	; 128
    191c:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1920:	80 91 0b 02 	lds	r24, 0x020B
    1924:	80 93 80 04 	sts	0x0480, r24

		switch(packetId) {
    1928:	85 30       	cpi	r24, 0x05	; 5
    192a:	09 f4       	brne	.+2      	; 0x192e <handleRFCommands+0x276>
    192c:	06 c1       	rjmp	.+524    	; 0x1b3a <handleRFCommands+0x482>
    192e:	86 30       	cpi	r24, 0x06	; 6
    1930:	08 f0       	brcs	.+2      	; 0x1934 <handleRFCommands+0x27c>
    1932:	5f c1       	rjmp	.+702    	; 0x1bf2 <handleRFCommands+0x53a>
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	09 f4       	brne	.+2      	; 0x193a <handleRFCommands+0x282>
    1938:	32 c2       	rjmp	.+1124   	; 0x1d9e <handleRFCommands+0x6e6>
    193a:	84 30       	cpi	r24, 0x04	; 4
    193c:	09 f0       	breq	.+2      	; 0x1940 <handleRFCommands+0x288>
    193e:	3f c0       	rjmp	.+126    	; 0x19be <handleRFCommands+0x306>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    1940:	90 91 61 02 	lds	r25, 0x0261
    1944:	80 91 62 02 	lds	r24, 0x0262
    1948:	90 93 81 04 	sts	0x0481, r25
				ackPayload[2] = proximityResult[4]>>8;
    194c:	80 93 82 04 	sts	0x0482, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    1950:	90 91 69 02 	lds	r25, 0x0269
    1954:	80 91 6a 02 	lds	r24, 0x026A
    1958:	90 93 83 04 	sts	0x0483, r25
				ackPayload[4] = proximityResult[8]>>8;
    195c:	80 93 84 04 	sts	0x0484, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    1960:	90 91 6b 02 	lds	r25, 0x026B
    1964:	80 91 6c 02 	lds	r24, 0x026C
    1968:	90 93 85 04 	sts	0x0485, r25
				ackPayload[6] = proximityResult[9]>>8;
    196c:	80 93 86 04 	sts	0x0486, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    1970:	90 91 6d 02 	lds	r25, 0x026D
    1974:	80 91 6e 02 	lds	r24, 0x026E
    1978:	90 93 87 04 	sts	0x0487, r25
				ackPayload[8] = proximityResult[10]>>8;
    197c:	80 93 88 04 	sts	0x0488, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    1980:	90 91 6f 02 	lds	r25, 0x026F
    1984:	80 91 70 02 	lds	r24, 0x0270
    1988:	90 93 89 04 	sts	0x0489, r25
				ackPayload[10] = proximityResult[11]>>8;
    198c:	80 93 8a 04 	sts	0x048A, r24
				ackPayload[11] = accX&0xFF;	//((-accOffsetY)&0x03FF)
    1990:	90 91 26 04 	lds	r25, 0x0426
    1994:	80 91 27 04 	lds	r24, 0x0427
    1998:	90 93 8b 04 	sts	0x048B, r25
				ackPayload[12] = accX>>8;
    199c:	80 93 8c 04 	sts	0x048C, r24
				ackPayload[13] = accY&0xFF;
    19a0:	90 91 28 04 	lds	r25, 0x0428
    19a4:	80 91 29 04 	lds	r24, 0x0429
    19a8:	90 93 8d 04 	sts	0x048D, r25
				ackPayload[14] = accY>>8;
    19ac:	80 93 8e 04 	sts	0x048E, r24
				ackPayload[15] = irCommand;
    19b0:	80 91 21 04 	lds	r24, 0x0421
    19b4:	80 93 8f 04 	sts	0x048F, r24
				packetId = 5;
    19b8:	85 e0       	ldi	r24, 0x05	; 5
    19ba:	80 93 0b 02 	sts	0x020B, r24
}


void flushTxFifo() {

    mirf_CSN_lo;
    19be:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    19c0:	81 ee       	ldi	r24, 0xE1	; 225
    19c2:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    mirf_CSN_hi;
    19c6:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    19c8:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    19ca:	88 ea       	ldi	r24, 0xA8	; 168
    19cc:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    19d0:	80 91 80 04 	lds	r24, 0x0480
    19d4:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    19d8:	80 91 81 04 	lds	r24, 0x0481
    19dc:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    19e0:	80 91 82 04 	lds	r24, 0x0482
    19e4:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    19e8:	80 91 83 04 	lds	r24, 0x0483
    19ec:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    19f0:	80 91 84 04 	lds	r24, 0x0484
    19f4:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    19f8:	80 91 85 04 	lds	r24, 0x0485
    19fc:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    1a00:	80 91 86 04 	lds	r24, 0x0486
    1a04:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    1a08:	80 91 87 04 	lds	r24, 0x0487
    1a0c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    1a10:	80 91 88 04 	lds	r24, 0x0488
    1a14:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    1a18:	80 91 89 04 	lds	r24, 0x0489
    1a1c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    1a20:	80 91 8a 04 	lds	r24, 0x048A
    1a24:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    1a28:	80 91 8b 04 	lds	r24, 0x048B
    1a2c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    1a30:	80 91 8c 04 	lds	r24, 0x048C
    1a34:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    1a38:	80 91 8d 04 	lds	r24, 0x048D
    1a3c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    1a40:	80 91 8e 04 	lds	r24, 0x048E
    1a44:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
    1a48:	80 91 8f 04 	lds	r24, 0x048F
    1a4c:	0e 94 b6 09 	call	0x136c	; 0x136c <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    1a50:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1a5a:	e0 91 99 04 	lds	r30, 0x0499
    1a5e:	ee 23       	and	r30, r30
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <handleRFCommands+0x3ac>
    1a62:	36 c1       	rjmp	.+620    	; 0x1cd0 <handleRFCommands+0x618>
    1a64:	50 91 9c 04 	lds	r21, 0x049C
    1a68:	40 91 9d 04 	lds	r20, 0x049D
    1a6c:	70 91 9a 04 	lds	r23, 0x049A
    1a70:	67 ce       	rjmp	.-818    	; 0x1740 <handleRFCommands+0x88>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    1a72:	44 9a       	sbi	0x08, 4	; 8
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1a74:	81 fd       	sbrc	r24, 1
    1a76:	fe ce       	rjmp	.-516    	; 0x1874 <handleRFCommands+0x1bc>
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    1a78:	45 9a       	sbi	0x08, 5	; 8
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1a7a:	98 2f       	mov	r25, r24
    1a7c:	82 fd       	sbrc	r24, 2
    1a7e:	fe ce       	rjmp	.-516    	; 0x187c <handleRFCommands+0x1c4>
			irEnabled = 1;
		} else {
			irEnabled = 0;
    1a80:	10 92 12 02 	sts	0x0212, r1
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1a84:	84 ff       	sbrs	r24, 4
    1a86:	ff ce       	rjmp	.-514    	; 0x1886 <handleRFCommands+0x1ce>
			calibrateSensors();
    1a88:	0e 94 59 28 	call	0x50b2	; 0x50b2 <calibrateSensors>
    1a8c:	90 91 9b 04 	lds	r25, 0x049B
    1a90:	89 2f       	mov	r24, r25
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1a92:	86 fd       	sbrc	r24, 6
    1a94:	fa ce       	rjmp	.-524    	; 0x188a <handleRFCommands+0x1d2>
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    1a96:	10 92 62 04 	sts	0x0462, r1
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1a9a:	97 ff       	sbrs	r25, 7
    1a9c:	fb ce       	rjmp	.-522    	; 0x1894 <handleRFCommands+0x1dc>
			cliffAvoidanceEnabled = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	80 93 63 04 	sts	0x0463, r24
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1aa4:	80 91 9e 04 	lds	r24, 0x049E
    1aa8:	80 fd       	sbrc	r24, 0
    1aaa:	fa ce       	rjmp	.-524    	; 0x18a0 <handleRFCommands+0x1e8>
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    1aac:	80 91 0b 01 	lds	r24, 0x010B
    1ab0:	81 60       	ori	r24, 0x01	; 1
    1ab2:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1ab6:	80 91 9e 04 	lds	r24, 0x049E
    1aba:	81 fd       	sbrc	r24, 1
    1abc:	fa ce       	rjmp	.-524    	; 0x18b2 <handleRFCommands+0x1fa>
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    1abe:	80 91 0b 01 	lds	r24, 0x010B
    1ac2:	82 60       	ori	r24, 0x02	; 2
    1ac4:	80 93 0b 01 	sts	0x010B, r24
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1ac8:	80 91 9e 04 	lds	r24, 0x049E
    1acc:	82 fd       	sbrc	r24, 2
    1ace:	fa ce       	rjmp	.-524    	; 0x18c4 <handleRFCommands+0x20c>
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    1ad0:	80 91 0b 01 	lds	r24, 0x010B
    1ad4:	84 60       	ori	r24, 0x04	; 4
    1ad6:	80 93 0b 01 	sts	0x010B, r24
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1ada:	80 91 9e 04 	lds	r24, 0x049E
    1ade:	83 fd       	sbrc	r24, 3
    1ae0:	fa ce       	rjmp	.-524    	; 0x18d6 <handleRFCommands+0x21e>
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    1ae2:	a3 9a       	sbi	0x14, 3	; 20
			}

			if(bit_is_set(rfData[6], 4) ) {
    1ae4:	80 91 9e 04 	lds	r24, 0x049E
    1ae8:	84 fd       	sbrc	r24, 4
    1aea:	fa ce       	rjmp	.-524    	; 0x18e0 <handleRFCommands+0x228>
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    1aec:	80 91 0b 01 	lds	r24, 0x010B
    1af0:	80 61       	ori	r24, 0x10	; 16
    1af2:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 5) ) {
    1af6:	80 91 9e 04 	lds	r24, 0x049E
    1afa:	85 fd       	sbrc	r24, 5
    1afc:	fa ce       	rjmp	.-524    	; 0x18f2 <handleRFCommands+0x23a>
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    1afe:	80 91 0b 01 	lds	r24, 0x010B
    1b02:	80 62       	ori	r24, 0x20	; 32
    1b04:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 6) ) {
    1b08:	80 91 9e 04 	lds	r24, 0x049E
    1b0c:	86 fd       	sbrc	r24, 6
    1b0e:	fa ce       	rjmp	.-524    	; 0x1904 <handleRFCommands+0x24c>
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    1b10:	80 91 0b 01 	lds	r24, 0x010B
    1b14:	80 64       	ori	r24, 0x40	; 64
    1b16:	80 93 0b 01 	sts	0x010B, r24
			}

			if(bit_is_set(rfData[6], 7) ) {
    1b1a:	80 91 9e 04 	lds	r24, 0x049E
    1b1e:	87 ff       	sbrs	r24, 7
    1b20:	fa ce       	rjmp	.-524    	; 0x1916 <handleRFCommands+0x25e>
				GREEN_LED7_ON;
    1b22:	80 91 0b 01 	lds	r24, 0x010B
    1b26:	8f 77       	andi	r24, 0x7F	; 127
    1b28:	80 93 0b 01 	sts	0x010B, r24
		#endif

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1b2c:	80 91 0b 02 	lds	r24, 0x020B
    1b30:	80 93 80 04 	sts	0x0480, r24

		switch(packetId) {
    1b34:	85 30       	cpi	r24, 0x05	; 5
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <handleRFCommands+0x482>
    1b38:	fa ce       	rjmp	.-524    	; 0x192e <handleRFCommands+0x276>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    1b3a:	80 91 29 02 	lds	r24, 0x0229
    1b3e:	90 91 2a 02 	lds	r25, 0x022A
    1b42:	80 93 81 04 	sts	0x0481, r24
				ackPayload[2] = proximityValue[0]>>8;
    1b46:	80 91 29 02 	lds	r24, 0x0229
    1b4a:	90 91 2a 02 	lds	r25, 0x022A
    1b4e:	90 93 82 04 	sts	0x0482, r25
				ackPayload[3] = proximityValue[2]&0xFF;
    1b52:	80 91 2d 02 	lds	r24, 0x022D
    1b56:	90 91 2e 02 	lds	r25, 0x022E
    1b5a:	80 93 83 04 	sts	0x0483, r24
				ackPayload[4] = proximityValue[2]>>8;
    1b5e:	80 91 2d 02 	lds	r24, 0x022D
    1b62:	90 91 2e 02 	lds	r25, 0x022E
    1b66:	90 93 84 04 	sts	0x0484, r25
				ackPayload[5] = proximityValue[4]&0xFF;
    1b6a:	80 91 31 02 	lds	r24, 0x0231
    1b6e:	90 91 32 02 	lds	r25, 0x0232
    1b72:	80 93 85 04 	sts	0x0485, r24
				ackPayload[6] = proximityValue[4]>>8;
    1b76:	80 91 31 02 	lds	r24, 0x0231
    1b7a:	90 91 32 02 	lds	r25, 0x0232
    1b7e:	90 93 86 04 	sts	0x0486, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    1b82:	80 91 35 02 	lds	r24, 0x0235
    1b86:	90 91 36 02 	lds	r25, 0x0236
    1b8a:	80 93 87 04 	sts	0x0487, r24
				ackPayload[8] = proximityValue[6]>>8;
    1b8e:	80 91 35 02 	lds	r24, 0x0235
    1b92:	90 91 36 02 	lds	r25, 0x0236
    1b96:	90 93 88 04 	sts	0x0488, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    1b9a:	80 91 3d 02 	lds	r24, 0x023D
    1b9e:	90 91 3e 02 	lds	r25, 0x023E
    1ba2:	80 93 89 04 	sts	0x0489, r24
				ackPayload[10] = proximityValue[10]>>8;
    1ba6:	80 91 3d 02 	lds	r24, 0x023D
    1baa:	90 91 3e 02 	lds	r25, 0x023E
    1bae:	90 93 8a 04 	sts	0x048A, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    1bb2:	80 91 41 02 	lds	r24, 0x0241
    1bb6:	90 91 42 02 	lds	r25, 0x0242
    1bba:	80 93 8b 04 	sts	0x048B, r24
				ackPayload[12] = proximityValue[12]>>8;
    1bbe:	80 91 41 02 	lds	r24, 0x0241
    1bc2:	90 91 42 02 	lds	r25, 0x0242
    1bc6:	90 93 8c 04 	sts	0x048C, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    1bca:	80 91 45 02 	lds	r24, 0x0245
    1bce:	90 91 46 02 	lds	r25, 0x0246
    1bd2:	80 93 8d 04 	sts	0x048D, r24
				ackPayload[14] = proximityValue[14]>>8;
    1bd6:	80 91 45 02 	lds	r24, 0x0245
    1bda:	90 91 46 02 	lds	r25, 0x0246
    1bde:	90 93 8e 04 	sts	0x048E, r25
				ackPayload[15] = currentSelector;
    1be2:	80 91 49 04 	lds	r24, 0x0449
    1be6:	80 93 8f 04 	sts	0x048F, r24
				packetId = 6;
    1bea:	86 e0       	ldi	r24, 0x06	; 6
    1bec:	80 93 0b 02 	sts	0x020B, r24
				break;
    1bf0:	e6 ce       	rjmp	.-564    	; 0x19be <handleRFCommands+0x306>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    1bf2:	86 30       	cpi	r24, 0x06	; 6
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <handleRFCommands+0x540>
    1bf6:	81 c0       	rjmp	.+258    	; 0x1cfa <handleRFCommands+0x642>
    1bf8:	87 30       	cpi	r24, 0x07	; 7
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <handleRFCommands+0x546>
    1bfc:	e0 ce       	rjmp	.-576    	; 0x19be <handleRFCommands+0x306>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = leftMotSteps&0xFF;
    1bfe:	30 91 d5 02 	lds	r19, 0x02D5
    1c02:	20 91 d6 02 	lds	r18, 0x02D6
    1c06:	90 91 d7 02 	lds	r25, 0x02D7
    1c0a:	80 91 d8 02 	lds	r24, 0x02D8
    1c0e:	30 93 81 04 	sts	0x0481, r19
				ackPayload[2] = leftMotSteps>>8;
    1c12:	20 93 82 04 	sts	0x0482, r18
				ackPayload[3] = leftMotSteps>>16;
    1c16:	90 93 83 04 	sts	0x0483, r25
				ackPayload[4] = leftMotSteps>>24;
    1c1a:	80 93 84 04 	sts	0x0484, r24
				ackPayload[5] = rightMotSteps&0xFF;
    1c1e:	30 91 d1 02 	lds	r19, 0x02D1
    1c22:	20 91 d2 02 	lds	r18, 0x02D2
    1c26:	90 91 d3 02 	lds	r25, 0x02D3
    1c2a:	80 91 d4 02 	lds	r24, 0x02D4
    1c2e:	30 93 85 04 	sts	0x0485, r19
				ackPayload[6] = rightMotSteps>>8;
    1c32:	20 93 86 04 	sts	0x0486, r18
				ackPayload[7] = rightMotSteps>>16;
    1c36:	90 93 87 04 	sts	0x0487, r25
				ackPayload[8] = rightMotSteps>>24;
    1c3a:	80 93 88 04 	sts	0x0488, r24
				ackPayload[9] = ((unsigned int)(theta*573.0))&0xFF;	//573 = 1800/PI
    1c3e:	60 91 65 04 	lds	r22, 0x0465
    1c42:	70 91 66 04 	lds	r23, 0x0466
    1c46:	80 91 67 04 	lds	r24, 0x0467
    1c4a:	90 91 68 04 	lds	r25, 0x0468
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e4       	ldi	r19, 0x40	; 64
    1c52:	4f e0       	ldi	r20, 0x0F	; 15
    1c54:	54 e4       	ldi	r21, 0x44	; 68
    1c56:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__mulsf3>
    1c5a:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__fixunssfsi>
    1c5e:	60 93 89 04 	sts	0x0489, r22
				ackPayload[10] = ((unsigned int)(theta*573.0))>>8;
    1c62:	70 93 8a 04 	sts	0x048A, r23
				ackPayload[11] = ((unsigned int)xPos)&0xFF;
    1c66:	60 91 69 04 	lds	r22, 0x0469
    1c6a:	70 91 6a 04 	lds	r23, 0x046A
    1c6e:	80 91 6b 04 	lds	r24, 0x046B
    1c72:	90 91 6c 04 	lds	r25, 0x046C
    1c76:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__fixunssfsi>
    1c7a:	60 93 8b 04 	sts	0x048B, r22
				ackPayload[12] = ((unsigned int)xPos)>>8;
    1c7e:	70 93 8c 04 	sts	0x048C, r23
				ackPayload[13] = ((unsigned int)yPos)&0xFF;
    1c82:	60 91 6d 04 	lds	r22, 0x046D
    1c86:	70 91 6e 04 	lds	r23, 0x046E
    1c8a:	80 91 6f 04 	lds	r24, 0x046F
    1c8e:	90 91 70 04 	lds	r25, 0x0470
    1c92:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__fixunssfsi>
    1c96:	60 93 8d 04 	sts	0x048D, r22
				ackPayload[14] = ((unsigned int)yPos)>>8;
    1c9a:	70 93 8e 04 	sts	0x048E, r23
				ackPayload[15] = 0;
    1c9e:	10 92 8f 04 	sts	0x048F, r1
				packetId = 3;
    1ca2:	83 e0       	ldi	r24, 0x03	; 3
    1ca4:	80 93 0b 02 	sts	0x020B, r24
				break;
    1ca8:	8a ce       	rjmp	.-748    	; 0x19be <handleRFCommands+0x306>
									// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
									// this means that the range is more or less 0..400.


		if((rfData[4]&0x80)==0x80) {			// motor right forward
			pwm_right_desired = speedr<<2;				// scale the speed received (0..100) to be in the range 0..400
    1caa:	22 0f       	add	r18, r18
    1cac:	33 1f       	adc	r19, r19
    1cae:	22 0f       	add	r18, r18
    1cb0:	33 1f       	adc	r19, r19
    1cb2:	30 93 fa 02 	sts	0x02FA, r19
    1cb6:	20 93 f9 02 	sts	0x02F9, r18
		} else {								// backward
			pwm_right_desired = -(speedr<<2);
		}

		if((rfData[5]&0x80)==0x80) {			// motor left forward
    1cba:	47 ff       	sbrs	r20, 7
    1cbc:	60 cd       	rjmp	.-1344   	; 0x177e <handleRFCommands+0xc6>
			pwm_left_desired = speedl<<2;
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	90 93 fc 02 	sts	0x02FC, r25
    1cca:	80 93 fb 02 	sts	0x02FB, r24
    1cce:	62 cd       	rjmp	.-1340   	; 0x1794 <handleRFCommands+0xdc>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1cd0:	70 91 9a 04 	lds	r23, 0x049A
    1cd4:	77 23       	and	r23, r23
    1cd6:	61 f4       	brne	.+24     	; 0x1cf0 <handleRFCommands+0x638>
    1cd8:	80 91 9b 04 	lds	r24, 0x049B
    1cdc:	88 30       	cpi	r24, 0x08	; 8
    1cde:	41 f4       	brne	.+16     	; 0x1cf0 <handleRFCommands+0x638>
    1ce0:	50 91 9c 04 	lds	r21, 0x049C
    1ce4:	55 23       	and	r21, r21
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <handleRFCommands+0x632>
    1ce8:	c0 c0       	rjmp	.+384    	; 0x1e6a <handleRFCommands+0x7b2>
    1cea:	40 91 9d 04 	lds	r20, 0x049D
    1cee:	28 cd       	rjmp	.-1456   	; 0x1740 <handleRFCommands+0x88>
    1cf0:	50 91 9c 04 	lds	r21, 0x049C
    1cf4:	40 91 9d 04 	lds	r20, 0x049D
    1cf8:	23 cd       	rjmp	.-1466   	; 0x1740 <handleRFCommands+0x88>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    1cfa:	80 91 39 02 	lds	r24, 0x0239
    1cfe:	90 91 3a 02 	lds	r25, 0x023A
    1d02:	80 93 81 04 	sts	0x0481, r24
				ackPayload[2] = proximityValue[8]>>8;
    1d06:	80 91 39 02 	lds	r24, 0x0239
    1d0a:	90 91 3a 02 	lds	r25, 0x023A
    1d0e:	90 93 82 04 	sts	0x0482, r25
				ackPayload[3] = proximityValue[16]&0xFF;
    1d12:	80 91 49 02 	lds	r24, 0x0249
    1d16:	90 91 4a 02 	lds	r25, 0x024A
    1d1a:	80 93 83 04 	sts	0x0483, r24
				ackPayload[4] = proximityValue[16]>>8;
    1d1e:	80 91 49 02 	lds	r24, 0x0249
    1d22:	90 91 4a 02 	lds	r25, 0x024A
    1d26:	90 93 84 04 	sts	0x0484, r25
				ackPayload[5] = proximityValue[18]&0xFF;
    1d2a:	80 91 4d 02 	lds	r24, 0x024D
    1d2e:	90 91 4e 02 	lds	r25, 0x024E
    1d32:	80 93 85 04 	sts	0x0485, r24
				ackPayload[6] = proximityValue[18]>>8;
    1d36:	80 91 4d 02 	lds	r24, 0x024D
    1d3a:	90 91 4e 02 	lds	r25, 0x024E
    1d3e:	90 93 86 04 	sts	0x0486, r25
				ackPayload[7] = proximityValue[20]&0xFF;
    1d42:	80 91 51 02 	lds	r24, 0x0251
    1d46:	90 91 52 02 	lds	r25, 0x0252
    1d4a:	80 93 87 04 	sts	0x0487, r24
				ackPayload[8] = proximityValue[20]>>8;
    1d4e:	80 91 51 02 	lds	r24, 0x0251
    1d52:	90 91 52 02 	lds	r25, 0x0252
    1d56:	90 93 88 04 	sts	0x0488, r25
				ackPayload[9] = proximityValue[22]&0xFF;
    1d5a:	80 91 55 02 	lds	r24, 0x0255
    1d5e:	90 91 56 02 	lds	r25, 0x0256
    1d62:	80 93 89 04 	sts	0x0489, r24
				ackPayload[10] = proximityValue[22]>>8;
    1d66:	80 91 55 02 	lds	r24, 0x0255
    1d6a:	90 91 56 02 	lds	r25, 0x0256
    1d6e:	90 93 8a 04 	sts	0x048A, r25
				ackPayload[11] = accZ&0xFF;
    1d72:	90 91 2a 04 	lds	r25, 0x042A
    1d76:	80 91 2b 04 	lds	r24, 0x042B
    1d7a:	90 93 8b 04 	sts	0x048B, r25
				ackPayload[12] = accZ>>8;
    1d7e:	80 93 8c 04 	sts	0x048C, r24
				ackPayload[13] = batteryLevel&0xFF;
    1d82:	90 91 bd 02 	lds	r25, 0x02BD
    1d86:	80 91 be 02 	lds	r24, 0x02BE
    1d8a:	90 93 8d 04 	sts	0x048D, r25
				ackPayload[14] = batteryLevel>>8;
    1d8e:	80 93 8e 04 	sts	0x048E, r24
				ackPayload[15] = 0;
    1d92:	10 92 8f 04 	sts	0x048F, r1
				packetId = 7;
    1d96:	87 e0       	ldi	r24, 0x07	; 7
    1d98:	80 93 0b 02 	sts	0x020B, r24
				break;
    1d9c:	10 ce       	rjmp	.-992    	; 0x19be <handleRFCommands+0x306>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
    1d9e:	90 91 59 02 	lds	r25, 0x0259
    1da2:	80 91 5a 02 	lds	r24, 0x025A
    1da6:	90 93 81 04 	sts	0x0481, r25
				ackPayload[2] = proximityResult[0]>>8;
    1daa:	80 93 82 04 	sts	0x0482, r24
				ackPayload[3] = proximityResult[1]&0xFF;
    1dae:	90 91 5b 02 	lds	r25, 0x025B
    1db2:	80 91 5c 02 	lds	r24, 0x025C
    1db6:	90 93 83 04 	sts	0x0483, r25
				ackPayload[4] = proximityResult[1]>>8;
    1dba:	80 93 84 04 	sts	0x0484, r24
				ackPayload[5] = proximityResult[2]&0xFF;
    1dbe:	90 91 5d 02 	lds	r25, 0x025D
    1dc2:	80 91 5e 02 	lds	r24, 0x025E
    1dc6:	90 93 85 04 	sts	0x0485, r25
				ackPayload[6] = proximityResult[2]>>8;
    1dca:	80 93 86 04 	sts	0x0486, r24
				ackPayload[7] = proximityResult[3]&0xFF;
    1dce:	90 91 5f 02 	lds	r25, 0x025F
    1dd2:	80 91 60 02 	lds	r24, 0x0260
    1dd6:	90 93 87 04 	sts	0x0487, r25
				ackPayload[8] = proximityResult[3]>>8;
    1dda:	80 93 88 04 	sts	0x0488, r24
				ackPayload[9] = proximityResult[5]&0xFF;
    1dde:	90 91 63 02 	lds	r25, 0x0263
    1de2:	80 91 64 02 	lds	r24, 0x0264
    1de6:	90 93 89 04 	sts	0x0489, r25
				ackPayload[10] = proximityResult[5]>>8;
    1dea:	80 93 8a 04 	sts	0x048A, r24
				ackPayload[11] = proximityResult[6]&0xFF;
    1dee:	90 91 65 02 	lds	r25, 0x0265
    1df2:	80 91 66 02 	lds	r24, 0x0266
    1df6:	90 93 8b 04 	sts	0x048B, r25
				ackPayload[12] = proximityResult[6]>>8;
    1dfa:	80 93 8c 04 	sts	0x048C, r24
				ackPayload[13] = proximityResult[7]&0xFF;
    1dfe:	90 91 67 02 	lds	r25, 0x0267
    1e02:	80 91 68 02 	lds	r24, 0x0268
    1e06:	90 93 8d 04 	sts	0x048D, r25
				ackPayload[14] = proximityResult[7]>>8;
    1e0a:	80 93 8e 04 	sts	0x048E, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    1e0e:	30 91 03 01 	lds	r19, 0x0103
    1e12:	80 91 03 01 	lds	r24, 0x0103
    1e16:	20 91 03 01 	lds	r18, 0x0103
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	80 72       	andi	r24, 0x20	; 32
    1e1e:	90 70       	andi	r25, 0x00	; 0
    1e20:	95 95       	asr	r25
    1e22:	87 95       	ror	r24
    1e24:	95 95       	asr	r25
    1e26:	87 95       	ror	r24
    1e28:	95 95       	asr	r25
    1e2a:	87 95       	ror	r24
    1e2c:	95 95       	asr	r25
    1e2e:	87 95       	ror	r24
    1e30:	95 95       	asr	r25
    1e32:	87 95       	ror	r24
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	22 1f       	adc	r18, r18
    1e3a:	22 27       	eor	r18, r18
    1e3c:	22 1f       	adc	r18, r18
    1e3e:	22 0f       	add	r18, r18
    1e40:	22 0f       	add	r18, r18
    1e42:	28 2b       	or	r18, r24
    1e44:	83 2f       	mov	r24, r19
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	80 71       	andi	r24, 0x10	; 16
    1e4a:	90 70       	andi	r25, 0x00	; 0
    1e4c:	95 95       	asr	r25
    1e4e:	87 95       	ror	r24
    1e50:	95 95       	asr	r25
    1e52:	87 95       	ror	r24
    1e54:	95 95       	asr	r25
    1e56:	87 95       	ror	r24
    1e58:	95 95       	asr	r25
    1e5a:	87 95       	ror	r24
    1e5c:	28 2b       	or	r18, r24
    1e5e:	20 93 8f 04 	sts	0x048F, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    1e62:	84 e0       	ldi	r24, 0x04	; 4
    1e64:	80 93 0b 02 	sts	0x020B, r24
				break;
    1e68:	aa cd       	rjmp	.-1196   	; 0x19be <handleRFCommands+0x306>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1e6a:	40 91 9d 04 	lds	r20, 0x049D
    1e6e:	44 23       	and	r20, r20
    1e70:	79 f0       	breq	.+30     	; 0x1e90 <handleRFCommands+0x7d8>

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1e72:	10 92 10 03 	sts	0x0310, r1
    1e76:	10 92 0f 03 	sts	0x030F, r1
		speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1e7a:	84 2f       	mov	r24, r20
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	8f 77       	andi	r24, 0x7F	; 127
    1e80:	90 70       	andi	r25, 0x00	; 0
    1e82:	90 93 0e 03 	sts	0x030E, r25
    1e86:	80 93 0d 03 	sts	0x030D, r24

			sleep(60);

		}

		speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	6a cc       	rjmp	.-1836   	; 0x1764 <handleRFCommands+0xac>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    1e90:	8c e3       	ldi	r24, 0x3C	; 60
    1e92:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <sleep>
    1e96:	50 91 9c 04 	lds	r21, 0x049C
    1e9a:	40 91 9d 04 	lds	r20, 0x049D
    1e9e:	60 91 98 04 	lds	r22, 0x0498
    1ea2:	e0 91 99 04 	lds	r30, 0x0499
    1ea6:	70 91 9a 04 	lds	r23, 0x049A
    1eaa:	4a cc       	rjmp	.-1900   	; 0x1740 <handleRFCommands+0x88>

00001eac <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29

	PCICR = 0;
    1eb0:	c8 e6       	ldi	r28, 0x68	; 104
    1eb2:	d0 e0       	ldi	r29, 0x00	; 0
    1eb4:	18 82       	st	Y, r1
	PCMSK1 = 0;
    1eb6:	ac e6       	ldi	r26, 0x6C	; 108
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	1c 92       	st	X, r1
	TCCR2A = 0;
    1ebc:	e0 eb       	ldi	r30, 0xB0	; 176
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	10 82       	st	Z, r1
	TCCR2B = 0;
    1ec2:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    1ec6:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    1eca:	88 81       	ld	r24, Y
    1ecc:	82 60       	ori	r24, 0x02	; 2
    1ece:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    1ed0:	8c 91       	ld	r24, X
    1ed2:	80 68       	ori	r24, 0x80	; 128
    1ed4:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    1ed6:	80 81       	ld	r24, Z
    1ed8:	82 60       	ori	r24, 0x02	; 2
    1eda:	80 83       	st	Z, r24

}
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	08 95       	ret

00001ee2 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    1ee2:	1f 92       	push	r1
    1ee4:	0f 92       	push	r0
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	0f 92       	push	r0
    1eea:	11 24       	eor	r1, r1
    1eec:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    1eee:	80 91 12 02 	lds	r24, 0x0212
    1ef2:	88 23       	and	r24, r24
    1ef4:	21 f1       	breq	.+72     	; 0x1f3e <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    1ef6:	80 91 03 01 	lds	r24, 0x0103
    1efa:	86 fd       	sbrc	r24, 6
    1efc:	20 c0       	rjmp	.+64     	; 0x1f3e <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    1efe:	80 91 68 00 	lds	r24, 0x0068
    1f02:	8d 7f       	andi	r24, 0xFD	; 253
    1f04:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    1f08:	80 91 6c 00 	lds	r24, 0x006C
    1f0c:	8f 77       	andi	r24, 0x7F	; 127
    1f0e:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    1f18:	8d e0       	ldi	r24, 0x0D	; 13
    1f1a:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    1f1e:	80 91 b1 00 	lds	r24, 0x00B1
    1f22:	86 60       	ori	r24, 0x06	; 6
    1f24:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    1f28:	80 91 70 00 	lds	r24, 0x0070
    1f2c:	82 60       	ori	r24, 0x02	; 2
    1f2e:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    1f32:	10 92 20 02 	sts	0x0220, r1
    1f36:	10 92 21 02 	sts	0x0221, r1
    1f3a:	10 92 22 02 	sts	0x0222, r1

		}

	}
	
}
    1f3e:	8f 91       	pop	r24
    1f40:	0f 90       	pop	r0
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	0f 90       	pop	r0
    1f46:	1f 90       	pop	r1
    1f48:	18 95       	reti

00001f4a <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    1f4a:	1f 92       	push	r1
    1f4c:	0f 92       	push	r0
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	0f 92       	push	r0
    1f52:	11 24       	eor	r1, r1
    1f54:	2f 93       	push	r18
    1f56:	3f 93       	push	r19
    1f58:	4f 93       	push	r20
    1f5a:	5f 93       	push	r21
    1f5c:	8f 93       	push	r24
    1f5e:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    1f60:	80 91 b1 00 	lds	r24, 0x00B1
    1f64:	88 7f       	andi	r24, 0xF8	; 248
    1f66:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    1f6a:	80 91 13 02 	lds	r24, 0x0213
    1f6e:	88 23       	and	r24, r24
    1f70:	a9 f0       	breq	.+42     	; 0x1f9c <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    1f72:	80 91 03 01 	lds	r24, 0x0103
    1f76:	86 ff       	sbrs	r24, 6
    1f78:	65 c0       	rjmp	.+202    	; 0x2044 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    1f7a:	80 91 68 00 	lds	r24, 0x0068
    1f7e:	82 60       	ori	r24, 0x02	; 2
    1f80:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    1f84:	80 91 6c 00 	lds	r24, 0x006C
    1f88:	80 68       	ori	r24, 0x80	; 128
    1f8a:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    1f8e:	8f ef       	ldi	r24, 0xFF	; 255
    1f90:	9f ef       	ldi	r25, 0xFF	; 255
    1f92:	90 93 02 02 	sts	0x0202, r25
    1f96:	80 93 01 02 	sts	0x0201, r24
    1f9a:	49 c0       	rjmp	.+146    	; 0x202e <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    1f9c:	80 91 01 02 	lds	r24, 0x0201
    1fa0:	90 91 02 02 	lds	r25, 0x0202
    1fa4:	2f ef       	ldi	r18, 0xFF	; 255
    1fa6:	8f 3f       	cpi	r24, 0xFF	; 255
    1fa8:	92 07       	cpc	r25, r18
    1faa:	09 f4       	brne	.+2      	; 0x1fae <__vector_13+0x64>
    1fac:	63 c0       	rjmp	.+198    	; 0x2074 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <__vector_13+0x6c>
    1fb4:	98 c0       	rjmp	.+304    	; 0x20e6 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    1fb6:	9c 01       	movw	r18, r24
    1fb8:	22 50       	subi	r18, 0x02	; 2
    1fba:	30 40       	sbci	r19, 0x00	; 0
    1fbc:	25 30       	cpi	r18, 0x05	; 5
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	08 f4       	brcc	.+2      	; 0x1fc4 <__vector_13+0x7a>
    1fc2:	67 c0       	rjmp	.+206    	; 0x2092 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    1fc4:	9c 01       	movw	r18, r24
    1fc6:	27 50       	subi	r18, 0x07	; 7
    1fc8:	30 40       	sbci	r19, 0x00	; 0
    1fca:	26 30       	cpi	r18, 0x06	; 6
    1fcc:	31 05       	cpc	r19, r1
    1fce:	08 f0       	brcs	.+2      	; 0x1fd2 <__vector_13+0x88>
    1fd0:	bd c0       	rjmp	.+378    	; 0x214c <__vector_13+0x202>

				OCR2A = 54;
    1fd2:	26 e3       	ldi	r18, 0x36	; 54
    1fd4:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    1fd8:	20 91 b1 00 	lds	r18, 0x00B1
    1fdc:	26 60       	ori	r18, 0x06	; 6
    1fde:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    1fe2:	20 91 70 00 	lds	r18, 0x0070
    1fe6:	22 60       	ori	r18, 0x02	; 2
    1fe8:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    1fec:	20 91 03 01 	lds	r18, 0x0103
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	20 74       	andi	r18, 0x40	; 64
    1ff4:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    1ff6:	00 24       	eor	r0, r0
    1ff8:	22 0f       	add	r18, r18
    1ffa:	33 1f       	adc	r19, r19
    1ffc:	00 1c       	adc	r0, r0
    1ffe:	22 0f       	add	r18, r18
    2000:	33 1f       	adc	r19, r19
    2002:	00 1c       	adc	r0, r0
    2004:	23 2f       	mov	r18, r19
    2006:	30 2d       	mov	r19, r0
    2008:	4c e0       	ldi	r20, 0x0C	; 12
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	48 1b       	sub	r20, r24
    200e:	59 0b       	sbc	r21, r25
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <__vector_13+0xcc>
    2012:	22 0f       	add	r18, r18
    2014:	33 1f       	adc	r19, r19
    2016:	4a 95       	dec	r20
    2018:	e2 f7       	brpl	.-8      	; 0x2012 <__vector_13+0xc8>
				data_temp += temp;
    201a:	40 91 20 02 	lds	r20, 0x0220
    201e:	42 0f       	add	r20, r18
    2020:	40 93 20 02 	sts	0x0220, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    2024:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    2026:	90 93 02 02 	sts	0x0202, r25
    202a:	80 93 01 02 	sts	0x0201, r24

		}

}
    202e:	9f 91       	pop	r25
    2030:	8f 91       	pop	r24
    2032:	5f 91       	pop	r21
    2034:	4f 91       	pop	r20
    2036:	3f 91       	pop	r19
    2038:	2f 91       	pop	r18
    203a:	0f 90       	pop	r0
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	0f 90       	pop	r0
    2040:	1f 90       	pop	r1
    2042:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    2044:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    2048:	83 e3       	ldi	r24, 0x33	; 51
    204a:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    204e:	80 91 b1 00 	lds	r24, 0x00B1
    2052:	86 60       	ori	r24, 0x06	; 6
    2054:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2058:	80 91 70 00 	lds	r24, 0x0070
    205c:	82 60       	ori	r24, 0x02	; 2
    205e:	80 93 70 00 	sts	0x0070, r24
    2062:	80 91 01 02 	lds	r24, 0x0201
    2066:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    206a:	2f ef       	ldi	r18, 0xFF	; 255
    206c:	8f 3f       	cpi	r24, 0xFF	; 255
    206e:	92 07       	cpc	r25, r18
    2070:	c9 f6       	brne	.-78     	; 0x2024 <__vector_13+0xda>
    2072:	dd cf       	rjmp	.-70     	; 0x202e <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    2074:	20 91 03 01 	lds	r18, 0x0103
    2078:	26 ff       	sbrs	r18, 6
    207a:	52 c0       	rjmp	.+164    	; 0x2120 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    207c:	20 91 68 00 	lds	r18, 0x0068
    2080:	22 60       	ori	r18, 0x02	; 2
    2082:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2086:	20 91 6c 00 	lds	r18, 0x006C
    208a:	20 68       	ori	r18, 0x80	; 128
    208c:	20 93 6c 00 	sts	0x006C, r18
    2090:	ce cf       	rjmp	.-100    	; 0x202e <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    2092:	26 e3       	ldi	r18, 0x36	; 54
    2094:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2098:	20 91 b1 00 	lds	r18, 0x00B1
    209c:	26 60       	ori	r18, 0x06	; 6
    209e:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    20a2:	20 91 70 00 	lds	r18, 0x0070
    20a6:	22 60       	ori	r18, 0x02	; 2
    20a8:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    20ac:	20 91 03 01 	lds	r18, 0x0103
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	20 74       	andi	r18, 0x40	; 64
    20b4:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    20b6:	00 24       	eor	r0, r0
    20b8:	22 0f       	add	r18, r18
    20ba:	33 1f       	adc	r19, r19
    20bc:	00 1c       	adc	r0, r0
    20be:	22 0f       	add	r18, r18
    20c0:	33 1f       	adc	r19, r19
    20c2:	00 1c       	adc	r0, r0
    20c4:	23 2f       	mov	r18, r19
    20c6:	30 2d       	mov	r19, r0
    20c8:	46 e0       	ldi	r20, 0x06	; 6
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	48 1b       	sub	r20, r24
    20ce:	59 0b       	sbc	r21, r25
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <__vector_13+0x18c>
    20d2:	22 0f       	add	r18, r18
    20d4:	33 1f       	adc	r19, r19
    20d6:	4a 95       	dec	r20
    20d8:	e2 f7       	brpl	.-8      	; 0x20d2 <__vector_13+0x188>
				address_temp += temp;
    20da:	40 91 21 02 	lds	r20, 0x0221
    20de:	42 0f       	add	r20, r18
    20e0:	40 93 21 02 	sts	0x0221, r20
    20e4:	9f cf       	rjmp	.-194    	; 0x2024 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    20e6:	20 91 03 01 	lds	r18, 0x0103
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	20 74       	andi	r18, 0x40	; 64
    20ee:	30 70       	andi	r19, 0x00	; 0
    20f0:	02 2e       	mov	r0, r18
    20f2:	23 2f       	mov	r18, r19
    20f4:	00 0c       	add	r0, r0
    20f6:	22 1f       	adc	r18, r18
    20f8:	33 0b       	sbc	r19, r19
    20fa:	00 0c       	add	r0, r0
    20fc:	22 1f       	adc	r18, r18
    20fe:	33 1f       	adc	r19, r19
    2100:	20 93 22 02 	sts	0x0222, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    2104:	26 e3       	ldi	r18, 0x36	; 54
    2106:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    210a:	20 91 b1 00 	lds	r18, 0x00B1
    210e:	26 60       	ori	r18, 0x06	; 6
    2110:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2114:	20 91 70 00 	lds	r18, 0x0070
    2118:	22 60       	ori	r18, 0x02	; 2
    211a:	20 93 70 00 	sts	0x0070, r18
    211e:	82 cf       	rjmp	.-252    	; 0x2024 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    2120:	8c e1       	ldi	r24, 0x1C	; 28
    2122:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2126:	80 91 b1 00 	lds	r24, 0x00B1
    212a:	86 60       	ori	r24, 0x06	; 6
    212c:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    2130:	80 91 70 00 	lds	r24, 0x0070
    2134:	82 60       	ori	r24, 0x02	; 2
    2136:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    213a:	10 92 20 02 	sts	0x0220, r1
    213e:	10 92 21 02 	sts	0x0221, r1
    2142:	10 92 22 02 	sts	0x0222, r1
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	6d cf       	rjmp	.-294    	; 0x2026 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    214c:	8d 30       	cpi	r24, 0x0D	; 13
    214e:	91 05       	cpc	r25, r1
    2150:	09 f0       	breq	.+2      	; 0x2154 <__vector_13+0x20a>
    2152:	68 cf       	rjmp	.-304    	; 0x2024 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    2154:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    2158:	80 91 68 00 	lds	r24, 0x0068
    215c:	82 60       	ori	r24, 0x02	; 2
    215e:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    2162:	80 91 6c 00 	lds	r24, 0x006C
    2166:	80 68       	ori	r24, 0x80	; 128
    2168:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    216c:	8f ef       	ldi	r24, 0xFF	; 255
    216e:	9f ef       	ldi	r25, 0xFF	; 255
    2170:	90 93 02 02 	sts	0x0202, r25
    2174:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    2178:	80 91 22 02 	lds	r24, 0x0222
    217c:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    2180:	80 91 21 02 	lds	r24, 0x0221
    2184:	80 93 1e 02 	sts	0x021E, r24
				data_ir = data_temp;
    2188:	80 91 20 02 	lds	r24, 0x0220
    218c:	80 93 1f 02 	sts	0x021F, r24
				command_received=1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	80 93 22 04 	sts	0x0422, r24
    2196:	4b cf       	rjmp	.-362    	; 0x202e <__vector_13+0xe4>

00002198 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    2198:	80 91 00 02 	lds	r24, 0x0200
    219c:	08 95       	ret

0000219e <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    219e:	80 91 1e 02 	lds	r24, 0x021E
    21a2:	08 95       	ret

000021a4 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    21a4:	80 91 1f 02 	lds	r24, 0x021F
    21a8:	08 95       	ret

000021aa <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    21aa:	80 91 12 02 	lds	r24, 0x0212
    21ae:	88 23       	and	r24, r24
    21b0:	b1 f1       	breq	.+108    	; 0x221e <__stack+0x1f>

		if(command_received) {
    21b2:	80 91 22 04 	lds	r24, 0x0422
    21b6:	88 23       	and	r24, r24
    21b8:	91 f1       	breq	.+100    	; 0x221e <__stack+0x1f>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    21ba:	e0 91 1f 02 	lds	r30, 0x021F

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    21be:	e0 93 21 04 	sts	0x0421, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    21c2:	10 92 22 04 	sts	0x0422, r1

			switch(irCommand) {
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	e5 33       	cpi	r30, 0x35	; 53
    21ca:	f1 05       	cpc	r31, r1
    21cc:	48 f1       	brcs	.+82     	; 0x2220 <__stack+0x21>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
    21ce:	20 91 f9 02 	lds	r18, 0x02F9
    21d2:	30 91 fa 02 	lds	r19, 0x02FA
    21d6:	80 91 fb 02 	lds	r24, 0x02FB
    21da:	90 91 fc 02 	lds	r25, 0x02FC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    21de:	37 fd       	sbrc	r19, 7
    21e0:	27 c0       	rjmp	.+78     	; 0x2230 <__stack+0x31>
				speedr = pwm_right_desired >> 2;
    21e2:	35 95       	asr	r19
    21e4:	27 95       	ror	r18
    21e6:	35 95       	asr	r19
    21e8:	27 95       	ror	r18
			} else {
				speedr = (-pwm_right_desired) >> 2;
    21ea:	30 93 10 03 	sts	0x0310, r19
    21ee:	20 93 0f 03 	sts	0x030F, r18
			}
			if(pwm_left_desired >= 0) {
    21f2:	97 fd       	sbrc	r25, 7
    21f4:	09 c0       	rjmp	.+18     	; 0x2208 <__stack+0x9>
				speedl = pwm_left_desired >> 2;
    21f6:	95 95       	asr	r25
    21f8:	87 95       	ror	r24
    21fa:	95 95       	asr	r25
    21fc:	87 95       	ror	r24
    21fe:	90 93 0e 03 	sts	0x030E, r25
    2202:	80 93 0d 03 	sts	0x030D, r24
    2206:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired) >> 2;
    2208:	90 95       	com	r25
    220a:	81 95       	neg	r24
    220c:	9f 4f       	sbci	r25, 0xFF	; 255
    220e:	95 95       	asr	r25
    2210:	87 95       	ror	r24
    2212:	95 95       	asr	r25
    2214:	87 95       	ror	r24
    2216:	90 93 0e 03 	sts	0x030E, r25
    221a:	80 93 0d 03 	sts	0x030D, r24
    221e:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    2220:	ee 58       	subi	r30, 0x8E	; 142
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	ee 0f       	add	r30, r30
    2226:	ff 1f       	adc	r31, r31
    2228:	05 90       	lpm	r0, Z+
    222a:	f4 91       	lpm	r31, Z+
    222c:	e0 2d       	mov	r30, r0
    222e:	19 94       	eijmp

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired >> 2;
    2230:	30 95       	com	r19
    2232:	21 95       	neg	r18
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
    2236:	d5 cf       	rjmp	.-86     	; 0x21e2 <handleIRRemoteCommands+0x38>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    2238:	80 93 62 04 	sts	0x0462, r24
							cliffAvoidanceEnabled = 0;
    223c:	10 92 63 04 	sts	0x0463, r1
    2240:	c6 cf       	rjmp	.-116    	; 0x21ce <handleIRRemoteCommands+0x24>
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    2242:	10 92 62 04 	sts	0x0462, r1
							cliffAvoidanceEnabled = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	80 93 63 04 	sts	0x0463, r24
    224c:	20 91 f9 02 	lds	r18, 0x02F9
    2250:	30 91 fa 02 	lds	r19, 0x02FA
    2254:	80 91 fb 02 	lds	r24, 0x02FB
    2258:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    225c:	c0 cf       	rjmp	.-128    	; 0x21de <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    225e:	10 92 62 04 	sts	0x0462, r1
    2262:	20 91 f9 02 	lds	r18, 0x02F9
    2266:	30 91 fa 02 	lds	r19, 0x02FA
    226a:	80 91 fb 02 	lds	r24, 0x02FB
    226e:	90 91 fc 02 	lds	r25, 0x02FC
					break;
    2272:	b5 cf       	rjmp	.-150    	; 0x21de <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	80 93 62 04 	sts	0x0462, r24
    227a:	20 91 f9 02 	lds	r18, 0x02F9
    227e:	30 91 fa 02 	lds	r19, 0x02FA
    2282:	80 91 fb 02 	lds	r24, 0x02FB
    2286:	90 91 fc 02 	lds	r25, 0x02FC
					break;
    228a:	a9 cf       	rjmp	.-174    	; 0x21de <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    228c:	80 91 fb 02 	lds	r24, 0x02FB
    2290:	90 91 fc 02 	lds	r25, 0x02FC
    2294:	4e 97       	sbiw	r24, 0x1e	; 30
    2296:	90 93 fc 02 	sts	0x02FC, r25
    229a:	80 93 fb 02 	sts	0x02FB, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    229e:	2e ef       	ldi	r18, 0xFE	; 254
    22a0:	80 30       	cpi	r24, 0x00	; 0
    22a2:	92 07       	cpc	r25, r18
    22a4:	9c f5       	brge	.+102    	; 0x230c <__stack+0x10d>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	9e ef       	ldi	r25, 0xFE	; 254
    22aa:	90 93 fc 02 	sts	0x02FC, r25
    22ae:	80 93 fb 02 	sts	0x02FB, r24
    22b2:	20 91 f9 02 	lds	r18, 0x02F9
    22b6:	30 91 fa 02 	lds	r19, 0x02FA
    22ba:	91 cf       	rjmp	.-222    	; 0x21de <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    22bc:	20 91 f9 02 	lds	r18, 0x02F9
    22c0:	30 91 fa 02 	lds	r19, 0x02FA
    22c4:	80 91 f7 02 	lds	r24, 0x02F7
    22c8:	90 91 f8 02 	lds	r25, 0x02F8
    22cc:	28 17       	cp	r18, r24
    22ce:	39 07       	cpc	r19, r25
    22d0:	24 f0       	brlt	.+8      	; 0x22da <__stack+0xdb>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    22d2:	20 91 fb 02 	lds	r18, 0x02FB
    22d6:	30 91 fc 02 	lds	r19, 0x02FC
					}
					pwm_right_desired -= STEP_MOTORS;
    22da:	2e 51       	subi	r18, 0x1E	; 30
    22dc:	30 40       	sbci	r19, 0x00	; 0
    22de:	30 93 fa 02 	sts	0x02FA, r19
    22e2:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired -= STEP_MOTORS;
    22e6:	c9 01       	movw	r24, r18
    22e8:	30 93 fc 02 	sts	0x02FC, r19
    22ec:	20 93 fb 02 	sts	0x02FB, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    22f0:	4e ef       	ldi	r20, 0xFE	; 254
    22f2:	20 30       	cpi	r18, 0x00	; 0
    22f4:	34 07       	cpc	r19, r20
    22f6:	34 f4       	brge	.+12     	; 0x2304 <__stack+0x105>
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	5e ef       	ldi	r21, 0xFE	; 254
    22fc:	50 93 fa 02 	sts	0x02FA, r21
    2300:	40 93 f9 02 	sts	0x02F9, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    2304:	4e ef       	ldi	r20, 0xFE	; 254
    2306:	20 30       	cpi	r18, 0x00	; 0
    2308:	34 07       	cpc	r19, r20
    230a:	6c f2       	brlt	.-102    	; 0x22a6 <__stack+0xa7>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    230c:	20 91 f9 02 	lds	r18, 0x02F9
    2310:	30 91 fa 02 	lds	r19, 0x02FA
    2314:	64 cf       	rjmp	.-312    	; 0x21de <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    2316:	20 91 f9 02 	lds	r18, 0x02F9
    231a:	30 91 fa 02 	lds	r19, 0x02FA
    231e:	2e 51       	subi	r18, 0x1E	; 30
    2320:	30 40       	sbci	r19, 0x00	; 0
    2322:	30 93 fa 02 	sts	0x02FA, r19
    2326:	20 93 f9 02 	sts	0x02F9, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    232a:	4e ef       	ldi	r20, 0xFE	; 254
    232c:	20 30       	cpi	r18, 0x00	; 0
    232e:	34 07       	cpc	r19, r20
    2330:	0c f0       	brlt	.+2      	; 0x2334 <__stack+0x135>
    2332:	17 c1       	rjmp	.+558    	; 0x2562 <__stack+0x363>
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	9e ef       	ldi	r25, 0xFE	; 254
    2338:	90 93 fa 02 	sts	0x02FA, r25
    233c:	80 93 f9 02 	sts	0x02F9, r24
    2340:	80 91 fb 02 	lds	r24, 0x02FB
    2344:	90 91 fc 02 	lds	r25, 0x02FC
    2348:	20 e8       	ldi	r18, 0x80	; 128
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	4e cf       	rjmp	.-356    	; 0x21ea <handleIRRemoteCommands+0x40>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    234e:	20 91 f9 02 	lds	r18, 0x02F9
    2352:	30 91 fa 02 	lds	r19, 0x02FA
    2356:	2e 51       	subi	r18, 0x1E	; 30
    2358:	30 40       	sbci	r19, 0x00	; 0
    235a:	30 93 fa 02 	sts	0x02FA, r19
    235e:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired += STEP_MOTORS;
    2362:	80 91 fb 02 	lds	r24, 0x02FB
    2366:	90 91 fc 02 	lds	r25, 0x02FC
    236a:	4e 96       	adiw	r24, 0x1e	; 30
    236c:	90 93 fc 02 	sts	0x02FC, r25
    2370:	80 93 fb 02 	sts	0x02FB, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2374:	4e ef       	ldi	r20, 0xFE	; 254
    2376:	20 30       	cpi	r18, 0x00	; 0
    2378:	34 07       	cpc	r19, r20
    237a:	34 f4       	brge	.+12     	; 0x2388 <__stack+0x189>
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	3e ef       	ldi	r19, 0xFE	; 254
    2380:	30 93 fa 02 	sts	0x02FA, r19
    2384:	20 93 f9 02 	sts	0x02F9, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2388:	42 e0       	ldi	r20, 0x02	; 2
    238a:	81 30       	cpi	r24, 0x01	; 1
    238c:	94 07       	cpc	r25, r20
    238e:	0c f4       	brge	.+2      	; 0x2392 <__stack+0x193>
    2390:	26 cf       	rjmp	.-436    	; 0x21de <handleIRRemoteCommands+0x34>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	92 e0       	ldi	r25, 0x02	; 2
    2396:	90 93 fc 02 	sts	0x02FC, r25
    239a:	80 93 fb 02 	sts	0x02FB, r24
    239e:	1f cf       	rjmp	.-450    	; 0x21de <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    23a0:	20 91 f9 02 	lds	r18, 0x02F9
    23a4:	30 91 fa 02 	lds	r19, 0x02FA
    23a8:	80 91 fb 02 	lds	r24, 0x02FB
    23ac:	90 91 fc 02 	lds	r25, 0x02FC
    23b0:	82 17       	cp	r24, r18
    23b2:	93 07       	cpc	r25, r19
    23b4:	0c f4       	brge	.+2      	; 0x23b8 <__stack+0x1b9>
    23b6:	da c0       	rjmp	.+436    	; 0x256c <__stack+0x36d>
    23b8:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    23ba:	22 5e       	subi	r18, 0xE2	; 226
    23bc:	3f 4f       	sbci	r19, 0xFF	; 255
    23be:	30 93 fa 02 	sts	0x02FA, r19
    23c2:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired += STEP_MOTORS;
    23c6:	4e 96       	adiw	r24, 0x1e	; 30
    23c8:	90 93 fc 02 	sts	0x02FC, r25
    23cc:	80 93 fb 02 	sts	0x02FB, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    23d0:	42 e0       	ldi	r20, 0x02	; 2
    23d2:	21 30       	cpi	r18, 0x01	; 1
    23d4:	34 07       	cpc	r19, r20
    23d6:	34 f0       	brlt	.+12     	; 0x23e4 <__stack+0x1e5>
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	32 e0       	ldi	r19, 0x02	; 2
    23dc:	30 93 fa 02 	sts	0x02FA, r19
    23e0:	20 93 f9 02 	sts	0x02F9, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    23e4:	22 e0       	ldi	r18, 0x02	; 2
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	92 07       	cpc	r25, r18
    23ea:	0c f4       	brge	.+2      	; 0x23ee <__stack+0x1ef>
    23ec:	8f cf       	rjmp	.-226    	; 0x230c <__stack+0x10d>
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	92 e0       	ldi	r25, 0x02	; 2
    23f2:	90 93 fc 02 	sts	0x02FC, r25
    23f6:	80 93 fb 02 	sts	0x02FB, r24
    23fa:	20 91 f9 02 	lds	r18, 0x02F9
    23fe:	30 91 fa 02 	lds	r19, 0x02FA
    2402:	ed ce       	rjmp	.-550    	; 0x21de <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    2404:	20 91 f9 02 	lds	r18, 0x02F9
    2408:	30 91 fa 02 	lds	r19, 0x02FA
    240c:	22 5e       	subi	r18, 0xE2	; 226
    240e:	3f 4f       	sbci	r19, 0xFF	; 255
    2410:	30 93 fa 02 	sts	0x02FA, r19
    2414:	20 93 f9 02 	sts	0x02F9, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2418:	42 e0       	ldi	r20, 0x02	; 2
    241a:	21 30       	cpi	r18, 0x01	; 1
    241c:	34 07       	cpc	r19, r20
    241e:	0c f4       	brge	.+2      	; 0x2422 <__stack+0x223>
    2420:	a0 c0       	rjmp	.+320    	; 0x2562 <__stack+0x363>
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	92 e0       	ldi	r25, 0x02	; 2
    2426:	90 93 fa 02 	sts	0x02FA, r25
    242a:	80 93 f9 02 	sts	0x02F9, r24
    242e:	80 91 fb 02 	lds	r24, 0x02FB
    2432:	90 91 fc 02 	lds	r25, 0x02FC
    2436:	20 e8       	ldi	r18, 0x80	; 128
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	d7 ce       	rjmp	.-594    	; 0x21ea <handleIRRemoteCommands+0x40>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    243c:	80 91 23 04 	lds	r24, 0x0423
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	01 96       	adiw	r24, 0x01	; 1
    2444:	65 e0       	ldi	r22, 0x05	; 5
    2446:	70 e0       	ldi	r23, 0x00	; 0
    2448:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__divmodhi4>
    244c:	80 93 23 04 	sts	0x0423, r24

					if(colorState==0) {			// turn on blue and off all IRs
    2450:	88 23       	and	r24, r24
    2452:	09 f0       	breq	.+2      	; 0x2456 <__stack+0x257>
    2454:	8d c0       	rjmp	.+282    	; 0x2570 <__stack+0x371>
						LED_IR1_HIGH;
    2456:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    2458:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    245a:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    245e:	8f ef       	ldi	r24, 0xFF	; 255
    2460:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2464:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    2468:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <updateRedLed>
					updateGreenLed(pwm_green);
    246c:	80 91 0d 02 	lds	r24, 0x020D
    2470:	0e 94 75 25 	call	0x4aea	; 0x4aea <updateGreenLed>
					updateBlueLed(pwm_blue);
    2474:	80 91 0e 02 	lds	r24, 0x020E
    2478:	0e 94 89 25 	call	0x4b12	; 0x4b12 <updateBlueLed>
    247c:	20 91 f9 02 	lds	r18, 0x02F9
    2480:	30 91 fa 02 	lds	r19, 0x02FA
    2484:	80 91 fb 02 	lds	r24, 0x02FB
    2488:	90 91 fc 02 	lds	r25, 0x02FC

	               	break;
    248c:	a8 ce       	rjmp	.-688    	; 0x21de <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    248e:	80 91 24 04 	lds	r24, 0x0424
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	83 70       	andi	r24, 0x03	; 3
    2498:	90 70       	andi	r25, 0x00	; 0
    249a:	80 93 24 04 	sts	0x0424, r24
					switch(behaviorState) {
    249e:	82 30       	cpi	r24, 0x02	; 2
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <__stack+0x2a5>
    24a2:	cf ce       	rjmp	.-610    	; 0x2242 <__stack+0x43>
    24a4:	83 30       	cpi	r24, 0x03	; 3
    24a6:	09 f4       	brne	.+2      	; 0x24aa <__stack+0x2ab>
    24a8:	53 c0       	rjmp	.+166    	; 0x2550 <__stack+0x351>
    24aa:	81 30       	cpi	r24, 0x01	; 1
    24ac:	09 f4       	brne	.+2      	; 0x24b0 <__stack+0x2b1>
    24ae:	c4 ce       	rjmp	.-632    	; 0x2238 <__stack+0x39>
						case 0:
							obstacleAvoidanceEnabled = 0;
    24b0:	10 92 62 04 	sts	0x0462, r1
							cliffAvoidanceEnabled = 0;
    24b4:	10 92 63 04 	sts	0x0463, r1
    24b8:	8a ce       	rjmp	.-748    	; 0x21ce <handleIRRemoteCommands+0x24>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    24ba:	20 91 f9 02 	lds	r18, 0x02F9
    24be:	30 91 fa 02 	lds	r19, 0x02FA
    24c2:	22 5e       	subi	r18, 0xE2	; 226
    24c4:	3f 4f       	sbci	r19, 0xFF	; 255
    24c6:	30 93 fa 02 	sts	0x02FA, r19
    24ca:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired -= STEP_MOTORS;
    24ce:	80 91 fb 02 	lds	r24, 0x02FB
    24d2:	90 91 fc 02 	lds	r25, 0x02FC
    24d6:	4e 97       	sbiw	r24, 0x1e	; 30
    24d8:	90 93 fc 02 	sts	0x02FC, r25
    24dc:	80 93 fb 02 	sts	0x02FB, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    24e0:	42 e0       	ldi	r20, 0x02	; 2
    24e2:	21 30       	cpi	r18, 0x01	; 1
    24e4:	34 07       	cpc	r19, r20
    24e6:	34 f0       	brlt	.+12     	; 0x24f4 <__stack+0x2f5>
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	32 e0       	ldi	r19, 0x02	; 2
    24ec:	30 93 fa 02 	sts	0x02FA, r19
    24f0:	20 93 f9 02 	sts	0x02F9, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    24f4:	4e ef       	ldi	r20, 0xFE	; 254
    24f6:	80 30       	cpi	r24, 0x00	; 0
    24f8:	94 07       	cpc	r25, r20
    24fa:	0c f0       	brlt	.+2      	; 0x24fe <__stack+0x2ff>
    24fc:	70 ce       	rjmp	.-800    	; 0x21de <handleIRRemoteCommands+0x34>
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	9e ef       	ldi	r25, 0xFE	; 254
    2502:	90 93 fc 02 	sts	0x02FC, r25
    2506:	80 93 fb 02 	sts	0x02FB, r24
    250a:	69 ce       	rjmp	.-814    	; 0x21de <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    250c:	10 92 fa 02 	sts	0x02FA, r1
    2510:	10 92 f9 02 	sts	0x02F9, r1
					pwm_left_desired = 0;
    2514:	10 92 fc 02 	sts	0x02FC, r1
    2518:	10 92 fb 02 	sts	0x02FB, r1
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	5e ce       	rjmp	.-836    	; 0x21e2 <handleIRRemoteCommands+0x38>
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    2526:	80 91 fb 02 	lds	r24, 0x02FB
    252a:	90 91 fc 02 	lds	r25, 0x02FC
    252e:	4e 96       	adiw	r24, 0x1e	; 30
    2530:	90 93 fc 02 	sts	0x02FC, r25
    2534:	80 93 fb 02 	sts	0x02FB, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2538:	22 e0       	ldi	r18, 0x02	; 2
    253a:	81 30       	cpi	r24, 0x01	; 1
    253c:	92 07       	cpc	r25, r18
    253e:	0c f4       	brge	.+2      	; 0x2542 <__stack+0x343>
    2540:	e5 ce       	rjmp	.-566    	; 0x230c <__stack+0x10d>
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	92 e0       	ldi	r25, 0x02	; 2
    2546:	90 93 fc 02 	sts	0x02FC, r25
    254a:	80 93 fb 02 	sts	0x02FB, r24
    254e:	de ce       	rjmp	.-580    	; 0x230c <__stack+0x10d>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	80 93 62 04 	sts	0x0462, r24
							cliffAvoidanceEnabled = 1;
    2556:	80 93 63 04 	sts	0x0463, r24
    255a:	20 91 f9 02 	lds	r18, 0x02F9
    255e:	30 91 fa 02 	lds	r19, 0x02FA
    2562:	80 91 fb 02 	lds	r24, 0x02FB
    2566:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    256a:	39 ce       	rjmp	.-910    	; 0x21de <handleIRRemoteCommands+0x34>
					pwm_left_desired = 0;
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    256c:	c9 01       	movw	r24, r18
    256e:	25 cf       	rjmp	.-438    	; 0x23ba <__stack+0x1bb>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    2570:	81 30       	cpi	r24, 0x01	; 1
    2572:	61 f0       	breq	.+24     	; 0x258c <__stack+0x38d>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    2574:	82 30       	cpi	r24, 0x02	; 2
    2576:	91 f0       	breq	.+36     	; 0x259c <__stack+0x39d>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    2578:	83 30       	cpi	r24, 0x03	; 3
    257a:	d9 f0       	breq	.+54     	; 0x25b2 <__stack+0x3b3>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    257c:	8f ef       	ldi	r24, 0xFF	; 255
    257e:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2582:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2586:	80 93 0c 02 	sts	0x020C, r24
    258a:	6e cf       	rjmp	.-292    	; 0x2468 <__stack+0x269>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    258c:	8f ef       	ldi	r24, 0xFF	; 255
    258e:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    2592:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    2596:	80 93 0c 02 	sts	0x020C, r24
    259a:	66 cf       	rjmp	.-308    	; 0x2468 <__stack+0x269>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    259c:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    259e:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    25a0:	8f ef       	ldi	r24, 0xFF	; 255
    25a2:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    25a6:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    25aa:	10 92 0c 02 	sts	0x020C, r1
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	5b cf       	rjmp	.-330    	; 0x2468 <__stack+0x269>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    25b2:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    25b6:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    25ba:	10 92 0c 02 	sts	0x020C, r1
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	53 cf       	rjmp	.-346    	; 0x2468 <__stack+0x269>

000025c2 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    25c2:	08 95       	ret

000025c4 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    25c4:	0f 93       	push	r16
    25c6:	1f 93       	push	r17
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <start_vertical_speed_control_left+0x14>
    25d6:	b8 c0       	rjmp	.+368    	; 0x2748 <start_vertical_speed_control_left+0x184>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    25d8:	20 91 38 04 	lds	r18, 0x0438
    25dc:	30 91 39 04 	lds	r19, 0x0439
    25e0:	41 e0       	ldi	r20, 0x01	; 1
    25e2:	2e 30       	cpi	r18, 0x0E	; 14
    25e4:	34 07       	cpc	r19, r20
    25e6:	0c f4       	brge	.+2      	; 0x25ea <start_vertical_speed_control_left+0x26>
    25e8:	89 c0       	rjmp	.+274    	; 0x26fc <start_vertical_speed_control_left+0x138>
		if(*pwm_left > 0) {
    25ea:	18 16       	cp	r1, r24
    25ec:	19 06       	cpc	r1, r25
    25ee:	0c f0       	brlt	.+2      	; 0x25f2 <start_vertical_speed_control_left+0x2e>
    25f0:	14 c1       	rjmp	.+552    	; 0x281a <start_vertical_speed_control_left+0x256>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    25f2:	88 e6       	ldi	r24, 0x68	; 104
    25f4:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    25f6:	82 1b       	sub	r24, r18
    25f8:	93 0b       	sbc	r25, r19
    25fa:	95 95       	asr	r25
    25fc:	87 95       	ror	r24
    25fe:	95 95       	asr	r25
    2600:	87 95       	ror	r24
    2602:	29 e1       	ldi	r18, 0x19	; 25
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	28 1b       	sub	r18, r24
    2608:	39 0b       	sbc	r19, r25
    260a:	30 93 04 02 	sts	0x0204, r19
    260e:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2612:	80 91 7c 04 	lds	r24, 0x047C
    2616:	90 91 7d 04 	lds	r25, 0x047D
    261a:	90 93 97 04 	sts	0x0497, r25
    261e:	80 93 96 04 	sts	0x0496, r24
	if(*pwm_left >= 0) {
    2622:	20 81       	ld	r18, Z
    2624:	31 81       	ldd	r19, Z+1	; 0x01
    2626:	37 fd       	sbrc	r19, 7
    2628:	d3 c0       	rjmp	.+422    	; 0x27d0 <start_vertical_speed_control_left+0x20c>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    262a:	40 91 f1 02 	lds	r20, 0x02F1
    262e:	50 91 f2 02 	lds	r21, 0x02F2
    2632:	b9 01       	movw	r22, r18
    2634:	64 1b       	sub	r22, r20
    2636:	75 0b       	sbc	r23, r21
    2638:	ab 01       	movw	r20, r22
    263a:	70 93 7d 04 	sts	0x047D, r23
    263e:	60 93 7c 04 	sts	0x047C, r22
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    2642:	20 91 05 03 	lds	r18, 0x0305
    2646:	30 91 06 03 	lds	r19, 0x0306
    264a:	24 0f       	add	r18, r20
    264c:	35 1f       	adc	r19, r21
    264e:	30 93 06 03 	sts	0x0306, r19
    2652:	20 93 05 03 	sts	0x0305, r18

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    2656:	76 e0       	ldi	r23, 0x06	; 6
    2658:	21 34       	cpi	r18, 0x41	; 65
    265a:	37 07       	cpc	r19, r23
    265c:	0c f4       	brge	.+2      	; 0x2660 <start_vertical_speed_control_left+0x9c>
    265e:	85 c0       	rjmp	.+266    	; 0x276a <start_vertical_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    2660:	20 e4       	ldi	r18, 0x40	; 64
    2662:	36 e0       	ldi	r19, 0x06	; 6
    2664:	30 93 06 03 	sts	0x0306, r19
    2668:	20 93 05 03 	sts	0x0305, r18
    266c:	60 ec       	ldi	r22, 0xC0	; 192
    266e:	72 e1       	ldi	r23, 0x12	; 18
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    2670:	9a 01       	movw	r18, r20
    2672:	22 0f       	add	r18, r18
    2674:	33 1f       	adc	r19, r19
    2676:	24 0f       	add	r18, r20
    2678:	35 1f       	adc	r19, r21
    267a:	22 0f       	add	r18, r18
    267c:	33 1f       	adc	r19, r19
    267e:	22 0f       	add	r18, r18
    2680:	33 1f       	adc	r19, r19
    2682:	22 0f       	add	r18, r18
    2684:	33 1f       	adc	r19, r19
    2686:	24 0f       	add	r18, r20
    2688:	35 1f       	adc	r19, r21
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed int)(k_ff_speed_control_left*(*pwm_left));
    268a:	00 81       	ld	r16, Z
    268c:	11 81       	ldd	r17, Z+1	; 0x01
    268e:	c0 91 03 02 	lds	r28, 0x0203
    2692:	d0 91 04 02 	lds	r29, 0x0204
    2696:	0c 9f       	mul	r16, r28
    2698:	d0 01       	movw	r26, r0
    269a:	0d 9f       	mul	r16, r29
    269c:	b0 0d       	add	r27, r0
    269e:	1c 9f       	mul	r17, r28
    26a0:	b0 0d       	add	r27, r0
    26a2:	11 24       	eor	r1, r1
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
    26a4:	2a 0f       	add	r18, r26
    26a6:	3b 1f       	adc	r19, r27
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    26a8:	84 1b       	sub	r24, r20
    26aa:	95 0b       	sbc	r25, r21
    26ac:	88 0f       	add	r24, r24
    26ae:	99 1f       	adc	r25, r25
    26b0:	28 0f       	add	r18, r24
    26b2:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);
    26b4:	26 0f       	add	r18, r22
    26b6:	37 1f       	adc	r19, r23
    26b8:	30 93 04 03 	sts	0x0304, r19
    26bc:	20 93 03 03 	sts	0x0303, r18

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    26c0:	37 fd       	sbrc	r19, 7
    26c2:	69 c0       	rjmp	.+210    	; 0x2796 <start_vertical_speed_control_left+0x1d2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    26c4:	12 16       	cp	r1, r18
    26c6:	13 06       	cpc	r1, r19
    26c8:	0c f0       	brlt	.+2      	; 0x26cc <start_vertical_speed_control_left+0x108>
    26ca:	6f c0       	rjmp	.+222    	; 0x27aa <start_vertical_speed_control_left+0x1e6>
    26cc:	80 81       	ld	r24, Z
    26ce:	91 81       	ldd	r25, Z+1	; 0x01
    26d0:	97 fd       	sbrc	r25, 7
    26d2:	89 c0       	rjmp	.+274    	; 0x27e6 <start_vertical_speed_control_left+0x222>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    26d4:	7d e5       	ldi	r23, 0x5D	; 93
    26d6:	21 3c       	cpi	r18, 0xC1	; 193
    26d8:	37 07       	cpc	r19, r23
    26da:	0c f4       	brge	.+2      	; 0x26de <start_vertical_speed_control_left+0x11a>
    26dc:	66 c0       	rjmp	.+204    	; 0x27aa <start_vertical_speed_control_left+0x1e6>
    26de:	80 ec       	ldi	r24, 0xC0	; 192
    26e0:	9d e5       	ldi	r25, 0x5D	; 93
    26e2:	90 93 04 03 	sts	0x0304, r25
    26e6:	80 93 03 03 	sts	0x0303, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	92 e0       	ldi	r25, 0x02	; 2
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    26f2:	df 91       	pop	r29
    26f4:	cf 91       	pop	r28
    26f6:	1f 91       	pop	r17
    26f8:	0f 91       	pop	r16
    26fa:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    26fc:	24 3b       	cpi	r18, 0xB4	; 180
    26fe:	31 05       	cpc	r19, r1
    2700:	94 f4       	brge	.+36     	; 0x2726 <start_vertical_speed_control_left+0x162>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2702:	2a 35       	cpi	r18, 0x5A	; 90
    2704:	31 05       	cpc	r19, r1
    2706:	7c f4       	brge	.+30     	; 0x2726 <start_vertical_speed_control_left+0x162>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    2708:	18 16       	cp	r1, r24
    270a:	19 06       	cpc	r1, r25
    270c:	0c f0       	brlt	.+2      	; 0x2710 <start_vertical_speed_control_left+0x14c>
    270e:	93 c0       	rjmp	.+294    	; 0x2836 <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2710:	35 95       	asr	r19
    2712:	27 95       	ror	r18
    2714:	35 95       	asr	r19
    2716:	27 95       	ror	r18
    2718:	27 5e       	subi	r18, 0xE7	; 231
    271a:	3f 4f       	sbci	r19, 0xFF	; 255
    271c:	30 93 04 02 	sts	0x0204, r19
    2720:	20 93 03 02 	sts	0x0203, r18
    2724:	76 cf       	rjmp	.-276    	; 0x2612 <start_vertical_speed_control_left+0x4e>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    2726:	18 16       	cp	r1, r24
    2728:	19 06       	cpc	r1, r25
    272a:	94 f5       	brge	.+100    	; 0x2790 <start_vertical_speed_control_left+0x1cc>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    272c:	84 eb       	ldi	r24, 0xB4	; 180
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	82 1b       	sub	r24, r18
    2732:	93 0b       	sbc	r25, r19
    2734:	95 95       	asr	r25
    2736:	87 95       	ror	r24
    2738:	95 95       	asr	r25
    273a:	87 95       	ror	r24
    273c:	49 96       	adiw	r24, 0x19	; 25
    273e:	90 93 04 02 	sts	0x0204, r25
    2742:	80 93 03 02 	sts	0x0203, r24
    2746:	65 cf       	rjmp	.-310    	; 0x2612 <start_vertical_speed_control_left+0x4e>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2748:	10 92 06 03 	sts	0x0306, r1
    274c:	10 92 05 03 	sts	0x0305, r1
		delta_left_speed_current = 0;
    2750:	10 92 7d 04 	sts	0x047D, r1
    2754:	10 92 7c 04 	sts	0x047C, r1
		delta_left_speed_prev = 0;
    2758:	10 92 97 04 	sts	0x0497, r1
    275c:	10 92 96 04 	sts	0x0496, r1

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	08 95       	ret
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    276a:	69 ef       	ldi	r22, 0xF9	; 249
    276c:	20 3c       	cpi	r18, 0xC0	; 192
    276e:	36 07       	cpc	r19, r22
    2770:	4c f4       	brge	.+18     	; 0x2784 <start_vertical_speed_control_left+0x1c0>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    2772:	20 ec       	ldi	r18, 0xC0	; 192
    2774:	39 ef       	ldi	r19, 0xF9	; 249
    2776:	30 93 06 03 	sts	0x0306, r19
    277a:	20 93 05 03 	sts	0x0305, r18
    277e:	60 e4       	ldi	r22, 0x40	; 64
    2780:	7d ee       	ldi	r23, 0xED	; 237
    2782:	76 cf       	rjmp	.-276    	; 0x2670 <start_vertical_speed_control_left+0xac>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2784:	b9 01       	movw	r22, r18
    2786:	66 0f       	add	r22, r22
    2788:	77 1f       	adc	r23, r23
    278a:	62 0f       	add	r22, r18
    278c:	73 1f       	adc	r23, r19
    278e:	70 cf       	rjmp	.-288    	; 0x2670 <start_vertical_speed_control_left+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2790:	84 eb       	ldi	r24, 0xB4	; 180
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	30 cf       	rjmp	.-416    	; 0x25f6 <start_vertical_speed_control_left+0x32>
	pwm_left_speed_controller += (signed int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	97 fd       	sbrc	r25, 7
    279c:	06 c0       	rjmp	.+12     	; 0x27aa <start_vertical_speed_control_left+0x1e6>
		pwm_left_speed_controller = 0;
    279e:	10 92 04 03 	sts	0x0304, r1
    27a2:	10 92 03 03 	sts	0x0303, r1
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    27aa:	82 ea       	ldi	r24, 0xA2	; 162
    27ac:	20 34       	cpi	r18, 0x40	; 64
    27ae:	38 07       	cpc	r19, r24
    27b0:	04 f5       	brge	.+64     	; 0x27f2 <start_vertical_speed_control_left+0x22e>
    27b2:	80 e4       	ldi	r24, 0x40	; 64
    27b4:	92 ea       	ldi	r25, 0xA2	; 162
    27b6:	90 93 04 03 	sts	0x0304, r25
    27ba:	80 93 03 03 	sts	0x0303, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	9e ef       	ldi	r25, 0xFE	; 254
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24


}
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    27d0:	40 91 f1 02 	lds	r20, 0x02F1
    27d4:	50 91 f2 02 	lds	r21, 0x02F2
    27d8:	42 0f       	add	r20, r18
    27da:	53 1f       	adc	r21, r19
    27dc:	50 93 7d 04 	sts	0x047D, r21
    27e0:	40 93 7c 04 	sts	0x047C, r20
    27e4:	2e cf       	rjmp	.-420    	; 0x2642 <start_vertical_speed_control_left+0x7e>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    27e6:	10 92 04 03 	sts	0x0304, r1
    27ea:	10 92 03 03 	sts	0x0303, r1
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    27f2:	35 95       	asr	r19
    27f4:	27 95       	ror	r18
    27f6:	35 95       	asr	r19
    27f8:	27 95       	ror	r18
    27fa:	35 95       	asr	r19
    27fc:	27 95       	ror	r18
    27fe:	35 95       	asr	r19
    2800:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2802:	31 83       	std	Z+1, r19	; 0x01
    2804:	20 83       	st	Z, r18

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2806:	42 e0       	ldi	r20, 0x02	; 2
    2808:	21 30       	cpi	r18, 0x01	; 1
    280a:	34 07       	cpc	r19, r20
    280c:	0c f0       	brlt	.+2      	; 0x2810 <start_vertical_speed_control_left+0x24c>
    280e:	6d cf       	rjmp	.-294    	; 0x26ea <start_vertical_speed_control_left+0x126>
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2810:	6e ef       	ldi	r22, 0xFE	; 254
    2812:	20 30       	cpi	r18, 0x00	; 0
    2814:	36 07       	cpc	r19, r22
    2816:	9c f2       	brlt	.-90     	; 0x27be <start_vertical_speed_control_left+0x1fa>
    2818:	6c cf       	rjmp	.-296    	; 0x26f2 <start_vertical_speed_control_left+0x12e>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    281a:	88 e6       	ldi	r24, 0x68	; 104
    281c:	91 e0       	ldi	r25, 0x01	; 1
    281e:	82 1b       	sub	r24, r18
    2820:	93 0b       	sbc	r25, r19
    2822:	95 95       	asr	r25
    2824:	87 95       	ror	r24
    2826:	95 95       	asr	r25
    2828:	87 95       	ror	r24
    282a:	49 96       	adiw	r24, 0x19	; 25
    282c:	90 93 04 02 	sts	0x0204, r25
    2830:	80 93 03 02 	sts	0x0203, r24
    2834:	ee ce       	rjmp	.-548    	; 0x2612 <start_vertical_speed_control_left+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2836:	35 95       	asr	r19
    2838:	27 95       	ror	r18
    283a:	35 95       	asr	r19
    283c:	27 95       	ror	r18
    283e:	89 e1       	ldi	r24, 0x19	; 25
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	82 1b       	sub	r24, r18
    2844:	93 0b       	sbc	r25, r19
    2846:	90 93 04 02 	sts	0x0204, r25
    284a:	80 93 03 02 	sts	0x0203, r24
    284e:	e1 ce       	rjmp	.-574    	; 0x2612 <start_vertical_speed_control_left+0x4e>

00002850 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	09 f4       	brne	.+2      	; 0x2864 <start_vertical_speed_control_right+0x14>
    2862:	b8 c0       	rjmp	.+368    	; 0x29d4 <start_vertical_speed_control_right+0x184>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2864:	20 91 38 04 	lds	r18, 0x0438
    2868:	30 91 39 04 	lds	r19, 0x0439
    286c:	41 e0       	ldi	r20, 0x01	; 1
    286e:	2e 30       	cpi	r18, 0x0E	; 14
    2870:	34 07       	cpc	r19, r20
    2872:	0c f4       	brge	.+2      	; 0x2876 <start_vertical_speed_control_right+0x26>
    2874:	89 c0       	rjmp	.+274    	; 0x2988 <start_vertical_speed_control_right+0x138>
		if(*pwm_right > 0) {
    2876:	18 16       	cp	r1, r24
    2878:	19 06       	cpc	r1, r25
    287a:	0c f0       	brlt	.+2      	; 0x287e <start_vertical_speed_control_right+0x2e>
    287c:	14 c1       	rjmp	.+552    	; 0x2aa6 <start_vertical_speed_control_right+0x256>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    287e:	88 e6       	ldi	r24, 0x68	; 104
    2880:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2882:	82 1b       	sub	r24, r18
    2884:	93 0b       	sbc	r25, r19
    2886:	95 95       	asr	r25
    2888:	87 95       	ror	r24
    288a:	95 95       	asr	r25
    288c:	87 95       	ror	r24
    288e:	29 e1       	ldi	r18, 0x19	; 25
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	28 1b       	sub	r18, r24
    2894:	39 0b       	sbc	r19, r25
    2896:	30 93 06 02 	sts	0x0206, r19
    289a:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    289e:	80 91 a5 04 	lds	r24, 0x04A5
    28a2:	90 91 a6 04 	lds	r25, 0x04A6
    28a6:	90 93 7f 04 	sts	0x047F, r25
    28aa:	80 93 7e 04 	sts	0x047E, r24
	if(*pwm_right >= 0) {
    28ae:	20 81       	ld	r18, Z
    28b0:	31 81       	ldd	r19, Z+1	; 0x01
    28b2:	37 fd       	sbrc	r19, 7
    28b4:	d3 c0       	rjmp	.+422    	; 0x2a5c <start_vertical_speed_control_right+0x20c>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    28b6:	40 91 f3 02 	lds	r20, 0x02F3
    28ba:	50 91 f4 02 	lds	r21, 0x02F4
    28be:	b9 01       	movw	r22, r18
    28c0:	64 1b       	sub	r22, r20
    28c2:	75 0b       	sbc	r23, r21
    28c4:	ab 01       	movw	r20, r22
    28c6:	70 93 a6 04 	sts	0x04A6, r23
    28ca:	60 93 a5 04 	sts	0x04A5, r22
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    28ce:	20 91 07 03 	lds	r18, 0x0307
    28d2:	30 91 08 03 	lds	r19, 0x0308
    28d6:	24 0f       	add	r18, r20
    28d8:	35 1f       	adc	r19, r21
    28da:	30 93 08 03 	sts	0x0308, r19
    28de:	20 93 07 03 	sts	0x0307, r18

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    28e2:	76 e0       	ldi	r23, 0x06	; 6
    28e4:	21 34       	cpi	r18, 0x41	; 65
    28e6:	37 07       	cpc	r19, r23
    28e8:	0c f4       	brge	.+2      	; 0x28ec <start_vertical_speed_control_right+0x9c>
    28ea:	85 c0       	rjmp	.+266    	; 0x29f6 <start_vertical_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    28ec:	20 e4       	ldi	r18, 0x40	; 64
    28ee:	36 e0       	ldi	r19, 0x06	; 6
    28f0:	30 93 08 03 	sts	0x0308, r19
    28f4:	20 93 07 03 	sts	0x0307, r18
    28f8:	60 ec       	ldi	r22, 0xC0	; 192
    28fa:	72 e1       	ldi	r23, 0x12	; 18
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    28fc:	9a 01       	movw	r18, r20
    28fe:	22 0f       	add	r18, r18
    2900:	33 1f       	adc	r19, r19
    2902:	24 0f       	add	r18, r20
    2904:	35 1f       	adc	r19, r21
    2906:	22 0f       	add	r18, r18
    2908:	33 1f       	adc	r19, r19
    290a:	22 0f       	add	r18, r18
    290c:	33 1f       	adc	r19, r19
    290e:	22 0f       	add	r18, r18
    2910:	33 1f       	adc	r19, r19
    2912:	24 0f       	add	r18, r20
    2914:	35 1f       	adc	r19, r21
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2916:	00 81       	ld	r16, Z
    2918:	11 81       	ldd	r17, Z+1	; 0x01
    291a:	c0 91 05 02 	lds	r28, 0x0205
    291e:	d0 91 06 02 	lds	r29, 0x0206
    2922:	0c 9f       	mul	r16, r28
    2924:	d0 01       	movw	r26, r0
    2926:	0d 9f       	mul	r16, r29
    2928:	b0 0d       	add	r27, r0
    292a:	1c 9f       	mul	r17, r28
    292c:	b0 0d       	add	r27, r0
    292e:	11 24       	eor	r1, r1
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
    2930:	2a 0f       	add	r18, r26
    2932:	3b 1f       	adc	r19, r27
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2934:	84 1b       	sub	r24, r20
    2936:	95 0b       	sbc	r25, r21
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	28 0f       	add	r18, r24
    293e:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);
    2940:	26 0f       	add	r18, r22
    2942:	37 1f       	adc	r19, r23
    2944:	30 93 02 03 	sts	0x0302, r19
    2948:	20 93 01 03 	sts	0x0301, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    294c:	37 fd       	sbrc	r19, 7
    294e:	69 c0       	rjmp	.+210    	; 0x2a22 <start_vertical_speed_control_right+0x1d2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2950:	12 16       	cp	r1, r18
    2952:	13 06       	cpc	r1, r19
    2954:	0c f0       	brlt	.+2      	; 0x2958 <start_vertical_speed_control_right+0x108>
    2956:	6f c0       	rjmp	.+222    	; 0x2a36 <start_vertical_speed_control_right+0x1e6>
    2958:	80 81       	ld	r24, Z
    295a:	91 81       	ldd	r25, Z+1	; 0x01
    295c:	97 fd       	sbrc	r25, 7
    295e:	89 c0       	rjmp	.+274    	; 0x2a72 <start_vertical_speed_control_right+0x222>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2960:	7d e5       	ldi	r23, 0x5D	; 93
    2962:	21 3c       	cpi	r18, 0xC1	; 193
    2964:	37 07       	cpc	r19, r23
    2966:	0c f4       	brge	.+2      	; 0x296a <start_vertical_speed_control_right+0x11a>
    2968:	66 c0       	rjmp	.+204    	; 0x2a36 <start_vertical_speed_control_right+0x1e6>
    296a:	80 ec       	ldi	r24, 0xC0	; 192
    296c:	9d e5       	ldi	r25, 0x5D	; 93
    296e:	90 93 02 03 	sts	0x0302, r25
    2972:	80 93 01 03 	sts	0x0301, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	92 e0       	ldi	r25, 0x02	; 2
    297a:	91 83       	std	Z+1, r25	; 0x01
    297c:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2988:	24 3b       	cpi	r18, 0xB4	; 180
    298a:	31 05       	cpc	r19, r1
    298c:	94 f4       	brge	.+36     	; 0x29b2 <start_vertical_speed_control_right+0x162>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    298e:	2a 35       	cpi	r18, 0x5A	; 90
    2990:	31 05       	cpc	r19, r1
    2992:	7c f4       	brge	.+30     	; 0x29b2 <start_vertical_speed_control_right+0x162>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    2994:	18 16       	cp	r1, r24
    2996:	19 06       	cpc	r1, r25
    2998:	0c f0       	brlt	.+2      	; 0x299c <start_vertical_speed_control_right+0x14c>
    299a:	93 c0       	rjmp	.+294    	; 0x2ac2 <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    299c:	35 95       	asr	r19
    299e:	27 95       	ror	r18
    29a0:	35 95       	asr	r19
    29a2:	27 95       	ror	r18
    29a4:	27 5e       	subi	r18, 0xE7	; 231
    29a6:	3f 4f       	sbci	r19, 0xFF	; 255
    29a8:	30 93 06 02 	sts	0x0206, r19
    29ac:	20 93 05 02 	sts	0x0205, r18
    29b0:	76 cf       	rjmp	.-276    	; 0x289e <start_vertical_speed_control_right+0x4e>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    29b2:	18 16       	cp	r1, r24
    29b4:	19 06       	cpc	r1, r25
    29b6:	94 f5       	brge	.+100    	; 0x2a1c <start_vertical_speed_control_right+0x1cc>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    29b8:	84 eb       	ldi	r24, 0xB4	; 180
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	82 1b       	sub	r24, r18
    29be:	93 0b       	sbc	r25, r19
    29c0:	95 95       	asr	r25
    29c2:	87 95       	ror	r24
    29c4:	95 95       	asr	r25
    29c6:	87 95       	ror	r24
    29c8:	49 96       	adiw	r24, 0x19	; 25
    29ca:	90 93 06 02 	sts	0x0206, r25
    29ce:	80 93 05 02 	sts	0x0205, r24
    29d2:	65 cf       	rjmp	.-310    	; 0x289e <start_vertical_speed_control_right+0x4e>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    29d4:	10 92 08 03 	sts	0x0308, r1
    29d8:	10 92 07 03 	sts	0x0307, r1
		delta_right_speed_current = 0;
    29dc:	10 92 a6 04 	sts	0x04A6, r1
    29e0:	10 92 a5 04 	sts	0x04A5, r1
		delta_right_speed_prev = 0;
    29e4:	10 92 7f 04 	sts	0x047F, r1
    29e8:	10 92 7e 04 	sts	0x047E, r1
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    29f6:	69 ef       	ldi	r22, 0xF9	; 249
    29f8:	20 3c       	cpi	r18, 0xC0	; 192
    29fa:	36 07       	cpc	r19, r22
    29fc:	4c f4       	brge	.+18     	; 0x2a10 <start_vertical_speed_control_right+0x1c0>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    29fe:	20 ec       	ldi	r18, 0xC0	; 192
    2a00:	39 ef       	ldi	r19, 0xF9	; 249
    2a02:	30 93 08 03 	sts	0x0308, r19
    2a06:	20 93 07 03 	sts	0x0307, r18
    2a0a:	60 e4       	ldi	r22, 0x40	; 64
    2a0c:	7d ee       	ldi	r23, 0xED	; 237
    2a0e:	76 cf       	rjmp	.-276    	; 0x28fc <start_vertical_speed_control_right+0xac>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2a10:	b9 01       	movw	r22, r18
    2a12:	66 0f       	add	r22, r22
    2a14:	77 1f       	adc	r23, r23
    2a16:	62 0f       	add	r22, r18
    2a18:	73 1f       	adc	r23, r19
    2a1a:	70 cf       	rjmp	.-288    	; 0x28fc <start_vertical_speed_control_right+0xac>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2a1c:	84 eb       	ldi	r24, 0xB4	; 180
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	30 cf       	rjmp	.-416    	; 0x2882 <start_vertical_speed_control_right+0x32>
	pwm_right_speed_controller += (signed int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2a22:	80 81       	ld	r24, Z
    2a24:	91 81       	ldd	r25, Z+1	; 0x01
    2a26:	97 fd       	sbrc	r25, 7
    2a28:	06 c0       	rjmp	.+12     	; 0x2a36 <start_vertical_speed_control_right+0x1e6>
		pwm_right_speed_controller = 0;
    2a2a:	10 92 02 03 	sts	0x0302, r1
    2a2e:	10 92 01 03 	sts	0x0301, r1
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2a36:	82 ea       	ldi	r24, 0xA2	; 162
    2a38:	20 34       	cpi	r18, 0x40	; 64
    2a3a:	38 07       	cpc	r19, r24
    2a3c:	04 f5       	brge	.+64     	; 0x2a7e <start_vertical_speed_control_right+0x22e>
    2a3e:	80 e4       	ldi	r24, 0x40	; 64
    2a40:	92 ea       	ldi	r25, 0xA2	; 162
    2a42:	90 93 02 03 	sts	0x0302, r25
    2a46:	80 93 01 03 	sts	0x0301, r24
	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	9e ef       	ldi	r25, 0xFE	; 254
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24

}
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	1f 91       	pop	r17
    2a58:	0f 91       	pop	r16
    2a5a:	08 95       	ret
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2a5c:	40 91 f3 02 	lds	r20, 0x02F3
    2a60:	50 91 f4 02 	lds	r21, 0x02F4
    2a64:	42 0f       	add	r20, r18
    2a66:	53 1f       	adc	r21, r19
    2a68:	50 93 a6 04 	sts	0x04A6, r21
    2a6c:	40 93 a5 04 	sts	0x04A5, r20
    2a70:	2e cf       	rjmp	.-420    	; 0x28ce <start_vertical_speed_control_right+0x7e>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2a72:	10 92 02 03 	sts	0x0302, r1
    2a76:	10 92 01 03 	sts	0x0301, r1
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2a7e:	35 95       	asr	r19
    2a80:	27 95       	ror	r18
    2a82:	35 95       	asr	r19
    2a84:	27 95       	ror	r18
    2a86:	35 95       	asr	r19
    2a88:	27 95       	ror	r18
    2a8a:	35 95       	asr	r19
    2a8c:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2a8e:	31 83       	std	Z+1, r19	; 0x01
    2a90:	20 83       	st	Z, r18

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2a92:	42 e0       	ldi	r20, 0x02	; 2
    2a94:	21 30       	cpi	r18, 0x01	; 1
    2a96:	34 07       	cpc	r19, r20
    2a98:	0c f0       	brlt	.+2      	; 0x2a9c <start_vertical_speed_control_right+0x24c>
    2a9a:	6d cf       	rjmp	.-294    	; 0x2976 <start_vertical_speed_control_right+0x126>
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2a9c:	6e ef       	ldi	r22, 0xFE	; 254
    2a9e:	20 30       	cpi	r18, 0x00	; 0
    2aa0:	36 07       	cpc	r19, r22
    2aa2:	9c f2       	brlt	.-90     	; 0x2a4a <start_vertical_speed_control_right+0x1fa>
    2aa4:	6c cf       	rjmp	.-296    	; 0x297e <start_vertical_speed_control_right+0x12e>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    2aa6:	88 e6       	ldi	r24, 0x68	; 104
    2aa8:	91 e0       	ldi	r25, 0x01	; 1
    2aaa:	82 1b       	sub	r24, r18
    2aac:	93 0b       	sbc	r25, r19
    2aae:	95 95       	asr	r25
    2ab0:	87 95       	ror	r24
    2ab2:	95 95       	asr	r25
    2ab4:	87 95       	ror	r24
    2ab6:	49 96       	adiw	r24, 0x19	; 25
    2ab8:	90 93 06 02 	sts	0x0206, r25
    2abc:	80 93 05 02 	sts	0x0205, r24
    2ac0:	ee ce       	rjmp	.-548    	; 0x289e <start_vertical_speed_control_right+0x4e>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    2ac2:	35 95       	asr	r19
    2ac4:	27 95       	ror	r18
    2ac6:	35 95       	asr	r19
    2ac8:	27 95       	ror	r18
    2aca:	89 e1       	ldi	r24, 0x19	; 25
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	82 1b       	sub	r24, r18
    2ad0:	93 0b       	sbc	r25, r19
    2ad2:	90 93 06 02 	sts	0x0206, r25
    2ad6:	80 93 05 02 	sts	0x0205, r24
    2ada:	e1 ce       	rjmp	.-574    	; 0x289e <start_vertical_speed_control_right+0x4e>

00002adc <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    2adc:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <start_horizontal_speed_control_right+0xc>
    2ae6:	7b c0       	rjmp	.+246    	; 0x2bde <start_horizontal_speed_control_right+0x102>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2ae8:	a0 91 a5 04 	lds	r26, 0x04A5
    2aec:	b0 91 a6 04 	lds	r27, 0x04A6
    2af0:	b0 93 7f 04 	sts	0x047F, r27
    2af4:	a0 93 7e 04 	sts	0x047E, r26
	if(*pwm_right >= 0) {
    2af8:	20 81       	ld	r18, Z
    2afa:	31 81       	ldd	r19, Z+1	; 0x01
    2afc:	37 fd       	sbrc	r19, 7
    2afe:	89 c0       	rjmp	.+274    	; 0x2c12 <start_horizontal_speed_control_right+0x136>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2b00:	80 91 f3 02 	lds	r24, 0x02F3
    2b04:	90 91 f4 02 	lds	r25, 0x02F4
    2b08:	a9 01       	movw	r20, r18
    2b0a:	48 1b       	sub	r20, r24
    2b0c:	59 0b       	sbc	r21, r25
    2b0e:	ca 01       	movw	r24, r20
    2b10:	50 93 a6 04 	sts	0x04A6, r21
    2b14:	40 93 a5 04 	sts	0x04A5, r20
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2b18:	20 91 07 03 	lds	r18, 0x0307
    2b1c:	30 91 08 03 	lds	r19, 0x0308
    2b20:	28 0f       	add	r18, r24
    2b22:	39 1f       	adc	r19, r25
    2b24:	30 93 08 03 	sts	0x0308, r19
    2b28:	20 93 07 03 	sts	0x0307, r18

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    2b2c:	56 e0       	ldi	r21, 0x06	; 6
    2b2e:	21 34       	cpi	r18, 0x41	; 65
    2b30:	35 07       	cpc	r19, r21
    2b32:	0c f4       	brge	.+2      	; 0x2b36 <start_horizontal_speed_control_right+0x5a>
    2b34:	61 c0       	rjmp	.+194    	; 0x2bf8 <start_horizontal_speed_control_right+0x11c>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    2b36:	20 e4       	ldi	r18, 0x40	; 64
    2b38:	36 e0       	ldi	r19, 0x06	; 6
    2b3a:	30 93 08 03 	sts	0x0308, r19
    2b3e:	20 93 07 03 	sts	0x0307, r18
    2b42:	60 e8       	ldi	r22, 0x80	; 128
    2b44:	7c e0       	ldi	r23, 0x0C	; 12
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    2b46:	9c 01       	movw	r18, r24
    2b48:	22 0f       	add	r18, r18
    2b4a:	33 1f       	adc	r19, r19
    2b4c:	28 0f       	add	r18, r24
    2b4e:	39 1f       	adc	r19, r25
    2b50:	22 0f       	add	r18, r18
    2b52:	33 1f       	adc	r19, r19
    2b54:	22 0f       	add	r18, r18
    2b56:	33 1f       	adc	r19, r19
    2b58:	22 0f       	add	r18, r18
    2b5a:	33 1f       	adc	r19, r19
    2b5c:	28 0f       	add	r18, r24
    2b5e:	39 1f       	adc	r19, r25
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed int)((*pwm_right) << 3);
    2b60:	40 81       	ld	r20, Z
    2b62:	51 81       	ldd	r21, Z+1	; 0x01
    2b64:	44 0f       	add	r20, r20
    2b66:	55 1f       	adc	r21, r21
    2b68:	44 0f       	add	r20, r20
    2b6a:	55 1f       	adc	r21, r21
    2b6c:	44 0f       	add	r20, r20
    2b6e:	55 1f       	adc	r21, r21
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
    2b70:	24 0f       	add	r18, r20
    2b72:	35 1f       	adc	r19, r21
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    2b74:	ad 01       	movw	r20, r26
    2b76:	48 1b       	sub	r20, r24
    2b78:	59 0b       	sbc	r21, r25
    2b7a:	ca 01       	movw	r24, r20
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	84 0f       	add	r24, r20
    2b82:	95 1f       	adc	r25, r21
    2b84:	28 0f       	add	r18, r24
    2b86:	39 1f       	adc	r19, r25
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);
    2b88:	26 0f       	add	r18, r22
    2b8a:	37 1f       	adc	r19, r23
    2b8c:	30 93 02 03 	sts	0x0302, r19
    2b90:	20 93 01 03 	sts	0x0301, r18

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2b94:	37 fd       	sbrc	r19, 7
    2b96:	4c c0       	rjmp	.+152    	; 0x2c30 <start_horizontal_speed_control_right+0x154>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2b98:	12 16       	cp	r1, r18
    2b9a:	13 06       	cpc	r1, r19
    2b9c:	0c f0       	brlt	.+2      	; 0x2ba0 <start_horizontal_speed_control_right+0xc4>
    2b9e:	52 c0       	rjmp	.+164    	; 0x2c44 <start_horizontal_speed_control_right+0x168>
    2ba0:	80 81       	ld	r24, Z
    2ba2:	91 81       	ldd	r25, Z+1	; 0x01
    2ba4:	97 fd       	sbrc	r25, 7
    2ba6:	67 c0       	rjmp	.+206    	; 0x2c76 <start_horizontal_speed_control_right+0x19a>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2ba8:	5d e5       	ldi	r21, 0x5D	; 93
    2baa:	21 3c       	cpi	r18, 0xC1	; 193
    2bac:	35 07       	cpc	r19, r21
    2bae:	0c f4       	brge	.+2      	; 0x2bb2 <start_horizontal_speed_control_right+0xd6>
    2bb0:	49 c0       	rjmp	.+146    	; 0x2c44 <start_horizontal_speed_control_right+0x168>
    2bb2:	80 ec       	ldi	r24, 0xC0	; 192
    2bb4:	9d e5       	ldi	r25, 0x5D	; 93
    2bb6:	90 93 02 03 	sts	0x0302, r25
    2bba:	80 93 01 03 	sts	0x0301, r24
    2bbe:	2c ed       	ldi	r18, 0xDC	; 220
    2bc0:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
    2bc2:	22 5e       	subi	r18, 0xE2	; 226
    2bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc6:	31 83       	std	Z+1, r19	; 0x01
    2bc8:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2bca:	42 e0       	ldi	r20, 0x02	; 2
    2bcc:	21 30       	cpi	r18, 0x01	; 1
    2bce:	34 07       	cpc	r19, r20
    2bd0:	0c f4       	brge	.+2      	; 0x2bd4 <start_horizontal_speed_control_right+0xf8>
    2bd2:	48 c0       	rjmp	.+144    	; 0x2c64 <start_horizontal_speed_control_right+0x188>
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	92 e0       	ldi	r25, 0x02	; 2
    2bd8:	91 83       	std	Z+1, r25	; 0x01
    2bda:	80 83       	st	Z, r24
    2bdc:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    2bde:	10 92 08 03 	sts	0x0308, r1
    2be2:	10 92 07 03 	sts	0x0307, r1
		delta_right_speed_current = 0;
    2be6:	10 92 a6 04 	sts	0x04A6, r1
    2bea:	10 92 a5 04 	sts	0x04A5, r1
		delta_right_speed_prev = 0;
    2bee:	10 92 7f 04 	sts	0x047F, r1
    2bf2:	10 92 7e 04 	sts	0x047E, r1
		return;
    2bf6:	08 95       	ret
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2bf8:	49 ef       	ldi	r20, 0xF9	; 249
    2bfa:	20 3c       	cpi	r18, 0xC0	; 192
    2bfc:	34 07       	cpc	r19, r20
    2bfe:	a4 f4       	brge	.+40     	; 0x2c28 <start_horizontal_speed_control_right+0x14c>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    2c00:	20 ec       	ldi	r18, 0xC0	; 192
    2c02:	39 ef       	ldi	r19, 0xF9	; 249
    2c04:	30 93 08 03 	sts	0x0308, r19
    2c08:	20 93 07 03 	sts	0x0307, r18
    2c0c:	60 e8       	ldi	r22, 0x80	; 128
    2c0e:	73 ef       	ldi	r23, 0xF3	; 243
    2c10:	9a cf       	rjmp	.-204    	; 0x2b46 <start_horizontal_speed_control_right+0x6a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2c12:	80 91 f3 02 	lds	r24, 0x02F3
    2c16:	90 91 f4 02 	lds	r25, 0x02F4
    2c1a:	82 0f       	add	r24, r18
    2c1c:	93 1f       	adc	r25, r19
    2c1e:	90 93 a6 04 	sts	0x04A6, r25
    2c22:	80 93 a5 04 	sts	0x04A5, r24
    2c26:	78 cf       	rjmp	.-272    	; 0x2b18 <start_horizontal_speed_control_right+0x3c>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2c28:	b9 01       	movw	r22, r18
    2c2a:	66 0f       	add	r22, r22
    2c2c:	77 1f       	adc	r23, r23
    2c2e:	8b cf       	rjmp	.-234    	; 0x2b46 <start_horizontal_speed_control_right+0x6a>
	pwm_right_speed_controller += (signed int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller -= (signed int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2c30:	80 81       	ld	r24, Z
    2c32:	91 81       	ldd	r25, Z+1	; 0x01
    2c34:	97 fd       	sbrc	r25, 7
    2c36:	06 c0       	rjmp	.+12     	; 0x2c44 <start_horizontal_speed_control_right+0x168>
		pwm_right_speed_controller = 0;
    2c38:	10 92 02 03 	sts	0x0302, r1
    2c3c:	10 92 01 03 	sts	0x0301, r1
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2c44:	82 ea       	ldi	r24, 0xA2	; 162
    2c46:	20 34       	cpi	r18, 0x40	; 64
    2c48:	38 07       	cpc	r19, r24
    2c4a:	dc f4       	brge	.+54     	; 0x2c82 <start_horizontal_speed_control_right+0x1a6>
    2c4c:	80 e4       	ldi	r24, 0x40	; 64
    2c4e:	92 ea       	ldi	r25, 0xA2	; 162
    2c50:	90 93 02 03 	sts	0x0302, r25
    2c54:	80 93 01 03 	sts	0x0301, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2c58:	24 e2       	ldi	r18, 0x24	; 36
    2c5a:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
    2c5c:	2e 51       	subi	r18, 0x1E	; 30
    2c5e:	30 40       	sbci	r19, 0x00	; 0
    2c60:	31 83       	std	Z+1, r19	; 0x01
    2c62:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2c64:	5e ef       	ldi	r21, 0xFE	; 254
    2c66:	20 30       	cpi	r18, 0x00	; 0
    2c68:	35 07       	cpc	r19, r21
    2c6a:	24 f4       	brge	.+8      	; 0x2c74 <start_horizontal_speed_control_right+0x198>
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	9e ef       	ldi	r25, 0xFE	; 254
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	80 83       	st	Z, r24
    2c74:	08 95       	ret
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2c76:	10 92 02 03 	sts	0x0302, r1
    2c7a:	10 92 01 03 	sts	0x0301, r1
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2c82:	35 95       	asr	r19
    2c84:	27 95       	ror	r18
    2c86:	35 95       	asr	r19
    2c88:	27 95       	ror	r18
    2c8a:	35 95       	asr	r19
    2c8c:	27 95       	ror	r18
    2c8e:	35 95       	asr	r19
    2c90:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = ((signed int)pwm_right_speed_controller)>>4;
    2c92:	31 83       	std	Z+1, r19	; 0x01
    2c94:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    2c96:	12 16       	cp	r1, r18
    2c98:	13 06       	cpc	r1, r19
    2c9a:	0c f4       	brge	.+2      	; 0x2c9e <start_horizontal_speed_control_right+0x1c2>
    2c9c:	92 cf       	rjmp	.-220    	; 0x2bc2 <start_horizontal_speed_control_right+0xe6>
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    2c9e:	21 15       	cp	r18, r1
    2ca0:	31 05       	cpc	r19, r1
    2ca2:	e1 f6       	brne	.-72     	; 0x2c5c <start_horizontal_speed_control_right+0x180>
    2ca4:	08 95       	ret

00002ca6 <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    2ca6:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    2ca8:	80 81       	ld	r24, Z
    2caa:	91 81       	ldd	r25, Z+1	; 0x01
    2cac:	00 97       	sbiw	r24, 0x00	; 0
    2cae:	09 f4       	brne	.+2      	; 0x2cb2 <start_horizontal_speed_control_left+0xc>
    2cb0:	7b c0       	rjmp	.+246    	; 0x2da8 <start_horizontal_speed_control_left+0x102>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2cb2:	a0 91 7c 04 	lds	r26, 0x047C
    2cb6:	b0 91 7d 04 	lds	r27, 0x047D
    2cba:	b0 93 97 04 	sts	0x0497, r27
    2cbe:	a0 93 96 04 	sts	0x0496, r26
	if(*pwm_left >= 0) {
    2cc2:	20 81       	ld	r18, Z
    2cc4:	31 81       	ldd	r19, Z+1	; 0x01
    2cc6:	37 fd       	sbrc	r19, 7
    2cc8:	89 c0       	rjmp	.+274    	; 0x2ddc <start_horizontal_speed_control_left+0x136>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2cca:	80 91 f1 02 	lds	r24, 0x02F1
    2cce:	90 91 f2 02 	lds	r25, 0x02F2
    2cd2:	a9 01       	movw	r20, r18
    2cd4:	48 1b       	sub	r20, r24
    2cd6:	59 0b       	sbc	r21, r25
    2cd8:	ca 01       	movw	r24, r20
    2cda:	50 93 7d 04 	sts	0x047D, r21
    2cde:	40 93 7c 04 	sts	0x047C, r20
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    2ce2:	20 91 05 03 	lds	r18, 0x0305
    2ce6:	30 91 06 03 	lds	r19, 0x0306
    2cea:	28 0f       	add	r18, r24
    2cec:	39 1f       	adc	r19, r25
    2cee:	30 93 06 03 	sts	0x0306, r19
    2cf2:	20 93 05 03 	sts	0x0305, r18

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    2cf6:	56 e0       	ldi	r21, 0x06	; 6
    2cf8:	21 34       	cpi	r18, 0x41	; 65
    2cfa:	35 07       	cpc	r19, r21
    2cfc:	0c f4       	brge	.+2      	; 0x2d00 <start_horizontal_speed_control_left+0x5a>
    2cfe:	61 c0       	rjmp	.+194    	; 0x2dc2 <start_horizontal_speed_control_left+0x11c>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    2d00:	20 e4       	ldi	r18, 0x40	; 64
    2d02:	36 e0       	ldi	r19, 0x06	; 6
    2d04:	30 93 06 03 	sts	0x0306, r19
    2d08:	20 93 05 03 	sts	0x0305, r18
    2d0c:	60 e8       	ldi	r22, 0x80	; 128
    2d0e:	7c e0       	ldi	r23, 0x0C	; 12
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    2d10:	9c 01       	movw	r18, r24
    2d12:	22 0f       	add	r18, r18
    2d14:	33 1f       	adc	r19, r19
    2d16:	28 0f       	add	r18, r24
    2d18:	39 1f       	adc	r19, r25
    2d1a:	22 0f       	add	r18, r18
    2d1c:	33 1f       	adc	r19, r19
    2d1e:	22 0f       	add	r18, r18
    2d20:	33 1f       	adc	r19, r19
    2d22:	22 0f       	add	r18, r18
    2d24:	33 1f       	adc	r19, r19
    2d26:	28 0f       	add	r18, r24
    2d28:	39 1f       	adc	r19, r25
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed int)((*pwm_left) << 3);
    2d2a:	40 81       	ld	r20, Z
    2d2c:	51 81       	ldd	r21, Z+1	; 0x01
    2d2e:	44 0f       	add	r20, r20
    2d30:	55 1f       	adc	r21, r21
    2d32:	44 0f       	add	r20, r20
    2d34:	55 1f       	adc	r21, r21
    2d36:	44 0f       	add	r20, r20
    2d38:	55 1f       	adc	r21, r21
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
    2d3a:	24 0f       	add	r18, r20
    2d3c:	35 1f       	adc	r19, r21
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    2d3e:	ad 01       	movw	r20, r26
    2d40:	48 1b       	sub	r20, r24
    2d42:	59 0b       	sbc	r21, r25
    2d44:	ca 01       	movw	r24, r20
    2d46:	88 0f       	add	r24, r24
    2d48:	99 1f       	adc	r25, r25
    2d4a:	84 0f       	add	r24, r20
    2d4c:	95 1f       	adc	r25, r21
    2d4e:	28 0f       	add	r18, r24
    2d50:	39 1f       	adc	r19, r25
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);
    2d52:	26 0f       	add	r18, r22
    2d54:	37 1f       	adc	r19, r23
    2d56:	30 93 04 03 	sts	0x0304, r19
    2d5a:	20 93 03 03 	sts	0x0303, r18

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2d5e:	37 fd       	sbrc	r19, 7
    2d60:	4c c0       	rjmp	.+152    	; 0x2dfa <start_horizontal_speed_control_left+0x154>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2d62:	12 16       	cp	r1, r18
    2d64:	13 06       	cpc	r1, r19
    2d66:	0c f0       	brlt	.+2      	; 0x2d6a <start_horizontal_speed_control_left+0xc4>
    2d68:	52 c0       	rjmp	.+164    	; 0x2e0e <start_horizontal_speed_control_left+0x168>
    2d6a:	80 81       	ld	r24, Z
    2d6c:	91 81       	ldd	r25, Z+1	; 0x01
    2d6e:	97 fd       	sbrc	r25, 7
    2d70:	67 c0       	rjmp	.+206    	; 0x2e40 <start_horizontal_speed_control_left+0x19a>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2d72:	5d e5       	ldi	r21, 0x5D	; 93
    2d74:	21 3c       	cpi	r18, 0xC1	; 193
    2d76:	35 07       	cpc	r19, r21
    2d78:	0c f4       	brge	.+2      	; 0x2d7c <start_horizontal_speed_control_left+0xd6>
    2d7a:	49 c0       	rjmp	.+146    	; 0x2e0e <start_horizontal_speed_control_left+0x168>
    2d7c:	80 ec       	ldi	r24, 0xC0	; 192
    2d7e:	9d e5       	ldi	r25, 0x5D	; 93
    2d80:	90 93 04 03 	sts	0x0304, r25
    2d84:	80 93 03 03 	sts	0x0303, r24
    2d88:	2c ed       	ldi	r18, 0xDC	; 220
    2d8a:	35 e0       	ldi	r19, 0x05	; 5
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
    2d8c:	22 5e       	subi	r18, 0xE2	; 226
    2d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d90:	31 83       	std	Z+1, r19	; 0x01
    2d92:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2d94:	42 e0       	ldi	r20, 0x02	; 2
    2d96:	21 30       	cpi	r18, 0x01	; 1
    2d98:	34 07       	cpc	r19, r20
    2d9a:	0c f4       	brge	.+2      	; 0x2d9e <start_horizontal_speed_control_left+0xf8>
    2d9c:	48 c0       	rjmp	.+144    	; 0x2e2e <start_horizontal_speed_control_left+0x188>
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	92 e0       	ldi	r25, 0x02	; 2
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	80 83       	st	Z, r24
    2da6:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2da8:	10 92 06 03 	sts	0x0306, r1
    2dac:	10 92 05 03 	sts	0x0305, r1
		delta_left_speed_current = 0;
    2db0:	10 92 7d 04 	sts	0x047D, r1
    2db4:	10 92 7c 04 	sts	0x047C, r1
		delta_left_speed_prev = 0;
    2db8:	10 92 97 04 	sts	0x0497, r1
    2dbc:	10 92 96 04 	sts	0x0496, r1
		return;
    2dc0:	08 95       	ret
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2dc2:	49 ef       	ldi	r20, 0xF9	; 249
    2dc4:	20 3c       	cpi	r18, 0xC0	; 192
    2dc6:	34 07       	cpc	r19, r20
    2dc8:	a4 f4       	brge	.+40     	; 0x2df2 <start_horizontal_speed_control_left+0x14c>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    2dca:	20 ec       	ldi	r18, 0xC0	; 192
    2dcc:	39 ef       	ldi	r19, 0xF9	; 249
    2dce:	30 93 06 03 	sts	0x0306, r19
    2dd2:	20 93 05 03 	sts	0x0305, r18
    2dd6:	60 e8       	ldi	r22, 0x80	; 128
    2dd8:	73 ef       	ldi	r23, 0xF3	; 243
    2dda:	9a cf       	rjmp	.-204    	; 0x2d10 <start_horizontal_speed_control_left+0x6a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2ddc:	80 91 f1 02 	lds	r24, 0x02F1
    2de0:	90 91 f2 02 	lds	r25, 0x02F2
    2de4:	82 0f       	add	r24, r18
    2de6:	93 1f       	adc	r25, r19
    2de8:	90 93 7d 04 	sts	0x047D, r25
    2dec:	80 93 7c 04 	sts	0x047C, r24
    2df0:	78 cf       	rjmp	.-272    	; 0x2ce2 <start_horizontal_speed_control_left+0x3c>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    2df2:	b9 01       	movw	r22, r18
    2df4:	66 0f       	add	r22, r22
    2df6:	77 1f       	adc	r23, r23
    2df8:	8b cf       	rjmp	.-234    	; 0x2d10 <start_horizontal_speed_control_left+0x6a>
	pwm_left_speed_controller += (signed int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller -= (signed int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2dfa:	80 81       	ld	r24, Z
    2dfc:	91 81       	ldd	r25, Z+1	; 0x01
    2dfe:	97 fd       	sbrc	r25, 7
    2e00:	06 c0       	rjmp	.+12     	; 0x2e0e <start_horizontal_speed_control_left+0x168>
		pwm_left_speed_controller = 0;
    2e02:	10 92 04 03 	sts	0x0304, r1
    2e06:	10 92 03 03 	sts	0x0303, r1
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2e0e:	82 ea       	ldi	r24, 0xA2	; 162
    2e10:	20 34       	cpi	r18, 0x40	; 64
    2e12:	38 07       	cpc	r19, r24
    2e14:	dc f4       	brge	.+54     	; 0x2e4c <start_horizontal_speed_control_left+0x1a6>
    2e16:	80 e4       	ldi	r24, 0x40	; 64
    2e18:	92 ea       	ldi	r25, 0xA2	; 162
    2e1a:	90 93 04 03 	sts	0x0304, r25
    2e1e:	80 93 03 03 	sts	0x0303, r24

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2e22:	24 e2       	ldi	r18, 0x24	; 36
    2e24:	3a ef       	ldi	r19, 0xFA	; 250

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
    2e26:	2e 51       	subi	r18, 0x1E	; 30
    2e28:	30 40       	sbci	r19, 0x00	; 0
    2e2a:	31 83       	std	Z+1, r19	; 0x01
    2e2c:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2e2e:	5e ef       	ldi	r21, 0xFE	; 254
    2e30:	20 30       	cpi	r18, 0x00	; 0
    2e32:	35 07       	cpc	r19, r21
    2e34:	24 f4       	brge	.+8      	; 0x2e3e <start_horizontal_speed_control_left+0x198>
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	9e ef       	ldi	r25, 0xFE	; 254
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	80 83       	st	Z, r24
    2e3e:	08 95       	ret
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2e40:	10 92 04 03 	sts	0x0304, r1
    2e44:	10 92 03 03 	sts	0x0303, r1
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2e4c:	35 95       	asr	r19
    2e4e:	27 95       	ror	r18
    2e50:	35 95       	asr	r19
    2e52:	27 95       	ror	r18
    2e54:	35 95       	asr	r19
    2e56:	27 95       	ror	r18
    2e58:	35 95       	asr	r19
    2e5a:	27 95       	ror	r18

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = ((signed int)pwm_left_speed_controller)>>4;
    2e5c:	31 83       	std	Z+1, r19	; 0x01
    2e5e:	20 83       	st	Z, r18

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    2e60:	12 16       	cp	r1, r18
    2e62:	13 06       	cpc	r1, r19
    2e64:	0c f4       	brge	.+2      	; 0x2e68 <start_horizontal_speed_control_left+0x1c2>
    2e66:	92 cf       	rjmp	.-220    	; 0x2d8c <start_horizontal_speed_control_left+0xe6>
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    2e68:	21 15       	cp	r18, r1
    2e6a:	31 05       	cpc	r19, r1
    2e6c:	e1 f6       	brne	.-72     	; 0x2e26 <start_horizontal_speed_control_left+0x180>
    2e6e:	08 95       	ret

00002e70 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    2e70:	85 b7       	in	r24, 0x35	; 53
    2e72:	80 61       	ori	r24, 0x10	; 16
    2e74:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    2e76:	8f ef       	ldi	r24, 0xFF	; 255
    2e78:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    2e7a:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    2e7c:	97 ef       	ldi	r25, 0xF7	; 247
    2e7e:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    2e80:	90 ee       	ldi	r25, 0xE0	; 224
    2e82:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    2e84:	90 ef       	ldi	r25, 0xF0	; 240
    2e86:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    2e88:	90 eb       	ldi	r25, 0xB0	; 176
    2e8a:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    2e8c:	9c ef       	ldi	r25, 0xFC	; 252
    2e8e:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    2e90:	93 e0       	ldi	r25, 0x03	; 3
    2e92:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    2e94:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    2e96:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    2e98:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    2e9a:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    2e9c:	80 91 4c 04 	lds	r24, 0x044C
    2ea0:	88 23       	and	r24, r24
    2ea2:	e1 f0       	breq	.+56     	; 0x2edc <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    2ea4:	81 30       	cpi	r24, 0x01	; 1
    2ea6:	d1 f0       	breq	.+52     	; 0x2edc <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    2ea8:	82 30       	cpi	r24, 0x02	; 2
    2eaa:	51 f1       	breq	.+84     	; 0x2f00 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    2eac:	9f ef       	ldi	r25, 0xFF	; 255
    2eae:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    2eb2:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    2eb6:	9f e0       	ldi	r25, 0x0F	; 15
    2eb8:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    2ebc:	88 23       	and	r24, r24
    2ebe:	a9 f4       	brne	.+42     	; 0x2eea <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    2ec0:	90 91 05 01 	lds	r25, 0x0105
    2ec4:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    2ec8:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    2ecc:	9f ef       	ldi	r25, 0xFF	; 255
    2ece:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    2ed2:	88 23       	and	r24, r24
    2ed4:	29 f4       	brne	.+10     	; 0x2ee0 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    2ed6:	10 92 0b 01 	sts	0x010B, r1
    2eda:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    2edc:	14 ba       	out	0x14, r1	; 20
    2ede:	e6 cf       	rjmp	.-52     	; 0x2eac <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    2ee0:	81 30       	cpi	r24, 0x01	; 1
    2ee2:	c9 f3       	breq	.-14     	; 0x2ed6 <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    2ee4:	82 30       	cpi	r24, 0x02	; 2
    2ee6:	41 f0       	breq	.+16     	; 0x2ef8 <initPortsIO+0x88>
    2ee8:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    2eea:	81 30       	cpi	r24, 0x01	; 1
    2eec:	11 f0       	breq	.+4      	; 0x2ef2 <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    2eee:	82 30       	cpi	r24, 0x02	; 2
    2ef0:	59 f7       	brne	.-42     	; 0x2ec8 <initPortsIO+0x58>
		PORTJ = 0x0F;
    2ef2:	90 93 05 01 	sts	0x0105, r25
    2ef6:	e8 cf       	rjmp	.-48     	; 0x2ec8 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    2ef8:	87 ef       	ldi	r24, 0xF7	; 247
    2efa:	80 93 0b 01 	sts	0x010B, r24
    2efe:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    2f00:	98 e0       	ldi	r25, 0x08	; 8
    2f02:	94 bb       	out	0x14, r25	; 20
    2f04:	d3 cf       	rjmp	.-90     	; 0x2eac <initPortsIO+0x3c>

00002f06 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    2f06:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    2f0a:	10 92 bc 00 	sts	0x00BC, r1
}
    2f0e:	08 95       	ret

00002f10 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    2f10:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    2f12:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    2f14:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    2f1e:	08 95       	ret

00002f20 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2f20:	94 ea       	ldi	r25, 0xA4	; 164
    2f22:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2f26:	90 91 bc 00 	lds	r25, 0x00BC
    2f2a:	97 ff       	sbrs	r25, 7
    2f2c:	fc cf       	rjmp	.-8      	; 0x2f26 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2f2e:	90 91 b9 00 	lds	r25, 0x00B9
    2f32:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2f34:	98 30       	cpi	r25, 0x08	; 8
    2f36:	21 f0       	breq	.+8      	; 0x2f40 <i2c_start+0x20>
    2f38:	90 31       	cpi	r25, 0x10	; 16
    2f3a:	11 f0       	breq	.+4      	; 0x2f40 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2f40:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2f44:	84 e8       	ldi	r24, 0x84	; 132
    2f46:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2f4a:	80 91 bc 00 	lds	r24, 0x00BC
    2f4e:	87 ff       	sbrs	r24, 7
    2f50:	fc cf       	rjmp	.-8      	; 0x2f4a <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2f52:	90 91 b9 00 	lds	r25, 0x00B9
    2f56:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2f58:	98 31       	cpi	r25, 0x18	; 24
    2f5a:	21 f0       	breq	.+8      	; 0x2f64 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	90 34       	cpi	r25, 0x40	; 64
    2f60:	19 f0       	breq	.+6      	; 0x2f68 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    2f62:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2f64:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2f66:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	08 95       	ret

00002f6c <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2f6c:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2f6e:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2f70:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2f72:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2f76:	90 91 bc 00 	lds	r25, 0x00BC
    2f7a:	97 ff       	sbrs	r25, 7
    2f7c:	fc cf       	rjmp	.-8      	; 0x2f76 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2f7e:	90 91 b9 00 	lds	r25, 0x00B9
    2f82:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2f84:	98 30       	cpi	r25, 0x08	; 8
    2f86:	11 f0       	breq	.+4      	; 0x2f8c <i2c_start_wait+0x20>
    2f88:	90 31       	cpi	r25, 0x10	; 16
    2f8a:	99 f7       	brne	.-26     	; 0x2f72 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    2f8c:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2f90:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2f94:	90 91 bc 00 	lds	r25, 0x00BC
    2f98:	97 ff       	sbrs	r25, 7
    2f9a:	fc cf       	rjmp	.-8      	; 0x2f94 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2f9c:	90 91 b9 00 	lds	r25, 0x00B9
    2fa0:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2fa2:	90 32       	cpi	r25, 0x20	; 32
    2fa4:	19 f0       	breq	.+6      	; 0x2fac <i2c_start_wait+0x40>
    2fa6:	98 35       	cpi	r25, 0x58	; 88
    2fa8:	09 f0       	breq	.+2      	; 0x2fac <i2c_start_wait+0x40>
    2faa:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2fac:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2fb0:	90 91 bc 00 	lds	r25, 0x00BC
    2fb4:	94 fd       	sbrc	r25, 4
    2fb6:	fc cf       	rjmp	.-8      	; 0x2fb0 <i2c_start_wait+0x44>
    2fb8:	dc cf       	rjmp	.-72     	; 0x2f72 <i2c_start_wait+0x6>

00002fba <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2fba:	94 ea       	ldi	r25, 0xA4	; 164
    2fbc:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2fc0:	90 91 bc 00 	lds	r25, 0x00BC
    2fc4:	97 ff       	sbrs	r25, 7
    2fc6:	fc cf       	rjmp	.-8      	; 0x2fc0 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2fc8:	90 91 b9 00 	lds	r25, 0x00B9
    2fcc:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    2fce:	98 30       	cpi	r25, 0x08	; 8
    2fd0:	21 f0       	breq	.+8      	; 0x2fda <i2c_rep_start+0x20>
    2fd2:	90 31       	cpi	r25, 0x10	; 16
    2fd4:	11 f0       	breq	.+4      	; 0x2fda <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	08 95       	ret
	}

	// send device address
	TWDR = address;
    2fda:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2fde:	84 e8       	ldi	r24, 0x84	; 132
    2fe0:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2fe4:	80 91 bc 00 	lds	r24, 0x00BC
    2fe8:	87 ff       	sbrs	r24, 7
    2fea:	fc cf       	rjmp	.-8      	; 0x2fe4 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2fec:	90 91 b9 00 	lds	r25, 0x00B9
    2ff0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    2ff2:	98 31       	cpi	r25, 0x18	; 24
    2ff4:	21 f0       	breq	.+8      	; 0x2ffe <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	90 34       	cpi	r25, 0x40	; 64
    2ffa:	19 f0       	breq	.+6      	; 0x3002 <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    2ffc:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    3000:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	08 95       	ret

00003006 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3006:	84 e9       	ldi	r24, 0x94	; 148
    3008:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    300c:	80 91 bc 00 	lds	r24, 0x00BC
    3010:	84 fd       	sbrc	r24, 4
    3012:	fc cf       	rjmp	.-8      	; 0x300c <i2c_stop+0x6>

}/* i2c_stop */
    3014:	08 95       	ret

00003016 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3016:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    301a:	84 e8       	ldi	r24, 0x84	; 132
    301c:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3020:	80 91 bc 00 	lds	r24, 0x00BC
    3024:	87 ff       	sbrs	r24, 7
    3026:	fc cf       	rjmp	.-8      	; 0x3020 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3028:	90 91 b9 00 	lds	r25, 0x00B9
    302c:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	98 32       	cpi	r25, 0x28	; 40
    3032:	09 f0       	breq	.+2      	; 0x3036 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    3034:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    3036:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    3038:	08 95       	ret

0000303a <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    303a:	84 ec       	ldi	r24, 0xC4	; 196
    303c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    3040:	80 91 bc 00 	lds	r24, 0x00BC
    3044:	87 ff       	sbrs	r24, 7
    3046:	fc cf       	rjmp	.-8      	; 0x3040 <i2c_readAck+0x6>

    return TWDR;
    3048:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    304c:	08 95       	ret

0000304e <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    304e:	84 e8       	ldi	r24, 0x84	; 132
    3050:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3054:	80 91 bc 00 	lds	r24, 0x00BC
    3058:	87 ff       	sbrs	r24, 7
    305a:	fc cf       	rjmp	.-8      	; 0x3054 <i2c_readNak+0x6>
	
    return TWDR;
    305c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    3060:	08 95       	ret

00003062 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    3062:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    3066:	80 e1       	ldi	r24, 0x10	; 16
    3068:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    306c:	e0 ec       	ldi	r30, 0xC0	; 192
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	82 60       	ori	r24, 0x02	; 2
    3074:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    3076:	e1 ec       	ldi	r30, 0xC1	; 193
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	80 81       	ld	r24, Z
    307c:	88 69       	ori	r24, 0x98	; 152
    307e:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    3080:	e2 ec       	ldi	r30, 0xC2	; 194
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	80 81       	ld	r24, Z
    3086:	86 60       	ori	r24, 0x06	; 6
    3088:	80 83       	st	Z, r24



}
    308a:	08 95       	ret

0000308c <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    308c:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    3090:	80 e1       	ldi	r24, 0x10	; 16
    3092:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    3096:	e8 ec       	ldi	r30, 0xC8	; 200
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
    309c:	82 60       	ori	r24, 0x02	; 2
    309e:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    30a0:	e9 ec       	ldi	r30, 0xC9	; 201
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	88 61       	ori	r24, 0x18	; 24
    30a8:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    30aa:	ea ec       	ldi	r30, 0xCA	; 202
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	80 81       	ld	r24, Z
    30b0:	86 60       	ori	r24, 0x06	; 6
    30b2:	80 83       	st	Z, r24

}
    30b4:	08 95       	ret

000030b6 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    30b6:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    30ba:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    30be:	10 92 c2 00 	sts	0x00C2, r1

}
    30c2:	08 95       	ret

000030c4 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    30c4:	90 91 c0 00 	lds	r25, 0x00C0
    30c8:	95 ff       	sbrs	r25, 5
    30ca:	fc cf       	rjmp	.-8      	; 0x30c4 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    30cc:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    30d0:	66 23       	and	r22, r22
    30d2:	21 f0       	breq	.+8      	; 0x30dc <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    30d4:	80 91 c0 00 	lds	r24, 0x00C0
    30d8:	86 ff       	sbrs	r24, 6
    30da:	fc cf       	rjmp	.-8      	; 0x30d4 <usart0Transmit+0x10>
    30dc:	08 95       	ret

000030de <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    30de:	90 91 c8 00 	lds	r25, 0x00C8
    30e2:	95 ff       	sbrs	r25, 5
    30e4:	fc cf       	rjmp	.-8      	; 0x30de <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    30e6:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    30ea:	66 23       	and	r22, r22
    30ec:	21 f0       	breq	.+8      	; 0x30f6 <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    30ee:	80 91 c8 00 	lds	r24, 0x00C8
    30f2:	86 ff       	sbrs	r24, 6
    30f4:	fc cf       	rjmp	.-8      	; 0x30ee <usart1Transmit+0x10>
    30f6:	08 95       	ret

000030f8 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    30f8:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    30fc:	80 95       	com	r24
	} else {
		return 1;
	}

}
    30fe:	88 1f       	adc	r24, r24
    3100:	88 27       	eor	r24, r24
    3102:	88 1f       	adc	r24, r24
    3104:	08 95       	ret

00003106 <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    3106:	87 e9       	ldi	r24, 0x97	; 151
    3108:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    310a:	20 91 c0 00 	lds	r18, 0x00C0
    310e:	27 fd       	sbrc	r18, 7
    3110:	07 c0       	rjmp	.+14     	; 0x3120 <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    3112:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    3114:	d1 f7       	brne	.-12     	; 0x310a <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	80 93 18 03 	sts	0x0318, r24
			return 0;				// timeout
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    3120:	80 91 c6 00 	lds	r24, 0x00C6

}
    3124:	08 95       	ret

00003126 <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    3126:	1f 92       	push	r1
    3128:	0f 92       	push	r0
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	0f 92       	push	r0
    312e:	0b b6       	in	r0, 0x3b	; 59
    3130:	0f 92       	push	r0
    3132:	11 24       	eor	r1, r1
    3134:	2f 93       	push	r18
    3136:	3f 93       	push	r19
    3138:	4f 93       	push	r20
    313a:	5f 93       	push	r21
    313c:	6f 93       	push	r22
    313e:	7f 93       	push	r23
    3140:	8f 93       	push	r24
    3142:	9f 93       	push	r25
    3144:	af 93       	push	r26
    3146:	bf 93       	push	r27
    3148:	ef 93       	push	r30
    314a:	ff 93       	push	r31

	char receivedByte = UDR0;
    314c:	80 91 c6 00 	lds	r24, 0x00C6

	if(currentSelector==15) {
    3150:	90 91 49 04 	lds	r25, 0x0449
    3154:	9f 30       	cpi	r25, 0x0F	; 15
    3156:	21 f1       	breq	.+72     	; 0x31a0 <__vector_25+0x7a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    3158:	90 91 11 02 	lds	r25, 0x0211
    315c:	99 23       	and	r25, r25
    315e:	d9 f4       	brne	.+54     	; 0x3196 <__vector_25+0x70>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    3160:	90 91 1d 04 	lds	r25, 0x041D
    3164:	91 30       	cpi	r25, 0x01	; 1
    3166:	09 f4       	brne	.+2      	; 0x316a <__vector_25+0x44>
    3168:	60 c0       	rjmp	.+192    	; 0x322a <__vector_25+0x104>
    316a:	92 30       	cpi	r25, 0x02	; 2
    316c:	09 f4       	brne	.+2      	; 0x3170 <__vector_25+0x4a>
    316e:	43 c0       	rjmp	.+134    	; 0x31f6 <__vector_25+0xd0>
			}
		}

	}

}
    3170:	ff 91       	pop	r31
    3172:	ef 91       	pop	r30
    3174:	bf 91       	pop	r27
    3176:	af 91       	pop	r26
    3178:	9f 91       	pop	r25
    317a:	8f 91       	pop	r24
    317c:	7f 91       	pop	r23
    317e:	6f 91       	pop	r22
    3180:	5f 91       	pop	r21
    3182:	4f 91       	pop	r20
    3184:	3f 91       	pop	r19
    3186:	2f 91       	pop	r18
    3188:	0f 90       	pop	r0
    318a:	0b be       	out	0x3b, r0	; 59
    318c:	0f 90       	pop	r0
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	0f 90       	pop	r0
    3192:	1f 90       	pop	r1
    3194:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    3196:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    319a:	80 93 1d 04 	sts	0x041D, r24
    319e:	e8 cf       	rjmp	.-48     	; 0x3170 <__vector_25+0x4a>

	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
    31a0:	8b 32       	cpi	r24, 0x2B	; 43
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <__vector_25+0x80>
    31a4:	4c c0       	rjmp	.+152    	; 0x323e <__vector_25+0x118>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    31a6:	8d 32       	cpi	r24, 0x2D	; 45
    31a8:	f1 f0       	breq	.+60     	; 0x31e6 <__vector_25+0xc0>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    31aa:	87 36       	cpi	r24, 0x67	; 103
    31ac:	09 f0       	breq	.+2      	; 0x31b0 <__vector_25+0x8a>
    31ae:	5b c0       	rjmp	.+182    	; 0x3266 <__vector_25+0x140>
			usart0Transmit(irCommand,1);
    31b0:	90 91 21 04 	lds	r25, 0x0421

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    31b4:	80 91 c0 00 	lds	r24, 0x00C0
    31b8:	85 ff       	sbrs	r24, 5
    31ba:	fc cf       	rjmp	.-8      	; 0x31b4 <__vector_25+0x8e>
	UDR0 = data;						// put data into buffer, sends the data
    31bc:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    31c0:	80 91 c0 00 	lds	r24, 0x00C0
    31c4:	86 ff       	sbrs	r24, 6
    31c6:	fc cf       	rjmp	.-8      	; 0x31c0 <__vector_25+0x9a>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    31c8:	90 91 66 00 	lds	r25, 0x0066
    31cc:	90 93 7b 04 	sts	0x047B, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    31d0:	80 91 c0 00 	lds	r24, 0x00C0
    31d4:	85 ff       	sbrs	r24, 5
    31d6:	fc cf       	rjmp	.-8      	; 0x31d0 <__vector_25+0xaa>
	UDR0 = data;						// put data into buffer, sends the data
    31d8:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    31dc:	80 91 c0 00 	lds	r24, 0x00C0
    31e0:	86 ff       	sbrs	r24, 6
    31e2:	fc cf       	rjmp	.-8      	; 0x31dc <__vector_25+0xb6>
    31e4:	c5 cf       	rjmp	.-118    	; 0x3170 <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    31e6:	80 91 7b 04 	lds	r24, 0x047B
    31ea:	88 23       	and	r24, r24
    31ec:	d1 f1       	breq	.+116    	; 0x3262 <__vector_25+0x13c>
				currentOsccal--;	
    31ee:	81 50       	subi	r24, 0x01	; 1
    31f0:	80 93 7b 04 	sts	0x047B, r24
    31f4:	2b c0       	rjmp	.+86     	; 0x324c <__vector_25+0x126>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    31f6:	40 91 1f 04 	lds	r20, 0x041F
    31fa:	44 23       	and	r20, r20
    31fc:	51 f1       	breq	.+84     	; 0x3252 <__vector_25+0x12c>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    31fe:	41 30       	cpi	r20, 0x01	; 1
    3200:	09 f0       	breq	.+2      	; 0x3204 <__vector_25+0xde>
    3202:	b6 cf       	rjmp	.-148    	; 0x3170 <__vector_25+0x4a>
						rfAddress |= ((unsigned int)receivedByte<<8);
    3204:	38 2f       	mov	r19, r24
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	80 91 11 03 	lds	r24, 0x0311
    320c:	90 91 12 03 	lds	r25, 0x0312
    3210:	82 2b       	or	r24, r18
    3212:	93 2b       	or	r25, r19
    3214:	90 93 12 03 	sts	0x0312, r25
    3218:	80 93 11 03 	sts	0x0311, r24
						addressReceived = 1;
    321c:	40 93 1e 04 	sts	0x041E, r20
						menuState = 0;
    3220:	10 92 1f 04 	sts	0x041F, r1
						chooseMenu = 1;
    3224:	40 93 11 02 	sts	0x0211, r20
    3228:	a3 cf       	rjmp	.-186    	; 0x3170 <__vector_25+0x4a>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    322a:	8a 3a       	cpi	r24, 0xAA	; 170
    322c:	31 f1       	breq	.+76     	; 0x327a <__vector_25+0x154>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    322e:	85 35       	cpi	r24, 0x55	; 85
    3230:	09 f0       	breq	.+2      	; 0x3234 <__vector_25+0x10e>
    3232:	9e cf       	rjmp	.-196    	; 0x3170 <__vector_25+0x4a>
						chooseMenu = 1;
    3234:	90 93 11 02 	sts	0x0211, r25
						menuChoice = 0;
    3238:	10 92 1d 04 	sts	0x041D, r1
    323c:	99 cf       	rjmp	.-206    	; 0x3170 <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    323e:	80 91 7b 04 	lds	r24, 0x047B
    3242:	8f 3f       	cpi	r24, 0xFF	; 255
    3244:	e9 f0       	breq	.+58     	; 0x3280 <__vector_25+0x15a>
				currentOsccal++;
    3246:	8f 5f       	subi	r24, 0xFF	; 255
    3248:	80 93 7b 04 	sts	0x047B, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    324c:	80 93 66 00 	sts	0x0066, r24
    3250:	8f cf       	rjmp	.-226    	; 0x3170 <__vector_25+0x4a>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    3252:	80 93 11 03 	sts	0x0311, r24
    3256:	10 92 12 03 	sts	0x0312, r1
						menuState = 1;
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	80 93 1f 04 	sts	0x041F, r24
    3260:	87 cf       	rjmp	.-242    	; 0x3170 <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	f3 cf       	rjmp	.-26     	; 0x324c <__vector_25+0x126>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    3266:	83 37       	cpi	r24, 0x73	; 115
    3268:	09 f0       	breq	.+2      	; 0x326c <__vector_25+0x146>
    326a:	82 cf       	rjmp	.-252    	; 0x3170 <__vector_25+0x4a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    326c:	8d ef       	ldi	r24, 0xFD	; 253
    326e:	9f e0       	ldi	r25, 0x0F	; 15
    3270:	60 91 7b 04 	lds	r22, 0x047B
    3274:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__eewr_byte_m2560>
    3278:	7b cf       	rjmp	.-266    	; 0x3170 <__vector_25+0x4a>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    327a:	90 93 20 04 	sts	0x0420, r25
    327e:	78 cf       	rjmp	.-272    	; 0x3170 <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3280:	8f ef       	ldi	r24, 0xFF	; 255
    3282:	e4 cf       	rjmp	.-56     	; 0x324c <__vector_25+0x126>

00003284 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    3284:	86 b1       	in	r24, 0x06	; 6
    3286:	66 b1       	in	r22, 0x06	; 6
    3288:	26 b1       	in	r18, 0x06	; 6
    328a:	46 b1       	in	r20, 0x06	; 6
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	28 70       	andi	r18, 0x08	; 8
    3290:	30 70       	andi	r19, 0x00	; 0
    3292:	35 95       	asr	r19
    3294:	27 95       	ror	r18
    3296:	35 95       	asr	r19
    3298:	27 95       	ror	r18
    329a:	35 95       	asr	r19
    329c:	27 95       	ror	r18
    329e:	22 0f       	add	r18, r18
    32a0:	33 1f       	adc	r19, r19
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	64 70       	andi	r22, 0x04	; 4
    32a6:	70 70       	andi	r23, 0x00	; 0
    32a8:	75 95       	asr	r23
    32aa:	67 95       	ror	r22
    32ac:	75 95       	asr	r23
    32ae:	67 95       	ror	r22
    32b0:	26 0f       	add	r18, r22
    32b2:	37 1f       	adc	r19, r23
    32b4:	22 0f       	add	r18, r18
    32b6:	33 1f       	adc	r19, r19
    32b8:	50 e0       	ldi	r21, 0x00	; 0
    32ba:	42 70       	andi	r20, 0x02	; 2
    32bc:	50 70       	andi	r21, 0x00	; 0
    32be:	55 95       	asr	r21
    32c0:	47 95       	ror	r20
    32c2:	24 0f       	add	r18, r20
    32c4:	35 1f       	adc	r19, r21
    32c6:	22 0f       	add	r18, r18
    32c8:	81 70       	andi	r24, 0x01	; 1
}
    32ca:	82 0f       	add	r24, r18
    32cc:	08 95       	ret

000032ce <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    32ce:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    32d0:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    32d2:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    32d4:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    32d8:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    32dc:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    32e0:	8e ef       	ldi	r24, 0xFE	; 254
    32e2:	9f e0       	ldi	r25, 0x0F	; 15
    32e4:	0e 94 cb 30 	call	0x6196	; 0x6196 <__eerd_word_m2560>
    32e8:	90 93 12 03 	sts	0x0312, r25
    32ec:	80 93 11 03 	sts	0x0311, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    32f0:	8d ef       	ldi	r24, 0xFD	; 253
    32f2:	9f e0       	ldi	r25, 0x0F	; 15
    32f4:	0e 94 c3 30 	call	0x6186	; 0x6186 <__eerd_byte_m2560>
    32f8:	80 93 7b 04 	sts	0x047B, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    32fc:	98 2f       	mov	r25, r24
    32fe:	91 50       	subi	r25, 0x01	; 1
    3300:	9e 3f       	cpi	r25, 0xFE	; 254
    3302:	d8 f5       	brcc	.+118    	; 0x337a <initPeripherals+0xac>
		OSCCAL = currentOsccal;
    3304:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    3308:	80 91 11 03 	lds	r24, 0x0311
    330c:	90 91 12 03 	lds	r25, 0x0312
    3310:	9c 01       	movw	r18, r24
    3312:	21 58       	subi	r18, 0x81	; 129
    3314:	3c 40       	sbci	r19, 0x0C	; 12
    3316:	23 30       	cpi	r18, 0x03	; 3
    3318:	31 05       	cpc	r19, r1
    331a:	f8 f4       	brcc	.+62     	; 0x335a <initPeripherals+0x8c>
		hardwareRevision = HW_REV_3_0;
    331c:	10 92 4c 04 	sts	0x044C, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initPortsIO();
    3320:	0e 94 38 17 	call	0x2e70	; 0x2e70 <initPortsIO>
	initAdc();
    3324:	0e 94 49 1a 	call	0x3492	; 0x3492 <initAdc>
	initMotors();
    3328:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <initMotors>
	initRGBleds();
    332c:	0e 94 24 25 	call	0x4a48	; 0x4a48 <initRGBleds>
	initSPI();
    3330:	0e 94 63 09 	call	0x12c6	; 0x12c6 <initSPI>
	mirf_init();
    3334:	0e 94 4c 0a 	call	0x1498	; 0x1498 <mirf_init>
	if(spiCommError==0) {
    3338:	80 91 14 03 	lds	r24, 0x0314
    333c:	88 23       	and	r24, r24
    333e:	29 f4       	brne	.+10     	; 0x334a <initPeripherals+0x7c>
		rfFlags |= 1;
    3340:	80 91 13 03 	lds	r24, 0x0313
    3344:	81 60       	ori	r24, 0x01	; 1
    3346:	80 93 13 03 	sts	0x0313, r24
	}
	initUsart0();
    334a:	0e 94 31 18 	call	0x3062	; 0x3062 <initUsart0>
	initAccelerometer();
    334e:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <initAccelerometer>
	init_ir_remote_control();
    3352:	0e 94 56 0f 	call	0x1eac	; 0x1eac <init_ir_remote_control>

	sei();			// enable global interrupts
    3356:	78 94       	sei

	
}
    3358:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    335a:	2c e0       	ldi	r18, 0x0C	; 12
    335c:	80 38       	cpi	r24, 0x80	; 128
    335e:	92 07       	cpc	r25, r18
    3360:	21 f4       	brne	.+8      	; 0x336a <initPeripherals+0x9c>
		hardwareRevision = HW_REV_3_0_1;
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	80 93 4c 04 	sts	0x044C, r24
    3368:	db cf       	rjmp	.-74     	; 0x3320 <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    336a:	2c e0       	ldi	r18, 0x0C	; 12
    336c:	84 38       	cpi	r24, 0x84	; 132
    336e:	92 07       	cpc	r25, r18
    3370:	b8 f2       	brcs	.-82     	; 0x3320 <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    3372:	82 e0       	ldi	r24, 0x02	; 2
    3374:	80 93 4c 04 	sts	0x044C, r24
    3378:	d3 cf       	rjmp	.-90     	; 0x3320 <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    337a:	60 91 66 00 	lds	r22, 0x0066
    337e:	60 93 7b 04 	sts	0x047B, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    3382:	8d ef       	ldi	r24, 0xFD	; 253
    3384:	9f e0       	ldi	r25, 0x0F	; 15
    3386:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__eewr_byte_m2560>
    338a:	be cf       	rjmp	.-132    	; 0x3308 <initPeripherals+0x3a>

0000338c <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    338c:	1f 92       	push	r1
    338e:	0f 92       	push	r0
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	0f 92       	push	r0
    3394:	11 24       	eor	r1, r1

}
    3396:	0f 90       	pop	r0
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	0f 90       	pop	r0
    339c:	1f 90       	pop	r1
    339e:	18 95       	reti

000033a0 <sleep>:

void sleep(unsigned char seconds) {
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    33a4:	9e e1       	ldi	r25, 0x1E	; 30
    33a6:	89 9f       	mul	r24, r25
    33a8:	e0 01       	movw	r28, r0
    33aa:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    33ac:	80 91 68 00 	lds	r24, 0x0068
    33b0:	8d 7f       	andi	r24, 0xFD	; 253
    33b2:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    33b6:	80 91 6c 00 	lds	r24, 0x006C
    33ba:	8f 77       	andi	r24, 0x7F	; 127
    33bc:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    33c0:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    33c2:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    33c6:	80 91 7a 00 	lds	r24, 0x007A
    33ca:	80 61       	ori	r24, 0x10	; 16
    33cc:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    33d0:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    33d4:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    33d8:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    33dc:	88 b3       	in	r24, 0x18	; 24
    33de:	87 60       	ori	r24, 0x07	; 7
    33e0:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    33e2:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    33e6:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    33ea:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    33ee:	89 b3       	in	r24, 0x19	; 25
    33f0:	87 60       	ori	r24, 0x07	; 7
    33f2:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    33f4:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    33f8:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    33fc:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <closeUsart>
	closeSPI();
    3400:	0e 94 6f 09 	call	0x12de	; 0x12de <closeSPI>
	i2c_close();
    3404:	0e 94 83 17 	call	0x2f06	; 0x2f06 <i2c_close>

	// set port pins
	initPortsIO();
    3408:	0e 94 38 17 	call	0x2e70	; 0x2e70 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    340c:	83 b7       	in	r24, 0x33	; 51
    340e:	8f 60       	ori	r24, 0x0F	; 15
    3410:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    3418:	80 91 b0 00 	lds	r24, 0x00B0
    341c:	8d 7f       	andi	r24, 0xFD	; 253
    341e:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    3422:	80 91 b1 00 	lds	r24, 0x00B1
    3426:	87 60       	ori	r24, 0x07	; 7
    3428:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    342c:	20 97       	sbiw	r28, 0x00	; 0
    342e:	19 f0       	breq	.+6      	; 0x3436 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3430:	88 95       	sleep
		pause--;
    3432:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    3434:	e9 f7       	brne	.-6      	; 0x3430 <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    3436:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    3438:	80 91 b1 00 	lds	r24, 0x00B1
    343c:	88 7f       	andi	r24, 0xF8	; 248
    343e:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    3442:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    3446:	80 91 b0 00 	lds	r24, 0x00B0
    344a:	82 60       	ori	r24, 0x02	; 2
    344c:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3450:	8f ef       	ldi	r24, 0xFF	; 255
    3452:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3456:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    345a:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    345e:	10 92 f6 02 	sts	0x02F6, r1
    3462:	10 92 f5 02 	sts	0x02F5, r1
	pwm_left = 0;
    3466:	10 92 f8 02 	sts	0x02F8, r1
    346a:	10 92 f7 02 	sts	0x02F7, r1
	initPeripherals();
    346e:	0e 94 67 19 	call	0x32ce	; 0x32ce <initPeripherals>

}
    3472:	df 91       	pop	r29
    3474:	cf 91       	pop	r28
    3476:	08 95       	ret

00003478 <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
	return clockTick;
    3478:	60 91 41 04 	lds	r22, 0x0441
    347c:	70 91 42 04 	lds	r23, 0x0442
}
    3480:	80 91 43 04 	lds	r24, 0x0443
    3484:	90 91 44 04 	lds	r25, 0x0444
    3488:	08 95       	ret

0000348a <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	80 93 bf 02 	sts	0x02BF, r24
}
    3490:	08 95       	ret

00003492 <initAdc>:

#include "adc.h"


void initAdc(void) {
    3492:	cf 93       	push	r28
    3494:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    3496:	ea e7       	ldi	r30, 0x7A	; 122
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	10 82       	st	Z, r1
	ADCSRB = 0;
    349c:	ab e7       	ldi	r26, 0x7B	; 123
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	1c 92       	st	X, r1
	ADMUX = 0;
    34a2:	cc e7       	ldi	r28, 0x7C	; 124
    34a4:	d0 e0       	ldi	r29, 0x00	; 0
    34a6:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    34a8:	80 81       	ld	r24, Z
    34aa:	86 60       	ori	r24, 0x06	; 6
    34ac:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    34ae:	88 81       	ld	r24, Y
    34b0:	80 64       	ori	r24, 0x40	; 64
    34b2:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    34b4:	80 81       	ld	r24, Z
    34b6:	80 62       	ori	r24, 0x20	; 32
    34b8:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    34ba:	8c 91       	ld	r24, X
    34bc:	88 7f       	andi	r24, 0xF8	; 248
    34be:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    34c0:	80 81       	ld	r24, Z
    34c2:	88 60       	ori	r24, 0x08	; 8
    34c4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    34c6:	80 81       	ld	r24, Z
    34c8:	80 68       	ori	r24, 0x80	; 128
    34ca:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    34cc:	80 81       	ld	r24, Z
    34ce:	80 64       	ori	r24, 0x40	; 64
    34d0:	80 83       	st	Z, r24

}
    34d2:	df 91       	pop	r29
    34d4:	cf 91       	pop	r28
    34d6:	08 95       	ret

000034d8 <__vector_29>:

ISR(ADC_vect) {
    34d8:	1f 92       	push	r1
    34da:	0f 92       	push	r0
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	0f 92       	push	r0
    34e0:	0b b6       	in	r0, 0x3b	; 59
    34e2:	0f 92       	push	r0
    34e4:	11 24       	eor	r1, r1
    34e6:	2f 93       	push	r18
    34e8:	3f 93       	push	r19
    34ea:	4f 93       	push	r20
    34ec:	5f 93       	push	r21
    34ee:	6f 93       	push	r22
    34f0:	7f 93       	push	r23
    34f2:	8f 93       	push	r24
    34f4:	9f 93       	push	r25
    34f6:	ef 93       	push	r30
    34f8:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    34fa:	40 91 41 04 	lds	r20, 0x0441
    34fe:	30 91 42 04 	lds	r19, 0x0442
    3502:	20 91 43 04 	lds	r18, 0x0443
    3506:	90 91 44 04 	lds	r25, 0x0444
    350a:	80 91 45 04 	lds	r24, 0x0445
    350e:	e0 91 46 04 	lds	r30, 0x0446
    3512:	70 91 47 04 	lds	r23, 0x0447
    3516:	f0 91 48 04 	lds	r31, 0x0448
    351a:	64 2f       	mov	r22, r20
    351c:	6f 5f       	subi	r22, 0xFF	; 255
    351e:	51 e0       	ldi	r21, 0x01	; 1
    3520:	64 17       	cp	r22, r20
    3522:	08 f0       	brcs	.+2      	; 0x3526 <__vector_29+0x4e>
    3524:	50 e0       	ldi	r21, 0x00	; 0
    3526:	53 0f       	add	r21, r19
    3528:	41 e0       	ldi	r20, 0x01	; 1
    352a:	53 17       	cp	r21, r19
    352c:	08 f0       	brcs	.+2      	; 0x3530 <__vector_29+0x58>
    352e:	40 e0       	ldi	r20, 0x00	; 0
    3530:	42 0f       	add	r20, r18
    3532:	31 e0       	ldi	r19, 0x01	; 1
    3534:	42 17       	cp	r20, r18
    3536:	08 f0       	brcs	.+2      	; 0x353a <__vector_29+0x62>
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	39 0f       	add	r19, r25
    353c:	21 e0       	ldi	r18, 0x01	; 1
    353e:	39 17       	cp	r19, r25
    3540:	08 f0       	brcs	.+2      	; 0x3544 <__vector_29+0x6c>
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	28 0f       	add	r18, r24
    3546:	91 e0       	ldi	r25, 0x01	; 1
    3548:	28 17       	cp	r18, r24
    354a:	08 f0       	brcs	.+2      	; 0x354e <__vector_29+0x76>
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	9e 0f       	add	r25, r30
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	9e 17       	cp	r25, r30
    3554:	08 f0       	brcs	.+2      	; 0x3558 <__vector_29+0x80>
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	87 0f       	add	r24, r23
    355a:	e1 e0       	ldi	r30, 0x01	; 1
    355c:	87 17       	cp	r24, r23
    355e:	08 f0       	brcs	.+2      	; 0x3562 <__vector_29+0x8a>
    3560:	e0 e0       	ldi	r30, 0x00	; 0
    3562:	ef 0f       	add	r30, r31
    3564:	60 93 41 04 	sts	0x0441, r22
    3568:	50 93 42 04 	sts	0x0442, r21
    356c:	40 93 43 04 	sts	0x0443, r20
    3570:	30 93 44 04 	sts	0x0444, r19
    3574:	20 93 45 04 	sts	0x0445, r18
    3578:	90 93 46 04 	sts	0x0446, r25
    357c:	80 93 47 04 	sts	0x0447, r24
    3580:	e0 93 48 04 	sts	0x0448, r30
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    3584:	20 91 78 00 	lds	r18, 0x0078
    3588:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    358a:	40 91 79 00 	lds	r20, 0x0079
    358e:	94 2f       	mov	r25, r20
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	28 2b       	or	r18, r24
    3594:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3596:	80 91 b9 02 	lds	r24, 0x02B9
    359a:	82 30       	cpi	r24, 0x02	; 2
    359c:	09 f4       	brne	.+2      	; 0x35a0 <__vector_29+0xc8>
    359e:	ab c1       	rjmp	.+854    	; 0x38f6 <__vector_29+0x41e>
    35a0:	83 30       	cpi	r24, 0x03	; 3
    35a2:	08 f4       	brcc	.+2      	; 0x35a6 <__vector_29+0xce>
    35a4:	44 c0       	rjmp	.+136    	; 0x362e <__vector_29+0x156>
    35a6:	83 30       	cpi	r24, 0x03	; 3
    35a8:	09 f4       	brne	.+2      	; 0x35ac <__vector_29+0xd4>
    35aa:	c8 c1       	rjmp	.+912    	; 0x393c <__vector_29+0x464>
    35ac:	84 30       	cpi	r24, 0x04	; 4
    35ae:	09 f4       	brne	.+2      	; 0x35b2 <__vector_29+0xda>
    35b0:	67 c1       	rjmp	.+718    	; 0x3880 <__vector_29+0x3a8>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    35b2:	80 91 ba 02 	lds	r24, 0x02BA
    35b6:	82 30       	cpi	r24, 0x02	; 2
    35b8:	09 f4       	brne	.+2      	; 0x35bc <__vector_29+0xe4>
    35ba:	4e c1       	rjmp	.+668    	; 0x3858 <__vector_29+0x380>
    35bc:	83 30       	cpi	r24, 0x03	; 3
    35be:	08 f0       	brcs	.+2      	; 0x35c2 <__vector_29+0xea>
    35c0:	cc c0       	rjmp	.+408    	; 0x375a <__vector_29+0x282>
    35c2:	88 23       	and	r24, r24
    35c4:	09 f0       	breq	.+2      	; 0x35c8 <__vector_29+0xf0>
    35c6:	23 c1       	rjmp	.+582    	; 0x380e <__vector_29+0x336>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    35c8:	80 91 24 02 	lds	r24, 0x0224
    35cc:	86 95       	lsr	r24
    35ce:	80 93 23 02 	sts	0x0223, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    35d2:	80 91 bb 02 	lds	r24, 0x02BB
    35d6:	88 23       	and	r24, r24
    35d8:	09 f0       	breq	.+2      	; 0x35dc <__vector_29+0x104>
    35da:	e0 c1       	rjmp	.+960    	; 0x399c <__vector_29+0x4c4>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	80 93 b9 02 	sts	0x02B9, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	80 93 ba 02 	sts	0x02BA, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    35e8:	90 91 23 02 	lds	r25, 0x0223
    35ec:	98 30       	cpi	r25, 0x08	; 8
    35ee:	08 f0       	brcs	.+2      	; 0x35f2 <__vector_29+0x11a>
    35f0:	ec c0       	rjmp	.+472    	; 0x37ca <__vector_29+0x2f2>
		ADCSRB &= ~(1 << MUX5);
    35f2:	90 91 7b 00 	lds	r25, 0x007B
    35f6:	97 7f       	andi	r25, 0xF7	; 247
    35f8:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    35fc:	90 91 23 02 	lds	r25, 0x0223
    3600:	90 5c       	subi	r25, 0xC0	; 192
    3602:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3606:	82 30       	cpi	r24, 0x02	; 2
    3608:	09 f4       	brne	.+2      	; 0x360c <__vector_29+0x134>
    360a:	ec c0       	rjmp	.+472    	; 0x37e4 <__vector_29+0x30c>

	}

	//LED_BLUE_OFF;

}
    360c:	ff 91       	pop	r31
    360e:	ef 91       	pop	r30
    3610:	9f 91       	pop	r25
    3612:	8f 91       	pop	r24
    3614:	7f 91       	pop	r23
    3616:	6f 91       	pop	r22
    3618:	5f 91       	pop	r21
    361a:	4f 91       	pop	r20
    361c:	3f 91       	pop	r19
    361e:	2f 91       	pop	r18
    3620:	0f 90       	pop	r0
    3622:	0b be       	out	0x3b, r0	; 59
    3624:	0f 90       	pop	r0
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	0f 90       	pop	r0
    362a:	1f 90       	pop	r1
    362c:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    362e:	88 23       	and	r24, r24
    3630:	09 f0       	breq	.+2      	; 0x3634 <__vector_29+0x15c>
    3632:	fe c0       	rjmp	.+508    	; 0x3830 <__vector_29+0x358>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3634:	60 91 24 02 	lds	r22, 0x0224
    3638:	6e 30       	cpi	r22, 0x0E	; 14
    363a:	09 f4       	brne	.+2      	; 0x363e <__vector_29+0x166>
    363c:	d0 c1       	rjmp	.+928    	; 0x39de <__vector_29+0x506>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    363e:	46 2f       	mov	r20, r22
    3640:	50 e0       	ldi	r21, 0x00	; 0
    3642:	fa 01       	movw	r30, r20
    3644:	ee 0f       	add	r30, r30
    3646:	ff 1f       	adc	r31, r31
    3648:	e7 5d       	subi	r30, 0xD7	; 215
    364a:	fd 4f       	sbci	r31, 0xFD	; 253
    364c:	31 83       	std	Z+1, r19	; 0x01
    364e:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    3650:	40 ff       	sbrs	r20, 0
    3652:	77 c0       	rjmp	.+238    	; 0x3742 <__vector_29+0x26a>
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    3654:	fa 01       	movw	r30, r20
    3656:	ee 0f       	add	r30, r30
    3658:	ff 1f       	adc	r31, r31
    365a:	e9 5d       	subi	r30, 0xD9	; 217
    365c:	fd 4f       	sbci	r31, 0xFD	; 253
    365e:	80 81       	ld	r24, Z
    3660:	91 81       	ldd	r25, Z+1	; 0x01
    3662:	fa 01       	movw	r30, r20
    3664:	ee 0f       	add	r30, r30
    3666:	ff 1f       	adc	r31, r31
    3668:	e7 5d       	subi	r30, 0xD7	; 215
    366a:	fd 4f       	sbci	r31, 0xFD	; 253
    366c:	40 81       	ld	r20, Z
    366e:	51 81       	ldd	r21, Z+1	; 0x01
    3670:	26 2f       	mov	r18, r22
    3672:	26 95       	lsr	r18
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	84 1b       	sub	r24, r20
    3678:	95 0b       	sbc	r25, r21
    367a:	22 0f       	add	r18, r18
    367c:	33 1f       	adc	r19, r19
    367e:	f9 01       	movw	r30, r18
    3680:	ef 58       	subi	r30, 0x8F	; 143
    3682:	fd 4f       	sbci	r31, 0xFD	; 253
    3684:	40 81       	ld	r20, Z
    3686:	51 81       	ldd	r21, Z+1	; 0x01
    3688:	84 1b       	sub	r24, r20
    368a:	95 0b       	sbc	r25, r21
    368c:	f9 01       	movw	r30, r18
    368e:	e7 5a       	subi	r30, 0xA7	; 167
    3690:	fd 4f       	sbci	r31, 0xFD	; 253
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	80 83       	st	Z, r24
				if(proximityResult[currentProx>>1] < 0) {
    3696:	97 fd       	sbrc	r25, 7
    3698:	bd c1       	rjmp	.+890    	; 0x3a14 <__vector_29+0x53c>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    369a:	44 e0       	ldi	r20, 0x04	; 4
    369c:	81 30       	cpi	r24, 0x01	; 1
    369e:	94 07       	cpc	r25, r20
    36a0:	24 f0       	brlt	.+8      	; 0x36aa <__vector_29+0x1d2>
					proximityResult[currentProx>>1] = 1024;
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	94 e0       	ldi	r25, 0x04	; 4
    36a6:	91 83       	std	Z+1, r25	; 0x01
    36a8:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    36aa:	60 31       	cpi	r22, 0x10	; 16
    36ac:	48 f4       	brcc	.+18     	; 0x36c0 <__vector_29+0x1e8>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    36ae:	8c 33       	cpi	r24, 0x3C	; 60
    36b0:	91 05       	cpc	r25, r1
    36b2:	0c f0       	brlt	.+2      	; 0x36b6 <__vector_29+0x1de>
    36b4:	b4 c1       	rjmp	.+872    	; 0x3a1e <__vector_29+0x546>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    36b6:	2f 53       	subi	r18, 0x3F	; 63
    36b8:	3d 4f       	sbci	r19, 0xFD	; 253
    36ba:	f9 01       	movw	r30, r18
    36bc:	91 83       	std	Z+1, r25	; 0x01
    36be:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    36c0:	80 91 63 04 	lds	r24, 0x0463
    36c4:	88 23       	and	r24, r24
    36c6:	09 f4       	brne	.+2      	; 0x36ca <__vector_29+0x1f2>
    36c8:	75 c1       	rjmp	.+746    	; 0x39b4 <__vector_29+0x4dc>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    36ca:	80 91 69 02 	lds	r24, 0x0269
    36ce:	90 91 6a 02 	lds	r25, 0x026A
    36d2:	f1 e0       	ldi	r31, 0x01	; 1
    36d4:	84 3a       	cpi	r24, 0xA4	; 164
    36d6:	9f 07       	cpc	r25, r31
    36d8:	cc f0       	brlt	.+50     	; 0x370c <__vector_29+0x234>
    36da:	80 91 6b 02 	lds	r24, 0x026B
    36de:	90 91 6c 02 	lds	r25, 0x026C
    36e2:	21 e0       	ldi	r18, 0x01	; 1
    36e4:	84 3a       	cpi	r24, 0xA4	; 164
    36e6:	92 07       	cpc	r25, r18
    36e8:	8c f0       	brlt	.+34     	; 0x370c <__vector_29+0x234>
    36ea:	80 91 6d 02 	lds	r24, 0x026D
    36ee:	90 91 6e 02 	lds	r25, 0x026E
    36f2:	41 e0       	ldi	r20, 0x01	; 1
    36f4:	84 3a       	cpi	r24, 0xA4	; 164
    36f6:	94 07       	cpc	r25, r20
    36f8:	4c f0       	brlt	.+18     	; 0x370c <__vector_29+0x234>
    36fa:	80 91 6f 02 	lds	r24, 0x026F
    36fe:	90 91 70 02 	lds	r25, 0x0270
    3702:	e1 e0       	ldi	r30, 0x01	; 1
    3704:	84 3a       	cpi	r24, 0xA4	; 164
    3706:	9e 07       	cpc	r25, r30
    3708:	0c f0       	brlt	.+2      	; 0x370c <__vector_29+0x234>
    370a:	54 c1       	rjmp	.+680    	; 0x39b4 <__vector_29+0x4dc>
						cliffDetectedFlag = 1;
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	80 93 64 04 	sts	0x0464, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    3712:	10 92 f8 02 	sts	0x02F8, r1
    3716:	10 92 f7 02 	sts	0x02F7, r1
						OCR4A = 0;
    371a:	10 92 a9 00 	sts	0x00A9, r1
    371e:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    3722:	10 92 ab 00 	sts	0x00AB, r1
    3726:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    372a:	10 92 f6 02 	sts	0x02F6, r1
    372e:	10 92 f5 02 	sts	0x02F5, r1
						OCR3A = 0;
    3732:	10 92 99 00 	sts	0x0099, r1
    3736:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    373a:	10 92 9b 00 	sts	0x009B, r1
    373e:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    3742:	6f 5f       	subi	r22, 0xFF	; 255
    3744:	60 93 24 02 	sts	0x0224, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    3748:	68 31       	cpi	r22, 0x18	; 24
    374a:	08 f4       	brcc	.+2      	; 0x374e <__vector_29+0x276>
    374c:	32 cf       	rjmp	.-412    	; 0x35b2 <__vector_29+0xda>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    374e:	10 92 24 02 	sts	0x0224, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	80 93 c0 02 	sts	0x02C0, r24
    3758:	2c cf       	rjmp	.-424    	; 0x35b2 <__vector_29+0xda>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    375a:	83 30       	cpi	r24, 0x03	; 3
    375c:	09 f4       	brne	.+2      	; 0x3760 <__vector_29+0x288>
    375e:	b7 c0       	rjmp	.+366    	; 0x38ce <__vector_29+0x3f6>
    3760:	84 30       	cpi	r24, 0x04	; 4
    3762:	09 f0       	breq	.+2      	; 0x3766 <__vector_29+0x28e>
    3764:	41 cf       	rjmp	.-382    	; 0x35e8 <__vector_29+0x110>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    3766:	90 91 26 02 	lds	r25, 0x0226
    376a:	90 93 23 02 	sts	0x0223, r25
			rightChannelPhase = rightMotorPhase;
    376e:	90 91 27 02 	lds	r25, 0x0227
    3772:	90 93 bb 02 	sts	0x02BB, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    3776:	90 91 bc 02 	lds	r25, 0x02BC
    377a:	99 23       	and	r25, r25
    377c:	09 f0       	breq	.+2      	; 0x3780 <__vector_29+0x2a8>
    377e:	08 c1       	rjmp	.+528    	; 0x3990 <__vector_29+0x4b8>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3780:	83 e0       	ldi	r24, 0x03	; 3
    3782:	80 93 b9 02 	sts	0x02B9, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    3786:	10 92 ba 02 	sts	0x02BA, r1

			if(currentProx==14 && measBattery==1) {
    378a:	60 91 24 02 	lds	r22, 0x0224
    378e:	6e 30       	cpi	r22, 0x0E	; 14
    3790:	09 f4       	brne	.+2      	; 0x3794 <__vector_29+0x2bc>
    3792:	1f c1       	rjmp	.+574    	; 0x39d2 <__vector_29+0x4fa>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    3794:	86 2f       	mov	r24, r22
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	60 ff       	sbrs	r22, 0
    379a:	f1 c0       	rjmp	.+482    	; 0x397e <__vector_29+0x4a6>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    379c:	60 31       	cpi	r22, 0x10	; 16
    379e:	08 f4       	brcc	.+2      	; 0x37a2 <__vector_29+0x2ca>
    37a0:	0c c1       	rjmp	.+536    	; 0x39ba <__vector_29+0x4e2>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    37a2:	20 91 4c 04 	lds	r18, 0x044C
    37a6:	22 23       	and	r18, r18
    37a8:	09 f0       	breq	.+2      	; 0x37ac <__vector_29+0x2d4>
    37aa:	d5 c0       	rjmp	.+426    	; 0x3956 <__vector_29+0x47e>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    37ac:	40 97       	sbiw	r24, 0x10	; 16
    37ae:	95 95       	asr	r25
    37b0:	87 95       	ror	r24
    37b2:	21 e0       	ldi	r18, 0x01	; 1
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	02 c0       	rjmp	.+4      	; 0x37bc <__vector_29+0x2e4>
    37b8:	22 0f       	add	r18, r18
    37ba:	33 1f       	adc	r19, r19
    37bc:	8a 95       	dec	r24
    37be:	e2 f7       	brpl	.-8      	; 0x37b8 <__vector_29+0x2e0>
    37c0:	20 93 05 01 	sts	0x0105, r18
    37c4:	80 91 ba 02 	lds	r24, 0x02BA
    37c8:	0f cf       	rjmp	.-482    	; 0x35e8 <__vector_29+0x110>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    37ca:	90 91 7b 00 	lds	r25, 0x007B
    37ce:	98 60       	ori	r25, 0x08	; 8
    37d0:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    37d4:	90 91 23 02 	lds	r25, 0x0223
    37d8:	98 5c       	subi	r25, 0xC8	; 200
    37da:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    37de:	82 30       	cpi	r24, 0x02	; 2
    37e0:	09 f0       	breq	.+2      	; 0x37e4 <__vector_29+0x30c>
    37e2:	14 cf       	rjmp	.-472    	; 0x360c <__vector_29+0x134>

		if(hardwareRevision == HW_REV_3_0) {
    37e4:	20 91 4c 04 	lds	r18, 0x044C
    37e8:	22 23       	and	r18, r18
    37ea:	51 f0       	breq	.+20     	; 0x3800 <__vector_29+0x328>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    37ec:	21 30       	cpi	r18, 0x01	; 1
    37ee:	19 f0       	breq	.+6      	; 0x37f6 <__vector_29+0x31e>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    37f0:	22 30       	cpi	r18, 0x02	; 2
    37f2:	09 f0       	breq	.+2      	; 0x37f6 <__vector_29+0x31e>
    37f4:	0b cf       	rjmp	.-490    	; 0x360c <__vector_29+0x134>
			PORTJ = 0xFF;
    37f6:	8f ef       	ldi	r24, 0xFF	; 255
    37f8:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    37fc:	12 b8       	out	0x02, r1	; 2
    37fe:	06 cf       	rjmp	.-500    	; 0x360c <__vector_29+0x134>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    3800:	80 91 05 01 	lds	r24, 0x0105
    3804:	80 7f       	andi	r24, 0xF0	; 240
    3806:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    380a:	12 b8       	out	0x02, r1	; 2
    380c:	ff ce       	rjmp	.-514    	; 0x360c <__vector_29+0x134>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    380e:	81 30       	cpi	r24, 0x01	; 1
    3810:	09 f0       	breq	.+2      	; 0x3814 <__vector_29+0x33c>
    3812:	ea ce       	rjmp	.-556    	; 0x35e8 <__vector_29+0x110>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    3814:	80 91 25 02 	lds	r24, 0x0225
    3818:	80 93 23 02 	sts	0x0223, r24
			leftChannelPhase = leftMotorPhase;
    381c:	80 91 28 02 	lds	r24, 0x0228
    3820:	80 93 bc 02 	sts	0x02BC, r24
			adcSaveDataTo = SAVE_TO_PROX;
    3824:	10 92 b9 02 	sts	0x02B9, r1
			adcSamplingState = 2;
    3828:	82 e0       	ldi	r24, 0x02	; 2
    382a:	80 93 ba 02 	sts	0x02BA, r24
			break;
    382e:	dc ce       	rjmp	.-584    	; 0x35e8 <__vector_29+0x110>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3830:	81 30       	cpi	r24, 0x01	; 1
    3832:	09 f0       	breq	.+2      	; 0x3836 <__vector_29+0x35e>
    3834:	be ce       	rjmp	.-644    	; 0x35b2 <__vector_29+0xda>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    3836:	80 91 e3 02 	lds	r24, 0x02E3
    383a:	90 91 e4 02 	lds	r25, 0x02E4
    383e:	82 0f       	add	r24, r18
    3840:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    3842:	96 95       	lsr	r25
    3844:	87 95       	ror	r24
    3846:	90 93 e4 02 	sts	0x02E4, r25
    384a:	80 93 e3 02 	sts	0x02E3, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    384e:	80 91 ba 02 	lds	r24, 0x02BA
    3852:	82 30       	cpi	r24, 0x02	; 2
    3854:	09 f0       	breq	.+2      	; 0x3858 <__vector_29+0x380>
    3856:	b2 ce       	rjmp	.-668    	; 0x35bc <__vector_29+0xe4>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    3858:	80 91 26 02 	lds	r24, 0x0226
    385c:	80 93 23 02 	sts	0x0223, r24
			rightChannelPhase = rightMotorPhase;
    3860:	80 91 27 02 	lds	r24, 0x0227
    3864:	80 93 bb 02 	sts	0x02BB, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3868:	80 91 bc 02 	lds	r24, 0x02BC
    386c:	88 23       	and	r24, r24
    386e:	09 f0       	breq	.+2      	; 0x3872 <__vector_29+0x39a>
    3870:	9b c0       	rjmp	.+310    	; 0x39a8 <__vector_29+0x4d0>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3872:	83 e0       	ldi	r24, 0x03	; 3
    3874:	80 93 b9 02 	sts	0x02B9, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3878:	83 e0       	ldi	r24, 0x03	; 3
    387a:	80 93 ba 02 	sts	0x02BA, r24
			break;
    387e:	b4 ce       	rjmp	.-664    	; 0x35e8 <__vector_29+0x110>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    3880:	80 91 0a 02 	lds	r24, 0x020A
    3884:	88 23       	and	r24, r24
    3886:	09 f4       	brne	.+2      	; 0x388a <__vector_29+0x3b2>
    3888:	94 ce       	rjmp	.-728    	; 0x35b2 <__vector_29+0xda>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    388a:	90 91 00 01 	lds	r25, 0x0100
    388e:	93 fd       	sbrc	r25, 3
    3890:	90 ce       	rjmp	.-736    	; 0x35b2 <__vector_29+0xda>
    3892:	90 91 00 01 	lds	r25, 0x0100
    3896:	94 fd       	sbrc	r25, 4
    3898:	8c ce       	rjmp	.-744    	; 0x35b2 <__vector_29+0xda>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    389a:	48 2f       	mov	r20, r24
    389c:	4f 5f       	subi	r20, 0xFF	; 255
    389e:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    38a2:	45 30       	cpi	r20, 0x05	; 5
    38a4:	08 f4       	brcc	.+2      	; 0x38a8 <__vector_29+0x3d0>
    38a6:	85 ce       	rjmp	.-758    	; 0x35b2 <__vector_29+0xda>
					left_vel_sum += value;
    38a8:	80 91 ed 02 	lds	r24, 0x02ED
    38ac:	90 91 ee 02 	lds	r25, 0x02EE
    38b0:	82 0f       	add	r24, r18
    38b2:	93 1f       	adc	r25, r19
    38b4:	90 93 ee 02 	sts	0x02EE, r25
    38b8:	80 93 ed 02 	sts	0x02ED, r24
					if(firstSampleLeft==8) {
    38bc:	48 30       	cpi	r20, 0x08	; 8
    38be:	09 f0       	breq	.+2      	; 0x38c2 <__vector_29+0x3ea>
    38c0:	78 ce       	rjmp	.-784    	; 0x35b2 <__vector_29+0xda>
						firstSampleLeft = 0;
    38c2:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	80 93 07 02 	sts	0x0207, r24
    38cc:	72 ce       	rjmp	.-796    	; 0x35b2 <__vector_29+0xda>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    38ce:	80 91 25 02 	lds	r24, 0x0225
    38d2:	80 93 23 02 	sts	0x0223, r24
			leftChannelPhase = leftMotorPhase;
    38d6:	80 91 28 02 	lds	r24, 0x0228
    38da:	80 93 bc 02 	sts	0x02BC, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    38de:	80 91 bb 02 	lds	r24, 0x02BB
    38e2:	88 23       	and	r24, r24
    38e4:	09 f0       	breq	.+2      	; 0x38e8 <__vector_29+0x410>
    38e6:	4e c0       	rjmp	.+156    	; 0x3984 <__vector_29+0x4ac>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	80 93 b9 02 	sts	0x02B9, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    38ee:	84 e0       	ldi	r24, 0x04	; 4
    38f0:	80 93 ba 02 	sts	0x02BA, r24
			break;
    38f4:	79 ce       	rjmp	.-782    	; 0x35e8 <__vector_29+0x110>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    38f6:	80 91 09 02 	lds	r24, 0x0209
    38fa:	88 23       	and	r24, r24
    38fc:	09 f4       	brne	.+2      	; 0x3900 <__vector_29+0x428>
    38fe:	59 ce       	rjmp	.-846    	; 0x35b2 <__vector_29+0xda>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    3900:	63 99       	sbic	0x0c, 3	; 12
    3902:	57 ce       	rjmp	.-850    	; 0x35b2 <__vector_29+0xda>
    3904:	64 99       	sbic	0x0c, 4	; 12
    3906:	55 ce       	rjmp	.-854    	; 0x35b2 <__vector_29+0xda>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    3908:	48 2f       	mov	r20, r24
    390a:	4f 5f       	subi	r20, 0xFF	; 255
    390c:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    3910:	45 30       	cpi	r20, 0x05	; 5
    3912:	08 f4       	brcc	.+2      	; 0x3916 <__vector_29+0x43e>
    3914:	4e ce       	rjmp	.-868    	; 0x35b2 <__vector_29+0xda>
					right_vel_sum += value;
    3916:	80 91 ef 02 	lds	r24, 0x02EF
    391a:	90 91 f0 02 	lds	r25, 0x02F0
    391e:	82 0f       	add	r24, r18
    3920:	93 1f       	adc	r25, r19
    3922:	90 93 f0 02 	sts	0x02F0, r25
    3926:	80 93 ef 02 	sts	0x02EF, r24
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    392a:	48 30       	cpi	r20, 0x08	; 8
    392c:	09 f0       	breq	.+2      	; 0x3930 <__vector_29+0x458>
    392e:	41 ce       	rjmp	.-894    	; 0x35b2 <__vector_29+0xda>
						firstSampleRight = 0;
    3930:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	80 93 08 02 	sts	0x0208, r24
    393a:	3b ce       	rjmp	.-906    	; 0x35b2 <__vector_29+0xda>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    393c:	80 91 e1 02 	lds	r24, 0x02E1
    3940:	90 91 e2 02 	lds	r25, 0x02E2
    3944:	82 0f       	add	r24, r18
    3946:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    3948:	96 95       	lsr	r25
    394a:	87 95       	ror	r24
    394c:	90 93 e2 02 	sts	0x02E2, r25
    3950:	80 93 e1 02 	sts	0x02E1, r24
			break;
    3954:	2e ce       	rjmp	.-932    	; 0x35b2 <__vector_29+0xda>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    3956:	21 30       	cpi	r18, 0x01	; 1
    3958:	11 f0       	breq	.+4      	; 0x395e <__vector_29+0x486>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    395a:	22 30       	cpi	r18, 0x02	; 2
    395c:	81 f4       	brne	.+32     	; 0x397e <__vector_29+0x4a6>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    395e:	40 91 05 01 	lds	r20, 0x0105
    3962:	40 97       	sbiw	r24, 0x10	; 16
    3964:	95 95       	asr	r25
    3966:	87 95       	ror	r24
    3968:	21 e0       	ldi	r18, 0x01	; 1
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	02 c0       	rjmp	.+4      	; 0x3972 <__vector_29+0x49a>
    396e:	22 0f       	add	r18, r18
    3970:	33 1f       	adc	r19, r19
    3972:	8a 95       	dec	r24
    3974:	e2 f7       	brpl	.-8      	; 0x396e <__vector_29+0x496>
    3976:	20 95       	com	r18
    3978:	24 23       	and	r18, r20
    397a:	20 93 05 01 	sts	0x0105, r18
    397e:	80 91 ba 02 	lds	r24, 0x02BA
    3982:	32 ce       	rjmp	.-924    	; 0x35e8 <__vector_29+0x110>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3984:	81 30       	cpi	r24, 0x01	; 1
    3986:	d1 f1       	breq	.+116    	; 0x39fc <__vector_29+0x524>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3988:	85 e0       	ldi	r24, 0x05	; 5
    398a:	80 93 b9 02 	sts	0x02B9, r24
    398e:	af cf       	rjmp	.-162    	; 0x38ee <__vector_29+0x416>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3990:	91 30       	cpi	r25, 0x01	; 1
    3992:	09 f0       	breq	.+2      	; 0x3996 <__vector_29+0x4be>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3994:	85 e0       	ldi	r24, 0x05	; 5
    3996:	80 93 b9 02 	sts	0x02B9, r24
    399a:	f5 ce       	rjmp	.-534    	; 0x3786 <__vector_29+0x2ae>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    399c:	81 30       	cpi	r24, 0x01	; 1
    399e:	b1 f1       	breq	.+108    	; 0x3a0c <__vector_29+0x534>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    39a0:	85 e0       	ldi	r24, 0x05	; 5
    39a2:	80 93 b9 02 	sts	0x02B9, r24
    39a6:	1d ce       	rjmp	.-966    	; 0x35e2 <__vector_29+0x10a>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    39a8:	81 30       	cpi	r24, 0x01	; 1
    39aa:	61 f1       	breq	.+88     	; 0x3a04 <__vector_29+0x52c>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    39ac:	85 e0       	ldi	r24, 0x05	; 5
    39ae:	80 93 b9 02 	sts	0x02B9, r24
    39b2:	62 cf       	rjmp	.-316    	; 0x3878 <__vector_29+0x3a0>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    39b4:	10 92 64 04 	sts	0x0464, r1
    39b8:	c4 ce       	rjmp	.-632    	; 0x3742 <__vector_29+0x26a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    39ba:	66 95       	lsr	r22
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	02 c0       	rjmp	.+4      	; 0x39c6 <__vector_29+0x4ee>
    39c2:	88 0f       	add	r24, r24
    39c4:	99 1f       	adc	r25, r25
    39c6:	6a 95       	dec	r22
    39c8:	e2 f7       	brpl	.-8      	; 0x39c2 <__vector_29+0x4ea>
    39ca:	82 b9       	out	0x02, r24	; 2
    39cc:	80 91 ba 02 	lds	r24, 0x02BA
    39d0:	0b ce       	rjmp	.-1002   	; 0x35e8 <__vector_29+0x110>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    39d2:	80 91 bf 02 	lds	r24, 0x02BF
    39d6:	81 30       	cpi	r24, 0x01	; 1
    39d8:	a1 f1       	breq	.+104    	; 0x3a42 <__vector_29+0x56a>
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	05 ce       	rjmp	.-1014   	; 0x35e8 <__vector_29+0x110>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    39de:	80 91 bf 02 	lds	r24, 0x02BF
    39e2:	82 30       	cpi	r24, 0x02	; 2
    39e4:	09 f0       	breq	.+2      	; 0x39e8 <__vector_29+0x510>
    39e6:	2b ce       	rjmp	.-938    	; 0x363e <__vector_29+0x166>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    39e8:	30 93 be 02 	sts	0x02BE, r19
    39ec:	20 93 bd 02 	sts	0x02BD, r18
				measBattery = 0;
    39f0:	10 92 bf 02 	sts	0x02BF, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    39f4:	46 98       	cbi	0x08, 6	; 8
    39f6:	4e e0       	ldi	r20, 0x0E	; 14
    39f8:	50 e0       	ldi	r21, 0x00	; 0
    39fa:	2a ce       	rjmp	.-940    	; 0x3650 <__vector_29+0x178>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    39fc:	82 e0       	ldi	r24, 0x02	; 2
    39fe:	80 93 b9 02 	sts	0x02B9, r24
    3a02:	75 cf       	rjmp	.-278    	; 0x38ee <__vector_29+0x416>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    3a04:	84 e0       	ldi	r24, 0x04	; 4
    3a06:	80 93 b9 02 	sts	0x02B9, r24
    3a0a:	36 cf       	rjmp	.-404    	; 0x3878 <__vector_29+0x3a0>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3a0c:	82 e0       	ldi	r24, 0x02	; 2
    3a0e:	80 93 b9 02 	sts	0x02B9, r24
    3a12:	e7 cd       	rjmp	.-1074   	; 0x35e2 <__vector_29+0x10a>
			}

			if(currentProx & 0x01) {
				proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    3a14:	11 82       	std	Z+1, r1	; 0x01
    3a16:	10 82       	st	Z, r1
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	46 ce       	rjmp	.-884    	; 0x36aa <__vector_29+0x1d2>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    3a1e:	ac 01       	movw	r20, r24
    3a20:	44 5c       	subi	r20, 0xC4	; 196
    3a22:	5f 4f       	sbci	r21, 0xFF	; 255
    3a24:	55 95       	asr	r21
    3a26:	47 95       	ror	r20
    3a28:	48 37       	cpi	r20, 0x78	; 120
    3a2a:	51 05       	cpc	r21, r1
    3a2c:	7c f4       	brge	.+30     	; 0x3a4c <__vector_29+0x574>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    3a2e:	2f 53       	subi	r18, 0x3F	; 63
    3a30:	3d 4f       	sbci	r19, 0xFD	; 253
    3a32:	cc 97       	sbiw	r24, 0x3c	; 60
    3a34:	95 95       	asr	r25
    3a36:	87 95       	ror	r24
    3a38:	cc 96       	adiw	r24, 0x3c	; 60
    3a3a:	f9 01       	movw	r30, r18
    3a3c:	91 83       	std	Z+1, r25	; 0x01
    3a3e:	80 83       	st	Z, r24
    3a40:	3f ce       	rjmp	.-898    	; 0x36c0 <__vector_29+0x1e8>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    3a42:	82 e0       	ldi	r24, 0x02	; 2
    3a44:	80 93 bf 02 	sts	0x02BF, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    3a48:	46 9a       	sbi	0x08, 6	; 8
    3a4a:	a4 ce       	rjmp	.-696    	; 0x3794 <__vector_29+0x2bc>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    3a4c:	ac 01       	movw	r20, r24
    3a4e:	44 5d       	subi	r20, 0xD4	; 212
    3a50:	5e 4f       	sbci	r21, 0xFE	; 254
    3a52:	55 95       	asr	r21
    3a54:	47 95       	ror	r20
    3a56:	55 95       	asr	r21
    3a58:	47 95       	ror	r20
    3a5a:	44 3b       	cpi	r20, 0xB4	; 180
    3a5c:	51 05       	cpc	r21, r1
    3a5e:	74 f4       	brge	.+28     	; 0x3a7c <__vector_29+0x5a4>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    3a60:	2f 53       	subi	r18, 0x3F	; 63
    3a62:	3d 4f       	sbci	r19, 0xFD	; 253
    3a64:	84 5b       	subi	r24, 0xB4	; 180
    3a66:	90 40       	sbci	r25, 0x00	; 0
    3a68:	95 95       	asr	r25
    3a6a:	87 95       	ror	r24
    3a6c:	95 95       	asr	r25
    3a6e:	87 95       	ror	r24
    3a70:	88 58       	subi	r24, 0x88	; 136
    3a72:	9f 4f       	sbci	r25, 0xFF	; 255
    3a74:	f9 01       	movw	r30, r18
    3a76:	91 83       	std	Z+1, r25	; 0x01
    3a78:	80 83       	st	Z, r24
    3a7a:	22 ce       	rjmp	.-956    	; 0x36c0 <__vector_29+0x1e8>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    3a7c:	2f 53       	subi	r18, 0x3F	; 63
    3a7e:	3d 4f       	sbci	r19, 0xFD	; 253
    3a80:	84 5a       	subi	r24, 0xA4	; 164
    3a82:	91 40       	sbci	r25, 0x01	; 1
    3a84:	95 95       	asr	r25
    3a86:	87 95       	ror	r24
    3a88:	95 95       	asr	r25
    3a8a:	87 95       	ror	r24
    3a8c:	95 95       	asr	r25
    3a8e:	87 95       	ror	r24
    3a90:	8c 54       	subi	r24, 0x4C	; 76
    3a92:	9f 4f       	sbci	r25, 0xFF	; 255
    3a94:	f9 01       	movw	r30, r18
    3a96:	91 83       	std	Z+1, r25	; 0x01
    3a98:	80 83       	st	Z, r24
    3a9a:	12 ce       	rjmp	.-988    	; 0x36c0 <__vector_29+0x1e8>

00003a9c <initMotors>:

#include "motors.h"

void initMotors() {
    3a9c:	0f 93       	push	r16
    3a9e:	1f 93       	push	r17
    3aa0:	cf 93       	push	r28
    3aa2:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    3aa4:	e0 e9       	ldi	r30, 0x90	; 144
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	10 82       	st	Z, r1
	TCCR3B = 0;
    3aaa:	41 e9       	ldi	r20, 0x91	; 145
    3aac:	50 e0       	ldi	r21, 0x00	; 0
    3aae:	da 01       	movw	r26, r20
    3ab0:	1c 92       	st	X, r1
	TIMSK3 = 0;
    3ab2:	21 e7       	ldi	r18, 0x71	; 113
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	e9 01       	movw	r28, r18
    3ab8:	18 82       	st	Y, r1
	TCCR4A = 0;
    3aba:	a0 ea       	ldi	r26, 0xA0	; 160
    3abc:	b0 e0       	ldi	r27, 0x00	; 0
    3abe:	1c 92       	st	X, r1
	TCCR4B = 0;
    3ac0:	81 ea       	ldi	r24, 0xA1	; 161
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	ec 01       	movw	r28, r24
    3ac6:	18 82       	st	Y, r1
	TIMSK4 = 0;
    3ac8:	02 e7       	ldi	r16, 0x72	; 114
    3aca:	10 e0       	ldi	r17, 0x00	; 0
    3acc:	e8 01       	movw	r28, r16
    3ace:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    3ad0:	60 81       	ld	r22, Z
    3ad2:	63 68       	ori	r22, 0x83	; 131
    3ad4:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    3ad6:	60 81       	ld	r22, Z
    3ad8:	63 60       	ori	r22, 0x03	; 3
    3ada:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3adc:	ea 01       	movw	r28, r20
    3ade:	68 81       	ld	r22, Y
    3ae0:	6b 60       	ori	r22, 0x0B	; 11
    3ae2:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    3ae4:	40 91 f5 02 	lds	r20, 0x02F5
    3ae8:	50 91 f6 02 	lds	r21, 0x02F6
    3aec:	50 93 99 00 	sts	0x0099, r21
    3af0:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    3af4:	10 92 9b 00 	sts	0x009B, r1
    3af8:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    3afc:	e9 01       	movw	r28, r18
    3afe:	48 81       	ld	r20, Y
    3b00:	41 60       	ori	r20, 0x01	; 1
    3b02:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3b04:	20 81       	ld	r18, Z
    3b06:	2f 75       	andi	r18, 0x5F	; 95
    3b08:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3b0a:	2e b1       	in	r18, 0x0e	; 14
    3b0c:	27 7e       	andi	r18, 0xE7	; 231
    3b0e:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    3b10:	2c 91       	ld	r18, X
    3b12:	23 68       	ori	r18, 0x83	; 131
    3b14:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3b16:	fc 01       	movw	r30, r24
    3b18:	20 81       	ld	r18, Z
    3b1a:	2b 60       	ori	r18, 0x0B	; 11
    3b1c:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    3b1e:	80 91 f7 02 	lds	r24, 0x02F7
    3b22:	90 91 f8 02 	lds	r25, 0x02F8
    3b26:	90 93 a9 00 	sts	0x00A9, r25
    3b2a:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    3b2e:	10 92 ab 00 	sts	0x00AB, r1
    3b32:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    3b36:	e8 01       	movw	r28, r16
    3b38:	88 81       	ld	r24, Y
    3b3a:	81 60       	ori	r24, 0x01	; 1
    3b3c:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3b3e:	8c 91       	ld	r24, X
    3b40:	8f 75       	andi	r24, 0x5F	; 95
    3b42:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3b44:	e2 e0       	ldi	r30, 0x02	; 2
    3b46:	f1 e0       	ldi	r31, 0x01	; 1
    3b48:	80 81       	ld	r24, Z
    3b4a:	87 7e       	andi	r24, 0xE7	; 231
    3b4c:	80 83       	st	Z, r24


}
    3b4e:	df 91       	pop	r29
    3b50:	cf 91       	pop	r28
    3b52:	1f 91       	pop	r17
    3b54:	0f 91       	pop	r16
    3b56:	08 95       	ret

00003b58 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    3b58:	80 91 07 02 	lds	r24, 0x0207
    3b5c:	88 23       	and	r24, r24
    3b5e:	b1 f1       	breq	.+108    	; 0x3bcc <handleMotorsWithNoController+0x74>
		last_left_vel = left_vel_sum>>2;
    3b60:	20 91 ed 02 	lds	r18, 0x02ED
    3b64:	30 91 ee 02 	lds	r19, 0x02EE
    3b68:	36 95       	lsr	r19
    3b6a:	27 95       	ror	r18
    3b6c:	36 95       	lsr	r19
    3b6e:	27 95       	ror	r18
    3b70:	30 93 f2 02 	sts	0x02F2, r19
    3b74:	20 93 f1 02 	sts	0x02F1, r18
		compute_left_vel = 0;
    3b78:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    3b7c:	10 92 ee 02 	sts	0x02EE, r1
    3b80:	10 92 ed 02 	sts	0x02ED, r1

		if(pwm_left_desired >= 0) {
    3b84:	80 91 fb 02 	lds	r24, 0x02FB
    3b88:	90 91 fc 02 	lds	r25, 0x02FC
    3b8c:	97 fd       	sbrc	r25, 7
    3b8e:	d5 c0       	rjmp	.+426    	; 0x3d3a <handleMotorsWithNoController+0x1e2>
			leftMotSteps += (last_left_vel>>3);
    3b90:	35 95       	asr	r19
    3b92:	27 95       	ror	r18
    3b94:	35 95       	asr	r19
    3b96:	27 95       	ror	r18
    3b98:	35 95       	asr	r19
    3b9a:	27 95       	ror	r18
    3b9c:	44 27       	eor	r20, r20
    3b9e:	37 fd       	sbrc	r19, 7
    3ba0:	40 95       	com	r20
    3ba2:	54 2f       	mov	r21, r20
    3ba4:	80 91 d5 02 	lds	r24, 0x02D5
    3ba8:	90 91 d6 02 	lds	r25, 0x02D6
    3bac:	a0 91 d7 02 	lds	r26, 0x02D7
    3bb0:	b0 91 d8 02 	lds	r27, 0x02D8
    3bb4:	82 0f       	add	r24, r18
    3bb6:	93 1f       	adc	r25, r19
    3bb8:	a4 1f       	adc	r26, r20
    3bba:	b5 1f       	adc	r27, r21
    3bbc:	80 93 d5 02 	sts	0x02D5, r24
    3bc0:	90 93 d6 02 	sts	0x02D6, r25
    3bc4:	a0 93 d7 02 	sts	0x02D7, r26
    3bc8:	b0 93 d8 02 	sts	0x02D8, r27
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    3bcc:	80 91 08 02 	lds	r24, 0x0208
    3bd0:	88 23       	and	r24, r24
    3bd2:	b1 f1       	breq	.+108    	; 0x3c40 <handleMotorsWithNoController+0xe8>
		last_right_vel = right_vel_sum>>2;
    3bd4:	20 91 ef 02 	lds	r18, 0x02EF
    3bd8:	30 91 f0 02 	lds	r19, 0x02F0
    3bdc:	36 95       	lsr	r19
    3bde:	27 95       	ror	r18
    3be0:	36 95       	lsr	r19
    3be2:	27 95       	ror	r18
    3be4:	30 93 f4 02 	sts	0x02F4, r19
    3be8:	20 93 f3 02 	sts	0x02F3, r18
		compute_right_vel = 0;
    3bec:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    3bf0:	10 92 f0 02 	sts	0x02F0, r1
    3bf4:	10 92 ef 02 	sts	0x02EF, r1

		if(pwm_right_desired >= 0) {
    3bf8:	80 91 f9 02 	lds	r24, 0x02F9
    3bfc:	90 91 fa 02 	lds	r25, 0x02FA
    3c00:	97 fd       	sbrc	r25, 7
    3c02:	7c c0       	rjmp	.+248    	; 0x3cfc <handleMotorsWithNoController+0x1a4>
			rightMotSteps += (last_right_vel>>3);
    3c04:	35 95       	asr	r19
    3c06:	27 95       	ror	r18
    3c08:	35 95       	asr	r19
    3c0a:	27 95       	ror	r18
    3c0c:	35 95       	asr	r19
    3c0e:	27 95       	ror	r18
    3c10:	44 27       	eor	r20, r20
    3c12:	37 fd       	sbrc	r19, 7
    3c14:	40 95       	com	r20
    3c16:	54 2f       	mov	r21, r20
    3c18:	80 91 d1 02 	lds	r24, 0x02D1
    3c1c:	90 91 d2 02 	lds	r25, 0x02D2
    3c20:	a0 91 d3 02 	lds	r26, 0x02D3
    3c24:	b0 91 d4 02 	lds	r27, 0x02D4
    3c28:	82 0f       	add	r24, r18
    3c2a:	93 1f       	adc	r25, r19
    3c2c:	a4 1f       	adc	r26, r20
    3c2e:	b5 1f       	adc	r27, r21
    3c30:	80 93 d1 02 	sts	0x02D1, r24
    3c34:	90 93 d2 02 	sts	0x02D2, r25
    3c38:	a0 93 d3 02 	sts	0x02D3, r26
    3c3c:	b0 93 d4 02 	sts	0x02D4, r27
	}


	//pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	//pwm_left_working = pwm_left_desired;
	pwm_right_working = pwm_intermediate_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    3c40:	80 91 fd 02 	lds	r24, 0x02FD
    3c44:	90 91 fe 02 	lds	r25, 0x02FE
    3c48:	90 93 0a 03 	sts	0x030A, r25
    3c4c:	80 93 09 03 	sts	0x0309, r24
	pwm_left_working = pwm_intermediate_left_desired;	
    3c50:	20 91 ff 02 	lds	r18, 0x02FF
    3c54:	30 91 00 03 	lds	r19, 0x0300
    3c58:	30 93 0c 03 	sts	0x030C, r19
    3c5c:	20 93 0b 03 	sts	0x030B, r18
	if(obstacleAvoidanceEnabled) {
    3c60:	40 91 62 04 	lds	r20, 0x0462
    3c64:	44 23       	and	r20, r20
    3c66:	79 f5       	brne	.+94     	; 0x3cc6 <handleMotorsWithNoController+0x16e>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    3c68:	30 93 ec 02 	sts	0x02EC, r19
    3c6c:	20 93 eb 02 	sts	0x02EB, r18
	pwm_right_desired_to_control = pwm_right_working;
    3c70:	90 93 ea 02 	sts	0x02EA, r25
    3c74:	80 93 e9 02 	sts	0x02E9, r24

	pwm_left = pwm_left_working;
    3c78:	30 93 f8 02 	sts	0x02F8, r19
    3c7c:	20 93 f7 02 	sts	0x02F7, r18
	pwm_right = pwm_right_working;
    3c80:	90 93 f6 02 	sts	0x02F6, r25
    3c84:	80 93 f5 02 	sts	0x02F5, r24

	if(pwm_right > 0) {
    3c88:	18 16       	cp	r1, r24
    3c8a:	19 06       	cpc	r1, r25
    3c8c:	5c f5       	brge	.+86     	; 0x3ce4 <handleMotorsWithNoController+0x18c>
		OCR3A = (unsigned int)pwm_right;
    3c8e:	90 93 99 00 	sts	0x0099, r25
    3c92:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    3c96:	80 91 f7 02 	lds	r24, 0x02F7
    3c9a:	90 91 f8 02 	lds	r25, 0x02F8
    3c9e:	18 16       	cp	r1, r24
    3ca0:	19 06       	cpc	r1, r25
    3ca2:	2c f4       	brge	.+10     	; 0x3cae <handleMotorsWithNoController+0x156>
		OCR4A = (unsigned int)pwm_left;
    3ca4:	90 93 a9 00 	sts	0x00A9, r25
    3ca8:	80 93 a8 00 	sts	0x00A8, r24
    3cac:	08 95       	ret
	} else if(pwm_left < 0) {
    3cae:	00 97       	sbiw	r24, 0x00	; 0
    3cb0:	09 f0       	breq	.+2      	; 0x3cb4 <handleMotorsWithNoController+0x15c>
    3cb2:	6a c0       	rjmp	.+212    	; 0x3d88 <handleMotorsWithNoController+0x230>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    3cb4:	10 92 a9 00 	sts	0x00A9, r1
    3cb8:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    3cbc:	10 92 ab 00 	sts	0x00AB, r1
    3cc0:	10 92 aa 00 	sts	0x00AA, r1
    3cc4:	08 95       	ret
	//pwm_right_working = pwm_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	//pwm_left_working = pwm_left_desired;
	pwm_right_working = pwm_intermediate_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	pwm_left_working = pwm_intermediate_left_desired;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    3cc6:	8b e0       	ldi	r24, 0x0B	; 11
    3cc8:	93 e0       	ldi	r25, 0x03	; 3
    3cca:	69 e0       	ldi	r22, 0x09	; 9
    3ccc:	73 e0       	ldi	r23, 0x03	; 3
    3cce:	0e 94 10 23 	call	0x4620	; 0x4620 <obstacleAvoidance>
    3cd2:	20 91 0b 03 	lds	r18, 0x030B
    3cd6:	30 91 0c 03 	lds	r19, 0x030C
    3cda:	80 91 09 03 	lds	r24, 0x0309
    3cde:	90 91 0a 03 	lds	r25, 0x030A
    3ce2:	c2 cf       	rjmp	.-124    	; 0x3c68 <handleMotorsWithNoController+0x110>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    3ce4:	00 97       	sbiw	r24, 0x00	; 0
    3ce6:	09 f0       	breq	.+2      	; 0x3cea <handleMotorsWithNoController+0x192>
    3ce8:	47 c0       	rjmp	.+142    	; 0x3d78 <handleMotorsWithNoController+0x220>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    3cea:	10 92 99 00 	sts	0x0099, r1
    3cee:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    3cf2:	10 92 9b 00 	sts	0x009B, r1
    3cf6:	10 92 9a 00 	sts	0x009A, r1
    3cfa:	cd cf       	rjmp	.-102    	; 0x3c96 <handleMotorsWithNoController+0x13e>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    3cfc:	35 95       	asr	r19
    3cfe:	27 95       	ror	r18
    3d00:	35 95       	asr	r19
    3d02:	27 95       	ror	r18
    3d04:	35 95       	asr	r19
    3d06:	27 95       	ror	r18
    3d08:	44 27       	eor	r20, r20
    3d0a:	37 fd       	sbrc	r19, 7
    3d0c:	40 95       	com	r20
    3d0e:	54 2f       	mov	r21, r20
    3d10:	80 91 d1 02 	lds	r24, 0x02D1
    3d14:	90 91 d2 02 	lds	r25, 0x02D2
    3d18:	a0 91 d3 02 	lds	r26, 0x02D3
    3d1c:	b0 91 d4 02 	lds	r27, 0x02D4
    3d20:	82 1b       	sub	r24, r18
    3d22:	93 0b       	sbc	r25, r19
    3d24:	a4 0b       	sbc	r26, r20
    3d26:	b5 0b       	sbc	r27, r21
    3d28:	80 93 d1 02 	sts	0x02D1, r24
    3d2c:	90 93 d2 02 	sts	0x02D2, r25
    3d30:	a0 93 d3 02 	sts	0x02D3, r26
    3d34:	b0 93 d4 02 	sts	0x02D4, r27
    3d38:	83 cf       	rjmp	.-250    	; 0x3c40 <handleMotorsWithNoController+0xe8>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    3d3a:	35 95       	asr	r19
    3d3c:	27 95       	ror	r18
    3d3e:	35 95       	asr	r19
    3d40:	27 95       	ror	r18
    3d42:	35 95       	asr	r19
    3d44:	27 95       	ror	r18
    3d46:	44 27       	eor	r20, r20
    3d48:	37 fd       	sbrc	r19, 7
    3d4a:	40 95       	com	r20
    3d4c:	54 2f       	mov	r21, r20
    3d4e:	80 91 d5 02 	lds	r24, 0x02D5
    3d52:	90 91 d6 02 	lds	r25, 0x02D6
    3d56:	a0 91 d7 02 	lds	r26, 0x02D7
    3d5a:	b0 91 d8 02 	lds	r27, 0x02D8
    3d5e:	82 1b       	sub	r24, r18
    3d60:	93 0b       	sbc	r25, r19
    3d62:	a4 0b       	sbc	r26, r20
    3d64:	b5 0b       	sbc	r27, r21
    3d66:	80 93 d5 02 	sts	0x02D5, r24
    3d6a:	90 93 d6 02 	sts	0x02D6, r25
    3d6e:	a0 93 d7 02 	sts	0x02D7, r26
    3d72:	b0 93 d8 02 	sts	0x02D8, r27
    3d76:	2a cf       	rjmp	.-428    	; 0x3bcc <handleMotorsWithNoController+0x74>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    3d78:	90 95       	com	r25
    3d7a:	81 95       	neg	r24
    3d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d7e:	90 93 9b 00 	sts	0x009B, r25
    3d82:	80 93 9a 00 	sts	0x009A, r24
    3d86:	87 cf       	rjmp	.-242    	; 0x3c96 <handleMotorsWithNoController+0x13e>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    3d88:	90 95       	com	r25
    3d8a:	81 95       	neg	r24
    3d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d8e:	90 93 ab 00 	sts	0x00AB, r25
    3d92:	80 93 aa 00 	sts	0x00AA, r24
    3d96:	08 95       	ret

00003d98 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    3d98:	6f 92       	push	r6
    3d9a:	7f 92       	push	r7
    3d9c:	8f 92       	push	r8
    3d9e:	9f 92       	push	r9
    3da0:	af 92       	push	r10
    3da2:	bf 92       	push	r11
    3da4:	cf 92       	push	r12
    3da6:	df 92       	push	r13
    3da8:	ef 92       	push	r14
    3daa:	ff 92       	push	r15
    3dac:	0f 93       	push	r16
    3dae:	1f 93       	push	r17

	//pwm_left_working = pwm_left_desired;
	//pwm_right_working = pwm_right_desired;
	pwm_right_working = pwm_intermediate_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
    3db0:	80 91 fd 02 	lds	r24, 0x02FD
    3db4:	90 91 fe 02 	lds	r25, 0x02FE
    3db8:	90 93 0a 03 	sts	0x030A, r25
    3dbc:	80 93 09 03 	sts	0x0309, r24
	pwm_left_working = pwm_intermediate_left_desired;
    3dc0:	40 91 ff 02 	lds	r20, 0x02FF
    3dc4:	50 91 00 03 	lds	r21, 0x0300
    3dc8:	50 93 0c 03 	sts	0x030C, r21
    3dcc:	40 93 0b 03 	sts	0x030B, r20
	if(obstacleAvoidanceEnabled) {
    3dd0:	20 91 62 04 	lds	r18, 0x0462
    3dd4:	22 23       	and	r18, r18
    3dd6:	09 f0       	breq	.+2      	; 0x3dda <handleMotorsWithSpeedController+0x42>
    3dd8:	b7 c1       	rjmp	.+878    	; 0x4148 <handleMotorsWithSpeedController+0x3b0>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    3dda:	50 93 ec 02 	sts	0x02EC, r21
    3dde:	40 93 eb 02 	sts	0x02EB, r20
	pwm_right_desired_to_control = pwm_right_working;
    3de2:	90 93 ea 02 	sts	0x02EA, r25
    3de6:	80 93 e9 02 	sts	0x02E9, r24

	if(compute_left_vel) {
    3dea:	80 91 07 02 	lds	r24, 0x0207
    3dee:	88 23       	and	r24, r24
    3df0:	09 f4       	brne	.+2      	; 0x3df4 <handleMotorsWithSpeedController+0x5c>
    3df2:	58 c0       	rjmp	.+176    	; 0x3ea4 <handleMotorsWithSpeedController+0x10c>

		last_left_vel = left_vel_sum>>2;
    3df4:	20 91 ed 02 	lds	r18, 0x02ED
    3df8:	30 91 ee 02 	lds	r19, 0x02EE
    3dfc:	36 95       	lsr	r19
    3dfe:	27 95       	ror	r18
    3e00:	36 95       	lsr	r19
    3e02:	27 95       	ror	r18
    3e04:	30 93 f2 02 	sts	0x02F2, r19
    3e08:	20 93 f1 02 	sts	0x02F1, r18
		compute_left_vel = 0;
    3e0c:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    3e10:	10 92 ee 02 	sts	0x02EE, r1
    3e14:	10 92 ed 02 	sts	0x02ED, r1

		leftMotStepsOld=leftMotSteps;
    3e18:	80 91 d5 02 	lds	r24, 0x02D5
    3e1c:	90 91 d6 02 	lds	r25, 0x02D6
    3e20:	a0 91 d7 02 	lds	r26, 0x02D7
    3e24:	b0 91 d8 02 	lds	r27, 0x02D8
    3e28:	80 93 dd 02 	sts	0x02DD, r24
    3e2c:	90 93 de 02 	sts	0x02DE, r25
    3e30:	a0 93 df 02 	sts	0x02DF, r26
    3e34:	b0 93 e0 02 	sts	0x02E0, r27
		if(pwm_left_desired_to_control >= 0) {
    3e38:	57 fd       	sbrc	r21, 7
    3e3a:	95 c1       	rjmp	.+810    	; 0x4166 <handleMotorsWithSpeedController+0x3ce>
			leftMotSteps += (last_left_vel>>3);
    3e3c:	35 95       	asr	r19
    3e3e:	27 95       	ror	r18
    3e40:	35 95       	asr	r19
    3e42:	27 95       	ror	r18
    3e44:	35 95       	asr	r19
    3e46:	27 95       	ror	r18
    3e48:	44 27       	eor	r20, r20
    3e4a:	37 fd       	sbrc	r19, 7
    3e4c:	40 95       	com	r20
    3e4e:	54 2f       	mov	r21, r20
    3e50:	28 0f       	add	r18, r24
    3e52:	39 1f       	adc	r19, r25
    3e54:	4a 1f       	adc	r20, r26
    3e56:	5b 1f       	adc	r21, r27
    3e58:	20 93 d5 02 	sts	0x02D5, r18
    3e5c:	30 93 d6 02 	sts	0x02D6, r19
    3e60:	40 93 d7 02 	sts	0x02D7, r20
    3e64:	50 93 d8 02 	sts	0x02D8, r21
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}

		if(robotPosition == HORIZONTAL_POS) {
    3e68:	80 91 17 02 	lds	r24, 0x0217
    3e6c:	81 30       	cpi	r24, 0x01	; 1
    3e6e:	09 f4       	brne	.+2      	; 0x3e72 <handleMotorsWithSpeedController+0xda>
    3e70:	95 c1       	rjmp	.+810    	; 0x419c <handleMotorsWithSpeedController+0x404>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    3e72:	8b e0       	ldi	r24, 0x0B	; 11
    3e74:	93 e0       	ldi	r25, 0x03	; 3
    3e76:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    3e7a:	80 91 0b 03 	lds	r24, 0x030B
    3e7e:	90 91 0c 03 	lds	r25, 0x030C
    3e82:	90 93 f8 02 	sts	0x02F8, r25
    3e86:	80 93 f7 02 	sts	0x02F7, r24

		if(pwm_left > 0) {
    3e8a:	18 16       	cp	r1, r24
    3e8c:	19 06       	cpc	r1, r25
    3e8e:	0c f0       	brlt	.+2      	; 0x3e92 <handleMotorsWithSpeedController+0xfa>
    3e90:	aa c1       	rjmp	.+852    	; 0x41e6 <handleMotorsWithSpeedController+0x44e>
			OCR4A = (unsigned int)pwm_left;
    3e92:	90 93 a9 00 	sts	0x00A9, r25
    3e96:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    3e9a:	80 91 71 04 	lds	r24, 0x0471
    3e9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ea0:	80 93 71 04 	sts	0x0471, r24

	}

	if(compute_right_vel) {
    3ea4:	80 91 08 02 	lds	r24, 0x0208
    3ea8:	88 23       	and	r24, r24
    3eaa:	09 f0       	breq	.+2      	; 0x3eae <handleMotorsWithSpeedController+0x116>
    3eac:	f0 c0       	rjmp	.+480    	; 0x408e <handleMotorsWithSpeedController+0x2f6>
    3eae:	80 91 71 04 	lds	r24, 0x0471

		computeOdometry++;

	}

	if(computeOdometry>=2) {
    3eb2:	82 30       	cpi	r24, 0x02	; 2
    3eb4:	08 f4       	brcc	.+2      	; 0x3eb8 <handleMotorsWithSpeedController+0x120>
    3eb6:	de c0       	rjmp	.+444    	; 0x4074 <handleMotorsWithSpeedController+0x2dc>
		
		GREEN_LED0_ON;
    3eb8:	80 91 0b 01 	lds	r24, 0x010B
    3ebc:	8e 7f       	andi	r24, 0xFE	; 254
    3ebe:	80 93 0b 01 	sts	0x010B, r24

		computeOdometry = 0;
    3ec2:	10 92 71 04 	sts	0x0471, r1

		theta = (((float)rightMotSteps)*RIGHT_ENC2MM - ((float)leftMotSteps)*LEFT_ENC2MM)/WHEEL_DIST;
    3ec6:	e0 90 d1 02 	lds	r14, 0x02D1
    3eca:	f0 90 d2 02 	lds	r15, 0x02D2
    3ece:	00 91 d3 02 	lds	r16, 0x02D3
    3ed2:	10 91 d4 02 	lds	r17, 0x02D4
    3ed6:	60 90 d5 02 	lds	r6, 0x02D5
    3eda:	70 90 d6 02 	lds	r7, 0x02D6
    3ede:	80 90 d7 02 	lds	r8, 0x02D7
    3ee2:	90 90 d8 02 	lds	r9, 0x02D8
    3ee6:	c8 01       	movw	r24, r16
    3ee8:	b7 01       	movw	r22, r14
    3eea:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <__floatsisf>
    3eee:	26 e9       	ldi	r18, 0x96	; 150
    3ef0:	31 e2       	ldi	r19, 0x21	; 33
    3ef2:	4e e8       	ldi	r20, 0x8E	; 142
    3ef4:	5d e3       	ldi	r21, 0x3D	; 61
    3ef6:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__mulsf3>
    3efa:	5b 01       	movw	r10, r22
    3efc:	6c 01       	movw	r12, r24
    3efe:	c4 01       	movw	r24, r8
    3f00:	b3 01       	movw	r22, r6
    3f02:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <__floatsisf>
    3f06:	28 e9       	ldi	r18, 0x98	; 152
    3f08:	3e e6       	ldi	r19, 0x6E	; 110
    3f0a:	42 e9       	ldi	r20, 0x92	; 146
    3f0c:	5d e3       	ldi	r21, 0x3D	; 61
    3f0e:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__mulsf3>
    3f12:	9b 01       	movw	r18, r22
    3f14:	ac 01       	movw	r20, r24
    3f16:	c6 01       	movw	r24, r12
    3f18:	b5 01       	movw	r22, r10
    3f1a:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__subsf3>
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	4e e1       	ldi	r20, 0x1E	; 30
    3f24:	52 e4       	ldi	r21, 0x42	; 66
    3f26:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <__divsf3>
    3f2a:	d6 2e       	mov	r13, r22
    3f2c:	a7 2e       	mov	r10, r23
    3f2e:	c8 2e       	mov	r12, r24
    3f30:	b9 2e       	mov	r11, r25
    3f32:	86 2f       	mov	r24, r22
    3f34:	9a 2d       	mov	r25, r10
    3f36:	ac 2d       	mov	r26, r12
    3f38:	bb 2d       	mov	r27, r11
    3f3a:	80 93 65 04 	sts	0x0465, r24
    3f3e:	90 93 66 04 	sts	0x0466, r25
    3f42:	a0 93 67 04 	sts	0x0467, r26
    3f46:	b0 93 68 04 	sts	0x0468, r27

		deltaDist = (((float)(rightMotSteps-rightMotStepsOld))*RIGHT_ENC2MM+((float)(leftMotSteps-leftMotStepsOld))*LEFT_ENC2MM)/2.0;
    3f4a:	80 91 d9 02 	lds	r24, 0x02D9
    3f4e:	90 91 da 02 	lds	r25, 0x02DA
    3f52:	a0 91 db 02 	lds	r26, 0x02DB
    3f56:	b0 91 dc 02 	lds	r27, 0x02DC
    3f5a:	a8 01       	movw	r20, r16
    3f5c:	97 01       	movw	r18, r14
    3f5e:	28 1b       	sub	r18, r24
    3f60:	39 0b       	sbc	r19, r25
    3f62:	4a 0b       	sbc	r20, r26
    3f64:	5b 0b       	sbc	r21, r27
    3f66:	ca 01       	movw	r24, r20
    3f68:	b9 01       	movw	r22, r18
    3f6a:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <__floatsisf>
    3f6e:	26 e9       	ldi	r18, 0x96	; 150
    3f70:	31 e2       	ldi	r19, 0x21	; 33
    3f72:	4e e8       	ldi	r20, 0x8E	; 142
    3f74:	5d e3       	ldi	r21, 0x3D	; 61
    3f76:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__mulsf3>
    3f7a:	7b 01       	movw	r14, r22
    3f7c:	8c 01       	movw	r16, r24
    3f7e:	80 91 dd 02 	lds	r24, 0x02DD
    3f82:	90 91 de 02 	lds	r25, 0x02DE
    3f86:	a0 91 df 02 	lds	r26, 0x02DF
    3f8a:	b0 91 e0 02 	lds	r27, 0x02E0
    3f8e:	a4 01       	movw	r20, r8
    3f90:	93 01       	movw	r18, r6
    3f92:	28 1b       	sub	r18, r24
    3f94:	39 0b       	sbc	r19, r25
    3f96:	4a 0b       	sbc	r20, r26
    3f98:	5b 0b       	sbc	r21, r27
    3f9a:	ca 01       	movw	r24, r20
    3f9c:	b9 01       	movw	r22, r18
    3f9e:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <__floatsisf>
    3fa2:	28 e9       	ldi	r18, 0x98	; 152
    3fa4:	3e e6       	ldi	r19, 0x6E	; 110
    3fa6:	42 e9       	ldi	r20, 0x92	; 146
    3fa8:	5d e3       	ldi	r21, 0x3D	; 61
    3faa:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__mulsf3>
    3fae:	9b 01       	movw	r18, r22
    3fb0:	ac 01       	movw	r20, r24
    3fb2:	c8 01       	movw	r24, r16
    3fb4:	b7 01       	movw	r22, r14
    3fb6:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__addsf3>
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	40 e0       	ldi	r20, 0x00	; 0
    3fc0:	5f e3       	ldi	r21, 0x3F	; 63
    3fc2:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__mulsf3>
    3fc6:	8b 01       	movw	r16, r22
    3fc8:	7c 01       	movw	r14, r24
    3fca:	86 2f       	mov	r24, r22
    3fcc:	91 2f       	mov	r25, r17
    3fce:	ae 2d       	mov	r26, r14
    3fd0:	bf 2d       	mov	r27, r15
    3fd2:	80 93 72 04 	sts	0x0472, r24
    3fd6:	90 93 73 04 	sts	0x0473, r25
    3fda:	a0 93 74 04 	sts	0x0474, r26
    3fde:	b0 93 75 04 	sts	0x0475, r27
		//sinTemp = sin(theta);
		
		//xPos = xPos + sqrt(1.0-(sinTemp*sinTemp))*deltaDist;	// takes about 0.740 ms
		//yPos = yPos + sinTemp*deltaDist;

		xPos = xPos + cos(theta)*deltaDist;				// takes about 1 ms
    3fe2:	6d 2d       	mov	r22, r13
    3fe4:	7a 2d       	mov	r23, r10
    3fe6:	8c 2d       	mov	r24, r12
    3fe8:	9b 2d       	mov	r25, r11
    3fea:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <cos>
    3fee:	9b 01       	movw	r18, r22
    3ff0:	ac 01       	movw	r20, r24
    3ff2:	60 2f       	mov	r22, r16
    3ff4:	71 2f       	mov	r23, r17
    3ff6:	8e 2d       	mov	r24, r14
    3ff8:	9f 2d       	mov	r25, r15
    3ffa:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__mulsf3>
    3ffe:	9b 01       	movw	r18, r22
    4000:	ac 01       	movw	r20, r24
    4002:	60 91 69 04 	lds	r22, 0x0469
    4006:	70 91 6a 04 	lds	r23, 0x046A
    400a:	80 91 6b 04 	lds	r24, 0x046B
    400e:	90 91 6c 04 	lds	r25, 0x046C
    4012:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__addsf3>
    4016:	60 93 69 04 	sts	0x0469, r22
    401a:	70 93 6a 04 	sts	0x046A, r23
    401e:	80 93 6b 04 	sts	0x046B, r24
    4022:	90 93 6c 04 	sts	0x046C, r25
		yPos = yPos + sin(theta)*deltaDist;
    4026:	6d 2d       	mov	r22, r13
    4028:	7a 2d       	mov	r23, r10
    402a:	8c 2d       	mov	r24, r12
    402c:	9b 2d       	mov	r25, r11
    402e:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <sin>
    4032:	9b 01       	movw	r18, r22
    4034:	ac 01       	movw	r20, r24
    4036:	60 2f       	mov	r22, r16
    4038:	71 2f       	mov	r23, r17
    403a:	8e 2d       	mov	r24, r14
    403c:	9f 2d       	mov	r25, r15
    403e:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__mulsf3>
    4042:	9b 01       	movw	r18, r22
    4044:	ac 01       	movw	r20, r24
    4046:	60 91 6d 04 	lds	r22, 0x046D
    404a:	70 91 6e 04 	lds	r23, 0x046E
    404e:	80 91 6f 04 	lds	r24, 0x046F
    4052:	90 91 70 04 	lds	r25, 0x0470
    4056:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__addsf3>
    405a:	60 93 6d 04 	sts	0x046D, r22
    405e:	70 93 6e 04 	sts	0x046E, r23
    4062:	80 93 6f 04 	sts	0x046F, r24
    4066:	90 93 70 04 	sts	0x0470, r25


		GREEN_LED0_OFF;
    406a:	80 91 0b 01 	lds	r24, 0x010B
    406e:	81 60       	ori	r24, 0x01	; 1
    4070:	80 93 0b 01 	sts	0x010B, r24

	}

}
    4074:	1f 91       	pop	r17
    4076:	0f 91       	pop	r16
    4078:	ff 90       	pop	r15
    407a:	ef 90       	pop	r14
    407c:	df 90       	pop	r13
    407e:	cf 90       	pop	r12
    4080:	bf 90       	pop	r11
    4082:	af 90       	pop	r10
    4084:	9f 90       	pop	r9
    4086:	8f 90       	pop	r8
    4088:	7f 90       	pop	r7
    408a:	6f 90       	pop	r6
    408c:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    408e:	20 91 ef 02 	lds	r18, 0x02EF
    4092:	30 91 f0 02 	lds	r19, 0x02F0
    4096:	36 95       	lsr	r19
    4098:	27 95       	ror	r18
    409a:	36 95       	lsr	r19
    409c:	27 95       	ror	r18
    409e:	30 93 f4 02 	sts	0x02F4, r19
    40a2:	20 93 f3 02 	sts	0x02F3, r18
		compute_right_vel = 0;
    40a6:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    40aa:	10 92 f0 02 	sts	0x02F0, r1
    40ae:	10 92 ef 02 	sts	0x02EF, r1

		rightMotStepsOld = rightMotSteps;
    40b2:	80 91 d1 02 	lds	r24, 0x02D1
    40b6:	90 91 d2 02 	lds	r25, 0x02D2
    40ba:	a0 91 d3 02 	lds	r26, 0x02D3
    40be:	b0 91 d4 02 	lds	r27, 0x02D4
    40c2:	80 93 d9 02 	sts	0x02D9, r24
    40c6:	90 93 da 02 	sts	0x02DA, r25
    40ca:	a0 93 db 02 	sts	0x02DB, r26
    40ce:	b0 93 dc 02 	sts	0x02DC, r27
		if(pwm_right_desired_to_control >= 0) {
    40d2:	40 91 e9 02 	lds	r20, 0x02E9
    40d6:	50 91 ea 02 	lds	r21, 0x02EA
    40da:	57 fd       	sbrc	r21, 7
    40dc:	64 c0       	rjmp	.+200    	; 0x41a6 <handleMotorsWithSpeedController+0x40e>
			rightMotSteps += (last_right_vel>>3);
    40de:	35 95       	asr	r19
    40e0:	27 95       	ror	r18
    40e2:	35 95       	asr	r19
    40e4:	27 95       	ror	r18
    40e6:	35 95       	asr	r19
    40e8:	27 95       	ror	r18
    40ea:	44 27       	eor	r20, r20
    40ec:	37 fd       	sbrc	r19, 7
    40ee:	40 95       	com	r20
    40f0:	54 2f       	mov	r21, r20
    40f2:	28 0f       	add	r18, r24
    40f4:	39 1f       	adc	r19, r25
    40f6:	4a 1f       	adc	r20, r26
    40f8:	5b 1f       	adc	r21, r27
    40fa:	20 93 d1 02 	sts	0x02D1, r18
    40fe:	30 93 d2 02 	sts	0x02D2, r19
    4102:	40 93 d3 02 	sts	0x02D3, r20
    4106:	50 93 d4 02 	sts	0x02D4, r21
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}

		if(robotPosition == HORIZONTAL_POS) {
    410a:	80 91 17 02 	lds	r24, 0x0217
    410e:	81 30       	cpi	r24, 0x01	; 1
    4110:	09 f4       	brne	.+2      	; 0x4114 <handleMotorsWithSpeedController+0x37c>
    4112:	64 c0       	rjmp	.+200    	; 0x41dc <handleMotorsWithSpeedController+0x444>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    4114:	89 e0       	ldi	r24, 0x09	; 9
    4116:	93 e0       	ldi	r25, 0x03	; 3
    4118:	0e 94 28 14 	call	0x2850	; 0x2850 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    411c:	80 91 09 03 	lds	r24, 0x0309
    4120:	90 91 0a 03 	lds	r25, 0x030A
    4124:	90 93 f6 02 	sts	0x02F6, r25
    4128:	80 93 f5 02 	sts	0x02F5, r24

		if(pwm_right > 0) {
    412c:	18 16       	cp	r1, r24
    412e:	19 06       	cpc	r1, r25
    4130:	0c f0       	brlt	.+2      	; 0x4134 <handleMotorsWithSpeedController+0x39c>
    4132:	64 c0       	rjmp	.+200    	; 0x41fc <handleMotorsWithSpeedController+0x464>
			OCR3A = (unsigned int)pwm_right;
    4134:	90 93 99 00 	sts	0x0099, r25
    4138:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    413c:	80 91 71 04 	lds	r24, 0x0471
    4140:	8f 5f       	subi	r24, 0xFF	; 255
    4142:	80 93 71 04 	sts	0x0471, r24
    4146:	b5 ce       	rjmp	.-662    	; 0x3eb2 <handleMotorsWithSpeedController+0x11a>
	//pwm_left_working = pwm_left_desired;
	//pwm_right_working = pwm_right_desired;
	pwm_right_working = pwm_intermediate_right_desired;	// pwm in the range 0..MAX_PWM_MOTORS
	pwm_left_working = pwm_intermediate_left_desired;
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    4148:	8b e0       	ldi	r24, 0x0B	; 11
    414a:	93 e0       	ldi	r25, 0x03	; 3
    414c:	69 e0       	ldi	r22, 0x09	; 9
    414e:	73 e0       	ldi	r23, 0x03	; 3
    4150:	0e 94 10 23 	call	0x4620	; 0x4620 <obstacleAvoidance>
    4154:	40 91 0b 03 	lds	r20, 0x030B
    4158:	50 91 0c 03 	lds	r21, 0x030C
    415c:	80 91 09 03 	lds	r24, 0x0309
    4160:	90 91 0a 03 	lds	r25, 0x030A
    4164:	3a ce       	rjmp	.-908    	; 0x3dda <handleMotorsWithSpeedController+0x42>

		leftMotStepsOld=leftMotSteps;
		if(pwm_left_desired_to_control >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    4166:	35 95       	asr	r19
    4168:	27 95       	ror	r18
    416a:	35 95       	asr	r19
    416c:	27 95       	ror	r18
    416e:	35 95       	asr	r19
    4170:	27 95       	ror	r18
    4172:	44 27       	eor	r20, r20
    4174:	37 fd       	sbrc	r19, 7
    4176:	40 95       	com	r20
    4178:	54 2f       	mov	r21, r20
    417a:	82 1b       	sub	r24, r18
    417c:	93 0b       	sbc	r25, r19
    417e:	a4 0b       	sbc	r26, r20
    4180:	b5 0b       	sbc	r27, r21
    4182:	80 93 d5 02 	sts	0x02D5, r24
    4186:	90 93 d6 02 	sts	0x02D6, r25
    418a:	a0 93 d7 02 	sts	0x02D7, r26
    418e:	b0 93 d8 02 	sts	0x02D8, r27
		}

		if(robotPosition == HORIZONTAL_POS) {
    4192:	80 91 17 02 	lds	r24, 0x0217
    4196:	81 30       	cpi	r24, 0x01	; 1
    4198:	09 f0       	breq	.+2      	; 0x419c <handleMotorsWithSpeedController+0x404>
    419a:	6b ce       	rjmp	.-810    	; 0x3e72 <handleMotorsWithSpeedController+0xda>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    419c:	8b e0       	ldi	r24, 0x0B	; 11
    419e:	93 e0       	ldi	r25, 0x03	; 3
    41a0:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <start_horizontal_speed_control_left>
    41a4:	6a ce       	rjmp	.-812    	; 0x3e7a <handleMotorsWithSpeedController+0xe2>

		rightMotStepsOld = rightMotSteps;
		if(pwm_right_desired_to_control >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    41a6:	35 95       	asr	r19
    41a8:	27 95       	ror	r18
    41aa:	35 95       	asr	r19
    41ac:	27 95       	ror	r18
    41ae:	35 95       	asr	r19
    41b0:	27 95       	ror	r18
    41b2:	44 27       	eor	r20, r20
    41b4:	37 fd       	sbrc	r19, 7
    41b6:	40 95       	com	r20
    41b8:	54 2f       	mov	r21, r20
    41ba:	82 1b       	sub	r24, r18
    41bc:	93 0b       	sbc	r25, r19
    41be:	a4 0b       	sbc	r26, r20
    41c0:	b5 0b       	sbc	r27, r21
    41c2:	80 93 d1 02 	sts	0x02D1, r24
    41c6:	90 93 d2 02 	sts	0x02D2, r25
    41ca:	a0 93 d3 02 	sts	0x02D3, r26
    41ce:	b0 93 d4 02 	sts	0x02D4, r27
		}

		if(robotPosition == HORIZONTAL_POS) {
    41d2:	80 91 17 02 	lds	r24, 0x0217
    41d6:	81 30       	cpi	r24, 0x01	; 1
    41d8:	09 f0       	breq	.+2      	; 0x41dc <handleMotorsWithSpeedController+0x444>
    41da:	9c cf       	rjmp	.-200    	; 0x4114 <handleMotorsWithSpeedController+0x37c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    41dc:	89 e0       	ldi	r24, 0x09	; 9
    41de:	93 e0       	ldi	r25, 0x03	; 3
    41e0:	0e 94 6e 15 	call	0x2adc	; 0x2adc <start_horizontal_speed_control_right>
    41e4:	9b cf       	rjmp	.-202    	; 0x411c <handleMotorsWithSpeedController+0x384>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    41e6:	00 97       	sbiw	r24, 0x00	; 0
    41e8:	a1 f4       	brne	.+40     	; 0x4212 <handleMotorsWithSpeedController+0x47a>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    41ea:	10 92 a9 00 	sts	0x00A9, r1
    41ee:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    41f2:	10 92 ab 00 	sts	0x00AB, r1
    41f6:	10 92 aa 00 	sts	0x00AA, r1
    41fa:	4f ce       	rjmp	.-866    	; 0x3e9a <handleMotorsWithSpeedController+0x102>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    41fc:	00 97       	sbiw	r24, 0x00	; 0
    41fe:	89 f4       	brne	.+34     	; 0x4222 <handleMotorsWithSpeedController+0x48a>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    4200:	10 92 99 00 	sts	0x0099, r1
    4204:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    4208:	10 92 9b 00 	sts	0x009B, r1
    420c:	10 92 9a 00 	sts	0x009A, r1
    4210:	95 cf       	rjmp	.-214    	; 0x413c <handleMotorsWithSpeedController+0x3a4>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    4212:	90 95       	com	r25
    4214:	81 95       	neg	r24
    4216:	9f 4f       	sbci	r25, 0xFF	; 255
    4218:	90 93 ab 00 	sts	0x00AB, r25
    421c:	80 93 aa 00 	sts	0x00AA, r24
    4220:	3c ce       	rjmp	.-904    	; 0x3e9a <handleMotorsWithSpeedController+0x102>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    4222:	90 95       	com	r25
    4224:	81 95       	neg	r24
    4226:	9f 4f       	sbci	r25, 0xFF	; 255
    4228:	90 93 9b 00 	sts	0x009B, r25
    422c:	80 93 9a 00 	sts	0x009A, r24
    4230:	85 cf       	rjmp	.-246    	; 0x413c <handleMotorsWithSpeedController+0x3a4>

00004232 <setLeftSpeed>:

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4232:	28 2f       	mov	r18, r24
    4234:	33 27       	eor	r19, r19
    4236:	27 fd       	sbrc	r18, 7
    4238:	30 95       	com	r19
    423a:	37 fd       	sbrc	r19, 7
    423c:	30 c0       	rjmp	.+96     	; 0x429e <setLeftSpeed+0x6c>
    423e:	30 93 0e 03 	sts	0x030E, r19
    4242:	20 93 0d 03 	sts	0x030D, r18

    if(vel >= 0) {
    4246:	87 fd       	sbrc	r24, 7
    4248:	1e c0       	rjmp	.+60     	; 0x4286 <setLeftSpeed+0x54>
        pwm_left_desired = speedl<<2;
    424a:	22 0f       	add	r18, r18
    424c:	33 1f       	adc	r19, r19
    424e:	22 0f       	add	r18, r18
    4250:	33 1f       	adc	r19, r19
    4252:	30 93 fc 02 	sts	0x02FC, r19
    4256:	20 93 fb 02 	sts	0x02FB, r18
    } else {
        pwm_left_desired = -(speedl<<2);
    }

	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    425a:	82 e0       	ldi	r24, 0x02	; 2
    425c:	21 30       	cpi	r18, 0x01	; 1
    425e:	38 07       	cpc	r19, r24
    4260:	3c f0       	brlt	.+14     	; 0x4270 <setLeftSpeed+0x3e>
    4262:	80 e0       	ldi	r24, 0x00	; 0
    4264:	92 e0       	ldi	r25, 0x02	; 2
    4266:	90 93 fc 02 	sts	0x02FC, r25
    426a:	80 93 fb 02 	sts	0x02FB, r24
    426e:	08 95       	ret
	if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    4270:	8e ef       	ldi	r24, 0xFE	; 254
    4272:	20 30       	cpi	r18, 0x00	; 0
    4274:	38 07       	cpc	r19, r24
    4276:	34 f4       	brge	.+12     	; 0x4284 <setLeftSpeed+0x52>
    4278:	80 e0       	ldi	r24, 0x00	; 0
    427a:	9e ef       	ldi	r25, 0xFE	; 254
    427c:	90 93 fc 02 	sts	0x02FC, r25
    4280:	80 93 fb 02 	sts	0x02FB, r24
    4284:	08 95       	ret
	speedl = abs(vel);

    if(vel >= 0) {
        pwm_left_desired = speedl<<2;
    } else {
        pwm_left_desired = -(speedl<<2);
    4286:	22 0f       	add	r18, r18
    4288:	33 1f       	adc	r19, r19
    428a:	22 0f       	add	r18, r18
    428c:	33 1f       	adc	r19, r19
    428e:	30 95       	com	r19
    4290:	21 95       	neg	r18
    4292:	3f 4f       	sbci	r19, 0xFF	; 255
    4294:	30 93 fc 02 	sts	0x02FC, r19
    4298:	20 93 fb 02 	sts	0x02FB, r18
    429c:	de cf       	rjmp	.-68     	; 0x425a <setLeftSpeed+0x28>

}

void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    429e:	30 95       	com	r19
    42a0:	21 95       	neg	r18
    42a2:	3f 4f       	sbci	r19, 0xFF	; 255
    42a4:	cc cf       	rjmp	.-104    	; 0x423e <setLeftSpeed+0xc>

000042a6 <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    42a6:	28 2f       	mov	r18, r24
    42a8:	33 27       	eor	r19, r19
    42aa:	27 fd       	sbrc	r18, 7
    42ac:	30 95       	com	r19
    42ae:	37 fd       	sbrc	r19, 7
    42b0:	30 c0       	rjmp	.+96     	; 0x4312 <setRightSpeed+0x6c>
    42b2:	30 93 10 03 	sts	0x0310, r19
    42b6:	20 93 0f 03 	sts	0x030F, r18

    if(vel >= 0) {
    42ba:	87 fd       	sbrc	r24, 7
    42bc:	1e c0       	rjmp	.+60     	; 0x42fa <setRightSpeed+0x54>
        pwm_right_desired = speedr<<2;
    42be:	22 0f       	add	r18, r18
    42c0:	33 1f       	adc	r19, r19
    42c2:	22 0f       	add	r18, r18
    42c4:	33 1f       	adc	r19, r19
    42c6:	30 93 fa 02 	sts	0x02FA, r19
    42ca:	20 93 f9 02 	sts	0x02F9, r18
    } else {
        pwm_right_desired = -(speedr<<2);
    }

	if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    42ce:	82 e0       	ldi	r24, 0x02	; 2
    42d0:	21 30       	cpi	r18, 0x01	; 1
    42d2:	38 07       	cpc	r19, r24
    42d4:	3c f0       	brlt	.+14     	; 0x42e4 <setRightSpeed+0x3e>
    42d6:	80 e0       	ldi	r24, 0x00	; 0
    42d8:	92 e0       	ldi	r25, 0x02	; 2
    42da:	90 93 fa 02 	sts	0x02FA, r25
    42de:	80 93 f9 02 	sts	0x02F9, r24
    42e2:	08 95       	ret
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    42e4:	8e ef       	ldi	r24, 0xFE	; 254
    42e6:	20 30       	cpi	r18, 0x00	; 0
    42e8:	38 07       	cpc	r19, r24
    42ea:	34 f4       	brge	.+12     	; 0x42f8 <setRightSpeed+0x52>
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	9e ef       	ldi	r25, 0xFE	; 254
    42f0:	90 93 fa 02 	sts	0x02FA, r25
    42f4:	80 93 f9 02 	sts	0x02F9, r24
    42f8:	08 95       	ret
	speedr = abs(vel);

    if(vel >= 0) {
        pwm_right_desired = speedr<<2;
    } else {
        pwm_right_desired = -(speedr<<2);
    42fa:	22 0f       	add	r18, r18
    42fc:	33 1f       	adc	r19, r19
    42fe:	22 0f       	add	r18, r18
    4300:	33 1f       	adc	r19, r19
    4302:	30 95       	com	r19
    4304:	21 95       	neg	r18
    4306:	3f 4f       	sbci	r19, 0xFF	; 255
    4308:	30 93 fa 02 	sts	0x02FA, r19
    430c:	20 93 f9 02 	sts	0x02F9, r18
    4310:	de cf       	rjmp	.-68     	; 0x42ce <setRightSpeed+0x28>

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4312:	30 95       	com	r19
    4314:	21 95       	neg	r18
    4316:	3f 4f       	sbci	r19, 0xFF	; 255
    4318:	cc cf       	rjmp	.-104    	; 0x42b2 <setRightSpeed+0xc>

0000431a <__vector_45>:
	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);

}

// Motor left
ISR(TIMER4_OVF_vect) {
    431a:	1f 92       	push	r1
    431c:	0f 92       	push	r0
    431e:	0f b6       	in	r0, 0x3f	; 63
    4320:	0f 92       	push	r0
    4322:	11 24       	eor	r1, r1
    4324:	8f 93       	push	r24
    4326:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    4328:	80 91 64 04 	lds	r24, 0x0464
    432c:	88 23       	and	r24, r24
    432e:	61 f0       	breq	.+24     	; 0x4348 <__vector_45+0x2e>
		pwm_left = 0;
    4330:	10 92 f8 02 	sts	0x02F8, r1
    4334:	10 92 f7 02 	sts	0x02F7, r1
		OCR4A = 0;
    4338:	10 92 a9 00 	sts	0x00A9, r1
    433c:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    4340:	10 92 ab 00 	sts	0x00AB, r1
    4344:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    4348:	10 92 e2 02 	sts	0x02E2, r1
    434c:	10 92 e1 02 	sts	0x02E1, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    4350:	80 91 f7 02 	lds	r24, 0x02F7
    4354:	90 91 f8 02 	lds	r25, 0x02F8
    4358:	00 97       	sbiw	r24, 0x00	; 0
    435a:	41 f5       	brne	.+80     	; 0x43ac <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    435c:	80 91 eb 02 	lds	r24, 0x02EB
    4360:	90 91 ec 02 	lds	r25, 0x02EC
    4364:	97 fd       	sbrc	r25, 7
    4366:	69 c0       	rjmp	.+210    	; 0x443a <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	80 93 28 02 	sts	0x0228, r24
			currentMotLeftChannel = 14;
    436e:	8e e0       	ldi	r24, 0x0E	; 14
    4370:	80 93 25 02 	sts	0x0225, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    437a:	80 91 a0 00 	lds	r24, 0x00A0
    437e:	8f 75       	andi	r24, 0x5F	; 95
    4380:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4384:	80 91 02 01 	lds	r24, 0x0102
    4388:	87 7e       	andi	r24, 0xE7	; 231
    438a:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    438e:	80 91 72 00 	lds	r24, 0x0072
    4392:	89 7f       	andi	r24, 0xF9	; 249
    4394:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    4398:	89 b3       	in	r24, 0x19	; 25
    439a:	86 60       	ori	r24, 0x06	; 6
    439c:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    439e:	9f 91       	pop	r25
    43a0:	8f 91       	pop	r24
    43a2:	0f 90       	pop	r0
    43a4:	0f be       	out	0x3f, r0	; 63
    43a6:	0f 90       	pop	r0
    43a8:	1f 90       	pop	r1
    43aa:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    43ac:	18 16       	cp	r1, r24
    43ae:	19 06       	cpc	r1, r25
    43b0:	2c f5       	brge	.+74     	; 0x43fc <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    43b2:	10 92 28 02 	sts	0x0228, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    43b6:	8f e0       	ldi	r24, 0x0F	; 15
    43b8:	80 93 25 02 	sts	0x0225, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    43bc:	80 91 a0 00 	lds	r24, 0x00A0
    43c0:	8f 7d       	andi	r24, 0xDF	; 223
    43c2:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    43c6:	80 91 72 00 	lds	r24, 0x0072
    43ca:	8b 7f       	andi	r24, 0xFB	; 251
    43cc:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    43d0:	80 91 02 01 	lds	r24, 0x0102
    43d4:	8f 7e       	andi	r24, 0xEF	; 239
    43d6:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    43da:	80 91 a0 00 	lds	r24, 0x00A0
    43de:	80 68       	ori	r24, 0x80	; 128
    43e0:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    43e4:	80 91 72 00 	lds	r24, 0x0072
    43e8:	82 60       	ori	r24, 0x02	; 2
    43ea:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    43ee:	9f 91       	pop	r25
    43f0:	8f 91       	pop	r24
    43f2:	0f 90       	pop	r0
    43f4:	0f be       	out	0x3f, r0	; 63
    43f6:	0f 90       	pop	r0
    43f8:	1f 90       	pop	r1
    43fa:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    43fc:	10 92 28 02 	sts	0x0228, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    4400:	8e e0       	ldi	r24, 0x0E	; 14
    4402:	80 93 25 02 	sts	0x0225, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    4406:	80 91 a0 00 	lds	r24, 0x00A0
    440a:	8f 77       	andi	r24, 0x7F	; 127
    440c:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    4410:	80 91 72 00 	lds	r24, 0x0072
    4414:	8d 7f       	andi	r24, 0xFD	; 253
    4416:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    441a:	80 91 02 01 	lds	r24, 0x0102
    441e:	87 7f       	andi	r24, 0xF7	; 247
    4420:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    4424:	80 91 a0 00 	lds	r24, 0x00A0
    4428:	80 62       	ori	r24, 0x20	; 32
    442a:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    442e:	80 91 72 00 	lds	r24, 0x0072
    4432:	84 60       	ori	r24, 0x04	; 4
    4434:	80 93 72 00 	sts	0x0072, r24
    4438:	b2 cf       	rjmp	.-156    	; 0x439e <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    443a:	81 e0       	ldi	r24, 0x01	; 1
    443c:	80 93 28 02 	sts	0x0228, r24
			currentMotLeftChannel = 15;
    4440:	8f e0       	ldi	r24, 0x0F	; 15
    4442:	80 93 25 02 	sts	0x0225, r24
    4446:	96 cf       	rjmp	.-212    	; 0x4374 <__vector_45+0x5a>

00004448 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    4448:	1f 92       	push	r1
    444a:	0f 92       	push	r0
    444c:	0f b6       	in	r0, 0x3f	; 63
    444e:	0f 92       	push	r0
    4450:	11 24       	eor	r1, r1
    4452:	8f 93       	push	r24
    4454:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    4456:	81 e0       	ldi	r24, 0x01	; 1
    4458:	80 93 28 02 	sts	0x0228, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    445c:	9e e0       	ldi	r25, 0x0E	; 14
    445e:	90 93 25 02 	sts	0x0225, r25

	firstSampleLeft = 1;
    4462:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    4466:	9f 91       	pop	r25
    4468:	8f 91       	pop	r24
    446a:	0f 90       	pop	r0
    446c:	0f be       	out	0x3f, r0	; 63
    446e:	0f 90       	pop	r0
    4470:	1f 90       	pop	r1
    4472:	18 95       	reti

00004474 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    4474:	1f 92       	push	r1
    4476:	0f 92       	push	r0
    4478:	0f b6       	in	r0, 0x3f	; 63
    447a:	0f 92       	push	r0
    447c:	11 24       	eor	r1, r1
    447e:	8f 93       	push	r24
    4480:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	80 93 28 02 	sts	0x0228, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    4488:	9f e0       	ldi	r25, 0x0F	; 15
    448a:	90 93 25 02 	sts	0x0225, r25

	firstSampleLeft = 1;
    448e:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    4492:	9f 91       	pop	r25
    4494:	8f 91       	pop	r24
    4496:	0f 90       	pop	r0
    4498:	0f be       	out	0x3f, r0	; 63
    449a:	0f 90       	pop	r0
    449c:	1f 90       	pop	r1
    449e:	18 95       	reti

000044a0 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    44a0:	1f 92       	push	r1
    44a2:	0f 92       	push	r0
    44a4:	0f b6       	in	r0, 0x3f	; 63
    44a6:	0f 92       	push	r0
    44a8:	11 24       	eor	r1, r1
    44aa:	8f 93       	push	r24
    44ac:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    44ae:	80 91 64 04 	lds	r24, 0x0464
    44b2:	88 23       	and	r24, r24
    44b4:	61 f0       	breq	.+24     	; 0x44ce <__vector_35+0x2e>
		pwm_right = 0;
    44b6:	10 92 f6 02 	sts	0x02F6, r1
    44ba:	10 92 f5 02 	sts	0x02F5, r1
		OCR3A = 0;
    44be:	10 92 99 00 	sts	0x0099, r1
    44c2:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    44c6:	10 92 9b 00 	sts	0x009B, r1
    44ca:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    44ce:	10 92 e4 02 	sts	0x02E4, r1
    44d2:	10 92 e3 02 	sts	0x02E3, r1


	if(pwm_right == 0) {
    44d6:	80 91 f5 02 	lds	r24, 0x02F5
    44da:	90 91 f6 02 	lds	r25, 0x02F6
    44de:	00 97       	sbiw	r24, 0x00	; 0
    44e0:	31 f5       	brne	.+76     	; 0x452e <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    44e2:	80 91 e9 02 	lds	r24, 0x02E9
    44e6:	90 91 ea 02 	lds	r25, 0x02EA
    44ea:	97 fd       	sbrc	r25, 7
    44ec:	5f c0       	rjmp	.+190    	; 0x45ac <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	80 93 27 02 	sts	0x0227, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    44f4:	8c e0       	ldi	r24, 0x0C	; 12
    44f6:	80 93 26 02 	sts	0x0226, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    4500:	80 91 90 00 	lds	r24, 0x0090
    4504:	8f 75       	andi	r24, 0x5F	; 95
    4506:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    450a:	8e b1       	in	r24, 0x0e	; 14
    450c:	87 7e       	andi	r24, 0xE7	; 231
    450e:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    4510:	80 91 71 00 	lds	r24, 0x0071
    4514:	89 7f       	andi	r24, 0xF9	; 249
    4516:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    451a:	88 b3       	in	r24, 0x18	; 24
    451c:	86 60       	ori	r24, 0x06	; 6
    451e:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    4520:	9f 91       	pop	r25
    4522:	8f 91       	pop	r24
    4524:	0f 90       	pop	r0
    4526:	0f be       	out	0x3f, r0	; 63
    4528:	0f 90       	pop	r0
    452a:	1f 90       	pop	r1
    452c:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    452e:	18 16       	cp	r1, r24
    4530:	19 06       	cpc	r1, r25
    4532:	0c f5       	brge	.+66     	; 0x4576 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    4534:	10 92 27 02 	sts	0x0227, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    4538:	8d e0       	ldi	r24, 0x0D	; 13
    453a:	80 93 26 02 	sts	0x0226, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    453e:	80 91 90 00 	lds	r24, 0x0090
    4542:	8f 7d       	andi	r24, 0xDF	; 223
    4544:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    4548:	80 91 71 00 	lds	r24, 0x0071
    454c:	8b 7f       	andi	r24, 0xFB	; 251
    454e:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    4552:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    4554:	80 91 90 00 	lds	r24, 0x0090
    4558:	80 68       	ori	r24, 0x80	; 128
    455a:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    455e:	80 91 71 00 	lds	r24, 0x0071
    4562:	82 60       	ori	r24, 0x02	; 2
    4564:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    4568:	9f 91       	pop	r25
    456a:	8f 91       	pop	r24
    456c:	0f 90       	pop	r0
    456e:	0f be       	out	0x3f, r0	; 63
    4570:	0f 90       	pop	r0
    4572:	1f 90       	pop	r1
    4574:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    4576:	10 92 27 02 	sts	0x0227, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    457a:	8c e0       	ldi	r24, 0x0C	; 12
    457c:	80 93 26 02 	sts	0x0226, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    4580:	80 91 90 00 	lds	r24, 0x0090
    4584:	8f 77       	andi	r24, 0x7F	; 127
    4586:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    458a:	80 91 71 00 	lds	r24, 0x0071
    458e:	8d 7f       	andi	r24, 0xFD	; 253
    4590:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    4594:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    4596:	80 91 90 00 	lds	r24, 0x0090
    459a:	80 62       	ori	r24, 0x20	; 32
    459c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    45a0:	80 91 71 00 	lds	r24, 0x0071
    45a4:	84 60       	ori	r24, 0x04	; 4
    45a6:	80 93 71 00 	sts	0x0071, r24
    45aa:	ba cf       	rjmp	.-140    	; 0x4520 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    45ac:	81 e0       	ldi	r24, 0x01	; 1
    45ae:	80 93 27 02 	sts	0x0227, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    45b2:	8d e0       	ldi	r24, 0x0D	; 13
    45b4:	80 93 26 02 	sts	0x0226, r24
    45b8:	a0 cf       	rjmp	.-192    	; 0x44fa <__vector_35+0x5a>

000045ba <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    45ba:	1f 92       	push	r1
    45bc:	0f 92       	push	r0
    45be:	0f b6       	in	r0, 0x3f	; 63
    45c0:	0f 92       	push	r0
    45c2:	11 24       	eor	r1, r1
    45c4:	8f 93       	push	r24
    45c6:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	80 93 27 02 	sts	0x0227, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    45ce:	9c e0       	ldi	r25, 0x0C	; 12
    45d0:	90 93 26 02 	sts	0x0226, r25

	firstSampleRight = 1;
    45d4:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    45d8:	9f 91       	pop	r25
    45da:	8f 91       	pop	r24
    45dc:	0f 90       	pop	r0
    45de:	0f be       	out	0x3f, r0	; 63
    45e0:	0f 90       	pop	r0
    45e2:	1f 90       	pop	r1
    45e4:	18 95       	reti

000045e6 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    45e6:	1f 92       	push	r1
    45e8:	0f 92       	push	r0
    45ea:	0f b6       	in	r0, 0x3f	; 63
    45ec:	0f 92       	push	r0
    45ee:	11 24       	eor	r1, r1
    45f0:	8f 93       	push	r24
    45f2:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	80 93 27 02 	sts	0x0227, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    45fa:	9d e0       	ldi	r25, 0x0D	; 13
    45fc:	90 93 26 02 	sts	0x0226, r25

	firstSampleRight = 1;
    4600:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    4604:	9f 91       	pop	r25
    4606:	8f 91       	pop	r24
    4608:	0f 90       	pop	r0
    460a:	0f be       	out	0x3f, r0	; 63
    460c:	0f 90       	pop	r0
    460e:	1f 90       	pop	r1
    4610:	18 95       	reti

00004612 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    4612:	80 91 94 00 	lds	r24, 0x0094
    4616:	90 91 95 00 	lds	r25, 0x0095
    461a:	0e 94 b8 30 	call	0x6170	; 0x6170 <srand>

}
    461e:	08 95       	ret

00004620 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    4620:	2f 92       	push	r2
    4622:	3f 92       	push	r3
    4624:	4f 92       	push	r4
    4626:	5f 92       	push	r5
    4628:	6f 92       	push	r6
    462a:	7f 92       	push	r7
    462c:	8f 92       	push	r8
    462e:	9f 92       	push	r9
    4630:	af 92       	push	r10
    4632:	bf 92       	push	r11
    4634:	cf 92       	push	r12
    4636:	df 92       	push	r13
    4638:	ef 92       	push	r14
    463a:	ff 92       	push	r15
    463c:	0f 93       	push	r16
    463e:	1f 93       	push	r17
    4640:	df 93       	push	r29
    4642:	cf 93       	push	r28
    4644:	cd b7       	in	r28, 0x3d	; 61
    4646:	de b7       	in	r29, 0x3e	; 62
    4648:	28 97       	sbiw	r28, 0x08	; 8
    464a:	0f b6       	in	r0, 0x3f	; 63
    464c:	f8 94       	cli
    464e:	de bf       	out	0x3e, r29	; 62
    4650:	0f be       	out	0x3f, r0	; 63
    4652:	cd bf       	out	0x3d, r28	; 61
    4654:	2c 01       	movw	r4, r24
    4656:	7a 83       	std	Y+2, r23	; 0x02
    4658:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    465a:	fc 01       	movw	r30, r24
    465c:	01 90       	ld	r0, Z+
    465e:	f0 81       	ld	r31, Z
    4660:	e0 2d       	mov	r30, r0
    4662:	fc 83       	std	Y+4, r31	; 0x04
    4664:	eb 83       	std	Y+3, r30	; 0x03
    4666:	fb 01       	movw	r30, r22
    4668:	01 90       	ld	r0, Z+
    466a:	f0 81       	ld	r31, Z
    466c:	e0 2d       	mov	r30, r0
    466e:	fe 83       	std	Y+6, r31	; 0x06
    4670:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    4672:	60 91 c1 02 	lds	r22, 0x02C1
    4676:	70 91 c2 02 	lds	r23, 0x02C2
    467a:	65 30       	cpi	r22, 0x05	; 5
    467c:	71 05       	cpc	r23, r1
    467e:	34 f4       	brge	.+12     	; 0x468c <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    4680:	10 92 c2 02 	sts	0x02C2, r1
    4684:	10 92 c1 02 	sts	0x02C1, r1
    4688:	60 e0       	ldi	r22, 0x00	; 0
    468a:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    468c:	40 91 c3 02 	lds	r20, 0x02C3
    4690:	50 91 c4 02 	lds	r21, 0x02C4
    4694:	45 30       	cpi	r20, 0x05	; 5
    4696:	51 05       	cpc	r21, r1
    4698:	34 f4       	brge	.+12     	; 0x46a6 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    469a:	10 92 c4 02 	sts	0x02C4, r1
    469e:	10 92 c3 02 	sts	0x02C3, r1
    46a2:	40 e0       	ldi	r20, 0x00	; 0
    46a4:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    46a6:	80 91 c5 02 	lds	r24, 0x02C5
    46aa:	90 91 c6 02 	lds	r25, 0x02C6
    46ae:	85 30       	cpi	r24, 0x05	; 5
    46b0:	91 05       	cpc	r25, r1
    46b2:	24 f4       	brge	.+8      	; 0x46bc <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    46b4:	10 92 c6 02 	sts	0x02C6, r1
    46b8:	10 92 c5 02 	sts	0x02C5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    46bc:	00 91 c7 02 	lds	r16, 0x02C7
    46c0:	10 91 c8 02 	lds	r17, 0x02C8
    46c4:	05 30       	cpi	r16, 0x05	; 5
    46c6:	11 05       	cpc	r17, r1
    46c8:	34 f4       	brge	.+12     	; 0x46d6 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    46ca:	10 92 c8 02 	sts	0x02C8, r1
    46ce:	10 92 c7 02 	sts	0x02C7, r1
    46d2:	00 e0       	ldi	r16, 0x00	; 0
    46d4:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    46d6:	60 90 c9 02 	lds	r6, 0x02C9
    46da:	70 90 ca 02 	lds	r7, 0x02CA
    46de:	f5 e0       	ldi	r31, 0x05	; 5
    46e0:	6f 16       	cp	r6, r31
    46e2:	71 04       	cpc	r7, r1
    46e4:	34 f4       	brge	.+12     	; 0x46f2 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    46e6:	10 92 ca 02 	sts	0x02CA, r1
    46ea:	10 92 c9 02 	sts	0x02C9, r1
    46ee:	66 24       	eor	r6, r6
    46f0:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    46f2:	20 91 cb 02 	lds	r18, 0x02CB
    46f6:	30 91 cc 02 	lds	r19, 0x02CC
    46fa:	25 30       	cpi	r18, 0x05	; 5
    46fc:	31 05       	cpc	r19, r1
    46fe:	34 f4       	brge	.+12     	; 0x470c <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    4700:	10 92 cc 02 	sts	0x02CC, r1
    4704:	10 92 cb 02 	sts	0x02CB, r1
    4708:	20 e0       	ldi	r18, 0x00	; 0
    470a:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    470c:	80 91 cd 02 	lds	r24, 0x02CD
    4710:	90 91 ce 02 	lds	r25, 0x02CE
    4714:	85 30       	cpi	r24, 0x05	; 5
    4716:	91 05       	cpc	r25, r1
    4718:	24 f4       	brge	.+8      	; 0x4722 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    471a:	10 92 ce 02 	sts	0x02CE, r1
    471e:	10 92 cd 02 	sts	0x02CD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    4722:	80 91 cf 02 	lds	r24, 0x02CF
    4726:	90 91 d0 02 	lds	r25, 0x02D0
    472a:	85 30       	cpi	r24, 0x05	; 5
    472c:	91 05       	cpc	r25, r1
    472e:	34 f4       	brge	.+12     	; 0x473c <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    4730:	10 92 d0 02 	sts	0x02D0, r1
    4734:	10 92 cf 02 	sts	0x02CF, r1
    4738:	80 e0       	ldi	r24, 0x00	; 0
    473a:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    473c:	ee 24       	eor	r14, r14
    473e:	ff 24       	eor	r15, r15
    4740:	e6 1a       	sub	r14, r22
    4742:	f7 0a       	sbc	r15, r23
    4744:	5a 01       	movw	r10, r20
    4746:	b5 94       	asr	r11
    4748:	a7 94       	ror	r10
    474a:	15 95       	asr	r17
    474c:	07 95       	ror	r16
    474e:	69 01       	movw	r12, r18
    4750:	d5 94       	asr	r13
    4752:	c7 94       	ror	r12
    4754:	4c 01       	movw	r8, r24
    4756:	95 94       	asr	r9
    4758:	87 94       	ror	r8
    475a:	0e 94 b3 30 	call	0x6166	; 0x6166 <rand>
    475e:	93 01       	movw	r18, r6
    4760:	2e 51       	subi	r18, 0x1E	; 30
    4762:	30 40       	sbci	r19, 0x00	; 0
    4764:	2e 0d       	add	r18, r14
    4766:	3f 1d       	adc	r19, r15
    4768:	20 0f       	add	r18, r16
    476a:	31 1f       	adc	r19, r17
    476c:	2c 0d       	add	r18, r12
    476e:	3d 1d       	adc	r19, r13
    4770:	2a 19       	sub	r18, r10
    4772:	3b 09       	sbc	r19, r11
    4774:	28 19       	sub	r18, r8
    4776:	39 09       	sbc	r19, r9
    4778:	4c e3       	ldi	r20, 0x3C	; 60
    477a:	24 2e       	mov	r2, r20
    477c:	31 2c       	mov	r3, r1
    477e:	b1 01       	movw	r22, r2
    4780:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__divmodhi4>
    4784:	28 0f       	add	r18, r24
    4786:	39 1f       	adc	r19, r25
    4788:	38 87       	std	Y+8, r19	; 0x08
    478a:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    478c:	e0 90 c3 02 	lds	r14, 0x02C3
    4790:	f0 90 c4 02 	lds	r15, 0x02C4
    4794:	f5 94       	asr	r15
    4796:	e7 94       	ror	r14
    4798:	00 91 c5 02 	lds	r16, 0x02C5
    479c:	10 91 c6 02 	lds	r17, 0x02C6
    47a0:	15 95       	asr	r17
    47a2:	07 95       	ror	r16
    47a4:	15 95       	asr	r17
    47a6:	07 95       	ror	r16
    47a8:	c0 90 c7 02 	lds	r12, 0x02C7
    47ac:	d0 90 c8 02 	lds	r13, 0x02C8
    47b0:	d5 94       	asr	r13
    47b2:	c7 94       	ror	r12
    47b4:	80 90 cb 02 	lds	r8, 0x02CB
    47b8:	90 90 cc 02 	lds	r9, 0x02CC
    47bc:	95 94       	asr	r9
    47be:	87 94       	ror	r8
    47c0:	60 90 cd 02 	lds	r6, 0x02CD
    47c4:	70 90 ce 02 	lds	r7, 0x02CE
    47c8:	75 94       	asr	r7
    47ca:	67 94       	ror	r6
    47cc:	75 94       	asr	r7
    47ce:	67 94       	ror	r6
    47d0:	a0 90 cf 02 	lds	r10, 0x02CF
    47d4:	b0 90 d0 02 	lds	r11, 0x02D0
    47d8:	b5 94       	asr	r11
    47da:	a7 94       	ror	r10
    47dc:	0e 94 b3 30 	call	0x6166	; 0x6166 <rand>
    47e0:	97 01       	movw	r18, r14
    47e2:	20 0f       	add	r18, r16
    47e4:	31 1f       	adc	r19, r17
    47e6:	2e 51       	subi	r18, 0x1E	; 30
    47e8:	30 40       	sbci	r19, 0x00	; 0
    47ea:	2c 0d       	add	r18, r12
    47ec:	3d 1d       	adc	r19, r13
    47ee:	2a 19       	sub	r18, r10
    47f0:	3b 09       	sbc	r19, r11
    47f2:	28 19       	sub	r18, r8
    47f4:	39 09       	sbc	r19, r9
    47f6:	26 19       	sub	r18, r6
    47f8:	37 09       	sbc	r19, r7
    47fa:	b1 01       	movw	r22, r2
    47fc:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__divmodhi4>
    4800:	28 0f       	add	r18, r24
    4802:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    4804:	4b 81       	ldd	r20, Y+3	; 0x03
    4806:	5c 81       	ldd	r21, Y+4	; 0x04
    4808:	57 fd       	sbrc	r21, 7
    480a:	97 c0       	rjmp	.+302    	; 0x493a <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    480c:	5a 01       	movw	r10, r20
    480e:	cc 24       	eor	r12, r12
    4810:	b7 fc       	sbrc	r11, 7
    4812:	c0 94       	com	r12
    4814:	dc 2c       	mov	r13, r12
    4816:	8f 81       	ldd	r24, Y+7	; 0x07
    4818:	98 85       	ldd	r25, Y+8	; 0x08
    481a:	3c 01       	movw	r6, r24
    481c:	88 24       	eor	r8, r8
    481e:	77 fc       	sbrc	r7, 7
    4820:	80 94       	com	r8
    4822:	98 2c       	mov	r9, r8
    4824:	79 01       	movw	r14, r18
    4826:	00 27       	eor	r16, r16
    4828:	f7 fc       	sbrc	r15, 7
    482a:	00 95       	com	r16
    482c:	10 2f       	mov	r17, r16
    482e:	c4 01       	movw	r24, r8
    4830:	b3 01       	movw	r22, r6
    4832:	6e 19       	sub	r22, r14
    4834:	7f 09       	sbc	r23, r15
    4836:	80 0b       	sbc	r24, r16
    4838:	91 0b       	sbc	r25, r17
    483a:	a6 01       	movw	r20, r12
    483c:	95 01       	movw	r18, r10
    483e:	0e 94 1f 30 	call	0x603e	; 0x603e <__mulsi3>
    4842:	f6 e0       	ldi	r31, 0x06	; 6
    4844:	95 95       	asr	r25
    4846:	87 95       	ror	r24
    4848:	77 95       	ror	r23
    484a:	67 95       	ror	r22
    484c:	fa 95       	dec	r31
    484e:	d1 f7       	brne	.-12     	; 0x4844 <obstacleAvoidance+0x224>
    4850:	6a 0d       	add	r22, r10
    4852:	7b 1d       	adc	r23, r11
    4854:	8c 1d       	adc	r24, r12
    4856:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    4858:	f2 01       	movw	r30, r4
    485a:	71 83       	std	Z+1, r23	; 0x01
    485c:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    485e:	2d 81       	ldd	r18, Y+5	; 0x05
    4860:	3e 81       	ldd	r19, Y+6	; 0x06
    4862:	37 fd       	sbrc	r19, 7
    4864:	99 c0       	rjmp	.+306    	; 0x4998 <obstacleAvoidance+0x378>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    4866:	59 01       	movw	r10, r18
    4868:	cc 24       	eor	r12, r12
    486a:	b7 fc       	sbrc	r11, 7
    486c:	c0 94       	com	r12
    486e:	dc 2c       	mov	r13, r12
    4870:	c8 01       	movw	r24, r16
    4872:	b7 01       	movw	r22, r14
    4874:	66 0d       	add	r22, r6
    4876:	77 1d       	adc	r23, r7
    4878:	88 1d       	adc	r24, r8
    487a:	99 1d       	adc	r25, r9
    487c:	a6 01       	movw	r20, r12
    487e:	95 01       	movw	r18, r10
    4880:	0e 94 1f 30 	call	0x603e	; 0x603e <__mulsi3>
    4884:	36 e0       	ldi	r19, 0x06	; 6
    4886:	95 95       	asr	r25
    4888:	87 95       	ror	r24
    488a:	77 95       	ror	r23
    488c:	67 95       	ror	r22
    488e:	3a 95       	dec	r19
    4890:	d1 f7       	brne	.-12     	; 0x4886 <obstacleAvoidance+0x266>
    4892:	6a 0d       	add	r22, r10
    4894:	7b 1d       	adc	r23, r11
    4896:	8c 1d       	adc	r24, r12
    4898:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    489a:	9b 01       	movw	r18, r22
    489c:	e9 81       	ldd	r30, Y+1	; 0x01
    489e:	fa 81       	ldd	r31, Y+2	; 0x02
    48a0:	71 83       	std	Z+1, r23	; 0x01
    48a2:	60 83       	st	Z, r22
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    48a4:	f2 e0       	ldi	r31, 0x02	; 2
    48a6:	21 30       	cpi	r18, 0x01	; 1
    48a8:	3f 07       	cpc	r19, r31
    48aa:	44 f0       	brlt	.+16     	; 0x48bc <obstacleAvoidance+0x29c>
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	92 e0       	ldi	r25, 0x02	; 2
    48b0:	e9 81       	ldd	r30, Y+1	; 0x01
    48b2:	fa 81       	ldd	r31, Y+2	; 0x02
    48b4:	91 83       	std	Z+1, r25	; 0x01
    48b6:	80 83       	st	Z, r24
    48b8:	20 e0       	ldi	r18, 0x00	; 0
    48ba:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    48bc:	f2 01       	movw	r30, r4
    48be:	80 81       	ld	r24, Z
    48c0:	91 81       	ldd	r25, Z+1	; 0x01
    48c2:	f2 e0       	ldi	r31, 0x02	; 2
    48c4:	81 30       	cpi	r24, 0x01	; 1
    48c6:	9f 07       	cpc	r25, r31
    48c8:	4c f0       	brlt	.+18     	; 0x48dc <obstacleAvoidance+0x2bc>
    48ca:	80 e0       	ldi	r24, 0x00	; 0
    48cc:	92 e0       	ldi	r25, 0x02	; 2
    48ce:	f2 01       	movw	r30, r4
    48d0:	91 83       	std	Z+1, r25	; 0x01
    48d2:	80 83       	st	Z, r24
    48d4:	e9 81       	ldd	r30, Y+1	; 0x01
    48d6:	fa 81       	ldd	r31, Y+2	; 0x02
    48d8:	20 81       	ld	r18, Z
    48da:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    48dc:	fe ef       	ldi	r31, 0xFE	; 254
    48de:	20 30       	cpi	r18, 0x00	; 0
    48e0:	3f 07       	cpc	r19, r31
    48e2:	4c f4       	brge	.+18     	; 0x48f6 <obstacleAvoidance+0x2d6>
    48e4:	80 e0       	ldi	r24, 0x00	; 0
    48e6:	9e ef       	ldi	r25, 0xFE	; 254
    48e8:	e9 81       	ldd	r30, Y+1	; 0x01
    48ea:	fa 81       	ldd	r31, Y+2	; 0x02
    48ec:	91 83       	std	Z+1, r25	; 0x01
    48ee:	80 83       	st	Z, r24
    48f0:	f2 01       	movw	r30, r4
    48f2:	80 81       	ld	r24, Z
    48f4:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    48f6:	fe ef       	ldi	r31, 0xFE	; 254
    48f8:	80 30       	cpi	r24, 0x00	; 0
    48fa:	9f 07       	cpc	r25, r31
    48fc:	2c f4       	brge	.+10     	; 0x4908 <obstacleAvoidance+0x2e8>
    48fe:	80 e0       	ldi	r24, 0x00	; 0
    4900:	9e ef       	ldi	r25, 0xFE	; 254
    4902:	f2 01       	movw	r30, r4
    4904:	91 83       	std	Z+1, r25	; 0x01
    4906:	80 83       	st	Z, r24

}
    4908:	28 96       	adiw	r28, 0x08	; 8
    490a:	0f b6       	in	r0, 0x3f	; 63
    490c:	f8 94       	cli
    490e:	de bf       	out	0x3e, r29	; 62
    4910:	0f be       	out	0x3f, r0	; 63
    4912:	cd bf       	out	0x3d, r28	; 61
    4914:	cf 91       	pop	r28
    4916:	df 91       	pop	r29
    4918:	1f 91       	pop	r17
    491a:	0f 91       	pop	r16
    491c:	ff 90       	pop	r15
    491e:	ef 90       	pop	r14
    4920:	df 90       	pop	r13
    4922:	cf 90       	pop	r12
    4924:	bf 90       	pop	r11
    4926:	af 90       	pop	r10
    4928:	9f 90       	pop	r9
    492a:	8f 90       	pop	r8
    492c:	7f 90       	pop	r7
    492e:	6f 90       	pop	r6
    4930:	5f 90       	pop	r5
    4932:	4f 90       	pop	r4
    4934:	3f 90       	pop	r3
    4936:	2f 90       	pop	r2
    4938:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    493a:	4d 81       	ldd	r20, Y+5	; 0x05
    493c:	5e 81       	ldd	r21, Y+6	; 0x06
    493e:	5a 01       	movw	r10, r20
    4940:	cc 24       	eor	r12, r12
    4942:	b7 fc       	sbrc	r11, 7
    4944:	c0 94       	com	r12
    4946:	dc 2c       	mov	r13, r12
    4948:	8f 81       	ldd	r24, Y+7	; 0x07
    494a:	98 85       	ldd	r25, Y+8	; 0x08
    494c:	3c 01       	movw	r6, r24
    494e:	88 24       	eor	r8, r8
    4950:	77 fc       	sbrc	r7, 7
    4952:	80 94       	com	r8
    4954:	98 2c       	mov	r9, r8
    4956:	79 01       	movw	r14, r18
    4958:	00 27       	eor	r16, r16
    495a:	f7 fc       	sbrc	r15, 7
    495c:	00 95       	com	r16
    495e:	10 2f       	mov	r17, r16
    4960:	c8 01       	movw	r24, r16
    4962:	b7 01       	movw	r22, r14
    4964:	66 0d       	add	r22, r6
    4966:	77 1d       	adc	r23, r7
    4968:	88 1d       	adc	r24, r8
    496a:	99 1d       	adc	r25, r9
    496c:	a6 01       	movw	r20, r12
    496e:	95 01       	movw	r18, r10
    4970:	0e 94 1f 30 	call	0x603e	; 0x603e <__mulsi3>
    4974:	e6 e0       	ldi	r30, 0x06	; 6
    4976:	95 95       	asr	r25
    4978:	87 95       	ror	r24
    497a:	77 95       	ror	r23
    497c:	67 95       	ror	r22
    497e:	ea 95       	dec	r30
    4980:	d1 f7       	brne	.-12     	; 0x4976 <obstacleAvoidance+0x356>
    4982:	26 1b       	sub	r18, r22
    4984:	37 0b       	sbc	r19, r23
    4986:	48 0b       	sbc	r20, r24
    4988:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    498a:	f2 01       	movw	r30, r4
    498c:	31 83       	std	Z+1, r19	; 0x01
    498e:	20 83       	st	Z, r18
	}
	if(desR >=0) {
    4990:	2d 81       	ldd	r18, Y+5	; 0x05
    4992:	3e 81       	ldd	r19, Y+6	; 0x06
    4994:	37 ff       	sbrs	r19, 7
    4996:	67 cf       	rjmp	.-306    	; 0x4866 <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    4998:	2b 81       	ldd	r18, Y+3	; 0x03
    499a:	3c 81       	ldd	r19, Y+4	; 0x04
    499c:	59 01       	movw	r10, r18
    499e:	cc 24       	eor	r12, r12
    49a0:	b7 fc       	sbrc	r11, 7
    49a2:	c0 94       	com	r12
    49a4:	dc 2c       	mov	r13, r12
    49a6:	c4 01       	movw	r24, r8
    49a8:	b3 01       	movw	r22, r6
    49aa:	6e 19       	sub	r22, r14
    49ac:	7f 09       	sbc	r23, r15
    49ae:	80 0b       	sbc	r24, r16
    49b0:	91 0b       	sbc	r25, r17
    49b2:	a6 01       	movw	r20, r12
    49b4:	95 01       	movw	r18, r10
    49b6:	0e 94 1f 30 	call	0x603e	; 0x603e <__mulsi3>
    49ba:	26 e0       	ldi	r18, 0x06	; 6
    49bc:	95 95       	asr	r25
    49be:	87 95       	ror	r24
    49c0:	77 95       	ror	r23
    49c2:	67 95       	ror	r22
    49c4:	2a 95       	dec	r18
    49c6:	d1 f7       	brne	.-12     	; 0x49bc <obstacleAvoidance+0x39c>
    49c8:	a6 1a       	sub	r10, r22
    49ca:	b7 0a       	sbc	r11, r23
    49cc:	c8 0a       	sbc	r12, r24
    49ce:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    49d0:	95 01       	movw	r18, r10
    49d2:	e9 81       	ldd	r30, Y+1	; 0x01
    49d4:	fa 81       	ldd	r31, Y+2	; 0x02
    49d6:	b1 82       	std	Z+1, r11	; 0x01
    49d8:	a0 82       	st	Z, r10
    49da:	64 cf       	rjmp	.-312    	; 0x48a4 <obstacleAvoidance+0x284>

000049dc <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    49dc:	80 91 69 02 	lds	r24, 0x0269
    49e0:	90 91 6a 02 	lds	r25, 0x026A
    49e4:	21 e0       	ldi	r18, 0x01	; 1
    49e6:	84 3a       	cpi	r24, 0xA4	; 164
    49e8:	92 07       	cpc	r25, r18
    49ea:	d4 f0       	brlt	.+52     	; 0x4a20 <cliffDetected+0x44>
    49ec:	80 91 6b 02 	lds	r24, 0x026B
    49f0:	90 91 6c 02 	lds	r25, 0x026C
    49f4:	21 e0       	ldi	r18, 0x01	; 1
    49f6:	84 3a       	cpi	r24, 0xA4	; 164
    49f8:	92 07       	cpc	r25, r18
    49fa:	94 f0       	brlt	.+36     	; 0x4a20 <cliffDetected+0x44>
    49fc:	80 91 6d 02 	lds	r24, 0x026D
    4a00:	90 91 6e 02 	lds	r25, 0x026E
    4a04:	21 e0       	ldi	r18, 0x01	; 1
    4a06:	84 3a       	cpi	r24, 0xA4	; 164
    4a08:	92 07       	cpc	r25, r18
    4a0a:	74 f0       	brlt	.+28     	; 0x4a28 <cliffDetected+0x4c>
		return 1;
    4a0c:	81 e0       	ldi	r24, 0x01	; 1
    4a0e:	20 91 6f 02 	lds	r18, 0x026F
    4a12:	30 91 70 02 	lds	r19, 0x0270
    4a16:	91 e0       	ldi	r25, 0x01	; 1
    4a18:	24 3a       	cpi	r18, 0xA4	; 164
    4a1a:	39 07       	cpc	r19, r25
    4a1c:	1c f4       	brge	.+6      	; 0x4a24 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    4a1e:	08 95       	ret

char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
		return 1;
    4a20:	81 e0       	ldi	r24, 0x01	; 1
    4a22:	08 95       	ret
    4a24:	80 e0       	ldi	r24, 0x00	; 0
    4a26:	08 95       	ret
    4a28:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    4a2a:	08 95       	ret

00004a2c <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    4a2c:	81 e0       	ldi	r24, 0x01	; 1
    4a2e:	80 93 62 04 	sts	0x0462, r24
}
    4a32:	08 95       	ret

00004a34 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    4a34:	10 92 62 04 	sts	0x0462, r1
}
    4a38:	08 95       	ret

00004a3a <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	80 93 63 04 	sts	0x0463, r24
}
    4a40:	08 95       	ret

00004a42 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    4a42:	10 92 63 04 	sts	0x0463, r1
}
    4a46:	08 95       	ret

00004a48 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    4a48:	a0 e8       	ldi	r26, 0x80	; 128
    4a4a:	b0 e0       	ldi	r27, 0x00	; 0
    4a4c:	1c 92       	st	X, r1
	TCCR1B = 0;
    4a4e:	e1 e8       	ldi	r30, 0x81	; 129
    4a50:	f0 e0       	ldi	r31, 0x00	; 0
    4a52:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    4a54:	8c 91       	ld	r24, X
    4a56:	89 6a       	ori	r24, 0xA9	; 169
    4a58:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    4a5a:	80 81       	ld	r24, Z
    4a5c:	89 60       	ori	r24, 0x09	; 9
    4a5e:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    4a60:	80 91 0c 02 	lds	r24, 0x020C
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	90 93 89 00 	sts	0x0089, r25
    4a6a:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    4a6e:	80 91 0d 02 	lds	r24, 0x020D
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	90 93 8b 00 	sts	0x008B, r25
    4a78:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    4a7c:	80 91 0e 02 	lds	r24, 0x020E
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	90 93 8d 00 	sts	0x008D, r25
    4a86:	80 93 8c 00 	sts	0x008C, r24

}
    4a8a:	08 95       	ret

00004a8c <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    4a8c:	81 e0       	ldi	r24, 0x01	; 1
    4a8e:	90 91 15 03 	lds	r25, 0x0315
    4a92:	89 1b       	sub	r24, r25
    4a94:	80 93 15 03 	sts	0x0315, r24

	if(blinkState) {
    4a98:	88 23       	and	r24, r24
    4a9a:	39 f4       	brne	.+14     	; 0x4aaa <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    4a9c:	80 91 80 00 	lds	r24, 0x0080
    4aa0:	87 7f       	andi	r24, 0xF7	; 247
    4aa2:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    4aa6:	2f 98       	cbi	0x05, 7	; 5
    4aa8:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    4aaa:	80 91 80 00 	lds	r24, 0x0080
    4aae:	88 60       	ori	r24, 0x08	; 8
    4ab0:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    4ab4:	8f ef       	ldi	r24, 0xFF	; 255
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	90 93 8d 00 	sts	0x008D, r25
    4abc:	80 93 8c 00 	sts	0x008C, r24
    4ac0:	08 95       	ret

00004ac2 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    4ac2:	88 23       	and	r24, r24
    4ac4:	59 f0       	breq	.+22     	; 0x4adc <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    4ac6:	90 91 80 00 	lds	r25, 0x0080
    4aca:	90 68       	ori	r25, 0x80	; 128
    4acc:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	90 93 89 00 	sts	0x0089, r25
    4ad6:	80 93 88 00 	sts	0x0088, r24
    4ada:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    4adc:	80 91 80 00 	lds	r24, 0x0080
    4ae0:	8f 77       	andi	r24, 0x7F	; 127
    4ae2:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    4ae6:	2d 98       	cbi	0x05, 5	; 5
    4ae8:	08 95       	ret

00004aea <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    4aea:	88 23       	and	r24, r24
    4aec:	59 f0       	breq	.+22     	; 0x4b04 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    4aee:	90 91 80 00 	lds	r25, 0x0080
    4af2:	90 62       	ori	r25, 0x20	; 32
    4af4:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	90 93 8b 00 	sts	0x008B, r25
    4afe:	80 93 8a 00 	sts	0x008A, r24
    4b02:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    4b04:	80 91 80 00 	lds	r24, 0x0080
    4b08:	8f 7d       	andi	r24, 0xDF	; 223
    4b0a:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    4b0e:	2e 98       	cbi	0x05, 6	; 5
    4b10:	08 95       	ret

00004b12 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    4b12:	88 23       	and	r24, r24
    4b14:	59 f0       	breq	.+22     	; 0x4b2c <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    4b16:	90 91 80 00 	lds	r25, 0x0080
    4b1a:	98 60       	ori	r25, 0x08	; 8
    4b1c:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    4b20:	90 e0       	ldi	r25, 0x00	; 0
    4b22:	90 93 8d 00 	sts	0x008D, r25
    4b26:	80 93 8c 00 	sts	0x008C, r24
    4b2a:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    4b2c:	80 91 80 00 	lds	r24, 0x0080
    4b30:	87 7f       	andi	r24, 0xF7	; 247
    4b32:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    4b36:	2f 98       	cbi	0x05, 7	; 5
    4b38:	08 95       	ret

00004b3a <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    4b3a:	83 30       	cpi	r24, 0x03	; 3
    4b3c:	09 f4       	brne	.+2      	; 0x4b40 <setGreenLed+0x6>
    4b3e:	5a c0       	rjmp	.+180    	; 0x4bf4 <setGreenLed+0xba>
    4b40:	84 30       	cpi	r24, 0x04	; 4
    4b42:	80 f0       	brcs	.+32     	; 0x4b64 <setGreenLed+0x2a>
    4b44:	85 30       	cpi	r24, 0x05	; 5
    4b46:	09 f4       	brne	.+2      	; 0x4b4a <setGreenLed+0x10>
    4b48:	41 c0       	rjmp	.+130    	; 0x4bcc <setGreenLed+0x92>
    4b4a:	85 30       	cpi	r24, 0x05	; 5
    4b4c:	d0 f4       	brcc	.+52     	; 0x4b82 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    4b4e:	66 23       	and	r22, r22
    4b50:	09 f4       	brne	.+2      	; 0x4b54 <setGreenLed+0x1a>
    4b52:	68 c0       	rjmp	.+208    	; 0x4c24 <setGreenLed+0xea>
    4b54:	80 91 0b 01 	lds	r24, 0x010B
    4b58:	8f 7e       	andi	r24, 0xEF	; 239
    4b5a:	80 93 0b 01 	sts	0x010B, r24
    4b5e:	80 91 0b 01 	lds	r24, 0x010B
    4b62:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    4b64:	81 30       	cpi	r24, 0x01	; 1
    4b66:	e1 f1       	breq	.+120    	; 0x4be0 <setGreenLed+0xa6>
    4b68:	82 30       	cpi	r24, 0x02	; 2
    4b6a:	80 f0       	brcs	.+32     	; 0x4b8c <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    4b6c:	66 23       	and	r22, r22
    4b6e:	09 f4       	brne	.+2      	; 0x4b72 <setGreenLed+0x38>
    4b70:	46 c0       	rjmp	.+140    	; 0x4bfe <setGreenLed+0xc4>
    4b72:	80 91 0b 01 	lds	r24, 0x010B
    4b76:	8b 7f       	andi	r24, 0xFB	; 251
    4b78:	80 93 0b 01 	sts	0x010B, r24
    4b7c:	80 91 0b 01 	lds	r24, 0x010B
    4b80:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    4b82:	86 30       	cpi	r24, 0x06	; 6
    4b84:	c9 f0       	breq	.+50     	; 0x4bb8 <setGreenLed+0x7e>
    4b86:	87 30       	cpi	r24, 0x07	; 7
    4b88:	61 f0       	breq	.+24     	; 0x4ba2 <setGreenLed+0x68>
    4b8a:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    4b8c:	66 23       	and	r22, r22
    4b8e:	09 f4       	brne	.+2      	; 0x4b92 <setGreenLed+0x58>
    4b90:	51 c0       	rjmp	.+162    	; 0x4c34 <setGreenLed+0xfa>
    4b92:	80 91 0b 01 	lds	r24, 0x010B
    4b96:	8e 7f       	andi	r24, 0xFE	; 254
    4b98:	80 93 0b 01 	sts	0x010B, r24
    4b9c:	80 91 0b 01 	lds	r24, 0x010B
    4ba0:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    4ba2:	66 23       	and	r22, r22
    4ba4:	09 f0       	breq	.+2      	; 0x4ba8 <setGreenLed+0x6e>
    4ba6:	5e c0       	rjmp	.+188    	; 0x4c64 <setGreenLed+0x12a>
    4ba8:	80 91 0b 01 	lds	r24, 0x010B
    4bac:	80 68       	ori	r24, 0x80	; 128
    4bae:	80 93 0b 01 	sts	0x010B, r24
    4bb2:	80 91 0b 01 	lds	r24, 0x010B
    4bb6:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    4bb8:	66 23       	and	r22, r22
    4bba:	49 f1       	breq	.+82     	; 0x4c0e <setGreenLed+0xd4>
    4bbc:	80 91 0b 01 	lds	r24, 0x010B
    4bc0:	8f 7b       	andi	r24, 0xBF	; 191
    4bc2:	80 93 0b 01 	sts	0x010B, r24
    4bc6:	80 91 0b 01 	lds	r24, 0x010B
    4bca:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    4bcc:	66 23       	and	r22, r22
    4bce:	d1 f1       	breq	.+116    	; 0x4c44 <setGreenLed+0x10a>
    4bd0:	80 91 0b 01 	lds	r24, 0x010B
    4bd4:	8f 7d       	andi	r24, 0xDF	; 223
    4bd6:	80 93 0b 01 	sts	0x010B, r24
    4bda:	80 91 0b 01 	lds	r24, 0x010B
    4bde:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    4be0:	66 23       	and	r22, r22
    4be2:	c1 f1       	breq	.+112    	; 0x4c54 <setGreenLed+0x11a>
    4be4:	80 91 0b 01 	lds	r24, 0x010B
    4be8:	8d 7f       	andi	r24, 0xFD	; 253
    4bea:	80 93 0b 01 	sts	0x010B, r24
    4bee:	80 91 0b 01 	lds	r24, 0x010B
    4bf2:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    4bf4:	66 23       	and	r22, r22
    4bf6:	99 f0       	breq	.+38     	; 0x4c1e <setGreenLed+0xe4>
    4bf8:	a3 98       	cbi	0x14, 3	; 20
    4bfa:	84 b3       	in	r24, 0x14	; 20
    4bfc:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    4bfe:	80 91 0b 01 	lds	r24, 0x010B
    4c02:	84 60       	ori	r24, 0x04	; 4
    4c04:	80 93 0b 01 	sts	0x010B, r24
    4c08:	80 91 0b 01 	lds	r24, 0x010B
    4c0c:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    4c0e:	80 91 0b 01 	lds	r24, 0x010B
    4c12:	80 64       	ori	r24, 0x40	; 64
    4c14:	80 93 0b 01 	sts	0x010B, r24
    4c18:	80 91 0b 01 	lds	r24, 0x010B
    4c1c:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    4c1e:	a3 9a       	sbi	0x14, 3	; 20
    4c20:	84 b3       	in	r24, 0x14	; 20
    4c22:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    4c24:	80 91 0b 01 	lds	r24, 0x010B
    4c28:	80 61       	ori	r24, 0x10	; 16
    4c2a:	80 93 0b 01 	sts	0x010B, r24
    4c2e:	80 91 0b 01 	lds	r24, 0x010B
    4c32:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    4c34:	80 91 0b 01 	lds	r24, 0x010B
    4c38:	81 60       	ori	r24, 0x01	; 1
    4c3a:	80 93 0b 01 	sts	0x010B, r24
    4c3e:	80 91 0b 01 	lds	r24, 0x010B
    4c42:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    4c44:	80 91 0b 01 	lds	r24, 0x010B
    4c48:	80 62       	ori	r24, 0x20	; 32
    4c4a:	80 93 0b 01 	sts	0x010B, r24
    4c4e:	80 91 0b 01 	lds	r24, 0x010B
    4c52:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    4c54:	80 91 0b 01 	lds	r24, 0x010B
    4c58:	82 60       	ori	r24, 0x02	; 2
    4c5a:	80 93 0b 01 	sts	0x010B, r24
    4c5e:	80 91 0b 01 	lds	r24, 0x010B
    4c62:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    4c64:	80 91 0b 01 	lds	r24, 0x010B
    4c68:	8f 77       	andi	r24, 0x7F	; 127
    4c6a:	80 93 0b 01 	sts	0x010B, r24
    4c6e:	80 91 0b 01 	lds	r24, 0x010B
    4c72:	08 95       	ret

00004c74 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    4c74:	eb e0       	ldi	r30, 0x0B	; 11
    4c76:	f1 e0       	ldi	r31, 0x01	; 1
    4c78:	80 81       	ld	r24, Z
    4c7a:	81 60       	ori	r24, 0x01	; 1
    4c7c:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    4c7e:	80 81       	ld	r24, Z
    4c80:	82 60       	ori	r24, 0x02	; 2
    4c82:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    4c84:	80 81       	ld	r24, Z
    4c86:	84 60       	ori	r24, 0x04	; 4
    4c88:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    4c8a:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    4c8c:	80 81       	ld	r24, Z
    4c8e:	80 61       	ori	r24, 0x10	; 16
    4c90:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    4c92:	80 81       	ld	r24, Z
    4c94:	80 62       	ori	r24, 0x20	; 32
    4c96:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    4c98:	80 81       	ld	r24, Z
    4c9a:	80 64       	ori	r24, 0x40	; 64
    4c9c:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    4c9e:	80 81       	ld	r24, Z
    4ca0:	80 68       	ori	r24, 0x80	; 128
    4ca2:	80 83       	st	Z, r24

}
    4ca4:	08 95       	ret

00004ca6 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    4ca6:	eb e0       	ldi	r30, 0x0B	; 11
    4ca8:	f1 e0       	ldi	r31, 0x01	; 1
    4caa:	80 81       	ld	r24, Z
    4cac:	8e 7f       	andi	r24, 0xFE	; 254
    4cae:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    4cb0:	80 81       	ld	r24, Z
    4cb2:	8d 7f       	andi	r24, 0xFD	; 253
    4cb4:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    4cb6:	80 81       	ld	r24, Z
    4cb8:	8b 7f       	andi	r24, 0xFB	; 251
    4cba:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    4cbc:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    4cbe:	80 81       	ld	r24, Z
    4cc0:	8f 7e       	andi	r24, 0xEF	; 239
    4cc2:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    4cc4:	80 81       	ld	r24, Z
    4cc6:	8f 7d       	andi	r24, 0xDF	; 223
    4cc8:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    4cca:	80 81       	ld	r24, Z
    4ccc:	8f 7b       	andi	r24, 0xBF	; 191
    4cce:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    4cd0:	80 81       	ld	r24, Z
    4cd2:	8f 77       	andi	r24, 0x7F	; 127
    4cd4:	80 83       	st	Z, r24

}
    4cd6:	08 95       	ret

00004cd8 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    4cd8:	0e 94 88 17 	call	0x2f10	; 0x2f10 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4cdc:	80 91 14 02 	lds	r24, 0x0214
    4ce0:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4ce4:	88 23       	and	r24, r24
    4ce6:	49 f4       	brne	.+18     	; 0x4cfa <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    4ce8:	86 e1       	ldi	r24, 0x16	; 22
    4cea:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    4cee:	85 e4       	ldi	r24, 0x45	; 69
    4cf0:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4cf4:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>
    4cf8:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4cfa:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    4cfe:	86 ea       	ldi	r24, 0xA6	; 166
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	90 93 15 02 	sts	0x0215, r25
    4d06:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4d0a:	86 ea       	ldi	r24, 0xA6	; 166
    4d0c:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4d10:	88 23       	and	r24, r24
    4d12:	41 f5       	brne	.+80     	; 0x4d64 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    4d14:	8d e2       	ldi	r24, 0x2D	; 45
    4d16:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_write(0x08);	// measurement mode
    4d1a:	88 e0       	ldi	r24, 0x08	; 8
    4d1c:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4d20:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4d24:	80 91 14 02 	lds	r24, 0x0214
    4d28:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4d2c:	88 23       	and	r24, r24
    4d2e:	d1 f4       	brne	.+52     	; 0x4d64 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    4d30:	81 e3       	ldi	r24, 0x31	; 49
    4d32:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    4d36:	80 e0       	ldi	r24, 0x00	; 0
    4d38:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4d3c:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4d40:	80 91 14 02 	lds	r24, 0x0214
    4d44:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4d48:	88 23       	and	r24, r24
    4d4a:	61 f4       	brne	.+24     	; 0x4d64 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    4d4c:	8c e2       	ldi	r24, 0x2C	; 44
    4d4e:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    4d52:	89 e0       	ldi	r24, 0x09	; 9
    4d54:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4d58:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    4d5c:	81 e0       	ldi	r24, 0x01	; 1
    4d5e:	80 93 25 04 	sts	0x0425, r24
    4d62:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4d64:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    4d68:	82 e0       	ldi	r24, 0x02	; 2
    4d6a:	80 93 25 04 	sts	0x0425, r24
    4d6e:	08 95       	ret

00004d70 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4d70:	80 91 14 02 	lds	r24, 0x0214
    4d74:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4d78:	88 23       	and	r24, r24
    4d7a:	51 f4       	brne	.+20     	; 0x4d90 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    4d7c:	86 e1       	ldi	r24, 0x16	; 22
    4d7e:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    4d82:	85 e4       	ldi	r24, 0x45	; 69
    4d84:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4d88:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>
    }

	return 0;				// configuration ok
    4d8c:	80 e0       	ldi	r24, 0x00	; 0

}
    4d8e:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4d90:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>
		return 1;
    4d94:	81 e0       	ldi	r24, 0x01	; 1
    4d96:	08 95       	ret

00004d98 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4d98:	80 91 14 02 	lds	r24, 0x0214
    4d9c:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4da0:	88 23       	and	r24, r24
    4da2:	31 f5       	brne	.+76     	; 0x4df0 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    4da4:	8d e2       	ldi	r24, 0x2D	; 45
    4da6:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_write(0x08);	// measurement mode
    4daa:	88 e0       	ldi	r24, 0x08	; 8
    4dac:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4db0:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4db4:	80 91 14 02 	lds	r24, 0x0214
    4db8:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4dbc:	88 23       	and	r24, r24
    4dbe:	c1 f4       	brne	.+48     	; 0x4df0 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    4dc0:	81 e3       	ldi	r24, 0x31	; 49
    4dc2:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    4dc6:	80 e0       	ldi	r24, 0x00	; 0
    4dc8:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4dcc:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    4dd0:	80 91 14 02 	lds	r24, 0x0214
    4dd4:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    4dd8:	88 23       	and	r24, r24
    4dda:	51 f4       	brne	.+20     	; 0x4df0 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    4ddc:	8c e2       	ldi	r24, 0x2C	; 44
    4dde:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    4de2:	89 e0       	ldi	r24, 0x09	; 9
    4de4:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    4de8:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>
    }

	return 0;
    4dec:	80 e0       	ldi	r24, 0x00	; 0

}
    4dee:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    4df0:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>
		return 1;
    4df4:	81 e0       	ldi	r24, 0x01	; 1
    4df6:	08 95       	ret

00004df8 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    4df8:	ff 92       	push	r15
    4dfa:	0f 93       	push	r16
    4dfc:	1f 93       	push	r17
    4dfe:	df 93       	push	r29
    4e00:	cf 93       	push	r28
    4e02:	0f 92       	push	r0
    4e04:	cd b7       	in	r28, 0x3d	; 61
    4e06:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    4e08:	80 91 25 04 	lds	r24, 0x0425
    4e0c:	88 23       	and	r24, r24
    4e0e:	91 f0       	breq	.+36     	; 0x4e34 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    4e10:	81 30       	cpi	r24, 0x01	; 1
    4e12:	09 f4       	brne	.+2      	; 0x4e16 <readAccelXY+0x1e>
    4e14:	88 c0       	rjmp	.+272    	; 0x4f26 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    4e16:	10 92 27 04 	sts	0x0427, r1
    4e1a:	10 92 26 04 	sts	0x0426, r1
		accY = 0;
    4e1e:	10 92 29 04 	sts	0x0429, r1
    4e22:	10 92 28 04 	sts	0x0428, r1

	}

}
    4e26:	0f 90       	pop	r0
    4e28:	cf 91       	pop	r28
    4e2a:	df 91       	pop	r29
    4e2c:	1f 91       	pop	r17
    4e2e:	0f 91       	pop	r16
    4e30:	ff 90       	pop	r15
    4e32:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    4e34:	80 91 14 02 	lds	r24, 0x0214
    4e38:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    4e3c:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    4e3e:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    4e42:	80 91 14 02 	lds	r24, 0x0214
    4e46:	8f 5f       	subi	r24, 0xFF	; 255
    4e48:	0e 94 dd 17 	call	0x2fba	; 0x2fba <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    4e4c:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    4e50:	08 2f       	mov	r16, r24
    4e52:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    4e56:	f8 2e       	mov	r15, r24
    4e58:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    4e5c:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    4e5e:	0e 94 27 18 	call	0x304e	; 0x304e <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    4e62:	89 83       	std	Y+1, r24	; 0x01
    4e64:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    4e68:	90 91 a7 04 	lds	r25, 0x04A7
    4e6c:	89 81       	ldd	r24, Y+1	; 0x01
    4e6e:	99 23       	and	r25, r25
    4e70:	39 f1       	breq	.+78     	; 0x4ec0 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    4e72:	4f 2d       	mov	r20, r15
    4e74:	55 27       	eor	r21, r21
    4e76:	47 fd       	sbrc	r20, 7
    4e78:	50 95       	com	r21
    4e7a:	54 2f       	mov	r21, r20
    4e7c:	44 27       	eor	r20, r20
    4e7e:	60 2f       	mov	r22, r16
    4e80:	77 27       	eor	r23, r23
    4e82:	67 fd       	sbrc	r22, 7
    4e84:	70 95       	com	r23
    4e86:	46 2b       	or	r20, r22
    4e88:	57 2b       	or	r21, r23
    4e8a:	50 93 27 04 	sts	0x0427, r21
    4e8e:	40 93 26 04 	sts	0x0426, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    4e92:	28 2f       	mov	r18, r24
    4e94:	33 27       	eor	r19, r19
    4e96:	27 fd       	sbrc	r18, 7
    4e98:	30 95       	com	r19
    4e9a:	32 2f       	mov	r19, r18
    4e9c:	22 27       	eor	r18, r18
    4e9e:	81 2f       	mov	r24, r17
    4ea0:	99 27       	eor	r25, r25
    4ea2:	87 fd       	sbrc	r24, 7
    4ea4:	90 95       	com	r25
    4ea6:	28 2b       	or	r18, r24
    4ea8:	39 2b       	or	r19, r25
    4eaa:	30 93 29 04 	sts	0x0429, r19
    4eae:	20 93 28 04 	sts	0x0428, r18
		accX = 0;
		accY = 0;

	}

}
    4eb2:	0f 90       	pop	r0
    4eb4:	cf 91       	pop	r28
    4eb6:	df 91       	pop	r29
    4eb8:	1f 91       	pop	r17
    4eba:	0f 91       	pop	r16
    4ebc:	ff 90       	pop	r15
    4ebe:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    4ec0:	4f 2d       	mov	r20, r15
    4ec2:	55 27       	eor	r21, r21
    4ec4:	47 fd       	sbrc	r20, 7
    4ec6:	50 95       	com	r21
    4ec8:	54 2f       	mov	r21, r20
    4eca:	44 27       	eor	r20, r20
    4ecc:	60 2f       	mov	r22, r16
    4ece:	77 27       	eor	r23, r23
    4ed0:	67 fd       	sbrc	r22, 7
    4ed2:	70 95       	com	r23
    4ed4:	46 2b       	or	r20, r22
    4ed6:	57 2b       	or	r21, r23
    4ed8:	60 91 2c 04 	lds	r22, 0x042C
    4edc:	70 91 2d 04 	lds	r23, 0x042D
    4ee0:	46 1b       	sub	r20, r22
    4ee2:	57 0b       	sbc	r21, r23
    4ee4:	50 93 27 04 	sts	0x0427, r21
    4ee8:	40 93 26 04 	sts	0x0426, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    4eec:	28 2f       	mov	r18, r24
    4eee:	33 27       	eor	r19, r19
    4ef0:	27 fd       	sbrc	r18, 7
    4ef2:	30 95       	com	r19
    4ef4:	32 2f       	mov	r19, r18
    4ef6:	22 27       	eor	r18, r18
    4ef8:	81 2f       	mov	r24, r17
    4efa:	99 27       	eor	r25, r25
    4efc:	87 fd       	sbrc	r24, 7
    4efe:	90 95       	com	r25
    4f00:	28 2b       	or	r18, r24
    4f02:	39 2b       	or	r19, r25
    4f04:	80 91 2e 04 	lds	r24, 0x042E
    4f08:	90 91 2f 04 	lds	r25, 0x042F
    4f0c:	28 1b       	sub	r18, r24
    4f0e:	39 0b       	sbc	r19, r25
    4f10:	30 93 29 04 	sts	0x0429, r19
    4f14:	20 93 28 04 	sts	0x0428, r18
		accX = 0;
		accY = 0;

	}

}
    4f18:	0f 90       	pop	r0
    4f1a:	cf 91       	pop	r28
    4f1c:	df 91       	pop	r29
    4f1e:	1f 91       	pop	r17
    4f20:	0f 91       	pop	r16
    4f22:	ff 90       	pop	r15
    4f24:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    4f26:	80 91 14 02 	lds	r24, 0x0214
    4f2a:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    4f2e:	82 e3       	ldi	r24, 0x32	; 50
    4f30:	86 cf       	rjmp	.-244    	; 0x4e3e <readAccelXY+0x46>

00004f32 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    4f32:	df 93       	push	r29
    4f34:	cf 93       	push	r28
    4f36:	00 d0       	rcall	.+0      	; 0x4f38 <readAccelXYZ+0x6>
    4f38:	00 d0       	rcall	.+0      	; 0x4f3a <readAccelXYZ+0x8>
    4f3a:	cd b7       	in	r28, 0x3d	; 61
    4f3c:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    4f3e:	80 91 25 04 	lds	r24, 0x0425
    4f42:	88 23       	and	r24, r24
    4f44:	c1 f0       	breq	.+48     	; 0x4f76 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    4f46:	81 30       	cpi	r24, 0x01	; 1
    4f48:	09 f4       	brne	.+2      	; 0x4f4c <readAccelXYZ+0x1a>
    4f4a:	ad c0       	rjmp	.+346    	; 0x50a6 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    4f4c:	10 92 27 04 	sts	0x0427, r1
    4f50:	10 92 26 04 	sts	0x0426, r1
		accY = 0;
    4f54:	10 92 29 04 	sts	0x0429, r1
    4f58:	10 92 28 04 	sts	0x0428, r1
		accZ = 0;
    4f5c:	10 92 2b 04 	sts	0x042B, r1
    4f60:	10 92 2a 04 	sts	0x042A, r1

	}

}
    4f64:	26 96       	adiw	r28, 0x06	; 6
    4f66:	0f b6       	in	r0, 0x3f	; 63
    4f68:	f8 94       	cli
    4f6a:	de bf       	out	0x3e, r29	; 62
    4f6c:	0f be       	out	0x3f, r0	; 63
    4f6e:	cd bf       	out	0x3d, r28	; 61
    4f70:	cf 91       	pop	r28
    4f72:	df 91       	pop	r29
    4f74:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    4f76:	80 91 14 02 	lds	r24, 0x0214
    4f7a:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    4f7e:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    4f80:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    4f84:	80 91 14 02 	lds	r24, 0x0214
    4f88:	8f 5f       	subi	r24, 0xFF	; 255
    4f8a:	0e 94 dd 17 	call	0x2fba	; 0x2fba <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    4f8e:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    4f92:	89 83       	std	Y+1, r24	; 0x01
    4f94:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    4f98:	8a 83       	std	Y+2, r24	; 0x02
    4f9a:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    4f9e:	8b 83       	std	Y+3, r24	; 0x03
    4fa0:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    4fa4:	8c 83       	std	Y+4, r24	; 0x04
    4fa6:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    4faa:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    4fac:	0e 94 27 18 	call	0x304e	; 0x304e <i2c_readNak>
    4fb0:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    4fb2:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    4fb6:	80 91 a7 04 	lds	r24, 0x04A7
    4fba:	88 23       	and	r24, r24
    4fbc:	89 f1       	breq	.+98     	; 0x5020 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    4fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    4fc0:	99 27       	eor	r25, r25
    4fc2:	87 fd       	sbrc	r24, 7
    4fc4:	90 95       	com	r25
    4fc6:	98 2f       	mov	r25, r24
    4fc8:	88 27       	eor	r24, r24
    4fca:	29 81       	ldd	r18, Y+1	; 0x01
    4fcc:	33 27       	eor	r19, r19
    4fce:	27 fd       	sbrc	r18, 7
    4fd0:	30 95       	com	r19
    4fd2:	82 2b       	or	r24, r18
    4fd4:	93 2b       	or	r25, r19
    4fd6:	90 93 27 04 	sts	0x0427, r25
    4fda:	80 93 26 04 	sts	0x0426, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    4fde:	8c 81       	ldd	r24, Y+4	; 0x04
    4fe0:	99 27       	eor	r25, r25
    4fe2:	87 fd       	sbrc	r24, 7
    4fe4:	90 95       	com	r25
    4fe6:	98 2f       	mov	r25, r24
    4fe8:	88 27       	eor	r24, r24
    4fea:	2b 81       	ldd	r18, Y+3	; 0x03
    4fec:	33 27       	eor	r19, r19
    4fee:	27 fd       	sbrc	r18, 7
    4ff0:	30 95       	com	r19
    4ff2:	82 2b       	or	r24, r18
    4ff4:	93 2b       	or	r25, r19
    4ff6:	90 93 29 04 	sts	0x0429, r25
    4ffa:	80 93 28 04 	sts	0x0428, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    4ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    5000:	99 27       	eor	r25, r25
    5002:	87 fd       	sbrc	r24, 7
    5004:	90 95       	com	r25
    5006:	98 2f       	mov	r25, r24
    5008:	88 27       	eor	r24, r24
    500a:	2d 81       	ldd	r18, Y+5	; 0x05
    500c:	33 27       	eor	r19, r19
    500e:	27 fd       	sbrc	r18, 7
    5010:	30 95       	com	r19
    5012:	82 2b       	or	r24, r18
    5014:	93 2b       	or	r25, r19
    5016:	90 93 2b 04 	sts	0x042B, r25
    501a:	80 93 2a 04 	sts	0x042A, r24
    501e:	a2 cf       	rjmp	.-188    	; 0x4f64 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    5020:	8a 81       	ldd	r24, Y+2	; 0x02
    5022:	99 27       	eor	r25, r25
    5024:	87 fd       	sbrc	r24, 7
    5026:	90 95       	com	r25
    5028:	98 2f       	mov	r25, r24
    502a:	88 27       	eor	r24, r24
    502c:	29 81       	ldd	r18, Y+1	; 0x01
    502e:	33 27       	eor	r19, r19
    5030:	27 fd       	sbrc	r18, 7
    5032:	30 95       	com	r19
    5034:	82 2b       	or	r24, r18
    5036:	93 2b       	or	r25, r19
    5038:	20 91 2c 04 	lds	r18, 0x042C
    503c:	30 91 2d 04 	lds	r19, 0x042D
    5040:	82 1b       	sub	r24, r18
    5042:	93 0b       	sbc	r25, r19
    5044:	90 93 27 04 	sts	0x0427, r25
    5048:	80 93 26 04 	sts	0x0426, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    504c:	8c 81       	ldd	r24, Y+4	; 0x04
    504e:	99 27       	eor	r25, r25
    5050:	87 fd       	sbrc	r24, 7
    5052:	90 95       	com	r25
    5054:	98 2f       	mov	r25, r24
    5056:	88 27       	eor	r24, r24
    5058:	2b 81       	ldd	r18, Y+3	; 0x03
    505a:	33 27       	eor	r19, r19
    505c:	27 fd       	sbrc	r18, 7
    505e:	30 95       	com	r19
    5060:	82 2b       	or	r24, r18
    5062:	93 2b       	or	r25, r19
    5064:	20 91 2e 04 	lds	r18, 0x042E
    5068:	30 91 2f 04 	lds	r19, 0x042F
    506c:	82 1b       	sub	r24, r18
    506e:	93 0b       	sbc	r25, r19
    5070:	90 93 29 04 	sts	0x0429, r25
    5074:	80 93 28 04 	sts	0x0428, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    5078:	8e 81       	ldd	r24, Y+6	; 0x06
    507a:	99 27       	eor	r25, r25
    507c:	87 fd       	sbrc	r24, 7
    507e:	90 95       	com	r25
    5080:	98 2f       	mov	r25, r24
    5082:	88 27       	eor	r24, r24
    5084:	2d 81       	ldd	r18, Y+5	; 0x05
    5086:	33 27       	eor	r19, r19
    5088:	27 fd       	sbrc	r18, 7
    508a:	30 95       	com	r19
    508c:	82 2b       	or	r24, r18
    508e:	93 2b       	or	r25, r19
    5090:	20 91 30 04 	lds	r18, 0x0430
    5094:	30 91 31 04 	lds	r19, 0x0431
    5098:	82 1b       	sub	r24, r18
    509a:	93 0b       	sbc	r25, r19
    509c:	90 93 2b 04 	sts	0x042B, r25
    50a0:	80 93 2a 04 	sts	0x042A, r24
    50a4:	5f cf       	rjmp	.-322    	; 0x4f64 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    50a6:	80 91 14 02 	lds	r24, 0x0214
    50aa:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    50ae:	82 e3       	ldi	r24, 0x32	; 50
    50b0:	67 cf       	rjmp	.-306    	; 0x4f80 <readAccelXYZ+0x4e>

000050b2 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    50b2:	cf 93       	push	r28
    50b4:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    50b6:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    50ba:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    50be:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    50c2:	80 e0       	ldi	r24, 0x00	; 0
    50c4:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <updateRedLed>
	updateGreenLed(pwm_green);
    50c8:	80 91 0d 02 	lds	r24, 0x020D
    50cc:	0e 94 75 25 	call	0x4aea	; 0x4aea <updateGreenLed>
	updateBlueLed(pwm_blue);
    50d0:	80 91 0e 02 	lds	r24, 0x020E
    50d4:	0e 94 89 25 	call	0x4b12	; 0x4b12 <updateBlueLed>

	calibrationCycle = 0;
    50d8:	10 92 4b 04 	sts	0x044B, r1
    50dc:	10 92 4a 04 	sts	0x044A, r1
	startCalibration = 1;
    50e0:	81 e0       	ldi	r24, 0x01	; 1
    50e2:	80 93 a7 04 	sts	0x04A7, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    50e6:	c1 e0       	ldi	r28, 0x01	; 1
    50e8:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    50ea:	0e 94 99 27 	call	0x4f32	; 0x4f32 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    50ee:	20 91 4a 04 	lds	r18, 0x044A
    50f2:	30 91 4b 04 	lds	r19, 0x044B
    50f6:	21 31       	cpi	r18, 0x11	; 17
    50f8:	31 05       	cpc	r19, r1
    50fa:	0c f4       	brge	.+2      	; 0x50fe <calibrateSensors+0x4c>
    50fc:	35 c1       	rjmp	.+618    	; 0x5368 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    50fe:	80 91 89 02 	lds	r24, 0x0289
    5102:	90 91 8a 02 	lds	r25, 0x028A
    5106:	a0 91 8b 02 	lds	r26, 0x028B
    510a:	b0 91 8c 02 	lds	r27, 0x028C
    510e:	54 e0       	ldi	r21, 0x04	; 4
    5110:	b6 95       	lsr	r27
    5112:	a7 95       	ror	r26
    5114:	97 95       	ror	r25
    5116:	87 95       	ror	r24
    5118:	5a 95       	dec	r21
    511a:	d1 f7       	brne	.-12     	; 0x5110 <calibrateSensors+0x5e>
    511c:	90 93 72 02 	sts	0x0272, r25
    5120:	80 93 71 02 	sts	0x0271, r24
    5124:	80 91 8d 02 	lds	r24, 0x028D
    5128:	90 91 8e 02 	lds	r25, 0x028E
    512c:	a0 91 8f 02 	lds	r26, 0x028F
    5130:	b0 91 90 02 	lds	r27, 0x0290
    5134:	44 e0       	ldi	r20, 0x04	; 4
    5136:	b6 95       	lsr	r27
    5138:	a7 95       	ror	r26
    513a:	97 95       	ror	r25
    513c:	87 95       	ror	r24
    513e:	4a 95       	dec	r20
    5140:	d1 f7       	brne	.-12     	; 0x5136 <calibrateSensors+0x84>
    5142:	90 93 74 02 	sts	0x0274, r25
    5146:	80 93 73 02 	sts	0x0273, r24
    514a:	80 91 91 02 	lds	r24, 0x0291
    514e:	90 91 92 02 	lds	r25, 0x0292
    5152:	a0 91 93 02 	lds	r26, 0x0293
    5156:	b0 91 94 02 	lds	r27, 0x0294
    515a:	34 e0       	ldi	r19, 0x04	; 4
    515c:	b6 95       	lsr	r27
    515e:	a7 95       	ror	r26
    5160:	97 95       	ror	r25
    5162:	87 95       	ror	r24
    5164:	3a 95       	dec	r19
    5166:	d1 f7       	brne	.-12     	; 0x515c <calibrateSensors+0xaa>
    5168:	90 93 76 02 	sts	0x0276, r25
    516c:	80 93 75 02 	sts	0x0275, r24
    5170:	80 91 95 02 	lds	r24, 0x0295
    5174:	90 91 96 02 	lds	r25, 0x0296
    5178:	a0 91 97 02 	lds	r26, 0x0297
    517c:	b0 91 98 02 	lds	r27, 0x0298
    5180:	24 e0       	ldi	r18, 0x04	; 4
    5182:	b6 95       	lsr	r27
    5184:	a7 95       	ror	r26
    5186:	97 95       	ror	r25
    5188:	87 95       	ror	r24
    518a:	2a 95       	dec	r18
    518c:	d1 f7       	brne	.-12     	; 0x5182 <calibrateSensors+0xd0>
    518e:	90 93 78 02 	sts	0x0278, r25
    5192:	80 93 77 02 	sts	0x0277, r24
    5196:	80 91 99 02 	lds	r24, 0x0299
    519a:	90 91 9a 02 	lds	r25, 0x029A
    519e:	a0 91 9b 02 	lds	r26, 0x029B
    51a2:	b0 91 9c 02 	lds	r27, 0x029C
    51a6:	f4 e0       	ldi	r31, 0x04	; 4
    51a8:	b6 95       	lsr	r27
    51aa:	a7 95       	ror	r26
    51ac:	97 95       	ror	r25
    51ae:	87 95       	ror	r24
    51b0:	fa 95       	dec	r31
    51b2:	d1 f7       	brne	.-12     	; 0x51a8 <calibrateSensors+0xf6>
    51b4:	90 93 7a 02 	sts	0x027A, r25
    51b8:	80 93 79 02 	sts	0x0279, r24
    51bc:	80 91 9d 02 	lds	r24, 0x029D
    51c0:	90 91 9e 02 	lds	r25, 0x029E
    51c4:	a0 91 9f 02 	lds	r26, 0x029F
    51c8:	b0 91 a0 02 	lds	r27, 0x02A0
    51cc:	e4 e0       	ldi	r30, 0x04	; 4
    51ce:	b6 95       	lsr	r27
    51d0:	a7 95       	ror	r26
    51d2:	97 95       	ror	r25
    51d4:	87 95       	ror	r24
    51d6:	ea 95       	dec	r30
    51d8:	d1 f7       	brne	.-12     	; 0x51ce <calibrateSensors+0x11c>
    51da:	90 93 7c 02 	sts	0x027C, r25
    51de:	80 93 7b 02 	sts	0x027B, r24
    51e2:	80 91 a1 02 	lds	r24, 0x02A1
    51e6:	90 91 a2 02 	lds	r25, 0x02A2
    51ea:	a0 91 a3 02 	lds	r26, 0x02A3
    51ee:	b0 91 a4 02 	lds	r27, 0x02A4
    51f2:	74 e0       	ldi	r23, 0x04	; 4
    51f4:	b6 95       	lsr	r27
    51f6:	a7 95       	ror	r26
    51f8:	97 95       	ror	r25
    51fa:	87 95       	ror	r24
    51fc:	7a 95       	dec	r23
    51fe:	d1 f7       	brne	.-12     	; 0x51f4 <calibrateSensors+0x142>
    5200:	90 93 7e 02 	sts	0x027E, r25
    5204:	80 93 7d 02 	sts	0x027D, r24
    5208:	80 91 a5 02 	lds	r24, 0x02A5
    520c:	90 91 a6 02 	lds	r25, 0x02A6
    5210:	a0 91 a7 02 	lds	r26, 0x02A7
    5214:	b0 91 a8 02 	lds	r27, 0x02A8
    5218:	64 e0       	ldi	r22, 0x04	; 4
    521a:	b6 95       	lsr	r27
    521c:	a7 95       	ror	r26
    521e:	97 95       	ror	r25
    5220:	87 95       	ror	r24
    5222:	6a 95       	dec	r22
    5224:	d1 f7       	brne	.-12     	; 0x521a <calibrateSensors+0x168>
    5226:	90 93 80 02 	sts	0x0280, r25
    522a:	80 93 7f 02 	sts	0x027F, r24
    522e:	80 91 ad 02 	lds	r24, 0x02AD
    5232:	90 91 ae 02 	lds	r25, 0x02AE
    5236:	a0 91 af 02 	lds	r26, 0x02AF
    523a:	b0 91 b0 02 	lds	r27, 0x02B0
    523e:	54 e0       	ldi	r21, 0x04	; 4
    5240:	b6 95       	lsr	r27
    5242:	a7 95       	ror	r26
    5244:	97 95       	ror	r25
    5246:	87 95       	ror	r24
    5248:	5a 95       	dec	r21
    524a:	d1 f7       	brne	.-12     	; 0x5240 <calibrateSensors+0x18e>
    524c:	9c 01       	movw	r18, r24
    524e:	80 91 b1 02 	lds	r24, 0x02B1
    5252:	90 91 b2 02 	lds	r25, 0x02B2
    5256:	a0 91 b3 02 	lds	r26, 0x02B3
    525a:	b0 91 b4 02 	lds	r27, 0x02B4
    525e:	44 e0       	ldi	r20, 0x04	; 4
    5260:	b6 95       	lsr	r27
    5262:	a7 95       	ror	r26
    5264:	97 95       	ror	r25
    5266:	87 95       	ror	r24
    5268:	4a 95       	dec	r20
    526a:	d1 f7       	brne	.-12     	; 0x5260 <calibrateSensors+0x1ae>
    526c:	bc 01       	movw	r22, r24
    526e:	80 91 b5 02 	lds	r24, 0x02B5
    5272:	90 91 b6 02 	lds	r25, 0x02B6
    5276:	a0 91 b7 02 	lds	r26, 0x02B7
    527a:	b0 91 b8 02 	lds	r27, 0x02B8
    527e:	f4 e0       	ldi	r31, 0x04	; 4
    5280:	b6 95       	lsr	r27
    5282:	a7 95       	ror	r26
    5284:	97 95       	ror	r25
    5286:	87 95       	ror	r24
    5288:	fa 95       	dec	r31
    528a:	d1 f7       	brne	.-12     	; 0x5280 <calibrateSensors+0x1ce>
    528c:	ac 01       	movw	r20, r24
    528e:	80 91 a9 02 	lds	r24, 0x02A9
    5292:	90 91 aa 02 	lds	r25, 0x02AA
    5296:	a0 91 ab 02 	lds	r26, 0x02AB
    529a:	b0 91 ac 02 	lds	r27, 0x02AC
    529e:	e4 e0       	ldi	r30, 0x04	; 4
    52a0:	b6 95       	lsr	r27
    52a2:	a7 95       	ror	r26
    52a4:	97 95       	ror	r25
    52a6:	87 95       	ror	r24
    52a8:	ea 95       	dec	r30
    52aa:	d1 f7       	brne	.-12     	; 0x52a0 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;
    52ac:	80 50       	subi	r24, 0x00	; 0
    52ae:	92 40       	sbci	r25, 0x02	; 2
    52b0:	90 93 82 02 	sts	0x0282, r25
    52b4:	80 93 81 02 	sts	0x0281, r24
    52b8:	20 50       	subi	r18, 0x00	; 0
    52ba:	32 40       	sbci	r19, 0x02	; 2
    52bc:	30 93 84 02 	sts	0x0284, r19
    52c0:	20 93 83 02 	sts	0x0283, r18
    52c4:	60 50       	subi	r22, 0x00	; 0
    52c6:	72 40       	sbci	r23, 0x02	; 2
    52c8:	70 93 86 02 	sts	0x0286, r23
    52cc:	60 93 85 02 	sts	0x0285, r22
    52d0:	40 50       	subi	r20, 0x00	; 0
    52d2:	52 40       	sbci	r21, 0x02	; 2
    52d4:	50 93 88 02 	sts	0x0288, r21
    52d8:	40 93 87 02 	sts	0x0287, r20
			}

			accOffsetX = accOffsetXSum>>4;
    52dc:	80 91 32 04 	lds	r24, 0x0432
    52e0:	90 91 33 04 	lds	r25, 0x0433
    52e4:	95 95       	asr	r25
    52e6:	87 95       	ror	r24
    52e8:	95 95       	asr	r25
    52ea:	87 95       	ror	r24
    52ec:	95 95       	asr	r25
    52ee:	87 95       	ror	r24
    52f0:	95 95       	asr	r25
    52f2:	87 95       	ror	r24
    52f4:	90 93 2d 04 	sts	0x042D, r25
    52f8:	80 93 2c 04 	sts	0x042C, r24
			accOffsetY = accOffsetYSum>>4;
    52fc:	80 91 34 04 	lds	r24, 0x0434
    5300:	90 91 35 04 	lds	r25, 0x0435
    5304:	95 95       	asr	r25
    5306:	87 95       	ror	r24
    5308:	95 95       	asr	r25
    530a:	87 95       	ror	r24
    530c:	95 95       	asr	r25
    530e:	87 95       	ror	r24
    5310:	95 95       	asr	r25
    5312:	87 95       	ror	r24
    5314:	90 93 2f 04 	sts	0x042F, r25
    5318:	80 93 2e 04 	sts	0x042E, r24
			accOffsetZ = accOffsetZSum>>4;
    531c:	80 91 36 04 	lds	r24, 0x0436
    5320:	90 91 37 04 	lds	r25, 0x0437
    5324:	95 95       	asr	r25
    5326:	87 95       	ror	r24
    5328:	95 95       	asr	r25
    532a:	87 95       	ror	r24
    532c:	95 95       	asr	r25
    532e:	87 95       	ror	r24
    5330:	95 95       	asr	r25
    5332:	87 95       	ror	r24
    5334:	90 93 31 04 	sts	0x0431, r25
    5338:	80 93 30 04 	sts	0x0430, r24

			startCalibration = 0;
    533c:	10 92 a7 04 	sts	0x04A7, r1

		}

	}

	pwm_red = 255;
    5340:	8f ef       	ldi	r24, 0xFF	; 255
    5342:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    5346:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    534a:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    534e:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <updateRedLed>
	updateGreenLed(pwm_green);
    5352:	80 91 0d 02 	lds	r24, 0x020D
    5356:	0e 94 75 25 	call	0x4aea	; 0x4aea <updateGreenLed>
	updateBlueLed(pwm_blue);
    535a:	80 91 0e 02 	lds	r24, 0x020E
    535e:	0e 94 89 25 	call	0x4b12	; 0x4b12 <updateBlueLed>

}
    5362:	df 91       	pop	r29
    5364:	cf 91       	pop	r28
    5366:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    5368:	80 91 c0 02 	lds	r24, 0x02C0
    536c:	88 23       	and	r24, r24
    536e:	09 f4       	brne	.+2      	; 0x5372 <calibrateSensors+0x2c0>
    5370:	86 c1       	rjmp	.+780    	; 0x567e <calibrateSensors+0x5cc>

				proxUpdated = 0;
    5372:	10 92 c0 02 	sts	0x02C0, r1

				if(calibrationCycle==0) {		// reset all variables
    5376:	21 15       	cp	r18, r1
    5378:	31 05       	cpc	r19, r1
    537a:	09 f4       	brne	.+2      	; 0x537e <calibrateSensors+0x2cc>
    537c:	86 c1       	rjmp	.+780    	; 0x568a <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    537e:	80 91 59 02 	lds	r24, 0x0259
    5382:	90 91 5a 02 	lds	r25, 0x025A
    5386:	aa 27       	eor	r26, r26
    5388:	97 fd       	sbrc	r25, 7
    538a:	a0 95       	com	r26
    538c:	ba 2f       	mov	r27, r26
    538e:	40 91 89 02 	lds	r20, 0x0289
    5392:	50 91 8a 02 	lds	r21, 0x028A
    5396:	60 91 8b 02 	lds	r22, 0x028B
    539a:	70 91 8c 02 	lds	r23, 0x028C
    539e:	84 0f       	add	r24, r20
    53a0:	95 1f       	adc	r25, r21
    53a2:	a6 1f       	adc	r26, r22
    53a4:	b7 1f       	adc	r27, r23
    53a6:	80 93 89 02 	sts	0x0289, r24
    53aa:	90 93 8a 02 	sts	0x028A, r25
    53ae:	a0 93 8b 02 	sts	0x028B, r26
    53b2:	b0 93 8c 02 	sts	0x028C, r27
    53b6:	80 91 5b 02 	lds	r24, 0x025B
    53ba:	90 91 5c 02 	lds	r25, 0x025C
    53be:	aa 27       	eor	r26, r26
    53c0:	97 fd       	sbrc	r25, 7
    53c2:	a0 95       	com	r26
    53c4:	ba 2f       	mov	r27, r26
    53c6:	40 91 8d 02 	lds	r20, 0x028D
    53ca:	50 91 8e 02 	lds	r21, 0x028E
    53ce:	60 91 8f 02 	lds	r22, 0x028F
    53d2:	70 91 90 02 	lds	r23, 0x0290
    53d6:	84 0f       	add	r24, r20
    53d8:	95 1f       	adc	r25, r21
    53da:	a6 1f       	adc	r26, r22
    53dc:	b7 1f       	adc	r27, r23
    53de:	80 93 8d 02 	sts	0x028D, r24
    53e2:	90 93 8e 02 	sts	0x028E, r25
    53e6:	a0 93 8f 02 	sts	0x028F, r26
    53ea:	b0 93 90 02 	sts	0x0290, r27
    53ee:	80 91 5d 02 	lds	r24, 0x025D
    53f2:	90 91 5e 02 	lds	r25, 0x025E
    53f6:	aa 27       	eor	r26, r26
    53f8:	97 fd       	sbrc	r25, 7
    53fa:	a0 95       	com	r26
    53fc:	ba 2f       	mov	r27, r26
    53fe:	40 91 91 02 	lds	r20, 0x0291
    5402:	50 91 92 02 	lds	r21, 0x0292
    5406:	60 91 93 02 	lds	r22, 0x0293
    540a:	70 91 94 02 	lds	r23, 0x0294
    540e:	84 0f       	add	r24, r20
    5410:	95 1f       	adc	r25, r21
    5412:	a6 1f       	adc	r26, r22
    5414:	b7 1f       	adc	r27, r23
    5416:	80 93 91 02 	sts	0x0291, r24
    541a:	90 93 92 02 	sts	0x0292, r25
    541e:	a0 93 93 02 	sts	0x0293, r26
    5422:	b0 93 94 02 	sts	0x0294, r27
    5426:	80 91 5f 02 	lds	r24, 0x025F
    542a:	90 91 60 02 	lds	r25, 0x0260
    542e:	aa 27       	eor	r26, r26
    5430:	97 fd       	sbrc	r25, 7
    5432:	a0 95       	com	r26
    5434:	ba 2f       	mov	r27, r26
    5436:	40 91 95 02 	lds	r20, 0x0295
    543a:	50 91 96 02 	lds	r21, 0x0296
    543e:	60 91 97 02 	lds	r22, 0x0297
    5442:	70 91 98 02 	lds	r23, 0x0298
    5446:	84 0f       	add	r24, r20
    5448:	95 1f       	adc	r25, r21
    544a:	a6 1f       	adc	r26, r22
    544c:	b7 1f       	adc	r27, r23
    544e:	80 93 95 02 	sts	0x0295, r24
    5452:	90 93 96 02 	sts	0x0296, r25
    5456:	a0 93 97 02 	sts	0x0297, r26
    545a:	b0 93 98 02 	sts	0x0298, r27
    545e:	80 91 61 02 	lds	r24, 0x0261
    5462:	90 91 62 02 	lds	r25, 0x0262
    5466:	aa 27       	eor	r26, r26
    5468:	97 fd       	sbrc	r25, 7
    546a:	a0 95       	com	r26
    546c:	ba 2f       	mov	r27, r26
    546e:	40 91 99 02 	lds	r20, 0x0299
    5472:	50 91 9a 02 	lds	r21, 0x029A
    5476:	60 91 9b 02 	lds	r22, 0x029B
    547a:	70 91 9c 02 	lds	r23, 0x029C
    547e:	84 0f       	add	r24, r20
    5480:	95 1f       	adc	r25, r21
    5482:	a6 1f       	adc	r26, r22
    5484:	b7 1f       	adc	r27, r23
    5486:	80 93 99 02 	sts	0x0299, r24
    548a:	90 93 9a 02 	sts	0x029A, r25
    548e:	a0 93 9b 02 	sts	0x029B, r26
    5492:	b0 93 9c 02 	sts	0x029C, r27
    5496:	80 91 63 02 	lds	r24, 0x0263
    549a:	90 91 64 02 	lds	r25, 0x0264
    549e:	aa 27       	eor	r26, r26
    54a0:	97 fd       	sbrc	r25, 7
    54a2:	a0 95       	com	r26
    54a4:	ba 2f       	mov	r27, r26
    54a6:	40 91 9d 02 	lds	r20, 0x029D
    54aa:	50 91 9e 02 	lds	r21, 0x029E
    54ae:	60 91 9f 02 	lds	r22, 0x029F
    54b2:	70 91 a0 02 	lds	r23, 0x02A0
    54b6:	84 0f       	add	r24, r20
    54b8:	95 1f       	adc	r25, r21
    54ba:	a6 1f       	adc	r26, r22
    54bc:	b7 1f       	adc	r27, r23
    54be:	80 93 9d 02 	sts	0x029D, r24
    54c2:	90 93 9e 02 	sts	0x029E, r25
    54c6:	a0 93 9f 02 	sts	0x029F, r26
    54ca:	b0 93 a0 02 	sts	0x02A0, r27
    54ce:	80 91 65 02 	lds	r24, 0x0265
    54d2:	90 91 66 02 	lds	r25, 0x0266
    54d6:	aa 27       	eor	r26, r26
    54d8:	97 fd       	sbrc	r25, 7
    54da:	a0 95       	com	r26
    54dc:	ba 2f       	mov	r27, r26
    54de:	40 91 a1 02 	lds	r20, 0x02A1
    54e2:	50 91 a2 02 	lds	r21, 0x02A2
    54e6:	60 91 a3 02 	lds	r22, 0x02A3
    54ea:	70 91 a4 02 	lds	r23, 0x02A4
    54ee:	84 0f       	add	r24, r20
    54f0:	95 1f       	adc	r25, r21
    54f2:	a6 1f       	adc	r26, r22
    54f4:	b7 1f       	adc	r27, r23
    54f6:	80 93 a1 02 	sts	0x02A1, r24
    54fa:	90 93 a2 02 	sts	0x02A2, r25
    54fe:	a0 93 a3 02 	sts	0x02A3, r26
    5502:	b0 93 a4 02 	sts	0x02A4, r27
    5506:	80 91 67 02 	lds	r24, 0x0267
    550a:	90 91 68 02 	lds	r25, 0x0268
    550e:	aa 27       	eor	r26, r26
    5510:	97 fd       	sbrc	r25, 7
    5512:	a0 95       	com	r26
    5514:	ba 2f       	mov	r27, r26
    5516:	40 91 a5 02 	lds	r20, 0x02A5
    551a:	50 91 a6 02 	lds	r21, 0x02A6
    551e:	60 91 a7 02 	lds	r22, 0x02A7
    5522:	70 91 a8 02 	lds	r23, 0x02A8
    5526:	84 0f       	add	r24, r20
    5528:	95 1f       	adc	r25, r21
    552a:	a6 1f       	adc	r26, r22
    552c:	b7 1f       	adc	r27, r23
    552e:	80 93 a5 02 	sts	0x02A5, r24
    5532:	90 93 a6 02 	sts	0x02A6, r25
    5536:	a0 93 a7 02 	sts	0x02A7, r26
    553a:	b0 93 a8 02 	sts	0x02A8, r27
    553e:	80 91 69 02 	lds	r24, 0x0269
    5542:	90 91 6a 02 	lds	r25, 0x026A
    5546:	aa 27       	eor	r26, r26
    5548:	97 fd       	sbrc	r25, 7
    554a:	a0 95       	com	r26
    554c:	ba 2f       	mov	r27, r26
    554e:	40 91 a9 02 	lds	r20, 0x02A9
    5552:	50 91 aa 02 	lds	r21, 0x02AA
    5556:	60 91 ab 02 	lds	r22, 0x02AB
    555a:	70 91 ac 02 	lds	r23, 0x02AC
    555e:	84 0f       	add	r24, r20
    5560:	95 1f       	adc	r25, r21
    5562:	a6 1f       	adc	r26, r22
    5564:	b7 1f       	adc	r27, r23
    5566:	80 93 a9 02 	sts	0x02A9, r24
    556a:	90 93 aa 02 	sts	0x02AA, r25
    556e:	a0 93 ab 02 	sts	0x02AB, r26
    5572:	b0 93 ac 02 	sts	0x02AC, r27
    5576:	80 91 6b 02 	lds	r24, 0x026B
    557a:	90 91 6c 02 	lds	r25, 0x026C
    557e:	aa 27       	eor	r26, r26
    5580:	97 fd       	sbrc	r25, 7
    5582:	a0 95       	com	r26
    5584:	ba 2f       	mov	r27, r26
    5586:	40 91 ad 02 	lds	r20, 0x02AD
    558a:	50 91 ae 02 	lds	r21, 0x02AE
    558e:	60 91 af 02 	lds	r22, 0x02AF
    5592:	70 91 b0 02 	lds	r23, 0x02B0
    5596:	84 0f       	add	r24, r20
    5598:	95 1f       	adc	r25, r21
    559a:	a6 1f       	adc	r26, r22
    559c:	b7 1f       	adc	r27, r23
    559e:	80 93 ad 02 	sts	0x02AD, r24
    55a2:	90 93 ae 02 	sts	0x02AE, r25
    55a6:	a0 93 af 02 	sts	0x02AF, r26
    55aa:	b0 93 b0 02 	sts	0x02B0, r27
    55ae:	80 91 6d 02 	lds	r24, 0x026D
    55b2:	90 91 6e 02 	lds	r25, 0x026E
    55b6:	aa 27       	eor	r26, r26
    55b8:	97 fd       	sbrc	r25, 7
    55ba:	a0 95       	com	r26
    55bc:	ba 2f       	mov	r27, r26
    55be:	40 91 b1 02 	lds	r20, 0x02B1
    55c2:	50 91 b2 02 	lds	r21, 0x02B2
    55c6:	60 91 b3 02 	lds	r22, 0x02B3
    55ca:	70 91 b4 02 	lds	r23, 0x02B4
    55ce:	84 0f       	add	r24, r20
    55d0:	95 1f       	adc	r25, r21
    55d2:	a6 1f       	adc	r26, r22
    55d4:	b7 1f       	adc	r27, r23
    55d6:	80 93 b1 02 	sts	0x02B1, r24
    55da:	90 93 b2 02 	sts	0x02B2, r25
    55de:	a0 93 b3 02 	sts	0x02B3, r26
    55e2:	b0 93 b4 02 	sts	0x02B4, r27
    55e6:	80 91 6f 02 	lds	r24, 0x026F
    55ea:	90 91 70 02 	lds	r25, 0x0270
    55ee:	aa 27       	eor	r26, r26
    55f0:	97 fd       	sbrc	r25, 7
    55f2:	a0 95       	com	r26
    55f4:	ba 2f       	mov	r27, r26
    55f6:	40 91 b5 02 	lds	r20, 0x02B5
    55fa:	50 91 b6 02 	lds	r21, 0x02B6
    55fe:	60 91 b7 02 	lds	r22, 0x02B7
    5602:	70 91 b8 02 	lds	r23, 0x02B8
    5606:	84 0f       	add	r24, r20
    5608:	95 1f       	adc	r25, r21
    560a:	a6 1f       	adc	r26, r22
    560c:	b7 1f       	adc	r27, r23
    560e:	80 93 b5 02 	sts	0x02B5, r24
    5612:	90 93 b6 02 	sts	0x02B6, r25
    5616:	a0 93 b7 02 	sts	0x02B7, r26
    561a:	b0 93 b8 02 	sts	0x02B8, r27
				}

				accOffsetXSum += accX;
    561e:	80 91 32 04 	lds	r24, 0x0432
    5622:	90 91 33 04 	lds	r25, 0x0433
    5626:	40 91 26 04 	lds	r20, 0x0426
    562a:	50 91 27 04 	lds	r21, 0x0427
    562e:	84 0f       	add	r24, r20
    5630:	95 1f       	adc	r25, r21
    5632:	90 93 33 04 	sts	0x0433, r25
    5636:	80 93 32 04 	sts	0x0432, r24
				accOffsetYSum += accY;
    563a:	80 91 34 04 	lds	r24, 0x0434
    563e:	90 91 35 04 	lds	r25, 0x0435
    5642:	40 91 28 04 	lds	r20, 0x0428
    5646:	50 91 29 04 	lds	r21, 0x0429
    564a:	84 0f       	add	r24, r20
    564c:	95 1f       	adc	r25, r21
    564e:	90 93 35 04 	sts	0x0435, r25
    5652:	80 93 34 04 	sts	0x0434, r24
				accOffsetZSum += accZ;
    5656:	80 91 36 04 	lds	r24, 0x0436
    565a:	90 91 37 04 	lds	r25, 0x0437
    565e:	40 91 2a 04 	lds	r20, 0x042A
    5662:	50 91 2b 04 	lds	r21, 0x042B
    5666:	84 0f       	add	r24, r20
    5668:	95 1f       	adc	r25, r21
    566a:	90 93 37 04 	sts	0x0437, r25
    566e:	80 93 36 04 	sts	0x0436, r24

				calibrationCycle++;
    5672:	2f 5f       	subi	r18, 0xFF	; 255
    5674:	3f 4f       	sbci	r19, 0xFF	; 255
    5676:	30 93 4b 04 	sts	0x044B, r19
    567a:	20 93 4a 04 	sts	0x044A, r18
    567e:	80 91 a7 04 	lds	r24, 0x04A7
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    5682:	88 23       	and	r24, r24
    5684:	09 f0       	breq	.+2      	; 0x5688 <calibrateSensors+0x5d6>
    5686:	31 cd       	rjmp	.-1438   	; 0x50ea <calibrateSensors+0x38>
    5688:	5b ce       	rjmp	.-842    	; 0x5340 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    568a:	10 92 89 02 	sts	0x0289, r1
    568e:	10 92 8a 02 	sts	0x028A, r1
    5692:	10 92 8b 02 	sts	0x028B, r1
    5696:	10 92 8c 02 	sts	0x028C, r1
						proximityOffset[i] = 0;
    569a:	10 92 72 02 	sts	0x0272, r1
    569e:	10 92 71 02 	sts	0x0271, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    56a2:	10 92 8d 02 	sts	0x028D, r1
    56a6:	10 92 8e 02 	sts	0x028E, r1
    56aa:	10 92 8f 02 	sts	0x028F, r1
    56ae:	10 92 90 02 	sts	0x0290, r1
						proximityOffset[i] = 0;
    56b2:	10 92 74 02 	sts	0x0274, r1
    56b6:	10 92 73 02 	sts	0x0273, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    56ba:	10 92 91 02 	sts	0x0291, r1
    56be:	10 92 92 02 	sts	0x0292, r1
    56c2:	10 92 93 02 	sts	0x0293, r1
    56c6:	10 92 94 02 	sts	0x0294, r1
						proximityOffset[i] = 0;
    56ca:	10 92 76 02 	sts	0x0276, r1
    56ce:	10 92 75 02 	sts	0x0275, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    56d2:	10 92 95 02 	sts	0x0295, r1
    56d6:	10 92 96 02 	sts	0x0296, r1
    56da:	10 92 97 02 	sts	0x0297, r1
    56de:	10 92 98 02 	sts	0x0298, r1
						proximityOffset[i] = 0;
    56e2:	10 92 78 02 	sts	0x0278, r1
    56e6:	10 92 77 02 	sts	0x0277, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    56ea:	10 92 99 02 	sts	0x0299, r1
    56ee:	10 92 9a 02 	sts	0x029A, r1
    56f2:	10 92 9b 02 	sts	0x029B, r1
    56f6:	10 92 9c 02 	sts	0x029C, r1
						proximityOffset[i] = 0;
    56fa:	10 92 7a 02 	sts	0x027A, r1
    56fe:	10 92 79 02 	sts	0x0279, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5702:	10 92 9d 02 	sts	0x029D, r1
    5706:	10 92 9e 02 	sts	0x029E, r1
    570a:	10 92 9f 02 	sts	0x029F, r1
    570e:	10 92 a0 02 	sts	0x02A0, r1
						proximityOffset[i] = 0;
    5712:	10 92 7c 02 	sts	0x027C, r1
    5716:	10 92 7b 02 	sts	0x027B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    571a:	10 92 a1 02 	sts	0x02A1, r1
    571e:	10 92 a2 02 	sts	0x02A2, r1
    5722:	10 92 a3 02 	sts	0x02A3, r1
    5726:	10 92 a4 02 	sts	0x02A4, r1
						proximityOffset[i] = 0;
    572a:	10 92 7e 02 	sts	0x027E, r1
    572e:	10 92 7d 02 	sts	0x027D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5732:	10 92 a5 02 	sts	0x02A5, r1
    5736:	10 92 a6 02 	sts	0x02A6, r1
    573a:	10 92 a7 02 	sts	0x02A7, r1
    573e:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    5742:	10 92 80 02 	sts	0x0280, r1
    5746:	10 92 7f 02 	sts	0x027F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    574a:	10 92 a9 02 	sts	0x02A9, r1
    574e:	10 92 aa 02 	sts	0x02AA, r1
    5752:	10 92 ab 02 	sts	0x02AB, r1
    5756:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    575a:	10 92 82 02 	sts	0x0282, r1
    575e:	10 92 81 02 	sts	0x0281, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5762:	10 92 ad 02 	sts	0x02AD, r1
    5766:	10 92 ae 02 	sts	0x02AE, r1
    576a:	10 92 af 02 	sts	0x02AF, r1
    576e:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    5772:	10 92 84 02 	sts	0x0284, r1
    5776:	10 92 83 02 	sts	0x0283, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    577a:	10 92 b1 02 	sts	0x02B1, r1
    577e:	10 92 b2 02 	sts	0x02B2, r1
    5782:	10 92 b3 02 	sts	0x02B3, r1
    5786:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    578a:	10 92 86 02 	sts	0x0286, r1
    578e:	10 92 85 02 	sts	0x0285, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    5792:	10 92 b5 02 	sts	0x02B5, r1
    5796:	10 92 b6 02 	sts	0x02B6, r1
    579a:	10 92 b7 02 	sts	0x02B7, r1
    579e:	10 92 b8 02 	sts	0x02B8, r1
						proximityOffset[i] = 0;
    57a2:	10 92 88 02 	sts	0x0288, r1
    57a6:	10 92 87 02 	sts	0x0287, r1
					}
					accOffsetXSum = 0;
    57aa:	10 92 33 04 	sts	0x0433, r1
    57ae:	10 92 32 04 	sts	0x0432, r1
					accOffsetYSum = 0;
    57b2:	10 92 35 04 	sts	0x0435, r1
    57b6:	10 92 34 04 	sts	0x0434, r1
					accOffsetZSum = 0;
    57ba:	10 92 37 04 	sts	0x0437, r1
    57be:	10 92 36 04 	sts	0x0436, r1

					calibrationCycle++;
    57c2:	d0 93 4b 04 	sts	0x044B, r29
    57c6:	c0 93 4a 04 	sts	0x044A, r28
    57ca:	80 91 a7 04 	lds	r24, 0x04A7

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    57ce:	59 cf       	rjmp	.-334    	; 0x5682 <calibrateSensors+0x5d0>

000057d0 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    57d0:	80 91 25 04 	lds	r24, 0x0425
    57d4:	88 23       	and	r24, r24
    57d6:	79 f0       	breq	.+30     	; 0x57f6 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    57d8:	81 30       	cpi	r24, 0x01	; 1
    57da:	11 f1       	breq	.+68     	; 0x5820 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    57dc:	10 92 27 04 	sts	0x0427, r1
    57e0:	10 92 26 04 	sts	0x0426, r1
		accY = 0;
    57e4:	10 92 29 04 	sts	0x0429, r1
    57e8:	10 92 28 04 	sts	0x0428, r1
		accZ = 0;
    57ec:	10 92 2b 04 	sts	0x042B, r1
    57f0:	10 92 2a 04 	sts	0x042A, r1
    57f4:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    57f6:	80 91 14 02 	lds	r24, 0x0214
    57fa:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    57fe:	80 e0       	ldi	r24, 0x00	; 0
    5800:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    5804:	80 91 14 02 	lds	r24, 0x0214
    5808:	8f 5f       	subi	r24, 0xFF	; 255
    580a:	0e 94 dd 17 	call	0x2fba	; 0x2fba <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    580e:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    5812:	80 93 3b 04 	sts	0x043B, r24
    5816:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    581a:	80 93 3c 04 	sts	0x043C, r24
    581e:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    5820:	80 91 14 02 	lds	r24, 0x0214
    5824:	0e 94 90 17 	call	0x2f20	; 0x2f20 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    5828:	82 e3       	ldi	r24, 0x32	; 50
    582a:	0e 94 0b 18 	call	0x3016	; 0x3016 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    582e:	80 91 14 02 	lds	r24, 0x0214
    5832:	8f 5f       	subi	r24, 0xFF	; 255
    5834:	0e 94 dd 17 	call	0x2fba	; 0x2fba <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    5838:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    583c:	80 93 3b 04 	sts	0x043B, r24
    5840:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    5844:	80 93 3c 04 	sts	0x043C, r24
    5848:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    584c:	80 93 3d 04 	sts	0x043D, r24
    5850:	08 95       	ret

00005852 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    5852:	80 91 25 04 	lds	r24, 0x0425
    5856:	88 23       	and	r24, r24
    5858:	09 f0       	breq	.+2      	; 0x585c <readAccelXYZ_2+0xa>
    585a:	4e c0       	rjmp	.+156    	; 0x58f8 <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    585c:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    5860:	80 93 3d 04 	sts	0x043D, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    5864:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    5868:	80 93 3e 04 	sts	0x043E, r24
    586c:	0e 94 1d 18 	call	0x303a	; 0x303a <i2c_readAck>
    5870:	80 93 3f 04 	sts	0x043F, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    5874:	0e 94 27 18 	call	0x304e	; 0x304e <i2c_readNak>
    5878:	80 93 40 04 	sts	0x0440, r24
		i2c_stop();													// set stop conditon = release bus
    587c:	0e 94 03 18 	call	0x3006	; 0x3006 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    5880:	80 91 a7 04 	lds	r24, 0x04A7
    5884:	88 23       	and	r24, r24
    5886:	09 f4       	brne	.+2      	; 0x588a <readAccelXYZ_2+0x38>
    5888:	47 c0       	rjmp	.+142    	; 0x5918 <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    588a:	80 91 3c 04 	lds	r24, 0x043C
    588e:	99 27       	eor	r25, r25
    5890:	87 fd       	sbrc	r24, 7
    5892:	90 95       	com	r25
    5894:	98 2f       	mov	r25, r24
    5896:	88 27       	eor	r24, r24
    5898:	20 91 3b 04 	lds	r18, 0x043B
    589c:	33 27       	eor	r19, r19
    589e:	27 fd       	sbrc	r18, 7
    58a0:	30 95       	com	r19
    58a2:	82 2b       	or	r24, r18
    58a4:	93 2b       	or	r25, r19
    58a6:	90 93 27 04 	sts	0x0427, r25
    58aa:	80 93 26 04 	sts	0x0426, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    58ae:	80 91 3e 04 	lds	r24, 0x043E
    58b2:	99 27       	eor	r25, r25
    58b4:	87 fd       	sbrc	r24, 7
    58b6:	90 95       	com	r25
    58b8:	98 2f       	mov	r25, r24
    58ba:	88 27       	eor	r24, r24
    58bc:	20 91 3d 04 	lds	r18, 0x043D
    58c0:	33 27       	eor	r19, r19
    58c2:	27 fd       	sbrc	r18, 7
    58c4:	30 95       	com	r19
    58c6:	82 2b       	or	r24, r18
    58c8:	93 2b       	or	r25, r19
    58ca:	90 93 29 04 	sts	0x0429, r25
    58ce:	80 93 28 04 	sts	0x0428, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    58d2:	80 91 40 04 	lds	r24, 0x0440
    58d6:	99 27       	eor	r25, r25
    58d8:	87 fd       	sbrc	r24, 7
    58da:	90 95       	com	r25
    58dc:	98 2f       	mov	r25, r24
    58de:	88 27       	eor	r24, r24
    58e0:	20 91 3f 04 	lds	r18, 0x043F
    58e4:	33 27       	eor	r19, r19
    58e6:	27 fd       	sbrc	r18, 7
    58e8:	30 95       	com	r19
    58ea:	82 2b       	or	r24, r18
    58ec:	93 2b       	or	r25, r19
    58ee:	90 93 2b 04 	sts	0x042B, r25
    58f2:	80 93 2a 04 	sts	0x042A, r24
    58f6:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    58f8:	81 30       	cpi	r24, 0x01	; 1
    58fa:	09 f4       	brne	.+2      	; 0x58fe <readAccelXYZ_2+0xac>
    58fc:	b3 cf       	rjmp	.-154    	; 0x5864 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    58fe:	10 92 27 04 	sts	0x0427, r1
    5902:	10 92 26 04 	sts	0x0426, r1
		accY = 0;
    5906:	10 92 29 04 	sts	0x0429, r1
    590a:	10 92 28 04 	sts	0x0428, r1
		accZ = 0;
    590e:	10 92 2b 04 	sts	0x042B, r1
    5912:	10 92 2a 04 	sts	0x042A, r1
    5916:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    5918:	80 91 3c 04 	lds	r24, 0x043C
    591c:	99 27       	eor	r25, r25
    591e:	87 fd       	sbrc	r24, 7
    5920:	90 95       	com	r25
    5922:	98 2f       	mov	r25, r24
    5924:	88 27       	eor	r24, r24
    5926:	20 91 3b 04 	lds	r18, 0x043B
    592a:	33 27       	eor	r19, r19
    592c:	27 fd       	sbrc	r18, 7
    592e:	30 95       	com	r19
    5930:	82 2b       	or	r24, r18
    5932:	93 2b       	or	r25, r19
    5934:	20 91 2c 04 	lds	r18, 0x042C
    5938:	30 91 2d 04 	lds	r19, 0x042D
    593c:	82 1b       	sub	r24, r18
    593e:	93 0b       	sbc	r25, r19
    5940:	90 93 27 04 	sts	0x0427, r25
    5944:	80 93 26 04 	sts	0x0426, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    5948:	80 91 3e 04 	lds	r24, 0x043E
    594c:	99 27       	eor	r25, r25
    594e:	87 fd       	sbrc	r24, 7
    5950:	90 95       	com	r25
    5952:	98 2f       	mov	r25, r24
    5954:	88 27       	eor	r24, r24
    5956:	20 91 3d 04 	lds	r18, 0x043D
    595a:	33 27       	eor	r19, r19
    595c:	27 fd       	sbrc	r18, 7
    595e:	30 95       	com	r19
    5960:	82 2b       	or	r24, r18
    5962:	93 2b       	or	r25, r19
    5964:	20 91 2e 04 	lds	r18, 0x042E
    5968:	30 91 2f 04 	lds	r19, 0x042F
    596c:	82 1b       	sub	r24, r18
    596e:	93 0b       	sbc	r25, r19
    5970:	90 93 29 04 	sts	0x0429, r25
    5974:	80 93 28 04 	sts	0x0428, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    5978:	80 91 40 04 	lds	r24, 0x0440
    597c:	99 27       	eor	r25, r25
    597e:	87 fd       	sbrc	r24, 7
    5980:	90 95       	com	r25
    5982:	98 2f       	mov	r25, r24
    5984:	88 27       	eor	r24, r24
    5986:	20 91 3f 04 	lds	r18, 0x043F
    598a:	33 27       	eor	r19, r19
    598c:	27 fd       	sbrc	r18, 7
    598e:	30 95       	com	r19
    5990:	82 2b       	or	r24, r18
    5992:	93 2b       	or	r25, r19
    5994:	20 91 30 04 	lds	r18, 0x0430
    5998:	30 91 31 04 	lds	r19, 0x0431
    599c:	82 1b       	sub	r24, r18
    599e:	93 0b       	sbc	r25, r19
    59a0:	90 93 2b 04 	sts	0x042B, r25
    59a4:	80 93 2a 04 	sts	0x042A, r24
    59a8:	08 95       	ret

000059aa <computeAngle>:

	}

}

void computeAngle() {
    59aa:	ef 92       	push	r14
    59ac:	ff 92       	push	r15
    59ae:	0f 93       	push	r16
    59b0:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    59b2:	80 91 2a 04 	lds	r24, 0x042A
    59b6:	90 91 2b 04 	lds	r25, 0x042B
    59ba:	97 fd       	sbrc	r25, 7
    59bc:	5b c0       	rjmp	.+182    	; 0x5a74 <computeAngle+0xca>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    59be:	80 31       	cpi	r24, 0x10	; 16
    59c0:	91 05       	cpc	r25, r1
    59c2:	08 f0       	brcs	.+2      	; 0x59c6 <computeAngle+0x1c>
    59c4:	42 c0       	rjmp	.+132    	; 0x5a4a <computeAngle+0xa0>
		currPosition = HORIZONTAL_POS;
    59c6:	81 e0       	ldi	r24, 0x01	; 1
    59c8:	80 93 16 02 	sts	0x0216, r24
	} else {
		currPosition = VERTICAL_POS;
	}
	if(prevPosition == currPosition) {			
    59cc:	90 91 15 02 	lds	r25, 0x0215
    59d0:	98 17       	cp	r25, r24
    59d2:	09 f4       	brne	.+2      	; 0x59d6 <computeAngle+0x2c>
    59d4:	42 c0       	rjmp	.+132    	; 0x5a5a <computeAngle+0xb0>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    59d6:	10 92 3a 04 	sts	0x043A, r1
	}
	prevPosition = currPosition;
    59da:	80 93 15 02 	sts	0x0215, r24

	// compute the angle using the X and Y axis
	currentAngle = (signed int)(atan2((float)accX, (float)accY)*RAD_2_DEG);
    59de:	60 91 26 04 	lds	r22, 0x0426
    59e2:	70 91 27 04 	lds	r23, 0x0427
    59e6:	88 27       	eor	r24, r24
    59e8:	77 fd       	sbrc	r23, 7
    59ea:	80 95       	com	r24
    59ec:	98 2f       	mov	r25, r24
    59ee:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <__floatsisf>
    59f2:	7b 01       	movw	r14, r22
    59f4:	8c 01       	movw	r16, r24
    59f6:	60 91 28 04 	lds	r22, 0x0428
    59fa:	70 91 29 04 	lds	r23, 0x0429
    59fe:	88 27       	eor	r24, r24
    5a00:	77 fd       	sbrc	r23, 7
    5a02:	80 95       	com	r24
    5a04:	98 2f       	mov	r25, r24
    5a06:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <__floatsisf>
    5a0a:	9b 01       	movw	r18, r22
    5a0c:	ac 01       	movw	r20, r24
    5a0e:	c8 01       	movw	r24, r16
    5a10:	b7 01       	movw	r22, r14
    5a12:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <atan2>
    5a16:	21 ee       	ldi	r18, 0xE1	; 225
    5a18:	3e e2       	ldi	r19, 0x2E	; 46
    5a1a:	45 e6       	ldi	r20, 0x65	; 101
    5a1c:	52 e4       	ldi	r21, 0x42	; 66
    5a1e:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__mulsf3>
    5a22:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <__fixsfsi>
    5a26:	9b 01       	movw	r18, r22
    5a28:	70 93 39 04 	sts	0x0439, r23
    5a2c:	60 93 38 04 	sts	0x0438, r22

	if(currentAngle < 0) {
    5a30:	77 ff       	sbrs	r23, 7
    5a32:	06 c0       	rjmp	.+12     	; 0x5a40 <computeAngle+0x96>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    5a34:	28 59       	subi	r18, 0x98	; 152
    5a36:	3e 4f       	sbci	r19, 0xFE	; 254
    5a38:	30 93 39 04 	sts	0x0439, r19
    5a3c:	20 93 38 04 	sts	0x0438, r18
	}

}
    5a40:	1f 91       	pop	r17
    5a42:	0f 91       	pop	r16
    5a44:	ff 90       	pop	r15
    5a46:	ef 90       	pop	r14
    5a48:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;
    5a4a:	10 92 16 02 	sts	0x0216, r1
    5a4e:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(prevPosition == currPosition) {			
    5a50:	90 91 15 02 	lds	r25, 0x0215
    5a54:	98 17       	cp	r25, r24
    5a56:	09 f0       	breq	.+2      	; 0x5a5a <computeAngle+0xb0>
    5a58:	be cf       	rjmp	.-132    	; 0x59d6 <computeAngle+0x2c>
		timesInSamePos++;
    5a5a:	90 91 3a 04 	lds	r25, 0x043A
    5a5e:	9f 5f       	subi	r25, 0xFF	; 255
    5a60:	90 93 3a 04 	sts	0x043A, r25
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    5a64:	95 30       	cpi	r25, 0x05	; 5
    5a66:	08 f4       	brcc	.+2      	; 0x5a6a <computeAngle+0xc0>
    5a68:	b8 cf       	rjmp	.-144    	; 0x59da <computeAngle+0x30>
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    5a6a:	10 92 3a 04 	sts	0x043A, r1
			robotPosition = currPosition;
    5a6e:	80 93 17 02 	sts	0x0217, r24
    5a72:	b3 cf       	rjmp	.-154    	; 0x59da <computeAngle+0x30>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    5a74:	90 95       	com	r25
    5a76:	81 95       	neg	r24
    5a78:	9f 4f       	sbci	r25, 0xFF	; 255
    5a7a:	a1 cf       	rjmp	.-190    	; 0x59be <computeAngle+0x14>

00005a7c <__subsf3>:
    5a7c:	50 58       	subi	r21, 0x80	; 128

00005a7e <__addsf3>:
    5a7e:	bb 27       	eor	r27, r27
    5a80:	aa 27       	eor	r26, r26
    5a82:	0e d0       	rcall	.+28     	; 0x5aa0 <__addsf3x>
    5a84:	ff c1       	rjmp	.+1022   	; 0x5e84 <__fp_round>
    5a86:	c8 d1       	rcall	.+912    	; 0x5e18 <__fp_pscA>
    5a88:	30 f0       	brcs	.+12     	; 0x5a96 <__addsf3+0x18>
    5a8a:	cd d1       	rcall	.+922    	; 0x5e26 <__fp_pscB>
    5a8c:	20 f0       	brcs	.+8      	; 0x5a96 <__addsf3+0x18>
    5a8e:	31 f4       	brne	.+12     	; 0x5a9c <__addsf3+0x1e>
    5a90:	9f 3f       	cpi	r25, 0xFF	; 255
    5a92:	11 f4       	brne	.+4      	; 0x5a98 <__addsf3+0x1a>
    5a94:	1e f4       	brtc	.+6      	; 0x5a9c <__addsf3+0x1e>
    5a96:	98 c1       	rjmp	.+816    	; 0x5dc8 <__fp_nan>
    5a98:	0e f4       	brtc	.+2      	; 0x5a9c <__addsf3+0x1e>
    5a9a:	e0 95       	com	r30
    5a9c:	e7 fb       	bst	r30, 7
    5a9e:	8e c1       	rjmp	.+796    	; 0x5dbc <__fp_inf>

00005aa0 <__addsf3x>:
    5aa0:	e9 2f       	mov	r30, r25
    5aa2:	12 d2       	rcall	.+1060   	; 0x5ec8 <__fp_split3>
    5aa4:	80 f3       	brcs	.-32     	; 0x5a86 <__addsf3+0x8>
    5aa6:	ba 17       	cp	r27, r26
    5aa8:	62 07       	cpc	r22, r18
    5aaa:	73 07       	cpc	r23, r19
    5aac:	84 07       	cpc	r24, r20
    5aae:	95 07       	cpc	r25, r21
    5ab0:	18 f0       	brcs	.+6      	; 0x5ab8 <__addsf3x+0x18>
    5ab2:	71 f4       	brne	.+28     	; 0x5ad0 <__addsf3x+0x30>
    5ab4:	9e f5       	brtc	.+102    	; 0x5b1c <__addsf3x+0x7c>
    5ab6:	2a c2       	rjmp	.+1108   	; 0x5f0c <__fp_zero>
    5ab8:	0e f4       	brtc	.+2      	; 0x5abc <__addsf3x+0x1c>
    5aba:	e0 95       	com	r30
    5abc:	0b 2e       	mov	r0, r27
    5abe:	ba 2f       	mov	r27, r26
    5ac0:	a0 2d       	mov	r26, r0
    5ac2:	0b 01       	movw	r0, r22
    5ac4:	b9 01       	movw	r22, r18
    5ac6:	90 01       	movw	r18, r0
    5ac8:	0c 01       	movw	r0, r24
    5aca:	ca 01       	movw	r24, r20
    5acc:	a0 01       	movw	r20, r0
    5ace:	11 24       	eor	r1, r1
    5ad0:	ff 27       	eor	r31, r31
    5ad2:	59 1b       	sub	r21, r25
    5ad4:	99 f0       	breq	.+38     	; 0x5afc <__addsf3x+0x5c>
    5ad6:	59 3f       	cpi	r21, 0xF9	; 249
    5ad8:	50 f4       	brcc	.+20     	; 0x5aee <__addsf3x+0x4e>
    5ada:	50 3e       	cpi	r21, 0xE0	; 224
    5adc:	68 f1       	brcs	.+90     	; 0x5b38 <__addsf3x+0x98>
    5ade:	1a 16       	cp	r1, r26
    5ae0:	f0 40       	sbci	r31, 0x00	; 0
    5ae2:	a2 2f       	mov	r26, r18
    5ae4:	23 2f       	mov	r18, r19
    5ae6:	34 2f       	mov	r19, r20
    5ae8:	44 27       	eor	r20, r20
    5aea:	58 5f       	subi	r21, 0xF8	; 248
    5aec:	f3 cf       	rjmp	.-26     	; 0x5ad4 <__addsf3x+0x34>
    5aee:	46 95       	lsr	r20
    5af0:	37 95       	ror	r19
    5af2:	27 95       	ror	r18
    5af4:	a7 95       	ror	r26
    5af6:	f0 40       	sbci	r31, 0x00	; 0
    5af8:	53 95       	inc	r21
    5afa:	c9 f7       	brne	.-14     	; 0x5aee <__addsf3x+0x4e>
    5afc:	7e f4       	brtc	.+30     	; 0x5b1c <__addsf3x+0x7c>
    5afe:	1f 16       	cp	r1, r31
    5b00:	ba 0b       	sbc	r27, r26
    5b02:	62 0b       	sbc	r22, r18
    5b04:	73 0b       	sbc	r23, r19
    5b06:	84 0b       	sbc	r24, r20
    5b08:	ba f0       	brmi	.+46     	; 0x5b38 <__addsf3x+0x98>
    5b0a:	91 50       	subi	r25, 0x01	; 1
    5b0c:	a1 f0       	breq	.+40     	; 0x5b36 <__addsf3x+0x96>
    5b0e:	ff 0f       	add	r31, r31
    5b10:	bb 1f       	adc	r27, r27
    5b12:	66 1f       	adc	r22, r22
    5b14:	77 1f       	adc	r23, r23
    5b16:	88 1f       	adc	r24, r24
    5b18:	c2 f7       	brpl	.-16     	; 0x5b0a <__addsf3x+0x6a>
    5b1a:	0e c0       	rjmp	.+28     	; 0x5b38 <__addsf3x+0x98>
    5b1c:	ba 0f       	add	r27, r26
    5b1e:	62 1f       	adc	r22, r18
    5b20:	73 1f       	adc	r23, r19
    5b22:	84 1f       	adc	r24, r20
    5b24:	48 f4       	brcc	.+18     	; 0x5b38 <__addsf3x+0x98>
    5b26:	87 95       	ror	r24
    5b28:	77 95       	ror	r23
    5b2a:	67 95       	ror	r22
    5b2c:	b7 95       	ror	r27
    5b2e:	f7 95       	ror	r31
    5b30:	9e 3f       	cpi	r25, 0xFE	; 254
    5b32:	08 f0       	brcs	.+2      	; 0x5b36 <__addsf3x+0x96>
    5b34:	b3 cf       	rjmp	.-154    	; 0x5a9c <__addsf3+0x1e>
    5b36:	93 95       	inc	r25
    5b38:	88 0f       	add	r24, r24
    5b3a:	08 f0       	brcs	.+2      	; 0x5b3e <__addsf3x+0x9e>
    5b3c:	99 27       	eor	r25, r25
    5b3e:	ee 0f       	add	r30, r30
    5b40:	97 95       	ror	r25
    5b42:	87 95       	ror	r24
    5b44:	08 95       	ret
    5b46:	68 d1       	rcall	.+720    	; 0x5e18 <__fp_pscA>
    5b48:	58 f0       	brcs	.+22     	; 0x5b60 <__addsf3x+0xc0>
    5b4a:	80 e8       	ldi	r24, 0x80	; 128
    5b4c:	91 e0       	ldi	r25, 0x01	; 1
    5b4e:	09 f4       	brne	.+2      	; 0x5b52 <__addsf3x+0xb2>
    5b50:	9e ef       	ldi	r25, 0xFE	; 254
    5b52:	69 d1       	rcall	.+722    	; 0x5e26 <__fp_pscB>
    5b54:	28 f0       	brcs	.+10     	; 0x5b60 <__addsf3x+0xc0>
    5b56:	40 e8       	ldi	r20, 0x80	; 128
    5b58:	51 e0       	ldi	r21, 0x01	; 1
    5b5a:	59 f4       	brne	.+22     	; 0x5b72 <atan2+0xe>
    5b5c:	5e ef       	ldi	r21, 0xFE	; 254
    5b5e:	09 c0       	rjmp	.+18     	; 0x5b72 <atan2+0xe>
    5b60:	33 c1       	rjmp	.+614    	; 0x5dc8 <__fp_nan>
    5b62:	d4 c1       	rjmp	.+936    	; 0x5f0c <__fp_zero>

00005b64 <atan2>:
    5b64:	e9 2f       	mov	r30, r25
    5b66:	e0 78       	andi	r30, 0x80	; 128
    5b68:	af d1       	rcall	.+862    	; 0x5ec8 <__fp_split3>
    5b6a:	68 f3       	brcs	.-38     	; 0x5b46 <__addsf3x+0xa6>
    5b6c:	09 2e       	mov	r0, r25
    5b6e:	05 2a       	or	r0, r21
    5b70:	c1 f3       	breq	.-16     	; 0x5b62 <__addsf3x+0xc2>
    5b72:	26 17       	cp	r18, r22
    5b74:	37 07       	cpc	r19, r23
    5b76:	48 07       	cpc	r20, r24
    5b78:	59 07       	cpc	r21, r25
    5b7a:	38 f0       	brcs	.+14     	; 0x5b8a <atan2+0x26>
    5b7c:	0e 2e       	mov	r0, r30
    5b7e:	07 f8       	bld	r0, 7
    5b80:	e0 25       	eor	r30, r0
    5b82:	69 f0       	breq	.+26     	; 0x5b9e <atan2+0x3a>
    5b84:	e0 25       	eor	r30, r0
    5b86:	e0 64       	ori	r30, 0x40	; 64
    5b88:	0a c0       	rjmp	.+20     	; 0x5b9e <atan2+0x3a>
    5b8a:	ef 63       	ori	r30, 0x3F	; 63
    5b8c:	07 f8       	bld	r0, 7
    5b8e:	00 94       	com	r0
    5b90:	07 fa       	bst	r0, 7
    5b92:	db 01       	movw	r26, r22
    5b94:	b9 01       	movw	r22, r18
    5b96:	9d 01       	movw	r18, r26
    5b98:	dc 01       	movw	r26, r24
    5b9a:	ca 01       	movw	r24, r20
    5b9c:	ad 01       	movw	r20, r26
    5b9e:	ef 93       	push	r30
    5ba0:	46 d0       	rcall	.+140    	; 0x5c2e <__divsf3_pse>
    5ba2:	70 d1       	rcall	.+736    	; 0x5e84 <__fp_round>
    5ba4:	0a d0       	rcall	.+20     	; 0x5bba <atan>
    5ba6:	5f 91       	pop	r21
    5ba8:	55 23       	and	r21, r21
    5baa:	31 f0       	breq	.+12     	; 0x5bb8 <atan2+0x54>
    5bac:	2b ed       	ldi	r18, 0xDB	; 219
    5bae:	3f e0       	ldi	r19, 0x0F	; 15
    5bb0:	49 e4       	ldi	r20, 0x49	; 73
    5bb2:	50 fd       	sbrc	r21, 0
    5bb4:	49 ec       	ldi	r20, 0xC9	; 201
    5bb6:	63 cf       	rjmp	.-314    	; 0x5a7e <__addsf3>
    5bb8:	08 95       	ret

00005bba <atan>:
    5bba:	df 93       	push	r29
    5bbc:	dd 27       	eor	r29, r29
    5bbe:	b9 2f       	mov	r27, r25
    5bc0:	bf 77       	andi	r27, 0x7F	; 127
    5bc2:	40 e8       	ldi	r20, 0x80	; 128
    5bc4:	5f e3       	ldi	r21, 0x3F	; 63
    5bc6:	16 16       	cp	r1, r22
    5bc8:	17 06       	cpc	r1, r23
    5bca:	48 07       	cpc	r20, r24
    5bcc:	5b 07       	cpc	r21, r27
    5bce:	10 f4       	brcc	.+4      	; 0x5bd4 <atan+0x1a>
    5bd0:	d9 2f       	mov	r29, r25
    5bd2:	a3 d1       	rcall	.+838    	; 0x5f1a <inverse>
    5bd4:	9f 93       	push	r25
    5bd6:	8f 93       	push	r24
    5bd8:	7f 93       	push	r23
    5bda:	6f 93       	push	r22
    5bdc:	0e d2       	rcall	.+1052   	; 0x5ffa <square>
    5bde:	ee e4       	ldi	r30, 0x4E	; 78
    5be0:	f1 e0       	ldi	r31, 0x01	; 1
    5be2:	f5 d0       	rcall	.+490    	; 0x5dce <__fp_powser>
    5be4:	4f d1       	rcall	.+670    	; 0x5e84 <__fp_round>
    5be6:	2f 91       	pop	r18
    5be8:	3f 91       	pop	r19
    5bea:	4f 91       	pop	r20
    5bec:	5f 91       	pop	r21
    5bee:	a8 d1       	rcall	.+848    	; 0x5f40 <__mulsf3x>
    5bf0:	dd 23       	and	r29, r29
    5bf2:	49 f0       	breq	.+18     	; 0x5c06 <atan+0x4c>
    5bf4:	90 58       	subi	r25, 0x80	; 128
    5bf6:	a2 ea       	ldi	r26, 0xA2	; 162
    5bf8:	2a ed       	ldi	r18, 0xDA	; 218
    5bfa:	3f e0       	ldi	r19, 0x0F	; 15
    5bfc:	49 ec       	ldi	r20, 0xC9	; 201
    5bfe:	5f e3       	ldi	r21, 0x3F	; 63
    5c00:	d0 78       	andi	r29, 0x80	; 128
    5c02:	5d 27       	eor	r21, r29
    5c04:	4d df       	rcall	.-358    	; 0x5aa0 <__addsf3x>
    5c06:	df 91       	pop	r29
    5c08:	3d c1       	rjmp	.+634    	; 0x5e84 <__fp_round>

00005c0a <cos>:
    5c0a:	15 d1       	rcall	.+554    	; 0x5e36 <__fp_rempio2>
    5c0c:	e3 95       	inc	r30
    5c0e:	4b c1       	rjmp	.+662    	; 0x5ea6 <__fp_sinus>

00005c10 <__divsf3>:
    5c10:	0c d0       	rcall	.+24     	; 0x5c2a <__divsf3x>
    5c12:	38 c1       	rjmp	.+624    	; 0x5e84 <__fp_round>
    5c14:	08 d1       	rcall	.+528    	; 0x5e26 <__fp_pscB>
    5c16:	40 f0       	brcs	.+16     	; 0x5c28 <__divsf3+0x18>
    5c18:	ff d0       	rcall	.+510    	; 0x5e18 <__fp_pscA>
    5c1a:	30 f0       	brcs	.+12     	; 0x5c28 <__divsf3+0x18>
    5c1c:	21 f4       	brne	.+8      	; 0x5c26 <__divsf3+0x16>
    5c1e:	5f 3f       	cpi	r21, 0xFF	; 255
    5c20:	19 f0       	breq	.+6      	; 0x5c28 <__divsf3+0x18>
    5c22:	cc c0       	rjmp	.+408    	; 0x5dbc <__fp_inf>
    5c24:	51 11       	cpse	r21, r1
    5c26:	73 c1       	rjmp	.+742    	; 0x5f0e <__fp_szero>
    5c28:	cf c0       	rjmp	.+414    	; 0x5dc8 <__fp_nan>

00005c2a <__divsf3x>:
    5c2a:	4e d1       	rcall	.+668    	; 0x5ec8 <__fp_split3>
    5c2c:	98 f3       	brcs	.-26     	; 0x5c14 <__divsf3+0x4>

00005c2e <__divsf3_pse>:
    5c2e:	99 23       	and	r25, r25
    5c30:	c9 f3       	breq	.-14     	; 0x5c24 <__divsf3+0x14>
    5c32:	55 23       	and	r21, r21
    5c34:	b1 f3       	breq	.-20     	; 0x5c22 <__divsf3+0x12>
    5c36:	95 1b       	sub	r25, r21
    5c38:	55 0b       	sbc	r21, r21
    5c3a:	bb 27       	eor	r27, r27
    5c3c:	aa 27       	eor	r26, r26
    5c3e:	62 17       	cp	r22, r18
    5c40:	73 07       	cpc	r23, r19
    5c42:	84 07       	cpc	r24, r20
    5c44:	38 f0       	brcs	.+14     	; 0x5c54 <__divsf3_pse+0x26>
    5c46:	9f 5f       	subi	r25, 0xFF	; 255
    5c48:	5f 4f       	sbci	r21, 0xFF	; 255
    5c4a:	22 0f       	add	r18, r18
    5c4c:	33 1f       	adc	r19, r19
    5c4e:	44 1f       	adc	r20, r20
    5c50:	aa 1f       	adc	r26, r26
    5c52:	a9 f3       	breq	.-22     	; 0x5c3e <__divsf3_pse+0x10>
    5c54:	33 d0       	rcall	.+102    	; 0x5cbc <__divsf3_pse+0x8e>
    5c56:	0e 2e       	mov	r0, r30
    5c58:	3a f0       	brmi	.+14     	; 0x5c68 <__divsf3_pse+0x3a>
    5c5a:	e0 e8       	ldi	r30, 0x80	; 128
    5c5c:	30 d0       	rcall	.+96     	; 0x5cbe <__divsf3_pse+0x90>
    5c5e:	91 50       	subi	r25, 0x01	; 1
    5c60:	50 40       	sbci	r21, 0x00	; 0
    5c62:	e6 95       	lsr	r30
    5c64:	00 1c       	adc	r0, r0
    5c66:	ca f7       	brpl	.-14     	; 0x5c5a <__divsf3_pse+0x2c>
    5c68:	29 d0       	rcall	.+82     	; 0x5cbc <__divsf3_pse+0x8e>
    5c6a:	fe 2f       	mov	r31, r30
    5c6c:	27 d0       	rcall	.+78     	; 0x5cbc <__divsf3_pse+0x8e>
    5c6e:	66 0f       	add	r22, r22
    5c70:	77 1f       	adc	r23, r23
    5c72:	88 1f       	adc	r24, r24
    5c74:	bb 1f       	adc	r27, r27
    5c76:	26 17       	cp	r18, r22
    5c78:	37 07       	cpc	r19, r23
    5c7a:	48 07       	cpc	r20, r24
    5c7c:	ab 07       	cpc	r26, r27
    5c7e:	b0 e8       	ldi	r27, 0x80	; 128
    5c80:	09 f0       	breq	.+2      	; 0x5c84 <__divsf3_pse+0x56>
    5c82:	bb 0b       	sbc	r27, r27
    5c84:	80 2d       	mov	r24, r0
    5c86:	bf 01       	movw	r22, r30
    5c88:	ff 27       	eor	r31, r31
    5c8a:	93 58       	subi	r25, 0x83	; 131
    5c8c:	5f 4f       	sbci	r21, 0xFF	; 255
    5c8e:	2a f0       	brmi	.+10     	; 0x5c9a <__divsf3_pse+0x6c>
    5c90:	9e 3f       	cpi	r25, 0xFE	; 254
    5c92:	51 05       	cpc	r21, r1
    5c94:	68 f0       	brcs	.+26     	; 0x5cb0 <__divsf3_pse+0x82>
    5c96:	92 c0       	rjmp	.+292    	; 0x5dbc <__fp_inf>
    5c98:	3a c1       	rjmp	.+628    	; 0x5f0e <__fp_szero>
    5c9a:	5f 3f       	cpi	r21, 0xFF	; 255
    5c9c:	ec f3       	brlt	.-6      	; 0x5c98 <__divsf3_pse+0x6a>
    5c9e:	98 3e       	cpi	r25, 0xE8	; 232
    5ca0:	dc f3       	brlt	.-10     	; 0x5c98 <__divsf3_pse+0x6a>
    5ca2:	86 95       	lsr	r24
    5ca4:	77 95       	ror	r23
    5ca6:	67 95       	ror	r22
    5ca8:	b7 95       	ror	r27
    5caa:	f7 95       	ror	r31
    5cac:	9f 5f       	subi	r25, 0xFF	; 255
    5cae:	c9 f7       	brne	.-14     	; 0x5ca2 <__divsf3_pse+0x74>
    5cb0:	88 0f       	add	r24, r24
    5cb2:	91 1d       	adc	r25, r1
    5cb4:	96 95       	lsr	r25
    5cb6:	87 95       	ror	r24
    5cb8:	97 f9       	bld	r25, 7
    5cba:	08 95       	ret
    5cbc:	e1 e0       	ldi	r30, 0x01	; 1
    5cbe:	66 0f       	add	r22, r22
    5cc0:	77 1f       	adc	r23, r23
    5cc2:	88 1f       	adc	r24, r24
    5cc4:	bb 1f       	adc	r27, r27
    5cc6:	62 17       	cp	r22, r18
    5cc8:	73 07       	cpc	r23, r19
    5cca:	84 07       	cpc	r24, r20
    5ccc:	ba 07       	cpc	r27, r26
    5cce:	20 f0       	brcs	.+8      	; 0x5cd8 <__divsf3_pse+0xaa>
    5cd0:	62 1b       	sub	r22, r18
    5cd2:	73 0b       	sbc	r23, r19
    5cd4:	84 0b       	sbc	r24, r20
    5cd6:	ba 0b       	sbc	r27, r26
    5cd8:	ee 1f       	adc	r30, r30
    5cda:	88 f7       	brcc	.-30     	; 0x5cbe <__divsf3_pse+0x90>
    5cdc:	e0 95       	com	r30
    5cde:	08 95       	ret

00005ce0 <__fixsfsi>:
    5ce0:	04 d0       	rcall	.+8      	; 0x5cea <__fixunssfsi>
    5ce2:	68 94       	set
    5ce4:	b1 11       	cpse	r27, r1
    5ce6:	13 c1       	rjmp	.+550    	; 0x5f0e <__fp_szero>
    5ce8:	08 95       	ret

00005cea <__fixunssfsi>:
    5cea:	f6 d0       	rcall	.+492    	; 0x5ed8 <__fp_splitA>
    5cec:	88 f0       	brcs	.+34     	; 0x5d10 <__fixunssfsi+0x26>
    5cee:	9f 57       	subi	r25, 0x7F	; 127
    5cf0:	90 f0       	brcs	.+36     	; 0x5d16 <__fixunssfsi+0x2c>
    5cf2:	b9 2f       	mov	r27, r25
    5cf4:	99 27       	eor	r25, r25
    5cf6:	b7 51       	subi	r27, 0x17	; 23
    5cf8:	a0 f0       	brcs	.+40     	; 0x5d22 <__fixunssfsi+0x38>
    5cfa:	d1 f0       	breq	.+52     	; 0x5d30 <__fixunssfsi+0x46>
    5cfc:	66 0f       	add	r22, r22
    5cfe:	77 1f       	adc	r23, r23
    5d00:	88 1f       	adc	r24, r24
    5d02:	99 1f       	adc	r25, r25
    5d04:	1a f0       	brmi	.+6      	; 0x5d0c <__fixunssfsi+0x22>
    5d06:	ba 95       	dec	r27
    5d08:	c9 f7       	brne	.-14     	; 0x5cfc <__fixunssfsi+0x12>
    5d0a:	12 c0       	rjmp	.+36     	; 0x5d30 <__fixunssfsi+0x46>
    5d0c:	b1 30       	cpi	r27, 0x01	; 1
    5d0e:	81 f0       	breq	.+32     	; 0x5d30 <__fixunssfsi+0x46>
    5d10:	fd d0       	rcall	.+506    	; 0x5f0c <__fp_zero>
    5d12:	b1 e0       	ldi	r27, 0x01	; 1
    5d14:	08 95       	ret
    5d16:	fa c0       	rjmp	.+500    	; 0x5f0c <__fp_zero>
    5d18:	67 2f       	mov	r22, r23
    5d1a:	78 2f       	mov	r23, r24
    5d1c:	88 27       	eor	r24, r24
    5d1e:	b8 5f       	subi	r27, 0xF8	; 248
    5d20:	39 f0       	breq	.+14     	; 0x5d30 <__fixunssfsi+0x46>
    5d22:	b9 3f       	cpi	r27, 0xF9	; 249
    5d24:	cc f3       	brlt	.-14     	; 0x5d18 <__fixunssfsi+0x2e>
    5d26:	86 95       	lsr	r24
    5d28:	77 95       	ror	r23
    5d2a:	67 95       	ror	r22
    5d2c:	b3 95       	inc	r27
    5d2e:	d9 f7       	brne	.-10     	; 0x5d26 <__fixunssfsi+0x3c>
    5d30:	3e f4       	brtc	.+14     	; 0x5d40 <__fixunssfsi+0x56>
    5d32:	90 95       	com	r25
    5d34:	80 95       	com	r24
    5d36:	70 95       	com	r23
    5d38:	61 95       	neg	r22
    5d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d40:	08 95       	ret

00005d42 <__floatunsisf>:
    5d42:	e8 94       	clt
    5d44:	09 c0       	rjmp	.+18     	; 0x5d58 <__floatsisf+0x12>

00005d46 <__floatsisf>:
    5d46:	97 fb       	bst	r25, 7
    5d48:	3e f4       	brtc	.+14     	; 0x5d58 <__floatsisf+0x12>
    5d4a:	90 95       	com	r25
    5d4c:	80 95       	com	r24
    5d4e:	70 95       	com	r23
    5d50:	61 95       	neg	r22
    5d52:	7f 4f       	sbci	r23, 0xFF	; 255
    5d54:	8f 4f       	sbci	r24, 0xFF	; 255
    5d56:	9f 4f       	sbci	r25, 0xFF	; 255
    5d58:	99 23       	and	r25, r25
    5d5a:	a9 f0       	breq	.+42     	; 0x5d86 <__floatsisf+0x40>
    5d5c:	f9 2f       	mov	r31, r25
    5d5e:	96 e9       	ldi	r25, 0x96	; 150
    5d60:	bb 27       	eor	r27, r27
    5d62:	93 95       	inc	r25
    5d64:	f6 95       	lsr	r31
    5d66:	87 95       	ror	r24
    5d68:	77 95       	ror	r23
    5d6a:	67 95       	ror	r22
    5d6c:	b7 95       	ror	r27
    5d6e:	f1 11       	cpse	r31, r1
    5d70:	f8 cf       	rjmp	.-16     	; 0x5d62 <__floatsisf+0x1c>
    5d72:	fa f4       	brpl	.+62     	; 0x5db2 <__floatsisf+0x6c>
    5d74:	bb 0f       	add	r27, r27
    5d76:	11 f4       	brne	.+4      	; 0x5d7c <__floatsisf+0x36>
    5d78:	60 ff       	sbrs	r22, 0
    5d7a:	1b c0       	rjmp	.+54     	; 0x5db2 <__floatsisf+0x6c>
    5d7c:	6f 5f       	subi	r22, 0xFF	; 255
    5d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d80:	8f 4f       	sbci	r24, 0xFF	; 255
    5d82:	9f 4f       	sbci	r25, 0xFF	; 255
    5d84:	16 c0       	rjmp	.+44     	; 0x5db2 <__floatsisf+0x6c>
    5d86:	88 23       	and	r24, r24
    5d88:	11 f0       	breq	.+4      	; 0x5d8e <__floatsisf+0x48>
    5d8a:	96 e9       	ldi	r25, 0x96	; 150
    5d8c:	11 c0       	rjmp	.+34     	; 0x5db0 <__floatsisf+0x6a>
    5d8e:	77 23       	and	r23, r23
    5d90:	21 f0       	breq	.+8      	; 0x5d9a <__floatsisf+0x54>
    5d92:	9e e8       	ldi	r25, 0x8E	; 142
    5d94:	87 2f       	mov	r24, r23
    5d96:	76 2f       	mov	r23, r22
    5d98:	05 c0       	rjmp	.+10     	; 0x5da4 <__floatsisf+0x5e>
    5d9a:	66 23       	and	r22, r22
    5d9c:	71 f0       	breq	.+28     	; 0x5dba <__floatsisf+0x74>
    5d9e:	96 e8       	ldi	r25, 0x86	; 134
    5da0:	86 2f       	mov	r24, r22
    5da2:	70 e0       	ldi	r23, 0x00	; 0
    5da4:	60 e0       	ldi	r22, 0x00	; 0
    5da6:	2a f0       	brmi	.+10     	; 0x5db2 <__floatsisf+0x6c>
    5da8:	9a 95       	dec	r25
    5daa:	66 0f       	add	r22, r22
    5dac:	77 1f       	adc	r23, r23
    5dae:	88 1f       	adc	r24, r24
    5db0:	da f7       	brpl	.-10     	; 0x5da8 <__floatsisf+0x62>
    5db2:	88 0f       	add	r24, r24
    5db4:	96 95       	lsr	r25
    5db6:	87 95       	ror	r24
    5db8:	97 f9       	bld	r25, 7
    5dba:	08 95       	ret

00005dbc <__fp_inf>:
    5dbc:	97 f9       	bld	r25, 7
    5dbe:	9f 67       	ori	r25, 0x7F	; 127
    5dc0:	80 e8       	ldi	r24, 0x80	; 128
    5dc2:	70 e0       	ldi	r23, 0x00	; 0
    5dc4:	60 e0       	ldi	r22, 0x00	; 0
    5dc6:	08 95       	ret

00005dc8 <__fp_nan>:
    5dc8:	9f ef       	ldi	r25, 0xFF	; 255
    5dca:	80 ec       	ldi	r24, 0xC0	; 192
    5dcc:	08 95       	ret

00005dce <__fp_powser>:
    5dce:	df 93       	push	r29
    5dd0:	cf 93       	push	r28
    5dd2:	1f 93       	push	r17
    5dd4:	0f 93       	push	r16
    5dd6:	ff 92       	push	r15
    5dd8:	ef 92       	push	r14
    5dda:	df 92       	push	r13
    5ddc:	7b 01       	movw	r14, r22
    5dde:	8c 01       	movw	r16, r24
    5de0:	68 94       	set
    5de2:	05 c0       	rjmp	.+10     	; 0x5dee <__fp_powser+0x20>
    5de4:	da 2e       	mov	r13, r26
    5de6:	ef 01       	movw	r28, r30
    5de8:	ab d0       	rcall	.+342    	; 0x5f40 <__mulsf3x>
    5dea:	fe 01       	movw	r30, r28
    5dec:	e8 94       	clt
    5dee:	a5 91       	lpm	r26, Z+
    5df0:	25 91       	lpm	r18, Z+
    5df2:	35 91       	lpm	r19, Z+
    5df4:	45 91       	lpm	r20, Z+
    5df6:	55 91       	lpm	r21, Z+
    5df8:	ae f3       	brts	.-22     	; 0x5de4 <__fp_powser+0x16>
    5dfa:	ef 01       	movw	r28, r30
    5dfc:	51 de       	rcall	.-862    	; 0x5aa0 <__addsf3x>
    5dfe:	fe 01       	movw	r30, r28
    5e00:	97 01       	movw	r18, r14
    5e02:	a8 01       	movw	r20, r16
    5e04:	da 94       	dec	r13
    5e06:	79 f7       	brne	.-34     	; 0x5de6 <__fp_powser+0x18>
    5e08:	df 90       	pop	r13
    5e0a:	ef 90       	pop	r14
    5e0c:	ff 90       	pop	r15
    5e0e:	0f 91       	pop	r16
    5e10:	1f 91       	pop	r17
    5e12:	cf 91       	pop	r28
    5e14:	df 91       	pop	r29
    5e16:	08 95       	ret

00005e18 <__fp_pscA>:
    5e18:	00 24       	eor	r0, r0
    5e1a:	0a 94       	dec	r0
    5e1c:	16 16       	cp	r1, r22
    5e1e:	17 06       	cpc	r1, r23
    5e20:	18 06       	cpc	r1, r24
    5e22:	09 06       	cpc	r0, r25
    5e24:	08 95       	ret

00005e26 <__fp_pscB>:
    5e26:	00 24       	eor	r0, r0
    5e28:	0a 94       	dec	r0
    5e2a:	12 16       	cp	r1, r18
    5e2c:	13 06       	cpc	r1, r19
    5e2e:	14 06       	cpc	r1, r20
    5e30:	05 06       	cpc	r0, r21
    5e32:	08 95       	ret
    5e34:	c9 cf       	rjmp	.-110    	; 0x5dc8 <__fp_nan>

00005e36 <__fp_rempio2>:
    5e36:	50 d0       	rcall	.+160    	; 0x5ed8 <__fp_splitA>
    5e38:	e8 f3       	brcs	.-6      	; 0x5e34 <__fp_pscB+0xe>
    5e3a:	e8 94       	clt
    5e3c:	e0 e0       	ldi	r30, 0x00	; 0
    5e3e:	bb 27       	eor	r27, r27
    5e40:	9f 57       	subi	r25, 0x7F	; 127
    5e42:	f0 f0       	brcs	.+60     	; 0x5e80 <__fp_rempio2+0x4a>
    5e44:	2a ed       	ldi	r18, 0xDA	; 218
    5e46:	3f e0       	ldi	r19, 0x0F	; 15
    5e48:	49 ec       	ldi	r20, 0xC9	; 201
    5e4a:	06 c0       	rjmp	.+12     	; 0x5e58 <__fp_rempio2+0x22>
    5e4c:	ee 0f       	add	r30, r30
    5e4e:	bb 0f       	add	r27, r27
    5e50:	66 1f       	adc	r22, r22
    5e52:	77 1f       	adc	r23, r23
    5e54:	88 1f       	adc	r24, r24
    5e56:	28 f0       	brcs	.+10     	; 0x5e62 <__fp_rempio2+0x2c>
    5e58:	b2 3a       	cpi	r27, 0xA2	; 162
    5e5a:	62 07       	cpc	r22, r18
    5e5c:	73 07       	cpc	r23, r19
    5e5e:	84 07       	cpc	r24, r20
    5e60:	28 f0       	brcs	.+10     	; 0x5e6c <__fp_rempio2+0x36>
    5e62:	b2 5a       	subi	r27, 0xA2	; 162
    5e64:	62 0b       	sbc	r22, r18
    5e66:	73 0b       	sbc	r23, r19
    5e68:	84 0b       	sbc	r24, r20
    5e6a:	e3 95       	inc	r30
    5e6c:	9a 95       	dec	r25
    5e6e:	72 f7       	brpl	.-36     	; 0x5e4c <__fp_rempio2+0x16>
    5e70:	80 38       	cpi	r24, 0x80	; 128
    5e72:	30 f4       	brcc	.+12     	; 0x5e80 <__fp_rempio2+0x4a>
    5e74:	9a 95       	dec	r25
    5e76:	bb 0f       	add	r27, r27
    5e78:	66 1f       	adc	r22, r22
    5e7a:	77 1f       	adc	r23, r23
    5e7c:	88 1f       	adc	r24, r24
    5e7e:	d2 f7       	brpl	.-12     	; 0x5e74 <__fp_rempio2+0x3e>
    5e80:	90 48       	sbci	r25, 0x80	; 128
    5e82:	c0 c0       	rjmp	.+384    	; 0x6004 <__fp_mpack_finite>

00005e84 <__fp_round>:
    5e84:	09 2e       	mov	r0, r25
    5e86:	03 94       	inc	r0
    5e88:	00 0c       	add	r0, r0
    5e8a:	11 f4       	brne	.+4      	; 0x5e90 <__fp_round+0xc>
    5e8c:	88 23       	and	r24, r24
    5e8e:	52 f0       	brmi	.+20     	; 0x5ea4 <__fp_round+0x20>
    5e90:	bb 0f       	add	r27, r27
    5e92:	40 f4       	brcc	.+16     	; 0x5ea4 <__fp_round+0x20>
    5e94:	bf 2b       	or	r27, r31
    5e96:	11 f4       	brne	.+4      	; 0x5e9c <__fp_round+0x18>
    5e98:	60 ff       	sbrs	r22, 0
    5e9a:	04 c0       	rjmp	.+8      	; 0x5ea4 <__fp_round+0x20>
    5e9c:	6f 5f       	subi	r22, 0xFF	; 255
    5e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    5ea0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ea4:	08 95       	ret

00005ea6 <__fp_sinus>:
    5ea6:	ef 93       	push	r30
    5ea8:	e0 ff       	sbrs	r30, 0
    5eaa:	06 c0       	rjmp	.+12     	; 0x5eb8 <__fp_sinus+0x12>
    5eac:	a2 ea       	ldi	r26, 0xA2	; 162
    5eae:	2a ed       	ldi	r18, 0xDA	; 218
    5eb0:	3f e0       	ldi	r19, 0x0F	; 15
    5eb2:	49 ec       	ldi	r20, 0xC9	; 201
    5eb4:	5f eb       	ldi	r21, 0xBF	; 191
    5eb6:	f4 dd       	rcall	.-1048   	; 0x5aa0 <__addsf3x>
    5eb8:	e5 df       	rcall	.-54     	; 0x5e84 <__fp_round>
    5eba:	0f 90       	pop	r0
    5ebc:	03 94       	inc	r0
    5ebe:	01 fc       	sbrc	r0, 1
    5ec0:	90 58       	subi	r25, 0x80	; 128
    5ec2:	eb e7       	ldi	r30, 0x7B	; 123
    5ec4:	f1 e0       	ldi	r31, 0x01	; 1
    5ec6:	aa c0       	rjmp	.+340    	; 0x601c <__fp_powsodd>

00005ec8 <__fp_split3>:
    5ec8:	57 fd       	sbrc	r21, 7
    5eca:	90 58       	subi	r25, 0x80	; 128
    5ecc:	44 0f       	add	r20, r20
    5ece:	55 1f       	adc	r21, r21
    5ed0:	59 f0       	breq	.+22     	; 0x5ee8 <__fp_splitA+0x10>
    5ed2:	5f 3f       	cpi	r21, 0xFF	; 255
    5ed4:	71 f0       	breq	.+28     	; 0x5ef2 <__fp_splitA+0x1a>
    5ed6:	47 95       	ror	r20

00005ed8 <__fp_splitA>:
    5ed8:	88 0f       	add	r24, r24
    5eda:	97 fb       	bst	r25, 7
    5edc:	99 1f       	adc	r25, r25
    5ede:	61 f0       	breq	.+24     	; 0x5ef8 <__fp_splitA+0x20>
    5ee0:	9f 3f       	cpi	r25, 0xFF	; 255
    5ee2:	79 f0       	breq	.+30     	; 0x5f02 <__fp_splitA+0x2a>
    5ee4:	87 95       	ror	r24
    5ee6:	08 95       	ret
    5ee8:	12 16       	cp	r1, r18
    5eea:	13 06       	cpc	r1, r19
    5eec:	14 06       	cpc	r1, r20
    5eee:	55 1f       	adc	r21, r21
    5ef0:	f2 cf       	rjmp	.-28     	; 0x5ed6 <__fp_split3+0xe>
    5ef2:	46 95       	lsr	r20
    5ef4:	f1 df       	rcall	.-30     	; 0x5ed8 <__fp_splitA>
    5ef6:	08 c0       	rjmp	.+16     	; 0x5f08 <__fp_splitA+0x30>
    5ef8:	16 16       	cp	r1, r22
    5efa:	17 06       	cpc	r1, r23
    5efc:	18 06       	cpc	r1, r24
    5efe:	99 1f       	adc	r25, r25
    5f00:	f1 cf       	rjmp	.-30     	; 0x5ee4 <__fp_splitA+0xc>
    5f02:	86 95       	lsr	r24
    5f04:	71 05       	cpc	r23, r1
    5f06:	61 05       	cpc	r22, r1
    5f08:	08 94       	sec
    5f0a:	08 95       	ret

00005f0c <__fp_zero>:
    5f0c:	e8 94       	clt

00005f0e <__fp_szero>:
    5f0e:	bb 27       	eor	r27, r27
    5f10:	66 27       	eor	r22, r22
    5f12:	77 27       	eor	r23, r23
    5f14:	cb 01       	movw	r24, r22
    5f16:	97 f9       	bld	r25, 7
    5f18:	08 95       	ret

00005f1a <inverse>:
    5f1a:	9b 01       	movw	r18, r22
    5f1c:	ac 01       	movw	r20, r24
    5f1e:	60 e0       	ldi	r22, 0x00	; 0
    5f20:	70 e0       	ldi	r23, 0x00	; 0
    5f22:	80 e8       	ldi	r24, 0x80	; 128
    5f24:	9f e3       	ldi	r25, 0x3F	; 63
    5f26:	74 ce       	rjmp	.-792    	; 0x5c10 <__divsf3>

00005f28 <__mulsf3>:
    5f28:	0b d0       	rcall	.+22     	; 0x5f40 <__mulsf3x>
    5f2a:	ac cf       	rjmp	.-168    	; 0x5e84 <__fp_round>
    5f2c:	75 df       	rcall	.-278    	; 0x5e18 <__fp_pscA>
    5f2e:	28 f0       	brcs	.+10     	; 0x5f3a <__mulsf3+0x12>
    5f30:	7a df       	rcall	.-268    	; 0x5e26 <__fp_pscB>
    5f32:	18 f0       	brcs	.+6      	; 0x5f3a <__mulsf3+0x12>
    5f34:	95 23       	and	r25, r21
    5f36:	09 f0       	breq	.+2      	; 0x5f3a <__mulsf3+0x12>
    5f38:	41 cf       	rjmp	.-382    	; 0x5dbc <__fp_inf>
    5f3a:	46 cf       	rjmp	.-372    	; 0x5dc8 <__fp_nan>
    5f3c:	11 24       	eor	r1, r1
    5f3e:	e7 cf       	rjmp	.-50     	; 0x5f0e <__fp_szero>

00005f40 <__mulsf3x>:
    5f40:	c3 df       	rcall	.-122    	; 0x5ec8 <__fp_split3>
    5f42:	a0 f3       	brcs	.-24     	; 0x5f2c <__mulsf3+0x4>

00005f44 <__mulsf3_pse>:
    5f44:	95 9f       	mul	r25, r21
    5f46:	d1 f3       	breq	.-12     	; 0x5f3c <__mulsf3+0x14>
    5f48:	95 0f       	add	r25, r21
    5f4a:	50 e0       	ldi	r21, 0x00	; 0
    5f4c:	55 1f       	adc	r21, r21
    5f4e:	62 9f       	mul	r22, r18
    5f50:	f0 01       	movw	r30, r0
    5f52:	72 9f       	mul	r23, r18
    5f54:	bb 27       	eor	r27, r27
    5f56:	f0 0d       	add	r31, r0
    5f58:	b1 1d       	adc	r27, r1
    5f5a:	63 9f       	mul	r22, r19
    5f5c:	aa 27       	eor	r26, r26
    5f5e:	f0 0d       	add	r31, r0
    5f60:	b1 1d       	adc	r27, r1
    5f62:	aa 1f       	adc	r26, r26
    5f64:	64 9f       	mul	r22, r20
    5f66:	66 27       	eor	r22, r22
    5f68:	b0 0d       	add	r27, r0
    5f6a:	a1 1d       	adc	r26, r1
    5f6c:	66 1f       	adc	r22, r22
    5f6e:	82 9f       	mul	r24, r18
    5f70:	22 27       	eor	r18, r18
    5f72:	b0 0d       	add	r27, r0
    5f74:	a1 1d       	adc	r26, r1
    5f76:	62 1f       	adc	r22, r18
    5f78:	73 9f       	mul	r23, r19
    5f7a:	b0 0d       	add	r27, r0
    5f7c:	a1 1d       	adc	r26, r1
    5f7e:	62 1f       	adc	r22, r18
    5f80:	83 9f       	mul	r24, r19
    5f82:	a0 0d       	add	r26, r0
    5f84:	61 1d       	adc	r22, r1
    5f86:	22 1f       	adc	r18, r18
    5f88:	74 9f       	mul	r23, r20
    5f8a:	33 27       	eor	r19, r19
    5f8c:	a0 0d       	add	r26, r0
    5f8e:	61 1d       	adc	r22, r1
    5f90:	23 1f       	adc	r18, r19
    5f92:	84 9f       	mul	r24, r20
    5f94:	60 0d       	add	r22, r0
    5f96:	21 1d       	adc	r18, r1
    5f98:	82 2f       	mov	r24, r18
    5f9a:	76 2f       	mov	r23, r22
    5f9c:	6a 2f       	mov	r22, r26
    5f9e:	11 24       	eor	r1, r1
    5fa0:	9f 57       	subi	r25, 0x7F	; 127
    5fa2:	50 40       	sbci	r21, 0x00	; 0
    5fa4:	8a f0       	brmi	.+34     	; 0x5fc8 <__mulsf3_pse+0x84>
    5fa6:	e1 f0       	breq	.+56     	; 0x5fe0 <__mulsf3_pse+0x9c>
    5fa8:	88 23       	and	r24, r24
    5faa:	4a f0       	brmi	.+18     	; 0x5fbe <__mulsf3_pse+0x7a>
    5fac:	ee 0f       	add	r30, r30
    5fae:	ff 1f       	adc	r31, r31
    5fb0:	bb 1f       	adc	r27, r27
    5fb2:	66 1f       	adc	r22, r22
    5fb4:	77 1f       	adc	r23, r23
    5fb6:	88 1f       	adc	r24, r24
    5fb8:	91 50       	subi	r25, 0x01	; 1
    5fba:	50 40       	sbci	r21, 0x00	; 0
    5fbc:	a9 f7       	brne	.-22     	; 0x5fa8 <__mulsf3_pse+0x64>
    5fbe:	9e 3f       	cpi	r25, 0xFE	; 254
    5fc0:	51 05       	cpc	r21, r1
    5fc2:	70 f0       	brcs	.+28     	; 0x5fe0 <__mulsf3_pse+0x9c>
    5fc4:	fb ce       	rjmp	.-522    	; 0x5dbc <__fp_inf>
    5fc6:	a3 cf       	rjmp	.-186    	; 0x5f0e <__fp_szero>
    5fc8:	5f 3f       	cpi	r21, 0xFF	; 255
    5fca:	ec f3       	brlt	.-6      	; 0x5fc6 <__mulsf3_pse+0x82>
    5fcc:	98 3e       	cpi	r25, 0xE8	; 232
    5fce:	dc f3       	brlt	.-10     	; 0x5fc6 <__mulsf3_pse+0x82>
    5fd0:	86 95       	lsr	r24
    5fd2:	77 95       	ror	r23
    5fd4:	67 95       	ror	r22
    5fd6:	b7 95       	ror	r27
    5fd8:	f7 95       	ror	r31
    5fda:	e7 95       	ror	r30
    5fdc:	9f 5f       	subi	r25, 0xFF	; 255
    5fde:	c1 f7       	brne	.-16     	; 0x5fd0 <__mulsf3_pse+0x8c>
    5fe0:	fe 2b       	or	r31, r30
    5fe2:	88 0f       	add	r24, r24
    5fe4:	91 1d       	adc	r25, r1
    5fe6:	96 95       	lsr	r25
    5fe8:	87 95       	ror	r24
    5fea:	97 f9       	bld	r25, 7
    5fec:	08 95       	ret

00005fee <sin>:
    5fee:	9f 93       	push	r25
    5ff0:	22 df       	rcall	.-444    	; 0x5e36 <__fp_rempio2>
    5ff2:	0f 90       	pop	r0
    5ff4:	07 fc       	sbrc	r0, 7
    5ff6:	ee 5f       	subi	r30, 0xFE	; 254
    5ff8:	56 cf       	rjmp	.-340    	; 0x5ea6 <__fp_sinus>

00005ffa <square>:
    5ffa:	9b 01       	movw	r18, r22
    5ffc:	ac 01       	movw	r20, r24
    5ffe:	94 cf       	rjmp	.-216    	; 0x5f28 <__mulsf3>

00006000 <__fp_mpack>:
    6000:	9f 3f       	cpi	r25, 0xFF	; 255
    6002:	31 f0       	breq	.+12     	; 0x6010 <__fp_mpack_finite+0xc>

00006004 <__fp_mpack_finite>:
    6004:	91 50       	subi	r25, 0x01	; 1
    6006:	20 f4       	brcc	.+8      	; 0x6010 <__fp_mpack_finite+0xc>
    6008:	87 95       	ror	r24
    600a:	77 95       	ror	r23
    600c:	67 95       	ror	r22
    600e:	b7 95       	ror	r27
    6010:	88 0f       	add	r24, r24
    6012:	91 1d       	adc	r25, r1
    6014:	96 95       	lsr	r25
    6016:	87 95       	ror	r24
    6018:	97 f9       	bld	r25, 7
    601a:	08 95       	ret

0000601c <__fp_powsodd>:
    601c:	9f 93       	push	r25
    601e:	8f 93       	push	r24
    6020:	7f 93       	push	r23
    6022:	6f 93       	push	r22
    6024:	ff 93       	push	r31
    6026:	ef 93       	push	r30
    6028:	9b 01       	movw	r18, r22
    602a:	ac 01       	movw	r20, r24
    602c:	7d df       	rcall	.-262    	; 0x5f28 <__mulsf3>
    602e:	ef 91       	pop	r30
    6030:	ff 91       	pop	r31
    6032:	cd de       	rcall	.-614    	; 0x5dce <__fp_powser>
    6034:	2f 91       	pop	r18
    6036:	3f 91       	pop	r19
    6038:	4f 91       	pop	r20
    603a:	5f 91       	pop	r21
    603c:	75 cf       	rjmp	.-278    	; 0x5f28 <__mulsf3>

0000603e <__mulsi3>:
    603e:	62 9f       	mul	r22, r18
    6040:	d0 01       	movw	r26, r0
    6042:	73 9f       	mul	r23, r19
    6044:	f0 01       	movw	r30, r0
    6046:	82 9f       	mul	r24, r18
    6048:	e0 0d       	add	r30, r0
    604a:	f1 1d       	adc	r31, r1
    604c:	64 9f       	mul	r22, r20
    604e:	e0 0d       	add	r30, r0
    6050:	f1 1d       	adc	r31, r1
    6052:	92 9f       	mul	r25, r18
    6054:	f0 0d       	add	r31, r0
    6056:	83 9f       	mul	r24, r19
    6058:	f0 0d       	add	r31, r0
    605a:	74 9f       	mul	r23, r20
    605c:	f0 0d       	add	r31, r0
    605e:	65 9f       	mul	r22, r21
    6060:	f0 0d       	add	r31, r0
    6062:	99 27       	eor	r25, r25
    6064:	72 9f       	mul	r23, r18
    6066:	b0 0d       	add	r27, r0
    6068:	e1 1d       	adc	r30, r1
    606a:	f9 1f       	adc	r31, r25
    606c:	63 9f       	mul	r22, r19
    606e:	b0 0d       	add	r27, r0
    6070:	e1 1d       	adc	r30, r1
    6072:	f9 1f       	adc	r31, r25
    6074:	bd 01       	movw	r22, r26
    6076:	cf 01       	movw	r24, r30
    6078:	11 24       	eor	r1, r1
    607a:	08 95       	ret

0000607c <__udivmodhi4>:
    607c:	aa 1b       	sub	r26, r26
    607e:	bb 1b       	sub	r27, r27
    6080:	51 e1       	ldi	r21, 0x11	; 17
    6082:	07 c0       	rjmp	.+14     	; 0x6092 <__udivmodhi4_ep>

00006084 <__udivmodhi4_loop>:
    6084:	aa 1f       	adc	r26, r26
    6086:	bb 1f       	adc	r27, r27
    6088:	a6 17       	cp	r26, r22
    608a:	b7 07       	cpc	r27, r23
    608c:	10 f0       	brcs	.+4      	; 0x6092 <__udivmodhi4_ep>
    608e:	a6 1b       	sub	r26, r22
    6090:	b7 0b       	sbc	r27, r23

00006092 <__udivmodhi4_ep>:
    6092:	88 1f       	adc	r24, r24
    6094:	99 1f       	adc	r25, r25
    6096:	5a 95       	dec	r21
    6098:	a9 f7       	brne	.-22     	; 0x6084 <__udivmodhi4_loop>
    609a:	80 95       	com	r24
    609c:	90 95       	com	r25
    609e:	bc 01       	movw	r22, r24
    60a0:	cd 01       	movw	r24, r26
    60a2:	08 95       	ret

000060a4 <__divmodhi4>:
    60a4:	97 fb       	bst	r25, 7
    60a6:	09 2e       	mov	r0, r25
    60a8:	07 26       	eor	r0, r23
    60aa:	0a d0       	rcall	.+20     	; 0x60c0 <__divmodhi4_neg1>
    60ac:	77 fd       	sbrc	r23, 7
    60ae:	04 d0       	rcall	.+8      	; 0x60b8 <__divmodhi4_neg2>
    60b0:	e5 df       	rcall	.-54     	; 0x607c <__udivmodhi4>
    60b2:	06 d0       	rcall	.+12     	; 0x60c0 <__divmodhi4_neg1>
    60b4:	00 20       	and	r0, r0
    60b6:	1a f4       	brpl	.+6      	; 0x60be <__divmodhi4_exit>

000060b8 <__divmodhi4_neg2>:
    60b8:	70 95       	com	r23
    60ba:	61 95       	neg	r22
    60bc:	7f 4f       	sbci	r23, 0xFF	; 255

000060be <__divmodhi4_exit>:
    60be:	08 95       	ret

000060c0 <__divmodhi4_neg1>:
    60c0:	f6 f7       	brtc	.-4      	; 0x60be <__divmodhi4_exit>
    60c2:	90 95       	com	r25
    60c4:	81 95       	neg	r24
    60c6:	9f 4f       	sbci	r25, 0xFF	; 255
    60c8:	08 95       	ret

000060ca <do_rand>:
    60ca:	af 92       	push	r10
    60cc:	bf 92       	push	r11
    60ce:	cf 92       	push	r12
    60d0:	df 92       	push	r13
    60d2:	ef 92       	push	r14
    60d4:	ff 92       	push	r15
    60d6:	0f 93       	push	r16
    60d8:	1f 93       	push	r17
    60da:	cf 93       	push	r28
    60dc:	df 93       	push	r29
    60de:	ec 01       	movw	r28, r24
    60e0:	68 81       	ld	r22, Y
    60e2:	79 81       	ldd	r23, Y+1	; 0x01
    60e4:	8a 81       	ldd	r24, Y+2	; 0x02
    60e6:	9b 81       	ldd	r25, Y+3	; 0x03
    60e8:	61 15       	cp	r22, r1
    60ea:	71 05       	cpc	r23, r1
    60ec:	81 05       	cpc	r24, r1
    60ee:	91 05       	cpc	r25, r1
    60f0:	21 f4       	brne	.+8      	; 0x60fa <do_rand+0x30>
    60f2:	64 e2       	ldi	r22, 0x24	; 36
    60f4:	79 ed       	ldi	r23, 0xD9	; 217
    60f6:	8b e5       	ldi	r24, 0x5B	; 91
    60f8:	97 e0       	ldi	r25, 0x07	; 7
    60fa:	2d e1       	ldi	r18, 0x1D	; 29
    60fc:	33 ef       	ldi	r19, 0xF3	; 243
    60fe:	41 e0       	ldi	r20, 0x01	; 1
    6100:	50 e0       	ldi	r21, 0x00	; 0
    6102:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__divmodsi4>
    6106:	79 01       	movw	r14, r18
    6108:	8a 01       	movw	r16, r20
    610a:	27 ea       	ldi	r18, 0xA7	; 167
    610c:	31 e4       	ldi	r19, 0x41	; 65
    610e:	40 e0       	ldi	r20, 0x00	; 0
    6110:	50 e0       	ldi	r21, 0x00	; 0
    6112:	0e 94 1f 30 	call	0x603e	; 0x603e <__mulsi3>
    6116:	5b 01       	movw	r10, r22
    6118:	6c 01       	movw	r12, r24
    611a:	c8 01       	movw	r24, r16
    611c:	b7 01       	movw	r22, r14
    611e:	2c ee       	ldi	r18, 0xEC	; 236
    6120:	34 ef       	ldi	r19, 0xF4	; 244
    6122:	4f ef       	ldi	r20, 0xFF	; 255
    6124:	5f ef       	ldi	r21, 0xFF	; 255
    6126:	0e 94 1f 30 	call	0x603e	; 0x603e <__mulsi3>
    612a:	6a 0d       	add	r22, r10
    612c:	7b 1d       	adc	r23, r11
    612e:	8c 1d       	adc	r24, r12
    6130:	9d 1d       	adc	r25, r13
    6132:	97 ff       	sbrs	r25, 7
    6134:	04 c0       	rjmp	.+8      	; 0x613e <do_rand+0x74>
    6136:	61 50       	subi	r22, 0x01	; 1
    6138:	70 40       	sbci	r23, 0x00	; 0
    613a:	80 40       	sbci	r24, 0x00	; 0
    613c:	90 48       	sbci	r25, 0x80	; 128
    613e:	68 83       	st	Y, r22
    6140:	79 83       	std	Y+1, r23	; 0x01
    6142:	8a 83       	std	Y+2, r24	; 0x02
    6144:	9b 83       	std	Y+3, r25	; 0x03
    6146:	7f 77       	andi	r23, 0x7F	; 127
    6148:	cb 01       	movw	r24, r22
    614a:	df 91       	pop	r29
    614c:	cf 91       	pop	r28
    614e:	1f 91       	pop	r17
    6150:	0f 91       	pop	r16
    6152:	ff 90       	pop	r15
    6154:	ef 90       	pop	r14
    6156:	df 90       	pop	r13
    6158:	cf 90       	pop	r12
    615a:	bf 90       	pop	r11
    615c:	af 90       	pop	r10
    615e:	08 95       	ret

00006160 <rand_r>:
    6160:	0e 94 65 30 	call	0x60ca	; 0x60ca <do_rand>
    6164:	08 95       	ret

00006166 <rand>:
    6166:	89 e1       	ldi	r24, 0x19	; 25
    6168:	92 e0       	ldi	r25, 0x02	; 2
    616a:	0e 94 65 30 	call	0x60ca	; 0x60ca <do_rand>
    616e:	08 95       	ret

00006170 <srand>:
    6170:	a0 e0       	ldi	r26, 0x00	; 0
    6172:	b0 e0       	ldi	r27, 0x00	; 0
    6174:	80 93 19 02 	sts	0x0219, r24
    6178:	90 93 1a 02 	sts	0x021A, r25
    617c:	a0 93 1b 02 	sts	0x021B, r26
    6180:	b0 93 1c 02 	sts	0x021C, r27
    6184:	08 95       	ret

00006186 <__eerd_byte_m2560>:
    6186:	f9 99       	sbic	0x1f, 1	; 31
    6188:	fe cf       	rjmp	.-4      	; 0x6186 <__eerd_byte_m2560>
    618a:	92 bd       	out	0x22, r25	; 34
    618c:	81 bd       	out	0x21, r24	; 33
    618e:	f8 9a       	sbi	0x1f, 0	; 31
    6190:	99 27       	eor	r25, r25
    6192:	80 b5       	in	r24, 0x20	; 32
    6194:	08 95       	ret

00006196 <__eerd_word_m2560>:
    6196:	a8 e1       	ldi	r26, 0x18	; 24
    6198:	b0 e0       	ldi	r27, 0x00	; 0
    619a:	42 e0       	ldi	r20, 0x02	; 2
    619c:	50 e0       	ldi	r21, 0x00	; 0
    619e:	0c 94 e6 30 	jmp	0x61cc	; 0x61cc <__eerd_blraw_m2560>

000061a2 <__eewr_byte_m2560>:
    61a2:	26 2f       	mov	r18, r22

000061a4 <__eewr_r18_m2560>:
    61a4:	f9 99       	sbic	0x1f, 1	; 31
    61a6:	fe cf       	rjmp	.-4      	; 0x61a4 <__eewr_r18_m2560>
    61a8:	1f ba       	out	0x1f, r1	; 31
    61aa:	92 bd       	out	0x22, r25	; 34
    61ac:	81 bd       	out	0x21, r24	; 33
    61ae:	20 bd       	out	0x20, r18	; 32
    61b0:	0f b6       	in	r0, 0x3f	; 63
    61b2:	f8 94       	cli
    61b4:	fa 9a       	sbi	0x1f, 2	; 31
    61b6:	f9 9a       	sbi	0x1f, 1	; 31
    61b8:	0f be       	out	0x3f, r0	; 63
    61ba:	01 96       	adiw	r24, 0x01	; 1
    61bc:	08 95       	ret

000061be <__eewr_word_m2560>:
    61be:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__eewr_byte_m2560>
    61c2:	27 2f       	mov	r18, r23
    61c4:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <__eewr_r18_m2560>

000061c8 <__eerd_block_m2560>:
    61c8:	dc 01       	movw	r26, r24
    61ca:	cb 01       	movw	r24, r22

000061cc <__eerd_blraw_m2560>:
    61cc:	fc 01       	movw	r30, r24
    61ce:	f9 99       	sbic	0x1f, 1	; 31
    61d0:	fe cf       	rjmp	.-4      	; 0x61ce <__eerd_blraw_m2560+0x2>
    61d2:	06 c0       	rjmp	.+12     	; 0x61e0 <__eerd_blraw_m2560+0x14>
    61d4:	f2 bd       	out	0x22, r31	; 34
    61d6:	e1 bd       	out	0x21, r30	; 33
    61d8:	f8 9a       	sbi	0x1f, 0	; 31
    61da:	31 96       	adiw	r30, 0x01	; 1
    61dc:	00 b4       	in	r0, 0x20	; 32
    61de:	0d 92       	st	X+, r0
    61e0:	41 50       	subi	r20, 0x01	; 1
    61e2:	50 40       	sbci	r21, 0x00	; 0
    61e4:	b8 f7       	brcc	.-18     	; 0x61d4 <__eerd_blraw_m2560+0x8>
    61e6:	08 95       	ret

000061e8 <__divmodsi4>:
    61e8:	97 fb       	bst	r25, 7
    61ea:	09 2e       	mov	r0, r25
    61ec:	05 26       	eor	r0, r21
    61ee:	0e d0       	rcall	.+28     	; 0x620c <__divmodsi4_neg1>
    61f0:	57 fd       	sbrc	r21, 7
    61f2:	04 d0       	rcall	.+8      	; 0x61fc <__divmodsi4_neg2>
    61f4:	14 d0       	rcall	.+40     	; 0x621e <__udivmodsi4>
    61f6:	0a d0       	rcall	.+20     	; 0x620c <__divmodsi4_neg1>
    61f8:	00 1c       	adc	r0, r0
    61fa:	38 f4       	brcc	.+14     	; 0x620a <__divmodsi4_exit>

000061fc <__divmodsi4_neg2>:
    61fc:	50 95       	com	r21
    61fe:	40 95       	com	r20
    6200:	30 95       	com	r19
    6202:	21 95       	neg	r18
    6204:	3f 4f       	sbci	r19, 0xFF	; 255
    6206:	4f 4f       	sbci	r20, 0xFF	; 255
    6208:	5f 4f       	sbci	r21, 0xFF	; 255

0000620a <__divmodsi4_exit>:
    620a:	08 95       	ret

0000620c <__divmodsi4_neg1>:
    620c:	f6 f7       	brtc	.-4      	; 0x620a <__divmodsi4_exit>
    620e:	90 95       	com	r25
    6210:	80 95       	com	r24
    6212:	70 95       	com	r23
    6214:	61 95       	neg	r22
    6216:	7f 4f       	sbci	r23, 0xFF	; 255
    6218:	8f 4f       	sbci	r24, 0xFF	; 255
    621a:	9f 4f       	sbci	r25, 0xFF	; 255
    621c:	08 95       	ret

0000621e <__udivmodsi4>:
    621e:	a1 e2       	ldi	r26, 0x21	; 33
    6220:	1a 2e       	mov	r1, r26
    6222:	aa 1b       	sub	r26, r26
    6224:	bb 1b       	sub	r27, r27
    6226:	fd 01       	movw	r30, r26
    6228:	0d c0       	rjmp	.+26     	; 0x6244 <__udivmodsi4_ep>

0000622a <__udivmodsi4_loop>:
    622a:	aa 1f       	adc	r26, r26
    622c:	bb 1f       	adc	r27, r27
    622e:	ee 1f       	adc	r30, r30
    6230:	ff 1f       	adc	r31, r31
    6232:	a2 17       	cp	r26, r18
    6234:	b3 07       	cpc	r27, r19
    6236:	e4 07       	cpc	r30, r20
    6238:	f5 07       	cpc	r31, r21
    623a:	20 f0       	brcs	.+8      	; 0x6244 <__udivmodsi4_ep>
    623c:	a2 1b       	sub	r26, r18
    623e:	b3 0b       	sbc	r27, r19
    6240:	e4 0b       	sbc	r30, r20
    6242:	f5 0b       	sbc	r31, r21

00006244 <__udivmodsi4_ep>:
    6244:	66 1f       	adc	r22, r22
    6246:	77 1f       	adc	r23, r23
    6248:	88 1f       	adc	r24, r24
    624a:	99 1f       	adc	r25, r25
    624c:	1a 94       	dec	r1
    624e:	69 f7       	brne	.-38     	; 0x622a <__udivmodsi4_loop>
    6250:	60 95       	com	r22
    6252:	70 95       	com	r23
    6254:	80 95       	com	r24
    6256:	90 95       	com	r25
    6258:	9b 01       	movw	r18, r22
    625a:	ac 01       	movw	r20, r24
    625c:	bd 01       	movw	r22, r26
    625e:	cf 01       	movw	r24, r30
    6260:	08 95       	ret

00006262 <_exit>:
    6262:	ff cf       	rjmp	.-2      	; 0x6262 <_exit>
